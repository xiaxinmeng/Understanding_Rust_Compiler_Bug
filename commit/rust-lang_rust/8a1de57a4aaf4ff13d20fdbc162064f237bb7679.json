{"sha": "8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "node_id": "C_kwDOAAsO6NoAKDhhMWRlNTdhNGFhZjRmZjEzZDIwZmRiYzE2MjA2NGYyMzdiYjc2Nzk", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-12-02T15:27:25Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-01-19T09:19:07Z"}, "message": "Use UnordSet instead of FxHashSet in define_id_collections!().", "tree": {"sha": "500e267153f2feb8dc9bdeab29b46def3439fa17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/500e267153f2feb8dc9bdeab29b46def3439fa17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "html_url": "https://github.com/rust-lang/rust/commit/8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "html_url": "https://github.com/rust-lang/rust/commit/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "22c61248b7d53275fa3e8a662c93ad7f7ae83775", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "patch": "@@ -8,7 +8,7 @@ use rustc_codegen_ssa::coverageinfo::map::{Counter, CounterExpression};\n use rustc_codegen_ssa::traits::{ConstMethods, CoverageInfoMethods};\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::DefIdSet;\n+use rustc_hir::def_id::DefId;\n use rustc_llvm::RustString;\n use rustc_middle::bug;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n@@ -291,7 +291,7 @@ fn add_unused_functions(cx: &CodegenCx<'_, '_>) {\n \n     let ignore_unused_generics = tcx.sess.instrument_coverage_except_unused_generics();\n \n-    let eligible_def_ids: DefIdSet = tcx\n+    let eligible_def_ids: Vec<DefId> = tcx\n         .mir_keys(())\n         .iter()\n         .filter_map(|local_def_id| {\n@@ -317,7 +317,9 @@ fn add_unused_functions(cx: &CodegenCx<'_, '_>) {\n \n     let codegenned_def_ids = tcx.codegened_and_inlined_items(());\n \n-    for &non_codegenned_def_id in eligible_def_ids.difference(codegenned_def_ids) {\n+    for non_codegenned_def_id in\n+        eligible_def_ids.into_iter().filter(|id| !codegenned_def_ids.contains(id))\n+    {\n         let codegen_fn_attrs = tcx.codegen_fn_attrs(non_codegenned_def_id);\n \n         // If a function is marked `#[no_coverage]`, then skip generating a"}, {"sha": "32d3cfe6fc650a2f76a19e9594bd7870ba5a8eeb", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "patch": "@@ -964,16 +964,19 @@ pub fn provide(providers: &mut Providers) {\n         };\n \n         let (defids, _) = tcx.collect_and_partition_mono_items(cratenum);\n-        for id in &*defids {\n+\n+        let any_for_speed = defids.items().any(|id| {\n             let CodegenFnAttrs { optimize, .. } = tcx.codegen_fn_attrs(*id);\n             match optimize {\n-                attr::OptimizeAttr::None => continue,\n-                attr::OptimizeAttr::Size => continue,\n-                attr::OptimizeAttr::Speed => {\n-                    return for_speed;\n-                }\n+                attr::OptimizeAttr::None | attr::OptimizeAttr::Size => false,\n+                attr::OptimizeAttr::Speed => true,\n             }\n+        });\n+\n+        if any_for_speed {\n+            return for_speed;\n         }\n+\n         tcx.sess.opts.optimize\n     };\n }"}, {"sha": "11f9def34aac51be780e67cbaa26bd896262c65f", "filename": "compiler/rustc_data_structures/src/fx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_data_structures%2Fsrc%2Ffx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_data_structures%2Fsrc%2Ffx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffx.rs?ref=8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "patch": "@@ -12,7 +12,7 @@ pub type IndexEntry<'a, K, V> = indexmap::map::Entry<'a, K, V>;\n macro_rules! define_id_collections {\n     ($map_name:ident, $set_name:ident, $entry_name:ident, $key:ty) => {\n         pub type $map_name<T> = $crate::fx::FxHashMap<$key, T>;\n-        pub type $set_name = $crate::fx::FxHashSet<$key>;\n+        pub type $set_name = $crate::unord::UnordSet<$key>;\n         pub type $entry_name<'a, T> = $crate::fx::StdEntry<'a, $key, T>;\n     };\n }"}, {"sha": "cfd7ee097a35fbba9e5e1a9b4c14e95888a9370f", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "patch": "@@ -38,17 +38,17 @@ impl<T, I: Iterator<Item = T>> UnordItems<T, I> {\n     }\n \n     #[inline]\n-    pub fn all<U, F: Fn(T) -> bool>(mut self, f: F) -> bool {\n+    pub fn all<F: Fn(T) -> bool>(mut self, f: F) -> bool {\n         self.0.all(f)\n     }\n \n     #[inline]\n-    pub fn any<U, F: Fn(T) -> bool>(mut self, f: F) -> bool {\n+    pub fn any<F: Fn(T) -> bool>(mut self, f: F) -> bool {\n         self.0.any(f)\n     }\n \n     #[inline]\n-    pub fn filter<U, F: Fn(&T) -> bool>(self, f: F) -> UnordItems<T, impl Iterator<Item = T>> {\n+    pub fn filter<F: Fn(&T) -> bool>(self, f: F) -> UnordItems<T, impl Iterator<Item = T>> {\n         UnordItems(self.0.filter(f))\n     }\n \n@@ -96,6 +96,15 @@ impl<T, I: Iterator<Item = T>> UnordItems<T, I> {\n     pub fn count(self) -> usize {\n         self.0.count()\n     }\n+\n+    #[inline]\n+    pub fn flat_map<U, F, O>(self, f: F) -> UnordItems<O, impl Iterator<Item = O>>\n+    where\n+        U: IntoIterator<Item = O>,\n+        F: Fn(T) -> U,\n+    {\n+        UnordItems(self.0.flat_map(f))\n+    }\n }\n \n impl<'a, T: Clone + 'a, I: Iterator<Item = &'a T>> UnordItems<&'a T, I> {\n@@ -193,6 +202,11 @@ impl<V: Eq + Hash> UnordSet<V> {\n     pub fn extend<I: Iterator<Item = V>>(&mut self, items: UnordItems<V, I>) {\n         self.inner.extend(items.0)\n     }\n+\n+    #[inline]\n+    pub fn clear(&mut self) {\n+        self.inner.clear();\n+    }\n }\n \n impl<V: Hash + Eq> Extend<V> for UnordSet<V> {\n@@ -201,6 +215,12 @@ impl<V: Hash + Eq> Extend<V> for UnordSet<V> {\n     }\n }\n \n+impl<V: Hash + Eq> FromIterator<V> for UnordSet<V> {\n+    fn from_iter<T: IntoIterator<Item = V>>(iter: T) -> Self {\n+        UnordSet { inner: FxHashSet::from_iter(iter) }\n+    }\n+}\n+\n impl<HCX, V: Hash + Eq + HashStable<HCX>> HashStable<HCX> for UnordSet<V> {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {"}, {"sha": "b8c1bcc5a283e027aebf8367fb5fd14e3ccca382", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use smallvec::SmallVec;\n \n use std::mem;\n use std::ops::ControlFlow;\n@@ -458,12 +459,17 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     fn visit_coercion_casts(&mut self) {\n         let fcx_typeck_results = self.fcx.typeck_results.borrow();\n-        let fcx_coercion_casts = fcx_typeck_results.coercion_casts();\n+\n         assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);\n \n-        for local_id in fcx_coercion_casts {\n-            self.typeck_results.set_coercion_cast(*local_id);\n-        }\n+        self.tcx().with_stable_hashing_context(|hcx| {\n+            let fcx_coercion_casts: SmallVec<[_; 32]> =\n+                fcx_typeck_results.coercion_casts().items().cloned().into_sorted_small_vec(&hcx);\n+\n+            for local_id in fcx_coercion_casts {\n+                self.typeck_results.set_coercion_cast(local_id);\n+            }\n+        });\n     }\n \n     fn visit_user_provided_tys(&mut self) {"}, {"sha": "3c70c9cf19a516ccdc00d91ef97324d6a86b5682", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1de57a4aaf4ff13d20fdbc162064f237bb7679/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=8a1de57a4aaf4ff13d20fdbc162064f237bb7679", "patch": "@@ -219,7 +219,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         let is_empty = sym!(is_empty);\n \n         let is_empty_method_found = current_and_super_traits\n-            .iter()\n+            .items()\n             .flat_map(|&i| cx.tcx.associated_items(i).filter_by_name_unhygienic(is_empty))\n             .any(|i| {\n                 i.kind == ty::AssocKind::Fn"}]}