{"sha": "8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOWIxMDZjZGM5YjQ4ZjQxOWU4MzQ2YTBiN2UzNWQyZDljN2RlNmY=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-10T05:23:29Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-22T02:47:11Z"}, "message": "Rename `clean::Item.source` to `span`\n\nIts type is called `clean::Span`, and also the name in the rest of\nrustdoc and rustc for this kind of field is `span`.", "tree": {"sha": "22c02303a585632a7d4ed3365345307cfe85285d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22c02303a585632a7d4ed3365345307cfe85285d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "html_url": "https://github.com/rust-lang/rust/commit/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82664191d0e8764b7435b9d72eb0e366b8b1464", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82664191d0e8764b7435b9d72eb0e366b8b1464", "html_url": "https://github.com/rust-lang/rust/commit/f82664191d0e8764b7435b9d72eb0e366b8b1464"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "9052e5954200f0753708f9bdff88f06b90234570", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         };\n \n         Some(Item {\n-            source: Span::dummy(),\n+            span: Span::dummy(),\n             name: None,\n             attrs: Default::default(),\n             visibility: Inherited,"}, {"sha": "6e7164457ceb654ec1a6842cc22b19e31de71469", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     .collect();\n \n                 impls.push(Item {\n-                    source: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n+                    span: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n                     name: None,\n                     attrs: Default::default(),\n                     visibility: Inherited,"}, {"sha": "0d32c14c3be9b38eea7def32dcddff33df976c39", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -459,7 +459,7 @@ fn build_module(\n                 items.push(clean::Item {\n                     name: None,\n                     attrs: box clean::Attributes::default(),\n-                    source: clean::Span::dummy(),\n+                    span: clean::Span::dummy(),\n                     def_id: DefId::local(CRATE_DEF_INDEX),\n                     visibility: clean::Public,\n                     kind: box clean::ImportItem(clean::Import::new_simple("}, {"sha": "e5fe1159928d5602e8417403c9796d59b873706b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -235,7 +235,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             ModuleItem(Module { is_crate: self.is_crate, items }),\n             cx,\n         );\n-        Item { source: span.clean(cx), ..what_rustc_thinks }\n+        Item { span: span.clean(cx), ..what_rustc_thinks }\n     }\n }\n \n@@ -2132,7 +2132,7 @@ fn clean_extern_crate(\n     vec![Item {\n         name: Some(name),\n         attrs: box attrs.clean(cx),\n-        source: krate.span.clean(cx),\n+        span: krate.span.clean(cx),\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },"}, {"sha": "942f9a6607c01a05a2aed3c868470d29e4e73305", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -81,13 +81,19 @@ crate struct ExternalCrate {\n /// directly to the AST's concept of an item; it's a strict superset.\n #[derive(Clone)]\n crate struct Item {\n-    /// Stringified span\n-    crate source: Span,\n-    /// Not everything has a name. E.g., impls\n+    /// The [`Span`] of this item in the source code.\n+    crate span: Span,\n+    /// The name of this item.\n+    /// Optional because not every item has a name, e.g. impls.\n     crate name: Option<Symbol>,\n+    /// Attributes on this item, e.g. `#[derive(...)]` or `#[inline]`.\n     crate attrs: Box<Attributes>,\n+    /// The visibility of this item (private, `pub`, `pub(crate)`, etc.).\n     crate visibility: Visibility,\n+    /// Information about this item that is specific to what kind of item it is.\n+    /// E.g., struct vs enum vs function.\n     crate kind: Box<ItemKind>,\n+    /// The [`DefId`] of this item.\n     crate def_id: DefId,\n }\n \n@@ -100,7 +106,7 @@ impl fmt::Debug for Item {\n         let def_id: &dyn fmt::Debug = if self.is_fake() { &\"**FAKE**\" } else { &self.def_id };\n \n         fmt.debug_struct(\"Item\")\n-            .field(\"source\", &self.source)\n+            .field(\"source\", &self.span)\n             .field(\"name\", &self.name)\n             .field(\"attrs\", &self.attrs)\n             .field(\"kind\", &self.kind)\n@@ -165,7 +171,7 @@ impl Item {\n         debug!(\"name={:?}, def_id={:?}\", name, def_id);\n \n         // `span_if_local()` lies about functions and only gives the span of the function signature\n-        let source = def_id.as_local().map_or_else(\n+        let span = def_id.as_local().map_or_else(\n             || cx.tcx.def_span(def_id),\n             |local| {\n                 let hir = cx.tcx.hir();\n@@ -177,7 +183,7 @@ impl Item {\n             def_id,\n             kind: box kind,\n             name,\n-            source: source.clean(cx),\n+            span: span.clean(cx),\n             attrs,\n             visibility: cx.tcx.visibility(def_id).clean(cx),\n         }"}, {"sha": "05993d8df6036ce4ec9e5fef4b585d634feae368", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -228,15 +228,15 @@ impl<'tcx> Context<'tcx> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     pub(super) fn src_href(&self, item: &clean::Item) -> Option<String> {\n-        if item.source.is_dummy() {\n+        if item.span.is_dummy() {\n             return None;\n         }\n         let mut root = self.root_path();\n         let mut path = String::new();\n-        let cnum = item.source.cnum(self.sess());\n+        let cnum = item.span.cnum(self.sess());\n \n         // We can safely ignore synthetic `SourceFile`s.\n-        let file = match item.source.filename(self.sess()) {\n+        let file = match item.span.filename(self.sess()) {\n             FileName::Real(ref path) => path.local_path().to_path_buf(),\n             _ => return None,\n         };\n@@ -270,8 +270,8 @@ impl<'tcx> Context<'tcx> {\n             (&*symbol, &path)\n         };\n \n-        let loline = item.source.lo(self.sess()).line;\n-        let hiline = item.source.hi(self.sess()).line;\n+        let loline = item.span.lo(self.sess()).line;\n+        let hiline = item.span.hi(self.sess()).line;\n         let lines =\n             if loline == hiline { loline.to_string() } else { format!(\"{}-{}\", loline, hiline) };\n         Some(format!("}, {"sha": "71a75b363b9656976c3a141ff19ba23e251c2b49", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -937,7 +937,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             Some(\"macro\"),\n             None,\n             None,\n-            it.source.span().edition(),\n+            it.span.span().edition(),\n         );\n     });\n     document(w, cx, it, None)"}, {"sha": "1b6a82fed1170723d0b5c5196cde281b28b1aac8", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -41,11 +41,11 @@ impl DocFolder for SourceCollector<'_, '_> {\n         // then we need to render it out to the filesystem.\n         if self.scx.include_sources\n             // skip all synthetic \"files\"\n-            && item.source.filename(self.sess()).is_real()\n+            && item.span.filename(self.sess()).is_real()\n             // skip non-local files\n-            && item.source.cnum(self.sess()) == LOCAL_CRATE\n+            && item.span.cnum(self.sess()) == LOCAL_CRATE\n         {\n-            let filename = item.source.filename(self.sess());\n+            let filename = item.span.filename(self.sess());\n             // If it turns out that we couldn't read this file, then we probably\n             // can't read any of the files (generating html output from json or\n             // something like that), so just don't include sources for the"}, {"sha": "2b3d5fd74655f1df1943b1285f7e568cc24669ff", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -24,7 +24,7 @@ use std::collections::HashSet;\n impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n         let deprecation = item.deprecation(self.tcx);\n-        let clean::Item { source, name, attrs, kind, visibility, def_id } = item;\n+        let clean::Item { span, name, attrs, kind, visibility, def_id } = item;\n         let inner = match *kind {\n             clean::StrippedItem(_) => return None,\n             x => from_clean_item_kind(x, self.tcx, &name),\n@@ -33,7 +33,7 @@ impl JsonRenderer<'_> {\n             id: from_def_id(def_id),\n             crate_id: def_id.krate.as_u32(),\n             name: name.map(|sym| sym.to_string()),\n-            source: self.convert_span(source),\n+            source: self.convert_span(span),\n             visibility: self.convert_visibility(visibility),\n             docs: attrs.collapsed_doc_value(),\n             links: attrs"}, {"sha": "a2f8eb3772efd056d9ea3ce06761927b07bfa864", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 return Some(i);\n             }\n             clean::ImplItem(ref impl_) => {\n-                let filename = i.source.filename(self.ctx.sess());\n+                let filename = i.span.filename(self.ctx.sess());\n                 if let Some(ref tr) = impl_.trait_ {\n                     debug!(\n                         \"impl {:#} for {:#} in {}\",\n@@ -243,7 +243,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                     None,\n                 );\n \n-                let filename = i.source.filename(self.ctx.sess());\n+                let filename = i.span.filename(self.ctx.sess());\n                 let has_doc_example = tests.found_tests != 0;\n                 let hir_id = self.ctx.tcx.hir().local_def_id_to_hir_id(i.def_id.expect_local());\n                 let (level, source) = self.ctx.tcx.lint_level_at_node(MISSING_DOCS, hir_id);"}, {"sha": "a8d5eaab681e321e2ec86e08a50c11d59192ac33", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                 // We couldn't calculate the span of the markdown block that had the error, so our\n                 // diagnostics are going to be a bit lacking.\n                 let mut diag = self.cx.sess().struct_span_warn(\n-                    super::span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+                    super::span_of_attrs(&item.attrs).unwrap_or(item.span.span()),\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n \n@@ -110,7 +110,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         if let Some(dox) = &item.attrs.collapsed_doc_value() {\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.span());\n             let extra = crate::html::markdown::ExtraInfo::new_did(self.cx.tcx, item.def_id, sp);\n             for code_block in markdown::rust_code_blocks(&dox, &extra) {\n                 self.check_rust_syntax(&item, &dox, code_block);"}, {"sha": "9d65398bd124107d54efb33616ddd16ec4274091", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -1226,9 +1226,7 @@ impl LinkCollector<'_, '_> {\n                             &ori_link.range,\n                             &item.attrs,\n                         )\n-                        .unwrap_or_else(|| {\n-                            span_of_attrs(&item.attrs).unwrap_or(item.source.span())\n-                        });\n+                        .unwrap_or_else(|| span_of_attrs(&item.attrs).unwrap_or(item.span.span()));\n \n                         rustc_session::parse::feature_err(\n                             &self.cx.tcx.sess.parse_sess,\n@@ -1693,7 +1691,7 @@ fn report_diagnostic(\n     };\n \n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n+    let sp = span_of_attrs(attrs).unwrap_or(item.span.span());\n \n     tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);"}, {"sha": "83017bf458a8ed45b67bf61d2ed3ca7d1b4a978d", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -97,7 +97,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     if tests.found_tests == 0 && cx.tcx.sess.is_nightly_build() {\n         if should_have_doc_example(cx, &item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n-            let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n+            let sp = span_of_attrs(&item.attrs).unwrap_or(item.span.span());\n             cx.tcx.struct_span_lint_hir(\n                 crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n@@ -109,7 +109,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n         cx.tcx.struct_span_lint_hir(\n             crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n-            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+            span_of_attrs(&item.attrs).unwrap_or(item.span.span()),\n             |lint| lint.build(\"documentation test in private item\").emit(),\n         );\n     }"}, {"sha": "4ce688f32b99f8094d78e1a64a96c0ac944aec3d", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n                 let sp = match super::source_span_for_markdown_range(tcx, &dox, range, &item.attrs)\n                 {\n                     Some(sp) => sp,\n-                    None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+                    None => span_of_attrs(&item.attrs).unwrap_or(item.span.span()),\n                 };\n                 tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n                     lint.build(msg).emit()"}, {"sha": "9bc65b6da24487fa59ad8f94e455398969354a60", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=8b9b106cdc9b48f419e8346a0b7e35d2d9c7de6f", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n             let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n                 let sp = super::source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n                     .or_else(|| span_of_attrs(&item.attrs))\n-                    .unwrap_or(item.source.span());\n+                    .unwrap_or(item.span.span());\n                 cx.tcx.struct_span_lint_hir(crate::lint::NON_AUTOLINKS, hir_id, sp, |lint| {\n                     lint.build(msg)\n                         .span_suggestion("}]}