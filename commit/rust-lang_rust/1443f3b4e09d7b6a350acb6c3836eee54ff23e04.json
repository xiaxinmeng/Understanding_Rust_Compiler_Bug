{"sha": "1443f3b4e09d7b6a350acb6c3836eee54ff23e04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDNmM2I0ZTA5ZDdiNmEzNTBhY2I2YzM4MzZlZWU1NGZmMjNlMDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-25T01:05:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-25T01:05:26Z"}, "message": "Rollup merge of #60243 - davidtwco:issue-53249, r=cramertj\n\nAdd regression test for #53249.\n\nFixes #53249.\n\nr? @cramertj", "tree": {"sha": "172e11118c702cfd535842c7d09c162c4f2aa040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/172e11118c702cfd535842c7d09c162c4f2aa040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1443f3b4e09d7b6a350acb6c3836eee54ff23e04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcwQfWCRBK7hj4Ov3rIwAAdHIIAJPlxiKTVxvtADuwuYkcPrdF\nW8maoAdop3dpewLhJjh5GFDqd2vKenebpKj7araXvYNpysv37UmrYrcHT5/6KgYe\nbjEW7z4sdRsfWvCi2ZHsZSGTZriuj8lZl27eQUwgjBwTNmwWdxJt2rqnymQhkV6h\nAbKYj9bBQLFncU4R+UWhkEt9kArTiIc+I4lMyKHmR3euTOJjKe1auQ4IgSSv8SZI\nmIU+qq24r6ynBENPIGbAn49FSrXgzgmJSX7394u4Ko14CcjYxQM8/pxAvfVc7bWT\n3tQMGNLMzL9qzOCXB+YpkwHaV2QE+uFREzSj7ZgqRtF9blBmhsgIjRoCbpjKFuQ=\n=+UeP\n-----END PGP SIGNATURE-----\n", "payload": "tree 172e11118c702cfd535842c7d09c162c4f2aa040\nparent 3fffcd33141da118c0224914bf9418ba9c37d157\nparent 04023dc22da3f3329ba1eadc8ceb132a70a333d9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556154326 +0200\ncommitter GitHub <noreply@github.com> 1556154326 +0200\n\nRollup merge of #60243 - davidtwco:issue-53249, r=cramertj\n\nAdd regression test for #53249.\n\nFixes #53249.\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1443f3b4e09d7b6a350acb6c3836eee54ff23e04", "html_url": "https://github.com/rust-lang/rust/commit/1443f3b4e09d7b6a350acb6c3836eee54ff23e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1443f3b4e09d7b6a350acb6c3836eee54ff23e04/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fffcd33141da118c0224914bf9418ba9c37d157", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fffcd33141da118c0224914bf9418ba9c37d157", "html_url": "https://github.com/rust-lang/rust/commit/3fffcd33141da118c0224914bf9418ba9c37d157"}, {"sha": "04023dc22da3f3329ba1eadc8ceb132a70a333d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/04023dc22da3f3329ba1eadc8ceb132a70a333d9", "html_url": "https://github.com/rust-lang/rust/commit/04023dc22da3f3329ba1eadc8ceb132a70a333d9"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "9e4ff43ecd112486021e775a64f1a4e4a1cff8a5", "filename": "src/test/ui/issue-53249.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1443f3b4e09d7b6a350acb6c3836eee54ff23e04/src%2Ftest%2Fui%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1443f3b4e09d7b6a350acb6c3836eee54ff23e04/src%2Ftest%2Fui%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53249.rs?ref=1443f3b4e09d7b6a350acb6c3836eee54ff23e04", "patch": "@@ -0,0 +1,47 @@\n+// compile-pass\n+// edition:2018\n+\n+#![feature(arbitrary_self_types, async_await, await_macro)]\n+\n+use std::task::{self, Poll};\n+use std::future::Future;\n+use std::marker::Unpin;\n+use std::pin::Pin;\n+\n+// This is a regression test for a ICE/unbounded recursion issue relating to async-await.\n+\n+#[derive(Debug)]\n+#[must_use = \"futures do nothing unless polled\"]\n+pub struct Lazy<F> {\n+    f: Option<F>\n+}\n+\n+impl<F> Unpin for Lazy<F> {}\n+\n+pub fn lazy<F, R>(f: F) -> Lazy<F>\n+    where F: FnOnce(&mut task::Context) -> R,\n+{\n+    Lazy { f: Some(f) }\n+}\n+\n+impl<R, F> Future for Lazy<F>\n+    where F: FnOnce(&mut task::Context) -> R,\n+{\n+    type Output = R;\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut task::Context) -> Poll<R> {\n+        Poll::Ready((self.f.take().unwrap())(cx))\n+    }\n+}\n+\n+async fn __receive<WantFn, Fut>(want: WantFn) -> ()\n+    where Fut: Future<Output = ()>, WantFn: Fn(&Box<Send + 'static>) -> Fut,\n+{\n+    await!(lazy(|_| ()));\n+}\n+\n+pub fn basic_spawn_receive() {\n+    async { await!(__receive(|_| async { () })) };\n+}\n+\n+fn main() {}"}]}