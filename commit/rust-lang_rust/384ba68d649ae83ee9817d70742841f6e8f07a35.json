{"sha": "384ba68d649ae83ee9817d70742841f6e8f07a35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NGJhNjhkNjQ5YWU4M2VlOTgxN2Q3MDc0Mjg0MWY2ZThmMDdhMzU=", "commit": {"author": {"name": "Michael Morgan", "email": "morgan.michael@me.com", "date": "2021-01-12T19:29:11Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-01-28T02:58:42Z"}, "message": "Add imports_granularity=\"Item\".\n\nThis option splits all imports into their own `use` statement.", "tree": {"sha": "fa7d5d7df046dbffc33152bd69ef78553fef895b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7d5d7df046dbffc33152bd69ef78553fef895b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384ba68d649ae83ee9817d70742841f6e8f07a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384ba68d649ae83ee9817d70742841f6e8f07a35", "html_url": "https://github.com/rust-lang/rust/commit/384ba68d649ae83ee9817d70742841f6e8f07a35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384ba68d649ae83ee9817d70742841f6e8f07a35/comments", "author": {"login": "msmorgan", "id": 94825, "node_id": "MDQ6VXNlcjk0ODI1", "avatar_url": "https://avatars.githubusercontent.com/u/94825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msmorgan", "html_url": "https://github.com/msmorgan", "followers_url": "https://api.github.com/users/msmorgan/followers", "following_url": "https://api.github.com/users/msmorgan/following{/other_user}", "gists_url": "https://api.github.com/users/msmorgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msmorgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msmorgan/subscriptions", "organizations_url": "https://api.github.com/users/msmorgan/orgs", "repos_url": "https://api.github.com/users/msmorgan/repos", "events_url": "https://api.github.com/users/msmorgan/events{/privacy}", "received_events_url": "https://api.github.com/users/msmorgan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e14f760c5064a3993c487198ad2cf4a748a2c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e14f760c5064a3993c487198ad2cf4a748a2c96", "html_url": "https://github.com/rust-lang/rust/commit/5e14f760c5064a3993c487198ad2cf4a748a2c96"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "c92be5df010315a7c61a947eb691d85c6345eb91", "filename": "Configurations.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/384ba68d649ae83ee9817d70742841f6e8f07a35/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/384ba68d649ae83ee9817d70742841f6e8f07a35/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=384ba68d649ae83ee9817d70742841f6e8f07a35", "patch": "@@ -1620,7 +1620,7 @@ pub enum Foo {}\n How imports should be grouped into `use` statements. Imports will be merged or split to the configured level of granularity.\n \n - **Default value**: `Preserve`\n-- **Possible values**: `Preserve`, `Crate`, `Module`\n+- **Possible values**: `Preserve`, `Crate`, `Module`, `Item`\n - **Stable**: No\n \n #### `Preserve` (default):\n@@ -1659,6 +1659,21 @@ use foo::{a, b, c};\n use qux::{h, i};\n ```\n \n+#### `Item`:\n+\n+Flatten imports so that each has its own `use` statement.\n+\n+```rust\n+use foo::a;\n+use foo::b;\n+use foo::b::f;\n+use foo::b::g;\n+use foo::c;\n+use foo::d::e;\n+use qux::h;\n+use qux::i;\n+```\n+\n ## `merge_imports`\n \n This option is deprecated. Use `imports_granularity = \"Crate\"` instead."}, {"sha": "c0491630c000e2bdd4c5bbbdc87cd80b20a46aa2", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/384ba68d649ae83ee9817d70742841f6e8f07a35/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384ba68d649ae83ee9817d70742841f6e8f07a35/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=384ba68d649ae83ee9817d70742841f6e8f07a35", "patch": "@@ -121,6 +121,8 @@ pub enum ImportGranularity {\n     Crate,\n     /// Use one `use` statement per module.\n     Module,\n+    /// Use one `use` statement per imported item.\n+    Item,\n }\n \n #[config_type]"}, {"sha": "0f635fe1ccb3584210a21debfaa5f423384f556a", "filename": "src/imports.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/384ba68d649ae83ee9817d70742841f6e8f07a35/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384ba68d649ae83ee9817d70742841f6e8f07a35/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=384ba68d649ae83ee9817d70742841f6e8f07a35", "patch": "@@ -181,6 +181,24 @@ pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>, merge_by: SharedPrefix) -\n     result\n }\n \n+pub(crate) fn flatten_use_trees(use_trees: Vec<UseTree>) -> Vec<UseTree> {\n+    use_trees\n+        .into_iter()\n+        .flat_map(UseTree::flatten)\n+        .map(|mut tree| {\n+            // If a path ends in `::self`, rewrite it to `::{self}`.\n+            if let Some(UseSegment::Slf(..)) = tree.path.last() {\n+                let self_segment = tree.path.pop().unwrap();\n+                tree.path.push(UseSegment::List(vec![UseTree::from_path(\n+                    vec![self_segment],\n+                    DUMMY_SP,\n+                )]));\n+            }\n+            tree\n+        })\n+        .collect()\n+}\n+\n impl fmt::Debug for UseTree {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, f)\n@@ -1084,6 +1102,25 @@ mod test {\n         );\n     }\n \n+    #[test]\n+    fn test_flatten_use_trees() {\n+        assert_eq!(\n+            flatten_use_trees(parse_use_trees![\"foo::{a::{b, c}, d::e}\"]),\n+            parse_use_trees![\"foo::a::b\", \"foo::a::c\", \"foo::d::e\"]\n+        );\n+\n+        assert_eq!(\n+            flatten_use_trees(parse_use_trees![\"foo::{self, a, b::{c, d}, e::*}\"]),\n+            parse_use_trees![\n+                \"foo::{self}\",\n+                \"foo::a\",\n+                \"foo::b::c\",\n+                \"foo::b::d\",\n+                \"foo::e::*\"\n+            ]\n+        );\n+    }\n+\n     #[test]\n     fn test_use_tree_flatten() {\n         assert_eq!("}, {"sha": "ac65ff2c1086e853edfd5e10ac355fe93631657c", "filename": "src/reorder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/384ba68d649ae83ee9817d70742841f6e8f07a35/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384ba68d649ae83ee9817d70742841f6e8f07a35/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=384ba68d649ae83ee9817d70742841f6e8f07a35", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::ast;\n use rustc_span::{symbol::sym, Span};\n \n use crate::config::{Config, GroupImportsTactic, ImportGranularity};\n-use crate::imports::{merge_use_trees, SharedPrefix, UseSegment, UseTree};\n+use crate::imports::{flatten_use_trees, merge_use_trees, SharedPrefix, UseSegment, UseTree};\n use crate::items::{is_mod_decl, rewrite_extern_crate, rewrite_mod};\n use crate::lists::{itemize_list, write_list, ListFormatting, ListItem};\n use crate::rewrite::RewriteContext;\n@@ -107,15 +107,14 @@ fn rewrite_reorderable_or_regroupable_items(\n             for (item, list_item) in normalized_items.iter_mut().zip(list_items) {\n                 item.list_item = Some(list_item.clone());\n             }\n-            match context.config.imports_granularity() {\n-                ImportGranularity::Crate => {\n-                    normalized_items = merge_use_trees(normalized_items, SharedPrefix::Crate)\n-                }\n+            normalized_items = match context.config.imports_granularity() {\n+                ImportGranularity::Crate => merge_use_trees(normalized_items, SharedPrefix::Crate),\n                 ImportGranularity::Module => {\n-                    normalized_items = merge_use_trees(normalized_items, SharedPrefix::Module)\n+                    merge_use_trees(normalized_items, SharedPrefix::Module)\n                 }\n-                ImportGranularity::Preserve => {}\n-            }\n+                ImportGranularity::Item => flatten_use_trees(normalized_items),\n+                ImportGranularity::Preserve => normalized_items,\n+            };\n \n             let mut regrouped_items = match context.config.group_imports() {\n                 GroupImportsTactic::Preserve => vec![normalized_items],"}, {"sha": "d0e94df66ae2a25b620b09fc7b646c63036f8d8b", "filename": "tests/source/imports_granularity_item.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/384ba68d649ae83ee9817d70742841f6e8f07a35/tests%2Fsource%2Fimports_granularity_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384ba68d649ae83ee9817d70742841f6e8f07a35/tests%2Fsource%2Fimports_granularity_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports_granularity_item.rs?ref=384ba68d649ae83ee9817d70742841f6e8f07a35", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-imports_granularity: Item\n+\n+use a::{b, c, d};\n+use a::{f::g, h::{i, j}};\n+use a::{l::{self, m, n::o, p::*}};\n+use a::q::{self};"}, {"sha": "eace785e6705e9e1c170d429248eeb63b345c976", "filename": "tests/target/imports_granularity_item.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/384ba68d649ae83ee9817d70742841f6e8f07a35/tests%2Ftarget%2Fimports_granularity_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384ba68d649ae83ee9817d70742841f6e8f07a35/tests%2Ftarget%2Fimports_granularity_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports_granularity_item.rs?ref=384ba68d649ae83ee9817d70742841f6e8f07a35", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-imports_granularity: Item\n+\n+use a::b;\n+use a::c;\n+use a::d;\n+use a::f::g;\n+use a::h::i;\n+use a::h::j;\n+use a::l::m;\n+use a::l::n::o;\n+use a::l::p::*;\n+use a::l::{self};\n+use a::q::{self};"}]}