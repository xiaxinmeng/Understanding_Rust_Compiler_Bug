{"sha": "a9f8d3c8fdc18080df800e65d73a737ccfd08933", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjhkM2M4ZmRjMTgwODBkZjgwMGU2NWQ3M2E3MzdjY2ZkMDg5MzM=", "commit": {"author": {"name": "A.A.Abroskin", "email": "arkweid@evilmartians.com", "date": "2019-01-09T18:30:47Z"}, "committer": {"name": "A.A.Abroskin", "email": "arkweid@evilmartians.com", "date": "2019-01-09T18:30:47Z"}, "message": "add assert(true/false, some message) tests", "tree": {"sha": "e1c4e561613cc0000c48a708eb4e23f7ab57f8ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1c4e561613cc0000c48a708eb4e23f7ab57f8ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f8d3c8fdc18080df800e65d73a737ccfd08933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f8d3c8fdc18080df800e65d73a737ccfd08933", "html_url": "https://github.com/rust-lang/rust/commit/a9f8d3c8fdc18080df800e65d73a737ccfd08933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f8d3c8fdc18080df800e65d73a737ccfd08933/comments", "author": null, "committer": null, "parents": [{"sha": "7075015f311617710dcebfe6530bdca732287994", "url": "https://api.github.com/repos/rust-lang/rust/commits/7075015f311617710dcebfe6530bdca732287994", "html_url": "https://github.com/rust-lang/rust/commit/7075015f311617710dcebfe6530bdca732287994"}], "stats": {"total": 102, "additions": 79, "deletions": 23}, "files": [{"sha": "f88ef8e83edb7d5dcab9ce8dca4bf160689a504c", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8d3c8fdc18080df800e65d73a737ccfd08933/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8d3c8fdc18080df800e65d73a737ccfd08933/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=a9f8d3c8fdc18080df800e65d73a737ccfd08933", "patch": "@@ -7,17 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use crate::consts::{constant, Constant};\n use crate::rustc::hir::{Expr, ExprKind};\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::syntax::ast::LitKind;\n-use crate::utils::{is_direct_expn_of, span_lint, span_lint_and_sugg};\n-use rustc_errors::Applicability;\n+use crate::utils::{is_direct_expn_of, span_help_and_lint};\n use if_chain::if_chain;\n \n-/// **What it does:** Check explicit call assert!(true/false)\n+/// **What it does:** Check to call assert!(true/false)\n ///\n-/// **Why is this bad?** Will be optimized out by the compiler or should probably be replaced by a panic!() or unreachable!()\n+/// **Why is this bad?** Will be optimized out by the compiler or should probably be replaced by a\n+/// panic!() or unreachable!()\n ///\n /// **Known problems:** None\n ///\n@@ -49,24 +50,36 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n         if_chain! {\n             if is_direct_expn_of(e.span, \"assert\").is_some();\n             if let ExprKind::Unary(_, ref lit) = e.node;\n-            if let ExprKind::Lit(ref inner) = lit.node;\n             then {\n-                match inner.node {\n-                    LitKind::Bool(true) => {\n-                        span_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n-                            \"assert!(true) will be optimized out by the compiler\");\n-                    },\n-                    LitKind::Bool(false) => {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            ASSERTIONS_ON_CONSTANTS,\n-                            e.span,\n-                            \"assert!(false) should probably be replaced\",\n-                            \"try\",\n-                            \"panic!()\".to_string(),\n-                            Applicability::MachineApplicable);\n-                    },\n-                    _ => (),\n+                if let ExprKind::Lit(ref inner) = lit.node {\n+                    match inner.node {\n+                        LitKind::Bool(true) => {\n+                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n+                                \"assert!(true) will be optimized out by the compiler\",\n+                                \"remove it\");\n+                        },\n+                        LitKind::Bool(false) => {\n+                            span_help_and_lint(\n+                                cx, ASSERTIONS_ON_CONSTANTS, e.span,\n+                                \"assert!(false) should probably be replaced\",\n+                                \"use panic!() or unreachable!()\");\n+                        },\n+                        _ => (),\n+                    }\n+                } else if let Some(bool_const) = constant(cx, cx.tables, lit) {\n+                    match bool_const.0 {\n+                        Constant::Bool(true) => {\n+                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n+                                \"assert!(const: true) will be optimized out by the compiler\",\n+                                \"remove it\");\n+                        },\n+                        Constant::Bool(false) => {\n+                            span_help_and_lint(cx, ASSERTIONS_ON_CONSTANTS, e.span,\n+                                \"assert!(const: false) should probably be replaced\",\n+                                \"use panic!() or unreachable!()\");\n+                        },\n+                        _ => (),\n+                    }\n                 }\n             }\n         }"}, {"sha": "dcefe83f8c2f9f4bdf83dfb17f7dc9b9de46796a", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8d3c8fdc18080df800e65d73a737ccfd08933/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8d3c8fdc18080df800e65d73a737ccfd08933/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=a9f8d3c8fdc18080df800e65d73a737ccfd08933", "patch": "@@ -10,4 +10,12 @@\n fn main() {\n     assert!(true);\n     assert!(false);\n+    assert!(true, \"true message\");\n+    assert!(false, \"false message\");\n+\n+    const B: bool = true;\n+    assert!(B);\n+\n+    const C: bool = false;\n+    assert!(C);\n }"}, {"sha": "1f1a80e0e77b9cb6fd72418c96b07f2605ad0f27", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8d3c8fdc18080df800e65d73a737ccfd08933/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8d3c8fdc18080df800e65d73a737ccfd08933/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=a9f8d3c8fdc18080df800e65d73a737ccfd08933", "patch": "@@ -5,12 +5,47 @@ LL |     assert!(true);\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n+   = help: remove it\n \n error: assert!(false) should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false);\n-   |     ^^^^^^^^^^^^^^^ help: try: `panic!()`\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: use panic!() or unreachable!()\n+\n+error: assert!(true) will be optimized out by the compiler\n+  --> $DIR/assertions_on_constants.rs:13:5\n+   |\n+LL |     assert!(true, \"true message\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove it\n+\n+error: assert!(false) should probably be replaced\n+  --> $DIR/assertions_on_constants.rs:14:5\n+   |\n+LL |     assert!(false, \"false message\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use panic!() or unreachable!()\n+\n+error: assert!(const: true) will be optimized out by the compiler\n+  --> $DIR/assertions_on_constants.rs:17:5\n+   |\n+LL |     assert!(B);\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove it\n+\n+error: assert!(const: false) should probably be replaced\n+  --> $DIR/assertions_on_constants.rs:20:5\n+   |\n+LL |     assert!(C);\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: use panic!() or unreachable!()\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 6 previous errors\n "}]}