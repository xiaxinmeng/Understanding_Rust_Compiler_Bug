{"sha": "3abdcd470901ef8cec81314558f11571c75911dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYmRjZDQ3MDkwMWVmOGNlYzgxMzE0NTU4ZjExNTcxYzc1OTExZGQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-21T18:22:29Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2015-12-21T18:36:58Z"}, "message": "Implement #364", "tree": {"sha": "fc748edf799b7fb95f278bbea75467ef2b0f7569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc748edf799b7fb95f278bbea75467ef2b0f7569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3abdcd470901ef8cec81314558f11571c75911dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3abdcd470901ef8cec81314558f11571c75911dd", "html_url": "https://github.com/rust-lang/rust/commit/3abdcd470901ef8cec81314558f11571c75911dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3abdcd470901ef8cec81314558f11571c75911dd/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd3c649adb1055f3561f6c9b2efa59141e456431", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3c649adb1055f3561f6c9b2efa59141e456431", "html_url": "https://github.com/rust-lang/rust/commit/cd3c649adb1055f3561f6c9b2efa59141e456431"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "dc8fd37dfc9ca90d41021160b3c99abdd3212342", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3abdcd470901ef8cec81314558f11571c75911dd/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3abdcd470901ef8cec81314558f11571c75911dd/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3abdcd470901ef8cec81314558f11571c75911dd", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 84 lints included in this crate:\n+There are 85 lints included in this crate:\n \n name                                                                                                     | default | meaning\n ---------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -58,6 +58,7 @@ name\n [option_map_unwrap_or](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or)             | warn    | using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`)\n [option_map_unwrap_or_else](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or_else)   | warn    | using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`)\n [option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)                 | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n+[out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)         | deny    | out of bound constant indexing\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                 | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                       | warn    | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n [range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                 | warn    | using Range::step_by(0), which produces an infinite iterator"}, {"sha": "d72adac943f4200fc508e0ae636674e32ae29f16", "filename": "src/array_indexing.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3abdcd470901ef8cec81314558f11571c75911dd/src%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abdcd470901ef8cec81314558f11571c75911dd/src%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farray_indexing.rs?ref=3abdcd470901ef8cec81314558f11571c75911dd", "patch": "@@ -0,0 +1,52 @@\n+use rustc::lint::*;\n+use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n+use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n+use rustc::middle::ty::TyArray;\n+use rustc_front::hir::*;\n+use utils::span_lint;\n+\n+/// **What it does:** Check for out of bounds array indexing with a constant index.\n+///\n+/// **Why is this bad?** This will always panic at runtime.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+///\n+/// ```\n+/// let x = [1,2,3,4];\n+/// ...\n+/// x[9];\n+/// ```\n+declare_lint! {\n+    pub OUT_OF_BOUNDS_INDEXING,\n+    Deny,\n+    \"out of bound constant indexing\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct ArrayIndexing;\n+\n+impl LintPass for ArrayIndexing {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(OUT_OF_BOUNDS_INDEXING)\n+    }\n+}\n+\n+impl LateLintPass for ArrayIndexing {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let ExprIndex(ref array, ref index) = e.node {\n+            let ty = cx.tcx.expr_ty(array);\n+\n+            if let TyArray(_, size) = ty.sty {\n+                let index = eval_const_expr_partial(cx.tcx, &index, ExprTypeChecked, None);\n+                if let Ok(ConstVal::Uint(index)) = index {\n+                    if size as u64 <= index {\n+                        span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span,\n+                                  \"const index-expr is out of bounds\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "29b911a0cb249d633dc2dd725654575eecc4b0bd", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3abdcd470901ef8cec81314558f11571c75911dd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abdcd470901ef8cec81314558f11571c75911dd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3abdcd470901ef8cec81314558f11571c75911dd", "patch": "@@ -66,6 +66,7 @@ pub mod transmute;\n pub mod cyclomatic_complexity;\n pub mod escape;\n pub mod misc_early;\n+pub mod array_indexing;\n \n mod reexport {\n     pub use syntax::ast::{Name, NodeId};\n@@ -121,6 +122,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box escape::EscapePass);\n     reg.register_early_lint_pass(box misc_early::MiscEarly);\n     reg.register_late_lint_pass(box misc::UsedUnderscoreBinding);\n+    reg.register_late_lint_pass(box array_indexing::ArrayIndexing);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -143,6 +145,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n \n     reg.register_lint_group(\"clippy\", vec![\n         approx_const::APPROX_CONSTANT,\n+        array_indexing::OUT_OF_BOUNDS_INDEXING,\n         attrs::INLINE_ALWAYS,\n         bit_mask::BAD_BIT_MASK,\n         bit_mask::INEFFECTIVE_BIT_MASK,"}, {"sha": "68ab71da586c9eebbd358a8ee63c433c1d155676", "filename": "tests/compile-fail/array_indexing.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3abdcd470901ef8cec81314558f11571c75911dd/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abdcd470901ef8cec81314558f11571c75911dd/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=3abdcd470901ef8cec81314558f11571c75911dd", "patch": "@@ -0,0 +1,12 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(out_of_bounds_indexing)]\n+\n+fn main() {\n+    let x = [1,2,3,4];\n+    x[0];\n+    x[3];\n+    x[4]; //~ERROR: const index-expr is out of bounds\n+    x[1 << 3]; //~ERROR: const index-expr is out of bounds\n+}"}]}