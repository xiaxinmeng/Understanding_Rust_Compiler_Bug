{"sha": "b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDNhZmNhOWI5MGFkNmU0Njg5YjZkNjEzYWI1MWY5ZDNiYTE1ZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T19:31:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T19:31:14Z"}, "message": "Auto merge of #70816 - Dylan-DPC:rollup-kzcs8px, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #67797 (Query-ify Instance::resolve)\n - #70777 (Don't import integer and float modules, use assoc consts)\n - #70795 (Keep track of position when deleting from a BTreeMap)\n - #70812 (Do not use \"nil\" to refer to `()`)\n - #70815 (Enable layout debugging for `impl Trait` type aliases)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "4262c77dc300c90a3b183a0f76653e6cc015158c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4262c77dc300c90a3b183a0f76653e6cc015158c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "html_url": "https://github.com/rust-lang/rust/commit/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6387b09153939b2a104cd63148598a5f458de2c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6387b09153939b2a104cd63148598a5f458de2c2", "html_url": "https://github.com/rust-lang/rust/commit/6387b09153939b2a104cd63148598a5f458de2c2"}, {"sha": "8c081f69fb35814710649c54cc23aff05c06881b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c081f69fb35814710649c54cc23aff05c06881b", "html_url": "https://github.com/rust-lang/rust/commit/8c081f69fb35814710649c54cc23aff05c06881b"}], "stats": {"total": 322, "additions": 164, "deletions": 158}, "files": [{"sha": "7e67e2b1246ef2f4798fcb374c6cec67b1a31edc", "filename": "src/etc/test-float-parse/u64-pow2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,7 +1,6 @@\n mod _common;\n \n use _common::validate;\n-use std::u64;\n \n fn main() {\n     for exp in 19..64 {"}, {"sha": "d31c73cc1bd8d576e3e2492d46bce1e0c3e34f36", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -4,7 +4,6 @@\n \n use core::intrinsics::{self, min_align_of_val, size_of_val};\n use core::ptr::{NonNull, Unique};\n-use core::usize;\n \n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]"}, {"sha": "a01e9b25dd6c8715f2611efb53ce03a940bb8ccf", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -20,7 +20,6 @@\n //! ```\n //! use std::cmp::Ordering;\n //! use std::collections::BinaryHeap;\n-//! use std::usize;\n //!\n //! #[derive(Copy, Clone, Eq, PartialEq)]\n //! struct State {"}, {"sha": "70968964f476e1b821631a4c56e237d006998a6f", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 59, "deletions": 49, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1780,18 +1780,12 @@ where\n     where\n         F: FnMut(&K, &mut V) -> bool,\n     {\n-        while let Some(kv) = unsafe { self.next_kv() } {\n-            let (k, v) = unsafe { ptr::read(&kv) }.into_kv_mut();\n+        while let Some(mut kv) = unsafe { self.next_kv() } {\n+            let (k, v) = kv.kv_mut();\n             if pred(k, v) {\n                 *self.length -= 1;\n                 let (k, v, leaf_edge_location) = kv.remove_kv_tracking();\n-                // `remove_kv_tracking` has either preserved or invalidated `self.cur_leaf_edge`\n-                if let Some(node) = leaf_edge_location {\n-                    match search::search_tree(node, &k) {\n-                        search::SearchResult::Found(_) => unreachable!(),\n-                        search::SearchResult::GoDown(leaf) => self.cur_leaf_edge = Some(leaf),\n-                    }\n-                };\n+                self.cur_leaf_edge = Some(leaf_edge_location);\n                 return Some((k, v));\n             }\n             self.cur_leaf_edge = Some(kv.next_leaf_edge());\n@@ -2698,108 +2692,124 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {\n     /// Removes a key/value-pair from the map, and returns that pair, as well as\n-    /// the whereabouts of the leaf edge corresponding to that former pair:\n-    /// if None is returned, the leaf edge is still the left leaf edge of the KV handle;\n-    /// if a node is returned, it heads the subtree where the leaf edge may be found.\n+    /// the leaf edge corresponding to that former pair.\n     fn remove_kv_tracking(\n         self,\n-    ) -> (K, V, Option<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>>) {\n-        let mut levels_down_handled: isize;\n-        let (small_leaf, old_key, old_val) = match self.force() {\n+    ) -> (K, V, Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {\n+        let (mut pos, old_key, old_val, was_internal) = match self.force() {\n             Leaf(leaf) => {\n-                levels_down_handled = 1; // handled at same level, but affects only the right side\n                 let (hole, old_key, old_val) = leaf.remove();\n-                (hole.into_node(), old_key, old_val)\n+                (hole, old_key, old_val, false)\n             }\n             Internal(mut internal) => {\n                 // Replace the location freed in the internal node with the next KV,\n                 // and remove that next KV from its leaf.\n-                levels_down_handled = unsafe { ptr::read(&internal).into_node().height() } as isize;\n \n                 let key_loc = internal.kv_mut().0 as *mut K;\n                 let val_loc = internal.kv_mut().1 as *mut V;\n \n-                let to_remove = internal.right_edge().descend().first_leaf_edge().right_kv().ok();\n+                // Deleting from the left side is typically faster since we can\n+                // just pop an element from the end of the KV array without\n+                // needing to shift the other values.\n+                let to_remove = internal.left_edge().descend().last_leaf_edge().left_kv().ok();\n                 let to_remove = unsafe { unwrap_unchecked(to_remove) };\n \n                 let (hole, key, val) = to_remove.remove();\n \n                 let old_key = unsafe { mem::replace(&mut *key_loc, key) };\n                 let old_val = unsafe { mem::replace(&mut *val_loc, val) };\n \n-                (hole.into_node(), old_key, old_val)\n+                (hole, old_key, old_val, true)\n             }\n         };\n \n         // Handle underflow\n-        let mut cur_node = small_leaf.forget_type();\n+        let mut cur_node = unsafe { ptr::read(&pos).into_node().forget_type() };\n+        let mut at_leaf = true;\n         while cur_node.len() < node::MIN_LEN {\n             match handle_underfull_node(cur_node) {\n-                AtRoot(root) => {\n-                    cur_node = root;\n-                    break;\n-                }\n-                EmptyParent(_) => unreachable!(),\n-                Merged(parent) => {\n-                    levels_down_handled -= 1;\n+                AtRoot => break,\n+                Merged(edge, merged_with_left, offset) => {\n+                    // If we merged with our right sibling then our tracked\n+                    // position has not changed. However if we merged with our\n+                    // left sibling then our tracked position is now dangling.\n+                    if at_leaf && merged_with_left {\n+                        let idx = pos.idx() + offset;\n+                        let node = match unsafe { ptr::read(&edge).descend().force() } {\n+                            Leaf(leaf) => leaf,\n+                            Internal(_) => unreachable!(),\n+                        };\n+                        pos = unsafe { Handle::new_edge(node, idx) };\n+                    }\n+\n+                    let parent = edge.into_node();\n                     if parent.len() == 0 {\n                         // We must be at the root\n-                        let root = parent.into_root_mut();\n-                        root.pop_level();\n-                        cur_node = root.as_mut();\n+                        parent.into_root_mut().pop_level();\n                         break;\n                     } else {\n                         cur_node = parent.forget_type();\n+                        at_leaf = false;\n                     }\n                 }\n-                Stole(internal_node) => {\n-                    levels_down_handled -= 1;\n-                    cur_node = internal_node.forget_type();\n+                Stole(stole_from_left) => {\n+                    // Adjust the tracked position if we stole from a left sibling\n+                    if stole_from_left && at_leaf {\n+                        // SAFETY: This is safe since we just added an element to our node.\n+                        unsafe {\n+                            pos.next_unchecked();\n+                        }\n+                    }\n+\n                     // This internal node might be underfull, but only if it's the root.\n                     break;\n                 }\n             }\n         }\n \n-        let leaf_edge_location = if levels_down_handled > 0 { None } else { Some(cur_node) };\n-        (old_key, old_val, leaf_edge_location)\n+        // If we deleted from an internal node then we need to compensate for\n+        // the earlier swap and adjust the tracked position to point to the\n+        // next element.\n+        if was_internal {\n+            pos = unsafe { unwrap_unchecked(pos.next_kv().ok()).next_leaf_edge() };\n+        }\n+\n+        (old_key, old_val, pos)\n     }\n }\n \n enum UnderflowResult<'a, K, V> {\n-    AtRoot(NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>),\n-    EmptyParent(NodeRef<marker::Mut<'a>, K, V, marker::Internal>),\n-    Merged(NodeRef<marker::Mut<'a>, K, V, marker::Internal>),\n-    Stole(NodeRef<marker::Mut<'a>, K, V, marker::Internal>),\n+    AtRoot,\n+    Merged(Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge>, bool, usize),\n+    Stole(bool),\n }\n \n fn handle_underfull_node<K, V>(\n     node: NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal>,\n ) -> UnderflowResult<'_, K, V> {\n     let parent = match node.ascend() {\n         Ok(parent) => parent,\n-        Err(root) => return AtRoot(root),\n+        Err(_) => return AtRoot,\n     };\n \n     let (is_left, mut handle) = match parent.left_kv() {\n         Ok(left) => (true, left),\n-        Err(parent) => match parent.right_kv() {\n-            Ok(right) => (false, right),\n-            Err(parent) => {\n-                return EmptyParent(parent.into_node());\n-            }\n-        },\n+        Err(parent) => {\n+            let right = unsafe { unwrap_unchecked(parent.right_kv().ok()) };\n+            (false, right)\n+        }\n     };\n \n     if handle.can_merge() {\n-        Merged(handle.merge().into_node())\n+        let offset = if is_left { handle.reborrow().left_edge().descend().len() + 1 } else { 0 };\n+        Merged(handle.merge(), is_left, offset)\n     } else {\n         if is_left {\n             handle.steal_left();\n         } else {\n             handle.steal_right();\n         }\n-        Stole(handle.into_node())\n+        Stole(is_left)\n     }\n }\n "}, {"sha": "bc4e2711670865223950448621be816383e08cf4", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -723,6 +723,11 @@ impl<Node, Type> Handle<Node, Type> {\n     pub fn into_node(self) -> Node {\n         self.node\n     }\n+\n+    /// Returns the position of this handle in the node.\n+    pub fn idx(&self) -> usize {\n+        self.idx\n+    }\n }\n \n impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV> {"}, {"sha": "9db997e864170f2d9028668c1c72de150508e6a3", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -250,7 +250,6 @@ use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n use core::slice::{self, from_raw_parts_mut};\n-use core::usize;\n \n use crate::alloc::{box_free, handle_alloc_error, AllocInit, AllocRef, Global, Layout};\n use crate::string::String;"}, {"sha": "a3d9c78b7f58cd978db8cc716acbc56899545556", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -90,7 +90,6 @@ use core::borrow::{Borrow, BorrowMut};\n use core::cmp::Ordering::{self, Less};\n use core::mem::{self, size_of};\n use core::ptr;\n-use core::{u16, u32, u8};\n \n use crate::borrow::ToOwned;\n use crate::boxed::Box;"}, {"sha": "1cfb26eb35a113097a6d7200251c99763f520b74", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -23,7 +23,6 @@ use core::ptr::{self, NonNull};\n use core::slice::{self, from_raw_parts_mut};\n use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n-use core::{isize, usize};\n \n use crate::alloc::{box_free, handle_alloc_error, AllocInit, AllocRef, Global, Layout};\n use crate::boxed::Box;"}, {"sha": "bddaab0c761887a80e99eca5a2bb4e6f94a6acd7", "filename": "src/liballoc/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -3,8 +3,6 @@\n use core::any::Any;\n use core::clone::Clone;\n use core::convert::TryInto;\n-use core::f64;\n-use core::i64;\n use core::ops::Deref;\n use core::result::Result::{Err, Ok};\n "}, {"sha": "6e2a5abe90d7006dc1ba93bf9fd579293f0c2ab1", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,7 +1,6 @@\n use std::borrow::Cow;\n use std::collections::TryReserveError::*;\n use std::mem::size_of;\n-use std::{isize, usize};\n \n pub trait IntoCow<'a, B: ?Sized>\n where"}, {"sha": "b63d81796f9d2eb7b46f9889cb106927efedd41d", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -3,7 +3,6 @@ use std::collections::TryReserveError::*;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::vec::{Drain, IntoIter};\n-use std::{isize, usize};\n \n struct DropCounter<'a> {\n     count: &'a mut u32,"}, {"sha": "c287d56fa5353dceab5f32b09355f51c23c817c6", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -3,7 +3,6 @@ use std::collections::{vec_deque::Drain, VecDeque};\n use std::fmt::Debug;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n-use std::{isize, usize};\n \n use crate::hash;\n "}, {"sha": "4e1fd8bf753cad249414eaa1d2acc32ff202c864", "filename": "src/libcore/benches/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,6 +1,5 @@\n use super::super::*;\n use core::num::flt2dec::strategy::dragon::*;\n-use std::{f64, i16};\n use test::Bencher;\n \n #[bench]"}, {"sha": "77ca901a90af39890588491cf122386eca0c763c", "filename": "src/libcore/benches/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,6 +1,5 @@\n use super::super::*;\n use core::num::flt2dec::strategy::grisu::*;\n-use std::{f64, i16};\n use test::Bencher;\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {"}, {"sha": "275a1d062cafbb06d8c1c9186ae1d01728465918", "filename": "src/libcore/tests/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -104,7 +104,6 @@ fn test_format_int() {\n \n #[test]\n fn test_format_int_exp_limits() {\n-    use core::{i128, i16, i32, i64, i8, u128, u16, u32, u64, u8};\n     assert_eq!(format!(\"{:e}\", i8::MIN), \"-1.28e2\");\n     assert_eq!(format!(\"{:e}\", i8::MAX), \"1.27e2\");\n     assert_eq!(format!(\"{:e}\", i16::MIN), \"-3.2768e4\");\n@@ -125,8 +124,6 @@ fn test_format_int_exp_limits() {\n \n #[test]\n fn test_format_int_exp_precision() {\n-    use core::{i128, i16, i32, i64, i8};\n-\n     //test that float and integer match\n     let big_int: u32 = 314_159_265;\n     assert_eq!(format!(\"{:.1e}\", big_int), format!(\"{:.1e}\", f64::from(big_int)));\n@@ -214,7 +211,6 @@ fn test_format_int_sign_padding() {\n \n #[test]\n fn test_format_int_twos_complement() {\n-    use core::{i16, i32, i64, i8};\n     assert_eq!(format!(\"{}\", i8::MIN), \"-128\");\n     assert_eq!(format!(\"{}\", i16::MIN), \"-32768\");\n     assert_eq!(format!(\"{}\", i32::MIN), \"-2147483648\");"}, {"sha": "e0954a661c8d9f401201b8be514ad1bb1612f416", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -3,8 +3,6 @@\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;\n-use core::usize;\n-use core::{i16, i8, isize};\n \n #[test]\n fn test_lt() {\n@@ -2251,62 +2249,58 @@ fn test_range_inclusive_folds() {\n \n #[test]\n fn test_range_size_hint() {\n-    use core::usize::MAX as UMAX;\n     assert_eq!((0..0usize).size_hint(), (0, Some(0)));\n     assert_eq!((0..100usize).size_hint(), (100, Some(100)));\n-    assert_eq!((0..UMAX).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((0..usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n \n-    let umax = u128::try_from(UMAX).unwrap();\n+    let umax = u128::try_from(usize::MAX).unwrap();\n     assert_eq!((0..0u128).size_hint(), (0, Some(0)));\n     assert_eq!((0..100u128).size_hint(), (100, Some(100)));\n-    assert_eq!((0..umax).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..umax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((0..umax).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..umax + 1).size_hint(), (usize::MAX, None));\n \n-    use core::isize::{MAX as IMAX, MIN as IMIN};\n     assert_eq!((0..0isize).size_hint(), (0, Some(0)));\n     assert_eq!((-100..100isize).size_hint(), (200, Some(200)));\n-    assert_eq!((IMIN..IMAX).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((isize::MIN..isize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n \n-    let imin = i128::try_from(IMIN).unwrap();\n-    let imax = i128::try_from(IMAX).unwrap();\n+    let imin = i128::try_from(isize::MIN).unwrap();\n+    let imax = i128::try_from(isize::MAX).unwrap();\n     assert_eq!((0..0i128).size_hint(), (0, Some(0)));\n     assert_eq!((-100..100i128).size_hint(), (200, Some(200)));\n-    assert_eq!((imin..imax).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((imin..imax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((imin..imax).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((imin..imax + 1).size_hint(), (usize::MAX, None));\n }\n \n #[test]\n fn test_range_inclusive_size_hint() {\n-    use core::usize::MAX as UMAX;\n     assert_eq!((1..=0usize).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0usize).size_hint(), (1, Some(1)));\n     assert_eq!((0..=100usize).size_hint(), (101, Some(101)));\n-    assert_eq!((0..=UMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..=UMAX).size_hint(), (UMAX, None));\n+    assert_eq!((0..=usize::MAX - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..=usize::MAX).size_hint(), (usize::MAX, None));\n \n-    let umax = u128::try_from(UMAX).unwrap();\n+    let umax = u128::try_from(usize::MAX).unwrap();\n     assert_eq!((1..=0u128).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0u128).size_hint(), (1, Some(1)));\n     assert_eq!((0..=100u128).size_hint(), (101, Some(101)));\n-    assert_eq!((0..=umax - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..=umax).size_hint(), (UMAX, None));\n-    assert_eq!((0..=umax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((0..=umax - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..=umax).size_hint(), (usize::MAX, None));\n+    assert_eq!((0..=umax + 1).size_hint(), (usize::MAX, None));\n \n-    use core::isize::{MAX as IMAX, MIN as IMIN};\n     assert_eq!((0..=-1isize).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0isize).size_hint(), (1, Some(1)));\n     assert_eq!((-100..=100isize).size_hint(), (201, Some(201)));\n-    assert_eq!((IMIN..=IMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((IMIN..=IMAX).size_hint(), (UMAX, None));\n+    assert_eq!((isize::MIN..=isize::MAX - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((isize::MIN..=isize::MAX).size_hint(), (usize::MAX, None));\n \n-    let imin = i128::try_from(IMIN).unwrap();\n-    let imax = i128::try_from(IMAX).unwrap();\n+    let imin = i128::try_from(isize::MIN).unwrap();\n+    let imax = i128::try_from(isize::MAX).unwrap();\n     assert_eq!((0..=-1i128).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0i128).size_hint(), (1, Some(1)));\n     assert_eq!((-100..=100i128).size_hint(), (201, Some(201)));\n-    assert_eq!((imin..=imax - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((imin..=imax).size_hint(), (UMAX, None));\n-    assert_eq!((imin..=imax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((imin..=imax - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((imin..=imax).size_hint(), (usize::MAX, None));\n+    assert_eq!((imin..=imax + 1).size_hint(), (usize::MAX, None));\n }\n \n #[test]"}, {"sha": "1c172f49c279c726fc73a69968ec5fdf6fd1521e", "filename": "src/libcore/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,7 +1,5 @@\n #![allow(overflowing_literals)]\n \n-use std::{f32, f64, i64};\n-\n mod parse;\n mod rawfp;\n "}, {"sha": "ae892e3b0bfbfb7bec345fb7d3b82c1df3c38bf0", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,4 +1,4 @@\n-use std::{f32, f64, fmt, i16, str};\n+use std::{fmt, str};\n \n use core::num::flt2dec::{decode, DecodableFloat, Decoded, FullDecoded};\n use core::num::flt2dec::{round_up, Formatted, Part, Sign, MAX_SIG_DIGITS};"}, {"sha": "5b050a2c3563156edc48c0af5707694428d1385b", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,6 +1,5 @@\n #![cfg(not(target_arch = \"wasm32\"))]\n \n-use std::i16;\n use std::str;\n \n use core::num::flt2dec::strategy::grisu::format_exact_opt;"}, {"sha": "8396a0dd62db91ad3fdb3c8f0ffcc30264d8d67a", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -2,7 +2,6 @@ macro_rules! int_module {\n     ($T:ident, $T_i:ident) => {\n         #[cfg(test)]\n         mod tests {\n-            use core::isize;\n             use core::mem;\n             use core::ops::{BitAnd, BitOr, BitXor, Not, Shl, Shr};\n             use core::$T_i::*;"}, {"sha": "5f5d4810cb5701e4c53102deaaeb610076055279", "filename": "src/librustc_ast/util/comments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -5,7 +5,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, CharPos, FileName, Pos};\n \n use log::debug;\n-use std::usize;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "63730c56f0ed2bb7d2202b4d1433b1be6f2901ad", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -25,7 +25,7 @@ use rustc_span::Span;\n use rustc_target::abi::{self, HasDataLayout, LayoutOf, Primitive};\n \n use std::cmp::Ordering;\n-use std::{i128, iter, u128};\n+use std::iter;\n \n fn get_simple_intrinsic(cx: &CodegenCx<'ll, '_>, name: &str) -> Option<&'ll Value> {\n     let llvm_name = match name {"}, {"sha": "57fe7b0da6ff28ae38ffb574eed99eb088529515", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -17,8 +17,6 @@ use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::sym;\n use rustc_target::abi::{Abi, Int, LayoutOf, Variants};\n \n-use std::{i128, u128};\n-\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_rvalue(\n         &mut self,"}, {"sha": "1aa7ac024d94e239d2acd5275dadd2515585e6e0", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -23,7 +23,6 @@\n use crate::snapshot_vec::{SnapshotVec, SnapshotVecDelegate};\n use rustc_index::bit_set::BitSet;\n use std::fmt::Debug;\n-use std::usize;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "23f3558cbdfa33ba38a32abc1b976ce96a490e68", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -93,7 +93,6 @@ use std::path::Path;\n use std::process;\n use std::sync::Arc;\n use std::time::{Duration, Instant};\n-use std::u32;\n \n use measureme::{EventId, EventIdBuilder, SerializableString, StringId};\n use parking_lot::RwLock;"}, {"sha": "a84f89c7cd950040cbb23086fee06d55a98b2769", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -7,7 +7,6 @@ use std::iter::{self, FromIterator};\n use std::marker::PhantomData;\n use std::ops::{Index, IndexMut, Range, RangeBounds};\n use std::slice;\n-use std::u32;\n use std::vec;\n \n /// Represents some newtyped `usize` wrapper."}, {"sha": "1de820cdb6209be8b403974d8cbc928d721b74b2", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -8,7 +8,6 @@ use rustc_data_structures::unify as ut;\n use std::cmp;\n use std::marker::PhantomData;\n use std::ops::Range;\n-use std::u32;\n \n pub struct TypeVariableTable<'tcx> {\n     values: sv::SnapshotVec<Delegate>,"}, {"sha": "913c67d045e5980e24b03bbe8d3f9e650e163f85", "filename": "src/librustc_interface/callbacks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_interface%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_interface%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fcallbacks.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -58,5 +58,4 @@ pub fn setup_callbacks() {\n     rustc_span::SPAN_DEBUG.swap(&(span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n     rustc_hir::def_id::DEF_ID_DEBUG.swap(&(def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n     TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));\n-    rustc_middle::ty::RESOLVE_INSTANCE.swap(&(rustc_ty::instance::resolve_instance as _));\n }"}, {"sha": "aa805a2f2dbc07bcf762cd59355688f55791d0be", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -21,7 +21,6 @@ use rustc_target::spec::abi::Abi;\n \n use log::debug;\n use std::cmp;\n-use std::{f32, f64, i16, i32, i64, i8, u16, u32, u64, u8};\n \n declare_lint! {\n     UNUSED_COMPARISONS,"}, {"sha": "29a4254d9eec6eb74f13269a76384623986ecbdd", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -42,7 +42,6 @@ use std::io;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::path::Path;\n-use std::u32;\n \n pub use cstore_impl::{provide, provide_extern};\n "}, {"sha": "d75298fae0032eb7bfd3a665aaf8e5d842c3866f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -39,7 +39,6 @@ use rustc_target::abi::VariantIdx;\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::path::Path;\n-use std::u32;\n \n struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,"}, {"sha": "b82008f429fa4a37e32010e23b28d94bcc81f267", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -33,7 +33,7 @@ use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::Index;\n use std::slice;\n-use std::{iter, mem, option, u32};\n+use std::{iter, mem, option};\n \n pub use self::cache::{BodyAndCache, ReadOnlyBodyAndCache};\n pub use self::query::*;"}, {"sha": "c26c043994f54dbefb0f494e38e4fb83dc40725c", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1257,5 +1257,9 @@ rustc_queries! {\n             eval_always\n             desc { \"looking up enabled feature gates\" }\n         }\n+\n+        query resolve_instance(key: (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>)) -> Option<ty::Instance<'tcx>> {\n+            desc { \"resolving instance `{:?}` `{:?}` with {:?}\", key.1, key.2, key.0 }\n+        }\n     }\n }"}, {"sha": "cf0222370f288f2871cb713732a9f8709fec5567", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,7 +1,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n-use rustc_data_structures::AtomicRef;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::DropInPlaceFnLangItem;\n@@ -289,7 +288,9 @@ impl<'tcx> Instance<'tcx> {\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n     ) -> Option<Instance<'tcx>> {\n-        (*RESOLVE_INSTANCE)(tcx, param_env, def_id, substs)\n+        // All regions in the result of this query are erased, so it's\n+        // fine to erase all of the input regions.\n+        tcx.resolve_instance((tcx.erase_regions(&param_env), def_id, tcx.erase_regions(&substs)))\n     }\n \n     pub fn resolve_for_fn_ptr(\n@@ -440,21 +441,3 @@ fn needs_fn_once_adapter_shim(\n         (ty::ClosureKind::FnMut, _) | (ty::ClosureKind::FnOnce, _) => Err(()),\n     }\n }\n-\n-fn resolve_instance_default(\n-    _tcx: TyCtxt<'tcx>,\n-    _param_env: ty::ParamEnv<'tcx>,\n-    _def_id: DefId,\n-    _substs: SubstsRef<'tcx>,\n-) -> Option<Instance<'tcx>> {\n-    unimplemented!()\n-}\n-\n-pub static RESOLVE_INSTANCE: AtomicRef<\n-    for<'tcx> fn(\n-        TyCtxt<'tcx>,\n-        ty::ParamEnv<'tcx>,\n-        DefId,\n-        SubstsRef<'tcx>,\n-    ) -> Option<Instance<'tcx>>,\n-> = AtomicRef::new(&(resolve_instance_default as _));"}, {"sha": "0ebd55a6c024c86dc5821f63b2039d38c1763020", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -81,7 +81,6 @@ pub use self::context::{\n     CtxtInterners, GeneratorInteriorTypeCause, GlobalCtxt, Lift, TypeckTables,\n };\n \n-pub use self::instance::RESOLVE_INSTANCE;\n pub use self::instance::{Instance, InstanceDef};\n \n pub use self::trait_def::TraitDef;"}, {"sha": "438e7ed4331a3e433e6af11ee51056d6a0cc10a8", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -296,3 +296,14 @@ impl Key for (Symbol, u32, u32) {\n         DUMMY_SP\n     }\n }\n+\n+impl<'tcx> Key for (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        self.1.krate\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        tcx.def_span(self.1)\n+    }\n+}"}, {"sha": "ec0b89ebb4d0aa7a8194a314312b7434f1eab7e5", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -27,7 +27,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;\n-use std::{cmp, iter, mem, usize};\n+use std::{cmp, iter, mem};\n \n use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n use crate::transform::check_consts::{is_lang_panic_fn, qualifs, ConstKind, Item};"}, {"sha": "393af108a6e461983cdecd65607aa5558ab7c736", "filename": "src/librustc_mir_build/build/matches/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::mir::*;\n use rustc_middle::ty;\n use smallvec::SmallVec;\n use std::convert::TryInto;\n-use std::u32;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     crate fn field_match_pairs<'pat>("}, {"sha": "04cb509d44e4b32b337a53640d969b04fd5f07f4", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -17,7 +17,6 @@ use rustc_span::symbol::kw;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use rustc_target::spec::PanicStrategy;\n-use std::u32;\n \n use super::lints;\n "}, {"sha": "51ba84416d64d21cc9b13024e6d605d43e42fdc0", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -256,7 +256,6 @@ use std::convert::TryInto;\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator};\n use std::ops::RangeInclusive;\n-use std::u128;\n \n crate fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pat<'tcx>) -> Pat<'tcx> {\n     LiteralExpander { tcx: cx.tcx, param_env: cx.param_env }.fold_pattern(&pat)"}, {"sha": "22ce909083d915c3311a5daf6cf2f3fef4799963", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -27,7 +27,8 @@ impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n             ItemKind::TyAlias(..)\n             | ItemKind::Enum(..)\n             | ItemKind::Struct(..)\n-            | ItemKind::Union(..) => {\n+            | ItemKind::Union(..)\n+            | ItemKind::OpaqueTy(..) => {\n                 for attr in self.tcx.get_attrs(item_def_id).iter() {\n                     if attr.check_name(sym::rustc_layout) {\n                         self.dump_layout_of(item_def_id, item, attr);\n@@ -84,7 +85,7 @@ impl LayoutTest<'tcx> {\n                         sym::debug => {\n                             self.tcx.sess.span_err(\n                                 item.span,\n-                                &format!(\"layout debugging: {:#?}\", *ty_layout),\n+                                &format!(\"layout debugging for type {:?}: {:#?}\", ty, *ty_layout),\n                             );\n                         }\n "}, {"sha": "ee71d09cb21e92dc329b93a3c6c1a814b6d4d6ad", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -112,10 +112,10 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n use std::collections::VecDeque;\n+use std::fmt;\n use std::io;\n use std::io::prelude::*;\n use std::rc::Rc;\n-use std::{fmt, u32};\n \n #[derive(Copy, Clone, PartialEq)]\n struct Variable(u32);"}, {"sha": "73b46d753d7872aef84aa8a698221f511ed99774", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -7,7 +7,6 @@ use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decoder, Encoder};\n use std::borrow::Borrow;\n use std::fmt;\n-use std::{u32, u64};\n \n rustc_index::newtype_index! {\n     pub struct CrateId {"}, {"sha": "955e2e3615909dc1fd708f50bb396b8ab936f33d", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -11,9 +11,7 @@ use log::debug;\n \n pub fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    def_id: DefId,\n-    substs: SubstsRef<'tcx>,\n+    (param_env, def_id, substs): (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>),\n ) -> Option<Instance<'tcx>> {\n     debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n@@ -199,3 +197,7 @@ fn resolve_associated_item<'tcx>(\n         traits::VtableAutoImpl(..) | traits::VtableParam(..) | traits::VtableTraitAlias(..) => None,\n     }\n }\n+\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+    *providers = ty::query::Providers { resolve_instance, ..*providers };\n+}"}, {"sha": "75e62e796408a6b3822ef13dca1f3bb37c235374", "filename": "src/librustc_ty/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_ty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustc_ty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Flib.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -25,4 +25,5 @@ pub fn provide(providers: &mut Providers<'_>) {\n     common_traits::provide(providers);\n     needs_drop::provide(providers);\n     ty::provide(providers);\n+    instance::provide(providers);\n }"}, {"sha": "f41114839020e5765a8834dfa8a1fb94fed1d564", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -32,7 +32,6 @@ use std::collections::hash_map::Entry;\n use std::default::Default;\n use std::hash::Hash;\n use std::rc::Rc;\n-use std::u32;\n use std::{mem, vec};\n \n use crate::core::{self, DocContext, ImplTraitParam};"}, {"sha": "5604a9c2dc163bf5565e6b1d5aa0a70d25f34929", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,6 +1,5 @@\n use std::cmp;\n use std::string::String;\n-use std::usize;\n \n use crate::clean::{self, DocFragment, Item};\n use crate::core::DocContext;"}, {"sha": "688bddc2baf461cd6fabde0d1499e5f4678d817c", "filename": "src/libserialize/tests/json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibserialize%2Ftests%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibserialize%2Ftests%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fjson.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -17,7 +17,6 @@ use rustc_serialize::{Decodable, Encodable};\n use std::collections::BTreeMap;\n use std::io::prelude::*;\n use std::string;\n-use std::{f32, f64, i64, u64};\n use Animal::*;\n \n #[derive(RustcDecodable, Eq, PartialEq, Debug)]"}, {"sha": "e0ceb9f3f3810ff1c1e93fc7d9b5815e1062a561", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -320,7 +320,7 @@ mod prim_char {}\n \n #[doc(primitive = \"unit\")]\n //\n-/// The `()` type, sometimes called \"unit\" or \"nil\".\n+/// The `()` type, also called \"unit\".\n ///\n /// The `()` type has exactly one value `()`, and is used when there\n /// is no other meaningful value that could be returned. `()` is most"}, {"sha": "c4e929624d7a4c846c852dab19a18ebd440476c1", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -12,7 +12,6 @@ use self::StartResult::*;\n \n use core::cmp;\n use core::intrinsics::abort;\n-use core::isize;\n \n use crate::cell::UnsafeCell;\n use crate::ptr;"}, {"sha": "f33493ee0c9c90ca0049e6a6893b86b4144d255a", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -11,7 +11,6 @@ use self::Message::*;\n pub use self::UpgradeResult::*;\n \n use core::cmp;\n-use core::isize;\n \n use crate::cell::UnsafeCell;\n use crate::ptr;"}, {"sha": "3e2050799ccb436b791813fac5d7ff4fdc194566", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -26,7 +26,6 @@ use self::Blocker::*;\n pub use self::Failure::*;\n \n use core::intrinsics::abort;\n-use core::isize;\n use core::mem;\n use core::ptr;\n "}, {"sha": "34f88eea0d7c39d2859831dc614498cf07f4ab29", "filename": "src/libstd/sys/hermit/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -6,7 +6,6 @@ use crate::io;\n use crate::mem;\n use crate::sys::hermit::abi;\n use crate::time::Duration;\n-use core::u32;\n \n pub type Tid = abi::Tid;\n "}, {"sha": "034ed3190c13f84449de382643f90dffe032dc3c", "filename": "src/test/ui/layout/debug.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,5 +1,5 @@\n // normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n-#![feature(never_type, rustc_attrs)]\n+#![feature(never_type, rustc_attrs, type_alias_impl_trait)]\n #![crate_type = \"lib\"]\n \n #[rustc_layout(debug)]\n@@ -13,3 +13,10 @@ union U { f1: (i32, i32), f3: i32 } //~ ERROR: layout debugging\n \n #[rustc_layout(debug)]\n type Test = Result<i32, i32>; //~ ERROR: layout debugging\n+\n+#[rustc_layout(debug)]\n+type T = impl std::fmt::Debug; //~ ERROR: layout debugging\n+\n+fn f() -> T {\n+    0i32\n+}"}, {"sha": "3539cea5ea3184acc5e450cb43a6d2ad768f7d5b", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b543afca9b90ad6e4689b6d613ab51f9d3ba15e7/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=b543afca9b90ad6e4689b6d613ab51f9d3ba15e7", "patch": "@@ -1,4 +1,4 @@\n-error: layout debugging: Layout {\n+error: layout debugging for type E: Layout {\n     fields: Arbitrary {\n         offsets: [\n             Size {\n@@ -110,7 +110,7 @@ error: layout debugging: Layout {\n LL | enum E { Foo, Bar(!, i32, i32) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: layout debugging: Layout {\n+error: layout debugging for type S: Layout {\n     fields: Arbitrary {\n         offsets: [\n             Size {\n@@ -164,7 +164,7 @@ error: layout debugging: Layout {\n LL | struct S { f1: i32, f2: (), f3: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: layout debugging: Layout {\n+error: layout debugging for type U: Layout {\n     fields: Union(\n         2,\n     ),\n@@ -190,7 +190,7 @@ error: layout debugging: Layout {\n LL | union U { f1: (i32, i32), f3: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: layout debugging: Layout {\n+error: layout debugging for type std::result::Result<i32, i32>: Layout {\n     fields: Arbitrary {\n         offsets: [\n             Size {\n@@ -315,5 +315,37 @@ error: layout debugging: Layout {\n LL | type Test = Result<i32, i32>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: layout debugging for type i32: Layout {\n+    fields: Union(\n+        0,\n+    ),\n+    variants: Single {\n+        index: 0,\n+    },\n+    abi: Scalar(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 0..=4294967295,\n+        },\n+    ),\n+    largest_niche: None,\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: $PREF_ALIGN,\n+    },\n+    size: Size {\n+        raw: 4,\n+    },\n+}\n+  --> $DIR/debug.rs:18:1\n+   |\n+LL | type T = impl std::fmt::Debug;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}]}