{"sha": "6f77c97b386f05083f039f0130146addf99eefd9", "node_id": "C_kwDOAAsO6NoAKDZmNzdjOTdiMzg2ZjA1MDgzZjAzOWYwMTMwMTQ2YWRkZjk5ZWVmZDk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-17T11:21:39Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:31:59Z"}, "message": "Assert that various types have the right amount of generic args and fix the sites that used the wrong amount", "tree": {"sha": "4bebb22479b94e1134ee458f5f45efaea839ca26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bebb22479b94e1134ee458f5f45efaea839ca26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f77c97b386f05083f039f0130146addf99eefd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f77c97b386f05083f039f0130146addf99eefd9", "html_url": "https://github.com/rust-lang/rust/commit/6f77c97b386f05083f039f0130146addf99eefd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f77c97b386f05083f039f0130146addf99eefd9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a02b0fb728ac994883845b1c53630c2dec4657", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a02b0fb728ac994883845b1c53630c2dec4657", "html_url": "https://github.com/rust-lang/rust/commit/d9a02b0fb728ac994883845b1c53630c2dec4657"}], "stats": {"total": 297, "additions": 153, "deletions": 144}, "files": [{"sha": "e63c0699d40b760592982519e31d648920e37e92", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -547,10 +547,11 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n-            let trait_ref = ty::TraitRef {\n-                def_id: tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),\n-                substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n-            };\n+            let trait_ref = tcx.mk_trait_ref(\n+                tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),\n+                place_ty.ty,\n+                &[],\n+            );\n \n             // To have a `Copy` operand, the type `T` of the\n             // value must be `Copy`. Note that we prove that `T: Copy`,\n@@ -1273,10 +1274,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 self.check_rvalue(body, rv, location);\n                 if !self.unsized_feature_enabled() {\n-                    let trait_ref = ty::TraitRef {\n-                        def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                        substs: tcx.mk_substs_trait(place_ty, &[]),\n-                    };\n+                    let trait_ref = tcx.mk_trait_ref(\n+                        tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n+                        place_ty,\n+                        &[],\n+                    );\n                     self.prove_trait_ref(\n                         trait_ref,\n                         location.to_locations(),\n@@ -1865,9 +1867,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             // Make sure that repeated elements implement `Copy`.\n                             let span = body.source_info(location).span;\n                             let ty = place.ty(body, tcx).ty;\n-                            let trait_ref = ty::TraitRef::new(\n+                            let trait_ref = tcx.mk_trait_ref(\n                                 tcx.require_lang_item(LangItem::Copy, Some(span)),\n-                                tcx.mk_substs_trait(ty, &[]),\n+                                ty,\n+                                &[],\n                             );\n \n                             self.prove_trait_ref(\n@@ -1881,10 +1884,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             &Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, ty) => {\n-                let trait_ref = ty::TraitRef {\n-                    def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                    substs: tcx.mk_substs_trait(ty, &[]),\n-                };\n+                let trait_ref = tcx.mk_trait_ref(\n+                    tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n+                    ty,\n+                    &[],\n+                );\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1896,10 +1900,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::ShallowInitBox(operand, ty) => {\n                 self.check_operand(operand, location);\n \n-                let trait_ref = ty::TraitRef {\n-                    def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                    substs: tcx.mk_substs_trait(*ty, &[]),\n-                };\n+                let trait_ref = tcx.mk_trait_ref(\n+                    tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n+                    *ty,\n+                    &[],\n+                );\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1996,11 +2001,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n-                        let trait_ref = ty::TraitRef {\n-                            def_id: tcx\n-                                .require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),\n-                            substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),\n-                        };\n+                        let trait_ref = tcx.mk_trait_ref(\n+                            tcx.require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),\n+                            op.ty(body, tcx),\n+                            &[ty.into()],\n+                        );\n \n                         self.prove_trait_ref(\n                             trait_ref,"}, {"sha": "8c43f93a91752839d6546d601a25a5f4d20ea167", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -160,10 +160,7 @@ impl Qualif for NeedsNonConstDrop {\n             ObligationCause::dummy(),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitPredicate {\n-                trait_ref: ty::TraitRef {\n-                    def_id: destruct,\n-                    substs: cx.tcx.mk_substs_trait(ty, &[]),\n-                },\n+                trait_ref: cx.tcx.mk_trait_ref(destruct, ty, &[]),\n                 constness: ty::BoundConstness::ConstIfConst,\n                 polarity: ty::ImplPolarity::Positive,\n             }),"}, {"sha": "9944114f495b8a92729c8f1f35c5ae8c26acac51", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -61,10 +61,7 @@ impl<'tcx> Bounds<'tcx> {\n         // If it could be sized, and is, add the `Sized` predicate.\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n             tcx.lang_items().sized_trait().map(move |sized| {\n-                let trait_ref = ty::Binder::dummy(ty::TraitRef {\n-                    def_id: sized,\n-                    substs: tcx.mk_substs_trait(param_ty, &[]),\n-                });\n+                let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized, param_ty, &[]));\n                 (trait_ref.without_const().to_predicate(tcx), span)\n             })\n         });"}, {"sha": "3246397d82f0e2d237bd7c3b0165021a00290607", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -1782,10 +1782,7 @@ fn receiver_is_implemented<'tcx>(\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n     let tcx = wfcx.tcx();\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef {\n-        def_id: receiver_trait_def_id,\n-        substs: tcx.mk_substs_trait(receiver_ty, &[]),\n-    });\n+    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, receiver_ty, &[]));\n \n     let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref.without_const());\n "}, {"sha": "2c5a88225e90c468bc3efc3a23179cd62cc8f7e5", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -1093,10 +1093,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx,\n                 self.misc(expr.span),\n                 self.param_env,\n-                ty::Binder::dummy(ty::TraitRef {\n-                    def_id: into_def_id,\n-                    substs: self.tcx.mk_substs_trait(expr_ty, &[expected_ty.into()]),\n-                })\n+                ty::Binder::dummy(self.tcx.mk_trait_ref(\n+                    into_def_id,\n+                    expr_ty, &[expected_ty.into()]\n+                ))\n                 .to_poly_trait_predicate(),\n             ))\n         {"}, {"sha": "b55e3a114d3305af9e458e39013715a2e2dac3ac", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -68,7 +68,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     info!(\"check deref {:?} impl FnOnce\", ty);\n                     self.probe(|_| {\n-                        let fn_once_substs = tcx.mk_substs_trait(\n+                        let trait_ref = tcx.mk_trait_ref(\n+                            fn_once,\n                             ty,\n                             &[self\n                                 .next_ty_var(TypeVariableOrigin {\n@@ -77,7 +78,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 })\n                                 .into()],\n                         );\n-                        let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n                         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n                         let obligation = Obligation::misc(\n                             tcx,"}, {"sha": "d26f0cf385147f8638944bc0861d2bb47685c1ad", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -27,7 +27,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         def_id: DefId,\n         cause: ObligationCause<'tcx>,\n     ) {\n-        let trait_ref = ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) };\n+        let trait_ref = infcx.tcx.mk_trait_ref(def_id, ty, &[]);\n         self.register_predicate_obligation(\n             infcx,\n             Obligation {"}, {"sha": "cf0d201cbb724e880fd9069923210e040ae29fde", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -2532,6 +2532,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n+        debug_assert_eq!(\n+            self.generics_of(def_id).count(),\n+            substs.len(),\n+            \"wrong number of generic parameters for {def_id:?}: {substs:?}\",\n+        );\n         self.mk_ty(FnDef(def_id, substs))\n     }\n \n@@ -2552,6 +2557,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_projection(self, item_def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n+        debug_assert_eq!(\n+            self.generics_of(item_def_id).count(),\n+            substs.len(),\n+            \"wrong number of generic parameters for {item_def_id:?}: {substs:?}\",\n+        );\n         self.mk_ty(Projection(ProjectionTy { item_def_id, substs }))\n     }\n \n@@ -2803,6 +2813,21 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))\n     }\n \n+    pub fn mk_trait_ref(\n+        self,\n+        trait_def_id: DefId,\n+        self_ty: Ty<'tcx>,\n+        rest: &[GenericArg<'tcx>],\n+    ) -> ty::TraitRef<'tcx> {\n+        debug_assert_eq!(\n+            self.generics_of(trait_def_id).count() - 1,\n+            rest.len(),\n+            \"wrong number of generic parameters for {trait_def_id:?} on self type {self_ty:?}: {rest:?} \\nDid you accidentally include the self-type in the params list?\"\n+        );\n+        let substs = self.mk_substs_trait(self_ty, rest);\n+        ty::TraitRef::new(trait_def_id, substs)\n+    }\n+\n     pub fn mk_bound_variable_kinds<\n         I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,\n     >("}, {"sha": "b9717f2b37e05883d12d45bfa4737c763ec79732", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -719,10 +719,7 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n                 self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)\n             }\n             ExistentialPredicate::AutoTrait(did) => {\n-                let trait_ref = self.rebind(ty::TraitRef {\n-                    def_id: did,\n-                    substs: tcx.mk_substs_trait(self_ty, &[]),\n-                });\n+                let trait_ref = self.rebind(tcx.mk_trait_ref(did, self_ty, &[]));\n                 trait_ref.without_const().to_predicate(tcx)\n             }\n         }\n@@ -909,7 +906,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n         // otherwise the escaping vars would be captured by the binder\n         // debug_assert!(!self_ty.has_escaping_bound_vars());\n \n-        ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }\n+        tcx.mk_trait_ref(self.def_id, self_ty, self.substs)\n     }\n }\n "}, {"sha": "80c250f044d97819fe56360dd50bcd3717eca34f", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -1,6 +1,7 @@\n use rustc_errors::DelayDm;\n use rustc_hir as hir;\n use rustc_index::vec::Idx;\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::{self, Field};\n use rustc_middle::thir::{FieldPat, Pat, PatKind};\n@@ -226,14 +227,21 @@ impl<'tcx> ConstToPat<'tcx> {\n         // using `PartialEq::eq` in this scenario in the past.)\n         let partial_eq_trait_id =\n             self.tcx().require_lang_item(hir::LangItem::PartialEq, Some(self.span));\n+        let any_ty = self\n+            .infcx\n+            .next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::MiscVariable,\n+                span: self.span,\n+            })\n+            .into();\n         let obligation: PredicateObligation<'_> = predicate_for_trait_def(\n             self.tcx(),\n             self.param_env,\n             ObligationCause::misc(self.span, self.id),\n             partial_eq_trait_id,\n             0,\n             ty,\n-            &[],\n+            &[any_ty],\n         );\n         // FIXME: should this call a `predicate_must_hold` variant instead?\n "}, {"sha": "669599a424ab2035f7c5ee8468cc85778da183fc", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -29,10 +29,7 @@ fn custom_coerce_unsize_info<'tcx>(\n ) -> CustomCoerceUnsized {\n     let def_id = tcx.require_lang_item(LangItem::CoerceUnsized, None);\n \n-    let trait_ref = ty::Binder::dummy(ty::TraitRef {\n-        def_id,\n-        substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()]),\n-    });\n+    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(def_id, source_ty, &[target_ty.into()]));\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {"}, {"sha": "adef967b0a1a1bcd6861d017e7f4256f7c1dbd0e", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -4,7 +4,7 @@ use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::TypeVisitable;\n-use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n@@ -122,10 +122,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n-        let trait_ref = TraitRef {\n-            def_id: tcx.lang_items().deref_trait()?,\n-            substs: tcx.mk_substs_trait(ty, &[]),\n-        };\n+        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, ty, &[]);\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n "}, {"sha": "5be49996a0b2dc0bb77eabb2a106563555cb166d", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -117,10 +117,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         params: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n-        let trait_ref = ty::TraitRef {\n-            def_id: trait_def_id,\n-            substs: self.tcx.mk_substs_trait(self_ty, params),\n-        };\n+        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, self_ty, params);\n \n         debug_assert_eq!(\n             self.tcx.generics_of(trait_def_id).count() - 1,"}, {"sha": "3dab34747f7d2d58053a32d98989d60e1127b9d6", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n-        let trait_ref = ty::TraitRef { def_id: trait_did, substs: tcx.mk_substs_trait(ty, &[]) };\n+        let trait_ref = tcx.mk_trait_ref(trait_did, ty, &[]);\n \n         let trait_pred = ty::Binder::dummy(trait_ref);\n \n@@ -260,10 +260,8 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n         predicates.push_back(ty::Binder::dummy(ty::TraitPredicate {\n-            trait_ref: ty::TraitRef {\n-                def_id: trait_did,\n-                substs: infcx.tcx.mk_substs_trait(ty, &[]),\n-            },\n+            trait_ref: infcx.tcx.mk_trait_ref(trait_did, ty, &[]),\n+\n             constness: ty::BoundConstness::NotConst,\n             // Auto traits are positive\n             polarity: ty::ImplPolarity::Positive,"}, {"sha": "97f4f7d795d6f7f850bfcd297a810759848ac6b3", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         def_id: DefId,\n     ) {\n         let tcx = self.infcx.tcx;\n-        let trait_ref = ty::TraitRef { def_id, substs: tcx.mk_substs_trait(ty, &[]) };\n+        let trait_ref = tcx.mk_trait_ref(def_id, ty, &[]);\n         self.register_obligation(Obligation {\n             cause,\n             recursion_depth: 0,"}, {"sha": "cf9ba1d8421cd5128d002b212a4e2d413eed5b61", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -347,16 +347,13 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     span: DUMMY_SP,\n                     kind: TypeVariableOriginKind::MiscVariable,\n                 });\n-                let substs = self.tcx.mk_substs_trait(ty.skip_binder(), &[var.into()]);\n+                let trait_ref =\n+                    self.tcx.mk_trait_ref(trait_def_id, ty.skip_binder(), &[var.into()]);\n                 let obligation = Obligation::new(\n                     self.tcx,\n                     ObligationCause::dummy(),\n                     param_env,\n-                    ty.rebind(ty::TraitPredicate {\n-                        trait_ref: ty::TraitRef::new(trait_def_id, substs),\n-                        constness,\n-                        polarity,\n-                    }),\n+                    ty.rebind(ty::TraitPredicate { trait_ref, constness, polarity }),\n                 );\n                 let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n                 fulfill_cx.register_predicate_obligation(self, obligation);\n@@ -1002,7 +999,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             && self.fallback_has_occurred\n                         {\n                             let predicate = trait_predicate.map_bound(|mut trait_pred| {\n-                                trait_pred.trait_ref.substs = self.tcx.mk_substs_trait(\n+                                trait_pred.trait_ref = self.tcx.mk_trait_ref(\n+                                    trait_pred.trait_ref.def_id,\n                                     self.tcx.mk_unit(),\n                                     &trait_pred.trait_ref.substs[1..],\n                                 );\n@@ -2029,10 +2027,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref_and_ty: ty::Binder<'tcx, (ty::TraitPredicate<'tcx>, Ty<'tcx>)>,\n     ) -> PredicateObligation<'tcx> {\n         let trait_pred = trait_ref_and_ty.map_bound_ref(|(tr, new_self_ty)| ty::TraitPredicate {\n-            trait_ref: ty::TraitRef {\n-                substs: self.tcx.mk_substs_trait(*new_self_ty, &tr.trait_ref.substs[1..]),\n-                ..tr.trait_ref\n-            },\n+            trait_ref: self.tcx.mk_trait_ref(\n+                tr.trait_ref.def_id,\n+                *new_self_ty,\n+                &tr.trait_ref.substs[1..],\n+            ),\n             ..*tr\n         });\n "}, {"sha": "445b5696d20b32043449ddf1bba12e8f6541b3bc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -3068,17 +3068,20 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // Ensure all fields impl the trait.\n                 adt.all_fields().all(|field| {\n                     let field_ty = field.ty(self.tcx, substs);\n-                    let trait_substs = match diagnostic_name {\n+                    let trait_substs;\n+                    let trait_substs: &[_] = match diagnostic_name {\n                         sym::PartialEq | sym::PartialOrd => {\n-                            self.tcx.mk_substs_trait(field_ty, &[field_ty.into()])\n+                            trait_substs = [field_ty.into()];\n+                            &trait_substs\n                         }\n-                        _ => self.tcx.mk_substs_trait(field_ty, &[]),\n+                        _ => &[],\n                     };\n                     let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n-                        trait_ref: ty::TraitRef {\n-                            substs: trait_substs,\n-                            ..trait_pred.skip_binder().trait_ref\n-                        },\n+                        trait_ref: self.tcx.mk_trait_ref(\n+                            trait_pred.def_id(),\n+                            field_ty,\n+                            trait_substs,\n+                        ),\n                         ..*tr\n                     });\n                     let field_obl = Obligation::new("}, {"sha": "227a7f0a1124ae496ded77d32a61766a16805db3", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -143,8 +143,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     def_id: DefId,\n     span: Span,\n ) -> bool {\n-    let trait_ref =\n-        ty::Binder::dummy(ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) });\n+    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, ty, &[]));\n     pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const(), span)\n }\n \n@@ -903,10 +902,7 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n     // this has been typecked-before, so diagnostics is not really needed.\n     let unsize_trait_did = tcx.require_lang_item(LangItem::Unsize, None);\n \n-    let trait_ref = ty::TraitRef {\n-        def_id: unsize_trait_did,\n-        substs: tcx.mk_substs_trait(source, &[target.into()]),\n-    };\n+    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, source, &[target.into()]);\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), ty::Binder::dummy(trait_ref))) {\n         Ok(ImplSource::TraitUpcasting(implsrc_traitcasting)) => {"}, {"sha": "20826f2c541417dd2b19ddbc28f8357c37e442f6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -685,10 +685,11 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::Binder::dummy(ty::TraitRef {\n-            def_id: unsize_did,\n-            substs: tcx.mk_substs_trait(tcx.types.self_param, &[unsized_self_ty.into()]),\n-        })\n+        let unsize_predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n+            unsize_did,\n+            tcx.types.self_param,\n+            &[unsized_self_ty.into()],\n+        ))\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -720,10 +721,11 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::Binder::dummy(ty::TraitRef {\n-            def_id: dispatch_from_dyn_did,\n-            substs: tcx.mk_substs_trait(receiver_ty, &[unsized_receiver_ty.into()]),\n-        })\n+        let predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n+            dispatch_from_dyn_did,\n+            receiver_ty,\n+            &[unsized_receiver_ty.into()],\n+        ))\n         .without_const();\n \n         Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)"}, {"sha": "e1b30112e39b5ca95e7ecee38467fbeaafc15e35", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -1710,9 +1710,9 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         if selcx.infcx().predicate_must_hold_modulo_regions(\n                             &obligation.with(\n                                 selcx.tcx(),\n-                                ty::Binder::dummy(ty::TraitRef::new(\n+                                ty::Binder::dummy(selcx.tcx().mk_trait_ref(\n                                     selcx.tcx().require_lang_item(LangItem::Sized, None),\n-                                    selcx.tcx().mk_substs_trait(self_ty, &[]),\n+                                    self_ty, &[],\n                                 ))\n                                 .without_const(),\n                             ),\n@@ -1966,9 +1966,10 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n         )\n     });\n     if check_is_sized {\n-        let sized_predicate = ty::Binder::dummy(ty::TraitRef::new(\n+        let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n             tcx.require_lang_item(LangItem::Sized, None),\n-            tcx.mk_substs_trait(self_ty, &[]),\n+            self_ty,\n+            &[],\n         ))\n         .without_const();\n         obligations.push(obligation.with(tcx, sized_predicate));"}, {"sha": "78f0807bd95b529d24ac921a7c1761b5d2f8b58f", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -18,10 +18,10 @@ pub(crate) fn update<'tcx, T>(\n     {\n         let new_self_ty = infcx.tcx.types.unit;\n \n-        let trait_ref = ty::TraitRef {\n-            substs: infcx.tcx.mk_substs_trait(new_self_ty, &tpred.trait_ref.substs[1..]),\n-            ..tpred.trait_ref\n-        };\n+        let trait_ref = infcx.tcx.mk_trait_ref(\n+            tpred.trait_ref.def_id,\n+            new_self_ty, &tpred.trait_ref.substs[1..],\n+        );\n \n         // Then construct a new obligation with Self = () added\n         // to the ParamEnv, and see if it holds."}, {"sha": "6b19b9297c5154d44ad386593efc05985664ed27", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -714,10 +714,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // <ty as Deref>\n-        let trait_ref = ty::TraitRef {\n-            def_id: tcx.lang_items().deref_trait()?,\n-            substs: tcx.mk_substs_trait(ty, &[]),\n-        };\n+        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, ty, &[]);\n \n         let obligation = traits::Obligation::new(\n             tcx,"}, {"sha": "6d737b455bf20bbec134f0fd02ba84c3107e0e88", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -632,9 +632,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr = ty::Binder::dummy(ty::TraitRef::new(\n+        let tr = ty::Binder::dummy(self.tcx().mk_trait_ref(\n             self.tcx().require_lang_item(LangItem::Sized, None),\n-            self.tcx().mk_substs_trait(output_ty, &[]),\n+            output_ty,\n+            &[],\n         ));\n         nested.push(Obligation::new(\n             self.infcx.tcx,\n@@ -996,9 +997,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::Binder::dummy(ty::TraitRef::new(\n+                let tr = ty::Binder::dummy(tcx.mk_trait_ref(\n                     tcx.require_lang_item(LangItem::Sized, None),\n-                    tcx.mk_substs_trait(source, &[]),\n+                    source,\n+                    &[],\n                 ));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n@@ -1253,10 +1255,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         self_ty.rebind(ty::TraitPredicate {\n-                            trait_ref: ty::TraitRef {\n-                                def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n-                                substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n-                            },\n+                            trait_ref: self.tcx().mk_trait_ref(\n+                                self.tcx().require_lang_item(LangItem::Destruct, None),\n+                                nested_ty,\n+                                &[],\n+                            ),\n                             constness: ty::BoundConstness::ConstIfConst,\n                             polarity: ty::ImplPolarity::Positive,\n                         }),\n@@ -1277,10 +1280,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n                     let predicate = self_ty.rebind(ty::TraitPredicate {\n-                        trait_ref: ty::TraitRef {\n-                            def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n-                            substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n-                        },\n+                        trait_ref: self.tcx().mk_trait_ref(\n+                            self.tcx().require_lang_item(LangItem::Destruct, None),\n+                            nested_ty,\n+                            &[],\n+                        ),\n                         constness: ty::BoundConstness::ConstIfConst,\n                         polarity: ty::ImplPolarity::Positive,\n                     });"}, {"sha": "21c79461edaf3e957c9060e10a97de9706509a96", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -241,8 +241,7 @@ pub fn predicate_for_trait_def<'tcx>(\n     self_ty: Ty<'tcx>,\n     params: &[GenericArg<'tcx>],\n ) -> PredicateObligation<'tcx> {\n-    let trait_ref =\n-        ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(self_ty, params) };\n+    let trait_ref = tcx.mk_trait_ref(trait_def_id, self_ty, params);\n     predicate_for_trait_ref(tcx, cause, param_env, trait_ref, recursion_depth)\n }\n \n@@ -305,10 +304,7 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n         TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n     };\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = ty::TraitRef {\n-        def_id: fn_trait_def_id,\n-        substs: tcx.mk_substs_trait(self_ty, &[arguments_tuple.into()]),\n-    };\n+    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, self_ty, &[arguments_tuple.into()]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n \n@@ -319,10 +315,8 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = ty::TraitRef {\n-        def_id: fn_trait_def_id,\n-        substs: tcx.mk_substs_trait(self_ty, &[sig.skip_binder().resume_ty.into()]),\n-    };\n+    let trait_ref =\n+        tcx.mk_trait_ref(fn_trait_def_id, self_ty, &[sig.skip_binder().resume_ty.into()]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n "}, {"sha": "3fe019cb7de698d3383efa03cf4b61edd6f6c301", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -421,10 +421,11 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n-            let trait_ref = ty::TraitRef {\n-                def_id: self.tcx.require_lang_item(LangItem::Sized, None),\n-                substs: self.tcx.mk_substs_trait(subty, &[]),\n-            };\n+            let trait_ref = self.tcx.mk_trait_ref(\n+                self.tcx.require_lang_item(LangItem::Sized, None),\n+                subty,\n+                &[],\n+            );\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}, {"sha": "e88d39cd2715d33e6ad1ae4adb6b0910308fdfb0", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -49,12 +49,9 @@ fn sized_constraint_for_ty<'tcx>(\n             // it on the impl.\n \n             let Some(sized_trait) = tcx.lang_items().sized_trait() else { return vec![ty] };\n-            let sized_predicate = ty::Binder::dummy(ty::TraitRef {\n-                def_id: sized_trait,\n-                substs: tcx.mk_substs_trait(ty, &[]),\n-            })\n-            .without_const()\n-            .to_predicate(tcx);\n+            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, ty, &[]))\n+                .without_const()\n+                .to_predicate(tcx);\n             let predicates = tcx.predicates_of(adtdef.did()).predicates;\n             if predicates.iter().any(|(p, _)| *p == sized_predicate) { vec![] } else { vec![ty] }\n         }"}, {"sha": "03ac2f14f7a6bdf463aea7dffa43a7437471a3eb", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f77c97b386f05083f039f0130146addf99eefd9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f77c97b386f05083f039f0130146addf99eefd9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6f77c97b386f05083f039f0130146addf99eefd9", "patch": "@@ -44,7 +44,7 @@ where\n         discard_positive_impl: bool,\n     ) -> Option<Item> {\n         let tcx = self.cx.tcx;\n-        let trait_ref = ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(ty, &[]) };\n+        let trait_ref = tcx.mk_trait_ref(trait_def_id, ty, &[]);\n         if !self.cx.generated_synthetics.insert((ty, trait_def_id)) {\n             debug!(\"get_auto_trait_impl_for({:?}): already generated, aborting\", trait_ref);\n             return None;"}]}