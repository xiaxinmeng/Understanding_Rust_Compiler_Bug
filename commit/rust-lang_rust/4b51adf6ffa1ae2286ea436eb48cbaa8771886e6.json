{"sha": "4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "node_id": "C_kwDOAAsO6NoAKDRiNTFhZGY2ZmZhMWFlMjI4NmVhNDM2ZWI0OGNiYWE4NzcxODg2ZTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T14:50:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T14:50:53Z"}, "message": "Auto merge of #106851 - matthiaskrgr:rollup-d9dz3yp, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #106046 (Fix mir-opt tests for big-endian platforms)\n - #106470 (tidy: Don't include wasm32 in compiler dependency check)\n - #106566 (Emit a single error for contiguous sequences of unknown tokens)\n - #106644 (Update the wasi-libc used for the wasm32-wasi target)\n - #106665 (Add note when `FnPtr` vs. `FnDef` impl trait)\n - #106752 (Emit a hint for bad call return types due to generic arguments)\n - #106788 (Tweak E0599 and elaborate_predicates)\n - #106831 (Use GitHub yaml templates for ICE, Docs and Diagnostics tickets)\n - #106846 (Improve some comments and names in parser)\n - #106848 (Fix wrong path in triage bot autolabel for wg-trait-solver-refactor)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4228def3b668261be93c3f176e32ab7deb4431da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4228def3b668261be93c3f176e32ab7deb4431da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "html_url": "https://github.com/rust-lang/rust/commit/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a500c8c187b245638684748f54bd6ec67e0b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a500c8c187b245638684748f54bd6ec67e0b25", "html_url": "https://github.com/rust-lang/rust/commit/44a500c8c187b245638684748f54bd6ec67e0b25"}, {"sha": "4173c7cc0f128d30269224351af2bc655905700f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4173c7cc0f128d30269224351af2bc655905700f", "html_url": "https://github.com/rust-lang/rust/commit/4173c7cc0f128d30269224351af2bc655905700f"}], "stats": {"total": 1389, "additions": 1082, "deletions": 307}, "files": [{"sha": "a7b70cea927d0c3b41bbcb4b0cee906be469d192", "filename": ".github/ISSUE_TEMPLATE/diagnostics.md", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/44a500c8c187b245638684748f54bd6ec67e0b25/.github%2FISSUE_TEMPLATE%2Fdiagnostics.md", "raw_url": "https://github.com/rust-lang/rust/raw/44a500c8c187b245638684748f54bd6ec67e0b25/.github%2FISSUE_TEMPLATE%2Fdiagnostics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fdiagnostics.md?ref=44a500c8c187b245638684748f54bd6ec67e0b25", "patch": "@@ -1,46 +0,0 @@\n----\n-name: Diagnostic issue\n-about: Create a bug report or feature request for a change to `rustc`'s error output\n-labels: A-diagnostics, T-compiler\n----\n-<!--\n-Thank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\n-along with any information you feel relevant to replicating the bug.\n-\n-If you cannot produce a minimal reproduction case (something that would work in\n-isolation), please provide the steps or even link to a repository that causes\n-the problematic output to occur.\n--->\n-\n-Given the following code: <!-- Please provide a link to play.rust-lang.org -->\n-\n-```rust\n-<code>\n-```\n-\n-The current output is:\n-\n-```\n-<rustc output>\n-```\n-\n-<!-- The following is not always necessary. -->\n-Ideally the output should look like:\n-\n-```\n-<proposed output>\n-```\n-\n-<!--\n-If the problem is not self-explanatory, please provide a rationale for the\n-change.\n--->\n-\n-<!--\n-If dramatically different output is caused by small changes, consider also\n-adding them here.\n-\n-If you're using the stable version of the compiler, you should also check if the\n-bug also exists in the beta or nightly versions. The output might also be\n-different depending on the Edition.\n--->"}, {"sha": "873fbaaf654fd15a28a131f069144243523eb5fa", "filename": ".github/ISSUE_TEMPLATE/diagnostics.yaml", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/.github%2FISSUE_TEMPLATE%2Fdiagnostics.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/.github%2FISSUE_TEMPLATE%2Fdiagnostics.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fdiagnostics.yaml?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,65 @@\n+name: Diagnostic issue\n+description: Create a bug report or feature request for a change to `rustc`'s error output\n+labels: [\"A-diagnostics\", \"T-compiler\"]\n+body:\n+  - type: markdown\n+    attributes:\n+      value: |\n+        Thank you for filing a diagnostics bug report! \ud83d\udc1b\n+\n+        Please provide a short summary of the bug, along with any information you feel relevant to replicating the bug.\n+\n+        If you cannot produce a minimal reproduction case (something that would work in isolation), please provide the steps or even link to a repository that causes the problematic output to occur.\n+  - type: textarea\n+    id: code\n+    attributes:\n+      label: Code\n+      description: Please provide code that can reproduce the problem\n+      placeholder: code\n+      render: Rust\n+    validations:\n+      required: true\n+  - type: textarea\n+    id: output\n+    attributes:\n+      label: Current output\n+      description: Please provide the `rustc` output you see\n+      placeholder: rustc output\n+      render: Shell\n+    validations:\n+      required: true\n+  - type: textarea\n+    id: desired-output\n+    attributes:\n+      label: Desired output\n+      description: Please provide what the output *should* be\n+      placeholder: proposed output\n+      render: Shell\n+    validations:\n+      required: false\n+  - type: textarea\n+    id: rationale\n+    attributes:\n+      label: Rationale and extra context\n+      description: If the problem is not self-explanatory, please provide a rationale for the change.\n+    validations:\n+      required: false\n+  - type: textarea\n+    id: other-output\n+    attributes:\n+      label: Other cases\n+      description: If dramatically different output is caused by small changes, consider also adding them here.\n+      render: Rust\n+    validations:\n+      required: false\n+  - type: markdown\n+    attributes:\n+      value: |\n+        If you're using the stable version of the compiler, you should also check if the bug also exists in the beta or nightly versions. The output might also be different depending on the Edition.\n+  - type: textarea\n+    id: extra\n+    attributes:\n+      label: Anything else?\n+      description: If you have more details you want to give us to reproduce this issue, please add it here\n+    validations:\n+      required: false\n\\ No newline at end of file"}, {"sha": "9ccda17a6ef47e41bc8cb41b906769b49c0d4cdf", "filename": ".github/ISSUE_TEMPLATE/documentation.md", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/44a500c8c187b245638684748f54bd6ec67e0b25/.github%2FISSUE_TEMPLATE%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/44a500c8c187b245638684748f54bd6ec67e0b25/.github%2FISSUE_TEMPLATE%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fdocumentation.md?ref=44a500c8c187b245638684748f54bd6ec67e0b25", "patch": "@@ -1,31 +0,0 @@\n----\n-name: Documentation problem\n-about: Create a report for a documentation problem.\n-labels: A-docs\n----\n-<!--\n-\n-Thank you for finding a documentation problem! \ud83d\udcda\n-\n-Documentation problems might be grammatical issues, typos, or unclear wording, please provide details regarding the documentation including where it is present.\n-\n-Note: If your issue is for one of these, please use their dedicated issue tracker instead:\n-\n-- The Rust Book: https://github.com/rust-lang/book/issues\n-- Rust by Example: https://github.com/rust-lang/rust-by-example/issues\n-- The Edition Guide: https://github.com/rust-lang/edition-guide/issues\n-- The Cargo Book: https://github.com/rust-lang/cargo/issues\n-- The Clippy Book: https://github.com/rust-lang/rust-clippy/issues\n-- The Reference: https://github.com/rust-lang/reference/issues\n-- The Rustonomicon: https://github.com/rust-lang/nomicon/issues\n-- The Embedded Book: https://github.com/rust-embedded/book/issues\n-\n-All other documentation issues should be filed here.\n-\n-Or, if you find an issue related to rustdoc (e.g. doctest, rustdoc UI), please use the bug report or blank issue template instead.\n-\n--->\n-\n-### Location\n-\n-### Summary"}, {"sha": "712b32759ae01427d087a47bed286643d6ada6fb", "filename": ".github/ISSUE_TEMPLATE/documentation.yaml", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/.github%2FISSUE_TEMPLATE%2Fdocumentation.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/.github%2FISSUE_TEMPLATE%2Fdocumentation.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fdocumentation.yaml?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,38 @@\n+name: Documentation problem\n+description: Create a report for a documentation problem.\n+labels: [\"A-docs\"]\n+body:\n+  - type: markdown\n+    attributes:\n+      value: |\n+        Thank you for finding a documentation problem! \ud83d\udcda\n+\n+        Documentation problems might be grammatical issues, typos, or unclear wording, please provide details regarding the documentation including where it is present.\n+\n+        Note: If your issue is for one of these, please use their dedicated issue tracker instead:\n+        - [The Rust Book](https://github.com/rust-lang/book/issues)\n+        - [Rust by Example](https://github.com/rust-lang/rust-by-example/issues)\n+        - [The Edition Guide](https://github.com/rust-lang/edition-guide/issues)\n+        - [The Cargo Book](https://github.com/rust-lang/cargo/issues)\n+        - [The Clippy Book](https://github.com/rust-lang/rust-clippy/issues)\n+        - [The Reference](https://github.com/rust-lang/reference/issues)\n+        - [The Rustonomicon](https://github.com/rust-lang/nomicon/issues)\n+        - [The Embedded Book](https://github.com/rust-embedded/book/issues)\n+\n+        All other documentation issues should be filed here.\n+\n+        Or, if you find an issue related to rustdoc (e.g. doctest, rustdoc UI), please use the bug report or blank issue template instead.\n+\n+  - type: textarea\n+    id: location\n+    attributes:\n+      label: Location\n+    validations:\n+      required: true \n+\n+  - type: textarea\n+    id: summary\n+    attributes:\n+      label: Summary\n+    validations:\n+      required: true \n\\ No newline at end of file"}, {"sha": "03bc4bab45137c76d85bdd644f76d8640a614ab3", "filename": ".github/ISSUE_TEMPLATE/ice.md", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/44a500c8c187b245638684748f54bd6ec67e0b25/.github%2FISSUE_TEMPLATE%2Fice.md", "raw_url": "https://github.com/rust-lang/rust/raw/44a500c8c187b245638684748f54bd6ec67e0b25/.github%2FISSUE_TEMPLATE%2Fice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fice.md?ref=44a500c8c187b245638684748f54bd6ec67e0b25", "patch": "@@ -1,52 +0,0 @@\n----\n-name: Internal Compiler Error\n-about: Create a report for an internal compiler error in rustc.\n-labels: C-bug, I-ICE, T-compiler\n----\n-<!--\n-Thank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\n-a minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\n-how to create smaller examples.\n-\n-http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n-\n--->\n-\n-### Code\n-\n-```Rust\n-<code>\n-```\n-\n-\n-### Meta\n-<!--\n-If you're using the stable version of the compiler, you should also check if the\n-bug also exists in the beta or nightly versions.\n--->\n-\n-`rustc --version --verbose`:\n-```\n-<version>\n-```\n-\n-### Error output\n-\n-```\n-<output>\n-```\n-\n-<!--\n-Include a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\n-environment. E.g. `RUST_BACKTRACE=1 cargo build`.\n--->\n-<details><summary><strong>Backtrace</strong></summary>\n-<p>\n-\n-```\n-<backtrace>\n-```\n-\n-</p>\n-</details>\n-"}, {"sha": "54136cc6d439d7dcd8b918dc20d0bd4c6eb5322d", "filename": ".github/ISSUE_TEMPLATE/ice.yaml", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/.github%2FISSUE_TEMPLATE%2Fice.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/.github%2FISSUE_TEMPLATE%2Fice.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fice.yaml?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,82 @@\n+name: Internal Compiler Error\n+description: Create a report for an internal compiler error in `rustc`\n+labels: [\"C-bug\", \"I-ICE\", \"T-compiler\"]\n+title: \"[ICE]: \"\n+body:\n+  - type: markdown\n+    attributes:\n+      value: |\n+        Thank you for finding an Internal Compiler Error! \ud83e\uddca\n+\n+        If possible, try to provide a minimal verifiable example.\n+\n+        You can read \"[Rust Bug Minimization Patterns](http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/)\" for how to create smaller examples.\n+\n+  - type: textarea\n+    id: code\n+    attributes:\n+      label: Code\n+      description: Please provide code or a link to a repository that can reproduce the problem\n+      placeholder: code\n+      render: Rust\n+    validations:\n+      required: false\n+\n+  - type: checkboxes\n+    attributes:\n+      label: Affected release channels\n+      description: If you're using the stable version of the compiler, you should also check if the bug also exists in the beta or nightly versions\n+      options:\n+        - label: Previous Stable\n+          required: false\n+        - label: Current Stable\n+          required: false\n+        - label: Current Beta\n+          required: false\n+        - label: Current Nightly\n+          required: false\n+\n+  - type: textarea\n+    id: version\n+    attributes:\n+      label: Rust Version\n+      description: Please provide the `rustc` version, `rustc --version --verbose`\n+      placeholder: |\n+        $ rustc --version --verbose\n+        rustc 1.XX.Y (SHORTHASH DATE)\n+        binary: rustc\n+        commit-hash: LONGHASHVALUE\n+        commit-date: DATE\n+        host: PLATFORMTRIPLE\n+        release: 1.XX.Y\n+        LLVM version: XX.YY.ZZ\n+      render: Shell\n+    validations:\n+      required: true\n+\n+  - type: textarea\n+    id: output\n+    attributes:\n+      label: Current error output\n+      description: Please provide the `rustc` output you see\n+      placeholder: output\n+      render: Shell\n+    validations:\n+      required: false\n+\n+  - type: textarea\n+    id: backtrace\n+    attributes:\n+      label: Backtrace\n+      description: Include a backtrace in the code block by setting `RUST_BACKTRACE=full` in your environment, e.g. `RUST_BACKTRACE=full cargo build`\n+      render: Shell\n+    validations:\n+      required: true\n+\n+  - type: textarea\n+    id: extra\n+    attributes:\n+      label: Anything else?\n+      description: If you have more details you want to give us to reproduce this issue, please add it here\n+    validations:\n+      required: false\n\\ No newline at end of file"}, {"sha": "5511d301775590f8f9cec20e81a88d0b4afdae2c", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -5601,6 +5601,7 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n dependencies = [\n+ \"cargo-platform 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.14.0\",\n  \"ignore\",\n  \"lazy_static\","}, {"sha": "665dc8b6a2f2a4ed18091fb4952e550ca82ba30c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -85,6 +85,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n         self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n         self.check_for_binding_assigned_block_without_tail_expression(err, expr, expr_ty, expected);\n+        self.check_wrong_return_type_due_to_generic_arg(err, expr, expr_ty);\n     }\n \n     /// Requires that the two types unify, and prints an error message if\n@@ -1941,4 +1942,77 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_label(block.span, \"this block is missing a tail expression\");\n         }\n     }\n+\n+    fn check_wrong_return_type_due_to_generic_arg(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        checked_ty: Ty<'tcx>,\n+    ) {\n+        let Some(hir::Node::Expr(parent_expr)) = self.tcx.hir().find_parent(expr.hir_id) else { return; };\n+        enum CallableKind {\n+            Function,\n+            Method,\n+            Constructor,\n+        }\n+        let mut maybe_emit_help = |def_id: hir::def_id::DefId,\n+                                   callable: rustc_span::symbol::Ident,\n+                                   args: &[hir::Expr<'_>],\n+                                   kind: CallableKind| {\n+            let arg_idx = args.iter().position(|a| a.hir_id == expr.hir_id).unwrap();\n+            let fn_ty = self.tcx.bound_type_of(def_id).0;\n+            if !fn_ty.is_fn() {\n+                return;\n+            }\n+            let fn_sig = fn_ty.fn_sig(self.tcx).skip_binder();\n+            let Some(&arg) = fn_sig.inputs().get(arg_idx + if matches!(kind, CallableKind::Method) { 1 } else { 0 }) else { return; };\n+            if matches!(arg.kind(), ty::Param(_))\n+                && fn_sig.output().contains(arg)\n+                && self.node_ty(args[arg_idx].hir_id) == checked_ty\n+            {\n+                let mut multi_span: MultiSpan = parent_expr.span.into();\n+                multi_span.push_span_label(\n+                    args[arg_idx].span,\n+                    format!(\n+                        \"this argument influences the {} of `{}`\",\n+                        if matches!(kind, CallableKind::Constructor) {\n+                            \"type\"\n+                        } else {\n+                            \"return type\"\n+                        },\n+                        callable\n+                    ),\n+                );\n+                err.span_help(\n+                    multi_span,\n+                    format!(\n+                        \"the {} `{}` due to the type of the argument passed\",\n+                        match kind {\n+                            CallableKind::Function => \"return type of this call is\",\n+                            CallableKind::Method => \"return type of this call is\",\n+                            CallableKind::Constructor => \"type constructed contains\",\n+                        },\n+                        checked_ty\n+                    ),\n+                );\n+            }\n+        };\n+        match parent_expr.kind {\n+            hir::ExprKind::Call(fun, args) => {\n+                let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = fun.kind else { return; };\n+                let hir::def::Res::Def(kind, def_id) = path.res else { return; };\n+                let callable_kind = if matches!(kind, hir::def::DefKind::Ctor(_, _)) {\n+                    CallableKind::Constructor\n+                } else {\n+                    CallableKind::Function\n+                };\n+                maybe_emit_help(def_id, path.segments[0].ident, args, callable_kind);\n+            }\n+            hir::ExprKind::MethodCall(method, _receiver, args, _span) => {\n+                let Some(def_id) = self.typeck_results.borrow().type_dependent_def_id(parent_expr.hir_id) else { return; };\n+                maybe_emit_help(def_id, method.ident, args, CallableKind::Method)\n+            }\n+            _ => return,\n+        }\n+    }\n }"}, {"sha": "15f6e11717768cfd11ec078f0d620cc451c20897", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -1587,11 +1587,29 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         let o = self.resolve_vars_if_possible(o);\n                         if !self.predicate_may_hold(&o) {\n                             result = ProbeResult::NoMatch;\n-                            possibly_unsatisfied_predicates.push((\n-                                o.predicate,\n-                                None,\n-                                Some(o.cause),\n-                            ));\n+                            let parent_o = o.clone();\n+                            let implied_obligations =\n+                                traits::elaborate_obligations(self.tcx, vec![o]);\n+                            for o in implied_obligations {\n+                                let parent = if o == parent_o {\n+                                    None\n+                                } else {\n+                                    if o.predicate.to_opt_poly_trait_pred().map(|p| p.def_id())\n+                                        == self.tcx.lang_items().sized_trait()\n+                                    {\n+                                        // We don't care to talk about implicit `Sized` bounds.\n+                                        continue;\n+                                    }\n+                                    Some(parent_o.predicate)\n+                                };\n+                                if !self.predicate_may_hold(&o) {\n+                                    possibly_unsatisfied_predicates.push((\n+                                        o.predicate,\n+                                        parent,\n+                                        Some(o.cause),\n+                                    ));\n+                                }\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "f49fde04e8444f0b0ac09600d3c9ea31fad1691a", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -505,19 +505,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                             _ => None,\n                         };\n-                        if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n-                            if let Some(g) = kind.generics() {\n-                                let key = (\n-                                    g.tail_span_for_predicate_suggestion(),\n-                                    g.add_where_or_trailing_comma(),\n-                                );\n-                                type_params\n-                                    .entry(key)\n-                                    .or_insert_with(FxHashSet::default)\n-                                    .insert(obligation.to_owned());\n-                            }\n+                        if let Some(hir::Node::Item(hir::Item { kind, .. })) = node\n+                            && let Some(g) = kind.generics()\n+                        {\n+                            let key = (\n+                                g.tail_span_for_predicate_suggestion(),\n+                                g.add_where_or_trailing_comma(),\n+                            );\n+                            type_params\n+                                .entry(key)\n+                                .or_insert_with(FxHashSet::default)\n+                                .insert(obligation.to_owned());\n+                            return true;\n                         }\n                     }\n+                    false\n                 };\n             let mut bound_span_label = |self_ty: Ty<'_>, obligation: &str, quiet: &str| {\n                 let msg = format!(\n@@ -692,7 +694,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"auto trait is invoked with no method error, but no error reported?\",\n                         );\n                     }\n-                    Some(_) => unreachable!(),\n+                    Some(Node::Item(hir::Item {\n+                        ident, kind: hir::ItemKind::Trait(..), ..\n+                    })) => {\n+                        skip_list.insert(p);\n+                        let entry = spanned_predicates.entry(ident.span);\n+                        let entry = entry.or_insert_with(|| {\n+                            (FxHashSet::default(), FxHashSet::default(), Vec::new())\n+                        });\n+                        entry.0.insert(cause.span);\n+                        entry.1.insert((ident.span, \"\"));\n+                        entry.1.insert((cause.span, \"unsatisfied trait bound introduced here\"));\n+                        entry.2.push(p);\n+                    }\n+                    Some(node) => unreachable!(\"encountered `{node:?}`\"),\n                     None => (),\n                 }\n             }\n@@ -719,19 +734,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 unsatisfied_bounds = true;\n             }\n \n+            let mut suggested_bounds = FxHashSet::default();\n             // The requirements that didn't have an `impl` span to show.\n             let mut bound_list = unsatisfied_predicates\n                 .iter()\n                 .filter_map(|(pred, parent_pred, _cause)| {\n+                    let mut suggested = false;\n                     format_pred(*pred).map(|(p, self_ty)| {\n-                        collect_type_param_suggestions(self_ty, *pred, &p);\n+                        if let Some(parent) = parent_pred && suggested_bounds.contains(parent) {\n+                            // We don't suggest `PartialEq` when we already suggest `Eq`.\n+                        } else if !suggested_bounds.contains(pred) {\n+                            if collect_type_param_suggestions(self_ty, *pred, &p) {\n+                                suggested = true;\n+                                suggested_bounds.insert(pred);\n+                            }\n+                        }\n                         (\n                             match parent_pred {\n                                 None => format!(\"`{}`\", &p),\n                                 Some(parent_pred) => match format_pred(*parent_pred) {\n                                     None => format!(\"`{}`\", &p),\n                                     Some((parent_p, _)) => {\n-                                        collect_type_param_suggestions(self_ty, *parent_pred, &p);\n+                                        if !suggested\n+                                            && !suggested_bounds.contains(pred)\n+                                            && !suggested_bounds.contains(parent_pred)\n+                                        {\n+                                            if collect_type_param_suggestions(\n+                                                self_ty,\n+                                                *parent_pred,\n+                                                &p,\n+                                            ) {\n+                                                suggested_bounds.insert(pred);\n+                                            }\n+                                        }\n                                         format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)\n                                     }\n                                 },"}, {"sha": "1817bbf92285476c0b0b3d9fde2353304033cbf8", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -1,7 +1,7 @@\n use smallvec::smallvec;\n \n use crate::infer::outlives::components::{push_outlives_components, Component};\n-use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n+use crate::traits::{self, Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_middle::ty::{self, ToPredicate, TyCtxt};\n use rustc_span::symbol::Ident;\n@@ -145,16 +145,28 @@ impl<'tcx> Elaborator<'tcx> {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let obligations = predicates.predicates.iter().map(|&(mut pred, _)| {\n+                let obligations = predicates.predicates.iter().map(|&(mut pred, span)| {\n                     // when parent predicate is non-const, elaborate it to non-const predicates.\n                     if data.constness == ty::BoundConstness::NotConst {\n                         pred = pred.without_const(tcx);\n                     }\n \n+                    let cause = obligation.cause.clone().derived_cause(\n+                        bound_predicate.rebind(data),\n+                        |derived| {\n+                            traits::ImplDerivedObligation(Box::new(\n+                                traits::ImplDerivedObligationCause {\n+                                    derived,\n+                                    impl_def_id: data.def_id(),\n+                                    span,\n+                                },\n+                            ))\n+                        },\n+                    );\n                     predicate_obligation(\n                         pred.subst_supertrait(tcx, &bound_predicate.rebind(data.trait_ref)),\n                         obligation.param_env,\n-                        obligation.cause.clone(),\n+                        cause,\n                     )\n                 });\n                 debug!(?data, ?obligations, \"super_predicates\");"}, {"sha": "8761c23625b210063b1cdfbddf08e7f712cfc395", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -79,7 +79,7 @@ impl<'a> StringReader<'a> {\n     /// preceded by whitespace.\n     fn next_token(&mut self) -> (Token, bool) {\n         let mut preceded_by_whitespace = false;\n-\n+        let mut swallow_next_invalid = 0;\n         // Skip trivial (whitespace & comments) tokens\n         loop {\n             let token = self.cursor.advance_token();\n@@ -232,19 +232,34 @@ impl<'a> StringReader<'a> {\n                 rustc_lexer::TokenKind::Percent => token::BinOp(token::Percent),\n \n                 rustc_lexer::TokenKind::Unknown | rustc_lexer::TokenKind::InvalidIdent => {\n-                    let c = self.str_from(start).chars().next().unwrap();\n+                    // Don't emit diagnostics for sequences of the same invalid token\n+                    if swallow_next_invalid > 0 {\n+                        swallow_next_invalid -= 1;\n+                        continue;\n+                    }\n+                    let mut it = self.str_from_to_end(start).chars();\n+                    let c = it.next().unwrap();\n+                    let repeats = it.take_while(|c1| *c1 == c).count();\n                     let mut err =\n-                        self.struct_err_span_char(start, self.pos, \"unknown start of token\", c);\n+                        self.struct_err_span_char(start, self.pos + Pos::from_usize(repeats * c.len_utf8()), \"unknown start of token\", c);\n                     // FIXME: the lexer could be used to turn the ASCII version of unicode\n                     // homoglyphs, instead of keeping a table in `check_for_substitution`into the\n                     // token. Ideally, this should be inside `rustc_lexer`. However, we should\n                     // first remove compound tokens like `<<` from `rustc_lexer`, and then add\n                     // fancier error recovery to it, as there will be less overall work to do this\n                     // way.\n-                    let token = unicode_chars::check_for_substitution(self, start, c, &mut err);\n+                    let token = unicode_chars::check_for_substitution(self, start, c, &mut err, repeats+1);\n                     if c == '\\x00' {\n                         err.help(\"source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used\");\n                     }\n+                    if repeats > 0 {\n+                        if repeats == 1 {\n+                            err.note(format!(\"character appears once more\"));\n+                        } else {\n+                            err.note(format!(\"character appears {repeats} more times\"));\n+                        }\n+                        swallow_next_invalid = repeats;\n+                    }\n                     err.emit();\n                     if let Some(token) = token {\n                         token\n@@ -486,6 +501,11 @@ impl<'a> StringReader<'a> {\n         &self.src[self.src_index(start)..self.src_index(end)]\n     }\n \n+    /// Slice of the source text spanning from `start` until the end\n+    fn str_from_to_end(&self, start: BytePos) -> &str {\n+        &self.src[self.src_index(start)..]\n+    }\n+\n     fn report_raw_str_error(&self, start: BytePos, prefix_len: u32) -> ! {\n         match rustc_lexer::validate_raw_str(self.str_from(start), prefix_len) {\n             Err(RawStrError::InvalidStarter { bad_char }) => {"}, {"sha": "65479b341d7a8f5c2687a97b3e4ecd768962ea34", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -337,10 +337,11 @@ pub(super) fn check_for_substitution<'a>(\n     pos: BytePos,\n     ch: char,\n     err: &mut Diagnostic,\n+    count: usize,\n ) -> Option<token::TokenKind> {\n     let &(_u_char, u_name, ascii_char) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch)?;\n \n-    let span = Span::with_root_ctxt(pos, pos + Pos::from_usize(ch.len_utf8()));\n+    let span = Span::with_root_ctxt(pos, pos + Pos::from_usize(ch.len_utf8() * count));\n \n     let Some((_ascii_char, ascii_name, token)) = ASCII_ARRAY.iter().find(|&&(c, _, _)| c == ascii_char) else {\n         let msg = format!(\"substitution character not found for '{}'\", ch);\n@@ -369,7 +370,12 @@ pub(super) fn check_for_substitution<'a>(\n             \"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n             ch, u_name, ascii_char, ascii_name\n         );\n-        err.span_suggestion(span, &msg, ascii_char, Applicability::MaybeIncorrect);\n+        err.span_suggestion(\n+            span,\n+            &msg,\n+            ascii_char.to_string().repeat(count),\n+            Applicability::MaybeIncorrect,\n+        );\n     }\n     token.clone()\n }"}, {"sha": "645f8633941057ecd984751f340c768e6a783374", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -83,7 +83,7 @@ macro_rules! maybe_whole_expr {\n pub(super) enum LhsExpr {\n     NotYetParsed,\n     AttributesParsed(AttrWrapper),\n-    AlreadyParsed(P<Expr>, bool), // (expr, starts_statement)\n+    AlreadyParsed { expr: P<Expr>, starts_statement: bool },\n }\n \n impl From<Option<AttrWrapper>> for LhsExpr {\n@@ -97,11 +97,11 @@ impl From<Option<AttrWrapper>> for LhsExpr {\n }\n \n impl From<P<Expr>> for LhsExpr {\n-    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.\n+    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed { expr, starts_statement: false }`.\n     ///\n     /// This conversion does not allocate.\n     fn from(expr: P<Expr>) -> Self {\n-        LhsExpr::AlreadyParsed(expr, false)\n+        LhsExpr::AlreadyParsed { expr, starts_statement: false }\n     }\n }\n \n@@ -174,7 +174,7 @@ impl<'a> Parser<'a> {\n         lhs: LhsExpr,\n     ) -> PResult<'a, P<Expr>> {\n         let mut starts_stmt = false;\n-        let mut lhs = if let LhsExpr::AlreadyParsed(expr, starts_statement) = lhs {\n+        let mut lhs = if let LhsExpr::AlreadyParsed { expr, starts_statement } = lhs {\n             starts_stmt = starts_statement;\n             expr\n         } else {\n@@ -562,17 +562,23 @@ impl<'a> Parser<'a> {\n \n         // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()\n         match this.token.uninterpolate().kind {\n-            token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)), // `!expr`\n-            token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)), // `~expr`\n+            // `!expr`\n+            token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)),\n+            // `~expr`\n+            token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)),\n+            // `-expr`\n             token::BinOp(token::Minus) => {\n                 make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Neg))\n-            } // `-expr`\n+            }\n+            // `*expr`\n             token::BinOp(token::Star) => {\n                 make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Deref))\n-            } // `*expr`\n+            }\n+            // `&expr` and `&&expr`\n             token::BinOp(token::And) | token::AndAnd => {\n                 make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))\n             }\n+            // `+lit`\n             token::BinOp(token::Plus) if this.look_ahead(1, |tok| tok.is_numeric_lit()) => {\n                 let mut err =\n                     LeadingPlusNotSupported { span: lo, remove_plus: None, add_parentheses: None };\n@@ -587,7 +593,7 @@ impl<'a> Parser<'a> {\n \n                 this.bump();\n                 this.parse_prefix_expr(None)\n-            } // `+expr`\n+            }\n             // Recover from `++x`:\n             token::BinOp(token::Plus)\n                 if this.look_ahead(1, |t| *t == token::BinOp(token::Plus)) =>\n@@ -624,7 +630,7 @@ impl<'a> Parser<'a> {\n         Ok((span, self.mk_unary(op, expr)))\n     }\n \n-    // Recover on `!` suggesting for bitwise negation instead.\n+    /// Recover on `~expr` in favor of `!expr`.\n     fn recover_tilde_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         self.sess.emit_err(TildeAsUnaryOperator(lo));\n \n@@ -651,7 +657,6 @@ impl<'a> Parser<'a> {\n \n     /// Recover on `not expr` in favor of `!expr`.\n     fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n-        // Emit the error...\n         let negated_token = self.look_ahead(1, |t| t.clone());\n \n         let sub_diag = if negated_token.is_numeric_lit() {\n@@ -672,7 +677,6 @@ impl<'a> Parser<'a> {\n             ),\n         });\n \n-        // ...and recover!\n         self.parse_unary_expr(lo, UnOp::Not)\n     }\n \n@@ -1593,7 +1597,7 @@ impl<'a> Parser<'a> {\n                     vis.0\n                 };\n \n-                // Suggestion involves adding a (as of time of writing this, unstable) labeled block.\n+                // Suggestion involves adding a labeled block.\n                 //\n                 // If there are no breaks that may use this label, suggest removing the label and\n                 // recover to the unmodified expression."}, {"sha": "4ff9927aab51af8d3acf925aeff8ccfd6f8ba9fc", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -164,7 +164,10 @@ impl<'a> Parser<'a> {\n             // Perform this outside of the `collect_tokens_trailing_token` closure,\n             // since our outer attributes do not apply to this part of the expression\n             let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n-                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr, true))\n+                this.parse_assoc_expr_with(\n+                    0,\n+                    LhsExpr::AlreadyParsed { expr, starts_statement: true },\n+                )\n             })?;\n             Ok(self.mk_stmt(lo.to(self.prev_token.span), StmtKind::Expr(expr)))\n         } else {\n@@ -198,7 +201,10 @@ impl<'a> Parser<'a> {\n             let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac));\n             let e = self.maybe_recover_from_bad_qpath(e)?;\n             let e = self.parse_dot_or_call_expr_with(e, lo, attrs)?;\n-            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e, false))?;\n+            let e = self.parse_assoc_expr_with(\n+                0,\n+                LhsExpr::AlreadyParsed { expr: e, starts_statement: false },\n+            )?;\n             StmtKind::Expr(e)\n         };\n         Ok(self.mk_stmt(lo.to(hi), kind))"}, {"sha": "41a64a844ce49e15ed408ce1c110363b631e61b9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -374,6 +374,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         })\n     }\n }\n+\n impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn report_fulfillment_errors(\n         &self,\n@@ -852,6 +853,29 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         let mut suggested =\n                             self.suggest_dereferences(&obligation, &mut err, trait_predicate);\n                         suggested |= self.suggest_fn_call(&obligation, &mut err, trait_predicate);\n+                        let impl_candidates = self.find_similar_impl_candidates(trait_predicate);\n+                        suggested = if let &[cand] = &impl_candidates[..] {\n+                            let cand = cand.trait_ref;\n+                            if let (ty::FnPtr(_), ty::FnDef(..)) =\n+                                (cand.self_ty().kind(), trait_ref.self_ty().skip_binder().kind())\n+                            {\n+                                err.span_suggestion(\n+                                    span.shrink_to_hi(),\n+                                    format!(\n+                                        \"the trait `{}` is implemented for fn pointer `{}`, try casting using `as`\",\n+                                        cand.print_only_trait_path(),\n+                                        cand.self_ty(),\n+                                    ),\n+                                    format!(\" as {}\", cand.self_ty()),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                true\n+                            } else {\n+                                false\n+                            }\n+                        } else {\n+                            false\n+                        } || suggested;\n                         suggested |=\n                             self.suggest_remove_reference(&obligation, &mut err, trait_predicate);\n                         suggested |= self.suggest_semicolon_removal(\n@@ -1968,27 +1992,25 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             candidates.sort();\n             candidates.dedup();\n             let len = candidates.len();\n-            if candidates.len() == 0 {\n+            if candidates.is_empty() {\n                 return false;\n             }\n-            if candidates.len() == 1 {\n-                let ty_desc = match candidates[0].self_ty().kind() {\n-                    ty::FnPtr(_) => Some(\"fn pointer\"),\n-                    _ => None,\n-                };\n-                let the_desc = match ty_desc {\n-                    Some(desc) => format!(\" implemented for {} `\", desc),\n-                    None => \" implemented for `\".to_string(),\n-                };\n+            if let &[cand] = &candidates[..] {\n+                let (desc, mention_castable) =\n+                    match (cand.self_ty().kind(), trait_ref.self_ty().skip_binder().kind()) {\n+                        (ty::FnPtr(_), ty::FnDef(..)) => {\n+                            (\" implemented for fn pointer `\", \", cast using `as`\")\n+                        }\n+                        (ty::FnPtr(_), _) => (\" implemented for fn pointer `\", \"\"),\n+                        _ => (\" implemented for `\", \"\"),\n+                    };\n                 err.highlighted_help(vec![\n-                    (\n-                        format!(\"the trait `{}` \", candidates[0].print_only_trait_path()),\n-                        Style::NoStyle,\n-                    ),\n+                    (format!(\"the trait `{}` \", cand.print_only_trait_path()), Style::NoStyle),\n                     (\"is\".to_string(), Style::Highlight),\n-                    (the_desc, Style::NoStyle),\n-                    (candidates[0].self_ty().to_string(), Style::Highlight),\n+                    (desc.to_string(), Style::NoStyle),\n+                    (cand.self_ty().to_string(), Style::Highlight),\n                     (\"`\".to_string(), Style::NoStyle),\n+                    (mention_castable.to_string(), Style::NoStyle),\n                 ]);\n                 return true;\n             }"}, {"sha": "5fbce36c39d2844ba3b6be365f97822913f1e2a0", "filename": "src/ci/docker/host-x86_64/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -10,7 +10,7 @@ bin=\"$PWD/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04/bin\"\n git clone https://github.com/WebAssembly/wasi-libc\n \n cd wasi-libc\n-git reset --hard 8b7148f69ae241a2749b3defe4606da8143b72e0\n+git reset --hard 4362b1885fd369e042a7c0ecd8df3b6cd47fb4e8\n make -j$(nproc) \\\n     CC=\"$bin/clang\" \\\n     NM=\"$bin/llvm-nm\" \\"}, {"sha": "19812fc6f55b630f9e557d2216e0a45f548a37c6", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -6,6 +6,7 @@ autobins = false\n \n [dependencies]\n cargo_metadata = \"0.14\"\n+cargo-platform = \"0.1.2\"\n regex = \"1\"\n miropt-test-tools = { path = \"../miropt-test-tools\" }\n lazy_static = \"1\""}, {"sha": "bc2edf634de2b617b5f0c46da2c20051f379784c", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 65, "deletions": 103, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -1,7 +1,7 @@\n //! Checks the licenses of third-party dependencies.\n \n-use cargo_metadata::{Metadata, Package, PackageId, Resolve};\n-use std::collections::{BTreeSet, HashSet};\n+use cargo_metadata::{DepKindInfo, Metadata, Package, PackageId};\n+use std::collections::HashSet;\n use std::path::Path;\n \n /// These are licenses that are allowed for all crates, including the runtime,\n@@ -98,14 +98,12 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"autocfg\",\n     \"bitflags\",\n     \"block-buffer\",\n-    \"bumpalo\", // Included in Cargo's dep graph but only activated on wasm32-*-unknown.\n     \"cc\",\n     \"cfg-if\",\n     \"chalk-derive\",\n     \"chalk-engine\",\n     \"chalk-ir\",\n     \"chalk-solve\",\n-    \"chrono\",\n     \"convert_case\", // dependency of derive_more\n     \"compiler_builtins\",\n     \"cpufeatures\",\n@@ -124,11 +122,9 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"dlmalloc\",\n     \"either\",\n     \"ena\",\n-    \"env_logger\",\n     \"expect-test\",\n     \"fallible-iterator\", // dependency of `thorin`\n     \"fastrand\",\n-    \"filetime\",\n     \"fixedbitset\",\n     \"flate2\",\n     \"fluent-bundle\",\n@@ -142,21 +138,18 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"gsgdt\",\n     \"hashbrown\",\n     \"hermit-abi\",\n-    \"humantime\",\n     \"icu_list\",\n     \"icu_locid\",\n     \"icu_provider\",\n     \"icu_provider_adapters\",\n     \"icu_provider_macros\",\n-    \"if_chain\",\n     \"indexmap\",\n     \"instant\",\n     \"intl-memoizer\",\n     \"intl_pluralrules\",\n     \"itertools\",\n     \"itoa\",\n     \"jobserver\",\n-    \"js-sys\", // Included in Cargo's dep graph but only activated on wasm32-*-unknown.\n     \"lazy_static\",\n     \"libc\",\n     \"libloading\",\n@@ -171,8 +164,6 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"memmap2\",\n     \"memoffset\",\n     \"miniz_oxide\",\n-    \"num-integer\",\n-    \"num-traits\",\n     \"num_cpus\",\n     \"object\",\n     \"odht\",\n@@ -190,7 +181,6 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"proc-macro2\",\n     \"psm\",\n     \"punycode\",\n-    \"quick-error\",\n     \"quote\",\n     \"rand\",\n     \"rand_chacha\",\n@@ -235,7 +225,6 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"thiserror-impl\",\n     \"thorin-dwp\",\n     \"thread_local\",\n-    \"time\",\n     \"tinystr\",\n     \"tinyvec\",\n     \"tinyvec_macros\",\n@@ -268,13 +257,6 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"valuable\",\n     \"version_check\",\n     \"wasi\",\n-    // vvv Included in Cargo's dep graph but only activated on wasm32-*-unknown.\n-    \"wasm-bindgen\",\n-    \"wasm-bindgen-backend\",\n-    \"wasm-bindgen-macro\",\n-    \"wasm-bindgen-macro-support\",\n-    \"wasm-bindgen-shared\",\n-    // ^^^ Included in Cargo's dep graph but only activated on wasm32-*-unknown.\n     \"winapi\",\n     \"winapi-i686-pc-windows-gnu\",\n     \"winapi-util\",\n@@ -485,73 +467,55 @@ fn check_permitted_dependencies(\n     restricted_dependency_crates: &[&'static str],\n     bad: &mut bool,\n ) {\n+    let mut deps = HashSet::new();\n+    for to_check in restricted_dependency_crates {\n+        let to_check = pkg_from_name(metadata, to_check);\n+        use cargo_platform::Cfg;\n+        use std::str::FromStr;\n+        // We don't expect the compiler to ever run on wasm32, so strip\n+        // out those dependencies to avoid polluting the permitted list.\n+        deps_of_filtered(metadata, &to_check.id, &mut deps, &|dep_kinds| {\n+            dep_kinds.iter().any(|dep_kind| {\n+                dep_kind\n+                    .target\n+                    .as_ref()\n+                    .map(|target| {\n+                        !target.matches(\n+                            \"wasm32-unknown-unknown\",\n+                            &[\n+                                Cfg::from_str(\"target_arch=\\\"wasm32\\\"\").unwrap(),\n+                                Cfg::from_str(\"target_os=\\\"unknown\\\"\").unwrap(),\n+                            ],\n+                        )\n+                    })\n+                    .unwrap_or(true)\n+            })\n+        });\n+    }\n+\n     // Check that the PERMITTED_DEPENDENCIES does not have unused entries.\n-    for name in permitted_dependencies {\n-        if !metadata.packages.iter().any(|p| p.name == *name) {\n+    for permitted in permitted_dependencies {\n+        if !deps.iter().any(|dep_id| &pkg_from_id(metadata, dep_id).name == permitted) {\n             tidy_error!(\n                 bad,\n-                \"could not find allowed package `{}`\\n\\\n+                \"could not find allowed package `{permitted}`\\n\\\n                 Remove from PERMITTED_DEPENDENCIES list if it is no longer used.\",\n-                name\n             );\n         }\n     }\n-    // Get the list in a convenient form.\n-    let permitted_dependencies: HashSet<_> = permitted_dependencies.iter().cloned().collect();\n-\n-    // Check dependencies.\n-    let mut visited = BTreeSet::new();\n-    let mut unapproved = BTreeSet::new();\n-    for &krate in restricted_dependency_crates.iter() {\n-        let pkg = pkg_from_name(metadata, krate);\n-        let mut bad =\n-            check_crate_dependencies(&permitted_dependencies, metadata, &mut visited, pkg);\n-        unapproved.append(&mut bad);\n-    }\n-\n-    if !unapproved.is_empty() {\n-        tidy_error!(bad, \"Dependencies for {} not explicitly permitted:\", descr);\n-        for dep in unapproved {\n-            println!(\"* {dep}\");\n-        }\n-    }\n-}\n-\n-/// Checks the dependencies of the given crate from the given cargo metadata to see if they are on\n-/// the list of permitted dependencies. Returns a list of disallowed dependencies.\n-fn check_crate_dependencies<'a>(\n-    permitted_dependencies: &'a HashSet<&'static str>,\n-    metadata: &'a Metadata,\n-    visited: &mut BTreeSet<&'a PackageId>,\n-    krate: &'a Package,\n-) -> BTreeSet<&'a PackageId> {\n-    // This will contain bad deps.\n-    let mut unapproved = BTreeSet::new();\n-\n-    // Check if we have already visited this crate.\n-    if visited.contains(&krate.id) {\n-        return unapproved;\n-    }\n \n-    visited.insert(&krate.id);\n+    // Get in a convenient form.\n+    let permitted_dependencies: HashSet<_> = permitted_dependencies.iter().cloned().collect();\n \n-    // If this path is in-tree, we don't require it to be explicitly permitted.\n-    if krate.source.is_some() {\n-        // If this dependency is not on `PERMITTED_DEPENDENCIES`, add to bad set.\n-        if !permitted_dependencies.contains(krate.name.as_str()) {\n-            unapproved.insert(&krate.id);\n+    for dep in deps {\n+        let dep = pkg_from_id(metadata, dep);\n+        // If this path is in-tree, we don't require it to be explicitly permitted.\n+        if dep.source.is_some() {\n+            if !permitted_dependencies.contains(dep.name.as_str()) {\n+                tidy_error!(bad, \"Dependency for {descr} not explicitly permitted: {}\", dep.id);\n+            }\n         }\n     }\n-\n-    // Do a DFS in the crate graph.\n-    let to_check = deps_of(metadata, &krate.id);\n-\n-    for dep in to_check {\n-        let mut bad = check_crate_dependencies(permitted_dependencies, metadata, visited, dep);\n-        unapproved.append(&mut bad);\n-    }\n-\n-    unapproved\n }\n \n /// Prevents multiple versions of some expensive crates.\n@@ -588,24 +552,6 @@ fn check_crate_duplicate(\n     }\n }\n \n-/// Returns a list of dependencies for the given package.\n-fn deps_of<'a>(metadata: &'a Metadata, pkg_id: &'a PackageId) -> Vec<&'a Package> {\n-    let resolve = metadata.resolve.as_ref().unwrap();\n-    let node = resolve\n-        .nodes\n-        .iter()\n-        .find(|n| &n.id == pkg_id)\n-        .unwrap_or_else(|| panic!(\"could not find `{pkg_id}` in resolve\"));\n-    node.deps\n-        .iter()\n-        .map(|dep| {\n-            metadata.packages.iter().find(|pkg| pkg.id == dep.pkg).unwrap_or_else(|| {\n-                panic!(\"could not find dep `{}` for pkg `{}` in resolve\", dep.pkg, pkg_id)\n-            })\n-        })\n-        .collect()\n-}\n-\n /// Finds a package with the given name.\n fn pkg_from_name<'a>(metadata: &'a Metadata, name: &'static str) -> &'a Package {\n     let mut i = metadata.packages.iter().filter(|p| p.name == name);\n@@ -615,41 +561,57 @@ fn pkg_from_name<'a>(metadata: &'a Metadata, name: &'static str) -> &'a Package\n     result\n }\n \n+fn pkg_from_id<'a>(metadata: &'a Metadata, id: &PackageId) -> &'a Package {\n+    metadata.packages.iter().find(|p| &p.id == id).unwrap()\n+}\n+\n /// Finds all the packages that are in the rust runtime.\n fn compute_runtime_crates<'a>(metadata: &'a Metadata) -> HashSet<&'a PackageId> {\n-    let resolve = metadata.resolve.as_ref().unwrap();\n     let mut result = HashSet::new();\n     for name in RUNTIME_CRATES {\n         let id = &pkg_from_name(metadata, name).id;\n-        normal_deps_of_r(resolve, id, &mut result);\n+        deps_of_filtered(metadata, id, &mut result, &|_| true);\n     }\n     result\n }\n \n-/// Recursively find all normal dependencies.\n-fn normal_deps_of_r<'a>(\n-    resolve: &'a Resolve,\n+/// Recursively find all dependencies.\n+fn deps_of_filtered<'a>(\n+    metadata: &'a Metadata,\n     pkg_id: &'a PackageId,\n     result: &mut HashSet<&'a PackageId>,\n+    filter: &dyn Fn(&[DepKindInfo]) -> bool,\n ) {\n     if !result.insert(pkg_id) {\n         return;\n     }\n-    let node = resolve\n+    let node = metadata\n+        .resolve\n+        .as_ref()\n+        .unwrap()\n         .nodes\n         .iter()\n         .find(|n| &n.id == pkg_id)\n         .unwrap_or_else(|| panic!(\"could not find `{pkg_id}` in resolve\"));\n     for dep in &node.deps {\n-        normal_deps_of_r(resolve, &dep.pkg, result);\n+        if !filter(&dep.dep_kinds) {\n+            continue;\n+        }\n+        deps_of_filtered(metadata, &dep.pkg, result, filter);\n     }\n }\n \n+fn direct_deps_of<'a>(metadata: &'a Metadata, pkg_id: &'a PackageId) -> Vec<&'a Package> {\n+    let resolve = metadata.resolve.as_ref().unwrap();\n+    let node = resolve.nodes.iter().find(|n| &n.id == pkg_id).unwrap();\n+    node.deps.iter().map(|dep| pkg_from_id(metadata, &dep.pkg)).collect()\n+}\n+\n fn check_rustfix(metadata: &Metadata, bad: &mut bool) {\n     let cargo = pkg_from_name(metadata, \"cargo\");\n     let compiletest = pkg_from_name(metadata, \"compiletest\");\n-    let cargo_deps = deps_of(metadata, &cargo.id);\n-    let compiletest_deps = deps_of(metadata, &compiletest.id);\n+    let cargo_deps = direct_deps_of(metadata, &cargo.id);\n+    let compiletest_deps = direct_deps_of(metadata, &compiletest.id);\n     let cargo_rustfix = cargo_deps.iter().find(|p| p.name == \"rustfix\").unwrap();\n     let compiletest_rustfix = compiletest_deps.iter().find(|p| p.name == \"rustfix\").unwrap();\n     if cargo_rustfix.version != compiletest_rustfix.version {"}, {"sha": "16d10eb5968c1b897b178a2fa30cd0526e370b8c", "filename": "tests/mir-opt/building/custom/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -18,8 +18,8 @@ fn consts<const C: u32>() {\n     })\n }\n \n-static S: i32 = 5;\n-static mut T: i32 = 10;\n+static S: i32 = 0x05050505;\n+static mut T: i32 = 0x0a0a0a0a;\n // EMIT_MIR consts.statics.built.after.mir\n #[custom_mir(dialect = \"built\")]\n fn statics() {"}, {"sha": "bfef976aa02726b299276088ac0e5e343b97b3b3", "filename": "tests/mir-opt/building/custom/consts.statics.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fconsts.statics.built.after.mir?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -19,9 +19,9 @@ fn statics() -> () {\n }\n \n alloc2 (static: T, size: 4, align: 4) {\n-    0a 00 00 00                                     \u2502 ....\n+    0a 0a 0a 0a                                     \u2502 ....\n }\n \n alloc1 (static: S, size: 4, align: 4) {\n-    05 00 00 00                                     \u2502 ....\n+    05 05 05 05                                     \u2502 ....\n }"}, {"sha": "7fa29cccd50d602b0e01bc4ed258c20cadc8564a", "filename": "tests/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -38,6 +38,6 @@\n   }\n   \n   alloc1 (static: STATIC, size: 4, align: 4) {\n-      2a 00 00 00                                     \u2502 *...\n+      42 42 42 42                                     \u2502 BBBB\n   }\n   "}, {"sha": "b69ec931a6311360a097698f26319e9e7b57a899", "filename": "tests/mir-opt/const_prop/mutable_variable_no_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -1,7 +1,7 @@\n // unit-test\n // compile-flags: -O\n \n-static mut STATIC: u32 = 42;\n+static mut STATIC: u32 = 0x42424242;\n \n // EMIT_MIR mutable_variable_no_prop.main.ConstProp.diff\n fn main() {"}, {"sha": "93804780371cd41d11207b768bdad81a67f63269", "filename": "tests/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -26,7 +26,7 @@\n           _3 = _1;                         // scope 2 at $DIR/issue_75439.rs:+2:47: +2:52\n           _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue_75439.rs:+2:37: +2:53\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_75439.rs:7:37: 7:46\n+                                           // + span: $DIR/issue_75439.rs:8:37: 8:46\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {transmute::<[u8; 16], [u32; 4]>}, val: Value(<ZST>) }\n       }\n   \n@@ -49,7 +49,7 @@\n           _6 = _4;                         // scope 4 at $DIR/issue_75439.rs:+5:33: +5:35\n           _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue_75439.rs:+5:23: +5:36\n                                            // mir::Constant\n-                                           // + span: $DIR/issue_75439.rs:10:23: 10:32\n+                                           // + span: $DIR/issue_75439.rs:11:23: 11:32\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {transmute::<u32, [u8; 4]>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "4c749a150c091f5159defd11c28594e7cd22633c", "filename": "tests/mir-opt/issues/issue_75439.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fissues%2Fissue_75439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fmir-opt%2Fissues%2Fissue_75439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_75439.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -1,4 +1,5 @@\n // EMIT_MIR issue_75439.foo.MatchBranchSimplification.diff\n+// ignore-endian-big\n \n use std::mem::transmute;\n "}, {"sha": "6140a06c555f2c5641c68b9a40a911225b3a6be6", "filename": "tests/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -77,8 +77,6 @@ LL | ///     ```\n    |         ^^^\n    |\n    = note: error from rustc: unknown start of token: `\n-   = note: error from rustc: unknown start of token: `\n-   = note: error from rustc: unknown start of token: `\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:64:5"}, {"sha": "50fa7d1ac4d43635cdefc031274550538bd3e8c7", "filename": "tests/ui/associated-types/issue-43784-associated-type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     type Assoc = T;\n    |                  ^ the trait `Copy` is not implemented for `T`\n    |\n+note: required for `<T as Complete>::Assoc` to implement `Partial<T>`\n+  --> $DIR/issue-43784-associated-type.rs:1:11\n+   |\n+LL | pub trait Partial<X: ?Sized>: Copy {\n+   |           ^^^^^^^\n note: required by a bound in `Complete::Assoc`\n   --> $DIR/issue-43784-associated-type.rs:5:17\n    |"}, {"sha": "1cd8949b8c4b71eddab96dc8cd9e7fd2cf802230", "filename": "tests/ui/closures/issue-84128.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fclosures%2Fissue-84128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fclosures%2Fissue-84128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-84128.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -6,6 +6,13 @@ LL |         Foo(())\n    |         |\n    |         arguments to this struct are incorrect\n    |\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-84128.rs:13:9\n+   |\n+LL |         Foo(())\n+   |         ^^^^--^\n+   |             |\n+   |             this argument influences the type of `Foo`\n note: tuple struct defined here\n   --> $DIR/issue-84128.rs:5:8\n    |"}, {"sha": "b492251c01691e85ce617249bb91cf1877509608", "filename": "tests/ui/closures/issue-87461.stderr", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fclosures%2Fissue-87461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fclosures%2Fissue-87461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-87461.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -6,6 +6,13 @@ LL |     Ok(())\n    |     |\n    |     arguments to this enum variant are incorrect\n    |\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-87461.rs:10:5\n+   |\n+LL |     Ok(())\n+   |     ^^^--^\n+   |        |\n+   |        this argument influences the type of `Ok`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n \n@@ -17,6 +24,13 @@ LL |     Ok(())\n    |     |\n    |     arguments to this enum variant are incorrect\n    |\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-87461.rs:17:5\n+   |\n+LL |     Ok(())\n+   |     ^^^--^\n+   |        |\n+   |        this argument influences the type of `Ok`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n \n@@ -28,6 +42,13 @@ LL |         Ok(())\n    |         |\n    |         arguments to this enum variant are incorrect\n    |\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-87461.rs:26:9\n+   |\n+LL |         Ok(())\n+   |         ^^^--^\n+   |            |\n+   |            this argument influences the type of `Ok`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n "}, {"sha": "af03f0e5e5f430ca1bbefa70b91c941ee1038600", "filename": "tests/ui/derives/issue-91550.stderr", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91550.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -6,12 +6,15 @@ LL | struct Value(u32);\n    | |\n    | doesn't satisfy `Value: Eq`\n    | doesn't satisfy `Value: Hash`\n+   | doesn't satisfy `Value: PartialEq`\n ...\n LL |     hs.insert(Value(0));\n    |        ^^^^^^\n    |\n    = note: the following trait bounds were not satisfied:\n            `Value: Eq`\n+           `Value: PartialEq`\n+           which is required by `Value: Eq`\n            `Value: Hash`\n help: consider annotating `Value` with `#[derive(Eq, Hash, PartialEq)]`\n    |\n@@ -22,7 +25,10 @@ error[E0599]: the method `use_eq` exists for struct `Object<NoDerives>`, but its\n   --> $DIR/issue-91550.rs:26:9\n    |\n LL | pub struct NoDerives;\n-   | -------------------- doesn't satisfy `NoDerives: Eq`\n+   | --------------------\n+   | |\n+   | doesn't satisfy `NoDerives: Eq`\n+   | doesn't satisfy `NoDerives: PartialEq`\n LL |\n LL | struct Object<T>(T);\n    | ---------------- method `use_eq` not found for this struct\n@@ -37,6 +43,9 @@ LL | impl<T: Eq> Object<T> {\n    |         ^^  ---------\n    |         |\n    |         unsatisfied trait bound introduced here\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: PartialEq`\n+           which is required by `NoDerives: Eq`\n help: consider annotating `NoDerives` with `#[derive(Eq, PartialEq)]`\n    |\n LL | #[derive(Eq, PartialEq)]\n@@ -46,7 +55,12 @@ error[E0599]: the method `use_ord` exists for struct `Object<NoDerives>`, but it\n   --> $DIR/issue-91550.rs:27:9\n    |\n LL | pub struct NoDerives;\n-   | -------------------- doesn't satisfy `NoDerives: Ord`\n+   | --------------------\n+   | |\n+   | doesn't satisfy `NoDerives: Eq`\n+   | doesn't satisfy `NoDerives: Ord`\n+   | doesn't satisfy `NoDerives: PartialEq`\n+   | doesn't satisfy `NoDerives: PartialOrd`\n LL |\n LL | struct Object<T>(T);\n    | ---------------- method `use_ord` not found for this struct\n@@ -61,6 +75,13 @@ LL | impl<T: Ord> Object<T> {\n    |         ^^^  ---------\n    |         |\n    |         unsatisfied trait bound introduced here\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: PartialOrd`\n+           which is required by `NoDerives: Ord`\n+           `NoDerives: PartialEq`\n+           which is required by `NoDerives: Ord`\n+           `NoDerives: Eq`\n+           which is required by `NoDerives: Ord`\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n@@ -72,7 +93,9 @@ error[E0599]: the method `use_ord_and_partial_ord` exists for struct `Object<NoD\n LL | pub struct NoDerives;\n    | --------------------\n    | |\n+   | doesn't satisfy `NoDerives: Eq`\n    | doesn't satisfy `NoDerives: Ord`\n+   | doesn't satisfy `NoDerives: PartialEq`\n    | doesn't satisfy `NoDerives: PartialOrd`\n LL |\n LL | struct Object<T>(T);\n@@ -91,6 +114,13 @@ LL | impl<T: Ord + PartialOrd> Object<T> {\n    |         |     |\n    |         |     unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: PartialEq`\n+           which is required by `NoDerives: Ord`\n+           `NoDerives: Eq`\n+           which is required by `NoDerives: Ord`\n+           `NoDerives: PartialEq`\n+           which is required by `NoDerives: PartialOrd`\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]"}, {"sha": "e5638d90ee8e7a90b7ece6292c4b5627bf1d9a7d", "filename": "tests/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -17,6 +17,7 @@ LL |     type Copy<T>: Copy = Box<T>;\n    |                          ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n    = note: required for `Box<T>` to implement `Clone`\n+   = note: required for `<Self as UnsafeCopy>::Copy<T>` to implement `Copy`\n note: required by a bound in `UnsafeCopy::Copy`\n   --> $DIR/issue-74824.rs:6:19\n    |"}, {"sha": "9f669b9a5214b1694bb3c42331ca48480826526f", "filename": "tests/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -23,6 +23,13 @@ LL |         A(self.0 + rhs.0)\n    |\n    = note: expected type parameter `B`\n              found associated type `<B as Add>::Output`\n+help: the type constructed contains `<B as Add>::Output` due to the type of the argument passed\n+  --> $DIR/missing-bounds.rs:11:9\n+   |\n+LL |         A(self.0 + rhs.0)\n+   |         ^^--------------^\n+   |           |\n+   |           this argument influences the type of `A`\n note: tuple struct defined here\n   --> $DIR/missing-bounds.rs:5:8\n    |"}, {"sha": "de4e067fead4cce20007ef8415535eb42c1dba5d", "filename": "tests/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -11,6 +11,13 @@ LL |         Some(true)\n    |\n    = note: expected type parameter `bool` (type parameter `bool`)\n                         found type `bool` (`bool`)\n+help: the type constructed contains `bool` due to the type of the argument passed\n+  --> $DIR/issue-35030.rs:9:9\n+   |\n+LL |         Some(true)\n+   |         ^^^^^----^\n+   |              |\n+   |              this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n "}, {"sha": "05d3de80d8449b4b8e7da07684b29174989854a5", "filename": "tests/ui/missing-trait-bounds/issue-35677.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -6,6 +6,8 @@ LL |     this.is_subset(other)\n    |\n    = note: the following trait bounds were not satisfied:\n            `T: Eq`\n+           `T: PartialEq`\n+           which is required by `T: Eq`\n            `T: Hash`\n help: consider restricting the type parameters to satisfy the trait bounds\n    |"}, {"sha": "0e8b0a5da220569b607fe3512ae59ee94e3fcf1b", "filename": "tests/ui/parser/issues/issue-66473.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Fissues%2Fissue-66473.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Fissues%2Fissue-66473.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-66473.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6"}, {"sha": "43a903e6c4698e59840cdf18f73ed830c8b50c32", "filename": "tests/ui/parser/issues/issue-68629.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Fissues%2Fissue-68629.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Fissues%2Fissue-68629.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-68629.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6"}, {"sha": "5bca5bbebeacb44984c8679e4d2c4757be4ee742", "filename": "tests/ui/parser/issues/issue-68730.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Fissues%2Fissue-68730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Fissues%2Fissue-68730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-68730.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6"}, {"sha": "ba35e95c82a493f86da4b9bcaa89252879faca48", "filename": "tests/ui/parser/unicode-chars.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Funicode-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Funicode-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -2,4 +2,8 @@ fn main() {\n     let y = 0\u037e\n     //~^ ERROR unknown start of token: \\u{37e}\n     //~^^ HELP Unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), but it is not\n+    \u00a0\u00a0\u00a0\u00a0let x = 0;\n+    //~^ ERROR unknown start of token: \\u{a0}\n+    //~^^ NOTE character appears 3 more times\n+    //~^^^ HELP Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n }"}, {"sha": "6a5b27872e73829de3012348d4f52cdd6daf1f2f", "filename": "tests/ui/parser/unicode-chars.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Funicode-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fparser%2Funicode-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -9,5 +9,17 @@ help: Unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), b\n LL |     let y = 0;\n    |              ~\n \n-error: aborting due to previous error\n+error: unknown start of token: \\u{a0}\n+  --> $DIR/unicode-chars.rs:5:5\n+   |\n+LL |     \u00a0\u00a0\u00a0\u00a0let x = 0;\n+   |     ^^^^\n+   |\n+   = note: character appears 3 more times\n+help: Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n+   |\n+LL |         let x = 0;\n+   |     ++++\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "bc097bf6eb4515f76396ffff7b467a1721cbf5e5", "filename": "tests/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -11,6 +11,13 @@ LL |     let _: Option<(i32, bool)> = Some(1, 2);\n    |                                       ^\n    = note: expected tuple `(i32, bool)`\n                found type `{integer}`\n+help: the type constructed contains `{integer}` due to the type of the argument passed\n+  --> $DIR/args-instead-of-tuple-errors.rs:6:34\n+   |\n+LL |     let _: Option<(i32, bool)> = Some(1, 2);\n+   |                                  ^^^^^-^^^^\n+   |                                       |\n+   |                                       this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: remove the extra argument\n@@ -64,6 +71,13 @@ LL |     let _: Option<(i32,)> = Some(5_usize);\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n+help: the type constructed contains `usize` due to the type of the argument passed\n+  --> $DIR/args-instead-of-tuple-errors.rs:14:29\n+   |\n+LL |     let _: Option<(i32,)> = Some(5_usize);\n+   |                             ^^^^^-------^\n+   |                                  |\n+   |                                  this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n@@ -77,6 +91,13 @@ LL |     let _: Option<(i32,)> = Some((5_usize));\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n+help: the type constructed contains `usize` due to the type of the argument passed\n+  --> $DIR/args-instead-of-tuple-errors.rs:17:29\n+   |\n+LL |     let _: Option<(i32,)> = Some((5_usize));\n+   |                             ^^^^^---------^\n+   |                                  |\n+   |                                  this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n "}, {"sha": "7f05832bcd7281e77c2b53d06549e36d9636a612", "filename": "tests/ui/suggestions/sugg-else-for-closure.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -8,6 +8,13 @@ LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n    |\n    = note: expected reference `&str`\n                 found closure `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]`\n+help: the return type of this call is `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]` due to the type of the argument passed\n+  --> $DIR/sugg-else-for-closure.rs:6:14\n+   |\n+LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n+   |              ^^^^^^^^^^^^-------------------------------^\n+   |                          |\n+   |                          this argument influences the return type of `unwrap_or`\n note: associated function defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: try calling `unwrap_or_else` instead"}, {"sha": "e20aa210e58bd21e2192ba0887ab83ea6b9b8adb", "filename": "tests/ui/traits/fn-trait-cast-diagnostic.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,26 @@\n+// There are two different instances to check that even if\n+// the trait is implemented for the output of a function,\n+// it will still be displayed if the function itself implements a trait.\n+trait Foo {}\n+\n+impl Foo for fn() -> bool {}\n+impl Foo for bool {}\n+\n+fn example() -> bool {\n+    true\n+}\n+\n+trait NoOtherFoo {}\n+\n+impl NoOtherFoo for fn() -> bool {}\n+\n+fn do_on_foo(v: impl Foo) {}\n+fn do_on_single_foo(v: impl NoOtherFoo) {}\n+\n+fn main() {\n+    do_on_foo(example);\n+    //~^ ERROR the trait bound\n+\n+    do_on_single_foo(example);\n+    //~^ ERROR the trait bound\n+}"}, {"sha": "6851dcdd504d19c1617b16b8acc03becf3782692", "filename": "tests/ui/traits/fn-trait-cast-diagnostic.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ffn-trait-cast-diagnostic.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,43 @@\n+error[E0277]: the trait bound `fn() -> bool {example}: Foo` is not satisfied\n+  --> $DIR/fn-trait-cast-diagnostic.rs:21:15\n+   |\n+LL |     do_on_foo(example);\n+   |     --------- ^^^^^^^ the trait `Foo` is not implemented for fn item `fn() -> bool {example}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `do_on_foo`\n+  --> $DIR/fn-trait-cast-diagnostic.rs:17:22\n+   |\n+LL | fn do_on_foo(v: impl Foo) {}\n+   |                      ^^^ required by this bound in `do_on_foo`\n+help: use parentheses to call this function\n+   |\n+LL |     do_on_foo(example());\n+   |                      ++\n+help: the trait `Foo` is implemented for fn pointer `fn() -> bool`, try casting using `as`\n+   |\n+LL |     do_on_foo(example as fn() -> bool);\n+   |                       +++++++++++++++\n+\n+error[E0277]: the trait bound `fn() -> bool {example}: NoOtherFoo` is not satisfied\n+  --> $DIR/fn-trait-cast-diagnostic.rs:24:22\n+   |\n+LL |     do_on_single_foo(example);\n+   |     ---------------- ^^^^^^^ the trait `NoOtherFoo` is not implemented for fn item `fn() -> bool {example}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `do_on_single_foo`\n+  --> $DIR/fn-trait-cast-diagnostic.rs:18:29\n+   |\n+LL | fn do_on_single_foo(v: impl NoOtherFoo) {}\n+   |                             ^^^^^^^^^^ required by this bound in `do_on_single_foo`\n+help: the trait `NoOtherFoo` is implemented for fn pointer `fn() -> bool`, try casting using `as`\n+   |\n+LL |     do_on_single_foo(example as fn() -> bool);\n+   |                              +++++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6b5b721384cbbebb622b4cdaaee0b356c35e5e45", "filename": "tests/ui/traits/issue-43784-supertrait.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-43784-supertrait.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL | impl<T> Complete for T {}\n    |                      ^ the trait `Copy` is not implemented for `T`\n    |\n+note: required for `T` to implement `Partial`\n+  --> $DIR/issue-43784-supertrait.rs:1:11\n+   |\n+LL | pub trait Partial: Copy {\n+   |           ^^^^^^^\n note: required by a bound in `Complete`\n   --> $DIR/issue-43784-supertrait.rs:4:21\n    |"}, {"sha": "a11867c03a689259dde89dd3adddef9e0822414f", "filename": "tests/ui/traits/issue-52893.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-52893.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -11,6 +11,13 @@ LL |         builder.push(output);\n    |\n    = note: expected type parameter `F`\n                       found struct `Class<P>`\n+help: the return type of this call is `Class<P>` due to the type of the argument passed\n+  --> $DIR/issue-52893.rs:53:9\n+   |\n+LL |         builder.push(output);\n+   |         ^^^^^^^^^^^^^------^\n+   |                      |\n+   |                      this argument influences the return type of `push`\n note: associated function defined here\n   --> $DIR/issue-52893.rs:11:8\n    |"}, {"sha": "fb6eebbd254a2034206d4829c6b1f44bc7f28c6b", "filename": "tests/ui/traits/issue-99875.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Fissue-99875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Fissue-99875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-99875.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -6,12 +6,15 @@ LL |     takes(function);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Trait` is implemented for fn pointer `fn(Argument) -> Return`\n note: required by a bound in `takes`\n   --> $DIR/issue-99875.rs:9:18\n    |\n LL | fn takes(_: impl Trait) {}\n    |                  ^^^^^ required by this bound in `takes`\n+help: the trait `Trait` is implemented for fn pointer `fn(Argument) -> Return`, try casting using `as`\n+   |\n+LL |     takes(function as fn(Argument) -> Return);\n+   |                    +++++++++++++++++++++++++\n \n error[E0277]: the trait bound `[closure@$DIR/issue-99875.rs:14:11: 14:34]: Trait` is not satisfied\n   --> $DIR/issue-99875.rs:14:11"}, {"sha": "77e753c13f7397aa70b99acb85eec0ca34bd5ff5", "filename": "tests/ui/traits/track-obligations.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Ftrack-obligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Ftrack-obligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrack-obligations.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,88 @@\n+// These are simplifications of the tower traits by the same name:\n+\n+pub trait Service<Request> {\n+    type Response;\n+}\n+\n+pub trait Layer<C> {\n+    type Service;\n+}\n+\n+// Any type will do here:\n+\n+pub struct Req;\n+pub struct Res;\n+\n+// This is encoding a trait alias.\n+\n+pub trait ParticularService:\n+    Service<Req, Response = Res> {\n+}\n+\n+impl<T> ParticularService for T\n+where\n+    T: Service<Req, Response = Res>,\n+{\n+}\n+\n+// This is also a trait alias.\n+// The weird = <Self as ...> bound is there so that users of the trait do not\n+// need to repeat the bounds. See https://github.com/rust-lang/rust/issues/20671\n+// for context, and in particular the workaround in:\n+// https://github.com/rust-lang/rust/issues/20671#issuecomment-529752828\n+\n+pub trait ParticularServiceLayer<C>:\n+    Layer<C, Service = <Self as ParticularServiceLayer<C>>::Service>\n+{\n+    type Service: ParticularService;\n+}\n+\n+impl<T, C> ParticularServiceLayer<C> for T\n+where\n+    T: Layer<C>,\n+    T::Service: ParticularService,\n+{\n+    type Service = T::Service;\n+}\n+\n+// These are types that implement the traits that the trait aliases refer to.\n+// They should also implement the alias traits due to the blanket impls.\n+\n+struct ALayer<C>(C);\n+impl<C> Layer<C> for ALayer<C> {\n+    type Service = AService;\n+}\n+\n+struct AService;\n+impl Service<Req> for AService {\n+    // However, AService does _not_ meet the blanket implementation,\n+    // since its Response type is bool, not Res as it should be.\n+    type Response = bool;\n+}\n+\n+// This is a wrapper type around ALayer that uses the trait alias\n+// as a way to communicate the requirements of the provided types.\n+struct Client<C>(C);\n+\n+// The method and the free-standing function below both have the same bounds.\n+\n+impl<C> Client<C>\n+where\n+    ALayer<C>: ParticularServiceLayer<C>,\n+{\n+    fn check(&self) {}\n+}\n+\n+fn check<C>(_: C) where ALayer<C>: ParticularServiceLayer<C> {}\n+\n+// But, they give very different error messages.\n+\n+fn main() {\n+    // This gives a very poor error message that does nothing to point the user\n+    // at the underlying cause of why the types involved do not meet the bounds.\n+    Client(()).check(); //~ ERROR E0599\n+\n+    // This gives a good(ish) error message that points the user at _why_ the\n+    // bound isn't met, and thus how they might fix it.\n+    check(()); //~ ERROR E0271\n+}"}, {"sha": "89477475970f4af442946c74452c241dc3989ade", "filename": "tests/ui/traits/track-obligations.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Ftrack-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftraits%2Ftrack-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrack-obligations.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,76 @@\n+error[E0599]: the method `check` exists for struct `Client<()>`, but its trait bounds were not satisfied\n+  --> $DIR/track-obligations.rs:83:16\n+   |\n+LL | struct ALayer<C>(C);\n+   | ----------------\n+   | |\n+   | doesn't satisfy `<_ as Layer<()>>::Service = <ALayer<()> as ParticularServiceLayer<()>>::Service`\n+   | doesn't satisfy `ALayer<()>: ParticularServiceLayer<()>`\n+...\n+LL | struct Client<C>(C);\n+   | ---------------- method `check` not found for this struct\n+...\n+LL |     Client(()).check();\n+   |                ^^^^^ method cannot be called on `Client<()>` due to unsatisfied trait bounds\n+   |\n+note: trait bound `<ALayer<()> as Layer<()>>::Service = <ALayer<()> as ParticularServiceLayer<()>>::Service` was not satisfied\n+  --> $DIR/track-obligations.rs:35:14\n+   |\n+LL | pub trait ParticularServiceLayer<C>:\n+   |           ----------------------\n+LL |     Layer<C, Service = <Self as ParticularServiceLayer<C>>::Service>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced here\n+note: trait bound `ALayer<()>: ParticularServiceLayer<()>` was not satisfied\n+  --> $DIR/track-obligations.rs:71:16\n+   |\n+LL | impl<C> Client<C>\n+   |         ---------\n+LL | where\n+LL |     ALayer<C>: ParticularServiceLayer<C>,\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced here\n+note: the trait `ParticularServiceLayer` must be implemented\n+  --> $DIR/track-obligations.rs:34:1\n+   |\n+LL | / pub trait ParticularServiceLayer<C>:\n+LL | |     Layer<C, Service = <Self as ParticularServiceLayer<C>>::Service>\n+   | |____________________________________________________________________^\n+\n+error[E0271]: type mismatch resolving `<AService as Service<Req>>::Response == Res`\n+  --> $DIR/track-obligations.rs:87:11\n+   |\n+LL |     check(());\n+   |     ----- ^^ type mismatch resolving `<AService as Service<Req>>::Response == Res`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: expected this to be `Res`\n+  --> $DIR/track-obligations.rs:60:21\n+   |\n+LL |     type Response = bool;\n+   |                     ^^^^\n+note: required for `AService` to implement `ParticularService`\n+  --> $DIR/track-obligations.rs:22:9\n+   |\n+LL | impl<T> ParticularService for T\n+   |         ^^^^^^^^^^^^^^^^^     ^\n+LL | where\n+LL |     T: Service<Req, Response = Res>,\n+   |                     -------------- unsatisfied trait bound introduced here\n+note: required for `ALayer<_>` to implement `ParticularServiceLayer<_>`\n+  --> $DIR/track-obligations.rs:40:12\n+   |\n+LL | impl<T, C> ParticularServiceLayer<C> for T\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+...\n+LL |     T::Service: ParticularService,\n+   |                 ----------------- unsatisfied trait bound introduced here\n+note: required by a bound in `check`\n+  --> $DIR/track-obligations.rs:76:36\n+   |\n+LL | fn check<C>(_: C) where ALayer<C>: ParticularServiceLayer<C> {}\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0271, E0599.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "ba5b9f54246e2c63d061ed914e89b0f26a1f299b", "filename": "tests/ui/type/wrong-call-return-type-due-to-generic-arg.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.rs?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,28 @@\n+fn function<T>(x: T, y: bool) -> T {\n+    x\n+}\n+\n+struct S {}\n+impl S {\n+    fn method<T>(&self, x: T) -> T {\n+        x\n+    }\n+}\n+\n+fn wrong_arg_type(x: u32) -> u32 {\n+    x\n+}\n+\n+fn main() {\n+    // Should not trigger.\n+    let x = wrong_arg_type(0u16); //~ ERROR mismatched types\n+    let x: u16 = function(0, 0u8); //~ ERROR mismatched types\n+\n+    // Should trigger exactly once for the first argument.\n+    let x: u16 = function(0u32, 0u8); //~ ERROR arguments to this function are incorrect\n+\n+    // Should trigger.\n+    let x: u16 = function(0u32, true); //~ ERROR mismatched types\n+    let x: u16 = (S {}).method(0u32); //~ ERROR mismatched types\n+    function(0u32, 8u8) //~ ERROR arguments to this function are incorrect\n+}"}, {"sha": "4d012cb156bb546287852f1c3ed668a7d445593c", "filename": "tests/ui/type/wrong-call-return-type-due-to-generic-arg.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -0,0 +1,131 @@\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:18:28\n+   |\n+LL |     let x = wrong_arg_type(0u16);\n+   |             -------------- ^^^^ expected `u32`, found `u16`\n+   |             |\n+   |             arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:12:4\n+   |\n+LL | fn wrong_arg_type(x: u32) -> u32 {\n+   |    ^^^^^^^^^^^^^^ ------\n+help: change the type of the numeric literal from `u16` to `u32`\n+   |\n+LL |     let x = wrong_arg_type(0u32);\n+   |                             ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:19:30\n+   |\n+LL |     let x: u16 = function(0, 0u8);\n+   |                  --------    ^^^ expected `bool`, found `u8`\n+   |                  |\n+   |                  arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:1:4\n+   |\n+LL | fn function<T>(x: T, y: bool) -> T {\n+   |    ^^^^^^^^          -------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:22:18\n+   |\n+LL |     let x: u16 = function(0u32, 0u8);\n+   |                  ^^^^^^^^ ----  --- expected `bool`, found `u8`\n+   |                           |\n+   |                           expected `u16`, found `u32`\n+   |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:22:18\n+   |\n+LL |     let x: u16 = function(0u32, 0u8);\n+   |                  ^^^^^^^^^----^^^^^^\n+   |                           |\n+   |                           this argument influences the return type of `function`\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:1:4\n+   |\n+LL | fn function<T>(x: T, y: bool) -> T {\n+   |    ^^^^^^^^    ----  -------\n+help: change the type of the numeric literal from `u32` to `u16`\n+   |\n+LL |     let x: u16 = function(0u16, 0u8);\n+   |                            ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:25:27\n+   |\n+LL |     let x: u16 = function(0u32, true);\n+   |                  -------- ^^^^ expected `u16`, found `u32`\n+   |                  |\n+   |                  arguments to this function are incorrect\n+   |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:25:18\n+   |\n+LL |     let x: u16 = function(0u32, true);\n+   |                  ^^^^^^^^^----^^^^^^^\n+   |                           |\n+   |                           this argument influences the return type of `function`\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:1:4\n+   |\n+LL | fn function<T>(x: T, y: bool) -> T {\n+   |    ^^^^^^^^    ----\n+help: change the type of the numeric literal from `u32` to `u16`\n+   |\n+LL |     let x: u16 = function(0u16, true);\n+   |                            ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:26:32\n+   |\n+LL |     let x: u16 = (S {}).method(0u32);\n+   |                         ------ ^^^^ expected `u16`, found `u32`\n+   |                         |\n+   |                         arguments to this method are incorrect\n+   |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:26:18\n+   |\n+LL |     let x: u16 = (S {}).method(0u32);\n+   |                  ^^^^^^^^^^^^^^----^\n+   |                                |\n+   |                                this argument influences the return type of `method`\n+note: associated function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:7:8\n+   |\n+LL |     fn method<T>(&self, x: T) -> T {\n+   |        ^^^^^^           ----\n+help: change the type of the numeric literal from `u32` to `u16`\n+   |\n+LL |     let x: u16 = (S {}).method(0u16);\n+   |                                 ~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:27:5\n+   |\n+LL |     function(0u32, 8u8)\n+   |     ^^^^^^^^ ----  --- expected `bool`, found `u8`\n+   |              |\n+   |              expected `()`, found `u32`\n+   |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:27:5\n+   |\n+LL |     function(0u32, 8u8)\n+   |     ^^^^^^^^^----^^^^^^\n+   |              |\n+   |              this argument influences the return type of `function`\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:1:4\n+   |\n+LL | fn function<T>(x: T, y: bool) -> T {\n+   |    ^^^^^^^^    ----  -------\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8f5ff51fbe1007cb7e77aa405625b059df75ed5f", "filename": "tests/ui/typeck/issue-46112.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftypeck%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftypeck%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-46112.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -8,6 +8,13 @@ LL | fn main() { test(Ok(())); }\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-46112.rs:9:18\n+   |\n+LL | fn main() { test(Ok(())); }\n+   |                  ^^^--^\n+   |                     |\n+   |                     this argument influences the type of `Ok`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n help: try wrapping the expression in `Some`"}, {"sha": "09f3aee2d9ec56a51a33b9639863e6950adba45e", "filename": "tests/ui/typeck/issue-84768.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftypeck%2Fissue-84768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Ftypeck%2Fissue-84768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-84768.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -14,6 +14,13 @@ LL |     <F as FnOnce(&mut u8)>::call_once(f, 1)\n    |\n    = note: expected tuple `(&mut u8,)`\n                found type `{integer}`\n+help: the return type of this call is `{integer}` due to the type of the argument passed\n+  --> $DIR/issue-84768.rs:7:5\n+   |\n+LL |     <F as FnOnce(&mut u8)>::call_once(f, 1)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^\n+   |                                          |\n+   |                                          this argument influences the return type of `FnOnce`\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n "}, {"sha": "e85144a31ca96c8ebc87ebd1a178f889dd5528b5", "filename": "tests/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -21,6 +21,13 @@ LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |     |\n    |     arguments to this function are incorrect\n    |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:7:5\n+   |\n+LL |     <i32 as Add<i32>>::add(1u32, 2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^----^^^^\n+   |                            |\n+   |                            this argument influences the return type of `Add`\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: change the type of the numeric literal from `u32` to `i32`\n@@ -36,6 +43,13 @@ LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |     |\n    |     arguments to this function are incorrect\n    |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:9:5\n+   |\n+LL |     <i32 as Add<i32>>::add(1, 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^----^\n+   |                               |\n+   |                               this argument influences the return type of `Add`\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: change the type of the numeric literal from `u32` to `i32`"}, {"sha": "14bade6472fa63b500ca6f0f6202a3ad01e4436d", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "patch": "@@ -251,7 +251,7 @@ new_pr = true\n \n [autolabel.\"WG-trait-system-refactor\"]\n trigger_files = [\n-    \"compiler/rustc_trait_selection/solve\"\n+    \"compiler/rustc_trait_selection/src/solve\"\n ]\n \n [notify-zulip.\"I-prioritize\"]"}]}