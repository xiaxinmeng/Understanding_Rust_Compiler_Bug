{"sha": "28bf68f3fef8072fcf84e12f43d54c88d4be4500", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YmY2OGYzZmVmODA3MmZjZjg0ZTEyZjQzZDU0Yzg4ZDRiZTQ1MDA=", "commit": {"author": {"name": "Jack Wilson", "email": "jack.wilson.v@gmail.com", "date": "2015-09-03T01:58:18Z"}, "committer": {"name": "Jack Wilson", "email": "jack.wilson.v@gmail.com", "date": "2015-09-03T01:58:18Z"}, "message": "Makes formatting of struct keyword consistent", "tree": {"sha": "928a1bd79833ac24d84f7d77e69a4de061cbc19f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/928a1bd79833ac24d84f7d77e69a4de061cbc19f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28bf68f3fef8072fcf84e12f43d54c88d4be4500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28bf68f3fef8072fcf84e12f43d54c88d4be4500", "html_url": "https://github.com/rust-lang/rust/commit/28bf68f3fef8072fcf84e12f43d54c88d4be4500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28bf68f3fef8072fcf84e12f43d54c88d4be4500/comments", "author": {"login": "id4ho", "id": 1232370, "node_id": "MDQ6VXNlcjEyMzIzNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1232370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/id4ho", "html_url": "https://github.com/id4ho", "followers_url": "https://api.github.com/users/id4ho/followers", "following_url": "https://api.github.com/users/id4ho/following{/other_user}", "gists_url": "https://api.github.com/users/id4ho/gists{/gist_id}", "starred_url": "https://api.github.com/users/id4ho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/id4ho/subscriptions", "organizations_url": "https://api.github.com/users/id4ho/orgs", "repos_url": "https://api.github.com/users/id4ho/repos", "events_url": "https://api.github.com/users/id4ho/events{/privacy}", "received_events_url": "https://api.github.com/users/id4ho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "id4ho", "id": 1232370, "node_id": "MDQ6VXNlcjEyMzIzNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1232370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/id4ho", "html_url": "https://github.com/id4ho", "followers_url": "https://api.github.com/users/id4ho/followers", "following_url": "https://api.github.com/users/id4ho/following{/other_user}", "gists_url": "https://api.github.com/users/id4ho/gists{/gist_id}", "starred_url": "https://api.github.com/users/id4ho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/id4ho/subscriptions", "organizations_url": "https://api.github.com/users/id4ho/orgs", "repos_url": "https://api.github.com/users/id4ho/repos", "events_url": "https://api.github.com/users/id4ho/events{/privacy}", "received_events_url": "https://api.github.com/users/id4ho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd138dc4475fa90b007969d0a4e00f230be777cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd138dc4475fa90b007969d0a4e00f230be777cf", "html_url": "https://github.com/rust-lang/rust/commit/cd138dc4475fa90b007969d0a4e00f230be777cf"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "85b11d0b6b5eeb01b7002bf0a32d083e2b6eb6b3", "filename": "src/doc/trpl/structs.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28bf68f3fef8072fcf84e12f43d54c88d4be4500/src%2Fdoc%2Ftrpl%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/28bf68f3fef8072fcf84e12f43d54c88d4be4500/src%2Fdoc%2Ftrpl%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstructs.md?ref=28bf68f3fef8072fcf84e12f43d54c88d4be4500", "patch": "@@ -1,6 +1,6 @@\n % Structs\n \n-Structs are a way of creating more complex data types. For example, if we were\n+`struct`s are a way of creating more complex data types. For example, if we were\n doing calculations involving coordinates in 2D space, we would need both an `x`\n and a `y` value:\n \n@@ -9,7 +9,7 @@ let origin_x = 0;\n let origin_y = 0;\n ```\n \n-A struct lets us combine these two into a single, unified datatype:\n+A `struct` lets us combine these two into a single, unified datatype:\n \n ```rust\n struct Point {\n@@ -28,14 +28,14 @@ There\u2019s a lot going on here, so let\u2019s break it down. We declare a `struct` w\n the `struct` keyword, and then with a name. By convention, `struct`s begin with\n a capital letter and are camel cased: `PointInSpace`, not `Point_In_Space`.\n \n-We can create an instance of our struct via `let`, as usual, but we use a `key:\n+We can create an instance of our `struct` via `let`, as usual, but we use a `key:\n value` style syntax to set each field. The order doesn\u2019t need to be the same as\n in the original declaration.\n \n Finally, because fields have names, we can access the field through dot\n notation: `origin.x`.\n \n-The values in structs are immutable by default, like other bindings in Rust.\n+The values in `struct`s are immutable by default, like other bindings in Rust.\n Use `mut` to make them mutable:\n \n ```rust\n@@ -91,7 +91,7 @@ fn main() {\n # Update syntax\n \n A `struct` can include `..` to indicate that you want to use a copy of some\n-other struct for some of the values. For example:\n+other `struct` for some of the values. For example:\n \n ```rust\n struct Point3d {\n@@ -121,7 +121,7 @@ let point = Point3d { z: 1, x: 2, .. origin };\n # Tuple structs\n \n Rust has another data type that\u2019s like a hybrid between a [tuple][tuple] and a\n-struct, called a \u2018tuple struct\u2019. Tuple structs have a name, but\n+`struct`, called a \u2018tuple struct\u2019. Tuple structs have a name, but\n their fields don\u2019t:\n \n ```rust\n@@ -140,7 +140,7 @@ let black = Color(0, 0, 0);\n let origin = Point(0, 0, 0);\n ```\n \n-It is almost always better to use a struct than a tuple struct. We would write\n+It is almost always better to use a `struct` than a tuple struct. We would write\n `Color` and `Point` like this instead:\n \n ```rust\n@@ -158,7 +158,7 @@ struct Point {\n ```\n \n Now, we have actual names, rather than positions. Good names are important,\n-and with a struct, we have actual names.\n+and with a `struct`, we have actual names.\n \n There _is_ one case when a tuple struct is very useful, though, and that\u2019s a\n tuple struct with only one element. We call this the \u2018newtype\u2019 pattern, because\n@@ -180,13 +180,13 @@ destructuring `let`, just as with regular tuples. In this case, the\n \n # Unit-like structs\n \n-You can define a struct with no members at all:\n+You can define a `struct` with no members at all:\n \n ```rust\n struct Electron;\n ```\n \n-Such a struct is called \u2018unit-like\u2019 because it resembles the empty\n+Such a `struct` is called \u2018unit-like\u2019 because it resembles the empty\n tuple, `()`, sometimes called \u2018unit\u2019. Like a tuple struct, it defines a\n new type.\n \n@@ -195,6 +195,6 @@ marker type), but in combination with other features, it can become\n useful. For instance, a library may ask you to create a structure that\n implements a certain [trait][trait] to handle events. If you don\u2019t have\n any data you need to store in the structure, you can just create a\n-unit-like struct.\n+unit-like `struct`.\n \n [trait]: traits.html"}]}