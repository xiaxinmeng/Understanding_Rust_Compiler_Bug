{"sha": "9e2536b9389f56386d7f722b403d9730911ee811", "node_id": "C_kwDOAAsO6NoAKDllMjUzNmI5Mzg5ZjU2Mzg2ZDdmNzIyYjQwM2Q5NzMwOTExZWU4MTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T05:09:33Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T05:09:43Z"}, "message": "Note alternative import candidates in nested use tree", "tree": {"sha": "dae25ca9289c652c2f0977bbd2de35f319d1db1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dae25ca9289c652c2f0977bbd2de35f319d1db1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e2536b9389f56386d7f722b403d9730911ee811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2536b9389f56386d7f722b403d9730911ee811", "html_url": "https://github.com/rust-lang/rust/commit/9e2536b9389f56386d7f722b403d9730911ee811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e2536b9389f56386d7f722b403d9730911ee811/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "564435f20a740d9d95180f3a053aec36feed765d", "url": "https://api.github.com/repos/rust-lang/rust/commits/564435f20a740d9d95180f3a053aec36feed765d", "html_url": "https://github.com/rust-lang/rust/commit/564435f20a740d9d95180f3a053aec36feed765d"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "2e28dad52c7c4d3d2809b67c59928600b9121a92", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e2536b9389f56386d7f722b403d9730911ee811/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2536b9389f56386d7f722b403d9730911ee811/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=9e2536b9389f56386d7f722b403d9730911ee811", "patch": "@@ -2309,7 +2309,7 @@ enum FoundUse {\n }\n \n /// Whether a binding is part of a pattern or a use statement. Used for diagnostics.\n-enum DiagnosticMode {\n+pub(crate) enum DiagnosticMode {\n     Normal,\n     /// The binding is part of a pattern\n     Pattern,\n@@ -2324,6 +2324,7 @@ pub(crate) fn import_candidates(\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n     candidates: &[ImportSuggestion],\n+    mode: DiagnosticMode,\n ) {\n     show_candidates(\n         session,\n@@ -2333,7 +2334,7 @@ pub(crate) fn import_candidates(\n         candidates,\n         Instead::Yes,\n         FoundUse::Yes,\n-        DiagnosticMode::Import,\n+        mode,\n         vec![],\n     );\n }"}, {"sha": "b3593fc9e4712f47dc6e63e6383385d050a97d10", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9e2536b9389f56386d7f722b403d9730911ee811/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2536b9389f56386d7f722b403d9730911ee811/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=9e2536b9389f56386d7f722b403d9730911ee811", "patch": "@@ -1,6 +1,6 @@\n //! A bunch of methods and structures more or less related to resolving imports.\n \n-use crate::diagnostics::{import_candidates, Suggestion};\n+use crate::diagnostics::{import_candidates, DiagnosticMode, Suggestion};\n use crate::Determinacy::{self, *};\n use crate::Namespace::*;\n use crate::{module_to_string, names_to_string, ImportSuggestion};\n@@ -402,7 +402,7 @@ struct UnresolvedImportError {\n     label: Option<String>,\n     note: Option<String>,\n     suggestion: Option<Suggestion>,\n-    candidate: Option<Vec<ImportSuggestion>>,\n+    candidates: Option<Vec<ImportSuggestion>>,\n }\n \n pub struct ImportResolver<'a, 'b> {\n@@ -489,7 +489,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     label: None,\n                     note: None,\n                     suggestion: None,\n-                    candidate: None,\n+                    candidates: None,\n                 };\n                 // FIXME: there should be a better way of doing this than\n                 // formatting this as a string then checking for `::`\n@@ -545,15 +545,26 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 diag.multipart_suggestion(&msg, suggestions, applicability);\n             }\n \n-            if let Some(candidate) = &err.candidate {\n+            if let Some(candidates) = &err.candidates {\n                 match &import.kind {\n                     ImportKind::Single { nested: false, .. } => import_candidates(\n                         self.r.session,\n                         &self.r.untracked.source_span,\n                         &mut diag,\n                         Some(err.span),\n-                        &candidate,\n+                        &candidates,\n+                        DiagnosticMode::Import,\n                     ),\n+                    ImportKind::Single { nested: true, .. } => {\n+                        import_candidates(\n+                            self.r.session,\n+                            &self.r.untracked.source_span,\n+                            &mut diag,\n+                            None,\n+                            &candidates,\n+                            DiagnosticMode::Normal,\n+                        );\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -717,14 +728,14 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 String::from(\"a similar path exists\"),\n                                 Applicability::MaybeIncorrect,\n                             )),\n-                            candidate: None,\n+                            candidates: None,\n                         },\n                         None => UnresolvedImportError {\n                             span,\n                             label: Some(label),\n                             note: None,\n                             suggestion,\n-                            candidate: None,\n+                            candidates: None,\n                         },\n                     };\n                     return Some(err);\n@@ -771,7 +782,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 )),\n                                 note: None,\n                                 suggestion: None,\n-                                candidate: None,\n+                                candidates: None,\n                             });\n                         }\n                     }\n@@ -953,7 +964,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     label: Some(label),\n                     note,\n                     suggestion,\n-                    candidate: if !parent_suggestion.is_empty() {\n+                    candidates: if !parent_suggestion.is_empty() {\n                         Some(parent_suggestion)\n                     } else {\n                         None"}, {"sha": "2e95480ad412e5d227718d0131377c12f0b66a7e", "filename": "src/test/ui/imports/bad-import-in-nested.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e2536b9389f56386d7f722b403d9730911ee811/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2536b9389f56386d7f722b403d9730911ee811/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs?ref=9e2536b9389f56386d7f722b403d9730911ee811", "patch": "@@ -1,14 +1,27 @@\n+// edition: 2021\n+\n #![allow(unused)]\n \n mod A {\n     pub(crate) type AA = ();\n+    pub(crate) type BB = ();\n+\n+    mod A2 {\n+        use super::{super::C::D::AA, AA as _};\n+        //~^ ERROR unresolved import\n+    }\n }\n \n-mod C {}\n+mod C {\n+    pub mod D {}\n+}\n \n mod B {\n     use crate::C::{self, AA};\n-    //~^ ERROR unresolved import `crate::C::AA`\n+    //~^ ERROR unresolved import\n+\n+    use crate::{A, C::BB};\n+    //~^ ERROR unresolved import\n }\n \n fn main() {}"}, {"sha": "855b1e637e97f5c892796597fae452c54fadc21d", "filename": "src/test/ui/imports/bad-import-in-nested.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9e2536b9389f56386d7f722b403d9730911ee811/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e2536b9389f56386d7f722b403d9730911ee811/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr?ref=9e2536b9389f56386d7f722b403d9730911ee811", "patch": "@@ -1,9 +1,30 @@\n+error[E0432]: unresolved import `super::super::C::D::AA`\n+  --> $DIR/bad-import-in-nested.rs:10:21\n+   |\n+LL |         use super::{super::C::D::AA, AA as _};\n+   |                     ^^^^^^^^^^^^^^^ no `AA` in `C::D`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::AA\n+\n error[E0432]: unresolved import `crate::C::AA`\n-  --> $DIR/bad-import-in-nested.rs:10:26\n+  --> $DIR/bad-import-in-nested.rs:20:26\n    |\n LL |     use crate::C::{self, AA};\n    |                          ^^ no `AA` in `C`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::AA\n+\n+error[E0432]: unresolved import `crate::C::BB`\n+  --> $DIR/bad-import-in-nested.rs:23:20\n+   |\n+LL |     use crate::{A, C::BB};\n+   |                    ^^^^^ no `BB` in `C`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::BB\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}]}