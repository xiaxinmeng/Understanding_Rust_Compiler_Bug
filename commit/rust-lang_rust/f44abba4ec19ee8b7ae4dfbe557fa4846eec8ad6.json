{"sha": "f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NGFiYmE0ZWMxOWVlOGI3YWU0ZGZiZTU1N2ZhNDg0NmVlYzhhZDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-03T10:46:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-03T10:46:20Z"}, "message": "clarify that unchecked indexing is UB even if the reference is never used", "tree": {"sha": "eaae2c735c237c2237b20d66f4ffd0fd9e24356f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaae2c735c237c2237b20d66f4ffd0fd9e24356f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6", "html_url": "https://github.com/rust-lang/rust/commit/f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7270712cb446aad0817040bbca73a8d024f67b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7270712cb446aad0817040bbca73a8d024f67b0", "html_url": "https://github.com/rust-lang/rust/commit/d7270712cb446aad0817040bbca73a8d024f67b0"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "bb6abd8e003de812a48b72f6dd2ae55749c976f0", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f44abba4ec19ee8b7ae4dfbe557fa4846eec8ad6", "patch": "@@ -292,8 +292,10 @@ impl<T> [T] {\n     /// Returns a reference to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// This is generally not recommended, use with caution! For a safe\n-    /// alternative see [`get`].\n+    /// This is generally not recommended, use with caution!\n+    /// Calling this method with an out-of-bounds index is UB even if the resulting\n+    /// reference is not used.\n+    /// For a safe alternative see [`get`].\n     ///\n     /// [`get`]: #method.get\n     ///\n@@ -317,8 +319,10 @@ impl<T> [T] {\n     /// Returns a mutable reference to an element or subslice, without doing\n     /// bounds checking.\n     ///\n-    /// This is generally not recommended, use with caution! For a safe\n-    /// alternative see [`get_mut`].\n+    /// This is generally not recommended, use with caution!\n+    /// Calling this method with an out-of-bounds index is UB even if the resulting\n+    /// reference is not used.\n+    /// For a safe alternative see [`get_mut`].\n     ///\n     /// [`get_mut`]: #method.get_mut\n     ///\n@@ -2629,11 +2633,15 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n \n     /// Returns a shared reference to the output at this location, without\n     /// performing any bounds checking.\n+    /// Calling this method with an out-of-bounds index is UB even if the resulting\n+    /// reference is not used.\n     #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, without\n     /// performing any bounds checking.\n+    /// Calling this method with an out-of-bounds index is UB even if the resulting\n+    /// reference is not used.\n     #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;\n "}]}