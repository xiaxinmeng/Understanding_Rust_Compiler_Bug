{"sha": "be8450eec8fa635a9132f799012fed83ba59121e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlODQ1MGVlYzhmYTYzNWE5MTMyZjc5OTAxMmZlZDgzYmE1OTEyMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-19T07:25:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-19T07:25:17Z"}, "message": "Auto merge of #85276 - Bobo1239:more_dso_local, r=nagisa\n\nSet dso_local for more items\n\nRelated to https://github.com/rust-lang/rust/pull/83592. (cc `@nagisa)`\n\nNoticed that on x86_64 with `relocation-model: static` `R_X86_64_GOTPCREL` relocations were still generated in some cases. (related: https://github.com/Rust-for-Linux/linux/issues/135; Rust-for-Linux needs these fixes to successfully build)\n\nFirst time doing anything with LLVM so not sure whether this is correct but the following are some of the things I've tried to convince myself.\n\n## C equivalent\n\nExample from clang which also sets `dso_local` in these cases:\n`clang-12 -fno-PIC -S -emit-llvm test.c`\n```C\nextern int A;\n\nint* a() {\n    return &A;\n}\n\nint B;\n\nint* b() {\n    return &B;\n}\n```\n```\n; ModuleID = 'test.c'\nsource_filename = \"test.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n`@A` = external dso_local global i32, align 4\n`@B` = dso_local global i32 0, align 4\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32* `@a()` #0 {\n  ret i32* `@A`\n}\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32* `@b()` #0 {\n  ret i32* `@B`\n}\n\nattributes #0 = { noinline nounwind optnone uwtable \"disable-tail-calls\"=\"false\" \"frame-pointer\"=\"all\" \"less-precise-fpmad\"=\"false\" \"min-legal-vector-width\"=\"0\" \"no-infs-fp-math\"=\"false\" \"no-jump-tables\"=\"false\" \"no-nans-fp-math\"=\"false\" \"no-signed-zeros-fp-math\"=\"false\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\n\n!llvm.module.flags = !{!0}\n!llvm.ident = !{!1}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{!\"clang version 12.0.0 (https://github.com/llvm/llvm-project/ b978a93635b584db380274d7c8963c73989944a1)\"}\n```\n`clang-12 -fno-PIC -c test.c`\n`objdump test.o -r`:\n```\ntest.o:     file format elf64-x86-64\n\nRELOCATION RECORDS FOR [.text]:\nOFFSET           TYPE              VALUE\n0000000000000006 R_X86_64_64       A\n0000000000000016 R_X86_64_64       B\n\nRELOCATION RECORDS FOR [.eh_frame]:\nOFFSET           TYPE              VALUE\n0000000000000020 R_X86_64_PC32     .text\n0000000000000040 R_X86_64_PC32     .text+0x0000000000000010\n```\n\n## Comparison to pre-LLVM 12 output\n\n`rustc --emit=obj,llvm-ir --target=x86_64-unknown-none-linuxkernel --crate-type rlib test.rs`\n```Rust\n#![feature(no_core, lang_items)]\n#![no_core]\n\n#[lang=\"sized\"]\ntrait Sized {}\n\n#[lang=\"sync\"]\ntrait Sync {}\n\n#[lang = \"drop_in_place\"]\npub unsafe fn drop_in_place<T: ?Sized>(_: *mut T) {}\n\nimpl Sync for i32 {}\n\npub static STATIC: i32 = 32;\n\nextern {\n    pub static EXT_STATIC: i32;\n}\n\npub fn a() -> &'static i32 {\n    &STATIC\n}\npub fn b() -> &'static i32 {\n    unsafe {&EXT_STATIC}\n}\n```\n`objdump test.o -r`\nnightly-2021-02-20 (rustc target is `x86_64-linux-kernel`):\n```\nRELOCATION RECORDS FOR [.text._ZN4test1a17h1024ba65f3424175E]:\nOFFSET           TYPE              VALUE\n0000000000000007 R_X86_64_32S      _ZN4test6STATIC17h3adc41a83746c9ffE\n\nRELOCATION RECORDS FOR [.text._ZN4test1b17h86a6a80c1190ac8dE]:\nOFFSET           TYPE              VALUE\n0000000000000007 R_X86_64_32S      EXT_STATIC\n```\nnightly-2021-05-10:\n```\nRELOCATION RECORDS FOR [.text._ZN4test1a17he846f03bf37b2d20E]:\nOFFSET           TYPE              VALUE\n0000000000000007 R_X86_64_GOTPCREL  _ZN4test6STATIC17h5a059515bf3d4968E-0x0000000000000004\n\nRELOCATION RECORDS FOR [.text._ZN4test1b17h7e0f7f80fbd91125E]:\nOFFSET           TYPE              VALUE\n0000000000000007 R_X86_64_GOTPCREL  EXT_STATIC-0x0000000000000004\n```\nThis PR:\n```\nRELOCATION RECORDS FOR [.text._ZN4test1a17he846f03bf37b2d20E]:\nOFFSET           TYPE              VALUE\n0000000000000007 R_X86_64_32S      _ZN4test6STATIC17h5a059515bf3d4968E\n\nRELOCATION RECORDS FOR [.text._ZN4test1b17h7e0f7f80fbd91125E]:\nOFFSET           TYPE              VALUE\n0000000000000007 R_X86_64_32S      EXT_STATIC\n```", "tree": {"sha": "8ecb5f8aa5fb29ffd36eba8b856c2b27cb5af6e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ecb5f8aa5fb29ffd36eba8b856c2b27cb5af6e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8450eec8fa635a9132f799012fed83ba59121e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8450eec8fa635a9132f799012fed83ba59121e", "html_url": "https://github.com/rust-lang/rust/commit/be8450eec8fa635a9132f799012fed83ba59121e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8450eec8fa635a9132f799012fed83ba59121e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca", "html_url": "https://github.com/rust-lang/rust/commit/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca"}, {"sha": "f7ed4a799ad2a128ede21eff62f95562a4e528e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ed4a799ad2a128ede21eff62f95562a4e528e3", "html_url": "https://github.com/rust-lang/rust/commit/f7ed4a799ad2a128ede21eff62f95562a4e528e3"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "b296db64ee9bd2ca3cf09507e167e643e39cec17", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be8450eec8fa635a9132f799012fed83ba59121e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8450eec8fa635a9132f799012fed83ba59121e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=be8450eec8fa635a9132f799012fed83ba59121e", "patch": "@@ -218,3 +218,27 @@ pub fn visibility_to_llvm(linkage: Visibility) -> llvm::Visibility {\n         Visibility::Protected => llvm::Visibility::Protected,\n     }\n }\n+\n+pub fn linkage_from_llvm(linkage: llvm::Linkage) -> Linkage {\n+    match linkage {\n+        llvm::Linkage::ExternalLinkage => Linkage::External,\n+        llvm::Linkage::AvailableExternallyLinkage => Linkage::AvailableExternally,\n+        llvm::Linkage::LinkOnceAnyLinkage => Linkage::LinkOnceAny,\n+        llvm::Linkage::LinkOnceODRLinkage => Linkage::LinkOnceODR,\n+        llvm::Linkage::WeakAnyLinkage => Linkage::WeakAny,\n+        llvm::Linkage::WeakODRLinkage => Linkage::WeakODR,\n+        llvm::Linkage::AppendingLinkage => Linkage::Appending,\n+        llvm::Linkage::InternalLinkage => Linkage::Internal,\n+        llvm::Linkage::PrivateLinkage => Linkage::Private,\n+        llvm::Linkage::ExternalWeakLinkage => Linkage::ExternalWeak,\n+        llvm::Linkage::CommonLinkage => Linkage::Common,\n+    }\n+}\n+\n+pub fn visibility_from_llvm(linkage: llvm::Visibility) -> Visibility {\n+    match linkage {\n+        llvm::Visibility::Default => Visibility::Default,\n+        llvm::Visibility::Hidden => Visibility::Hidden,\n+        llvm::Visibility::Protected => Visibility::Protected,\n+    }\n+}"}, {"sha": "245842df1b060080cc9a825ad08053ace9aa612a", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be8450eec8fa635a9132f799012fed83ba59121e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8450eec8fa635a9132f799012fed83ba59121e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=be8450eec8fa635a9132f799012fed83ba59121e", "patch": "@@ -17,6 +17,7 @@ use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_target::abi::{AddressSpace, Align, HasDataLayout, LayoutOf, Primitive, Scalar, Size};\n+use rustc_target::spec::RelocModel;\n use tracing::debug;\n \n pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll Value {\n@@ -282,6 +283,12 @@ impl CodegenCx<'ll, 'tcx> {\n             }\n         }\n \n+        if self.tcx.sess.relocation_model() == RelocModel::Static {\n+            unsafe {\n+                llvm::LLVMRustSetDSOLocal(g, true);\n+            }\n+        }\n+\n         self.instances.borrow_mut().insert(instance, g);\n         g\n     }\n@@ -363,6 +370,12 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             set_global_alignment(&self, g, self.align_of(ty));\n             llvm::LLVMSetInitializer(g, v);\n \n+            let linkage = base::linkage_from_llvm(llvm::LLVMRustGetLinkage(g));\n+            let visibility = base::visibility_from_llvm(llvm::LLVMRustGetVisibility(g));\n+            if self.should_assume_dso_local(linkage, visibility) {\n+                llvm::LLVMRustSetDSOLocal(g, true);\n+            }\n+\n             // As an optimization, all shared statics which do not have interior\n             // mutability are placed into read-only memory.\n             if !is_mutable && self.type_is_freeze(ty) {"}, {"sha": "966be4a53fd5a12d3f6a5ea6ef524e7b57d49409", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be8450eec8fa635a9132f799012fed83ba59121e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8450eec8fa635a9132f799012fed83ba59121e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=be8450eec8fa635a9132f799012fed83ba59121e", "patch": "@@ -54,7 +54,7 @@ pub enum CallConv {\n }\n \n /// LLVMRustLinkage\n-#[derive(PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum Linkage {\n     ExternalLinkage = 0,\n@@ -72,6 +72,7 @@ pub enum Linkage {\n \n // LLVMRustVisibility\n #[repr(C)]\n+#[derive(Copy, Clone)]\n pub enum Visibility {\n     Default = 0,\n     Hidden = 1,"}, {"sha": "ce2b3b1cfa4140455f79839f19756456abac9ab2", "filename": "src/test/assembly/static-relocation-model.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/be8450eec8fa635a9132f799012fed83ba59121e/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8450eec8fa635a9132f799012fed83ba59121e/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs?ref=be8450eec8fa635a9132f799012fed83ba59121e", "patch": "@@ -1,8 +1,8 @@\n // min-llvm-version: 12.0.0\n // needs-llvm-components: aarch64 x86\n-// revisions:X64 A64\n+// revisions:x64 A64\n // assembly-output: emit-asm\n-// [X64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=static\n+// [x64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=static\n // [A64] compile-flags: --target aarch64-unknown-linux-gnu -Crelocation-model=static\n \n #![feature(no_core, lang_items)]\n@@ -15,14 +15,26 @@ trait Sized {}\n #[lang=\"copy\"]\n trait Copy {}\n \n+#[lang=\"sync\"]\n+trait Sync {}\n+\n+#[lang = \"drop_in_place\"]\n+fn drop_in_place<T>(_: *mut T) {}\n+\n impl Copy for u8 {}\n+impl Sync for u8 {}\n+\n+#[no_mangle]\n+pub static PIERIS: u8 = 42;\n \n extern \"C\" {\n+    static EXOCHORDA: *mut u8;\n+\n     fn chaenomeles();\n }\n \n // CHECK-LABEL: banana:\n-// x64: movb    chaenomeles, %{{[a,z]+}}\n+// x64: movb   chaenomeles{{(\\(%[a-z0-9]+\\))?}}, %{{[a-z0-9]+}}\n // A64:      adrp    [[REG:[a-z0-9]+]], chaenomeles\n // A64-NEXT: ldrb    {{[a-z0-9]+}}, {{\\[}}[[REG]], :lo12:chaenomeles]\n #[no_mangle]\n@@ -33,7 +45,7 @@ pub fn banana() -> u8 {\n }\n \n // CHECK-LABEL: peach:\n-// x64: movb    banana, %{{[a,z]+}}\n+// x64: movb    banana{{(\\(%[a-z0-9]+\\))?}}, %{{[a-z0-9]+}}\n // A64:      adrp    [[REG2:[a-z0-9]+]], banana\n // A64-NEXT: ldrb    {{[a-z0-9]+}}, {{\\[}}[[REG2]], :lo12:banana]\n #[no_mangle]\n@@ -42,3 +54,24 @@ pub fn peach() -> u8 {\n         *(banana as *mut u8)\n     }\n }\n+\n+// CHECK-LABEL: mango:\n+// x64:      movq    EXOCHORDA{{(\\(%[a-z0-9]+\\))?}}, %[[REG:[a-z0-9]+]]\n+// x64-NEXT: movb    (%[[REG]]), %{{[a-z0-9]+}}\n+// A64:      adrp    [[REG2:[a-z0-9]+]], EXOCHORDA\n+// A64-NEXT: ldr     {{[a-z0-9]+}}, {{\\[}}[[REG2]], :lo12:EXOCHORDA]\n+#[no_mangle]\n+pub fn mango() -> u8 {\n+    unsafe {\n+        *EXOCHORDA\n+    }\n+}\n+\n+// CHECK-LABEL: orange:\n+// x64: mov{{l|absq}}    $PIERIS, %{{[a-z0-9]+}}\n+// A64:      adrp    [[REG2:[a-z0-9]+]], PIERIS\n+// A64-NEXT: add     {{[a-z0-9]+}}, [[REG2]], :lo12:PIERIS\n+#[no_mangle]\n+pub fn orange() -> &'static u8 {\n+    &PIERIS\n+}"}]}