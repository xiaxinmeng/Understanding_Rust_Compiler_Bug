{"sha": "81efdab3f8871ecbef2a504c34ef90ecd3989cf4", "node_id": "C_kwDOAAsO6NoAKDgxZWZkYWIzZjg4NzFlY2JlZjJhNTA0YzM0ZWY5MGVjZDM5ODljZjQ", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-18T09:28:19Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-18T14:53:27Z"}, "message": "add tests for 107090", "tree": {"sha": "6d5ceed628ccad98acb9b967139bb94b054867f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d5ceed628ccad98acb9b967139bb94b054867f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81efdab3f8871ecbef2a504c34ef90ecd3989cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81efdab3f8871ecbef2a504c34ef90ecd3989cf4", "html_url": "https://github.com/rust-lang/rust/commit/81efdab3f8871ecbef2a504c34ef90ecd3989cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81efdab3f8871ecbef2a504c34ef90ecd3989cf4/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0368adb262c27e4cc88158c95dabc9dfe8e18e4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0368adb262c27e4cc88158c95dabc9dfe8e18e4f", "html_url": "https://github.com/rust-lang/rust/commit/0368adb262c27e4cc88158c95dabc9dfe8e18e4f"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "9426445656f23dc4561c2249007a213727858c39", "filename": "tests/ui/inference/issue-107090.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/81efdab3f8871ecbef2a504c34ef90ecd3989cf4/tests%2Fui%2Finference%2Fissue-107090.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81efdab3f8871ecbef2a504c34ef90ecd3989cf4/tests%2Fui%2Finference%2Fissue-107090.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-107090.rs?ref=81efdab3f8871ecbef2a504c34ef90ecd3989cf4", "patch": "@@ -0,0 +1,31 @@\n+use std::marker::PhantomData;\n+struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+where\n+    Foo<'short, 'out, T>: Convert<'a, 'b>;\n+    //~^ ERROR mismatched types\n+    //~^^ ERROR mismatched types\n+    //~^^^ ERROR use of undeclared lifetime name\n+    //~| ERROR use of undeclared lifetime name `'out`\n+\n+trait Convert<'a, 'b>: Sized {\n+    fn cast(&'a self) -> &'b Self;\n+}\n+impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+    //~^ ERROR use of undeclared lifetime name\n+    //~^^ ERROR use of undeclared lifetime name `'out`\n+    //~| ERROR cannot infer an appropriate lifetime for lifetime parameter\n+    fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+        //~^ ERROR use of undeclared lifetime name\n+        //~| ERROR cannot infer an appropriate lifetime for lifetime parameter\n+        self\n+    }\n+}\n+\n+fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+    //~^ ERROR use of undeclared lifetime name\n+    //~^^ ERROR incompatible lifetime on type\n+    //~| ERROR `x` has lifetime `'in_` but it needs to satisfy a `'static` lifetime requirement\n+    sadness.cast()\n+}\n+\n+fn main() {}"}, {"sha": "33cb39014acfa658853824fdb08f20a484589d0b", "filename": "tests/ui/inference/issue-107090.stderr", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/81efdab3f8871ecbef2a504c34ef90ecd3989cf4/tests%2Fui%2Finference%2Fissue-107090.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81efdab3f8871ecbef2a504c34ef90ecd3989cf4/tests%2Fui%2Finference%2Fissue-107090.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-107090.stderr?ref=81efdab3f8871ecbef2a504c34ef90ecd3989cf4", "patch": "@@ -0,0 +1,173 @@\n+error[E0261]: use of undeclared lifetime name `'short`\n+  --> $DIR/issue-107090.rs:4:9\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |         ^^^^^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'short` lifetime\n+   |\n+LL |     for<'short> Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |     +++++++++++\n+help: consider introducing lifetime `'short` here\n+   |\n+LL | struct Foo<'short, 'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            +++++++\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:4:17\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                 ^^^^ undeclared lifetime\n+   |\n+help: consider making the bound lifetime-generic with a new `'out` lifetime\n+   |\n+LL |     for<'out> Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |     +++++++++\n+help: consider introducing lifetime `'out` here\n+   |\n+LL | struct Foo<'out, 'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            +++++\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/issue-107090.rs:13:47\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      -                                        ^^ undeclared lifetime\n+   |      |\n+   |      help: consider introducing lifetime `'b` here: `'b,`\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:13:67\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      - help: consider introducing lifetime `'out` here: `'out,`   ^^^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:17:49\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |                                                 ^^^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'out` here\n+   |\n+LL |     fn cast<'out>(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |            ++++++\n+help: consider introducing lifetime `'out` here\n+   |\n+LL | impl<'out, 'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      +++++\n+\n+error[E0261]: use of undeclared lifetime name `'short`\n+  --> $DIR/issue-107090.rs:24:68\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |           -                                                        ^^^^^^ undeclared lifetime\n+   |           |\n+   |           help: consider introducing lifetime `'short` here: `'short,`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `Convert<'static, 'static>`\n+              found trait `Convert<'a, 'b>`\n+note: the lifetime `'a` as defined here...\n+  --> $DIR/issue-107090.rs:2:12\n+   |\n+LL | struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `Convert<'static, 'static>`\n+              found trait `Convert<'a, 'b>`\n+note: the lifetime `'b` as defined here...\n+  --> $DIR/issue-107090.rs:2:16\n+   |\n+LL | struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |                ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'long` due to conflicting requirements\n+  --> $DIR/issue-107090.rs:13:55\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'short` as defined here...\n+  --> $DIR/issue-107090.rs:13:21\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                     ^^^^^^\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/issue-107090.rs:13:55\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^\n+   = note: expected `Convert<'short, 'static>`\n+              found `Convert<'_, 'static>`\n+\n+error: incompatible lifetime on type\n+  --> $DIR/issue-107090.rs:24:29\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                             ^^^^^^^^^^^^^^^^^^\n+   |\n+note: because this has an unmet lifetime requirement\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ introduces a `'static` lifetime requirement\n+note: the lifetime `'out` as defined here...\n+  --> $DIR/issue-107090.rs:24:17\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                 ^^^^\n+note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+  --> $DIR/issue-107090.rs:13:1\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0759]: `x` has lifetime `'in_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/issue-107090.rs:24:29\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                             ^^^^^^^^^^^^^^^^^^\n+   |                             |\n+   |                             this data with lifetime `'in_`...\n+   |                             ...is used and required to live as long as `'static` here\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'long` due to conflicting requirements\n+  --> $DIR/issue-107090.rs:17:13\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |             ^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'short` as defined here...\n+  --> $DIR/issue-107090.rs:13:21\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                     ^^^^^^\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/issue-107090.rs:17:13\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |             ^^^^^^^^^^^\n+   = note: expected `Convert<'short, 'static>`\n+              found `Convert<'_, 'static>`\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0261, E0308, E0495, E0759.\n+For more information about an error, try `rustc --explain E0261`."}]}