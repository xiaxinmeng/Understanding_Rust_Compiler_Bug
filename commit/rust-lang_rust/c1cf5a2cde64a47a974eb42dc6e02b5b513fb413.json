{"sha": "c1cf5a2cde64a47a974eb42dc6e02b5b513fb413", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxY2Y1YTJjZGU2NGE0N2E5NzRlYjQyZGM2ZTAyYjViNTEzZmI0MTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-30T11:43:27Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-21T11:01:41Z"}, "message": "cleanup and create another helper function that we should use more often", "tree": {"sha": "8e97343f29b2afcf510dd840ca867ca4d2d45624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e97343f29b2afcf510dd840ca867ca4d2d45624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1cf5a2cde64a47a974eb42dc6e02b5b513fb413", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlisHhUACgkQpp+NIls6\n19nHSQ//TDdCQ7TjMkEyCg3OIMgel0xXe1yWOTnftN9sX1IAOPNdoAzcV58kwHxP\nEHMlDjw5jqEBLo2xZLHxY/Ct9i12HBdC8Y9Ekshmep+lH6d7sNQpJWClNGLUv32S\nYouQucmEv4Rwk1uNyclUYbphyjFnL95zuhTBEXgt92gK0+U1XGYy/dc1+3KPEoJz\nZ7xMdlua8XGVEDFpldNmrEHEerz7uG3VqOgJpYgPelG9kIda0I0yoB8BNZpE535I\niXXnx9by+6gGLGuz8tq23t4zzVGSUdfjZdwYbLMkbgm06oFRYHoXXw3w33lOIXWz\ngBWm2z5Dmf4/R+G4tXybLMI8VtA0xRMvUqqJtvI/qMf3gPACxUa4YQ1UQXzitNtC\nst40NDqzA5sf20FBr6KLJRJA01RpUBtIDVt34DKItjL1JsN0YMUMFtE1rUjeyvJ/\n+cozXyNO23Y3+oVEWy874q5/CqOcz3OIWsvu75m61aDAiqxjbXXqcQFeLx8T31hh\nQ0vAw2lbJDcJA9dx5eMKEmcMyQJa9w9ilS1rWCmcxb4PfYCfKPVDTv3dBhPCn/c3\nASDH6ovpNOzSE+m2vQbq53klIx7RXL6IF6XrxIh2EgsbLIWX8XZU+UTMUp4JXCRQ\n9G/RX3DPjkE3Hl414gSep46pQYMtPXF0UE4WybVsWpeuNHf2sjw=\n=Vpyg\n-----END PGP SIGNATURE-----", "payload": "tree 8e97343f29b2afcf510dd840ca867ca4d2d45624\nparent 0bea3e76d4e83a802a2eba4b7b34cd171f250919\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1485776607 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1487674901 +0100\n\ncleanup and create another helper function that we should use more often"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cf5a2cde64a47a974eb42dc6e02b5b513fb413", "html_url": "https://github.com/rust-lang/rust/commit/c1cf5a2cde64a47a974eb42dc6e02b5b513fb413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1cf5a2cde64a47a974eb42dc6e02b5b513fb413/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bea3e76d4e83a802a2eba4b7b34cd171f250919", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bea3e76d4e83a802a2eba4b7b34cd171f250919", "html_url": "https://github.com/rust-lang/rust/commit/0bea3e76d4e83a802a2eba4b7b34cd171f250919"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "e802c99cd374315b11709f66bed1f7c6d7aeb1ec", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c1cf5a2cde64a47a974eb42dc6e02b5b513fb413/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cf5a2cde64a47a974eb42dc6e02b5b513fb413/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c1cf5a2cde64a47a974eb42dc6e02b5b513fb413", "patch": "@@ -16,7 +16,7 @@ use utils::sugg;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, multispan_sugg, in_external_macro,\n             is_refutable, span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, higher,\n-            last_path_segment};\n+            last_path_segment, span_lint_and_sugg};\n use utils::paths;\n \n /// **What it does:** Checks for looping over the range of `0..len` of some\n@@ -644,23 +644,20 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     }\n }\n \n-fn lint_iter_method(cx: &LateContext, args: &[Expr], arg: &Expr, expr: &Expr, method_name: &str) {\n+fn lint_iter_method(cx: &LateContext, args: &[Expr], arg: &Expr, method_name: &str) {\n     let object = snippet(cx, args[0].span, \"_\");\n-    let suggestion = format!(\"&{}{}\",\n-                             if method_name == \"iter_mut\" {\n-                                 \"mut \"\n-                             } else {\n-                                 \"\"\n-                             },\n-                             object);\n-    span_lint_and_then(cx,\n+    let muta = if method_name == \"iter_mut\" {\n+        \"mut \"\n+    } else {\n+        \"\"\n+    };\n+    span_lint_and_sugg(cx,\n                        EXPLICIT_ITER_LOOP,\n-                       expr.span,\n-                       &format!(\"it is more idiomatic to loop over `{}` instead of `{}.{}()`\",\n-                                suggestion,\n-                                object,\n-                                method_name),\n-                       |db| db.span_suggestion(arg.span, \"to write this more concisely, try looping over\", suggestion));\n+                       arg.span,\n+                       \"it is more idiomatic to loop over references to containers instead of using explicit \\\n+                        iteration methods\",\n+                       \"to write this more concisely, try looping over\",\n+                       format!(\"&{}{}\", muta, object))\n }\n \n fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n@@ -672,7 +669,7 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n             // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n             if method_name == \"iter\" || method_name == \"iter_mut\" {\n                 if is_ref_iterable_type(cx, &args[0]) {\n-                    lint_iter_method(cx, args, arg, expr, method_name);\n+                    lint_iter_method(cx, args, arg, method_name);\n                 }\n             } else if method_name == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n                 let method_call = ty::MethodCall::expr(arg.id);\n@@ -684,7 +681,7 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                 let fn_arg_tys = fn_ty.fn_args();\n                 assert_eq!(fn_arg_tys.skip_binder().len(), 1);\n                 if fn_arg_tys.skip_binder()[0].is_region_ptr() {\n-                    lint_iter_method(cx, args, arg, expr, method_name);\n+                    lint_iter_method(cx, args, arg, method_name);\n                 } else {\n                     let object = snippet(cx, args[0].span, \"_\");\n                     span_lint_and_then(cx,"}, {"sha": "19fec7e03f6fec686ef0b93b803807cede703228", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1cf5a2cde64a47a974eb42dc6e02b5b513fb413/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cf5a2cde64a47a974eb42dc6e02b5b513fb413/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c1cf5a2cde64a47a974eb42dc6e02b5b513fb413", "patch": "@@ -569,6 +569,17 @@ pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n     }\n }\n \n+pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    help: &str,\n+    sugg: String,\n+) {\n+    span_lint_and_then(cx, lint, sp, msg, |db| { db.span_suggestion(sp, help, sugg); });\n+}\n+\n /// Create a suggestion made from several `span \u2192 replacement`.\n ///\n /// Note: in the JSON format (used by `compiletest_rs`), the help message will appear once per"}]}