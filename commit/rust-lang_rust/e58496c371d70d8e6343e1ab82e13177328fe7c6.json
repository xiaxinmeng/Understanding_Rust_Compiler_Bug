{"sha": "e58496c371d70d8e6343e1ab82e13177328fe7c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ODQ5NmMzNzFkNzBkOGU2MzQzZTFhYjgyZTEzMTc3MzI4ZmU3YzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-25T04:30:11Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-25T04:30:11Z"}, "message": "improve ParentHirIterator discoverability", "tree": {"sha": "eef7e60ad6ce77fddcdd189629986e231ec08d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eef7e60ad6ce77fddcdd189629986e231ec08d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58496c371d70d8e6343e1ab82e13177328fe7c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58496c371d70d8e6343e1ab82e13177328fe7c6", "html_url": "https://github.com/rust-lang/rust/commit/e58496c371d70d8e6343e1ab82e13177328fe7c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58496c371d70d8e6343e1ab82e13177328fe7c6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "html_url": "https://github.com/rust-lang/rust/commit/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "f7301280acd69ba5ead7052e5f9da2d3c9f5f2bc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e58496c371d70d8e6343e1ab82e13177328fe7c6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58496c371d70d8e6343e1ab82e13177328fe7c6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e58496c371d70d8e6343e1ab82e13177328fe7c6", "patch": "@@ -153,17 +153,13 @@ pub struct Map<'hir> {\n     hir_to_node_id: FxHashMap<HirId, NodeId>,\n }\n \n-struct ParentHirIterator<'map, 'hir> {\n+/// An iterator that walks up the ancestor tree of a given `HirId`.\n+/// Constructed using `tcx.hir().parent_iter(hir_id)`.\n+pub struct ParentHirIterator<'map, 'hir> {\n     current_id: HirId,\n     map: &'map Map<'hir>,\n }\n \n-impl<'map, 'hir> ParentHirIterator<'map, 'hir> {\n-    fn new(current_id: HirId, map: &'map Map<'hir>) -> Self {\n-        Self { current_id, map }\n-    }\n-}\n-\n impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n     type Item = (HirId, Node<'hir>);\n \n@@ -618,6 +614,12 @@ impl<'hir> Map<'hir> {\n         self.find_entry(hir_id).and_then(|x| x.parent_node()).unwrap_or(hir_id)\n     }\n \n+    /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n+    /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    pub fn parent_iter(&self, current_id: HirId) -> ParentHirIterator<'_, 'hir> {\n+        ParentHirIterator { current_id, map: self }\n+    }\n+\n     /// Checks if the node is an argument. An argument is a local variable whose\n     /// immediate parent is an item or a closure.\n     pub fn is_argument(&self, id: HirId) -> bool {\n@@ -684,7 +686,7 @@ impl<'hir> Map<'hir> {\n     /// }\n     /// ```\n     pub fn get_return_block(&self, id: HirId) -> Option<HirId> {\n-        let mut iter = ParentHirIterator::new(id, &self).peekable();\n+        let mut iter = self.parent_iter(id).peekable();\n         let mut ignore_tail = false;\n         if let Some(entry) = self.find_entry(id) {\n             if let Node::Expr(Expr { kind: ExprKind::Ret(_), .. }) = entry.node {\n@@ -731,7 +733,7 @@ impl<'hir> Map<'hir> {\n     /// in the HIR which is recorded by the map and is an item, either an item\n     /// in a module, trait, or impl.\n     pub fn get_parent_item(&self, hir_id: HirId) -> HirId {\n-        for (hir_id, node) in ParentHirIterator::new(hir_id, &self) {\n+        for (hir_id, node) in self.parent_iter(hir_id) {\n             match node {\n                 Node::Crate\n                 | Node::Item(_)\n@@ -753,7 +755,7 @@ impl<'hir> Map<'hir> {\n     /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no\n     /// module parent is in this map.\n     pub fn get_module_parent_node(&self, hir_id: HirId) -> HirId {\n-        for (hir_id, node) in ParentHirIterator::new(hir_id, &self) {\n+        for (hir_id, node) in self.parent_iter(hir_id) {\n             if let Node::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {\n                 return hir_id;\n             }\n@@ -767,7 +769,7 @@ impl<'hir> Map<'hir> {\n     /// Used by error reporting when there's a type error in a match arm caused by the `match`\n     /// expression needing to be unit.\n     pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&'hir Expr<'hir>> {\n-        for (_, node) in ParentHirIterator::new(hir_id, &self) {\n+        for (_, node) in self.parent_iter(hir_id) {\n             match node {\n                 Node::Item(_) | Node::ForeignItem(_) | Node::TraitItem(_) | Node::ImplItem(_) => {\n                     break;\n@@ -788,7 +790,7 @@ impl<'hir> Map<'hir> {\n \n     /// Returns the nearest enclosing scope. A scope is roughly an item or block.\n     pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {\n-        for (hir_id, node) in ParentHirIterator::new(hir_id, &self) {\n+        for (hir_id, node) in self.parent_iter(hir_id) {\n             if match node {\n                 Node::Item(i) => match i.kind {\n                     ItemKind::Fn(..)"}]}