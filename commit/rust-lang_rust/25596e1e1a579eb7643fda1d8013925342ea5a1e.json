{"sha": "25596e1e1a579eb7643fda1d8013925342ea5a1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTk2ZTFlMWE1NzllYjc2NDNmZGExZDgwMTM5MjUzNDJlYTVhMWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-07T06:48:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-07T06:48:04Z"}, "message": "Merge #3872\n\n3872: fix cargo check config with custom command r=matklad a=JoshMcguigan\n\nfixes #3871\r\n\r\nPreviously if `get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\")` returned `Some` we'd never execute `set(value, \"/checkOnSave/command\", command)`, even if the `overrideCommand` was empty. \r\n\r\nI am not sure of the best way to prove this, but I believe the LSP clients send this config with a default value if it is not set by the user, which means `get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\")` would return `Some(vec![])` and thus we'd never set the command to the user specified value (in the case of #3871, \"clippy\").\r\n\r\nI have tested this fix manually by installing this modified version of rust-analyzer and verifying I can see clippy lints in my editor (`coc.nvim`) with `rust-analyzer.checkOnSave.command\": \"clippy\"`.\r\n\r\nAs best I can tell this would have affected rustfmt extra args too, so this PR also applies the same fix there.\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "141457681118671f58c055321b6a8f80f713224a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141457681118671f58c055321b6a8f80f713224a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25596e1e1a579eb7643fda1d8013925342ea5a1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejCIkCRBK7hj4Ov3rIwAAdHIIAAJuWPoDbRAx/MDhB2nQkCrk\ngLfI2hQvhQaS7fqK+YKfAUPWMSyuzUL36m858Mg5TwaZpDKInePU5nEPQIC+fyN9\nuLfdrIEs3mrYomvSK5G/E+YXaFDg9U5X1Umf6qWu1gmy5hFIXVvtH08Jc8xucuQe\nWSzRFRqjd8QIeEc66F6ajA+UlWFeuDDYdHVs/vDjCsldz43Vzq70XE7WKoSGem+W\nVj5gIvwxchme7zrhLZTjBgN04loZWW2DMuQ+8ARDcoY606ZZgssezGoaAAcnDiTk\nrW6BBZNhWhctC5OjCHBF0o4fomdfDYuAFW9PBOze0dAb3s8eXRU39ShgulCoN5U=\n=Y7kS\n-----END PGP SIGNATURE-----\n", "payload": "tree 141457681118671f58c055321b6a8f80f713224a\nparent c859a6480af7baece2eec38c19f71cb714db9e3b\nparent 8f7fceeb9ceab6383deae8895c88b3ba53f8dabe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586242084 +0000\ncommitter GitHub <noreply@github.com> 1586242084 +0000\n\nMerge #3872\n\n3872: fix cargo check config with custom command r=matklad a=JoshMcguigan\n\nfixes #3871\r\n\r\nPreviously if `get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\")` returned `Some` we'd never execute `set(value, \"/checkOnSave/command\", command)`, even if the `overrideCommand` was empty. \r\n\r\nI am not sure of the best way to prove this, but I believe the LSP clients send this config with a default value if it is not set by the user, which means `get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\")` would return `Some(vec![])` and thus we'd never set the command to the user specified value (in the case of #3871, \"clippy\").\r\n\r\nI have tested this fix manually by installing this modified version of rust-analyzer and verifying I can see clippy lints in my editor (`coc.nvim`) with `rust-analyzer.checkOnSave.command\": \"clippy\"`.\r\n\r\nAs best I can tell this would have affected rustfmt extra args too, so this PR also applies the same fix there.\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25596e1e1a579eb7643fda1d8013925342ea5a1e", "html_url": "https://github.com/rust-lang/rust/commit/25596e1e1a579eb7643fda1d8013925342ea5a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25596e1e1a579eb7643fda1d8013925342ea5a1e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c859a6480af7baece2eec38c19f71cb714db9e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c859a6480af7baece2eec38c19f71cb714db9e3b", "html_url": "https://github.com/rust-lang/rust/commit/c859a6480af7baece2eec38c19f71cb714db9e3b"}, {"sha": "8f7fceeb9ceab6383deae8895c88b3ba53f8dabe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7fceeb9ceab6383deae8895c88b3ba53f8dabe", "html_url": "https://github.com/rust-lang/rust/commit/8f7fceeb9ceab6383deae8895c88b3ba53f8dabe"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "4734df16ac3b4974162c1e53ae993c4d7db921a4", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/25596e1e1a579eb7643fda1d8013925342ea5a1e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25596e1e1a579eb7643fda1d8013925342ea5a1e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=25596e1e1a579eb7643fda1d8013925342ea5a1e", "patch": "@@ -131,37 +131,47 @@ impl Config {\n         set(value, \"/cargo/allFeatures\", &mut self.cargo.all_features);\n         set(value, \"/cargo/features\", &mut self.cargo.features);\n         set(value, \"/cargo/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n-        if let Some(mut args) = get::<Vec<String>>(value, \"/rustfmt/overrideCommand\") {\n-            if !args.is_empty() {\n+        match get::<Vec<String>>(value, \"/rustfmt/overrideCommand\") {\n+            Some(mut args) if !args.is_empty() => {\n                 let command = args.remove(0);\n                 self.rustfmt = RustfmtConfig::CustomCommand {\n                     command,\n                     args,\n                 }\n             }\n-        } else if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n-            set(value, \"/rustfmt/extraArgs\", extra_args);\n-        }\n+            _ => {\n+                if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n+                    set(value, \"/rustfmt/extraArgs\", extra_args);\n+                }\n+            }\n+        };\n \n         if let Some(false) = get(value, \"/checkOnSave/enable\") {\n+            // check is disabled\n             self.check = None;\n         } else {\n-            if let Some(mut args) = get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\") {\n-                if !args.is_empty() {\n+            // check is enabled\n+            match get::<Vec<String>>(value, \"/checkOnSave/overrideCommand\") {\n+                // first see if the user has completely overridden the command\n+                Some(mut args) if !args.is_empty() => {\n                     let command = args.remove(0);\n                     self.check = Some(FlycheckConfig::CustomCommand {\n                         command,\n                         args,\n                     });\n                 }\n-\n-            } else if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets }) = &mut self.check\n-            {\n-                set(value, \"/checkOnSave/extraArgs\", extra_args);\n-                set(value, \"/checkOnSave/command\", command);\n-                set(value, \"/checkOnSave/allTargets\", all_targets);\n-            }\n-        };\n+                // otherwise configure command customizations\n+                _ => {\n+                    if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets })\n+                        = &mut self.check\n+                    {\n+                        set(value, \"/checkOnSave/extraArgs\", extra_args);\n+                        set(value, \"/checkOnSave/command\", command);\n+                        set(value, \"/checkOnSave/allTargets\", all_targets);\n+                    }\n+                }\n+            };\n+        }\n \n         set(value, \"/inlayHints/typeHints\", &mut self.inlay_hints.type_hints);\n         set(value, \"/inlayHints/parameterHints\", &mut self.inlay_hints.parameter_hints);"}]}