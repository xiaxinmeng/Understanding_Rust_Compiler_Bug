{"sha": "a125ef2e8ec27e8fedc119ddfdef638d09a69ba2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMjVlZjJlOGVjMjdlOGZlZGMxMTlkZGZkZWY2MzhkMDlhNjliYTI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-19T18:47:25Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-19T18:47:25Z"}, "message": "Clippy: Match on assert!() expansions without an inner block.", "tree": {"sha": "ce4d1a05705c895859a4f9e76ab8e4f440284a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce4d1a05705c895859a4f9e76ab8e4f440284a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a125ef2e8ec27e8fedc119ddfdef638d09a69ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a125ef2e8ec27e8fedc119ddfdef638d09a69ba2", "html_url": "https://github.com/rust-lang/rust/commit/a125ef2e8ec27e8fedc119ddfdef638d09a69ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a125ef2e8ec27e8fedc119ddfdef638d09a69ba2/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454eaec1dc0875614a59ce6b074e91eccb5ab96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/454eaec1dc0875614a59ce6b074e91eccb5ab96a", "html_url": "https://github.com/rust-lang/rust/commit/454eaec1dc0875614a59ce6b074e91eccb5ab96a"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "a52f0997d439dbb642946dfe7c40b76895fad0be", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a125ef2e8ec27e8fedc119ddfdef638d09a69ba2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a125ef2e8ec27e8fedc119ddfdef638d09a69ba2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=a125ef2e8ec27e8fedc119ddfdef638d09a69ba2", "patch": "@@ -129,8 +129,11 @@ fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         if let ExprKind::Block(ref block, _) = arms[0].body.kind;\n         if block.stmts.is_empty();\n         if let Some(block_expr) = &block.expr;\n-        if let ExprKind::Block(ref inner_block, _) = block_expr.kind;\n-        if let Some(begin_panic_call) = &inner_block.expr;\n+        // inner block is optional. unwarp it if it exists, or use the expression as is otherwise.\n+        if let Some(begin_panic_call) = match block_expr.kind {\n+            ExprKind::Block(ref inner_block, _) => &inner_block.expr,\n+            _ => &block.expr,\n+        };\n         // function call\n         if let Some(args) = match_panic_call(cx, begin_panic_call);\n         if args.len() == 1;"}]}