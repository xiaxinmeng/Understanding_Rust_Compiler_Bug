{"sha": "93b62dbe852837e37f8fe43c76a1105d2b221e6a", "node_id": "C_kwDOAAsO6NoAKDkzYjYyZGJlODUyODM3ZTM3ZjhmZTQzYzc2YTExMDVkMmIyMjFlNmE", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-18T16:05:21Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-18T16:05:21Z"}, "message": "Improve docs generation assist", "tree": {"sha": "9f8ba7613b465734c1c557a282e358bb033f40f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8ba7613b465734c1c557a282e358bb033f40f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93b62dbe852837e37f8fe43c76a1105d2b221e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93b62dbe852837e37f8fe43c76a1105d2b221e6a", "html_url": "https://github.com/rust-lang/rust/commit/93b62dbe852837e37f8fe43c76a1105d2b221e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93b62dbe852837e37f8fe43c76a1105d2b221e6a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76030ebdeaf759a5d9948ece4ba16092d0039c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/76030ebdeaf759a5d9948ece4ba16092d0039c95", "html_url": "https://github.com/rust-lang/rust/commit/76030ebdeaf759a5d9948ece4ba16092d0039c95"}], "stats": {"total": 619, "additions": 248, "deletions": 371}, "files": [{"sha": "74c71f13ee3daa412256d0c0f25a522d6a0e2155", "filename": "crates/ide-assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 206, "deletions": 355, "changes": 561, "blob_url": "https://github.com/rust-lang/rust/blob/93b62dbe852837e37f8fe43c76a1105d2b221e6a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b62dbe852837e37f8fe43c76a1105d2b221e6a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=93b62dbe852837e37f8fe43c76a1105d2b221e6a", "patch": "@@ -1,10 +1,11 @@\n use hir::{AsAssocItem, HasVisibility, ModuleDef, Visibility};\n use ide_db::assists::{AssistId, AssistKind};\n use itertools::Itertools;\n-use stdx::to_lower_snake_case;\n+use stdx::{format_to, to_lower_snake_case};\n use syntax::{\n+    algo::skip_whitespace_token,\n     ast::{self, edit::IndentLevel, HasDocComments, HasName},\n-    AstNode,\n+    match_ast, AstNode, AstToken,\n };\n \n use crate::assist_context::{AssistContext, Assists};\n@@ -14,27 +15,29 @@ use crate::assist_context::{AssistContext, Assists};\n // Adds a documentation template above a function definition / declaration.\n //\n // ```\n-// pub fn my_$0func(a: i32, b: i32) -> Result<(), std::io::Error> {\n-//     unimplemented!()\n+// pub struct S;\n+// impl S {\n+//     pub unsafe fn set_len$0(&mut self, len: usize) -> Result<(), std::io::Error> {\n+//         /* ... */\n+//     }\n // }\n // ```\n // ->\n // ```\n-// /// .\n-// ///\n-// /// # Examples\n-// ///\n-// /// ```\n-// /// use test::my_func;\n-// ///\n-// /// assert_eq!(my_func(a, b), );\n-// /// ```\n-// ///\n-// /// # Errors\n-// ///\n-// /// This function will return an error if .\n-// pub fn my_func(a: i32, b: i32) -> Result<(), std::io::Error> {\n-//     unimplemented!()\n+// pub struct S;\n+// impl S {\n+//     /// Sets the length.\n+//     ///\n+//     /// # Errors\n+//     ///\n+//     /// This function will return an error if .\n+//     ///\n+//     /// # Safety\n+//     ///\n+//     /// .\n+//     pub unsafe fn set_len(&mut self, len: usize) -> Result<(), std::io::Error> {\n+//         /* ... */\n+//     }\n // }\n // ```\n pub(crate) fn generate_documentation_template(\n@@ -43,10 +46,7 @@ pub(crate) fn generate_documentation_template(\n ) -> Option<()> {\n     let name = ctx.find_node_at_offset::<ast::Name>()?;\n     let ast_func = name.syntax().parent().and_then(ast::Fn::cast)?;\n-    if is_in_trait_impl(&ast_func, ctx)\n-        || !is_public(&ast_func, ctx)?\n-        || ast_func.doc_comments().next().is_some()\n-    {\n+    if is_in_trait_impl(&ast_func, ctx) || ast_func.doc_comments().next().is_some() {\n         return None;\n     }\n \n@@ -62,10 +62,6 @@ pub(crate) fn generate_documentation_template(\n             // Introduction / short function description before the sections\n             let mut doc_lines = vec![introduction_builder(&ast_func, ctx).unwrap_or(\".\".into())];\n             // Then come the sections\n-            if let Some(mut lines) = examples_builder(&ast_func, ctx) {\n-                doc_lines.push(\"\".into());\n-                doc_lines.append(&mut lines);\n-            }\n             for section_builder in [panics_builder, errors_builder, safety_builder] {\n                 if let Some(mut lines) = section_builder(&ast_func) {\n                     doc_lines.push(\"\".into());\n@@ -77,7 +73,109 @@ pub(crate) fn generate_documentation_template(\n     )\n }\n \n-/// Builds an introduction, trying to be smart if the function is `::new()`\n+// Assist: generate_doc_example\n+//\n+// Generates a rustdoc example when editing an item's documentation.\n+//\n+// ```\n+// /// Adds two numbers.$0\n+// pub fn add(a: i32, b: i32) -> i32 { a + b }\n+// ```\n+// ->\n+// ```\n+// /// Adds two numbers.\n+// ///\n+// /// # Examples\n+// ///\n+// /// ```\n+// /// use test::add;\n+// ///\n+// /// assert_eq!(add(a, b), );\n+// /// ```\n+// pub fn add(a: i32, b: i32) -> i32 { a + b }\n+// ```\n+pub(crate) fn generate_doc_example(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let tok: ast::Comment = ctx.find_token_at_offset()?;\n+    let node = tok.syntax().parent()?;\n+    let last_doc_token =\n+        ast::AnyHasDocComments::cast(node.clone())?.doc_comments().last()?.syntax().clone();\n+    let next_token = skip_whitespace_token(last_doc_token.next_token()?, syntax::Direction::Next)?;\n+\n+    let example = match_ast! {\n+        match node {\n+            ast::Fn(it) => make_example_for_fn(&it, ctx)?,\n+            _ => return None,\n+        }\n+    };\n+\n+    let mut lines = string_vec_from(&[\"\", \"# Examples\", \"\", \"```\"]);\n+    lines.extend(example.lines().map(String::from));\n+    lines.push(\"```\".into());\n+    let indent_level = IndentLevel::from_node(&node);\n+\n+    acc.add(\n+        AssistId(\"generate_doc_example\", AssistKind::Generate),\n+        \"Generate a documentation example\",\n+        node.text_range(),\n+        |builder| {\n+            builder.insert(\n+                next_token.text_range().start(),\n+                documentation_from_lines(lines, indent_level),\n+            );\n+        },\n+    )\n+}\n+\n+fn make_example_for_fn(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<String> {\n+    if !is_public(ast_func, ctx)? {\n+        // Doctests for private items can't actually name the item, so they're pretty useless.\n+        return None;\n+    }\n+\n+    if is_in_trait_def(ast_func, ctx) {\n+        // This is not yet implemented.\n+        return None;\n+    }\n+\n+    let mut example = String::new();\n+\n+    let is_unsafe = ast_func.unsafe_token().is_some();\n+    let param_list = ast_func.param_list()?;\n+    let ref_mut_params = ref_mut_params(&param_list);\n+    let self_name = self_name(ast_func);\n+\n+    format_to!(example, \"use {};\\n\\n\", build_path(ast_func, ctx)?);\n+    if let Some(self_name) = &self_name {\n+        if let Some(mtbl) = is_ref_mut_self(ast_func) {\n+            let mtbl = if mtbl == true { \" mut\" } else { \"\" };\n+            format_to!(example, \"let{} {} = ;\\n\", mtbl, self_name);\n+        }\n+    }\n+    for param_name in &ref_mut_params {\n+        format_to!(example, \"let mut {} = ;\\n\", param_name);\n+    }\n+    // Call the function, check result\n+    let function_call = function_call(ast_func, &param_list, self_name.as_deref(), is_unsafe)?;\n+    if returns_a_value(ast_func, ctx) {\n+        if count_parameters(&param_list) < 3 {\n+            format_to!(example, \"assert_eq!({}, );\\n\", function_call);\n+        } else {\n+            format_to!(example, \"let result = {};\\n\", function_call);\n+            example.push_str(\"assert_eq!(result, );\\n\");\n+        }\n+    } else {\n+        format_to!(example, \"{};\\n\", function_call);\n+    }\n+    // Check the mutated values\n+    if is_ref_mut_self(ast_func) == Some(true) {\n+        format_to!(example, \"assert_eq!({}, );\", self_name?);\n+    }\n+    for param_name in &ref_mut_params {\n+        format_to!(example, \"assert_eq!({}, );\", param_name);\n+    }\n+    Some(example)\n+}\n+\n fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<String> {\n     let hir_func = ctx.sema.to_def(ast_func)?;\n     let container = hir_func.as_assoc_item(ctx.db())?.container(ctx.db());\n@@ -103,7 +201,10 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Strin\n                 if name.starts_with(\"as_\") || name.starts_with(\"to_\") || name == \"get\" {\n                     return None;\n                 }\n-                let what = name.trim_end_matches(\"_mut\").replace('_', \" \");\n+                let mut what = name.trim_end_matches(\"_mut\").replace('_', \" \");\n+                if what == \"len\" {\n+                    what = \"length\".into()\n+                };\n                 let reference = if ret_ty.is_mutable_reference() {\n                     \" a mutable reference to\"\n                 } else if ret_ty.is_reference() {\n@@ -121,7 +222,10 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Strin\n                 return None;\n             }\n \n-            let what = name.trim_start_matches(\"set_\").replace('_', \" \");\n+            let mut what = name.trim_start_matches(\"set_\").replace('_', \" \");\n+            if what == \"len\" {\n+                what = \"length\".into()\n+            };\n             Some(format!(\"Sets the {what}.\"))\n         };\n \n@@ -138,19 +242,6 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Strin\n     None\n }\n \n-/// Builds an `# Examples` section. An option is returned to be able to manage an error in the AST.\n-fn examples_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n-    let mut lines = string_vec_from(&[\"# Examples\", \"\", \"```\"]);\n-    if is_in_trait_def(ast_func, ctx) {\n-        lines.push(\"// Example template not implemented for trait functions\".into());\n-    } else {\n-        lines.append(&mut gen_ex_template(ast_func, ctx)?)\n-    };\n-\n-    lines.push(\"```\".into());\n-    Some(lines)\n-}\n-\n /// Builds an optional `# Panics` section\n fn panics_builder(ast_func: &ast::Fn) -> Option<Vec<String>> {\n     match can_panic(ast_func) {\n@@ -176,44 +267,6 @@ fn safety_builder(ast_func: &ast::Fn) -> Option<Vec<String>> {\n     }\n }\n \n-/// Generates an example template\n-fn gen_ex_template(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n-    let mut lines = Vec::new();\n-    let is_unsafe = ast_func.unsafe_token().is_some();\n-    let param_list = ast_func.param_list()?;\n-    let ref_mut_params = ref_mut_params(&param_list);\n-    let self_name: Option<String> = self_name(ast_func);\n-\n-    lines.push(format!(\"use {};\", build_path(ast_func, ctx)?));\n-    lines.push(\"\".into());\n-    if let Some(self_definition) = self_definition(ast_func, self_name.as_deref()) {\n-        lines.push(self_definition);\n-    }\n-    for param_name in &ref_mut_params {\n-        lines.push(format!(\"let mut {} = ;\", param_name))\n-    }\n-    // Call the function, check result\n-    let function_call = function_call(ast_func, &param_list, self_name.as_deref(), is_unsafe)?;\n-    if returns_a_value(ast_func, ctx) {\n-        if count_parameters(&param_list) < 3 {\n-            lines.push(format!(\"assert_eq!({}, );\", function_call));\n-        } else {\n-            lines.push(format!(\"let result = {};\", function_call));\n-            lines.push(\"assert_eq!(result, );\".into());\n-        }\n-    } else {\n-        lines.push(format!(\"{};\", function_call));\n-    }\n-    // Check the mutated values\n-    if is_ref_mut_self(ast_func) == Some(true) {\n-        lines.push(format!(\"assert_eq!({}, );\", self_name?));\n-    }\n-    for param_name in &ref_mut_params {\n-        lines.push(format!(\"assert_eq!({}, );\", param_name));\n-    }\n-    Some(lines)\n-}\n-\n /// Checks if the function is public / exported\n fn is_public(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<bool> {\n     let hir_func = ctx.sema.to_def(ast_func)?;\n@@ -319,15 +372,6 @@ fn is_ref_mut_self(ast_func: &ast::Fn) -> Option<bool> {\n     Some(self_param.mut_token().is_some() && self_param.amp_token().is_some())\n }\n \n-/// Helper function to define an variable to be the `self` argument\n-fn self_definition(ast_func: &ast::Fn, self_name: Option<&str>) -> Option<String> {\n-    let definition = match is_ref_mut_self(ast_func)? {\n-        true => format!(\"let mut {} = ;\", self_name?),\n-        false => format!(\"let {} = ;\", self_name?),\n-    };\n-    Some(definition)\n-}\n-\n /// Helper function to determine if a parameter is `&mut`\n fn is_a_ref_mut_param(param: &ast::Param) -> bool {\n     match param.ty() {\n@@ -476,129 +520,118 @@ impl MyTrait for MyStruct {\n     }\n \n     #[test]\n-    fn not_applicable_if_function_is_private() {\n-        check_assist_not_applicable(generate_documentation_template, r#\"fn priv$0ate() {}\"#);\n-    }\n-\n-    #[test]\n-    fn not_applicable_if_function_is_pub_crate() {\n-        check_assist_not_applicable(\n-            generate_documentation_template,\n-            r#\"pub(crate) fn pri$0vate() {}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn not_applicable_if_function_is_in_private_mod() {\n+    fn not_applicable_if_function_already_documented() {\n         check_assist_not_applicable(\n             generate_documentation_template,\n             r#\"\n-mod PrivateModule {\n-    pub fn pri$0vate() {}\n-}\"#,\n+/// Some documentation here\n+pub fn $0documented_function() {}\n+\"#,\n         );\n     }\n \n     #[test]\n-    fn not_applicable_if_function_is_in_pub_crate_mod() {\n-        check_assist_not_applicable(\n+    fn supports_noop_function() {\n+        check_assist(\n             generate_documentation_template,\n             r#\"\n-pub(crate) mod PrivateModule {\n-    pub fn pr$0ivate() {}\n-}\"#,\n+pub fn no$0op() {}\n+\"#,\n+            r#\"\n+/// .\n+pub fn noop() {}\n+\"#,\n         );\n     }\n \n     #[test]\n-    fn not_applicable_if_function_is_in_non_public_mod_is_recursive() {\n-        check_assist_not_applicable(\n+    fn is_applicable_if_function_is_private() {\n+        check_assist(\n             generate_documentation_template,\n             r#\"\n-mod ParentPrivateModule {\n-    pub mod PrivateModule {\n-        pub fn pr$0ivate() {}\n-    }\n-}\"#,\n+fn priv$0ate() {}\n+\"#,\n+            r#\"\n+/// .\n+fn private() {}\n+\"#,\n         );\n     }\n \n     #[test]\n-    fn not_applicable_if_function_already_documented() {\n+    fn no_doc_example_for_private_fn() {\n         check_assist_not_applicable(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n-/// Some documentation here\n-pub fn $0documented_function() {}\n+///$0\n+fn private() {}\n \"#,\n         );\n     }\n \n     #[test]\n-    fn supports_noop_function() {\n+    fn supports_a_parameter() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n-pub fn no$0op() {}\n+/// $0.\n+pub fn noop_with_param(_a: i32) {}\n \"#,\n             r#\"\n /// .\n ///\n /// # Examples\n ///\n /// ```\n-/// use test::noop;\n+/// use test::noop_with_param;\n ///\n-/// noop();\n+/// noop_with_param(_a);\n /// ```\n-pub fn noop() {}\n+pub fn noop_with_param(_a: i32) {}\n \"#,\n         );\n     }\n \n     #[test]\n-    fn supports_a_parameter() {\n+    fn detects_unsafe_function() {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-pub fn no$0op_with_param(_a: i32) {}\n+pub unsafe fn no$0op_unsafe() {}\n \"#,\n             r#\"\n /// .\n ///\n-/// # Examples\n-///\n-/// ```\n-/// use test::noop_with_param;\n+/// # Safety\n ///\n-/// noop_with_param(_a);\n-/// ```\n-pub fn noop_with_param(_a: i32) {}\n+/// .\n+pub unsafe fn noop_unsafe() {}\n \"#,\n         );\n-    }\n-\n-    #[test]\n-    fn detects_unsafe_function() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n-pub unsafe fn no$0op_unsafe() {}\n+/// .\n+///\n+/// # Safety$0\n+///\n+/// .\n+pub unsafe fn noop_unsafe() {}\n \"#,\n             r#\"\n /// .\n ///\n+/// # Safety\n+///\n+/// .\n+///\n /// # Examples\n ///\n /// ```\n /// use test::noop_unsafe;\n ///\n /// unsafe { noop_unsafe() };\n /// ```\n-///\n-/// # Safety\n-///\n-/// .\n pub unsafe fn noop_unsafe() {}\n \"#,\n         );\n@@ -618,14 +651,6 @@ pub fn panic$0s_if(a: bool) {\n             r#\"\n /// .\n ///\n-/// # Examples\n-///\n-/// ```\n-/// use test::panics_if;\n-///\n-/// panics_if(a);\n-/// ```\n-///\n /// # Panics\n ///\n /// Panics if .\n@@ -650,14 +675,6 @@ pub fn $0panics_if_not(a: bool) {\n             r#\"\n /// .\n ///\n-/// # Examples\n-///\n-/// ```\n-/// use test::panics_if_not;\n-///\n-/// panics_if_not(a);\n-/// ```\n-///\n /// # Panics\n ///\n /// Panics if .\n@@ -680,14 +697,6 @@ pub fn $0panics_if_none(a: Option<()>) {\n             r#\"\n /// .\n ///\n-/// # Examples\n-///\n-/// ```\n-/// use test::panics_if_none;\n-///\n-/// panics_if_none(a);\n-/// ```\n-///\n /// # Panics\n ///\n /// Panics if .\n@@ -710,14 +719,6 @@ pub fn $0panics_if_none2(a: Option<()>) {\n             r#\"\n /// .\n ///\n-/// # Examples\n-///\n-/// ```\n-/// use test::panics_if_none2;\n-///\n-/// panics_if_none2(a);\n-/// ```\n-///\n /// # Panics\n ///\n /// Panics if .\n@@ -731,14 +732,15 @@ pub fn panics_if_none2(a: Option<()>) {\n     #[test]\n     fn checks_output_in_example() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n+///$0\n pub fn returns_a_value$0() -> i32 {\n     0\n }\n \"#,\n             r#\"\n-/// .\n+///\n ///\n /// # Examples\n ///\n@@ -766,14 +768,6 @@ pub fn returns_a_result$0() -> Result<i32, std::io::Error> {\n             r#\"\n /// .\n ///\n-/// # Examples\n-///\n-/// ```\n-/// use test::returns_a_result;\n-///\n-/// assert_eq!(returns_a_result(), );\n-/// ```\n-///\n /// # Errors\n ///\n /// This function will return an error if .\n@@ -787,14 +781,15 @@ pub fn returns_a_result() -> Result<i32, std::io::Error> {\n     #[test]\n     fn checks_ref_mut_in_example() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n+///$0\n pub fn modifies_a_value$0(a: &mut i32) {\n     *a = 0;\n }\n \"#,\n             r#\"\n-/// .\n+///\n ///\n /// # Examples\n ///\n@@ -815,14 +810,15 @@ pub fn modifies_a_value(a: &mut i32) {\n     #[test]\n     fn stores_result_if_at_least_3_params() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n+///$0\n pub fn sum3$0(a: i32, b: i32, c: i32) -> i32 {\n     a + b + c\n }\n \"#,\n             r#\"\n-/// .\n+///\n ///\n /// # Examples\n ///\n@@ -842,18 +838,19 @@ pub fn sum3(a: i32, b: i32, c: i32) -> i32 {\n     #[test]\n     fn supports_fn_in_mods() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n pub mod a {\n     pub mod b {\n-        pub fn no$0op() {}\n+        ///$0\n+        pub fn noop() {}\n     }\n }\n \"#,\n             r#\"\n pub mod a {\n     pub mod b {\n-        /// .\n+        ///\n         ///\n         /// # Examples\n         ///\n@@ -872,17 +869,18 @@ pub mod a {\n     #[test]\n     fn supports_fn_in_impl() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n pub struct MyStruct;\n impl MyStruct {\n-    pub fn no$0op() {}\n+    ///$0\n+    pub fn noop() {}\n }\n \"#,\n             r#\"\n pub struct MyStruct;\n impl MyStruct {\n-    /// .\n+    ///\n     ///\n     /// # Examples\n     ///\n@@ -897,30 +895,6 @@ impl MyStruct {\n         );\n     }\n \n-    #[test]\n-    fn supports_fn_in_trait() {\n-        check_assist(\n-            generate_documentation_template,\n-            r#\"\n-pub trait MyTrait {\n-    fn fun$0ction_trait();\n-}\n-\"#,\n-            r#\"\n-pub trait MyTrait {\n-    /// .\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// // Example template not implemented for trait functions\n-    /// ```\n-    fn function_trait();\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn supports_unsafe_fn_in_trait() {\n         check_assist(\n@@ -934,12 +908,6 @@ pub trait MyTrait {\n pub trait MyTrait {\n     /// .\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// // Example template not implemented for trait functions\n-    /// ```\n-    ///\n     /// # Safety\n     ///\n     /// .\n@@ -964,12 +932,6 @@ pub trait MyTrait {\n pub trait MyTrait {\n     /// .\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// // Example template not implemented for trait functions\n-    /// ```\n-    ///\n     /// # Panics\n     ///\n     /// Panics if .\n@@ -994,12 +956,6 @@ pub trait MyTrait {\n pub trait MyTrait {\n     /// .\n     ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// // Example template not implemented for trait functions\n-    /// ```\n-    ///\n     /// # Errors\n     ///\n     /// This function will return an error if .\n@@ -1031,14 +987,6 @@ pub struct MyGenericStruct<T> {\n }\n impl<T> MyGenericStruct<T> {\n     /// Creates a new [`MyGenericStruct<T>`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::MyGenericStruct;\n-    ///\n-    /// assert_eq!(MyGenericStruct::new(x), );\n-    /// ```\n     pub fn new(x: T) -> MyGenericStruct<T> {\n         MyGenericStruct { x }\n     }\n@@ -1069,14 +1017,6 @@ pub struct MyGenericStruct<'a, T> {\n }\n impl<'a, T> MyGenericStruct<'a, T> {\n     /// Creates a new [`MyGenericStruct<T>`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::MyGenericStruct;\n-    ///\n-    /// assert_eq!(MyGenericStruct::new(x), );\n-    /// ```\n     pub fn new(x: &'a T) -> Self {\n         MyGenericStruct { x }\n     }\n@@ -1109,14 +1049,6 @@ pub struct MyGenericStruct<'a, 'b, T> {\n }\n impl<'a, 'b, T> MyGenericStruct<'a, 'b, T> {\n     /// Creates a new [`MyGenericStruct<T>`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::MyGenericStruct;\n-    ///\n-    /// assert_eq!(MyGenericStruct::new(x, y), );\n-    /// ```\n     pub fn new(x: &'a T, y: &'b T) -> Self {\n         MyGenericStruct { x, y }\n     }\n@@ -1149,14 +1081,6 @@ pub struct MyGenericStruct<'a, 'b> {\n }\n impl<'a, 'b> MyGenericStruct<'a, 'b> {\n     /// Creates a new [`MyGenericStruct`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::MyGenericStruct;\n-    ///\n-    /// assert_eq!(MyGenericStruct::new(x, y), );\n-    /// ```\n     pub fn new(x: &'a usize, y: &'b usize) -> Self {\n         MyGenericStruct { x, y }\n     }\n@@ -1187,14 +1111,6 @@ pub struct MyGenericStruct2<T> {\n }\n impl<T> MyGenericStruct2<T> {\n     /// Creates a new [`MyGenericStruct2<T>`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::MyGenericStruct2;\n-    ///\n-    /// assert_eq!(MyGenericStruct2::new(x), );\n-    /// ```\n     pub fn new(x: T) -> Self {\n         MyGenericStruct2 { x }\n     }\n@@ -1206,15 +1122,16 @@ impl<T> MyGenericStruct2<T> {\n     #[test]\n     fn supports_method_call() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n impl<T> MyGenericStruct<T> {\n-    pub fn co$0nsume(self) {}\n+    ///$0\n+    pub fn consume(self) {}\n }\n \"#,\n             r#\"\n impl<T> MyGenericStruct<T> {\n-    /// .\n+    ///\n     ///\n     /// # Examples\n     ///\n@@ -1233,17 +1150,18 @@ impl<T> MyGenericStruct<T> {\n     #[test]\n     fn checks_modified_self_param() {\n         check_assist(\n-            generate_documentation_template,\n+            generate_doc_example,\n             r#\"\n impl<T> MyGenericStruct<T> {\n-    pub fn modi$0fy(&mut self, new_value: T) {\n+    ///$0\n+    pub fn modify(&mut self, new_value: T) {\n         self.x = new_value;\n     }\n }\n \"#,\n             r#\"\n impl<T> MyGenericStruct<T> {\n-    /// .\n+    ///\n     ///\n     /// # Examples\n     ///\n@@ -1276,15 +1194,6 @@ impl S {\n pub struct S;\n impl S {\n     /// Returns the speed.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::S;\n-    ///\n-    /// let s = ;\n-    /// assert_eq!(s.speed(), );\n-    /// ```\n     pub fn speed(&self) -> f32 { 0.0 }\n }\n \"#,\n@@ -1301,15 +1210,6 @@ impl S {\n pub struct S;\n impl S {\n     /// Returns a reference to the data.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::S;\n-    ///\n-    /// let s = ;\n-    /// assert_eq!(s.data(), );\n-    /// ```\n     pub fn data(&self) -> &[u8] { &[] }\n }\n \"#,\n@@ -1326,16 +1226,6 @@ impl S {\n pub struct S;\n impl S {\n     /// Returns a mutable reference to the data.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::S;\n-    ///\n-    /// let mut s = ;\n-    /// assert_eq!(s.data(), );\n-    /// assert_eq!(s, );\n-    /// ```\n     pub fn data(&mut self) -> &mut [u8] { &mut [] }\n }\n \"#,\n@@ -1352,16 +1242,6 @@ impl S {\n pub struct S;\n impl S {\n     /// Returns a mutable reference to the data.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::S;\n-    ///\n-    /// let mut s = ;\n-    /// assert_eq!(s.data_mut(), );\n-    /// assert_eq!(s, );\n-    /// ```\n     pub fn data_mut(&mut self) -> &mut [u8] { &mut [] }\n }\n \"#,\n@@ -1382,15 +1262,6 @@ impl S {\n pub struct S;\n impl S {\n     /// .\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::S;\n-    ///\n-    /// let s = ;\n-    /// assert_eq!(s.as_bytes(), );\n-    /// ```\n     pub fn as_bytes(&self) -> &[u8] { &[] }\n }\n \"#,\n@@ -1411,16 +1282,6 @@ impl S {\n pub struct S;\n impl S {\n     /// Sets the data.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::S;\n-    ///\n-    /// let mut s = ;\n-    /// s.set_data(data);\n-    /// assert_eq!(s, );\n-    /// ```\n     pub fn set_data(&mut self, data: Vec<u8>) {}\n }\n \"#,\n@@ -1437,16 +1298,6 @@ impl S {\n pub struct S;\n impl S {\n     /// Sets the domain name.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use test::S;\n-    ///\n-    /// let mut s = ;\n-    /// s.set_domain_name(name);\n-    /// assert_eq!(s, );\n-    /// ```\n     pub fn set_domain_name(&mut self, name: String) {}\n }\n \"#,"}, {"sha": "f78dbf2ab836265f2ac55387c2485a838840e5e1", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93b62dbe852837e37f8fe43c76a1105d2b221e6a/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b62dbe852837e37f8fe43c76a1105d2b221e6a/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=93b62dbe852837e37f8fe43c76a1105d2b221e6a", "patch": "@@ -223,6 +223,7 @@ mod handlers {\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n             generate_documentation_template::generate_documentation_template,\n+            generate_documentation_template::generate_doc_example,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,\n             generate_enum_projection_method::generate_enum_try_into_method,"}, {"sha": "0da4197afe814398a057d13ceb913faff19eccde", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/93b62dbe852837e37f8fe43c76a1105d2b221e6a/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b62dbe852837e37f8fe43c76a1105d2b221e6a/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=93b62dbe852837e37f8fe43c76a1105d2b221e6a", "patch": "@@ -863,30 +863,55 @@ impl core::ops::Deref for B {\n }\n \n #[test]\n-fn doctest_generate_documentation_template() {\n+fn doctest_generate_doc_example() {\n     check_doc_test(\n-        \"generate_documentation_template\",\n+        \"generate_doc_example\",\n         r#####\"\n-pub fn my_$0func(a: i32, b: i32) -> Result<(), std::io::Error> {\n-    unimplemented!()\n-}\n+/// Adds two numbers.$0\n+pub fn add(a: i32, b: i32) -> i32 { a + b }\n \"#####,\n         r#####\"\n-/// .\n+/// Adds two numbers.\n ///\n /// # Examples\n ///\n /// ```\n-/// use test::my_func;\n+/// use test::add;\n ///\n-/// assert_eq!(my_func(a, b), );\n+/// assert_eq!(add(a, b), );\n /// ```\n-///\n-/// # Errors\n-///\n-/// This function will return an error if .\n-pub fn my_func(a: i32, b: i32) -> Result<(), std::io::Error> {\n-    unimplemented!()\n+pub fn add(a: i32, b: i32) -> i32 { a + b }\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_generate_documentation_template() {\n+    check_doc_test(\n+        \"generate_documentation_template\",\n+        r#####\"\n+pub struct S;\n+impl S {\n+    pub unsafe fn set_len$0(&mut self, len: usize) -> Result<(), std::io::Error> {\n+        /* ... */\n+    }\n+}\n+\"#####,\n+        r#####\"\n+pub struct S;\n+impl S {\n+    /// Sets the length.\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an error if .\n+    ///\n+    /// # Safety\n+    ///\n+    /// .\n+    pub unsafe fn set_len(&mut self, len: usize) -> Result<(), std::io::Error> {\n+        /* ... */\n+    }\n }\n \"#####,\n     )"}, {"sha": "5bb925f62be374edd6786c9be3f573ddbdae6391", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b62dbe852837e37f8fe43c76a1105d2b221e6a/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b62dbe852837e37f8fe43c76a1105d2b221e6a/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=93b62dbe852837e37f8fe43c76a1105d2b221e6a", "patch": "@@ -494,7 +494,7 @@ fn main() {}\n     server.request::<CodeActionRequest>(\n         CodeActionParams {\n             text_document: server.doc_id(\"src/lib.rs\"),\n-            range: Range::new(Position::new(2, 4), Position::new(2, 7)),\n+            range: Range::new(Position::new(2, 8), Position::new(2, 8)),\n             context: CodeActionContext::default(),\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n@@ -578,7 +578,7 @@ fn main() {{}}\n     server.request::<CodeActionRequest>(\n         CodeActionParams {\n             text_document: server.doc_id(\"src/lib.rs\"),\n-            range: Range::new(Position::new(2, 4), Position::new(2, 7)),\n+            range: Range::new(Position::new(2, 8), Position::new(2, 8)),\n             context: CodeActionContext::default(),\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),"}]}