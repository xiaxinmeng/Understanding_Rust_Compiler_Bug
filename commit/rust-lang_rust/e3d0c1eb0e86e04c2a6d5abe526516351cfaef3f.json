{"sha": "e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZDBjMWViMGU4NmUwNGMyYTZkNWFiZTUyNjUxNjM1MWNmYWVmM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-29T00:37:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-29T00:37:57Z"}, "message": "auto merge of #6731 : thomaslee/rust/issue-6575, r=pcwalton\n\nFix for #6575. In the trans phase, rustc emits code for a function parameter that goes completely unused in the event the return type of the function in question happens to be an immediate.\r\n\r\nThis patch modifies rustc & parts of rustrt to ensure that the vestigial parameter is no longer present in compiled code.", "tree": {"sha": "b0971e4ba3c1a990cdb9f9ee02b3d414b2fd7729", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0971e4ba3c1a990cdb9f9ee02b3d414b2fd7729"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "html_url": "https://github.com/rust-lang/rust/commit/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5676056ae6dd3a10d2c7323375ace3ca2fe1c308", "url": "https://api.github.com/repos/rust-lang/rust/commits/5676056ae6dd3a10d2c7323375ace3ca2fe1c308", "html_url": "https://github.com/rust-lang/rust/commit/5676056ae6dd3a10d2c7323375ace3ca2fe1c308"}, {"sha": "b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "html_url": "https://github.com/rust-lang/rust/commit/b7f71e1ee661ea0d5d9731fcf4779a452bbee486"}], "stats": {"total": 151, "additions": 100, "deletions": 51}, "files": [{"sha": "f0250d5a063d5aadcf13fb69153937eca4149228", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -1612,10 +1612,11 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n         }\n     };\n     let is_immediate = ty::type_is_immediate(substd_output_type);\n-\n     let fcx = @mut fn_ctxt_ {\n           llfn: llfndecl,\n-          llenv: unsafe { llvm::LLVMGetParam(llfndecl, 1u as c_uint) },\n+          llenv: unsafe {\n+              llvm::LLVMGetUndef(T_ptr(T_i8()))\n+          },\n           llretptr: None,\n           llstaticallocas: llbbs.sa,\n           llloadenv: None,\n@@ -1634,7 +1635,9 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n           path: path,\n           ccx: @ccx\n     };\n-\n+    fcx.llenv = unsafe {\n+          llvm::LLVMGetParam(llfndecl, fcx.env_arg_pos() as c_uint)\n+    };\n     fcx.llretptr = Some(make_return_pointer(fcx, substd_output_type));\n     fcx\n }\n@@ -1690,7 +1693,7 @@ pub fn create_llargs_for_fn_args(cx: fn_ctxt,\n     // llvm::LLVMGetParam for each argument.\n     vec::from_fn(args.len(), |i| {\n         unsafe {\n-            let arg_n = first_real_arg + i;\n+            let arg_n = cx.arg_pos(i);\n             let arg = &args[i];\n             let llarg = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n \n@@ -2293,19 +2296,26 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n \n     fn create_main(ccx: @CrateContext, main_llfn: ValueRef) -> ValueRef {\n         let nt = ty::mk_nil();\n+\n         let llfty = type_of_fn(ccx, [], nt);\n         let llfdecl = decl_fn(ccx.llmod, \"_rust_main\",\n                               lib::llvm::CCallConv, llfty);\n \n         let fcx = new_fn_ctxt(ccx, ~[], llfdecl, nt, None);\n \n+        // the args vector built in create_entry_fn will need\n+        // be updated if this assertion starts to fail.\n+        assert!(fcx.has_immediate_return_value);\n+\n         let bcx = top_scope_block(fcx, None);\n         let lltop = bcx.llbb;\n \n         // Call main.\n-        let lloutputarg = C_null(T_ptr(T_i8()));\n-        let llenvarg = unsafe { llvm::LLVMGetParam(llfdecl, 1 as c_uint) };\n-        let args = ~[lloutputarg, llenvarg];\n+        let llenvarg = unsafe {\n+            let env_arg = fcx.env_arg_pos();\n+            llvm::LLVMGetParam(llfdecl, env_arg as c_uint)\n+        };\n+        let args = ~[llenvarg];\n         let llresult = Call(bcx, main_llfn, args);\n         Store(bcx, llresult, fcx.llretptr.get());\n \n@@ -2345,8 +2355,6 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n                 trans_external_path(ccx, start_def_id, start_fn_type);\n             }\n \n-            let retptr = llvm::LLVMBuildAlloca(bld, T_i8(), noname());\n-\n             let crate_map = ccx.crate_map;\n             let opaque_crate_map = llvm::LLVMBuildPointerCast(bld,\n                                                               crate_map,\n@@ -2368,7 +2376,6 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n                             bld, rust_main, T_ptr(T_i8()), noname());\n \n                     ~[\n-                        retptr,\n                         C_null(T_opaque_box_ptr(ccx)),\n                         opaque_rust_main,\n                         llvm::LLVMGetParam(llfn, 0),\n@@ -2381,7 +2388,6 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n                 debug!(\"using user-defined start fn\");\n                 let args = {\n                     ~[\n-                        retptr,\n                         C_null(T_opaque_box_ptr(ccx)),\n                         llvm::LLVMGetParam(llfn, 0 as c_uint),\n                         llvm::LLVMGetParam(llfn, 1 as c_uint),"}, {"sha": "b710f33d6abb238139addf5ca345d00a680f7beb", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -510,11 +510,7 @@ pub fn trans_call_inner(in_cx: block,\n \n         let mut llargs = ~[];\n \n-        if ty::type_is_immediate(ret_ty) {\n-            unsafe {\n-                llargs.push(llvm::LLVMGetUndef(T_ptr(T_i8())));\n-            }\n-        } else {\n+        if !ty::type_is_immediate(ret_ty) {\n             llargs.push(llretslot);\n         }\n "}, {"sha": "ad5dadaf8701d994d0fdb629a4bd03332e522ad8", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -351,6 +351,30 @@ pub struct fn_ctxt_ {\n     ccx: @@CrateContext\n }\n \n+pub impl fn_ctxt_ {\n+    pub fn arg_pos(&self, arg: uint) -> uint {\n+        if self.has_immediate_return_value {\n+            arg + 1u\n+        } else {\n+            arg + 2u\n+        }\n+    }\n+\n+    pub fn out_arg_pos(&self) -> uint {\n+        assert!(self.has_immediate_return_value);\n+        0u\n+    }\n+\n+    pub fn env_arg_pos(&self) -> uint {\n+        if !self.has_immediate_return_value {\n+            1u\n+        } else {\n+            0u\n+        }\n+    }\n+\n+}\n+\n pub type fn_ctxt = @mut fn_ctxt_;\n \n pub fn warn_not_to_commit(ccx: @CrateContext, msg: &str) {\n@@ -660,9 +684,6 @@ pub fn mk_block(llbb: BasicBlockRef, parent: Option<block>, kind: block_kind,\n     @mut block_(llbb, parent, kind, is_lpad, node_info, fcx)\n }\n \n-// First two args are retptr, env\n-pub static first_real_arg: uint = 2u;\n-\n pub struct Result {\n     bcx: block,\n     val: ValueRef\n@@ -962,8 +983,7 @@ pub fn T_tydesc(targ_cfg: @session::config) -> TypeRef {\n     let tydescpp = T_ptr(T_ptr(tydesc));\n     let pvoid = T_ptr(T_i8());\n     let glue_fn_ty =\n-        T_ptr(T_fn([T_ptr(T_nil()), T_ptr(T_nil()), tydescpp,\n-                    pvoid], T_void()));\n+        T_ptr(T_fn([T_ptr(T_nil()), tydescpp, pvoid], T_void()));\n \n     let int_type = T_int(targ_cfg);\n     let elems ="}, {"sha": "63356a135d059e328310b6d61f0d926d46dbf487", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -153,6 +153,7 @@ fn build_shim_fn_(ccx: @CrateContext,\n     let fcx = new_fn_ctxt(ccx, ~[], llshimfn, tys.fn_sig.output, None);\n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n+\n     let llargbundle = get_param(llshimfn, 0u);\n     let llargvals = arg_builder(bcx, tys, llargbundle);\n \n@@ -437,11 +438,11 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n         let llbasefn = base_fn(ccx, *link_name(ccx, item), tys, cc);\n         let ty = ty::lookup_item_type(ccx.tcx,\n                                       ast_util::local_def(item.id)).ty;\n+        let ret_ty = ty::ty_fn_ret(ty);\n         let args = vec::from_fn(ty::ty_fn_args(ty).len(), |i| {\n-            get_param(decl, i + first_real_arg)\n+            get_param(decl, fcx.arg_pos(i))\n         });\n         let retval = Call(bcx, llbasefn, args);\n-        let ret_ty = ty::ty_fn_ret(ty);\n         if !ty::type_is_nil(ret_ty) && !ty::type_is_bot(ret_ty) {\n             Store(bcx, retval, fcx.llretptr.get());\n         }\n@@ -465,11 +466,11 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n         set_fixed_stack_segment(fcx.llfn);\n         let ty = ty::lookup_item_type(ccx.tcx,\n                                       ast_util::local_def(item.id)).ty;\n+        let ret_ty = ty::ty_fn_ret(ty);\n         let args = vec::from_fn(ty::ty_fn_args(ty).len(), |i| {\n-            get_param(decl, i + first_real_arg)\n+            get_param(decl, fcx.arg_pos(i))\n         });\n         let retval = Call(bcx, llbasefn, args);\n-        let ret_ty = ty::ty_fn_ret(ty);\n         if !ty::type_is_nil(ret_ty) && !ty::type_is_bot(ret_ty) {\n             Store(bcx, retval, fcx.llretptr.get());\n         }\n@@ -512,9 +513,9 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n             let _icx = bcx.insn_ctxt(\"foreign::wrap::build_args\");\n             let ccx = bcx.ccx();\n             let n = tys.llsig.llarg_tys.len();\n-            let implicit_args = first_real_arg; // return + env\n             for uint::range(0, n) |i| {\n-                let mut llargval = get_param(llwrapfn, i + implicit_args);\n+                let arg_i = bcx.fcx.arg_pos(i);\n+                let mut llargval = get_param(llwrapfn, arg_i);\n \n                 // In some cases, Rust will pass a pointer which the\n                 // native C type doesn't have.  In that case, just\n@@ -568,6 +569,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n \n     let mut bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n+    let first_real_arg = fcx.arg_pos(0u);\n     match *ccx.sess.str_of(item.ident) {\n         ~\"atomic_cxchg\" => {\n             let old = AtomicCmpXchg(bcx,\n@@ -1269,8 +1271,6 @@ pub fn trans_foreign_fn(ccx: @CrateContext,\n             if !ty::type_is_immediate(tys.fn_sig.output) {\n                 let llretptr = load_inbounds(bcx, llargbundle, [0u, n]);\n                 llargvals.push(llretptr);\n-            } else {\n-                llargvals.push(C_null(T_ptr(T_i8())));\n             }\n \n             let llenvptr = C_null(T_opaque_box_ptr(bcx.ccx()));"}, {"sha": "405e5e36de799ba4d04537a7d94912ef9a6ce795", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -19,6 +19,7 @@ use back::link::*;\n use driver::session;\n use lib;\n use lib::llvm::{llvm, ValueRef, TypeRef, True};\n+use lib::llvm::type_to_str;\n use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::callee;\n@@ -381,8 +382,9 @@ pub fn call_tydesc_glue_full(bcx: block,\n         }\n     };\n \n-    Call(bcx, llfn, [C_null(T_ptr(T_nil())), C_null(T_ptr(T_nil())),\n-                     C_null(T_ptr(T_ptr(bcx.ccx().tydesc_type))), llrawptr]);\n+    Call(bcx, llfn, [C_null(T_ptr(T_nil())),\n+                        C_null(T_ptr(T_ptr(bcx.ccx().tydesc_type))),\n+                        llrawptr]);\n }\n \n // See [Note-arg-mode]\n@@ -483,17 +485,16 @@ pub fn trans_struct_drop(bcx: block,\n         };\n \n         // Class dtors have no explicit args, so the params should\n-        // just consist of the output pointer and the environment\n-        // (self)\n-        assert_eq!(params.len(), 2);\n+        // just consist of the environment (self)\n+        assert_eq!(params.len(), 1);\n \n         // Take a reference to the class (because it's using the Drop trait),\n         // do so now.\n         let llval = alloca(bcx, val_ty(v0));\n         Store(bcx, v0, llval);\n \n-        let self_arg = PointerCast(bcx, llval, params[1]);\n-        let args = ~[C_null(T_ptr(T_i8())), self_arg];\n+        let self_arg = PointerCast(bcx, llval, params[0]);\n+        let args = ~[self_arg];\n \n         Call(bcx, dtor_addr, args);\n \n@@ -739,7 +740,8 @@ pub fn make_generic_glue_inner(ccx: @CrateContext,\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n-    let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, 3u as c_uint) };\n+    let rawptr0_arg = fcx.arg_pos(1u);\n+    let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, rawptr0_arg as c_uint) };\n     helper(bcx, llrawptr0, t);\n     finish_fn(fcx, lltop);\n     return llfn;"}, {"sha": "839c9a96b78e87081687255bee71e2ee24dca571", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -286,14 +286,19 @@ pub impl Reflector {\n \n                 let llfty = type_of_fn(ccx, [opaqueptrty], ty::mk_int());\n                 let llfdecl = decl_internal_cdecl_fn(ccx.llmod, sym, llfty);\n-                let arg = unsafe {\n-                    llvm::LLVMGetParam(llfdecl, first_real_arg as c_uint)\n-                };\n                 let fcx = new_fn_ctxt(ccx,\n                                       ~[],\n                                       llfdecl,\n                                       ty::mk_uint(),\n                                       None);\n+                let arg = unsafe {\n+                    //\n+                    // we know the return type of llfdecl is an int here, so\n+                    // no need for a special check to see if the return type\n+                    // is immediate.\n+                    //\n+                    llvm::LLVMGetParam(llfdecl, fcx.arg_pos(0u) as c_uint)\n+                };\n                 let bcx = top_scope_block(fcx, None);\n                 let arg = BitCast(bcx, arg, llptrty);\n                 let ret = adt::trans_get_discr(bcx, repr, arg);"}, {"sha": "e3c424f8e7ecfe0b0f21b82d135f86e7b5419527", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -46,9 +46,6 @@ pub fn type_of_fn(cx: @CrateContext, inputs: &[ty::t], output: ty::t)\n         let lloutputtype = type_of(cx, output);\n         if !output_is_immediate {\n             atys.push(T_ptr(lloutputtype));\n-        } else {\n-            // FIXME #6575: Eliminate this.\n-            atys.push(T_ptr(T_i8()));\n         }\n \n         // Arg 1: Environment\n@@ -334,9 +331,7 @@ pub fn llvm_type_name(cx: @CrateContext,\n }\n \n pub fn type_of_dtor(ccx: @CrateContext, self_ty: ty::t) -> TypeRef {\n-    T_fn([T_ptr(T_i8()),                   // output pointer\n-          T_ptr(type_of(ccx, self_ty))],   // self arg\n-         T_nil())\n+    T_fn([T_ptr(type_of(ccx, self_ty))] /* self */, T_nil())\n }\n \n pub fn type_of_rooted(ccx: @CrateContext, t: ty::t) -> TypeRef {\n@@ -349,5 +344,5 @@ pub fn type_of_rooted(ccx: @CrateContext, t: ty::t) -> TypeRef {\n pub fn type_of_glue_fn(ccx: @CrateContext, t: ty::t) -> TypeRef {\n     let tydescpp = T_ptr(T_ptr(ccx.tydesc_type));\n     let llty = T_ptr(type_of(ccx, t));\n-    return T_fn([T_ptr(T_nil()), T_ptr(T_nil()), tydescpp, llty], T_nil());\n+    return T_fn([T_ptr(T_nil()), tydescpp, llty], T_nil());\n }"}, {"sha": "5e7357c9b7b25dfc93add7c489abc488ebad1cf7", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -731,10 +731,17 @@ rust_task_deref(rust_task *task) {\n // Must call on rust stack.\n extern \"C\" CDECL void\n rust_call_tydesc_glue(void *root, size_t *tydesc, size_t glue_index) {\n+#ifdef _RUST_STAGE0\n     void (*glue_fn)(void *, void *, void *, void *) =\n         (void (*)(void *, void *, void *, void *))tydesc[glue_index];\n     if (glue_fn)\n         glue_fn(0, 0, 0, root);\n+#else\n+    void (*glue_fn)(void *, void *, void *) =\n+        (void (*)(void *, void *, void *))tydesc[glue_index];\n+    if (glue_fn)\n+        glue_fn(0, 0, root);\n+#endif\n }\n \n // Don't run on the Rust stack!\n@@ -754,7 +761,11 @@ class raw_thread: public rust_thread {\n \n     virtual void run() {\n         record_sp_limit(0);\n+#ifdef _RUST_STAGE0\n         fn.f(NULL, fn.env, NULL);\n+#else\n+        fn.f(fn.env, NULL);\n+#endif\n     }\n };\n "}, {"sha": "b5ecb1661755ae78248b673fba0aaf9010e556ad", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -162,9 +162,11 @@ void task_start_wrapper(spawn_args *a)\n \n     bool threw_exception = false;\n     try {\n-        // The first argument is the return pointer; as the task fn\n-        // must have void return type, we can safely pass 0.\n-        a->f(0, a->envptr, a->argptr);\n+#ifdef _RUST_STAGE0\n+        a->f(NULL, a->envptr, a->argptr);\n+#else\n+        a->f(a->envptr, a->argptr);\n+#endif\n     } catch (rust_task *ex) {\n         assert(ex == task && \"Expected this task to be thrown for unwinding\");\n         threw_exception = true;\n@@ -185,7 +187,11 @@ void task_start_wrapper(spawn_args *a)\n     if(env) {\n         // free the environment (which should be a unique closure).\n         const type_desc *td = env->td;\n+#ifdef _RUST_STAGE0\n         td->drop_glue(NULL, NULL, NULL, box_body(env));\n+#else\n+        td->drop_glue(NULL, NULL, box_body(env));\n+#endif\n         task->kernel->region()->free(env);\n     }\n "}, {"sha": "b50c08379de7f6cf3d197e8a5bd25eea1fc9ebbf", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=e3d0c1eb0e86e04c2a6d5abe526516351cfaef3f", "patch": "@@ -21,11 +21,19 @@ struct rust_opaque_box;\n // - the main function: has a NULL environment, but uses the void* arg\n // - unique closures of type fn~(): have a non-NULL environment, but\n //   no arguments (and hence the final void*) is harmless\n-typedef void (*CDECL spawn_fn)(void*, rust_opaque_box*, void *);\n+#ifdef _RUST_STAGE0\n+typedef void (*CDECL spawn_fn)(void *, rust_opaque_box*, void *);\n+#else\n+typedef void (*CDECL spawn_fn)(rust_opaque_box*, void *);\n+#endif\n \n struct type_desc;\n \n+#ifdef _RUST_STAGE0\n typedef void CDECL (glue_fn)(void *, void *, const type_desc **, void *);\n+#else\n+typedef void CDECL (glue_fn)(void *, const type_desc **, void *);\n+#endif\n \n // Corresponds to the boxed data in the @ region.  The body follows the\n // header; you can obtain a ptr via box_body() below."}]}