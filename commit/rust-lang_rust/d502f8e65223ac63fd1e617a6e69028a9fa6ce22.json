{"sha": "d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MDJmOGU2NTIyM2FjNjNmZDFlNjE3YTZlNjkwMjhhOWZhNmNlMjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-17T14:03:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-17T15:34:48Z"}, "message": "[OPT] Avoid calling target_triple for every call to codegen", "tree": {"sha": "95f42f38fc08eaba78d3ae05ec47076622e273f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95f42f38fc08eaba78d3ae05ec47076622e273f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "html_url": "https://github.com/rust-lang/rust/commit/d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad1f885002cade0044cdb6fff9de21e0a910c584", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1f885002cade0044cdb6fff9de21e0a910c584", "html_url": "https://github.com/rust-lang/rust/commit/ad1f885002cade0044cdb6fff9de21e0a910c584"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "416ed3ebe49a00afa331ee0e79f7495b514296c5", "filename": "src/abi/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -75,6 +75,7 @@ pub fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> t\n \n fn clif_sig_from_fn_sig<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    triple: &target_lexicon::Triple,\n     sig: FnSig<'tcx>,\n     is_vtable_fn: bool,\n ) -> Signature {\n@@ -89,8 +90,8 @@ fn clif_sig_from_fn_sig<'tcx>(\n         abi => abi,\n     };\n     let (call_conv, inputs, output): (CallConv, Vec<Ty>, Ty) = match abi {\n-        Abi::Rust => (crate::default_call_conv(tcx.sess), sig.inputs().to_vec(), sig.output()),\n-        Abi::C => (crate::default_call_conv(tcx.sess), sig.inputs().to_vec(), sig.output()),\n+        Abi::Rust => (CallConv::triple_default(triple), sig.inputs().to_vec(), sig.output()),\n+        Abi::C => (CallConv::triple_default(triple), sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n             assert_eq!(sig.inputs().len(), 2);\n             let extra_args = match sig.inputs().last().unwrap().kind {\n@@ -99,10 +100,10 @@ fn clif_sig_from_fn_sig<'tcx>(\n             };\n             let mut inputs: Vec<Ty> = vec![sig.inputs()[0]];\n             inputs.extend(extra_args.types());\n-            (crate::default_call_conv(tcx.sess), inputs, sig.output())\n+            (CallConv::triple_default(triple), inputs, sig.output())\n         }\n         Abi::System => unreachable!(),\n-        Abi::RustIntrinsic => (crate::default_call_conv(tcx.sess), sig.inputs().to_vec(), sig.output()),\n+        Abi::RustIntrinsic => (CallConv::triple_default(triple), sig.inputs().to_vec(), sig.output()),\n         _ => unimplemented!(\"unsupported abi {:?}\", sig.abi),\n     };\n \n@@ -156,6 +157,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n \n pub fn get_function_name_and_sig<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    triple: &target_lexicon::Triple,\n     inst: Instance<'tcx>,\n     support_vararg: bool,\n ) -> (String, Signature) {\n@@ -165,7 +167,7 @@ pub fn get_function_name_and_sig<'tcx>(\n     if fn_sig.c_variadic && !support_vararg {\n         unimpl!(\"Variadic function definitions are not yet supported\");\n     }\n-    let sig = clif_sig_from_fn_sig(tcx, fn_sig, false);\n+    let sig = clif_sig_from_fn_sig(tcx, triple, fn_sig, false);\n     (tcx.symbol_name(inst).name.as_str().to_string(), sig)\n }\n \n@@ -175,7 +177,7 @@ pub fn import_function<'tcx>(\n     module: &mut Module<impl Backend>,\n     inst: Instance<'tcx>,\n ) -> FuncId {\n-    let (name, sig) = get_function_name_and_sig(tcx, inst, true);\n+    let (name, sig) = get_function_name_and_sig(tcx, module.isa().triple(), inst, true);\n     module\n         .declare_function(&name, Linkage::Import, &sig)\n         .unwrap()\n@@ -205,7 +207,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         let sig = Signature {\n             params: input_tys.iter().cloned().map(AbiParam::new).collect(),\n             returns: output_tys.iter().cloned().map(AbiParam::new).collect(),\n-            call_conv: crate::default_call_conv(self.tcx.sess),\n+            call_conv: CallConv::triple_default(self.triple()),\n         };\n         let func_id = self\n             .module\n@@ -579,8 +581,8 @@ fn codegen_call_inner<'tcx>(\n \n             let call_inst = if let Some(func_ref) = func_ref {\n                 let sig =\n-                    fx.bcx\n-                        .import_signature(clif_sig_from_fn_sig(fx.tcx, fn_sig, is_virtual_call));\n+                    clif_sig_from_fn_sig(fx.tcx, fx.triple(), fn_sig, is_virtual_call);\n+                let sig = fx.bcx.import_signature(sig);\n                 fx.bcx.ins().call_indirect(sig, func_ref, &call_args)\n             } else {\n                 let func_ref =\n@@ -632,9 +634,8 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n \n                 assert_eq!(fn_sig.output(), fx.tcx.mk_unit());\n \n-                let sig = fx\n-                    .bcx\n-                    .import_signature(clif_sig_from_fn_sig(fx.tcx, fn_sig, true));\n+                let sig = clif_sig_from_fn_sig(fx.tcx, fx.triple(), fn_sig, true);\n+                let sig = fx.bcx.import_signature(sig);\n                 fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n             }\n             _ => {"}, {"sha": "df0f5d154346379685e9549e85fe23032d16ddeb", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -55,7 +55,7 @@ pub fn codegen_inner(sess: &Session, module: &mut Module<impl Backend + 'static>\n         };\n \n         let sig = Signature {\n-            call_conv: crate::default_call_conv(sess),\n+            call_conv: CallConv::triple_default(module.isa().triple()),\n             params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n             returns: output.into_iter().map(AbiParam::new).collect(),\n         };"}, {"sha": "16a90becd621cf29e9c7f35e6b740d7a14262898", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -12,7 +12,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mir = *tcx.instance_mir(instance.def);\n \n     // Declare function\n-    let (name, sig) = get_function_name_and_sig(tcx, instance, false);\n+    let (name, sig) = get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n     let func_id = cx.module.declare_function(&name, linkage, &sig).unwrap();\n     let mut debug_context = cx\n         .debug_context"}, {"sha": "455bc99ff22b2f94eafa5c2c729d4ef742283521", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -364,4 +364,8 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         ));\n         crate::constant::trans_const_value(self, const_loc)\n     }\n+\n+    pub fn triple(&self) -> &target_lexicon::Triple {\n+        self.module.isa().triple()\n+    }\n }"}, {"sha": "0a5916a552f5d74121f2d08bf3c28a539be81365", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -54,7 +54,7 @@ fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         returns: vec![AbiParam::new(\n             jit_module.target_config().pointer_type(), /*isize*/\n         )],\n-        call_conv: crate::default_call_conv(tcx.sess),\n+        call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n     };\n     let main_func_id = jit_module\n         .declare_function(\"main\", Linkage::Import, &sig)\n@@ -298,7 +298,8 @@ fn codegen_mono_items<'tcx>(\n         for (&mono_item, &(linkage, visibility)) in &mono_items {\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n-                    let (name, sig) = get_function_name_and_sig(tcx, instance, false);\n+                    let (name, sig) =\n+                        get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n                     let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n                     cx.module.declare_function(&name, linkage, &sig).unwrap();\n                 }"}, {"sha": "e609abee1e808a54bb889770939d26a1268b8525", "filename": "src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -1085,7 +1085,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n         try, (v f, v data, v _local_ptr) {\n             // FIXME once unwinding is supported, change this to actually catch panics\n             let f_sig = fx.bcx.func.import_signature(Signature {\n-                call_conv: crate::default_call_conv(fx.tcx.sess),\n+                call_conv: CallConv::triple_default(fx.triple()),\n                 params: vec![AbiParam::new(fx.bcx.func.dfg.value_type(data))],\n                 returns: vec![],\n             });"}, {"sha": "5b1b92396877040c874d4b32e9736bc46a7218f3", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -245,10 +245,6 @@ fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     sess.target.target.llvm_target.parse().unwrap()\n }\n \n-fn default_call_conv(sess: &Session) -> CallConv {\n-    CallConv::triple_default(&target_triple(sess))\n-}\n-\n fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'static> {\n     let mut flags_builder = settings::builder();\n     if enable_pic {"}, {"sha": "8577845037dbc83abc531635267f9bc4a508fc90", "filename": "src/main_shim.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -41,7 +41,7 @@ pub fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Back\n             returns: vec![AbiParam::new(\n                 m.target_config().pointer_type(), /*isize*/\n             )],\n-            call_conv: crate::default_call_conv(tcx.sess),\n+            call_conv: CallConv::triple_default(m.isa().triple()),\n         };\n \n         let cmain_func_id = m\n@@ -50,7 +50,8 @@ pub fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Back\n \n         let instance = Instance::mono(tcx, rust_main_def_id);\n \n-        let (main_name, main_sig) = get_function_name_and_sig(tcx, instance, false);\n+        let (main_name, main_sig) =\n+            get_function_name_and_sig(tcx, m.isa().triple(), instance, false);\n         let main_func_id = m\n             .declare_function(&main_name, Linkage::Import, &main_sig)\n             .unwrap();"}, {"sha": "64d88bc48ce00acd8415d1cd2239a255ff737215", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d502f8e65223ac63fd1e617a6e69028a9fa6ce22/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=d502f8e65223ac63fd1e617a6e69028a9fa6ce22", "patch": "@@ -7,7 +7,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n             \"puts\",\n             Linkage::Import,\n             &Signature {\n-                call_conv: crate::default_call_conv(fx.tcx.sess),\n+                call_conv: CallConv::triple_default(fx.triple()),\n                 params: vec![AbiParam::new(pointer_ty(fx.tcx))],\n                 returns: vec![],\n             },"}]}