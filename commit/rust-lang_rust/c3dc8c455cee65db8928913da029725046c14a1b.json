{"sha": "c3dc8c455cee65db8928913da029725046c14a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZGM4YzQ1NWNlZTY1ZGI4OTI4OTEzZGEwMjk3MjUwNDZjMTRhMWI=", "commit": {"author": {"name": "Dhruv Jauhar", "email": "dhruv.jauhar@databricks.com", "date": "2020-05-25T19:57:47Z"}, "committer": {"name": "Dhruv Jauhar", "email": "dhruv.jauhar@databricks.com", "date": "2020-05-25T23:41:56Z"}, "message": "Rename upvar_list to closure_captures\n\nAs part of supporting RFC 2229, we will be capturing all the places that\nare mentioned in a closure. Currently the upvar_list field gives access\nto a FxIndexMap<HirId, Upvar> map. Eventually this will change, with the\nupvar_list having a more general structure that expresses captured\npaths, not just the mentioned upvars. We will make those changes in\nsubsequent PRs.\n\nThis commit modifies the name of the upvar_list map to closure_captures\nin TypeckTables.\n\nCo-authored-by: Dhruv Jauhar <dhruvjhr@gmail.com>\nCo-authored-by: Aman Arora <me@aman-arora.com>", "tree": {"sha": "4aaaddc02998d1d33d30a80ee8831c1cd2fe2cb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aaaddc02998d1d33d30a80ee8831c1cd2fe2cb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3dc8c455cee65db8928913da029725046c14a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3dc8c455cee65db8928913da029725046c14a1b", "html_url": "https://github.com/rust-lang/rust/commit/c3dc8c455cee65db8928913da029725046c14a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3dc8c455cee65db8928913da029725046c14a1b/comments", "author": null, "committer": null, "parents": [{"sha": "a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283", "html_url": "https://github.com/rust-lang/rust/commit/a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "f2d1e6f42f61568f876cdd90a2bf96386b98e826", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=c3dc8c455cee65db8928913da029725046c14a1b", "patch": "@@ -419,7 +419,7 @@ pub struct TypeckTables<'tcx> {\n     /// The upvarID contains the HIR node ID and it also contains the full path\n     /// leading to the member of the struct or tuple that is used instead of the\n     /// entire variable.\n-    pub upvar_list: ty::UpvarListMap,\n+    pub closure_captures: ty::UpvarListMap,\n \n     /// Stores the type, expression, span and optional scope span of all types\n     /// that are live across the yield of this generator (if a generator).\n@@ -447,7 +447,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             used_trait_imports: Lrc::new(Default::default()),\n             tainted_by_errors: None,\n             concrete_opaque_types: Default::default(),\n-            upvar_list: Default::default(),\n+            closure_captures: Default::default(),\n             generator_interior_types: Default::default(),\n         }\n     }\n@@ -688,7 +688,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             ref used_trait_imports,\n             tainted_by_errors,\n             ref concrete_opaque_types,\n-            ref upvar_list,\n+            ref closure_captures,\n             ref generator_interior_types,\n         } = *self;\n \n@@ -721,7 +721,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             used_trait_imports.hash_stable(hcx, hasher);\n             tainted_by_errors.hash_stable(hcx, hasher);\n             concrete_opaque_types.hash_stable(hcx, hasher);\n-            upvar_list.hash_stable(hcx, hasher);\n+            closure_captures.hash_stable(hcx, hasher);\n             generator_interior_types.hash_stable(hcx, hasher);\n         })\n     }"}, {"sha": "65e62dbd9dd492420e1a8c0dc8a691422faa8518", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=c3dc8c455cee65db8928913da029725046c14a1b", "patch": "@@ -142,7 +142,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         infcx.set_tainted_by_errors();\n     }\n     let upvars: Vec<_> = tables\n-        .upvar_list\n+        .closure_captures\n         .get(&def_id.to_def_id())\n         .into_iter()\n         .flat_map(|v| v.values())"}, {"sha": "e962dfb2b3e86735db858db51e93e8f2056028ba", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=c3dc8c455cee65db8928913da029725046c14a1b", "patch": "@@ -227,7 +227,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 let mut name = None;\n                 if let Some(def_id) = def_id.as_local() {\n                     let tables = self.ecx.tcx.typeck_tables_of(def_id);\n-                    if let Some(upvars) = tables.upvar_list.get(&def_id.to_def_id()) {\n+                    if let Some(upvars) = tables.closure_captures.get(&def_id.to_def_id()) {\n                         // Sometimes the index is beyond the number of upvars (seen\n                         // for a generator).\n                         if let Some((&var_hir_id, _)) = upvars.get_index(field) {"}, {"sha": "3d821aa55a1f87fc0d51d3a0e3c5fa377904acf3", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=c3dc8c455cee65db8928913da029725046c14a1b", "patch": "@@ -790,11 +790,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let hir_tables = self.hir.tables();\n \n         // In analyze_closure() in upvar.rs we gathered a list of upvars used by a\n-        // closure and we stored in a map called upvar_list in TypeckTables indexed\n+        // indexed closure and we stored in a map called closure_captures in TypeckTables\n         // with the closure's DefId. Here, we run through that vec of UpvarIds for\n         // the given closure and use the necessary information to create upvar\n         // debuginfo and to fill `self.upvar_mutbls`.\n-        if let Some(upvars) = hir_tables.upvar_list.get(&fn_def_id) {\n+        if let Some(upvars) = hir_tables.closure_captures.get(&fn_def_id) {\n             let closure_env_arg = Local::new(1);\n             let mut closure_env_projs = vec![];\n             let mut closure_ty = self.local_decls[closure_env_arg].ty;"}, {"sha": "fd3c48b38badbf3786fd58db4dfa95241899d94e", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=c3dc8c455cee65db8928913da029725046c14a1b", "patch": "@@ -884,7 +884,7 @@ fn convert_var<'tcx>(\n ) -> ExprKind<'tcx> {\n     let upvar_index = cx\n         .tables()\n-        .upvar_list\n+        .closure_captures\n         .get(&cx.body_owner)\n         .and_then(|upvars| upvars.get_full(&var_hir_id).map(|(i, _, _)| i));\n "}, {"sha": "19a23e5a594788b52a8c5e02a98fa74ce1233623", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=c3dc8c455cee65db8928913da029725046c14a1b", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n-            let mut upvar_list: FxIndexMap<hir::HirId, ty::UpvarId> =\n+            let mut closure_captures: FxIndexMap<hir::HirId, ty::UpvarId> =\n                 FxIndexMap::with_capacity_and_hasher(upvars.len(), Default::default());\n             for (&var_hir_id, _) in upvars.iter() {\n                 let upvar_id = ty::UpvarId {\n@@ -122,7 +122,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n                 // Adding the upvar Id to the list of Upvars, which will be added\n                 // to the map for the closure at the end of the for loop.\n-                upvar_list.insert(var_hir_id, upvar_id);\n+                closure_captures.insert(var_hir_id, upvar_id);\n \n                 let capture_kind = match capture_clause {\n                     hir::CaptureBy::Value => ty::UpvarCapture::ByValue,\n@@ -140,8 +140,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Add the vector of upvars to the map keyed with the closure id.\n             // This gives us an easier access to them without having to call\n             // tcx.upvars again..\n-            if !upvar_list.is_empty() {\n-                self.tables.borrow_mut().upvar_list.insert(closure_def_id, upvar_list);\n+            if !closure_captures.is_empty() {\n+                self.tables.borrow_mut().closure_captures.insert(closure_def_id, closure_captures);\n             }\n         }\n "}, {"sha": "3473dc7a58d0469e5c50751b5dde57999cf0c7dc", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3dc8c455cee65db8928913da029725046c14a1b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=c3dc8c455cee65db8928913da029725046c14a1b", "patch": "@@ -74,8 +74,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"used_trait_imports({:?}) = {:?}\", item_def_id, used_trait_imports);\n         wbcx.tables.used_trait_imports = used_trait_imports;\n \n-        wbcx.tables.upvar_list =\n-            mem::replace(&mut self.tables.borrow_mut().upvar_list, Default::default());\n+        wbcx.tables.closure_captures =\n+            mem::replace(&mut self.tables.borrow_mut().closure_captures, Default::default());\n \n         if self.is_tainted_by_errors() {\n             // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted."}]}