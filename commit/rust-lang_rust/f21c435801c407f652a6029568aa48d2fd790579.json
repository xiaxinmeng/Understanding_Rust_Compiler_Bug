{"sha": "f21c435801c407f652a6029568aa48d2fd790579", "node_id": "C_kwDOAAsO6NoAKGYyMWM0MzU4MDFjNDA3ZjY1MmE2MDI5NTY4YWE0OGQyZmQ3OTA1Nzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-20T08:46:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-20T08:46:54Z"}, "message": "Rollup merge of #109364 - compiler-errors:gat-const-arg, r=BoxyUwU\n\nOnly expect a GAT const param for `type_of` of GAT const arg\n\nIDK why we were account for both `is_ty_or_const` instead of just for a const param, since we're computing the `type_of` a const param specifically.\n\nFixes #109300", "tree": {"sha": "f55842d01982e7a24de477d0274bfc8b2f3fca19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f55842d01982e7a24de477d0274bfc8b2f3fca19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f21c435801c407f652a6029568aa48d2fd790579", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGB1+CRBK7hj4Ov3rIwAARCwIABcrJrpJAUxEShmx5b9c0ctD\nMAapKouk+1HmX59fXSoBF1OjJabC9D9qQjl36VAYHYJupdcjR7osLoMCA8Jiweko\nPu6MmVxnLc8jIEcsWOydqLywfed6iKrfWnIIv7Z61GJ7l6cBz+yed+M2v3EPQywq\noR860b19bBuEXOwzwwMFiwre0YnTixmaqpQy6b6iUqT2ANMv7P+gEBoV7eZAF2Rd\nVYAiV9bxY83fSmcwigLjMfZ8iCgb3222WZf2ZMqo9ylm1wLVcaTDr+qE7GVs+SmY\nAILajiofPD3sevfD8WjDjDjmKXtW4s7WA3V8WZE3Jd3ykP+84ulmqModaGWibwI=\n=EGz6\n-----END PGP SIGNATURE-----\n", "payload": "tree f55842d01982e7a24de477d0274bfc8b2f3fca19\nparent 3efecba6e73fb202f3c2a23134eb299286826169\nparent dbedf4003f6b8402f42cd079fa82b046a32d2845\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679302014 +0100\ncommitter GitHub <noreply@github.com> 1679302014 +0100\n\nRollup merge of #109364 - compiler-errors:gat-const-arg, r=BoxyUwU\n\nOnly expect a GAT const param for `type_of` of GAT const arg\n\nIDK why we were account for both `is_ty_or_const` instead of just for a const param, since we're computing the `type_of` a const param specifically.\n\nFixes #109300\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f21c435801c407f652a6029568aa48d2fd790579", "html_url": "https://github.com/rust-lang/rust/commit/f21c435801c407f652a6029568aa48d2fd790579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f21c435801c407f652a6029568aa48d2fd790579/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3efecba6e73fb202f3c2a23134eb299286826169", "url": "https://api.github.com/repos/rust-lang/rust/commits/3efecba6e73fb202f3c2a23134eb299286826169", "html_url": "https://github.com/rust-lang/rust/commit/3efecba6e73fb202f3c2a23134eb299286826169"}, {"sha": "dbedf4003f6b8402f42cd079fa82b046a32d2845", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbedf4003f6b8402f42cd079fa82b046a32d2845", "html_url": "https://github.com/rust-lang/rust/commit/dbedf4003f6b8402f42cd079fa82b046a32d2845"}], "stats": {"total": 97, "additions": 69, "deletions": 28}, "files": [{"sha": "4bbea87890429237bec62a80acd1499de5125b08", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f21c435801c407f652a6029568aa48d2fd790579/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21c435801c407f652a6029568aa48d2fd790579/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=f21c435801c407f652a6029568aa48d2fd790579", "patch": "@@ -278,8 +278,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n             }\n             TraitItemKind::Const(ty, body_id) => body_id\n                 .and_then(|body_id| {\n-                    is_suggestable_infer_ty(ty)\n-                        .then(|| infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident, \"constant\",))\n+                    is_suggestable_infer_ty(ty).then(|| {\n+                        infer_placeholder_type(\n+                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n+                        )\n+                    })\n                 })\n                 .unwrap_or_else(|| icx.to_ty(ty)),\n             TraitItemKind::Type(_, Some(ty)) => icx.to_ty(ty),\n@@ -335,14 +338,15 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     }\n                 }\n                 ItemKind::TyAlias(self_ty, _) => icx.to_ty(self_ty),\n-                ItemKind::Impl(hir::Impl { self_ty, .. }) => {\n-                    match self_ty.find_self_aliases() {\n-                        spans if spans.len() > 0 => {\n-                            let guar = tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: spans.into(), note: () });\n-                            tcx.ty_error(guar)\n-                        },\n-                        _ => icx.to_ty(*self_ty),\n+                ItemKind::Impl(hir::Impl { self_ty, .. }) => match self_ty.find_self_aliases() {\n+                    spans if spans.len() > 0 => {\n+                        let guar = tcx.sess.emit_err(crate::errors::SelfInImplSelf {\n+                            span: spans.into(),\n+                            note: (),\n+                        });\n+                        tcx.ty_error(guar)\n                     }\n+                    _ => icx.to_ty(*self_ty),\n                 },\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n@@ -364,7 +368,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     ..\n                 }) => {\n                     if in_trait && !tcx.impl_defaultness(owner).has_value() {\n-                        span_bug!(tcx.def_span(def_id), \"tried to get type of this RPITIT with no definition\");\n+                        span_bug!(\n+                            tcx.def_span(def_id),\n+                            \"tried to get type of this RPITIT with no definition\"\n+                        );\n                     }\n                     find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }\n@@ -453,15 +460,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     tcx.adt_def(tcx.hir().get_parent_item(hir_id)).repr().discr_type().to_ty(tcx)\n                 }\n \n-                Node::TypeBinding(\n-                    TypeBinding {\n-                        hir_id: binding_id,\n-                        kind: TypeBindingKind::Equality { term: Term::Const(e) },\n-                        ident,\n-                        ..\n-                    },\n-                ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get_parent(*binding_id)\n+                Node::TypeBinding(TypeBinding {\n+                    hir_id: binding_id,\n+                    kind: TypeBindingKind::Equality { term: Term::Const(e) },\n+                    ident,\n+                    ..\n+                }) if let Node::TraitRef(trait_ref) = tcx.hir().get_parent(*binding_id)\n                     && e.hir_id == hir_id =>\n                 {\n                     let Some(trait_def_id) = trait_ref.trait_def_id() else {\n@@ -475,7 +479,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                         def_id.to_def_id(),\n                     );\n                     if let Some(assoc_item) = assoc_item {\n-                        tcx.type_of(assoc_item.def_id).subst_identity()\n+                        tcx.type_of(assoc_item.def_id)\n+                            .no_bound_vars()\n+                            .expect(\"const parameter types cannot be generic\")\n                     } else {\n                         // FIXME(associated_const_equality): add a useful error message here.\n                         tcx.ty_error_with_message(\n@@ -485,10 +491,13 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     }\n                 }\n \n-                Node::TypeBinding(\n-                    TypeBinding { hir_id: binding_id, gen_args, kind, ident, .. },\n-                ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get_parent(*binding_id)\n+                Node::TypeBinding(TypeBinding {\n+                    hir_id: binding_id,\n+                    gen_args,\n+                    kind,\n+                    ident,\n+                    ..\n+                }) if let Node::TraitRef(trait_ref) = tcx.hir().get_parent(*binding_id)\n                     && let Some((idx, _)) =\n                         gen_args.args.iter().enumerate().find(|(_, arg)| {\n                             if let GenericArg::Const(ct) = arg {\n@@ -517,15 +526,18 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                         },\n                         def_id.to_def_id(),\n                     );\n-                    if let Some(param)\n-                        = assoc_item.map(|item| &tcx.generics_of(item.def_id).params[idx]).filter(|param| param.kind.is_ty_or_const())\n+                    if let Some(assoc_item) = assoc_item\n+                        && let param = &tcx.generics_of(assoc_item.def_id).params[idx]\n+                        && matches!(param.kind, ty::GenericParamDefKind::Const { .. })\n                     {\n-                        tcx.type_of(param.def_id).subst_identity()\n+                        tcx.type_of(param.def_id)\n+                            .no_bound_vars()\n+                            .expect(\"const parameter types cannot be generic\")\n                     } else {\n                         // FIXME(associated_const_equality): add a useful error message here.\n                         tcx.ty_error_with_message(\n                             DUMMY_SP,\n-                            \"Could not find associated const on trait\",\n+                            \"Could not find const param on associated item\",\n                         )\n                     }\n                 }"}, {"sha": "734a37862940f05badaae18ecfb6232f24b8258d", "filename": "tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f21c435801c407f652a6029568aa48d2fd790579/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21c435801c407f652a6029568aa48d2fd790579/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.rs?ref=f21c435801c407f652a6029568aa48d2fd790579", "patch": "@@ -0,0 +1,11 @@\n+#![feature(generic_const_exprs)]\n+//~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+trait B {\n+    type U<T>;\n+}\n+\n+fn f<T: B<U<1i32> = ()>>() {}\n+//~^ ERROR constant provided when a type was expected\n+\n+fn main() {}"}, {"sha": "8b6eb5b75940f052edd9252e2d6758d590800a9b", "filename": "tests/ui/const-generics/generic_const_exprs/mismatched-gat-subst-kind.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f21c435801c407f652a6029568aa48d2fd790579/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21c435801c407f652a6029568aa48d2fd790579/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fmismatched-gat-subst-kind.stderr?ref=f21c435801c407f652a6029568aa48d2fd790579", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/mismatched-gat-subst-kind.rs:1:12\n+   |\n+LL | #![feature(generic_const_exprs)]\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/mismatched-gat-subst-kind.rs:8:13\n+   |\n+LL | fn f<T: B<U<1i32> = ()>>() {}\n+   |             ^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0747`."}]}