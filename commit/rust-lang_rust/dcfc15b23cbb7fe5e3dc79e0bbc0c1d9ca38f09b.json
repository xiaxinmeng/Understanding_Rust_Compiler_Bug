{"sha": "dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZmMxNWIyM2NiYjdmZTVlM2RjNzllMGJiYzBjMWQ5Y2EzOGYwOWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-29T06:15:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-29T06:15:59Z"}, "message": "Rollup merge of #61249 - spastorino:local-or-deref-local, r=oli-obk,Centril\n\nRename Place::local to Place::local_or_deref_local\n\nr? @oli-obk", "tree": {"sha": "a74a757c9eee2197ec5345acfa35801ff30a8fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74a757c9eee2197ec5345acfa35801ff30a8fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7iOgCRBK7hj4Ov3rIwAAdHIIAIRz0wWtm5mSE8RKxQvEKblX\ngjEGDCwOtdovGNAHdL1q98wVd/DqFsV32e3wUKkPX6p4dRJoPWAbB0/s2f0k7yvm\nwyXyQz8ouhbzBV4B2ZWMYAjaiDofTB2Mh5GTT4M1fqm7ngqcKSHODlWXiN7biROQ\njlT4As1/I4/JHMJGDNeBmcMuoSBa+nXz4DIVO+bdp3Bawb8bTJqIwYjQVfnzU0Mz\nts552NuLHHi5OvEGFrUYcyRDSCW28h6NvfBt4Ko7h6J0bHJ/lgLoDKRBhITbZ7Hw\n+jp5HOySlOXWsgTdMOUp+ObEFGpmnxOT3TSMm6AgAq6XMSvE39SnDmBXk0zFgt4=\n=kqg6\n-----END PGP SIGNATURE-----\n", "payload": "tree a74a757c9eee2197ec5345acfa35801ff30a8fb1\nparent 405edc71fd5a5e4a8f936fe08b1465a2b4ad1af4\nparent 5e4d83e9720191dde99e9d54d09df09aa835a176\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559110559 +0200\ncommitter GitHub <noreply@github.com> 1559110559 +0200\n\nRollup merge of #61249 - spastorino:local-or-deref-local, r=oli-obk,Centril\n\nRename Place::local to Place::local_or_deref_local\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "html_url": "https://github.com/rust-lang/rust/commit/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405edc71fd5a5e4a8f936fe08b1465a2b4ad1af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/405edc71fd5a5e4a8f936fe08b1465a2b4ad1af4", "html_url": "https://github.com/rust-lang/rust/commit/405edc71fd5a5e4a8f936fe08b1465a2b4ad1af4"}, {"sha": "5e4d83e9720191dde99e9d54d09df09aa835a176", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4d83e9720191dde99e9d54d09df09aa835a176", "html_url": "https://github.com/rust-lang/rust/commit/5e4d83e9720191dde99e9d54d09df09aa835a176"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "d4ef134728eafe5b6514557a6c570b75aa5603f9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "patch": "@@ -2037,7 +2037,7 @@ impl<'tcx> Place<'tcx> {\n     /// a single deref of a local.\n     //\n     // FIXME: can we safely swap the semantics of `fn base_local` below in here instead?\n-    pub fn local(&self) -> Option<Local> {\n+    pub fn local_or_deref_local(&self) -> Option<Local> {\n         match self {\n             Place::Base(PlaceBase::Local(local)) |\n             Place::Projection(box Projection {"}, {"sha": "f464e58e36b15ed11a88b5c2dca0f98673efc119", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "patch": "@@ -1616,7 +1616,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             );\n \n                             // Find the local from the operand.\n-                            let assigned_from_local = match assigned_from.local() {\n+                            let assigned_from_local = match assigned_from.local_or_deref_local() {\n                                 Some(local) => local,\n                                 None => continue,\n                             };\n@@ -1672,7 +1672,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     );\n \n                     // Find the local from the rvalue.\n-                    let assigned_from_local = match assigned_from.local() {\n+                    let assigned_from_local = match assigned_from.local_or_deref_local() {\n                         Some(local) => local,\n                         None => continue,\n                     };\n@@ -1735,7 +1735,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         assigned_from,\n                     );\n \n-                    if let Some(assigned_from_local) = assigned_from.local() {\n+                    if let Some(assigned_from_local) = assigned_from.local_or_deref_local() {\n                         debug!(\n                             \"annotate_argument_and_return_for_borrow: assigned_from_local={:?}\",\n                             assigned_from_local,"}, {"sha": "5a22c81a5d0578f1d83b52458e1c9b279f73b2f0", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "patch": "@@ -37,15 +37,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         diag: &mut DiagnosticBuilder<'_>,\n     ) {\n         debug!(\"add_moved_or_invoked_closure_note: location={:?} place={:?}\", location, place);\n-        let mut target = place.local();\n+        let mut target = place.local_or_deref_local();\n         for stmt in &self.mir[location.block].statements[location.statement_index..] {\n             debug!(\"add_moved_or_invoked_closure_note: stmt={:?} target={:?}\", stmt, target);\n             if let StatementKind::Assign(into, box Rvalue::Use(from)) = &stmt.kind {\n                 debug!(\"add_fnonce_closure_note: into={:?} from={:?}\", into, from);\n                 match from {\n                     Operand::Copy(ref place) |\n-                    Operand::Move(ref place) if target == place.local() =>\n-                        target = into.local(),\n+                    Operand::Move(ref place) if target == place.local_or_deref_local() =>\n+                        target = into.local_or_deref_local(),\n                     _ => {},\n                 }\n             }\n@@ -69,8 +69,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             if self.infcx.tcx.parent(id) == self.infcx.tcx.lang_items().fn_once_trait() {\n                 let closure = match args.first() {\n                     Some(Operand::Copy(ref place)) |\n-                    Some(Operand::Move(ref place)) if target == place.local() =>\n-                        place.local().unwrap(),\n+                    Some(Operand::Move(ref place)) if target == place.local_or_deref_local() =>\n+                        place.local_or_deref_local().unwrap(),\n                     _ => return,\n                 };\n "}, {"sha": "685db7713cac16dd5f3e713e3b5db6e44d02e74e", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "patch": "@@ -528,7 +528,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }) => {\n                 // Not projected from the implicit `self` in a closure.\n                 debug_assert!(\n-                    match base.local() {\n+                    match base.local_or_deref_local() {\n                         Some(local) => local == Local::new(1),\n                         None => false,\n                     },"}, {"sha": "0fb66032a171dd085f299a8e860c138289d4083e", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=dcfc15b23cbb7fe5e3dc79e0bbc0c1d9ca38f09b", "patch": "@@ -46,8 +46,10 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n                          sets: &mut BlockSets<'_, Local>,\n                          loc: Location) {\n         match &self.mir[loc.block].terminator().kind {\n-            TerminatorKind::Drop { location, .. } => if let Some(l) = location.local() {\n-                sets.kill(l);\n+            TerminatorKind::Drop { location, .. } => {\n+                if let Some(l) = location.local_or_deref_local() {\n+                    sets.kill(l);\n+                }\n             }\n             _ => (),\n         }"}]}