{"sha": "28c1f21433a927bf9e3b399ec293cd7f7b688af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YzFmMjE0MzNhOTI3YmY5ZTNiMzk5ZWMyOTNjZDdmN2I2ODhhZjY=", "commit": {"author": {"name": "Glenn Willen", "email": "gwillen@nerdnet.org", "date": "2012-07-13T21:06:30Z"}, "committer": {"name": "Glenn Willen", "email": "gwillen@nerdnet.org", "date": "2012-07-13T21:06:30Z"}, "message": "Better error when rustc fails to write output.", "tree": {"sha": "604cef26118332653a28747d18247793298cb142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/604cef26118332653a28747d18247793298cb142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28c1f21433a927bf9e3b399ec293cd7f7b688af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28c1f21433a927bf9e3b399ec293cd7f7b688af6", "html_url": "https://github.com/rust-lang/rust/commit/28c1f21433a927bf9e3b399ec293cd7f7b688af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28c1f21433a927bf9e3b399ec293cd7f7b688af6/comments", "author": {"login": "gwillen", "id": 458997, "node_id": "MDQ6VXNlcjQ1ODk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gwillen", "html_url": "https://github.com/gwillen", "followers_url": "https://api.github.com/users/gwillen/followers", "following_url": "https://api.github.com/users/gwillen/following{/other_user}", "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}", "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions", "organizations_url": "https://api.github.com/users/gwillen/orgs", "repos_url": "https://api.github.com/users/gwillen/repos", "events_url": "https://api.github.com/users/gwillen/events{/privacy}", "received_events_url": "https://api.github.com/users/gwillen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gwillen", "id": 458997, "node_id": "MDQ6VXNlcjQ1ODk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gwillen", "html_url": "https://github.com/gwillen", "followers_url": "https://api.github.com/users/gwillen/followers", "following_url": "https://api.github.com/users/gwillen/following{/other_user}", "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}", "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions", "organizations_url": "https://api.github.com/users/gwillen/orgs", "repos_url": "https://api.github.com/users/gwillen/repos", "events_url": "https://api.github.com/users/gwillen/events{/privacy}", "received_events_url": "https://api.github.com/users/gwillen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05ff4f416b2fb2ac8ea19e0076d5af39b4590e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/05ff4f416b2fb2ac8ea19e0076d5af39b4590e05", "html_url": "https://github.com/rust-lang/rust/commit/05ff4f416b2fb2ac8ea19e0076d5af39b4590e05"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "a9a49b60f327817cad3e7ea7bcc0f63ea52c5f43", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28c1f21433a927bf9e3b399ec293cd7f7b688af6/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c1f21433a927bf9e3b399ec293cd7f7b688af6/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=28c1f21433a927bf9e3b399ec293cd7f7b688af6", "patch": "@@ -1,4 +1,4 @@\n-import libc::{c_int, c_uint};\n+import libc::{c_int, c_uint, c_char};\n import driver::session;\n import session::session;\n import lib::llvm::llvm;\n@@ -32,6 +32,21 @@ fn llvm_err(sess: session, msg: str) -> ! unsafe {\n     } else { sess.fatal(msg + \": \" + str::unsafe::from_c_str(cstr)); }\n }\n \n+fn WriteOutputFile(sess:session,\n+        PM: lib::llvm::PassManagerRef, M: ModuleRef,\n+        Triple: *c_char,\n+        // FIXME: When #2334 is fixed, change\n+        // c_uint to FileType\n+        Output: *c_char, FileType: c_uint,\n+        OptLevel: c_int,\n+        EnableSegmentedStacks: bool) {\n+    let result = llvm::LLVMRustWriteOutputFile(\n+            PM, M, Triple, Output, FileType, OptLevel, EnableSegmentedStacks);\n+    if (!result) {\n+        llvm_err(sess, \"Could not write output\");\n+    }\n+}\n+\n mod write {\n     fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||\n@@ -160,7 +175,8 @@ mod write {\n                         sess.targ_cfg.target_strs.target_triple,\n                         |buf_t| {\n                             str::as_c_str(output, |buf_o| {\n-                                llvm::LLVMRustWriteOutputFile(\n+                                WriteOutputFile(\n+                                    sess,\n                                     pm.llpm,\n                                     llmod,\n                                     buf_t,\n@@ -181,7 +197,8 @@ mod write {\n                         sess.targ_cfg.target_strs.target_triple,\n                         |buf_t| {\n                             str::as_c_str(output, |buf_o| {\n-                                llvm::LLVMRustWriteOutputFile(\n+                                WriteOutputFile(\n+                                    sess,\n                                     pm.llpm,\n                                     llmod,\n                                     buf_t,\n@@ -200,7 +217,8 @@ mod write {\n                     sess.targ_cfg.target_strs.target_triple,\n                     |buf_t| {\n                         str::as_c_str(output, |buf_o| {\n-                            llvm::LLVMRustWriteOutputFile(\n+                            WriteOutputFile(\n+                                sess,\n                                 pm.llpm,\n                                 llmod,\n                                 buf_t,"}, {"sha": "a38f747887f2850d29858c56e4d2bb5a3d5829cc", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28c1f21433a927bf9e3b399ec293cd7f7b688af6/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c1f21433a927bf9e3b399ec293cd7f7b688af6/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=28c1f21433a927bf9e3b399ec293cd7f7b688af6", "patch": "@@ -941,7 +941,7 @@ extern mod llvm {\n                                // c_uint to FileType\n                                Output: *c_char, FileType: c_uint,\n                                OptLevel: c_int,\n-                               EnableSegmentedStacks: bool);\n+                               EnableSegmentedStacks: bool) -> bool;\n \n     /** Returns a string describing the last error caused by an LLVMRust*\n         call. */"}, {"sha": "6c19a2997575072d6ebf66b9eef5bf35185458c5", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28c1f21433a927bf9e3b399ec293cd7f7b688af6/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/28c1f21433a927bf9e3b399ec293cd7f7b688af6/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=28c1f21433a927bf9e3b399ec293cd7f7b688af6", "patch": "@@ -75,7 +75,7 @@ extern \"C\" bool LLVMLinkModules(LLVMModuleRef Dest, LLVMModuleRef Src) {\n   return true;\n }\n \n-extern \"C\" void\n+extern \"C\" bool\n LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                         LLVMModuleRef M,\n                         const char *triple,\n@@ -107,13 +107,18 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   std::string ErrorInfo;\n   raw_fd_ostream OS(path, ErrorInfo,\n                     raw_fd_ostream::F_Binary);\n+  if (ErrorInfo != \"\") {\n+    LLVMRustError = ErrorInfo.c_str();\n+    return false;\n+  }\n   formatted_raw_ostream FOS(OS);\n \n   bool foo = Target->addPassesToEmitFile(*PM, FOS, FileType, NoVerify);\n   assert(!foo);\n   (void)foo;\n   PM->run(*unwrap(M));\n   delete Target;\n+  return true;\n }\n \n extern \"C\" LLVMModuleRef LLVMRustParseAssemblyFile(const char *Filename) {"}]}