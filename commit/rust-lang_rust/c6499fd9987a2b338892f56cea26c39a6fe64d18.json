{"sha": "c6499fd9987a2b338892f56cea26c39a6fe64d18", "node_id": "C_kwDOAAsO6NoAKGM2NDk5ZmQ5OTg3YTJiMzM4ODkyZjU2Y2VhMjZjMzlhNmZlNjRkMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-12T15:07:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-12T15:07:35Z"}, "message": "Auto merge of #96974 - matthiaskrgr:rollup-jd4otnc, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95896 (Note the contacts for the nvptx64 target(s))\n - #96860 (openbsd: convert futex timeout managment to Timespec usage)\n - #96939 (Fix settings page CSS)\n - #96941 (update graphviz links)\n - #96968 (Add tests for #96806)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "29b652d09157c254a8bf9f899a8c70e2939245d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29b652d09157c254a8bf9f899a8c70e2939245d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6499fd9987a2b338892f56cea26c39a6fe64d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6499fd9987a2b338892f56cea26c39a6fe64d18", "html_url": "https://github.com/rust-lang/rust/commit/c6499fd9987a2b338892f56cea26c39a6fe64d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6499fd9987a2b338892f56cea26c39a6fe64d18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481db40311cdd241ae4d33f34f2f75732e44d8e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/481db40311cdd241ae4d33f34f2f75732e44d8e8", "html_url": "https://github.com/rust-lang/rust/commit/481db40311cdd241ae4d33f34f2f75732e44d8e8"}, {"sha": "5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "url": "https://api.github.com/repos/rust-lang/rust/commits/5656ea22ada5aae9c6bf9f36c031e55db9b61f79", "html_url": "https://github.com/rust-lang/rust/commit/5656ea22ada5aae9c6bf9f36c031e55db9b61f79"}], "stats": {"total": 490, "additions": 431, "deletions": 59}, "files": [{"sha": "676c66f41a9ae9eb8c19c413b72f99fdd298a1ef", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -4,18 +4,16 @@\n //! use with [Graphviz](https://www.graphviz.org/) by walking a labeled\n //! graph. (Graphviz can then automatically lay out the nodes and edges\n //! of the graph, and also optionally render the graph as an image or\n-//! other [output formats](\n-//! https://www.graphviz.org/content/output-formats), such as SVG.)\n+//! other [output formats](https://www.graphviz.org/docs/outputs), such as SVG.)\n //!\n //! Rather than impose some particular graph data structure on clients,\n //! this library exposes two traits that clients can implement on their\n //! own structs before handing them over to the rendering function.\n //!\n //! Note: This library does not yet provide access to the full\n-//! expressiveness of the [DOT language](\n-//! https://www.graphviz.org/doc/info/lang.html). For example, there are\n-//! many [attributes](https://www.graphviz.org/content/attrs) related to\n-//! providing layout hints (e.g., left-to-right versus top-down, which\n+//! expressiveness of the [DOT language](https://www.graphviz.org/doc/info/lang.html).\n+//! For example, there are many [attributes](https://www.graphviz.org/doc/info/attrs.html)\n+//! related to providing layout hints (e.g., left-to-right versus top-down, which\n //! algorithm to use, etc). The current intention of this library is to\n //! emit a human-readable .dot file with very regular structure suitable\n //! for easy post-processing.\n@@ -292,7 +290,7 @@ pub enum LabelText<'a> {\n     LabelStr(Cow<'a, str>),\n \n     /// This kind of label uses the graphviz label escString type:\n-    /// <https://www.graphviz.org/content/attrs#kescString>\n+    /// <https://www.graphviz.org/docs/attr-types/escString>\n     ///\n     /// Occurrences of backslashes (`\\`) are not escaped; instead they\n     /// are interpreted as initiating an escString escape sequence.\n@@ -307,12 +305,12 @@ pub enum LabelText<'a> {\n     /// printed exactly as given, but between `<` and `>`. **No\n     /// escaping is performed.**\n     ///\n-    /// [html]: https://www.graphviz.org/content/node-shapes#html\n+    /// [html]: https://www.graphviz.org/doc/info/shapes.html#html\n     HtmlStr(Cow<'a, str>),\n }\n \n /// The style for a node or edge.\n-/// See <https://www.graphviz.org/doc/info/attrs.html#k:style> for descriptions.\n+/// See <https://www.graphviz.org/docs/attr-types/style/> for descriptions.\n /// Note that some of these are not valid for edges.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Style {\n@@ -439,7 +437,7 @@ pub trait Labeller<'a> {\n     /// Maps `n` to one of the [graphviz `shape` names][1]. If `None`\n     /// is returned, no `shape` attribute is specified.\n     ///\n-    /// [1]: https://www.graphviz.org/content/node-shapes\n+    /// [1]: https://www.graphviz.org/doc/info/shapes.html\n     fn node_shape(&'a self, _node: &Self::Node) -> Option<LabelText<'a>> {\n         None\n     }"}, {"sha": "8d05cb44b94794acb5309abbb467c7b55a0828c8", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -25,7 +25,7 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n     //\n     // Overflows are rounded up to an infinite timeout (None).\n     let timespec = timeout\n-        .and_then(|d| Some(Timespec::now(libc::CLOCK_MONOTONIC).checked_add_duration(&d)?))\n+        .and_then(|d| Timespec::now(libc::CLOCK_MONOTONIC).checked_add_duration(&d))\n         .and_then(|t| t.to_timespec());\n \n     loop {\n@@ -136,15 +136,13 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n \n #[cfg(target_os = \"openbsd\")]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n+    use super::time::Timespec;\n     use crate::ptr::{null, null_mut};\n-    let timespec = timeout.and_then(|d| {\n-        Some(libc::timespec {\n-            // Sleep forever if the timeout is longer than fits in a timespec.\n-            tv_sec: d.as_secs().try_into().ok()?,\n-            // This conversion never truncates, as subsec_nanos is always <1e9.\n-            tv_nsec: d.subsec_nanos() as _,\n-        })\n-    });\n+\n+    // Overflows are rounded up to an infinite timeout (None).\n+    let timespec = timeout\n+        .and_then(|d| Timespec::zero().checked_add_duration(&d))\n+        .and_then(|t| t.to_timespec());\n \n     let r = unsafe {\n         libc::futex("}, {"sha": "f99c453a3a85b88cd3f3eb66582cc716962c382b", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -51,7 +51,7 @@ impl fmt::Debug for SystemTime {\n }\n \n impl Timespec {\n-    const fn zero() -> Timespec {\n+    pub const fn zero() -> Timespec {\n         Timespec { tv_sec: 0, tv_nsec: 0 }\n     }\n \n@@ -125,6 +125,7 @@ impl Timespec {\n         Some(Timespec::new(secs, nsec as i64))\n     }\n \n+    #[allow(dead_code)]\n     pub fn to_timespec(&self) -> Option<libc::timespec> {\n         Some(libc::timespec {\n             tv_sec: self.tv_sec.try_into().ok()?,"}, {"sha": "1af1410d4bb60ae54d9ecbdd320d27bf16478ba5", "filename": "src/doc/rustc/src/platform-support/nvptx64-nvidia-cuda.md", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnvptx64-nvidia-cuda.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnvptx64-nvidia-cuda.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fnvptx64-nvidia-cuda.md?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,58 @@\n+# `nvptx64-nvidia-cuda`\n+\n+**Tier: 2**\n+\n+This is the target meant for deploying code for Nvidia\u00ae accelerators based on their CUDA\n+platform.\n+\n+## Target maintainers\n+\n+- Riccardo D'Ambrosio, https://github.com/RDambrosio016\n+- Kjetil Kjeka, https://github.com/kjetilkjeka\n+\n+<!-- FIXME: fill this out\n+\n+## Requirements\n+\n+Does the target support host tools, or only cross-compilation? Does the target\n+support std, or alloc (either with a default allocator, or if the user supplies\n+an allocator)?\n+\n+Document the expectations of binaries built for the target. Do they assume\n+specific minimum features beyond the baseline of the CPU/environment/etc? What\n+version of the OS or environment do they expect?\n+\n+Are there notable `#[target_feature(...)]` or `-C target-feature=` values that\n+programs may wish to use?\n+\n+What calling convention does `extern \"C\"` use on the target?\n+\n+What format do binaries use by default? ELF, PE, something else?\n+\n+## Building the target\n+\n+If Rust doesn't build the target by default, how can users build it? Can users\n+just add it to the `target` list in `config.toml`?\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+Does the target support running binaries, or do binaries have varying\n+expectations that prevent having a standard way to run them? If users can run\n+binaries, can they do so in some common emulator, or do they need native\n+hardware? Does the target support running the Rust testsuite?\n+\n+## Cross-compilation toolchains and C code\n+\n+Does the target support C code? If so, what toolchain target should users use\n+to build compatible C code? (This may match the target triple, or it may be a\n+toolchain for a different target triple, potentially with specific options or\n+caveats.)\n+\n+-->"}, {"sha": "528180288de6a5175eeb2af2b5c923846fb086a1", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -596,9 +596,11 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             |buf: &mut Buffer| {\n                 write!(\n                     buf,\n-                    \"<script defer src=\\\"{}settings{}.js\\\"></script>\",\n-                    page.static_root_path.unwrap_or(\"\"),\n-                    page.resource_suffix\n+                    \"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" \\\n+                        href=\\\"{root_path}settings{suffix}.css\\\">\\\n+                    <script defer src=\\\"{root_path}settings{suffix}.js\\\"></script>\",\n+                    root_path = page.static_root_path.unwrap_or(\"\"),\n+                    suffix = page.resource_suffix,\n                 )\n             },\n             &self.shared.style_files,"}, {"sha": "07588748ad68ef814251ca5ba30d5b43198b4f94", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -56,38 +56,6 @@\n \tposition: absolute;\n }\n \n-.select-wrapper {\n-\tfloat: right;\n-\tposition: relative;\n-\theight: 27px;\n-\tmin-width: 25%;\n-}\n-\n-.select-wrapper select {\n-\tappearance: none;\n-\t-moz-appearance: none;\n-\t-webkit-appearance: none;\n-\tbackground: none;\n-\tborder: 2px solid #ccc;\n-\tpadding-right: 28px;\n-\twidth: 100%;\n-}\n-\n-.select-wrapper img {\n-\tpointer-events: none;\n-\tposition: absolute;\n-\tright: 0;\n-\tbottom: 0;\n-\tbackground: #ccc;\n-\theight: 100%;\n-\twidth: 28px;\n-\tpadding: 0px 4px;\n-}\n-\n-.select-wrapper select option {\n-\tcolor: initial;\n-}\n-\n .slider {\n \tposition: absolute;\n \tcursor: pointer;\n@@ -96,7 +64,6 @@\n \tright: 0;\n \tbottom: 0;\n \tbackground-color: #ccc;\n-\t-webkit-transition: .3s;\n \ttransition: .3s;\n }\n \n@@ -108,7 +75,6 @@\n \tleft: 4px;\n \tbottom: 4px;\n \tbackground-color: white;\n-\t-webkit-transition: .3s;\n \ttransition: .3s;\n }\n \n@@ -121,8 +87,6 @@ input:focus + .slider {\n }\n \n input:checked + .slider:before {\n-\t-webkit-transform: translateX(19px);\n-\t-ms-transform: translateX(19px);\n \ttransform: translateX(19px);\n }\n "}, {"sha": "6a46e1e07b1a8154428b88f88a60209319b609a6", "filename": "src/test/mir-opt/inline/dyn-trait.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,35 @@\n+#![crate_type = \"lib\"]\n+\n+use std::fmt::Debug;\n+\n+pub trait Cache {\n+    type V: Debug;\n+\n+    fn store_nocache(&self);\n+}\n+\n+pub trait Query {\n+    type V;\n+    type C: Cache<V = Self::V>;\n+\n+    fn cache<T>(s: &T) -> &Self::C;\n+}\n+\n+// EMIT_MIR dyn_trait.mk_cycle.Inline.diff\n+#[inline(always)]\n+pub fn mk_cycle<V: Debug>(c: &dyn Cache<V = V>) {\n+    c.store_nocache()\n+}\n+\n+// EMIT_MIR dyn_trait.try_execute_query.Inline.diff\n+#[inline(always)]\n+pub fn try_execute_query<C: Cache>(c: &C) {\n+    mk_cycle(c)\n+}\n+\n+// EMIT_MIR dyn_trait.get_query.Inline.diff\n+#[inline(always)]\n+pub fn get_query<Q: Query, T>(t: &T) {\n+    let c = Q::cache(t);\n+    try_execute_query(c)\n+}"}, {"sha": "953d7b85c5ba728ba5971ad94f0252541b84b5db", "filename": "src/test/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,62 @@\n+- // MIR for `get_query` before Inline\n++ // MIR for `get_query` after Inline\n+  \n+  fn get_query(_1: &T) -> () {\n+      debug t => _1;                       // in scope 0 at $DIR/dyn-trait.rs:32:31: 32:32\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:32:38: 32:38\n+      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn-trait.rs:33:9: 33:10\n+      let mut _3: &T;                      // in scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn-trait.rs:34:23: 34:24\n+      scope 1 {\n+          debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:33:9: 33:10\n++         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn-trait.rs:34:5: 34:25\n++             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:26:36: 26:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n++                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:20:27: 20:28\n++                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++             }\n++         }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:33:9: 33:10\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+          _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn-trait.rs:33:13: 33:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/dyn-trait.rs:33:13: 33:21\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: for<'r> fn(&'r T) -> &'r <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:23: 33:24\n+          StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24\n+          _4 = &(*_2);                     // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24\n+-         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn-trait.rs:34:5: 34:25\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22\n+-                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n++                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n++         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:21: 21:22\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:15: 27:16\n+          StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:24: 34:25\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:35:1: 35:2\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:35:2: 35:2\n+      }\n+  }\n+  "}, {"sha": "27309328052c758d3d743e1ca4e9cf41fdcf76bc", "filename": "src/test/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `mk_cycle` before Inline\n++ // MIR for `mk_cycle` after Inline\n+  \n+  fn mk_cycle(_1: &dyn Cache<V = V>) -> () {\n+      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:20:27: 20:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:20:49: 20:49\n+      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+          _2 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/dyn-trait.rs:21:7: 21:20\n+                                           // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:21: 21:22\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:22:2: 22:2\n+      }\n+  }\n+  "}, {"sha": "93bba58825d205830c894ddd4a4012390167e00c", "filename": "src/test/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `try_execute_query` before Inline\n++ // MIR for `try_execute_query` after Inline\n+  \n+  fn try_execute_query(_1: &C) -> () {\n+      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:26:36: 26:37\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:26:43: 26:43\n+      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+      let mut _3: &C;                      // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n++     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n++         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:20:27: 20:28\n++         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+-         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:27:5: 27:16\n++         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13\n+-                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n++                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n++         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:21: 21:22\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:15: 27:16\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:28:2: 28:2\n+      }\n+  }\n+  "}, {"sha": "18270264266f424ff792987660e6a7415ced2e39", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -65,3 +65,8 @@ assert: \".setting-line.hidden #theme\"\n // We check their text as well.\n assert-text: (\"#preferred-dark-theme .setting-name\", \"Preferred dark theme\")\n assert-text: (\"#preferred-light-theme .setting-name\", \"Preferred light theme\")\n+\n+// Now we go to the settings page to check that the CSS is loaded as expected.\n+goto: file://|DOC_PATH|/settings.html\n+wait-for: \"#settings\"\n+assert-css: (\".setting-line .toggle\", {\"width\": \"45px\", \"margin-right\": \"20px\"})"}, {"sha": "f1144db44ca445c86d63664ae577aaf2e27228c0", "filename": "src/test/ui/associated-consts/issue-88599-ref-self.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-88599-ref-self.rs?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait First {\n+    const CONST: usize;\n+}\n+pub trait Second {}\n+\n+impl<'a> First for dyn Second\n+where\n+    &'a Self: First,\n+{\n+    const CONST: usize = <&Self>::CONST;\n+}\n+\n+trait Third: First\n+where\n+    [u8; Self::CONST]:\n+{\n+    const VAL: [u8; Self::CONST] = [0; Self::CONST];\n+}\n+\n+fn main() {}"}, {"sha": "1c6df0da60c0e773d487de067bf3322a5ca45f70", "filename": "src/test/ui/issues/issue-37725.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37725.rs?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -1,4 +1,6 @@\n // build-pass\n+// compiler-opts: -Zmir-opt-level=2\n+\n #![allow(dead_code)]\n trait Foo {\n     fn foo(&self);"}, {"sha": "40829f53709e52915879f039e98064591318b02d", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.inline.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.inline.stderr?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,46 @@\n+warning: trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:20:29\n+   |\n+LL |     for<'any> &'any mut (): Clone,\n+   |                             ^^^^^\n+   |\n+   = note: `#[warn(trivial_bounds)]` on by default\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:28:21\n+   |\n+LL | struct S where i32: Foo;\n+   |                     ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:31:28\n+   |\n+LL | impl Foo for () where i32: Foo {\n+   |                            ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:40:19\n+   |\n+LL | fn f() where i32: Foo {\n+   |                   ^^^\n+\n+warning: trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:48:28\n+   |\n+LL | fn g() where &'static str: Foo {\n+   |                            ^^^\n+\n+warning: trait bound String: Neg does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:57:13\n+   |\n+LL |     String: ::std::ops::Neg<Output = String>,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: trait bound i32: Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:65:10\n+   |\n+LL |     i32: Iterator,\n+   |          ^^^^^^^^\n+\n+warning: 7 warnings emitted\n+"}, {"sha": "40829f53709e52915879f039e98064591318b02d", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.no-opt.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.no-opt.stderr?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,46 @@\n+warning: trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:20:29\n+   |\n+LL |     for<'any> &'any mut (): Clone,\n+   |                             ^^^^^\n+   |\n+   = note: `#[warn(trivial_bounds)]` on by default\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:28:21\n+   |\n+LL | struct S where i32: Foo;\n+   |                     ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:31:28\n+   |\n+LL | impl Foo for () where i32: Foo {\n+   |                            ^^^\n+\n+warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:40:19\n+   |\n+LL | fn f() where i32: Foo {\n+   |                   ^^^\n+\n+warning: trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:48:28\n+   |\n+LL | fn g() where &'static str: Foo {\n+   |                            ^^^\n+\n+warning: trait bound String: Neg does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:57:13\n+   |\n+LL |     String: ::std::ops::Neg<Output = String>,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: trait bound i32: Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/issue-73021-impossible-inline.rs:65:10\n+   |\n+LL |     i32: Iterator,\n+   |          ^^^^^^^^\n+\n+warning: 7 warnings emitted\n+"}, {"sha": "ab6677e911b24b944e1d5e576e672abb70f5e31b", "filename": "src/test/ui/trivial-bounds/issue-73021-impossible-inline.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6499fd9987a2b338892f56cea26c39a6fe64d18/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Fissue-73021-impossible-inline.rs?ref=c6499fd9987a2b338892f56cea26c39a6fe64d18", "patch": "@@ -0,0 +1,71 @@\n+// build-pass\n+// revisions: no-opt inline\n+// [inline]compile-flags: -Zmir-opt-level=3 --emit=mir\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+\n+trait Foo {\n+    fn test(&self);\n+}\n+\n+fn foo<'a>(s: &'a mut ())\n+where\n+    &'a mut (): Foo,\n+{\n+    s.test();\n+}\n+\n+fn clone(it: &mut ()) -> &mut ()\n+where\n+    for<'any> &'any mut (): Clone,\n+    //~^ WARN trait bound for<'any> &'any mut (): Clone does not depend on any type or lifetime parameters\n+{\n+    it.clone()\n+}\n+\n+fn generic_function<X: Foo>(x: X) {}\n+\n+struct S where i32: Foo;\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+\n+impl Foo for () where i32: Foo {\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+    fn test(&self) {\n+        3i32.test();\n+        Foo::test(&4i32);\n+        generic_function(5i32);\n+    }\n+}\n+\n+fn f() where i32: Foo {\n+//~^ WARN trait bound i32: Foo does not depend on any type or lifetime parameters\n+    let s = S;\n+    3i32.test();\n+    Foo::test(&4i32);\n+    generic_function(5i32);\n+}\n+\n+fn g() where &'static str: Foo {\n+//~^ WARN trait bound &'static str: Foo does not depend on any type or lifetime parameters\n+    \"Foo\".test();\n+    Foo::test(&\"Foo\");\n+    generic_function(\"Foo\");\n+}\n+\n+fn use_op(s: String) -> String\n+where\n+    String: ::std::ops::Neg<Output = String>,\n+//~^ WARN trait bound String: Neg does not depend on any type or lifetime parameters\n+{\n+    -s\n+}\n+\n+fn use_for()\n+where\n+    i32: Iterator,\n+//~^ WARN trait bound i32: Iterator does not depend on any type or lifetime parameters\n+{\n+    for _ in 2i32 {}\n+}\n+\n+fn main() {}"}]}