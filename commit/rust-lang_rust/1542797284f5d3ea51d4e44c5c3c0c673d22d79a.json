{"sha": "1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NDI3OTcyODRmNWQzZWE1MWQ0ZTQ0YzVjM2MwYzY3M2QyMmQ3OWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-26T15:05:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-26T15:05:09Z"}, "message": "Merge #6638\n\n6638: Use named fields in `ExpandResult` r=jonas-schievink a=jonas-schievink\n\nbors r+ :robot: \n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "58b0150a27a6b35000d745807461100786952e93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58b0150a27a6b35000d745807461100786952e93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfv8QlCRBK7hj4Ov3rIwAAdHIIAE7f9TgwxmLF2VgRTL826h1N\nLMUG1U6+qNUWTJ82YJ8hoyJMVzhgatMk04sMvqHURQO3QirOhLUmn82Oaxi34oyV\nZ/UfS1ipJvPqcdDYocUFqxHHBt4W38k/1d81ct02zYLq5o3IE1Ce+zpmjsmhkFBk\nKcMaCf7RFtFvcYjXpPf5byOvs/icE4H60Aixknv7c5unWYgwFqYpawn3M8ifoQNv\n6jbgNcMBP8X7hSJ0ot2XmQEu+TmDU2msaUb74rTBxaHKe59X8SGw0wwmZTyoRLoj\nqueEuYuRP14Q33ac7RjKBm261elzjEVR5225o/6x5wA/p/a9F9/1A0ps3Ik3vA0=\n=57I8\n-----END PGP SIGNATURE-----\n", "payload": "tree 58b0150a27a6b35000d745807461100786952e93\nparent 0bcd8147ec08db2a94dd2a3068a527ba6c47a4cd\nparent c784c8ec766edf4c7ab558f71d3f87e6c7c870b9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606403109 +0000\ncommitter GitHub <noreply@github.com> 1606403109 +0000\n\nMerge #6638\n\n6638: Use named fields in `ExpandResult` r=jonas-schievink a=jonas-schievink\n\nbors r+ :robot: \n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "html_url": "https://github.com/rust-lang/rust/commit/1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bcd8147ec08db2a94dd2a3068a527ba6c47a4cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcd8147ec08db2a94dd2a3068a527ba6c47a4cd", "html_url": "https://github.com/rust-lang/rust/commit/0bcd8147ec08db2a94dd2a3068a527ba6c47a4cd"}, {"sha": "c784c8ec766edf4c7ab558f71d3f87e6c7c870b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c784c8ec766edf4c7ab558f71d3f87e6c7c870b9", "html_url": "https://github.com/rust-lang/rust/commit/c784c8ec766edf4c7ab558f71d3f87e6c7c870b9"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "3deac1711e652c02c56acfa0cd53b68e99ff0bee", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "patch": "@@ -242,7 +242,7 @@ fn macro_expand_with_arg(\n         Some(it) => it,\n         None => return MacroResult::error(\"Fail to find macro definition\".into()),\n     };\n-    let ExpandResult(tt, err) = macro_rules.0.expand(db, lazy_id, &macro_arg.0);\n+    let ExpandResult { value: tt, err } = macro_rules.0.expand(db, lazy_id, &macro_arg.0);\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n     if count > 262144 {"}, {"sha": "183e3b9888c4effbec838ef26a83bb748e6dd1fb", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "patch": "@@ -246,33 +246,35 @@ fn validate(pattern: &tt::Subtree) -> Result<(), ParseError> {\n     Ok(())\n }\n \n-#[derive(Debug)]\n-pub struct ExpandResult<T>(pub T, pub Option<ExpandError>);\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct ExpandResult<T> {\n+    pub value: T,\n+    pub err: Option<ExpandError>,\n+}\n \n impl<T> ExpandResult<T> {\n-    pub fn ok(t: T) -> ExpandResult<T> {\n-        ExpandResult(t, None)\n+    pub fn ok(value: T) -> Self {\n+        Self { value, err: None }\n     }\n \n-    pub fn only_err(err: ExpandError) -> ExpandResult<T>\n+    pub fn only_err(err: ExpandError) -> Self\n     where\n         T: Default,\n     {\n-        ExpandResult(Default::default(), Some(err))\n+        Self { value: Default::default(), err: Some(err) }\n     }\n \n     pub fn map<U>(self, f: impl FnOnce(T) -> U) -> ExpandResult<U> {\n-        ExpandResult(f(self.0), self.1)\n+        ExpandResult { value: f(self.value), err: self.err }\n     }\n \n     pub fn result(self) -> Result<T, ExpandError> {\n-        self.1.map(Err).unwrap_or(Ok(self.0))\n+        self.err.map(Err).unwrap_or(Ok(self.value))\n     }\n }\n \n impl<T: Default> From<Result<T, ExpandError>> for ExpandResult<T> {\n-    fn from(result: Result<T, ExpandError>) -> ExpandResult<T> {\n-        result\n-            .map_or_else(|e| ExpandResult(Default::default(), Some(e)), |it| ExpandResult(it, None))\n+    fn from(result: Result<T, ExpandError>) -> Self {\n+        result.map_or_else(|e| Self::only_err(e), |it| Self::ok(it))\n     }\n }"}, {"sha": "97bce0536f49018367dd8d9092535d2c883a3865", "filename": "crates/mbe/src/mbe_expander.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fmbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fmbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander.rs?ref=1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "patch": "@@ -28,10 +28,10 @@ fn expand_rules(rules: &[crate::Rule], input: &tt::Subtree) -> ExpandResult<tt::\n             // If we find a rule that applies without errors, we're done.\n             // Unconditionally returning the transcription here makes the\n             // `test_repeat_bad_var` test fail.\n-            let ExpandResult(res, transcribe_err) =\n+            let ExpandResult { value, err: transcribe_err } =\n                 transcriber::transcribe(&rule.rhs, &new_match.bindings);\n             if transcribe_err.is_none() {\n-                return ExpandResult::ok(res);\n+                return ExpandResult::ok(value);\n             }\n         }\n         // Use the rule if we matched more tokens, or had fewer errors\n@@ -47,11 +47,11 @@ fn expand_rules(rules: &[crate::Rule], input: &tt::Subtree) -> ExpandResult<tt::\n     }\n     if let Some((match_, rule)) = match_ {\n         // if we got here, there was no match without errors\n-        let ExpandResult(result, transcribe_err) =\n+        let ExpandResult { value, err: transcribe_err } =\n             transcriber::transcribe(&rule.rhs, &match_.bindings);\n-        ExpandResult(result, match_.err.or(transcribe_err))\n+        ExpandResult { value, err: match_.err.or(transcribe_err) }\n     } else {\n-        ExpandResult(tt::Subtree::default(), Some(ExpandError::NoMatchingRule))\n+        ExpandResult::only_err(ExpandError::NoMatchingRule)\n     }\n }\n \n@@ -143,7 +143,10 @@ mod tests {\n     }\n \n     fn assert_err(macro_body: &str, invocation: &str, err: ExpandError) {\n-        assert_eq!(expand_first(&create_rules(&format_macro(macro_body)), invocation).1, Some(err));\n+        assert_eq!(\n+            expand_first(&create_rules(&format_macro(macro_body)), invocation).err,\n+            Some(err)\n+        );\n     }\n \n     fn format_macro(macro_body: &str) -> String {"}, {"sha": "3f844589778ae9ff50272bf0366b7ae10718e3ba", "filename": "crates/mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "patch": "@@ -158,7 +158,8 @@ fn match_subtree(\n                         continue;\n                     }\n                 };\n-                let ExpandResult(matched, match_err) = match_meta_var(kind.as_str(), src);\n+                let ExpandResult { value: matched, err: match_err } =\n+                    match_meta_var(kind.as_str(), src);\n                 match matched {\n                     Some(fragment) => {\n                         res.bindings.inner.insert(name.clone(), Binding::Fragment(fragment));\n@@ -342,17 +343,17 @@ impl<'a> TtIter<'a> {\n                 token_trees: res.into_iter().cloned().collect(),\n             })),\n         };\n-        ExpandResult(res, err)\n+        ExpandResult { value: res, err }\n     }\n \n     pub(crate) fn eat_vis(&mut self) -> Option<tt::TokenTree> {\n         let mut fork = self.clone();\n         match fork.expect_fragment(Visibility) {\n-            ExpandResult(tt, None) => {\n+            ExpandResult { value: tt, err: None } => {\n                 *self = fork;\n                 tt\n             }\n-            ExpandResult(_, Some(_)) => None,\n+            ExpandResult { value: _, err: Some(_) } => None,\n         }\n     }\n }"}, {"sha": "616119ba9c8b879874fa8871f05283f8cabe33c8", "filename": "crates/mbe/src/mbe_expander/transcriber.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1542797284f5d3ea51d4e44c5c3c0c673d22d79a/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs?ref=1542797284f5d3ea51d4e44c5c3c0c673d22d79a", "patch": "@@ -93,25 +93,26 @@ fn expand_subtree(\n         match op {\n             Op::TokenTree(tt @ tt::TokenTree::Leaf(..)) => arena.push(tt.clone()),\n             Op::TokenTree(tt::TokenTree::Subtree(tt)) => {\n-                let ExpandResult(tt, e) = expand_subtree(ctx, tt, arena);\n+                let ExpandResult { value: tt, err: e } = expand_subtree(ctx, tt, arena);\n                 err = err.or(e);\n                 arena.push(tt.into());\n             }\n             Op::Var { name, kind: _ } => {\n-                let ExpandResult(fragment, e) = expand_var(ctx, name);\n+                let ExpandResult { value: fragment, err: e } = expand_var(ctx, name);\n                 err = err.or(e);\n                 push_fragment(arena, fragment);\n             }\n             Op::Repeat { subtree, kind, separator } => {\n-                let ExpandResult(fragment, e) = expand_repeat(ctx, subtree, kind, separator, arena);\n+                let ExpandResult { value: fragment, err: e } =\n+                    expand_repeat(ctx, subtree, kind, separator, arena);\n                 err = err.or(e);\n                 push_fragment(arena, fragment)\n             }\n         }\n     }\n     // drain the elements added in this instance of expand_subtree\n     let tts = arena.drain(start_elements..arena.len()).collect();\n-    ExpandResult(tt::Subtree { delimiter: template.delimiter, token_trees: tts }, err)\n+    ExpandResult { value: tt::Subtree { delimiter: template.delimiter, token_trees: tts }, err }\n }\n \n fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr) -> ExpandResult<Fragment> {\n@@ -152,7 +153,7 @@ fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr) -> ExpandResult<Fragment> {\n         ExpandResult::ok(Fragment::Tokens(tt))\n     } else {\n         ctx.bindings.get(&v, &mut ctx.nesting).map_or_else(\n-            |e| ExpandResult(Fragment::Tokens(tt::TokenTree::empty()), Some(e)),\n+            |e| ExpandResult { value: Fragment::Tokens(tt::TokenTree::empty()), err: Some(e) },\n             |b| ExpandResult::ok(b.clone()),\n         )\n     }\n@@ -174,7 +175,7 @@ fn expand_repeat(\n     let mut counter = 0;\n \n     loop {\n-        let ExpandResult(mut t, e) = expand_subtree(ctx, template, arena);\n+        let ExpandResult { value: mut t, err: e } = expand_subtree(ctx, template, arena);\n         let nesting_state = ctx.nesting.last_mut().unwrap();\n         if nesting_state.at_end || !nesting_state.hit {\n             break;\n@@ -234,7 +235,10 @@ fn expand_repeat(\n     let tt = tt::Subtree { delimiter: None, token_trees: buf }.into();\n \n     if RepeatKind::OneOrMore == kind && counter == 0 {\n-        return ExpandResult(Fragment::Tokens(tt), Some(ExpandError::UnexpectedToken));\n+        return ExpandResult {\n+            value: Fragment::Tokens(tt),\n+            err: Some(ExpandError::UnexpectedToken),\n+        };\n     }\n     ExpandResult::ok(Fragment::Tokens(tt))\n }"}]}