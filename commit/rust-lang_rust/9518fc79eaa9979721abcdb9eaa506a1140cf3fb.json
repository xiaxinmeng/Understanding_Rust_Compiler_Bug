{"sha": "9518fc79eaa9979721abcdb9eaa506a1140cf3fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MThmYzc5ZWFhOTk3OTcyMWFiY2RiOWVhYTUwNmExMTQwY2YzZmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-30T17:39:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-30T17:39:28Z"}, "message": "cargo: Fix some lack of knowledge of basic algebraic identities", "tree": {"sha": "0c78930df57c3b619bd4065b1ff36c7825f814ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c78930df57c3b619bd4065b1ff36c7825f814ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9518fc79eaa9979721abcdb9eaa506a1140cf3fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9518fc79eaa9979721abcdb9eaa506a1140cf3fb", "html_url": "https://github.com/rust-lang/rust/commit/9518fc79eaa9979721abcdb9eaa506a1140cf3fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9518fc79eaa9979721abcdb9eaa506a1140cf3fb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e46f5fc0e78f5855e8870a6e3eb2a0a7e5ae50", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e46f5fc0e78f5855e8870a6e3eb2a0a7e5ae50", "html_url": "https://github.com/rust-lang/rust/commit/45e46f5fc0e78f5855e8870a6e3eb2a0a7e5ae50"}], "stats": {"total": 81, "additions": 12, "deletions": 69}, "files": [{"sha": "9131c07aa55370f63911a5551a7a5cd1fd76d4de", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9518fc79eaa9979721abcdb9eaa506a1140cf3fb/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9518fc79eaa9979721abcdb9eaa506a1140cf3fb/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=9518fc79eaa9979721abcdb9eaa506a1140cf3fb", "patch": "@@ -42,24 +42,9 @@ impl package : cmp::Ord {\n         if self.versions.lt(other.versions) { return true; }\n         return false;\n     }\n-    pure fn le(&&other: package) -> bool {\n-        if self.name.lt(other.name) { return true; }\n-        if other.name.lt(self.name) { return false; }\n-        if self.uuid.lt(other.uuid) { return true; }\n-        if other.uuid.lt(self.uuid) { return false; }\n-        if self.url.lt(other.url) { return true; }\n-        if other.url.lt(self.url) { return false; }\n-        if self.method.lt(other.method) { return true; }\n-        if other.method.lt(self.method) { return false; }\n-        if self.description.lt(other.description) { return true; }\n-        if other.description.lt(self.description) { return false; }\n-        if self.tags.lt(other.tags) { return true; }\n-        if other.tags.lt(self.tags) { return false; }\n-        if self.versions.le(other.versions) { return true; }\n-        return false;\n-    }\n-    pure fn ge(&&other: package) -> bool { !other.lt(self) }\n-    pure fn gt(&&other: package) -> bool { !other.le(self) }\n+    pure fn le(&&other: package) -> bool { !other.lt(self) }\n+    pure fn ge(&&other: package) -> bool { !self.lt(other) }\n+    pure fn gt(&&other: package) -> bool { other.lt(self)  }\n }\n \n type local_package = {"}, {"sha": "27b5979f5739407544be1bb891eba3d4fa868575", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9518fc79eaa9979721abcdb9eaa506a1140cf3fb/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9518fc79eaa9979721abcdb9eaa506a1140cf3fb/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=9518fc79eaa9979721abcdb9eaa506a1140cf3fb", "patch": "@@ -96,22 +96,9 @@ impl<A: Ord, B: Ord> (A, B): Ord {\n             }\n         }\n     }\n-    pure fn le(&&other: (A, B)) -> bool {\n-        match self {\n-            (self_a, self_b) => {\n-                match other {\n-                    (other_a, other_b) => {\n-                        if self_a.lt(other_a) { return true; }\n-                        if other_a.lt(self_a) { return false; }\n-                        if self_b.le(other_b) { return true; }\n-                        return false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    pure fn ge(&&other: (A, B)) -> bool { !other.lt(self) }\n-    pure fn gt(&&other: (A, B)) -> bool { !other.ge(self) }\n+    pure fn le(&&other: (A, B)) -> bool { !other.lt(self) }\n+    pure fn ge(&&other: (A, B)) -> bool { !self.lt(other) }\n+    pure fn gt(&&other: (A, B)) -> bool { other.lt(self)  }\n }\n \n impl<A: Eq, B: Eq, C: Eq> (A, B, C): Eq {\n@@ -149,24 +136,9 @@ impl<A: Ord, B: Ord, C: Ord> (A, B, C): Ord {\n             }\n         }\n     }\n-    pure fn le(&&other: (A, B, C)) -> bool {\n-        match self {\n-            (self_a, self_b, self_c) => {\n-                match other {\n-                    (other_a, other_b, other_c) => {\n-                        if self_a.lt(other_a) { return true; }\n-                        if other_a.lt(self_a) { return false; }\n-                        if self_b.lt(other_b) { return true; }\n-                        if other_b.lt(self_b) { return false; }\n-                        if self_c.le(other_c) { return true; }\n-                        return false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    pure fn ge(&&other: (A, B, C)) -> bool { !other.lt(self) }\n-    pure fn gt(&&other: (A, B, C)) -> bool { !other.ge(self) }\n+    pure fn le(&&other: (A, B, C)) -> bool { !other.lt(self) }\n+    pure fn ge(&&other: (A, B, C)) -> bool { !self.lt(other) }\n+    pure fn gt(&&other: (A, B, C)) -> bool { other.lt(self)  }\n }\n \n #[test]"}, {"sha": "baf6c7c8601cdbeb7575c07647f8e0f6869be134", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9518fc79eaa9979721abcdb9eaa506a1140cf3fb/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9518fc79eaa9979721abcdb9eaa506a1140cf3fb/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=9518fc79eaa9979721abcdb9eaa506a1140cf3fb", "patch": "@@ -1443,23 +1443,9 @@ pure fn lt<T: Ord>(a: &[T], b: &[T]) -> bool {\n     return a_len < b_len;\n }\n \n-pure fn le<T: Ord>(a: &[T], b: &[T]) -> bool {\n-    let (a_len, b_len) = (a.len(), b.len());\n-    let mut end = uint::min(&a_len, &b_len);\n-\n-    let mut i = 0;\n-    while i < end {\n-        let (c_a, c_b) = (&a[i], &b[i]);\n-        if *c_a < *c_b { return true; }\n-        if *c_a > *c_b { return false; }\n-        i += 1;\n-    }\n-\n-    return a_len <= b_len;\n-}\n-\n-pure fn ge<T: Ord>(a: &[T], b: &[T]) -> bool { !lt(b, a) }\n-pure fn gt<T: Ord>(a: &[T], b: &[T]) -> bool { !le(b, a) }\n+pure fn le<T: Ord>(a: &[T], b: &[T]) -> bool { !lt(b, a) }\n+pure fn ge<T: Ord>(a: &[T], b: &[T]) -> bool { !lt(a, b) }\n+pure fn gt<T: Ord>(a: &[T], b: &[T]) -> bool { lt(b, a)  }\n \n impl<T: Ord> &[T]: Ord {\n     #[inline(always)]"}]}