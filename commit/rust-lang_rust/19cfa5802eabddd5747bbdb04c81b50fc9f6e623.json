{"sha": "19cfa5802eabddd5747bbdb04c81b50fc9f6e623", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Y2ZhNTgwMmVhYmRkZDU3NDdiYmRiMDRjODFiNTBmYzlmNmU2MjM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-06T21:58:15Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Simplify", "tree": {"sha": "51ad6df2fdd89084f04b081d375cb29679eda9ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ad6df2fdd89084f04b081d375cb29679eda9ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19cfa5802eabddd5747bbdb04c81b50fc9f6e623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19cfa5802eabddd5747bbdb04c81b50fc9f6e623", "html_url": "https://github.com/rust-lang/rust/commit/19cfa5802eabddd5747bbdb04c81b50fc9f6e623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6badf705b380bf8a66c5a1d8349365cab7a8ed4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6badf705b380bf8a66c5a1d8349365cab7a8ed4d", "html_url": "https://github.com/rust-lang/rust/commit/6badf705b380bf8a66c5a1d8349365cab7a8ed4d"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "066d589af89945ef9004036cacc7463af38e9867", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=19cfa5802eabddd5747bbdb04c81b50fc9f6e623", "patch": "@@ -141,7 +141,7 @@ pub fn resolve_completion_edits(\n     position: FilePosition,\n     full_import_path: &str,\n     imported_name: &str,\n-) -> Option<TextEdit> {\n+) -> Option<Vec<TextEdit>> {\n     let ctx = CompletionContext::new(db, position, config)?;\n     let anchor = ctx.name_ref_syntax.as_ref()?;\n     let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n@@ -156,7 +156,9 @@ pub fn resolve_completion_edits(\n         })\n         .find(|mod_path| mod_path.to_string() == full_import_path)?;\n \n-    ImportEdit { import_path, import_scope, merge_behaviour: config.merge }.to_text_edit()\n+    ImportEdit { import_path, import_scope, merge_behaviour: config.merge }\n+        .to_text_edit()\n+        .map(|edit| vec![edit])\n }\n \n #[cfg(test)]"}, {"sha": "71068cac28aa9021c25784de64d6bfc8429aa7bd", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=19cfa5802eabddd5747bbdb04c81b50fc9f6e623", "patch": "@@ -487,7 +487,6 @@ impl Analysis {\n                     imported_name,\n                 )\n             })?\n-            .map(|edit| vec![edit])\n             .unwrap_or_default())\n     }\n "}, {"sha": "89c7fd2c7ba2048d3818c635a890f7d69fa0d775", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=19cfa5802eabddd5747bbdb04c81b50fc9f6e623", "patch": "@@ -8,9 +8,8 @@ use std::{\n };\n \n use ide::{\n-    CompletionConfig, CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction,\n-    HoverGotoTypeData, NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n-    TextEdit,\n+    CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData,\n+    NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n@@ -578,14 +577,11 @@ pub(crate) fn handle_completion(\n             let mut new_completion_items =\n                 to_proto::completion_item(&line_index, line_endings, item.clone());\n \n-            for new_item in &mut new_completion_items {\n-                let _ = fill_resolve_data(\n-                    &mut new_item.data,\n-                    &item,\n-                    &snap.config.completion,\n-                    &text_document_position,\n-                )\n-                .take();\n+            if snap.config.completion.resolve_additional_edits_lazily() {\n+                for new_item in &mut new_completion_items {\n+                    let _ = fill_resolve_data(&mut new_item.data, &item, &text_document_position)\n+                        .take();\n+                }\n             }\n \n             new_completion_items\n@@ -600,12 +596,12 @@ pub(crate) fn handle_completion_resolve(\n     snap: GlobalStateSnapshot,\n     mut original_completion: CompletionItem,\n ) -> Result<CompletionItem> {\n-    let _p = profile::span(\"handle_resolve_completion\");\n+    let _p = profile::span(\"handle_completion_resolve\");\n \n     if !all_edits_are_disjoint(&original_completion, &[]) {\n         return Err(LspError::new(\n             ErrorCode::InvalidParams as i32,\n-            \"Received a completion with disjoint edits\".into(),\n+            \"Received a completion with overlapping edits, this is not LSP-compliant\".into(),\n         )\n         .into());\n     }\n@@ -635,7 +631,7 @@ pub(crate) fn handle_completion_resolve(\n     let line_endings = snap.file_line_endings(file_id);\n     let offset = from_proto::offset(&line_index, resolve_data.position.position);\n \n-    let mut additional_edits = snap\n+    let additional_edits = snap\n         .analysis\n         .resolve_completion_edits(\n             &snap.config.completion,\n@@ -652,13 +648,14 @@ pub(crate) fn handle_completion_resolve(\n     if !all_edits_are_disjoint(&original_completion, &additional_edits) {\n         return Err(LspError::new(\n             ErrorCode::InternalError as i32,\n-            \"Import edit is not disjoint with the original completion edits\".into(),\n+            \"Import edit overlaps with the original completion edits, this is not LSP-compliant\"\n+                .into(),\n         )\n         .into());\n     }\n \n     if let Some(original_additional_edits) = original_completion.additional_text_edits.as_mut() {\n-        original_additional_edits.extend(additional_edits.drain(..))\n+        original_additional_edits.extend(additional_edits.into_iter())\n     } else {\n         original_completion.additional_text_edits = Some(additional_edits);\n     }\n@@ -1634,22 +1631,19 @@ struct CompletionResolveData {\n fn fill_resolve_data(\n     resolve_data: &mut Option<serde_json::Value>,\n     item: &ide::CompletionItem,\n-    completion_config: &CompletionConfig,\n     position: &TextDocumentPositionParams,\n ) -> Option<()> {\n-    if completion_config.resolve_additional_edits_lazily() {\n-        let import_edit = item.import_to_add()?;\n-        let full_import_path = import_edit.import_path.to_string();\n-        let imported_name = import_edit.import_path.segments.clone().pop()?.to_string();\n-\n-        *resolve_data = Some(\n-            to_value(CompletionResolveData {\n-                position: position.to_owned(),\n-                full_import_path,\n-                imported_name,\n-            })\n-            .unwrap(),\n-        )\n-    }\n+    let import_edit = item.import_to_add()?;\n+    let full_import_path = import_edit.import_path.to_string();\n+    let imported_name = import_edit.import_path.segments.clone().pop()?.to_string();\n+\n+    *resolve_data = Some(\n+        to_value(CompletionResolveData {\n+            position: position.to_owned(),\n+            full_import_path,\n+            imported_name,\n+        })\n+        .unwrap(),\n+    );\n     Some(())\n }"}, {"sha": "60c12e4e2eacfa9cb5a0cbc1113dd4ff7fc72264", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cfa5802eabddd5747bbdb04c81b50fc9f6e623/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=19cfa5802eabddd5747bbdb04c81b50fc9f6e623", "patch": "@@ -129,7 +129,8 @@ pub(crate) fn apply_document_changes(\n     }\n }\n \n-/// Checks that the edits inside the completion and the additional edits are disjoint.\n+/// Checks that the edits inside the completion and the additional edits do not overlap.\n+/// LSP explicitly forbits the additional edits to overlap both with the main edit and themselves.\n pub(crate) fn all_edits_are_disjoint(\n     completion: &lsp_types::CompletionItem,\n     additional_edits: &[lsp_types::TextEdit],\n@@ -150,7 +151,10 @@ pub(crate) fn all_edits_are_disjoint(\n     };\n     edit_ranges.extend(additional_edits.iter().map(|edit| edit.range));\n     edit_ranges.sort_by_key(|range| (range.start, range.end));\n-    edit_ranges.iter().zip(edit_ranges.iter().skip(1)).all(|(l, r)| l.end <= r.start)\n+    edit_ranges\n+        .iter()\n+        .zip(edit_ranges.iter().skip(1))\n+        .all(|(previous, next)| previous.end <= next.start)\n }\n \n #[cfg(test)]"}]}