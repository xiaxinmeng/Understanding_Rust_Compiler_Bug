{"sha": "022d031b7fe9266ad3dd320c729989e8bf495b67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMmQwMzFiN2ZlOTI2NmFkM2RkMzIwYzcyOTk4OWU4YmY0OTViNjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-14T11:56:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T11:56:01Z"}, "message": "Merge #7266\n\n7266: Make printin the backtrace more convenient r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e8467dbbdcc43f4b119ea8f4485d0738a5a2577d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8467dbbdcc43f4b119ea8f4485d0738a5a2577d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/022d031b7fe9266ad3dd320c729989e8bf495b67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgADFRCRBK7hj4Ov3rIwAAdHIIAGBv/xRzKf/ZXnirUZeKu0Ea\n70Qlxb9HjEWZLY4AsiCDK+WKxjx+8L+5uhCAhTOM05kaOklT5hzmuR5XI61PlGuo\ntivrpTjgJ7Zlu75XnrfIPX5yvcAHkWFJuKuQgOXShqUJGvUjsR4shtX4Od5QPWI2\nb+A/cpWPUiw22rRLq6VybkV4Ey7BAXfuulBjeZaj0fbaa5Kqcoqs0/vQ+Ol8NXtm\nRFNLebw72z2tpSbx4MK5VGOgpt/PHmvuOvNdtgs/B7Wc6u4xZjFWZdWFi8AVihCf\n/ITkdQ8zS727WP4GUFX8g0+m0hvd7Qx8l2kKVR9RoaY3LPD7/x4uwE47S0IWQh0=\n=iDpY\n-----END PGP SIGNATURE-----\n", "payload": "tree e8467dbbdcc43f4b119ea8f4485d0738a5a2577d\nparent 947850c2d9e2fa832516e3486efa0dd9c4d30e73\nparent 865e05b5b47d3e27e8fe4458662e751e492a0f51\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610625361 +0000\ncommitter GitHub <noreply@github.com> 1610625361 +0000\n\nMerge #7266\n\n7266: Make printin the backtrace more convenient r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/022d031b7fe9266ad3dd320c729989e8bf495b67", "html_url": "https://github.com/rust-lang/rust/commit/022d031b7fe9266ad3dd320c729989e8bf495b67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/022d031b7fe9266ad3dd320c729989e8bf495b67/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "947850c2d9e2fa832516e3486efa0dd9c4d30e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/947850c2d9e2fa832516e3486efa0dd9c4d30e73", "html_url": "https://github.com/rust-lang/rust/commit/947850c2d9e2fa832516e3486efa0dd9c4d30e73"}, {"sha": "865e05b5b47d3e27e8fe4458662e751e492a0f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/865e05b5b47d3e27e8fe4458662e751e492a0f51", "html_url": "https://github.com/rust-lang/rust/commit/865e05b5b47d3e27e8fe4458662e751e492a0f51"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "ae99b966ea137409de0422f80450efec44731d83", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022d031b7fe9266ad3dd320c729989e8bf495b67/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/022d031b7fe9266ad3dd320c729989e8bf495b67/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=022d031b7fe9266ad3dd320c729989e8bf495b67", "patch": "@@ -1197,7 +1197,6 @@ name = \"profile\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena\",\n- \"backtrace\",\n  \"cfg-if 1.0.0\",\n  \"libc\",\n  \"once_cell\",\n@@ -1566,6 +1565,9 @@ dependencies = [\n [[package]]\n name = \"stdx\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"backtrace\",\n+]\n \n [[package]]\n name = \"syn\""}, {"sha": "4951f1835cf4b00404991afa8a82e1a83dd698ce", "filename": "crates/profile/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/022d031b7fe9266ad3dd320c729989e8bf495b67/crates%2Fprofile%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/022d031b7fe9266ad3dd320c729989e8bf495b67/crates%2Fprofile%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2FCargo.toml?ref=022d031b7fe9266ad3dd320c729989e8bf495b67", "patch": "@@ -13,7 +13,6 @@ doctest = false\n once_cell = \"1.3.1\"\n cfg-if = \"1\"\n libc = \"0.2.73\"\n-backtrace = { version = \"0.3.44\", optional = true }\n \n arena = { path = \"../arena\", version = \"0.0.0\" }\n \n@@ -24,5 +23,4 @@ perf-event = \"0.4\"\n cpu_profiler = []\n \n # Uncomment to enable for the whole crate graph\n-# default = [ \"backtrace\" ]\n # default = [ \"cpu_profiler\" ]"}, {"sha": "aa6ccc36c3f3a31305f3710c2c5be11ddd45ff62", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/022d031b7fe9266ad3dd320c729989e8bf495b67/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022d031b7fe9266ad3dd320c729989e8bf495b67/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=022d031b7fe9266ad3dd320c729989e8bf495b67", "patch": "@@ -15,21 +15,6 @@ pub use crate::{\n     stop_watch::{StopWatch, StopWatchSpan},\n };\n \n-/// Prints backtrace to stderr, useful for debugging.\n-#[cfg(feature = \"backtrace\")]\n-pub fn print_backtrace() {\n-    let bt = backtrace::Backtrace::new();\n-    eprintln!(\"{:?}\", bt);\n-}\n-#[cfg(not(feature = \"backtrace\"))]\n-pub fn print_backtrace() {\n-    eprintln!(\n-        r#\"enable the backtrace feature:\n-    profile = {{ path = \"../profile\", features = [ \"backtrace\"] }}\n-\"#\n-    );\n-}\n-\n thread_local!(static IN_SCOPE: RefCell<bool> = RefCell::new(false));\n \n /// Allows to check if the current code is withing some dynamic scope, can be"}, {"sha": "c47e8d0a86bd9061c1a050ab907b470a9e1fc174", "filename": "crates/stdx/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/022d031b7fe9266ad3dd320c729989e8bf495b67/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/022d031b7fe9266ad3dd320c729989e8bf495b67/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=022d031b7fe9266ad3dd320c729989e8bf495b67", "patch": "@@ -10,4 +10,9 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n+backtrace = { version = \"0.3.44\", optional = true }\n # Think twice before adding anything here\n+\n+[features]\n+# Uncomment to enable for the whole crate graph\n+# default = [ \"backtrace\" ]"}, {"sha": "d9a62e943b68ae392d4767b85455efb7cb26cd9e", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/022d031b7fe9266ad3dd320c729989e8bf495b67/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/022d031b7fe9266ad3dd320c729989e8bf495b67/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=022d031b7fe9266ad3dd320c729989e8bf495b67", "patch": "@@ -25,6 +25,27 @@ pub fn timeit(label: &'static str) -> impl Drop {\n     Guard { label, start: Instant::now() }\n }\n \n+/// Prints backtrace to stderr, useful for debugging.\n+#[cfg(feature = \"backtrace\")]\n+pub fn print_backtrace() {\n+    let bt = backtrace::Backtrace::new();\n+    eprintln!(\"{:?}\", bt);\n+}\n+#[cfg(not(feature = \"backtrace\"))]\n+pub fn print_backtrace() {\n+    eprintln!(\n+        r#\"Enable the backtrace feature.\n+Uncomment `default = [ \"backtrace\" ]` in `crates/stdx/Cargo.toml`.\n+\"#\n+    );\n+}\n+\n+pub fn to_lower_snake_case(s: &str) -> String {\n+    to_snake_case(s, char::to_ascii_lowercase)\n+}\n+pub fn to_upper_snake_case(s: &str) -> String {\n+    to_snake_case(s, char::to_ascii_uppercase)\n+}\n fn to_snake_case<F: Fn(&char) -> char>(s: &str, change_case: F) -> String {\n     let mut buf = String::with_capacity(s.len());\n     let mut prev = false;\n@@ -43,14 +64,6 @@ fn to_snake_case<F: Fn(&char) -> char>(s: &str, change_case: F) -> String {\n     buf\n }\n \n-pub fn to_lower_snake_case(s: &str) -> String {\n-    to_snake_case(s, char::to_ascii_lowercase)\n-}\n-\n-pub fn to_upper_snake_case(s: &str) -> String {\n-    to_snake_case(s, char::to_ascii_uppercase)\n-}\n-\n pub fn replace(buf: &mut String, from: char, to: &str) {\n     if !buf.contains(from) {\n         return;"}]}