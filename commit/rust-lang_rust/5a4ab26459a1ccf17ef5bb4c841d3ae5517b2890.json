{"sha": "5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNGFiMjY0NTlhMWNjZjE3ZWY1YmI0Yzg0MWQzYWU1NTE3YjI4OTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-18T20:03:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-18T20:03:54Z"}, "message": "Auto merge of #78880 - CDirkx:not_supported, r=joshtriplett\n\nAdd `Unsupported` to `std::io::ErrorKind`\n\nI noticed a significant portion of the uses of `ErrorKind::Other` in std is for unsupported operations.\nThe notion that a specific operation is not available on a target (and will thus never succeed) seems semantically distinct enough from just \"an unspecified error occurred\", which is why I am proposing to add the variant `Unsupported` to `std::io::ErrorKind`.\n\n**Implementation**:\n\nThe following variant will be added to `std::io::ErrorKind`:\n\n```rust\n/// This operation is unsupported on this platform.\nUnsupported\n```\n`std::io::ErrorKind::Unsupported` is an error returned when a given operation is not supported on a platform, and will thus never succeed; there is no way for the software to recover. It will be used instead of `Other` where appropriate, e.g. on wasm for file and network operations.\n\n`decode_error_kind` will be updated  to decode operating system errors to `Unsupported`:\n- Unix and VxWorks: `libc::ENOSYS`\n- Windows: `c::ERROR_CALL_NOT_IMPLEMENTED`\n- WASI: `wasi::ERRNO_NOSYS`\n\n**Stability**:\nThis changes the kind of error returned by some functions on some platforms, which I think is not covered by the stability guarantees of the std? User code could depend on this behavior, expecting `ErrorKind::Other`, however the docs already mention:\n\n> Errors that are `Other` now may move to a different or a new `ErrorKind` variant in the future. It is not recommended to match an error against `Other` and to expect any additional characteristics, e.g., a specific `Error::raw_os_error` return value.\n\nThe most recent variant added to `ErrorKind` was `UnexpectedEof` in `1.6.0` (almost 5 years ago), but `ErrorKind` is marked as `#[non_exhaustive]` and the docs warn about exhaustively matching on it, so adding a new variant per se should not be a breaking change.\n\nThe variant `Unsupported` itself could be marked as `#[unstable]`, however, because this PR also immediately uses this new variant and changes the errors returned by functions I'm inclined to agree with the others in this thread that the variant should be insta-stabilized.", "tree": {"sha": "c21cbfa6d172382dc5000bb2cf7abceb6d2ae611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21cbfa6d172382dc5000bb2cf7abceb6d2ae611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "html_url": "https://github.com/rust-lang/rust/commit/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef8843428664c64a1681663f93f0dc4d2ce24276", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8843428664c64a1681663f93f0dc4d2ce24276", "html_url": "https://github.com/rust-lang/rust/commit/ef8843428664c64a1681663f93f0dc4d2ce24276"}, {"sha": "5b5afaefff5bdfc01911b9013318145466abec68", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5afaefff5bdfc01911b9013318145466abec68", "html_url": "https://github.com/rust-lang/rust/commit/5b5afaefff5bdfc01911b9013318145466abec68"}], "stats": {"total": 137, "additions": 81, "deletions": 56}, "files": [{"sha": "ce8d3a56f7af4bff6e395c39a4075b49d9562747", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -1329,7 +1329,9 @@ fn metadata_access_times() {\n         match (a.created(), b.created()) {\n             (Ok(t1), Ok(t2)) => assert!(t1 <= t2),\n             (Err(e1), Err(e2))\n-                if e1.kind() == ErrorKind::Other && e2.kind() == ErrorKind::Other => {}\n+                if e1.kind() == ErrorKind::Other && e2.kind() == ErrorKind::Other\n+                    || e1.kind() == ErrorKind::Unsupported\n+                        && e2.kind() == ErrorKind::Unsupported => {}\n             (a, b) => {\n                 panic!(\"creation time must be always supported or not supported: {:?} {:?}\", a, b,)\n             }"}, {"sha": "9bed12bf2ae2b1c47030e111ffb39163a14e04e3", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -180,6 +180,12 @@ pub enum ErrorKind {\n     /// read.\n     #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n     UnexpectedEof,\n+\n+    /// This operation is unsupported on this platform.\n+    ///\n+    /// This means that the operation can never succeed.\n+    #[stable(feature = \"unsupported_error\", since = \"1.53.0\")]\n+    Unsupported,\n }\n \n impl ErrorKind {\n@@ -203,6 +209,7 @@ impl ErrorKind {\n             ErrorKind::Interrupted => \"operation interrupted\",\n             ErrorKind::Other => \"other os error\",\n             ErrorKind::UnexpectedEof => \"unexpected end of file\",\n+            ErrorKind::Unsupported => \"unsupported\",\n         }\n     }\n }"}, {"sha": "c400f5f2c2e8444edd72f816d764b7d343720426", "filename": "library/std/src/sys/hermit/fd.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -1,9 +1,10 @@\n #![unstable(reason = \"not public\", issue = \"none\", feature = \"fd\")]\n \n-use crate::io::{self, ErrorKind, Read};\n+use crate::io::{self, Read};\n use crate::mem;\n use crate::sys::cvt;\n use crate::sys::hermit::abi;\n+use crate::sys::unsupported;\n use crate::sys_common::AsInner;\n \n #[derive(Debug)]\n@@ -46,19 +47,19 @@ impl FileDesc {\n         self.duplicate_path(&[])\n     }\n     pub fn duplicate_path(&self, _path: &[u8]) -> io::Result<FileDesc> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"duplicate isn't supported\"))\n+        unsupported()\n     }\n \n     pub fn nonblocking(&self) -> io::Result<bool> {\n         Ok(false)\n     }\n \n     pub fn set_cloexec(&self) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"cloexec isn't supported\"))\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _nonblocking: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"nonblocking isn't supported\"))\n+        unsupported()\n     }\n }\n "}, {"sha": "f8c1612d1ca034a120af847e2b58e21a28c33698", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -56,7 +56,7 @@ pub fn unsupported<T>() -> crate::io::Result<T> {\n \n pub fn unsupported_err() -> crate::io::Error {\n     crate::io::Error::new_const(\n-        crate::io::ErrorKind::Other,\n+        crate::io::ErrorKind::Unsupported,\n         &\"operation not supported on HermitCore yet\",\n     )\n }"}, {"sha": "a9c09b6ceefae0e81170f17c48caf077d689647e", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -166,7 +166,7 @@ impl TcpStream {\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"socket_addr isn't supported\"))\n+        unsupported()\n     }\n \n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n@@ -199,7 +199,7 @@ impl TcpStream {\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"take_error isn't supported\"))\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, mode: bool) -> io::Result<()> {\n@@ -247,27 +247,27 @@ impl TcpListener {\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn only_v6(&self) -> io::Result<bool> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n }\n \n@@ -281,127 +281,127 @@ pub struct UdpSocket(abi::Handle);\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n }\n "}, {"sha": "da37d1aeb7e74842917668aea9e95f74a97fbde9", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -50,7 +50,7 @@ pub fn unsupported<T>() -> crate::io::Result<T> {\n }\n \n pub fn unsupported_err() -> crate::io::Error {\n-    crate::io::Error::new_const(ErrorKind::Other, &\"operation not supported on SGX yet\")\n+    crate::io::Error::new_const(ErrorKind::Unsupported, &\"operation not supported on SGX yet\")\n }\n \n /// This function is used to implement various functions that doesn't exist,"}, {"sha": "16a7f727696ec971b1730f2b08b28906eded469b", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -366,7 +366,7 @@ impl FileAttr {\n         }\n \n         Err(io::Error::new_const(\n-            io::ErrorKind::Other,\n+            io::ErrorKind::Unsupported,\n             &\"creation time is not available on this platform \\\n                             currently\",\n         ))"}, {"sha": "3cf637c82285af801e14643a4875b6f19adcd4c1", "filename": "library/std/src/sys/unix/l4re.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -1,6 +1,9 @@\n macro_rules! unimpl {\n     () => {\n-        return Err(io::Error::new_const(io::ErrorKind::Other, &\"No networking available on L4Re.\"));\n+        return Err(io::Error::new_const(\n+            io::ErrorKind::Unsupported,\n+            &\"No networking available on L4Re.\",\n+        ));\n     };\n }\n "}, {"sha": "6e44ac19c7b2c80c759d7470026ef2b54393edb0", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -148,6 +148,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         libc::EINVAL => ErrorKind::InvalidInput,\n         libc::ETIMEDOUT => ErrorKind::TimedOut,\n         libc::EEXIST => ErrorKind::AlreadyExists,\n+        libc::ENOSYS => ErrorKind::Unsupported,\n \n         // These two constants can have the same value on some systems,\n         // but different values on others, so we can't use a match"}, {"sha": "98e578c5255c74df3e3016faf485b0ae2d46c56c", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -447,7 +447,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n #[cfg(any(target_os = \"fuchsia\", target_os = \"l4re\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     use crate::io::ErrorKind;\n-    Err(io::Error::new_const(ErrorKind::Other, &\"Not yet implemented!\"))\n+    Err(io::Error::new_const(ErrorKind::Unsupported, &\"Not yet implemented!\"))\n }\n \n #[cfg(target_os = \"vxworks\")]"}, {"sha": "64ec50fa9ec0083044ec750f48bee79245525c98", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -18,7 +18,10 @@ pub fn unsupported<T>() -> std_io::Result<T> {\n }\n \n pub fn unsupported_err() -> std_io::Error {\n-    std_io::Error::new_const(std_io::ErrorKind::Other, &\"operation not supported on this platform\")\n+    std_io::Error::new_const(\n+        std_io::ErrorKind::Unsupported,\n+        &\"operation not supported on this platform\",\n+    )\n }\n \n pub fn decode_error_kind(_code: i32) -> crate::io::ErrorKind {"}, {"sha": "3754aebf45581baa5fc70493517e539fa95be2bb", "filename": "library/std/src/sys/unsupported/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -80,11 +80,11 @@ pub fn getenv(_: &OsStr) -> io::Result<Option<OsString>> {\n }\n \n pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {\n-    Err(io::Error::new_const(io::ErrorKind::Other, &\"cannot set env vars on this platform\"))\n+    Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"cannot set env vars on this platform\"))\n }\n \n pub fn unsetenv(_: &OsStr) -> io::Result<()> {\n-    Err(io::Error::new_const(io::ErrorKind::Other, &\"cannot unset env vars on this platform\"))\n+    Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"cannot unset env vars on this platform\"))\n }\n \n pub fn temp_dir() -> PathBuf {"}, {"sha": "12d0147a129817eaffa1ad3ddbe91ed38b50ab97", "filename": "library/std/src/sys/vxworks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -83,6 +83,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         libc::EINVAL => ErrorKind::InvalidInput,\n         libc::ETIMEDOUT => ErrorKind::TimedOut,\n         libc::EEXIST => ErrorKind::AlreadyExists,\n+        libc::ENOSYS => ErrorKind::Unsupported,\n \n         // These two constants can have the same value on some systems,\n         // but different values on others, so we can't use a match"}, {"sha": "b7b640b174fa9470b8451526154daf29abdeba13", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -78,6 +78,7 @@ pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n         wasi::ERRNO_TIMEDOUT => TimedOut,\n         wasi::ERRNO_EXIST => AlreadyExists,\n         wasi::ERRNO_AGAIN => WouldBlock,\n+        wasi::ERRNO_NOSYS => Unsupported,\n         _ => Other,\n     }\n }"}, {"sha": "8e6bd76f85f0614fc5a6b210fc1db19921708599", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -802,7 +802,10 @@ pub fn link(original: &Path, link: &Path) -> io::Result<()> {\n \n #[cfg(target_vendor = \"uwp\")]\n pub fn link(_original: &Path, _link: &Path) -> io::Result<()> {\n-    return Err(io::Error::new_const(io::ErrorKind::Other, &\"hard link are not supported on UWP\"));\n+    return Err(io::Error::new_const(\n+        io::ErrorKind::Unsupported,\n+        &\"hard link are not supported on UWP\",\n+    ));\n }\n \n pub fn stat(path: &Path) -> io::Result<FileAttr> {"}, {"sha": "973301af2d9922ae68354cc149ca777ef76eac4c", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -78,6 +78,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         | c::ERROR_IPSEC_IKE_TIMED_OUT\n         | c::ERROR_RUNLEVEL_SWITCH_TIMEOUT\n         | c::ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT => return ErrorKind::TimedOut,\n+        c::ERROR_CALL_NOT_IMPLEMENTED => return ErrorKind::Unsupported,\n         _ => {}\n     }\n "}, {"sha": "ad04afc0b6d8a583133612ea67647cf998fef169", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -370,7 +370,7 @@ impl Socket {\n \n     #[cfg(target_vendor = \"uwp\")]\n     fn set_no_inherit(&self) -> io::Result<()> {\n-        Err(io::Error::new_const(io::ErrorKind::Other, &\"Unavailable on UWP\"))\n+        Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"Unavailable on UWP\"))\n     }\n \n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {"}, {"sha": "129d82652d75915f55dc7907e52fddfbd08a0b9d", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -77,7 +77,7 @@ fn main() {\n     let error_kind = ErrorKind::NotFound;\n     match error_kind {\n         ErrorKind::NotFound => {},\n-        ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | _ => {},\n+        ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | _ => {},\n     }\n     match error_kind {\n         ErrorKind::NotFound => {},\n@@ -98,6 +98,7 @@ fn main() {\n         ErrorKind::Interrupted => {},\n         ErrorKind::Other => {},\n         ErrorKind::UnexpectedEof => {},\n+        ErrorKind::Unsupported => {},\n         _ => {},\n     }\n }"}, {"sha": "028ecb63e7e6dcc7dddf75c0b170ef944d65e054", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.rs?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -98,6 +98,7 @@ fn main() {\n         ErrorKind::Interrupted => {},\n         ErrorKind::Other => {},\n         ErrorKind::UnexpectedEof => {},\n+        ErrorKind::Unsupported => {},\n         _ => {},\n     }\n }"}, {"sha": "fd45cad00d6b51bd6c5cc980957b46439899f9d8", "filename": "src/tools/clippy/tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=5a4ab26459a1ccf17ef5bb4c841d3ae5517b2890", "patch": "@@ -32,7 +32,7 @@ error: wildcard matches known variants and will also match future added variants\n   --> $DIR/wildcard_enum_match_arm.rs:80:9\n    |\n LL |         _ => {},\n-   |         ^ help: try this: `ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | _`\n+   |         ^ help: try this: `ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | _`\n \n error: aborting due to 5 previous errors\n "}]}