{"sha": "ed69482d90804c37d8ee60c63f0f51f20a6638f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjk0ODJkOTA4MDRjMzdkOGVlNjBjNjNmMGY1MWYyMGE2NjM4ZjU=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-02-24T20:36:57Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-02-24T20:36:57Z"}, "message": "Bump chalk and replace TypeFamily with Interner", "tree": {"sha": "2d846beae0154d8006e6bfe95cc0d0bc9d613aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d846beae0154d8006e6bfe95cc0d0bc9d613aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed69482d90804c37d8ee60c63f0f51f20a6638f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed69482d90804c37d8ee60c63f0f51f20a6638f5", "html_url": "https://github.com/rust-lang/rust/commit/ed69482d90804c37d8ee60c63f0f51f20a6638f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed69482d90804c37d8ee60c63f0f51f20a6638f5/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6", "html_url": "https://github.com/rust-lang/rust/commit/bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6"}], "stats": {"total": 139, "additions": 74, "deletions": 65}, "files": [{"sha": "04023c6cd1351d5c284d227a2ce3ae28fcb22e05", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed69482d90804c37d8ee60c63f0f51f20a6638f5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ed69482d90804c37d8ee60c63f0f51f20a6638f5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ed69482d90804c37d8ee60c63f0f51f20a6638f5", "patch": "@@ -129,7 +129,7 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n [[package]]\n name = \"chalk-derive\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -139,7 +139,7 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"chalk-macros\",\n  \"rustc-hash\",\n@@ -148,7 +148,7 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -159,15 +159,15 @@ dependencies = [\n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -178,7 +178,7 @@ dependencies = [\n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=2939913fb7bb94ac2a6721087dc086be11410702#2939913fb7bb94ac2a6721087dc086be11410702\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\","}, {"sha": "99e2fe1bf12741e2f3c81375ecd2026a3b86a6bd", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed69482d90804c37d8ee60c63f0f51f20a6638f5/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed69482d90804c37d8ee60c63f0f51f20a6638f5/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=ed69482d90804c37d8ee60c63f0f51f20a6638f5", "patch": "@@ -21,9 +21,9 @@ ra_prof = { path = \"../ra_prof\" }\n ra_syntax = { path = \"../ra_syntax\" }\n test_utils = { path = \"../test_utils\" }\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2939913fb7bb94ac2a6721087dc086be11410702\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2939913fb7bb94ac2a6721087dc086be11410702\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"2939913fb7bb94ac2a6721087dc086be11410702\" }\n \n lalrpop-intern = \"0.15.1\"\n "}, {"sha": "17aef94903a82e8ac34cddbd52ce5068197a2032", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed69482d90804c37d8ee60c63f0f51f20a6638f5/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed69482d90804c37d8ee60c63f0f51f20a6638f5/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=ed69482d90804c37d8ee60c63f0f51f20a6638f5", "patch": "@@ -14,15 +14,15 @@ use crate::db::HirDatabase;\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n-use self::chalk::{from_chalk, ToChalk, TypeFamily};\n+use self::chalk::{from_chalk, Interner, ToChalk};\n \n pub(crate) mod chalk;\n mod builtin;\n \n #[derive(Debug, Clone)]\n pub struct TraitSolver {\n     krate: CrateId,\n-    inner: Arc<Mutex<chalk_solve::Solver<TypeFamily>>>,\n+    inner: Arc<Mutex<chalk_solve::Solver<Interner>>>,\n }\n \n /// We need eq for salsa\n@@ -38,8 +38,8 @@ impl TraitSolver {\n     fn solve(\n         &self,\n         db: &impl HirDatabase,\n-        goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal<TypeFamily>>>,\n-    ) -> Option<chalk_solve::Solution<TypeFamily>> {\n+        goal: &chalk_ir::UCanonical<chalk_ir::InEnvironment<chalk_ir::Goal<Interner>>>,\n+    ) -> Option<chalk_solve::Solution<Interner>> {\n         let context = ChalkContext { db, krate: self.krate };\n         log::debug!(\"solve goal: {:?}\", goal);\n         let mut solver = match self.inner.lock() {\n@@ -110,7 +110,7 @@ pub(crate) fn trait_solver_query(\n     TraitSolver { krate, inner: Arc::new(Mutex::new(create_chalk_solver())) }\n }\n \n-fn create_chalk_solver() -> chalk_solve::Solver<TypeFamily> {\n+fn create_chalk_solver() -> chalk_solve::Solver<Interner> {\n     let solver_choice =\n         chalk_solve::SolverChoice::SLG { max_size: CHALK_SOLVER_MAX_SIZE, expected_answers: None };\n     solver_choice.into_solver()\n@@ -242,9 +242,9 @@ pub(crate) fn trait_solve_query(\n \n fn solution_from_chalk(\n     db: &impl HirDatabase,\n-    solution: chalk_solve::Solution<TypeFamily>,\n+    solution: chalk_solve::Solution<Interner>,\n ) -> Solution {\n-    let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution<TypeFamily>>| {\n+    let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution<Interner>>| {\n         let value = subst\n             .value\n             .into_iter()"}, {"sha": "5b6c1a62e09e08d5fe95ebd4fb1ce0adb5b75ab0", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 58, "deletions": 49, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/ed69482d90804c37d8ee60c63f0f51f20a6638f5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed69482d90804c37d8ee60c63f0f51f20a6638f5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=ed69482d90804c37d8ee60c63f0f51f20a6638f5", "patch": "@@ -3,7 +3,7 @@ use std::{fmt, sync::Arc};\n \n use log::debug;\n \n-use chalk_ir::{cast::Cast, GoalData, Parameter, PlaceholderIndex, TypeName, UniverseIndex};\n+use chalk_ir::{cast::Cast, Goal, GoalData, Parameter, PlaceholderIndex, TypeName, UniverseIndex};\n \n use hir_def::{AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, TypeAliasId};\n use ra_db::{\n@@ -18,13 +18,14 @@ use crate::{\n };\n \n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n-pub struct TypeFamily {}\n+pub struct Interner {}\n \n-impl chalk_ir::family::TypeFamily for TypeFamily {\n+impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Box<chalk_ir::TyData<Self>>;\n     type InternedLifetime = chalk_ir::LifetimeData<Self>;\n     type InternedParameter = chalk_ir::ParameterData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n+    type InternedGoals = Vec<Goal<Self>>;\n     type InternedSubstitution = Vec<Parameter<Self>>;\n     type DefId = InternId;\n \n@@ -85,10 +86,18 @@ impl chalk_ir::family::TypeFamily for TypeFamily {\n         Arc::new(goal)\n     }\n \n+    fn intern_goals(data: impl IntoIterator<Item = Goal<Self>>) -> Self::InternedGoals {\n+        data.into_iter().collect()\n+    }\n+\n     fn goal_data(goal: &Arc<GoalData<Self>>) -> &GoalData<Self> {\n         goal\n     }\n \n+    fn goals_data(goals: &Vec<Goal<Interner>>) -> &[Goal<Interner>] {\n+        goals\n+    }\n+\n     fn intern_substitution<E>(\n         data: impl IntoIterator<Item = Result<Parameter<Self>, E>>,\n     ) -> Result<Vec<Parameter<Self>>, E> {\n@@ -100,20 +109,20 @@ impl chalk_ir::family::TypeFamily for TypeFamily {\n     }\n }\n \n-impl chalk_ir::family::HasTypeFamily for TypeFamily {\n-    type TypeFamily = Self;\n+impl chalk_ir::interner::HasInterner for Interner {\n+    type Interner = Self;\n }\n \n-pub type AssocTypeId = chalk_ir::AssocTypeId<TypeFamily>;\n-pub type AssociatedTyDatum = chalk_rust_ir::AssociatedTyDatum<TypeFamily>;\n-pub type TraitId = chalk_ir::TraitId<TypeFamily>;\n-pub type TraitDatum = chalk_rust_ir::TraitDatum<TypeFamily>;\n-pub type StructId = chalk_ir::StructId<TypeFamily>;\n-pub type StructDatum = chalk_rust_ir::StructDatum<TypeFamily>;\n-pub type ImplId = chalk_ir::ImplId<TypeFamily>;\n-pub type ImplDatum = chalk_rust_ir::ImplDatum<TypeFamily>;\n+pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n+pub type AssociatedTyDatum = chalk_rust_ir::AssociatedTyDatum<Interner>;\n+pub type TraitId = chalk_ir::TraitId<Interner>;\n+pub type TraitDatum = chalk_rust_ir::TraitDatum<Interner>;\n+pub type StructId = chalk_ir::StructId<Interner>;\n+pub type StructDatum = chalk_rust_ir::StructDatum<Interner>;\n+pub type ImplId = chalk_ir::ImplId<Interner>;\n+pub type ImplDatum = chalk_rust_ir::ImplDatum<Interner>;\n pub type AssociatedTyValueId = chalk_rust_ir::AssociatedTyValueId;\n-pub type AssociatedTyValue = chalk_rust_ir::AssociatedTyValue<TypeFamily>;\n+pub type AssociatedTyValue = chalk_rust_ir::AssociatedTyValue<Interner>;\n \n pub(super) trait ToChalk {\n     type Chalk;\n@@ -129,8 +138,8 @@ where\n }\n \n impl ToChalk for Ty {\n-    type Chalk = chalk_ir::Ty<TypeFamily>;\n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Ty<TypeFamily> {\n+    type Chalk = chalk_ir::Ty<Interner>;\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Ty<Interner> {\n         match self {\n             Ty::Apply(apply_ty) => {\n                 let name = apply_ty.ctor.to_chalk(db);\n@@ -148,7 +157,7 @@ impl ToChalk for Ty {\n                     ui: UniverseIndex::ROOT,\n                     idx: interned_id.as_intern_id().as_usize(),\n                 }\n-                .to_ty::<TypeFamily>()\n+                .to_ty::<Interner>()\n             }\n             Ty::Bound(idx) => chalk_ir::TyData::BoundVar(idx as usize).intern(),\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n@@ -169,7 +178,7 @@ impl ToChalk for Ty {\n             }\n         }\n     }\n-    fn from_chalk(db: &impl HirDatabase, chalk: chalk_ir::Ty<TypeFamily>) -> Self {\n+    fn from_chalk(db: &impl HirDatabase, chalk: chalk_ir::Ty<Interner>) -> Self {\n         match chalk.data().clone() {\n             chalk_ir::TyData::Apply(apply_ty) => match apply_ty.name {\n                 TypeName::Error => Ty::Unknown,\n@@ -205,13 +214,13 @@ impl ToChalk for Ty {\n }\n \n impl ToChalk for Substs {\n-    type Chalk = chalk_ir::Substitution<TypeFamily>;\n+    type Chalk = chalk_ir::Substitution<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Substitution<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Substitution<Interner> {\n         chalk_ir::Substitution::from(self.iter().map(|ty| ty.clone().to_chalk(db)))\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, parameters: chalk_ir::Substitution<TypeFamily>) -> Substs {\n+    fn from_chalk(db: &impl HirDatabase, parameters: chalk_ir::Substitution<Interner>) -> Substs {\n         let tys = parameters\n             .into_iter()\n             .map(|p| match p.ty() {\n@@ -224,15 +233,15 @@ impl ToChalk for Substs {\n }\n \n impl ToChalk for TraitRef {\n-    type Chalk = chalk_ir::TraitRef<TypeFamily>;\n+    type Chalk = chalk_ir::TraitRef<Interner>;\n \n-    fn to_chalk(self: TraitRef, db: &impl HirDatabase) -> chalk_ir::TraitRef<TypeFamily> {\n+    fn to_chalk(self: TraitRef, db: &impl HirDatabase) -> chalk_ir::TraitRef<Interner> {\n         let trait_id = self.trait_.to_chalk(db);\n         let substitution = self.substs.to_chalk(db);\n         chalk_ir::TraitRef { trait_id, substitution }\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, trait_ref: chalk_ir::TraitRef<TypeFamily>) -> Self {\n+    fn from_chalk(db: &impl HirDatabase, trait_ref: chalk_ir::TraitRef<Interner>) -> Self {\n         let trait_ = from_chalk(db, trait_ref.trait_id);\n         let substs = from_chalk(db, trait_ref.substitution);\n         TraitRef { trait_, substs }\n@@ -252,9 +261,9 @@ impl ToChalk for hir_def::TraitId {\n }\n \n impl ToChalk for TypeCtor {\n-    type Chalk = TypeName<TypeFamily>;\n+    type Chalk = TypeName<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> TypeName<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> TypeName<Interner> {\n         match self {\n             TypeCtor::AssociatedType(type_alias) => {\n                 let type_id = type_alias.to_chalk(db);\n@@ -268,7 +277,7 @@ impl ToChalk for TypeCtor {\n         }\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, type_name: TypeName<TypeFamily>) -> TypeCtor {\n+    fn from_chalk(db: &impl HirDatabase, type_name: TypeName<Interner>) -> TypeCtor {\n         match type_name {\n             TypeName::Struct(struct_id) => db.lookup_intern_type_ctor(struct_id.into()),\n             TypeName::AssociatedType(type_id) => TypeCtor::AssociatedType(from_chalk(db, type_id)),\n@@ -317,9 +326,9 @@ impl ToChalk for AssocTyValue {\n }\n \n impl ToChalk for GenericPredicate {\n-    type Chalk = chalk_ir::QuantifiedWhereClause<TypeFamily>;\n+    type Chalk = chalk_ir::QuantifiedWhereClause<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::QuantifiedWhereClause<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::QuantifiedWhereClause<Interner> {\n         match self {\n             GenericPredicate::Implemented(trait_ref) => {\n                 make_binders(chalk_ir::WhereClause::Implemented(trait_ref.to_chalk(db)), 0)\n@@ -337,7 +346,7 @@ impl ToChalk for GenericPredicate {\n \n     fn from_chalk(\n         db: &impl HirDatabase,\n-        where_clause: chalk_ir::QuantifiedWhereClause<TypeFamily>,\n+        where_clause: chalk_ir::QuantifiedWhereClause<Interner>,\n     ) -> GenericPredicate {\n         match where_clause.value {\n             chalk_ir::WhereClause::Implemented(tr) => {\n@@ -353,9 +362,9 @@ impl ToChalk for GenericPredicate {\n }\n \n impl ToChalk for ProjectionTy {\n-    type Chalk = chalk_ir::AliasTy<TypeFamily>;\n+    type Chalk = chalk_ir::AliasTy<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::AliasTy<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::AliasTy<Interner> {\n         chalk_ir::AliasTy {\n             associated_ty_id: self.associated_ty.to_chalk(db),\n             substitution: self.parameters.to_chalk(db),\n@@ -364,7 +373,7 @@ impl ToChalk for ProjectionTy {\n \n     fn from_chalk(\n         db: &impl HirDatabase,\n-        projection_ty: chalk_ir::AliasTy<TypeFamily>,\n+        projection_ty: chalk_ir::AliasTy<Interner>,\n     ) -> ProjectionTy {\n         ProjectionTy {\n             associated_ty: from_chalk(db, projection_ty.associated_ty_id),\n@@ -374,28 +383,28 @@ impl ToChalk for ProjectionTy {\n }\n \n impl ToChalk for super::ProjectionPredicate {\n-    type Chalk = chalk_ir::Normalize<TypeFamily>;\n+    type Chalk = chalk_ir::Normalize<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Normalize<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Normalize<Interner> {\n         chalk_ir::Normalize { alias: self.projection_ty.to_chalk(db), ty: self.ty.to_chalk(db) }\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, _normalize: chalk_ir::Normalize<TypeFamily>) -> Self {\n+    fn from_chalk(_db: &impl HirDatabase, _normalize: chalk_ir::Normalize<Interner>) -> Self {\n         unimplemented!()\n     }\n }\n \n impl ToChalk for Obligation {\n-    type Chalk = chalk_ir::DomainGoal<TypeFamily>;\n+    type Chalk = chalk_ir::DomainGoal<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::DomainGoal<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::DomainGoal<Interner> {\n         match self {\n             Obligation::Trait(tr) => tr.to_chalk(db).cast(),\n             Obligation::Projection(pr) => pr.to_chalk(db).cast(),\n         }\n     }\n \n-    fn from_chalk(_db: &impl HirDatabase, _goal: chalk_ir::DomainGoal<TypeFamily>) -> Self {\n+    fn from_chalk(_db: &impl HirDatabase, _goal: chalk_ir::DomainGoal<Interner>) -> Self {\n         unimplemented!()\n     }\n }\n@@ -418,16 +427,16 @@ where\n }\n \n impl ToChalk for Arc<super::TraitEnvironment> {\n-    type Chalk = chalk_ir::Environment<TypeFamily>;\n+    type Chalk = chalk_ir::Environment<Interner>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Environment<TypeFamily> {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Environment<Interner> {\n         let mut clauses = Vec::new();\n         for pred in &self.predicates {\n             if pred.is_error() {\n                 // for env, we just ignore errors\n                 continue;\n             }\n-            let program_clause: chalk_ir::ProgramClause<TypeFamily> =\n+            let program_clause: chalk_ir::ProgramClause<Interner> =\n                 pred.clone().to_chalk(db).cast();\n             clauses.push(program_clause.into_from_env_clause());\n         }\n@@ -436,15 +445,15 @@ impl ToChalk for Arc<super::TraitEnvironment> {\n \n     fn from_chalk(\n         _db: &impl HirDatabase,\n-        _env: chalk_ir::Environment<TypeFamily>,\n+        _env: chalk_ir::Environment<Interner>,\n     ) -> Arc<super::TraitEnvironment> {\n         unimplemented!()\n     }\n }\n \n impl<T: ToChalk> ToChalk for super::InEnvironment<T>\n where\n-    T::Chalk: chalk_ir::family::HasTypeFamily<TypeFamily = TypeFamily>,\n+    T::Chalk: chalk_ir::interner::HasInterner<Interner = Interner>,\n {\n     type Chalk = chalk_ir::InEnvironment<T::Chalk>;\n \n@@ -522,7 +531,7 @@ fn convert_where_clauses(\n     db: &impl HirDatabase,\n     def: GenericDefId,\n     substs: &Substs,\n-) -> Vec<chalk_ir::QuantifiedWhereClause<TypeFamily>> {\n+) -> Vec<chalk_ir::QuantifiedWhereClause<Interner>> {\n     let generic_predicates = db.generic_predicates(def);\n     let mut result = Vec::with_capacity(generic_predicates.len());\n     for pred in generic_predicates.iter() {\n@@ -535,7 +544,7 @@ fn convert_where_clauses(\n     result\n }\n \n-impl<'a, DB> chalk_solve::RustIrDatabase<TypeFamily> for ChalkContext<'a, DB>\n+impl<'a, DB> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a, DB>\n where\n     DB: HirDatabase,\n {\n@@ -554,7 +563,7 @@ where\n     fn impls_for_trait(\n         &self,\n         trait_id: TraitId,\n-        parameters: &[Parameter<TypeFamily>],\n+        parameters: &[Parameter<Interner>],\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n@@ -589,14 +598,14 @@ where\n     fn associated_ty_value(&self, id: AssociatedTyValueId) -> Arc<AssociatedTyValue> {\n         self.db.associated_ty_value(self.krate, id)\n     }\n-    fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<TypeFamily>> {\n+    fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<Interner>> {\n         vec![]\n     }\n     fn local_impls_to_coherence_check(&self, _trait_id: TraitId) -> Vec<ImplId> {\n         // We don't do coherence checking (yet)\n         unimplemented!()\n     }\n-    fn as_struct_id(&self, id: &TypeName<TypeFamily>) -> Option<StructId> {\n+    fn as_struct_id(&self, id: &TypeName<Interner>) -> Option<StructId> {\n         match id {\n             TypeName::Struct(struct_id) => Some(*struct_id),\n             _ => None,"}]}