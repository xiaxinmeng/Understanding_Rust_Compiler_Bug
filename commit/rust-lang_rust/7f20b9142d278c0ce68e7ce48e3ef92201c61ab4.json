{"sha": "7f20b9142d278c0ce68e7ce48e3ef92201c61ab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMjBiOTE0MmQyNzhjMGNlNjhlN2NlNDhlM2VmOTIyMDFjNjFhYjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-27T01:05:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:25Z"}, "message": "fix universal regions to handle constant expressions like `[T; 22]`", "tree": {"sha": "6d6f6709ab121755e596365dd4e2e8dd6dca5390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d6f6709ab121755e596365dd4e2e8dd6dca5390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f20b9142d278c0ce68e7ce48e3ef92201c61ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f20b9142d278c0ce68e7ce48e3ef92201c61ab4", "html_url": "https://github.com/rust-lang/rust/commit/7f20b9142d278c0ce68e7ce48e3ef92201c61ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f20b9142d278c0ce68e7ce48e3ef92201c61ab4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6772cb972a5ca531ecbe45ad779bafe33895caa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6772cb972a5ca531ecbe45ad779bafe33895caa", "html_url": "https://github.com/rust-lang/rust/commit/d6772cb972a5ca531ecbe45ad779bafe33895caa"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "c8b5a258a7094ac95e36f548699d18c41ae0b407", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7f20b9142d278c0ce68e7ce48e3ef92201c61ab4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f20b9142d278c0ce68e7ce48e3ef92201c61ab4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=7f20b9142d278c0ce68e7ce48e3ef92201c61ab4", "patch": "@@ -493,7 +493,27 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 substs.substs\n             }\n             ty::TyFnDef(_, substs) => substs,\n-            _ => bug!(),\n+\n+            // FIXME. When we encounter other sorts of constant\n+            // expressions, such as the `22` in `[foo; 22]`, we can\n+            // get the type `usize` here. For now, just return an\n+            // empty vector of substs in this case, since there are no\n+            // generics in scope in such expressions right now.\n+            //\n+            // Eventually I imagine we could get a wider range of\n+            // types.  What is the best way to handle this? Should we\n+            // be checking something other than the type of the def-id\n+            // to figure out what to do (e.g. the def-key?).\n+            ty::TyUint(..) => {\n+                assert!(identity_substs.is_empty());\n+                identity_substs\n+            }\n+\n+            _ => span_bug!(\n+                tcx.def_span(self.mir_def_id),\n+                \"unknown defining type: {:?}\",\n+                defining_ty\n+            ),\n         };\n \n         let global_mapping = iter::once((gcx.types.re_static, fr_static));\n@@ -551,7 +571,15 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             ty::TyFnDef(def_id, _) => {\n                 let sig = tcx.fn_sig(def_id);\n                 let sig = indices.fold_to_region_vids(tcx, &sig);\n-                return sig.inputs_and_output();\n+                sig.inputs_and_output()\n+            }\n+\n+            // FIXME: as above, this happens on things like `[foo;\n+            // 22]`. For now, no inputs, one output, but it seems like\n+            // we need a more general way to handle this category of\n+            // MIR.\n+            ty::TyUint(..) => {\n+                ty::Binder::dummy(tcx.mk_type_list(iter::once(defining_ty)))\n             }\n \n             _ => span_bug!("}]}