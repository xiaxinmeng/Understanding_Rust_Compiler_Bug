{"sha": "643c3a54de9da45f07ba9282c2ec7917d9ee7225", "node_id": "C_kwDOAAsO6NoAKDY0M2MzYTU0ZGU5ZGE0NWYwN2JhOTI4MmMyZWM3OTE3ZDllZTcyMjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T19:42:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T19:42:53Z"}, "message": "Auto merge of #13134 - Veykril:proc-highlight, r=Veykril\n\nHighlight namerefs by syntax until proc-macros have been loaded\n\nUsually when loading up a project, once loading is done we start answering highlight requests while proc-macros haven't always been loaded yet, so we start out with showing a lot of unresolved name-refs. After this PR, we'll use syntax based highlighting for those unresolved namerefs until the proc-macros have been loaded.", "tree": {"sha": "ff9519ff44963a3ff4a9524809c9c20e68e590f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff9519ff44963a3ff4a9524809c9c20e68e590f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643c3a54de9da45f07ba9282c2ec7917d9ee7225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643c3a54de9da45f07ba9282c2ec7917d9ee7225", "html_url": "https://github.com/rust-lang/rust/commit/643c3a54de9da45f07ba9282c2ec7917d9ee7225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643c3a54de9da45f07ba9282c2ec7917d9ee7225/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab068f120ba853fe04f1a5513779ce5529faee93", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab068f120ba853fe04f1a5513779ce5529faee93", "html_url": "https://github.com/rust-lang/rust/commit/ab068f120ba853fe04f1a5513779ce5529faee93"}, {"sha": "66ec636fec53da9ede460b94f61294a711689fd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ec636fec53da9ede460b94f61294a711689fd8", "html_url": "https://github.com/rust-lang/rust/commit/66ec636fec53da9ede460b94f61294a711689fd8"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "92df4d70fd9024edc3865ddd935ae62bee437389", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643c3a54de9da45f07ba9282c2ec7917d9ee7225/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643c3a54de9da45f07ba9282c2ec7917d9ee7225/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=643c3a54de9da45f07ba9282c2ec7917d9ee7225", "patch": "@@ -116,6 +116,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     vfs: Arc<RwLock<(vfs::Vfs, NoHashHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n+    pub(crate) proc_macros_loaded: bool,\n }\n \n impl std::panic::UnwindSafe for GlobalStateSnapshot {}\n@@ -256,6 +257,7 @@ impl GlobalState {\n             check_fixes: Arc::clone(&self.diagnostics.check_fixes),\n             mem_docs: self.mem_docs.clone(),\n             semantic_tokens_cache: Arc::clone(&self.semantic_tokens_cache),\n+            proc_macros_loaded: !self.fetch_build_data_queue.last_op_result().0.is_empty(),\n         }\n     }\n "}, {"sha": "d9b669afbe81cd3be1baea15b57d53788b842a9c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/643c3a54de9da45f07ba9282c2ec7917d9ee7225/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643c3a54de9da45f07ba9282c2ec7917d9ee7225/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=643c3a54de9da45f07ba9282c2ec7917d9ee7225", "patch": "@@ -1504,7 +1504,11 @@ pub(crate) fn handle_semantic_tokens_full(\n     let text = snap.analysis.file_text(file_id)?;\n     let line_index = snap.file_line_index(file_id)?;\n \n-    let highlights = snap.analysis.highlight(snap.config.highlighting_config(), file_id)?;\n+    let mut highlight_config = snap.config.highlighting_config();\n+    // Avoid flashing a bunch of unresolved references when the proc-macro servers haven't been spawned yet.\n+    highlight_config.syntactic_name_ref_highlighting = !snap.proc_macros_loaded;\n+\n+    let highlights = snap.analysis.highlight(highlight_config, file_id)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n \n     // Unconditionally cache the tokens\n@@ -1523,7 +1527,11 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n     let text = snap.analysis.file_text(file_id)?;\n     let line_index = snap.file_line_index(file_id)?;\n \n-    let highlights = snap.analysis.highlight(snap.config.highlighting_config(), file_id)?;\n+    let mut highlight_config = snap.config.highlighting_config();\n+    // Avoid flashing a bunch of unresolved references when the proc-macro servers haven't been spawned yet.\n+    highlight_config.syntactic_name_ref_highlighting = !snap.proc_macros_loaded;\n+\n+    let highlights = snap.analysis.highlight(highlight_config, file_id)?;\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n \n     let mut cache = snap.semantic_tokens_cache.lock();"}, {"sha": "f23bbca6387659aa24d32e97036154883bea9a33", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/643c3a54de9da45f07ba9282c2ec7917d9ee7225/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643c3a54de9da45f07ba9282c2ec7917d9ee7225/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=643c3a54de9da45f07ba9282c2ec7917d9ee7225", "patch": "@@ -347,8 +347,8 @@ impl GlobalState {\n                             error\n                         })\n                     })\n-                    .collect();\n-            }\n+                    .collect()\n+            };\n         }\n \n         let watch = match files_config.watcher {"}]}