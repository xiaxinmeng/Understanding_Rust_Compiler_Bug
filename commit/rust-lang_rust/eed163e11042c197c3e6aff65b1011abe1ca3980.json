{"sha": "eed163e11042c197c3e6aff65b1011abe1ca3980", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDE2M2UxMTA0MmMxOTdjM2U2YWZmNjViMTAxMWFiZTFjYTM5ODA=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-07T22:55:55Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-08T00:02:13Z"}, "message": "save-analysis: use a fallback when access levels couldn't be computed", "tree": {"sha": "43f659d6ef79c21cc69d6198e1de8e4030fb5efb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f659d6ef79c21cc69d6198e1de8e4030fb5efb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed163e11042c197c3e6aff65b1011abe1ca3980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed163e11042c197c3e6aff65b1011abe1ca3980", "html_url": "https://github.com/rust-lang/rust/commit/eed163e11042c197c3e6aff65b1011abe1ca3980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed163e11042c197c3e6aff65b1011abe1ca3980/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2063d02062ee9f088274690a97826333847e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2063d02062ee9f088274690a97826333847e17", "html_url": "https://github.com/rust-lang/rust/commit/8e2063d02062ee9f088274690a97826333847e17"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "0c9e443efe0dbca27081c15d8b38167771dcdcda", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eed163e11042c197c3e6aff65b1011abe1ca3980/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed163e11042c197c3e6aff65b1011abe1ca3980/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=eed163e11042c197c3e6aff65b1011abe1ca3980", "patch": "@@ -14,7 +14,7 @@\n //! recording the output.\n \n use rustc::hir::def::Def as HirDef;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::DefId;\n use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -56,14 +56,14 @@ macro_rules! access_from {\n     ($save_ctxt:expr, $vis:expr, $id:expr) => {\n         Access {\n             public: $vis.node.is_pub(),\n-            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($id),\n+            reachable: $save_ctxt.access_levels.is_reachable($id),\n         }\n     };\n \n     ($save_ctxt:expr, $item:expr) => {\n         Access {\n             public: $item.vis.node.is_pub(),\n-            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($item.id),\n+            reachable: $save_ctxt.access_levels.is_reachable($item.id),\n         }\n     };\n }"}, {"sha": "13ecc6b8a956f11c96eaa569e7d81faba4f46a21", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eed163e11042c197c3e6aff65b1011abe1ca3980/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed163e11042c197c3e6aff65b1011abe1ca3980/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=eed163e11042c197c3e6aff65b1011abe1ca3980", "patch": "@@ -35,11 +35,13 @@ use rustc::hir;\n use rustc::hir::def::Def as HirDef;\n use rustc::hir::Node;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::privacy::AccessLevels;\n use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n+use rustc_data_structures::sync::Lrc;\n \n use std::cell::Cell;\n use std::default::Default;\n@@ -68,6 +70,7 @@ use rls_data::config::Config;\n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n+    access_levels: &'l AccessLevels,\n     analysis: &'l ty::CrateAnalysis,\n     span_utils: SpanUtils<'tcx>,\n     config: Config,\n@@ -1126,10 +1129,18 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n \n         info!(\"Dumping crate {}\", cratename);\n \n+        // Privacy checking requires and is done after type checking; use a\n+        // fallback in case the access levels couldn't have been correctly computed.\n+        let access_levels = match tcx.sess.compile_status() {\n+            Ok(..) => tcx.privacy_access_levels(LOCAL_CRATE),\n+            Err(..) => Lrc::new(AccessLevels::default()),\n+        };\n+\n         let save_ctxt = SaveContext {\n             tcx,\n             tables: &ty::TypeckTables::empty(None),\n             analysis,\n+            access_levels: &access_levels,\n             span_utils: SpanUtils::new(&tcx.sess),\n             config: find_config(config),\n             impl_counter: Cell::new(0),"}]}