{"sha": "bc6d574662398e8c592ec2160a3ace9358337fd6", "node_id": "C_kwDOAAsO6NoAKGJjNmQ1NzQ2NjIzOThlOGM1OTJlYzIxNjBhM2FjZTkzNTgzMzdmZDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-19T14:53:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-19T14:53:06Z"}, "message": "Auto merge of #13259 - Veykril:cargo-config-simplify, r=Veykril\n\nSimplify feature representation in CargoConfig", "tree": {"sha": "5e11c8572614783793993b3a5bc295f9ae19ef47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e11c8572614783793993b3a5bc295f9ae19ef47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6d574662398e8c592ec2160a3ace9358337fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6d574662398e8c592ec2160a3ace9358337fd6", "html_url": "https://github.com/rust-lang/rust/commit/bc6d574662398e8c592ec2160a3ace9358337fd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6d574662398e8c592ec2160a3ace9358337fd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187bee0bb100111466a3557c20f80defcc0f4db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/187bee0bb100111466a3557c20f80defcc0f4db3", "html_url": "https://github.com/rust-lang/rust/commit/187bee0bb100111466a3557c20f80defcc0f4db3"}, {"sha": "d9f570960980a98a1cde705ca38bf957231a53e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f570960980a98a1cde705ca38bf957231a53e6", "html_url": "https://github.com/rust-lang/rust/commit/d9f570960980a98a1cde705ca38bf957231a53e6"}], "stats": {"total": 199, "additions": 109, "deletions": 90}, "files": [{"sha": "32db42f1db75eabcebbd7be69d3dc9d155bfef98", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=bc6d574662398e8c592ec2160a3ace9358337fd6", "patch": "@@ -15,7 +15,7 @@ use rustc_hash::FxHashMap;\n use semver::Version;\n use serde::Deserialize;\n \n-use crate::{cfg_flag::CfgFlag, CargoConfig, CargoWorkspace, Package};\n+use crate::{cfg_flag::CfgFlag, CargoConfig, CargoFeatures, CargoWorkspace, Package};\n \n #[derive(Debug, Default, Clone, PartialEq, Eq)]\n pub struct WorkspaceBuildScripts {\n@@ -49,7 +49,6 @@ impl WorkspaceBuildScripts {\n \n         let mut cmd = Command::new(toolchain::cargo());\n         cmd.envs(&config.extra_env);\n-\n         cmd.args(&[\"check\", \"--quiet\", \"--workspace\", \"--message-format=json\"]);\n \n         // --all-targets includes tests, benches and examples in addition to the\n@@ -61,15 +60,18 @@ impl WorkspaceBuildScripts {\n             cmd.args(&[\"--target\", target]);\n         }\n \n-        if config.all_features {\n-            cmd.arg(\"--all-features\");\n-        } else {\n-            if config.no_default_features {\n-                cmd.arg(\"--no-default-features\");\n+        match &config.features {\n+            CargoFeatures::All => {\n+                cmd.arg(\"--all-features\");\n             }\n-            if !config.features.is_empty() {\n-                cmd.arg(\"--features\");\n-                cmd.arg(config.features.join(\" \"));\n+            CargoFeatures::Selected { features, no_default_features } => {\n+                if *no_default_features {\n+                    cmd.arg(\"--no-default-features\");\n+                }\n+                if !features.is_empty() {\n+                    cmd.arg(\"--features\");\n+                    cmd.arg(features.join(\" \"));\n+                }\n             }\n         }\n "}, {"sha": "8e50fe878ae36220343fe3eb745cd3ac4b823e9f", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=bc6d574662398e8c592ec2160a3ace9358337fd6", "patch": "@@ -71,35 +71,41 @@ impl Default for UnsetTestCrates {\n     }\n }\n \n-#[derive(Default, Clone, Debug, PartialEq, Eq)]\n-pub struct CargoConfig {\n-    /// Do not activate the `default` feature.\n-    pub no_default_features: bool,\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum CargoFeatures {\n+    All,\n+    Selected {\n+        /// List of features to activate.\n+        features: Vec<String>,\n+        /// Do not activate the `default` feature.\n+        no_default_features: bool,\n+    },\n+}\n \n-    /// Activate all available features\n-    pub all_features: bool,\n+impl Default for CargoFeatures {\n+    fn default() -> Self {\n+        CargoFeatures::Selected { features: vec![], no_default_features: false }\n+    }\n+}\n \n+#[derive(Default, Clone, Debug, PartialEq, Eq)]\n+pub struct CargoConfig {\n     /// List of features to activate.\n-    /// This will be ignored if `cargo_all_features` is true.\n-    pub features: Vec<String>,\n-\n+    pub features: CargoFeatures,\n     /// rustc target\n     pub target: Option<String>,\n-\n     /// Don't load sysroot crates (`std`, `core` & friends). Might be useful\n     /// when debugging isolated issues.\n     pub no_sysroot: bool,\n-\n     /// rustc private crate source\n     pub rustc_source: Option<RustcSource>,\n-\n     /// crates to disable `#[cfg(test)]` on\n     pub unset_test_crates: UnsetTestCrates,\n-\n+    /// Invoke `cargo check` through the RUSTC_WRAPPER.\n     pub wrap_rustc_in_build_scripts: bool,\n-\n+    /// The command to run instead of `cargo check` for building build scripts.\n     pub run_build_script_command: Option<Vec<String>>,\n-\n+    /// Extra env vars to set when invoking the cargo command\n     pub extra_env: FxHashMap<String, String>,\n }\n \n@@ -143,7 +149,7 @@ pub struct PackageData {\n     pub targets: Vec<Target>,\n     /// Does this package come from the local filesystem (and is editable)?\n     pub is_local: bool,\n-    // Whether this package is a member of the workspace\n+    /// Whether this package is a member of the workspace\n     pub is_member: bool,\n     /// List of packages this package depends on\n     pub dependencies: Vec<PackageDependency>,\n@@ -249,8 +255,8 @@ impl TargetKind {\n     }\n }\n \n+// Deserialize helper for the cargo metadata\n #[derive(Deserialize, Default)]\n-// Deserialise helper for the cargo metadata\n struct PackageMetadata {\n     #[serde(rename = \"rust-analyzer\")]\n     rust_analyzer: Option<RustAnalyzerPackageMetaData>,\n@@ -272,16 +278,19 @@ impl CargoWorkspace {\n         let mut meta = MetadataCommand::new();\n         meta.cargo_path(toolchain::cargo());\n         meta.manifest_path(cargo_toml.to_path_buf());\n-        if config.all_features {\n-            meta.features(CargoOpt::AllFeatures);\n-        } else {\n-            if config.no_default_features {\n-                // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n-                // https://github.com/oli-obk/cargo_metadata/issues/79\n-                meta.features(CargoOpt::NoDefaultFeatures);\n+        match &config.features {\n+            CargoFeatures::All => {\n+                meta.features(CargoOpt::AllFeatures);\n             }\n-            if !config.features.is_empty() {\n-                meta.features(CargoOpt::SomeFeatures(config.features.clone()));\n+            CargoFeatures::Selected { features, no_default_features } => {\n+                if *no_default_features {\n+                    // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n+                    // https://github.com/oli-obk/cargo_metadata/issues/79\n+                    meta.features(CargoOpt::NoDefaultFeatures);\n+                }\n+                if !features.is_empty() {\n+                    meta.features(CargoOpt::SomeFeatures(features.clone()));\n+                }\n             }\n         }\n         meta.current_dir(current_dir.as_os_str());"}, {"sha": "ce78ce85697afd23170359c5ebf572ca69a93e5a", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=bc6d574662398e8c592ec2160a3ace9358337fd6", "patch": "@@ -42,8 +42,8 @@ use rustc_hash::FxHashSet;\n pub use crate::{\n     build_scripts::WorkspaceBuildScripts,\n     cargo_workspace::{\n-        CargoConfig, CargoWorkspace, Package, PackageData, PackageDependency, RustcSource, Target,\n-        TargetData, TargetKind, UnsetTestCrates,\n+        CargoConfig, CargoFeatures, CargoWorkspace, Package, PackageData, PackageDependency,\n+        RustcSource, Target, TargetData, TargetKind, UnsetTestCrates,\n     },\n     manifest_path::ManifestPath,\n     project_json::{ProjectJson, ProjectJsonData},"}, {"sha": "e1675a030c0f6f19f36b5d4bf12e975db471ba9d", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 44, "deletions": 38, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=bc6d574662398e8c592ec2160a3ace9358337fd6", "patch": "@@ -4,7 +4,7 @@ use std::mem;\n \n use cfg::{CfgAtom, CfgExpr};\n use ide::{FileId, RunnableKind, TestId};\n-use project_model::{self, ManifestPath, TargetKind};\n+use project_model::{self, CargoFeatures, ManifestPath, TargetKind};\n use vfs::AbsPathBuf;\n \n use crate::{global_state::GlobalStateSnapshot, Result};\n@@ -35,41 +35,41 @@ impl CargoTargetSpec {\n \n         match kind {\n             RunnableKind::Test { test_id, attr } => {\n-                args.push(\"test\".to_string());\n+                args.push(\"test\".to_owned());\n                 extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n-                    extra_args.push(\"--exact\".to_string());\n+                    extra_args.push(\"--exact\".to_owned());\n                 }\n-                extra_args.push(\"--nocapture\".to_string());\n+                extra_args.push(\"--nocapture\".to_owned());\n                 if attr.ignore {\n-                    extra_args.push(\"--ignored\".to_string());\n+                    extra_args.push(\"--ignored\".to_owned());\n                 }\n             }\n             RunnableKind::TestMod { path } => {\n-                args.push(\"test\".to_string());\n-                extra_args.push(path.to_string());\n-                extra_args.push(\"--nocapture\".to_string());\n+                args.push(\"test\".to_owned());\n+                extra_args.push(path.clone());\n+                extra_args.push(\"--nocapture\".to_owned());\n             }\n             RunnableKind::Bench { test_id } => {\n-                args.push(\"bench\".to_string());\n+                args.push(\"bench\".to_owned());\n                 extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n-                    extra_args.push(\"--exact\".to_string());\n+                    extra_args.push(\"--exact\".to_owned());\n                 }\n-                extra_args.push(\"--nocapture\".to_string());\n+                extra_args.push(\"--nocapture\".to_owned());\n             }\n             RunnableKind::DocTest { test_id } => {\n-                args.push(\"test\".to_string());\n-                args.push(\"--doc\".to_string());\n+                args.push(\"test\".to_owned());\n+                args.push(\"--doc\".to_owned());\n                 extra_args.push(test_id.to_string());\n-                extra_args.push(\"--nocapture\".to_string());\n+                extra_args.push(\"--nocapture\".to_owned());\n             }\n             RunnableKind::Bin => {\n                 let subcommand = match spec {\n                     Some(CargoTargetSpec { target_kind: TargetKind::Test, .. }) => \"test\",\n                     _ => \"run\",\n                 };\n-                args.push(subcommand.to_string());\n+                args.push(subcommand.to_owned());\n             }\n         }\n \n@@ -82,29 +82,35 @@ impl CargoTargetSpec {\n         };\n \n         let cargo_config = snap.config.cargo();\n-        if cargo_config.all_features {\n-            args.push(\"--all-features\".to_string());\n \n-            for feature in target_required_features {\n-                args.push(\"--features\".to_string());\n-                args.push(feature);\n-            }\n-        } else {\n-            let mut features = Vec::new();\n-            if let Some(cfg) = cfg.as_ref() {\n-                required_features(cfg, &mut features);\n+        match &cargo_config.features {\n+            CargoFeatures::All => {\n+                args.push(\"--all-features\".to_owned());\n+                for feature in target_required_features {\n+                    args.push(\"--features\".to_owned());\n+                    args.push(feature);\n+                }\n             }\n+            CargoFeatures::Selected { features, no_default_features } => {\n+                let mut feats = Vec::new();\n+                if let Some(cfg) = cfg.as_ref() {\n+                    required_features(cfg, &mut feats);\n+                }\n \n-            features.extend(cargo_config.features);\n-            features.extend(target_required_features);\n+                feats.extend(features.iter().cloned());\n+                feats.extend(target_required_features);\n \n-            features.dedup();\n-            for feature in features {\n-                args.push(\"--features\".to_string());\n-                args.push(feature);\n+                feats.dedup();\n+                for feature in feats {\n+                    args.push(\"--features\".to_owned());\n+                    args.push(feature);\n+                }\n+\n+                if *no_default_features {\n+                    args.push(\"--no-default-features\".to_owned());\n+                }\n             }\n         }\n-\n         Ok((args, extra_args))\n     }\n \n@@ -136,7 +142,7 @@ impl CargoTargetSpec {\n     }\n \n     pub(crate) fn push_to(self, buf: &mut Vec<String>, kind: &RunnableKind) {\n-        buf.push(\"--package\".to_string());\n+        buf.push(\"--package\".to_owned());\n         buf.push(self.package);\n \n         // Can't mix --doc with other target flags\n@@ -145,23 +151,23 @@ impl CargoTargetSpec {\n         }\n         match self.target_kind {\n             TargetKind::Bin => {\n-                buf.push(\"--bin\".to_string());\n+                buf.push(\"--bin\".to_owned());\n                 buf.push(self.target);\n             }\n             TargetKind::Test => {\n-                buf.push(\"--test\".to_string());\n+                buf.push(\"--test\".to_owned());\n                 buf.push(self.target);\n             }\n             TargetKind::Bench => {\n-                buf.push(\"--bench\".to_string());\n+                buf.push(\"--bench\".to_owned());\n                 buf.push(self.target);\n             }\n             TargetKind::Example => {\n-                buf.push(\"--example\".to_string());\n+                buf.push(\"--example\".to_owned());\n                 buf.push(self.target);\n             }\n             TargetKind::Lib => {\n-                buf.push(\"--lib\".to_string());\n+                buf.push(\"--lib\".to_owned());\n             }\n             TargetKind::Other | TargetKind::BuildScript => (),\n         }"}, {"sha": "0d0e246029b16dc3ca753c2ec709d80275182b0c", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6d574662398e8c592ec2160a3ace9358337fd6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=bc6d574662398e8c592ec2160a3ace9358337fd6", "patch": "@@ -22,7 +22,8 @@ use ide_db::{\n use itertools::Itertools;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{\n-    CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource, UnsetTestCrates,\n+    CargoConfig, CargoFeatures, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource,\n+    UnsetTestCrates,\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n use serde::{de::DeserializeOwned, Deserialize};\n@@ -90,7 +91,7 @@ config_data! {\n         /// List of features to activate.\n         ///\n         /// Set this to `\"all\"` to pass `--all-features` to cargo.\n-        cargo_features: CargoFeatures      = \"[]\",\n+        cargo_features: CargoFeaturesDef      = \"[]\",\n         /// Whether to pass `--no-default-features` to cargo.\n         cargo_noDefaultFeatures: bool    = \"false\",\n         /// Internal config for debugging, disables loading of sysroot crates.\n@@ -114,7 +115,7 @@ config_data! {\n         /// `#rust-analyzer.cargo.features#`.\n         ///\n         /// Set to `\"all\"` to pass `--all-features` to Cargo.\n-        checkOnSave_features: Option<CargoFeatures>      = \"null\",\n+        checkOnSave_features: Option<CargoFeaturesDef>      = \"null\",\n         /// Whether to pass `--no-default-features` to Cargo. Defaults to\n         /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n         checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n@@ -1028,11 +1029,12 @@ impl Config {\n         });\n \n         CargoConfig {\n-            no_default_features: self.data.cargo_noDefaultFeatures,\n-            all_features: matches!(self.data.cargo_features, CargoFeatures::All),\n             features: match &self.data.cargo_features {\n-                CargoFeatures::All => vec![],\n-                CargoFeatures::Listed(it) => it.clone(),\n+                CargoFeaturesDef::All => CargoFeatures::All,\n+                CargoFeaturesDef::Selected(features) => CargoFeatures::Selected {\n+                    features: features.clone(),\n+                    no_default_features: self.data.cargo_noDefaultFeatures,\n+                },\n             },\n             target: self.data.cargo_target.clone(),\n             no_sysroot: self.data.cargo_noSysroot,\n@@ -1086,16 +1088,16 @@ impl Config {\n                     .unwrap_or(self.data.cargo_noDefaultFeatures),\n                 all_features: matches!(\n                     self.data.checkOnSave_features.as_ref().unwrap_or(&self.data.cargo_features),\n-                    CargoFeatures::All\n+                    CargoFeaturesDef::All\n                 ),\n                 features: match self\n                     .data\n                     .checkOnSave_features\n                     .clone()\n                     .unwrap_or_else(|| self.data.cargo_features.clone())\n                 {\n-                    CargoFeatures::All => vec![],\n-                    CargoFeatures::Listed(it) => it,\n+                    CargoFeaturesDef::All => vec![],\n+                    CargoFeaturesDef::Selected(it) => it,\n                 },\n                 extra_args: self.data.checkOnSave_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n@@ -1564,10 +1566,10 @@ enum CallableCompletionDef {\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(untagged)]\n-enum CargoFeatures {\n+enum CargoFeaturesDef {\n     #[serde(deserialize_with = \"de_unit_v::all\")]\n     All,\n-    Listed(Vec<String>),\n+    Selected(Vec<String>),\n }\n \n #[derive(Deserialize, Debug, Clone)]\n@@ -1912,7 +1914,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Only show mutable reborrow hints.\"\n             ]\n         },\n-        \"CargoFeatures\" => set! {\n+        \"CargoFeaturesDef\" => set! {\n             \"anyOf\": [\n                 {\n                     \"type\": \"string\",\n@@ -1929,7 +1931,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 }\n             ],\n         },\n-        \"Option<CargoFeatures>\" => set! {\n+        \"Option<CargoFeaturesDef>\" => set! {\n             \"anyOf\": [\n                 {\n                     \"type\": \"string\","}]}