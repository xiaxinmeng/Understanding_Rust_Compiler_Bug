{"sha": "a32959263ca6b798fb02634d49e76c6abac41806", "node_id": "C_kwDOAAsO6NoAKGEzMjk1OTI2M2NhNmI3OThmYjAyNjM0ZDQ5ZTc2YzZhYmFjNDE4MDY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T10:56:35Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T11:02:01Z"}, "message": "Use `SSO_ARRAY_SIZE` instead of `8` in `SsoHashMap` impl", "tree": {"sha": "e8fe3c2b6fa688aafc47024333ca9cfee3d140eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fe3c2b6fa688aafc47024333ca9cfee3d140eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a32959263ca6b798fb02634d49e76c6abac41806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a32959263ca6b798fb02634d49e76c6abac41806", "html_url": "https://github.com/rust-lang/rust/commit/a32959263ca6b798fb02634d49e76c6abac41806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a32959263ca6b798fb02634d49e76c6abac41806/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0465201f772bf74e57885cfa64817314ac8c743b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0465201f772bf74e57885cfa64817314ac8c743b", "html_url": "https://github.com/rust-lang/rust/commit/0465201f772bf74e57885cfa64817314ac8c743b"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "89b8c852649691261b3e8080f926bd171c77eae9", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a32959263ca6b798fb02634d49e76c6abac41806/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a32959263ca6b798fb02634d49e76c6abac41806/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=a32959263ca6b798fb02634d49e76c6abac41806", "patch": "@@ -5,20 +5,20 @@ use std::fmt;\n use std::hash::Hash;\n use std::ops::Index;\n \n-// For pointer-sized arguments arrays\n-// are faster than set/map for up to 64\n-// arguments.\n-//\n-// On the other hand such a big array\n-// hurts cache performance, makes passing\n-// sso structures around very expensive.\n-//\n-// Biggest performance benefit is gained\n-// for reasonably small arrays that stay\n-// small in vast majority of cases.\n-//\n-// '8' is chosen as a sane default, to be\n-// reevaluated later.\n+/// For pointer-sized arguments arrays\n+/// are faster than set/map for up to 64\n+/// arguments.\n+///\n+/// On the other hand such a big array\n+/// hurts cache performance, makes passing\n+/// sso structures around very expensive.\n+///\n+/// Biggest performance benefit is gained\n+/// for reasonably small arrays that stay\n+/// small in vast majority of cases.\n+///\n+/// '8' is chosen as a sane default, to be\n+/// reevaluated later.\n const SSO_ARRAY_SIZE: usize = 8;\n \n /// Small-storage-optimized implementation of a map.\n@@ -407,7 +407,7 @@ where\n \n impl<K, V> IntoIterator for SsoHashMap<K, V> {\n     type IntoIter = Either<\n-        <ArrayVec<(K, V), 8> as IntoIterator>::IntoIter,\n+        <ArrayVec<(K, V), SSO_ARRAY_SIZE> as IntoIterator>::IntoIter,\n         <FxHashMap<K, V> as IntoIterator>::IntoIter,\n     >;\n     type Item = <Self::IntoIter as Iterator>::Item;\n@@ -437,7 +437,7 @@ fn adapt_array_mut_it<K, V>(pair: &mut (K, V)) -> (&K, &mut V) {\n impl<'a, K, V> IntoIterator for &'a SsoHashMap<K, V> {\n     type IntoIter = Either<\n         std::iter::Map<\n-            <&'a ArrayVec<(K, V), 8> as IntoIterator>::IntoIter,\n+            <&'a ArrayVec<(K, V), SSO_ARRAY_SIZE> as IntoIterator>::IntoIter,\n             fn(&'a (K, V)) -> (&'a K, &'a V),\n         >,\n         <&'a FxHashMap<K, V> as IntoIterator>::IntoIter,\n@@ -455,7 +455,7 @@ impl<'a, K, V> IntoIterator for &'a SsoHashMap<K, V> {\n impl<'a, K, V> IntoIterator for &'a mut SsoHashMap<K, V> {\n     type IntoIter = Either<\n         std::iter::Map<\n-            <&'a mut ArrayVec<(K, V), 8> as IntoIterator>::IntoIter,\n+            <&'a mut ArrayVec<(K, V), SSO_ARRAY_SIZE> as IntoIterator>::IntoIter,\n             fn(&'a mut (K, V)) -> (&'a K, &'a mut V),\n         >,\n         <&'a mut FxHashMap<K, V> as IntoIterator>::IntoIter,"}]}