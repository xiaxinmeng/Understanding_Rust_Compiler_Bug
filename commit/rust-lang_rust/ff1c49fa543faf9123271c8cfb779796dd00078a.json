{"sha": "ff1c49fa543faf9123271c8cfb779796dd00078a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMWM0OWZhNTQzZmFmOTEyMzI3MWM4Y2ZiNzc5Nzk2ZGQwMDA3OGE=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-13T00:02:31Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-20T09:17:28Z"}, "message": "Forbid borrow of static items with unsafe interior", "tree": {"sha": "2adc2ed0820e3aa74537778cf8f638767dc230b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2adc2ed0820e3aa74537778cf8f638767dc230b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff1c49fa543faf9123271c8cfb779796dd00078a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1c49fa543faf9123271c8cfb779796dd00078a", "html_url": "https://github.com/rust-lang/rust/commit/ff1c49fa543faf9123271c8cfb779796dd00078a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff1c49fa543faf9123271c8cfb779796dd00078a/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ccd807da4935dedbe2fcf61ebf08d1422852d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ccd807da4935dedbe2fcf61ebf08d1422852d8", "html_url": "https://github.com/rust-lang/rust/commit/69ccd807da4935dedbe2fcf61ebf08d1422852d8"}], "stats": {"total": 146, "additions": 112, "deletions": 34}, "files": [{"sha": "7dfaaa6900c976238805d031eb242ad71e3708db", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=ff1c49fa543faf9123271c8cfb779796dd00078a", "patch": "@@ -518,11 +518,11 @@ impl<'a> CheckLoanCtxt<'a> {\n                                             expr: &ast::Expr,\n                                             cmt: mc::cmt)\n                                             -> bool {\n-            match cmt.freely_aliasable() {\n+            match cmt.freely_aliasable(this.tcx()) {\n                 None => {\n                     return true;\n                 }\n-                Some(mc::AliasableStaticMut) => {\n+                Some(mc::AliasableStaticMut(..)) => {\n                     return true;\n                 }\n                 Some(cause) => {"}, {"sha": "459c908cae2e7546a69bdd2e2f8843f4535c864f", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=ff1c49fa543faf9123271c8cfb779796dd00078a", "patch": "@@ -175,9 +175,9 @@ pub fn gather_loans_in_static_initializer(bccx: &mut BorrowckCtxt, expr: &ast::E\n         move_data: MoveData::new()\n     };\n \n+    // FIXME #13005 This should also walk the\n+    // expression.\n     match expr.node {\n-        // Just visit the expression if the\n-        // item is taking an address.\n         ast::ExprAddrOf(..) => {\n             glcx.visit_expr(expr, ());\n         }\n@@ -686,34 +686,45 @@ impl<'a> GatherLoanCtxt<'a> {\n                               -> Result<(),()> {\n             //! Implements the A-* rules in doc.rs.\n \n-            match req_kind {\n-                ty::ImmBorrow => {\n+            match (cmt.freely_aliasable(bccx.tcx), req_kind) {\n+                (None, _) => {\n+                    /* Uniquely accessible path -- OK for `&` and `&mut` */\n                     Ok(())\n                 }\n-\n-                ty::UniqueImmBorrow | ty::MutBorrow => {\n-                    // Check for those cases where we cannot control\n-                    // the aliasing and make sure that we are not\n-                    // being asked to.\n-                    match cmt.freely_aliasable() {\n-                        None => {\n-                            Ok(())\n+                (Some(mc::AliasableStatic(safety)), ty::ImmBorrow) => {\n+                    // Borrow of an immutable static item:\n+                    match safety {\n+                        mc::InteriorUnsafe => {\n+                            // If the static item contains an Unsafe<T>, it has interior mutability.\n+                            // In such cases, we cannot permit it to be borrowed, because the\n+                            // static item resides in immutable memory and mutating it would\n+                            // cause segfaults.\n+                            bccx.tcx.sess.span_err(borrow_span,\n+                                                   format!(\"borrow of immutable static items with \\\n+                                                            unsafe interior is not allowed\"));\n+                            Err(())\n                         }\n-                        Some(mc::AliasableStaticMut) => {\n-                            // This is nasty, but we ignore the\n-                            // aliasing rules if the data is based in\n-                            // a `static mut`, since those are always\n-                            // unsafe. At your own peril and all that.\n+                        mc::InteriorSafe => {\n+                            // Immutable static can be borrowed, no problem.\n                             Ok(())\n                         }\n-                        Some(alias_cause) => {\n-                            bccx.report_aliasability_violation(\n+                    }\n+                }\n+                (Some(mc::AliasableStaticMut(..)), _) => {\n+                    // Even touching a static mut is considered unsafe. We assume the\n+                    // user knows what they're doing in these cases.\n+                    Ok(())\n+                }\n+                (Some(alias_cause), ty::UniqueImmBorrow) |\n+                (Some(alias_cause), ty::MutBorrow) => {\n+                    bccx.report_aliasability_violation(\n                                 borrow_span,\n                                 BorrowViolation(loan_cause),\n                                 alias_cause);\n-                            Err(())\n-                        }\n-                    }\n+                    Err(())\n+                }\n+                (_, _) => {\n+                    Ok(())\n                 }\n             }\n         }"}, {"sha": "dd2f02bf2416d20e8d8f5c2aebb65f892b6c6d7f", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=ff1c49fa543faf9123271c8cfb779796dd00078a", "patch": "@@ -130,9 +130,10 @@ fn borrowck_item(this: &mut BorrowckCtxt, item: &ast::Item) {\n         ast::ItemStatic(_, _, ex) => {\n             gather_loans::gather_loans_in_static_initializer(this, ex);\n         }\n-        _ => {}\n+        _ => {\n+            visit::walk_item(this, item, ());\n+        }\n     }\n-    visit::walk_item(this, item, ());\n }\n \n fn borrowck_fn(this: &mut BorrowckCtxt,\n@@ -733,8 +734,8 @@ impl<'a> BorrowckCtxt<'a> {\n                     span,\n                     format!(\"{} in an aliasable location\", prefix));\n             }\n-            mc::AliasableStatic |\n-            mc::AliasableStaticMut => {\n+            mc::AliasableStatic(..) |\n+            mc::AliasableStaticMut(..) => {\n                 self.tcx.sess.span_err(\n                     span,\n                     format!(\"{} in a static location\", prefix));"}, {"sha": "49dbe668403de38d649a830da42b2e59d81c0dba", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ff1c49fa543faf9123271c8cfb779796dd00078a", "patch": "@@ -1222,12 +1222,17 @@ pub fn field_mutbl(tcx: &ty::ctxt,\n     return None;\n }\n \n+pub enum InteriorSafety {\n+    InteriorUnsafe,\n+    InteriorSafe\n+}\n+\n pub enum AliasableReason {\n     AliasableManaged,\n     AliasableBorrowed,\n     AliasableOther,\n-    AliasableStatic,\n-    AliasableStaticMut,\n+    AliasableStatic(InteriorSafety),\n+    AliasableStaticMut(InteriorSafety),\n }\n \n impl cmt_ {\n@@ -1257,7 +1262,7 @@ impl cmt_ {\n         }\n     }\n \n-    pub fn freely_aliasable(&self) -> Option<AliasableReason> {\n+    pub fn freely_aliasable(&self, ctxt: &ty::ctxt) -> Option<AliasableReason> {\n         /*!\n          * Returns `Some(_)` if this lvalue represents a freely aliasable\n          * pointer type.\n@@ -1275,7 +1280,7 @@ impl cmt_ {\n             cat_interior(b, _) |\n             cat_discr(b, _) => {\n                 // Aliasability depends on base cmt\n-                b.freely_aliasable()\n+                b.freely_aliasable(ctxt)\n             }\n \n             cat_copied_upvar(CopiedUpvar {onceness: ast::Once, ..}) |\n@@ -1292,10 +1297,16 @@ impl cmt_ {\n             }\n \n             cat_static_item(..) => {\n+                let int_safe = if ty::type_interior_is_unsafe(ctxt, self.ty) {\n+                    InteriorUnsafe\n+                } else {\n+                    InteriorSafe\n+                };\n+\n                 if self.mutbl.is_mutable() {\n-                    Some(AliasableStaticMut)\n+                    Some(AliasableStaticMut(int_safe))\n                 } else {\n-                    Some(AliasableStatic)\n+                    Some(AliasableStatic(int_safe))\n                 }\n             }\n "}, {"sha": "653b4372695ae25c37289e8d63faf866a47b99bf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ff1c49fa543faf9123271c8cfb779796dd00078a", "patch": "@@ -1996,6 +1996,10 @@ impl TypeContents {\n         !self.intersects(TC::Nonpod)\n     }\n \n+    pub fn interior_unsafe(&self) -> bool {\n+        self.intersects(TC::InteriorUnsafe)\n+    }\n+\n     pub fn moves_by_default(&self, _: &ctxt) -> bool {\n         self.intersects(TC::Moves)\n     }\n@@ -2092,6 +2096,10 @@ pub fn type_is_freezable(cx: &ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_freezable(cx)\n }\n \n+pub fn type_interior_is_unsafe(cx: &ctxt, t: ty::t) -> bool {\n+    type_contents(cx, t).interior_unsafe()\n+}\n+\n pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n     let ty_id = type_id(ty);\n "}, {"sha": "c790a040a91a4be332c9240b52994022f0509af3", "filename": "src/test/compile-fail/borrowck-forbid-static-unsafe-interior.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c49fa543faf9123271c8cfb779796dd00078a/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs?ref=ff1c49fa543faf9123271c8cfb779796dd00078a", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Verify that it is not possible to take the address of\n+// static items with usnafe interior.\n+\n+use std::kinds::marker;\n+use std::ty::Unsafe;\n+\n+struct MyUnsafe<T> {\n+    value: Unsafe<T>\n+}\n+\n+impl<T> MyUnsafe<T> {\n+    fn forbidden(&self) {}\n+}\n+\n+enum UnsafeEnum<T> {\n+    VariantSafe,\n+    VariantUnsafe(Unsafe<T>)\n+}\n+\n+static STATIC1: UnsafeEnum<int> = VariantSafe;\n+\n+static STATIC2: Unsafe<int> = Unsafe{value: 1, marker1: marker::InvariantType};\n+static STATIC3: MyUnsafe<int> = MyUnsafe{value: STATIC2};\n+\n+static STATIC4: &'static Unsafe<int> = &'static STATIC2;\n+//~^ ERROR borrow of immutable static items with unsafe interior is not allowed\n+\n+\n+fn main() {\n+    let a = &STATIC1;\n+    //~^ ERROR borrow of immutable static items with unsafe interior is not allowed\n+\n+    STATIC3.forbidden()\n+    //~^ ERROR borrow of immutable static items with unsafe interior is not allowed\n+}\n+\n+"}]}