{"sha": "cac431ba750c4f079690731b976bc67d979cb8e3", "node_id": "C_kwDOAAsO6NoAKGNhYzQzMWJhNzUwYzRmMDc5NjkwNzMxYjk3NmJjNjdkOTc5Y2I4ZTM", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-22T19:35:17Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-22T19:36:34Z"}, "message": "Store a `DefId` instead of an `AdtDef` in `AggregateKind::Adt`\n\nThe `AggregateKind` enum ends up in the final mir `Body`. Currently,\nany changes to `AdtDef` (regardless of how significant they are)\nwill legitimately cause the overall result of `optimized_mir` to change,\ninvalidating any codegen re-use involving that mir.\n\nThis will get worse once we start hashing the `Span` inside `FieldDef`\n(which is itself contained in `AdtDef`).\n\nTo try to reduce these kinds of invalidations, this commit changes\n`AggregateKind::Adt` to store just the `DefId`, instead of the full\n`AdtDef`. This allows the result of `optimized_mir` to be unchanged\nif the `AdtDef` changes in a way that doesn't actually affect any\nof the MIR we build.", "tree": {"sha": "3f58e4c7c63c2d0c55ed31e7736927005aece152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f58e4c7c63c2d0c55ed31e7736927005aece152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac431ba750c4f079690731b976bc67d979cb8e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHDfzAACgkQtAh+UQ6Y\nsWSVJg//WZXoEV/V3e+W0oxv/DhO1LHuS4HqeKdzINVkL/+3Wy9SA5UiRdpcIcRO\nV9mvf1q/OGPyltehHXR9ilvU5Vpv/GJSx3v9uto9o+B1ShmUTIAj+kvS2BSbet4b\nn8WUFB3h3rFTB2pSYlkvJCDgn0Pm3gAF9PRpfF81PovK6bCXRQBcWkuBgtw7+UWK\n9sQtWMME34Qk/g6d/phOGdAuU2/HdCjBPnO10LnzZP8HeSJUs+uvOFpg3M0ruN1O\ny0JCPgzh+jXj8dw+M7XACPgm/TmRQ1Xk8hyrdem95AlC277bgt0/PmbU9R/2AM2K\nCiYDGmtkQktNzgs9LyVB8TdTjT7iGyv7yYzGFZsjZUI3e1mP/y2kMEAXACoZNm+M\n/1oMT9Soc/jMkSvoEOg4/6M+sgqtOA78idpTODCdu2NNdAq9dkAN87ww6k8+SD+H\nknW639RqPsdYtcb0Lj96Ke5wCDAQeWh1zDj/ficKWAgIt/bMausS1xfg/pY+UsgW\n/nDv1eZBnSAp8eUNbNbpvrMMXHydpECpatvzc97nvJ5Lb+saB1D2jZ6Yc4Ji5Vpf\nrjZVk/arrahVFl9PWdx6SEStIn9rGRPW5ceddmSppFolA65NuXKCcOq+Bxju/bl7\nJSyHfcS/bIVqCiD78hlHgInqTh+CxvzCXqN8EUdLmh28fEEYxrA=\n=rIYm\n-----END PGP SIGNATURE-----", "payload": "tree 3f58e4c7c63c2d0c55ed31e7736927005aece152\nparent e100ec5bc7cd768ec17d75448b29c9ab4a39272b\nauthor Aaron Hill <aa1ronham@gmail.com> 1640201717 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1640201794 -0500\n\nStore a `DefId` instead of an `AdtDef` in `AggregateKind::Adt`\n\nThe `AggregateKind` enum ends up in the final mir `Body`. Currently,\nany changes to `AdtDef` (regardless of how significant they are)\nwill legitimately cause the overall result of `optimized_mir` to change,\ninvalidating any codegen re-use involving that mir.\n\nThis will get worse once we start hashing the `Span` inside `FieldDef`\n(which is itself contained in `AdtDef`).\n\nTo try to reduce these kinds of invalidations, this commit changes\n`AggregateKind::Adt` to store just the `DefId`, instead of the full\n`AdtDef`. This allows the result of `optimized_mir` to be unchanged\nif the `AdtDef` changes in a way that doesn't actually affect any\nof the MIR we build.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac431ba750c4f079690731b976bc67d979cb8e3", "html_url": "https://github.com/rust-lang/rust/commit/cac431ba750c4f079690731b976bc67d979cb8e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac431ba750c4f079690731b976bc67d979cb8e3/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "html_url": "https://github.com/rust-lang/rust/commit/e100ec5bc7cd768ec17d75448b29c9ab4a39272b"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "1f745f977d4c41b998ba44ccbd31ab1d5d56d560", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -1916,7 +1916,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let tcx = self.tcx();\n \n         match *ak {\n-            AggregateKind::Adt(def, variant_index, substs, _, active_field_index) => {\n+            AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {\n+                let def = tcx.adt_def(adt_did);\n                 let variant = &def.variants[variant_index];\n                 let adj_field_index = active_field_index.unwrap_or(field_index);\n                 if let Some(field) = variant.fields.get(adj_field_index) {\n@@ -2621,8 +2622,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n \n         let (def_id, instantiated_predicates) = match aggregate_kind {\n-            AggregateKind::Adt(def, _, substs, _, _) => {\n-                (def.did, tcx.predicates_of(def.did).instantiate(tcx, substs))\n+            AggregateKind::Adt(adt_did, _, substs, _, _) => {\n+                (*adt_did, tcx.predicates_of(*adt_did).instantiate(tcx, substs))\n             }\n \n             // For closures, we have some **extra requirements** we"}, {"sha": "6f960ca44cdd3f298028fe21e7df7bb4c530c899", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -112,9 +112,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n                 let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n+                    mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n                         dest.codegen_set_discr(&mut bx, variant_index);\n-                        if adt_def.is_enum() {\n+                        if bx.tcx().adt_def(adt_did).is_enum() {\n                             (dest.project_downcast(&mut bx, variant_index), active_field_index)\n                         } else {\n                             (dest, active_field_index)"}, {"sha": "6e37aae0f5e5cf2f31898189e37ac419cf3614f3", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -199,9 +199,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Aggregate(ref kind, ref operands) => {\n                 // active_field_index is for union initialization.\n                 let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n+                    mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n                         self.write_discriminant(variant_index, &dest)?;\n-                        if adt_def.is_enum() {\n+                        if self.tcx.adt_def(adt_did).is_enum() {\n                             assert!(active_field_index.is_none());\n                             (self.place_downcast(&dest, variant_index)?, None)\n                         } else {"}, {"sha": "27f2da34262a1f2e851f95a979bd3ed7d54d583d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -270,7 +270,8 @@ where\n         Rvalue::Aggregate(kind, operands) => {\n             // Return early if we know that the struct or enum being constructed is always\n             // qualified.\n-            if let AggregateKind::Adt(def, _, substs, ..) = **kind {\n+            if let AggregateKind::Adt(adt_did, _, substs, ..) = **kind {\n+                let def = cx.tcx.adt_def(adt_did);\n                 if Q::in_adt_inherently(cx, def, substs) {\n                     return true;\n                 }"}, {"sha": "e5f5e7072d5906e4ef25de23f481340c0980aa3b", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -22,7 +22,8 @@ pub fn expand_aggregate<'tcx>(\n ) -> impl Iterator<Item = Statement<'tcx>> + TrustedLen {\n     let mut set_discriminant = None;\n     let active_field_index = match kind {\n-        AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n+        AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {\n+            let adt_def = tcx.adt_def(adt_did);\n             if adt_def.is_enum() {\n                 set_discriminant = Some(Statement {\n                     kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },"}, {"sha": "c7c306e7d06cc518f82879234746c3f71a80e9d5", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -2268,7 +2268,7 @@ pub enum AggregateKind<'tcx> {\n     /// active field number and is present only for union expressions\n     /// -- e.g., for a union expression `SomeUnion { c: .. }`, the\n     /// active field index would identity the field `c`\n-    Adt(&'tcx AdtDef, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n+    Adt(DefId, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n     Closure(DefId, SubstsRef<'tcx>),\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n@@ -2427,28 +2427,26 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }\n \n-                    AggregateKind::Adt(adt_def, variant, substs, _user_ty, _) => {\n-                        let variant_def = &adt_def.variants[variant];\n-\n-                        let name = ty::tls::with(|tcx| {\n+                    AggregateKind::Adt(adt_did, variant, substs, _user_ty, _) => {\n+                        ty::tls::with(|tcx| {\n                             let mut name = String::new();\n+                            let variant_def = &tcx.adt_def(adt_did).variants[variant];\n                             let substs = tcx.lift(substs).expect(\"could not lift for printing\");\n                             FmtPrinter::new(tcx, &mut name, Namespace::ValueNS)\n                                 .print_def_path(variant_def.def_id, substs)?;\n-                            Ok(name)\n-                        })?;\n-\n-                        match variant_def.ctor_kind {\n-                            CtorKind::Const => fmt.write_str(&name),\n-                            CtorKind::Fn => fmt_tuple(fmt, &name),\n-                            CtorKind::Fictive => {\n-                                let mut struct_fmt = fmt.debug_struct(&name);\n-                                for (field, place) in iter::zip(&variant_def.fields, places) {\n-                                    struct_fmt.field(field.ident.as_str(), place);\n+\n+                            match variant_def.ctor_kind {\n+                                CtorKind::Const => fmt.write_str(&name),\n+                                CtorKind::Fn => fmt_tuple(fmt, &name),\n+                                CtorKind::Fictive => {\n+                                    let mut struct_fmt = fmt.debug_struct(&name);\n+                                    for (field, place) in iter::zip(&variant_def.fields, places) {\n+                                        struct_fmt.field(field.ident.as_str(), place);\n+                                    }\n+                                    struct_fmt.finish()\n                                 }\n-                                struct_fmt.finish()\n                             }\n-                        }\n+                        })\n                     }\n \n                     AggregateKind::Closure(def_id, substs) => ty::tls::with(|tcx| {"}, {"sha": "e577df482055674770ff57bdd874b5f41a9364fb", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -200,7 +200,7 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n                 AggregateKind::Tuple => tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx))),\n-                AggregateKind::Adt(def, _, substs, _, _) => tcx.type_of(def.did).subst(tcx, substs),\n+                AggregateKind::Adt(did, _, substs, _, _) => tcx.type_of(did).subst(tcx, substs),\n                 AggregateKind::Closure(did, substs) => tcx.mk_closure(did, substs),\n                 AggregateKind::Generator(did, substs, movability) => {\n                     tcx.mk_generator(did, substs, movability)"}, {"sha": "d9896ff5ac93ecd9c910e1ca792541c3a834b7fd", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     })\n                 });\n                 let adt = Box::new(AggregateKind::Adt(\n-                    adt_def,\n+                    adt_def.did,\n                     variant_index,\n                     substs,\n                     user_ty,"}, {"sha": "a40c4d1c3662b302c152d88490e26b03bca9553f", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -117,8 +117,8 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n         match rvalue {\n             Rvalue::Aggregate(box ref aggregate, _) => match aggregate {\n                 &AggregateKind::Array(..) | &AggregateKind::Tuple => {}\n-                &AggregateKind::Adt(ref def, ..) => {\n-                    match self.tcx.layout_scalar_valid_range(def.did) {\n+                &AggregateKind::Adt(adt_did, ..) => {\n+                    match self.tcx.layout_scalar_valid_range(adt_did) {\n                         (Bound::Unbounded, Bound::Unbounded) => {}\n                         _ => self.require_unsafe(\n                             UnsafetyViolationKind::General,"}, {"sha": "bc9a104e849dc95a9b84c64c5f49814e696796db", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> TransformVisitor<'tcx> {\n         val: Operand<'tcx>,\n         source_info: SourceInfo,\n     ) -> impl Iterator<Item = Statement<'tcx>> {\n-        let kind = AggregateKind::Adt(self.state_adt_ref, idx, self.state_substs, None, None);\n+        let kind = AggregateKind::Adt(self.state_adt_ref.did, idx, self.state_substs, None, None);\n         assert_eq!(self.state_adt_ref.variants[idx].fields.len(), 1);\n         let ty = self\n             .tcx"}, {"sha": "58996dcd6735a20dbf6c12594529c5d97af219d5", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac431ba750c4f079690731b976bc67d979cb8e3/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=cac431ba750c4f079690731b976bc67d979cb8e3", "patch": "@@ -777,7 +777,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n         adt_def.variants[variant_index].fields.iter().enumerate().map(|(idx, field_def)| {\n             (Operand::Move(Place::from(Local::new(idx + 1))), field_def.ty(tcx, substs))\n         }),\n-        AggregateKind::Adt(adt_def, variant_index, substs, None, None),\n+        AggregateKind::Adt(adt_def.did, variant_index, substs, None, None),\n         source_info,\n         tcx,\n     )"}]}