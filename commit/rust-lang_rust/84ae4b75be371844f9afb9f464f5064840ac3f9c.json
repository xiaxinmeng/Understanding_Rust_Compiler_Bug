{"sha": "84ae4b75be371844f9afb9f464f5064840ac3f9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YWU0Yjc1YmUzNzE4NDRmOWFmYjlmNDY0ZjUwNjQ4NDBhYzNmOWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-31T18:12:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:58Z"}, "message": "rustc: Migrate `CrateStore::item_body` to a query\n\nThis commit migrates the `item_body` method on `CrateStore` to a query instead\nto enable better tracking of dependencies and whatnot.", "tree": {"sha": "c4b7474d493149b7b1d2f895b7ed7c1f39c6e3f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b7474d493149b7b1d2f895b7ed7c1f39c6e3f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84ae4b75be371844f9afb9f464f5064840ac3f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84ae4b75be371844f9afb9f464f5064840ac3f9c", "html_url": "https://github.com/rust-lang/rust/commit/84ae4b75be371844f9afb9f464f5064840ac3f9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84ae4b75be371844f9afb9f464f5064840ac3f9c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "953490ddfa0561b21e56db6000fc2b3810ec0a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/953490ddfa0561b21e56db6000fc2b3810ec0a91", "html_url": "https://github.com/rust-lang/rust/commit/953490ddfa0561b21e56db6000fc2b3810ec0a91"}], "stats": {"total": 44, "additions": 14, "deletions": 30}, "files": [{"sha": "d6aa9cb341ee9d5f0033e590ebbbb58b6eddcfca", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=84ae4b75be371844f9afb9f464f5064840ac3f9c", "patch": "@@ -563,6 +563,7 @@ define_dep_nodes!( <'tcx>\n     [] GetLangItems,\n     [] DefinedLangItems(CrateNum),\n     [] MissingLangItems(CrateNum),\n+    [] ItemBody(DefId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "f71a08280c63ce7eafc6e9fcde37022f921c00a3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=84ae4b75be371844f9afb9f464f5064840ac3f9c", "patch": "@@ -42,7 +42,6 @@ use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use rustc_back::target::Target;\n-use hir;\n \n pub use self::NativeLibraryKind::*;\n \n@@ -258,10 +257,6 @@ pub trait CrateStore {\n     fn load_macro_untracked(&self, did: DefId, sess: &Session) -> LoadedMacro;\n     fn extern_mod_stmt_cnum_untracked(&self, emod_id: ast::NodeId) -> Option<CrateNum>;\n \n-    // misc. metadata\n-    fn item_body<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n-                           -> &'tcx hir::Body;\n-\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum>;\n@@ -350,12 +345,6 @@ impl CrateStore for DummyCrateStore {\n     }\n     fn load_macro_untracked(&self, did: DefId, sess: &Session) -> LoadedMacro { bug!(\"load_macro\") }\n \n-    // misc. metadata\n-    fn item_body<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n-                           -> &'tcx hir::Body {\n-        bug!(\"item_body\")\n-    }\n-\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum> { vec![] }"}, {"sha": "751beb4d0e9f10b9a36ecb2927ad5bd8b179fbb6", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=84ae4b75be371844f9afb9f464f5064840ac3f9c", "patch": "@@ -1315,6 +1315,7 @@ define_maps! { <'tcx>\n     [] get_lang_items: get_lang_items_node(CrateNum) -> Rc<LanguageItems>,\n     [] defined_lang_items: DefinedLangItems(CrateNum) -> Rc<Vec<(DefIndex, usize)>>,\n     [] missing_lang_items: MissingLangItems(CrateNum) -> Rc<Vec<LangItem>>,\n+    [] item_body: ItemBody(DefId) -> &'tcx hir::Body,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "d93718071979535d32b54d4a11f23cb4e06ad76f", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=84ae4b75be371844f9afb9f464f5064840ac3f9c", "patch": "@@ -354,7 +354,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n             }\n           } else {\n             if tcx.is_const_fn(def_id) {\n-                tcx.sess.cstore.item_body(tcx, def_id)\n+                tcx.item_body(def_id)\n             } else {\n                 signal!(e, TypeckError)\n             }\n@@ -774,7 +774,7 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.mir_const_qualif(def_id);\n         tcx.hir.body(tcx.hir.body_owned_by(id))\n     } else {\n-        tcx.sess.cstore.item_body(tcx, def_id)\n+        tcx.item_body(def_id)\n     };\n     ConstContext::new(tcx, key.param_env.and(substs), tables).eval(&body.value)\n }"}, {"sha": "a4040834cf5830e3b94f3fb44c878d5fe7315108", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=84ae4b75be371844f9afb9f464f5064840ac3f9c", "patch": "@@ -609,7 +609,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         let body = if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n                             self.tcx.hir.body(self.tcx.hir.body_owned_by(id))\n                         } else {\n-                            self.tcx.sess.cstore.item_body(self.tcx, def_id)\n+                            self.tcx.item_body(def_id)\n                         };\n                         let pat = self.lower_const_expr(&body.value, pat_id, span);\n                         self.tables = old_tables;"}, {"sha": "7675a4f6e5fcbc1bbee5380403b3893fa79c1757", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=84ae4b75be371844f9afb9f464f5064840ac3f9c", "patch": "@@ -214,6 +214,14 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     defined_lang_items => { Rc::new(cdata.get_lang_items(&tcx.dep_graph)) }\n     missing_lang_items => { Rc::new(cdata.get_missing_lang_items(&tcx.dep_graph)) }\n+\n+    item_body => {\n+        if let Some(cached) = tcx.hir.get_inlined_body_untracked(def_id) {\n+            return cached;\n+        }\n+        debug!(\"item_body({:?}): inlining item\", def_id);\n+        cdata.item_body(tcx, def_id.index)\n+    }\n }\n \n pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -397,21 +405,6 @@ impl CrateStore for cstore::CStore {\n         })\n     }\n \n-    fn item_body<'a, 'tcx>(&self,\n-                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           def_id: DefId)\n-                           -> &'tcx hir::Body {\n-        self.read_dep_node(def_id);\n-\n-        if let Some(cached) = tcx.hir.get_inlined_body_untracked(def_id) {\n-            return cached;\n-        }\n-\n-        debug!(\"item_body({:?}): inlining item\", def_id);\n-\n-        self.get_crate_data(def_id.krate).item_body(tcx, def_id.index)\n-    }\n-\n     fn crates(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];"}, {"sha": "d3b4d30208be13fb5a69da4778124f1372a9c988", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ae4b75be371844f9afb9f464f5064840ac3f9c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=84ae4b75be371844f9afb9f464f5064840ac3f9c", "patch": "@@ -474,7 +474,7 @@ impl hir::print::PpAnn for InlinedConst {\n }\n \n fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n-    let body = cx.tcx.sess.cstore.item_body(cx.tcx, did);\n+    let body = cx.tcx.item_body(did);\n     let inlined = InlinedConst {\n         nested_bodies: cx.tcx.item_body_nested_bodies(did)\n     };"}]}