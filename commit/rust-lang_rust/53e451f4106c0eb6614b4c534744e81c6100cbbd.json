{"sha": "53e451f4106c0eb6614b4c534744e81c6100cbbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZTQ1MWY0MTA2YzBlYjY2MTRiNGM1MzQ3NDRlODFjNjEwMGNiYmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-22T07:49:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-23T16:45:20Z"}, "message": "sync: Move Once to using &self\n\nSimilarly to the rest of the previous commits, this moves the once primitive to\nusing &self instead of &mut self for proper sharing among many threads now.", "tree": {"sha": "d39c44c95baf7409fb76616b2cd24471a6c69e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d39c44c95baf7409fb76616b2cd24471a6c69e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53e451f4106c0eb6614b4c534744e81c6100cbbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53e451f4106c0eb6614b4c534744e81c6100cbbd", "html_url": "https://github.com/rust-lang/rust/commit/53e451f4106c0eb6614b4c534744e81c6100cbbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53e451f4106c0eb6614b4c534744e81c6100cbbd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3572a30e7a4fec7f0bb0957fc72588757111f14e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3572a30e7a4fec7f0bb0957fc72588757111f14e", "html_url": "https://github.com/rust-lang/rust/commit/3572a30e7a4fec7f0bb0957fc72588757111f14e"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "161f759ca2ddf5393b18243131bb2adecfb3e841", "filename": "src/libsync/one.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/53e451f4106c0eb6614b4c534744e81c6100cbbd/src%2Flibsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e451f4106c0eb6614b4c534744e81c6100cbbd/src%2Flibsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fone.rs?ref=53e451f4106c0eb6614b4c534744e81c6100cbbd", "patch": "@@ -15,7 +15,8 @@\n \n use std::int;\n use std::sync::atomics;\n-use sync::mutex::{StaticMutex, MUTEX_INIT};\n+\n+use mutex::{StaticMutex, MUTEX_INIT};\n \n /// A type which can be used to run a one-time global initialization. This type\n /// is *unsafe* to use because it is built on top of the `Mutex` in this module.\n@@ -62,7 +63,7 @@ impl Once {\n     ///\n     /// When this function returns, it is guaranteed that some initialization\n     /// has run and completed (it may not be the closure specified).\n-    pub fn doit(&mut self, f: ||) {\n+    pub fn doit(&self, f: ||) {\n         // Implementation-wise, this would seem like a fairly trivial primitive.\n         // The stickler part is where our mutexes currently require an\n         // allocation, and usage of a `Once` should't leak this allocation.\n@@ -101,14 +102,13 @@ impl Once {\n         // If the count is negative, then someone else finished the job,\n         // otherwise we run the job and record how many people will try to grab\n         // this lock\n-        {\n-            let _guard = self.mutex.lock();\n-            if self.cnt.load(atomics::SeqCst) > 0 {\n-                f();\n-                let prev = self.cnt.swap(int::MIN, atomics::SeqCst);\n-                self.lock_cnt.store(prev, atomics::SeqCst);\n-            }\n+        let guard = self.mutex.lock();\n+        if self.cnt.load(atomics::SeqCst) > 0 {\n+            f();\n+            let prev = self.cnt.swap(int::MIN, atomics::SeqCst);\n+            self.lock_cnt.store(prev, atomics::SeqCst);\n         }\n+        drop(guard);\n \n         // Last one out cleans up after everyone else, no leaks!\n         if self.lock_cnt.fetch_add(-1, atomics::SeqCst) == 1 {", "previous_filename": "src/libsync/sync/one.rs"}]}