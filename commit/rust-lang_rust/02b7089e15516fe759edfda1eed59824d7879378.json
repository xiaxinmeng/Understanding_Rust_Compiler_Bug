{"sha": "02b7089e15516fe759edfda1eed59824d7879378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjcwODllMTU1MTZmZTc1OWVkZmRhMWVlZDU5ODI0ZDc4NzkzNzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-08T00:25:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-08T00:25:54Z"}, "message": "libcore: Add a num typeclass", "tree": {"sha": "6f42011ee43a715c7de5f61c3f47cee120557c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f42011ee43a715c7de5f61c3f47cee120557c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b7089e15516fe759edfda1eed59824d7879378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b7089e15516fe759edfda1eed59824d7879378", "html_url": "https://github.com/rust-lang/rust/commit/02b7089e15516fe759edfda1eed59824d7879378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b7089e15516fe759edfda1eed59824d7879378/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d7400f3accfc3da6f1e699770c69884bee1c664", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7400f3accfc3da6f1e699770c69884bee1c664", "html_url": "https://github.com/rust-lang/rust/commit/3d7400f3accfc3da6f1e699770c69884bee1c664"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "89a8bfa424f8b3e0b64f1136d4ef9e51725f3b37", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02b7089e15516fe759edfda1eed59824d7879378/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7089e15516fe759edfda1eed59824d7879378/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=02b7089e15516fe759edfda1eed59824d7879378", "patch": "@@ -4,6 +4,7 @@\n \n import cmath::c_float::*;\n import cmath::c_float_targ_consts::*;\n+import num::num;\n \n // FIXME find out why these have to be exported explicitly\n \n@@ -19,6 +20,7 @@ export mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp;\n export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n+export num;\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -176,6 +178,17 @@ pure fn log2(n: f32) -> f32 {\n     ret ln(n) / consts::ln_2;\n }\n \n+impl num of num for f32 {\n+    fn add(&&other: f32)    -> f32 { ret self + other; }\n+    fn sub(&&other: f32)    -> f32 { ret self - other; }\n+    fn mul(&&other: f32)    -> f32 { ret self * other; }\n+    fn div(&&other: f32)    -> f32 { ret self / other; }\n+    fn modulo(&&other: f32) -> f32 { ret self % other; }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> f32 { ret n as f32;    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "151b90d4fcbcdbc4bb1404d569e1bf01b8ffe009", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02b7089e15516fe759edfda1eed59824d7879378/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7089e15516fe759edfda1eed59824d7879378/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=02b7089e15516fe759edfda1eed59824d7879378", "patch": "@@ -4,6 +4,7 @@\n \n import cmath::c_double::*;\n import cmath::c_double_targ_consts::*;\n+import num::num;\n \n // Even though this module exports everything defined in it,\n // because it contains re-exports, we also have to explicitly\n@@ -21,6 +22,7 @@ export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n export epsilon;\n+export num;\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -197,6 +199,17 @@ pure fn log2(n: f64) -> f64 {\n     ret ln(n) / consts::ln_2;\n }\n \n+impl num of num for f64 {\n+    fn add(&&other: f64)    -> f64 { ret self + other; }\n+    fn sub(&&other: f64)    -> f64 { ret self - other; }\n+    fn mul(&&other: f64)    -> f64 { ret self * other; }\n+    fn div(&&other: f64)    -> f64 { ret self / other; }\n+    fn modulo(&&other: f64) -> f64 { ret self % other; }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> f64 { ret n as f64;    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "a2b5197277aac876828e1b93eacc4379a8704c82", "filename": "src/libcore/float.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02b7089e15516fe759edfda1eed59824d7879378/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7089e15516fe759edfda1eed59824d7879378/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=02b7089e15516fe759edfda1eed59824d7879378", "patch": "@@ -17,6 +17,7 @@ export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n export pow_with_uint;\n+export num;\n \n // export when m_float == c_double\n \n@@ -26,6 +27,7 @@ export j0, j1, jn, y0, y1, yn;\n \n import m_float = f64;\n import f64::*;\n+import num::num;\n \n const NaN: float = 0.0/0.0;\n \n@@ -408,6 +410,17 @@ fn sin(x: float) -> float { f64::sin(x as f64) as float }\n fn cos(x: float) -> float { f64::cos(x as f64) as float }\n fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n+impl num of num for float {\n+    fn add(&&other: float)    -> float { ret self + other; }\n+    fn sub(&&other: float)    -> float { ret self - other; }\n+    fn mul(&&other: float)    -> float { ret self * other; }\n+    fn div(&&other: float)    -> float { ret self / other; }\n+    fn modulo(&&other: float) -> float { ret self % other; }\n+\n+    fn to_int()         -> int   { ret self as int; }\n+    fn from_int(n: int) -> float { ret n as float;  }\n+}\n+\n #[test]\n fn test_from_str() {\n    assert from_str(\"3\") == some(3.);\n@@ -501,6 +514,25 @@ fn test_to_str_inf() {\n     assert to_str(-infinity, 10u) == \"-inf\";\n }\n \n+#[test]\n+fn test_ifaces() {\n+    fn test<U:num>(ten: U) {\n+        assert (ten.to_int() == 10);\n+\n+        let two = ten.from_int(2);\n+        assert (two.to_int() == 2);\n+\n+        assert (ten.add(two) == ten.from_int(12));\n+        assert (ten.sub(two) == ten.from_int(8));\n+        assert (ten.mul(two) == ten.from_int(20));\n+        assert (ten.div(two) == ten.from_int(5));\n+        assert (ten.modulo(two) == ten.from_int(0));\n+    }\n+\n+    test(10.0);\n+}\n+\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "7d57f7ff55b1e91b3718f3edd483857783f584ac", "filename": "src/libcore/num.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02b7089e15516fe759edfda1eed59824d7879378/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7089e15516fe759edfda1eed59824d7879378/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=02b7089e15516fe759edfda1eed59824d7879378", "patch": "@@ -0,0 +1,15 @@\n+#[doc=\"An interface for numbers.\"]\n+\n+iface num {\n+    // FIXME: Cross-crate overloading doesn't work yet.\n+    // FIXME: Interface inheritance.\n+    fn add(&&other: self) -> self;\n+    fn sub(&&other: self) -> self;\n+    fn mul(&&other: self) -> self;\n+    fn div(&&other: self) -> self;\n+    fn modulo(&&other: self) -> self;\n+\n+    fn to_int() -> int;\n+    fn from_int(n: int) -> self;    // TODO: Static functions.\n+}\n+"}]}