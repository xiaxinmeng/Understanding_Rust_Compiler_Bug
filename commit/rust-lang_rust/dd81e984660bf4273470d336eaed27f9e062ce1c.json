{"sha": "dd81e984660bf4273470d336eaed27f9e062ce1c", "node_id": "C_kwDOAAsO6NoAKGRkODFlOTg0NjYwYmY0MjczNDcwZDMzNmVhZWQyN2Y5ZTA2MmNlMWM", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-11T19:20:13Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-10T03:08:22Z"}, "message": "Clean up visual output logic", "tree": {"sha": "a301e55380e215d759e5d87dd2b75d71acdd7135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a301e55380e215d759e5d87dd2b75d71acdd7135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd81e984660bf4273470d336eaed27f9e062ce1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd81e984660bf4273470d336eaed27f9e062ce1c", "html_url": "https://github.com/rust-lang/rust/commit/dd81e984660bf4273470d336eaed27f9e062ce1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd81e984660bf4273470d336eaed27f9e062ce1c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10fe26f39983c782f1a37a447f2c10c2ef561ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10fe26f39983c782f1a37a447f2c10c2ef561ba", "html_url": "https://github.com/rust-lang/rust/commit/d10fe26f39983c782f1a37a447f2c10c2ef561ba"}], "stats": {"total": 167, "additions": 61, "deletions": 106}, "files": [{"sha": "3f7aa7773d1c04b21dd8262bcc9e6fa215cb74b9", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 21, "deletions": 71, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -139,89 +139,39 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             //    |                               ...is captured here...\n             (false, sup_origin.span())\n         } else {\n-            (true, param.param_ty_span)\n+            (!sup_origin.span().overlaps(return_sp), param.param_ty_span)\n         };\n         err.span_label(capture_point, &format!(\"this data with {}...\", lifetime));\n \n         debug!(\"try_report_static_impl_trait: param_info={:?}\", param);\n \n+        let mut spans = spans.clone();\n+\n+        if mention_capture {\n+            spans.push(sup_origin.span());\n+        }\n+        spans.sort();\n+        spans.dedup();\n+\n         // We try to make the output have fewer overlapping spans if possible.\n-        if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n-            && sup_origin.span() != return_sp\n-        {\n-            // Customize the spans and labels depending on their relative order so\n-            // that split sentences flow correctly.\n-            if sup_origin.span().overlaps(return_sp) && sp == sup_origin.span() {\n-                // Avoid the following:\n-                //\n-                // error: cannot infer an appropriate lifetime\n-                //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n-                //    |\n-                // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-                //    |           ----                      ---------^-\n-                //\n-                // and instead show:\n-                //\n-                // error: cannot infer an appropriate lifetime\n-                //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n-                //    |\n-                // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-                //    |           ----                               ^\n-                err.span_label(\n-                    sup_origin.span(),\n-                    &format!(\n-                        \"...is captured here, requiring it to live as long as `'static`{}\",\n-                        if spans.is_empty() { \"\" } else { \"...\" },\n-                    ),\n-                );\n-            } else {\n-                if return_sp < sup_origin.span() && mention_capture {\n-                    err.span_label(sup_origin.span(), \"...is captured here...\");\n-                    err.span_note(\n-                        return_sp,\n-                        \"...and is required to live as long as `'static` here\",\n-                    );\n-                } else {\n-                    err.span_label(\n-                        return_sp,\n-                        &format!(\n-                            \"...is required to live as long as `'static` here{}\",\n-                            if spans.is_empty() { \"\" } else { \"...\" },\n-                        ),\n-                    );\n-                    if mention_capture {\n-                        let span = sup_origin.span();\n-                        let msg = if spans.iter().any(|sp| *sp > span) {\n-                            \"...is captured here...\"\n-                        } else {\n-                            \"...and is captured here\"\n-                        };\n-                        err.span_label(span, msg);\n-                    }\n-                }\n-            }\n+        let (require_msg, require_span) = if sup_origin.span().overlaps(return_sp) {\n+            (\"...is captured and required to live as long as `'static` here\", sup_origin.span())\n         } else {\n-            err.span_label(\n-                return_sp,\n-                &format!(\n-                    \"...is captured and required to live as long as `'static` here{}\",\n-                    if spans.is_empty() { \"\" } else { \"...\" },\n-                ),\n-            );\n+            (\"...and is required to live as long as `'static` here\", return_sp)\n+        };\n+\n+        for span in &spans {\n+            err.span_label(*span, \"...is captured here...\");\n         }\n \n-        for span in spans {\n-            let msg =\n-                format!(\"...and is captured here{}\", if mention_capture { \" too\" } else { \"\" });\n-            if span.overlaps(return_sp) {\n-                err.span_note(*span, &msg);\n-            } else {\n-                err.span_label(*span, &msg);\n-            }\n+        if spans.iter().any(|sp| sp.overlaps(return_sp) || *sp > return_sp) {\n+            err.span_note(require_span, require_msg);\n+        } else {\n+            err.span_label(require_span, require_msg);\n         }\n \n         if let SubregionOrigin::RelateParamBound(_, _, Some(bound)) = sub_origin {\n-            err.span_note(*bound, \"`'static` lifetime requirement introduced by this trait bound\");\n+            err.span_note(*bound, \"`'static` lifetime requirement introduced by this bound\");\n         }\n \n         let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);"}, {"sha": "6f63a2c5fc37ecd03d40125b299943e99814c16f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n    |                  ------- this data with lifetime `'a`...\n LL |    bar(foo, x)\n-   |    ----^^^---- ...is captured and required to live as long as `'static` here\n+   |        ^^^  - ...is captured and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "eb81da7852d991b903304f4a0b3403b2527bccf9", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -5,7 +5,7 @@ LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |                   -------- this data with lifetime `'a`...\n ...\n LL |     bar(foo, x)\n-   |     ----^^^---- ...is captured and required to live as long as `'static` here\n+   |         ^^^  - ...is captured and required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "7aea147c6cfc2af65b7c492f2ffe6b62c525fa84", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -4,14 +4,14 @@ error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               ^^^^^ this data with an anonymous lifetime `'_`...\n LL |         foo(|| self.bar()).await;\n-   |         --- ...is required to live as long as `'static` here...\n+   |         ------------------------ ...is captured here...\n    |\n-note: ...and is captured here\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/issue-62097.rs:13:9\n    |\n LL |         foo(|| self.bar()).await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-note: `'static` lifetime requirement introduced by this trait bound\n+   |         ^^^\n+note: `'static` lifetime requirement introduced by this bound\n   --> $DIR/issue-62097.rs:4:19\n    |\n LL |     F: FnOnce() + 'static"}, {"sha": "eb0cc7e6aeca120b8ecc4caa8492a6ebd945bebe", "filename": "src/test/ui/async-await/issues/issue-72312.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.rs?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n fn require_static<T: 'static>(val: T) -> T {\n-    //~^ NOTE 'static` lifetime requirement introduced by this trait bound\n+    //~^ NOTE 'static` lifetime requirement introduced by this bound\n     val\n }\n \n@@ -10,8 +10,8 @@ impl Problem {\n     pub async fn start(&self) { //~ ERROR E0759\n         //~^ NOTE this data with an anonymous lifetime `'_`\n         //~| NOTE in this expansion of desugaring of `async` block or function\n-        require_static(async move { //~ NOTE ...is required to live as long as `'static` here\n-            &self; //~ NOTE ...and is captured here\n+        require_static(async move { //~ NOTE ...and is required to live as long as `'static` here\n+            &self; //~ NOTE ...is captured here...\n         });\n     }\n }"}, {"sha": "7a72edd4e53101a8f801ec9a428d41649fada988", "filename": "src/test/ui/async-await/issues/issue-72312.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -4,12 +4,15 @@ error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'\n LL |     pub async fn start(&self) {\n    |                        ^^^^^ this data with an anonymous lifetime `'_`...\n ...\n-LL |         require_static(async move {\n-   |         -------------- ...is required to live as long as `'static` here...\n LL |             &self;\n-   |             ----- ...and is captured here\n+   |             ----- ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/issue-72312.rs:13:9\n    |\n-note: `'static` lifetime requirement introduced by this trait bound\n+LL |         require_static(async move {\n+   |         ^^^^^^^^^^^^^^\n+note: `'static` lifetime requirement introduced by this bound\n   --> $DIR/issue-72312.rs:2:22\n    |\n LL | fn require_static<T: 'static>(val: T) -> T {"}, {"sha": "e80372766dc3cc56af50666207cc35b1466b9f7f", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -80,7 +80,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:24:65\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n-   |               ---- this data with an anonymous lifetime `'_`... ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ---- this data with an anonymous lifetime `'_`... ^ ...is captured and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n@@ -136,7 +136,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:16:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |               ----                               ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ----                               ^ ...is captured and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n@@ -149,7 +149,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:18:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                     -------                               ^ ...is captured here, requiring it to live as long as `'static`\n+   |                     -------                               ^ ...is captured and required to live as long as `'static` here\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n@@ -162,7 +162,7 @@ error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n   --> $DIR/must_outlive_least_region_or_bound.rs:20:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ----                                         ^ ...is captured here, requiring it to live as long as `'static`\n+   |               ----                                         ^ ...is captured and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n@@ -179,7 +179,7 @@ error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     ------- this data with lifetime `'a`...         ^ ...is captured here, requiring it to live as long as `'static`\n+   |                     ------- this data with lifetime `'a`...         ^ ...is captured and required to live as long as `'static` here\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |"}, {"sha": "ff7b3b67140c2ee78eb11f99b3ef9876d10761e7", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `value` has an anonymous lifetime `'_` but it needs to satisfy a `\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       -- this data with an anonymous lifetime `'_`...\n LL |     Box::new(value) as Box<dyn Any>\n-   |              ^^^^^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^^^^^ ...is captured and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `value`, you can add an explicit `'_` lifetime bound\n    |"}, {"sha": "9eb24c1bd372e22b22ac6d4b783b88057809f7b3", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |                                              ^ ...is captured here, requiring it to live as long as `'static`\n+   |                                              ^ ...is captured and required to live as long as `'static` here\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n@@ -21,7 +21,7 @@ error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'sta\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with an anonymous lifetime `'_`...\n LL |     Box::new(v)\n-   |              ^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^ ...is captured and required to live as long as `'static` here\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n@@ -39,7 +39,7 @@ LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         ----- this data with an anonymous lifetime `'_`...\n ...\n LL |     Box::new(v)\n-   |              ^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^ ...is captured and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `v`, you can add an explicit `'_` lifetime bound\n    |"}, {"sha": "9c803d4e1d417c23a24e35c094d0912bed1dc78e", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                         ------------------ this data with lifetime `'a`...\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |                ^^^ ...is captured here, requiring it to live as long as `'static`\n+   |                ^^^ ...is captured and required to live as long as `'static` here\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |"}, {"sha": "27bb19a89df3b8dafd344df0f483835fa34ee04d", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -4,7 +4,7 @@ error[E0759]: `v` has lifetime `'a` but it needs to satisfy a `'static` lifetime\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                   ---------------- this data with lifetime `'a`...\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |                ^^^ ...is captured here, requiring it to live as long as `'static`\n+   |                ^^^ ...is captured and required to live as long as `'static` here\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |"}, {"sha": "a257576e5d16794960317402cce0d8f93abf1b1a", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -5,7 +5,7 @@ LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                   ------ this data with an anonymous lifetime `'_`...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n-   |              ^^^^^^^^^^^^^^ ...is captured here, requiring it to live as long as `'static`\n+   |              ^^^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |"}, {"sha": "3d6308a08254cc24f78e46fee4f91e49665bf223", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -39,29 +39,29 @@ LL |     let y = x as &dyn Bar<'_, '_>;\n    |             ...is captured here...\n LL |\n LL |     y.get_b() // ERROR\n-   |     --------- ...is required to live as long as `'static` here...\n+   |     - ...is captured here...\n    |\n-note: ...and is captured here too\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/type-checking-test-4.rs:29:5\n    |\n LL |     y.get_b() // ERROR\n-   |     ^\n+   |     ^^^^^^^^^\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/type-checking-test-4.rs:33:5\n    |\n LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                       ------------ this data with lifetime `'a`...\n LL |     <_ as Bar>::get_b(x) // ERROR\n-   |     ^^^^^^^^^^^^^^^^^ ...is captured here, requiring it to live as long as `'static`\n+   |     ^^^^^^^^^^^^^^^^^ ...is captured and required to live as long as `'static` here\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/type-checking-test-4.rs:38:15\n    |\n LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                       ------------ this data with lifetime `'a`...\n LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n-   |     ----------^^---------------- ...is captured and required to live as long as `'static` here\n+   |     ----------^^------------- ...is captured and required to live as long as `'static` here\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/type-checking-test-4.rs:43:27\n@@ -74,16 +74,16 @@ LL |     let y = x as &dyn Bar<'_, '_>;\n    |             ...is captured here...\n LL |\n LL |     y.get_b(); // ERROR\n-   |     - ...and is captured here too\n+   |     - ...is captured here...\n LL |     let z = y;\n LL |     z.get_b() // ERROR\n-   |     --------- ...is required to live as long as `'static` here...\n+   |     - ...is captured here...\n    |\n-note: ...and is captured here too\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/type-checking-test-4.rs:47:5\n    |\n LL |     z.get_b() // ERROR\n-   |     ^\n+   |     ^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "da0f6d0ecde3d2c91dfe4ac8b09ff35f8086a61d", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd81e984660bf4273470d336eaed27f9e062ce1c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=dd81e984660bf4273470d336eaed27f9e062ce1c", "patch": "@@ -5,7 +5,9 @@ LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                ---- this data with an anonymous lifetime `'_`...\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ---------------^^^^--- ...is captured and required to live as long as `'static` here\n+   |              ----- ^^^^\n+   |              |\n+   |              ...is captured and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `items`, you can add an explicit `'_` lifetime bound\n    |"}]}