{"sha": "8d5e64f3bc2f754bed4b5a1857dd3494c5049c50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNWU2NGYzYmMyZjc1NGJlZDRiNWExODU3ZGQzNDk0YzUwNDljNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-04T13:01:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-04T13:01:00Z"}, "message": "auto merge of #16981 : kmcallister/rust/ctypes-warning, r=alexcrichton", "tree": {"sha": "1ed18dcf18f24bf1787596a0022078f8c977998e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed18dcf18f24bf1787596a0022078f8c977998e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50", "html_url": "https://github.com/rust-lang/rust/commit/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d8b5c9f7d1347b715242a837fba87a01ae61d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8b5c9f7d1347b715242a837fba87a01ae61d7e", "html_url": "https://github.com/rust-lang/rust/commit/6d8b5c9f7d1347b715242a837fba87a01ae61d7e"}, {"sha": "f422de1e85e87db51bfb61655da3faa331fbd91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f422de1e85e87db51bfb61655da3faa331fbd91a", "html_url": "https://github.com/rust-lang/rust/commit/f422de1e85e87db51bfb61655da3faa331fbd91a"}], "stats": {"total": 118, "additions": 77, "deletions": 41}, "files": [{"sha": "3645ef077a6affd3b672bcb2e42585d286e07eb9", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=8d5e64f3bc2f754bed4b5a1857dd3494c5049c50", "patch": "@@ -4542,7 +4542,7 @@ pub mod funcs {\n                 pub fn glob(pattern: *const c_char,\n                             flags: c_int,\n                             errfunc: ::Nullable<extern \"C\" fn(epath: *const c_char,\n-                                                              errno: c_int) -> int>,\n+                                                              errno: c_int) -> c_int>,\n                             pglob: *mut glob_t);\n                 pub fn globfree(pglob: *mut glob_t);\n             }"}, {"sha": "355cd8203c5d6d2a479f471c8ad5bcb94a4dc954", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 56, "deletions": 40, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8d5e64f3bc2f754bed4b5a1857dd3494c5049c50", "patch": "@@ -45,6 +45,7 @@ use syntax::attr;\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::{ast, ast_util, visit};\n+use syntax::visit::Visitor;\n \n declare_lint!(WHILE_TRUE, Warn,\n               \"suggest using `loop { }` instead of `while true { }`\")\n@@ -339,6 +340,51 @@ impl LintPass for TypeLimits {\n declare_lint!(CTYPES, Warn,\n               \"proper use of libc types in foreign modules\")\n \n+struct CTypesVisitor<'a> {\n+    cx: &'a Context<'a>\n+}\n+\n+impl<'a> CTypesVisitor<'a> {\n+    fn check_def(&mut self, sp: Span, ty_id: ast::NodeId, path_id: ast::NodeId) {\n+        match self.cx.tcx.def_map.borrow().get_copy(&path_id) {\n+            def::DefPrimTy(ast::TyInt(ast::TyI)) => {\n+                self.cx.span_lint(CTYPES, sp,\n+                                  \"found rust type `int` in foreign module, while \\\n+                                   libc::c_int or libc::c_long should be used\");\n+            }\n+            def::DefPrimTy(ast::TyUint(ast::TyU)) => {\n+                self.cx.span_lint(CTYPES, sp,\n+                                  \"found rust type `uint` in foreign module, while \\\n+                                   libc::c_uint or libc::c_ulong should be used\");\n+            }\n+            def::DefTy(..) => {\n+                let tty = match self.cx.tcx.ast_ty_to_ty_cache.borrow().find(&ty_id) {\n+                    Some(&ty::atttce_resolved(t)) => t,\n+                    _ => fail!(\"ast_ty_to_ty_cache was incomplete after typeck!\")\n+                };\n+\n+                if !ty::is_ffi_safe(self.cx.tcx, tty) {\n+                    self.cx.span_lint(CTYPES, sp,\n+                                      \"found type without foreign-function-safe\n+                                      representation annotation in foreign module, consider \\\n+                                      adding a #[repr(...)] attribute to the type\");\n+                }\n+            }\n+            _ => ()\n+        }\n+    }\n+}\n+\n+impl<'a> Visitor<()> for CTypesVisitor<'a> {\n+    fn visit_ty(&mut self, ty: &ast::Ty, _: ()) {\n+        match ty.node {\n+            ast::TyPath(_, _, id) => self.check_def(ty.span, ty.id, id),\n+            _ => (),\n+        }\n+        visit::walk_ty(self, ty, ());\n+    }\n+}\n+\n pub struct CTypes;\n \n impl LintPass for CTypes {\n@@ -348,38 +394,8 @@ impl LintPass for CTypes {\n \n     fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n         fn check_ty(cx: &Context, ty: &ast::Ty) {\n-            match ty.node {\n-                ast::TyPath(_, _, id) => {\n-                    match cx.tcx.def_map.borrow().get_copy(&id) {\n-                        def::DefPrimTy(ast::TyInt(ast::TyI)) => {\n-                            cx.span_lint(CTYPES, ty.span,\n-                                         \"found rust type `int` in foreign module, while \\\n-                                          libc::c_int or libc::c_long should be used\");\n-                        }\n-                        def::DefPrimTy(ast::TyUint(ast::TyU)) => {\n-                            cx.span_lint(CTYPES, ty.span,\n-                                         \"found rust type `uint` in foreign module, while \\\n-                                          libc::c_uint or libc::c_ulong should be used\");\n-                        }\n-                        def::DefTy(..) => {\n-                            let tty = match cx.tcx.ast_ty_to_ty_cache.borrow().find(&ty.id) {\n-                                Some(&ty::atttce_resolved(t)) => t,\n-                                _ => fail!(\"ast_ty_to_ty_cache was incomplete after typeck!\")\n-                            };\n-\n-                            if !ty::is_ffi_safe(cx.tcx, tty) {\n-                                cx.span_lint(CTYPES, ty.span,\n-                                             \"found type without foreign-function-safe\n-                                             representation annotation in foreign module, consider \\\n-                                             adding a #[repr(...)] attribute to the type\");\n-                            }\n-                        }\n-                        _ => ()\n-                    }\n-                }\n-                ast::TyPtr(ref mt) => { check_ty(cx, &*mt.ty) }\n-                _ => {}\n-            }\n+            let mut vis = CTypesVisitor { cx: cx };\n+            vis.visit_ty(ty, ());\n         }\n \n         fn check_foreign_fn(cx: &Context, decl: &ast::FnDecl) {\n@@ -390,15 +406,15 @@ impl LintPass for CTypes {\n         }\n \n         match it.node {\n-          ast::ItemForeignMod(ref nmod) if nmod.abi != abi::RustIntrinsic => {\n-            for ni in nmod.items.iter() {\n-                match ni.node {\n-                    ast::ForeignItemFn(decl, _) => check_foreign_fn(cx, &*decl),\n-                    ast::ForeignItemStatic(t, _) => check_ty(cx, &*t)\n+            ast::ItemForeignMod(ref nmod) if nmod.abi != abi::RustIntrinsic => {\n+                for ni in nmod.items.iter() {\n+                    match ni.node {\n+                        ast::ForeignItemFn(decl, _) => check_foreign_fn(cx, &*decl),\n+                        ast::ForeignItemStatic(t, _) => check_ty(cx, &*t)\n+                    }\n                 }\n             }\n-          }\n-          _ => {/* nothing to do */ }\n+            _ => (),\n         }\n     }\n }\n@@ -493,7 +509,7 @@ struct RawPtrDerivingVisitor<'a> {\n     cx: &'a Context<'a>\n }\n \n-impl<'a> visit::Visitor<()> for RawPtrDerivingVisitor<'a> {\n+impl<'a> Visitor<()> for RawPtrDerivingVisitor<'a> {\n     fn visit_ty(&mut self, ty: &ast::Ty, _: ()) {\n         static MSG: &'static str = \"use of `#[deriving]` with a raw pointer\";\n         match ty.node {"}, {"sha": "4a63aaf850a64880e390b8676520b6b6bc99e884", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=8d5e64f3bc2f754bed4b5a1857dd3494c5049c50", "patch": "@@ -232,6 +232,8 @@ pub fn tzset() {\n \n /// Holds a calendar date and time broken down into its components (year, month, day, and so on),\n /// also called a broken-down time value.\n+// FIXME: use c_int instead of i32?\n+#[repr(C)]\n #[deriving(Clone, PartialEq, Eq, Show)]\n pub struct Tm {\n     /// Seconds after the minute - [0, 60]"}, {"sha": "883e79d75e0968707d0b6c6bf35fad82f966c8a4", "filename": "src/test/compile-fail/issue-16250.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5e64f3bc2f754bed4b5a1857dd3494c5049c50/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs?ref=8d5e64f3bc2f754bed4b5a1857dd3494c5049c50", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(warnings)]\n+\n+extern {\n+    pub fn foo(x: (int)); //~ ERROR found rust type `int` in foreign module\n+}\n+\n+fn main() {\n+}"}]}