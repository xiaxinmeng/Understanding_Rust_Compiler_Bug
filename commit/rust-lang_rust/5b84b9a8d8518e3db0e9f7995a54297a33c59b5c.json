{"sha": "5b84b9a8d8518e3db0e9f7995a54297a33c59b5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODRiOWE4ZDg1MThlM2RiMGU5Zjc5OTVhNTQyOTdhMzNjNTliNWM=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-02-24T17:18:26Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-02-24T17:18:26Z"}, "message": "Constify methods of `std::net::SocketAddr`, `SocketAddrV4` and `SocketAddrV6`\n\nThe following methods are made unstable const under the `const_socketaddr` feature:\n\n`SocketAddr`\n - `ip`\n - `port`\n - `is_ipv4`\n - `is_ipv6`\n\n`SocketAddrV4`\n - `ip`\n - `port`\n\n`SocketAddrV6`\n - `ip`\n - `port`\n - `flowinfo`\n - `scope_id`", "tree": {"sha": "7e96613cba265a4dc7950b6df8c72fc89bd23c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e96613cba265a4dc7950b6df8c72fc89bd23c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c", "html_url": "https://github.com/rust-lang/rust/commit/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1206f950ffb76c76e1b74a19ae33c2b7d949454", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1206f950ffb76c76e1b74a19ae33c2b7d949454", "html_url": "https://github.com/rust-lang/rust/commit/d1206f950ffb76c76e1b74a19ae33c2b7d949454"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "c3ca7c3a1a46628e099788e2e115dfafc7143305", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5b84b9a8d8518e3db0e9f7995a54297a33c59b5c", "patch": "@@ -247,6 +247,7 @@\n #![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n+#![feature(const_socketaddr)]\n #![feature(const_ipv4)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]"}, {"sha": "6857aa25628c559a070cdd372a545ea24f3d0c1d", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=5b84b9a8d8518e3db0e9f7995a54297a33c59b5c", "patch": "@@ -143,7 +143,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n-    pub fn ip(&self) -> IpAddr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n             SocketAddr::V6(ref a) => IpAddr::V6(*a.ip()),\n@@ -182,7 +183,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         match *self {\n             SocketAddr::V4(ref a) => a.port(),\n             SocketAddr::V6(ref a) => a.port(),\n@@ -224,7 +226,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv6(), false);\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    pub fn is_ipv4(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn is_ipv4(&self) -> bool {\n         matches!(*self, SocketAddr::V4(_))\n     }\n \n@@ -244,7 +247,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv6(), true);\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    pub fn is_ipv6(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn is_ipv6(&self) -> bool {\n         matches!(*self, SocketAddr::V6(_))\n     }\n }\n@@ -284,7 +288,8 @@ impl SocketAddrV4 {\n     /// assert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ip(&self) -> &Ipv4Addr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> &Ipv4Addr {\n         // SAFETY: `Ipv4Addr` is `#[repr(C)] struct { _: in_addr; }`.\n         // It is safe to cast from `&in_addr` to `&Ipv4Addr`.\n         unsafe { &*(&self.inner.sin_addr as *const c::in_addr as *const Ipv4Addr) }\n@@ -317,7 +322,8 @@ impl SocketAddrV4 {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         ntohs(self.inner.sin_port)\n     }\n \n@@ -380,7 +386,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.ip(), &Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ip(&self) -> &Ipv6Addr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> &Ipv6Addr {\n         unsafe { &*(&self.inner.sin6_addr as *const c::in6_addr as *const Ipv6Addr) }\n     }\n \n@@ -411,7 +418,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         ntohs(self.inner.sin6_port)\n     }\n \n@@ -452,7 +460,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.flowinfo(), 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn flowinfo(&self) -> u32 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn flowinfo(&self) -> u32 {\n         self.inner.sin6_flowinfo\n     }\n \n@@ -490,7 +499,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.scope_id(), 78);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn scope_id(&self) -> u32 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn scope_id(&self) -> u32 {\n         self.inner.sin6_scope_id\n     }\n "}]}