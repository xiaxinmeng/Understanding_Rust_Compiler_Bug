{"sha": "7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNWExZjk4NTcyODg3ZDk2NDJjNzMyMWJlNmMwZDVhYmY3YWFmZmI=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-11-18T20:16:10Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-11-19T22:30:14Z"}, "message": "use -Z flag instead of env var", "tree": {"sha": "57a5711b18b7cfce763354aae2b0e591c203e6e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a5711b18b7cfce763354aae2b0e591c203e6e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "html_url": "https://github.com/rust-lang/rust/commit/7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bec62c2f12a4c13000d0c7647a6a43ed3ae95785", "url": "https://api.github.com/repos/rust-lang/rust/commits/bec62c2f12a4c13000d0c7647a6a43ed3ae95785", "html_url": "https://github.com/rust-lang/rust/commit/bec62c2f12a4c13000d0c7647a6a43ed3ae95785"}], "stats": {"total": 146, "additions": 83, "deletions": 63}, "files": [{"sha": "25123acdc674f93e753038fdf1b2fdf454d0311b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -1036,6 +1036,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run all passes except translation; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n           \"treat all errors that occur as bugs\"),\n+    macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n+          \"show macro backtraces even for foreign macros\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n           \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],"}, {"sha": "ab270648f3a2fd1f02fa817c7da4597c5edba548", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -731,6 +731,8 @@ pub fn build_session_with_codemap(sopts: config::Options,\n \n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n \n+    let macro_backtrace = sopts.debugging_opts.macro_backtrace;\n+\n     let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), false))\n@@ -755,6 +757,7 @@ pub fn build_session_with_codemap(sopts: config::Options,\n     let diagnostic_handler =\n         errors::Handler::with_emitter(can_print_warnings,\n                                       treat_err_as_bug,\n+                                      macro_backtrace,\n                                       emitter);\n \n     build_session_(sopts,\n@@ -925,7 +928,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n             Box::new(EmitterWriter::stderr(color_config, None, true))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, false, false, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n     panic!(errors::FatalError);\n }\n@@ -940,7 +943,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n             Box::new(EmitterWriter::stderr(color_config, None, true))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, false, false, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n }\n "}, {"sha": "2f847e3dd97eb1ace4e07e5a40bca76af6cb739a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -141,7 +141,7 @@ pub fn run<F>(run_compiler: F) -> isize\n                         errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                                None,\n                                                                true);\n-                    let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n+                    let handler = errors::Handler::with_emitter(true, false, false, Box::new(emitter));\n                     handler.emit(&MultiSpan::new(),\n                                  \"aborting due to previous error(s)\",\n                                  errors::Level::Fatal);\n@@ -1221,7 +1221,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n                 Box::new(errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                                 None,\n                                                                 false));\n-            let handler = errors::Handler::with_emitter(true, false, emitter);\n+            let handler = errors::Handler::with_emitter(true, false, false, emitter);\n \n             // a .span_bug or .bug call has already printed what\n             // it wants to print."}, {"sha": "8a4cc2378052e0c657a3bf6fcc4ba733a561e005", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -104,7 +104,7 @@ fn test_env<F>(source_string: &str,\n     let mut options = config::basic_options();\n     options.debugging_opts.verbose = true;\n     options.unstable_features = UnstableFeatures::Allow;\n-    let diagnostic_handler = errors::Handler::with_emitter(true, false, emitter);\n+    let diagnostic_handler = errors::Handler::with_emitter(true, false, false, emitter);\n \n     let cstore = Rc::new(CStore::new(::DefaultTransCrate::metadata_loader()));\n     let sess = session::build_session_(options,"}, {"sha": "27e895164e7645d56a193a585a7ae3919628b086", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -23,7 +23,7 @@ use syntax_pos::{MultiSpan, Span};\n #[must_use]\n #[derive(Clone)]\n pub struct DiagnosticBuilder<'a> {\n-    handler: &'a Handler,\n+    pub handler: &'a Handler,\n     diagnostic: Diagnostic,\n }\n "}, {"sha": "f3f5b443a430619ef6ef438f3bd1579e90655bb2", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -23,7 +23,6 @@ use std::rc::Rc;\n use term;\n use std::collections::HashMap;\n use std::cmp::min;\n-use std::env;\n \n /// Emitter trait for emitting errors.\n pub trait Emitter {\n@@ -65,8 +64,11 @@ impl Emitter for EmitterWriter {\n             }\n         }\n \n-        self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n+        if !db.handler.macro_backtrace {\n+            self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n+        }\n         self.emit_messages_default(&db.level,\n+                                   db.handler.macro_backtrace,\n                                    &db.styled_message(),\n                                    &db.code,\n                                    &primary_span,\n@@ -787,23 +789,21 @@ impl EmitterWriter {\n     fn fix_multispans_in_std_macros(&mut self,\n                                     span: &mut MultiSpan,\n                                     children: &mut Vec<SubDiagnostic>) {\n-        if env::var_os(\"RUST_MACRO_BACKTRACE\").is_none() {\n-            let mut spans_updated = self.fix_multispan_in_std_macros(span);\n-            for child in children.iter_mut() {\n-                spans_updated |= self.fix_multispan_in_std_macros(&mut child.span);\n-            }\n-            if spans_updated {\n-                children.push(SubDiagnostic {\n-                    level: Level::Note,\n-                    message: vec![\n-                        ([\"this error originates in a macro outside of the current crate\",\n-                          \"(run with RUST_MACRO_BACKTRACE=1 for more info)\"].join(\" \"),\n-                         Style::NoStyle),\n-                    ],\n-                    span: MultiSpan::new(),\n-                    render_span: None,\n-                });\n-            }\n+        let mut spans_updated = self.fix_multispan_in_std_macros(span);\n+        for child in children.iter_mut() {\n+            spans_updated |= self.fix_multispan_in_std_macros(&mut child.span);\n+        }\n+        if spans_updated {\n+            children.push(SubDiagnostic {\n+                level: Level::Note,\n+                message: vec![\n+                    ([\"this error originates in a macro outside of the current crate\",\n+                      \"(run with -Z macro-backtrace for more info)\"].join(\" \"),\n+                     Style::NoStyle),\n+                ],\n+                span: MultiSpan::new(),\n+                render_span: None,\n+            });\n         }\n     }\n \n@@ -888,6 +888,7 @@ impl EmitterWriter {\n                             msg: &Vec<(String, Style)>,\n                             code: &Option<DiagnosticId>,\n                             level: &Level,\n+                            macro_backtrace: bool,\n                             max_line_num_len: usize,\n                             is_secondary: bool)\n                             -> io::Result<()> {\n@@ -1085,7 +1086,7 @@ impl EmitterWriter {\n             }\n         }\n \n-        if env::var_os(\"RUST_MACRO_BACKTRACE\").is_some() {\n+        if macro_backtrace {\n             if let Some(ref primary_span) = msp.primary_span().as_ref() {\n                 self.render_macro_backtrace_old_school(primary_span, &mut buffer)?;\n             }\n@@ -1182,6 +1183,7 @@ impl EmitterWriter {\n     }\n     fn emit_messages_default(&mut self,\n                              level: &Level,\n+                             macro_backtrace: bool,\n                              message: &Vec<(String, Style)>,\n                              code: &Option<DiagnosticId>,\n                              span: &MultiSpan,\n@@ -1190,7 +1192,13 @@ impl EmitterWriter {\n         let max_line_num = self.get_max_line_num(span, children);\n         let max_line_num_len = max_line_num.to_string().len();\n \n-        match self.emit_message_default(span, message, code, level, max_line_num_len, false) {\n+        match self.emit_message_default(span,\n+                                        message,\n+                                        code,\n+                                        level,\n+                                        macro_backtrace,\n+                                        max_line_num_len,\n+                                        false) {\n             Ok(()) => {\n                 if !children.is_empty() {\n                     let mut buffer = StyledBuffer::new();\n@@ -1210,6 +1218,7 @@ impl EmitterWriter {\n                                                         &child.styled_message(),\n                                                         &None,\n                                                         &child.level,\n+                                                        macro_backtrace,\n                                                         max_line_num_len,\n                                                         true) {\n                             Err(e) => panic!(\"failed to emit error: {}\", e),"}, {"sha": "99d94aaf912a03bb4556dd2771135768ce8afbb9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -237,6 +237,7 @@ pub struct Handler {\n     emitter: RefCell<Box<Emitter>>,\n     pub can_emit_warnings: bool,\n     treat_err_as_bug: bool,\n+    pub macro_backtrace: bool,\n     continue_after_error: Cell<bool>,\n     delayed_span_bug: RefCell<Option<Diagnostic>>,\n     tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n@@ -251,21 +252,24 @@ impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n                             treat_err_as_bug: bool,\n+                            macro_backtrace: bool,\n                             cm: Option<Rc<CodeMapper>>)\n                             -> Handler {\n         let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false));\n-        Handler::with_emitter(can_emit_warnings, treat_err_as_bug, emitter)\n+        Handler::with_emitter(can_emit_warnings, treat_err_as_bug, macro_backtrace, emitter)\n     }\n \n     pub fn with_emitter(can_emit_warnings: bool,\n                         treat_err_as_bug: bool,\n+                        macro_backtrace: bool,\n                         e: Box<Emitter>)\n                         -> Handler {\n         Handler {\n             err_count: Cell::new(0),\n             emitter: RefCell::new(e),\n             can_emit_warnings,\n             treat_err_as_bug,\n+            macro_backtrace,\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n             tracked_diagnostics: RefCell::new(None),"}, {"sha": "180a2f4ed6c6dfe8fd6851d910c94efb6a8284f1", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -353,7 +353,7 @@ pub struct CodegenContext {\n \n impl CodegenContext {\n     pub fn create_diag_handler(&self) -> Handler {\n-        Handler::with_emitter(true, false, Box::new(self.diag_emitter.clone()))\n+        Handler::with_emitter(true, false, false, Box::new(self.diag_emitter.clone()))\n     }\n \n     pub fn config(&self, kind: ModuleKind) -> &ModuleConfig {"}, {"sha": "8db6cb51ce4a19aee4e678cf3648cd2b078a3ad0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -141,6 +141,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let diagnostic_handler = errors::Handler::with_tty_emitter(ColorConfig::Auto,\n                                                                true,\n                                                                false,\n+                                                               false,\n                                                                Some(codemap.clone()));\n \n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));"}, {"sha": "03cb77422cf5c4aae90b200064e01d0b39f3c81c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -81,7 +81,7 @@ pub fn run(input: &str,\n \n     let codemap = Rc::new(CodeMap::new(sessopts.file_path_mapping()));\n     let handler =\n-        errors::Handler::with_tty_emitter(ColorConfig::Auto, true, false, Some(codemap.clone()));\n+        errors::Handler::with_tty_emitter(ColorConfig::Auto, true, false, false, Some(codemap.clone()));\n \n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_(\n@@ -244,7 +244,7 @@ fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n     // Compile the code\n-    let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n+    let diagnostic_handler = errors::Handler::with_emitter(true, false, false, box emitter);\n \n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_("}, {"sha": "924183fd64e0ef36583a093e4ccbe78df9c802fd", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -1726,7 +1726,7 @@ mod tests {\n                                                           Some(cm.clone()),\n                                                           false);\n         ParseSess {\n-            span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),\n+            span_diagnostic: errors::Handler::with_emitter(true, false, false, Box::new(emitter)),\n             unstable_features: UnstableFeatures::from_environment(),\n             config: CrateConfig::new(),\n             included_mod_stack: RefCell::new(Vec::new()),"}, {"sha": "11e4abdb3501f22ac1a314b506dd3a75624a77ef", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -58,6 +58,7 @@ impl ParseSess {\n         let handler = Handler::with_tty_emitter(ColorConfig::Auto,\n                                                 true,\n                                                 false,\n+                                                false,\n                                                 Some(cm.clone()));\n         ParseSess::with_span_handler(handler, cm)\n     }"}, {"sha": "10ad440ca8580da5fb73c3ff41e244b7d4ecf795", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -62,7 +62,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n     let emitter = EmitterWriter::new(Box::new(Shared { data: output.clone() }),\n                                      Some(code_map.clone()),\n                                      false);\n-    let handler = Handler::with_emitter(true, false, Box::new(emitter));\n+    let handler = Handler::with_emitter(true, false, false, Box::new(emitter));\n     handler.span_err(msp, \"foo\");\n \n     assert!(expected_output.chars().next() == Some('\\n'),"}, {"sha": "ba7e88103f5c6c9f8203dfff8a12fca268d349a5", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -4,23 +4,23 @@ error: requires at least a format string argument\n 12 |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:13:5\n    |\n 13 |     format!(\"\" 1);\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:14:5\n    |\n 14 |     format!(\"\", 1 1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a065e06926b504607a92d2c88dbd08aace6bc127", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -4,7 +4,7 @@ error[E0600]: cannot apply unary operator `!` to type `&'static str`\n 12 |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a6e589160a53a3111288d9ae6db6e7a1800d899a", "filename": "src/test/ui/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n 16 |     myprintln!(\"{}\"); //~ ERROR in this macro\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9d45c84c03c867d056cc61e38f45e28fc00e2fd5", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -5,7 +5,7 @@ error: invalid format string: expected `'}'` but string was terminated\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/format-string-error.rs:14:5\n@@ -14,7 +14,7 @@ error: invalid format string: unmatched `}` found\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "70cde44e4c7e3b0fc57163923d13021a2c937c1a", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -9,7 +9,7 @@ error[E0597]: borrowed value does not live long enough\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "443574073f881b3206102c35e48aedb13f94fff5", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -10,7 +10,7 @@\n \n // Test that the macro backtrace facility works\n // aux-build:ping.rs\n-// rustc-env:RUST_MACRO_BACKTRACE\n+// compile-flags: -Z macro-backtrace\n \n #[macro_use] extern crate ping;\n "}, {"sha": "4d82aa437fb3ed00ea71cd7018f8adb71d395ab9", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -11,7 +11,7 @@ error: multiple unused formatting arguments\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: argument never used\n   --> $DIR/format-foreign.rs:13:29"}, {"sha": "1169ec11d2af876aa7c2ffe0817e957c24310591", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -8,7 +8,7 @@ error: multiple unused formatting arguments\n    |                      |    unused\n    |                      unused\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:14:5\n@@ -23,7 +23,7 @@ error: multiple unused formatting arguments\n 18 | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: named argument never used\n   --> $DIR/format-unused-lables.rs:20:35\n@@ -47,7 +47,7 @@ error: multiple unused formatting arguments\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ec659af008e604239a50b183ebb21998e734b635", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n 13 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "074d43d3b398397fc9f369b73999a0d12c30d965", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -16,7 +16,7 @@ error: unreachable statement\n 36 |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c3841a851000dd7c091f03fe189f139cab69f4fe", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d9066a9ad939fe25edd06ccb5458c02412ce9386", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -9,23 +9,23 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:31:5\n    |\n 31 |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:41:5\n    |\n 41 |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0580016070ce174652b8a8bdba622282f9ce7a75", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -16,15 +16,15 @@ error: unreachable statement\n 25 |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_match.rs:35:5\n    |\n 35 |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "98c6cb66d5947c520e36847e1223f1d1017400dc", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -9,23 +9,23 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_while.rs:33:9\n    |\n 33 |         println!(\"I am dead.\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_while.rs:35:5\n    |\n 35 |     println!(\"I am, too.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "426f7b746244576cc1b0046c72c470991bdbd019", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n    = note: expected type `&mut std::string::String`\n               found type `std::string::String`\n    = help: try with `&mut format!(\"foo\")`\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "bee9b20099f0f6fc9762e8ee1a3a1592737f42fd", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -6,7 +6,7 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `std::fmt::Arguments<'_>`\n               found type `std::string::String`\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c7f8ebab4763d934d6f85a31ebe7077555ecbc41", "filename": "src/test/ui/span/issue-40157.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -8,7 +8,7 @@ error[E0597]: `foo` does not live long enough\n    |      |                                              borrow occurs here\n    |      borrowed value needs to live until here\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dcfeb9fa16e9cc092ef889b56809be58ca0e25f6", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -9,7 +9,7 @@ error[E0597]: borrowed value does not live long enough\n 19 | }\n    | - temporary value needs to live until here\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5e11af14f1b04a8550fb8be5df2f3bf2fb16ff76", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -6,7 +6,7 @@ error[E0282]: type annotations needed\n    |         |\n    |         consider giving `x` a type\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a6936e9ea1fe7371eca232d3ae21e477ae26fe41", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a5a1f98572887d9642c7321be6c0d5abf7aaffb/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=7a5a1f98572887d9642c7321be6c0d5abf7aaffb", "patch": "@@ -6,7 +6,7 @@ error[E0282]: type annotations needed\n    |         |\n    |         consider giving the pattern a type\n    |\n-   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n+   = note: this error originates in a macro outside of the current crate (run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}