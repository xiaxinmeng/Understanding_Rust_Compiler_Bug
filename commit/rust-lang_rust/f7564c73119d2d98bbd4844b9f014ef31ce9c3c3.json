{"sha": "f7564c73119d2d98bbd4844b9f014ef31ce9c3c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NTY0YzczMTE5ZDJkOThiYmQ0ODQ0YjlmMDE0ZWYzMWNlOWMzYzM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-10T05:11:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-10T05:11:52Z"}, "message": "tutorial: Expand the failure section a bit", "tree": {"sha": "b89f92a402bb43a06f19c51ad94221dba19ddbc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89f92a402bb43a06f19c51ad94221dba19ddbc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7564c73119d2d98bbd4844b9f014ef31ce9c3c3", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7564c73119d2d98bbd4844b9f014ef31ce9c3c3", "html_url": "https://github.com/rust-lang/rust/commit/f7564c73119d2d98bbd4844b9f014ef31ce9c3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7564c73119d2d98bbd4844b9f014ef31ce9c3c3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0046aac48db49102d0b17057396bf53c762772c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0046aac48db49102d0b17057396bf53c762772c8", "html_url": "https://github.com/rust-lang/rust/commit/0046aac48db49102d0b17057396bf53c762772c8"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "fcf056f5c9ef86cba7cf6cf490a145cc258a0d6c", "filename": "doc/tutorial.md", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f7564c73119d2d98bbd4844b9f014ef31ce9c3c3/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/f7564c73119d2d98bbd4844b9f014ef31ce9c3c3/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=f7564c73119d2d98bbd4844b9f014ef31ce9c3c3", "patch": "@@ -782,9 +782,9 @@ let (a, b) = get_tuple_of_two_ints();\n This will introduce two new variables, `a` and `b`, bound to the\n content of the tuple.\n \n-You may only use irrevocable patterns\u2014patterns that can never fail to\n-match\u2014in let bindings, though. Things like literals, which only match\n-a specific value, are not allowed.\n+You may only use irrefutable patterns\u2014patterns that can never fail to\n+match\u2014in let bindings. Other types of patterns, such as literals, are\n+not allowed.\n \n ## Loops\n \n@@ -821,13 +821,29 @@ in a moment.\n ## Failure\n \n The `fail` keyword causes the current [task](#tasks) to fail. You use\n-it to indicate unexpected failure, much like you'd use `exit(1)` in a\n-C program, except that in Rust, it is possible for other tasks to\n-handle the failure, allowing the program to continue running.\n+it to indicate unexpected failure, much like you'd use `abort` in a\n+C program or a fatal exception in a C++ program.\n \n-`fail` takes an optional argument, which must have type `str`. Trying\n-to access a vector out of bounds, or running a pattern match with no\n-matching clauses, both result in the equivalent of a `fail`.\n+There is no way for the current task to resume execution after\n+failure; failure is nonrecoverable. It is, however, possible for\n+*another* task to handle the failure, allowing the program to continue\n+running.\n+\n+`fail` takes an optional argument specifying the reason for the\n+failure. It must have type `str`.\n+\n+In addition to the `fail` statement, the following circumstances cause\n+task failure:\n+\n+* Accessing an out-of-bounds element of a vector.\n+\n+* Having no clauses match when evaluating an `alt check` expression.\n+\n+* An assertion failure.\n+\n+* Integer division by zero.\n+\n+* Running out of memory.\n \n ## Assertions\n "}]}