{"sha": "56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTY1MWNhMTVhYzJkM2Y3NDI1OWI4ZGY4YWMwN2JkODBkYmVhZjg=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-06T23:36:50Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T03:50:59Z"}, "message": "Add recommend changes to array\n\nSwitch from indexing to zip, and also use `write` on `MaybeUninit`.\n\nAdd array_map feature to core/src/lib\n\nAttempt to fix issue of no such feature\n\nUpdate w/ pickfire's review\n\nThis changes a couple of names around, adds another small test of variable size,\nand hides the rustdoc #![feature(..)].\n\nFmt doctest\n\nAdd suggestions from lcnr", "tree": {"sha": "853ae9fbc115c61fd4af7786e9041edd469dedbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/853ae9fbc115c61fd4af7786e9041edd469dedbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8", "html_url": "https://github.com/rust-lang/rust/commit/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6411e4c666248d7a74413da03f31b761cf8f66f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6411e4c666248d7a74413da03f31b761cf8f66f", "html_url": "https://github.com/rust-lang/rust/commit/f6411e4c666248d7a74413da03f31b761cf8f66f"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "16baef137cbe210122189e5a185c3bcb23197b26", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8", "patch": "@@ -372,27 +372,28 @@ impl<T, const N: usize> [T; N] {\n     ///\n     /// # Examples\n     /// ```\n-    /// let x = [1,2,3];\n+    /// # #![feature(array_map)]\n+    /// let x = [1, 2, 3];\n     /// let y = x.map(|v| v + 1);\n-    /// assert_eq!(y, [2,3,4]);\n+    /// assert_eq!(y, [2, 3, 4]);\n     /// ```\n     #[unstable(feature = \"array_map\", issue = \"77777\")]\n-    pub fn map<F, S>(self, mut f: F) -> [S; N]\n+    pub fn map<F, U>(self, mut f: F) -> [U; N]\n     where\n-        F: FnMut(T) -> S,\n+        F: FnMut(T) -> U,\n     {\n         use crate::mem::MaybeUninit;\n         struct Guard<T, const N: usize> {\n             dst: *mut T,\n-            curr_init: usize,\n+            initialized: usize,\n         }\n \n         impl<T, const N: usize> Drop for Guard<T, N> {\n             fn drop(&mut self) {\n-                debug_assert!(self.curr_init <= N);\n+                debug_assert!(self.initialized <= N);\n \n                 let initialized_part =\n-                    crate::ptr::slice_from_raw_parts_mut(self.dst, self.curr_init);\n+                    crate::ptr::slice_from_raw_parts_mut(self.dst, self.initialized);\n                 // SAFETY: this raw slice will contain only initialized objects\n                 // that's why, it is allowed to drop it.\n                 unsafe {\n@@ -401,16 +402,16 @@ impl<T, const N: usize> [T; N] {\n             }\n         }\n         let mut dst = MaybeUninit::uninit_array::<N>();\n-        let mut guard: Guard<S, N> = Guard { dst: &mut dst as *mut _ as *mut S, curr_init: 0 };\n-        for (i, e) in IntoIter::new(self).enumerate() {\n-            dst[i] = MaybeUninit::new(f(e));\n-            guard.curr_init += 1;\n+        let mut guard: Guard<U, N> = Guard { dst: &mut dst as *mut _ as *mut U, initialized: 0 };\n+        for (src, dst) in IntoIter::new(self).zip(&mut dst) {\n+            dst.write(f(src));\n+            guard.initialized += 1;\n         }\n-        // FIXME convert to crate::mem::transmute when works with generics\n-        // unsafe { crate::mem::transmute::<[MaybeUninit<S>; N], [S; N]>(dst) }\n+        // FIXME: Convert to crate::mem::transmute once it works with generics.\n+        // unsafe { crate::mem::transmute::<[MaybeUninit<U>; N], [U; N]>(dst) }\n         crate::mem::forget(guard);\n         // SAFETY: At this point we've properly initialized the whole array\n-        // and we just need to cast it to the correct type\n-        unsafe { (&mut dst as *mut _ as *mut [S; N]).read() }\n+        // and we just need to cast it to the correct type.\n+        unsafe { (&mut dst as *mut _ as *mut [U; N]).read() }\n     }\n }"}, {"sha": "763457d485da451a7195dffeb7fb50b62b2b6531", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8", "patch": "@@ -145,6 +145,7 @@\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(maybe_uninit_slice)]\n+#![feature(maybe_uninit_extra)]\n #![feature(external_doc)]\n #![feature(associated_type_bounds)]\n #![feature(const_caller_location)]"}, {"sha": "d4a9b061d851e404962ccdb84b3c6a454bd8addd", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=56a651ca15ac2d3f74259b8df8ac07bd80dbeaf8", "patch": "@@ -296,4 +296,8 @@ fn array_map() {\n     let a = [1, 2, 3];\n     let b = a.map(|v| v + 1);\n     assert_eq!(b, [2, 3, 4]);\n+\n+    let a = [1u8, 2, 3];\n+    let b = a.map(|v| v as u64);\n+    assert_eq!(b, [1, 2, 3]);\n }"}]}