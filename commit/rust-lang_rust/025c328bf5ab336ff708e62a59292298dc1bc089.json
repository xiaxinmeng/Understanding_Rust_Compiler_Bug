{"sha": "025c328bf5ab336ff708e62a59292298dc1bc089", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNWMzMjhiZjVhYjMzNmZmNzA4ZTYyYTU5MjkyMjk4ZGMxYmMwODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-15T01:22:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-15T01:22:16Z"}, "message": "Auto merge of #39633 - steveklabnik:vendor-mdbook, r=alexcrichton\n\nPort books to mdbook\n\nPart of https://github.com/rust-lang/rust/issues/39588\n\nblocked on https://github.com/rust-lang/rust/pull/39431\n\nAs a first step towards the bookshelf, we ~vendor mdbook in-tree and~ port our books to it. Eventually, both of these books will be moved out-of-tree, but the nightly book will rely on doing the same thing. As such, this intermediate step is useful.\n\nr? @alexcrichton @brson\n\n/cc @azerupi", "tree": {"sha": "025b7fba629c298f31a51af81d04f895a6faa4d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/025b7fba629c298f31a51af81d04f895a6faa4d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/025c328bf5ab336ff708e62a59292298dc1bc089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/025c328bf5ab336ff708e62a59292298dc1bc089", "html_url": "https://github.com/rust-lang/rust/commit/025c328bf5ab336ff708e62a59292298dc1bc089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/025c328bf5ab336ff708e62a59292298dc1bc089/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "html_url": "https://github.com/rust-lang/rust/commit/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c"}, {"sha": "cacb3bc9c741a7d41a1085af850cd3ff852307f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cacb3bc9c741a7d41a1085af850cd3ff852307f5", "html_url": "https://github.com/rust-lang/rust/commit/cacb3bc9c741a7d41a1085af850cd3ff852307f5"}], "stats": {"total": 1786, "additions": 587, "deletions": 1199}, "files": [{"sha": "e737c7946ef6136f4302146fbae243a726f10c34", "filename": ".gitattributes", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -6,4 +6,4 @@\n *.rs rust\n src/etc/installer/gfx/* binary\n *.woff binary\n-src/vendor/* binary\n+src/vendor/** -text"}, {"sha": "d82e279e012d8d22b452832a46a014436151c9b1", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -100,3 +100,4 @@ version.md\n version.ml\n version.texi\n .cargo\n+!src/vendor/**"}, {"sha": "51d45c06fcb49f0cc0a97f69efd87110e972a15f", "filename": "src/Cargo.lock", "status": "modified", "additions": 215, "deletions": 1, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -6,6 +6,14 @@ dependencies = [\n  \"libc 0.0.0\",\n ]\n \n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"alloc\"\n version = \"0.0.0\"\n@@ -31,10 +39,25 @@ dependencies = [\n  \"libc 0.0.0\",\n ]\n \n+[[package]]\n+name = \"ansi_term\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"arena\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"bitflags\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"bootstrap\"\n version = \"0.0.0\"\n@@ -69,6 +92,21 @@ dependencies = [\n name = \"cargotest\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"clap\"\n+version = \"2.19.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term_size 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cmake\"\n version = \"0.1.18\"\n@@ -114,6 +152,7 @@ version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -158,6 +197,33 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"graphviz\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"handlebars\"\n+version = \"0.20.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"kernel32-sys\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"lazy_static\"\n+version = \"0.1.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"libc\"\n version = \"0.0.0\"\n@@ -183,6 +249,27 @@ name = \"log\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"mdbook\"\n+version = \"0.0.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"handlebars 0.20.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"num_cpus\"\n version = \"0.2.13\"\n@@ -209,6 +296,11 @@ dependencies = [\n  \"unwind 0.0.0\",\n ]\n \n+[[package]]\n+name = \"pest\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n@@ -225,6 +317,15 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"pulldown-cmark\"\n+version = \"0.0.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"qemu-test-client\"\n version = \"0.1.0\"\n@@ -233,16 +334,42 @@ version = \"0.1.0\"\n name = \"qemu-test-server\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"quick-error\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rand\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"regex\"\n+version = \"0.1.80\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rustbook\"\n-version = \"0.0.0\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mdbook 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"rustc\"\n@@ -650,6 +777,11 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"strsim\"\n+version = \"0.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"syntax\"\n version = \"0.0.0\"\n@@ -685,6 +817,16 @@ dependencies = [\n name = \"term\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"term_size\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"test\"\n version = \"0.0.0\"\n@@ -700,6 +842,23 @@ dependencies = [\n  \"test 0.0.0\",\n ]\n \n+[[package]]\n+name = \"thread-id\"\n+version = \"2.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thread_local\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"tidy\"\n version = \"0.1.0\"\n@@ -712,14 +871,69 @@ dependencies = [\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"unicode-segmentation\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-width\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"utf8-ranges\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"vec_map\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi-build\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [metadata]\n+\"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n+\"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n+\"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n+\"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n+\"checksum clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95b78f3fe0fc94c13c731714363260e04b557a637166f33a4570d3189d642374\"\n \"checksum cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e5bcf27e097a184c1df4437654ed98df3d7a516e8508a6ba45d8b092bbdf283\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n \"checksum gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c07c758b972368e703a562686adb39125707cc1ef3399da8c019fc6c2498a75d\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n+\"checksum handlebars 0.20.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07f9c1d28bcfb97143c95ed0667141677b2b5675c7ba3d5b81459ad43b1073bd\"\n+\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n+\"checksum lazy_static 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf186d1a8aa5f5bee5fd662bc9c1b949e0259e1bcc379d1f006847b0080c7417\"\n \"checksum libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"044d1360593a78f5c8e5e710beccdc24ab71d1f01bc19a29bcacdba22e8475d8\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n+\"checksum mdbook 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a629cd0194bbd0340a70db83a94b27cf9881fac8c55e6a2db983addcb7114ee4\"\n+\"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n+\"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n+\"checksum pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1058d7bb927ca067656537eec4e02c2b4b70eaaa129664c5b90c111e20326f41\"\n+\"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n+\"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n+\"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n \"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n+\"checksum strsim 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"67f84c44fbb2f91db7fef94554e6b2ac05909c9c0b0bc23bb98d3a1aebfe7f7c\"\n+\"checksum term_size 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f7f5f3f71b0040cecc71af239414c23fd3c73570f5ff54cf50e03cef637f2a0\"\n+\"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n+\"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n+\"checksum unicode-segmentation 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c3bc443ded17b11305ffffe6b37e2076f328a5a8cb6aa877b1b98f77699e98b5\"\n+\"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n+\"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n+\"checksum vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cac5efe5cb0fa14ec2f84f83c701c562ee63f6dcc680861b21d65c682adfb05f\"\n+\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n+\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "74b13144f2ff0e0984c9e42a9ca6e56010a25968", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -47,6 +47,7 @@ pub fn rustbook(build: &Build, target: &str, name: &str) {\n     build.run(build.tool_cmd(&compiler, \"rustbook\")\n                    .arg(\"build\")\n                    .arg(&src)\n+                   .arg(\"-d\")\n                    .arg(out));\n }\n "}, {"sha": "9162642b1cc62f52bfb1154bf478dc2ee6040ecd", "filename": "src/doc/book/src/README.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% The Rust Programming Language\n+# The Rust Programming Language\n \n Welcome! This book will teach you about the [Rust Programming Language][rust].\n Rust is a systems programming language focused on three goals: safety, speed,", "previous_filename": "src/doc/book/README.md"}, {"sha": "74b9b7fa5b29233f599b6c339c5dd001aaa994ab", "filename": "src/doc/book/src/SUMMARY.md", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,5 +1,7 @@\n # Summary\n \n+[Introduction](README.md)\n+\n * [Getting Started](getting-started.md)\n * [Tutorial: Guessing Game](guessing-game.md)\n * [Syntax and Semantics](syntax-and-semantics.md)", "previous_filename": "src/doc/book/SUMMARY.md"}, {"sha": "a882d6d2ebe0779a565f418d9a4070944939d223", "filename": "src/doc/book/src/advanced-linking.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Advanced Linking\n+# Advanced Linking\n \n The common cases of linking with Rust have been covered earlier in this book,\n but supporting the range of linking possibilities made available by other", "previous_filename": "src/doc/book/advanced-linking.md"}, {"sha": "61bad3d39489589ec8cae03e19f7cf34e24b8ace", "filename": "src/doc/book/src/associated-constants.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-constants.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-constants.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-constants.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Associated Constants\n+# Associated Constants\n \n With the `associated_consts` feature, you can define constants like this:\n ", "previous_filename": "src/doc/book/associated-constants.md"}, {"sha": "4db2b9e5eec2000463020cae9b88547c065cd9fe", "filename": "src/doc/book/src/associated-types.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Associated Types\n+# Associated Types\n \n Associated types are a powerful part of Rust\u2019s type system. They\u2019re related to\n the idea of a \u2018type family\u2019, in other words, grouping multiple types together. That", "previous_filename": "src/doc/book/associated-types.md"}, {"sha": "9e3cdb7ec09789359a3cb195b3ff614f5ef05a15", "filename": "src/doc/book/src/attributes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Attributes\n+# Attributes\n \n Declarations can be annotated with \u2018attributes\u2019 in Rust. They look like this:\n ", "previous_filename": "src/doc/book/attributes.md"}, {"sha": "a6ae2b3049a3b8637cb5151806500ae6b1fb367d", "filename": "src/doc/book/src/benchmark-tests.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fbenchmark-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fbenchmark-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fbenchmark-tests.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Benchmark tests\n+# Benchmark tests\n \n Rust supports benchmark tests, which can test the performance of your\n code. Let's make our `src/lib.rs` look like this (comments elided):", "previous_filename": "src/doc/book/benchmark-tests.md"}, {"sha": "07b2aa94a77463fa279641cc15d0b7febed28901", "filename": "src/doc/book/src/bibliography.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Bibliography\n+# Bibliography\n \n This is a reading list of material relevant to Rust. It includes prior\n research that has - at one time or another - influenced the design of", "previous_filename": "src/doc/book/bibliography.md"}, {"sha": "a6e396571c685f9b05fa8b96c786568201cab8b8", "filename": "src/doc/book/src/borrow-and-asref.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Borrow and AsRef\n+# Borrow and AsRef\n \n The [`Borrow`][borrow] and [`AsRef`][asref] traits are very similar, but\n different. Here\u2019s a quick refresher on what these two traits mean.", "previous_filename": "src/doc/book/borrow-and-asref.md"}, {"sha": "f03e881f47404300c47ebc313468a6658f4bfef6", "filename": "src/doc/book/src/box-syntax-and-patterns.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-%  Box Syntax and Patterns\n+#  Box Syntax and Patterns\n \n Currently the only stable way to create a `Box` is via the `Box::new` method.\n Also it is not possible in stable Rust to destructure a `Box` in a match", "previous_filename": "src/doc/book/box-syntax-and-patterns.md"}, {"sha": "2f6730be6651f4de65843b5bcb6110f7c0cad878", "filename": "src/doc/book/src/casting-between-types.md", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Casting Between Types\n+# Casting Between Types\n \n Rust, with its focus on safety, provides two different ways of casting\n different types between each other. The first, `as`, is for safe casts.\n@@ -8,7 +8,7 @@ most dangerous features of Rust!\n # Coercion\n \n Coercion between types is implicit and has no syntax of its own, but can\n-be spelled out with [`as`](#explicit-coercions).\n+be spelled out with [`as`](#Explicit%20coercions).\n \n Coercion occurs in `let`, `const`, and `static` statements; in\n function call arguments; in field values in struct initialization; and in a\n@@ -19,7 +19,7 @@ The most common case of coercion is removing mutability from a reference:\n * `&mut T` to `&T`\n \n An analogous conversion is to remove mutability from a\n-[raw pointer](raw-pointers.md):\n+[raw pointer](raw-pointers.html):\n \n * `*mut T` to `*const T`\n \n@@ -29,7 +29,7 @@ References can also be coerced to raw pointers:\n \n * `&mut T` to `*mut T`\n \n-Custom coercions may be defined using [`Deref`](deref-coercions.md).\n+Custom coercions may be defined using [`Deref`](deref-coercions.html).\n \n Coercion is transitive.\n \n@@ -101,7 +101,7 @@ The semantics of numeric casts are:\n \n ## Pointer casts\n \n-Perhaps surprisingly, it is safe to cast [raw pointers](raw-pointers.md) to and\n+Perhaps surprisingly, it is safe to cast [raw pointers](raw-pointers.html) to and\n from integers, and to cast between pointers to different types subject to\n some constraints. It is only unsafe to dereference the pointer:\n ", "previous_filename": "src/doc/book/casting-between-types.md"}, {"sha": "b743fda354692a44400c2c21ae0fb71c2d5a30d5", "filename": "src/doc/book/src/chapter_1.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -0,0 +1 @@\n+# Chapter 1"}, {"sha": "89dd09e67048121341a50438354ef9618312fdc4", "filename": "src/doc/book/src/choosing-your-guarantees.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Choosing your Guarantees\n+# Choosing your Guarantees\n \n One important feature of Rust is that it lets us control the costs and guarantees\n of a program.", "previous_filename": "src/doc/book/choosing-your-guarantees.md"}, {"sha": "2f6d5039f4d4375757e8f843e6ca4314695609a1", "filename": "src/doc/book/src/closures.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Closures\n+# Closures\n \n Sometimes it is useful to wrap up a function and _free variables_ for better\n clarity and reuse. The free variables that can be used come from the\n@@ -463,7 +463,7 @@ fn factory() -> &(Fn(i32) -> i32) {\n \n Right. Because we have a reference, we need to give it a lifetime. But\n our `factory()` function takes no arguments, so\n-[elision](lifetimes.html#lifetime-elision) doesn\u2019t kick in here. Then what\n+[elision](lifetimes.html#Lifetime%20Elision) doesn\u2019t kick in here. Then what\n choices do we have? Try `'static`:\n \n ```rust,ignore", "previous_filename": "src/doc/book/closures.md"}, {"sha": "0e68ab218e843719a688504b232896d9e9de5321", "filename": "src/doc/book/src/comments.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Comments\n+# Comments\n \n Now that we have some functions, it\u2019s a good idea to learn about comments.\n Comments are notes that you leave to other programmers to help explain things", "previous_filename": "src/doc/book/comments.md"}, {"sha": "47c5e5c82915552501693117e3c7f6582b3696be", "filename": "src/doc/book/src/compiler-plugins.md", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,6 +1,6 @@\n-% Compiler Plugins\n+# Compiler Plugins\n \n-# Introduction\n+## Introduction\n \n `rustc` can load compiler plugins, which are user-provided libraries that\n extend the compiler's behavior with new syntax extensions, lint checks, etc.\n@@ -127,7 +127,7 @@ enum.  For a more involved macro example, see\n \n ## Tips and tricks\n \n-Some of the [macro debugging tips](macros.html#debugging-macro-code) are applicable.\n+Some of the [macro debugging tips](macros.html#Debugging%20macro%20code) are applicable.\n \n You can use `syntax::parse` to turn token trees into\n higher-level syntax elements like expressions:", "previous_filename": "src/doc/book/compiler-plugins.md"}, {"sha": "e5bc7ecdd0b28c2b5c6217cc6c5cef5740cb6106", "filename": "src/doc/book/src/concurrency.md", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Concurrency\n+# Concurrency\n \n Concurrency and parallelism are incredibly important topics in computer\n science, and are also a hot topic in industry today. Computers are gaining more\n@@ -55,7 +55,7 @@ For sharing references across threads, Rust provides a wrapper type called\n `Arc<T>`. `Arc<T>` implements `Send` and `Sync` if and only if `T` implements\n both `Send` and `Sync`. For example, an object of type `Arc<RefCell<U>>` cannot\n be transferred across threads because\n-[`RefCell`](choosing-your-guarantees.html#refcellt) does not implement\n+[`RefCell`](choosing-your-guarantees.html#RefCell%3CT%3E) does not implement\n `Sync`, consequently `Arc<RefCell<U>>` would not implement `Send`.\n \n These two traits allow you to use the type system to make strong guarantees\n@@ -126,7 +126,7 @@ closure only captures a _reference to `x`_. This is a problem, because the\n thread may outlive the scope of `x`, leading to a dangling pointer.\n \n To fix this, we use a `move` closure as mentioned in the error message. `move`\n-closures are explained in depth [here](closures.html#move-closures); basically\n+closures are explained in depth [here](closures.html#move%20closures); basically\n they move variables from their environment into themselves.\n \n ```rust", "previous_filename": "src/doc/book/concurrency.md"}, {"sha": "938c1c5132698da7a0bc67bd671bf2822e9d3de9", "filename": "src/doc/book/src/conditional-compilation.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Conditional Compilation\n+# Conditional Compilation\n \n Rust has a special attribute, `#[cfg]`, which allows you to compile code\n based on a flag passed to the compiler. It has two forms:", "previous_filename": "src/doc/book/conditional-compilation.md"}, {"sha": "25b4bd94799e0704a1f81f19cb305a4a9ec1c8e1", "filename": "src/doc/book/src/const-and-static.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% const and static\n+# const and static\n \n Rust has a way of defining constants with the `const` keyword:\n ", "previous_filename": "src/doc/book/const-and-static.md"}, {"sha": "84f5fac044e0e9604db602c43e6e97388c634c33", "filename": "src/doc/book/src/crates-and-modules.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Crates and Modules\n+# Crates and Modules\n \n When a project starts getting large, it\u2019s considered good software\n engineering practice to split it up into a bunch of smaller pieces, and then", "previous_filename": "src/doc/book/crates-and-modules.md"}, {"sha": "154b5f0f4e256a8892f18a2fb3220c524c594c25", "filename": "src/doc/book/src/custom-allocators.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcustom-allocators.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fcustom-allocators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcustom-allocators.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Custom Allocators\n+# Custom Allocators\n \n Allocating memory isn't always the easiest thing to do, and while Rust generally\n takes care of this by default it often becomes necessary to customize how", "previous_filename": "src/doc/book/custom-allocators.md"}, {"sha": "8552a7c8b3425b56da83a615759af64c9f0288e5", "filename": "src/doc/book/src/deref-coercions.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% `Deref` coercions\n+# `Deref` coercions\n \n The standard library provides a special trait, [`Deref`][deref]. It\u2019s normally\n used to overload `*`, the dereference operator:", "previous_filename": "src/doc/book/deref-coercions.md"}, {"sha": "69d49e2f96aa896d5b7a705174ce1ed98e6d19fc", "filename": "src/doc/book/src/documentation.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Documentation\n+# Documentation\n \n Documentation is an important part of any software project, and it's\n first-class in Rust. Let's talk about the tooling Rust gives you to", "previous_filename": "src/doc/book/documentation.md"}, {"sha": "53c507eba3f78b744d4391bf9afd9da460bf9fbf", "filename": "src/doc/book/src/drop.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Drop\n+# Drop\n \n Now that we\u2019ve discussed traits, let\u2019s talk about a particular trait provided\n by the Rust standard library, [`Drop`][drop]. The `Drop` trait provides a way", "previous_filename": "src/doc/book/drop.md"}, {"sha": "ce2dfe4eae27e5d3db0a5d2ecbb82c23436e8f2f", "filename": "src/doc/book/src/effective-rust.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Effective Rust\n+# Effective Rust\n \n So you\u2019ve learned how to write some Rust code. But there\u2019s a difference between\n writing *any* Rust code and writing *good* Rust code.", "previous_filename": "src/doc/book/effective-rust.md"}, {"sha": "9cf5e6bfa21aca3f48731134bd4f66ece8f29421", "filename": "src/doc/book/src/enums.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Enums\n+# Enums\n \n An `enum` in Rust is a type that represents data that is one of\n several possible variants. Each variant in the `enum` can optionally", "previous_filename": "src/doc/book/enums.md"}, {"sha": "1b0d2453275fc0d22a519a661a735e340238a88d", "filename": "src/doc/book/src/error-handling.md", "status": "renamed", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Error Handling\n+# Error Handling\n \n Like most programming languages, Rust encourages the programmer to handle\n errors in a particular way. Generally speaking, error handling is divided into\n@@ -21,35 +21,35 @@ sum types and combinators, and try to motivate the way Rust does error handling\n incrementally. As such, programmers with experience in other expressive type\n systems may want to jump around.\n \n-* [The Basics](#the-basics)\n-    * [Unwrapping explained](#unwrapping-explained)\n-    * [The `Option` type](#the-option-type)\n-        * [Composing `Option<T>` values](#composing-optiont-values)\n-    * [The `Result` type](#the-result-type)\n-        * [Parsing integers](#parsing-integers)\n-        * [The `Result` type alias idiom](#the-result-type-alias-idiom)\n-    * [A brief interlude: unwrapping isn't evil](#a-brief-interlude-unwrapping-isnt-evil)\n-* [Working with multiple error types](#working-with-multiple-error-types)\n-    * [Composing `Option` and `Result`](#composing-option-and-result)\n-    * [The limits of combinators](#the-limits-of-combinators)\n-    * [Early returns](#early-returns)\n-    * [The `try!` macro](#the-try-macro)\n-    * [Defining your own error type](#defining-your-own-error-type)\n-* [Standard library traits used for error handling](#standard-library-traits-used-for-error-handling)\n-    * [The `Error` trait](#the-error-trait)\n-    * [The `From` trait](#the-from-trait)\n-    * [The real `try!` macro](#the-real-try-macro)\n-    * [Composing custom error types](#composing-custom-error-types)\n-    * [Advice for library writers](#advice-for-library-writers)\n-* [Case study: A program to read population data](#case-study-a-program-to-read-population-data)\n-    * [Initial setup](#initial-setup)\n-    * [Argument parsing](#argument-parsing)\n-    * [Writing the logic](#writing-the-logic)\n-    * [Error handling with `Box<Error>`](#error-handling-with-boxerror)\n-    * [Reading from stdin](#reading-from-stdin)\n-    * [Error handling with a custom type](#error-handling-with-a-custom-type)\n-    * [Adding functionality](#adding-functionality)\n-* [The short story](#the-short-story)\n+* [The Basics](#The%20Basics)\n+    * [Unwrapping explained](#Unwrapping%20explained)\n+    * [The `Option` type](#The%20Option%20type)\n+        * [Composing `Option<T>` values](#Composing%20Option%3CT%3E%20values)\n+    * [The `Result` type](#The%20Result%20type)\n+        * [Parsing integers](#Parsing%20integers)\n+        * [The `Result` type alias idiom](#The%20Result%20type%20alias%20idiom)\n+    * [A brief interlude: unwrapping isn't evil](#A%20brief%20interlude:%20unwrapping%20isnt%20evil)\n+* [Working with multiple error types](#Working%20with%20multiple%20error%20types)\n+    * [Composing `Option` and `Result`](#Composing%20Option%20and%20Result)\n+    * [The limits of combinators](#The%20limits%20of%20combinators)\n+    * [Early returns](#Early%20returns)\n+    * [The `try!` macro](#The%20try%20macro)\n+    * [Defining your own error type](#Defining%20your%20own%20error%20type)\n+* [Standard library traits used for error handling](#Standard%20library%20traits%20used%20for%20error%20handling)\n+    * [The `Error` trait](#The%20Error%20trait)\n+    * [The `From` trait](#The%20From%20trait)\n+    * [The real `try!` macro](#The%20real%20try%20macro)\n+    * [Composing custom error types](#Composing%20custom%20error%20types)\n+    * [Advice for library writers](#Advice%20for%20library%20writers)\n+* [Case study: A program to read population data](#Case%20study:%20A%20program%20to%20read%20population%20data)\n+    * [Initial setup](#Initial%20setup)\n+    * [Argument parsing](#Argument%20parsing)\n+    * [Writing the logic](#Writing%20the%20logic)\n+    * [Error handling with `Box<Error>`](#Error%20handling%20with%20Box%3CError%3E)\n+    * [Reading from stdin](#Reading%20from%20stdin)\n+    * [Error handling with a custom type](#Error%20handling%20with%20a%20custom%20type)\n+    * [Adding functionality](#Adding%20functionality)\n+* [The short story](#The%20short%20story)\n \n # The Basics\n \n@@ -796,7 +796,7 @@ because of the return types of\n [`std::fs::File::open`](../std/fs/struct.File.html#method.open) and\n [`std::io::Read::read_to_string`](../std/io/trait.Read.html#method.read_to_string).\n (Note that they both use the [`Result` type alias\n-idiom](#the-result-type-alias-idiom) described previously. If you\n+idiom](#The%20Result%20type%20alias%20idiom) described previously. If you\n click on the `Result` type, you'll [see the type\n alias](../std/io/type.Result.html), and consequently, the underlying\n `io::Error` type.)  The third problem is described by the\n@@ -1120,7 +1120,7 @@ returns an `&Error`, which is itself a trait object. We'll revisit the\n \n For now, it suffices to show an example implementing the `Error` trait. Let's\n use the error type we defined in the\n-[previous section](#defining-your-own-error-type):\n+[previous section](#Defining%20your%20own%20error%20type):\n \n ```rust\n use std::io;\n@@ -1493,19 +1493,19 @@ representation. But certainly, this will vary depending on use cases.\n At a minimum, you should probably implement the\n [`Error`](../std/error/trait.Error.html)\n trait. This will give users of your library some minimum flexibility for\n-[composing errors](#the-real-try-macro). Implementing the `Error` trait also\n+[composing errors](#The%20real%20try%20macro). Implementing the `Error` trait also\n means that users are guaranteed the ability to obtain a string representation\n of an error (because it requires impls for both `fmt::Debug` and\n `fmt::Display`).\n \n Beyond that, it can also be useful to provide implementations of `From` on your\n error types. This allows you (the library author) and your users to\n-[compose more detailed errors](#composing-custom-error-types). For example,\n+[compose more detailed errors](#Composing%20custom%20error%20types). For example,\n [`csv::Error`](http://burntsushi.net/rustdoc/csv/enum.Error.html)\n provides `From` impls for both `io::Error` and `byteorder::Error`.\n \n Finally, depending on your tastes, you may also want to define a\n-[`Result` type alias](#the-result-type-alias-idiom), particularly if your\n+[`Result` type alias](#The%20Result%20type%20alias%20idiom), particularly if your\n library defines a single error type. This is used in the standard library\n for [`io::Result`](../std/io/type.Result.html)\n and [`fmt::Result`](../std/fmt/type.Result.html).\n@@ -1538,7 +1538,7 @@ and [`rustc-serialize`](https://crates.io/crates/rustc-serialize) crates.\n \n We're not going to spend a lot of time on setting up a project with\n Cargo because it is already covered well in [the Cargo\n-section](getting-started.html#hello-cargo) and [Cargo's documentation][14].\n+section](getting-started.html#Hello%20Cargo) and [Cargo's documentation][14].\n \n To get started from scratch, run `cargo new --bin city-pop` and make sure your\n `Cargo.toml` looks something like this:\n@@ -1729,7 +1729,7 @@ error types and you don't need any `From` implementations. The downside is that\n since `Box<Error>` is a trait object, it *erases the type*, which means the\n compiler can no longer reason about its underlying type.\n \n-[Previously](#the-limits-of-combinators) we started refactoring our code by\n+[Previously](#The%20limits%20of%20combinators) we started refactoring our code by\n changing the type of our function from `T` to `Result<T, OurErrorType>`. In\n this case, `OurErrorType` is only `Box<Error>`. But what's `T`? And can we add\n a return type to `main`?", "previous_filename": "src/doc/book/error-handling.md"}, {"sha": "b2994d2a29cbbf899b9d137117fab204d066269d", "filename": "src/doc/book/src/ffi.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Foreign Function Interface\n+# Foreign Function Interface\n \n # Introduction\n \n@@ -680,7 +680,7 @@ pub extern fn hello_rust() -> *const u8 {\n \n The `extern` makes this function adhere to the C calling convention, as\n discussed above in \"[Foreign Calling\n-Conventions](ffi.html#foreign-calling-conventions)\". The `no_mangle`\n+Conventions](ffi.html#Foreign%20calling%20conventions)\". The `no_mangle`\n attribute turns off Rust's name mangling, so that it is easier to link to.\n \n # FFI and panics", "previous_filename": "src/doc/book/ffi.md"}, {"sha": "eff77a54d8395c309f265a491750071e57afaff0", "filename": "src/doc/book/src/functions.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Functions\n+# Functions\n \n Every Rust program has at least one function, the `main` function:\n ", "previous_filename": "src/doc/book/functions.md"}, {"sha": "56655ac41d0d3dc7f8db1a1bb52dbf2408abc341", "filename": "src/doc/book/src/generics.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Generics\n+# Generics\n \n Sometimes, when writing a function or data type, we may want it to work for\n multiple types of arguments. In Rust, we can do this with generics.", "previous_filename": "src/doc/book/generics.md"}, {"sha": "93846644c398e53b8bc24a9e5a6f0abee9e82d74", "filename": "src/doc/book/src/getting-started.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Getting Started\n+# Getting Started\n \n This first chapter of the book will get us going with Rust and its tooling.\n First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n@@ -236,7 +236,7 @@ language]*, which means that most things are expressions, rather than\n statements. The `;` indicates that this expression is over, and the next one is\n ready to begin. Most lines of Rust code end with a `;`.\n \n-[expression-oriented language]: glossary.html#expression-oriented-language\n+[expression-oriented language]: glossary.html#Expression-Oriented%20Language\n \n ## Compiling and Running Are Separate Steps\n ", "previous_filename": "src/doc/book/getting-started.md"}, {"sha": "49821d86a92007433f69b00f1a8aa8b9d773ac96", "filename": "src/doc/book/src/glossary.md", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Glossary\n+# Glossary\n \n Not every Rustacean has a background in systems programming, nor in computer\n science, so we've added explanations of terms that might be unfamiliar.\n@@ -56,7 +56,7 @@ They can be used to manage control flow in a modular fashion.\n \n A type without a statically known size or alignment. ([more info][link])\n \n-[link]: ../nomicon/exotic-sizes.html#dynamically-sized-types-dsts\n+[link]: ../nomicon/exotic-sizes.html#Dynamically%20Sized%20Types%20(DSTs)\n \n ### Expression\n \n@@ -76,8 +76,8 @@ In an expression-oriented language, (nearly) every statement is an expression\n and therefore returns a value. Consequently, these expression statements can\n themselves form part of larger expressions.\n \n-[expression]: glossary.html#expression\n-[statement]: glossary.html#statement\n+[expression]: glossary.html#Expression\n+[statement]: glossary.html#Statement\n \n ### Statement\n ", "previous_filename": "src/doc/book/glossary.md"}, {"sha": "216db25cd95640c96b2bd1503c6577872c849eb6", "filename": "src/doc/book/src/guessing-game.md", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Guessing Game\n+# Guessing Game\n \n Let\u2019s learn some Rust! For our first project, we\u2019ll implement a classic\n beginner programming problem: the guessing game. Here\u2019s how it works: Our\n@@ -119,7 +119,7 @@ there are no arguments, and `{` starts the body of the function. Because\n we didn\u2019t include a return type, it\u2019s assumed to be `()`, an empty\n [tuple][tuples].\n \n-[tuples]: primitive-types.html#tuples\n+[tuples]: primitive-types.html#Tuples\n \n ```rust,ignore\n     println!(\"Guess the number!\");\n@@ -727,7 +727,7 @@ thirty-two bit integer. Rust has [a number of built-in number types][number],\n but we\u2019ve chosen `u32`. It\u2019s a good default choice for a small positive number.\n \n [parse]: ../std/primitive.str.html#method.parse\n-[number]: primitive-types.html#numeric-types\n+[number]: primitive-types.html#Numeric%20types\n \n Just like `read_line()`, our call to `parse()` could cause an error. What if\n our string contained `A\ud83d\udc4d%`? There\u2019d be no way to convert that to a number. As", "previous_filename": "src/doc/book/guessing-game.md"}, {"sha": "17bf13690009f35361b7c254f624017505ecc923", "filename": "src/doc/book/src/if-let.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% if let\n+# if let\n \n `if let` permits [patterns][pattern] matching within the condition of an [if][if] statement.\n This allows us to reduce the overhead of certain kinds of [pattern][patterns] matches", "previous_filename": "src/doc/book/if-let.md"}, {"sha": "d74503757bc48c154222abbd8d9a07747d2811d9", "filename": "src/doc/book/src/if.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fif.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fif.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fif.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% if\n+# if\n \n Rust\u2019s take on `if` is not particularly complex, but it\u2019s much more like the\n `if` you\u2019ll find in a dynamically typed language than in a more traditional", "previous_filename": "src/doc/book/if.md"}, {"sha": "4262289acbfde70578ec1e16c7105a75bc23b925", "filename": "src/doc/book/src/inline-assembly.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Finline-assembly.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Finline-assembly.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Finline-assembly.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Inline Assembly\n+# Inline Assembly\n \n For extremely low-level manipulations and performance reasons, one\n might wish to control the CPU directly. Rust supports using inline", "previous_filename": "src/doc/book/inline-assembly.md"}, {"sha": "e1edce3e80f714dfda16b833d8327d29ae0995e9", "filename": "src/doc/book/src/intrinsics.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fintrinsics.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Intrinsics\n+# Intrinsics\n \n > **Note**: intrinsics will forever have an unstable interface, it is\n > recommended to use the stable interfaces of libcore rather than intrinsics", "previous_filename": "src/doc/book/intrinsics.md"}, {"sha": "1437c0f0b54c68a931f616fa4f4631476ab52eaf", "filename": "src/doc/book/src/iterators.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Iterators\n+# Iterators\n \n Let's talk about loops.\n ", "previous_filename": "src/doc/book/iterators.md"}, {"sha": "9bd64d3817955a472baac17a9928103604e813f2", "filename": "src/doc/book/src/lang-items.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Lang items\n+# Lang items\n \n > **Note**: lang items are often provided by crates in the Rust distribution,\n > and lang items themselves have an unstable interface. It is recommended to use", "previous_filename": "src/doc/book/lang-items.md"}, {"sha": "c00815f49c74010fe88a29ed0c60699a0a6cccea", "filename": "src/doc/book/src/lifetimes.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Lifetimes\n+# Lifetimes\n \n This is the last of three sections presenting Rust\u2019s ownership system. This is one of\n Rust\u2019s most distinct and compelling features, with which Rust developers should\n@@ -139,7 +139,7 @@ associated with it, but the compiler lets you elide (i.e. omit, see\n [\"Lifetime Elision\"][lifetime-elision] below) them in common cases. Before we\n get to that, though, let\u2019s look at a short example with explicit lifetimes:\n \n-[lifetime-elision]: #lifetime-elision\n+[lifetime-elision]: #Lifetime%20Elision\n \n ```rust,ignore\n fn bar<'a>(...)", "previous_filename": "src/doc/book/lifetimes.md"}, {"sha": "ec4acfa311230b862c1e31c8c6bd52a7660b030e", "filename": "src/doc/book/src/loops.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Floops.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Floops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Floops.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Loops\n+# Loops\n \n Rust currently provides three approaches to performing some kind of iterative activity. They are: `loop`, `while` and `for`. Each approach has its own set of uses.\n ", "previous_filename": "src/doc/book/loops.md"}, {"sha": "3ccbeb05f01db80f6ae8b5a11173116532d65836", "filename": "src/doc/book/src/macros.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Macros\n+# Macros\n \n By now you\u2019ve learned about many of the tools Rust provides for abstracting and\n reusing code. These units of code reuse have a rich semantic structure. For\n@@ -432,7 +432,7 @@ Even when Rust code contains un-expanded macros, it can be parsed as a full\n tools that process code. It also has a few consequences for the design of\n Rust\u2019s macro system.\n \n-[ast]: glossary.html#abstract-syntax-tree\n+[ast]: glossary.html#Abstract%20Syntax%20Tree\n \n One consequence is that Rust must determine, when it parses a macro invocation,\n whether the macro stands in for", "previous_filename": "src/doc/book/macros.md"}, {"sha": "b1e26a9c9d3cd2665b01c2c84ebf3fab63a3cef3", "filename": "src/doc/book/src/match.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Match\n+# Match\n \n Often, a simple [`if`][if]/`else` isn\u2019t enough, because you have more than two\n possible options. Also, conditions can get quite complex. Rust", "previous_filename": "src/doc/book/match.md"}, {"sha": "0404a5c992ba304460602b8a72b040806e681d02", "filename": "src/doc/book/src/method-syntax.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Method Syntax\n+# Method Syntax\n \n Functions are great, but if you want to call a bunch of them on some data, it\n can be awkward. Consider this code:", "previous_filename": "src/doc/book/method-syntax.md"}, {"sha": "7e96849220a9559cc73cf48ff8446106eef6a4b0", "filename": "src/doc/book/src/mutability.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Mutability\n+# Mutability\n \n Mutability, the ability to change something, works a bit differently in Rust\n than in other languages. The first aspect of mutability is its non-default\n@@ -89,7 +89,7 @@ philosophy, memory safety, and the mechanism by which Rust guarantees it, the\n > * exactly one mutable reference (`&mut T`).\n \n [ownership]: ownership.html\n-[borrowing]: references-and-borrowing.html#borrowing\n+[borrowing]: references-and-borrowing.html#Borrowing\n \n So, that\u2019s the real definition of \u2018immutability\u2019: is this safe to have two\n pointers to? In `Arc<T>`\u2019s case, yes: the mutation is entirely contained inside", "previous_filename": "src/doc/book/mutability.md"}, {"sha": "5dfaa9e0fa8009551a2bc19067b294adf2c5ab39", "filename": "src/doc/book/src/nightly-rust.md", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,8 +1,8 @@\n-% Nightly Rust\n+# Nightly Rust\n \n Rust provides three distribution channels for Rust: nightly, beta, and stable.\n Unstable features are only available on nightly Rust. For more details on this\n-process, see \u2018[Stability as a deliverable][stability]\u2019.\n+process, see [Stability as a deliverable][stability].\n \n [stability]: http://blog.rust-lang.org/2014/10/30/Stability.html\n \n@@ -91,9 +91,10 @@ If not, there are a number of places where you can get help. The easiest is\n [the #rust IRC channel on irc.mozilla.org][irc], which you can access through\n [Mibbit][mibbit]. Click that link, and you'll be chatting with other Rustaceans\n (a silly nickname we call ourselves), and we can help you out. Other great\n-resources include [the user\u2019s forum][users], and [Stack Overflow][stackoverflow].\n+resources include [the users forum][users], and [Stack Overflow][stackoverflow].\n \n [irc]: irc://irc.mozilla.org/#rust\n [mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n [users]: https://users.rust-lang.org/\n [stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n+", "previous_filename": "src/doc/book/nightly-rust.md"}, {"sha": "dcb0fbc8005347349ffcde7b7a7b10f68534399f", "filename": "src/doc/book/src/no-stdlib.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fno-stdlib.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% No stdlib\n+# No stdlib\n \n Rust\u2019s standard library provides a lot of useful functionality, but assumes\n support for various features of its host system: threads, networking, heap", "previous_filename": "src/doc/book/no-stdlib.md"}, {"sha": "a69cd6adb3b1ff242b23d480fe077ad067505121", "filename": "src/doc/book/src/operators-and-overloading.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Operators and Overloading\n+# Operators and Overloading\n \n Rust allows for a limited form of operator overloading. There are certain\n operators that are able to be overloaded. To support a particular operator", "previous_filename": "src/doc/book/operators-and-overloading.md"}, {"sha": "e7bf3cec55e4720ca85b264b9b5a0bc77f4edfb7", "filename": "src/doc/book/src/ownership.md", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Ownership\n+# Ownership\n \n This is the first of three sections presenting Rust\u2019s ownership system. This is one of\n Rust\u2019s most distinct and compelling features, with which Rust developers should\n@@ -65,10 +65,10 @@ elements onto them.\n Vectors have a [generic type][generics] `Vec<T>`, so in this example `v` will have type\n `Vec<i32>`. We'll cover [generics] in detail in a later chapter.\n \n-[arrays]: primitive-types.html#arrays\n+[arrays]: primitive-types.html#Arrays\n [vectors]: vectors.html\n-[heap]: the-stack-and-the-heap.html#the-heap\n-[stack]: the-stack-and-the-heap.html#the-stack\n+[heap]: the-stack-and-the-heap.html#The%20Heap\n+[stack]: the-stack-and-the-heap.html#The%20Stack\n [bindings]: variable-bindings.html\n [generics]: generics.html\n \n@@ -136,7 +136,7 @@ Rust allocates memory for an integer [i32] on the [stack][sh], copies the bit\n pattern representing the value of 10 to the allocated memory and binds the\n variable name x to this memory region for future reference.\n \n-[i32]: primitive-types.html#numeric-types\n+[i32]: primitive-types.html#Numeric%20types\n \n Now consider the following code fragment:\n ", "previous_filename": "src/doc/book/ownership.md"}, {"sha": "1983927085c148291e3a1095ddcb247c3c8b0a3a", "filename": "src/doc/book/src/patterns.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Patterns\n+# Patterns\n \n Patterns are quite common in Rust. We use them in [variable\n bindings][bindings], [match expressions][match], and other places, too. Let\u2019s go", "previous_filename": "src/doc/book/patterns.md"}, {"sha": "67d71ceba0cc349f21b4280a4793cdca28b28b8e", "filename": "src/doc/book/src/primitive-types.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Primitive Types\n+# Primitive Types\n \n The Rust language has a number of types that are considered \u2018primitive\u2019. This\n means that they\u2019re built-in to the language. Rust is structured in such a way\n@@ -232,7 +232,7 @@ soon.\n You can assign one tuple into another, if they have the same contained types\n and [arity]. Tuples have the same arity when they have the same length.\n \n-[arity]: glossary.html#arity\n+[arity]: glossary.html#Arity\n \n ```rust\n let mut x = (1, 2); // x: (i32, i32)", "previous_filename": "src/doc/book/primitive-types.md"}, {"sha": "d286c3b7bdc633fd4b67b1f7c39073080339450a", "filename": "src/doc/book/src/procedural-macros.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Procedural Macros (and custom Derive)\n+# Procedural Macros (and custom Derive)\n \n As you've seen throughout the rest of the book, Rust provides a mechanism\n called \"derive\" that lets you implement traits easily. For example,", "previous_filename": "src/doc/book/procedural-macros.md"}, {"sha": "1f75665f4b8c36ebde4386a7e5b434a6cee16888", "filename": "src/doc/book/src/raw-pointers.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Raw Pointers\n+# Raw Pointers\n \n Rust has a number of different smart pointer types in its standard library, but\n there are two types that are extra-special. Much of Rust\u2019s safety comes from", "previous_filename": "src/doc/book/raw-pointers.md"}, {"sha": "f01aa45385acf4ea6eef3fac12565396095dc3f4", "filename": "src/doc/book/src/references-and-borrowing.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% References and Borrowing\n+# References and Borrowing\n \n This is the second of three sections presenting Rust\u2019s ownership system. This is one of\n Rust\u2019s most distinct and compelling features, with which Rust developers should", "previous_filename": "src/doc/book/references-and-borrowing.md"}, {"sha": "af89ca8348424a6b2636631f71fc302892d0b55e", "filename": "src/doc/book/src/release-channels.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Release Channels\n+# Release Channels\n \n The Rust project uses a concept called \u2018release channels\u2019 to manage releases.\n It\u2019s important to understand this process to choose which version of Rust", "previous_filename": "src/doc/book/release-channels.md"}, {"sha": "3f7398dde5e20ca788ed24052ff2fb46d0158681", "filename": "src/doc/book/src/slice-patterns.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fslice-patterns.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Slice patterns\n+# Slice patterns\n \n If you want to match against a slice or array, you can use `&` with the\n `slice_patterns` feature:", "previous_filename": "src/doc/book/slice-patterns.md"}, {"sha": "ac41be11854b89603c4ffc519a49a470f5f638d7", "filename": "src/doc/book/src/strings.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Strings\n+# Strings\n \n Strings are an important concept for any programmer to master. Rust\u2019s string\n handling system is a bit different from other languages, due to its systems", "previous_filename": "src/doc/book/strings.md"}, {"sha": "51af343c130123b4a8fda6887f6353bf02e17826", "filename": "src/doc/book/src/structs.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Structs\n+# Structs\n \n `struct`s are a way of creating more complex data types. For example, if we were\n doing calculations involving coordinates in 2D space, we would need both an `x`", "previous_filename": "src/doc/book/structs.md"}, {"sha": "aa4c1251024de218ac7787a6249ae81f0669e2d0", "filename": "src/doc/book/src/syntax-and-semantics.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Syntax and Semantics\n+# Syntax and Semantics\n \n This chapter breaks Rust down into small chunks, one for each concept.\n ", "previous_filename": "src/doc/book/syntax-and-semantics.md"}, {"sha": "1e1d811a1d8b18769e68b923181e4344131feda4", "filename": "src/doc/book/src/syntax-index.md", "status": "renamed", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Syntax Index\n+# Syntax Index\n \n ## Keywords\n \n@@ -196,18 +196,18 @@\n [Associated Types]: associated-types.html\n [Attributes]: attributes.html\n [Casting Between Types (`as`)]: casting-between-types.html#as\n-[Closures (`move` closures)]: closures.html#move-closures\n+[Closures (`move` closures)]: closures.html#move%20closures\n [Closures]: closures.html\n [Comments]: comments.html\n-[Crates and Modules (Defining Modules)]: crates-and-modules.html#defining-modules\n-[Crates and Modules (Exporting a Public Interface)]: crates-and-modules.html#exporting-a-public-interface\n-[Crates and Modules (Importing External Crates)]: crates-and-modules.html#importing-external-crates\n-[Crates and Modules (Importing Modules with `use`)]: crates-and-modules.html#importing-modules-with-use\n-[Crates and Modules (Re-exporting with `pub use`)]: crates-and-modules.html#re-exporting-with-pub-use\n-[Diverging Functions]: functions.html#diverging-functions\n+[Crates and Modules (Defining Modules)]: crates-and-modules.html#Defining%20modules\n+[Crates and Modules (Exporting a Public Interface)]: crates-and-modules.html#Exporting%20a%20public%20interface\n+[Crates and Modules (Importing External Crates)]: crates-and-modules.html#Importing%20external%20crates\n+[Crates and Modules (Importing Modules with `use`)]: crates-and-modules.html#Importing%20modules%20with%20use\n+[Crates and Modules (Re-exporting with `pub use`)]: crates-and-modules.html#Re-exporting%20with%20pub%20use\n+[Diverging Functions]: functions.html#Diverging%20functions\n [Enums]: enums.html\n [Foreign Function Interface]: ffi.html\n-[Functions (Early Returns)]: functions.html#early-returns\n+[Functions (Early Returns)]: functions.html#Early%20returns\n [Functions]: functions.html\n [Generics]: generics.html\n [Iterators]: iterators.html\n@@ -216,38 +216,38 @@\n [Loops (`for`)]: loops.html#for\n [Loops (`loop`)]: loops.html#loop\n [Loops (`while`)]: loops.html#while\n-[Loops (Ending Iteration Early)]: loops.html#ending-iteration-early\n-[Loops (Loops Labels)]: loops.html#loop-labels\n+[Loops (Ending Iteration Early)]: loops.html#Ending%20iteration%20early\n+[Loops (Loops Labels)]: loops.html#Loop%20labels\n [Macros]: macros.html\n [Match]: match.html\n-[Method Syntax (Method Calls)]: method-syntax.html#method-calls\n+[Method Syntax (Method Calls)]: method-syntax.html#Method%20calls\n [Method Syntax]: method-syntax.html\n [Mutability]: mutability.html\n [Operators and Overloading]: operators-and-overloading.html\n-[Patterns (`ref` and `ref mut`)]: patterns.html#ref-and-ref-mut\n-[Patterns (Bindings)]: patterns.html#bindings\n-[Patterns (Ignoring bindings)]: patterns.html#ignoring-bindings\n-[Patterns (Multiple patterns)]: patterns.html#multiple-patterns\n-[Patterns (Ranges)]: patterns.html#ranges\n+[Patterns (`ref` and `ref mut`)]: patterns.html#ref%20and%20ref%20mut\n+[Patterns (Bindings)]: patterns.html#Bindings\n+[Patterns (Ignoring bindings)]: patterns.html#Ignoring%20bindings\n+[Patterns (Multiple patterns)]: patterns.html#Multiple%20patterns\n+[Patterns (Ranges)]: patterns.html#Ranges\n [Primitive Types (`char`)]: primitive-types.html#char\n-[Primitive Types (Arrays)]: primitive-types.html#arrays\n-[Primitive Types (Booleans)]: primitive-types.html#booleans\n-[Primitive Types (Tuple Indexing)]: primitive-types.html#tuple-indexing\n-[Primitive Types (Tuples)]: primitive-types.html#tuples\n+[Primitive Types (Arrays)]: primitive-types.html#Arrays\n+[Primitive Types (Booleans)]: primitive-types.html#Booleans\n+[Primitive Types (Tuple Indexing)]: primitive-types.html#Tuple%20indexing\n+[Primitive Types (Tuples)]: primitive-types.html#Tuples\n [Raw Pointers]: raw-pointers.html\n [Reference (Byte String Literals)]: ../reference.html#byte-string-literals\n [Reference (Integer literals)]: ../reference.html#integer-literals\n [Reference (Raw Byte String Literals)]: ../reference.html#raw-byte-string-literals\n [Reference (Raw String Literals)]: ../reference.html#raw-string-literals\n [References and Borrowing]: references-and-borrowing.html\n [Strings]: strings.html\n-[Structs (Update syntax)]: structs.html#update-syntax\n+[Structs (Update syntax)]: structs.html#Update%20syntax\n [Structs]: structs.html\n-[Traits (`where` clause)]: traits.html#where-clause\n-[Traits (Multiple Trait Bounds)]: traits.html#multiple-trait-bounds\n+[Traits (`where` clause)]: traits.html#Where%20clause\n+[Traits (Multiple Trait Bounds)]: traits.html#Multiple%20trait%20bounds\n [Traits]: traits.html\n [Universal Function Call Syntax]: ufcs.html\n-[Universal Function Call Syntax (Angle-bracket Form)]: ufcs.html#angle-bracket-form\n+[Universal Function Call Syntax (Angle-bracket Form)]: ufcs.html#Angle-bracket%20Form\n [Unsafe]: unsafe.html\n-[Unsized Types (`?Sized`)]: unsized-types.html#sized\n+[Unsized Types (`?Sized`)]: unsized-types.html#Sized\n [Variable Bindings]: variable-bindings.html", "previous_filename": "src/doc/book/syntax-index.md"}, {"sha": "291c4481d551321d6ec4b598ab259bc8d414f02b", "filename": "src/doc/book/src/testing.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Testing\n+# Testing\n \n > Program testing can be a very effective way to show the presence of bugs, but\n > it is hopelessly inadequate for showing their absence.", "previous_filename": "src/doc/book/testing.md"}, {"sha": "b9b3b801eae58abaa264bf9709778af5a1e9005e", "filename": "src/doc/book/src/the-stack-and-the-heap.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% The Stack and the Heap\n+# The Stack and the Heap\n \n As a systems language, Rust operates at a low level. If you\u2019re coming from a\n high-level language, there are some aspects of systems programming that you may", "previous_filename": "src/doc/book/the-stack-and-the-heap.md"}, {"sha": "a77d5fe93b524716326bd566fd0b0ab4c987b9f8", "filename": "src/doc/book/src/trait-objects.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Trait Objects\n+# Trait Objects\n \n When code involves polymorphism, there needs to be a mechanism to determine\n which specific version is actually run. This is called \u2018dispatch\u2019. There are", "previous_filename": "src/doc/book/trait-objects.md"}, {"sha": "a6d1c3d1d231df9661c6a053b86b3f6f796b31b6", "filename": "src/doc/book/src/traits.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Traits\n+# Traits\n \n A trait is a language feature that tells the Rust compiler about\n functionality a type must provide.\n@@ -81,7 +81,7 @@ Traits are useful because they allow a type to make certain promises about its\n behavior. Generic functions can exploit this to constrain, or [bound][bounds], the types they\n accept. Consider this function, which does not compile:\n \n-[bounds]: glossary.html#bounds\n+[bounds]: glossary.html#Bounds\n \n ```rust,ignore\n fn print_area<T>(shape: T) {", "previous_filename": "src/doc/book/traits.md"}, {"sha": "b1ce068528381bc8fb08703378467bc56aa0a8fa", "filename": "src/doc/book/src/type-aliases.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Type Aliases\n+# Type Aliases\n \n The `type` keyword lets you declare an alias of another type:\n \n@@ -55,7 +55,7 @@ if x == y {\n This compiles without error. Values of a `Num` type are the same as a value of\n type `i32`, in every way. You can use [tuple struct] to really get a new type.\n \n-[tuple struct]: structs.html#tuple-structs\n+[tuple struct]: structs.html#Tuple%20structs\n \n You can also use type aliases with generics:\n ", "previous_filename": "src/doc/book/type-aliases.md"}, {"sha": "016ecc70976574d33b5e4b06c476c1745c5a1e49", "filename": "src/doc/book/src/ufcs.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Universal Function Call Syntax\n+# Universal Function Call Syntax\n \n Sometimes, functions can have the same names. Consider this code:\n ", "previous_filename": "src/doc/book/ufcs.md"}, {"sha": "e90a4b1c268ca3ad2389edc675dc709130e4086e", "filename": "src/doc/book/src/unsafe.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Unsafe\n+# Unsafe\n \n Rust\u2019s main draw is its powerful static guarantees about behavior. But safety\n checks are conservative by nature: there are some programs that are actually", "previous_filename": "src/doc/book/unsafe.md"}, {"sha": "2d090925d51f6cc7d4aa38a44e4d9b114003099c", "filename": "src/doc/book/src/unsized-types.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Unsized Types\n+# Unsized Types\n \n Most types have a particular size, in bytes, that is knowable at compile time.\n For example, an `i32` is thirty-two bits big, or four bytes. However, there are", "previous_filename": "src/doc/book/unsized-types.md"}, {"sha": "8458f9314f9262c397549452cd1c11b506a01b88", "filename": "src/doc/book/src/using-rust-without-the-standard-library.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Using Rust Without the Standard Library\n+# Using Rust Without the Standard Library\n \n Rust\u2019s standard library provides a lot of useful functionality, but assumes\n support for various features of its host system: threads, networking, heap", "previous_filename": "src/doc/book/using-rust-without-the-standard-library.md"}, {"sha": "0c8324d83e07381564c651b4e647240224d3909a", "filename": "src/doc/book/src/variable-bindings.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Variable Bindings\n+# Variable Bindings\n \n Virtually every non-'Hello World\u2019 Rust program uses *variable bindings*. They\n bind some value to a name, so it can be used later. `let` is", "previous_filename": "src/doc/book/variable-bindings.md"}, {"sha": "9b293880cdc03a02519c7839813207b4ada79f8f", "filename": "src/doc/book/src/vectors.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Vectors\n+# Vectors\n \n A \u2018vector\u2019 is a dynamic or \u2018growable\u2019 array, implemented as the standard\n library type [`Vec<T>`][vec]. The `T` means that we can have vectors\n@@ -151,6 +151,6 @@ API documentation][vec].\n [vec]: ../std/vec/index.html\n [box]: ../std/boxed/index.html\n [generic]: generics.html\n-[panic]: concurrency.html#panics\n+[panic]: concurrency.html#Panics\n [get]: ../std/vec/struct.Vec.html#method.get\n [get_mut]: ../std/vec/struct.Vec.html#method.get_mut", "previous_filename": "src/doc/book/vectors.md"}, {"sha": "d577d7b5cc91b4d0099dbd778ad6135f5b66e9e4", "filename": "src/doc/nomicon/src/README.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2FREADME.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% The Rustonomicon\n+# The Rustonomicon\n \n #### The Dark Arts of Advanced and Unsafe Rust Programming\n ", "previous_filename": "src/doc/nomicon/README.md"}, {"sha": "e33dcbbb4188e834798a10d9e5e1111e1e129cf4", "filename": "src/doc/nomicon/src/SUMMARY.md", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,5 +1,7 @@\n # Summary\n \n+[Introduction](README.md)\n+\n * [Meet Safe and Unsafe](meet-safe-and-unsafe.md)\n \t* [How Safe and Unsafe Interact](safe-unsafe-meaning.md)\n \t* [Working with Unsafe](working-with-unsafe.md)", "previous_filename": "src/doc/nomicon/SUMMARY.md"}, {"sha": "fedc7b8bd6a18dcf925ec63a1deffcc088011331", "filename": "src/doc/nomicon/src/arc-and-mutex.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Farc-and-mutex.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Farc-and-mutex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Farc-and-mutex.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Implementing Arc and Mutex\n+# Implementing Arc and Mutex\n \n Knowing the theory is all fine and good, but the *best* way to understand\n something is to use it. To better understand atomics and interior mutability,", "previous_filename": "src/doc/nomicon/arc-and-mutex.md"}, {"sha": "e9ed21a93e00a317ce6e4460115a4ffaddaf4ad6", "filename": "src/doc/nomicon/src/atomics.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fatomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fatomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fatomics.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Atomics\n+# Atomics\n \n Rust pretty blatantly just inherits C11's memory model for atomics. This is not\n due to this model being particularly excellent or easy to understand. Indeed,", "previous_filename": "src/doc/nomicon/atomics.md"}, {"sha": "28ddb507ae27d7fe6da3d8e36f87a1fe90155a89", "filename": "src/doc/nomicon/src/borrow-splitting.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fborrow-splitting.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fborrow-splitting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fborrow-splitting.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Splitting Borrows\n+# Splitting Borrows\n \n The mutual exclusion property of mutable references can be very limiting when\n working with a composite structure. The borrow checker understands some basic", "previous_filename": "src/doc/nomicon/borrow-splitting.md"}, {"sha": "31b78587245404ce78c87e3883f3a313ef967917", "filename": "src/doc/nomicon/src/casts.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fcasts.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fcasts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fcasts.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Casts\n+# Casts\n \n Casts are a superset of coercions: every coercion can be explicitly\n invoked via a cast. However some conversions require a cast.", "previous_filename": "src/doc/nomicon/casts.md"}, {"sha": "b743fda354692a44400c2c21ae0fb71c2d5a30d5", "filename": "src/doc/nomicon/src/chapter_1.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fchapter_1.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fchapter_1.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fchapter_1.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -0,0 +1 @@\n+# Chapter 1"}, {"sha": "4423404fe6e9c4256b0baa8e269e7b117983d866", "filename": "src/doc/nomicon/src/checked-uninit.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fchecked-uninit.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fchecked-uninit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fchecked-uninit.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Checked Uninitialized Memory\n+# Checked Uninitialized Memory\n \n Like C, all stack variables in Rust are uninitialized until a value is\n explicitly assigned to them. Unlike C, Rust statically prevents you from ever", "previous_filename": "src/doc/nomicon/checked-uninit.md"}, {"sha": "1a51bb5a9c614db1e1ab3eea1a2553abc34f2f3f", "filename": "src/doc/nomicon/src/coercions.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fcoercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fcoercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fcoercions.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Coercions\n+# Coercions\n \n Types can implicitly be coerced to change in certain contexts. These changes are\n generally just *weakening* of types, largely focused around pointers and", "previous_filename": "src/doc/nomicon/coercions.md"}, {"sha": "6205199bfcc44fd2ea692d01d59d48bd3b31ed1a", "filename": "src/doc/nomicon/src/concurrency.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fconcurrency.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Concurrency and Parallelism\n+# Concurrency and Parallelism\n \n Rust as a language doesn't *really* have an opinion on how to do concurrency or\n parallelism. The standard library exposes OS threads and blocking sys-calls", "previous_filename": "src/doc/nomicon/concurrency.md"}, {"sha": "b79e72dbae2bf550e32cc6f07775c92cb3c5c65f", "filename": "src/doc/nomicon/src/constructors.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fconstructors.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fconstructors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fconstructors.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Constructors\n+# Constructors\n \n There is exactly one way to create an instance of a user-defined type: name it,\n and initialize all its fields at once:", "previous_filename": "src/doc/nomicon/constructors.md"}, {"sha": "388d003d9b6c21d10adb3d9ee1a127c133f1e874", "filename": "src/doc/nomicon/src/conversions.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fconversions.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fconversions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fconversions.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Type Conversions\n+# Type Conversions\n \n At the end of the day, everything is just a pile of bits somewhere, and type\n systems are just there to help us use those bits right. There are two common", "previous_filename": "src/doc/nomicon/conversions.md"}, {"sha": "bf202ada08e95a8208837a4f22194945d24e29f6", "filename": "src/doc/nomicon/src/data.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdata.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdata.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdata.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Data Representation in Rust\n+# Data Representation in Rust\n \n Low-level programming cares a lot about data layout. It's a big deal. It also\n pervasively influences the rest of the language, so we're going to start by", "previous_filename": "src/doc/nomicon/data.md"}, {"sha": "8c395fe3dc947ebbf0ec40405a8f77a1732a0156", "filename": "src/doc/nomicon/src/destructors.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdestructors.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdestructors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdestructors.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Destructors\n+# Destructors\n \n What the language *does* provide is full-blown automatic destructors through the\n `Drop` trait, which provides the following method:", "previous_filename": "src/doc/nomicon/destructors.md"}, {"sha": "a1fc33bdc1e33cf73d2d5081db5488fb39e00685", "filename": "src/doc/nomicon/src/dot-operator.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdot-operator.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdot-operator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdot-operator.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% The Dot Operator\n+# The Dot Operator\n \n The dot operator will perform a lot of magic to convert types. It will perform\n auto-referencing, auto-dereferencing, and coercion until types match.", "previous_filename": "src/doc/nomicon/dot-operator.md"}, {"sha": "51fa9d0a3c0f1d0cc6a348d5243fe5ea613d3bcc", "filename": "src/doc/nomicon/src/drop-flags.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdrop-flags.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdrop-flags.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdrop-flags.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Drop Flags\n+# Drop Flags\n \n The examples in the previous section introduce an interesting problem for Rust.\n We have seen that it's possible to conditionally initialize, deinitialize, and", "previous_filename": "src/doc/nomicon/drop-flags.md"}, {"sha": "39039694be674cf1d014269a05cf2f57596754c7", "filename": "src/doc/nomicon/src/dropck.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdropck.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fdropck.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdropck.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Drop Check\n+# Drop Check\n \n We have seen how lifetimes provide us some fairly simple rules for ensuring\n that we never read dangling references. However up to this point we have only ever", "previous_filename": "src/doc/nomicon/dropck.md"}, {"sha": "80e72cd5e36c94404ab2b2be8da6c3e7a20ebf02", "filename": "src/doc/nomicon/src/exception-safety.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fexception-safety.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fexception-safety.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fexception-safety.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Exception Safety\n+# Exception Safety\n \n Although programs should use unwinding sparingly, there's a lot of code that\n *can* panic. If you unwrap a None, index out of bounds, or divide by 0, your", "previous_filename": "src/doc/nomicon/exception-safety.md"}, {"sha": "9f858d11dbbb901c97a81c6898657a0ff5093eaf", "filename": "src/doc/nomicon/src/exotic-sizes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fexotic-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fexotic-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fexotic-sizes.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Exotically Sized Types\n+# Exotically Sized Types\n \n Most of the time, we think in terms of types with a fixed, positive size. This\n is not always the case, however.", "previous_filename": "src/doc/nomicon/exotic-sizes.md"}, {"sha": "645986af13ace5aae29aa8bf5f1c7a1607a8dfa0", "filename": "src/doc/nomicon/src/hrtb.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fhrtb.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fhrtb.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fhrtb.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Higher-Rank Trait Bounds (HRTBs)\n+# Higher-Rank Trait Bounds (HRTBs)\n \n Rust's `Fn` traits are a little bit magic. For instance, we can write the\n following code:", "previous_filename": "src/doc/nomicon/hrtb.md"}, {"sha": "38b70b85b576afe94b442bdffbe30e4bd1ceddf8", "filename": "src/doc/nomicon/src/leaking.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fleaking.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fleaking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fleaking.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Leaking\n+# Leaking\n \n Ownership-based resource management is intended to simplify composition. You\n acquire resources when you create the object, and you release the resources when", "previous_filename": "src/doc/nomicon/leaking.md"}, {"sha": "e92d735a01d6921aba25e49c08d23afd800ca7af", "filename": "src/doc/nomicon/src/lifetime-elision.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-elision.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-elision.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-elision.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Lifetime Elision\n+# Lifetime Elision\n \n In order to make common patterns more ergonomic, Rust allows lifetimes to be\n *elided* in function signatures.", "previous_filename": "src/doc/nomicon/lifetime-elision.md"}, {"sha": "08627130590c0f2b8b37869b98c00e68bfda6387", "filename": "src/doc/nomicon/src/lifetime-mismatch.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Limits of Lifetimes\n+# Limits of Lifetimes\n \n Given the following code:\n \n@@ -78,4 +78,4 @@ TODO: other common problems? SEME regions stuff, mostly?\n \n \n \n-[ex2]: lifetimes.html#example-aliasing-a-mutable-reference\n+[ex2]: lifetimes.html#Example%3A%20aliasing%20a%20mutable%20reference", "previous_filename": "src/doc/nomicon/lifetime-mismatch.md"}, {"sha": "e2f0cc86772308315519d9b3e3a04461595083f1", "filename": "src/doc/nomicon/src/lifetimes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetimes.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Lifetimes\n+# Lifetimes\n \n Rust enforces these rules through *lifetimes*. Lifetimes are effectively\n just names for scopes somewhere in the program. Each reference,", "previous_filename": "src/doc/nomicon/lifetimes.md"}, {"sha": "d42d0b6d7255c3e1bbff94c6ef8b09855aa9c9ab", "filename": "src/doc/nomicon/src/meet-safe-and-unsafe.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fmeet-safe-and-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fmeet-safe-and-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fmeet-safe-and-unsafe.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Meet Safe and Unsafe\n+# Meet Safe and Unsafe\n \n Programmers in safe \"high-level\" languages face a fundamental dilemma. On one\n hand, it would be *really* great to just say what you want and not worry about", "previous_filename": "src/doc/nomicon/meet-safe-and-unsafe.md"}, {"sha": "19e5ec382595c212c09e5a3485ae8bac6c0505e1", "filename": "src/doc/nomicon/src/obrm.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fobrm.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fobrm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fobrm.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% The Perils Of Ownership Based Resource Management (OBRM)\n+# The Perils Of Ownership Based Resource Management (OBRM)\n \n OBRM (AKA RAII: Resource Acquisition Is Initialization) is something you'll\n interact with a lot in Rust. Especially if you use the standard library.", "previous_filename": "src/doc/nomicon/obrm.md"}, {"sha": "02f39e3c4dd2794726e1ee2e1cd6aa9b17d738b1", "filename": "src/doc/nomicon/src/other-reprs.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fother-reprs.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fother-reprs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fother-reprs.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Alternative representations\n+# Alternative representations\n \n Rust allows you to specify alternative data layout strategies from the default.\n ", "previous_filename": "src/doc/nomicon/other-reprs.md"}, {"sha": "dd9e9db244a8161a2c8b59555cad56c1efe944b0", "filename": "src/doc/nomicon/src/ownership.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fownership.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Ownership and Lifetimes\n+# Ownership and Lifetimes\n \n Ownership is the breakout feature of Rust. It allows Rust to be completely\n memory-safe and efficient, while avoiding garbage collection. Before getting", "previous_filename": "src/doc/nomicon/ownership.md"}, {"sha": "72fa2e2a77764e73319b5a0fbc024b9ad78abdb1", "filename": "src/doc/nomicon/src/phantom-data.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fphantom-data.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fphantom-data.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fphantom-data.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% PhantomData\n+# PhantomData\n \n When working with unsafe code, we can often end up in a situation where\n types or lifetimes are logically associated with a struct, but not actually", "previous_filename": "src/doc/nomicon/phantom-data.md"}, {"sha": "9b5dec3eec3843315458f8d0365d9face8c92ca6", "filename": "src/doc/nomicon/src/poisoning.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fpoisoning.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fpoisoning.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fpoisoning.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Poisoning\n+# Poisoning\n \n Although all unsafe code *must* ensure it has minimal exception safety, not all\n types ensure *maximal* exception safety. Even if the type does, your code may", "previous_filename": "src/doc/nomicon/poisoning.md"}, {"sha": "c9b8c3d01b2f856a8ec678a6c8603694bbd0ee4d", "filename": "src/doc/nomicon/src/races.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fraces.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fraces.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fraces.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Data Races and Race Conditions\n+# Data Races and Race Conditions\n \n Safe Rust guarantees an absence of data races, which are defined as:\n ", "previous_filename": "src/doc/nomicon/races.md"}, {"sha": "5d80f1edd964a7ee4249cad38be8ef67c6d1a4bd", "filename": "src/doc/nomicon/src/references.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Freferences.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Freferences.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Freferences.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% References\n+# References\n \n This section gives a high-level view of the memory model that *all* Rust\n programs must satisfy to be correct. Safe code is statically verified", "previous_filename": "src/doc/nomicon/references.md"}, {"sha": "98411e041be078e1efdac7e279838403fb36b92e", "filename": "src/doc/nomicon/src/repr-rust.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% repr(Rust)\n+# repr(Rust)\n \n First and foremost, all types have an alignment specified in bytes. The\n alignment of a type specifies what addresses are valid to store the value at. A\n@@ -151,4 +151,4 @@ use fairly elaborate algorithms to cache bits throughout nested types with\n special constrained representations. As such it is *especially* desirable that\n we leave enum layout unspecified today.\n \n-[dst]: exotic-sizes.html#dynamically-sized-types-dsts\n+[dst]: exotic-sizes.html#Dynamically%20Sized%20Types%20(DSTs)", "previous_filename": "src/doc/nomicon/repr-rust.md"}, {"sha": "0a655a3f53a21dfe0f80e9e7312bc88d8bbbf791", "filename": "src/doc/nomicon/src/safe-unsafe-meaning.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fsafe-unsafe-meaning.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fsafe-unsafe-meaning.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fsafe-unsafe-meaning.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% How Safe and Unsafe Interact\n+# How Safe and Unsafe Interact\n \n What's the relationship between Safe Rust and Unsafe Rust? How do they\n interact?", "previous_filename": "src/doc/nomicon/safe-unsafe-meaning.md"}, {"sha": "959f870d4e6459144d42c2b8efb532ced7dd14e2", "filename": "src/doc/nomicon/src/send-and-sync.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fsend-and-sync.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fsend-and-sync.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fsend-and-sync.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Send and Sync\n+# Send and Sync\n \n Not everything obeys inherited mutability, though. Some types allow you to\n multiply alias a location in memory while mutating it. Unless these types use", "previous_filename": "src/doc/nomicon/send-and-sync.md"}, {"sha": "d771712d050134712794fbe04f8fed7577212a8e", "filename": "src/doc/nomicon/src/subtyping.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fsubtyping.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fsubtyping.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fsubtyping.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Subtyping and Variance\n+# Subtyping and Variance\n \n Although Rust doesn't have any notion of structural inheritance, it *does*\n include subtyping. In Rust, subtyping derives entirely from lifetimes. Since", "previous_filename": "src/doc/nomicon/subtyping.md"}, {"sha": "043c8fe462595cb732697edd27965b354c317635", "filename": "src/doc/nomicon/src/transmutes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Ftransmutes.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Ftransmutes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Ftransmutes.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Transmutes\n+# Transmutes\n \n Get out of our way type system! We're going to reinterpret these bits or die\n trying! Even though this book is all about doing things that are unsafe, I", "previous_filename": "src/doc/nomicon/transmutes.md"}, {"sha": "b41cf8b4ed91490f6726dfee1e786d328037cd74", "filename": "src/doc/nomicon/src/unbounded-lifetimes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Funbounded-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Funbounded-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Funbounded-lifetimes.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Unbounded Lifetimes\n+# Unbounded Lifetimes\n \n Unsafe code can often end up producing references or lifetimes out of thin air.\n Such lifetimes come into the world as *unbounded*. The most common source of this", "previous_filename": "src/doc/nomicon/unbounded-lifetimes.md"}, {"sha": "ef31a3535d6a07cc23f7a5d5d4456050ba68ddbd", "filename": "src/doc/nomicon/src/unchecked-uninit.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Funchecked-uninit.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Funchecked-uninit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Funchecked-uninit.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Unchecked Uninitialized Memory\n+# Unchecked Uninitialized Memory\n \n One interesting exception to this rule is working with arrays. Safe Rust doesn't\n permit you to partially initialize an array. When you initialize an array, you", "previous_filename": "src/doc/nomicon/unchecked-uninit.md"}, {"sha": "eafc67907f2af43c57b60f0b91c9664bec42f102", "filename": "src/doc/nomicon/src/uninitialized.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Funinitialized.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Funinitialized.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Funinitialized.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Working With Uninitialized Memory\n+# Working With Uninitialized Memory\n \n All runtime-allocated memory in a Rust program begins its life as\n *uninitialized*. In this state the value of the memory is an indeterminate pile", "previous_filename": "src/doc/nomicon/uninitialized.md"}, {"sha": "6dc396d5153482c392470997f7c7b400a973c091", "filename": "src/doc/nomicon/src/unwinding.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Funwinding.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Funwinding.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Funwinding.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Unwinding\n+# Unwinding\n \n Rust has a *tiered* error-handling scheme:\n ", "previous_filename": "src/doc/nomicon/unwinding.md"}, {"sha": "ef4c52793433f9ef23ee7a96ce7017f7f9d678fe", "filename": "src/doc/nomicon/src/vec-alloc.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-alloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-alloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-alloc.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Allocating Memory\n+# Allocating Memory\n \n Using Unique throws a wrench in an important feature of Vec (and indeed all of\n the std collections): an empty Vec doesn't actually allocate at all. So if we", "previous_filename": "src/doc/nomicon/vec-alloc.md"}, {"sha": "83ab5b24b02453b29395ffdebe1edfbc23a488f0", "filename": "src/doc/nomicon/src/vec-dealloc.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-dealloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-dealloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-dealloc.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Deallocating\n+# Deallocating\n \n Next we should implement Drop so that we don't massively leak tons of resources.\n The easiest way is to just call `pop` until it yields None, and then deallocate", "previous_filename": "src/doc/nomicon/vec-dealloc.md"}, {"sha": "e21542c955aeba457bc0484489786bc11883e13d", "filename": "src/doc/nomicon/src/vec-deref.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-deref.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-deref.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-deref.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Deref\n+# Deref\n \n Alright! We've got a decent minimal stack implemented. We can push, we can\n pop, and we can clean up after ourselves. However there's a whole mess of", "previous_filename": "src/doc/nomicon/vec-deref.md"}, {"sha": "5bd2bf05d8c081496d227a9465f7a65c527cf979", "filename": "src/doc/nomicon/src/vec-drain.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-drain.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-drain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-drain.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Drain\n+# Drain\n \n Let's move on to Drain. Drain is largely the same as IntoIter, except that\n instead of consuming the Vec, it borrows the Vec and leaves its allocation", "previous_filename": "src/doc/nomicon/vec-drain.md"}, {"sha": "39746cad781f8d98cded467e771d378ece5da9c2", "filename": "src/doc/nomicon/src/vec-final.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-final.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-final.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-final.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% The Final Code\n+# The Final Code\n \n ```rust\n #![feature(unique)]", "previous_filename": "src/doc/nomicon/vec-final.md"}, {"sha": "2c14bc4522722e25bf80312f75df2b9c90c28d98", "filename": "src/doc/nomicon/src/vec-insert-remove.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-insert-remove.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-insert-remove.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-insert-remove.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Insert and Remove\n+# Insert and Remove\n \n Something *not* provided by slice is `insert` and `remove`, so let's do those\n next.", "previous_filename": "src/doc/nomicon/vec-insert-remove.md"}, {"sha": "f2f5995ec1cbfaba6f62aebb004a228dee0a3ecb", "filename": "src/doc/nomicon/src/vec-into-iter.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-into-iter.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-into-iter.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-into-iter.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% IntoIter\n+# IntoIter\n \n Let's move on to writing iterators. `iter` and `iter_mut` have already been\n written for us thanks to The Magic of Deref. However there's two interesting", "previous_filename": "src/doc/nomicon/vec-into-iter.md"}, {"sha": "1dc09aef6ad282d4c0e29516f8c20cfa2300b724", "filename": "src/doc/nomicon/src/vec-layout.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-layout.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-layout.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-layout.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Layout\n+# Layout\n \n First off, we need to come up with the struct layout. A Vec has three parts:\n a pointer to the allocation, the size of the allocation, and the number of", "previous_filename": "src/doc/nomicon/vec-layout.md"}, {"sha": "d31a74cc308d95d6b49fef3f22b7d186a94f4ed6", "filename": "src/doc/nomicon/src/vec-push-pop.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-push-pop.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-push-pop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-push-pop.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Push and Pop\n+# Push and Pop\n \n Alright. We can initialize. We can allocate. Let's actually implement some\n functionality! Let's start with `push`. All it needs to do is check if we're", "previous_filename": "src/doc/nomicon/vec-push-pop.md"}, {"sha": "20fa8ab92c24c7c2c32abada6bc5a6f4a048e730", "filename": "src/doc/nomicon/src/vec-raw.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-raw.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-raw.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-raw.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% RawVec\n+# RawVec\n \n We've actually reached an interesting situation here: we've duplicated the logic\n for specifying a buffer and freeing its memory in Vec and IntoIter. Now that", "previous_filename": "src/doc/nomicon/vec-raw.md"}, {"sha": "5ae9bdd3274733102d2aff965fc38403c9beab22", "filename": "src/doc/nomicon/src/vec-zsts.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-zsts.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-zsts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-zsts.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Handling Zero-Sized Types\n+# Handling Zero-Sized Types\n \n It's time. We're going to fight the specter that is zero-sized types. Safe Rust\n *never* needs to care about this, but Vec is very intensive on raw pointers and", "previous_filename": "src/doc/nomicon/vec-zsts.md"}, {"sha": "ad98e45f197b351b461462e20a5a0bdbc920f087", "filename": "src/doc/nomicon/src/vec.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Example: Implementing Vec\n+# Example: Implementing Vec\n \n To bring everything together, we're going to write `std::Vec` from scratch.\n Because all the best tools for writing unsafe code are unstable, this", "previous_filename": "src/doc/nomicon/vec.md"}, {"sha": "5724f3d09a3024277c68e211ebf8e338c400c625", "filename": "src/doc/nomicon/src/working-with-unsafe.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fworking-with-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Fnomicon%2Fsrc%2Fworking-with-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fworking-with-unsafe.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,4 +1,4 @@\n-% Working with Unsafe\n+# Working with Unsafe\n \n Rust generally only gives us the tools to talk about Unsafe Rust in a scoped and\n binary manner. Unfortunately, reality is significantly more complicated than", "previous_filename": "src/doc/nomicon/working-with-unsafe.md"}, {"sha": "7155641e2c28a790ca06f788889137f163e6839e", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -2108,7 +2108,7 @@ On `struct`s:\n   list of names `#[macro_use(foo, bar)]` restricts the import to just those\n   macros named.  The `extern crate` must appear at the crate root, not inside\n   `mod`, which ensures proper function of the [`$crate` macro\n-  variable](book/macros.html#the-variable-crate).\n+  variable](book/macros.html#The%20variable%20%24crate).\n \n - `macro_reexport` on an `extern crate` \u2014 re-export the named macros.\n \n@@ -2118,7 +2118,7 @@ On `struct`s:\n   link it into the output.\n \n See the [macros section of the\n-book](book/macros.html#scoping-and-macro-importexport) for more information on\n+book](book/macros.html#Scoping%20and%20macro%20import%2Fexport) for more information on\n macro scope.\n \n \n@@ -2277,7 +2277,7 @@ For any lint check `C`:\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n along with their default settings.  [Compiler\n-plugins](book/compiler-plugins.html#lint-plugins) can provide additional lint checks.\n+plugins](book/compiler-plugins.html#Lint%20plugins) can provide additional lint checks.\n \n ```{.ignore}\n pub mod m1 {"}, {"sha": "210917b68a2aae8c5a2cfebc8622b705b7c01c73", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -102,7 +102,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [assoc]: ../../book/method-syntax.html#associated-functions\n+/// [assoc]: ../../book/method-syntax.html#Associated%20functions\n ///\n /// # Examples\n ///"}, {"sha": "a874e938a40cdee1e4350b8a5fb89b7ef76f2eea", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -215,7 +215,7 @@\n //! [downgrade]: struct.Rc.html#method.downgrade\n //! [upgrade]: struct.Weak.html#method.upgrade\n //! [`None`]: ../../std/option/enum.Option.html#variant.None\n-//! [assoc]: ../../book/method-syntax.html#associated-functions\n+//! [assoc]: ../../book/method-syntax.html#Associated%20functions\n //! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5655fd066047ccf5e2852573bb3dd0e247efb20a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -525,7 +525,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// it will not release any borrows, as borrows are based on lexical scope.\n ///\n /// This effectively does nothing for\n-/// [types which implement `Copy`](../../book/ownership.html#copy-types),\n+/// [types which implement `Copy`](../../book/ownership.html#Copy%20types),\n /// e.g. integers. Such values are copied and _then_ moved into the function,\n /// so the value persists after this function call.\n ///"}, {"sha": "652b139f1e608b4ffdef820ff55fa7533d189696", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -25,7 +25,7 @@\n /// Book][moreinfo] contains more details about the precise nature of\n /// these internals.\n ///\n-/// [moreinfo]: ../../book/trait-objects.html#representation\n+/// [moreinfo]: ../../book/trait-objects.html#Representation\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g. the fields are not directly accessible"}, {"sha": "88c2310a86e22eb3e33d8891e112a221f0ef8151", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -189,8 +189,8 @@\n //! [`sync`]: sync/index.html\n //! [`thread`]: thread/index.html\n //! [`use std::env`]: env/index.html\n-//! [`use`]: ../book/crates-and-modules.html#importing-modules-with-use\n-//! [crate root]: ../book/crates-and-modules.html#basic-terminology-crates-and-modules\n+//! [`use`]: ../book/crates-and-modules.html#Importing%20Modules%20with%20use\n+//! [crate root]: ../book/crates-and-modules.html#Basic%20terminology%3A%20Crates%20and%20Modules\n //! [crates.io]: https://crates.io\n //! [deref coercions]: ../book/deref-coercions.html\n //! [files]: fs/struct.File.html"}, {"sha": "1b3e17c300e4d547803fc75849e411eb1e0fdeac", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -490,7 +490,7 @@ mod prim_str { }\n /// assert_eq!(tuple.2, 'c');\n /// ```\n ///\n-/// For more about tuples, see [the book](../book/primitive-types.html#tuples).\n+/// For more about tuples, see [the book](../book/primitive-types.html#Tuples).\n ///\n /// # Trait implementations\n ///"}, {"sha": "304c722bbe5dae0b71330b748a6c90aa3adc6af8", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -171,6 +171,13 @@ fn check(cache: &mut Cache,\n             }\n         }\n \n+        if let Some(extension) = path.extension() {\n+            // don't check these files\n+            if extension == \"png\" {\n+                return;\n+            }\n+        }\n+\n         // Alright, if we've found a file name then this file had better\n         // exist! If it doesn't then we register and print an error.\n         if path.exists() {\n@@ -188,7 +195,9 @@ fn check(cache: &mut Cache,\n             let res = load_file(cache, root, path.clone(), FromRedirect(false));\n             let (pretty_path, contents) = match res {\n                 Ok(res) => res,\n-                Err(LoadError::IOError(err)) => panic!(format!(\"{}\", err)),\n+                Err(LoadError::IOError(err)) => {\n+                    panic!(format!(\"error loading {}: {}\", path.display(), err));\n+                }\n                 Err(LoadError::BrokenRedirect(target, _)) => {\n                     *errors = true;\n                     println!(\"{}:{}: broken redirect to {}\",\n@@ -200,6 +209,13 @@ fn check(cache: &mut Cache,\n                 Err(LoadError::IsRedirect) => unreachable!(),\n             };\n \n+            // we don't check the book for fragments because they're added via JS\n+            for book in [\"book/\", \"nomicon/\"].iter() {\n+                if !pretty_path.to_str().unwrap().starts_with(book) {\n+                    return;\n+                }\n+            }\n+\n             if let Some(ref fragment) = fragment {\n                 // Fragments like `#1-6` are most likely line numbers to be\n                 // interpreted by javascript, so we're ignoring these"}, {"sha": "25c310aa8774ae175e55fe1ad16dc387c0587519", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -1,9 +1,12 @@\n [package]\n authors = [\"The Rust Project Developers\"]\n name = \"rustbook\"\n-version = \"0.0.0\"\n-build = false\n+version = \"0.1.0\"\n+license = \"MIT/Apache-2.0\"\n \n-[[bin]]\n-name = \"rustbook\"\n-path = \"main.rs\"\n+[dependencies]\n+clap = \"2.19.3\"\n+\n+[dependencies.mdbook]\n+version = \"0.0.14\"\n+default-features = false"}, {"sha": "c5f72127a9c805230704ed088eee5d2d61b0f9e8", "filename": "src/tools/rustbook/book.rs", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fbook.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,171 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Basic data structures for representing a book.\n-\n-use std::io::prelude::*;\n-use std::io::BufReader;\n-use std::iter;\n-use std::path::{Path, PathBuf};\n-\n-pub struct BookItem {\n-    pub title: String,\n-    pub path: PathBuf,\n-    pub path_to_root: PathBuf,\n-    pub children: Vec<BookItem>,\n-}\n-\n-pub struct Book {\n-    pub chapters: Vec<BookItem>,\n-}\n-\n-/// A depth-first iterator over a book.\n-pub struct BookItems<'a> {\n-    cur_items: &'a [BookItem],\n-    cur_idx: usize,\n-    stack: Vec<(&'a [BookItem], usize)>,\n-}\n-\n-impl<'a> Iterator for BookItems<'a> {\n-    type Item = (String, &'a BookItem);\n-\n-    fn next(&mut self) -> Option<(String, &'a BookItem)> {\n-        loop {\n-            if self.cur_idx >= self.cur_items.len() {\n-                match self.stack.pop() {\n-                    None => return None,\n-                    Some((parent_items, parent_idx)) => {\n-                        self.cur_items = parent_items;\n-                        self.cur_idx = parent_idx + 1;\n-                    }\n-                }\n-            } else {\n-                let cur = self.cur_items.get(self.cur_idx).unwrap();\n-\n-                let mut section = \"\".to_string();\n-                for &(_, idx) in &self.stack {\n-                    section.push_str(&(idx + 1).to_string()[..]);\n-                    section.push('.');\n-                }\n-                section.push_str(&(self.cur_idx + 1).to_string()[..]);\n-                section.push('.');\n-\n-                self.stack.push((self.cur_items, self.cur_idx));\n-                self.cur_items = &cur.children[..];\n-                self.cur_idx = 0;\n-                return Some((section, cur))\n-            }\n-        }\n-    }\n-}\n-\n-impl Book {\n-    pub fn iter(&self) -> BookItems {\n-        BookItems {\n-            cur_items: &self.chapters[..],\n-            cur_idx: 0,\n-            stack: Vec::new(),\n-        }\n-    }\n-}\n-\n-/// Construct a book by parsing a summary (markdown table of contents).\n-pub fn parse_summary(input: &mut Read, src: &Path) -> Result<Book, Vec<String>> {\n-    fn collapse(stack: &mut Vec<BookItem>,\n-                top_items: &mut Vec<BookItem>,\n-                to_level: usize) {\n-        loop {\n-            if stack.len() < to_level { return }\n-            if stack.len() == 1 {\n-                top_items.push(stack.pop().unwrap());\n-                return;\n-            }\n-\n-            let tip = stack.pop().unwrap();\n-            let last = stack.len() - 1;\n-            stack[last].children.push(tip);\n-        }\n-    }\n-\n-    let mut top_items = vec![];\n-    let mut stack = vec![];\n-    let mut errors = vec![];\n-\n-    // always include the introduction\n-    top_items.push(BookItem {\n-        title: \"Introduction\".to_string(),\n-        path: PathBuf::from(\"README.md\"),\n-        path_to_root: PathBuf::from(\"\"),\n-        children: vec![],\n-    });\n-\n-    for line_result in BufReader::new(input).lines() {\n-        let line = match line_result {\n-            Ok(line) => line,\n-            Err(err) => {\n-                errors.push(err.to_string());\n-                return Err(errors);\n-            }\n-        };\n-\n-        let star_idx = match line.find(\"*\") { Some(i) => i, None => continue };\n-\n-        let start_bracket = star_idx + line[star_idx..].find(\"[\").unwrap();\n-        let end_bracket = start_bracket + line[start_bracket..].find(\"](\").unwrap();\n-        let start_paren = end_bracket + 1;\n-        let end_paren = start_paren + line[start_paren..].find(\")\").unwrap();\n-\n-        let given_path = &line[start_paren + 1 .. end_paren];\n-        let title = line[start_bracket + 1..end_bracket].to_string();\n-        let indent = &line[..star_idx];\n-\n-        let path_from_root = match src.join(given_path).strip_prefix(src) {\n-            Ok(p) => p.to_path_buf(),\n-            Err(..) => {\n-                errors.push(format!(\"paths in SUMMARY.md must be relative, \\\n-                                     but path '{}' for section '{}' is not.\",\n-                                     given_path, title));\n-                PathBuf::new()\n-            }\n-        };\n-        let path_to_root = PathBuf::from(&iter::repeat(\"../\")\n-                                         .take(path_from_root.components().count() - 1)\n-                                         .collect::<String>());\n-        let item = BookItem {\n-            title: title,\n-            path: path_from_root,\n-            path_to_root: path_to_root,\n-            children: vec![],\n-        };\n-        let level = indent.chars().map(|c| -> usize {\n-            match c {\n-                ' ' => 1,\n-                '\\t' => 4,\n-                _ => unreachable!()\n-            }\n-        }).sum::<usize>() / 4 + 1;\n-\n-        if level > stack.len() + 1 {\n-            errors.push(format!(\"section '{}' is indented too deeply; \\\n-                                 found {}, expected {} or less\",\n-                                item.title, level, stack.len() + 1));\n-        } else if level <= stack.len() {\n-            collapse(&mut stack, &mut top_items, level);\n-        }\n-        stack.push(item)\n-    }\n-\n-    if errors.is_empty() {\n-        collapse(&mut stack, &mut top_items, 1);\n-        Ok(Book { chapters: top_items })\n-    } else {\n-        Err(errors)\n-    }\n-}"}, {"sha": "d88ff48843a403526f6135ca4c7973702f4031e4", "filename": "src/tools/rustbook/build.rs", "status": "removed", "additions": 0, "deletions": 220, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fbuild.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,220 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `build` subcommand, used to compile a book.\n-\n-use std::env;\n-use std::fs::{self, File};\n-use std::io::prelude::*;\n-use std::io::{self, BufWriter};\n-use std::path::{Path, PathBuf};\n-use rustc_back::tempdir::TempDir;\n-\n-use subcommand::Subcommand;\n-use term::Term;\n-use error::{err, CliResult, CommandResult};\n-use book;\n-use book::{Book, BookItem};\n-\n-use rustdoc;\n-\n-struct Build;\n-\n-pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n-    if name == \"build\" {\n-        Some(Box::new(Build))\n-    } else {\n-        None\n-    }\n-}\n-\n-fn write_toc(book: &Book, current_page: &BookItem, out: &mut Write) -> io::Result<()> {\n-    fn walk_items(items: &[BookItem],\n-                  section: &str,\n-                  current_page: &BookItem,\n-                  out: &mut Write) -> io::Result<()> {\n-        for (i, item) in items.iter().enumerate() {\n-            walk_item(item, &format!(\"{}{}.\", section, i + 1)[..], current_page, out)?;\n-        }\n-        Ok(())\n-    }\n-    fn walk_item(item: &BookItem,\n-                 section: &str,\n-                 current_page: &BookItem,\n-                 out: &mut Write) -> io::Result<()> {\n-        let class_string = if item.path == current_page.path {\n-            \"class='active'\"\n-        } else {\n-            \"\"\n-        };\n-\n-        writeln!(out, \"<li><a {} href='{}'><b>{}</b> {}</a>\",\n-                 class_string,\n-                 current_page.path_to_root.join(&item.path).with_extension(\"html\").display(),\n-                 section,\n-                 item.title)?;\n-        if !item.children.is_empty() {\n-            writeln!(out, \"<ol class='section'>\")?;\n-            let _ = walk_items(&item.children[..], section, current_page, out);\n-            writeln!(out, \"</ol>\")?;\n-        }\n-        writeln!(out, \"</li>\")?;\n-\n-        Ok(())\n-    }\n-\n-    writeln!(out, \"<div id='toc' class='mobile-hidden'>\")?;\n-    writeln!(out, \"<ol class='chapter'>\")?;\n-    walk_items(&book.chapters[..], \"\", &current_page, out)?;\n-    writeln!(out, \"</ol>\")?;\n-    writeln!(out, \"</div>\")?;\n-\n-    Ok(())\n-}\n-\n-fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n-    let tmp = TempDir::new(\"rustbook\")?;\n-\n-    for (_section, item) in book.iter() {\n-        let out_path = match item.path.parent() {\n-            Some(p) => tgt.join(p),\n-            None => tgt.to_path_buf(),\n-        };\n-\n-        let src;\n-        if env::args().len() < 3 {\n-            src = env::current_dir().unwrap().clone();\n-        } else {\n-            src = PathBuf::from(&env::args().nth(2).unwrap());\n-        }\n-        // preprocess the markdown, rerouting markdown references to html\n-        // references\n-        let mut markdown_data = String::new();\n-        File::open(&src.join(&item.path)).and_then(|mut f| {\n-            f.read_to_string(&mut markdown_data)\n-        })?;\n-        let preprocessed_path = tmp.path().join(item.path.file_name().unwrap());\n-        {\n-            let urls = markdown_data.replace(\".md)\", \".html)\");\n-            File::create(&preprocessed_path).and_then(|mut f| {\n-                f.write_all(urls.as_bytes())\n-            })?;\n-        }\n-\n-        // write the prelude to a temporary HTML file for rustdoc inclusion\n-        let prelude = tmp.path().join(\"prelude.html\");\n-        {\n-            let mut buffer = BufWriter::new(File::create(&prelude)?);\n-            writeln!(&mut buffer, r#\"\n-                <div id=\"nav\">\n-                    <button id=\"toggle-nav\">\n-                        <span class=\"sr-only\">Toggle navigation</span>\n-                        <span class=\"bar\"></span>\n-                        <span class=\"bar\"></span>\n-                        <span class=\"bar\"></span>\n-                    </button>\n-                </div>\"#)?;\n-            let _ = write_toc(book, &item, &mut buffer);\n-            writeln!(&mut buffer, \"<div id='page-wrapper'>\")?;\n-            writeln!(&mut buffer, \"<div id='page'>\")?;\n-        }\n-\n-        // write the postlude to a temporary HTML file for rustdoc inclusion\n-        let postlude = tmp.path().join(\"postlude.html\");\n-        {\n-            let mut buffer = BufWriter::new(File::create(&postlude)?);\n-            writeln!(&mut buffer, \"<script src='rustbook.js'></script>\")?;\n-            writeln!(&mut buffer, \"</div></div>\")?;\n-        }\n-\n-        fs::create_dir_all(&out_path)?;\n-\n-        let rustdoc_args: &[String] = &[\n-            \"\".to_string(),\n-            preprocessed_path.display().to_string(),\n-            format!(\"-o{}\", out_path.display()),\n-            format!(\"--html-before-content={}\", prelude.display()),\n-            format!(\"--html-after-content={}\", postlude.display()),\n-            format!(\"--markdown-playground-url=https://play.rust-lang.org/\"),\n-            format!(\"--markdown-css={}\", item.path_to_root.join(\"rustbook.css\").display()),\n-            \"--markdown-no-toc\".to_string(),\n-        ];\n-        let output_result = rustdoc::main_args(rustdoc_args);\n-        if output_result != 0 {\n-            let message = format!(\"Could not execute `rustdoc` with {:?}: {}\",\n-                                  rustdoc_args, output_result);\n-            return Err(err(&message));\n-        }\n-    }\n-\n-    // create index.html from the root README\n-    fs::copy(&tgt.join(\"README.html\"), &tgt.join(\"index.html\"))?;\n-\n-    Ok(())\n-}\n-\n-impl Subcommand for Build {\n-    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n-        Ok(())\n-    }\n-    fn usage(&self) {}\n-    fn execute(&mut self, term: &mut Term) -> CommandResult<()> {\n-        let cwd = env::current_dir().unwrap();\n-        let src;\n-        let tgt;\n-\n-        if env::args().len() < 3 {\n-            src = cwd.clone();\n-        } else {\n-            src = PathBuf::from(&env::args().nth(2).unwrap());\n-        }\n-\n-        if env::args().len() < 4 {\n-            tgt = cwd.join(\"_book\");\n-        } else {\n-            tgt = PathBuf::from(&env::args().nth(3).unwrap());\n-        }\n-\n-        // `_book` directory may already exist from previous runs. Check and\n-        // delete it if it exists.\n-        for entry in fs::read_dir(&cwd)? {\n-            let path = entry?.path();\n-            if path == tgt { fs::remove_dir_all(&tgt)? }\n-        }\n-        fs::create_dir(&tgt)?;\n-\n-        // Copy static files\n-        let css = include_bytes!(\"static/rustbook.css\");\n-        let js = include_bytes!(\"static/rustbook.js\");\n-\n-        let mut css_file = File::create(tgt.join(\"rustbook.css\"))?;\n-        css_file.write_all(css)?;\n-\n-        let mut js_file = File::create(tgt.join(\"rustbook.js\"))?;\n-        js_file.write_all(js)?;\n-\n-\n-        let mut summary = File::open(&src.join(\"SUMMARY.md\"))?;\n-        match book::parse_summary(&mut summary, &src) {\n-            Ok(book) => {\n-                // execute rustdoc on the whole book\n-                render(&book, &tgt)\n-            }\n-            Err(errors) => {\n-                let n = errors.len();\n-                for err in errors {\n-                    term.err(&format!(\"error: {}\", err)[..]);\n-                }\n-\n-                Err(err(&format!(\"{} errors occurred\", n)))\n-            }\n-        }\n-    }\n-}"}, {"sha": "e896dee27919e1c4121e2be47b7c5c334e8ffa1f", "filename": "src/tools/rustbook/error.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Ferror.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Error handling utilities. WIP.\n-\n-use std::error::Error;\n-use std::fmt;\n-\n-pub type CliError = Box<Error + 'static>;\n-pub type CliResult<T> = Result<T, CliError>;\n-\n-pub type CommandError = Box<Error + 'static>;\n-pub type CommandResult<T> = Result<T, CommandError>;\n-\n-pub fn err(s: &str) -> CliError {\n-    #[derive(Debug)]\n-    struct E(String);\n-\n-    impl Error for E {\n-        fn description(&self) -> &str { &self.0 }\n-    }\n-    impl fmt::Display for E {\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-            self.0.fmt(f)\n-        }\n-    }\n-\n-    Box::new(E(s.to_string()))\n-}"}, {"sha": "c90c2b936092a4b643483d20b26d37851139d929", "filename": "src/tools/rustbook/help.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fhelp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fhelp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fhelp.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `help` subcommand. Currently just prints basic usage info.\n-\n-use subcommand::Subcommand;\n-use error::CliResult;\n-use error::CommandResult;\n-use term::Term;\n-\n-struct Help;\n-\n-pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n-    match name {\n-        \"help\" | \"--help\" | \"-h\" | \"-?\" => Some(Box::new(Help)),\n-        _ => None\n-    }\n-}\n-\n-impl Subcommand for Help {\n-    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n-        Ok(())\n-    }\n-    fn usage(&self) {}\n-    fn execute(&mut self, _: &mut Term) -> CommandResult<()> {\n-        usage();\n-        Ok(())\n-    }\n-}\n-\n-pub fn usage() {\n-    println!(\"Usage: rustbook <command> [<args>]\");\n-    println!(\"\");\n-    println!(\"The <command> must be one of:\");\n-    println!(\"  help    Print this message.\");\n-    println!(\"  build   Build the book in subdirectory _book\");\n-    println!(\"  serve   --NOT YET IMPLEMENTED--\");\n-    println!(\"  test    --NOT YET IMPLEMENTED--\");\n-}"}, {"sha": "906251db1c2f216a4643a5cbd6f15c3b746f2a0d", "filename": "src/tools/rustbook/main.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fmain.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,69 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(warnings)]\n-\n-#![feature(rustc_private)]\n-#![feature(rustdoc)]\n-\n-extern crate rustdoc;\n-extern crate rustc_back;\n-\n-use std::env;\n-use std::process;\n-use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT, Ordering};\n-use term::Term;\n-\n-mod term;\n-mod error;\n-mod book;\n-\n-mod subcommand;\n-mod help;\n-mod build;\n-mod serve;\n-mod test;\n-\n-static EXIT_STATUS: AtomicIsize = ATOMIC_ISIZE_INIT;\n-\n-pub fn main() {\n-    let mut term = Term::new();\n-    let cmd: Vec<_> = env::args().collect();\n-\n-    if cmd.len() <= 1 {\n-        help::usage()\n-    } else {\n-        match subcommand::parse_name(&cmd[1][..]) {\n-            Some(mut subcmd) => {\n-                match subcmd.parse_args(&cmd[..cmd.len()-1]) {\n-                    Ok(_) => {\n-                        match subcmd.execute(&mut term) {\n-                            Ok(_) => (),\n-                            Err(err) => {\n-                                term.err(&format!(\"error: {}\", err));\n-                            }\n-                        }\n-                    }\n-                    Err(err) => {\n-                        println!(\"{}\", err.description());\n-                        println!(\"\");\n-                        subcmd.usage();\n-                    }\n-                }\n-            }\n-            None => {\n-                println!(\"Unrecognized command '{}'.\", cmd[1]);\n-                println!(\"\");\n-                help::usage();\n-            }\n-        }\n-    }\n-    process::exit(EXIT_STATUS.load(Ordering::SeqCst) as i32);\n-}"}, {"sha": "2fa7b7eed7b05d77a8bd6f58ea0b29c7a4f7bc48", "filename": "src/tools/rustbook/serve.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fserve.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `serve` subcommand. Just a stub for now.\n-\n-use subcommand::Subcommand;\n-use error::CliResult;\n-use error::CommandResult;\n-use term::Term;\n-\n-struct Serve;\n-\n-pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n-    if name == \"serve\" {\n-        Some(Box::new(Serve))\n-    } else {\n-        None\n-    }\n-}\n-\n-impl Subcommand for Serve {\n-    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n-        Ok(())\n-    }\n-    fn usage(&self) {}\n-    fn execute(&mut self, _: &mut Term) -> CommandResult<()> {\n-        Ok(())\n-    }\n-}"}, {"sha": "b77baed53267785bf30ba2144a866684443036c6", "filename": "src/tools/rustbook/src/main.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -0,0 +1,90 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+extern crate mdbook;\n+#[macro_use]\n+extern crate clap;\n+\n+use std::env;\n+use std::error::Error;\n+use std::io::{self, Write};\n+use std::path::{Path, PathBuf};\n+\n+use clap::{App, ArgMatches, SubCommand, AppSettings};\n+\n+use mdbook::MDBook;\n+\n+fn main() {\n+    let d_message = \"-d, --dest-dir=[dest-dir]\n+'The output directory for your book{n}(Defaults to ./book when omitted)'\";\n+    let dir_message = \"[dir]\n+'A directory for your book{n}(Defaults to Current Directory when omitted)'\";\n+\n+    let matches = App::new(\"rustbook\")\n+                    .about(\"Build a book with mdBook\")\n+                    .author(\"Steve Klabnik <steve@steveklabnik.com>\")\n+                    .version(&*format!(\"v{}\", crate_version!()))\n+                    .setting(AppSettings::SubcommandRequired)\n+                    .subcommand(SubCommand::with_name(\"build\")\n+                        .about(\"Build the book from the markdown files\")\n+                        .arg_from_usage(d_message)\n+                        .arg_from_usage(dir_message))\n+                    .get_matches();\n+\n+    // Check which subcomamnd the user ran...\n+    let res = match matches.subcommand() {\n+        (\"build\", Some(sub_matches)) => build(sub_matches),\n+        (\"test\", Some(sub_matches)) => test(sub_matches),\n+        (_, _) => unreachable!(),\n+    };\n+\n+    if let Err(e) = res {\n+        writeln!(&mut io::stderr(), \"An error occured:\\n{}\", e).ok();\n+        ::std::process::exit(101);\n+    }\n+}\n+\n+// Build command implementation\n+fn build(args: &ArgMatches) -> Result<(), Box<Error>> {\n+    let book_dir = get_book_dir(args);\n+    let book = MDBook::new(&book_dir).read_config();\n+\n+    let mut book = match args.value_of(\"dest-dir\") {\n+        Some(dest_dir) => book.set_dest(Path::new(dest_dir)),\n+        None => book\n+    };\n+\n+    try!(book.build());\n+\n+    Ok(())\n+}\n+\n+fn test(args: &ArgMatches) -> Result<(), Box<Error>> {\n+    let book_dir = get_book_dir(args);\n+    let mut book = MDBook::new(&book_dir).read_config();\n+\n+    try!(book.test());\n+\n+    Ok(())\n+}\n+\n+fn get_book_dir(args: &ArgMatches) -> PathBuf {\n+    if let Some(dir) = args.value_of(\"dir\") {\n+        // Check if path is relative from current dir, or absolute...\n+        let p = Path::new(dir);\n+        if p.is_relative() {\n+            env::current_dir().unwrap().join(dir)\n+        } else {\n+            p.to_path_buf()\n+        }\n+    } else {\n+        env::current_dir().unwrap()\n+    }\n+}"}, {"sha": "ba0151fa2ed4773116c06a94773cdb844806331b", "filename": "src/tools/rustbook/static/rustbook.css", "status": "removed", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.css", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.css?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,157 +0,0 @@\n-/**\n- * Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n- * file at the top-level directory of this distribution and at\n- * http://rust-lang.org/COPYRIGHT.\n- *\n- * Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n- * http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n- * <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n- * option. This file may not be copied, modified, or distributed\n- * except according to those terms.\n- */\n-\n-@import url('../rust.css');\n-\n-body {\n-    max-width: none;\n-    font: 16px/1.6 'Source Serif Pro', Georgia, Times, 'Times New Roman', serif;\n-    color: #333;\n-}\n-\n-h1, h2, h3, h4, h5, h6 {\n-    font-family: 'Open Sans', 'Fira Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n-    font-weight: bold;\n-    color: #333;\n-}\n-\n-@media only screen {\n-    #toc {\n-        position: fixed;\n-        top: 0;\n-        left: 0;\n-        bottom: 0;\n-        width: 300px;\n-        overflow-y: auto;\n-        border-right: 1px solid #e8e8e8;\n-        padding: 0 15px;\n-        font-size: 14px;\n-        background-color: #fafafa;\n-        -webkit-overflow-scrolling: touch;\n-    }\n-\n-    #page-wrapper {\n-        position: absolute;\n-        top: 0;\n-        left: 300px;\n-        right: 0;\n-        padding: 0 15px;\n-        -webkit-overflow-scrolling: touch;\n-    }\n-}\n-\n-@media only print {\n-    #toc, #nav {\n-        display: none;\n-    }\n-}\n-\n-@media only screen and (max-width: 1023px) {\n-    #toc {\n-        width: 100%;\n-        top: 40px;\n-    }\n-\n-    #page-wrapper {\n-        top: 40px;\n-        left: 0;\n-    }\n-\n-    .mobile-hidden {\n-        display: none;\n-    }\n-}\n-\n-#page {\n-    margin: 0 auto;\n-    max-width: 750px;\n-    padding-bottom: 50px;\n-}\n-\n-.chapter {\n-    list-style: none;\n-    padding-left: 0;\n-    line-height: 30px;\n-}\n-\n-.section {\n-    list-style: none;\n-    padding-left: 20px;\n-    line-height: 40px;\n-}\n-\n-.section li {\n-    text-overflow: ellipsis;\n-    overflow: hidden;\n-    white-space: nowrap;\n-}\n-\n-.chapter li a {\n-    color: #333;\n-    padding: 5px 0;\n-}\n-\n-.chapter li a.active,\n-.chapter li a:hover {\n-    color: #008cff;\n-    text-decoration: none;\n-}\n-\n-#toggle-nav {\n-    cursor: pointer;\n-    margin-top: 5px;\n-    width: 30px;\n-    height: 30px;\n-    background-color: #fff;\n-    border: 1px solid #666;\n-    border-radius: 3px;\n-    padding: 3px 3px 0 3px;\n-}\n-\n-.sr-only {\n-    position: absolute;\n-    width: 1px;\n-    height: 1px;\n-    margin: -1px;\n-    padding: 0;\n-    overflow: hidden;\n-    clip: rect(0, 0, 0, 0);\n-    border: 0;\n-}\n-\n-.bar {\n-    display: block;\n-    background-color: #000;\n-    border-radius: 2px;\n-    width: 100%;\n-    height: 2px;\n-    margin: 2px 0 3px;\n-    padding: 0;\n-}\n-\n-pre {\n-    padding: 11px;\n-    overflow: auto;\n-    font-size: 85%;\n-    line-height: 1.45;\n-    background-color: #f7f7f7;\n-    border: 0;\n-    border-radius: 3px;\n-}\n-\n-.left {\n-    float: left;\n-}\n-\n-.right {\n-    float: right;\n-}"}, {"sha": "d8ab15260edb47448d08f0290f1695979201ec29", "filename": "src/tools/rustbook/static/rustbook.js", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.js", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fstatic%2Frustbook.js?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,78 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*jslint browser: true, es5: true */\n-/*globals $: true, rootPath: true */\n-\n-document.addEventListener('DOMContentLoaded', function() {\n-    'use strict';\n-\n-    document.getElementById('toggle-nav').onclick = function(e) {\n-        var toc = document.getElementById('toc');\n-        var pagewrapper = document.getElementById('page-wrapper');\n-        toggleClass(toc, 'mobile-hidden');\n-        toggleClass(pagewrapper, 'mobile-hidden');\n-    };\n-\n-    function toggleClass(el, className) {\n-        // from http://youmightnotneedjquery.com/\n-        if (el.classList) {\n-            el.classList.toggle(className);\n-        } else {\n-            var classes = el.className.split(' ');\n-            var existingIndex = classes.indexOf(className);\n-\n-            if (existingIndex >= 0) {\n-                classes.splice(existingIndex, 1);\n-            } else {\n-                classes.push(className);\n-            }\n-\n-            el.className = classes.join(' ');\n-        }\n-    }\n-\n-    // The below code is used to add prev and next navigation links to the\n-    // bottom of each of the sections.\n-    // It works by extracting the current page based on the url and iterates\n-    // over the menu links until it finds the menu item for the current page. We\n-    // then create a copy of the preceding and following menu links and add the\n-    // correct css class and insert them into the bottom of the page.\n-    var toc = document.getElementById('toc').getElementsByTagName('a');\n-    var href = document.location.pathname.split('/').pop();\n-\n-    if (href === 'index.html' || href === '') {\n-        href = 'README.html';\n-    }\n-\n-    for (var i = 0; i < toc.length; i++) {\n-        if (toc[i].attributes.href.value.split('/').pop() === href) {\n-            var nav = document.createElement('p');\n-\n-            if (i > 0) {\n-                var prevNode = toc[i-1].cloneNode(true);\n-                prevNode.className = 'left';\n-                prevNode.setAttribute('rel', 'prev');\n-                nav.appendChild(prevNode);\n-            }\n-\n-            if (i < toc.length - 1) {\n-                var nextNode = toc[i+1].cloneNode(true);\n-                nextNode.className = 'right';\n-                nextNode.setAttribute('rel', 'next');\n-                nav.appendChild(nextNode);\n-            }\n-\n-            document.getElementById('page').appendChild(nav);\n-\n-            break;\n-        }\n-    }\n-});"}, {"sha": "a66c2b4f3024dda9bc90bd6c194b876df9555d53", "filename": "src/tools/rustbook/subcommand.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fsubcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fsubcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsubcommand.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Common API for all rustbook subcommands.\n-\n-use error::CliResult;\n-use error::CommandResult;\n-use term::Term;\n-\n-use help;\n-use build;\n-use serve;\n-use test;\n-\n-pub trait Subcommand {\n-    /// Mutate the subcommand by parsing its arguments.\n-    ///\n-    /// Returns `Err` on a parsing error.\n-    fn parse_args(&mut self, args: &[String]) -> CliResult<()>;\n-    /// Print the CLI usage information.\n-    fn usage(&self);\n-    /// Actually execute the subcommand.\n-    fn execute(&mut self, term: &mut Term) -> CommandResult<()>;\n-}\n-\n-/// Create a Subcommand object based on its name.\n-pub fn parse_name(name: &str) -> Option<Box<Subcommand>> {\n-    let cmds: [fn(&str) -> Option<Box<Subcommand>>; 4] = [help::parse_cmd,\n-                                                          build::parse_cmd,\n-                                                          serve::parse_cmd,\n-                                                          test::parse_cmd];\n-    for parser in &cmds {\n-        let parsed = (*parser)(name);\n-        if parsed.is_some() { return parsed }\n-    }\n-    None\n-}"}, {"sha": "cdd25e67c8ff13274da1928c75296862c8c958af", "filename": "src/tools/rustbook/term.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fterm.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! An abstraction of the terminal. Eventually, provide color and\n-//! verbosity support. For now, just a wrapper around stdout/stderr.\n-\n-use std::io;\n-use std::io::prelude::*;\n-use std::sync::atomic::Ordering;\n-\n-pub struct Term {\n-    err: Box<Write + 'static>\n-}\n-\n-impl Term {\n-    pub fn new() -> Term {\n-        Term {\n-            err: Box::new(io::stderr())\n-        }\n-    }\n-\n-    pub fn err(&mut self, msg: &str) {\n-        // swallow any errors\n-        let _ = writeln!(&mut self.err, \"{}\", msg);\n-        ::EXIT_STATUS.store(101, Ordering::SeqCst);\n-    }\n-}"}, {"sha": "002c46a7af48db021a0ad5776467bcb23a93c31d", "filename": "src/tools/rustbook/test.rs", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8154a092558d79f13d7dd48abbfcc4e9d4ed44c/src%2Ftools%2Frustbook%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Ftest.rs?ref=e8154a092558d79f13d7dd48abbfcc4e9d4ed44c", "patch": "@@ -1,75 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the `test` subcommand. Just a stub for now.\n-\n-use subcommand::Subcommand;\n-use error::{err, CliResult, CommandResult};\n-use term::Term;\n-use book;\n-\n-use std::fs::File;\n-use std::env;\n-use std::process::Command;\n-\n-struct Test;\n-\n-pub fn parse_cmd(name: &str) -> Option<Box<Subcommand>> {\n-    if name == \"test\" {\n-        Some(Box::new(Test))\n-    } else {\n-        None\n-    }\n-}\n-\n-impl Subcommand for Test {\n-    fn parse_args(&mut self, _: &[String]) -> CliResult<()> {\n-        Ok(())\n-    }\n-    fn usage(&self) {}\n-    fn execute(&mut self, term: &mut Term) -> CommandResult<()> {\n-        let cwd = env::current_dir().unwrap();\n-        let src = cwd.clone();\n-\n-        let mut summary = File::open(&src.join(\"SUMMARY.md\"))?;\n-        match book::parse_summary(&mut summary, &src) {\n-            Ok(book) => {\n-                for (_, item) in book.iter() {\n-                    let output_result = Command::new(\"rustdoc\")\n-                        .arg(&item.path)\n-                        .arg(\"--test\")\n-                        .output();\n-                    match output_result {\n-                        Ok(output) => {\n-                            if !output.status.success() {\n-                                term.err(&format!(\"{}\\n{}\",\n-                                         String::from_utf8_lossy(&output.stdout),\n-                                         String::from_utf8_lossy(&output.stderr)));\n-                                return Err(err(\"some tests failed\"));\n-                            }\n-\n-                        }\n-                        Err(e) => {\n-                            let message = format!(\"could not execute `rustdoc`: {}\", e);\n-                            return Err(err(&message))\n-                        }\n-                    }\n-                }\n-            }\n-            Err(errors) => {\n-                for err in errors {\n-                    term.err(&err[..]);\n-                }\n-                return Err(err(\"there was an error\"))\n-            }\n-        }\n-        Ok(()) // lol\n-    }\n-}"}, {"sha": "e1c44a20e97560b7da29d90eac4bfee2a5c6c78b", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025c328bf5ab336ff708e62a59292298dc1bc089/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=025c328bf5ab336ff708e62a59292298dc1bc089", "patch": "@@ -15,16 +15,38 @@ use std::io::Read;\n use std::path::Path;\n \n static LICENSES: &'static [&'static str] = &[\n-    \"MIT/Apache-2.0\"\n+    \"MIT/Apache-2.0\",\n+    \"Apache-2.0/MIT\",\n+    \"MIT OR Apache-2.0\",\n+    \"MIT\",\n+    \"Unlicense/MIT\",\n+];\n+\n+/// These MPL licensed projects are acceptable, but only these.\n+static EXCEPTIONS: &'static [&'static str] = &[\n+    \"mdbook\",\n+    \"pest\",\n+    \"thread-id\",\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let path = path.join(\"vendor\");\n     assert!(path.exists(), \"vendor directory missing\");\n     let mut saw_dir = false;\n-    for dir in t!(path.read_dir()) {\n+    'next_path: for dir in t!(path.read_dir()) {\n         saw_dir = true;\n         let dir = t!(dir);\n+\n+        // skip our exceptions\n+        for exception in EXCEPTIONS {\n+            if dir.path()\n+                .to_str()\n+                .unwrap()\n+                .contains(&format!(\"src/vendor/{}\", exception)) {\n+                continue 'next_path;\n+            }\n+        }\n+\n         let toml = dir.path().join(\"Cargo.toml\");\n         if !check_license(&toml) {\n             *bad = true;"}]}