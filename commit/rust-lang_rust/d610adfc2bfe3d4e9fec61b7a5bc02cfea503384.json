{"sha": "d610adfc2bfe3d4e9fec61b7a5bc02cfea503384", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTBhZGZjMmJmZTNkNGU5ZmVjNjFiN2E1YmMwMmNmZWE1MDMzODQ=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-04T01:03:17Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-04T01:03:17Z"}, "message": "Employ early return pattern more", "tree": {"sha": "2d736d94109f71e7a842c02d64ed811a258e352f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d736d94109f71e7a842c02d64ed811a258e352f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d610adfc2bfe3d4e9fec61b7a5bc02cfea503384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d610adfc2bfe3d4e9fec61b7a5bc02cfea503384", "html_url": "https://github.com/rust-lang/rust/commit/d610adfc2bfe3d4e9fec61b7a5bc02cfea503384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d610adfc2bfe3d4e9fec61b7a5bc02cfea503384/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4034ea9e4ebe2959327ddbf6c1d1e3103dd01f80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4034ea9e4ebe2959327ddbf6c1d1e3103dd01f80", "html_url": "https://github.com/rust-lang/rust/commit/4034ea9e4ebe2959327ddbf6c1d1e3103dd01f80"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "2c4cedd8b119d72b7147ad22e7dee2afd4a7a039", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d610adfc2bfe3d4e9fec61b7a5bc02cfea503384/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610adfc2bfe3d4e9fec61b7a5bc02cfea503384/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=d610adfc2bfe3d4e9fec61b7a5bc02cfea503384", "patch": "@@ -428,20 +428,18 @@ impl SourceAnalyzer {\n         let std_future_trait =\n             match self.resolver.resolve_path_segments(db, &std_future_path).into_fully_resolved() {\n                 PerNs { types: Some(Resolution::Def(ModuleDef::Trait(trait_))), .. } => {\n-                    Some(trait_)\n+                    trait_\n                 }\n-                _ => None,\n+                _ => return false,\n             };\n \n-        let krate = self.resolver.krate();\n-        if let Some(krate) = krate {\n-            if let Some(trait_) = std_future_trait {\n-                let canonical_ty = crate::ty::Canonical { value: ty, num_vars: 0 };\n-                return implements_trait(&canonical_ty, db, &self.resolver, krate, trait_);\n-            }\n-        }\n+        let krate = match self.resolver.krate() {\n+            Some(krate) => krate,\n+            _ => return false,\n+        };\n \n-        false\n+        let canonical_ty = crate::ty::Canonical { value: ty, num_vars: 0 };\n+        return implements_trait(&canonical_ty, db, &self.resolver, krate, std_future_trait);\n     }\n \n     #[cfg(test)]"}, {"sha": "d43ff2eeccec29de6a93eda5740710d405fa0658", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d610adfc2bfe3d4e9fec61b7a5bc02cfea503384/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d610adfc2bfe3d4e9fec61b7a5bc02cfea503384/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=d610adfc2bfe3d4e9fec61b7a5bc02cfea503384", "patch": "@@ -9,23 +9,27 @@ use rustc_hash::FxHashSet;\n \n /// Complete dot accesses, i.e. fields or methods (and .await syntax).\n pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n-    if let Some(dot_receiver) = &ctx.dot_receiver {\n-        let receiver_ty = ctx.analyzer.type_of(ctx.db, &dot_receiver);\n+    let dot_receiver = match &ctx.dot_receiver {\n+        Some(expr) => expr,\n+        _ => return,\n+    };\n \n-        if let Some(receiver_ty) = receiver_ty {\n-            if !ctx.is_call {\n-                complete_fields(acc, ctx, receiver_ty.clone());\n-            }\n-            complete_methods(acc, ctx, receiver_ty.clone());\n+    let receiver_ty = match ctx.analyzer.type_of(ctx.db, &dot_receiver) {\n+        Some(ty) => ty,\n+        _ => return,\n+    };\n \n-            // Suggest .await syntax for types that implement Future trait\n-            if ctx.analyzer.impls_future(ctx.db, receiver_ty) {\n-                CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\")\n-                    .detail(\"expr.await\")\n-                    .insert_text(\"await\")\n-                    .add_to(acc);\n-            }\n-        }\n+    if !ctx.is_call {\n+        complete_fields(acc, ctx, receiver_ty.clone());\n+    }\n+    complete_methods(acc, ctx, receiver_ty.clone());\n+\n+    // Suggest .await syntax for types that implement Future trait\n+    if ctx.analyzer.impls_future(ctx.db, receiver_ty) {\n+        CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\")\n+            .detail(\"expr.await\")\n+            .insert_text(\"await\")\n+            .add_to(acc);\n     }\n }\n "}]}