{"sha": "f5bea9051b81f3a490c08afdb336c63c9180aae0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YmVhOTA1MWI4MWYzYTQ5MGMwOGFmZGIzMzZjNjNjOTE4MGFhZTA=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-08-29T17:56:00Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-08-31T17:54:41Z"}, "message": "Support resolution of `#[macro_use] extern crate`", "tree": {"sha": "dca2027e759bbaeaa116b1cae828cd28d507f6e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca2027e759bbaeaa116b1cae828cd28d507f6e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5bea9051b81f3a490c08afdb336c63c9180aae0", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl1qtGEACgkQztOS3gxI\nPQBlqw/7BuyyDcEVyDFZAuwgw4LxTQ3v9QOgbtNwanMCHismu1FQALhghvRXyjPz\nWiXeplMTnaSyx9ZtT7iY76fmNjRz/rbPFPuTr1zOCn2HNB5vp6+1U13vDJ+TDV9n\n7qKDFpgWJ97IjccYGBgOm5mci7vHu+0toFYXjCp2ftnSGNb1ct2SiAViswbpR8MG\nnQwtWU62h9cvzRppPt+E5+zSXeGz1e8ZbyfpAQH8CF+IUP/ElqJwCCJQ0Y3PuRnD\nPRbYcBzor0VyPrWAR5O2mKtsAZHo+ja9HDZdcl4MjKk0OIMV7tFQtizP9NvOBtJV\nXMkUwADdvwYkTi+5oRKelGD4dDgEobAU1U1SK2+Jsg5uyqcBT0gkwelHOMq+e/20\njiXH9BZeMeJcdOMAUhfijZ/zBQzC37REdaObjbpAoPumefliIxpEV+kqrJH2QeZB\ndpG4gWx2/7Z0gNUQ+QaTZ99c6m8Cn7B0sQ+aJ2GOed4r3jvTgjLapuJU8JmYflQd\nPSK41Ikbu8o3my7vu/XxXLguwHjaJ1YFwsUAJL3IaJzt0wY8IGu78g4G8WfvxE+4\nP7vNguIPc1rgDc/jVX9GIhzOrdE0NOxE0VfpRlHw6u6yPtL/0OAMuPKKZi+3iDGO\n6wHwP8qxRx/jtXqkfgNG23ZqVAYtYk8nveptLIjF6y6+ySCF0Mo=\n=y7du\n-----END PGP SIGNATURE-----", "payload": "tree dca2027e759bbaeaa116b1cae828cd28d507f6e3\nparent f2a200c1ee8016f47b35e2e13a899fc96286a1eb\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1567101360 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1567274081 +0800\n\nSupport resolution of `#[macro_use] extern crate`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bea9051b81f3a490c08afdb336c63c9180aae0", "html_url": "https://github.com/rust-lang/rust/commit/f5bea9051b81f3a490c08afdb336c63c9180aae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5bea9051b81f3a490c08afdb336c63c9180aae0/comments", "author": null, "committer": null, "parents": [{"sha": "f2a200c1ee8016f47b35e2e13a899fc96286a1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a200c1ee8016f47b35e2e13a899fc96286a1eb", "html_url": "https://github.com/rust-lang/rust/commit/f2a200c1ee8016f47b35e2e13a899fc96286a1eb"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "26158b5c3d1498555f3346eab52116f2fdc1d1ab", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5bea9051b81f3a490c08afdb336c63c9180aae0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bea9051b81f3a490c08afdb336c63c9180aae0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=f5bea9051b81f3a490c08afdb336c63c9180aae0", "patch": "@@ -295,6 +295,23 @@ where\n                         }\n                     }\n \n+                    // `#[macro_use] extern crate` glob import macros\n+                    if import.is_extern_crate && import.is_macro_use {\n+                        if let Some(ModuleDef::Module(m)) =\n+                            def.a().and_then(|item| item.take_types())\n+                        {\n+                            let item_map = self.db.crate_def_map(m.krate);\n+                            let scope = &item_map[m.module_id].scope;\n+                            let macros = scope\n+                                .macros\n+                                .iter()\n+                                .map(|(name, res)| (name.clone(), Either::B(*res)))\n+                                .collect::<Vec<_>>();\n+\n+                            self.update(module_id, Some(import_id), &macros);\n+                        }\n+                    }\n+\n                     let resolution = match def {\n                         Either::A(item) => {\n                             Either::A(Resolution { def: item, import: Some(import_id) })"}, {"sha": "129b047eb5d1a5bf57f78ab0a414225d13459456", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f5bea9051b81f3a490c08afdb336c63c9180aae0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bea9051b81f3a490c08afdb336c63c9180aae0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=f5bea9051b81f3a490c08afdb336c63c9180aae0", "patch": "@@ -154,6 +154,7 @@ pub struct ImportData {\n     pub(super) is_glob: bool,\n     pub(super) is_prelude: bool,\n     pub(super) is_extern_crate: bool,\n+    pub(super) is_macro_use: bool,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -293,8 +294,14 @@ impl RawItemsCollector {\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n \n         Path::expand_use_item(&use_item, |path, use_tree, is_glob, alias| {\n-            let import_data =\n-                ImportData { path, alias, is_glob, is_prelude, is_extern_crate: false };\n+            let import_data = ImportData {\n+                path,\n+                alias,\n+                is_glob,\n+                is_prelude,\n+                is_extern_crate: false,\n+                is_macro_use: false,\n+            };\n             self.push_import(current_module, import_data, Either::A(AstPtr::new(use_tree)));\n         })\n     }\n@@ -307,12 +314,14 @@ impl RawItemsCollector {\n         if let Some(name_ref) = extern_crate.name_ref() {\n             let path = Path::from_name_ref(&name_ref);\n             let alias = extern_crate.alias().and_then(|a| a.name()).map(|it| it.as_name());\n+            let is_macro_use = extern_crate.has_atom_attr(\"macro_use\");\n             let import_data = ImportData {\n                 path,\n                 alias,\n                 is_glob: false,\n                 is_prelude: false,\n                 is_extern_crate: true,\n+                is_macro_use,\n             };\n             self.push_import(current_module, import_data, Either::B(AstPtr::new(&extern_crate)));\n         }"}, {"sha": "d161470e7d5853ef73555ea6d113a4b7cd7aabb0", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5bea9051b81f3a490c08afdb336c63c9180aae0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bea9051b81f3a490c08afdb336c63c9180aae0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=f5bea9051b81f3a490c08afdb336c63c9180aae0", "patch": "@@ -934,6 +934,7 @@ impl AstNode for ExternCrateItem {\n         &self.syntax\n     }\n }\n+impl ast::AttrsOwner for ExternCrateItem {}\n impl ExternCrateItem {\n     pub fn name_ref(&self) -> Option<NameRef> {\n         AstChildren::new(&self.syntax).next()"}, {"sha": "a07293a46140b41cf1622a7d3887b3876ae333bc", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5bea9051b81f3a490c08afdb336c63c9180aae0/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/f5bea9051b81f3a490c08afdb336c63c9180aae0/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=f5bea9051b81f3a490c08afdb336c63c9180aae0", "patch": "@@ -669,6 +669,7 @@ Grammar(\n             collections: [(\"use_trees\", \"UseTree\")]\n         ),\n         \"ExternCrateItem\": (\n+            traits: [\"AttrsOwner\"],\n             options: [\"NameRef\", \"Alias\"],\n         ),\n         \"ArgList\": ("}]}