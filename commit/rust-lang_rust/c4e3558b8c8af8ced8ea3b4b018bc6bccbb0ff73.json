{"sha": "c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZTM1NThiOGM4YWY4Y2VkOGVhM2I0YjAxOGJjNmJjY2JiMGZmNzM=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-09T08:15:53Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-09T08:39:20Z"}, "message": "Rename HIR UnOp variants\n\nThis renames the variants in HIR UnOp from\n\n    enum UnOp {\n        UnDeref,\n        UnNot,\n        UnNeg,\n    }\n\nto\n\n    enum UnOp {\n        Deref,\n        Not,\n        Neg,\n    }\n\nMotivations:\n\n- This is more consistent with the rest of the code base where most enum\n  variants don't have a prefix.\n\n- These variants are never used without the `UnOp` prefix so the extra\n  `Un` prefix doesn't help with readability. E.g. we don't have any\n  `UnDeref`s in the code, we only have `UnOp::UnDeref`.\n\n- MIR `UnOp` type variants don't have a prefix so this is more\n  consistent with MIR types.\n\n- \"un\" prefix reads like \"inverse\" or \"reverse\", so as a beginner in\n  rustc code base when I see \"UnDeref\" what comes to my mind is\n  something like \"&*\" instead of just \"*\".", "tree": {"sha": "7adabb5773fae255e56688e8bb3b5b3028e48955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7adabb5773fae255e56688e8bb3b5b3028e48955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "html_url": "https://github.com/rust-lang/rust/commit/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36931ce3d90e1927e8589d973cc8d18103ede460", "url": "https://api.github.com/repos/rust-lang/rust/commits/36931ce3d90e1927e8589d973cc8d18103ede460", "html_url": "https://github.com/rust-lang/rust/commit/36931ce3d90e1927e8589d973cc8d18103ede460"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "b118c0eaed4f3245dc04edb2322a72fff27edf4c", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -260,9 +260,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_unop(&mut self, u: UnOp) -> hir::UnOp {\n         match u {\n-            UnOp::Deref => hir::UnOp::UnDeref,\n-            UnOp::Not => hir::UnOp::UnNot,\n-            UnOp::Neg => hir::UnOp::UnNeg,\n+            UnOp::Deref => hir::UnOp::Deref,\n+            UnOp::Not => hir::UnOp::Not,\n+            UnOp::Neg => hir::UnOp::Neg,\n         }\n     }\n "}, {"sha": "9609510d0af6ba2baf28ee2a342fed1cffff0e36", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -1112,25 +1112,25 @@ pub type BinOp = Spanned<BinOpKind>;\n #[derive(Copy, Clone, PartialEq, Encodable, Debug, HashStable_Generic)]\n pub enum UnOp {\n     /// The `*` operator (deferencing).\n-    UnDeref,\n+    Deref,\n     /// The `!` operator (logical negation).\n-    UnNot,\n+    Not,\n     /// The `-` operator (negation).\n-    UnNeg,\n+    Neg,\n }\n \n impl UnOp {\n     pub fn as_str(self) -> &'static str {\n         match self {\n-            Self::UnDeref => \"*\",\n-            Self::UnNot => \"!\",\n-            Self::UnNeg => \"-\",\n+            Self::Deref => \"*\",\n+            Self::Not => \"!\",\n+            Self::Neg => \"-\",\n         }\n     }\n \n     /// Returns `true` if the unary operator takes its argument by value.\n     pub fn is_by_value(self) -> bool {\n-        matches!(self, Self::UnNeg | Self::UnNot)\n+        matches!(self, Self::Neg | Self::Not)\n     }\n }\n \n@@ -1477,7 +1477,7 @@ impl Expr<'_> {\n             // https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md#type-ascription-and-temporaries\n             ExprKind::Type(ref e, _) => e.is_place_expr(allow_projections_from),\n \n-            ExprKind::Unary(UnOp::UnDeref, _) => true,\n+            ExprKind::Unary(UnOp::Deref, _) => true,\n \n             ExprKind::Field(ref base, _) | ExprKind::Index(ref base, _) => {\n                 allow_projections_from(base) || base.is_place_expr(allow_projections_from)"}, {"sha": "784b36c2837b701537318e39b0c4ae47ac208a1f", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -472,7 +472,7 @@ fn lint_literal<'tcx>(\n impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx hir::Expr<'tcx>) {\n         match e.kind {\n-            hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n+            hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => {\n                 // propagate negation, if the negation itself isn't negated\n                 if self.negated_expr_id != Some(e.hir_id) {\n                     self.negated_expr_id = Some(expr.hir_id);"}, {"sha": "ed953b981130a3de0e841dd243915fb08a87969a", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> Const<'tcx> {\n \n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),\n-            hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => match expr.kind {\n+            hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => match expr.kind {\n                 hir::ExprKind::Lit(ref lit) => {\n                     Some(LitToConstInput { lit: &lit.node, ty, neg: true })\n                 }"}, {"sha": "620ce360e7d9122d8a64bc08257f8b0ad12952f2", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -299,23 +299,23 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             }\n         }\n \n-        hir::ExprKind::Unary(hir::UnOp::UnDeref, ref arg) => {\n+        hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {\n             if cx.typeck_results().is_method_call(expr) {\n                 overloaded_place(cx, expr, expr_ty, None, vec![arg.to_ref()], expr.span)\n             } else {\n                 ExprKind::Deref { arg: arg.to_ref() }\n             }\n         }\n \n-        hir::ExprKind::Unary(hir::UnOp::UnNot, ref arg) => {\n+        hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {\n             if cx.typeck_results().is_method_call(expr) {\n                 overloaded_operator(cx, expr, vec![arg.to_ref()])\n             } else {\n                 ExprKind::Unary { op: UnOp::Not, arg: arg.to_ref() }\n             }\n         }\n \n-        hir::ExprKind::Unary(hir::UnOp::UnNeg, ref arg) => {\n+        hir::ExprKind::Unary(hir::UnOp::Neg, ref arg) => {\n             if cx.typeck_results().is_method_call(expr) {\n                 overloaded_operator(cx, expr, vec![arg.to_ref()])\n             } else if let hir::ExprKind::Lit(ref lit) = arg.kind {"}, {"sha": "6e29e60b3034dfdd971b45a59559129c5c453846", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -866,7 +866,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     return *self.const_to_pat(value, expr.hir_id, expr.span, false).kind;\n                 }\n                 hir::ExprKind::Lit(ref lit) => (lit, false),\n-                hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n+                hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => {\n                     let lit = match expr.kind {\n                         hir::ExprKind::Lit(ref lit) => lit,\n                         _ => span_bug!(expr.span, \"not a literal: {:?}\", expr),"}, {"sha": "b532021bed2e9ad03b978c222355bbcab0b46319", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -664,7 +664,7 @@ fn resolve_local<'tcx>(\n \n             match expr.kind {\n                 hir::ExprKind::AddrOf(_, _, ref subexpr)\n-                | hir::ExprKind::Unary(hir::UnOp::UnDeref, ref subexpr)\n+                | hir::ExprKind::Unary(hir::UnOp::Deref, ref subexpr)\n                 | hir::ExprKind::Field(ref subexpr, _)\n                 | hir::ExprKind::Index(ref subexpr, _) => {\n                     expr = &subexpr;"}, {"sha": "8d2004a543b7b1b151f6a088a370f6b010aa32d5", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -773,7 +773,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let hir::ExprKind::Lit(lit) = &expr.kind { lit.node.is_suffixed() } else { false }\n         };\n         let is_negative_int =\n-            |expr: &hir::Expr<'_>| matches!(expr.kind, hir::ExprKind::Unary(hir::UnOp::UnNeg, ..));\n+            |expr: &hir::Expr<'_>| matches!(expr.kind, hir::ExprKind::Unary(hir::UnOp::Neg, ..));\n         let is_uint = |ty: Ty<'_>| matches!(ty.kind(), ty::Uint(..));\n \n         let in_const_context = self.tcx.hir().is_inside_const_context(expr.hir_id);"}, {"sha": "b7b4fb0648b1e6744a72d010d4b5d9476ff51eeb", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -323,15 +323,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let expected_inner = match unop {\n-            hir::UnOp::UnNot | hir::UnOp::UnNeg => expected,\n-            hir::UnOp::UnDeref => NoExpectation,\n+            hir::UnOp::Not | hir::UnOp::Neg => expected,\n+            hir::UnOp::Deref => NoExpectation,\n         };\n         let mut oprnd_t = self.check_expr_with_expectation(&oprnd, expected_inner);\n \n         if !oprnd_t.references_error() {\n             oprnd_t = self.structurally_resolved_type(expr.span, oprnd_t);\n             match unop {\n-                hir::UnOp::UnDeref => {\n+                hir::UnOp::Deref => {\n                     if let Some(ty) = self.lookup_derefing(expr, oprnd, oprnd_t) {\n                         oprnd_t = ty;\n                     } else {\n@@ -353,14 +353,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         oprnd_t = tcx.ty_error();\n                     }\n                 }\n-                hir::UnOp::UnNot => {\n+                hir::UnOp::Not => {\n                     let result = self.check_user_unop(expr, oprnd_t, unop);\n                     // If it's builtin, we can reuse the type, this helps inference.\n                     if !(oprnd_t.is_integral() || *oprnd_t.kind() == ty::Bool) {\n                         oprnd_t = result;\n                     }\n                 }\n-                hir::UnOp::UnNeg => {\n+                hir::UnOp::Neg => {\n                     let result = self.check_user_unop(expr, oprnd_t, unop);\n                     // If it's builtin, we can reuse the type, this helps inference.\n                     if !oprnd_t.is_numeric() {"}, {"sha": "567cb1a90d0d9d9ee8d216449f866adf685f355e", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -681,7 +681,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         format!(\"cannot apply unary operator `{}`\", op.as_str()),\n                     );\n                     match actual.kind() {\n-                        Uint(_) if op == hir::UnOp::UnNeg => {\n+                        Uint(_) if op == hir::UnOp::Neg => {\n                             err.note(\"unsigned values cannot be negated\");\n \n                             if let hir::ExprKind::Unary(\n@@ -711,9 +711,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Ref(_, ref lty, _) if *lty.kind() == Str => {}\n                         _ => {\n                             let missing_trait = match op {\n-                                hir::UnOp::UnNeg => \"std::ops::Neg\",\n-                                hir::UnOp::UnNot => \"std::ops::Not\",\n-                                hir::UnOp::UnDeref => \"std::ops::UnDerf\",\n+                                hir::UnOp::Neg => \"std::ops::Neg\",\n+                                hir::UnOp::Not => \"std::ops::Not\",\n+                                hir::UnOp::Deref => \"std::ops::UnDerf\",\n                             };\n                             suggest_impl_missing(&mut err, operand_ty, &missing_trait);\n                         }\n@@ -782,9 +782,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     span_bug!(span, \"&& and || are not overloadable\")\n                 }\n             }\n-        } else if let Op::Unary(hir::UnOp::UnNot, _) = op {\n+        } else if let Op::Unary(hir::UnOp::Not, _) = op {\n             (sym::not, lang.not_trait())\n-        } else if let Op::Unary(hir::UnOp::UnNeg, _) = op {\n+        } else if let Op::Unary(hir::UnOp::Neg, _) = op {\n             (sym::neg, lang.neg_trait())\n         } else {\n             bug!(\"lookup_op_method: op not supported: {:?}\", op)"}, {"sha": "254e41706f90b72c01e2b7e97a2be86d2e55e057", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         while let hir::ExprKind::Field(ref expr, _)\n         | hir::ExprKind::Index(ref expr, _)\n-        | hir::ExprKind::Unary(hir::UnOp::UnDeref, ref expr) = exprs.last().unwrap().kind\n+        | hir::ExprKind::Unary(hir::UnOp::Deref, ref expr) = exprs.last().unwrap().kind\n         {\n             exprs.push(&expr);\n         }\n@@ -216,7 +216,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             debug!(\"convert_place_derefs_to_mutable: i={} expr={:?}\", i, expr);\n \n             let mut source = self.node_ty(expr.hir_id);\n-            if matches!(expr.kind, hir::ExprKind::Unary(hir::UnOp::UnDeref, _)) {\n+            if matches!(expr.kind, hir::ExprKind::Unary(hir::UnOp::Deref, _)) {\n                 // Clear previous flag; after a pointer indirection it does not apply any more.\n                 inside_union = false;\n             }\n@@ -270,7 +270,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir::ExprKind::Index(ref base_expr, ..) => {\n                     self.convert_place_op_to_mutable(PlaceOp::Index, expr, base_expr);\n                 }\n-                hir::ExprKind::Unary(hir::UnOp::UnDeref, ref base_expr) => {\n+                hir::ExprKind::Unary(hir::UnOp::Deref, ref base_expr) => {\n                     self.convert_place_op_to_mutable(PlaceOp::Deref, expr, base_expr);\n                 }\n                 _ => {}"}, {"sha": "4f785982150779e0ecc12862f3ed75a665b90066", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -138,7 +138,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     // operating on scalars, we clear the overload.\n     fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {\n         match e.kind {\n-            hir::ExprKind::Unary(hir::UnOp::UnNeg | hir::UnOp::UnNot, ref inner) => {\n+            hir::ExprKind::Unary(hir::UnOp::Neg | hir::UnOp::Not, ref inner) => {\n                 let inner_ty = self.fcx.node_ty(inner.hir_id);\n                 let inner_ty = self.fcx.resolve_vars_if_possible(inner_ty);\n "}, {"sha": "52110af47929e4edfc5cd18f6c48f412bcc4bb67", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n             hir::ExprKind::Type(ref subexpr, _) => self.walk_expr(subexpr),\n \n-            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref base) => {\n+            hir::ExprKind::Unary(hir::UnOp::Deref, ref base) => {\n                 // *base\n                 self.select_from_expr(base);\n             }"}, {"sha": "14af11097cf8b8dc05fa3abc8c65b1ad88afa893", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n         let expr_ty = self.expr_ty(expr)?;\n         match expr.kind {\n-            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref e_base) => {\n+            hir::ExprKind::Unary(hir::UnOp::Deref, ref e_base) => {\n                 if self.typeck_results.is_method_call(expr) {\n                     self.cat_overloaded_place(expr, e_base)\n                 } else {"}, {"sha": "8f005be7cf78999d4f49de1d775b5ec497f0235f", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -316,7 +316,7 @@ crate fn is_literal_expr(cx: &DocContext<'_>, hir_id: hir::HirId) -> bool {\n             return true;\n         }\n \n-        if let hir::ExprKind::Unary(hir::UnOp::UnNeg, expr) = &expr.kind {\n+        if let hir::ExprKind::Unary(hir::UnOp::Neg, expr) = &expr.kind {\n             if let hir::ExprKind::Lit(_) = &expr.kind {\n                 return true;\n             }"}, {"sha": "61fdf9495b918c6b44f8ca72a8b2833a9a27e482", "filename": "src/tools/clippy/clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Farithmetic.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n                     match op.node {\n                         hir::BinOpKind::Div | hir::BinOpKind::Rem => match &r.kind {\n                             hir::ExprKind::Lit(_lit) => (),\n-                            hir::ExprKind::Unary(hir::UnOp::UnNeg, expr) => {\n+                            hir::ExprKind::Unary(hir::UnOp::Neg, expr) => {\n                                 if let hir::ExprKind::Lit(lit) = &expr.kind {\n                                     if let rustc_ast::ast::LitKind::Int(1, _) = lit.node {\n                                         span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n                     self.expr_span = Some(expr.span);\n                 }\n             },\n-            hir::ExprKind::Unary(hir::UnOp::UnNeg, arg) => {\n+            hir::ExprKind::Unary(hir::UnOp::Neg, arg) => {\n                 let ty = cx.typeck_results().expr_ty(arg);\n                 if constant_simple(cx, cx.typeck_results(), expr).is_none() {\n                     if ty.is_integral() {"}, {"sha": "77b26faaa586a35ce74bf5c7757f61453a26feb2", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -112,7 +112,7 @@ enum AssertKind {\n fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<AssertKind> {\n     if_chain! {\n         if let ExprKind::If(ref cond, ref then, _) = expr.kind;\n-        if let ExprKind::Unary(UnOp::UnNot, ref expr) = cond.kind;\n+        if let ExprKind::Unary(UnOp::Not, ref expr) = cond.kind;\n         // bind the first argument of the `assert!` macro\n         if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.typeck_results(), expr);\n         // block"}, {"sha": "0713303ec4b672c0190d8a8f2031060b0dceefb5", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         // prevent folding of `cfg!` macros and the like\n         if !e.span.from_expansion() {\n             match &e.kind {\n-                ExprKind::Unary(UnOp::UnNot, inner) => return Ok(Bool::Not(box self.run(inner)?)),\n+                ExprKind::Unary(UnOp::Not, inner) => return Ok(Bool::Not(box self.run(inner)?)),\n                 ExprKind::Binary(binop, lhs, rhs) => match &binop.node {\n                     BinOpKind::Or => {\n                         return Ok(Bool::Or(self.extract(BinOpKind::Or, &[lhs, rhs], Vec::new())?));\n@@ -454,7 +454,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n             ExprKind::Binary(binop, _, _) if binop.node == BinOpKind::Or || binop.node == BinOpKind::And => {\n                 self.bool_expr(e)\n             },\n-            ExprKind::Unary(UnOp::UnNot, inner) => {\n+            ExprKind::Unary(UnOp::Not, inner) => {\n                 if self.cx.typeck_results().node_types()[inner.hir_id].is_bool() {\n                     self.bool_expr(e);\n                 } else {\n@@ -482,7 +482,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Unary(UnOp::UnNot, inner) = &expr.kind {\n+        if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind {\n             if let Some(suggestion) = simplify_not(self.cx, inner) {\n                 span_lint_and_sugg(\n                     self.cx,"}, {"sha": "b8828719f627c8ecb45d15aa3a3cbcbae9c5cdaf", "filename": "src/tools/clippy/clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -101,7 +101,7 @@ fn check_arg(name: Symbol, arg: Symbol, needle: &Expr<'_>) -> bool {\n \n fn get_path_name(expr: &Expr<'_>) -> Option<Symbol> {\n     match expr.kind {\n-        ExprKind::Box(ref e) | ExprKind::AddrOf(BorrowKind::Ref, _, ref e) | ExprKind::Unary(UnOp::UnDeref, ref e) => {\n+        ExprKind::Box(ref e) | ExprKind::AddrOf(BorrowKind::Ref, _, ref e) | ExprKind::Unary(UnOp::Deref, ref e) => {\n             get_path_name(e)\n         },\n         ExprKind::Block(ref b, _) => {"}, {"sha": "b83aae0e5719cad9fb15357f8cfc68b0fe501b42", "filename": "src/tools/clippy/clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -186,7 +186,7 @@ fn addr_adjusted_binding(mut expr: &Expr<'_>, cx: &LateContext<'_>) -> Option<Hi\n                 Res::Local(binding_id) => break Some(binding_id),\n                 _ => break None,\n             },\n-            ExprKind::Unary(UnOp::UnDeref, e) if cx.typeck_results().expr_ty(e).is_ref() => expr = e,\n+            ExprKind::Unary(UnOp::Deref, e) if cx.typeck_results().expr_ty(e).is_ref() => expr = e,\n             _ => break None,\n         }\n     }"}, {"sha": "1b89d0bbe3862cebfee0e5a7c071f35fcef8997e", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -242,9 +242,9 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 self.expr(value).map(|v| Constant::Repeat(Box::new(v), n))\n             },\n             ExprKind::Unary(op, ref operand) => self.expr(operand).and_then(|o| match op {\n-                UnOp::UnNot => self.constant_not(&o, self.typeck_results.expr_ty(e)),\n-                UnOp::UnNeg => self.constant_negate(&o, self.typeck_results.expr_ty(e)),\n-                UnOp::UnDeref => Some(if let Constant::Ref(r) = o { *r } else { o }),\n+                UnOp::Not => self.constant_not(&o, self.typeck_results.expr_ty(e)),\n+                UnOp::Neg => self.constant_negate(&o, self.typeck_results.expr_ty(e)),\n+                UnOp::Deref => Some(if let Constant::Ref(r) = o { *r } else { o }),\n             }),\n             ExprKind::If(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, *otherwise),\n             ExprKind::Binary(op, ref left, ref right) => self.binop(op, left, right),"}, {"sha": "6b9f9a56754814a46575b754b3d7ae6bba8cfbd1", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -55,7 +55,7 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::If(ref check, ref then_block, ref else_block) = expr.kind {\n-            if let ExprKind::Unary(UnOp::UnNot, ref check) = check.kind {\n+            if let ExprKind::Unary(UnOp::Not, ref check) = check.kind {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`\n                     // we can give a better error message"}, {"sha": "086a791520fa8ec351ba4152d9089ab253f9c7c9", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -129,7 +129,7 @@ fn get_specialized_log_method(cx: &LateContext<'_>, base: &Expr<'_>) -> Option<&\n fn prepare_receiver_sugg<'a>(cx: &LateContext<'_>, mut expr: &'a Expr<'a>) -> Sugg<'a> {\n     let mut suggestion = Sugg::hir(cx, expr, \"..\");\n \n-    if let ExprKind::Unary(UnOp::UnNeg, inner_expr) = &expr.kind {\n+    if let ExprKind::Unary(UnOp::Neg, inner_expr) = &expr.kind {\n         expr = &inner_expr;\n     }\n \n@@ -541,12 +541,12 @@ fn is_zero(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n /// If the two expressions are not negations of each other, then it\n /// returns None.\n fn are_negated<'a>(cx: &LateContext<'_>, expr1: &'a Expr<'a>, expr2: &'a Expr<'a>) -> Option<(bool, &'a Expr<'a>)> {\n-    if let ExprKind::Unary(UnOp::UnNeg, expr1_negated) = &expr1.kind {\n+    if let ExprKind::Unary(UnOp::Neg, expr1_negated) = &expr1.kind {\n         if eq_expr_value(cx, expr1_negated, expr2) {\n             return Some((false, expr2));\n         }\n     }\n-    if let ExprKind::Unary(UnOp::UnNeg, expr2_negated) = &expr2.kind {\n+    if let ExprKind::Unary(UnOp::Neg, expr2_negated) = &expr2.kind {\n         if eq_expr_value(cx, expr1, expr2_negated) {\n             return Some((true, expr1));\n         }"}, {"sha": "71a146cc29805a93c08b5a5f6019fa5ce29a3587", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -644,7 +644,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n                     }\n                 }\n             },\n-            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref ptr) => self.check_arg(ptr),\n+            hir::ExprKind::Unary(hir::UnOp::Deref, ref ptr) => self.check_arg(ptr),\n             _ => (),\n         }\n "}, {"sha": "bd0be88028904a6d1bbad626b78a3ba5e8451b52", "filename": "src/tools/clippy/clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n                     },\n                     hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n                         match closure_expr.kind {\n-                            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n+                            hir::ExprKind::Unary(hir::UnOp::Deref, ref inner) => {\n                                 if ident_eq(name, inner) {\n                                     if let ty::Ref(.., Mutability::Not) = cx.typeck_results().expr_ty(inner).kind() {\n                                         lint(cx, e.span, args[0].span, true);"}, {"sha": "eaa604c2ae63eef88b25330b9bbc2942376df10b", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -148,7 +148,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n     }\n \n     if ty.is_signed() {\n-        if let hir::ExprKind::Unary(hir::UnOp::UnNeg, val) = &expr.kind {\n+        if let hir::ExprKind::Unary(hir::UnOp::Neg, val) = &expr.kind {\n             return check_lit(val, true);\n         }\n     }\n@@ -163,7 +163,7 @@ enum Sign {\n }\n \n fn lit_sign(expr: &hir::Expr<'_>) -> Option<Sign> {\n-    if let hir::ExprKind::Unary(hir::UnOp::UnNeg, inner) = &expr.kind {\n+    if let hir::ExprKind::Unary(hir::UnOp::Neg, inner) = &expr.kind {\n         if let hir::ExprKind::Lit(..) = &inner.kind {\n             return Some(Sign::Neg);\n         }"}, {"sha": "0918843294d479ac10a90779b5948d5bb4ad4622", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -2619,7 +2619,7 @@ fn lint_get_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, get_args:\n     if_chain! {\n         if needs_ref;\n         if let Some(parent) = get_parent_expr(cx, expr);\n-        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, _) = parent.kind;\n+        if let hir::ExprKind::Unary(hir::UnOp::Deref, _) = parent.kind;\n         then {\n             needs_ref = false;\n             span = parent.span;\n@@ -3063,7 +3063,7 @@ fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, is_f\n             // in `filter(|x| ..)`, replace `*x` with `x`\n             let a_path = if_chain! {\n                 if !is_filter_param_ref;\n-                if let ExprKind::Unary(UnOp::UnDeref, expr_path) = a.kind;\n+                if let ExprKind::Unary(UnOp::Deref, expr_path) = a.kind;\n                 then { expr_path } else { a }\n             };\n             // let the filter closure arg and the map closure arg be equal\n@@ -3708,8 +3708,8 @@ fn lint_option_as_ref_deref<'tcx>(\n                 },\n                 hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref inner) if same_mutability(m) => {\n                     if_chain! {\n-                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner1) = inner.kind;\n-                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner2) = inner1.kind;\n+                        if let hir::ExprKind::Unary(hir::UnOp::Deref, ref inner1) = inner.kind;\n+                        if let hir::ExprKind::Unary(hir::UnOp::Deref, ref inner2) = inner1.kind;\n                         if let hir::ExprKind::Path(ref qpath) = inner2.kind;\n                         if let hir::def::Res::Local(local_id) = cx.qpath_res(qpath, inner2.hir_id);\n                         then {\n@@ -4065,7 +4065,7 @@ fn lint_filetype_is_file(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n         if let hir::ExprKind::Unary(op, _) = parent.kind;\n-        if op == hir::UnOp::UnNot;\n+        if op == hir::UnOp::Not;\n         then {\n             lint_unary = \"!\";\n             verb = \"denies\";"}, {"sha": "2ef5c6aa2a4e2a8b39c2d8e38a622a7c2f5c4ec4", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -502,7 +502,7 @@ fn is_allowed<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n // Return true if `expr` is the result of `signum()` invoked on a float value.\n fn is_signum(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     // The negation of a signum is still a signum\n-    if let ExprKind::Unary(UnOp::UnNeg, ref child_expr) = expr.kind {\n+    if let ExprKind::Unary(UnOp::Neg, ref child_expr) = expr.kind {\n         return is_signum(cx, &child_expr);\n     }\n \n@@ -586,7 +586,7 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n         return;\n     }\n \n-    let other_gets_derefed = matches!(other.kind, ExprKind::Unary(UnOp::UnDeref, _));\n+    let other_gets_derefed = matches!(other.kind, ExprKind::Unary(UnOp::Deref, _));\n \n     let lint_span = if other_gets_derefed {\n         expr.span.to(other.span)"}, {"sha": "f283ff1715fb667df833c98cebc41039603d04ee", "filename": "src/tools/clippy/clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bool.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -195,7 +195,7 @@ struct ExpressionInfoWithSpan {\n }\n \n fn is_unary_not(e: &Expr<'_>) -> (bool, Span) {\n-    if let ExprKind::Unary(UnOp::UnNot, operand) = e.kind {\n+    if let ExprKind::Unary(UnOp::Not, operand) = e.kind {\n         return (true, operand.span);\n     }\n     (false, e.span)"}, {"sha": "ec0ad58ca9c3e9558a726b2ce9bad59b00b5e46f", "filename": "src/tools/clippy/clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n         if_chain! {\n \n             if !in_external_macro(cx.sess(), expr.span);\n-            if let ExprKind::Unary(UnOp::UnNot, ref inner) = expr.kind;\n+            if let ExprKind::Unary(UnOp::Not, ref inner) = expr.kind;\n             if let ExprKind::Binary(ref op, ref left, _) = inner.kind;\n             if let BinOpKind::Le | BinOpKind::Ge | BinOpKind::Lt | BinOpKind::Gt = op.node;\n "}, {"sha": "ef7cc65cfcf0a36fe3416a70fd35e5aa07bd9b7d", "filename": "src/tools/clippy/clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -32,8 +32,8 @@ impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n             if BinOpKind::Mul == op.node {\n                 match (&left.kind, &right.kind) {\n                     (&ExprKind::Unary(..), &ExprKind::Unary(..)) => {},\n-                    (&ExprKind::Unary(UnOp::UnNeg, ref lit), _) => check_mul(cx, e.span, lit, right),\n-                    (_, &ExprKind::Unary(UnOp::UnNeg, ref lit)) => check_mul(cx, e.span, lit, left),\n+                    (&ExprKind::Unary(UnOp::Neg, ref lit), _) => check_mul(cx, e.span, lit, right),\n+                    (_, &ExprKind::Unary(UnOp::Neg, ref lit)) => check_mul(cx, e.span, lit, left),\n                     _ => {},\n                 }\n             }"}, {"sha": "0b2262d849076857ed43d883e3398904e837ff40", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -383,7 +383,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                             needs_check_adjustment = false;\n                             break;\n                         },\n-                        ExprKind::Unary(UnOp::UnDeref, _) => {\n+                        ExprKind::Unary(UnOp::Deref, _) => {\n                             // `*e` => desugared to `*Deref::deref(&e)`,\n                             // meaning `e` must be referenced.\n                             // no need to go further up since a method call is involved now."}, {"sha": "9ef0d267b0b20b49b691ae5bfdf49c637fb357c8", "filename": "src/tools/clippy/clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -181,7 +181,7 @@ fn detect_option_if_let_else<'tcx>(\n             };\n             let cond_expr = match &cond_expr.kind {\n                 // Pointer dereferencing happens automatically, so we can omit it in the suggestion\n-                ExprKind::Unary(UnOp::UnDeref, expr) | ExprKind::AddrOf(_, _, expr) => expr,\n+                ExprKind::Unary(UnOp::Deref, expr) | ExprKind::AddrOf(_, _, expr) => expr,\n                 _ => cond_expr,\n             };\n             Some(OptionIfLetElseOccurence {"}, {"sha": "32f6bc74642ca8c17e12ecd805184eceb1a21670", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -389,7 +389,7 @@ fn is_self_shadow(name: Symbol, expr: &Expr<'_>) -> bool {\n         ExprKind::Block(ref block, _) => {\n             block.stmts.is_empty() && block.expr.as_ref().map_or(false, |e| is_self_shadow(name, e))\n         },\n-        ExprKind::Unary(op, ref inner) => (UnOp::UnDeref == op) && is_self_shadow(name, inner),\n+        ExprKind::Unary(op, ref inner) => (UnOp::Deref == op) && is_self_shadow(name, inner),\n         ExprKind::Path(QPath::Resolved(_, ref path)) => path_eq_name(name, path),\n         _ => false,\n     }"}, {"sha": "0b7d08cb1645a11f74609a22009d6f87dc482ec4", "filename": "src/tools/clippy/clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -194,7 +194,7 @@ impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n-            | hir::ExprKind::Unary(hir::UnOp::UnNot | hir::UnOp::UnNeg, _)\n+            | hir::ExprKind::Unary(hir::UnOp::Not | hir::UnOp::Neg, _)\n             | hir::ExprKind::AssignOp(..) => self.nb_binops += 1,\n             _ => {},\n         }"}, {"sha": "dc938ed02383dc0513ddbd2ab87a2171723c5cdc", "filename": "src/tools/clippy/clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -586,7 +586,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             let mut expr = &args[0];\n                             let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n \n-                            if let ExprKind::Unary(UnOp::UnNeg, inner_expr) = &expr.kind {\n+                            if let ExprKind::Unary(UnOp::Neg, inner_expr) = &expr.kind {\n                                 expr = &inner_expr;\n                             }\n "}, {"sha": "58af5b12c37354dae49994486031f74ad7d1eac0", "filename": "src/tools/clippy/clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -1706,13 +1706,13 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n }\n \n fn is_unary_neg(expr: &Expr<'_>) -> bool {\n-    matches!(expr.kind, ExprKind::Unary(UnOp::UnNeg, _))\n+    matches!(expr.kind, ExprKind::Unary(UnOp::Neg, _))\n }\n \n fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n     match expr.kind {\n         ExprKind::Lit(ref lit) => Some(lit),\n-        ExprKind::Unary(UnOp::UnNeg, e) => {\n+        ExprKind::Unary(UnOp::Neg, e) => {\n             if let ExprKind::Lit(ref lit) = e.kind {\n                 Some(lit)\n             } else {\n@@ -2868,7 +2868,7 @@ declare_lint_pass!(RefToMut => [CAST_REF_TO_MUT]);\n impl<'tcx> LateLintPass<'tcx> for RefToMut {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::Unary(UnOp::UnDeref, e) = &expr.kind;\n+            if let ExprKind::Unary(UnOp::Deref, e) = &expr.kind;\n             if let ExprKind::Cast(e, t) = &e.kind;\n             if let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind;\n             if let ExprKind::Cast(e, t) = &e.kind;"}, {"sha": "2fb0463c5a6c250c646ceb5cdcd2e795f5c39df4", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -108,7 +108,7 @@ fn collect_unwrap_info<'tcx>(\n             },\n             _ => (),\n         }\n-    } else if let ExprKind::Unary(UnOp::UnNot, expr) = &expr.kind {\n+    } else if let ExprKind::Unary(UnOp::Not, expr) = &expr.kind {\n         return collect_unwrap_info(cx, expr, branch, !invert);\n     } else {\n         if_chain! {"}, {"sha": "145703d1bdc3fcb2d2d7a2a68355568de3dfd7f4", "filename": "src/tools/clippy/clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -243,7 +243,7 @@ pub fn extract_assert_macro_args<'tcx>(e: &'tcx Expr<'tcx>) -> Option<Vec<&'tcx\n                 // macros with unique arg: `{debug_}assert!` (e.g., `debug_assert!(some_condition)`)\n                 if_chain! {\n                     if let ExprKind::If(ref clause, _, _)  = matchexpr.kind;\n-                    if let ExprKind::Unary(UnOp::UnNot, condition) = clause.kind;\n+                    if let ExprKind::Unary(UnOp::Not, condition) = clause.kind;\n                     then {\n                         return Some(vec![condition]);\n                     }"}, {"sha": "ff3be590317ba1a9b5db1fc80624d7d268fe32fd", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -1001,7 +1001,7 @@ impl InterningDefinedSymbol {\n         // SymbolStr might be de-referenced: `&*symbol.as_str()`\n         let call = if_chain! {\n             if let ExprKind::AddrOf(_, _, e) = expr.kind;\n-            if let ExprKind::Unary(UnOp::UnDeref, e) = e.kind;\n+            if let ExprKind::Unary(UnOp::Deref, e) = e.kind;\n             then { e } else { expr }\n         };\n         if_chain! {"}, {"sha": "ae253a0487cb40083457f728c6255163168bc333", "filename": "src/tools/clippy/tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=c4e3558b8c8af8ced8ea3b4b018bc6bccbb0ff73", "patch": "@@ -117,7 +117,7 @@ impl Add for Bar {\n     type Output = Bar;\n \n     fn add(self, other: Self) -> Self {\n-        Bar(self.0 & !other.0) // OK: UnNot part of BiExpr as child node\n+        Bar(self.0 & !other.0) // OK: Not part of BiExpr as child node\n     }\n }\n \n@@ -126,7 +126,7 @@ impl Sub for Bar {\n \n     fn sub(self, other: Self) -> Self {\n         if self.0 <= other.0 {\n-            Bar(-(self.0 & other.0)) // OK: UnNeg part of BiExpr as parent node\n+            Bar(-(self.0 & other.0)) // OK: Neg part of BiExpr as parent node\n         } else {\n             Bar(0)\n         }"}]}