{"sha": "305177342fbc622c0b3cb148467bab4b9524c934", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNTE3NzM0MmZiYzYyMmMwYjNjYjE0ODQ2N2JhYjRiOTUyNGM5MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-25T08:31:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-25T08:31:20Z"}, "message": "Auto merge of #7453 - F3real:assume_function_calls_have_side_effect, r=flip1995\n\nDon't report function calls as unnecessary operation if used in array index\n\nAttempts to fix: #7412\n\nchangelog: Don't report function calls used in indexing as unnecessary operation. [`unnecessary_operation`]", "tree": {"sha": "d2dc931e2907059cdd5d85ed081176a58de5b5b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2dc931e2907059cdd5d85ed081176a58de5b5b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/305177342fbc622c0b3cb148467bab4b9524c934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/305177342fbc622c0b3cb148467bab4b9524c934", "html_url": "https://github.com/rust-lang/rust/commit/305177342fbc622c0b3cb148467bab4b9524c934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/305177342fbc622c0b3cb148467bab4b9524c934/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c6f3275695213ab60dbc2fd7c1fe139ac1b840", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c6f3275695213ab60dbc2fd7c1fe139ac1b840", "html_url": "https://github.com/rust-lang/rust/commit/87c6f3275695213ab60dbc2fd7c1fe139ac1b840"}, {"sha": "ede977cf3131caeaac71e36c32390ca3c5b4deda", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede977cf3131caeaac71e36c32390ca3c5b4deda", "html_url": "https://github.com/rust-lang/rust/commit/ede977cf3131caeaac71e36c32390ca3c5b4deda"}], "stats": {"total": 153, "additions": 94, "deletions": 59}, "files": [{"sha": "c5a5cde4b110fccbb874801a53cd72dcc9b2e747", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/305177342fbc622c0b3cb148467bab4b9524c934/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305177342fbc622c0b3cb148467bab4b9524c934/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=305177342fbc622c0b3cb148467bab4b9524c934", "patch": "@@ -96,28 +96,63 @@ impl<'tcx> LateLintPass<'tcx> for NoEffect {\n             if has_no_effect(cx, expr) {\n                 span_lint_hir(cx, NO_EFFECT, expr.hir_id, stmt.span, \"statement with no effect\");\n             } else if let Some(reduced) = reduce_expression(cx, expr) {\n-                let mut snippet = String::new();\n-                for e in reduced {\n+                for e in &reduced {\n                     if e.span.from_expansion() {\n                         return;\n                     }\n-                    if let Some(snip) = snippet_opt(cx, e.span) {\n-                        snippet.push_str(&snip);\n-                        snippet.push(';');\n-                    } else {\n-                        return;\n+                }\n+                if let ExprKind::Index(..) = &expr.kind {\n+                    let snippet;\n+                    if_chain! {\n+                        if let Some(arr) = snippet_opt(cx, reduced[0].span);\n+                        if let Some(func) = snippet_opt(cx, reduced[1].span);\n+                        then {\n+                            snippet = format!(\"assert!({}.len() > {});\", &arr, &func);\n+                        } else {\n+                            return;\n+                        }\n+                    }\n+                    span_lint_hir_and_then(\n+                        cx,\n+                        UNNECESSARY_OPERATION,\n+                        expr.hir_id,\n+                        stmt.span,\n+                        \"unnecessary operation\",\n+                        |diag| {\n+                            diag.span_suggestion(\n+                                stmt.span,\n+                                \"statement can be written as\",\n+                                snippet,\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        },\n+                    );\n+                } else {\n+                    let mut snippet = String::new();\n+                    for e in reduced {\n+                        if let Some(snip) = snippet_opt(cx, e.span) {\n+                            snippet.push_str(&snip);\n+                            snippet.push(';');\n+                        } else {\n+                            return;\n+                        }\n                     }\n+                    span_lint_hir_and_then(\n+                        cx,\n+                        UNNECESSARY_OPERATION,\n+                        expr.hir_id,\n+                        stmt.span,\n+                        \"unnecessary operation\",\n+                        |diag| {\n+                            diag.span_suggestion(\n+                                stmt.span,\n+                                \"statement can be reduced to\",\n+                                snippet,\n+                                Applicability::MachineApplicable,\n+                            );\n+                        },\n+                    );\n                 }\n-                span_lint_hir_and_then(\n-                    cx,\n-                    UNNECESSARY_OPERATION,\n-                    expr.hir_id,\n-                    stmt.span,\n-                    \"statement can be reduced\",\n-                    |diag| {\n-                        diag.span_suggestion(stmt.span, \"replace it with\", snippet, Applicability::MachineApplicable);\n-                    },\n-                );\n             }\n         }\n     }"}, {"sha": "bf0ec8deb3458bccdc65a4151a8237241f6a0626", "filename": "tests/ui/unnecessary_operation.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/305177342fbc622c0b3cb148467bab4b9524c934/tests%2Fui%2Funnecessary_operation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/305177342fbc622c0b3cb148467bab4b9524c934/tests%2Fui%2Funnecessary_operation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.fixed?ref=305177342fbc622c0b3cb148467bab4b9524c934", "patch": "@@ -62,10 +62,10 @@ fn main() {\n     get_number();\n     5;get_number();\n     42;get_number();\n-    [42, 55];get_usize();\n+    assert!([42, 55].len() > get_usize());\n     42;get_number();\n     get_number();\n-    [42; 55];get_usize();\n+    assert!([42; 55].len() > get_usize());\n     get_number();\n     String::from(\"blah\");\n "}, {"sha": "f66d08ecb8281bb9f5cd357b6482ebb8b9f9d714", "filename": "tests/ui/unnecessary_operation.stderr", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/305177342fbc622c0b3cb148467bab4b9524c934/tests%2Fui%2Funnecessary_operation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/305177342fbc622c0b3cb148467bab4b9524c934/tests%2Fui%2Funnecessary_operation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.stderr?ref=305177342fbc622c0b3cb148467bab4b9524c934", "patch": "@@ -1,128 +1,128 @@\n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:51:5\n    |\n LL |     Tuple(get_number());\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n    |\n    = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:52:5\n    |\n LL |     Struct { field: get_number() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:53:5\n    |\n LL |     Struct { ..get_struct() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_struct();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_struct();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:54:5\n    |\n LL |     Enum::Tuple(get_number());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:55:5\n    |\n LL |     Enum::Struct { field: get_number() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:56:5\n    |\n LL |     5 + get_number();\n-   |     ^^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n+   |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:57:5\n    |\n LL |     *&get_number();\n-   |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:58:5\n    |\n LL |     &get_number();\n-   |     ^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:59:5\n    |\n LL |     (5, 6, get_number());\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `5;6;get_number();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;6;get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:60:5\n    |\n LL |     box get_number();\n-   |     ^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:61:5\n    |\n LL |     get_number()..;\n-   |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:62:5\n    |\n LL |     ..get_number();\n-   |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:63:5\n    |\n LL |     5..get_number();\n-   |     ^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n+   |     ^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:64:5\n    |\n LL |     [42, get_number()];\n-   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:65:5\n    |\n LL |     [42, 55][get_usize()];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42, 55];get_usize();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42, 55].len() > get_usize());`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:66:5\n    |\n LL |     (42, get_number()).1;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:67:5\n    |\n LL |     [get_number(); 55];\n-   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:68:5\n    |\n LL |     [42; 55][get_usize()];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42; 55];get_usize();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42; 55].len() > get_usize());`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:69:5\n    |\n LL | /     {\n LL | |         get_number()\n LL | |     };\n-   | |______^ help: replace it with: `get_number();`\n+   | |______^ help: statement can be reduced to: `get_number();`\n \n-error: statement can be reduced\n+error: unnecessary operation\n   --> $DIR/unnecessary_operation.rs:72:5\n    |\n LL | /     FooString {\n LL | |         s: String::from(\"blah\"),\n LL | |     };\n-   | |______^ help: replace it with: `String::from(\"blah\");`\n+   | |______^ help: statement can be reduced to: `String::from(\"blah\");`\n \n error: aborting due to 20 previous errors\n "}]}