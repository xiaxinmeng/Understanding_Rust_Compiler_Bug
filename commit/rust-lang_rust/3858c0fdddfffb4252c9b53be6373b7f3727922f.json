{"sha": "3858c0fdddfffb4252c9b53be6373b7f3727922f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NThjMGZkZGRmZmZiNDI1MmM5YjUzYmU2MzczYjdmMzcyNzkyMmY=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-09T15:54:43Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-10T13:52:57Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>", "tree": {"sha": "8be2fc6ce10158ad09b6bf9b91543d8b2e0030f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8be2fc6ce10158ad09b6bf9b91543d8b2e0030f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3858c0fdddfffb4252c9b53be6373b7f3727922f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3858c0fdddfffb4252c9b53be6373b7f3727922f", "html_url": "https://github.com/rust-lang/rust/commit/3858c0fdddfffb4252c9b53be6373b7f3727922f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3858c0fdddfffb4252c9b53be6373b7f3727922f/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a640f2f3af4d7167720f97b24d0d8530e095aa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a640f2f3af4d7167720f97b24d0d8530e095aa6", "html_url": "https://github.com/rust-lang/rust/commit/3a640f2f3af4d7167720f97b24d0d8530e095aa6"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "d00c4f1f0d0a3c7dc10874ae52e3dcc00f3635d1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3858c0fdddfffb4252c9b53be6373b7f3727922f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3858c0fdddfffb4252c9b53be6373b7f3727922f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=3858c0fdddfffb4252c9b53be6373b7f3727922f", "patch": "@@ -305,26 +305,19 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 Res::Def(DefKind::AssocFn | DefKind::AssocConst, _) => {\n                     if ns != ValueNS {\n                         return Err(ResolutionFailure::WrongNamespace(res, ns).into());\n-                    } else {\n-                        // In case this is a trait item, skip the\n-                        // early return and try looking for the trait.\n                     }\n+                    // Fall through: In case this is a trait item, skip the\n+                    // early return and try looking for the trait.\n                 }\n                 Res::Def(DefKind::AssocTy, _) => {\n-                    if ns == ValueNS {\n+                    if ns != TypeNS {\n                         return Err(ResolutionFailure::WrongNamespace(res, ns).into());\n-                    } else {\n-                        // In case this is a trait item, skip the\n-                        // early return and try looking for the trait.\n                     }\n+                    // Fall through: In case this is a trait item, skip the\n+                    // early return and try looking for the trait.\n                 }\n                 Res::Def(DefKind::Variant, _) => {\n-                    if extra_fragment.is_some() {\n-                        return Err(ErrorKind::AnchorFailure(\n-                            AnchorFailure::RustdocAnchorConflict(res),\n-                        ));\n-                    }\n-                    return handle_variant(cx, res);\n+                    return handle_variant(cx, res, extra_fragment);\n                 }\n                 // Not a trait item; just return what we found.\n                 Res::PrimTy(ty) => {\n@@ -581,7 +574,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         current_item: &Option<String>,\n         extra_fragment: &Option<String>,\n     ) -> Option<Res> {\n-        // resolve can't be used for macro namespace\n+        // resolve() can't be used for macro namespace\n         let result = match ns {\n             Namespace::MacroNS => self.macro_resolve(path_str, module_id).map_err(ErrorKind::from),\n             Namespace::TypeNS | Namespace::ValueNS => self\n@@ -1946,9 +1939,13 @@ fn privacy_error(\n fn handle_variant(\n     cx: &DocContext<'_>,\n     res: Res,\n+    extra_fragment: &Option<String>,\n ) -> Result<(Res, Option<String>), ErrorKind<'static>> {\n     use rustc_middle::ty::DefIdTree;\n \n+    if extra_fragment.is_some() {\n+        return Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(res)));\n+    }\n     cx.tcx.parent(res.def_id()).map_or_else(\n         || Err(ResolutionFailure::NoParentItem.into()),\n         |parent| {\n@@ -1980,7 +1977,9 @@ const PRIMITIVES: &[(&str, Res)] = &[\n ];\n \n fn is_primitive(path_str: &str, ns: Namespace) -> Option<(&'static str, Res)> {\n-    if ns == TypeNS { PRIMITIVES.iter().find(|x| x.0 == path_str).copied() } else { None }\n+    is_bool_value(path_str, ns).or_else(|| {\n+        if ns == TypeNS { PRIMITIVES.iter().find(|x| x.0 == path_str).copied() } else { None }\n+    })\n }\n \n fn is_bool_value(path_str: &str, ns: Namespace) -> Option<(&'static str, Res)> {"}, {"sha": "f63435337cfbcaed8da4705a1b314460da85e75d", "filename": "src/test/rustdoc-ui/intra-links-ambiguity.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3858c0fdddfffb4252c9b53be6373b7f3727922f/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3858c0fdddfffb4252c9b53be6373b7f3727922f/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.rs?ref=3858c0fdddfffb4252c9b53be6373b7f3727922f", "patch": "@@ -34,3 +34,7 @@ pub mod foo {\n ///\n /// Ambiguous non-implied shortcut link [`foo::bar`]. //~ERROR `foo::bar`\n pub struct Docs {}\n+\n+/// [true] //~ ERROR `true` is both a module and a builtin type\n+/// [primitive@true]\n+pub mod r#true {}"}, {"sha": "21b92a9673755bbea2d24d516478d8f2628bc8ec", "filename": "src/test/rustdoc-ui/intra-links-ambiguity.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3858c0fdddfffb4252c9b53be6373b7f3727922f/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3858c0fdddfffb4252c9b53be6373b7f3727922f/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr?ref=3858c0fdddfffb4252c9b53be6373b7f3727922f", "patch": "@@ -82,5 +82,20 @@ help: to link to the function, add parentheses\n LL | /// Ambiguous non-implied shortcut link [`foo::bar()`].\n    |                                          ^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: `true` is both a module and a builtin type\n+  --> $DIR/intra-links-ambiguity.rs:38:6\n+   |\n+LL | /// [true]\n+   |      ^^^^ ambiguous link\n+   |\n+help: to link to the module, prefix with `mod@`\n+   |\n+LL | /// [mod@true]\n+   |      ^^^^^^^^\n+help: to link to the builtin type, prefix with `prim@`\n+   |\n+LL | /// [prim@true]\n+   |      ^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}]}