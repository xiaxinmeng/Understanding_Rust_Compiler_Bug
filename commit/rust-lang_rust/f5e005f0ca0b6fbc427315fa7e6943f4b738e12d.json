{"sha": "f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "node_id": "C_kwDOAAsO6NoAKGY1ZTAwNWYwY2EwYjZmYmM0MjczMTVmYTdlNjk0M2Y0YjczOGUxMmQ", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-26T10:42:27Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-27T10:24:27Z"}, "message": "session: disable internal lints for rustdoc\n\nIf an internal lint uses `typeck_results` or similar queries then that\ncan result in rustdoc checking code that it shouldn't (e.g. from other\nplatforms) and emit compilation errors.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "de0cf7876605a8ee27d3c04ed92cd15d3a3baf76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0cf7876605a8ee27d3c04ed92cd15d3a3baf76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "html_url": "https://github.com/rust-lang/rust/commit/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8e4b9391550147683c6cbec91faa95289a5827", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8e4b9391550147683c6cbec91faa95289a5827", "html_url": "https://github.com/rust-lang/rust/commit/1b8e4b9391550147683c6cbec91faa95289a5827"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "b6e36ee39d551a4ff1f89b9fcdc1c27826951c6a", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "patch": "@@ -249,7 +249,7 @@ fn run_compiler(\n                     if sopts.describe_lints {\n                         let mut lint_store = rustc_lint::new_lint_store(\n                             sopts.unstable_opts.no_interleave_lints,\n-                            compiler.session().unstable_options(),\n+                            compiler.session().enable_internal_lints(),\n                         );\n                         let registered_lints =\n                             if let Some(register_lints) = compiler.register_lints() {"}, {"sha": "8f0835917861acb41b5d2ce2cfc7f9039e6b0848", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "patch": "@@ -210,7 +210,7 @@ pub fn register_plugins<'a>(\n \n     let mut lint_store = rustc_lint::new_lint_store(\n         sess.opts.unstable_opts.no_interleave_lints,\n-        sess.unstable_options(),\n+        sess.enable_internal_lints(),\n     );\n     register_lints(sess, &mut lint_store);\n "}, {"sha": "f92e842ba014b7dd610246a883740b7e5f290dfe", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "patch": "@@ -51,20 +51,6 @@ fn typeck_results_of_method_fn<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &Expr<'_>,\n ) -> Option<(Span, DefId, ty::subst::SubstsRef<'tcx>)> {\n-    // FIXME(rustdoc): Lints which use this function use typecheck results which can cause\n-    // `rustdoc` to error if there are resolution failures.\n-    //\n-    // As internal lints are currently always run if there are `unstable_options`, they are added\n-    // to the lint store of rustdoc. Internal lints are also not used via the `lint_mod` query.\n-    // Crate lints run outside of a query so rustdoc currently doesn't disable them.\n-    //\n-    // Instead of relying on this, either change crate lints to a query disabled by rustdoc, only\n-    // run internal lints if the user is explicitly opting in or figure out a different way to\n-    // avoid running lints for rustdoc.\n-    if cx.tcx.sess.opts.actually_rustdoc {\n-        return None;\n-    }\n-\n     match expr.kind {\n         ExprKind::MethodCall(segment, _, _)\n             if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) =>"}, {"sha": "ac4a6b6da6f40335dd61b5679c874b5d9e7e9279", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "patch": "@@ -589,6 +589,14 @@ impl Session {\n     pub fn time_passes(&self) -> bool {\n         self.opts.unstable_opts.time_passes || self.opts.unstable_opts.time\n     }\n+\n+    /// Returns `true` if internal lints should be added to the lint store - i.e. if\n+    /// `-Zunstable-options` is provided and this isn't rustdoc (internal lints can trigger errors\n+    /// to be emitted under rustdoc).\n+    pub fn enable_internal_lints(&self) -> bool {\n+        self.unstable_options() && !self.opts.actually_rustdoc\n+    }\n+\n     pub fn instrument_mcount(&self) -> bool {\n         self.opts.unstable_opts.instrument_mcount\n     }"}, {"sha": "3a96884d45d9f9ec2516dd24e99691ec285ac278", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e005f0ca0b6fbc427315fa7e6943f4b738e12d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f5e005f0ca0b6fbc427315fa7e6943f4b738e12d", "patch": "@@ -788,7 +788,7 @@ fn main_options(options: config::Options) -> MainResult {\n         if sess.opts.describe_lints {\n             let mut lint_store = rustc_lint::new_lint_store(\n                 sess.opts.unstable_opts.no_interleave_lints,\n-                sess.unstable_options(),\n+                sess.enable_internal_lints(),\n             );\n             let registered_lints = if let Some(register_lints) = compiler.register_lints() {\n                 register_lints(sess, &mut lint_store);"}]}