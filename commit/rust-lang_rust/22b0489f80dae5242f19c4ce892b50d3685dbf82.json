{"sha": "22b0489f80dae5242f19c4ce892b50d3685dbf82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYjA0ODlmODBkYWU1MjQyZjE5YzRjZTg5MmI1MGQzNjg1ZGJmODI=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-11T00:32:05Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-11T00:32:05Z"}, "message": "Add the emptiness condition to the docs; add a PartialOrd example with NAN", "tree": {"sha": "9045b869e9ae7c7ecfe8d15a8e5850ee7bc8e8fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9045b869e9ae7c7ecfe8d15a8e5850ee7bc8e8fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b0489f80dae5242f19c4ce892b50d3685dbf82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b0489f80dae5242f19c4ce892b50d3685dbf82", "html_url": "https://github.com/rust-lang/rust/commit/22b0489f80dae5242f19c4ce892b50d3685dbf82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b0489f80dae5242f19c4ce892b50d3685dbf82/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f70a11a831992fe86a935a0d649d3aa6b16dc50", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f70a11a831992fe86a935a0d649d3aa6b16dc50", "html_url": "https://github.com/rust-lang/rust/commit/6f70a11a831992fe86a935a0d649d3aa6b16dc50"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "8a45444f1ab0c617322cc57010e36b211e0acb5f", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/22b0489f80dae5242f19c4ce892b50d3685dbf82/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b0489f80dae5242f19c4ce892b50d3685dbf82/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=22b0489f80dae5242f19c4ce892b50d3685dbf82", "patch": "@@ -60,7 +60,7 @@ impl fmt::Debug for RangeFull {\n /// (`start..end`).\n ///\n /// The `Range` `start..end` contains all values with `x >= start` and\n-/// `x < end`.\n+/// `x < end`.  It is empty unless `start < end`.\n ///\n /// # Examples\n ///\n@@ -124,6 +124,17 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!( (3..3).is_empty());\n     /// assert!( (3..2).is_empty());\n     /// ```\n+    ///\n+    /// The range is empty if either side is incomparable:\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    ///\n+    /// use std::f32::NAN;\n+    /// assert!(!(3.0..5.0).is_empty());\n+    /// assert!( (3.0..NAN).is_empty());\n+    /// assert!( (NAN..5.0).is_empty());\n+    /// ```\n     #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"48111\")]\n     pub fn is_empty(&self) -> bool {\n         !(self.start < self.end)\n@@ -260,7 +271,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// An range bounded inclusively below and above (`start..=end`).\n ///\n /// The `RangeInclusive` `start..=end` contains all values with `x >= start`\n-/// and `x <= end`.\n+/// and `x <= end`.  It is empty unless `start <= end`.\n ///\n /// This iterator is [fused], but the specific values of `start` and `end` after\n /// iteration has finished are **unspecified** other than that [`.is_empty()`]\n@@ -337,6 +348,17 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!( (3..=2).is_empty());\n     /// ```\n     ///\n+    /// The range is empty if either side is incomparable:\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    ///\n+    /// use std::f32::NAN;\n+    /// assert!(!(3.0..=5.0).is_empty());\n+    /// assert!( (3.0..=NAN).is_empty());\n+    /// assert!( (NAN..=5.0).is_empty());\n+    /// ```\n+    ///\n     /// This method returns `true` after iteration has finished:\n     ///\n     /// ```"}]}