{"sha": "5df05c6e221b718e82c87003e8b078a9cdbefb70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZjA1YzZlMjIxYjcxOGU4MmM4NzAwM2U4YjA3OGE5Y2RiZWZiNzA=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-04-22T16:47:42Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-06-14T13:51:49Z"}, "message": "specialize zip: Use associated type for specialized zip struct data\n\nThe associated type must be 'static to avoid dropck related errors.", "tree": {"sha": "d6fd46e0181f45aeb8dc16241268a5d2c4419fb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6fd46e0181f45aeb8dc16241268a5d2c4419fb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5df05c6e221b718e82c87003e8b078a9cdbefb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5df05c6e221b718e82c87003e8b078a9cdbefb70", "html_url": "https://github.com/rust-lang/rust/commit/5df05c6e221b718e82c87003e8b078a9cdbefb70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5df05c6e221b718e82c87003e8b078a9cdbefb70/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85cd49fc39532a6ad210a4b93dfb59e6fdabdbbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/85cd49fc39532a6ad210a4b93dfb59e6fdabdbbe", "html_url": "https://github.com/rust-lang/rust/commit/85cd49fc39532a6ad210a4b93dfb59e6fdabdbbe"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "b866655bbd53d1b24688357e1e213b4171112731", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5df05c6e221b718e82c87003e8b078a9cdbefb70/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df05c6e221b718e82c87003e8b078a9cdbefb70/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=5df05c6e221b718e82c87003e8b078a9cdbefb70", "patch": "@@ -301,6 +301,7 @@\n \n use clone::Clone;\n use cmp;\n+use default::Default;\n use fmt;\n use iter_private::TrustedRandomAccess;\n use ops::FnMut;\n@@ -624,8 +625,7 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n pub struct Zip<A, B> {\n     a: A,\n     b: B,\n-    index: usize,\n-    len: usize,\n+    spec: <(A, B) as ZipImplData>::Data,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -667,6 +667,17 @@ trait ZipImpl<A, B> {\n               B: DoubleEndedIterator + ExactSizeIterator;\n }\n \n+// Zip specialization data members\n+#[doc(hidden)]\n+trait ZipImplData {\n+    type Data: 'static + Clone + Default + fmt::Debug;\n+}\n+\n+#[doc(hidden)]\n+impl<T> ZipImplData for T {\n+    default type Data = ();\n+}\n+\n // General Zip impl\n #[doc(hidden)]\n impl<A, B> ZipImpl<A, B> for Zip<A, B>\n@@ -677,8 +688,7 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         Zip {\n             a: a,\n             b: b,\n-            index: 0, // not used in general case\n-            len: 0,\n+            spec: Default::default(), // unused\n         }\n     }\n \n@@ -731,6 +741,20 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n     }\n }\n \n+#[doc(hidden)]\n+#[derive(Default, Debug, Clone)]\n+struct ZipImplFields {\n+    index: usize,\n+    len: usize,\n+}\n+\n+#[doc(hidden)]\n+impl<A, B> ZipImplData for (A, B)\n+    where A: TrustedRandomAccess, B: TrustedRandomAccess\n+{\n+    type Data = ZipImplFields;\n+}\n+\n #[doc(hidden)]\n impl<A, B> ZipImpl<A, B> for Zip<A, B>\n     where A: TrustedRandomAccess, B: TrustedRandomAccess\n@@ -740,16 +764,18 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         Zip {\n             a: a,\n             b: b,\n-            index: 0,\n-            len: len,\n+            spec: ZipImplFields {\n+                index: 0,\n+                len: len,\n+            }\n         }\n     }\n \n     #[inline]\n     fn next(&mut self) -> Option<(A::Item, B::Item)> {\n-        if self.index < self.len {\n-            let i = self.index;\n-            self.index += 1;\n+        if self.spec.index < self.spec.len {\n+            let i = self.spec.index;\n+            self.spec.index += 1;\n             unsafe {\n                 Some((self.a.get_unchecked(i), self.b.get_unchecked(i)))\n             }\n@@ -760,7 +786,7 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let len = self.len - self.index;\n+        let len = self.spec.len - self.spec.index;\n         (len, Some(len))\n     }\n \n@@ -769,9 +795,9 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         where A: DoubleEndedIterator + ExactSizeIterator,\n               B: DoubleEndedIterator + ExactSizeIterator\n     {\n-        if self.index < self.len {\n-            self.len -= 1;\n-            let i = self.len;\n+        if self.spec.index < self.spec.len {\n+            self.spec.len -= 1;\n+            let i = self.spec.len;\n             unsafe {\n                 Some((self.a.get_unchecked(i), self.b.get_unchecked(i)))\n             }"}]}