{"sha": "eb71c3589a5867c78285ee2e7e7435eb0cb08768", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzFjMzU4OWE1ODY3Yzc4Mjg1ZWUyZTdlNzQzNWViMGNiMDg3Njg=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:12:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:12:54Z"}, "message": "Rollup merge of #52859 - ljedrz:smallvec_true_extend, r=Mark-Simulacrum\n\nUse Vec::extend in SmallVec::extend when applicable\n\nAs calculated in #52738, `Vec::extend` is much faster than `push`ing to it in a loop. We can take advantage of this method in `SmallVec` too - at least in cases when its underlying object is an `AccumulateVec::Heap`.\n\n~~This approach also accidentally improves the `push` loop of the `AccumulateVec::Array` variant, because it doesn't utilize `SmallVec::push` which performs `self.reserve(1)` with every iteration; this is unnecessary, because we're already reserving the whole space we will be needing by performing `self.reserve(iter.size_hint().0)` at the beginning.~~", "tree": {"sha": "5b1901eb2ff4b0a573194c411a4c6b2bc8545aea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b1901eb2ff4b0a573194c411a4c6b2bc8545aea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb71c3589a5867c78285ee2e7e7435eb0cb08768", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWuGCRBK7hj4Ov3rIwAAdHIIAITETfiB6QHqLFOF/PsLd5rB\nUHe+3TcCiRlBeTYqbmxdAMMh7v3nq/gV/glfHC6BD3+V/34wK1OIZZkbKcq+6kSQ\nRqQuS0A/iD/RFXGvu6lEf6xzS+pftC+uvkD/ZgpepTfFRilV/f5WTz6y2S8QQwrq\n/dvThFX2Iev3DvkI0lE9DcfujDzrrKVNmW6rvN1sgnY5HEpW4J+MXvlsUDdo9V6e\nv0FIt0vmbToZPqF+oRX89osVk1HAOA8D/2E1x2CYoz+OyHcJZqA1DnSkhtTYD8Aw\nvczAJ801bseNRPL+r0ptZ4bshH2OUNqWbPR/SZISJRkirt0ICRCxc84BntWvXfk=\n=//ux\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b1901eb2ff4b0a573194c411a4c6b2bc8545aea\nparent 67678862388992f5819163be8ba831e2431b36aa\nparent ca5264826430cb5dab7a3c61394e8e795bbbd851\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111174 +0200\ncommitter GitHub <noreply@github.com> 1533111174 +0200\n\nRollup merge of #52859 - ljedrz:smallvec_true_extend, r=Mark-Simulacrum\n\nUse Vec::extend in SmallVec::extend when applicable\n\nAs calculated in #52738, `Vec::extend` is much faster than `push`ing to it in a loop. We can take advantage of this method in `SmallVec` too - at least in cases when its underlying object is an `AccumulateVec::Heap`.\n\n~~This approach also accidentally improves the `push` loop of the `AccumulateVec::Array` variant, because it doesn't utilize `SmallVec::push` which performs `self.reserve(1)` with every iteration; this is unnecessary, because we're already reserving the whole space we will be needing by performing `self.reserve(iter.size_hint().0)` at the beginning.~~\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb71c3589a5867c78285ee2e7e7435eb0cb08768", "html_url": "https://github.com/rust-lang/rust/commit/eb71c3589a5867c78285ee2e7e7435eb0cb08768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb71c3589a5867c78285ee2e7e7435eb0cb08768/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67678862388992f5819163be8ba831e2431b36aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/67678862388992f5819163be8ba831e2431b36aa", "html_url": "https://github.com/rust-lang/rust/commit/67678862388992f5819163be8ba831e2431b36aa"}, {"sha": "ca5264826430cb5dab7a3c61394e8e795bbbd851", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5264826430cb5dab7a3c61394e8e795bbbd851", "html_url": "https://github.com/rust-lang/rust/commit/ca5264826430cb5dab7a3c61394e8e795bbbd851"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "b5f52d54ae471bd7bca2569b46a3eea2283a8332", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 128, "deletions": 4, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/eb71c3589a5867c78285ee2e7e7435eb0cb08768/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb71c3589a5867c78285ee2e7e7435eb0cb08768/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=eb71c3589a5867c78285ee2e7e7435eb0cb08768", "patch": "@@ -169,10 +169,18 @@ impl<A: Array> FromIterator<A::Element> for SmallVec<A> {\n \n impl<A: Array> Extend<A::Element> for SmallVec<A> {\n     fn extend<I: IntoIterator<Item=A::Element>>(&mut self, iter: I) {\n-        let iter = iter.into_iter();\n-        self.reserve(iter.size_hint().0);\n-        for el in iter {\n-            self.push(el);\n+        if self.is_array() {\n+            let iter = iter.into_iter();\n+            self.reserve(iter.size_hint().0);\n+\n+            for el in iter {\n+                self.push(el);\n+            }\n+        } else {\n+            match self.0 {\n+                AccumulateVec::Heap(ref mut vec) => vec.extend(iter),\n+                _ => unreachable!()\n+            }\n         }\n     }\n }\n@@ -213,3 +221,119 @@ impl<A> Decodable for SmallVec<A>\n         })\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    extern crate test;\n+    use self::test::Bencher;\n+\n+    use super::*;\n+\n+    #[bench]\n+    fn fill_small_vec_1_10_with_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 1]> = SmallVec::with_capacity(10);\n+\n+            sv.extend(0..10);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_1_10_wo_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 1]> = SmallVec::new();\n+\n+            sv.extend(0..10);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_8_10_with_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 8]> = SmallVec::with_capacity(10);\n+\n+            sv.extend(0..10);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_8_10_wo_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 8]> = SmallVec::new();\n+\n+            sv.extend(0..10);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_32_10_with_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 32]> = SmallVec::with_capacity(10);\n+\n+            sv.extend(0..10);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_32_10_wo_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 32]> = SmallVec::new();\n+\n+            sv.extend(0..10);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_1_50_with_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 1]> = SmallVec::with_capacity(50);\n+\n+            sv.extend(0..50);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_1_50_wo_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 1]> = SmallVec::new();\n+\n+            sv.extend(0..50);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_8_50_with_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 8]> = SmallVec::with_capacity(50);\n+\n+            sv.extend(0..50);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_8_50_wo_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 8]> = SmallVec::new();\n+\n+            sv.extend(0..50);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_32_50_with_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 32]> = SmallVec::with_capacity(50);\n+\n+            sv.extend(0..50);\n+        })\n+    }\n+\n+    #[bench]\n+    fn fill_small_vec_32_50_wo_cap(b: &mut Bencher) {\n+        b.iter(|| {\n+            let mut sv: SmallVec<[usize; 32]> = SmallVec::new();\n+\n+            sv.extend(0..50);\n+        })\n+    }\n+}"}]}