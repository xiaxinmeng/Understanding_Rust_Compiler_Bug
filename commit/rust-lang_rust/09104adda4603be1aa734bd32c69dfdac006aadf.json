{"sha": "09104adda4603be1aa734bd32c69dfdac006aadf", "node_id": "C_kwDOAAsO6NoAKDA5MTA0YWRkYTQ2MDNiZTFhYTczNGJkMzJjNjlkZmRhYzAwNmFhZGY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T19:40:06Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T22:05:15Z"}, "message": "Explain why struct fields are handled by assoc. item code", "tree": {"sha": "eb50e29e7e13fd8716932a0e96ed42b56358189b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb50e29e7e13fd8716932a0e96ed42b56358189b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09104adda4603be1aa734bd32c69dfdac006aadf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09104adda4603be1aa734bd32c69dfdac006aadf", "html_url": "https://github.com/rust-lang/rust/commit/09104adda4603be1aa734bd32c69dfdac006aadf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09104adda4603be1aa734bd32c69dfdac006aadf/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "636d6a3eec8b7505beb18633bce1bc51835fceca", "url": "https://api.github.com/repos/rust-lang/rust/commits/636d6a3eec8b7505beb18633bce1bc51835fceca", "html_url": "https://github.com/rust-lang/rust/commit/636d6a3eec8b7505beb18633bce1bc51835fceca"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "10ef92e5f400f2817e576ee32b8606d824c2e9e0", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09104adda4603be1aa734bd32c69dfdac006aadf/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09104adda4603be1aa734bd32c69dfdac006aadf/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=09104adda4603be1aa734bd32c69dfdac006aadf", "patch": "@@ -688,6 +688,18 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // FIXME: this doesn't really belong in `associated_item` (maybe `variant_field` is better?)\n                 // NOTE: it's different from variant_field because it only resolves struct fields,\n                 // not variant fields (2 path segments, not 3).\n+                //\n+                // We need to handle struct (and union) fields in this code because\n+                // syntactically their paths are identical to associated item paths:\n+                // `module::Type::field` and `module::Type::Assoc`.\n+                //\n+                // On the other hand, variant fields can't be mistaken for associated\n+                // items because they look like this: `module::Type::Variant::field`.\n+                //\n+                // Variants themselves don't need to be handled here, even though\n+                // they also look like associated items (`module::Type::Variant`),\n+                // because they are real Rust syntax (unlike the intra-doc links\n+                // field syntax) and are handled by the compiler's resolver.\n                 let def = match tcx.type_of(did).kind() {\n                     ty::Adt(def, _) if !def.is_enum() => def,\n                     _ => return None,"}]}