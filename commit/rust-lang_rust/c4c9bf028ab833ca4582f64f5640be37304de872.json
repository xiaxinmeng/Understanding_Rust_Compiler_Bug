{"sha": "c4c9bf028ab833ca4582f64f5640be37304de872", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YzliZjAyOGFiODMzY2E0NTgyZjY0ZjU2NDBiZTM3MzA0ZGU4NzI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-02T08:43:50Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-02T08:43:50Z"}, "message": "Keep vertical spaces between items or statements within range", "tree": {"sha": "cddbb781068ac5613862385468097c571393eb1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cddbb781068ac5613862385468097c571393eb1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c9bf028ab833ca4582f64f5640be37304de872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c9bf028ab833ca4582f64f5640be37304de872", "html_url": "https://github.com/rust-lang/rust/commit/c4c9bf028ab833ca4582f64f5640be37304de872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c9bf028ab833ca4582f64f5640be37304de872/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "483f71c8b1dceb684af7c9006d39e8fd56c41c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/483f71c8b1dceb684af7c9006d39e8fd56c41c80", "html_url": "https://github.com/rust-lang/rust/commit/483f71c8b1dceb684af7c9006d39e8fd56c41c80"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "0c7d5c02c01902f57b7cfe5ab13c966c0ed3ea5e", "filename": "src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4c9bf028ab833ca4582f64f5640be37304de872/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c9bf028ab833ca4582f64f5640be37304de872/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=c4c9bf028ab833ca4582f64f5640be37304de872", "patch": "@@ -651,6 +651,10 @@ create_config! {\n         \"Add trailing semicolon after break, continue and return\";\n     match_block_trailing_comma: bool, false, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n+    blank_lines_upper_bound: usize, 1, false,\n+        \"Maximum number of blank lines which can be put between items.\";\n+    blank_lines_lower_bound: usize, 0, false,\n+        \"Minimum number of blank lines which must be put between items.\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";"}, {"sha": "101d49305ff460d400557cdf2dcfd4fe7c082436", "filename": "src/missed_spans.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c4c9bf028ab833ca4582f64f5640be37304de872/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c9bf028ab833ca4582f64f5640be37304de872/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=c4c9bf028ab833ca4582f64f5640be37304de872", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n+use std::iter::repeat;\n \n use syntax::codemap::{BytePos, Pos, Span};\n \n@@ -74,8 +75,27 @@ impl<'a> FmtVisitor<'a> {\n \n         self.last_pos = end;\n         let span = mk_sp(start, end);\n+        let snippet = self.snippet(span);\n+        if snippet.trim().is_empty() {\n+            // Keep vertical spaces within range.\n+            self.push_vertical_spaces(&snippet);\n+            process_last_snippet(self, \"\", &snippet);\n+        } else {\n+            self.write_snippet(span, &process_last_snippet);\n+        }\n+    }\n \n-        self.write_snippet(span, &process_last_snippet);\n+    fn push_vertical_spaces(&mut self, original: &str) {\n+        let mut newline_count = original.chars().filter(|&c| c == '\\n').count();\n+        let newline_upper_bound = self.config.blank_lines_upper_bound() + 1;\n+        let newline_lower_bound = self.config.blank_lines_lower_bound() + 1;\n+        if newline_count > newline_upper_bound {\n+            newline_count = newline_upper_bound;\n+        } else if newline_count < newline_lower_bound {\n+            newline_count = newline_lower_bound;\n+        }\n+        let blank_lines: String = repeat('\\n').take(newline_count).collect();\n+        self.buffer.push_str(&blank_lines);\n     }\n \n     fn write_snippet<F>(&mut self, span: Span, process_last_snippet: F)"}]}