{"sha": "183bd97d076fa2d7bd1c4abcad6065abc17af119", "node_id": "C_kwDOAAsO6NoAKDE4M2JkOTdkMDc2ZmEyZDdiZDFjNGFiY2FkNjA2NWFiYzE3YWYxMTk", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-02-01T11:57:17Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-09T08:17:24Z"}, "message": "add test", "tree": {"sha": "28d67f5f34fe59f6cd0506530e4c864e3a3bbb7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d67f5f34fe59f6cd0506530e4c864e3a3bbb7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/183bd97d076fa2d7bd1c4abcad6065abc17af119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/183bd97d076fa2d7bd1c4abcad6065abc17af119", "html_url": "https://github.com/rust-lang/rust/commit/183bd97d076fa2d7bd1c4abcad6065abc17af119", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/183bd97d076fa2d7bd1c4abcad6065abc17af119/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e441565e21a19b8d0be749e997c8b414ba185f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e441565e21a19b8d0be749e997c8b414ba185f4", "html_url": "https://github.com/rust-lang/rust/commit/4e441565e21a19b8d0be749e997c8b414ba185f4"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "f776fc98a9edeb24b3ba13298659d652e38884c2", "filename": "tests/ui/implied-bounds/normalization.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/183bd97d076fa2d7bd1c4abcad6065abc17af119/tests%2Fui%2Fimplied-bounds%2Fnormalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/183bd97d076fa2d7bd1c4abcad6065abc17af119/tests%2Fui%2Fimplied-bounds%2Fnormalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplied-bounds%2Fnormalization.rs?ref=183bd97d076fa2d7bd1c4abcad6065abc17af119", "patch": "@@ -0,0 +1,58 @@\n+// Test that we get implied bounds from complex projections after normalization.\n+\n+// check-pass\n+\n+// implementations wil ensure that\n+// WF(<T as Combine<'a>>::Ty) implies T: 'a\n+trait Combine<'a> {\n+    type Ty;\n+}\n+\n+impl<'a, T: 'a> Combine<'a> for Box<T> {\n+    type Ty = &'a T;\n+}\n+\n+// ======= Wrappers ======\n+\n+// normalizes to a projection\n+struct WrapA<T>(T);\n+impl<'a, T> Combine<'a> for WrapA<T>\n+where\n+    T: Combine<'a>,\n+{\n+    type Ty = T::Ty;\n+}\n+\n+// <WrapB<T> as Combine<'a>>::Ty normalizes to a type variable ?X\n+// with constraint `<T as Combine<'a>>::Ty == ?X`\n+struct WrapB<T>(T);\n+impl<'a, X, T> Combine<'a> for WrapB<T>\n+where\n+    T: Combine<'a, Ty = X>,\n+{\n+    type Ty = X;\n+}\n+\n+// <WrapC<T> as Combine<'a>>::Ty normalizes to `&'a &'?x ()`\n+// with constraint `<T as Combine<'a>>::Ty == &'a &'?x ()`\n+struct WrapC<T>(T);\n+impl<'a, 'x: 'a, T> Combine<'a> for WrapC<T>\n+where\n+    T: Combine<'a, Ty = &'a &'x ()>,\n+{\n+    type Ty = &'a &'x ();\n+}\n+\n+//==== Test implied bounds ======\n+\n+fn test_wrap<'a, 'b, 'c1, 'c2, A, B>(\n+    _: <WrapA<Box<A>> as Combine<'a>>::Ty,        // normalized: &'a A\n+    _: <WrapB<Box<B>> as Combine<'b>>::Ty,        // normalized: &'b B\n+    _: <WrapC<Box<&'c1 ()>> as Combine<'c2>>::Ty, // normalized: &'c2 &'c1 ()\n+) {\n+    None::<&'a A>;\n+    None::<&'b B>;\n+    None::<&'c2 &'c1 ()>;\n+}\n+\n+fn main() {}"}]}