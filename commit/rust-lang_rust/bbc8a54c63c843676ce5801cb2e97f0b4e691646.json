{"sha": "bbc8a54c63c843676ce5801cb2e97f0b4e691646", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYzhhNTRjNjNjODQzNjc2Y2U1ODAxY2IyZTk3ZjBiNGU2OTE2NDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-10T16:43:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-10T16:43:01Z"}, "message": "rollup merge of #22116: kmcallister/cfg_attr\n\nFixes #22070.\nFixes #19372.\n\nr? @sfackler", "tree": {"sha": "18995c5fd8d376dac8610e9a58cab6cc817e4f21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18995c5fd8d376dac8610e9a58cab6cc817e4f21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc8a54c63c843676ce5801cb2e97f0b4e691646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc8a54c63c843676ce5801cb2e97f0b4e691646", "html_url": "https://github.com/rust-lang/rust/commit/bbc8a54c63c843676ce5801cb2e97f0b4e691646", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc8a54c63c843676ce5801cb2e97f0b4e691646/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c33acf658a5b6e14d57016ea5a455277f7e0c966", "url": "https://api.github.com/repos/rust-lang/rust/commits/c33acf658a5b6e14d57016ea5a455277f7e0c966", "html_url": "https://github.com/rust-lang/rust/commit/c33acf658a5b6e14d57016ea5a455277f7e0c966"}, {"sha": "5354317037368124d180acc3f8754bdb2b0387b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5354317037368124d180acc3f8754bdb2b0387b8", "html_url": "https://github.com/rust-lang/rust/commit/5354317037368124d180acc3f8754bdb2b0387b8"}], "stats": {"total": 187, "additions": 133, "deletions": 54}, "files": [{"sha": "7ca0591be5064e9e78745463dcdc29f4b1ac5aa7", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -12,7 +12,7 @@ use attr::AttrMetaMethods;\n use diagnostic::SpanHandler;\n use fold::Folder;\n use {ast, fold, attr};\n-use codemap::Spanned;\n+use codemap::{Spanned, respan};\n use ptr::P;\n \n use util::small_vector::SmallVector;\n@@ -26,6 +26,7 @@ struct Context<F> where F: FnMut(&[ast::Attribute]) -> bool {\n // Support conditional compilation by transforming the AST, stripping out\n // any items that do not belong in the current configuration\n pub fn strip_unconfigured_items(diagnostic: &SpanHandler, krate: ast::Crate) -> ast::Crate {\n+    let krate = process_cfg_attr(diagnostic, krate);\n     let config = krate.config.clone();\n     strip_items(krate, |attrs| in_cfg(diagnostic, &config, attrs))\n }\n@@ -281,3 +282,49 @@ fn in_cfg(diagnostic: &SpanHandler, cfg: &[P<ast::MetaItem>], attrs: &[ast::Attr\n         attr::cfg_matches(diagnostic, cfg, &*mis[0])\n     })\n }\n+\n+struct CfgAttrFolder<'a> {\n+    diag: &'a SpanHandler,\n+    config: ast::CrateConfig,\n+}\n+\n+// Process `#[cfg_attr]`.\n+fn process_cfg_attr(diagnostic: &SpanHandler, krate: ast::Crate) -> ast::Crate {\n+    let mut fld = CfgAttrFolder {\n+        diag: diagnostic,\n+        config: krate.config.clone(),\n+    };\n+    fld.fold_crate(krate)\n+}\n+\n+impl<'a> fold::Folder for CfgAttrFolder<'a> {\n+    fn fold_attribute(&mut self, attr: ast::Attribute) -> Option<ast::Attribute> {\n+        if !attr.check_name(\"cfg_attr\") {\n+            return fold::noop_fold_attribute(attr, self);\n+        }\n+\n+        let (cfg, mi) = match attr.meta_item_list() {\n+            Some([ref cfg, ref mi]) => (cfg, mi),\n+            _ => {\n+                self.diag.span_err(attr.span, \"expected `#[cfg_attr(<cfg pattern>, <attr>)]`\");\n+                return None;\n+            }\n+        };\n+\n+        if attr::cfg_matches(self.diag, &self.config[], &cfg) {\n+            Some(respan(mi.span, ast::Attribute_ {\n+                id: attr::mk_attr_id(),\n+                style: attr.node.style,\n+                value: mi.clone(),\n+                is_sugared_doc: false,\n+            }))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    // Need the ability to run pre-expansion.\n+    fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac {\n+        fold::noop_fold_mac(mac, self)\n+    }\n+}"}, {"sha": "64ae6162ef4e56060ffd95e56c3a30fec5b607c7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -528,8 +528,6 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"cfg\"),\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n-    syntax_expanders.insert(intern(\"cfg_attr\"),\n-                            Modifier(box ext::cfg_attr::expand));\n     syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));"}, {"sha": "72eaa3e47bec6cda739043cacdd1c9b6e2a8c709", "filename": "src/libsyntax/ext/cfg_attr.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c33acf658a5b6e14d57016ea5a455277f7e0c966/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c33acf658a5b6e14d57016ea5a455277f7e0c966/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg_attr.rs?ref=c33acf658a5b6e14d57016ea5a455277f7e0c966", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use ast;\n-use attr;\n-use codemap::Span;\n-use ext::base::ExtCtxt;\n-use ext::build::AstBuilder;\n-use ptr::P;\n-\n-pub fn expand(cx: &mut ExtCtxt, sp: Span, mi: &ast::MetaItem, it: P<ast::Item>) -> P<ast::Item> {\n-    let (cfg, attr) = match mi.node {\n-        ast::MetaList(_, ref mis) if mis.len() == 2 => (&mis[0], &mis[1]),\n-        _ => {\n-            cx.span_err(sp, \"expected `#[cfg_attr(<cfg pattern>, <attr>)]`\");\n-            return it;\n-        }\n-    };\n-\n-    let mut out = (*it).clone();\n-    if attr::cfg_matches(&cx.parse_sess.span_diagnostic, &cx.cfg, &**cfg) {\n-        out.attrs.push(cx.attribute(attr.span, attr.clone()));\n-    }\n-\n-    P(out)\n-}\n-"}, {"sha": "131bbc4100546985d5436f725fa86c997eef206d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -844,7 +844,7 @@ fn expand_arm(arm: ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n         arm.guard.map(|g| fld.fold_expr(rename_fld.fold_expr(g)));\n     let rewritten_body = fld.fold_expr(rename_fld.fold_expr(arm.body));\n     ast::Arm {\n-        attrs: arm.attrs.move_map(|x| fld.fold_attribute(x)),\n+        attrs: fold::fold_attrs(arm.attrs, fld),\n         pats: rewritten_pats,\n         guard: rewritten_guard,\n         body: rewritten_body,\n@@ -1273,7 +1273,7 @@ fn expand_method(m: P<ast::Method>, fld: &mut MacroExpander) -> SmallVector<P<as\n             let (rewritten_fn_decl, rewritten_body)\n                 = expand_and_rename_fn_decl_and_block(decl, body, fld);\n             SmallVector::one(P(ast::Method {\n-                    attrs: m.attrs.move_map(|a| fld.fold_attribute(a)),\n+                    attrs: fold::fold_attrs(m.attrs, fld),\n                     id: id,\n                     span: fld.new_span(m.span),\n                     node: ast::MethDecl(fld.fold_ident(ident),"}, {"sha": "1fb0642d24ff74fdb0665916b7a66516da204901", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -223,7 +223,7 @@ pub trait Folder : Sized {\n         noop_fold_lifetime_def(l, self)\n     }\n \n-    fn fold_attribute(&mut self, at: Attribute) -> Attribute {\n+    fn fold_attribute(&mut self, at: Attribute) -> Option<Attribute> {\n         noop_fold_attribute(at, self)\n     }\n \n@@ -373,9 +373,13 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n     })\n }\n \n+pub fn fold_attrs<T: Folder>(attrs: Vec<Attribute>, fld: &mut T) -> Vec<Attribute> {\n+    attrs.into_iter().flat_map(|x| fld.fold_attribute(x).into_iter()).collect()\n+}\n+\n pub fn noop_fold_arm<T: Folder>(Arm {attrs, pats, guard, body}: Arm, fld: &mut T) -> Arm {\n     Arm {\n-        attrs: attrs.move_map(|x| fld.fold_attribute(x)),\n+        attrs: fold_attrs(attrs, fld),\n         pats: pats.move_map(|x| fld.fold_pat(x)),\n         guard: guard.map(|x| fld.fold_expr(x)),\n         body: fld.fold_expr(body),\n@@ -475,7 +479,7 @@ pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n         node: Variant_ {\n             id: fld.new_id(id),\n             name: name,\n-            attrs: attrs.move_map(|x| fld.fold_attribute(x)),\n+            attrs: fold_attrs(attrs, fld),\n             kind: match kind {\n                 TupleVariantKind(variant_args) => {\n                     TupleVariantKind(variant_args.move_map(|x|\n@@ -553,17 +557,17 @@ pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> {\n     })\n }\n \n-pub fn noop_fold_attribute<T: Folder>(at: Attribute, fld: &mut T) -> Attribute {\n+pub fn noop_fold_attribute<T: Folder>(at: Attribute, fld: &mut T) -> Option<Attribute> {\n     let Spanned {node: Attribute_ {id, style, value, is_sugared_doc}, span} = at;\n-    Spanned {\n+    Some(Spanned {\n         node: Attribute_ {\n             id: id,\n             style: style,\n             value: fld.fold_meta_item(value),\n             is_sugared_doc: is_sugared_doc\n         },\n         span: fld.new_span(span)\n-    }\n+    })\n }\n \n pub fn noop_fold_explicit_self_underscore<T: Folder>(es: ExplicitSelf_, fld: &mut T)\n@@ -845,8 +849,8 @@ pub fn noop_fold_typedef<T>(t: Typedef, folder: &mut T)\n                             where T: Folder {\n     let new_id = folder.new_id(t.id);\n     let new_span = folder.new_span(t.span);\n-    let new_attrs = t.attrs.iter().map(|attr| {\n-        folder.fold_attribute((*attr).clone())\n+    let new_attrs = t.attrs.iter().flat_map(|attr| {\n+        folder.fold_attribute((*attr).clone()).into_iter()\n     }).collect();\n     let new_ident = folder.fold_ident(t.ident);\n     let new_type = folder.fold_ty(t.typ);\n@@ -866,7 +870,7 @@ pub fn noop_fold_associated_type<T>(at: AssociatedType, folder: &mut T)\n {\n     let new_attrs = at.attrs\n                       .iter()\n-                      .map(|attr| folder.fold_attribute((*attr).clone()))\n+                      .flat_map(|attr| folder.fold_attribute((*attr).clone()).into_iter())\n                       .collect();\n     let new_param = folder.fold_ty_param(at.ty_param);\n     ast::AssociatedType {\n@@ -909,7 +913,7 @@ pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructF\n             id: fld.new_id(id),\n             kind: kind,\n             ty: fld.fold_ty(ty),\n-            attrs: attrs.move_map(|a| fld.fold_attribute(a))\n+            attrs: fold_attrs(attrs, fld),\n         },\n         span: fld.new_span(span)\n     }\n@@ -1072,7 +1076,7 @@ pub fn noop_fold_type_method<T: Folder>(m: TypeMethod, fld: &mut T) -> TypeMetho\n     TypeMethod {\n         id: fld.new_id(id),\n         ident: fld.fold_ident(ident),\n-        attrs: attrs.move_map(|a| fld.fold_attribute(a)),\n+        attrs: fold_attrs(attrs, fld),\n         unsafety: unsafety,\n         abi: abi,\n         decl: fld.fold_fn_decl(decl),\n@@ -1154,7 +1158,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n     Item {\n         id: id,\n         ident: folder.fold_ident(ident),\n-        attrs: attrs.move_map(|e| folder.fold_attribute(e)),\n+        attrs: fold_attrs(attrs, folder),\n         node: node,\n         vis: vis,\n         span: folder.new_span(span)\n@@ -1165,7 +1169,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) ->\n     ni.map(|ForeignItem {id, ident, attrs, node, span, vis}| ForeignItem {\n         id: folder.new_id(id),\n         ident: folder.fold_ident(ident),\n-        attrs: attrs.move_map(|x| folder.fold_attribute(x)),\n+        attrs: fold_attrs(attrs, folder),\n         node: match node {\n             ForeignItemFn(fdec, generics) => {\n                 ForeignItemFn(folder.fold_fn_decl(fdec), folder.fold_generics(generics))\n@@ -1184,7 +1188,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) ->\n pub fn noop_fold_method<T: Folder>(m: P<Method>, folder: &mut T) -> SmallVector<P<Method>> {\n     SmallVector::one(m.map(|Method {id, attrs, node, span}| Method {\n         id: folder.new_id(id),\n-        attrs: attrs.move_map(|a| folder.fold_attribute(a)),\n+        attrs: fold_attrs(attrs, folder),\n         node: match node {\n             MethDecl(ident,\n                      generics,"}, {"sha": "41850ada3e62b3aaec5961b5fdfd77a0fa789648", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -96,7 +96,6 @@ pub mod ext {\n     pub mod base;\n     pub mod build;\n     pub mod cfg;\n-    pub mod cfg_attr;\n     pub mod concat;\n     pub mod concat_idents;\n     pub mod deriving;"}, {"sha": "b71a3be5dcea4ec5630f4877b5e9a8765dfca03c", "filename": "src/test/compile-fail/cfg-attr-cfg-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Ftest%2Fcompile-fail%2Fcfg-attr-cfg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Ftest%2Fcompile-fail%2Fcfg-attr-cfg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-attr-cfg-2.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// error-pattern: main function not found\n+// compile-flags: --cfg foo\n+\n+// main is conditionally compiled, but the conditional compilation\n+// is conditional too!\n+\n+#[cfg_attr(foo, cfg(bar))]\n+fn main() { }"}, {"sha": "4867dd8d0b4abac1e8238265c98e8f3cbb9ceae5", "filename": "src/test/compile-fail/cfg-attr-crate-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Ftest%2Fcompile-fail%2Fcfg-attr-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Ftest%2Fcompile-fail%2Fcfg-attr-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-attr-crate-2.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: --cfg broken\n+\n+// https://github.com/rust-lang/rust/issues/21833#issuecomment-72353044\n+\n+#![cfg_attr(broken, no_std)] //~ ERROR no_std is experimental\n+\n+fn main() { }"}, {"sha": "09ab70194864f1b6905858c6f2a866620128f451", "filename": "src/test/run-pass/cfg-attr-cfg.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Ftest%2Frun-pass%2Fcfg-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Ftest%2Frun-pass%2Fcfg-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-attr-cfg.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// main is conditionally compiled, but the conditional compilation\n+// is conditional too!\n+\n+#[cfg_attr(foo, cfg(bar))]\n+fn main() { }"}, {"sha": "e6bd8afad280b98e928883216ea6c851512280df", "filename": "src/test/run-pass/cfg-attr-crate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc8a54c63c843676ce5801cb2e97f0b4e691646/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-attr-crate.rs?ref=bbc8a54c63c843676ce5801cb2e97f0b4e691646", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/21833#issuecomment-72353044\n+\n+#![cfg_attr(not_used, no_std)]\n+\n+fn main() { }"}]}