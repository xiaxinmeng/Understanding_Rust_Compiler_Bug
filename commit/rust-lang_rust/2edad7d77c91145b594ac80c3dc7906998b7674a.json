{"sha": "2edad7d77c91145b594ac80c3dc7906998b7674a", "node_id": "C_kwDOAAsO6NoAKDJlZGFkN2Q3N2M5MTE0NWI1OTRhYzgwYzNkYzc5MDY5OThiNzY3NGE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T22:15:56Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T22:15:56Z"}, "message": "Apply suggestions from the review\n\n- Use `expr.hir_id.owner` instead of `self.tcx.parent_module(expr.hir_id)`\n- Use `.type_at()` instead of `.first()` + `.expect_ty()`\n- Use single `.find()` with `&&` condition\n\nCo-authored-by: Michael Goulet <michael@errs.io>", "tree": {"sha": "e6c885e01e980ca89f3ea98477517654a89ed388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6c885e01e980ca89f3ea98477517654a89ed388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2edad7d77c91145b594ac80c3dc7906998b7674a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2edad7d77c91145b594ac80c3dc7906998b7674a", "html_url": "https://github.com/rust-lang/rust/commit/2edad7d77c91145b594ac80c3dc7906998b7674a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2edad7d77c91145b594ac80c3dc7906998b7674a/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2752e00f0139fb13282b2bd97aa0f8c665aee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2752e00f0139fb13282b2bd97aa0f8c665aee9", "html_url": "https://github.com/rust-lang/rust/commit/da2752e00f0139fb13282b2bd97aa0f8c665aee9"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "e5f8b6b5f1e8d9e4dd76dcd522fdbec3fe1559b5", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2edad7d77c91145b594ac80c3dc7906998b7674a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2edad7d77c91145b594ac80c3dc7906998b7674a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=2edad7d77c91145b594ac80c3dc7906998b7674a", "patch": "@@ -358,10 +358,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let sole_field = &variant.fields[0];\n \n                     if !sole_field.did.is_local()\n-                        && !sole_field.vis.is_accessible_from(\n-                            self.tcx.parent_module(expr.hir_id).to_def_id(),\n-                            self.tcx,\n-                        )\n+                        && !sole_field\n+                            .vis\n+                            .is_accessible_from(expr.hir_id.owner.to_def_id(), self.tcx)\n                     {\n                         return None;\n                     }\n@@ -433,8 +432,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // In case Option<NonZero*> is wanted, but * is provided, suggest calling new\n             ty::Adt(adt, substs) if tcx.is_diagnostic_item(sym::Option, adt.did()) => {\n                 // Unwrap option\n-                let Some(fst) = substs.first() else { return };\n-                let ty::Adt(adt, _) = fst.expect_ty().kind() else { return };\n+                let ty::Adt(adt, _) = substs.type_at(0).kind() else { return };\n \n                 (adt, \"\")\n             }\n@@ -458,8 +456,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let Some((s, _)) = map\n             .iter()\n-            .find(|&&(s, _)| self.tcx.is_diagnostic_item(s, adt.did()))\n-            .filter(|&&(_, t)| { self.can_coerce(expr_ty, t) })\n+            .find(|&&(s, t)| self.tcx.is_diagnostic_item(s, adt.did()) && self.can_coerce(expr_ty, t))\n             else { return };\n \n         let path = self.tcx.def_path_str(adt.non_enum_variant().def_id);"}]}