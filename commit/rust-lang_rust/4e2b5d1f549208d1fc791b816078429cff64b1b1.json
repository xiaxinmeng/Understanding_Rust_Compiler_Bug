{"sha": "4e2b5d1f549208d1fc791b816078429cff64b1b1", "node_id": "C_kwDOAAsO6NoAKDRlMmI1ZDFmNTQ5MjA4ZDFmYzc5MWI4MTYwNzg0MjljZmY2NGIxYjE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-25T11:31:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-25T11:31:43Z"}, "message": "Rollup merge of #107213 - edward-shen:edward-shen/fix-accidental-let-else, r=compiler-errors\n\nAdd suggestion to remove if in let..else block\n\nAdds an additional hint to failures where we encounter an else keyword while we're parsing an if-let expression.\n\nThis is likely that the user has accidentally mixed if-let and let..else together.\n\nFixes #103791.", "tree": {"sha": "b380dc5859045c9e09f062d8dce8e7c566c1b73f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b380dc5859045c9e09f062d8dce8e7c566c1b73f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e2b5d1f549208d1fc791b816078429cff64b1b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0RMfCRBK7hj4Ov3rIwAAsTYIAJDiAweAOrQHbuVW9R+VH4UN\nPf1qCHjyrRluxcdpm1WsQdLbrRUjOalrxnKfpqSLXJQ+mVrMs6I5XqyfbJaYUd/G\nwgIKFd0kOEizHT0c7ufFvMJM/Mfad5pnSl4gq7SBtN3Bb6MAKf4qGxHaG0I0Z1xX\n6tcV7X1sbue07lTV+TYAGSHkzlpGBpR3SQHlvAz/GvVBB+R9Q7AAls1ziAZaU/Qk\ns4A2YzrrDZvVtCrvhgDlUmq17pXJkLGNLkUK5QQ12e1txJH/e2FZCzh6t0orxApj\n4GxBHqQInwUcu8P5Hg11McGRgiwKXzSdXynf8NEUkw0PzsQRiPJKruPhwEqpCgM=\n=rW8j\n-----END PGP SIGNATURE-----\n", "payload": "tree b380dc5859045c9e09f062d8dce8e7c566c1b73f\nparent a788ce243a694da626a66e1fa47f1aa14eaed21c\nparent a8b77cfe5464e29b25389593ced9d080bf0dd6c8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1674646303 +0530\ncommitter GitHub <noreply@github.com> 1674646303 +0530\n\nRollup merge of #107213 - edward-shen:edward-shen/fix-accidental-let-else, r=compiler-errors\n\nAdd suggestion to remove if in let..else block\n\nAdds an additional hint to failures where we encounter an else keyword while we're parsing an if-let expression.\n\nThis is likely that the user has accidentally mixed if-let and let..else together.\n\nFixes #103791.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2b5d1f549208d1fc791b816078429cff64b1b1", "html_url": "https://github.com/rust-lang/rust/commit/4e2b5d1f549208d1fc791b816078429cff64b1b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e2b5d1f549208d1fc791b816078429cff64b1b1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a788ce243a694da626a66e1fa47f1aa14eaed21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a788ce243a694da626a66e1fa47f1aa14eaed21c", "html_url": "https://github.com/rust-lang/rust/commit/a788ce243a694da626a66e1fa47f1aa14eaed21c"}, {"sha": "a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b77cfe5464e29b25389593ced9d080bf0dd6c8", "html_url": "https://github.com/rust-lang/rust/commit/a8b77cfe5464e29b25389593ced9d080bf0dd6c8"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "a3e2002da781c230eff39d72ab2452466bf118e2", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b5d1f549208d1fc791b816078429cff64b1b1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b5d1f549208d1fc791b816078429cff64b1b1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=4e2b5d1f549208d1fc791b816078429cff64b1b1", "patch": "@@ -238,6 +238,7 @@ parse_const_let_mutually_exclusive = `const` and `let` are mutually exclusive\n \n parse_invalid_expression_in_let_else = a `{$operator}` expression cannot be directly assigned in `let...else`\n parse_invalid_curly_in_let_else = right curly brace `{\"}\"}` before `else` in a `let...else` statement not allowed\n+parse_extra_if_in_let_else = remove the `if` if you meant to write a `let...else` statement\n \n parse_compound_assignment_expression_in_let = can't reassign to an uninitialized variable\n     .suggestion = initialize the variable"}, {"sha": "40763da0bb5470ce20924fd76da86713e47e21dd", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b5d1f549208d1fc791b816078429cff64b1b1/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b5d1f549208d1fc791b816078429cff64b1b1/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=4e2b5d1f549208d1fc791b816078429cff64b1b1", "patch": "@@ -337,7 +337,9 @@ pub(crate) struct IfExpressionMissingThenBlock {\n     #[primary_span]\n     pub if_span: Span,\n     #[subdiagnostic]\n-    pub sub: IfExpressionMissingThenBlockSub,\n+    pub missing_then_block_sub: IfExpressionMissingThenBlockSub,\n+    #[subdiagnostic]\n+    pub let_else_sub: Option<IfExpressionLetSomeSub>,\n }\n \n #[derive(Subdiagnostic)]\n@@ -348,6 +350,13 @@ pub(crate) enum IfExpressionMissingThenBlockSub {\n     AddThenBlock(#[primary_span] Span),\n }\n \n+#[derive(Subdiagnostic)]\n+#[help(parse_extra_if_in_let_else)]\n+pub(crate) struct IfExpressionLetSomeSub {\n+    #[primary_span]\n+    pub if_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_if_expression_missing_condition)]\n pub(crate) struct IfExpressionMissingCondition {"}, {"sha": "3225a309a319b6286ce8baf02c8a3dd63a23a4cb", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b5d1f549208d1fc791b816078429cff64b1b1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b5d1f549208d1fc791b816078429cff64b1b1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=4e2b5d1f549208d1fc791b816078429cff64b1b1", "patch": "@@ -11,15 +11,15 @@ use crate::errors::{\n     ComparisonOrShiftInterpretedAsGenericSugg, DoCatchSyntaxRemoved, DotDotDot, EqFieldInit,\n     ExpectedElseBlock, ExpectedEqForLetExpr, ExpectedExpressionFoundLet,\n     FieldExpressionWithGeneric, FloatLiteralRequiresIntegerPart, FoundExprWouldBeStmt,\n-    IfExpressionMissingCondition, IfExpressionMissingThenBlock, IfExpressionMissingThenBlockSub,\n-    InvalidBlockMacroSegment, InvalidComparisonOperator, InvalidComparisonOperatorSub,\n-    InvalidInterpolatedExpression, InvalidLiteralSuffixOnTupleIndex, InvalidLogicalOperator,\n-    InvalidLogicalOperatorSub, LabeledLoopInBreak, LeadingPlusNotSupported, LeftArrowOperator,\n-    LifetimeInBorrowExpression, MacroInvocationWithQualifiedPath, MalformedLoopLabel,\n-    MatchArmBodyWithoutBraces, MatchArmBodyWithoutBracesSugg, MissingCommaAfterMatchArm,\n-    MissingDotDot, MissingInInForLoop, MissingInInForLoopSub, MissingSemicolonBeforeArray,\n-    NoFieldsForFnCall, NotAsNegationOperator, NotAsNegationOperatorSub,\n-    OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n+    IfExpressionLetSomeSub, IfExpressionMissingCondition, IfExpressionMissingThenBlock,\n+    IfExpressionMissingThenBlockSub, InvalidBlockMacroSegment, InvalidComparisonOperator,\n+    InvalidComparisonOperatorSub, InvalidInterpolatedExpression, InvalidLiteralSuffixOnTupleIndex,\n+    InvalidLogicalOperator, InvalidLogicalOperatorSub, LabeledLoopInBreak, LeadingPlusNotSupported,\n+    LeftArrowOperator, LifetimeInBorrowExpression, MacroInvocationWithQualifiedPath,\n+    MalformedLoopLabel, MatchArmBodyWithoutBraces, MatchArmBodyWithoutBracesSugg,\n+    MissingCommaAfterMatchArm, MissingDotDot, MissingInInForLoop, MissingInInForLoopSub,\n+    MissingSemicolonBeforeArray, NoFieldsForFnCall, NotAsNegationOperator,\n+    NotAsNegationOperatorSub, OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n     RequireColonAfterLabeledExpression, ShiftInterpretedAsGeneric, StructLiteralNotAllowedHere,\n     StructLiteralNotAllowedHereSugg, TildeAsUnaryOperator, UnexpectedIfWithIf,\n     UnexpectedTokenAfterLabel, UnexpectedTokenAfterLabelSugg, WrapExpressionInParentheses,\n@@ -2251,9 +2251,10 @@ impl<'a> Parser<'a> {\n                     if let ExprKind::Block(_, None) = right.kind => {\n                         self.sess.emit_err(IfExpressionMissingThenBlock {\n                             if_span: lo,\n-                            sub: IfExpressionMissingThenBlockSub::UnfinishedCondition(\n-                                cond_span.shrink_to_lo().to(*binop_span)\n-                            ),\n+                            missing_then_block_sub:\n+                                IfExpressionMissingThenBlockSub::UnfinishedCondition(cond_span.shrink_to_lo().to(*binop_span)),\n+                                let_else_sub: None,\n+\n                         });\n                         std::mem::replace(right, this.mk_expr_err(binop_span.shrink_to_hi()))\n                     },\n@@ -2279,9 +2280,15 @@ impl<'a> Parser<'a> {\n             if let Some(block) = recover_block_from_condition(self) {\n                 block\n             } else {\n+                let let_else_sub = matches!(cond.kind, ExprKind::Let(..))\n+                    .then(|| IfExpressionLetSomeSub { if_span: lo });\n+\n                 self.sess.emit_err(IfExpressionMissingThenBlock {\n                     if_span: lo,\n-                    sub: IfExpressionMissingThenBlockSub::AddThenBlock(cond_span.shrink_to_hi()),\n+                    missing_then_block_sub: IfExpressionMissingThenBlockSub::AddThenBlock(\n+                        cond_span.shrink_to_hi(),\n+                    ),\n+                    let_else_sub,\n                 });\n                 self.mk_block_err(cond_span.shrink_to_hi())\n             }"}, {"sha": "3fba630435c71fb68067ac4f4200aa8d63d98d27", "filename": "tests/ui/let-else/accidental-if.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b5d1f549208d1fc791b816078429cff64b1b1/tests%2Fui%2Flet-else%2Faccidental-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b5d1f549208d1fc791b816078429cff64b1b1/tests%2Fui%2Flet-else%2Faccidental-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Faccidental-if.rs?ref=4e2b5d1f549208d1fc791b816078429cff64b1b1", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let x = Some(123);\n+    if let Some(y) = x else { //~ ERROR this `if` expression is missing a block\n+        return;\n+    };\n+}"}, {"sha": "5474a67aac45a6128940aaaa61d401600ab40705", "filename": "tests/ui/let-else/accidental-if.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b5d1f549208d1fc791b816078429cff64b1b1/tests%2Fui%2Flet-else%2Faccidental-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b5d1f549208d1fc791b816078429cff64b1b1/tests%2Fui%2Flet-else%2Faccidental-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Faccidental-if.stderr?ref=4e2b5d1f549208d1fc791b816078429cff64b1b1", "patch": "@@ -0,0 +1,19 @@\n+error: this `if` expression is missing a block after the condition\n+  --> $DIR/accidental-if.rs:3:5\n+   |\n+LL |     if let Some(y) = x else {\n+   |     ^^\n+   |\n+help: add a block here\n+  --> $DIR/accidental-if.rs:3:23\n+   |\n+LL |     if let Some(y) = x else {\n+   |                       ^\n+help: remove the `if` if you meant to write a `let...else` statement\n+  --> $DIR/accidental-if.rs:3:5\n+   |\n+LL |     if let Some(y) = x else {\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f34ccecdd45e63bb6ded49705ced491c9c5852d4", "filename": "tests/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e2b5d1f549208d1fc791b816078429cff64b1b1/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e2b5d1f549208d1fc791b816078429cff64b1b1/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=4e2b5d1f549208d1fc791b816078429cff64b1b1", "patch": "@@ -37,6 +37,11 @@ help: add a block here\n    |\n LL |     if let Some(n) = opt else {\n    |                         ^\n+help: remove the `if` if you meant to write a `let...else` statement\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:24:5\n+   |\n+LL |     if let Some(n) = opt else {\n+   |     ^^\n \n error: this `if` expression is missing a block after the condition\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:28:5"}]}