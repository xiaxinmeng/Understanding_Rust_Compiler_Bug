{"sha": "9ac91fa48b3eb479cccb5695395faed8f59ece8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYzkxZmE0OGIzZWI0NzljY2NiNTY5NTM5NWZhZWQ4ZjU5ZWNlOGU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T04:08:38Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-07T22:42:17Z"}, "message": "Improve `directory` computation during invocation collection.", "tree": {"sha": "c120b3573d6c60429d98df001c059f046d5e0d74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c120b3573d6c60429d98df001c059f046d5e0d74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ac91fa48b3eb479cccb5695395faed8f59ece8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac91fa48b3eb479cccb5695395faed8f59ece8e", "html_url": "https://github.com/rust-lang/rust/commit/9ac91fa48b3eb479cccb5695395faed8f59ece8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ac91fa48b3eb479cccb5695395faed8f59ece8e/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d759046ba685f419b3de79367e5b973c1b84105", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d759046ba685f419b3de79367e5b973c1b84105", "html_url": "https://github.com/rust-lang/rust/commit/2d759046ba685f419b3de79367e5b973c1b84105"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "4715eda8374900fb488ea6d6e5522b44a7d0d4ee", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ac91fa48b3eb479cccb5695395faed8f59ece8e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac91fa48b3eb479cccb5695395faed8f59ece8e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9ac91fa48b3eb479cccb5695395faed8f59ece8e", "patch": "@@ -615,16 +615,20 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n             ast::ItemKind::Mod(ast::Mod { inner, .. }) => {\n                 let mut paths = (*self.cx.syntax_env.paths()).clone();\n                 paths.mod_path.push(item.ident);\n-                if item.span.contains(inner) {\n+\n+                // Detect if this is an inline module (`mod m { ... }` as opposed to `mod m;`).\n+                // In the non-inline case, `inner` is never the dummy span (c.f. `parse_item_mod`).\n+                // Thus, if `inner` is the dummy span, we know the module is inline.\n+                let inline_module = item.span.contains(inner) || inner == syntax_pos::DUMMY_SP;\n+\n+                if inline_module {\n                     paths.directory.push(&*{\n                         ::attr::first_attr_value_str_by_name(&item.attrs, \"path\")\n                             .unwrap_or(item.ident.name.as_str())\n                     });\n                 } else {\n-                    paths.directory = match inner {\n-                        syntax_pos::DUMMY_SP => PathBuf::new(),\n-                        _ => PathBuf::from(self.cx.parse_sess.codemap().span_to_filename(inner)),\n-                    };\n+                    paths.directory =\n+                        PathBuf::from(self.cx.parse_sess.codemap().span_to_filename(inner));\n                     paths.directory.pop();\n                 }\n "}]}