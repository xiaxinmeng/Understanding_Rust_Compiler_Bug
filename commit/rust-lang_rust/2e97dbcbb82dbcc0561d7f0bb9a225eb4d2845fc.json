{"sha": "2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOTdkYmNiYjgyZGJjYzA1NjFkN2YwYmI5YTIyNWViNGQyODQ1ZmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-04T17:36:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-04T17:36:48Z"}, "message": "minor: use standard import style", "tree": {"sha": "f82d46ad8fd7e904ba2870f9bddfc50ae3c84a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f82d46ad8fd7e904ba2870f9bddfc50ae3c84a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc", "html_url": "https://github.com/rust-lang/rust/commit/2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87f827bfafc28669e896904bd162e3864350aeed", "url": "https://api.github.com/repos/rust-lang/rust/commits/87f827bfafc28669e896904bd162e3864350aeed", "html_url": "https://github.com/rust-lang/rust/commit/87f827bfafc28669e896904bd162e3864350aeed"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "7e02ed036d89b2e7027f7df2e18f22804a8ba829", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc", "patch": "@@ -3,14 +3,14 @@\n use std::sync::Arc;\n \n use base_db::{salsa, SourceDatabase};\n-use mbe::{ExpandError, ExpandResult, MacroDef, MacroRules};\n+use mbe::{ExpandError, ExpandResult};\n use parser::FragmentKind;\n use syntax::{\n     algo::diff,\n-    ast::{MacroStmts, NameOwner},\n+    ast::{self, NameOwner},\n     AstNode, GreenNode, Parse,\n     SyntaxKind::*,\n-    SyntaxNode,\n+    SyntaxNode, SyntaxToken,\n };\n \n use crate::{\n@@ -115,9 +115,9 @@ pub trait AstDatabase: SourceDatabase {\n pub fn expand_hypothetical(\n     db: &dyn AstDatabase,\n     actual_macro_call: MacroCallId,\n-    hypothetical_args: &syntax::ast::TokenTree,\n-    token_to_map: syntax::SyntaxToken,\n-) -> Option<(SyntaxNode, syntax::SyntaxToken)> {\n+    hypothetical_args: &ast::TokenTree,\n+    token_to_map: SyntaxToken,\n+) -> Option<(SyntaxNode, SyntaxToken)> {\n     let macro_file = MacroFile { macro_call_id: actual_macro_call };\n     let (tt, tmap_1) = mbe::syntax_node_to_token_tree(hypothetical_args.syntax());\n     let range =\n@@ -141,10 +141,10 @@ fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n     match id.kind {\n         MacroDefKind::Declarative(ast_id) => match ast_id.to_node(db) {\n-            syntax::ast::Macro::MacroRules(macro_rules) => {\n+            ast::Macro::MacroRules(macro_rules) => {\n                 let arg = macro_rules.token_tree()?;\n                 let (tt, tmap) = mbe::ast_to_token_tree(&arg);\n-                let rules = match MacroRules::parse(&tt) {\n+                let rules = match mbe::MacroRules::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n                         let name = macro_rules.name().map(|n| n.to_string()).unwrap_or_default();\n@@ -154,10 +154,10 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander,\n                 };\n                 Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n             }\n-            syntax::ast::Macro::MacroDef(macro_def) => {\n+            ast::Macro::MacroDef(macro_def) => {\n                 let arg = macro_def.body()?;\n                 let (tt, tmap) = mbe::ast_to_token_tree(&arg);\n-                let rules = match MacroDef::parse(&tt) {\n+                let rules = match mbe::MacroDef::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n                         let name = macro_def.name().map(|n| n.to_string()).unwrap_or_default();\n@@ -403,7 +403,7 @@ fn is_self_replicating(from: &SyntaxNode, to: &SyntaxNode) -> bool {\n     if diff(from, to).is_empty() {\n         return true;\n     }\n-    if let Some(stmts) = MacroStmts::cast(from.clone()) {\n+    if let Some(stmts) = ast::MacroStmts::cast(from.clone()) {\n         if stmts.statements().any(|stmt| diff(stmt.syntax(), to).is_empty()) {\n             return true;\n         }"}]}