{"sha": "78d6b88f211cc9faf88815ce7fb1a91546cfce15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDZiODhmMjExY2M5ZmFmODg4MTVjZTdmYjFhOTE1NDZjZmNlMTU=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-14T07:59:30Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-14T08:39:28Z"}, "message": "Add more tests, refactor array lengths/consteval work\n\nFix #2922: add unknown length as a condition for a type having unknown.\n\nIncorporate reviews:\n\n* Extract some of the const evaluation workings into functions\n* Add fixmes on the hacks\n* Add tests for impls on specific array lengths (these work!!! \ud83d\ude01)\n* Add tests for const generics (indeed we don't support it yet)", "tree": {"sha": "6b54a10d2eeee6fc03d63015e4b7c9838b4b02b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b54a10d2eeee6fc03d63015e4b7c9838b4b02b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d6b88f211cc9faf88815ce7fb1a91546cfce15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d6b88f211cc9faf88815ce7fb1a91546cfce15", "html_url": "https://github.com/rust-lang/rust/commit/78d6b88f211cc9faf88815ce7fb1a91546cfce15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d6b88f211cc9faf88815ce7fb1a91546cfce15/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c600664e5a599bbe3f0254274211474b89914a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c600664e5a599bbe3f0254274211474b89914a", "html_url": "https://github.com/rust-lang/rust/commit/32c600664e5a599bbe3f0254274211474b89914a"}], "stats": {"total": 258, "additions": 223, "deletions": 35}, "files": [{"sha": "d7065ff2b3ead0e2b010fff321220222c0c2573e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=78d6b88f211cc9faf88815ce7fb1a91546cfce15", "patch": "@@ -52,7 +52,9 @@ use hir_def::{\n };\n use hir_expand::{diagnostics::DiagnosticSink, name::name, MacroDefKind};\n use hir_ty::{\n-    autoderef, could_unify,\n+    autoderef,\n+    consteval::ConstExtension,\n+    could_unify,\n     method_resolution::{self, def_crates, TyFingerprint},\n     primitive::UintTy,\n     subst_prefix,\n@@ -1910,6 +1912,7 @@ impl Type {\n                     substs.iter(&Interner).filter_map(|a| a.ty(&Interner)).any(go)\n                 }\n \n+                TyKind::Array(_ty, len) if len.is_unknown() => true,\n                 TyKind::Array(ty, _)\n                 | TyKind::Slice(ty)\n                 | TyKind::Raw(_, ty)"}, {"sha": "6a3259b2722222241318d613748b903ef6e19fe5", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=78d6b88f211cc9faf88815ce7fb1a91546cfce15", "patch": "@@ -80,6 +80,8 @@ pub enum TypeRef {\n     Path(Path),\n     RawPtr(Box<TypeRef>, Mutability),\n     Reference(Box<TypeRef>, Option<LifetimeRef>, Mutability),\n+    // FIXME: for full const generics, the latter element (length) here is going to have to be an\n+    // expression that is further lowered later in hir_ty.\n     Array(Box<TypeRef>, ConstScalar),\n     Slice(Box<TypeRef>),\n     /// A fn pointer. Last element of the vector is the return type.\n@@ -141,6 +143,10 @@ impl TypeRef {\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n             ast::Type::ArrayType(inner) => {\n+                // FIXME: This is a hack. We should probably reuse the machinery of\n+                // `hir_def::body::lower` to lower this into an `Expr` and then evaluate it at the\n+                // `hir_ty` level, which would allow knowing the type of:\n+                // let v: [u8; 2 + 2] = [0u8; 4];\n                 let len = inner\n                     .expr()\n                     .map(ConstScalar::usize_from_literal_expr)\n@@ -313,6 +319,10 @@ pub enum ConstScalar {\n     Usize(u64),\n \n     /// Case of an unknown value that rustc might know but we don't\n+    // FIXME: this is a hack to get around chalk not being able to represent unevaluatable\n+    // constants\n+    // https://github.com/rust-analyzer/rust-analyzer/pull/8813#issuecomment-840679177\n+    // https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/Handling.20non.20evaluatable.20constants'.20equality/near/238386348\n     Unknown,\n }\n \n@@ -326,6 +336,8 @@ impl std::fmt::Display for ConstScalar {\n }\n \n impl ConstScalar {\n+    // FIXME: as per the comments on `TypeRef::Array`, this evaluation should not happen at this\n+    // parse stage.\n     fn usize_from_literal_expr(expr: ast::Expr) -> ConstScalar {\n         match expr {\n             ast::Expr::Literal(lit) => {"}, {"sha": "a4a430f30fef0935e93f48ea694cf85bdda3eacd", "filename": "crates/hir_ty/src/consteval.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=78d6b88f211cc9faf88815ce7fb1a91546cfce15", "patch": "@@ -0,0 +1,64 @@\n+//! Constant evaluation details\n+\n+use std::convert::TryInto;\n+\n+use hir_def::{\n+    builtin_type::BuiltinUint,\n+    expr::{Expr, Literal},\n+    type_ref::ConstScalar,\n+};\n+\n+use crate::{Const, ConstData, ConstValue, Interner, TyKind};\n+\n+/// Extension trait for [`Const`]\n+pub trait ConstExtension {\n+    /// Is a [`Const`] unknown?\n+    fn is_unknown(&self) -> bool;\n+}\n+\n+impl ConstExtension for Const {\n+    fn is_unknown(&self) -> bool {\n+        match self.data(&Interner).value {\n+            // interned Unknown\n+            chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst {\n+                interned: ConstScalar::Unknown,\n+            }) => true,\n+\n+            // interned concrete anything else\n+            chalk_ir::ConstValue::Concrete(..) => false,\n+\n+            _ => {\n+                log::error!(\"is_unknown was called on a non-concrete constant value! {:?}\", self);\n+                true\n+            }\n+        }\n+    }\n+}\n+\n+/// Extension trait for [`Expr`]\n+pub trait ExprEval {\n+    /// Attempts to evaluate the expression as a target usize.\n+    fn eval_usize(&self) -> Option<u64>;\n+}\n+\n+impl ExprEval for Expr {\n+    // FIXME: support more than just evaluating literals\n+    fn eval_usize(&self) -> Option<u64> {\n+        match self {\n+            Expr::Literal(Literal::Uint(v, None))\n+            | Expr::Literal(Literal::Uint(v, Some(BuiltinUint::Usize))) => (*v).try_into().ok(),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+/// Interns a possibly-unknown target usize\n+pub fn usize_const(value: Option<u64>) -> Const {\n+    ConstData {\n+        ty: TyKind::Scalar(chalk_ir::Scalar::Uint(chalk_ir::UintTy::Usize)).intern(&Interner),\n+        value: ConstValue::Concrete(chalk_ir::ConcreteConst {\n+            interned: value.map(|value| ConstScalar::Usize(value)).unwrap_or(ConstScalar::Unknown),\n+        }),\n+    }\n+    .intern(&Interner)\n+}"}, {"sha": "04fc2f12b53675cc2f54e8c6475d538a5bee94dd", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=78d6b88f211cc9faf88815ce7fb1a91546cfce15", "patch": "@@ -1,18 +1,13 @@\n //! Type inference for expressions.\n \n-use std::{\n-    convert::TryInto,\n-    iter::{repeat, repeat_with},\n-};\n+use std::iter::{repeat, repeat_with};\n use std::{mem, sync::Arc};\n \n-use chalk_ir::{cast::Cast, fold::Shift, ConstData, Mutability, TyVariableKind};\n+use chalk_ir::{cast::Cast, fold::Shift, Mutability, TyVariableKind};\n use hir_def::{\n-    builtin_type::BuiltinUint,\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n-    type_ref::ConstScalar,\n     AssocContainerId, FieldId, Lookup,\n };\n use hir_expand::name::{name, Name};\n@@ -21,16 +16,16 @@ use syntax::ast::RangeOp;\n \n use crate::{\n     autoderef,\n+    consteval::{self, ExprEval},\n     lower::lower_to_chalk_mutability,\n     mapping::from_chalk,\n     method_resolution, op,\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     traits::FnTrait,\n     utils::{generics, Generics},\n-    AdtId, Binders, CallableDefId, ConcreteConst, ConstValue, FnPointer, FnSig, FnSubst,\n-    InEnvironment, Interner, ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty,\n-    TyBuilder, TyExt, TyKind,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n+    ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n };\n \n use super::{\n@@ -743,25 +738,11 @@ impl<'a> InferenceContext<'a> {\n                         );\n \n                         let repeat_expr = &self.body.exprs[*repeat];\n-                        match repeat_expr {\n-                            Expr::Literal(Literal::Uint(v, None))\n-                            | Expr::Literal(Literal::Uint(v, Some(BuiltinUint::Usize))) => {\n-                                (*v).try_into().ok()\n-                            }\n-                            _ => None,\n-                        }\n+                        repeat_expr.eval_usize()\n                     }\n                 };\n \n-                let cd = ConstData {\n-                    ty: TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n-                    value: ConstValue::Concrete(chalk_ir::ConcreteConst {\n-                        interned: len\n-                            .map(|len| ConstScalar::Usize(len))\n-                            .unwrap_or(ConstScalar::Unknown),\n-                    }),\n-                };\n-                TyKind::Array(elem_ty, cd.intern(&Interner)).intern(&Interner)\n+                TyKind::Array(elem_ty, consteval::usize_const(len)).intern(&Interner)\n             }\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n@@ -772,13 +753,7 @@ impl<'a> InferenceContext<'a> {\n                 Literal::ByteString(bs) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(&Interner);\n \n-                    let len = ConstData {\n-                        ty: TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n-                        value: ConstValue::Concrete(ConcreteConst {\n-                            interned: ConstScalar::Usize(bs.len() as u64),\n-                        }),\n-                    }\n-                    .intern(&Interner);\n+                    let len = consteval::usize_const(Some(bs.len() as u64));\n \n                     let array_type = TyKind::Array(byte_type, len).intern(&Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(&Interner)"}, {"sha": "15b61bedc18f004d95c66415e9119346723d7caa", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=78d6b88f211cc9faf88815ce7fb1a91546cfce15", "patch": "@@ -10,6 +10,7 @@ mod autoderef;\n mod builder;\n mod chalk_db;\n mod chalk_ext;\n+pub mod consteval;\n mod infer;\n mod interner;\n mod lower;"}, {"sha": "a9cd42186ed01af5c1eb42c99777ea520f329021", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=78d6b88f211cc9faf88815ce7fb1a91546cfce15", "patch": "@@ -1271,12 +1271,14 @@ fn infer_array() {\n \n             let b = [a, [\"b\"]];\n             let x: [u8; 0] = [];\n+            // FIXME: requires const evaluation/taking type from rhs somehow\n+            let y: [u8; 2+2] = [1,2,3,4];\n         }\n         \"#,\n         expect![[r#\"\n             8..9 'x': &str\n             17..18 'y': isize\n-            27..292 '{     ... []; }': ()\n+            27..395 '{     ...,4]; }': ()\n             37..38 'a': [&str; 1]\n             41..44 '[x]': [&str; 1]\n             42..43 'x': &str\n@@ -1326,6 +1328,12 @@ fn infer_array() {\n             259..262 '\"b\"': &str\n             274..275 'x': [u8; 0]\n             287..289 '[]': [u8; 0]\n+            368..369 'y': [u8; _]\n+            383..392 '[1,2,3,4]': [u8; 4]\n+            384..385 '1': u8\n+            386..387 '2': u8\n+            388..389 '3': u8\n+            390..391 '4': u8\n         \"#]],\n     );\n }"}, {"sha": "f80cf987985e1d9e70c4474b781a1c42bc0d4518", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=78d6b88f211cc9faf88815ce7fb1a91546cfce15", "patch": "@@ -3474,3 +3474,100 @@ fn main(){\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn array_length() {\n+    check_infer(\n+        r#\"\n+trait T {\n+    type Output;\n+    fn do_thing(&self) -> Self::Output;\n+}\n+\n+impl T for [u8; 4] {\n+    type Output = usize;\n+    fn do_thing(&self) -> Self::Output {\n+        2\n+    }\n+}\n+\n+impl T for [u8; 2] {\n+    type Output = u8;\n+    fn do_thing(&self) -> Self::Output {\n+        2\n+    }\n+}\n+\n+fn main() {\n+    let v = [0u8; 2];\n+    let v2 = v.do_thing();\n+    let v3 = [0u8; 4];\n+    let v4 = v3.do_thing();\n+}\n+\"#,\n+        expect![[r#\"\n+            44..48 'self': &Self\n+            133..137 'self': &[u8; 4]\n+            155..172 '{     ...     }': usize\n+            165..166 '2': usize\n+            236..240 'self': &[u8; 2]\n+            258..275 '{     ...     }': u8\n+            268..269 '2': u8\n+            289..392 '{     ...g(); }': ()\n+            299..300 'v': [u8; 2]\n+            303..311 '[0u8; 2]': [u8; 2]\n+            304..307 '0u8': u8\n+            309..310 '2': usize\n+            321..323 'v2': u8\n+            326..327 'v': [u8; 2]\n+            326..338 'v.do_thing()': u8\n+            348..350 'v3': [u8; 4]\n+            353..361 '[0u8; 4]': [u8; 4]\n+            354..357 '0u8': u8\n+            359..360 '4': usize\n+            371..373 'v4': usize\n+            376..378 'v3': [u8; 4]\n+            376..389 'v3.do_thing()': usize\n+        \"#]],\n+    )\n+}\n+\n+// FIXME: We should infer the length of the returned array :)\n+#[test]\n+fn const_generics() {\n+    check_infer(\n+        r#\"\n+trait T {\n+    type Output;\n+    fn do_thing(&self) -> Self::Output;\n+}\n+\n+impl<const L: usize> T for [u8; L] {\n+    type Output = [u8; L];\n+    fn do_thing(&self) -> Self::Output {\n+        *self\n+    }\n+}\n+\n+fn main() {\n+    let v = [0u8; 2];\n+    let v2 = v.do_thing();\n+}\n+\"#,\n+        expect![[r#\"\n+            44..48 'self': &Self\n+            151..155 'self': &[u8; _]\n+            173..194 '{     ...     }': [u8; _]\n+            183..188 '*self': [u8; _]\n+            184..188 'self': &[u8; _]\n+            208..260 '{     ...g(); }': ()\n+            218..219 'v': [u8; 2]\n+            222..230 '[0u8; 2]': [u8; 2]\n+            223..226 '0u8': u8\n+            228..229 '2': usize\n+            240..242 'v2': [u8; _]\n+            245..246 'v': [u8; 2]\n+            245..257 'v.do_thing()': [u8; _]\n+        \"#]],\n+    )\n+}"}, {"sha": "36589203d5a97b2f894aa7f77261dfbd52ed8ffe", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d6b88f211cc9faf88815ce7fb1a91546cfce15/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=78d6b88f211cc9faf88815ce7fb1a91546cfce15", "patch": "@@ -198,6 +198,34 @@ fn main() {\n         )\n     }\n \n+    /// https://github.com/rust-analyzer/rust-analyzer/issues/2922\n+    #[test]\n+    fn regression_issue_2922() {\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+fn main() {\n+    let $0v = [0.0; 2];\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let v: [f64; 2] = [0.0; 2];\n+}\n+\"#,\n+        );\n+        // note: this may break later if we add more consteval. it just needs to be something that our\n+        // consteval engine doesn't understand\n+        check_assist_not_applicable(\n+            add_explicit_type,\n+            r#\"\n+fn main() {\n+    let $0l = [0.0; 2+2];\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn default_generics_should_not_be_added() {\n         check_assist("}]}