{"sha": "ebee483e248d11b88839db70d41c376c4f51b276", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZWU0ODNlMjQ4ZDExYjg4ODM5ZGI3MGQ0MWMzNzZjNGY1MWIyNzY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-28T19:30:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-06-04T07:51:41Z"}, "message": "Add doc keyword support", "tree": {"sha": "cc6bc817898dd1d82e53a8457fb5d95588840cc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc6bc817898dd1d82e53a8457fb5d95588840cc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebee483e248d11b88839db70d41c376c4f51b276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebee483e248d11b88839db70d41c376c4f51b276", "html_url": "https://github.com/rust-lang/rust/commit/ebee483e248d11b88839db70d41c376c4f51b276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebee483e248d11b88839db70d41c376c4f51b276/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d024d6a51e05f0fa03d954d69f2863519922e00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d024d6a51e05f0fa03d954d69f2863519922e00c", "html_url": "https://github.com/rust-lang/rust/commit/d024d6a51e05f0fa03d954d69f2863519922e00c"}], "stats": {"total": 222, "additions": 166, "deletions": 56}, "files": [{"sha": "ab03fe302b4a381a2e1ef368fa349d4f6c7d29dc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -26,7 +26,7 @@ use syntax::attr;\n use syntax::codemap::{dummy_spanned, Spanned};\n use syntax::feature_gate::UnstableFeatures;\n use syntax::ptr::P;\n-use syntax::symbol::keywords;\n+use syntax::symbol::keywords::{self, Keyword};\n use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{self, DUMMY_SP, Pos, FileName};\n \n@@ -54,6 +54,7 @@ use std::{mem, slice, vec};\n use std::iter::{FromIterator, once};\n use rustc_data_structures::sync::Lrc;\n use std::rc::Rc;\n+use std::str::FromStr;\n use std::cell::RefCell;\n use std::sync::Arc;\n use std::u32;\n@@ -177,7 +178,7 @@ impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx>\n             _ => unreachable!(),\n         }\n \n-        let ExternalCrate { name, src, primitives, .. } = LOCAL_CRATE.clean(cx);\n+        let ExternalCrate { name, src, primitives, keywords, .. } = LOCAL_CRATE.clean(cx);\n         {\n             let m = match module.inner {\n                 ModuleItem(ref mut m) => m,\n@@ -195,6 +196,18 @@ impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx>\n                     inner: PrimitiveItem(prim),\n                 }\n             }));\n+            m.items.extend(keywords.iter().map(|&(def_id, ref kw, ref attrs)| {\n+                Item {\n+                    source: Span::empty(),\n+                    name: Some(kw.clone()),\n+                    attrs: attrs.clone(),\n+                    visibility: Some(Public),\n+                    stability: get_stability(cx, def_id),\n+                    deprecation: get_deprecation(cx, def_id),\n+                    def_id,\n+                    inner: KeywordItem(kw.clone()),\n+                }\n+            }));\n         }\n \n         let mut access_levels = cx.access_levels.borrow_mut();\n@@ -220,6 +233,7 @@ pub struct ExternalCrate {\n     pub src: FileName,\n     pub attrs: Attributes,\n     pub primitives: Vec<(DefId, PrimitiveType, Attributes)>,\n+    pub keywords: Vec<(DefId, String, Attributes)>,\n }\n \n impl Clean<ExternalCrate> for CrateNum {\n@@ -286,11 +300,54 @@ impl Clean<ExternalCrate> for CrateNum {\n               .filter_map(as_primitive).collect()\n         };\n \n+        let as_keyword = |def: Def| {\n+            if let Def::Mod(def_id) = def {\n+                let attrs = cx.tcx.get_attrs(def_id).clean(cx);\n+                let mut keyword = None;\n+                for attr in attrs.lists(\"doc\") {\n+                    if let Some(v) = attr.value_str() {\n+                        if attr.check_name(\"keyword\") {\n+                            keyword = Keyword::from_str(&v.as_str()).ok()\n+                                                                    .map(|x| x.name().to_string());\n+                            if keyword.is_some() {\n+                                break\n+                            }\n+                            // FIXME: should warn on unknown keywords?\n+                        }\n+                    }\n+                }\n+                return keyword.map(|p| (def_id, p, attrs));\n+            }\n+            None\n+        };\n+        let keywords = if root.is_local() {\n+            cx.tcx.hir.krate().module.item_ids.iter().filter_map(|&id| {\n+                let item = cx.tcx.hir.expect_item(id.id);\n+                match item.node {\n+                    hir::ItemMod(_) => {\n+                        as_keyword(Def::Mod(cx.tcx.hir.local_def_id(id.id)))\n+                    }\n+                    hir::ItemUse(ref path, hir::UseKind::Single)\n+                    if item.vis == hir::Visibility::Public => {\n+                        as_keyword(path.def).map(|(_, prim, attrs)| {\n+                            // Pretend the primitive is local.\n+                            (cx.tcx.hir.local_def_id(id.id), prim, attrs)\n+                        })\n+                    }\n+                    _ => None\n+                }\n+            }).collect()\n+        } else {\n+            cx.tcx.item_children(root).iter().map(|item| item.def)\n+              .filter_map(as_keyword).collect()\n+        };\n+\n         ExternalCrate {\n             name: cx.tcx.crate_name(*self).to_string(),\n             src: krate_src,\n             attrs: cx.tcx.get_attrs(root).clean(cx),\n             primitives,\n+            keywords,\n         }\n     }\n }\n@@ -397,6 +454,9 @@ impl Item {\n     pub fn is_extern_crate(&self) -> bool {\n         self.type_() == ItemType::ExternCrate\n     }\n+    pub fn is_keyword(&self) -> bool {\n+        self.type_() == ItemType::Keyword\n+    }\n \n     pub fn is_stripped(&self) -> bool {\n         match self.inner { StrippedItem(..) => true, _ => false }\n@@ -475,6 +535,7 @@ pub enum ItemEnum {\n     AssociatedTypeItem(Vec<TyParamBound>, Option<Type>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemEnum>),\n+    KeywordItem(String),\n }\n \n impl ItemEnum {"}, {"sha": "9b8ada1f6e6b29968e9db708499584b8a01ce396", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -42,6 +42,7 @@ pub enum ItemType {\n     AssociatedConst = 18,\n     Union           = 19,\n     ForeignType     = 20,\n+    Keyword         = 21,\n }\n \n \n@@ -50,6 +51,7 @@ pub enum NameSpace {\n     Type,\n     Value,\n     Macro,\n+    Keyword,\n }\n \n impl<'a> From<&'a clean::Item> for ItemType {\n@@ -83,6 +85,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::AssociatedConstItem(..) => ItemType::AssociatedConst,\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n             clean::ForeignTypeItem         => ItemType::ForeignType,\n+            clean::KeywordItem(..)         => ItemType::Keyword,\n             clean::StrippedItem(..)        => unreachable!(),\n         }\n     }\n@@ -131,6 +134,7 @@ impl ItemType {\n             ItemType::Constant        => \"constant\",\n             ItemType::AssociatedConst => \"associatedconstant\",\n             ItemType::ForeignType     => \"foreigntype\",\n+            ItemType::Keyword         => \"keyword\",\n         }\n     }\n \n@@ -159,6 +163,8 @@ impl ItemType {\n             ItemType::AssociatedConst => NameSpace::Value,\n \n             ItemType::Macro => NameSpace::Macro,\n+\n+            ItemType::Keyword => NameSpace::Keyword,\n         }\n     }\n }\n@@ -172,13 +178,15 @@ impl fmt::Display for ItemType {\n pub const NAMESPACE_TYPE: &'static str = \"t\";\n pub const NAMESPACE_VALUE: &'static str = \"v\";\n pub const NAMESPACE_MACRO: &'static str = \"m\";\n+pub const NAMESPACE_KEYWORD: &'static str = \"k\";\n \n impl NameSpace {\n     pub fn to_static_str(&self) -> &'static str {\n         match *self {\n             NameSpace::Type => NAMESPACE_TYPE,\n             NameSpace::Value => NAMESPACE_VALUE,\n             NameSpace::Macro => NAMESPACE_MACRO,\n+            NameSpace::Keyword => NAMESPACE_KEYWORD,\n         }\n     }\n }"}, {"sha": "123e6fc53ad3165da63f68960220b5f18eb35510", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 41, "deletions": 47, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -1541,6 +1541,7 @@ struct AllTypes {\n     typedefs: HashSet<ItemEntry>,\n     statics: HashSet<ItemEntry>,\n     constants: HashSet<ItemEntry>,\n+    keywords: HashSet<ItemEntry>,\n }\n \n impl AllTypes {\n@@ -1556,6 +1557,7 @@ impl AllTypes {\n             typedefs: HashSet::with_capacity(100),\n             statics: HashSet::with_capacity(100),\n             constants: HashSet::with_capacity(100),\n+            keywords: HashSet::with_capacity(10),\n         }\n     }\n \n@@ -2063,12 +2065,13 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::StaticItem(..) | clean::ForeignStaticItem(..) => write!(fmt, \"Static \")?,\n             clean::ConstantItem(..) => write!(fmt, \"Constant \")?,\n             clean::ForeignTypeItem => write!(fmt, \"Foreign Type \")?,\n+            clean::KeywordItem(..) => write!(fmt, \"Keyword \")?,\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n             }\n         }\n-        if !self.item.is_primitive() {\n+        if !self.item.is_primitive() && !self.item.is_keyword() {\n             let cur = &self.cx.current;\n             let amt = if self.item.is_mod() { cur.len() - 1 } else { cur.len() };\n             for (i, component) in cur.iter().enumerate().take(amt) {\n@@ -2126,6 +2129,7 @@ impl<'a> fmt::Display for Item<'a> {\n                 item_static(fmt, self.cx, self.item, i),\n             clean::ConstantItem(ref c) => item_constant(fmt, self.cx, self.item, c),\n             clean::ForeignTypeItem => item_foreign_type(fmt, self.cx, self.item),\n+            clean::KeywordItem(ref k) => item_keyword(fmt, self.cx, self.item, k),\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -2353,29 +2357,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 write!(w, \"</table>\")?;\n             }\n             curty = myty;\n-            let (short, name) = match myty.unwrap() {\n-                ItemType::ExternCrate |\n-                ItemType::Import          => (\"reexports\", \"Re-exports\"),\n-                ItemType::Module          => (\"modules\", \"Modules\"),\n-                ItemType::Struct          => (\"structs\", \"Structs\"),\n-                ItemType::Union           => (\"unions\", \"Unions\"),\n-                ItemType::Enum            => (\"enums\", \"Enums\"),\n-                ItemType::Function        => (\"functions\", \"Functions\"),\n-                ItemType::Typedef         => (\"types\", \"Type Definitions\"),\n-                ItemType::Static          => (\"statics\", \"Statics\"),\n-                ItemType::Constant        => (\"constants\", \"Constants\"),\n-                ItemType::Trait           => (\"traits\", \"Traits\"),\n-                ItemType::Impl            => (\"impls\", \"Implementations\"),\n-                ItemType::TyMethod        => (\"tymethods\", \"Type Methods\"),\n-                ItemType::Method          => (\"methods\", \"Methods\"),\n-                ItemType::StructField     => (\"fields\", \"Struct Fields\"),\n-                ItemType::Variant         => (\"variants\", \"Variants\"),\n-                ItemType::Macro           => (\"macros\", \"Macros\"),\n-                ItemType::Primitive       => (\"primitives\", \"Primitive Types\"),\n-                ItemType::AssociatedType  => (\"associated-types\", \"Associated Types\"),\n-                ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n-                ItemType::ForeignType     => (\"foreign-types\", \"Foreign Types\"),\n-            };\n+            let (short, name) = item_ty_to_strs(&myty.unwrap());\n             write!(w, \"<h2 id='{id}' class='section-header'>\\\n                        <a href=\\\"#{id}\\\">{name}</a></h2>\\n<table>\",\n                    id = derive_id(short.to_owned()), name = name)?;\n@@ -4360,6 +4342,33 @@ fn sidebar_enum(fmt: &mut fmt::Formatter, it: &clean::Item,\n     Ok(())\n }\n \n+fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n+    match *ty {\n+        ItemType::ExternCrate |\n+        ItemType::Import          => (\"reexports\", \"Re-exports\"),\n+        ItemType::Module          => (\"modules\", \"Modules\"),\n+        ItemType::Struct          => (\"structs\", \"Structs\"),\n+        ItemType::Union           => (\"unions\", \"Unions\"),\n+        ItemType::Enum            => (\"enums\", \"Enums\"),\n+        ItemType::Function        => (\"functions\", \"Functions\"),\n+        ItemType::Typedef         => (\"types\", \"Type Definitions\"),\n+        ItemType::Static          => (\"statics\", \"Statics\"),\n+        ItemType::Constant        => (\"constants\", \"Constants\"),\n+        ItemType::Trait           => (\"traits\", \"Traits\"),\n+        ItemType::Impl            => (\"impls\", \"Implementations\"),\n+        ItemType::TyMethod        => (\"tymethods\", \"Type Methods\"),\n+        ItemType::Method          => (\"methods\", \"Methods\"),\n+        ItemType::StructField     => (\"fields\", \"Struct Fields\"),\n+        ItemType::Variant         => (\"variants\", \"Variants\"),\n+        ItemType::Macro           => (\"macros\", \"Macros\"),\n+        ItemType::Primitive       => (\"primitives\", \"Primitive Types\"),\n+        ItemType::AssociatedType  => (\"associated-types\", \"Associated Types\"),\n+        ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n+        ItemType::ForeignType     => (\"foreign-types\", \"Foreign Types\"),\n+        ItemType::Keyword         => (\"keywords\", \"Keywords\"),\n+    }\n+}\n+\n fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n                   items: &[clean::Item]) -> fmt::Result {\n     let mut sidebar = String::new();\n@@ -4379,29 +4388,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n                    ItemType::TyMethod, ItemType::Method, ItemType::StructField, ItemType::Variant,\n                    ItemType::AssociatedType, ItemType::AssociatedConst, ItemType::ForeignType] {\n         if items.iter().any(|it| !it.is_stripped() && it.type_() == myty) {\n-            let (short, name) = match myty {\n-                ItemType::ExternCrate |\n-                ItemType::Import          => (\"reexports\", \"Re-exports\"),\n-                ItemType::Module          => (\"modules\", \"Modules\"),\n-                ItemType::Struct          => (\"structs\", \"Structs\"),\n-                ItemType::Union           => (\"unions\", \"Unions\"),\n-                ItemType::Enum            => (\"enums\", \"Enums\"),\n-                ItemType::Function        => (\"functions\", \"Functions\"),\n-                ItemType::Typedef         => (\"types\", \"Type Definitions\"),\n-                ItemType::Static          => (\"statics\", \"Statics\"),\n-                ItemType::Constant        => (\"constants\", \"Constants\"),\n-                ItemType::Trait           => (\"traits\", \"Traits\"),\n-                ItemType::Impl            => (\"impls\", \"Implementations\"),\n-                ItemType::TyMethod        => (\"tymethods\", \"Type Methods\"),\n-                ItemType::Method          => (\"methods\", \"Methods\"),\n-                ItemType::StructField     => (\"fields\", \"Struct Fields\"),\n-                ItemType::Variant         => (\"variants\", \"Variants\"),\n-                ItemType::Macro           => (\"macros\", \"Macros\"),\n-                ItemType::Primitive       => (\"primitives\", \"Primitive Types\"),\n-                ItemType::AssociatedType  => (\"associated-types\", \"Associated Types\"),\n-                ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n-                ItemType::ForeignType     => (\"foreign-types\", \"Foreign Types\"),\n-            };\n+            let (short, name) = item_ty_to_strs(&myty);\n             sidebar.push_str(&format!(\"<li><a href=\\\"#{id}\\\">{name}</a></li>\",\n                                       id = short,\n                                       name = name));\n@@ -4462,6 +4449,13 @@ fn item_primitive(w: &mut fmt::Formatter, cx: &Context,\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n }\n \n+fn item_keyword(w: &mut fmt::Formatter, cx: &Context,\n+                it: &clean::Item,\n+                _p: &str) -> fmt::Result {\n+    document(w, cx, it)?;\n+    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+}\n+\n const BASIC_KEYWORDS: &'static str = \"rust, rustlang, rust-lang\";\n \n fn make_item_keywords(it: &clean::Item) -> String {"}, {"sha": "983da51779ca25a6094a245a30ebf896a5adf85f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -38,7 +38,8 @@\n                      \"constant\",\n                      \"associatedconstant\",\n                      \"union\",\n-                     \"foreigntype\"];\n+                     \"foreigntype\",\n+                     \"keyword\"];\n \n     var search_input = document.getElementsByClassName('search-input')[0];\n \n@@ -158,6 +159,7 @@\n \n     // used for special search precedence\n     var TY_PRIMITIVE = itemTypes.indexOf(\"primitive\");\n+    var TY_KEYWORD = itemTypes.indexOf(\"keyword\");\n \n     onEach(document.getElementsByClassName('js-only'), function(e) {\n         removeClass(e, 'js-only');\n@@ -530,11 +532,13 @@\n                     b = bbb.index;\n                     if (a !== b) { return a - b; }\n \n-                    // special precedence for primitive pages\n-                    if ((aaa.item.ty === TY_PRIMITIVE) && (bbb.item.ty !== TY_PRIMITIVE)) {\n+                    // special precedence for primitive and keyword pages\n+                    if ((aaa.item.ty === TY_PRIMITIVE && bbb.item.ty !== TY_KEYWORD) ||\n+                        (aaa.item.ty === TY_KEYWORD && bbb.item.ty !== TY_PRIMITIVE)) {\n                         return -1;\n                     }\n-                    if ((bbb.item.ty === TY_PRIMITIVE) && (aaa.item.ty !== TY_PRIMITIVE)) {\n+                    if ((bbb.item.ty === TY_PRIMITIVE && aaa.item.ty !== TY_PRIMITIVE) ||\n+                        (bbb.item.ty === TY_KEYWORD && aaa.item.ty !== TY_KEYWORD)) {\n                         return 1;\n                     }\n \n@@ -1206,7 +1210,7 @@\n                 displayPath = item.path + '::';\n                 href = rootPath + item.path.replace(/::/g, '/') + '/' +\n                        name + '/index.html';\n-            } else if (type === \"primitive\") {\n+            } else if (type === \"primitive\" || type === \"keyword\") {\n                 displayPath = \"\";\n                 href = rootPath + item.path.replace(/::/g, '/') +\n                        '/' + type + '.' + name + '.html';\n@@ -1700,6 +1704,7 @@\n         block(\"fn\", \"Functions\");\n         block(\"type\", \"Type Definitions\");\n         block(\"foreigntype\", \"Foreign Types\");\n+        block(\"keyword\", \"Keywords\");\n     }\n \n     window.initSidebarItems = initSidebarItems;"}, {"sha": "d684db152df0129aff972b2570da44eb8a0555fd", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -628,6 +628,11 @@ tr.result span.primitive::after {\n \tfont-style: italic;\n }\n \n+tr.result span.keyword::after {\n+\tcontent: ' (keyword)';\n+\tfont-style: italic;\n+}\n+\n body.blur > :not(#help) {\n \tfilter: blur(8px);\n \t-webkit-filter: blur(8px);"}, {"sha": "7add0e21f548c7b4f16e361f2ee21a6721b1246a", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -128,6 +128,7 @@ pre {\n .content .highlighted.constant,\n .content .highlighted.static { background-color: #0063cc; }\n .content .highlighted.primitive { background-color: #00708a; }\n+.content .highlighted.keyword { background-color: #884719; }\n \n .content span.enum, .content a.enum, .block a.current.enum { color: #82b089; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #2dbfb8; }\n@@ -145,6 +146,7 @@ pre {\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,\n .content .fnname{ color: #2BAB63; }\n+.content span.keyword, .content a.keyword, .block a.current.keyword { color: #de5249; }\n \n pre.rust .comment { color: #8d8d8b; }\n pre.rust .doccomment { color: #8ca375; }\n@@ -209,7 +211,7 @@ a.test-arrow {\n \tcolor: grey;\n }\n \n-tr.result span.primitive::after {\n+tr.result span.primitive::after, tr.result span.keyword::after {\n \tcolor: #ddd;\n }\n "}, {"sha": "7d9980363de9c582021c6b311a401209abc76177", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -128,6 +128,7 @@ pre {\n .content .highlighted.constant,\n .content .highlighted.static { background-color: #c3e0ff; }\n .content .highlighted.primitive { background-color: #9aecff; }\n+.content .highlighted.keyword { background-color: #f99650; }\n \n .content span.enum, .content a.enum, .block a.current.enum { color: #508157; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #ad448e; }\n@@ -145,6 +146,7 @@ pre {\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,\n .content .fnname { color: #9a6e31; }\n+.content span.keyword, .content a.keyword, .block a.current.keyword { color: #de5249; }\n \n pre.rust .comment { color: #8E908C; }\n pre.rust .doccomment { color: #4D4D4C; }\n@@ -203,7 +205,7 @@ a.test-arrow {\n \tcolor: grey;\n }\n \n-tr.result span.primitive::after {\n+tr.result span.primitive::after, tr.result span.keyword::after {\n \tcolor: black;\n }\n "}, {"sha": "fe116a22eccbfa4e465a8a9d21471f8931add8c1", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -126,6 +126,9 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n \n             // Associated types are never stripped\n             clean::AssociatedTypeItem(..) => {}\n+\n+            // Keywords are never stripped\n+            clean::KeywordItem(..) => {}\n         }\n \n         let fastreturn = match i.inner {"}, {"sha": "283b41e5725a95959383d8295885633e5e8d084d", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -311,6 +311,17 @@ macro_rules! declare_keywords {(\n                 ident: Ident::with_empty_ctxt(super::Symbol($index))\n             };\n         )*\n+\n+        impl ::std::str::FromStr for Keyword {\n+            type Err = ();\n+\n+            fn from_str(s: &str) -> Result<Self, ()> {\n+                match s {\n+                    $($string => Ok($konst),)*\n+                    _ => Err(()),\n+                }\n+            }\n+        }\n     }\n \n     impl Interner {"}, {"sha": "5682fce780856b89fda154b9bbfd749b2b2edd4c", "filename": "src/test/rustdoc/keyword.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ebee483e248d11b88839db70d41c376c4f51b276/src%2Ftest%2Frustdoc%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebee483e248d11b88839db70d41c376c4f51b276/src%2Ftest%2Frustdoc%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fkeyword.rs?ref=ebee483e248d11b88839db70d41c376c4f51b276", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/index.html '//h2[@id=\"keywords\"]' 'Keywords'\n+// @has foo/index.html '//a[@href=\"keyword.match.html\"]' 'match'\n+// @has foo/keyword.match.html '//a[@class=\"keyword\"]' 'match'\n+// @has foo/keyword.match.html '//section[@id=\"main\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n+#[doc(keyword = \"match\")]\n+/// this is a test!\n+mod foo{}"}]}