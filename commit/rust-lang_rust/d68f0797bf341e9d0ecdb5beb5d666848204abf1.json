{"sha": "d68f0797bf341e9d0ecdb5beb5d666848204abf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OGYwNzk3YmYzNDFlOWQwZWNkYjViZWI1ZDY2Njg0ODIwNGFiZjE=", "commit": {"author": {"name": "Mrmaxmeier", "email": "Mrmaxmeier@gmail.com", "date": "2017-02-03T10:52:13Z"}, "committer": {"name": "Mrmaxmeier", "email": "Mrmaxmeier@gmail.com", "date": "2017-02-03T13:16:14Z"}, "message": "Rustup to nightly from 2017-01-31", "tree": {"sha": "e9840adbbdc6c9ac3e78fe8581932dd58f70a221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9840adbbdc6c9ac3e78fe8581932dd58f70a221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68f0797bf341e9d0ecdb5beb5d666848204abf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68f0797bf341e9d0ecdb5beb5d666848204abf1", "html_url": "https://github.com/rust-lang/rust/commit/d68f0797bf341e9d0ecdb5beb5d666848204abf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68f0797bf341e9d0ecdb5beb5d666848204abf1/comments", "author": {"login": "Mrmaxmeier", "id": 3913977, "node_id": "MDQ6VXNlcjM5MTM5Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3913977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mrmaxmeier", "html_url": "https://github.com/Mrmaxmeier", "followers_url": "https://api.github.com/users/Mrmaxmeier/followers", "following_url": "https://api.github.com/users/Mrmaxmeier/following{/other_user}", "gists_url": "https://api.github.com/users/Mrmaxmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mrmaxmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mrmaxmeier/subscriptions", "organizations_url": "https://api.github.com/users/Mrmaxmeier/orgs", "repos_url": "https://api.github.com/users/Mrmaxmeier/repos", "events_url": "https://api.github.com/users/Mrmaxmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/Mrmaxmeier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mrmaxmeier", "id": 3913977, "node_id": "MDQ6VXNlcjM5MTM5Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3913977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mrmaxmeier", "html_url": "https://github.com/Mrmaxmeier", "followers_url": "https://api.github.com/users/Mrmaxmeier/followers", "following_url": "https://api.github.com/users/Mrmaxmeier/following{/other_user}", "gists_url": "https://api.github.com/users/Mrmaxmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mrmaxmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mrmaxmeier/subscriptions", "organizations_url": "https://api.github.com/users/Mrmaxmeier/orgs", "repos_url": "https://api.github.com/users/Mrmaxmeier/repos", "events_url": "https://api.github.com/users/Mrmaxmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/Mrmaxmeier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be75ef97383e238c7fd0e04c1c053d433ee1249", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be75ef97383e238c7fd0e04c1c053d433ee1249", "html_url": "https://github.com/rust-lang/rust/commit/2be75ef97383e238c7fd0e04c1c053d433ee1249"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "30115c60572a08c63a903dbb939ee4ac6464f2f7", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=d68f0797bf341e9d0ecdb5beb5d666848204abf1", "patch": "@@ -181,7 +181,7 @@ fn is_relevant_trait(tcx: ty::TyCtxt, item: &TraitItem) -> bool {\n     }\n }\n \n-fn is_relevant_block(tcx: ty::TyCtxt, tables: &ty::Tables, block: &Block) -> bool {\n+fn is_relevant_block(tcx: ty::TyCtxt, tables: &ty::TypeckTables, block: &Block) -> bool {\n     for stmt in &block.stmts {\n         match stmt.node {\n             StmtDecl(_, _) => return true,\n@@ -194,7 +194,7 @@ fn is_relevant_block(tcx: ty::TyCtxt, tables: &ty::Tables, block: &Block) -> boo\n     block.expr.as_ref().map_or(false, |e| is_relevant_expr(tcx, tables, e))\n }\n \n-fn is_relevant_expr(tcx: ty::TyCtxt, tables: &ty::Tables, expr: &Expr) -> bool {\n+fn is_relevant_expr(tcx: ty::TyCtxt, tables: &ty::TypeckTables, expr: &Expr) -> bool {\n     match expr.node {\n         ExprBlock(ref block) => is_relevant_block(tcx, tables, block),\n         ExprRet(Some(ref e)) => is_relevant_expr(tcx, tables, e),"}, {"sha": "0db45efeb386b42773e114353a443dcc1188fd6b", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=d68f0797bf341e9d0ecdb5beb5d666848204abf1", "patch": "@@ -40,16 +40,13 @@ declare_lint! {\n }\n \n fn is_non_trait_box(ty: ty::Ty) -> bool {\n-    match ty.sty {\n-        ty::TyBox(inner) => !inner.is_trait(),\n-        _ => false,\n-    }\n+    ty.is_box() && !ty.boxed_ty().is_trait()\n }\n \n struct EscapeDelegate<'a, 'tcx: 'a> {\n     set: NodeSet,\n     tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n     target: TargetDataLayout,\n     too_large_for_stack: u64,\n }\n@@ -204,16 +201,16 @@ impl<'a, 'tcx: 'a> EscapeDelegate<'a, 'tcx> {\n     fn is_large_box(&self, ty: ty::Ty<'tcx>) -> bool {\n         // Large types need to be boxed to avoid stack\n         // overflows.\n-        match ty.sty {\n-            ty::TyBox(inner) => {\n-                self.tcx.infer_ctxt((), Reveal::All).enter(|infcx| if let Ok(layout) = inner.layout(&infcx) {\n-                    let size = layout.size(&self.target);\n-                    size.bytes() > self.too_large_for_stack\n-                } else {\n-                    false\n-                })\n-            },\n-            _ => false,\n+        if ty.is_box() {\n+            let inner = ty.boxed_ty();\n+            self.tcx.infer_ctxt((), Reveal::All).enter(|infcx| if let Ok(layout) = inner.layout(&infcx) {\n+                let size = layout.size(&self.target);\n+                size.bytes() > self.too_large_for_stack\n+            } else {\n+                false\n+            })\n+        } else {\n+            false\n         }\n     }\n }"}, {"sha": "90fcc79dec4500ee22f88c6c53f2eb7d982299af", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=d68f0797bf341e9d0ecdb5beb5d666848204abf1", "patch": "@@ -230,6 +230,9 @@ impl<'v, 't> RefVisitor<'v, 't> {\n         if let Some(ref lt) = *lifetime {\n             if &*lt.name.as_str() == \"'static\" {\n                 self.lts.push(RefLt::Static);\n+            } else if lt.is_elided() {\n+                // TODO: investigate\n+                self.lts.push(RefLt::Unnamed);\n             } else {\n                 self.lts.push(RefLt::Named(lt.name));\n             }\n@@ -275,7 +278,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n     fn visit_ty(&mut self, ty: &'tcx Ty) {\n         match ty.node {\n-            TyRptr(None, _) => {\n+            TyRptr(ref lt, _) if lt.is_elided() => {\n                 self.record(&None);\n             },\n             TyPath(ref path) => {"}, {"sha": "c3198d1dd7822516f89e8a0d96b42a80bc6bf641", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=d68f0797bf341e9d0ecdb5beb5d666848204abf1", "patch": "@@ -951,8 +951,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: ty::Ty) -> Option<sug\n             ty::TySlice(_) => true,\n             ty::TyAdt(..) => match_type(cx, ty, &paths::VEC),\n             ty::TyArray(_, size) => size < 32,\n-            ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) |\n-            ty::TyBox(inner) => may_slice(cx, inner),\n+            ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) => may_slice(cx, inner),\n             _ => false,\n         }\n     }\n@@ -966,8 +965,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: ty::Ty) -> Option<sug\n     } else {\n         match ty.sty {\n             ty::TySlice(_) => sugg::Sugg::hir_opt(cx, expr),\n-            ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) |\n-            ty::TyBox(inner) => {\n+            ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) => {\n                 if may_slice(cx, inner) {\n                     sugg::Sugg::hir_opt(cx, expr)\n                 } else {"}, {"sha": "ccdcb94d212cdcbc03f508bffda6caadb9cf3241", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=d68f0797bf341e9d0ecdb5beb5d666848204abf1", "patch": "@@ -702,13 +702,10 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for TypeComplexityVisitor<'a, 'tcx> {\n             // function types bring a lot of overhead\n             TyBareFn(..) => (50 * self.nest, 1),\n \n-            TyTraitObject(ref bounds) => {\n-                let has_lifetimes = bounds.iter()\n-                    .any(|bound| match *bound {\n-                        TraitTyParamBound(ref poly_trait, ..) => !poly_trait.bound_lifetimes.is_empty(),\n-                        RegionTyParamBound(..) => true,\n-                    });\n-                if has_lifetimes {\n+            TyTraitObject(ref param_bounds, _) => {\n+                let has_lifetime_parameters = param_bounds.iter()\n+                    .any(|bound| !bound.bound_lifetimes.is_empty());\n+                if has_lifetime_parameters {\n                     // complex trait bounds like A<'a, 'b>\n                     (50 * self.nest, 1)\n                 } else {"}, {"sha": "41e9d7773639c64bb66add01f312158e5107b5c8", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68f0797bf341e9d0ecdb5beb5d666848204abf1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=d68f0797bf341e9d0ecdb5beb5d666848204abf1", "patch": "@@ -142,7 +142,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n \n \n fn is_lint_ref_type(ty: &Ty) -> bool {\n-    if let TyRptr(_, MutTy { ty: ref inner, mutbl: MutImmutable }) = ty.node {\n+    if let TyRptr(ref lt, MutTy { ty: ref inner, mutbl: MutImmutable }) = ty.node {\n+        if lt.is_elided() {\n+            return false;\n+        }\n         if let TyPath(ref path) = inner.node {\n             return match_path(path, &paths::LINT);\n         }"}]}