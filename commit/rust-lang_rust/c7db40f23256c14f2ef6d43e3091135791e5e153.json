{"sha": "c7db40f23256c14f2ef6d43e3091135791e5e153", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZGI0MGYyMzI1NmMxNGYyZWY2ZDQzZTMwOTExMzU3OTFlNWUxNTM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-09T19:05:56Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-09T19:05:56Z"}, "message": "Rename expected_types_for_fn_args to expected_inputs_for_expected_output.", "tree": {"sha": "766a2ad74dfde9809d07cdc2a9a565899a6d0826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/766a2ad74dfde9809d07cdc2a9a565899a6d0826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7db40f23256c14f2ef6d43e3091135791e5e153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7db40f23256c14f2ef6d43e3091135791e5e153", "html_url": "https://github.com/rust-lang/rust/commit/c7db40f23256c14f2ef6d43e3091135791e5e153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7db40f23256c14f2ef6d43e3091135791e5e153/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04ebef43242ade6be8968694caf56a0fb00a4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04ebef43242ade6be8968694caf56a0fb00a4d3", "html_url": "https://github.com/rust-lang/rust/commit/b04ebef43242ade6be8968694caf56a0fb00a4d3"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "529ee107c46cee8db04acf0ff6f9ba53801b757a", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7db40f23256c14f2ef6d43e3091135791e5e153/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7db40f23256c14f2ef6d43e3091135791e5e153/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=c7db40f23256c14f2ef6d43e3091135791e5e153", "patch": "@@ -254,7 +254,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Call the generic checker.\n         let expected_arg_tys =\n-            self.expected_types_for_fn_args(call_expr.span,\n+            self.expected_inputs_for_expected_output(call_expr.span,\n                                             expected,\n                                             fn_sig.output(),\n                                             fn_sig.inputs());\n@@ -280,7 +280,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // do know the types expected for each argument and the return\n         // type.\n \n-        let expected_arg_tys = self.expected_types_for_fn_args(call_expr.span,\n+        let expected_arg_tys = self.expected_inputs_for_expected_output(call_expr.span,\n                                                                expected,\n                                                                fn_sig.output().clone(),\n                                                                fn_sig.inputs());"}, {"sha": "847aea553534dae4f8fb8919c711aca4a3067fce", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7db40f23256c14f2ef6d43e3091135791e5e153/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7db40f23256c14f2ef6d43e3091135791e5e153/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c7db40f23256c14f2ef6d43e3091135791e5e153", "patch": "@@ -2321,7 +2321,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             match method_fn_ty.sty {\n                 ty::TyFnDef(def_id, .., ref fty) => {\n                     // HACK(eddyb) ignore self in the definition (see above).\n-                    let expected_arg_tys = self.expected_types_for_fn_args(\n+                    let expected_arg_tys = self.expected_inputs_for_expected_output(\n                         sp,\n                         expected,\n                         fty.0.output(),\n@@ -2674,14 +2674,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         TypeAndSubsts { substs: substs, ty: substd_ty }\n     }\n \n-    /// Unifies the return type with the expected type early, for more coercions\n-    /// and forward type information on the argument expressions.\n-    fn expected_types_for_fn_args(&self,\n-                                  call_span: Span,\n-                                  expected_ret: Expectation<'tcx>,\n-                                  formal_ret: Ty<'tcx>,\n-                                  formal_args: &[Ty<'tcx>])\n-                                  -> Vec<Ty<'tcx>> {\n+    /// Unifies the output type with the expected type early, for more coercions\n+    /// and forward type information on the input expressions.\n+    fn expected_inputs_for_expected_output(&self,\n+                                           call_span: Span,\n+                                           expected_ret: Expectation<'tcx>,\n+                                           formal_ret: Ty<'tcx>,\n+                                           formal_args: &[Ty<'tcx>])\n+                                           -> Vec<Ty<'tcx>> {\n         let expected_args = expected_ret.only_has_type(self).and_then(|ret_ty| {\n             self.fudge_regions_if_ok(&RegionVariableOrigin::Coercion(call_span), || {\n                 // Attempt to apply a subtyping relationship between the formal\n@@ -2704,7 +2704,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }).collect())\n             }).ok()\n         }).unwrap_or(vec![]);\n-        debug!(\"expected_types_for_fn_args(formal={:?} -> {:?}, expected={:?} -> {:?})\",\n+        debug!(\"expected_inputs_for_expected_output(formal={:?} -> {:?}, expected={:?} -> {:?})\",\n                formal_args, formal_ret,\n                expected_args, expected_ret);\n         expected_args"}]}