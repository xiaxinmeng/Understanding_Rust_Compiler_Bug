{"sha": "c9c434dd8bcd84a30edd070e91f0d6c027333c84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YzQzNGRkOGJjZDg0YTMwZWRkMDcwZTkxZjBkNmMwMjczMzNjODQ=", "commit": {"author": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-06-19T04:15:11Z"}, "committer": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-06-19T04:15:11Z"}, "message": "Converted all platform-specific stdin/stdout/stderr implementations to io traits", "tree": {"sha": "3901a0978f906aaf1f96ccbbb25f1239ad416e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3901a0978f906aaf1f96ccbbb25f1239ad416e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9c434dd8bcd84a30edd070e91f0d6c027333c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c434dd8bcd84a30edd070e91f0d6c027333c84", "html_url": "https://github.com/rust-lang/rust/commit/c9c434dd8bcd84a30edd070e91f0d6c027333c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9c434dd8bcd84a30edd070e91f0d6c027333c84/comments", "author": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "036b5fec49aa5d5143b83360442400d1e83ccefa", "url": "https://api.github.com/repos/rust-lang/rust/commits/036b5fec49aa5d5143b83360442400d1e83ccefa", "html_url": "https://github.com/rust-lang/rust/commit/036b5fec49aa5d5143b83360442400d1e83ccefa"}], "stats": {"total": 103, "additions": 49, "deletions": 54}, "files": [{"sha": "59f9c3644e848fe05627dc9d0302208e36d9edef", "filename": "src/libstd/sys/hermit/stdio.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c9c434dd8bcd84a30edd070e91f0d6c027333c84/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c434dd8bcd84a30edd070e91f0d6c027333c84/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs?ref=c9c434dd8bcd84a30edd070e91f0d6c027333c84", "patch": "@@ -10,19 +10,21 @@ impl Stdin {\n     pub fn new() -> io::Result<Stdin> {\n         Ok(Stdin)\n     }\n+}\n \n-    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+impl io::Read for Stdin {\n+    fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {\n         self.read_vectored(&mut [IoSliceMut::new(data)])\n     }\n \n-    pub fn read_vectored(&self, _data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&self, _data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         //ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDIN_FILENO as u32) })\n         //    .read(data)\n         Ok(0)\n     }\n \n     #[inline]\n-    pub fn is_read_vectored(&self) -> bool {\n+    fn is_read_vectored(&self) -> bool {\n         true\n     }\n }\n@@ -31,8 +33,10 @@ impl Stdout {\n     pub fn new() -> io::Result<Stdout> {\n         Ok(Stdout)\n     }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stdout {\n+    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let len;\n \n         unsafe { len = abi::write(1, data.as_ptr() as *const u8, data.len()) }\n@@ -44,7 +48,7 @@ impl Stdout {\n         }\n     }\n \n-    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         let len;\n \n         unsafe { len = abi::write(1, data.as_ptr() as *const u8, data.len()) }\n@@ -57,11 +61,11 @@ impl Stdout {\n     }\n \n     #[inline]\n-    pub fn is_write_vectored(&self) -> bool {\n+    fn is_write_vectored(&self) -> bool {\n         true\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }\n@@ -70,8 +74,10 @@ impl Stderr {\n     pub fn new() -> io::Result<Stderr> {\n         Ok(Stderr)\n     }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stderr {\n+    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let len;\n \n         unsafe { len = abi::write(2, data.as_ptr() as *const u8, data.len()) }\n@@ -83,7 +89,7 @@ impl Stderr {\n         }\n     }\n \n-    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         let len;\n \n         unsafe { len = abi::write(2, data.as_ptr() as *const u8, data.len()) }\n@@ -96,21 +102,12 @@ impl Stderr {\n     }\n \n     #[inline]\n-    pub fn is_write_vectored(&self) -> bool {\n+    fn is_write_vectored(&self) -> bool {\n         true\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-impl io::Write for Stderr {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        (&*self).write(data)\n-    }\n     fn flush(&mut self) -> io::Result<()> {\n-        (&*self).flush()\n+        Ok(())\n     }\n }\n "}, {"sha": "78e3911dc4efea33e1edc322a40e54ab7856e2bb", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c9c434dd8bcd84a30edd070e91f0d6c027333c84/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c434dd8bcd84a30edd070e91f0d6c027333c84/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=c9c434dd8bcd84a30edd070e91f0d6c027333c84", "patch": "@@ -11,85 +11,83 @@ impl Stdin {\n         Ok(Stdin)\n     }\n \n-    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+    #[inline]\n+    pub fn as_raw_fd(&self) -> u32 {\n+        0\n+    }\n+}\n+\n+impl io::Read for Stdin {\n+    fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {\n         self.read_vectored(&mut [IoSliceMut::new(data)])\n     }\n \n-    pub fn read_vectored(&self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).read(data)\n     }\n \n     #[inline]\n-    pub fn is_read_vectored(&self) -> bool {\n+    fn is_read_vectored(&self) -> bool {\n         true\n     }\n-\n-    pub fn as_raw_fd(&self) -> u32 {\n-        0\n-    }\n }\n \n impl Stdout {\n     pub fn new() -> io::Result<Stdout> {\n         Ok(Stdout)\n     }\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+    #[inline]\n+    pub fn as_raw_fd(&self) -> u32 {\n+        1\n+    }\n+}\n+\n+impl io::Write for Stdout {\n+    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(data)])\n     }\n \n-    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n     }\n \n     #[inline]\n-    pub fn is_write_vectored(&self) -> bool {\n+    fn is_write_vectored(&self) -> bool {\n         true\n     }\n-\n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n-\n-    pub fn as_raw_fd(&self) -> u32 {\n-        1\n-    }\n }\n \n impl Stderr {\n     pub fn new() -> io::Result<Stderr> {\n         Ok(Stderr)\n     }\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        self.write_vectored(&[IoSlice::new(data)])\n-    }\n-\n-    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n-        ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n-    }\n-\n     #[inline]\n-    pub fn is_write_vectored(&self) -> bool {\n-        true\n-    }\n-\n-    pub fn flush(&self) -> io::Result<()> {\n-        Ok(())\n-    }\n-\n     pub fn as_raw_fd(&self) -> u32 {\n         2\n     }\n }\n \n impl io::Write for Stderr {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        (&*self).write(data)\n+        self.write_vectored(&[IoSlice::new(data)])\n+    }\n+\n+    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n+        ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n+    }\n+\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n-        (&*self).flush()\n+        Ok(())\n     }\n }\n "}]}