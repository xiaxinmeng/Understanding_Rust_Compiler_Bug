{"sha": "8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8", "node_id": "C_kwDOAAsO6NoAKDhlZGUyMWIwOWNlNzEzMGExNDUzYmZhYTVlODg5ZmMyYTdhZTNhYzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-02T06:11:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T06:11:05Z"}, "message": "Rollup merge of #92788 - estebank:colon-colon, r=cjgillot\n\nDetect `::` -> `:` typo in type argument\n\nWhen writing `Vec<A:B>`, suggest `Vec<A::B>`.", "tree": {"sha": "8963b79051c468c4286890abd191093aa910c83c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8963b79051c468c4286890abd191093aa910c83c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+iB5CRBK7hj4Ov3rIwAAFsQIAIl9kau/FMRW27wBWCBdGBCn\n9QgokEMh9Wo1EJWFEb2dGTDfDl8idjD6M9+XwdElTAW8Wny0y47UVS6bC7/V42cU\nnaG4dMuk80s0Cv/TobUmwSfmBLZWybcBo+ZDJy5GzmREowMDZWIq+NDu/YWmcXz3\n51xGBM66Yw0hHhJgd16H3L9BCxZ19OngZXc23A6/JDVsXJeTW9cimUl98ywX+EBT\nxHh3yALUC5viTt6EbUTxHQw0e742Jb1vx2oprfj6+ZLHU2Z8ObaG7Jda+Wob8hWd\nfJHuFgN/tN2JRokp+jNY5f++pUq/QmQ0PHtDw/SFHUeFFX8PEJzXNtEtzeynfOs=\n=uaJ0\n-----END PGP SIGNATURE-----\n", "payload": "tree 8963b79051c468c4286890abd191093aa910c83c\nparent 7117b457deb03de3d28ffa68fe9d457fef0c5c5d\nparent b26ad8d10fabe45ead09aff0e2cd5b5e1289274a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643782265 +0100\ncommitter GitHub <noreply@github.com> 1643782265 +0100\n\nRollup merge of #92788 - estebank:colon-colon, r=cjgillot\n\nDetect `::` -> `:` typo in type argument\n\nWhen writing `Vec<A:B>`, suggest `Vec<A::B>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8", "html_url": "https://github.com/rust-lang/rust/commit/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7117b457deb03de3d28ffa68fe9d457fef0c5c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7117b457deb03de3d28ffa68fe9d457fef0c5c5d", "html_url": "https://github.com/rust-lang/rust/commit/7117b457deb03de3d28ffa68fe9d457fef0c5c5d"}, {"sha": "b26ad8d10fabe45ead09aff0e2cd5b5e1289274a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b26ad8d10fabe45ead09aff0e2cd5b5e1289274a", "html_url": "https://github.com/rust-lang/rust/commit/b26ad8d10fabe45ead09aff0e2cd5b5e1289274a"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "6aed3223480f1a93645fb95f00ddeec878a0a0f0", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8", "patch": "@@ -400,6 +400,8 @@ struct DiagnosticMetadata<'ast> {\n \n     /// Given `where <T as Bar>::Baz: String`, suggest `where T: Bar<Baz = String>`.\n     current_where_predicate: Option<&'ast WherePredicate>,\n+\n+    current_type_path: Option<&'ast Ty>,\n }\n \n struct LateResolutionVisitor<'a, 'b, 'ast> {\n@@ -472,8 +474,10 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_ty(&mut self, ty: &'ast Ty) {\n         let prev = self.diagnostic_metadata.current_trait_object;\n+        let prev_ty = self.diagnostic_metadata.current_type_path;\n         match ty.kind {\n             TyKind::Path(ref qself, ref path) => {\n+                self.diagnostic_metadata.current_type_path = Some(ty);\n                 self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n             }\n             TyKind::ImplicitSelf => {\n@@ -490,6 +494,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         }\n         visit::walk_ty(self, ty);\n         self.diagnostic_metadata.current_trait_object = prev;\n+        self.diagnostic_metadata.current_type_path = prev_ty;\n     }\n     fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n         self.smart_resolve_path(\n@@ -1936,7 +1941,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 let instead = res.is_some();\n                 let suggestion =\n                     if res.is_none() { this.report_missing_type_error(path) } else { None };\n-                // get_from_node_id\n \n                 this.r.use_injections.push(UseError {\n                     err,"}, {"sha": "d05f139e3bf5aaf9876a78708a614b766b967146", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8", "patch": "@@ -26,6 +26,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n \n use std::iter;\n+use std::ops::Deref;\n \n use tracing::debug;\n \n@@ -265,6 +266,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             }\n         }\n \n+        self.detect_assoct_type_constraint_meant_as_path(base_span, &mut err);\n+\n         // Emit special messages for unresolved `Self` and `self`.\n         if is_self_type(path, ns) {\n             err.code(rustc_errors::error_code!(E0411));\n@@ -603,6 +606,40 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         (err, candidates)\n     }\n \n+    fn detect_assoct_type_constraint_meant_as_path(\n+        &self,\n+        base_span: Span,\n+        err: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        let Some(ty) = self.diagnostic_metadata.current_type_path else { return; };\n+        let TyKind::Path(_, path) = &ty.kind else { return; };\n+        for segment in &path.segments {\n+            let Some(params) = &segment.args else { continue; };\n+            let ast::GenericArgs::AngleBracketed(ref params) = params.deref() else { continue; };\n+            for param in &params.args {\n+                let ast::AngleBracketedArg::Constraint(constraint) = param else { continue; };\n+                let ast::AssocConstraintKind::Bound { bounds } = &constraint.kind else {\n+                    continue;\n+                };\n+                for bound in bounds {\n+                    let ast::GenericBound::Trait(trait_ref, ast::TraitBoundModifier::None)\n+                        = bound else\n+                    {\n+                        continue;\n+                    };\n+                    if base_span == trait_ref.span {\n+                        err.span_suggestion_verbose(\n+                            constraint.ident.span.between(trait_ref.span),\n+                            \"you might have meant to write a path instead of an associated type bound\",\n+                            \"::\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn get_single_associated_item(\n         &mut self,\n         path: &[Segment],"}, {"sha": "48d19f6dd4e3fb74475c58783a1c5b6d8a7549c9", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-in-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.rs?ref=8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8", "patch": "@@ -0,0 +1,14 @@\n+enum A {\n+    B,\n+}\n+\n+fn main() {\n+    let _: Vec<A:B> = A::B;\n+    //~^ ERROR cannot find trait `B` in this scope\n+    //~| HELP you might have meant to write a path instead of an associated type bound\n+    //~| ERROR associated type bounds are unstable\n+    //~| HELP add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+    //~| ERROR struct takes at least 1 generic argument but 0 generic arguments were supplied\n+    //~| HELP add missing generic argument\n+    //~| ERROR associated type bindings are not allowed here\n+}"}, {"sha": "951ff23d635635084a59d45fcd6145b7db8f19c0", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-in-type.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr?ref=8ede21b09ce7130a1453bfaa5e889fc2a7ae3ac8", "patch": "@@ -0,0 +1,46 @@\n+error[E0405]: cannot find trait `B` in this scope\n+  --> $DIR/type-ascription-instead-of-path-in-type.rs:6:18\n+   |\n+LL |     let _: Vec<A:B> = A::B;\n+   |                  ^ not found in this scope\n+   |\n+help: you might have meant to write a path instead of an associated type bound\n+   |\n+LL |     let _: Vec<A::B> = A::B;\n+   |                 ~~\n+\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/type-ascription-instead-of-path-in-type.rs:6:16\n+   |\n+LL |     let _: Vec<A:B> = A::B;\n+   |                ^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n+error[E0107]: this struct takes at least 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/type-ascription-instead-of-path-in-type.rs:6:12\n+   |\n+LL |     let _: Vec<A:B> = A::B;\n+   |            ^^^ expected at least 1 generic argument\n+   |\n+note: struct defined here, with at least 1 generic parameter: `T`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   |            ^^^ -\n+help: add missing generic argument\n+   |\n+LL |     let _: Vec<T, A:B> = A::B;\n+   |                ++\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/type-ascription-instead-of-path-in-type.rs:6:16\n+   |\n+LL |     let _: Vec<A:B> = A::B;\n+   |                ^^^ associated type not allowed here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0107, E0229, E0405, E0658.\n+For more information about an error, try `rustc --explain E0107`."}]}