{"sha": "c6aea935cf70bb79ed88dc891b517fc5130ab398", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YWVhOTM1Y2Y3MGJiNzllZDg4ZGM4OTFiNTE3ZmM1MTMwYWIzOTg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-06-24T19:46:23Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-07-04T21:36:07Z"}, "message": "Enable loop detector in step loop\n\nThe detector runs every `DETECTOR_SNAPSHOT_PERIOD` steps. Since the\nnumber of steps can increase by more than 1 (I'd like to remove this),\nthe detector may fail if the step counter is incremented past the\nscheduled detection point during the loop.", "tree": {"sha": "bfa1d96ee90d79d4e9e8b6aa5baea32bea7bbe5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfa1d96ee90d79d4e9e8b6aa5baea32bea7bbe5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6aea935cf70bb79ed88dc891b517fc5130ab398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6aea935cf70bb79ed88dc891b517fc5130ab398", "html_url": "https://github.com/rust-lang/rust/commit/c6aea935cf70bb79ed88dc891b517fc5130ab398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6aea935cf70bb79ed88dc891b517fc5130ab398/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7e9d2ac3edf91403f2bd4879e0e8f6b9248adb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e9d2ac3edf91403f2bd4879e0e8f6b9248adb2", "html_url": "https://github.com/rust-lang/rust/commit/f7e9d2ac3edf91403f2bd4879e0e8f6b9248adb2"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "3375b6edf1a1854afab301ed0d11d192052fdea7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6aea935cf70bb79ed88dc891b517fc5130ab398/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aea935cf70bb79ed88dc891b517fc5130ab398/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=c6aea935cf70bb79ed88dc891b517fc5130ab398", "patch": "@@ -45,7 +45,7 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n \n     /// The number of terminators to be evaluated before enabling the infinite\n     /// loop detector.\n-    pub(crate) steps_until_detector_enabled: usize,\n+    pub(crate) steps_until_detector_enabled: isize,\n \n     pub(crate) loop_detector: InfiniteLoopDetector<'a, 'mir, 'tcx, M>,\n }\n@@ -175,12 +175,17 @@ impl<'a, 'mir, 'tcx, M> InfiniteLoopDetector<'a, 'mir, 'tcx, M>\n     where M: Clone + Eq + Hash + Machine<'mir, 'tcx>,\n           'tcx: 'a + 'mir,\n {\n-    pub fn observe(\n+    /// Returns `true` if the loop detector has not yet observed a snapshot.\n+    pub fn is_empty(&self) -> bool {\n+        self.bloom.is_empty()\n+    }\n+\n+    pub fn observe_and_analyze(\n         &mut self,\n         machine: &M,\n         stack: &Vec<Frame<'mir, 'tcx>>,\n         memory: &Memory<'a, 'mir, 'tcx, M>,\n-    ) -> EvalResult<'_, ()> {\n+    ) -> EvalResult<'tcx, ()> {\n         let snapshot = (machine, stack, memory);\n \n         let mut fx = FxHasher::default();\n@@ -286,7 +291,7 @@ impl<'c, 'b, 'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf\n     }\n }\n \n-const MAX_TERMINATORS: usize = 1_000_000;\n+const MAX_TERMINATORS: isize = 1_000_000;\n \n impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     pub fn new(\n@@ -656,7 +661,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             }\n \n             Aggregate(ref kind, ref operands) => {\n-                self.inc_step_counter_and_detect_loops(operands.len());\n+                self.inc_step_counter_and_detect_loops(operands.len())?;\n \n                 let (dest, active_field_index) = match **kind {\n                     mir::AggregateKind::Adt(adt_def, variant_index, _, active_field_index) => {"}, {"sha": "b0c08304969f608363de02994170b6ed60e02c33", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c6aea935cf70bb79ed88dc891b517fc5130ab398/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aea935cf70bb79ed88dc891b517fc5130ab398/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=c6aea935cf70bb79ed88dc891b517fc5130ab398", "patch": "@@ -12,17 +12,34 @@ use super::{EvalContext, Machine};\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     where M: Clone + Eq + Hash,\n {\n-    pub fn inc_step_counter_and_detect_loops(&mut self, n: usize) {\n-        self.steps_until_detector_enabled\n-            = self.steps_until_detector_enabled.saturating_sub(n);\n+    /// Returns `true` if the loop detector should take a snapshot during the current step.\n+    pub fn is_loop_detector_scheduled(&self) -> bool {\n+        /// The number of steps between loop detector snapshots.\n+        /// Should be a power of two for performance reasons.\n+        const LOOP_SNAPSHOT_PERIOD: isize = 1 << 8;\n+\n+        let steps = self.steps_until_detector_enabled;\n+        steps <= 0 && steps % LOOP_SNAPSHOT_PERIOD == 0\n+    }\n+\n+    pub fn inc_step_counter_and_detect_loops(&mut self, n: usize) -> EvalResult<'tcx, ()> {\n+        // TODO: Remove `as` cast\n+        self.steps_until_detector_enabled =\n+            self.steps_until_detector_enabled.saturating_sub(n as isize);\n \n-        if self.steps_until_detector_enabled == 0 {\n-            let _ = self.loop_detector.observe(&self.machine, &self.stack, &self.memory); // TODO: Handle error\n+        if !self.is_loop_detector_scheduled() {\n+            return Ok(());\n+        }\n+\n+        if self.loop_detector.is_empty() {\n+            // First run of the loop detector\n \n             // FIXME(#49980): make this warning a lint\n-            self.tcx.sess.span_warn(self.frame().span, \"Constant evaluating a complex constant, this might take some time\");\n-            self.steps_until_detector_enabled = 1_000_000;\n+            self.tcx.sess.span_warn(self.frame().span,\n+                \"Constant evaluating a complex constant, this might take some time\");\n         }\n+\n+        self.loop_detector.observe_and_analyze(&self.machine, &self.stack, &self.memory)\n     }\n \n     /// Returns true as long as there are more things to do.\n@@ -44,7 +61,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             return Ok(true);\n         }\n \n-        self.inc_step_counter_and_detect_loops(1);\n+        self.inc_step_counter_and_detect_loops(1)?;\n \n         let terminator = basic_block.terminator();\n         assert_eq!(old_frames, self.cur_frame());"}]}