{"sha": "6fba51c5fc05264abcbf971dcf28142746588d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYmE1MWM1ZmMwNTI2NGFiY2JmOTcxZGNmMjgxNDI3NDY1ODhkNzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-03T20:35:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-03T20:35:48Z"}, "message": "move crate_def_map tests to hir_def", "tree": {"sha": "edbdbf98b279802ee8dc03f35e941943e1e20e10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edbdbf98b279802ee8dc03f35e941943e1e20e10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fba51c5fc05264abcbf971dcf28142746588d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fba51c5fc05264abcbf971dcf28142746588d74", "html_url": "https://github.com/rust-lang/rust/commit/6fba51c5fc05264abcbf971dcf28142746588d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fba51c5fc05264abcbf971dcf28142746588d74/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0933d914a37c4ab57fda6fe95464d194dab6f80c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0933d914a37c4ab57fda6fe95464d194dab6f80c", "html_url": "https://github.com/rust-lang/rust/commit/0933d914a37c4ab57fda6fe95464d194dab6f80c"}], "stats": {"total": 504, "additions": 309, "deletions": 195}, "files": [{"sha": "889820c9961295992b2d2219b728750567ad4991", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -1028,6 +1028,7 @@ dependencies = [\n name = \"ra_hir_def\"\n version = \"0.1.0\"\n dependencies = [\n+ \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\","}, {"sha": "f5dd59f8401134fa96adb9895f93c4b9ae14b033", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 147, "deletions": 1, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -3,9 +3,12 @@\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n+use rustc_hash::FxHashMap;\n+use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n use crate::{\n-    CrateGraph, Edition, FileId, RelativePathBuf, SourceDatabaseExt, SourceRoot, SourceRootId,\n+    CrateGraph, Edition, FileId, FilePosition, RelativePathBuf, SourceDatabaseExt, SourceRoot,\n+    SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n@@ -16,6 +19,19 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n         let file_id = with_single_file(&mut db, text);\n         (db, file_id)\n     }\n+\n+    fn with_files(fixture: &str) -> Self {\n+        let mut db = Self::default();\n+        let pos = with_files(&mut db, fixture);\n+        assert!(pos.is_none());\n+        db\n+    }\n+\n+    fn with_position(fixture: &str) -> (Self, FilePosition) {\n+        let mut db = Self::default();\n+        let pos = with_files(&mut db, fixture);\n+        (db, pos.unwrap())\n+    }\n }\n \n impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}\n@@ -38,3 +54,133 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, text: &str) -> FileId {\n \n     file_id\n }\n+\n+fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosition> {\n+    let fixture = parse_fixture(fixture);\n+\n+    let mut crate_graph = CrateGraph::default();\n+    let mut crates = FxHashMap::default();\n+    let mut crate_deps = Vec::new();\n+    let mut default_crate_root: Option<FileId> = None;\n+\n+    let mut source_root = SourceRoot::default();\n+    let mut source_root_id = WORKSPACE;\n+    let mut source_root_prefix: RelativePathBuf = \"/\".into();\n+    let mut file_id = FileId(0);\n+\n+    let mut file_position = None;\n+\n+    for entry in fixture.iter() {\n+        let meta = match parse_meta(&entry.meta) {\n+            ParsedMeta::Root { path } => {\n+                let source_root = std::mem::replace(&mut source_root, SourceRoot::default());\n+                db.set_source_root(source_root_id, Arc::new(source_root));\n+                source_root_id.0 += 1;\n+                source_root_prefix = path;\n+                continue;\n+            }\n+            ParsedMeta::File(it) => it,\n+        };\n+        assert!(meta.path.starts_with(&source_root_prefix));\n+\n+        if let Some(krate) = meta.krate {\n+            let crate_id = crate_graph.add_crate_root(file_id, meta.edition, meta.cfg);\n+            let prev = crates.insert(krate.clone(), crate_id);\n+            assert!(prev.is_none());\n+            for dep in meta.deps {\n+                crate_deps.push((krate.clone(), dep))\n+            }\n+        } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n+            assert!(default_crate_root.is_none());\n+            default_crate_root = Some(file_id);\n+        }\n+\n+        let text = if entry.text.contains(CURSOR_MARKER) {\n+            let (offset, text) = extract_offset(&entry.text);\n+            assert!(file_position.is_none());\n+            file_position = Some(FilePosition { file_id, offset });\n+            text.to_string()\n+        } else {\n+            entry.text.to_string()\n+        };\n+\n+        db.set_file_text(file_id, Arc::new(text));\n+        db.set_file_relative_path(file_id, meta.path.clone());\n+        db.set_file_source_root(file_id, source_root_id);\n+        source_root.insert_file(meta.path, file_id);\n+\n+        file_id.0 += 1;\n+    }\n+\n+    if crates.is_empty() {\n+        let crate_root = default_crate_root.unwrap();\n+        crate_graph.add_crate_root(crate_root, Edition::Edition2018, CfgOptions::default());\n+    } else {\n+        for (from, to) in crate_deps {\n+            let from_id = crates[&from];\n+            let to_id = crates[&to];\n+            crate_graph.add_dep(from_id, to.into(), to_id).unwrap();\n+        }\n+    }\n+\n+    db.set_source_root(source_root_id, Arc::new(source_root));\n+    db.set_crate_graph(Arc::new(crate_graph));\n+\n+    file_position\n+}\n+\n+enum ParsedMeta {\n+    Root { path: RelativePathBuf },\n+    File(FileMeta),\n+}\n+\n+struct FileMeta {\n+    path: RelativePathBuf,\n+    krate: Option<String>,\n+    deps: Vec<String>,\n+    cfg: CfgOptions,\n+    edition: Edition,\n+}\n+\n+//- /lib.rs crate:foo deps:bar,baz\n+fn parse_meta(meta: &str) -> ParsedMeta {\n+    let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n+\n+    if components[0] == \"root\" {\n+        let path: RelativePathBuf = components[1].into();\n+        assert!(path.starts_with(\"/\") && path.ends_with(\"/\"));\n+        return ParsedMeta::Root { path };\n+    }\n+\n+    let path: RelativePathBuf = components[0].into();\n+    assert!(path.starts_with(\"/\"));\n+\n+    let mut krate = None;\n+    let mut deps = Vec::new();\n+    let mut edition = Edition::Edition2018;\n+    let mut cfg = CfgOptions::default();\n+    for component in components[1..].iter() {\n+        let (key, value) = split1(component, ':').unwrap();\n+        match key {\n+            \"crate\" => krate = Some(value.to_string()),\n+            \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n+            \"edition\" => edition = Edition::from_string(&value),\n+            \"cfg\" => {\n+                for key in value.split(',') {\n+                    match split1(key, '=') {\n+                        None => cfg.insert_atom(key.into()),\n+                        Some((k, v)) => cfg.insert_key_value(k.into(), v.into()),\n+                    }\n+                }\n+            }\n+            _ => panic!(\"bad component: {:?}\", component),\n+        }\n+    }\n+\n+    ParsedMeta::File(FileMeta { path, krate, deps, edition, cfg })\n+}\n+\n+fn split1(haystack: &str, delim: char) -> Option<(&str, &str)> {\n+    let idx = haystack.find(delim)?;\n+    Some((&haystack[..idx], &haystack[idx + delim.len_utf8()..]))\n+}"}, {"sha": "7c8dac1d38daae7f43a40618d93a2c996c1d1923", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -97,6 +97,7 @@ pub enum Edition {\n }\n \n impl Edition {\n+    //FIXME: replace with FromStr with proper error handling\n     pub fn from_string(s: &str) -> Edition {\n         match s {\n             \"2015\" => Edition::Edition2015,"}, {"sha": "875addc84a5e3b8020e423fca9bd9a1d2126f382", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -47,9 +47,6 @@\n //! path and, upon success, we run macro expansion and \"collect module\" phase\n //! on the result\n \n-#[cfg(test)]\n-mod tests;\n-\n pub use hir_def::nameres::{\n     per_ns::{Namespace, PerNs},\n     raw::ImportId,"}, {"sha": "15055db64e598b1bdecc65e6bea2e060f5fe8353", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -19,3 +19,7 @@ test_utils = { path = \"../test_utils\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n ra_cfg = { path = \"../ra_cfg\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n+\n+[dev-dependencies]\n+insta = \"0.12.0\"\n+"}, {"sha": "b3640da3d764a024a02ee725e6bdb8a4d6512f26", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -6,6 +6,9 @@ pub mod per_ns;\n pub mod collector;\n pub mod mod_resolution;\n \n+#[cfg(test)]\n+mod tests;\n+\n use std::sync::Arc;\n \n use hir_expand::{diagnostics::DiagnosticSink, name::Name, MacroDefId};"}, {"sha": "f9a8edd43c3c07056ee651541f3533852248dcfc", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "renamed", "additions": 47, "deletions": 98, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -1,23 +1,24 @@\n-mod macros;\n mod globs;\n mod incremental;\n-mod primitives;\n+mod macros;\n mod mod_resolution;\n+mod primitives;\n \n use std::sync::Arc;\n \n-use hir_def::{db::DefDatabase2, nameres::*, CrateModuleId};\n use insta::assert_snapshot;\n-use ra_db::SourceDatabase;\n+use ra_db::{fixture::WithFixture, SourceDatabase};\n // use test_utils::covers;\n \n-use crate::mock::{CrateGraphFixture, MockDatabase};\n+use crate::{db::DefDatabase2, nameres::*, test_db::TestDB, CrateModuleId};\n \n-fn compute_crate_def_map(fixture: &str, graph: Option<CrateGraphFixture>) -> Arc<CrateDefMap> {\n-    let mut db = MockDatabase::with_files(fixture);\n-    if let Some(graph) = graph {\n-        db.set_crate_graph_from_fixture(graph);\n-    }\n+fn def_map(fixtute: &str) -> String {\n+    let dm = compute_crate_def_map(fixtute);\n+    render_crate_def_map(&dm)\n+}\n+\n+fn compute_crate_def_map(fixture: &str) -> Arc<CrateDefMap> {\n+    let db = TestDB::with_files(fixture);\n     let krate = db.crate_graph().iter().next().unwrap();\n     db.crate_def_map(krate)\n }\n@@ -65,16 +66,6 @@ fn render_crate_def_map(map: &CrateDefMap) -> String {\n     }\n }\n \n-fn def_map(fixtute: &str) -> String {\n-    let dm = compute_crate_def_map(fixtute, None);\n-    render_crate_def_map(&dm)\n-}\n-\n-fn def_map_with_crate_graph(fixture: &str, graph: CrateGraphFixture) -> String {\n-    let dm = compute_crate_def_map(fixture, Some(graph));\n-    render_crate_def_map(&dm)\n-}\n-\n #[test]\n fn crate_def_map_smoke_test() {\n     let map = def_map(\n@@ -229,23 +220,19 @@ fn re_exports() {\n #[test]\n fn std_prelude() {\n     // covers!(std_prelude);\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:test_crate\n         use Foo::*;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:test_crate\n         mod prelude;\n         #[prelude_import]\n         use prelude::*;\n \n         //- /prelude.rs\n         pub enum Foo { Bar, Baz };\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"test_crate\"]),\n-            \"test_crate\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n         \u22eecrate\n@@ -274,9 +261,9 @@ fn can_import_enum_variant() {\n \n #[test]\n fn edition_2015_imports() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:other_crate edition:2015\n         mod foo;\n         mod bar;\n \n@@ -287,13 +274,9 @@ fn edition_2015_imports() {\n         use bar::Bar;\n         use other_crate::FromLib;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:other_crate edition:2018\n         struct FromLib;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", \"2015\", [\"other_crate\"]),\n-            \"other_crate\": (\"/lib.rs\", \"2018\", []),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"\n@@ -338,18 +321,14 @@ fn item_map_using_self() {\n \n #[test]\n fn item_map_across_crates() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:test_crate\n         use test_crate::Baz;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:test_crate\n         pub struct Baz;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"test_crate\"]),\n-            \"test_crate\": (\"/lib.rs\", []),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"\n@@ -360,9 +339,9 @@ fn item_map_across_crates() {\n \n #[test]\n fn extern_crate_rename() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:alloc\n         extern crate alloc as alloc_crate;\n \n         mod alloc;\n@@ -371,13 +350,9 @@ fn extern_crate_rename() {\n         //- /sync.rs\n         use alloc_crate::Arc;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:alloc\n         struct Arc;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"alloc\"]),\n-            \"alloc\": (\"/lib.rs\", []),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"\n@@ -392,9 +367,9 @@ fn extern_crate_rename() {\n \n #[test]\n fn extern_crate_rename_2015_edition() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:alloc edition:2015\n         extern crate alloc as alloc_crate;\n \n         mod alloc;\n@@ -403,13 +378,9 @@ fn extern_crate_rename_2015_edition() {\n         //- /sync.rs\n         use alloc_crate::Arc;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:alloc\n         struct Arc;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", \"2015\", [\"alloc\"]),\n-            \"alloc\": (\"/lib.rs\", []),\n-        },\n     );\n \n     assert_snapshot!(map,\n@@ -426,24 +397,21 @@ fn extern_crate_rename_2015_edition() {\n \n #[test]\n fn import_across_source_roots() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /lib.rs\n+        //- /main.rs crate:main deps:test_crate\n+        use test_crate::a::b::C;\n+\n+        //- root /test_crate/\n+\n+        //- /test_crate/lib.rs crate:test_crate\n         pub mod a {\n             pub mod b {\n                 pub struct C;\n             }\n         }\n \n-        //- root /main/\n-\n-        //- /main/main.rs\n-        use test_crate::a::b::C;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main/main.rs\", [\"test_crate\"]),\n-            \"test_crate\": (\"/lib.rs\", []),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"\n@@ -454,23 +422,19 @@ fn import_across_source_roots() {\n \n #[test]\n fn reexport_across_crates() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:test_crate\n         use test_crate::Baz;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:test_crate\n         pub use foo::Baz;\n \n         mod foo;\n \n         //- /foo.rs\n         pub struct Baz;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"test_crate\"]),\n-            \"test_crate\": (\"/lib.rs\", []),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"\n@@ -481,19 +445,15 @@ fn reexport_across_crates() {\n \n #[test]\n fn values_dont_shadow_extern_crates() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:foo\n         fn foo() {}\n         use foo::Bar;\n \n-        //- /foo/lib.rs\n+        //- /foo/lib.rs crate:foo\n         pub struct Bar;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"foo\"]),\n-            \"foo\": (\"/foo/lib.rs\", []),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"\n@@ -505,11 +465,12 @@ fn values_dont_shadow_extern_crates() {\n \n #[test]\n fn cfg_not_test() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         r#\"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:std\n         use {Foo, Bar, Baz};\n-        //- /lib.rs\n+\n+        //- /lib.rs crate:std\n         #[prelude_import]\n         pub use self::prelude::*;\n         mod prelude {\n@@ -521,10 +482,6 @@ fn cfg_not_test() {\n             pub struct Baz;\n         }\n         \"#,\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"std\"]),\n-            \"std\": (\"/lib.rs\", []),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"\n@@ -537,11 +494,12 @@ fn cfg_not_test() {\n \n #[test]\n fn cfg_test() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         r#\"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:std\n         use {Foo, Bar, Baz};\n-        //- /lib.rs\n+\n+        //- /lib.rs crate:std cfg:test,feature=foo,feature=bar,opt=42\n         #[prelude_import]\n         pub use self::prelude::*;\n         mod prelude {\n@@ -553,15 +511,6 @@ fn cfg_test() {\n             pub struct Baz;\n         }\n         \"#,\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"std\"]),\n-            \"std\": (\"/lib.rs\", [], cfg = {\n-                \"test\",\n-                \"feature\" = \"foo\",\n-                \"feature\" = \"bar\",\n-                \"opt\" = \"42\",\n-            }),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"", "previous_filename": "crates/ra_hir/src/nameres/tests.rs"}, {"sha": "cf4a2a851841ec6e20a4c76b06fd23d012582d73", "filename": "crates/ra_hir_def/src/nameres/tests/globs.rs", "status": "renamed", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -76,18 +76,14 @@ fn glob_2() {\n #[test]\n fn glob_across_crates() {\n     // covers!(glob_across_crates);\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:test_crate\n         use test_crate::*;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:test_crate\n         pub struct Baz;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"test_crate\"]),\n-            \"test_crate\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate", "previous_filename": "crates/ra_hir/src/nameres/tests/globs.rs"}, {"sha": "80dcec62f0f99b3f0f008915a80ed943730b94e5", "filename": "crates/ra_hir_def/src/nameres/tests/incremental.rs", "status": "renamed", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -5,7 +5,7 @@ use ra_db::{SourceDatabase, SourceDatabaseExt};\n use super::*;\n \n fn check_def_map_is_not_recomputed(initial: &str, file_change: &str) {\n-    let (mut db, pos) = MockDatabase::with_position(initial);\n+    let (mut db, pos) = TestDB::with_position(initial);\n     let krate = db.crate_graph().iter().next().unwrap();\n     {\n         let events = db.log_executed(|| {\n@@ -91,7 +91,7 @@ fn adding_inner_items_should_not_invalidate_def_map() {\n \n #[test]\n fn typing_inside_a_macro_should_not_invalidate_def_map() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (mut db, pos) = TestDB::with_position(\n         \"\n         //- /lib.rs\n         macro_rules! m {\n@@ -111,29 +111,22 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         m!(X);\n         \",\n     );\n+    let krate = db.crate_graph().iter().next().unwrap();\n     {\n         let events = db.log_executed(|| {\n-            let src = crate::Source {\n-                file_id: pos.file_id.into(),\n-                ast: crate::ModuleSource::new(&db, Some(pos.file_id), None),\n-            };\n-            let module = crate::Module::from_definition(&db, src).unwrap();\n-            let decls = module.declarations(&db);\n-            assert_eq!(decls.len(), 18);\n+            let crate_def_map = db.crate_def_map(krate);\n+            let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n+            assert_eq!(module_data.scope.items.len(), 1);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }\n     db.set_file_text(pos.file_id, Arc::new(\"m!(Y);\".to_string()));\n \n     {\n         let events = db.log_executed(|| {\n-            let src = crate::Source {\n-                file_id: pos.file_id.into(),\n-                ast: crate::ModuleSource::new(&db, Some(pos.file_id), None),\n-            };\n-            let module = crate::Module::from_definition(&db, src).unwrap();\n-            let decls = module.declarations(&db);\n-            assert_eq!(decls.len(), 18);\n+            let crate_def_map = db.crate_def_map(krate);\n+            let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n+            assert_eq!(module_data.scope.items.len(), 1);\n         });\n         assert!(!format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }", "previous_filename": "crates/ra_hir/src/nameres/tests/incremental.rs"}, {"sha": "9bb3895ad6a52334db8b6f71fc199240d17af60c", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "renamed", "additions": 25, "deletions": 58, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -71,27 +71,23 @@ fn macro_rules_can_define_modules() {\n \n #[test]\n fn macro_rules_from_other_crates_are_visible() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:foo\n         foo::structs!(Foo, Bar)\n         mod bar;\n \n         //- /bar.rs\n         use crate::*;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:foo\n         #[macro_export]\n         macro_rules! structs {\n             ($($i:ident),*) => {\n                 $(struct $i { field: u32 } )*\n             }\n         }\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"foo\"]),\n-            \"foo\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n@@ -108,27 +104,23 @@ fn macro_rules_from_other_crates_are_visible() {\n \n #[test]\n fn macro_rules_export_with_local_inner_macros_are_visible() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:foo\n         foo::structs!(Foo, Bar)\n         mod bar;\n \n         //- /bar.rs\n         use crate::*;\n \n-        //- /lib.rs\n+        //- /lib.rs crate:foo\n         #[macro_export(local_inner_macros)]\n         macro_rules! structs {\n             ($($i:ident),*) => {\n                 $(struct $i { field: u32 } )*\n             }\n         }\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"foo\"]),\n-            \"foo\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n@@ -145,9 +137,9 @@ fn macro_rules_export_with_local_inner_macros_are_visible() {\n \n #[test]\n fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:foo\n         macro_rules! baz {\n             () => {\n                 use foo::bar;\n@@ -158,7 +150,7 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n         bar!();\n         baz!();\n \n-        //- /lib.rs\n+        //- /lib.rs crate:foo\n         #[macro_export]\n         macro_rules! foo {\n             () => {\n@@ -172,10 +164,6 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n             }\n         }\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"foo\"]),\n-            \"foo\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n@@ -188,9 +176,9 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n #[test]\n fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n     // covers!(macro_rules_from_other_crates_are_visible_with_macro_use);\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:foo\n         structs!(Foo);\n         structs_priv!(Bar);\n         structs_not_exported!(MacroNotResolved1);\n@@ -205,7 +193,7 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n         structs!(Baz);\n         crate::structs!(MacroNotResolved3);\n \n-        //- /lib.rs\n+        //- /lib.rs crate:foo\n         #[macro_export]\n         macro_rules! structs {\n             ($i:ident) => { struct $i; }\n@@ -222,10 +210,6 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n             }\n         }\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"foo\"]),\n-            \"foo\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n@@ -242,9 +226,9 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n #[test]\n fn prelude_is_macro_use() {\n     // covers!(prelude_is_macro_use);\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:foo\n         structs!(Foo);\n         structs_priv!(Bar);\n         structs_outside!(Out);\n@@ -256,7 +240,7 @@ fn prelude_is_macro_use() {\n         structs!(Baz);\n         crate::structs!(MacroNotResolved3);\n \n-        //- /lib.rs\n+        //- /lib.rs crate:foo\n         #[prelude_import]\n         use self::prelude::*;\n \n@@ -279,10 +263,6 @@ fn prelude_is_macro_use() {\n             ($i:ident) => { struct $i; }\n         }\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"foo\"]),\n-            \"foo\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n@@ -447,16 +427,16 @@ fn type_value_macro_live_in_different_scopes() {\n \n #[test]\n fn macro_use_can_be_aliased() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:foo\n         #[macro_use]\n         extern crate foo;\n \n         foo!(Direct);\n         bar!(Alias);\n \n-        //- /lib.rs\n+        //- /lib.rs crate:foo\n         use crate::foo as bar;\n \n         mod m {\n@@ -466,10 +446,6 @@ fn macro_use_can_be_aliased() {\n             }\n         }\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"foo\"]),\n-            \"foo\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n         \u22eecrate\n@@ -533,9 +509,9 @@ fn path_qualified_macros() {\n fn macro_dollar_crate_is_correct_in_item() {\n     // covers!(macro_dollar_crate_self);\n     // covers!(macro_dollar_crate_other);\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:foo\n         #[macro_use]\n         extern crate foo;\n \n@@ -554,7 +530,7 @@ fn macro_dollar_crate_is_correct_in_item() {\n         not_current1!();\n         foo::not_current2!();\n \n-        //- /lib.rs\n+        //- /lib.rs crate:foo\n         mod m {\n             #[macro_export]\n             macro_rules! not_current1 {\n@@ -574,10 +550,6 @@ fn macro_dollar_crate_is_correct_in_item() {\n         struct Bar;\n         struct Baz;\n         \",\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"foo\"]),\n-            \"foo\": (\"/lib.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n         \u22eecrate\n@@ -596,12 +568,12 @@ fn macro_dollar_crate_is_correct_in_item() {\n fn macro_dollar_crate_is_correct_in_indirect_deps() {\n     // covers!(macro_dollar_crate_other);\n     // From std\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         r#\"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:std\n         foo!();\n \n-        //- /std.rs\n+        //- /std.rs crate:std deps:core\n         #[prelude_import]\n         use self::prelude::*;\n \n@@ -612,7 +584,7 @@ fn macro_dollar_crate_is_correct_in_indirect_deps() {\n         #[macro_use]\n         mod std_macros;\n \n-        //- /core.rs\n+        //- /core.rs crate:core\n         #[macro_export]\n         macro_rules! foo {\n             () => {\n@@ -622,11 +594,6 @@ fn macro_dollar_crate_is_correct_in_indirect_deps() {\n \n         pub struct bar;\n         \"#,\n-        crate_graph! {\n-            \"main\": (\"/main.rs\", [\"std\"]),\n-            \"std\": (\"/std.rs\", [\"core\"]),\n-            \"core\": (\"/core.rs\", []),\n-        },\n     );\n     assert_snapshot!(map, @r###\"\n         \u22eecrate", "previous_filename": "crates/ra_hir/src/nameres/tests/macros.rs"}, {"sha": "8d804a63e8b454e315757fee2fb567c87d85ff2b", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "renamed", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -54,18 +54,15 @@ fn nested_module_resolution() {\n \n #[test]\n fn module_resolution_works_for_non_standard_filenames() {\n-    let map = def_map_with_crate_graph(\n+    let map = def_map(\n         \"\n-        //- /my_library.rs\n+        //- /my_library.rs crate:my_library\n         mod foo;\n         use self::foo::Bar;\n \n         //- /foo/mod.rs\n         pub struct Bar;\n         \",\n-        crate_graph! {\n-            \"my_library\": (\"/my_library.rs\", []),\n-        },\n     );\n \n     assert_snapshot!(map, @r###\"\n@@ -650,19 +647,45 @@ fn module_resolution_decl_inside_inline_module_in_non_crate_root_2() {\n \n #[test]\n fn unresolved_module_diagnostics() {\n-    let diagnostics = MockDatabase::with_files(\n+    let db = TestDB::with_files(\n         r\"\n         //- /lib.rs\n         mod foo;\n         mod bar;\n         mod baz {}\n         //- /foo.rs\n         \",\n-    )\n-    .diagnostics();\n-\n-    assert_snapshot!(diagnostics, @r###\"\n-    \"mod bar;\": unresolved module\n+    );\n+    let krate = db.crate_graph().iter().next().unwrap();\n+\n+    let crate_def_map = db.crate_def_map(krate);\n+\n+    insta::assert_debug_snapshot!(\n+        crate_def_map.diagnostics,\n+        @r###\"\n+    [\n+        UnresolvedModule {\n+            module: CrateModuleId(\n+                0,\n+            ),\n+            declaration: AstId {\n+                file_id: HirFileId(\n+                    FileId(\n+                        FileId(\n+                            0,\n+                        ),\n+                    ),\n+                ),\n+                file_ast_id: FileAstId {\n+                    raw: ErasedFileAstId(\n+                        1,\n+                    ),\n+                    _ty: PhantomData,\n+                },\n+            },\n+            candidate: \"bar.rs\",\n+        },\n+    ]\n     \"###\n     );\n }", "previous_filename": "crates/ra_hir/src/nameres/tests/mod_resolution.rs"}, {"sha": "0e27086585c3635dcc2a84027f0073bff87c2322", "filename": "crates/ra_hir_def/src/nameres/tests/primitives.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "previous_filename": "crates/ra_hir/src/nameres/tests/primitives.rs"}, {"sha": "05018f8e43c2e06baf425826b17e669691292c55", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fba51c5fc05264abcbf971dcf28142746588d74/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=6fba51c5fc05264abcbf971dcf28142746588d74", "patch": "@@ -1,4 +1,7 @@\n-use std::{panic, sync::Arc};\n+use std::{\n+    panic,\n+    sync::{Arc, Mutex},\n+};\n \n use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate};\n use relative_path::RelativePath;\n@@ -13,12 +16,20 @@ use relative_path::RelativePath;\n #[derive(Debug, Default)]\n pub struct TestDB {\n     runtime: salsa::Runtime<TestDB>,\n+    events: Mutex<Option<Vec<salsa::Event<TestDB>>>>,\n }\n \n impl salsa::Database for TestDB {\n     fn salsa_runtime(&self) -> &salsa::Runtime<Self> {\n         &self.runtime\n     }\n+\n+    fn salsa_event(&self, event: impl Fn() -> salsa::Event<TestDB>) {\n+        let mut events = self.events.lock().unwrap();\n+        if let Some(events) = &mut *events {\n+            events.push(event());\n+        }\n+    }\n }\n \n impl panic::RefUnwindSafe for TestDB {}\n@@ -38,3 +49,26 @@ impl FileLoader for TestDB {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }\n+\n+impl TestDB {\n+    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<TestDB>> {\n+        *self.events.lock().unwrap() = Some(Vec::new());\n+        f();\n+        self.events.lock().unwrap().take().unwrap()\n+    }\n+\n+    pub fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n+        let events = self.log(f);\n+        events\n+            .into_iter()\n+            .filter_map(|e| match e.kind {\n+                // This pretty horrible, but `Debug` is the only way to inspect\n+                // QueryDescriptor at the moment.\n+                salsa::EventKind::WillExecute { database_key } => {\n+                    Some(format!(\"{:?}\", database_key))\n+                }\n+                _ => None,\n+            })\n+            .collect()\n+    }\n+}"}]}