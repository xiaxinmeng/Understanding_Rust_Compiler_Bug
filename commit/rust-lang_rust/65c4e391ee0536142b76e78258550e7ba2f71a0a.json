{"sha": "65c4e391ee0536142b76e78258550e7ba2f71a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YzRlMzkxZWUwNTM2MTQyYjc2ZTc4MjU4NTUwZTdiYTJmNzFhMGE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-05T16:07:12Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-07T15:32:36Z"}, "message": "Fix wrong tests and improve some other", "tree": {"sha": "186aa18e18e5f08e8ea9852168518a9b95ae8ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/186aa18e18e5f08e8ea9852168518a9b95ae8ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c4e391ee0536142b76e78258550e7ba2f71a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c4e391ee0536142b76e78258550e7ba2f71a0a", "html_url": "https://github.com/rust-lang/rust/commit/65c4e391ee0536142b76e78258550e7ba2f71a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c4e391ee0536142b76e78258550e7ba2f71a0a/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aab0e6729c82c100efc9b63e8791e26e68187f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aab0e6729c82c100efc9b63e8791e26e68187f0", "html_url": "https://github.com/rust-lang/rust/commit/1aab0e6729c82c100efc9b63e8791e26e68187f0"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "2436f64d216fba9563d4f91c681bbfa87683bd2e", "filename": "tests/compile-fail/formatting.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformatting.rs?ref=65c4e391ee0536142b76e78258550e7ba2f71a0a", "patch": "@@ -11,24 +11,32 @@ fn foo() -> bool { true }\n fn main() {\n     // weird `else if` formatting:\n     if foo() {\n-    } if foo() { //~ERROR this looks like an `else if` but the `else` is missing\n+    } if foo() {\n+    //~^ ERROR this looks like an `else if` but the `else` is missing\n+    //~| NOTE add the missing `else` or\n     }\n \n     let _ = {\n         if foo() {\n-        } if foo() { //~ERROR this looks like an `else if` but the `else` is missing\n+        } if foo() {\n+        //~^ ERROR this looks like an `else if` but the `else` is missing\n+        //~| NOTE add the missing `else` or\n         }\n         else {\n         }\n     };\n \n     if foo() {\n-    } else //~ERROR this is an `else if` but the formatting might hide it\n+    } else\n+    //~^ ERROR this is an `else if` but the formatting might hide it\n+    //~| NOTE remove the `else` or\n     if foo() { // the span of the above error should continue here\n     }\n \n     if foo() {\n-    } //~ERROR this is an `else if` but the formatting might hide it\n+    }\n+    //~^ ERROR this is an `else if` but the formatting might hide it\n+    //~| NOTE remove the `else` or\n     else\n     if foo() { // the span of the above error should continue here\n     }"}, {"sha": "477786813dbaf19dfda8d2a8a877d355f931deca", "filename": "tests/compile-fail/let_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_return.rs?ref=65c4e391ee0536142b76e78258550e7ba2f71a0a", "patch": "@@ -6,13 +6,13 @@\n \n fn test() -> i32 {\n     let _y = 0; // no warning\n-    let x = 5;   //~NOTE\n+    let x = 5;   //~NOTE this expression can be directly returned\n     x            //~ERROR returning the result of a let binding\n }\n \n fn test_inner() -> i32 {\n     if true {\n-        let x = 5;\n+        let x = 5;   //~NOTE this expression can be directly returned\n         x            //~ERROR returning the result of a let binding\n     } else {\n         0"}, {"sha": "92344110d2ccdcbf237b11ba59115fb8d4ca3db1", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=65c4e391ee0536142b76e78258550e7ba2f71a0a", "patch": "@@ -38,5 +38,7 @@ fn main() {\n         ***y + **x;\n     }\n \n-    let mut z = mut_ptr!(&mut 3u32); //~ NOTE in this expansion of mut_ptr!\n+    let mut z = mut_ptr!(&mut 3u32);\n+    //~^ NOTE in this expansion of mut_ptr!\n+    //~| NOTE in this expansion of mut_ptr!\n }"}, {"sha": "88099297b98ab661ea9f496832883c88eb9d0e65", "filename": "tests/compile-fail/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_borrow.rs?ref=65c4e391ee0536142b76e78258550e7ba2f71a0a", "patch": "@@ -10,7 +10,7 @@ fn x(y: &i32) -> i32 {\n fn main() {\n     let a = 5;\n     let b = x(&a);\n-    let c = x(&&a); //~ ERROR: needless_borrow\n+    let c = x(&&a); //~ ERROR: this expression borrows a reference that is immediately dereferenced by the compiler\n     let s = &String::from(\"hi\");\n     let s_ident = f(&s); // should not error, because `&String` implements Copy, but `String` does not\n     let g_val = g(&Vec::new()); // should not error, because `&Vec<T>` derefs to `&[T]`"}, {"sha": "76c7fa54c019687e8545dd5552afb0642105299c", "filename": "tests/compile-fail/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_effect.rs?ref=65c4e391ee0536142b76e78258550e7ba2f71a0a", "patch": "@@ -62,7 +62,7 @@ fn main() {\n     //~|SUGGESTION get_number();\n     Struct { ..get_struct() }; //~ERROR statement can be reduced\n     //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n+    //~|SUGGESTION get_struct();\n     Enum::Tuple(get_number()); //~ERROR statement can be reduced\n     //~^HELP replace it with\n     //~|SUGGESTION get_number();\n@@ -74,7 +74,7 @@ fn main() {\n     //~|SUGGESTION 5;get_number();\n     *&get_number(); //~ERROR statement can be reduced\n     //~^HELP replace it with\n-    //~|SUGGESTION &get_number();\n+    //~|SUGGESTION get_number();\n     &get_number(); //~ERROR statement can be reduced\n     //~^HELP replace it with\n     //~|SUGGESTION get_number();"}, {"sha": "c8ff2b610d01b8d6f2a7932cac58c2997a29329e", "filename": "tests/compile-fail/swap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c4e391ee0536142b76e78258550e7ba2f71a0a/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=65c4e391ee0536142b76e78258550e7ba2f71a0a", "patch": "@@ -57,12 +57,12 @@ fn main() {\n     //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n \n-    let t = a;\n+    ; let t = a;\n     a = b;\n     b = t;\n     //~^^^ ERROR this looks like you are swapping `a` and `b` manually\n     //~| HELP try\n-    //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n+    //~| SUGGESTION ; std::mem::swap(&mut a, &mut b);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n \n     let mut c = Foo(42);\n@@ -74,11 +74,11 @@ fn main() {\n     //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n \n-    let t = c.0;\n+    ; let t = c.0;\n     c.0 = a;\n     a = t;\n     //~^^^ ERROR this looks like you are swapping `c.0` and `a` manually\n     //~| HELP try\n-    //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n+    //~| SUGGESTION ; std::mem::swap(&mut c.0, &mut a);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n }"}]}