{"sha": "0e58a5d139772404ab936b6c7679e9ff936101c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNThhNWQxMzk3NzI0MDRhYjkzNmI2Yzc2NzllOWZmOTM2MTAxYzQ=", "commit": {"author": {"name": "CensoredUsername", "email": "cens.username@gmail.com", "date": "2016-08-27T13:14:51Z"}, "committer": {"name": "CensoredUsername", "email": "cens.username@gmail.com", "date": "2016-08-30T14:03:06Z"}, "message": "Feature gate the sysv64 abi as feature(abi_sysv64) and add tests", "tree": {"sha": "2453b34c80fde922db92e9fb212730d6f5bba2a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2453b34c80fde922db92e9fb212730d6f5bba2a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e58a5d139772404ab936b6c7679e9ff936101c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e58a5d139772404ab936b6c7679e9ff936101c4", "html_url": "https://github.com/rust-lang/rust/commit/0e58a5d139772404ab936b6c7679e9ff936101c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e58a5d139772404ab936b6c7679e9ff936101c4/comments", "author": {"login": "CensoredUsername", "id": 3411575, "node_id": "MDQ6VXNlcjM0MTE1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/3411575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CensoredUsername", "html_url": "https://github.com/CensoredUsername", "followers_url": "https://api.github.com/users/CensoredUsername/followers", "following_url": "https://api.github.com/users/CensoredUsername/following{/other_user}", "gists_url": "https://api.github.com/users/CensoredUsername/gists{/gist_id}", "starred_url": "https://api.github.com/users/CensoredUsername/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CensoredUsername/subscriptions", "organizations_url": "https://api.github.com/users/CensoredUsername/orgs", "repos_url": "https://api.github.com/users/CensoredUsername/repos", "events_url": "https://api.github.com/users/CensoredUsername/events{/privacy}", "received_events_url": "https://api.github.com/users/CensoredUsername/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CensoredUsername", "id": 3411575, "node_id": "MDQ6VXNlcjM0MTE1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/3411575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CensoredUsername", "html_url": "https://github.com/CensoredUsername", "followers_url": "https://api.github.com/users/CensoredUsername/followers", "following_url": "https://api.github.com/users/CensoredUsername/following{/other_user}", "gists_url": "https://api.github.com/users/CensoredUsername/gists{/gist_id}", "starred_url": "https://api.github.com/users/CensoredUsername/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CensoredUsername/subscriptions", "organizations_url": "https://api.github.com/users/CensoredUsername/orgs", "repos_url": "https://api.github.com/users/CensoredUsername/repos", "events_url": "https://api.github.com/users/CensoredUsername/events{/privacy}", "received_events_url": "https://api.github.com/users/CensoredUsername/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c4173cb8f942afbb1588174e5867eb780cdaa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c4173cb8f942afbb1588174e5867eb780cdaa0", "html_url": "https://github.com/rust-lang/rust/commit/30c4173cb8f942afbb1588174e5867eb780cdaa0"}], "stats": {"total": 191, "additions": 184, "deletions": 7}, "files": [{"sha": "18924a3dc2535f4878a35314fb5e11bb6cc39afe", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0e58a5d139772404ab936b6c7679e9ff936101c4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e58a5d139772404ab936b6c7679e9ff936101c4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0e58a5d139772404ab936b6c7679e9ff936101c4", "patch": "@@ -281,7 +281,11 @@ declare_features! (\n     (active, never_type, \"1.13.0\", Some(35121)),\n \n     // Allows all literals in attribute lists and values of key-value pairs.\n-    (active, attr_literals, \"1.13.0\", Some(34981))\n+    (active, attr_literals, \"1.13.0\", Some(34981)),\n+\n+    // Allows the sysV64 ABI to be specified on all platforms\n+    // instead of just the platforms on which it is the C ABI\n+    (active, abi_sysv64, \"1.13.0\", None)\n );\n \n declare_features! (\n@@ -811,21 +815,26 @@ macro_rules! gate_feature_post {\n impl<'a> PostExpansionVisitor<'a> {\n     fn check_abi(&self, abi: Abi, span: Span) {\n         match abi {\n-            Abi::RustIntrinsic =>\n+            Abi::RustIntrinsic => {\n                 gate_feature_post!(&self, intrinsics, span,\n-                                   \"intrinsics are subject to change\"),\n+                                   \"intrinsics are subject to change\");\n+            },\n             Abi::PlatformIntrinsic => {\n                 gate_feature_post!(&self, platform_intrinsics, span,\n-                                   \"platform intrinsics are experimental and possibly buggy\")\n+                                   \"platform intrinsics are experimental and possibly buggy\");\n             },\n             Abi::Vectorcall => {\n                 gate_feature_post!(&self, abi_vectorcall, span,\n-                                   \"vectorcall is experimental and subject to change\")\n-            }\n+                                   \"vectorcall is experimental and subject to change\");\n+            },\n             Abi::RustCall => {\n                 gate_feature_post!(&self, unboxed_closures, span,\n                                    \"rust-call ABI is subject to change\");\n-            }\n+            },\n+            Abi::SysV64 => {\n+                gate_feature_post!(&self, abi_sysv64, span,\n+                                   \"sysv64 ABI is experimental and subject to change\");\n+            },\n             _ => {}\n         }\n     }"}, {"sha": "2b8e8a1b6b2c79437ff0134c5f8972d1142d6048", "filename": "src/test/codegen/abi-sysv64.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0e58a5d139772404ab936b6c7679e9ff936101c4/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e58a5d139772404ab936b6c7679e9ff936101c4/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs?ref=0e58a5d139772404ab936b6c7679e9ff936101c4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks if the correct annotation for the sysv64 ABI is passed to\n+// llvm. Also checks that the abi-sysv64 feature gate allows usage\n+// of the sysv64 abi.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(abi_sysv64)]\n+\n+// CHECK: define x86_64_sysvcc i64 @has_sysv64_abi\n+#[no_mangle]\n+pub extern \"sysv64\" fn has_sysv64_abi(a: i64) -> i64 {\n+    a * 2\n+}"}, {"sha": "2a4aae8c06bbadda9c05782135ea9e4805e2d8a4", "filename": "src/test/compile-fail/feature-gate-abi-sysv64.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0e58a5d139772404ab936b6c7679e9ff936101c4/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e58a5d139772404ab936b6c7679e9ff936101c4/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-sysv64.rs?ref=0e58a5d139772404ab936b6c7679e9ff936101c4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the sysv64 ABI cannot be used when abi-sysv64 feature\n+// gate is not used.\n+\n+extern \"sysv64\" fn foo() {}\n+//~^ ERROR sysv64 ABI is experimental and subject to change\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "5e58240359e6c8b42f8b2af4d8b19361eccf4f54", "filename": "src/test/run-pass/abi-sysv64-register-usage.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/0e58a5d139772404ab936b6c7679e9ff936101c4/src%2Ftest%2Frun-pass%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e58a5d139772404ab936b6c7679e9ff936101c4/src%2Ftest%2Frun-pass%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi-sysv64-register-usage.rs?ref=0e58a5d139772404ab936b6c7679e9ff936101c4", "patch": "@@ -0,0 +1,125 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks if the correct registers are being used to pass arguments\n+// when the sysv64 ABI is specified.\n+\n+#![feature(abi_sysv64)]\n+#![feature(naked_functions)]\n+#![feature(asm)]\n+\n+#[naked]\n+#[inline(never)]\n+#[allow(unused_variables)]\n+pub unsafe extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n+                                                rcx: i64, r8 : i64, r9 : i64,\n+                                                xmm0: f32, xmm1: f32, xmm2: f32,\n+                                                xmm3: f32, xmm4: f32, xmm5: f32,\n+                                                xmm6: f32, xmm7: f32) -> i64 {\n+    // this assembly checks all registers for specific values, and puts in rax\n+    // how many values were correct.\n+    asm!(\"cmp rdi, 0x1;\n+          xor rax, rax;\n+          setz al;\n+\n+          cmp rsi, 0x2;\n+          xor rdi, rdi\n+          setz dil;\n+          add rax, rdi;\n+\n+          cmp rdx, 0x3;\n+          setz dil;\n+          add rax, rdi;\n+\n+          cmp rcx, 0x4;\n+          setz dil;\n+          add rax, rdi;\n+\n+          cmp r8, 0x5;\n+          setz dil;\n+          add rax, rdi;\n+\n+          cmp r9, 0x6;\n+          setz dil;\n+          add rax, rdi;\n+\n+          movd esi, xmm0;\n+          cmp rsi, 0x3F800000;\n+          setz dil;\n+          add rax, rdi;\n+\n+          movd esi, xmm1;\n+          cmp rsi, 0x40000000;\n+          setz dil;\n+          add rax, rdi;\n+\n+          movd esi, xmm2;\n+          cmp rsi, 0x40800000;\n+          setz dil;\n+          add rax, rdi;\n+\n+          movd esi, xmm3;\n+          cmp rsi, 0x41000000;\n+          setz dil;\n+          add rax, rdi;\n+\n+          movd esi, xmm4;\n+          cmp rsi, 0x41800000;\n+          setz dil;\n+          add rax, rdi;\n+\n+          movd esi, xmm5;\n+          cmp rsi, 0x42000000;\n+          setz dil;\n+          add rax, rdi;\n+\n+          movd esi, xmm6;\n+          cmp rsi, 0x42800000;\n+          setz dil;\n+          add rax, rdi;\n+\n+          movd esi, xmm7;\n+          cmp rsi, 0x43000000;\n+          setz dil;\n+          add rax, rdi;\n+          ret\n+         \" :::: \"intel\");\n+    unreachable!();\n+}\n+\n+// this struct contains 8 i64's, while only 6 can be passed in registers.\n+#[derive(PartialEq, Eq, Debug)]\n+pub struct LargeStruct(i64, i64, i64, i64, i64, i64, i64, i64);\n+\n+#[inline(never)]\n+pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct {\n+    foo.0 *= 1;\n+    foo.1 *= 2;\n+    foo.2 *= 3;\n+    foo.3 *= 4;\n+    foo.4 *= 5;\n+    foo.5 *= 6;\n+    foo.6 *= 7;\n+    foo.7 *= 8;\n+    foo\n+}\n+\n+pub fn main() {\n+    assert_eq!(unsafe {\n+        all_the_registers(1, 2, 3, 4, 5, 6,\n+                          1.0, 2.0, 4.0, 8.0,\n+                          16.0, 32.0, 64.0, 128.0)\n+    }, 14);\n+\n+    assert_eq!(\n+        large_struct_by_val(LargeStruct(1, 2, 3, 4, 5, 6, 7, 8)),\n+        LargeStruct(1, 4, 9, 16, 25, 36, 49, 64)\n+    );\n+}"}]}