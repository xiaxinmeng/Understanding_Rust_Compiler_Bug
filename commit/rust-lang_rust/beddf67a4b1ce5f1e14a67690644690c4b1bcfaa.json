{"sha": "beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZGRmNjdhNGIxY2U1ZjFlMTRhNjc2OTA2NDQ2OTBjNGIxYmNmYWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-27T22:14:35Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T04:25:31Z"}, "message": "parser: don't hardcode ABIs into grammar", "tree": {"sha": "8c1dc435432fe3002fe9d7928a924e935ef71027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1dc435432fe3002fe9d7928a924e935ef71027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "html_url": "https://github.com/rust-lang/rust/commit/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf018714189db0b15f9f803adfcb4572ab7a988", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf018714189db0b15f9f803adfcb4572ab7a988", "html_url": "https://github.com/rust-lang/rust/commit/caf018714189db0b15f9f803adfcb4572ab7a988"}], "stats": {"total": 581, "additions": 296, "deletions": 285}, "files": [{"sha": "cf892127a3079e1eaca2d95a9154a453d17dfa35", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -2336,6 +2336,7 @@ the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n     E0657, // `impl Trait` can only capture lifetimes bound at the fn level\n     E0687, // in-band lifetimes cannot be used in `fn`/`Fn` syntax\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n+    E0703, // invalid ABI\n //  E0707, // multiple elided lifetimes used in arguments of `async fn`\n     E0708, // `async` non-`move` closures with parameters are not currently\n            // supported"}, {"sha": "6344c7a233ca40440eca0fb802c78c60189ba30d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -1216,7 +1216,7 @@ impl<'a> LoweringContext<'a> {\n                                     ImplTraitContext::disallowed(),\n                                 ),\n                                 unsafety: this.lower_unsafety(f.unsafety),\n-                                abi: f.abi,\n+                                abi: this.lower_abi(f.abi),\n                                 decl: this.lower_fn_decl(&f.decl, None, false, None),\n                                 param_names: this.lower_fn_params_to_names(&f.decl),\n                             }))"}, {"sha": "5fe463d783f4b53c578bac39d16d7b51a1c443ee", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -12,6 +12,7 @@ use crate::hir::def::{Res, DefKind};\n use crate::util::nodemap::NodeMap;\n \n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_target::spec::abi;\n \n use std::collections::BTreeSet;\n use smallvec::SmallVec;\n@@ -735,7 +736,7 @@ impl LoweringContext<'_> {\n \n     fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod {\n         hir::ForeignMod {\n-            abi: fm.abi,\n+            abi: self.lower_abi(fm.abi),\n             items: fm.items\n                 .iter()\n                 .map(|x| self.lower_foreign_item(x))\n@@ -1291,10 +1292,30 @@ impl LoweringContext<'_> {\n             unsafety: self.lower_unsafety(h.unsafety),\n             asyncness: self.lower_asyncness(h.asyncness.node),\n             constness: self.lower_constness(h.constness),\n-            abi: h.abi,\n+            abi: self.lower_abi(h.abi),\n         }\n     }\n \n+    pub(super) fn lower_abi(&mut self, abi: Abi) -> abi::Abi {\n+        abi::lookup(&abi.symbol.as_str()).unwrap_or_else(|| {\n+            self.error_on_invalid_abi(abi);\n+            abi::Abi::Rust\n+        })\n+    }\n+\n+    fn error_on_invalid_abi(&self, abi: Abi) {\n+        struct_span_err!(\n+            self.sess,\n+            abi.span,\n+            E0703,\n+            \"invalid ABI: found `{}`\",\n+            abi.symbol\n+        )\n+        .span_label(abi.span, \"invalid ABI\")\n+        .help(&format!(\"valid ABIs: {}\", abi::all_names().join(\", \")))\n+        .emit();\n+    }\n+\n     pub(super) fn lower_unsafety(&mut self, u: Unsafety) -> hir::Unsafety {\n         match u {\n             Unsafety::Unsafe => hir::Unsafety::Unsafe,"}, {"sha": "019e92717b5d67e8b91970a4f7e4b353a92b22c1", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -32,7 +32,7 @@ use rls_data::{SigElement, Signature};\n use rustc::hir::def::{Res, DefKind};\n use syntax::ast::{self, NodeId};\n use syntax::print::pprust;\n-\n+use syntax_pos::sym;\n \n pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n@@ -157,6 +157,12 @@ fn text_sig(text: String) -> Signature {\n     }\n }\n \n+fn push_abi(text: &mut String, abi: ast::Abi) {\n+    if abi.symbol != sym::Rust {\n+        text.push_str(&format!(\"extern \\\"{}\\\" \", abi.symbol));\n+    }\n+}\n+\n impl Sig for ast::Ty {\n     fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let id = Some(self.id);\n@@ -231,11 +237,7 @@ impl Sig for ast::Ty {\n                 if f.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if f.abi != rustc_target::spec::abi::Abi::Rust {\n-                    text.push_str(\"extern\");\n-                    text.push_str(&f.abi.to_string());\n-                    text.push(' ');\n-                }\n+                push_abi(&mut text, f.abi);\n                 text.push_str(\"fn(\");\n \n                 let mut defs = vec![];\n@@ -385,11 +387,7 @@ impl Sig for ast::Item {\n                 if header.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if header.abi != rustc_target::spec::abi::Abi::Rust {\n-                    text.push_str(\"extern\");\n-                    text.push_str(&header.abi.to_string());\n-                    text.push(' ');\n-                }\n+                push_abi(&mut text, header.abi);\n                 text.push_str(\"fn \");\n \n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n@@ -948,11 +946,7 @@ fn make_method_signature(\n     if m.header.unsafety == ast::Unsafety::Unsafe {\n         text.push_str(\"unsafe \");\n     }\n-    if m.header.abi != rustc_target::spec::abi::Abi::Rust {\n-        text.push_str(\"extern\");\n-        text.push_str(&m.header.abi.to_string());\n-        text.push(' ');\n-    }\n+    push_abi(&mut text, m.header.abi);\n     text.push_str(\"fn \");\n \n     let mut sig = name_and_generics(text, 0, generics, id, ident, scx)?;"}, {"sha": "f761c35cd5cf552fc736751268a4e66f2a6d2ff3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -38,7 +38,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_index::vec::Idx;\n use rustc_serialize::{self, Decoder, Encoder};\n-use rustc_target::spec::abi::Abi;\n \n #[cfg(target_arch = \"x86_64\")]\n use rustc_data_structures::static_assert_size;\n@@ -2358,6 +2357,27 @@ impl Item {\n     }\n }\n \n+/// A reference to an ABI.\n+///\n+/// In AST our notion of an ABI is still syntactic unlike in `rustc_target::spec::abi::Abi`.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, PartialEq)]\n+pub struct Abi {\n+    pub symbol: Symbol,\n+    pub span: Span,\n+}\n+\n+impl Abi {\n+    pub fn new(symbol: Symbol, span: Span) -> Self {\n+        Self { symbol, span }\n+    }\n+}\n+\n+impl Default for Abi {\n+    fn default() -> Self {\n+        Self::new(sym::Rust, DUMMY_SP)\n+    }\n+}\n+\n /// A function header.\n ///\n /// All the information between the visibility and the name of the function is\n@@ -2376,7 +2396,7 @@ impl Default for FnHeader {\n             unsafety: Unsafety::Normal,\n             asyncness: dummy_spanned(IsAsync::NotAsync),\n             constness: dummy_spanned(Constness::NotConst),\n-            abi: Abi::Rust,\n+            abi: Abi::default(),\n         }\n     }\n }"}, {"sha": "c23c8d65a7f23c6e36a0617f4e1ab5fa0519eda6", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -540,6 +540,5 @@ equivalent in Rust would be to use macros directly.\n     E0630,\n     E0693, // incorrect `repr(align)` attribute format\n //  E0694, // an unknown tool name found in scoped attributes\n-    E0703, // invalid ABI\n     E0717, // rustc_promotable without stability attribute\n }"}, {"sha": "213e96805246c4d8d6e58af01736a5471f052b62", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -18,7 +18,6 @@ use crate::tokenstream::TokenTree;\n \n use errors::{Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::debug;\n \n@@ -192,62 +191,70 @@ macro_rules! gate_feature_post {\n }\n \n impl<'a> PostExpansionVisitor<'a> {\n-    fn check_abi(&self, abi: Abi, span: Span) {\n-        match abi {\n-            Abi::RustIntrinsic => {\n+    fn check_abi(&self, abi: ast::Abi) {\n+        let ast::Abi { symbol, span } = abi;\n+\n+        match &*symbol.as_str() {\n+            // Stable\n+            \"Rust\" |\n+            \"C\" |\n+            \"cdecl\" |\n+            \"stdcall\" |\n+            \"fastcall\" |\n+            \"aapcs\" |\n+            \"win64\" |\n+            \"sysv64\" |\n+            \"system\" => {}\n+            \"rust-intrinsic\" => {\n                 gate_feature_post!(&self, intrinsics, span,\n                                    \"intrinsics are subject to change\");\n             },\n-            Abi::PlatformIntrinsic => {\n+            \"platform-intrinsic\" => {\n                 gate_feature_post!(&self, platform_intrinsics, span,\n                                    \"platform intrinsics are experimental and possibly buggy\");\n             },\n-            Abi::Vectorcall => {\n+            \"vectorcall\" => {\n                 gate_feature_post!(&self, abi_vectorcall, span,\n                                    \"vectorcall is experimental and subject to change\");\n             },\n-            Abi::Thiscall => {\n+            \"thiscall\" => {\n                 gate_feature_post!(&self, abi_thiscall, span,\n                                    \"thiscall is experimental and subject to change\");\n             },\n-            Abi::RustCall => {\n+            \"rust-call\" => {\n                 gate_feature_post!(&self, unboxed_closures, span,\n                                    \"rust-call ABI is subject to change\");\n             },\n-            Abi::PtxKernel => {\n+            \"ptx-kernel\" => {\n                 gate_feature_post!(&self, abi_ptx, span,\n                                    \"PTX ABIs are experimental and subject to change\");\n             },\n-            Abi::Unadjusted => {\n+            \"unadjusted\" => {\n                 gate_feature_post!(&self, abi_unadjusted, span,\n                                    \"unadjusted ABI is an implementation detail and perma-unstable\");\n             },\n-            Abi::Msp430Interrupt => {\n+            \"msp430-interrupt\" => {\n                 gate_feature_post!(&self, abi_msp430_interrupt, span,\n                                    \"msp430-interrupt ABI is experimental and subject to change\");\n             },\n-            Abi::X86Interrupt => {\n+            \"x86-interrupt\" => {\n                 gate_feature_post!(&self, abi_x86_interrupt, span,\n                                    \"x86-interrupt ABI is experimental and subject to change\");\n             },\n-            Abi::AmdGpuKernel => {\n+            \"amdgpu-kernel\" => {\n                 gate_feature_post!(&self, abi_amdgpu_kernel, span,\n                                    \"amdgpu-kernel ABI is experimental and subject to change\");\n             },\n-            Abi::EfiApi => {\n+            \"efiapi\" => {\n                 gate_feature_post!(&self, abi_efiapi, span,\n                                    \"efiapi ABI is experimental and subject to change\");\n             },\n-            // Stable\n-            Abi::Cdecl |\n-            Abi::Stdcall |\n-            Abi::Fastcall |\n-            Abi::Aapcs |\n-            Abi::Win64 |\n-            Abi::SysV64 |\n-            Abi::Rust |\n-            Abi::C |\n-            Abi::System => {}\n+            abi => {\n+                self.parse_sess.span_diagnostic.delay_span_bug(\n+                    span,\n+                    &format!(\"unrecognized ABI not caught in lowering: {}\", abi),\n+                )\n+            }\n         }\n     }\n \n@@ -373,7 +380,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_item(&mut self, i: &'a ast::Item) {\n         match i.kind {\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n-                self.check_abi(foreign_module.abi, i.span);\n+                self.check_abi(foreign_module.abi);\n             }\n \n             ast::ItemKind::Fn(..) => {\n@@ -503,7 +510,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_ty(&mut self, ty: &'a ast::Ty) {\n         match ty.kind {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n-                self.check_abi(bare_fn_ty.abi, ty.span);\n+                self.check_abi(bare_fn_ty.abi);\n             }\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span,\n@@ -597,7 +604,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n             // because default methods don't pass through this point.\n-            self.check_abi(header.abi, span);\n+            self.check_abi(header.abi);\n         }\n \n         if fn_decl.c_variadic() {\n@@ -631,7 +638,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match ti.kind {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n                 if block.is_none() {\n-                    self.check_abi(sig.header.abi, ti.span);\n+                    self.check_abi(sig.header.abi);\n                 }\n                 if sig.decl.c_variadic() {\n                     gate_feature_post!(&self, c_variadic, ti.span,"}, {"sha": "382c1a517aa4242d6c9b7bd06b14903e5d8cbd54", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -12,7 +12,7 @@ mod diagnostics;\n use diagnostics::Error;\n \n use crate::ast::{\n-    self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n+    self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n     IsAsync, MacDelimiter, Mutability, StrStyle, Visibility, VisibilityKind, Unsafety,\n };\n use crate::parse::{PResult, Directory, DirectoryOwnership};\n@@ -28,7 +28,6 @@ use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::ThinVec;\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n-use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n use log::debug;\n \n@@ -1208,48 +1207,27 @@ impl<'a> Parser<'a> {\n \n     /// Parses `extern` followed by an optional ABI string, or nothing.\n     fn parse_extern_abi(&mut self) -> PResult<'a, Abi> {\n-        if self.eat_keyword(kw::Extern) {\n-            Ok(self.parse_opt_abi()?.unwrap_or(Abi::C))\n+        Ok(if self.eat_keyword(kw::Extern) {\n+            let ext_sp = self.prev_span;\n+            self.parse_opt_abi()?.unwrap_or_else(|| Abi::new(sym::C, ext_sp))\n         } else {\n-            Ok(Abi::Rust)\n-        }\n+            Abi::default()\n+        })\n     }\n \n-    /// Parses a string as an ABI spec on an extern type or module. Consumes\n-    /// the `extern` keyword, if one is found.\n+    /// Parses a string as an ABI spec on an extern type or module.\n     fn parse_opt_abi(&mut self) -> PResult<'a, Option<Abi>> {\n         match self.token.kind {\n             token::Literal(token::Lit { kind: token::Str, symbol, suffix }) |\n             token::Literal(token::Lit { kind: token::StrRaw(..), symbol, suffix }) => {\n                 self.expect_no_suffix(self.token.span, \"an ABI spec\", suffix);\n                 self.bump();\n-                match abi::lookup(&symbol.as_str()) {\n-                    Some(abi) => Ok(Some(abi)),\n-                    None => {\n-                        self.error_on_invalid_abi(symbol);\n-                        Ok(None)\n-                    }\n-                }\n+                Ok(Some(Abi::new(symbol, self.prev_span)))\n             }\n             _ => Ok(None),\n         }\n     }\n \n-    /// Emit an error where `symbol` is an invalid ABI.\n-    fn error_on_invalid_abi(&self, symbol: Symbol) {\n-        let prev_span = self.prev_span;\n-        struct_span_err!(\n-            self.sess.span_diagnostic,\n-            prev_span,\n-            E0703,\n-            \"invalid ABI: found `{}`\",\n-            symbol\n-        )\n-        .span_label(prev_span, \"invalid ABI\")\n-        .help(&format!(\"valid ABIs: {}\", abi::all_names().join(\", \")))\n-        .emit();\n-    }\n-\n     /// We are parsing `async fn`. If we are on Rust 2015, emit an error.\n     fn ban_async_in_2015(&self, async_span: Span) {\n         if async_span.rust_2015() {"}, {"sha": "76411e7cf13887be6afce332e5763975cbabe7f1", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -3,7 +3,7 @@ use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n use crate::ptr::P;\n-use crate::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n+use crate::ast::{self, Abi, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n use crate::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n use crate::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness};\n use crate::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n@@ -17,7 +17,6 @@ use crate::ThinVec;\n \n use log::debug;\n use std::mem;\n-use rustc_target::spec::abi::Abi;\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n use syntax_pos::BytePos;\n \n@@ -111,7 +110,7 @@ impl<'a> Parser<'a> {\n                 return Ok(Some(self.parse_item_extern_crate(lo, vis, attrs)?));\n             }\n \n-            let opt_abi = self.parse_opt_abi()?;\n+            let abi = self.parse_opt_abi()?.unwrap_or_else(|| Abi::new(sym::C, extern_sp));\n \n             if self.eat_keyword(kw::Fn) {\n                 // EXTERN FUNCTION ITEM\n@@ -120,12 +119,12 @@ impl<'a> Parser<'a> {\n                     unsafety: Unsafety::Normal,\n                     asyncness: respan(fn_span, IsAsync::NotAsync),\n                     constness: respan(fn_span, Constness::NotConst),\n-                    abi: opt_abi.unwrap_or(Abi::C),\n+                    abi,\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n                 return Ok(Some(\n-                    self.parse_item_foreign_mod(lo, opt_abi, vis, attrs, extern_sp)?,\n+                    self.parse_item_foreign_mod(lo, abi, vis, attrs, extern_sp)?,\n                 ));\n             }\n \n@@ -201,7 +200,7 @@ impl<'a> Parser<'a> {\n                     unsafety,\n                     asyncness,\n                     constness: respan(fn_span, Constness::NotConst),\n-                    abi: Abi::Rust,\n+                    abi: Abi::new(sym::Rust, fn_span),\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n@@ -238,7 +237,7 @@ impl<'a> Parser<'a> {\n                 unsafety: Unsafety::Normal,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n-                abi: Abi::Rust,\n+                abi: Abi::new(sym::Rust, fn_span),\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n@@ -1115,15 +1114,13 @@ impl<'a> Parser<'a> {\n     fn parse_item_foreign_mod(\n         &mut self,\n         lo: Span,\n-        opt_abi: Option<Abi>,\n+        abi: Abi,\n         visibility: Visibility,\n         mut attrs: Vec<Attribute>,\n         extern_sp: Span,\n     ) -> PResult<'a, P<Item>> {\n         self.expect(&token::OpenDelim(token::Brace))?;\n \n-        let abi = opt_abi.unwrap_or(Abi::C);\n-\n         attrs.extend(self.parse_inner_attributes()?);\n \n         let mut foreign_items = vec![];\n@@ -1801,7 +1798,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, Option<P<Item>>> {\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: false,\n-            allow_c_variadic: header.abi == Abi::C && header.unsafety == Unsafety::Unsafe,\n+            allow_c_variadic: header.abi.symbol == sym::C && header.unsafety == Unsafety::Unsafe,\n             is_name_required: |_| true,\n         })?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n@@ -1930,7 +1927,7 @@ impl<'a> Parser<'a> {\n         let asyncness = respan(self.prev_span, asyncness);\n         let unsafety = self.parse_unsafety();\n         let (constness, unsafety, abi) = if is_const_fn {\n-            (respan(const_span, Constness::Const), unsafety, Abi::Rust)\n+            (respan(const_span, Constness::Const), unsafety, Abi::default())\n         } else {\n             let abi = self.parse_extern_abi()?;\n             (respan(self.prev_span, Constness::NotConst), unsafety, abi)"}, {"sha": "1d59c13a9d0818800aaaea91c1b36504ddcab8c5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -14,7 +14,6 @@ use crate::sess::ParseSess;\n use crate::symbol::{kw, sym};\n use crate::tokenstream::{self, TokenStream, TokenTree};\n \n-use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{self, BytePos};\n use syntax_pos::{FileName, Span};\n \n@@ -1230,7 +1229,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n                 self.head(\"extern\");\n-                self.word_nbsp(nmod.abi.to_string());\n+                self.print_abi(nmod.abi);\n                 self.bopen();\n                 self.print_foreign_mod(nmod, &item.attrs);\n                 self.bclose(item.span);\n@@ -2823,7 +2822,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_ty_fn(&mut self,\n-                       abi: abi::Abi,\n+                       abi: ast::Abi,\n                        unsafety: ast::Unsafety,\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n@@ -2884,14 +2883,18 @@ impl<'a> State<'a> {\n         self.print_asyncness(header.asyncness.node);\n         self.print_unsafety(header.unsafety);\n \n-        if header.abi != Abi::Rust {\n+        if header.abi.symbol != sym::Rust {\n             self.word_nbsp(\"extern\");\n-            self.word_nbsp(header.abi.to_string());\n+            self.print_abi(header.abi);\n         }\n \n         self.s.word(\"fn\")\n     }\n \n+    fn print_abi(&mut self, abi: ast::Abi) {\n+        self.word_nbsp(format!(\"\\\"{}\\\"\", abi.symbol));\n+    }\n+\n     crate fn print_unsafety(&mut self, s: ast::Unsafety) {\n         match s {\n             ast::Unsafety::Normal => {},"}, {"sha": "2c6dd0fb1c6dc05154407509a408784c005c760a", "filename": "src/libsyntax/print/pprust/tests.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -34,12 +34,7 @@ fn test_fun_to_string() {\n         assert_eq!(\n             fun_to_string(\n                 &decl,\n-                ast::FnHeader {\n-                    unsafety: ast::Unsafety::Normal,\n-                    constness: source_map::dummy_spanned(ast::Constness::NotConst),\n-                    asyncness: source_map::dummy_spanned(ast::IsAsync::NotAsync),\n-                    abi: Abi::Rust,\n-                },\n+                ast::FnHeader::default(),\n                 abba_ident,\n                 &generics\n             ),"}, {"sha": "b18fd50ae7605288ba6f959e1e5972bb7a295131", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -182,8 +182,7 @@ use std::iter;\n use std::vec;\n \n use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n+use syntax::ast::{self, Abi, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::source_map::respan;\n@@ -738,7 +737,7 @@ impl<'a> TraitDef<'a> {\n                                          self,\n                                          type_ident,\n                                          generics,\n-                                         Abi::Rust,\n+                                         sym::Rust,\n                                          explicit_self,\n                                          tys,\n                                          body)\n@@ -793,7 +792,7 @@ impl<'a> TraitDef<'a> {\n                                          self,\n                                          type_ident,\n                                          generics,\n-                                         Abi::Rust,\n+                                         sym::Rust,\n                                          explicit_self,\n                                          tys,\n                                          body)\n@@ -919,7 +918,7 @@ impl<'a> MethodDef<'a> {\n                      trait_: &TraitDef<'_>,\n                      type_ident: Ident,\n                      generics: &Generics,\n-                     abi: Abi,\n+                     abi: Symbol,\n                      explicit_self: Option<ast::ExplicitSelf>,\n                      arg_types: Vec<(Ident, P<ast::Ty>)>,\n                      body: P<Expr>)\n@@ -949,23 +948,27 @@ impl<'a> MethodDef<'a> {\n             ast::Unsafety::Normal\n         };\n \n+        let trait_lo_sp = trait_.span.shrink_to_lo();\n+\n+        let sig = ast::MethodSig {\n+            header: ast::FnHeader {\n+                unsafety,\n+                abi: Abi::new(abi, trait_lo_sp),\n+                ..ast::FnHeader::default()\n+            },\n+            decl: fn_decl,\n+        };\n+\n         // Create the method.\n         ast::ImplItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             generics: fn_generics,\n             span: trait_.span,\n-            vis: respan(trait_.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            kind: ast::ImplItemKind::Method(ast::MethodSig {\n-                                                header: ast::FnHeader {\n-                                                    unsafety, abi,\n-                                                    ..ast::FnHeader::default()\n-                                                },\n-                                                decl: fn_decl,\n-                                            },\n-                                            body_block),\n+            kind: ast::ImplItemKind::Method(sig, body_block),\n             tokens: None,\n         }\n     }"}, {"sha": "2bdd8eacd1175267cf33d4f13072fc5abd4091cc", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -563,6 +563,7 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n+        Rust,\n         RustcDecodable,\n         RustcEncodable,\n         rustc_allocator,"}, {"sha": "218e0292776d06d6a51368fe4d2d9beac98ad1c8", "filename": "src/test/ui/feature-gated-feature-in-macro-arg.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gated-feature-in-macro-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gated-feature-in-macro-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gated-feature-in-macro-arg.stderr?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gated-feature-in-macro-arg.rs:8:9\n+  --> $DIR/feature-gated-feature-in-macro-arg.rs:8:16\n    |\n-LL | /         extern \"rust-intrinsic\" {\n-LL | |             fn atomic_fence();\n-LL | |         }\n-   | |_________^\n+LL |         extern \"rust-intrinsic\" {\n+   |                ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n "}, {"sha": "d58a2d91b2b7f8cbcc040692294f98ad260d4b20", "filename": "src/test/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-msp430-interrupt.rs:4:1\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:4:8\n    |\n LL | extern \"msp430-interrupt\" fn foo() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable"}, {"sha": "6db6cb49cef1436aea579eedb2b2c4fc69572c77", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 136, "deletions": 136, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -1,591 +1,591 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:13:1\n+  --> $DIR/feature-gate-abi.rs:13:8\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:15:1\n+  --> $DIR/feature-gate-abi.rs:15:8\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:17:1\n+  --> $DIR/feature-gate-abi.rs:17:8\n    |\n LL | extern \"vectorcall\" fn f3() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:18:1\n+  --> $DIR/feature-gate-abi.rs:18:8\n    |\n LL | extern \"rust-call\" fn f4() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:19:1\n+  --> $DIR/feature-gate-abi.rs:19:8\n    |\n LL | extern \"msp430-interrupt\" fn f5() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:20:1\n+  --> $DIR/feature-gate-abi.rs:20:8\n    |\n LL | extern \"ptx-kernel\" fn f6() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:21:1\n+  --> $DIR/feature-gate-abi.rs:21:8\n    |\n LL | extern \"x86-interrupt\" fn f7() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:22:1\n+  --> $DIR/feature-gate-abi.rs:22:8\n    |\n LL | extern \"thiscall\" fn f8() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:23:1\n+  --> $DIR/feature-gate-abi.rs:23:8\n    |\n LL | extern \"amdgpu-kernel\" fn f9() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:24:1\n+  --> $DIR/feature-gate-abi.rs:24:8\n    |\n LL | extern \"efiapi\" fn f10() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:28:5\n+  --> $DIR/feature-gate-abi.rs:28:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:30:5\n+  --> $DIR/feature-gate-abi.rs:30:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:5\n+  --> $DIR/feature-gate-abi.rs:32:12\n    |\n LL |     extern \"vectorcall\" fn m3();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:33:5\n+  --> $DIR/feature-gate-abi.rs:33:12\n    |\n LL |     extern \"rust-call\" fn m4();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:34:5\n+  --> $DIR/feature-gate-abi.rs:34:12\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:35:5\n+  --> $DIR/feature-gate-abi.rs:35:12\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:5\n+  --> $DIR/feature-gate-abi.rs:36:12\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:37:5\n+  --> $DIR/feature-gate-abi.rs:37:12\n    |\n LL |     extern \"thiscall\" fn m8();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:5\n+  --> $DIR/feature-gate-abi.rs:38:12\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:39:5\n+  --> $DIR/feature-gate-abi.rs:39:12\n    |\n LL |     extern \"efiapi\" fn m10();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:41:5\n+  --> $DIR/feature-gate-abi.rs:41:12\n    |\n LL |     extern \"vectorcall\" fn dm3() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:42:5\n+  --> $DIR/feature-gate-abi.rs:42:12\n    |\n LL |     extern \"rust-call\" fn dm4() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:43:5\n+  --> $DIR/feature-gate-abi.rs:43:12\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:44:5\n+  --> $DIR/feature-gate-abi.rs:44:12\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:45:5\n+  --> $DIR/feature-gate-abi.rs:45:12\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:46:5\n+  --> $DIR/feature-gate-abi.rs:46:12\n    |\n LL |     extern \"thiscall\" fn dm8() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:47:5\n+  --> $DIR/feature-gate-abi.rs:47:12\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:48:5\n+  --> $DIR/feature-gate-abi.rs:48:12\n    |\n LL |     extern \"efiapi\" fn dm10() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:55:5\n+  --> $DIR/feature-gate-abi.rs:55:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:57:5\n+  --> $DIR/feature-gate-abi.rs:57:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:59:5\n+  --> $DIR/feature-gate-abi.rs:59:12\n    |\n LL |     extern \"vectorcall\" fn m3() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:60:5\n+  --> $DIR/feature-gate-abi.rs:60:12\n    |\n LL |     extern \"rust-call\" fn m4() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:61:5\n+  --> $DIR/feature-gate-abi.rs:61:12\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:62:5\n+  --> $DIR/feature-gate-abi.rs:62:12\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:63:5\n+  --> $DIR/feature-gate-abi.rs:63:12\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:64:5\n+  --> $DIR/feature-gate-abi.rs:64:12\n    |\n LL |     extern \"thiscall\" fn m8() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:65:5\n+  --> $DIR/feature-gate-abi.rs:65:12\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:66:5\n+  --> $DIR/feature-gate-abi.rs:66:12\n    |\n LL |     extern \"efiapi\" fn m10() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:71:5\n+  --> $DIR/feature-gate-abi.rs:71:12\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:73:5\n+  --> $DIR/feature-gate-abi.rs:73:12\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:75:5\n+  --> $DIR/feature-gate-abi.rs:75:12\n    |\n LL |     extern \"vectorcall\" fn im3() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:76:5\n+  --> $DIR/feature-gate-abi.rs:76:12\n    |\n LL |     extern \"rust-call\" fn im4() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:77:5\n+  --> $DIR/feature-gate-abi.rs:77:12\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:78:5\n+  --> $DIR/feature-gate-abi.rs:78:12\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:79:5\n+  --> $DIR/feature-gate-abi.rs:79:12\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:80:5\n+  --> $DIR/feature-gate-abi.rs:80:12\n    |\n LL |     extern \"thiscall\" fn im8() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:81:5\n+  --> $DIR/feature-gate-abi.rs:81:12\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:82:5\n+  --> $DIR/feature-gate-abi.rs:82:12\n    |\n LL |     extern \"efiapi\" fn im10() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:86:11\n+  --> $DIR/feature-gate-abi.rs:86:18\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:87:11\n+  --> $DIR/feature-gate-abi.rs:87:18\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:88:11\n+  --> $DIR/feature-gate-abi.rs:88:18\n    |\n LL | type A3 = extern \"vectorcall\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:89:11\n+  --> $DIR/feature-gate-abi.rs:89:18\n    |\n LL | type A4 = extern \"rust-call\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:90:11\n+  --> $DIR/feature-gate-abi.rs:90:18\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:91:11\n+  --> $DIR/feature-gate-abi.rs:91:18\n    |\n LL | type A6 = extern \"ptx-kernel\" fn ();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:92:11\n+  --> $DIR/feature-gate-abi.rs:92:18\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:11\n+  --> $DIR/feature-gate-abi.rs:93:18\n    |\n LL | type A8 = extern \"thiscall\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:94:11\n+  --> $DIR/feature-gate-abi.rs:94:18\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:95:12\n+  --> $DIR/feature-gate-abi.rs:95:19\n    |\n LL | type A10 = extern \"efiapi\" fn();\n-   |            ^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:98:1\n+  --> $DIR/feature-gate-abi.rs:98:8\n    |\n LL | extern \"rust-intrinsic\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:99:1\n+  --> $DIR/feature-gate-abi.rs:99:8\n    |\n LL | extern \"platform-intrinsic\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:100:1\n+  --> $DIR/feature-gate-abi.rs:100:8\n    |\n LL | extern \"vectorcall\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:101:1\n+  --> $DIR/feature-gate-abi.rs:101:8\n    |\n LL | extern \"rust-call\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:102:1\n+  --> $DIR/feature-gate-abi.rs:102:8\n    |\n LL | extern \"msp430-interrupt\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38487\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:103:1\n+  --> $DIR/feature-gate-abi.rs:103:8\n    |\n LL | extern \"ptx-kernel\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/38788\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:104:1\n+  --> $DIR/feature-gate-abi.rs:104:8\n    |\n LL | extern \"x86-interrupt\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/40180\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:105:1\n+  --> $DIR/feature-gate-abi.rs:105:8\n    |\n LL | extern \"thiscall\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:106:1\n+  --> $DIR/feature-gate-abi.rs:106:8\n    |\n LL | extern \"amdgpu-kernel\" {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:107:1\n+  --> $DIR/feature-gate-abi.rs:107:8\n    |\n LL | extern \"efiapi\" {}\n-   | ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable"}, {"sha": "1757befec35c059bffc15f13d0f4491bc855043c", "filename": "src/test/ui/feature-gates/feature-gate-abi_unadjusted.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_unadjusted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_unadjusted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_unadjusted.stderr?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: unadjusted ABI is an implementation detail and perma-unstable\n-  --> $DIR/feature-gate-abi_unadjusted.rs:1:1\n+  --> $DIR/feature-gate-abi_unadjusted.rs:1:8\n    |\n-LL | / extern \"unadjusted\" fn foo() {\n-LL | |\n-LL | | }\n-   | |_^\n+LL | extern \"unadjusted\" fn foo() {\n+   |        ^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_unadjusted)]` to the crate attributes to enable\n "}, {"sha": "8f943d357ce02f0685e19aeeaee3398d89cf581f", "filename": "src/test/ui/feature-gates/feature-gate-intrinsics.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -1,18 +1,16 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-intrinsics.rs:1:1\n+  --> $DIR/feature-gate-intrinsics.rs:1:8\n    |\n-LL | / extern \"rust-intrinsic\" {\n-LL | |     fn bar();\n-LL | | }\n-   | |_^\n+LL | extern \"rust-intrinsic\" {\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-intrinsics.rs:5:1\n+  --> $DIR/feature-gate-intrinsics.rs:5:8\n    |\n LL | extern \"rust-intrinsic\" fn baz() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n "}, {"sha": "657bf13c8739ec57a5408a8710584f4a04e3a559", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -1,35 +1,35 @@\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:11:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:11:12\n    |\n LL |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:17:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:17:12\n    |\n LL |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:12\n    |\n LL |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:29:5\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:29:12\n    |\n LL |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable"}, {"sha": "f343a42eb8fa9ce0f8f35ace66b89ce82c43cf89", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/beddf67a4b1ce5f1e14a67690644690c4b1bcfaa/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=beddf67a4b1ce5f1e14a67690644690c4b1bcfaa", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-unboxed-closures.rs:9:5\n+  --> $DIR/feature-gate-unboxed-closures.rs:9:12\n    |\n-LL | /     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n-LL | |         a + b\n-LL | |     }\n-   | |_____^\n+LL |     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n+   |            ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable"}]}