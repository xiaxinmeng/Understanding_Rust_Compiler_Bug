{"sha": "88e2c396a4062d59ca6be3a74ac432bd1f878942", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZTJjMzk2YTQwNjJkNTljYTZiZTNhNzRhYzQzMmJkMWY4Nzg5NDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T03:06:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T03:06:21Z"}, "message": "Auto merge of #43168 - pnkfelix:check-attr-gating, r=aturon\n\nSlew of builtin-attribute gating tests\n\nSlew of builtin-attribute \"gating\" tests for issue #43106.\n\nSome stray observations:\n\n * I don't know if its a good thing that so many attributes allow inputs which are silently discarded. (I  made heavy use of that in writing my tests, but that was more out of curiosity than necessity.)\n * The difference between crate-level and non-crate-level behavior is quite significant in some cases. Definitely worth making sure one has tests for both cases. (Not as clear whether it was worthwhile trying the various other AST forms like `fn f()` vs `struct S;`)\n * `#[no_builtins]` and `#[no_mangle]` occur twice on the `BUILTIN_ATTRIBUTES` list. Thats almost certainly a bug. (Filed as #43148)\n * We are maximally liberal in what we allow for `#[test]` and `#[bench]` when one compiles without `--test`.\n * We allow `#[no_mangle]` on arbitrary AST nodes, but only warn about potential misuse on `fn`\n * We allow `#[cold]`, `#[must_use]`, `#[windows_subsystem]`, and `#[no_builtins]` on arbitrary AST nodes. I don't know off-hand what the semantics are for e.g. a `#[cold] type T = ...;`\n * We allow crate-level `#![inline]`. That's probably a bug since its otherwise restricted to `fn` items", "tree": {"sha": "14abbcf75613dc58fbc40036f68ce005bb2e4d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14abbcf75613dc58fbc40036f68ce005bb2e4d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e2c396a4062d59ca6be3a74ac432bd1f878942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e2c396a4062d59ca6be3a74ac432bd1f878942", "html_url": "https://github.com/rust-lang/rust/commit/88e2c396a4062d59ca6be3a74ac432bd1f878942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e2c396a4062d59ca6be3a74ac432bd1f878942/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c36219102616939c4172184b01176f19033464", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c36219102616939c4172184b01176f19033464", "html_url": "https://github.com/rust-lang/rust/commit/83c36219102616939c4172184b01176f19033464"}, {"sha": "39b8aaf26fbde1ebcf4f5a3ed9af89305743087e", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b8aaf26fbde1ebcf4f5a3ed9af89305743087e", "html_url": "https://github.com/rust-lang/rust/commit/39b8aaf26fbde1ebcf4f5a3ed9af89305743087e"}], "stats": {"total": 1291, "additions": 1291, "deletions": 0}, "files": [{"sha": "a34f98f03559f6b5b5bad8b39298f3f5216a6a00", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-bench.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: main function not found\n+\n+// At time of authorship, a crate-level #![bench] with no `--test`\n+// will cause compilation to error unconditionally with \"main function\n+// not found\" (despite having one), similar to #[bench].\n+//\n+// (The non-crate level cases are in\n+// issue-43106-gating-of-builtin-attrs.rs.)\n+\n+// See issue-12997-1.rs and issue-12997-2.rs to see how `#[bench]` is\n+// handled in \"weird places\" when `--test` is passed.\n+\n+#![bench                   = \"4100\"]\n+\n+fn main() { }"}, {"sha": "29a2b0609fcd2dd368cede7d473fcf592448c9c5", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "added", "additions": 878, "deletions": 0, "changes": 878, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,878 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test enumerates as many compiler-builtin ungated attributes as\n+// possible (that is, all the mutually compatible ones), and checks\n+// that we get \"expected\" (*) warnings for each in the various weird\n+// places that users might put them in the syntax.\n+//\n+// (*): The word \"expected\" is in quotes above because the cases where\n+// warnings are and are not emitted might not match a user's intuition\n+// nor the rustc developers' intent. I am really just trying to\n+// capture today's behavior in a test, not so that it become enshrined\n+// as the absolute behavior going forward, but rather so that we do\n+// not change the behavior in the future without even being *aware* of\n+// the change when it happens.\n+//\n+// At the time of authoring, the attributes here are listed in the\n+// order that they occur in libsyntax/feature_gate.rs.\n+//\n+// Any builtin attributes that:\n+//\n+//  - are not stable, or\n+//\n+//  - could not be included here covering the same cases as the other\n+//    attributes without raising an *error* from rustc (note though\n+//    that warnings are of course expected)\n+//\n+// have their own test case referenced by filename in an inline\n+// comment.\n+//\n+// The test feeds numeric inputs to each attribute that accepts them\n+// without error. We do this for two reasons: (1.) to exercise how\n+// inputs are handled by each, and (2.) to ease searching for related\n+// occurrences in the source text.\n+\n+#![feature(rustc_attrs)] // For `rustc_error`; see note below.\n+#![warn(unused_attributes, unknown_lints)]\n+#![allow(dead_code)]\n+\n+// UNGATED WHITE-LISTED BUILT-IN ATTRIBUTES\n+\n+#![warn                        (x5400)] //~ WARN unknown lint: `x5400`\n+#![allow                       (x5300)] //~ WARN unknown lint: `x5300`\n+#![forbid                      (x5200)] //~ WARN unknown lint: `x5200`\n+#![deny                        (x5100)] //~ WARN unknown lint: `x5100`\n+#![macro_reexport             = \"5000\"] //~ WARN unused attribute\n+#![macro_use] // (allowed if no argument; see issue-43160-gating-of-macro_use.rs)\n+#![macro_export               = \"4800\"] //~ WARN unused attribute\n+#![plugin_registrar           = \"4700\"] //~ WARN unused attribute\n+// skipping testing of cfg\n+// skipping testing of cfg_attr\n+#![main                      = \"x4400\"] //~ WARN unused attribute\n+#![start                     = \"x4300\"] //~ WARN unused attribute\n+// see issue-43106-gating-of-test.rs for crate-level; but non crate-level is below at \"4200\"\n+// see issue-43106-gating-of-bench.rs for crate-level; but non crate-level is below at \"4100\"\n+#![simd                       = \"4000\"] //~ WARN unused attribute\n+#![repr                       = \"3900\"] //~ WARN unused attribute\n+#![path                       = \"3800\"] //~ WARN unused attribute\n+#![abi                        = \"3700\"] //~ WARN unused attribute\n+#![automatically_derived      = \"3600\"] //~ WARN unused attribute\n+#![no_mangle                  = \"3500\"]\n+#![no_link                    = \"3400\"] //~ WARN unused attribute\n+// see issue-43106-gating-of-derive.rs\n+#![should_panic               = \"3200\"] //~ WARN unused attribute\n+#![ignore                     = \"3100\"] //~ WARN unused attribute\n+#![no_implicit_prelude        = \"3000\"]\n+#![reexport_test_harness_main = \"2900\"]\n+// see gated-link-args.rs\n+// see issue-43106-gating-of-macro_escape.rs for crate-level; but non crate-level is below at \"2700\"\n+// (cannot easily test gating of crate-level #[no_std]; but non crate-level is below at \"2600\")\n+#![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n+#![doc                        = \"2400\"]\n+#![cold                       = \"2300\"]\n+#![export_name                = \"2200\"]\n+// see issue-43106-gating-of-inline.rs\n+#![link                       = \"2000\"]\n+#![link_name                  = \"1900\"]\n+#![link_section               = \"1800\"]\n+#![no_builtins                = \"1700\"] // Yikes, dupe'd on BUILTIN_ATTRIBUTES list (see \"0300\")\n+#![no_mangle                  = \"1600\"] // Yikes, dupe'd on BUILTIN_ATTRIBUTES list (see \"3500\")\n+// see issue-43106-gating-of-rustc_deprecated.rs\n+#![must_use                   = \"1400\"]\n+// see issue-43106-gating-of-stable.rs\n+// see issue-43106-gating-of-unstable.rs\n+// see issue-43106-gating-of-deprecated.rs\n+#![windows_subsystem          = \"1000\"]\n+\n+// UNGATED CRATE-LEVEL BUILT-IN ATTRIBUTES\n+\n+#![crate_name                 = \"0900\"]\n+#![crate_type                 = \"bin\"] // cannot pass \"0800\" here\n+\n+// For #![crate_id], see issue #43142. (I cannot bear to enshrine current behavior in a test)\n+\n+#![feature                    ( x0600)] //~ WARN unused or unknown feature\n+\n+// For #![no_start], see issue #43144. (I cannot bear to enshrine current behavior in a test)\n+\n+// (cannot easily gating state of crate-level #[no_main]; but non crate-level is below at \"0400\")\n+#![no_builtins                = \"0300\"]\n+#![recursion_limit            = \"0200\"]\n+#![type_length_limit          = \"0100\"]\n+\n+// USES OF BUILT-IN ATTRIBUTES IN OTHER (\"UNUSUAL\") PLACES\n+\n+#[warn(x5400)]\n+//~^ WARN unknown lint: `x5400`\n+mod warn {\n+    mod inner { #![warn(x5400)] }\n+    //~^ WARN unknown lint: `x5400`\n+\n+    #[warn(x5400)] fn f() { }\n+    //~^ WARN unknown lint: `x5400`\n+\n+    #[warn(x5400)] struct S;\n+    //~^ WARN unknown lint: `x5400`\n+\n+    #[warn(x5400)] type T = S;\n+    //~^ WARN unknown lint: `x5400`\n+\n+    #[warn(x5400)] impl S { }\n+    //~^ WARN unknown lint: `x5400`\n+}\n+\n+#[allow(x5300)]\n+//~^ WARN unknown lint: `x5300`\n+mod allow {\n+    mod inner { #![allow(x5300)] }\n+    //~^ WARN unknown lint: `x5300`\n+\n+    #[allow(x5300)] fn f() { }\n+    //~^ WARN unknown lint: `x5300`\n+\n+    #[allow(x5300)] struct S;\n+    //~^ WARN unknown lint: `x5300`\n+\n+    #[allow(x5300)] type T = S;\n+    //~^ WARN unknown lint: `x5300`\n+\n+    #[allow(x5300)] impl S { }\n+    //~^ WARN unknown lint: `x5300`\n+}\n+\n+#[forbid(x5200)]\n+//~^ WARN unknown lint: `x5200`\n+mod forbid {\n+    mod inner { #![forbid(x5200)] }\n+    //~^ WARN unknown lint: `x5200`\n+\n+    #[forbid(x5200)] fn f() { }\n+    //~^ WARN unknown lint: `x5200`\n+\n+    #[forbid(x5200)] struct S;\n+    //~^ WARN unknown lint: `x5200`\n+\n+    #[forbid(x5200)] type T = S;\n+    //~^ WARN unknown lint: `x5200`\n+\n+    #[forbid(x5200)] impl S { }\n+    //~^ WARN unknown lint: `x5200`\n+}\n+\n+#[deny(x5100)]\n+//~^ WARN unknown lint: `x5100`\n+mod deny {\n+    mod inner { #![deny(x5100)] }\n+    //~^ WARN unknown lint: `x5100`\n+\n+    #[deny(x5100)] fn f() { }\n+    //~^ WARN unknown lint: `x5100`\n+\n+    #[deny(x5100)] struct S;\n+    //~^ WARN unknown lint: `x5100`\n+\n+    #[deny(x5100)] type T = S;\n+    //~^ WARN unknown lint: `x5100`\n+\n+    #[deny(x5100)] impl S { }\n+    //~^ WARN unknown lint: `x5100`\n+}\n+\n+#[macro_reexport = \"5000\"]\n+//~^ WARN unused attribute\n+mod macro_reexport {\n+    mod inner { #![macro_reexport=\"5000\"] }\n+    //~^ WARN unused attribute\n+\n+    #[macro_reexport = \"5000\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[macro_reexport = \"5000\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[macro_reexport = \"5000\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[macro_reexport = \"5000\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[macro_use]\n+mod macro_use {\n+    mod inner { #![macro_use] }\n+\n+    #[macro_use] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[macro_use] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[macro_use] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[macro_use] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[macro_export = \"4800\"]\n+//~^ WARN unused attribute\n+mod macro_export {\n+    mod inner { #![macro_export=\"4800\"] }\n+    //~^ WARN unused attribute\n+\n+    #[macro_export = \"4800\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[macro_export = \"4800\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[macro_export = \"4800\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[macro_export = \"4800\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[plugin_registrar = \"4700\"]\n+//~^ WARN unused attribute\n+mod plugin_registrar {\n+    mod inner { #![plugin_registrar=\"4700\"] }\n+    //~^ WARN unused attribute\n+\n+    // for `fn f()` case, see gated-plugin_registrar.rs\n+\n+    #[plugin_registrar = \"4700\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[plugin_registrar = \"4700\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[plugin_registrar = \"4700\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[main = \"4400\"]\n+//~^ WARN unused attribute\n+mod main {\n+    mod inner { #![main=\"4300\"] }\n+    //~^ WARN unused attribute\n+\n+    // for `fn f()` case, see feature-gate-main.rs\n+\n+    #[main = \"4400\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[main = \"4400\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[main = \"4400\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[start = \"4300\"]\n+//~^ WARN unused attribute\n+mod start {\n+    mod inner { #![start=\"4300\"] }\n+    //~^ WARN unused attribute\n+\n+    // for `fn f()` case, see feature-gate-start.rs\n+\n+    #[start = \"4300\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[start = \"4300\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[start = \"4300\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+// At time of unit test authorship, if compiling without `--test` then\n+// non-crate-level #[test] attributes seem to be ignored.\n+\n+#[test = \"4200\"]\n+mod test { mod inner { #![test=\"4200\"] }\n+\n+    fn f() { }\n+\n+    struct S;\n+\n+    type T = S;\n+\n+    impl S { }\n+}\n+\n+// At time of unit test authorship, if compiling without `--test` then\n+// non-crate-level #[bench] attributes seem to be ignored.\n+\n+#[bench = \"4100\"]\n+mod bench {\n+    mod inner { #![bench=\"4100\"] }\n+\n+    #[bench = \"4100\"]\n+    struct S;\n+\n+    #[bench = \"4100\"]\n+    type T = S;\n+\n+    #[bench = \"4100\"]\n+    impl S { }\n+}\n+\n+#[simd = \"4000\"]\n+//~^ WARN unused attribute\n+mod simd {\n+    mod inner { #![simd=\"4000\"] }\n+    //~^ WARN unused attribute\n+\n+    #[simd = \"4000\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    struct S; // for `struct S` case, see feature-gate-repr-simd.rs\n+\n+    #[simd = \"4000\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[simd = \"4000\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[repr = \"3900\"]\n+//~^ WARN unused attribute\n+mod repr {\n+    mod inner { #![repr=\"3900\"] }\n+    //~^ WARN unused attribute\n+\n+    #[repr = \"3900\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[repr = \"3900\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[repr = \"3900\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[repr = \"3900\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[path = \"3800\"]\n+mod path {\n+    mod inner { #![path=\"3800\"] }\n+\n+    #[path = \"3800\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[path = \"3800\"]  struct S;\n+    //~^ WARN unused attribute\n+\n+    #[path = \"3800\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[path = \"3800\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[abi = \"3700\"]\n+//~^ WARN unused attribute\n+mod abi {\n+    mod inner { #![abi=\"3700\"] }\n+    //~^ WARN unused attribute\n+\n+    #[abi = \"3700\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[abi = \"3700\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[abi = \"3700\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[abi = \"3700\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[automatically_derived = \"3600\"]\n+//~^ WARN unused attribute\n+mod automatically_derived {\n+    mod inner { #![automatically_derived=\"3600\"] }\n+    //~^ WARN unused attribute\n+\n+    #[automatically_derived = \"3600\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[automatically_derived = \"3600\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[automatically_derived = \"3600\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[automatically_derived = \"3600\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[no_mangle = \"3500\"]\n+mod no_mangle {\n+    mod inner { #![no_mangle=\"3500\"] }\n+\n+    #[no_mangle = \"3500\"] fn f() { }\n+    //~^ WARN function f is marked #[no_mangle], but not exported\n+\n+    #[no_mangle = \"3500\"] struct S;\n+\n+    #[no_mangle = \"3500\"] type T = S;\n+\n+    #[no_mangle = \"3500\"] impl S { }\n+}\n+\n+#[no_link = \"3400\"]\n+//~^ WARN unused attribute\n+mod no_link {\n+    mod inner { #![no_link=\"3400\"] }\n+    //~^ WARN unused attribute\n+\n+    #[no_link = \"3400\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[no_link = \"3400\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[no_link = \"3400\"]type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[no_link = \"3400\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[should_panic = \"3200\"]\n+//~^ WARN unused attribute\n+mod should_panic {\n+    mod inner { #![should_panic=\"3200\"] }\n+    //~^ WARN unused attribute\n+\n+    #[should_panic = \"3200\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[should_panic = \"3200\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[should_panic = \"3200\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[should_panic = \"3200\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[ignore = \"3100\"]\n+//~^ WARN unused attribute\n+mod ignore {\n+    mod inner { #![ignore=\"3100\"] }\n+    //~^ WARN unused attribute\n+\n+    #[ignore = \"3100\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[ignore = \"3100\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[ignore = \"3100\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[ignore = \"3100\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[no_implicit_prelude = \"3000\"]\n+//~^ WARN unused attribute\n+mod no_implicit_prelude {\n+    mod inner { #![no_implicit_prelude=\"3000\"] }\n+    //~^ WARN unused attribute\n+\n+    #[no_implicit_prelude = \"3000\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[no_implicit_prelude = \"3000\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[no_implicit_prelude = \"3000\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[no_implicit_prelude = \"3000\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[reexport_test_harness_main = \"2900\"]\n+//~^ WARN unused attribute\n+mod reexport_test_harness_main {\n+    mod inner { #![reexport_test_harness_main=\"2900\"] }\n+    //~^ WARN unused attribute\n+\n+    #[reexport_test_harness_main = \"2900\"] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[reexport_test_harness_main = \"2900\"] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[reexport_test_harness_main = \"2900\"] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[reexport_test_harness_main = \"2900\"] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+// Cannnot feed \"2700\" to `#[macro_escape]` without signaling an error.\n+#[macro_escape]\n+//~^ WARN macro_escape is a deprecated synonym for macro_use\n+mod macro_escape {\n+    mod inner { #![macro_escape] }\n+    //~^ WARN macro_escape is a deprecated synonym for macro_use\n+\n+    #[macro_escape] fn f() { }\n+    //~^ WARN unused attribute\n+\n+    #[macro_escape] struct S;\n+    //~^ WARN unused attribute\n+\n+    #[macro_escape] type T = S;\n+    //~^ WARN unused attribute\n+\n+    #[macro_escape] impl S { }\n+    //~^ WARN unused attribute\n+}\n+\n+#[no_std = \"2600\"]\n+//~^ WARN unused attribute\n+//~| WARN crate-level attribute should be an inner attribute\n+mod no_std {\n+    mod inner { #![no_std=\"2600\"] }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be in the root module\n+\n+    #[no_std = \"2600\"] fn f() { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[no_std = \"2600\"] struct S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[no_std = \"2600\"] type T = S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[no_std = \"2600\"] impl S { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+}\n+\n+// At time of authorship, #[proc_macro_derive = \"2500\"] signals error\n+// when it occurs on a mod (apart from crate-level). Therefore it goes\n+// into its own file; see issue-43106-gating-of-proc_macro_derive.rs\n+\n+#[doc = \"2400\"]\n+mod doc {\n+    mod inner { #![doc=\"2400\"] }\n+\n+    #[doc = \"2400\"] fn f() { }\n+\n+    #[doc = \"2400\"] struct S;\n+\n+    #[doc = \"2400\"] type T = S;\n+\n+    #[doc = \"2400\"] impl S { }\n+}\n+\n+#[cold = \"2300\"]\n+mod cold {\n+    mod inner { #![cold=\"2300\"] }\n+\n+    #[cold = \"2300\"] fn f() { }\n+\n+    #[cold = \"2300\"] struct S;\n+\n+    #[cold = \"2300\"] type T = S;\n+\n+    #[cold = \"2300\"] impl S { }\n+}\n+\n+#[export_name = \"2200\"]\n+mod export_name {\n+    mod inner { #![export_name=\"2200\"] }\n+\n+    #[export_name = \"2200\"] fn f() { }\n+\n+    #[export_name = \"2200\"] struct S;\n+\n+    #[export_name = \"2200\"] type T = S;\n+\n+    #[export_name = \"2200\"] impl S { }\n+}\n+\n+// Note that this test ends with a `#[rustc_error] fn main()`, so it\n+// will never invoke the linker. These are here nonetheless to point\n+// out that we allow them at non-crate-level (though I do not know\n+// whether they have the same effect here as at crate-level).\n+\n+#[link = \"2000\"]\n+mod link {\n+    mod inner { #![link=\"2000\"] }\n+\n+    #[link = \"2000\"] fn f() { }\n+\n+    #[link = \"2000\"] struct S;\n+\n+    #[link = \"2000\"] type T = S;\n+\n+    #[link = \"2000\"] impl S { }\n+}\n+\n+#[link_name = \"1900\"]\n+mod link_name {\n+    mod inner { #![link_name=\"1900\"] }\n+\n+    #[link_name = \"1900\"] fn f() { }\n+\n+    #[link_name = \"1900\"] struct S;\n+\n+    #[link_name = \"1900\"] type T = S;\n+\n+    #[link_name = \"1900\"] impl S { }\n+}\n+\n+#[link_section = \"1800\"]\n+mod link_section {\n+    mod inner { #![link_section=\"1800\"] }\n+\n+    #[link_section = \"1800\"] fn f() { }\n+\n+    #[link_section = \"1800\"] struct S;\n+\n+    #[link_section = \"1800\"] type T = S;\n+\n+    #[link_section = \"1800\"] impl S { }\n+}\n+\n+struct StructForDeprecated;\n+\n+#[deprecated = \"1500\"]\n+mod deprecated {\n+    mod inner { #![deprecated=\"1500\"] }\n+\n+    #[deprecated = \"1500\"] fn f() { }\n+\n+    #[deprecated = \"1500\"] struct S1;\n+\n+    #[deprecated = \"1500\"] type T = super::StructForDeprecated;\n+\n+    #[deprecated = \"1500\"] impl super::StructForDeprecated { }\n+}\n+\n+#[must_use = \"1400\"]\n+mod must_use {\n+    mod inner { #![must_use=\"1400\"] }\n+\n+    #[must_use = \"1400\"] fn f() { }\n+\n+    #[must_use = \"1400\"] struct S;\n+\n+    #[must_use = \"1400\"] type T = S;\n+\n+    #[must_use = \"1400\"] impl S { }\n+}\n+\n+#[windows_subsystem = \"1000\"]\n+mod windows_subsystem {\n+    mod inner { #![windows_subsystem=\"1000\"] }\n+\n+    #[windows_subsystem = \"1000\"] fn f() { }\n+\n+    #[windows_subsystem = \"1000\"] struct S;\n+\n+    #[windows_subsystem = \"1000\"] type T = S;\n+\n+    #[windows_subsystem = \"1000\"] impl S { }\n+}\n+\n+// BROKEN USES OF CRATE-LEVEL BUILT-IN ATTRIBUTES\n+\n+#[crate_name = \"0900\"]\n+//~^ WARN unused attribute\n+//~| WARN crate-level attribute should be an inner attribute\n+mod crate_name {\n+    mod inner { #![crate_name=\"0900\"] }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be in the root module\n+\n+    #[crate_name = \"0900\"] fn f() { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[crate_name = \"0900\"] struct S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[crate_name = \"0900\"] type T = S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[crate_name = \"0900\"] impl S { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+}\n+\n+#[crate_type = \"0800\"]\n+//~^ WARN unused attribute\n+//~| WARN crate-level attribute should be an inner attribute\n+mod crate_type {\n+    mod inner { #![crate_type=\"0800\"] }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be in the root module\n+\n+    #[crate_type = \"0800\"] fn f() { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[crate_type = \"0800\"] struct S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[crate_type = \"0800\"] type T = S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[crate_type = \"0800\"] impl S { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+}\n+\n+#[feature(x0600)]\n+//~^ WARN unused attribute\n+//~| WARN crate-level attribute should be an inner attribute\n+mod feature {\n+    mod inner { #![feature(x0600)] }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be in the root module\n+\n+    #[feature(x0600)] fn f() { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[feature(x0600)] struct S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[feature(x0600)] type T = S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[feature(x0600)] impl S { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+}\n+\n+\n+#[no_main = \"0400\"]\n+//~^ WARN unused attribute\n+//~| WARN crate-level attribute should be an inner attribute\n+mod no_main_1 {\n+    mod inner { #![no_main=\"0400\"] }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be in the root module\n+\n+    #[no_main = \"0400\"] fn f() { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[no_main = \"0400\"] struct S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[no_main = \"0400\"] type T = S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[no_main = \"0400\"] impl S { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+}\n+\n+#[no_builtins = \"0300\"]\n+mod no_builtins {\n+    mod inner { #![no_builtins=\"0200\"] }\n+\n+    #[no_builtins = \"0300\"] fn f() { }\n+\n+    #[no_builtins = \"0300\"] struct S;\n+\n+    #[no_builtins = \"0300\"] type T = S;\n+\n+    #[no_builtins = \"0300\"] impl S { }\n+}\n+\n+#[recursion_limit=\"0200\"]\n+//~^ WARN unused attribute\n+//~| WARN crate-level attribute should be an inner attribute\n+mod recursion_limit {\n+    mod inner { #![recursion_limit=\"0200\"] }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be in the root module\n+\n+    #[recursion_limit=\"0200\"] fn f() { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[recursion_limit=\"0200\"] struct S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[recursion_limit=\"0200\"] type T = S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[recursion_limit=\"0200\"] impl S { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+}\n+\n+#[type_length_limit=\"0100\"]\n+//~^ WARN unused attribute\n+//~| WARN crate-level attribute should be an inner attribute\n+mod type_length_limit {\n+    mod inner { #![type_length_limit=\"0100\"] }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be in the root module\n+\n+    #[type_length_limit=\"0100\"] fn f() { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[type_length_limit=\"0100\"] struct S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[type_length_limit=\"0100\"] type T = S;\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+\n+    #[type_length_limit=\"0100\"] impl S { }\n+    //~^ WARN unused attribute\n+    //~| WARN crate-level attribute should be an inner attribute\n+}\n+\n+// Since we expect for the mix of attributes used here to compile\n+// successfully, and we are just testing for the expected warnings of\n+// various (mis)uses of attributes, we use the `rustc_error` attribute\n+// on the `fn main()`.\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    println!(\"Hello World\");\n+}"}, {"sha": "98da43c3a2252ffd078d0609b8105aad460b5158", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-deprecated.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test just shows that a crate-level `#![deprecated]` does not\n+// signal a warning or error. (This file sits on its own because a\n+// crate-level `#![deprecated]` causes all that crate's item\n+// definitions to be deprecated, which is a pain to work with.)\n+//\n+// (For non-crate-level cases, see issue-43106-gating-of-builtin-attrs.rs)\n+\n+#![feature(rustc_attrs)] // For `rustc_error`; see note below.\n+#![allow(dead_code)]\n+\n+#![deprecated           = \"1100\"]\n+\n+// Since we expect for the mix of attributes used here to compile\n+// successfully, and we are just testing for the expected warnings of\n+// various (mis)uses of attributes, we use the `rustc_error` attribute\n+// on the `fn main()`.\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    println!(\"Hello World\");\n+}"}, {"sha": "be82d0a5f6dd892a49ea8ec03d5ec975c2049452", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-derive-2.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// `#![derive]` is interpreted (and raises errors) when it occurs at\n+// contexts other than ADT definitions. This test checks cases where\n+// the derive-macro does not exist.\n+\n+#![derive(x3300)]\n+//~^ ERROR cannot find derive macro `x3300` in this scope\n+\n+#[derive(x3300)]\n+//~^ ERROR cannot find derive macro `x3300` in this scope\n+mod derive {\n+    mod inner { #![derive(x3300)] }\n+    //~^ ERROR cannot find derive macro `x3300` in this scope\n+\n+    #[derive(x3300)]\n+    //~^ ERROR cannot find derive macro `x3300` in this scope\n+    fn derive() { }\n+\n+    #[derive(x3300)]\n+    //~^ ERROR cannot find derive macro `x3300` in this scope\n+    union U { f: i32 }\n+\n+    #[derive(x3300)]\n+    //~^ ERROR cannot find derive macro `x3300` in this scope\n+    enum E { }\n+\n+    #[derive(x3300)]\n+    //~^ ERROR cannot find derive macro `x3300` in this scope\n+    struct S;\n+\n+    #[derive(x3300)]\n+    //~^ ERROR cannot find derive macro `x3300` in this scope\n+    type T = S;\n+\n+    #[derive(x3300)]\n+    //~^ ERROR cannot find derive macro `x3300` in this scope\n+    impl S { }\n+}"}, {"sha": "41c3d0ef561380b708e118065784f3b119f2784e", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-derive.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// `#![derive]` is interpreted (and raises errors) when it occurs at\n+// contexts other than ADT definitions. This test checks cases where\n+// the derive-macro exists.\n+\n+#![derive(Debug)]\n+//~^ ERROR `derive` may only be applied to structs, enums and unions\n+\n+#[derive(Debug)]\n+//~^ ERROR `derive` may only be applied to structs, enums and unions\n+mod derive {\n+    mod inner { #![derive(Debug)] }\n+    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+\n+    #[derive(Debug)]\n+    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    fn derive() { }\n+\n+    #[derive(Copy, Clone)] // (can't derive Debug for unions)\n+    union U { f: i32 }\n+\n+    #[derive(Debug)]\n+    struct S;\n+\n+    #[derive(Debug)]\n+    enum E { }\n+\n+    #[derive(Debug)]\n+    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    type T = S;\n+\n+    #[derive(Debug)]\n+    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    impl S { }\n+}"}, {"sha": "24e77bf60a8d1e76709b51400fe133fe2074e786", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-inline.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is testing whether `#[inline]` signals an error or warning\n+// when put in \"weird\" places.\n+//\n+// (This file sits on its own because it actually signals an error,\n+// which would mess up the treatment of other cases in\n+// issue-43106-gating-of-builtin-attrs.rs)\n+\n+// Crate-level is accepted, though it is almost certainly unused?\n+#![inline                     = \"2100\"]\n+\n+#[inline = \"2100\"]\n+//~^ ERROR attribute should be applied to function\n+mod inline {\n+    mod inner { #![inline=\"2100\"] }\n+    //~^ ERROR attribute should be applied to function\n+\n+    #[inline = \"2100\"] fn f() { }\n+\n+    #[inline = \"2100\"] struct S;\n+    //~^ ERROR attribute should be applied to function\n+\n+    #[inline = \"2100\"] type T = S;\n+    //~^ ERROR attribute should be applied to function\n+\n+    #[inline = \"2100\"] impl S { }\n+    //~^ ERROR attribute should be applied to function\n+}"}, {"sha": "3b2dbdefebad855776cf1f5c943305ff006d5423", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-macro_escape.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Testing that crate-level `#![macro_escape]` is not gated beyond a\n+// depecation warning.  This file sits on its own, because crate-level\n+// `#![macro_escape]` is incompatible with crate-level `#![macro_use]`\n+// already present in issue-43106-gating-of-builtin-attrs.\n+\n+#![macro_escape]\n+//~^ WARN macro_escape is a deprecated synonym for macro_use"}, {"sha": "cf5619da3c7c8a9dfc91582ea2acfe9c50e1dddc", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-macro_use.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is just a check-list of the cases where feeding arguments to\n+// `#[macro_use]` is rejected. (The cases where no error is emitted\n+// corresponds to cases where the attribute is currently unused, so we\n+// get that warning; see issue-43106-gating-of-builtin-attrs.rs\n+\n+#![macro_use                  = \"4900\"] //~ ERROR arguments to macro_use are not allowed here\n+\n+#[macro_use = \"2700\"]\n+//~^ ERROR arguments to macro_use are not allowed here\n+mod macro_escape {\n+    mod inner { #![macro_use=\"2700\"] }\n+    //~^ ERROR arguments to macro_use are not allowed here\n+\n+    #[macro_use = \"2700\"] fn f() { }\n+\n+    #[macro_use = \"2700\"] struct S;\n+\n+    #[macro_use = \"2700\"] type T = S;\n+\n+    #[macro_use = \"2700\"] impl S { }\n+}\n+\n+fn main() { }"}, {"sha": "133f70e0f3b19b9a26411cbc7b917d41e76ce986", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-proc_macro_derive.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// At time of authorship, #[proc_macro_derive = \"2500\"] will emit an\n+// error when it occurs on a mod (apart from crate-level), but will\n+// not descend further into the mod for other occurrences of the same\n+// error.\n+//\n+// This file sits on its own because the the \"weird\" occurrences here\n+// signal errors, making it incompatible with the \"warnings only\"\n+// nature of issue-43106-gating-of-builtin-attrs.rs\n+\n+#[proc_macro_derive = \"2500\"]\n+//~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n+mod proc_macro_derive1 {\n+    mod inner { #![proc_macro_derive=\"2500\"] }\n+    // (no error issued here if there was one on outer module)\n+}\n+\n+mod proc_macro_derive2 {\n+    mod inner { #![proc_macro_derive=\"2500\"] }\n+    //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n+\n+    #[proc_macro_derive = \"2500\"] fn f() { }\n+    //~^ ERROR the `#[proc_macro_derive]` attribute is only usable with crates of the `proc-macro`\n+\n+    #[proc_macro_derive = \"2500\"] struct S;\n+    //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n+\n+    #[proc_macro_derive = \"2500\"] type T = S;\n+    //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n+\n+    #[proc_macro_derive = \"2500\"] impl S { }\n+    //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n+}"}, {"sha": "4709ec2bc579b4638e290c337d695cb416a4bbf2", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-rustc_deprecated.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Testing gating of `#[rustc_deprecated]` in \"weird\" places.\n+//\n+// This file sits on its own because these signal errors, making\n+// this test incompatible with the \"warnings only\" nature of\n+// issue-43106-gating-of-builtin-attrs.rs\n+\n+#![rustc_deprecated           = \"1500\"]\n+//~^ ERROR stability attributes may not be used outside of the standard library\n+\n+#[rustc_deprecated = \"1500\"]\n+//~^ ERROR stability attributes may not be used outside of the standard library\n+mod rustc_deprecated {\n+    mod inner { #![rustc_deprecated=\"1500\"] }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[rustc_deprecated = \"1500\"] fn f() { }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[rustc_deprecated = \"1500\"] struct S;\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR stability attributes may not be used outside of the standard library\n+\n+    #[rustc_deprecated = \"1500\"] type T = S;\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[rustc_deprecated = \"1500\"] impl S { }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+}\n+"}, {"sha": "9627d32d42aadaccc3b29759f06ebf34417179ce", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-stable.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Testing gating of `#[stable]` in \"weird\" places.\n+//\n+// This file sits on its own because these signal errors, making\n+// this test incompatible with the \"warnings only\" nature of\n+// issue-43106-gating-of-builtin-attrs.rs\n+\n+#![stable                     = \"1300\"]\n+//~^ ERROR stability attributes may not be used outside of the standard library\n+\n+#[stable = \"1300\"]\n+//~^ ERROR stability attributes may not be used outside of the standard library\n+mod stable {\n+    mod inner { #![stable=\"1300\"] }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[stable = \"1300\"] fn f() { }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[stable = \"1300\"] struct S;\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR stability attributes may not be used outside of the standard library\n+\n+    #[stable = \"1300\"] type T = S;\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[stable = \"1300\"] impl S { }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+}"}, {"sha": "adcbfe77280b7ce2f2057dea20b5bd6b99f26ea8", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-test.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-test.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: main function not found\n+\n+// At time of authorship, crate-level #[test] attribute with no\n+// `--test` signals unconditional error complaining of missing main\n+// function (despite having one), similar to #[bench].\n+//\n+// (The non-crate level cases are in\n+// issue-43106-gating-of-builtin-attrs.rs.)\n+\n+#![test                    = \"4200\"]\n+\n+fn main() { }"}, {"sha": "0708dc8f728e8e1806888f26634e2d920dd02199", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-unstable.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e2c396a4062d59ca6be3a74ac432bd1f878942/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs?ref=88e2c396a4062d59ca6be3a74ac432bd1f878942", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Testing gating of `#[unstable]` in \"weird\" places.\n+//\n+// This file sits on its own because these signal errors, making\n+// this test incompatible with the \"warnings only\" nature of\n+// issue-43106-gating-of-builtin-attrs.rs\n+\n+#![unstable                   = \"1200\"]\n+//~^ ERROR stability attributes may not be used outside of the standard library\n+\n+#[unstable = \"1200\"]\n+//~^ ERROR stability attributes may not be used outside of the standard library\n+mod unstable {\n+    mod inner { #![unstable=\"1200\"] }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[unstable = \"1200\"] fn f() { }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[unstable = \"1200\"] struct S;\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+    //~| ERROR stability attributes may not be used outside of the standard library\n+\n+    #[unstable = \"1200\"] type T = S;\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+\n+    #[unstable = \"1200\"] impl S { }\n+    //~^ ERROR stability attributes may not be used outside of the standard library\n+}"}]}