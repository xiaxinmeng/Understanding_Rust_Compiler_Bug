{"sha": "77b3090854f7d64cec26924a4109cd54cd975b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YjMwOTA4NTRmN2Q2NGNlYzI2OTI0YTQxMDljZDU0Y2Q5NzViOWE=", "commit": {"author": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2017-12-18T21:11:44Z"}, "committer": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2017-12-18T22:08:06Z"}, "message": "Implement `Write` for `Cursor<&mut Vec<T>>`", "tree": {"sha": "7514ca99c26b24832e4af79e796fc3d53d0559bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7514ca99c26b24832e4af79e796fc3d53d0559bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b3090854f7d64cec26924a4109cd54cd975b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b3090854f7d64cec26924a4109cd54cd975b9a", "html_url": "https://github.com/rust-lang/rust/commit/77b3090854f7d64cec26924a4109cd54cd975b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b3090854f7d64cec26924a4109cd54cd975b9a/comments", "author": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b058dc0107b734b0a1a664ca0209366bb59eb3e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b058dc0107b734b0a1a664ca0209366bb59eb3e9", "html_url": "https://github.com/rust-lang/rust/commit/b058dc0107b734b0a1a664ca0209366bb59eb3e9"}], "stats": {"total": 90, "additions": 58, "deletions": 32}, "files": [{"sha": "c8447707d5bafdbcb1d73d54927857d8c3977994", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 58, "deletions": 32, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/77b3090854f7d64cec26924a4109cd54cd975b9a/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b3090854f7d64cec26924a4109cd54cd975b9a/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=77b3090854f7d64cec26924a4109cd54cd975b9a", "patch": "@@ -252,44 +252,62 @@ impl<T> BufRead for Cursor<T> where T: AsRef<[u8]> {\n     fn consume(&mut self, amt: usize) { self.pos += amt as u64; }\n }\n \n+// Non-resizing write implementation\n+fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<usize> {\n+    let pos = cmp::min(*pos_mut, slice.len() as u64);\n+    let amt = (&mut slice[(pos as usize)..]).write(buf)?;\n+    *pos_mut += amt as u64;\n+    Ok(amt)\n+}\n+\n+// Resizing write implementation\n+fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usize> {\n+    let pos: usize = (*pos_mut).try_into().map_err(|_| {\n+        Error::new(ErrorKind::InvalidInput,\n+                    \"cursor position exceeds maximum possible vector length\")\n+    })?;\n+    // Make sure the internal buffer is as least as big as where we\n+    // currently are\n+    let len = vec.len();\n+    if len < pos {\n+        // use `resize` so that the zero filling is as efficient as possible\n+        vec.resize(pos, 0);\n+    }\n+    // Figure out what bytes will be used to overwrite what's currently\n+    // there (left), and what will be appended on the end (right)\n+    {\n+        let space = vec.len() - pos;\n+        let (left, right) = buf.split_at(cmp::min(space, buf.len()));\n+        vec[pos..pos + left.len()].copy_from_slice(left);\n+        vec.extend_from_slice(right);\n+    }\n+\n+    // Bump us forward\n+    *pos_mut = (pos + buf.len()) as u64;\n+    Ok(buf.len())\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for Cursor<&'a mut [u8]> {\n     #[inline]\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        let pos = cmp::min(self.pos, self.inner.len() as u64);\n-        let amt = (&mut self.inner[(pos as usize)..]).write(data)?;\n-        self.pos += amt as u64;\n-        Ok(amt)\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        slice_write(&mut self.pos, self.inner, buf)\n+    }\n+    fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+}\n+\n+#[unstable(feature = \"cursor_mut_vec\", issue = \"30132\")]\n+impl<'a> Write for Cursor<&'a mut Vec<u8>> {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        vec_write(&mut self.pos, self.inner, buf)\n     }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Cursor<Vec<u8>> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        let pos: usize = self.position().try_into().map_err(|_| {\n-            Error::new(ErrorKind::InvalidInput,\n-                       \"cursor position exceeds maximum possible vector length\")\n-        })?;\n-        // Make sure the internal buffer is as least as big as where we\n-        // currently are\n-        let len = self.inner.len();\n-        if len < pos {\n-            // use `resize` so that the zero filling is as efficient as possible\n-            self.inner.resize(pos, 0);\n-        }\n-        // Figure out what bytes will be used to overwrite what's currently\n-        // there (left), and what will be appended on the end (right)\n-        {\n-            let space = self.inner.len() - pos;\n-            let (left, right) = buf.split_at(cmp::min(space, buf.len()));\n-            self.inner[pos..pos + left.len()].copy_from_slice(left);\n-            self.inner.extend_from_slice(right);\n-        }\n-\n-        // Bump us forward\n-        self.set_position((pos + buf.len()) as u64);\n-        Ok(buf.len())\n+        vec_write(&mut self.pos, &mut self.inner, buf)\n     }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n@@ -298,10 +316,7 @@ impl Write for Cursor<Vec<u8>> {\n impl Write for Cursor<Box<[u8]>> {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        let pos = cmp::min(self.pos, self.inner.len() as u64);\n-        let amt = (&mut self.inner[(pos as usize)..]).write(buf)?;\n-        self.pos += amt as u64;\n-        Ok(amt)\n+        slice_write(&mut self.pos, &mut self.inner, buf)\n     }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n@@ -331,6 +346,17 @@ mod tests {\n         assert_eq!(&writer.get_ref()[..], b);\n     }\n \n+    #[test]\n+    fn test_mem_mut_writer() {\n+        let mut vec = Vec::new();\n+        let mut writer = Cursor::new(&mut vec);\n+        assert_eq!(writer.write(&[0]).unwrap(), 1);\n+        assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n+        assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n+        let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n+        assert_eq!(&writer.get_ref()[..], b);\n+    }\n+\n     #[test]\n     fn test_box_slice_writer() {\n         let mut writer = Cursor::new(vec![0u8; 9].into_boxed_slice());"}]}