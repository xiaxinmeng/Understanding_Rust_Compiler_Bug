{"sha": "31540f5e15d5785a61d96869b373f7ed4d4a3654", "node_id": "C_kwDOAAsO6NoAKDMxNTQwZjVlMTVkNTc4NWE2MWQ5Njg2OWIzNzNmN2VkNGQ0YTM2NTQ", "commit": {"author": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-08-16T16:12:06Z"}, "committer": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-08-16T16:12:06Z"}, "message": "Use `MaybeUninit<u8>` for `IpDisplayBuffer`.", "tree": {"sha": "1d2e53179e8f60d2c38bd6645efb51b5442ed7a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d2e53179e8f60d2c38bd6645efb51b5442ed7a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31540f5e15d5785a61d96869b373f7ed4d4a3654", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEbU1eLXPTwjnhHZwHJFKTtRcCZVsFAmL7wdYRHG1lQHJlaXRl\ncm1hcmsudXMACgkQJFKTtRcCZVt7ThAAvZ0IPbO8rLbUxPCoYE6ROjxoHeD405Lv\nYc1WSDZ4sVyU0L3sOuZMPp0kqI9figW5LYXGFr+U7cpMGHYQ1m3GngyPy7wkV5Qh\nSDt+Yv8kun59oCI8JT7+eWJwxA8l2EDxj2vdep8PQLIl6RCjj2mSJbayH469DOnt\nO9fqvCEqTD6yhcaAheW1I94DKaSX43Ce95uTO9OAW+e0+cXfnpFw/OoJwBKX1Yle\nIIw68d/lQs4mkNT8FfRdZXceDnAyMn9/JZ0T0JzqwmkqGEMuabGvMJNl4syS4hqj\n5Uqpqo10ntW1MjYzkcTSc1NB0XNTNtLDMtbNK1FPYM1zRZLomJLfvyEFtBt4sqXj\n21zLRVwzkD1WlP/j6saFALF14NEC51fTs9/yIPAejTkRvqeljaaZViRbfMWLaAEz\nuHGZnz6MAQy+q5EoE7Ob3RRJE6CqLFnqCRtA6W0QV2hyejoUpoNn863slh13K8WZ\nAv4ApoQPF8aWXWL/h9Bq9Xef1TQbXspENBQ1nNAdHhg655uK2gckndYv7vzLLyOp\n1EFOj1URkvX+24ZzqLOT+WnamRGkLycnTHUfuOjDiQJKCt+ohzG7xGgmyGGaviSK\nE+3590elalqUPuUAx/C4CJVbehpLFULUN7SraYc9ACvHsF7SAhdxu+5Z5cNRNKyH\nw0DncuwOkb4=\n=2Rdw\n-----END PGP SIGNATURE-----", "payload": "tree 1d2e53179e8f60d2c38bd6645efb51b5442ed7a9\nparent 033e9d66ffa918b2cd78649c5b8cba372f58f9e4\nauthor Markus Reiter <me@reitermark.us> 1660666326 +0200\ncommitter Markus Reiter <me@reitermark.us> 1660666326 +0200\n\nUse `MaybeUninit<u8>` for `IpDisplayBuffer`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31540f5e15d5785a61d96869b373f7ed4d4a3654", "html_url": "https://github.com/rust-lang/rust/commit/31540f5e15d5785a61d96869b373f7ed4d4a3654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31540f5e15d5785a61d96869b373f7ed4d4a3654/comments", "author": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033e9d66ffa918b2cd78649c5b8cba372f58f9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/033e9d66ffa918b2cd78649c5b8cba372f58f9e4", "html_url": "https://github.com/rust-lang/rust/commit/033e9d66ffa918b2cd78649c5b8cba372f58f9e4"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "a8d6645794ae5d5fcd06ef2bca51018cb620aa10", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31540f5e15d5785a61d96869b373f7ed4d4a3654/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31540f5e15d5785a61d96869b373f7ed4d4a3654/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=31540f5e15d5785a61d96869b373f7ed4d4a3654", "patch": "@@ -294,6 +294,8 @@\n #![feature(std_internals)]\n #![feature(str_internals)]\n #![feature(strict_provenance)]\n+#![feature(maybe_uninit_uninit_array)]\n+#![feature(const_maybe_uninit_uninit_array)]\n //\n // Library features (alloc):\n #![feature(alloc_layout_extra)]"}, {"sha": "65f11b8ae93f5f4d88c759556316261d0ea5ab67", "filename": "library/std/src/net/ip/display_buffer.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/31540f5e15d5785a61d96869b373f7ed4d4a3654/library%2Fstd%2Fsrc%2Fnet%2Fip%2Fdisplay_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31540f5e15d5785a61d96869b373f7ed4d4a3654/library%2Fstd%2Fsrc%2Fnet%2Fip%2Fdisplay_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Fdisplay_buffer.rs?ref=31540f5e15d5785a61d96869b373f7ed4d4a3654", "patch": "@@ -1,31 +1,37 @@\n use crate::fmt;\n+use crate::mem::MaybeUninit;\n use crate::str;\n \n /// Used for slow path in `Display` implementations when alignment is required.\n pub struct IpDisplayBuffer<const SIZE: usize> {\n-    buf: [u8; SIZE],\n+    buf: [MaybeUninit<u8>; SIZE],\n     len: usize,\n }\n \n impl<const SIZE: usize> IpDisplayBuffer<SIZE> {\n     #[inline(always)]\n     pub const fn new(_ip: &[u8; SIZE]) -> Self {\n-        Self { buf: [0; SIZE], len: 0 }\n+        Self { buf: MaybeUninit::uninit_array::<SIZE>(), len: 0 }\n     }\n \n     #[inline(always)]\n     pub fn as_str(&self) -> &str {\n         // SAFETY: `buf` is only written to by the `fmt::Write::write_str` implementation\n         // which writes a valid UTF-8 string to `buf` and correctly sets `len`.\n-        unsafe { str::from_utf8_unchecked(&self.buf[..self.len]) }\n+        unsafe {\n+            let s = MaybeUninit::slice_assume_init_ref(&self.buf[..self.len]);\n+            str::from_utf8_unchecked(s)\n+        }\n     }\n }\n \n impl<const SIZE: usize> fmt::Write for IpDisplayBuffer<SIZE> {\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n-        if let Some(buf) = self.buf.get_mut(self.len..(self.len + s.len())) {\n-            buf.copy_from_slice(s.as_bytes());\n-            self.len += s.len();\n+        let bytes = s.as_bytes();\n+\n+        if let Some(buf) = self.buf.get_mut(self.len..(self.len + bytes.len())) {\n+            MaybeUninit::write_slice(buf, bytes);\n+            self.len += bytes.len();\n             Ok(())\n         } else {\n             Err(fmt::Error)"}]}