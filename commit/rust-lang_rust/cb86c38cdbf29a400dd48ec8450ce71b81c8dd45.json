{"sha": "cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "node_id": "C_kwDOAAsO6NoAKGNiODZjMzhjZGJmMjlhNDAwZGQ0OGVjODQ1MGNlNzFiODFjOGRkNDU", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-08-26T12:59:12Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-09-05T11:49:37Z"}, "message": "Fix `#[derive(Default)]` on a generic `#[default]` enum adding unnecessary `Default` bounds", "tree": {"sha": "c7d7a2cff7271c238eff729934fc2c72a3cf769c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7d7a2cff7271c238eff729934fc2c72a3cf769c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "html_url": "https://github.com/rust-lang/rust/commit/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4bd154de6e41d4739914f446349f8201ec3ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4bd154de6e41d4739914f446349f8201ec3ef9", "html_url": "https://github.com/rust-lang/rust/commit/5b4bd154de6e41d4739914f446349f8201ec3ef9"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "7bd344467d03213130aa32ae46fad4f47875d853", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -16,6 +16,7 @@ pub fn expand_deriving_copy(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(marker::Copy),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "fa8685f5f4e5650882fa957c2368faa80e0abc0e", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -72,6 +72,7 @@ pub fn expand_deriving_clone(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(clone::Clone),\n+        skip_path_as_bound: false,\n         additional_bounds: bounds,\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "eab67b0d354cf7dd18be1b785c514c4debe47517", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -25,6 +25,7 @@ pub fn expand_deriving_eq(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Eq),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "7f117981a9a2fe73fdece52da04079838e815e0f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -19,6 +19,7 @@ pub fn expand_deriving_ord(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Ord),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "236cbccaf9fee6286494c1bfc08173c01f04716f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -83,6 +83,7 @@ pub fn expand_deriving_partial_eq(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::PartialEq),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "4173403a1b84a4f4007d77aae5376ffc3e63a109", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -37,6 +37,7 @@ pub fn expand_deriving_partial_ord(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::PartialOrd),\n+        skip_path_as_bound: false,\n         additional_bounds: vec![],\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "2cf614ed9476c9435b50d7aaced16f097bb3cc39", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -20,6 +20,7 @@ pub fn expand_deriving_debug(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(fmt::Debug),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "d669f616802feda4bf06d489b3eaf7966977dd1a", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -23,6 +23,7 @@ pub fn expand_deriving_rustc_decodable(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "17df9fb279ad6b808e57840c5d417e1639d8a144", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -24,6 +24,7 @@ pub fn expand_deriving_default(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new(vec![kw::Default, sym::Default]),\n+        skip_path_as_bound: has_a_default_variant(item),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,\n@@ -262,3 +263,22 @@ impl<'a, 'b> rustc_ast::visit::Visitor<'a> for DetectNonVariantDefaultAttr<'a, '\n         }\n     }\n }\n+\n+fn has_a_default_variant(item: &Annotatable) -> bool {\n+    struct HasDefaultAttrOnVariant {\n+        found: bool,\n+    }\n+\n+    impl<'ast> rustc_ast::visit::Visitor<'ast> for HasDefaultAttrOnVariant {\n+        fn visit_variant(&mut self, v: &'ast rustc_ast::Variant) {\n+            if v.attrs.iter().any(|attr| attr.has_name(kw::Default)) {\n+                self.found = true;\n+            }\n+            // no need to subrecurse.\n+        }\n+    }\n+\n+    let mut visitor = HasDefaultAttrOnVariant { found: false };\n+    item.visit_with(&mut visitor);\n+    visitor.found\n+}"}, {"sha": "f83f58b97d38ffb3566af5ad883ca3984e69b2aa", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -107,6 +107,7 @@ pub fn expand_deriving_rustc_encodable(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "cd53050c61e689004aacb994a1ed9aa1f8692c47", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -172,6 +172,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use std::cell::RefCell;\n use std::iter;\n+use std::ops::Not;\n use std::vec;\n use thin_vec::thin_vec;\n use ty::{Bounds, Path, Ref, Self_, Ty};\n@@ -185,6 +186,9 @@ pub struct TraitDef<'a> {\n     /// Path of the trait, including any type parameters\n     pub path: Path,\n \n+    /// Whether to skip adding the current trait as a bound to the type parameters of the type.\n+    pub skip_path_as_bound: bool,\n+\n     /// Additional bounds required of any type parameters of the type,\n     /// other than the current trait\n     pub additional_bounds: Vec<Ty>,\n@@ -594,7 +598,7 @@ impl<'a> TraitDef<'a> {\n                         cx.trait_bound(p.to_path(cx, self.span, type_ident, generics))\n                     }).chain(\n                         // require the current trait\n-                        iter::once(cx.trait_bound(trait_path.clone()))\n+                        self.skip_path_as_bound.not().then(|| cx.trait_bound(trait_path.clone()))\n                     ).chain(\n                         // also add in any bounds from the declaration\n                         param.bounds.iter().cloned()"}, {"sha": "6e9d5f08b9443dd22cc0ec40d828e6070306f405", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb86c38cdbf29a400dd48ec8450ce71b81c8dd45/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=cb86c38cdbf29a400dd48ec8450ce71b81c8dd45", "patch": "@@ -22,6 +22,7 @@ pub fn expand_deriving_hash(\n     let hash_trait_def = TraitDef {\n         span,\n         path,\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}]}