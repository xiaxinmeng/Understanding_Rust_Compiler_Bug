{"sha": "1dfe5088d85df13a172810d0df92c25dbcc37e98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZmU1MDg4ZDg1ZGYxM2ExNzI4MTBkMGRmOTJjMjVkYmNjMzdlOTg=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-09-26T07:54:30Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:10:11Z"}, "message": "path2: Add opt variants for from_vec/from_str", "tree": {"sha": "8578c8be4bdadf0b04aa232ac66c4e0503c6bbe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8578c8be4bdadf0b04aa232ac66c4e0503c6bbe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dfe5088d85df13a172810d0df92c25dbcc37e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dfe5088d85df13a172810d0df92c25dbcc37e98", "html_url": "https://github.com/rust-lang/rust/commit/1dfe5088d85df13a172810d0df92c25dbcc37e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dfe5088d85df13a172810d0df92c25dbcc37e98/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c16d7a439441ecfb8ac53deee070bb616fdc759e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c16d7a439441ecfb8ac53deee070bb616fdc759e", "html_url": "https://github.com/rust-lang/rust/commit/c16d7a439441ecfb8ac53deee070bb616fdc759e"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "054a8a36eb5fb7502e7e738e7275ae923f9df073", "filename": "src/libstd/path2/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1dfe5088d85df13a172810d0df92c25dbcc37e98/src%2Flibstd%2Fpath2%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dfe5088d85df13a172810d0df92c25dbcc37e98/src%2Flibstd%2Fpath2%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fmod.rs?ref=1dfe5088d85df13a172810d0df92c25dbcc37e98", "patch": "@@ -81,6 +81,17 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n         }\n     }\n \n+    /// Creates a new Path from a byte vector, if possible.\n+    /// The resulting Path will always be normalized.\n+    #[inline]\n+    fn from_vec_opt(path: &[u8]) -> Option<Self> {\n+        if contains_nul(path) {\n+            None\n+        } else {\n+            Some(unsafe { GenericPathUnsafe::from_vec_unchecked(path) })\n+        }\n+    }\n+\n     /// Creates a new Path from a string.\n     /// The resulting Path will always be normalized.\n     ///\n@@ -97,6 +108,18 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n         }\n     }\n \n+    /// Creates a new Path from a string, if possible.\n+    /// The resulting Path will always be normalized.\n+    #[inline]\n+    fn from_str_opt(path: &str) -> Option<Self> {\n+        let v = path.as_bytes();\n+        if contains_nul(v) {\n+            None\n+        } else {\n+            Some(unsafe { GenericPathUnsafe::from_str_unchecked(path) })\n+        }\n+    }\n+\n     /// Creates a new Path from a CString.\n     /// The resulting Path will always be normalized.\n     ///"}, {"sha": "fb39be7b6b17160c47c93254ef07b489acd43d50", "filename": "src/libstd/path2/posix.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dfe5088d85df13a172810d0df92c25dbcc37e98/src%2Flibstd%2Fpath2%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dfe5088d85df13a172810d0df92c25dbcc37e98/src%2Flibstd%2Fpath2%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fposix.rs?ref=1dfe5088d85df13a172810d0df92c25dbcc37e98", "patch": "@@ -287,6 +287,12 @@ impl Path {\n         GenericPath::from_vec(v)\n     }\n \n+    /// Returns a new Path from a byte vector, if possible\n+    #[inline]\n+    pub fn from_vec_opt(v: &[u8]) -> Option<Path> {\n+        GenericPath::from_vec_opt(v)\n+    }\n+\n     /// Returns a new Path from a string\n     ///\n     /// # Failure\n@@ -297,6 +303,12 @@ impl Path {\n         GenericPath::from_str(s)\n     }\n \n+    /// Returns a new Path from a string, if possible\n+    #[inline]\n+    pub fn from_str_opt(s: &str) -> Option<Path> {\n+        GenericPath::from_str_opt(s)\n+    }\n+\n     /// Converts the Path into an owned byte vector\n     pub fn into_vec(self) -> ~[u8] {\n         self.repr\n@@ -475,6 +487,14 @@ mod tests {\n         assert_eq!(Path::from_vec(b!(\"foo\", 0xff, \"/bar\")).into_str(), None);\n     }\n \n+    #[test]\n+    fn test_opt_paths() {\n+        assert_eq!(Path::from_vec_opt(b!(\"foo/bar\", 0)), None);\n+        t!(v: Path::from_vec_opt(b!(\"foo/bar\")).unwrap(), b!(\"foo/bar\"));\n+        assert_eq!(Path::from_str_opt(\"foo/bar\\0\"), None);\n+        t!(s: Path::from_str_opt(\"foo/bar\").unwrap(), \"foo/bar\");\n+    }\n+\n     #[test]\n     fn test_null_byte() {\n         use path2::null_byte::cond;"}, {"sha": "747f803f08cea53511112e6406523a0c182f0463", "filename": "src/libstd/path2/windows.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1dfe5088d85df13a172810d0df92c25dbcc37e98/src%2Flibstd%2Fpath2%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dfe5088d85df13a172810d0df92c25dbcc37e98/src%2Flibstd%2Fpath2%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fwindows.rs?ref=1dfe5088d85df13a172810d0df92c25dbcc37e98", "patch": "@@ -328,6 +328,15 @@ impl GenericPathUnsafe for Path {\n }\n \n impl GenericPath for Path {\n+    #[inline]\n+    fn from_vec_opt(v: &[u8]) -> Option<Path> {\n+        if contains_nul(v) || !str::is_utf8(v) {\n+            None\n+        } else {\n+            Some(unsafe { GenericPathUnsafe::from_vec_unchecked(v) })\n+        }\n+    }\n+\n     /// See `GenericPath::as_str` for info.\n     /// Always returns a `Some` value.\n     #[inline]\n@@ -583,6 +592,12 @@ impl Path {\n         GenericPath::from_vec(v)\n     }\n \n+    /// Returns a new Path from a byte vector, if possible\n+    #[inline]\n+    pub fn from_vec_opt(v: &[u8]) -> Option<Path> {\n+        GenericPath::from_vec_opt(v)\n+    }\n+\n     /// Returns a new Path from a string\n     ///\n     /// # Failure\n@@ -593,6 +608,12 @@ impl Path {\n         GenericPath::from_str(s)\n     }\n \n+    /// Returns a new Path from a string, if possible\n+    #[inline]\n+    pub fn from_str_opt(s: &str) -> Option<Path> {\n+        GenericPath::from_str_opt(s)\n+    }\n+\n     /// Converts the Path into an owned byte vector\n     pub fn into_vec(self) -> ~[u8] {\n         self.repr.into_bytes()\n@@ -1201,6 +1222,15 @@ mod tests {\n         t!(s: Path::from_str(\"\\\\\\\\.\\\\foo\\\\bar\"), \"\\\\\\\\.\\\\foo\\\\bar\");\n     }\n \n+    #[test]\n+    fn test_opt_paths() {\n+        assert_eq!(Path::from_vec_opt(b!(\"foo\\\\bar\", 0)), None);\n+        assert_eq!(Path::from_vec_opt(b!(\"foo\\\\bar\", 0x80)), None);\n+        t!(v: Path::from_vec_opt(b!(\"foo\\\\bar\")).unwrap(), b!(\"foo\\\\bar\"));\n+        assert_eq!(Path::from_str_opt(\"foo\\\\bar\\0\"), None);\n+        t!(s: Path::from_str_opt(\"foo\\\\bar\").unwrap(), \"foo\\\\bar\");\n+    }\n+\n     #[test]\n     fn test_null_byte() {\n         use path2::null_byte::cond;"}]}