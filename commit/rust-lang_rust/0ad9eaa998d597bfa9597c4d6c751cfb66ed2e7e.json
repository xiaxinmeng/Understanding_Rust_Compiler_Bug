{"sha": "0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDllYWE5OThkNTk3YmZhOTU5N2M0ZDZjNzUxY2ZiNjZlZDJlN2U=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T12:21:01Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(16): Inject allocator shim into LLVM module immediately if necessary.", "tree": {"sha": "920a9617df8f02315f8bf8f90df2e269ffdbc20f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/920a9617df8f02315f8bf8f90df2e269ffdbc20f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e", "html_url": "https://github.com/rust-lang/rust/commit/0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943a5bdf35a27239013b0aced68588034d366d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/943a5bdf35a27239013b0aced68588034d366d0f", "html_url": "https://github.com/rust-lang/rust/commit/943a5bdf35a27239013b0aced68588034d366d0f"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "6088b8e479b6c337d6863865cb8f248bb9603030", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e", "patch": "@@ -989,6 +989,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let (translation_items, codegen_units) =\n         collect_and_partition_translation_items(&shared_ccx, &exported_symbols);\n \n+    assert!(codegen_units.len() <= 1 || !tcx.sess.lto());\n+\n     let translation_items = Arc::new(translation_items);\n \n     let mut all_stats = Stats::default();\n@@ -1106,13 +1108,27 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 debuginfo::finalize(&ccx);\n             }\n \n+            let llvm_module = ModuleLlvm {\n+                llcx: ccx.llcx(),\n+                llmod: ccx.llmod(),\n+            };\n+\n+            // In LTO mode we inject the allocator shim into the existing\n+            // module.\n+            if ccx.sess().lto() {\n+                if let Some(kind) = ccx.sess().allocator_kind.get() {\n+                    time(ccx.sess().time_passes(), \"write allocator module\", || {\n+                        unsafe {\n+                            allocator::trans(ccx.tcx(), &llvm_module, kind);\n+                        }\n+                    });\n+                }\n+            }\n+\n             ModuleTranslation {\n                 name: cgu_name,\n                 symbol_name_hash,\n-                source: ModuleSource::Translated(ModuleLlvm {\n-                    llcx: ccx.llcx(),\n-                    llmod: ccx.llmod(),\n-                }),\n+                source: ModuleSource::Translated(llvm_module),\n                 kind: ModuleKind::Regular,\n             }\n         };\n@@ -1180,13 +1196,10 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // links in an object file that has allocator functions. When we're\n     // compiling a final LTO artifact, though, there's no need to worry about\n     // this as we're not working with this dual \"rlib/dylib\" functionality.\n-    let allocator_module = tcx.sess.allocator_kind.get().and_then(|kind| unsafe {\n-        if sess.lto() && llvm_modules.len() > 0 {\n-            time(tcx.sess.time_passes(), \"write allocator module\", || {\n-                allocator::trans(tcx, &llvm_modules[0], kind)\n-            });\n-            None\n-        } else {\n+    let allocator_module = if tcx.sess.lto() {\n+        None\n+    } else if let Some(kind) = tcx.sess.allocator_kind.get() {\n+        unsafe {\n             let (llcx, llmod) =\n                 context::create_context_and_module(tcx.sess, \"allocator\");\n             let modules = ModuleLlvm {\n@@ -1204,7 +1217,9 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 kind: ModuleKind::Allocator,\n             })\n         }\n-    });\n+    } else {\n+        None\n+    };\n \n     let linker_info = LinkerInfo::new(&shared_ccx, &exported_symbols);\n "}]}