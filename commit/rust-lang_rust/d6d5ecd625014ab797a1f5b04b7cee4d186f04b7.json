{"sha": "d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "node_id": "C_kwDOAAsO6NoAKGQ2ZDVlY2Q2MjUwMTRhYjc5N2ExZjViMDRiN2NlZTRkMTg2ZjA0Yjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T13:11:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T13:11:21Z"}, "message": "Auto merge of #9571 - rust-lang:refactor-lit-ints, r=Jarcho\n\nuse `is_integer_literal` more\n\nI noticed that we have the `is_integer_literal` function in our `clippy_utils`, yet almost everywhere people still match int literal expressions manually. So I searched for instances to replace and shorten the code a bit.\n\n---\n\nchangelog: none", "tree": {"sha": "090c233310a12b675d34a797db82aa1a5945d12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/090c233310a12b675d34a797db82aa1a5945d12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "html_url": "https://github.com/rust-lang/rust/commit/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d837b58f7b534ef78f2144b79ad71f21148df1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d837b58f7b534ef78f2144b79ad71f21148df1b", "html_url": "https://github.com/rust-lang/rust/commit/5d837b58f7b534ef78f2144b79ad71f21148df1b"}, {"sha": "eef5d477b59a3b68bca9c1f3a5334229fc0ad9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef5d477b59a3b68bca9c1f3a5334229fc0ad9b6", "html_url": "https://github.com/rust-lang/rust/commit/eef5d477b59a3b68bca9c1f3a5334229fc0ad9b6"}], "stats": {"total": 174, "additions": 52, "deletions": 122}, "files": [{"sha": "001d74c2605453e02988103b8f785aab7ce7fc64", "filename": "clippy_lints/src/bool_to_int_with_if.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::{Block, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, sugg::Sugg};\n+use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, is_integer_literal, sugg::Sugg};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -56,13 +56,9 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n         && let Some(then_lit) = int_literal(then)\n         && let Some(else_lit) = int_literal(else_)\n     {\n-        let inverted = if\n-            check_int_literal_equals_val(then_lit, 1)\n-            && check_int_literal_equals_val(else_lit, 0) {\n+        let inverted = if is_integer_literal(then_lit, 1) && is_integer_literal(else_lit, 0) {\n             false\n-        } else if\n-            check_int_literal_equals_val(then_lit, 0)\n-            && check_int_literal_equals_val(else_lit, 1) {\n+        } else if is_integer_literal(then_lit, 0) && is_integer_literal(else_lit, 1) {\n             true\n         } else {\n             // Expression isn't boolean, exit\n@@ -123,14 +119,3 @@ fn int_literal<'tcx>(expr: &'tcx rustc_hir::Expr<'tcx>) -> Option<&'tcx rustc_hi\n         None\n     }\n }\n-\n-fn check_int_literal_equals_val<'tcx>(expr: &'tcx rustc_hir::Expr<'tcx>, expected_value: u128) -> bool {\n-    if let ExprKind::Lit(lit) = &expr.kind\n-        && let LitKind::Int(val, _) = lit.node\n-        && val == expected_value\n-    {\n-        true\n-    } else {\n-        false\n-    }\n-}"}, {"sha": "78e9921f036f3369bd3f5768bb96227c01430fcd", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -2,9 +2,8 @@\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{in_constant, meets_msrv, msrvs, SpanlessEq};\n+use clippy_utils::{in_constant, is_integer_literal, meets_msrv, msrvs, SpanlessEq};\n use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -223,16 +222,7 @@ fn check_lower_bound<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<Conversion<'tcx>> {\n \n /// Check for `expr >= 0`\n fn check_lower_bound_zero<'a>(candidate: &'a Expr<'_>, check: &'a Expr<'_>) -> Option<Conversion<'a>> {\n-    if_chain! {\n-        if let ExprKind::Lit(ref lit) = &check.kind;\n-        if let LitKind::Int(0, _) = &lit.node;\n-\n-        then {\n-            Some(Conversion::new_any(candidate))\n-        } else {\n-            None\n-        }\n-    }\n+    is_integer_literal(check, 0).then(|| Conversion::new_any(candidate))\n }\n \n /// Check for `expr >= (to_type::MIN as from_type)`"}, {"sha": "cf8b7acd66d22ab4d9e627e95d0a4117573d4df0", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_integer_literal;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n@@ -60,8 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n             if pathseg.ident.name.as_str() == \"from_str_radix\";\n \n             // check if the second argument is a primitive `10`\n-            if let ExprKind::Lit(lit) = &radix.kind;\n-            if let rustc_ast::ast::LitKind::Int(10, _) = lit.node;\n+            if is_integer_literal(radix, 10);\n \n             then {\n                 let expr = if let ExprKind::AddrOf(_, _, expr) = &src.kind {"}, {"sha": "48edbf6ae576cc66cfe717a11a9eb5de8ec5f57a", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::{higher, peel_blocks_with_stmt, SpanlessEq};\n+use clippy_utils::{higher, is_integer_literal, peel_blocks_with_stmt, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -131,17 +131,8 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n fn subtracts_one<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a Expr<'a>> {\n     match peel_blocks_with_stmt(expr).kind {\n         ExprKind::AssignOp(ref op1, target, value) => {\n-            if_chain! {\n-                if BinOpKind::Sub == op1.node;\n-                // Check if literal being subtracted is one\n-                if let ExprKind::Lit(ref lit1) = value.kind;\n-                if let LitKind::Int(1, _) = lit1.node;\n-                then {\n-                    Some(target)\n-                } else {\n-                    None\n-                }\n-            }\n+            // Check if literal being subtracted is one\n+            (BinOpKind::Sub == op1.node && is_integer_literal(value, 1)).then_some(target)\n         },\n         ExprKind::Assign(target, value, _) => {\n             if_chain! {\n@@ -150,8 +141,7 @@ fn subtracts_one<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a Exp\n \n                 if SpanlessEq::new(cx).eq_expr(left1, target);\n \n-                if let ExprKind::Lit(ref lit1) = right1.kind;\n-                if let LitKind::Int(1, _) = lit1.node;\n+                if is_integer_literal(right1, 1);\n                 then {\n                     Some(target)\n                 } else {"}, {"sha": "3bdc154df04958a67dd050f306ac1f22d01897bd", "filename": "clippy_lints/src/methods/get_last_with_len.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::SpanlessEq;\n-use rustc_ast::LitKind;\n+use clippy_utils::{is_integer_literal, SpanlessEq};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n@@ -26,8 +25,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg:\n         && lhs_path.ident.name == sym::len\n \n         // RHS of subtraction is 1\n-        && let ExprKind::Lit(rhs_lit) = &rhs.kind\n-        && let LitKind::Int(1, ..) = rhs_lit.node\n+        && is_integer_literal(rhs, 1)\n \n         // check that recv == lhs_recv `recv.get(lhs_recv.len() - 1)`\n         && SpanlessEq::new(cx).eq_expr(recv, lhs_recv)"}, {"sha": "516dee20f8b15f17266ca589927a2631361f7072", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet, snippet_opt};\n use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n@@ -15,7 +14,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{ExpnKind, Span};\n \n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_expr, in_constant, iter_input_pats, last_path_segment, SpanlessEq};\n+use clippy_utils::{get_parent_expr, in_constant, is_integer_literal, iter_input_pats, last_path_segment, SpanlessEq};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -314,8 +313,7 @@ fn non_macro_local(cx: &LateContext<'_>, res: def::Res) -> bool {\n fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>) {\n     if_chain! {\n         if let TyKind::Ptr(ref mut_ty) = ty.kind;\n-        if let ExprKind::Lit(ref lit) = e.kind;\n-        if let LitKind::Int(0, _) = lit.node;\n+        if is_integer_literal(e, 0);\n         if !in_constant(cx, e.hir_id);\n         then {\n             let (msg, sugg_fn) = match mut_ty.mutbl {"}, {"sha": "1f22fbd53872423c13e98a6acf0a418e4e3804fe", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -44,25 +44,19 @@ impl ArithmeticSideEffects {\n     /// Assuming that `expr` is a literal integer, checks operators (+=, -=, *, /) in a\n     /// non-constant environment that won't overflow.\n     fn has_valid_op(op: &Spanned<hir::BinOpKind>, expr: &hir::Expr<'_>) -> bool {\n-        if let hir::BinOpKind::Add | hir::BinOpKind::Sub = op.node\n-            && let hir::ExprKind::Lit(ref lit) = expr.kind\n-            && let ast::LitKind::Int(0, _) = lit.node\n+        if let hir::ExprKind::Lit(ref lit) = expr.kind &&\n+            let ast::LitKind::Int(value, _) = lit.node\n         {\n-            return true;\n-        }\n-        if let hir::BinOpKind::Div | hir::BinOpKind::Rem = op.node\n-            && let hir::ExprKind::Lit(ref lit) = expr.kind\n-            && !matches!(lit.node, ast::LitKind::Int(0, _))\n-        {\n-            return true;\n-        }\n-        if let hir::BinOpKind::Mul = op.node\n-            && let hir::ExprKind::Lit(ref lit) = expr.kind\n-            && let ast::LitKind::Int(0 | 1, _) = lit.node\n-        {\n-            return true;\n+            match (&op.node, value) {\n+                (hir::BinOpKind::Add | hir::BinOpKind::Sub, 0) |\n+                (hir::BinOpKind::Mul, 0 | 1) => true,\n+                (hir::BinOpKind::Div | hir::BinOpKind::Rem, 0) => false,\n+                (hir::BinOpKind::Div | hir::BinOpKind::Rem, _) => true,\n+                _ => false,\n+            }\n+        } else {\n+            false\n         }\n-        false\n     }\n \n     /// Checks if the given `expr` has any of the inner `allowed` elements."}, {"sha": "0830a106f55685014b50e19476296bddf8397519", "filename": "clippy_lints/src/operators/numeric_arithmetic.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fnumeric_arithmetic.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::consts::constant_simple;\n use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_integer_literal;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n@@ -50,11 +51,9 @@ impl Context {\n                 hir::BinOpKind::Div | hir::BinOpKind::Rem => match &r.kind {\n                     hir::ExprKind::Lit(_lit) => (),\n                     hir::ExprKind::Unary(hir::UnOp::Neg, expr) => {\n-                        if let hir::ExprKind::Lit(lit) = &expr.kind {\n-                            if let rustc_ast::ast::LitKind::Int(1, _) = lit.node {\n-                                span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n-                                self.expr_id = Some(expr.hir_id);\n-                            }\n+                        if is_integer_literal(expr, 1) {\n+                            span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n+                            self.expr_id = Some(expr.hir_id);\n                         }\n                     },\n                     _ => {"}, {"sha": "6e5d88e1b59dec6ebe9945ea07a4233a400acc5d", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{get_enclosing_block, is_expr_path_def_path, path_to_local, path_to_local_id, paths, SpanlessEq};\n+use clippy_utils::{\n+    get_enclosing_block, is_expr_path_def_path, is_integer_literal, path_to_local, path_to_local_id, paths, SpanlessEq,\n+};\n use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, walk_stmt, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, PatKind, QPath, Stmt, StmtKind};\n@@ -219,8 +220,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n             && path_to_local_id(self_arg, self.vec_alloc.local_id)\n             && path.ident.name == sym!(resize)\n             // Check that is filled with 0\n-            && let ExprKind::Lit(ref lit) = fill_arg.kind\n-            && let LitKind::Int(0, _) = lit.node {\n+            && is_integer_literal(fill_arg, 0) {\n                 // Check that len expression is equals to `with_capacity` expression\n                 if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr) {\n                     self.slow_expression = Some(InitializationType::Resize(expr));\n@@ -255,9 +255,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n         if_chain! {\n             if let ExprKind::Call(fn_expr, [repeat_arg]) = expr.kind;\n             if is_expr_path_def_path(self.cx, fn_expr, &paths::ITER_REPEAT);\n-            if let ExprKind::Lit(ref lit) = repeat_arg.kind;\n-            if let LitKind::Int(0, _) = lit.node;\n-\n+            if is_integer_literal(repeat_arg, 0);\n             then {\n                 true\n             } else {"}, {"sha": "19ce5ae72c24e8f7b21dd162fc9dcd29e8d81bd0", "filename": "clippy_lints/src/transmute/transmuting_null.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -1,8 +1,6 @@\n use clippy_utils::consts::{constant_context, Constant};\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::is_path_diagnostic_item;\n-use if_chain::if_chain;\n-use rustc_ast::LitKind;\n+use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::Ty;\n@@ -19,37 +17,28 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n \n     // Catching transmute over constants that resolve to `null`.\n     let mut const_eval_context = constant_context(cx, cx.typeck_results());\n-    if_chain! {\n-        if let ExprKind::Path(ref _qpath) = arg.kind;\n-        if let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg);\n-        if x == 0;\n-        then {\n-            span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n-            return true;\n-        }\n+    if let ExprKind::Path(ref _qpath) = arg.kind &&\n+        let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg) &&\n+        x == 0\n+    {\n+        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n+        return true;\n     }\n \n     // Catching:\n     // `std::mem::transmute(0 as *const i32)`\n-    if_chain! {\n-        if let ExprKind::Cast(inner_expr, _cast_ty) = arg.kind;\n-        if let ExprKind::Lit(ref lit) = inner_expr.kind;\n-        if let LitKind::Int(0, _) = lit.node;\n-        then {\n-            span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n-            return true;\n-        }\n+    if let ExprKind::Cast(inner_expr, _cast_ty) = arg.kind && is_integer_literal(inner_expr, 0) {\n+        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n+        return true;\n     }\n \n     // Catching:\n     // `std::mem::transmute(std::ptr::null::<i32>())`\n-    if_chain! {\n-        if let ExprKind::Call(func1, []) = arg.kind;\n-        if is_path_diagnostic_item(cx, func1, sym::ptr_null);\n-        then {\n-            span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n-            return true;\n-        }\n+    if let ExprKind::Call(func1, []) = arg.kind &&\n+        is_path_diagnostic_item(cx, func1, sym::ptr_null)\n+    {\n+        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n+        return true;\n     }\n \n     // FIXME:"}, {"sha": "1ab0162a88134165770c19ba80cc0fe3da0433f7", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d5ecd625014ab797a1f5b04b7cee4d186f04b7/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=d6d5ecd625014ab797a1f5b04b7cee4d186f04b7", "patch": "@@ -1,8 +1,7 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::higher::{get_vec_init_kind, VecInitKind};\n use clippy_utils::ty::{is_type_diagnostic_item, is_uninit_value_valid_for_ty};\n-use clippy_utils::{is_lint_allowed, path_to_local_id, peel_hir_expr_while, SpanlessEq};\n-use rustc_ast::ast::LitKind;\n+use clippy_utils::{is_integer_literal, is_lint_allowed, path_to_local_id, peel_hir_expr_while, SpanlessEq};\n use rustc_hir::{Block, Expr, ExprKind, HirId, PatKind, PathSegment, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -216,7 +215,7 @@ fn extract_set_len_self<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Opt\n             let self_type = cx.typeck_results().expr_ty(self_expr).peel_refs();\n             if is_type_diagnostic_item(cx, self_type, sym::Vec)\n                 && path.ident.name.as_str() == \"set_len\"\n-                && !is_literal_zero(arg)\n+                && !is_integer_literal(arg, 0)\n             {\n                 Some((self_expr, expr.span))\n             } else {\n@@ -226,13 +225,3 @@ fn extract_set_len_self<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Opt\n         _ => None,\n     }\n }\n-\n-fn is_literal_zero(arg: &Expr<'_>) -> bool {\n-    if let ExprKind::Lit(lit) = &arg.kind\n-        && let LitKind::Int(0, _) = lit.node\n-    {\n-        true\n-    } else {\n-        false\n-    }\n-}"}]}