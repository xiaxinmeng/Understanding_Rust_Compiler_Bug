{"sha": "aee22c73c3cafdb6f4b3f97bc483791d4ed2e902", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZTIyYzczYzNjYWZkYjZmNGIzZjk3YmM0ODM3OTFkNGVkMmU5MDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-05T18:42:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-05T18:42:52Z"}, "message": "Move group_label where it belongs", "tree": {"sha": "735eef9b6397b68ad7d1297737fdb638941803e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/735eef9b6397b68ad7d1297737fdb638941803e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee22c73c3cafdb6f4b3f97bc483791d4ed2e902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee22c73c3cafdb6f4b3f97bc483791d4ed2e902", "html_url": "https://github.com/rust-lang/rust/commit/aee22c73c3cafdb6f4b3f97bc483791d4ed2e902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee22c73c3cafdb6f4b3f97bc483791d4ed2e902/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2414430aca92f95eda9f0238dce8af2de552af", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2414430aca92f95eda9f0238dce8af2de552af", "html_url": "https://github.com/rust-lang/rust/commit/6c2414430aca92f95eda9f0238dce8af2de552af"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "82f61bc8f7e336ec87e7d7bd49c7e40236e3e4ec", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aee22c73c3cafdb6f4b3f97bc483791d4ed2e902/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22c73c3cafdb6f4b3f97bc483791d4ed2e902/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=aee22c73c3cafdb6f4b3f97bc483791d4ed2e902", "patch": "@@ -38,8 +38,7 @@ impl AssistInfo {\n \n     pub(crate) fn into_resolved(self) -> Option<ResolvedAssist> {\n         let label = self.label;\n-        let group_label = self.group_label;\n-        self.action.map(|action| ResolvedAssist { label, group_label, action })\n+        self.action.map(|action| ResolvedAssist { label, action })\n     }\n }\n \n@@ -100,7 +99,7 @@ impl<'a> AssistCtx<'a> {\n         label: impl Into<String>,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) -> Option<Assist> {\n-        let label = AssistLabel::new(id, label.into());\n+        let label = AssistLabel::new(id, label.into(), None);\n \n         let mut info = AssistInfo::new(label);\n         if self.should_compute_edit {\n@@ -158,7 +157,7 @@ impl<'a> AssistGroup<'a> {\n         label: impl Into<String>,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) {\n-        let label = AssistLabel::new(id, label.into());\n+        let label = AssistLabel::new(id, label.into(), Some(self.group.clone()));\n \n         let mut info = AssistInfo::new(label).with_group(self.group.clone());\n         if self.ctx.should_compute_edit {"}, {"sha": "1b31d655b1e64e86e22b1a535bd4b7b3174f89d6", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee22c73c3cafdb6f4b3f97bc483791d4ed2e902/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee22c73c3cafdb6f4b3f97bc483791d4ed2e902/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=aee22c73c3cafdb6f4b3f97bc483791d4ed2e902", "patch": "@@ -35,16 +35,17 @@ pub struct AssistLabel {\n     pub id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n+    pub group: Option<GroupLabel>,\n }\n \n #[derive(Clone, Debug)]\n pub struct GroupLabel(pub String);\n \n impl AssistLabel {\n-    pub(crate) fn new(id: AssistId, label: String) -> AssistLabel {\n+    pub(crate) fn new(id: AssistId, label: String, group: Option<GroupLabel>) -> AssistLabel {\n         // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        AssistLabel { label, id }\n+        AssistLabel { id, label, group }\n     }\n }\n \n@@ -60,7 +61,6 @@ pub struct AssistAction {\n #[derive(Debug, Clone)]\n pub struct ResolvedAssist {\n     pub label: AssistLabel,\n-    pub group_label: Option<GroupLabel>,\n     pub action: AssistAction,\n }\n "}]}