{"sha": "b0bb8622eea7cb447ebadb8b5fba43850305e913", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYmI4NjIyZWVhN2NiNDQ3ZWJhZGI4YjVmYmE0Mzg1MDMwNWU5MTM=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T15:39:48Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:11Z"}, "message": "Don't print implicit type args from impl Trait", "tree": {"sha": "a69260471cb2930dc3a7f87e2662a503fe95453c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69260471cb2930dc3a7f87e2662a503fe95453c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0bb8622eea7cb447ebadb8b5fba43850305e913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bb8622eea7cb447ebadb8b5fba43850305e913", "html_url": "https://github.com/rust-lang/rust/commit/b0bb8622eea7cb447ebadb8b5fba43850305e913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0bb8622eea7cb447ebadb8b5fba43850305e913/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c70619b0126bc0e40bd9df39dcd6e711cac69c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c70619b0126bc0e40bd9df39dcd6e711cac69c5", "html_url": "https://github.com/rust-lang/rust/commit/6c70619b0126bc0e40bd9df39dcd6e711cac69c5"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "68c2f0b061a268e01dd3a9b932f9acd2c87f8ab9", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0bb8622eea7cb447ebadb8b5fba43850305e913/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0bb8622eea7cb447ebadb8b5fba43850305e913/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=b0bb8622eea7cb447ebadb8b5fba43850305e913", "patch": "@@ -909,9 +909,16 @@ impl HirDisplay for ApplicationTy {\n                     }\n                 }\n                 if self.parameters.len() > 0 {\n-                    write!(f, \"<\")?;\n-                    f.write_joined(&*self.parameters.0, \", \")?;\n-                    write!(f, \">\")?;\n+                    let generics = generics(f.db, def.into());\n+                    let (parent_params, self_param, type_params, _impl_trait_params) =\n+                        generics.provenance_split();\n+                    let total_len = parent_params + self_param + type_params;\n+                    // We print all params except implicit impl Trait params. Still a bit weird; should we leave out parent and self?\n+                    if total_len > 0 {\n+                        write!(f, \"<\")?;\n+                        f.write_joined(&self.parameters.0[..total_len], \", \")?;\n+                        write!(f, \">\")?;\n+                    }\n                 }\n                 write!(f, \"(\")?;\n                 f.write_joined(sig.params(), \", \")?;"}, {"sha": "c6851fb6910ffe21745e5438d8d2f941aadc5602", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0bb8622eea7cb447ebadb8b5fba43850305e913/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0bb8622eea7cb447ebadb8b5fba43850305e913/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=b0bb8622eea7cb447ebadb8b5fba43850305e913", "patch": "@@ -886,7 +886,7 @@ fn test(x: impl Trait<u64>, y: &impl Trait<u32>) {\n     [224; 225) 'S': S<u16>(u16) -> S<u16>\n     [224; 228) 'S(1)': S<u16>\n     [226; 227) '1': u16\n-    [234; 237) 'bar': fn bar<S<u16>>(S<u16>) -> ()\n+    [234; 237) 'bar': fn bar(S<u16>) -> ()\n     [234; 240) 'bar(z)': ()\n     [238; 239) 'z': S<u16>\n     [246; 247) 'x': impl Trait<u64>\n@@ -943,28 +943,28 @@ fn test() {\n     [222; 229) 'loop {}': !\n     [227; 229) '{}': ()\n     [301; 510) '{     ... i32 }': ()\n-    [307; 315) 'Foo::bar': fn bar<{unknown}, {unknown}, S>(S) -> {unknown}\n+    [307; 315) 'Foo::bar': fn bar<{unknown}, {unknown}>(S) -> {unknown}\n     [307; 318) 'Foo::bar(S)': {unknown}\n     [316; 317) 'S': S\n-    [324; 339) '<F as Foo>::bar': fn bar<F, {unknown}, S>(S) -> {unknown}\n+    [324; 339) '<F as Foo>::bar': fn bar<F, {unknown}>(S) -> {unknown}\n     [324; 342) '<F as ...bar(S)': {unknown}\n     [340; 341) 'S': S\n-    [348; 354) 'F::bar': fn bar<F, {unknown}, S>(S) -> {unknown}\n+    [348; 354) 'F::bar': fn bar<F, {unknown}>(S) -> {unknown}\n     [348; 357) 'F::bar(S)': {unknown}\n     [355; 356) 'S': S\n-    [363; 378) 'Foo::bar::<u32>': fn bar<{unknown}, u32, S>(S) -> u32\n+    [363; 378) 'Foo::bar::<u32>': fn bar<{unknown}, u32>(S) -> u32\n     [363; 381) 'Foo::b...32>(S)': u32\n     [379; 380) 'S': S\n-    [387; 409) '<F as ...:<u32>': fn bar<F, u32, S>(S) -> u32\n+    [387; 409) '<F as ...:<u32>': fn bar<F, u32>(S) -> u32\n     [387; 412) '<F as ...32>(S)': u32\n     [410; 411) 'S': S\n-    [419; 422) 'foo': fn foo<{unknown}, S>(S) -> {unknown}\n+    [419; 422) 'foo': fn foo<{unknown}>(S) -> {unknown}\n     [419; 425) 'foo(S)': {unknown}\n     [423; 424) 'S': S\n-    [431; 441) 'foo::<u32>': fn foo<u32, S>(S) -> u32\n+    [431; 441) 'foo::<u32>': fn foo<u32>(S) -> u32\n     [431; 444) 'foo::<u32>(S)': u32\n     [442; 443) 'S': S\n-    [450; 465) 'foo::<u32, i32>': fn foo<u32, S>(S) -> u32\n+    [450; 465) 'foo::<u32, i32>': fn foo<u32>(S) -> u32\n     [450; 468) 'foo::<...32>(S)': u32\n     [466; 467) 'S': S\n     \"###\n@@ -1794,11 +1794,11 @@ fn test() -> impl Trait<i32> {\n     [229; 241) 'S(default())': S<u32>\n     [231; 238) 'default': fn default<u32>() -> u32\n     [231; 240) 'default()': u32\n-    [247; 250) 'foo': fn foo<S<u32>>(S<u32>) -> ()\n+    [247; 250) 'foo': fn foo(S<u32>) -> ()\n     [247; 254) 'foo(s1)': ()\n     [251; 253) 's1': S<u32>\n     [264; 265) 'x': i32\n-    [273; 276) 'bar': fn bar<i32, S<i32>>(S<i32>) -> i32\n+    [273; 276) 'bar': fn bar<i32>(S<i32>) -> i32\n     [273; 290) 'bar(S(...lt()))': i32\n     [277; 278) 'S': S<i32>(i32) -> S<i32>\n     [277; 289) 'S(default())': S<i32>"}]}