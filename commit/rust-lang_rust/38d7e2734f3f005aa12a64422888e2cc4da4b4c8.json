{"sha": "38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "node_id": "C_kwDOAAsO6NoAKDM4ZDdlMjczNGYzZjAwNWFhMTJhNjQ0MjI4ODhlMmNjNGRhNGI0Yzg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-06T01:56:26Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-11T23:38:48Z"}, "message": "Properly replace `impl Trait` in fn args, turn {integer} to i32", "tree": {"sha": "4e5c9130f0ebd6b6d4724d11e27c0715afe7017d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e5c9130f0ebd6b6d4724d11e27c0715afe7017d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "html_url": "https://github.com/rust-lang/rust/commit/38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55805ab4735aaaafb7082af238c0b3d98af138c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/55805ab4735aaaafb7082af238c0b3d98af138c7", "html_url": "https://github.com/rust-lang/rust/commit/55805ab4735aaaafb7082af238c0b3d98af138c7"}], "stats": {"total": 88, "additions": 76, "deletions": 12}, "files": [{"sha": "adfa6e98568c4b9fc83e16ae7bc721700de39097", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "patch": "@@ -372,21 +372,34 @@ fn suggest_restriction<'tcx>(\n         // but instead we choose to suggest replacing all instances of `impl Trait` with `T`\n         // where `T: Trait`.\n         let mut ty_spans = vec![];\n-        let impl_trait_str = format!(\"impl {}\", bound_str);\n         for input in fn_sig.decl.inputs {\n-            if let hir::TyKind::Path(hir::QPath::Resolved(\n-                None,\n-                hir::Path { segments: [segment], .. },\n-            )) = input.kind\n-            {\n-                if segment.ident.as_str() == impl_trait_str.as_str() {\n-                    // `fn foo(t: impl Trait)`\n-                    //            ^^^^^^^^^^ get this to suggest `T` instead\n+            struct ReplaceImplTraitVisitor<'a> {\n+                ty_spans: &'a mut Vec<Span>,\n+                bound_str: &'a str,\n+            }\n+            impl<'a, 'hir> hir::intravisit::Visitor<'hir> for ReplaceImplTraitVisitor<'a> {\n+                fn visit_ty(&mut self, t: &'hir hir::Ty<'hir>) {\n+                    if let hir::TyKind::Path(hir::QPath::Resolved(\n+                        None,\n+                        hir::Path { segments: [segment], .. },\n+                    )) = t.kind\n+                    {\n+                        if segment.ident.as_str().strip_prefix(\"impl \").map(|s| s.trim_start())\n+                            == Some(self.bound_str)\n+                        {\n+                            // `fn foo(t: impl Trait)`\n+                            //            ^^^^^^^^^^ get this to suggest `T` instead\n \n-                    // There might be more than one `impl Trait`.\n-                    ty_spans.push(input.span);\n+                            // There might be more than one `impl Trait`.\n+                            self.ty_spans.push(t.span);\n+                            return;\n+                        }\n+                    }\n+                    hir::intravisit::walk_ty(self, t);\n                 }\n             }\n+            ReplaceImplTraitVisitor { ty_spans: &mut ty_spans, bound_str: &bound_str }\n+                .visit_ty(input);\n         }\n \n         let type_param_name = generics.params.next_type_param_name(Some(&bound_str));\n@@ -396,7 +409,7 @@ fn suggest_restriction<'tcx>(\n         // FIXME: modify the `trait_pred` instead of string shenanigans.\n         // Turn `<impl Trait as Foo>::Bar: Qux` into `<T as Foo>::Bar: Qux`.\n         let pred = trait_pred.to_predicate(tcx).to_string();\n-        let pred = pred.replace(&impl_trait_str, &type_param_name);\n+        let pred = pred.replace(&format!(\"impl {}\", bound_str), &type_param_name);\n         let mut sugg = vec![\n             if let Some(span) = generics.span_for_param_suggestion() {\n                 (span, format!(\", {}\", type_param))\n@@ -460,6 +473,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n         body_id: hir::HirId,\n     ) {\n+        let trait_pred = self.resolve_numeric_literals_with_default(trait_pred);\n+\n         let self_ty = trait_pred.skip_binder().self_ty();\n         let (param_ty, projection) = match self_ty.kind() {\n             ty::Param(_) => (true, None),"}, {"sha": "a4c3b1350b891f10ed6c8b0bc0dbf704431f7b7b", "filename": "src/test/ui/suggestions/issue-97677.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.rs?ref=38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "patch": "@@ -0,0 +1,6 @@\n+fn add_ten<N>(n: N) -> N {\n+    n + 10\n+    //~^ ERROR cannot add `{integer}` to `N`\n+}\n+\n+fn main() {}"}, {"sha": "ea563ea844de57d51c04f285756cd9aede275d6b", "filename": "src/test/ui/suggestions/issue-97677.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97677.stderr?ref=38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "patch": "@@ -0,0 +1,16 @@\n+error[E0369]: cannot add `{integer}` to `N`\n+  --> $DIR/issue-97677.rs:2:7\n+   |\n+LL |     n + 10\n+   |     - ^ -- {integer}\n+   |     |\n+   |     N\n+   |\n+help: consider restricting type parameter `N`\n+   |\n+LL | fn add_ten<N: std::ops::Add<i32>>(n: N) -> N {\n+   |             ++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "cf9c3c58dca6f8139a562c7979ab20a76c802006", "filename": "src/test/ui/suggestions/issue-97760.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.rs?ref=38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "patch": "@@ -0,0 +1,9 @@\n+pub fn print_values(values: &impl IntoIterator)\n+where {\n+    for x in values.into_iter() {\n+        println!(\"{x}\");\n+        //~^ ERROR <impl IntoIterator as IntoIterator>::Item` doesn't implement `std::fmt::Display\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "459556bddaee523ad153ffbae283698fb10a5619", "filename": "src/test/ui/suggestions/issue-97760.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d7e2734f3f005aa12a64422888e2cc4da4b4c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr?ref=38d7e2734f3f005aa12a64422888e2cc4da4b4c8", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: `<impl IntoIterator as IntoIterator>::Item` doesn't implement `std::fmt::Display`\n+  --> $DIR/issue-97760.rs:4:20\n+   |\n+LL |         println!(\"{x}\");\n+   |                    ^ `<impl IntoIterator as IntoIterator>::Item` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `<impl IntoIterator as IntoIterator>::Item`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL ~ pub fn print_values<I: IntoIterator>(values: &I)\n+LL ~ where <I as IntoIterator>::Item: std::fmt::Display {\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}