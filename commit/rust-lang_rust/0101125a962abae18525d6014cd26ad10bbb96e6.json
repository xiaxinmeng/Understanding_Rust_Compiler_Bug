{"sha": "0101125a962abae18525d6014cd26ad10bbb96e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMDExMjVhOTYyYWJhZTE4NTI1ZDYwMTRjZDI2YWQxMGJiYjk2ZTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-10T23:21:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-10T23:22:06Z"}, "message": "rustc: Make function types have vstores in them", "tree": {"sha": "e3e15717c4f19cd55afb745853b13944d840d3c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3e15717c4f19cd55afb745853b13944d840d3c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0101125a962abae18525d6014cd26ad10bbb96e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0101125a962abae18525d6014cd26ad10bbb96e6", "html_url": "https://github.com/rust-lang/rust/commit/0101125a962abae18525d6014cd26ad10bbb96e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0101125a962abae18525d6014cd26ad10bbb96e6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99942ae430738ba43a2896973fa7f1a8ffe445a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/99942ae430738ba43a2896973fa7f1a8ffe445a2", "html_url": "https://github.com/rust-lang/rust/commit/99942ae430738ba43a2896973fa7f1a8ffe445a2"}], "stats": {"total": 351, "additions": 237, "deletions": 114}, "files": [{"sha": "80c64430ec3786cccec059204ce76220e7a97b25", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -85,13 +85,11 @@ fn parse_ty_rust_fn(st: @pstate, conv: conv_did) -> ty::t {\n     return ty::mk_fn(st.tcx, parse_ty_fn(st, conv));\n }\n \n-fn parse_proto(c: char) -> ast::proto {\n-    match c {\n-      '~' => ast::proto_uniq,\n-      '@' => ast::proto_box,\n-      '&' => ast::proto_block,\n-      'n' => ast::proto_bare,\n-      _ => fail ~\"illegal fn type kind \" + str::from_char(c)\n+fn parse_proto(st: @pstate) -> ty::fn_proto {\n+    match next(st) {\n+        'n' => ty::proto_bare,\n+        'v' => ty::proto_vstore(parse_vstore(st)),\n+        c => fail ~\"illegal proto type kind \" + str::from_char(c)\n     }\n }\n \n@@ -360,7 +358,7 @@ fn parse_purity(c: char) -> purity {\n }\n \n fn parse_ty_fn(st: @pstate, conv: conv_did) -> ty::fn_ty {\n-    let proto = parse_proto(next(st));\n+    let proto = parse_proto(st);\n     let purity = parse_purity(next(st));\n     let bounds = parse_bounds(st, conv);\n     assert (next(st) == '[');"}, {"sha": "30b2a21167ab4e20e7702cf357fffb7ea7417166", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -306,12 +306,15 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n       }\n     }\n }\n-fn enc_proto(w: io::writer, proto: proto) {\n+\n+fn enc_proto(w: io::writer, cx: @ctxt, proto: ty::fn_proto) {\n+    w.write_str(&\"f\");\n     match proto {\n-      proto_uniq => w.write_str(&\"f~\"),\n-      proto_box => w.write_str(&\"f@\"),\n-      proto_block => w.write_str(~\"f&\"),\n-      proto_bare => w.write_str(&\"fn\")\n+        ty::proto_bare => w.write_str(&\"n\"),\n+        ty::proto_vstore(vstore) => {\n+            w.write_str(&\"v\");\n+            enc_vstore(w, cx, vstore);\n+        }\n     }\n }\n \n@@ -335,7 +338,7 @@ fn enc_purity(w: io::writer, p: purity) {\n }\n \n fn enc_ty_fn(w: io::writer, cx: @ctxt, ft: ty::fn_ty) {\n-    enc_proto(w, ft.proto);\n+    enc_proto(w, cx, ft.proto);\n     enc_purity(w, ft.purity);\n     enc_bounds(w, cx, ft.bounds);\n     w.write_char('[');"}, {"sha": "bb33b8c92a890710b26bdb97f31c3ade1347f759", "filename": "src/rustc/middle/block_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fblock_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fblock_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fblock_use.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -14,7 +14,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n     if !cx.allow_block {\n         match ty::get(ty::expr_ty(cx.tcx, ex)).struct {\n-          ty::ty_fn({proto: p, _}) if is_blockish(p) => {\n+          ty::ty_fn({proto: p, _}) if ty::is_blockish(p) => {\n             cx.tcx.sess.span_err(ex.span,\n                ~\"expressions with stack closure type \\\n                 can only appear in callee or (by-ref) argument position\");"}, {"sha": "4c3ee9eb4dd19ea052dd8033d84ae943449fa95d", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -218,10 +218,7 @@ impl check_loan_ctxt {\n     fn is_stack_closure(id: ast::node_id) -> bool {\n         let fn_ty = ty::node_id_to_type(self.tcx(), id);\n         let proto = ty::ty_fn_proto(fn_ty);\n-        match proto {\n-          ast::proto_block => true,\n-          ast::proto_bare | ast::proto_uniq | ast::proto_box => false\n-        }\n+        return ty::is_blockish(proto);\n     }\n \n     fn is_allowed_pure_arg(expr: @ast::expr) -> bool {"}, {"sha": "b45064db88d3eb77b570e2832597aef2f933b93b", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -59,7 +59,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n \n fn compute_capture_vars(tcx: ty::ctxt,\n                         fn_expr_id: ast::node_id,\n-                        fn_proto: ast::proto,\n+                        fn_proto: ty::fn_proto,\n                         cap_clause: ast::capture_clause) -> ~[capture_var] {\n     let freevars = freevars::get_freevars(tcx, fn_expr_id);\n     let cap_map = map::int_hash();\n@@ -101,10 +101,12 @@ fn compute_capture_vars(tcx: ty::ctxt,\n     // now go through anything that is referenced but was not explicitly\n     // named and add that\n \n-    let implicit_mode = match fn_proto {\n-      ast::proto_block => cap_ref,\n-      ast::proto_bare | ast::proto_box | ast::proto_uniq => cap_copy\n-    };\n+    let implicit_mode;\n+    if ty::is_blockish(fn_proto) {\n+        implicit_mode = cap_ref;\n+    } else {\n+        implicit_mode = cap_copy;\n+    }\n \n     do vec::iter(*freevars) |fvar| {\n         let fvar_def_id = ast_util::def_id_of_def(fvar.def).node;"}, {"sha": "a105ce685290a63a8335617d451c7dedc1422e57", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -25,7 +25,8 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n                 v.visit_block(b, {in_loop: false, can_ret: false}, v);\n               }\n               expr_loop_body(@{node: expr_fn_block(_, b, _), _}) => {\n-                let blk = is_blockish(ty::ty_fn_proto(ty::expr_ty(tcx, e)));\n+                let blk = ty::is_blockish(ty::ty_fn_proto(ty::expr_ty(tcx,\n+                                                                      e)));\n                 v.visit_block(b, {in_loop: true, can_ret: blk}, v);\n               }\n               expr_break => {"}, {"sha": "9968318292c6ff202ec7461b752348029aeb70a3", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -144,10 +144,12 @@ fn with_appropriate_checker(cx: ctx, id: node_id, b: fn(check_fn)) {\n \n     let fty = ty::node_id_to_type(cx.tcx, id);\n     match ty::ty_fn_proto(fty) {\n-      proto_uniq => b(check_for_uniq),\n-      proto_box => b(check_for_box),\n-      proto_bare => b(check_for_bare),\n-      proto_block => b(check_for_block)\n+      ty::proto_vstore(ty::vstore_uniq) => b(check_for_uniq),\n+      ty::proto_vstore(ty::vstore_box) => b(check_for_box),\n+      ty::proto_bare => b(check_for_bare),\n+      ty::proto_vstore(ty::vstore_slice(_)) => b(check_for_block),\n+      ty::proto_vstore(ty::vstore_fixed(_)) =>\n+        fail ~\"fixed vstore not allowed here\"\n     }\n }\n "}, {"sha": "cf9ee1bc190e6a828985c83027603f0baef0021b", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -383,18 +383,22 @@ impl &mem_categorization_ctxt {\n             let ty = ty::node_id_to_type(self.tcx, fn_node_id);\n             let proto = ty::ty_fn_proto(ty);\n             match proto {\n-              ast::proto_block => {\n+              ty::proto_vstore(ty::vstore_slice(_)) => {\n                 let upcmt = self.cat_def(id, span, expr_ty, *inner);\n                 @{id:id, span:span,\n                   cat:cat_stack_upvar(upcmt), lp:upcmt.lp,\n                   mutbl:upcmt.mutbl, ty:upcmt.ty}\n               }\n-              ast::proto_bare | ast::proto_uniq | ast::proto_box => {\n+              ty::proto_bare |\n+              ty::proto_vstore(ty::vstore_uniq) |\n+              ty::proto_vstore(ty::vstore_box) => {\n                 // FIXME #2152 allow mutation of moved upvars\n                 @{id:id, span:span,\n                   cat:cat_special(sk_heap_upvar), lp:none,\n                   mutbl:m_imm, ty:expr_ty}\n               }\n+              ty::proto_vstore(ty::vstore_fixed(_)) =>\n+                fail ~\"fixed vstore not allowed here\"\n             }\n           }\n "}, {"sha": "0c7d04d143ebed3f9ab3dd973d7310df152eca8e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -2043,7 +2043,8 @@ fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> option<ty::t> {\n       }\n       ty::ty_trait(_, _) => {\n         some(ty::mk_fn(tcx, {purity: ast::impure_fn,\n-                             proto: ast::proto_box,\n+                             proto: ty::proto_vstore(ty::vstore_slice\n+                                                     (ty::re_static)),\n                              bounds: @~[],\n                              inputs: ~[],\n                              output: ty::mk_nil(tcx),\n@@ -3774,8 +3775,11 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           }\n           ast::expr_addr_of(_, x) => { return trans_addr_of(bcx, x, dest); }\n           ast::expr_fn(proto, decl, body, cap_clause) => {\n-            return closure::trans_expr_fn(bcx, proto, decl, body, e.id,\n-                                       cap_clause, none, dest);\n+            // XXX: This syntax should be reworked a bit (in the parser I\n+            // guess?); @fn() { ... } won't work.\n+            return closure::trans_expr_fn(bcx, ty::ast_proto_to_proto(proto),\n+                                          decl, body, e.id, cap_clause, none,\n+                                          dest);\n           }\n           ast::expr_fn_block(decl, body, cap_clause) => {\n             match check ty::get(expr_ty(bcx, e)).struct {"}, {"sha": "997991a5aa28ff796436b7f75a503d763ef918d1", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -347,7 +347,7 @@ fn load_environment(fcx: fn_ctxt,\n }\n \n fn trans_expr_fn(bcx: block,\n-                 proto: ast::proto,\n+                 proto: ty::fn_proto,\n                  decl: ast::fn_decl,\n                  body: ast::blk,\n                  id: ast::node_id,\n@@ -364,8 +364,8 @@ fn trans_expr_fn(bcx: block,\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n \n     let trans_closure_env = fn@(ck: ty::closure_kind) -> result {\n-        let cap_vars = capture::compute_capture_vars(\n-            ccx.tcx, id, proto, cap_clause);\n+        let cap_vars = capture::compute_capture_vars(ccx.tcx, id, proto,\n+                                                     cap_clause);\n         let ret_handle = match is_loop_body { some(x) => x, none => none };\n         let {llbox, cdata_ty, bcx} = build_closure(bcx, cap_vars, ck, id,\n                                                    ret_handle);\n@@ -382,14 +382,19 @@ fn trans_expr_fn(bcx: block,\n     };\n \n     let {bcx: bcx, val: closure} = match proto {\n-      ast::proto_block => trans_closure_env(ty::ck_block),\n-      ast::proto_box => trans_closure_env(ty::ck_box),\n-      ast::proto_uniq => trans_closure_env(ty::ck_uniq),\n-      ast::proto_bare => {\n+      ty::proto_vstore(ty::vstore_slice(_)) =>\n+        trans_closure_env(ty::ck_block),\n+      ty::proto_vstore(ty::vstore_box) =>\n+        trans_closure_env(ty::ck_box),\n+      ty::proto_vstore(ty::vstore_uniq) =>\n+        trans_closure_env(ty::ck_uniq),\n+      ty::proto_bare => {\n         trans_closure(ccx, sub_path, decl, body, llfn, no_self, none,\n                       id, |_fcx| { }, |_bcx| { });\n         {bcx: bcx, val: C_null(T_opaque_box_ptr(ccx))}\n       }\n+      ty::proto_vstore(ty::vstore_fixed(_)) =>\n+        fail ~\"vstore_fixed unexpected\"\n     };\n     fill_fn_pair(bcx, get_dest_addr(dest), llfn, closure);\n \n@@ -416,11 +421,15 @@ fn make_fn_glue(\n     };\n \n     return match ty::get(t).struct {\n-      ty::ty_fn({proto: ast::proto_bare, _}) |\n-      ty::ty_fn({proto: ast::proto_block, _}) => bcx,\n-      ty::ty_fn({proto: ast::proto_uniq, _}) => fn_env(ty::ck_uniq),\n-      ty::ty_fn({proto: ast::proto_box, _}) => fn_env(ty::ck_box),\n-      _ => fail ~\"make_fn_glue invoked on non-function type\"\n+      ty::ty_fn({proto: ty::proto_bare, _}) |\n+      ty::ty_fn({proto: ty::proto_vstore(ty::vstore_slice(_)), _}) =>\n+        bcx,\n+      ty::ty_fn({proto: ty::proto_vstore(ty::vstore_uniq), _}) =>\n+        fn_env(ty::ck_uniq),\n+      ty::ty_fn({proto: ty::proto_vstore(ty::vstore_box), _}) =>\n+        fn_env(ty::ck_box),\n+      _ =>\n+        fail ~\"make_fn_glue invoked on non-function type\"\n     };\n }\n "}, {"sha": "a81e665356fc9bfd602b4ab316ad47eafe453afa", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -960,7 +960,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n         let frameaddress_val = Call(bcx, frameaddress, ~[C_i32(0i32)]);\n         let fty = ty::mk_fn(bcx.tcx(), {\n             purity: ast::impure_fn,\n-            proto: ast::proto_block,\n+            proto: ty::proto_vstore(ty::vstore_slice(ty::re_static)),\n             bounds: @~[],\n             inputs: ~[{\n                 mode: ast::expl(ast::by_val),"}, {"sha": "7f8752c84d49d73dcf255f5c15f11e521891d5fa", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -185,10 +185,12 @@ impl reflector {\n               ast::extern_fn => 3u\n             };\n             let protoval = match fty.proto {\n-              ast::proto_bare => 0u,\n-              ast::proto_uniq => 2u,\n-              ast::proto_box => 3u,\n-              ast::proto_block => 4u\n+              ty::proto_bare => 0u,\n+              ty::proto_vstore(ty::vstore_uniq) => 2u,\n+              ty::proto_vstore(ty::vstore_box) => 3u,\n+              ty::proto_vstore(ty::vstore_slice(_)) => 4u,\n+              ty::proto_vstore(ty::vstore_fixed(_)) =>\n+                fail ~\"fixed unexpected\"\n             };\n             let retval = match fty.ret_style {\n               ast::noreturn => 0u,"}, {"sha": "68bddb8d151ed084a154ecaa9fda317ec499776e", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -351,14 +351,20 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n       ty::ty_param(*) => {\n         ccx.tcx.sess.bug(~\"non-monomorphized type parameter\");\n       }\n-      ty::ty_fn({proto: ast::proto_box, _}) => ~[shape_box_fn],\n-      ty::ty_fn({proto: ast::proto_uniq, _}) => ~[shape_uniq_fn],\n-      ty::ty_fn({proto: ast::proto_block, _}) => ~[shape_stack_fn],\n-      ty::ty_fn({proto: ast::proto_bare, _}) => ~[shape_bare_fn],\n-      ty::ty_opaque_closure_ptr(_) => ~[shape_opaque_closure_ptr],\n-      ty::ty_var(_) | ty::ty_var_integral(_) | ty::ty_self => {\n-        ccx.sess.bug(~\"shape_of: unexpected type struct found\");\n-      }\n+      ty::ty_fn({proto: ty::proto_vstore(ty::vstore_box), _}) =>\n+        ~[shape_box_fn],\n+      ty::ty_fn({proto: ty::proto_vstore(ty::vstore_uniq), _}) =>\n+        ~[shape_uniq_fn],\n+      ty::ty_fn({proto: ty::proto_vstore(ty::vstore_slice(_)), _}) =>\n+        ~[shape_stack_fn],\n+      ty::ty_fn({proto: ty::proto_vstore(ty::vstore_fixed(_)), _}) =>\n+        fail ~\"fixed vstore is impossible\",\n+      ty::ty_fn({proto: ty::proto_bare, _}) =>\n+        ~[shape_bare_fn],\n+      ty::ty_opaque_closure_ptr(_) =>\n+        ~[shape_opaque_closure_ptr],\n+      ty::ty_var(_) | ty::ty_var_integral(_) | ty::ty_self =>\n+        ccx.sess.bug(~\"shape_of: unexpected type struct found\")\n     }\n }\n "}, {"sha": "d630653ef2723a30297d0e225a5f842ca1f70640", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -202,13 +202,16 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       }\n       expr_fn(*) | expr_fn_block(*) => {\n         match ty::ty_fn_proto(ty::expr_ty(cx.ccx.tcx, e)) {\n-          proto_bare | proto_uniq => {}\n-          proto_box | proto_block => {\n+          ty::proto_bare | ty::proto_vstore(ty::vstore_uniq) => {}\n+          ty::proto_vstore(ty::vstore_box) |\n+          ty::proto_vstore(ty::vstore_slice(_)) => {\n             for vec::each(*freevars::get_freevars(cx.ccx.tcx, e.id)) |fv| {\n                 let node_id = ast_util::def_id_of_def(fv.def).node;\n                 node_type_needs(cx, use_repr, node_id);\n             }\n           }\n+          ty::proto_vstore(ty::vstore_fixed(_)) =>\n+            fail ~\"vstore_fixed not allowed here\"\n         }\n       }\n       expr_assign(val, _) | expr_swap(val, _) | expr_assign_op(_, val, _) |"}, {"sha": "b74dad6cda9254d494305f1364a2cb2af43d5837", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 52, "deletions": 13, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -171,9 +171,13 @@ export terr_sorts, terr_vec, terr_str, terr_record_size, terr_tuple_size;\n export terr_regions_differ, terr_mutability, terr_purity_mismatch;\n export terr_proto_mismatch;\n export terr_ret_style_mismatch;\n+export terr_fn;\n export purity_to_str;\n export param_tys_in_type;\n export eval_repeat_count;\n+export fn_proto, proto_bare, proto_vstore;\n+export ast_proto_to_proto;\n+export is_blockish;\n \n // Data types\n \n@@ -316,6 +320,11 @@ enum closure_kind {\n     ck_uniq,\n }\n \n+enum fn_proto {\n+    proto_bare,             // supertype of all other protocols\n+    proto_vstore(vstore)\n+}\n+\n /// Innards of a function type:\n ///\n /// - `purity` is the function's effect (pure, impure, unsafe).\n@@ -325,7 +334,7 @@ enum closure_kind {\n /// - `output` is the return type.\n /// - `ret_style` indicates whether the function returns a value or fails.\n type fn_ty = {purity: ast::purity,\n-              proto: ast::proto,\n+              proto: fn_proto,\n               bounds: @~[param_bound],\n               inputs: ~[arg],\n               output: t,\n@@ -442,7 +451,7 @@ enum sty {\n }\n \n enum terr_vstore_kind {\n-    terr_vec, terr_str\n+    terr_vec, terr_str, terr_fn\n }\n \n // Data structures used in type unification\n@@ -451,7 +460,7 @@ enum type_err {\n     terr_ret_style_mismatch(ast::ret_style, ast::ret_style),\n     terr_purity_mismatch(purity, purity),\n     terr_mutability,\n-    terr_proto_mismatch(ast::proto, ast::proto),\n+    terr_proto_mismatch(ty::fn_proto, ty::fn_proto),\n     terr_box_mutability,\n     terr_ptr_mutability,\n     terr_ref_mutability,\n@@ -1308,7 +1317,7 @@ fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n       }\n       ty_fn(ref fty) => {\n         match fty.proto {\n-          proto_bare | proto_block => false,\n+          proto_bare | proto_vstore(vstore_slice(_)) => false,\n           _ => true\n         }\n       }\n@@ -1548,13 +1557,18 @@ pure fn kind_is_owned(k: kind) -> bool {\n     *k & KIND_MASK_OWNED == KIND_MASK_OWNED\n }\n \n-fn proto_kind(p: proto) -> kind {\n+fn proto_kind(p: fn_proto) -> kind {\n     match p {\n-      ast::proto_block => kind_noncopyable() | kind_(KIND_MASK_DEFAULT_MODE),\n-      ast::proto_box => kind_safe_for_default_mode() | kind_owned(),\n-      ast::proto_uniq => kind_send_copy() | kind_owned(),\n-      ast::proto_bare => kind_safe_for_default_mode_send() | kind_const() |\n-                           kind_owned()\n+      proto_vstore(vstore_slice(_)) =>\n+        kind_noncopyable() | kind_(KIND_MASK_DEFAULT_MODE),\n+      proto_vstore(vstore_box) =>\n+        kind_safe_for_default_mode() | kind_owned(),\n+      proto_vstore(vstore_uniq) =>\n+        kind_send_copy() | kind_owned(),\n+      proto_vstore(vstore_fixed(_)) =>\n+        fail ~\"fixed vstore protos are not allowed\",\n+      proto_bare =>\n+        kind_safe_for_default_mode_send() | kind_const() | kind_owned()\n     }\n }\n \n@@ -2293,7 +2307,7 @@ fn ty_fn_args(fty: t) -> ~[arg] {\n     }\n }\n \n-fn ty_fn_proto(fty: t) -> ast::proto {\n+fn ty_fn_proto(fty: t) -> fn_proto {\n     match get(fty).struct {\n       ty_fn(ref f) => f.proto,\n       _ => fail ~\"ty_fn_proto() called on non-fn type\"\n@@ -2576,7 +2590,11 @@ fn ty_sort_str(cx: ctxt, t: t) -> ~str {\n \n fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n     fn terr_vstore_kind_to_str(k: terr_vstore_kind) -> ~str {\n-        match k { terr_vec => ~\"[]\", terr_str => ~\"str\" }\n+        match k {\n+            terr_vec => ~\"[]\",\n+            terr_str => ~\"str\",\n+            terr_fn => ~\"fn\"\n+        }\n     }\n \n     match *err {\n@@ -2597,7 +2615,8 @@ fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n       }\n       terr_proto_mismatch(e, a) => {\n         return fmt!{\"closure protocol mismatch (%s vs %s)\",\n-                 proto_to_str(e), proto_to_str(a)};\n+                    util::ppaux::proto_ty_to_str(cx, e),\n+                    util::ppaux::proto_ty_to_str(cx, a)};\n       }\n       terr_mutability => return ~\"values differ in mutability\",\n       terr_box_mutability => return ~\"boxed values differ in mutability\",\n@@ -3254,6 +3273,26 @@ fn eval_repeat_count(tcx: ctxt, count_expr: @ast::expr, span: span) -> uint {\n     }\n }\n \n+fn ast_proto_to_proto(ast_proto: ast::proto) -> ty::fn_proto {\n+    match ast_proto {\n+        ast::proto_bare => ty::proto_bare,\n+        ast::proto_uniq => ty::proto_vstore(ty::vstore_uniq),\n+        ast::proto_box => ty::proto_vstore(ty::vstore_box),\n+        ast::proto_block => ty::proto_vstore(ty::vstore_slice(ty::re_static))\n+    }\n+}\n+\n+pure fn is_blockish(proto: fn_proto) -> bool {\n+    match proto {\n+        proto_vstore(vstore_slice(_)) =>\n+            true,\n+        proto_vstore(vstore_box) | proto_vstore(vstore_uniq) | proto_bare =>\n+            false,\n+        proto_vstore(vstore_fixed(_)) =>\n+            fail ~\"fixed vstore not allowed here\"\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "88469c33516e64415ef4161c3958270b7d463513", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -251,7 +251,7 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n     let tcx = ccx.tcx;\n     let main_t = ty::node_id_to_type(tcx, main_id);\n     match ty::get(main_t).struct {\n-      ty::ty_fn({purity: ast::impure_fn, proto: ast::proto_bare, bounds,\n+      ty::ty_fn({purity: ast::impure_fn, proto: ty::proto_bare, bounds,\n                  inputs, output, ret_style: ast::return_val}) => {\n         match tcx.items.find(main_id) {\n          some(ast_map::node_item(it,_)) => {"}, {"sha": "c6ede5bf8177d33ab471edc6ba191cd0da0c0d88", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -423,7 +423,7 @@ type expected_tys = option<{inputs: ~[ty::arg],\n \n fn ty_of_fn_decl<AC: ast_conv, RS: region_scope copy owned>(\n     self: AC, rscope: RS,\n-    proto: ast::proto,\n+    ast_proto: ast::proto,\n     bounds: @~[ty::param_bound],\n     decl: ast::fn_decl,\n     expected_tys: expected_tys) -> ty::fn_ty {\n@@ -450,6 +450,8 @@ fn ty_of_fn_decl<AC: ast_conv, RS: region_scope copy owned>(\n           _ => ast_ty_to_ty(self, rb, decl.output)\n         };\n \n+        let proto = ty::ast_proto_to_proto(ast_proto);\n+\n         {purity: decl.purity, proto: proto, bounds: bounds, inputs: input_tys,\n          output: output_ty, ret_style: decl.cf}\n     }"}, {"sha": "3bb2d0974ec36a03b65230007066fba3fbc6f3bc", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -1116,9 +1116,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         }\n     }\n \n+    enum fn_or_ast_proto {\n+        foap_fn_proto(ty::fn_proto),\n+        foap_ast_proto(ast::proto)\n+    }\n+\n     fn check_expr_fn(fcx: @fn_ctxt,\n                      expr: @ast::expr,\n-                     proto: ast::proto,\n+                     fn_or_ast_proto: fn_or_ast_proto,\n                      decl: ast::fn_decl,\n                      body: ast::blk,\n                      is_loop_body: bool,\n@@ -1143,9 +1148,29 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             }\n         };\n \n+        let ast_proto;\n+        match fn_or_ast_proto {\n+            foap_fn_proto(fn_proto) => {\n+                // Generate a fake AST prototype. We'll fill in the type with\n+                // the real one later.\n+                // XXX: This is a hack.\n+                ast_proto = ast::proto_box;\n+            }\n+            foap_ast_proto(existing_ast_proto) => {\n+                ast_proto = existing_ast_proto;\n+            }\n+        }\n+\n         // construct the function type\n-        let fn_ty = astconv::ty_of_fn_decl(fcx, fcx, proto, @~[],\n-                                           decl, expected_tys);\n+        let mut fn_ty = astconv::ty_of_fn_decl(fcx, fcx, ast_proto, @~[],\n+                                               decl, expected_tys);\n+\n+        // Patch up the function declaration, if necessary.\n+        match fn_or_ast_proto {\n+            foap_fn_proto(fn_proto) => fn_ty.proto = fn_proto,\n+            foap_ast_proto(_) => {}\n+        }\n+\n         let fty = ty::mk_fn(tcx, fn_ty);\n \n         debug!{\"check_expr_fn_with_unifier %s fty=%s\",\n@@ -1485,15 +1510,17 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         bot = alt::check_alt(fcx, expr, discrim, arms);\n       }\n       ast::expr_fn(proto, decl, body, cap_clause) => {\n-        check_expr_fn(fcx, expr, proto, decl, body, false, expected);\n+        check_expr_fn(fcx, expr, foap_ast_proto(proto), decl, body, false,\n+                      expected);\n         capture::check_capture_clause(tcx, expr.id, cap_clause);\n       }\n       ast::expr_fn_block(decl, body, cap_clause) => {\n          // Take the prototype from the expected type, but default to block:\n           let proto = unpack_expected(fcx, expected, |sty|\n               match sty { ty::ty_fn({proto, _}) => some(proto), _ => none }\n-          ).get_default(ast::proto_box);\n-        check_expr_fn(fcx, expr, proto, decl, body, false, expected);\n+          ).get_default(ty::proto_vstore(ty::vstore_box));\n+        check_expr_fn(fcx, expr, foap_fn_proto(proto), decl, body, false,\n+                      expected);\n         capture::check_capture_clause(tcx, expr.id, cap_clause);\n       }\n       ast::expr_loop_body(b) => {\n@@ -1525,7 +1552,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         };\n         match check b.node {\n           ast::expr_fn_block(decl, body, cap_clause) => {\n-            check_expr_fn(fcx, b, proto, decl, body, true, some(inner_ty));\n+            check_expr_fn(fcx, b, foap_fn_proto(proto), decl, body, true,\n+                          some(inner_ty));\n             demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n             capture::check_capture_clause(tcx, b.id, cap_clause);\n           }\n@@ -1553,7 +1581,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         };\n         match check b.node {\n           ast::expr_fn_block(decl, body, cap_clause) => {\n-            check_expr_fn(fcx, b, proto, decl, body, true, some(inner_ty));\n+            check_expr_fn(fcx, b, foap_fn_proto(proto), decl, body, true,\n+                          some(inner_ty));\n             demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n             capture::check_capture_clause(tcx, b.id, cap_clause);\n           }\n@@ -2438,7 +2467,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       ~\"frame_address\" => {\n         let fty = ty::mk_fn(ccx.tcx, {\n             purity: ast::impure_fn,\n-            proto: ast::proto_block,\n+            proto: ty::proto_vstore(ty::vstore_slice(ty::re_static)),\n             bounds: @~[],\n             inputs: ~[{\n                 mode: ast::expl(ast::by_val),\n@@ -2458,7 +2487,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       }\n     };\n     let fty = ty::mk_fn(tcx, {purity: ast::impure_fn,\n-                              proto: ast::proto_bare,\n+                              proto: ty::proto_bare,\n                               bounds: @~[],\n                               inputs: inputs, output: output,\n                               ret_style: ast::return_val});"}, {"sha": "274eab9242e50df822db7832592f9c66f78105a7", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -334,7 +334,8 @@ class lookup {\n     fn ty_from_did(did: ast::def_id) -> ty::t {\n         match check ty::get(ty::lookup_item_type(self.tcx(), did).ty).struct {\n           ty::ty_fn(fty) => {\n-            ty::mk_fn(self.tcx(), {proto: ast::proto_box with fty})\n+            ty::mk_fn(self.tcx(),\n+                      {proto: ty::proto_vstore(ty::vstore_box) with fty})\n           }\n         }\n         /*\n@@ -416,7 +417,8 @@ class lookup {\n \n         // a bit hokey, but the method unbound has a bare protocol, whereas\n         // a.b has a protocol like fn@() (perhaps eventually fn&()):\n-        let fty = ty::mk_fn(tcx, {proto: ast::proto_box with m.fty});\n+        let fty = ty::mk_fn(tcx, {proto: ty::proto_vstore(ty::vstore_box)\n+                                  with m.fty});\n \n         self.candidates.push(\n             {self_ty: self.self_ty,"}, {"sha": "0eaa435e32d7c6ff0c57e4e193a1f6e93b0891e0", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -126,7 +126,8 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n                 });\n                 result_ty = some(ty::mk_fn(tcx,\n                                            {purity: ast::pure_fn,\n-                                            proto: ast::proto_box,\n+                                            proto: ty::proto_vstore\n+                                                (ty::vstore_box),\n                                             bounds: @~[],\n                                             inputs: args,\n                                             output: enum_ty,\n@@ -474,7 +475,7 @@ fn convert_struct(ccx: @crate_ctxt, rp: bool, struct_def: @ast::struct_def,\n              tps: ty::ty_params_to_tys(tcx, tps)});\n         let t_ctor = ty::mk_fn(\n             tcx, {purity: ast::impure_fn,\n-                  proto: ast::proto_block,\n+                  proto: ty::proto_vstore(ty::vstore_slice(ty::re_static)),\n                   bounds: @~[],\n                   inputs: t_args,\n                   output: t_res,\n@@ -726,7 +727,7 @@ fn ty_of_foreign_fn_decl(ccx: @crate_ctxt,\n     let output_ty = ast_ty_to_ty(ccx, rb, decl.output);\n \n     let t_fn = ty::mk_fn(ccx.tcx, {purity: decl.purity,\n-                                   proto: ast::proto_bare,\n+                                   proto: ty::proto_bare,\n                                    bounds: @~[],\n                                    inputs: input_tys,\n                                    output: output_ty,"}, {"sha": "13735e2f6d0448fbf0d1df76f21504c0d8fd2f2e", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -172,7 +172,7 @@ import std::smallintmap::smallintmap;\n import std::map::hashmap;\n import middle::ty;\n import middle::ty::{tv_vid, tvi_vid, region_vid, vid,\n-                    ty_int, ty_uint, get};\n+                    ty_int, ty_uint, get, terr_fn};\n import syntax::{ast, ast_util};\n import syntax::ast::{ret_style, purity};\n import util::ppaux::{ty_to_str, mt_to_str};\n@@ -1552,7 +1552,7 @@ trait combine {\n     fn flds(a: ty::field, b: ty::field) -> cres<ty::field>;\n     fn modes(a: ast::mode, b: ast::mode) -> cres<ast::mode>;\n     fn args(a: ty::arg, b: ty::arg) -> cres<ty::arg>;\n-    fn protos(p1: ast::proto, p2: ast::proto) -> cres<ast::proto>;\n+    fn protos(p1: ty::fn_proto, p2: ty::fn_proto) -> cres<ty::fn_proto>;\n     fn ret_styles(r1: ret_style, r2: ret_style) -> cres<ret_style>;\n     fn purities(f1: purity, f2: purity) -> cres<purity>;\n     fn contraregions(a: ty::region, b: ty::region) -> cres<ty::region>;\n@@ -1945,7 +1945,7 @@ impl sub: combine {\n         }\n     }\n \n-    fn protos(a: ast::proto, b: ast::proto) -> cres<ast::proto> {\n+    fn protos(a: ty::fn_proto, b: ty::fn_proto) -> cres<ty::fn_proto> {\n         (&self.lub()).protos(a, b).compare(b, || {\n             ty::terr_proto_mismatch(b, a)\n         })\n@@ -2103,15 +2103,20 @@ impl lub: combine {\n         glb(self.infcx()).tys(a, b)\n     }\n \n-    fn protos(p1: ast::proto, p2: ast::proto) -> cres<ast::proto> {\n-        if p1 == ast::proto_bare {\n-            ok(p2)\n-        } else if p2 == ast::proto_bare {\n-            ok(p1)\n-        } else if p1 == p2 {\n-            ok(p1)\n-        } else {\n-            ok(ast::proto_block)\n+    fn protos(p1: ty::fn_proto, p2: ty::fn_proto) -> cres<ty::fn_proto> {\n+        match (p1, p2) {\n+            (ty::proto_bare, _) => ok(p2),\n+            (_, ty::proto_bare) => ok(p1),\n+            (ty::proto_vstore(v1), ty::proto_vstore(v2)) => {\n+                self.infcx().try(|| {\n+                    do self.vstores(terr_fn, v1, v2).chain |vs| {\n+                        ok(ty::proto_vstore(vs))\n+                    }\n+                }).chain_err(|_err| {\n+                    // XXX: Totally unsound, but fixed up later.\n+                    ok(ty::proto_vstore(ty::vstore_slice(ty::re_static)))\n+                })\n+            }\n         }\n     }\n \n@@ -2300,15 +2305,21 @@ impl glb: combine {\n         lub(self.infcx()).tys(a, b)\n     }\n \n-    fn protos(p1: ast::proto, p2: ast::proto) -> cres<ast::proto> {\n-        if p1 == ast::proto_block {\n-            ok(p2)\n-        } else if p2 == ast::proto_block {\n-            ok(p1)\n-        } else if p1 == p2 {\n-            ok(p1)\n-        } else {\n-            ok(ast::proto_bare)\n+    fn protos(p1: ty::fn_proto, p2: ty::fn_proto) -> cres<ty::fn_proto> {\n+        match (p1, p2) {\n+            (ty::proto_vstore(ty::vstore_slice(_)), _) => ok(p2),\n+            (_, ty::proto_vstore(ty::vstore_slice(_))) => ok(p1),\n+            (ty::proto_vstore(v1), ty::proto_vstore(v2)) => {\n+                self.infcx().try(|| {\n+                    do self.vstores(terr_fn, v1, v2).chain |vs| {\n+                        ok(ty::proto_vstore(vs))\n+                    }\n+                }).chain_err(|_err| {\n+                    // XXX: Totally unsound, but fixed up later.\n+                    ok(ty::proto_bare)\n+                })\n+            }\n+            _ => ok(ty::proto_bare)\n         }\n     }\n "}, {"sha": "c43a76d6a4233e79ba0edd688991492b0e0cb434", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101125a962abae18525d6014cd26ad10bbb96e6/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=0101125a962abae18525d6014cd26ad10bbb96e6", "patch": "@@ -188,6 +188,13 @@ fn vstore_ty_to_str(cx: ctxt, ty: ~str, vs: ty::vstore) -> ~str {\n     }\n }\n \n+fn proto_ty_to_str(cx: ctxt, proto: ty::fn_proto) -> ~str {\n+    match proto {\n+      ty::proto_bare => ~\"\",\n+      ty::proto_vstore(vstore) => vstore_to_str(cx, vstore)\n+    }\n+}\n+\n fn tys_to_str(cx: ctxt, ts: ~[t]) -> ~str {\n     let mut rs = ~\"\";\n     for ts.each |t| { rs += ty_to_str(cx, t); }\n@@ -211,7 +218,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n         };\n         modestr + ty_to_str(cx, ty)\n     }\n-    fn fn_to_str(cx: ctxt, purity: ast::purity, proto: ast::proto,\n+    fn fn_to_str(cx: ctxt, purity: ast::purity, proto: ty::fn_proto,\n                  ident: option<ast::ident>,\n                  inputs: ~[arg], output: t, cf: ast::ret_style) -> ~str {\n         let mut s;\n@@ -220,7 +227,8 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n           ast::impure_fn => ~\"\",\n           _ => purity_to_str(purity) + ~\" \"\n         };\n-        s += proto_to_str(proto);\n+\n+        s += proto_ty_to_str(cx, proto);\n         match ident {\n           some(i) => { s += ~\" \"; s += *i; }\n           _ => { }"}]}