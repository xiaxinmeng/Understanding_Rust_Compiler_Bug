{"sha": "01c6ea2f37326674bf6ca64de55bf5fd90e45015", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYzZlYTJmMzczMjY2NzRiZjZjYTY0ZGU1NWJmNWZkOTBlNDUwMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-21T10:46:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-21T10:46:11Z"}, "message": "Auto merge of #56813 - oli-obk:main_\ud83e\uddf6, r=pnkfelix\n\nAlways run rustc in a thread\n\ncc @ishitatsuyuki @eddyb\n\nr? @pnkfelix\n\n[Previously](https://github.com/rust-lang/rust/pull/48575) we moved to only producing threads when absolutely necessary. Even before we opted to only create threads in some cases, which [is unsound](https://github.com/rust-lang/rust/pull/48575#issuecomment-380635967) due to the way we use thread local storage.", "tree": {"sha": "6493f8fd87eaf77e2979ab068c5dcb2847f7420e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6493f8fd87eaf77e2979ab068c5dcb2847f7420e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01c6ea2f37326674bf6ca64de55bf5fd90e45015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01c6ea2f37326674bf6ca64de55bf5fd90e45015", "html_url": "https://github.com/rust-lang/rust/commit/01c6ea2f37326674bf6ca64de55bf5fd90e45015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01c6ea2f37326674bf6ca64de55bf5fd90e45015/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d34ec18c7d7e574553f6347ecf08e1e1c45c13d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d34ec18c7d7e574553f6347ecf08e1e1c45c13d", "html_url": "https://github.com/rust-lang/rust/commit/6d34ec18c7d7e574553f6347ecf08e1e1c45c13d"}, {"sha": "6b96827ae971cec1f1bf83245d8356481e76b644", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b96827ae971cec1f1bf83245d8356481e76b644", "html_url": "https://github.com/rust-lang/rust/commit/6b96827ae971cec1f1bf83245d8356481e76b644"}], "stats": {"total": 108, "additions": 5, "deletions": 103}, "files": [{"sha": "5527c0ad387874a62379cf2f92352b9f0703ddc8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 62, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=01c6ea2f37326674bf6ca64de55bf5fd90e45015", "patch": "@@ -25,7 +25,6 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(set_stdio)]\n-#![feature(rustc_stack_internals)]\n #![feature(no_debug)]\n \n #![recursion_limit=\"256\"]\n@@ -1481,69 +1480,13 @@ pub fn in_named_rustc_thread<F, R>(name: String, f: F) -> Result<R, Box<dyn Any\n     where F: FnOnce() -> R + Send + 'static,\n           R: Send + 'static,\n {\n-    #[cfg(all(unix, not(target_os = \"haiku\")))]\n-    let spawn_thread = unsafe {\n-        // Fetch the current resource limits\n-        let mut rlim = libc::rlimit {\n-            rlim_cur: 0,\n-            rlim_max: 0,\n-        };\n-        if libc::getrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n-            let err = io::Error::last_os_error();\n-            error!(\"in_rustc_thread: error calling getrlimit: {}\", err);\n-            true\n-        } else if rlim.rlim_max < STACK_SIZE as libc::rlim_t {\n-            true\n-        } else if rlim.rlim_cur < STACK_SIZE as libc::rlim_t {\n-            std::rt::deinit_stack_guard();\n-            rlim.rlim_cur = STACK_SIZE as libc::rlim_t;\n-            if libc::setrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n-                let err = io::Error::last_os_error();\n-                error!(\"in_rustc_thread: error calling setrlimit: {}\", err);\n-                std::rt::update_stack_guard();\n-                true\n-            } else {\n-                std::rt::update_stack_guard();\n-                false\n-            }\n-        } else {\n-            false\n-        }\n-    };\n-\n-    // We set the stack size at link time. See src/rustc/rustc.rs.\n-    #[cfg(windows)]\n-    let spawn_thread = false;\n-\n-    #[cfg(target_os = \"haiku\")]\n-    let spawn_thread = unsafe {\n-        // Haiku does not have setrlimit implemented for the stack size.\n-        // By default it does have the 16 MB stack limit, but we check this in\n-        // case the minimum STACK_SIZE changes or Haiku's defaults change.\n-        let mut rlim = libc::rlimit {\n-            rlim_cur: 0,\n-            rlim_max: 0,\n-        };\n-        if libc::getrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n-            let err = io::Error::last_os_error();\n-            error!(\"in_rustc_thread: error calling getrlimit: {}\", err);\n-            true\n-        } else if rlim.rlim_cur >= STACK_SIZE {\n-            false\n-        } else {\n-            true\n-        }\n-    };\n-\n-    #[cfg(not(any(windows, unix)))]\n-    let spawn_thread = true;\n-\n-    // The or condition is added from backward compatibility.\n-    if spawn_thread || env::var_os(\"RUST_MIN_STACK\").is_some() {\n+    // We need a thread for soundness of thread local storage in rustc. For debugging purposes\n+    // we allow an escape hatch where everything runs on the main thread.\n+    if env::var_os(\"RUSTC_UNSTABLE_NO_MAIN_THREAD\").is_none() {\n         let mut cfg = thread::Builder::new().name(name);\n \n-        // FIXME: Hacks on hacks. If the env is trying to override the stack size\n-        // then *don't* set it explicitly.\n+        // If the env is trying to override the stack size then *don't* set it explicitly.\n+        // The libstd thread impl will fetch the `RUST_MIN_STACK` env var itself.\n         if env::var_os(\"RUST_MIN_STACK\").is_none() {\n             cfg = cfg.stack_size(STACK_SIZE);\n         }"}, {"sha": "fdaf2a821faad876c653fd78c91ba12addf080db", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=01c6ea2f37326674bf6ca64de55bf5fd90e45015", "patch": "@@ -73,18 +73,3 @@ fn lang_start<T: ::process::Termination + 'static>\n {\n     lang_start_internal(&move || main().report(), argc, argv)\n }\n-\n-/// Function used for reverting changes to the main stack before setrlimit().\n-/// This is POSIX (non-Linux) specific and unlikely to be directly stabilized.\n-#[unstable(feature = \"rustc_stack_internals\", issue = \"0\")]\n-pub unsafe fn deinit_stack_guard() {\n-    ::sys::thread::guard::deinit();\n-}\n-\n-/// Function used for resetting the main stack guard address after setrlimit().\n-/// This is POSIX specific and unlikely to be directly stabilized.\n-#[unstable(feature = \"rustc_stack_internals\", issue = \"0\")]\n-pub unsafe fn update_stack_guard() {\n-    let main_guard = ::sys::thread::guard::init();\n-    ::sys_common::thread_info::reset_guard(main_guard);\n-}"}, {"sha": "a64e0f068497a803e6e33789b5236ab6b6a8e2d6", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=01c6ea2f37326674bf6ca64de55bf5fd90e45015", "patch": "@@ -121,7 +121,6 @@ pub mod guard {\n     pub unsafe fn init() -> Option<Guard> {\n         None\n     }\n-    pub unsafe fn deinit() {}\n }\n \n fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {"}, {"sha": "ca014fd576bd3743b7d5a113844c36921502f559", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=01c6ea2f37326674bf6ca64de55bf5fd90e45015", "patch": "@@ -92,5 +92,4 @@ pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n-    pub unsafe fn deinit() {}\n }"}, {"sha": "9f3c4536cb5b6d6a91c773fd11d920b819111da1", "filename": "src/libstd/sys/sgx/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs?ref=01c6ea2f37326674bf6ca64de55bf5fd90e45015", "patch": "@@ -97,5 +97,4 @@ pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n-    pub unsafe fn deinit() {}\n }"}, {"sha": "e0d2c620498b69398299b43d51ba1c4dbff56efe", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=01c6ea2f37326674bf6ca64de55bf5fd90e45015", "patch": "@@ -211,7 +211,6 @@ pub mod guard {\n     pub type Guard = Range<usize>;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n-    pub unsafe fn deinit() {}\n }\n \n \n@@ -355,26 +354,6 @@ pub mod guard {\n         }\n     }\n \n-    pub unsafe fn deinit() {\n-        if !cfg!(target_os = \"linux\") {\n-            if let Some(stackaddr) = get_stack_start_aligned() {\n-                // Remove the protection on the guard page.\n-                // FIXME: we cannot unmap the page, because when we mmap()\n-                // above it may be already mapped by the OS, which we can't\n-                // detect from mmap()'s return value. If we unmap this page,\n-                // it will lead to failure growing stack size on platforms like\n-                // macOS. Instead, just restore the page to a writable state.\n-                // This ain't Linux, so we probably don't need to care about\n-                // execstack.\n-                let result = mprotect(stackaddr, PAGE_SIZE, PROT_READ | PROT_WRITE);\n-\n-                if result != 0 {\n-                    panic!(\"unable to reset the guard page\");\n-                }\n-            }\n-        }\n-    }\n-\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"bitrig\",\n               target_os = \"openbsd\","}, {"sha": "f9abb0b825a3409f3b6216d87d7bae4d1ee995aa", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=01c6ea2f37326674bf6ca64de55bf5fd90e45015", "patch": "@@ -68,7 +68,6 @@ pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n-    pub unsafe fn deinit() {}\n }\n \n cfg_if! {"}, {"sha": "621ae2fda58c3556212e356f84634ad58ccf7089", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c6ea2f37326674bf6ca64de55bf5fd90e45015/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=01c6ea2f37326674bf6ca64de55bf5fd90e45015", "patch": "@@ -98,5 +98,4 @@ pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> { None }\n     pub unsafe fn init() -> Option<Guard> { None }\n-    pub unsafe fn deinit() {}\n }"}]}