{"sha": "48094a4a6f53ee3be636b4166a7841505bb7cabc", "node_id": "C_kwDOAAsO6NoAKDQ4MDk0YTRhNmY1M2VlM2JlNjM2YjQxNjZhNzg0MTUwNWJiN2NhYmM", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-03T06:25:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-05T16:51:16Z"}, "message": "More eagerly resolve expr `ty`s before writing them\n\nThis allows the expressions to have more accurate types\nwhen showing inference steps.", "tree": {"sha": "076d61e3e06c878861828fe4d4dac4ecad2b3cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/076d61e3e06c878861828fe4d4dac4ecad2b3cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48094a4a6f53ee3be636b4166a7841505bb7cabc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48094a4a6f53ee3be636b4166a7841505bb7cabc", "html_url": "https://github.com/rust-lang/rust/commit/48094a4a6f53ee3be636b4166a7841505bb7cabc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48094a4a6f53ee3be636b4166a7841505bb7cabc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c30b0ca5450b2beec0a6e4e034953e216f6bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c30b0ca5450b2beec0a6e4e034953e216f6bbe", "html_url": "https://github.com/rust-lang/rust/commit/05c30b0ca5450b2beec0a6e4e034953e216f6bbe"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "6ed1bc051a5fa406b0845d0579527fdb78071f6f", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48094a4a6f53ee3be636b4166a7841505bb7cabc/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48094a4a6f53ee3be636b4166a7841505bb7cabc/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=48094a4a6f53ee3be636b4166a7841505bb7cabc", "patch": "@@ -234,6 +234,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ) => self.check_expr_path(qpath, expr, args),\n             _ => self.check_expr_kind(expr, expected),\n         });\n+        let ty = self.resolve_vars_if_possible(ty);\n \n         // Warn for non-block expressions with diverging children.\n         match expr.kind {"}, {"sha": "e7fecfebdc8f3f3bc303e5c1b1daa94611688822", "filename": "src/test/ui/issues/issue-15783.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr?ref=48094a4a6f53ee3be636b4166a7841505bb7cabc", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-15783.rs:8:19\n    |\n LL |     let x = Some(&[name]);\n-   |             ------------- here the type of `x` is inferred to be `Option<_>`\n+   |             ------------- here the type of `x` is inferred to be `Option<&[&str; 1]>`\n LL |     let msg = foo(x);\n    |               --- ^ expected slice `[&str]`, found array `[&str; 1]`\n    |               |"}, {"sha": "4c58b2db575d02620f9a3596053772e7ebe35382", "filename": "src/test/ui/let-else/let-else-ref-bindings.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr?ref=48094a4a6f53ee3be636b4166a7841505bb7cabc", "patch": "@@ -20,10 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:24:34\n    |\n LL |     let some = Some(bytes);\n-   |                ----------- here the type of `some` is inferred to be `Option<_>`\n-...\n-LL |     let Some(ref a): Option<&[u8]> = some else { return };\n-   |                                      ---- here the type of `some` is inferred to be `Option<Vec<u8>>`\n+   |                ----------- here the type of `some` is inferred to be `Option<Vec<u8>>`\n ...\n LL |     let Some(a): Option<&[u8]> = some else { return };\n    |                  -------------   ^^^^ expected `&[u8]`, found struct `Vec`\n@@ -66,10 +63,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:52:38\n    |\n LL |     let mut some = Some(bytes);\n-   |                    ----------- here the type of `some` is inferred to be `Option<_>`\n-...\n-LL |     let Some(ref mut a): Option<&mut [u8]> = some else { return };\n-   |                                              ---- here the type of `some` is inferred to be `Option<Vec<u8>>`\n+   |                    ----------- here the type of `some` is inferred to be `Option<Vec<u8>>`\n ...\n LL |     let Some(a): Option<&mut [u8]> = some else { return };\n    |                  -----------------   ^^^^ expected `&mut [u8]`, found struct `Vec`"}, {"sha": "9b5f0134f127470d7b2592ce1dd02521e9e4344a", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=48094a4a6f53ee3be636b4166a7841505bb7cabc", "patch": "@@ -63,7 +63,7 @@ LL | |             y: 2,\n LL | |         },\n LL | |         y: 3,\n LL | |     };\n-   | |_____- here the type of `x` is inferred to be `X<_, _>`\n+   | |_____- here the type of `x` is inferred to be `X<X<String, {integer}>, {integer}>`\n LL |       x\n    |       ^ expected struct `String`, found integer\n    |\n@@ -83,7 +83,7 @@ LL | |             y: 2,\n LL | |         },\n LL | |         y: \"\".to_string(),\n LL | |     };\n-   | |_____- here the type of `x` is inferred to be `X<_, _>`\n+   | |_____- here the type of `x` is inferred to be `X<X<String, {integer}>, String>`\n LL |       x\n    |       ^ expected struct `String`, found integer\n    |"}, {"sha": "8c30f015c5d84fc18f5645dd103803d0a595bb54", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=48094a4a6f53ee3be636b4166a7841505bb7cabc", "patch": "@@ -101,10 +101,7 @@ error[E0308]: mismatched types\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:9:19\n    |\n LL |     let opt = Some(1i32);\n-   |               ---------- here the type of `opt` is inferred to be `Option<_>`\n-LL |\n-LL |     let Some(n) = opt else {\n-   |                   --- here the type of `opt` is inferred to be `Option<i32>`\n+   |               ---------- here the type of `opt` is inferred to be `Option<i32>`\n ...\n LL |     let Some(n) = opt && n == 1 else {\n    |                   ^^^ expected `bool`, found enum `Option`\n@@ -127,10 +124,7 @@ error[E0308]: mismatched types\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:19\n    |\n LL |     let opt = Some(1i32);\n-   |               ---------- here the type of `opt` is inferred to be `Option<_>`\n-LL |\n-LL |     let Some(n) = opt else {\n-   |                   --- here the type of `opt` is inferred to be `Option<i32>`\n+   |               ---------- here the type of `opt` is inferred to be `Option<i32>`\n ...\n LL |     let Some(n) = opt && let another = n else {\n    |                   ^^^ expected `bool`, found enum `Option`"}, {"sha": "1609c2a3094e11a0efa94673dc31f528be06ee6c", "filename": "src/test/ui/suggestions/call-boxed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Fsuggestions%2Fcall-boxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Fsuggestions%2Fcall-boxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-boxed.stderr?ref=48094a4a6f53ee3be636b4166a7841505bb7cabc", "patch": "@@ -7,7 +7,7 @@ LL |     let y = Box::new(|| 1);\n    |             --------------\n    |             |        |\n    |             |        the found closure\n-   |             here the type of `y` is inferred to be `Box<_>`\n+   |             here the type of `y` is inferred to be `Box<[closure@call-boxed.rs:3:22]>`\n LL |     x = y;\n    |         ^ expected `i32`, found struct `Box`\n    |"}, {"sha": "1ad1d692121022738626f7e4c07c2811e8b21d92", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=48094a4a6f53ee3be636b4166a7841505bb7cabc", "patch": "@@ -2,7 +2,7 @@ error[E0061]: this method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |     let new_group = vec![String::new()];\n-   |                     ------------------- here the type of `new_group` is inferred to be `Vec<_, _>`\n+   |                     ------------------- here the type of `new_group` is inferred to be `Vec<String>`\n ...\n LL |         groups.push(new_group, vec![process]);\n    |                ^^^^            ------------- argument of type `Vec<&Process>` unexpected"}, {"sha": "0d754459f4a5053a65141840ccddf7e7efa91a54", "filename": "src/test/ui/type/type-mismatch-same-crate-name.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48094a4a6f53ee3be636b4166a7841505bb7cabc/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr?ref=48094a4a6f53ee3be636b4166a7841505bb7cabc", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-same-crate-name.rs:16:20\n    |\n LL |     let foo2 = {extern crate crate_a2 as a; a::Foo};\n-   |                ------------------------------------ here the type of `foo2` is inferred to be `_`\n+   |                ------------------------------------ here the type of `foo2` is inferred to be `Foo`\n ...\n LL |         a::try_foo(foo2);\n    |         ---------- ^^^^ expected struct `main::a::Foo`, found a different struct `main::a::Foo`\n@@ -31,7 +31,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-same-crate-name.rs:20:20\n    |\n LL |     let bar2 = {extern crate crate_a2 as a; a::bar()};\n-   |                -------------------------------------- here the type of `bar2` is inferred to be `_`\n+   |                -------------------------------------- here the type of `bar2` is inferred to be `Box<dyn Bar>`\n ...\n LL |         a::try_bar(bar2);\n    |         ---------- ^^^^ expected trait `main::a::Bar`, found a different trait `main::a::Bar`"}]}