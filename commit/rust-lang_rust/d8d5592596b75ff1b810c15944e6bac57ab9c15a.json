{"sha": "d8d5592596b75ff1b810c15944e6bac57ab9c15a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDU1OTI1OTZiNzVmZjFiODEwYzE1OTQ0ZTZiYWM1N2FiOWMxNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-08T01:07:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-08T01:07:08Z"}, "message": "Auto merge of #40706 - irfanhudda:doc-next-power-of-two, r=alexcrichton\n\nImprove documentation of next_power_of_two\n\nClarify overflow behavior of `next_power_of_two`.\n\nRelated Issue: #18604", "tree": {"sha": "2843e9a6392fc984d574a74727caab4e34da2c83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2843e9a6392fc984d574a74727caab4e34da2c83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d5592596b75ff1b810c15944e6bac57ab9c15a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d5592596b75ff1b810c15944e6bac57ab9c15a", "html_url": "https://github.com/rust-lang/rust/commit/d8d5592596b75ff1b810c15944e6bac57ab9c15a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d5592596b75ff1b810c15944e6bac57ab9c15a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03eb7109c722117322064390bc66578cde3f7b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03eb7109c722117322064390bc66578cde3f7b8e", "html_url": "https://github.com/rust-lang/rust/commit/03eb7109c722117322064390bc66578cde3f7b8e"}, {"sha": "18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3", "html_url": "https://github.com/rust-lang/rust/commit/18fadb61c4aab3d1b2fc49ac7d7fea85b3914fb3"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "b76eac9e51f1fe31eb2f9fb9a2e06b4799a37ddf", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d8d5592596b75ff1b810c15944e6bac57ab9c15a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d5592596b75ff1b810c15944e6bac57ab9c15a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d8d5592596b75ff1b810c15944e6bac57ab9c15a", "patch": "@@ -15,7 +15,6 @@\n use convert::TryFrom;\n use fmt;\n use intrinsics;\n-use mem::size_of;\n use str::FromStr;\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n@@ -2176,8 +2175,32 @@ macro_rules! uint_impl {\n             (self.wrapping_sub(1)) & self == 0 && !(self == 0)\n         }\n \n+        // Returns one less than next power of two.\n+        // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)\n+        //\n+        // 8u8.one_less_than_next_power_of_two() == 7\n+        // 6u8.one_less_than_next_power_of_two() == 7\n+        //\n+        // This method cannot overflow, as in the `next_power_of_two`\n+        // overflow cases it instead ends up returning the maximum value\n+        // of the type, and can return 0 for 0.\n+        fn one_less_than_next_power_of_two(self) -> Self {\n+            if self <= 1 { return 0; }\n+\n+            // Because `p > 0`, it cannot consist entirely of leading zeros.\n+            // That means the shift is always in-bounds, and some processors\n+            // (such as intel pre-haswell) have more efficient ctlz\n+            // intrinsics when the argument is non-zero.\n+            let p = self - 1;\n+            let z = p.leading_zeros();\n+            <$SelfT>::max_value() >> z\n+        }\n+\n         /// Returns the smallest power of two greater than or equal to `self`.\n-        /// Unspecified behavior on overflow.\n+        ///\n+        /// When return value overflows (i.e. `self > (1 << (N-1))` for type\n+        /// `uN`), it panics in debug mode and return value is wrapped to 0 in\n+        /// release mode (the only situation in which method can return 0).\n         ///\n         /// # Examples\n         ///\n@@ -2190,9 +2213,7 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn next_power_of_two(self) -> Self {\n-            let bits = size_of::<Self>() * 8;\n-            let one: Self = 1;\n-            one << ((bits - self.wrapping_sub(one).leading_zeros() as usize) % bits)\n+            self.one_less_than_next_power_of_two() + 1\n         }\n \n         /// Returns the smallest power of two greater than or equal to `n`. If\n@@ -2210,12 +2231,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub fn checked_next_power_of_two(self) -> Option<Self> {\n-            let npot = self.next_power_of_two();\n-            if npot >= self {\n-                Some(npot)\n-            } else {\n-                None\n-            }\n+            self.one_less_than_next_power_of_two().checked_add(1)\n         }\n     }\n }"}, {"sha": "a2c133954a3279695e3249cee369bcfdf3561c96", "filename": "src/libstd/num.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8d5592596b75ff1b810c15944e6bac57ab9c15a/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d5592596b75ff1b810c15944e6bac57ab9c15a/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=d8d5592596b75ff1b810c15944e6bac57ab9c15a", "patch": "@@ -173,7 +173,10 @@ mod tests {\n             fn $test_name() {\n                 #![test]\n                 assert_eq!((0 as $T).checked_next_power_of_two(), Some(1));\n-                assert!(($T::MAX / 2).checked_next_power_of_two().is_some());\n+                let smax = $T::MAX >> 1;\n+                assert_eq!(smax.checked_next_power_of_two(), Some(smax+1));\n+                assert_eq!((smax + 1).checked_next_power_of_two(), Some(smax + 1));\n+                assert_eq!((smax + 2).checked_next_power_of_two(), None);\n                 assert_eq!(($T::MAX - 1).checked_next_power_of_two(), None);\n                 assert_eq!($T::MAX.checked_next_power_of_two(), None);\n                 let mut next_power = 1;"}]}