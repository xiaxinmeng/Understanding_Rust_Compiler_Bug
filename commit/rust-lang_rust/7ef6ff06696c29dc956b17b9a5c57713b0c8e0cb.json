{"sha": "7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZjZmZjA2Njk2YzI5ZGM5NTZiMTdiOWE1YzU3NzEzYjBjOGUwY2I=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-09T22:54:36Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-12T11:24:45Z"}, "message": "Track the visited AST's lifetime throughout Visitor.", "tree": {"sha": "2b3f0aa4a47bd0c67f081348bd3abe504a10e9f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3f0aa4a47bd0c67f081348bd3abe504a10e9f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "html_url": "https://github.com/rust-lang/rust/commit/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09dbf28e64e7ac9b9786320d90a87854615d77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09dbf28e64e7ac9b9786320d90a87854615d77a", "html_url": "https://github.com/rust-lang/rust/commit/a09dbf28e64e7ac9b9786320d90a87854615d77a"}], "stats": {"total": 590, "additions": 288, "deletions": 302}, "files": [{"sha": "7750ddc91e1a62061ce59682239aad38e714e956", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -143,7 +143,7 @@ impl<'a> Context<'a> {\n     }\n }\n \n-impl<'a> Visitor for Context<'a> {\n+impl<'a, 'v> Visitor<'v> for Context<'a> {\n     fn visit_ident(&mut self, sp: Span, id: ast::Ident) {\n         if !token::get_ident(id).get().is_ascii() {\n             self.gate_feature(\"non_ascii_idents\", sp,\n@@ -386,13 +386,13 @@ impl<'a> Visitor for Context<'a> {\n     }\n \n     fn visit_fn(&mut self,\n-                fn_kind: &visit::FnKind,\n-                fn_decl: &ast::FnDecl,\n-                block: &ast::Block,\n+                fn_kind: visit::FnKind<'v>,\n+                fn_decl: &'v ast::FnDecl,\n+                block: &'v ast::Block,\n                 span: Span,\n                 _: NodeId) {\n-        match *fn_kind {\n-            visit::FkItemFn(_, _, _, ref abi) if *abi == RustIntrinsic => {\n+        match fn_kind {\n+            visit::FkItemFn(_, _, _, abi) if abi == RustIntrinsic => {\n                 self.gate_feature(\"intrinsics\",\n                                   span,\n                                   \"intrinsics are subject to change\")"}, {"sha": "df0b02261b149b44d820f9024423d195a787617a", "filename": "src/librustc/front/show_span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Ffront%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Ffront%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fshow_span.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -23,7 +23,7 @@ struct ShowSpanVisitor<'a> {\n     sess: &'a Session\n }\n \n-impl<'a> Visitor for ShowSpanVisitor<'a> {\n+impl<'a, 'v> Visitor<'v> for ShowSpanVisitor<'a> {\n     fn visit_expr(&mut self, e: &ast::Expr) {\n         self.sess.span_note(e.span, \"expression\");\n         visit::walk_expr(self, e);"}, {"sha": "bfc73a8b6658a4aaad08373759be5aecf4694993", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -366,7 +366,7 @@ impl<'a, 'tcx> CTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for CTypesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for CTypesVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n         match ty.node {\n             ast::TyPath(_, _, id) => self.check_def(ty.span, ty.id, id),\n@@ -500,7 +500,7 @@ struct RawPtrDerivingVisitor<'a, 'tcx: 'a> {\n     cx: &'a Context<'a, 'tcx>\n }\n \n-impl<'a, 'tcx> Visitor for RawPtrDerivingVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for RawPtrDerivingVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n         static MSG: &'static str = \"use of `#[deriving]` with a raw pointer\";\n         match ty.node {\n@@ -908,9 +908,9 @@ impl LintPass for NonSnakeCase {\n     }\n \n     fn check_fn(&mut self, cx: &Context,\n-                fk: &visit::FnKind, _: &ast::FnDecl,\n+                fk: visit::FnKind, _: &ast::FnDecl,\n                 _: &ast::Block, span: Span, _: ast::NodeId) {\n-        match *fk {\n+        match fk {\n             visit::FkMethod(ident, _, m) => match method_context(cx, m) {\n                 PlainImpl\n                     => self.check_snake_case(cx, \"method\", ident, span),\n@@ -1218,7 +1218,7 @@ impl LintPass for UnusedMut {\n     }\n \n     fn check_fn(&mut self, cx: &Context,\n-                _: &visit::FnKind, decl: &ast::FnDecl,\n+                _: visit::FnKind, decl: &ast::FnDecl,\n                 _: &ast::Block, _: Span, _: ast::NodeId) {\n         for a in decl.inputs.iter() {\n             self.check_unused_mut_pat(cx, &[a.pat]);\n@@ -1387,9 +1387,9 @@ impl LintPass for MissingDoc {\n     }\n \n     fn check_fn(&mut self, cx: &Context,\n-            fk: &visit::FnKind, _: &ast::FnDecl,\n+            fk: visit::FnKind, _: &ast::FnDecl,\n             _: &ast::Block, _: Span, _: ast::NodeId) {\n-        match *fk {\n+        match fk {\n             visit::FkMethod(_, _, m) => {\n                 // If the method is an impl for a trait, don't doc.\n                 if method_context(cx, m) == TraitImpl { return; }"}, {"sha": "bb2deca160e575727203df9f2b4b6b3aace249db", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -492,7 +492,7 @@ impl<'a, 'tcx> AstConv<'tcx> for Context<'a, 'tcx>{\n     }\n }\n \n-impl<'a, 'tcx> Visitor for Context<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     fn visit_item(&mut self, it: &ast::Item) {\n         self.with_lint_attrs(it.attrs.as_slice(), |cx| {\n             run_lints!(cx, check_item, it);\n@@ -531,9 +531,9 @@ impl<'a, 'tcx> Visitor for Context<'a, 'tcx> {\n         visit::walk_stmt(self, s);\n     }\n \n-    fn visit_fn(&mut self, fk: &FnKind, decl: &ast::FnDecl,\n-                body: &ast::Block, span: Span, id: ast::NodeId) {\n-        match *fk {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, decl: &'v ast::FnDecl,\n+                body: &'v ast::Block, span: Span, id: ast::NodeId) {\n+        match fk {\n             visit::FkMethod(_, _, m) => {\n                 self.with_lint_attrs(m.attrs.as_slice(), |cx| {\n                     run_lints!(cx, check_fn, fk, decl, body, span, id);"}, {"sha": "9a3edbbb70bb05a49f39a808a6b635db8d51a56c", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -139,7 +139,7 @@ pub trait LintPass {\n     fn check_ty(&mut self, _: &Context, _: &ast::Ty) { }\n     fn check_generics(&mut self, _: &Context, _: &ast::Generics) { }\n     fn check_fn(&mut self, _: &Context,\n-        _: &FnKind, _: &ast::FnDecl, _: &ast::Block, _: Span, _: ast::NodeId) { }\n+        _: FnKind, _: &ast::FnDecl, _: &ast::Block, _: Span, _: ast::NodeId) { }\n     fn check_ty_method(&mut self, _: &Context, _: &ast::TypeMethod) { }\n     fn check_trait_method(&mut self, _: &Context, _: &ast::TraitItem) { }\n     fn check_struct_def(&mut self, _: &Context,"}, {"sha": "8c17c16afee1b11b8bbe2ba44ee9316d6e78ea32", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -54,7 +54,7 @@ pub fn read_crates(sess: &Session,\n     warn_if_multiple_versions(sess.diagnostic(), &sess.cstore)\n }\n \n-impl<'a> visit::Visitor for Env<'a> {\n+impl<'a, 'v> visit::Visitor<'v> for Env<'a> {\n     fn visit_view_item(&mut self, a: &ast::ViewItem) {\n         visit_view_item(self, a);\n         visit::walk_view_item(self, a);"}, {"sha": "209a09dbfafdfb87f88e5b27bbf67b46cac78628", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -1473,7 +1473,7 @@ struct EncodeVisitor<'a,'b:'a> {\n     index: &'a mut Vec<entry<i64>>,\n }\n \n-impl<'a,'b> visit::Visitor for EncodeVisitor<'a,'b> {\n+impl<'a, 'b, 'v> Visitor<'v> for EncodeVisitor<'a, 'b> {\n     fn visit_expr(&mut self, ex: &Expr) {\n         visit::walk_expr(self, ex);\n         my_visit_expr(ex);\n@@ -1775,7 +1775,7 @@ fn encode_struct_field_attrs(rbml_w: &mut Encoder, krate: &Crate) {\n         rbml_w: &'a mut Encoder<'b>,\n     }\n \n-    impl<'a, 'b> Visitor for StructFieldVisitor<'a, 'b> {\n+    impl<'a, 'b, 'v> Visitor<'v> for StructFieldVisitor<'a, 'b> {\n         fn visit_struct_field(&mut self, field: &ast::StructField) {\n             self.rbml_w.start_tag(tag_struct_field);\n             self.rbml_w.wr_tagged_u32(tag_struct_field_id, field.node.id);\n@@ -1798,7 +1798,7 @@ struct ImplVisitor<'a, 'b:'a, 'c:'a, 'tcx:'b> {\n     rbml_w: &'a mut Encoder<'c>,\n }\n \n-impl<'a, 'b, 'c, 'tcx> Visitor for ImplVisitor<'a, 'b, 'c, 'tcx> {\n+impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'b, 'c, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n         match item.node {\n             ItemImpl(_, Some(ref trait_ref), _, _) => {"}, {"sha": "cd003432ef22c4a3705ddc63f6342af5cb97067c", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -471,7 +471,7 @@ struct StaticInitializerCtxt<'a, 'tcx: 'a> {\n     bccx: &'a BorrowckCtxt<'a, 'tcx>\n }\n \n-impl<'a, 'tcx> Visitor for StaticInitializerCtxt<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for StaticInitializerCtxt<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &Expr) {\n         match ex.node {\n             ast::ExprAddrOf(mutbl, ref base) => {"}, {"sha": "acc2f47a0fe6834dda54b9660f7bd99afe7ac824", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -60,9 +60,9 @@ pub struct LoanDataFlowOperator;\n \n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n-impl<'a, 'tcx> Visitor for BorrowckCtxt<'a, 'tcx> {\n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl,\n-                b: &Block, s: Span, n: NodeId) {\n+impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n+                b: &'v Block, s: Span, n: NodeId) {\n         borrowck_fn(self, fk, fd, b, s, n);\n     }\n \n@@ -127,7 +127,7 @@ pub struct AnalysisData<'a, 'tcx: 'a> {\n }\n \n fn borrowck_fn(this: &mut BorrowckCtxt,\n-               fk: &FnKind,\n+               fk: FnKind,\n                decl: &ast::FnDecl,\n                body: &ast::Block,\n                sp: Span,\n@@ -146,7 +146,7 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n-                                          fk: &FnKind,\n+                                          fk: FnKind,\n                                           decl: &ast::FnDecl,\n                                           cfg: &cfg::CFG,\n                                           body: &ast::Block,\n@@ -217,7 +217,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n     let p = input.fn_parts;\n \n     let dataflow_data = build_borrowck_dataflow_data(&mut bccx,\n-                                                     &p.kind,\n+                                                     p.kind,\n                                                      &*p.decl,\n                                                      input.cfg,\n                                                      &*p.body,"}, {"sha": "c0160b72784ca14a2e489e252b25099651b02285", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for CheckCrateVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &Item) {\n         check_item(self, i);\n     }\n@@ -238,7 +238,7 @@ pub fn check_item_recursion<'a>(sess: &'a Session,\n     visitor.visit_item(it);\n }\n \n-impl<'a> Visitor for CheckItemRecursionVisitor<'a> {\n+impl<'a, 'v> Visitor<'v> for CheckItemRecursionVisitor<'a> {\n     fn visit_item(&mut self, it: &Item) {\n         if self.idstack.iter().any(|x| x == &(it.id)) {\n             self.sess.span_fatal(self.root_it.span, \"recursive constant\");"}, {"sha": "3abf49bdfb2923c161003080566880e2b887d0f1", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -29,7 +29,7 @@ pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n     visit::walk_crate(&mut CheckLoopVisitor { sess: sess, cx: Normal }, krate)\n }\n \n-impl<'a> Visitor for CheckLoopVisitor<'a> {\n+impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         self.with_context(Normal, |v| visit::walk_item(v, i));\n     }"}, {"sha": "6e8f6530075e6310680b8438c9bbebdafcd41f63", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -119,14 +119,15 @@ enum WitnessPreference {\n     LeaveOutWitness\n }\n \n-impl<'a, 'tcx> Visitor for MatchCheckCtxt<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &Expr) {\n         check_expr(self, ex);\n     }\n     fn visit_local(&mut self, l: &Local) {\n         check_local(self, l);\n     }\n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n+                b: &'v Block, s: Span, _: NodeId) {\n         check_fn(self, fk, fd, b, s);\n     }\n }\n@@ -868,7 +869,7 @@ fn check_local(cx: &mut MatchCheckCtxt, loc: &Local) {\n }\n \n fn check_fn(cx: &mut MatchCheckCtxt,\n-            kind: &FnKind,\n+            kind: FnKind,\n             decl: &FnDecl,\n             body: &Block,\n             sp: Span) {\n@@ -1022,7 +1023,7 @@ struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> {\n     bindings_allowed: bool\n }\n \n-impl<'a, 'b, 'tcx> Visitor for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n     fn visit_pat(&mut self, pat: &Pat) {\n         if !self.bindings_allowed && pat_is_binding(&self.cx.tcx.def_map, pat) {\n             self.cx.tcx.sess.span_err(pat.span,"}, {"sha": "21023986e1c2e68705472ad870ac7d44d6008b6e", "filename": "src/librustc/middle/check_rvalues.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -30,11 +30,11 @@ struct RvalueContext<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>\n }\n \n-impl<'a, 'tcx> visit::Visitor for RvalueContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> visit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n     fn visit_fn(&mut self,\n-                _: &visit::FnKind,\n-                fd: &ast::FnDecl,\n-                b: &ast::Block,\n+                _: visit::FnKind<'v>,\n+                fd: &'v ast::FnDecl,\n+                b: &'v ast::Block,\n                 _: Span,\n                 _: ast::NodeId) {\n         let mut euv = euv::ExprUseVisitor::new(self, self.tcx);"}, {"sha": "46896b8811f00597ce4bb198b1a9ef7c5b77573b", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> CheckStaticVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for CheckStaticVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for CheckStaticVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         debug!(\"visit_item(item={})\", pprust::item_to_string(i));\n         match i.node {"}, {"sha": "23ab6f4585b1fb1f9408bf0231e19955f784ecd3", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -268,7 +268,7 @@ impl<'a, 'tcx> ConstEvalVisitor<'a, 'tcx> {\n \n }\n \n-impl<'a, 'tcx> Visitor for ConstEvalVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for ConstEvalVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, t: &Ty) {\n         match t.node {\n             TyFixedLengthVec(_, expr) => {"}, {"sha": "d39b560c6d5305ce3b638079fed68b87e1fb9299", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -173,7 +173,7 @@ fn build_nodeid_to_index(decl: Option<&ast::FnDecl>,\n         }\n         let mut formals = Formals { entry: entry, index: index };\n         visit::walk_fn_decl(&mut formals, decl);\n-        impl<'a> visit::Visitor for Formals<'a> {\n+        impl<'a, 'v> visit::Visitor<'v> for Formals<'a> {\n             fn visit_pat(&mut self, p: &ast::Pat) {\n                 self.index.insert(p.id, self.entry);\n                 visit::walk_pat(self, p)"}, {"sha": "68bcd950f9ce7207ecba2f97cfa47c2bca000ce5", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for MarkSymbolVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n \n     fn visit_struct_def(&mut self, def: &ast::StructDef, _: ast::Ident,\n                         _: &ast::Generics, _: ast::NodeId) {\n@@ -329,7 +329,7 @@ struct LifeSeeder {\n     worklist: Vec<ast::NodeId> ,\n }\n \n-impl Visitor for LifeSeeder {\n+impl<'v> Visitor<'v> for LifeSeeder {\n     fn visit_item(&mut self, item: &ast::Item) {\n         if has_allow_dead_code_or_lang_attr(item.attrs.as_slice()) {\n             self.worklist.push(item.id);\n@@ -349,11 +349,11 @@ impl Visitor for LifeSeeder {\n         visit::walk_item(self, item);\n     }\n \n-    fn visit_fn(&mut self, fk: &visit::FnKind,\n-                _: &ast::FnDecl, block: &ast::Block,\n+    fn visit_fn(&mut self, fk: visit::FnKind<'v>,\n+                _: &'v ast::FnDecl, block: &'v ast::Block,\n                 _: codemap::Span, id: ast::NodeId) {\n         // Check for method here because methods are not ast::Item\n-        match *fk {\n+        match fk {\n             visit::FkMethod(_, _, method) => {\n                 if has_allow_dead_code_or_lang_attr(method.attrs.as_slice()) {\n                     self.worklist.push(id);\n@@ -499,7 +499,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for DeadVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         let ctor_id = get_struct_ctor_id(item);\n         if !self.symbol_is_live(item.id, ctor_id) && should_warn(item) {\n@@ -515,15 +515,14 @@ impl<'a, 'tcx> Visitor for DeadVisitor<'a, 'tcx> {\n         visit::walk_foreign_item(self, fi);\n     }\n \n-    fn visit_fn(&mut self, fk: &visit::FnKind,\n-                _: &ast::FnDecl, block: &ast::Block,\n+    fn visit_fn(&mut self, fk: visit::FnKind<'v>,\n+                _: &'v ast::FnDecl, block: &'v ast::Block,\n                 span: codemap::Span, id: ast::NodeId) {\n         // Have to warn method here because methods are not ast::Item\n-        match *fk {\n-            visit::FkMethod(..) => {\n-                let ident = visit::name_of_fn(fk);\n+        match fk {\n+            visit::FkMethod(name, _, _) => {\n                 if !self.symbol_is_live(id, None) {\n-                    self.warn_dead_code(id, span, ident);\n+                    self.warn_dead_code(id, span, name);\n                 }\n             }\n             _ => ()"}, {"sha": "db9eb90b6ec02e0a40edcb568acc648267432c1a", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -86,11 +86,11 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for EffectCheckVisitor<'a, 'tcx> {\n-    fn visit_fn(&mut self, fn_kind: &visit::FnKind, fn_decl: &ast::FnDecl,\n-                block: &ast::Block, span: Span, _: ast::NodeId) {\n+impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n+    fn visit_fn(&mut self, fn_kind: visit::FnKind<'v>, fn_decl: &'v ast::FnDecl,\n+                block: &'v ast::Block, span: Span, _: ast::NodeId) {\n \n-        let (is_item_fn, is_unsafe_fn) = match *fn_kind {\n+        let (is_item_fn, is_unsafe_fn) = match fn_kind {\n             visit::FkItemFn(_, _, fn_style, _) =>\n                 (true, fn_style == ast::UnsafeFn),\n             visit::FkMethod(_, _, method) =>"}, {"sha": "2b96eb717ea860bad06a658f653f6a3fb415daaa", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -41,7 +41,7 @@ struct EntryContext<'a> {\n     non_main_fns: Vec<(NodeId, Span)> ,\n }\n \n-impl<'a> Visitor for EntryContext<'a> {\n+impl<'a, 'v> Visitor<'v> for EntryContext<'a> {\n     fn visit_item(&mut self, item: &Item) {\n         find_item(item, self);\n     }"}, {"sha": "5b7c72208ea7d181976aa2d0a0913c425352dbdf", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -53,7 +53,7 @@ struct CollectFreevarsVisitor<'a> {\n     depth: uint\n }\n \n-impl<'a> Visitor for CollectFreevarsVisitor<'a> {\n+impl<'a, 'v> Visitor<'v> for CollectFreevarsVisitor<'a> {\n     fn visit_item(&mut self, _: &ast::Item) {\n         // ignore_item\n     }\n@@ -144,9 +144,9 @@ struct AnnotateFreevarsVisitor<'a> {\n     capture_mode_map: CaptureModeMap,\n }\n \n-impl<'a> Visitor for AnnotateFreevarsVisitor<'a> {\n-    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,\n-                blk: &ast::Block, s: Span, nid: ast::NodeId) {\n+impl<'a, 'v> Visitor<'v> for AnnotateFreevarsVisitor<'a> {\n+    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n+                blk: &'v ast::Block, s: Span, nid: ast::NodeId) {\n         let vars = collect_freevars(self.def_map,\n                                     blk,\n                                     &mut self.capture_mode_map);"}, {"sha": "76ade1a7504eb69cf2d6cd31a20e28efee424883", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for IntrinsicCheckingVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &ast::Expr) {\n         match expr.node {\n             ast::ExprPath(..) => {"}, {"sha": "1e398ce210b57c928a881b9f73a38e3e6e6b4717", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -56,13 +56,13 @@ pub struct Context<'a, 'tcx: 'a> {\n     parameter_environments: Vec<ParameterEnvironment>,\n }\n \n-impl<'a, 'tcx> Visitor for Context<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &Expr) {\n         check_expr(self, ex);\n     }\n \n-    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &FnDecl,\n-                b: &Block, s: Span, n: NodeId) {\n+    fn visit_fn(&mut self, fk: visit::FnKind, fd: &'v FnDecl,\n+                b: &'v Block, s: Span, n: NodeId) {\n         check_fn(self, fk, fd, b, s, n);\n     }\n \n@@ -341,7 +341,7 @@ fn with_appropriate_checker(cx: &Context,\n // to the copy/move kind bounds. Then recursively check the function body.\n fn check_fn(\n     cx: &mut Context,\n-    fk: &visit::FnKind,\n+    fk: visit::FnKind,\n     decl: &FnDecl,\n     body: &Block,\n     sp: Span,\n@@ -356,7 +356,7 @@ fn check_fn(\n         });\n     });\n \n-    match *fk {\n+    match fk {\n         visit::FkFnBlock(..) => {\n             let ty = ty::node_id_to_type(cx.tcx, fn_id);\n             check_bounds_on_structs_or_enums_in_type_if_possible(cx, sp, ty);"}, {"sha": "24782240f06c4d3a58b30a24e11bfcf8188f4837", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -115,7 +115,7 @@ struct LanguageItemCollector<'a> {\n     item_refs: HashMap<&'static str, uint>,\n }\n \n-impl<'a> Visitor for LanguageItemCollector<'a> {\n+impl<'a, 'v> Visitor<'v> for LanguageItemCollector<'a> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         match extract(item.attrs.as_slice()) {\n             Some(value) => {"}, {"sha": "18f3de82280ef41a1278bf54df975f104817e8f5", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -179,8 +179,9 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, cx: &ty::ctxt) -> String {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for IrMaps<'a, 'tcx> {\n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, n: NodeId) {\n+impl<'a, 'tcx, 'v> Visitor<'v> for IrMaps<'a, 'tcx> {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n+                b: &'v Block, s: Span, n: NodeId) {\n         visit_fn(self, fk, fd, b, s, n);\n     }\n     fn visit_local(&mut self, l: &Local) { visit_local(self, l); }\n@@ -343,8 +344,8 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for Liveness<'a, 'tcx> {\n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, n: NodeId) {\n+impl<'a, 'tcx, 'v> Visitor<'v> for Liveness<'a, 'tcx> {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, n: NodeId) {\n         check_fn(self, fk, fd, b, s, n);\n     }\n     fn visit_local(&mut self, l: &Local) {\n@@ -359,7 +360,7 @@ impl<'a, 'tcx> Visitor for Liveness<'a, 'tcx> {\n }\n \n fn visit_fn(ir: &mut IrMaps,\n-            fk: &FnKind,\n+            fk: FnKind,\n             decl: &FnDecl,\n             body: &Block,\n             sp: Span,\n@@ -1462,7 +1463,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n }\n \n fn check_fn(_v: &Liveness,\n-            _fk: &FnKind,\n+            _fk: FnKind,\n             _decl: &FnDecl,\n             _body: &Block,\n             _sp: Span,\n@@ -1474,7 +1475,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn check_ret(&self,\n                  id: NodeId,\n                  sp: Span,\n-                 _fk: &FnKind,\n+                 _fk: FnKind,\n                  entry_ln: LiveNode,\n                  body: &Block) {\n         if self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {"}, {"sha": "da957024b9a2e70669eddcfe42e690b9754fa635", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -57,7 +57,7 @@ struct ParentVisitor {\n     curparent: ast::NodeId,\n }\n \n-impl Visitor for ParentVisitor {\n+impl<'v> Visitor<'v> for ParentVisitor {\n     fn visit_item(&mut self, item: &ast::Item) {\n         self.parents.insert(item.id, self.curparent);\n \n@@ -100,8 +100,8 @@ impl Visitor for ParentVisitor {\n         visit::walk_foreign_item(self, a);\n     }\n \n-    fn visit_fn(&mut self, a: &visit::FnKind, b: &ast::FnDecl,\n-                c: &ast::Block, d: Span, id: ast::NodeId) {\n+    fn visit_fn(&mut self, a: visit::FnKind<'v>, b: &'v ast::FnDecl,\n+                c: &'v ast::Block, d: Span, id: ast::NodeId) {\n         // We already took care of some trait methods above, otherwise things\n         // like impl methods and pub trait methods are parented to the\n         // containing module, not the containing trait.\n@@ -112,7 +112,7 @@ impl Visitor for ParentVisitor {\n     }\n \n     fn visit_struct_def(&mut self, s: &ast::StructDef, _: ast::Ident,\n-                        _: &ast::Generics, n: ast::NodeId) {\n+                        _: &'v ast::Generics, n: ast::NodeId) {\n         // Struct constructors are parented to their struct definitions because\n         // they essentially are the struct definitions.\n         match s.ctor_id {\n@@ -180,7 +180,7 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for EmbargoVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         let orig_all_pub = self.prev_public;\n         self.prev_public = orig_all_pub && item.vis == ast::Public;\n@@ -802,7 +802,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for PrivacyVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         let orig_curitem = replace(&mut self.curitem, item.id);\n         visit::walk_item(self, item);\n@@ -1036,7 +1036,7 @@ struct SanePrivacyVisitor<'a, 'tcx: 'a> {\n     in_fn: bool,\n }\n \n-impl<'a, 'tcx> Visitor for SanePrivacyVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for SanePrivacyVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         if self.in_fn {\n             self.check_all_inherited(item);\n@@ -1053,8 +1053,8 @@ impl<'a, 'tcx> Visitor for SanePrivacyVisitor<'a, 'tcx> {\n         self.in_fn = orig_in_fn;\n     }\n \n-    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,\n-                b: &ast::Block, s: Span, _: ast::NodeId) {\n+    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n+                b: &'v ast::Block, s: Span, _: ast::NodeId) {\n         // This catches both functions and methods\n         let orig_in_fn = replace(&mut self.in_fn, true);\n         visit::walk_fn(self, fk, fd, b, s);\n@@ -1264,7 +1264,7 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'tcx> Visitor for CheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx, 'v> Visitor<'v> for CheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n         match ty.node {\n             ast::TyPath(_, _, path_id) => {\n@@ -1287,7 +1287,7 @@ impl<'a, 'b, 'tcx> Visitor for CheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n     fn visit_expr(&mut self, _: &ast::Expr) {}\n }\n \n-impl<'a, 'tcx> Visitor for VisiblePrivateTypesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         match item.node {\n             // contents of a private mod can be reexported, so we need\n@@ -1434,8 +1434,8 @@ impl<'a, 'tcx> Visitor for VisiblePrivateTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,\n-                b: &ast::Block, s: Span, id: ast::NodeId) {\n+    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n+                b: &'v ast::Block, s: Span, id: ast::NodeId) {\n         // needs special handling for methods.\n         if self.exported_items.contains(&id) {\n             visit::walk_fn(self, fk, fd, b, s);"}, {"sha": "d7cf25e7410e696edfd597cdb2057f468fed32a8", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -101,7 +101,7 @@ struct ReachableContext<'a, 'tcx: 'a> {\n     any_library: bool,\n }\n \n-impl<'a, 'tcx> Visitor for ReachableContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &ast::Expr) {\n "}, {"sha": "45107d26f2f8998663ca2b21b9445d57f6fa269d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -796,7 +796,7 @@ fn resolve_item(visitor: &mut RegionResolutionVisitor, item: &ast::Item) {\n }\n \n fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n-              fk: &FnKind,\n+              fk: FnKind,\n               decl: &ast::FnDecl,\n               body: &ast::Block,\n               sp: Span,\n@@ -821,7 +821,7 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n \n     // The body of the fn itself is either a root scope (top-level fn)\n     // or it continues with the inherited scope (closures).\n-    match *fk {\n+    match fk {\n         visit::FkItemFn(..) | visit::FkMethod(..) => {\n             visitor.cx = Context { parent: None, var_parent: None };\n             visitor.visit_block(body);\n@@ -841,7 +841,7 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n     }\n }\n \n-impl<'a> Visitor for RegionResolutionVisitor<'a> {\n+impl<'a, 'v> Visitor<'v> for RegionResolutionVisitor<'a> {\n \n     fn visit_block(&mut self, b: &Block) {\n         resolve_block(self, b);\n@@ -851,8 +851,8 @@ impl<'a> Visitor for RegionResolutionVisitor<'a> {\n         resolve_item(self, i);\n     }\n \n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl,\n-                b: &Block, s: Span, n: NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n+                b: &'v Block, s: Span, n: NodeId) {\n         resolve_fn(self, fk, fd, b, s, n);\n     }\n     fn visit_arm(&mut self, a: &Arm) {"}, {"sha": "ca0000eb50512509cba76e19e5ab2804acba666e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -185,7 +185,7 @@ enum NameDefinition {\n     ImportNameDefinition(Def, LastPrivate) //< The name identifies an import.\n }\n \n-impl<'a> Visitor for Resolver<'a> {\n+impl<'a, 'v> Visitor<'v> for Resolver<'a> {\n     fn visit_item(&mut self, item: &Item) {\n         self.resolve_item(item);\n     }\n@@ -906,7 +906,7 @@ struct BuildReducedGraphVisitor<'a, 'b:'a> {\n     parent: ReducedGraphParent\n }\n \n-impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n+impl<'a, 'b, 'v> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b> {\n \n     fn visit_item(&mut self, item: &Item) {\n         let p = self.resolver.build_reduced_graph_for_item(item, self.parent.clone());\n@@ -945,7 +945,7 @@ struct UnusedImportCheckVisitor<'a, 'b:'a> {\n     resolver: &'a mut Resolver<'b>\n }\n \n-impl<'a, 'b> Visitor for UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b, 'v> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b> {\n     fn visit_view_item(&mut self, vi: &ViewItem) {\n         self.resolver.check_for_item_unused_imports(vi);\n         visit::walk_view_item(self, vi);\n@@ -4593,7 +4593,7 @@ impl<'a> Resolver<'a> {\n         // pat_idents are variants\n         self.check_consistent_bindings(arm);\n \n-        visit::walk_expr_opt(self, arm.guard);\n+        visit::walk_expr_opt(self, &arm.guard);\n         self.resolve_expr(&*arm.body);\n \n         self.value_ribs.borrow_mut().pop();"}, {"sha": "22acdca5f9bdb06f7e4e9403da21463232c9cdf5", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -84,7 +84,7 @@ pub fn krate(sess: &Session, krate: &ast::Crate) -> NamedRegionMap {\n     named_region_map\n }\n \n-impl<'a> Visitor for LifetimeContext<'a> {\n+impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         let lifetimes = match item.node {\n             ast::ItemFn(..) | // fn lifetimes get added in visit_fn below\n@@ -110,9 +110,9 @@ impl<'a> Visitor for LifetimeContext<'a> {\n         });\n     }\n \n-    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,\n-                b: &ast::Block, s: Span, n: ast::NodeId) {\n-        match *fk {\n+    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n+                b: &'v ast::Block, s: Span, n: ast::NodeId) {\n+        match fk {\n             visit::FkItemFn(_, generics, _, _) |\n             visit::FkMethod(_, generics, _) => {\n                 self.visit_fn_decl(n, generics, |v| visit::walk_fn(v, fk, fd, b, s))\n@@ -450,7 +450,7 @@ fn early_bound_lifetime_names(generics: &ast::Generics) -> Vec<ast::Name> {\n         late_bound: &'a mut Vec<ast::Name>,\n     }\n \n-    impl<'a> Visitor for FreeLifetimeCollector<'a> {\n+    impl<'a, 'v> Visitor<'v> for FreeLifetimeCollector<'a> {\n         fn visit_lifetime_ref(&mut self, lifetime_ref: &ast::Lifetime) {\n             shuffle(self.early_bound, self.late_bound,\n                     lifetime_ref.name);"}, {"sha": "1d4050c71b18ace1d04b6b77e1de1f913bc299a5", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -833,7 +833,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                           ex: &ast::Expr,\n                           path: &ast::Path,\n                           fields: &Vec<ast::Field>,\n-                          base: Option<Gc<ast::Expr>>) {\n+                          base: &Option<Gc<ast::Expr>>) {\n         if generated_code(path.span) {\n             return\n         }\n@@ -1018,8 +1018,8 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n     }\n }\n \n-impl<'l, 'tcx> Visitor for DxrVisitor<'l, 'tcx> {\n-    fn visit_item(&mut self, item:&ast::Item) {\n+impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n+    fn visit_item(&mut self, item: &ast::Item) {\n         if generated_code(item.span) {\n             return\n         }\n@@ -1082,16 +1082,16 @@ impl<'l, 'tcx> Visitor for DxrVisitor<'l, 'tcx> {\n     // We don't actually index functions here, that is done in visit_item/ItemFn.\n     // Here we just visit methods.\n     fn visit_fn(&mut self,\n-                fk: &visit::FnKind,\n-                fd: &ast::FnDecl,\n-                b: &ast::Block,\n+                fk: visit::FnKind<'v>,\n+                fd: &'v ast::FnDecl,\n+                b: &'v ast::Block,\n                 s: Span,\n                 _: NodeId) {\n         if generated_code(s) {\n             return;\n         }\n \n-        match *fk {\n+        match fk {\n             visit::FkMethod(_, _, method) => self.process_method(method),\n             _ => visit::walk_fn(self, fk, fd, b, s),\n         }\n@@ -1143,7 +1143,7 @@ impl<'l, 'tcx> Visitor for DxrVisitor<'l, 'tcx> {\n         }\n     }\n \n-    fn visit_view_item(&mut self, i:&ast::ViewItem) {\n+    fn visit_view_item(&mut self, i: &ast::ViewItem) {\n         if generated_code(i.span) {\n             return\n         }\n@@ -1275,7 +1275,7 @@ impl<'l, 'tcx> Visitor for DxrVisitor<'l, 'tcx> {\n                 visit::walk_expr(self, ex);\n             },\n             ast::ExprPath(ref path) => self.process_path(ex, path),\n-            ast::ExprStruct(ref path, ref fields, base) =>\n+            ast::ExprStruct(ref path, ref fields, ref base) =>\n                 self.process_struct_lit(ex, path, fields, base),\n             ast::ExprMethodCall(_, _, ref args) => self.process_method_call(ex, args),\n             ast::ExprField(sub_ex, ident, _) => {\n@@ -1410,19 +1410,19 @@ impl<'l, 'tcx> Visitor for DxrVisitor<'l, 'tcx> {\n             }\n         }\n         self.collected_paths.clear();\n-        visit::walk_expr_opt(self, arm.guard);\n+        visit::walk_expr_opt(self, &arm.guard);\n         self.visit_expr(&*arm.body);\n     }\n \n-    fn visit_stmt(&mut self, s:&ast::Stmt) {\n+    fn visit_stmt(&mut self, s: &ast::Stmt) {\n         if generated_code(s.span) {\n             return\n         }\n \n         visit::walk_stmt(self, s)\n     }\n \n-    fn visit_local(&mut self, l:&ast::Local) {\n+    fn visit_local(&mut self, l: &ast::Local) {\n         if generated_code(l.span) {\n             return\n         }\n@@ -1455,7 +1455,7 @@ impl<'l, 'tcx> Visitor for DxrVisitor<'l, 'tcx> {\n \n         // Just walk the initialiser and type (don't want to walk the pattern again).\n         self.visit_ty(&*l.ty);\n-        visit::walk_expr_opt(self, l.init);\n+        visit::walk_expr_opt(self, &l.init);\n     }\n }\n "}, {"sha": "eb736ae8a76661feebfc2fa93c444eafa1702c48", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -59,13 +59,14 @@ impl Annotator {\n     }\n }\n \n-impl Visitor for Annotator {\n+impl<'v> Visitor<'v> for Annotator {\n     fn visit_item(&mut self, i: &Item) {\n         self.annotate(i.id, &i.attrs, |v| visit::walk_item(v, i));\n     }\n \n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId) {\n-        match *fk {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n+                b: &'v Block, s: Span, _: NodeId) {\n+        match fk {\n             FkMethod(_, _, meth) => {\n                 self.annotate(meth.id, &meth.attrs, |v| visit::walk_fn(v, fk, fd, b, s));\n             }\n@@ -85,7 +86,7 @@ impl Visitor for Annotator {\n         self.annotate(id, attrs, |v| visit::walk_trait_item(v, t));\n     }\n \n-    fn visit_variant(&mut self, var: &Variant, g: &Generics) {\n+    fn visit_variant(&mut self, var: &Variant, g: &'v Generics) {\n         self.annotate(var.node.id, &var.node.attrs, |v| visit::walk_variant(v, var, g))\n     }\n "}, {"sha": "c023b7a9534932c1ecdbcb5819e1f29070e04731", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -1335,7 +1335,7 @@ impl CheckForNestedReturnsVisitor {\n     }\n }\n \n-impl Visitor for CheckForNestedReturnsVisitor {\n+impl<'v> Visitor<'v> for CheckForNestedReturnsVisitor {\n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n             ast::ExprRet(..) => {\n@@ -1360,7 +1360,7 @@ fn has_nested_returns(tcx: &ty::ctxt, id: ast::NodeId) -> bool {\n                     let mut explicit = CheckForNestedReturnsVisitor::explicit();\n                     let mut implicit = CheckForNestedReturnsVisitor::implicit();\n                     visit::walk_item(&mut explicit, &*i);\n-                    visit::walk_expr_opt(&mut implicit, blk.expr);\n+                    visit::walk_expr_opt(&mut implicit, &blk.expr);\n                     explicit.found || implicit.found\n                 }\n                 _ => tcx.sess.bug(\"unexpected item variant in has_nested_returns\")\n@@ -1374,7 +1374,7 @@ fn has_nested_returns(tcx: &ty::ctxt, id: ast::NodeId) -> bool {\n                             let mut explicit = CheckForNestedReturnsVisitor::explicit();\n                             let mut implicit = CheckForNestedReturnsVisitor::implicit();\n                             visit::walk_method_helper(&mut explicit, &*m);\n-                            visit::walk_expr_opt(&mut implicit, blk.expr);\n+                            visit::walk_expr_opt(&mut implicit, &blk.expr);\n                             explicit.found || implicit.found\n                         }\n                         ast::MethMac(_) => tcx.sess.bug(\"unexpanded macro\")\n@@ -1394,7 +1394,7 @@ fn has_nested_returns(tcx: &ty::ctxt, id: ast::NodeId) -> bool {\n                             let mut explicit = CheckForNestedReturnsVisitor::explicit();\n                             let mut implicit = CheckForNestedReturnsVisitor::implicit();\n                             visit::walk_method_helper(&mut explicit, &**m);\n-                            visit::walk_expr_opt(&mut implicit, blk.expr);\n+                            visit::walk_expr_opt(&mut implicit, &blk.expr);\n                             explicit.found || implicit.found\n                         }\n                         ast::MethMac(_) => tcx.sess.bug(\"unexpanded macro\")\n@@ -1410,7 +1410,7 @@ fn has_nested_returns(tcx: &ty::ctxt, id: ast::NodeId) -> bool {\n                     let mut explicit = CheckForNestedReturnsVisitor::explicit();\n                     let mut implicit = CheckForNestedReturnsVisitor::implicit();\n                     visit::walk_expr(&mut explicit, &*e);\n-                    visit::walk_expr_opt(&mut implicit, blk.expr);\n+                    visit::walk_expr_opt(&mut implicit, &blk.expr);\n                     explicit.found || implicit.found\n                 }\n                 _ => tcx.sess.bug(\"unexpected expr variant in has_nested_returns\")\n@@ -2141,7 +2141,7 @@ pub struct TransItemVisitor<'a, 'tcx: 'a> {\n     pub ccx: &'a CrateContext<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> Visitor for TransItemVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for TransItemVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         trans_item(self.ccx, i);\n     }"}, {"sha": "47a4b6f86229e13709387876c0b88f1f5e316673", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -375,15 +375,15 @@ fn static_inherited_fields<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>)\n struct CheckItemTypesVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n struct CheckTypeWellFormedVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n \n-impl<'a, 'tcx> Visitor for CheckTypeWellFormedVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         check_type_well_formed(self.ccx, i);\n         visit::walk_item(self, i);\n     }\n }\n \n \n-impl<'a, 'tcx> Visitor for CheckItemTypesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for CheckItemTypesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         check_item(self.ccx, i);\n         visit::walk_item(self, i);\n@@ -394,7 +394,7 @@ struct CheckItemSizedTypesVisitor<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>\n }\n \n-impl<'a, 'tcx> Visitor for CheckItemSizedTypesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for CheckItemSizedTypesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         check_item_sized(self.ccx, i);\n         visit::walk_item(self, i);\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for GatherLocalsVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for GatherLocalsVisitor<'a, 'tcx> {\n     // Add explicitly-declared locals.\n     fn visit_local(&mut self, local: &ast::Local) {\n         let o_ty = match local.ty.node {\n@@ -516,8 +516,8 @@ impl<'a, 'tcx> Visitor for GatherLocalsVisitor<'a, 'tcx> {\n     }\n \n     // Don't descend into fns and items\n-    fn visit_fn(&mut self, _: &visit::FnKind, _: &ast::FnDecl,\n-                _: &ast::Block, _: Span, _: ast::NodeId) { }\n+    fn visit_fn(&mut self, _: visit::FnKind<'v>, _: &'v ast::FnDecl,\n+                _: &'v ast::Block, _: Span, _: ast::NodeId) { }\n     fn visit_item(&mut self, _: &ast::Item) { }\n \n }"}, {"sha": "8cd8a6aa051c98268f77de3012b6421a1bb6c181", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -479,7 +479,7 @@ impl<'fcx, 'tcx> mc::Typer<'tcx> for Rcx<'fcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for Rcx<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for Rcx<'a, 'tcx> {\n     // (..) FIXME(#3238) should use visit_pat, not visit_arm/visit_local,\n     // However, right now we run into an issue whereby some free\n     // regions are not properly related if they appear within the\n@@ -488,8 +488,8 @@ impl<'a, 'tcx> Visitor for Rcx<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    fn visit_fn(&mut self, _fk: &visit::FnKind, _fd: &ast::FnDecl,\n-                b: &ast::Block, _s: Span, id: ast::NodeId) {\n+    fn visit_fn(&mut self, _fk: visit::FnKind<'v>, _fd: &'v ast::FnDecl,\n+                b: &'v ast::Block, _s: Span, id: ast::NodeId) {\n         self.visit_fn_body(id, b)\n     }\n "}, {"sha": "9a70cf574fc4d942ecae922180f0eb7a0fa79aef", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -1025,7 +1025,7 @@ pub fn trans_resolve_method(tcx: &ty::ctxt, id: ast::NodeId,\n                    false)\n }\n \n-impl<'a, 'b, 'tcx> visit::Visitor for &'a FnCtxt<'b, 'tcx> {\n+impl<'a, 'b, 'tcx, 'v> Visitor<'v> for &'a FnCtxt<'b, 'tcx> {\n     fn visit_expr(&mut self, ex: &ast::Expr) {\n         early_resolve_expr(ex, *self, false);\n         visit::walk_expr(self, ex);"}, {"sha": "4716ffe700b502db96ebd69284aaa8c2ee42b557", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -106,7 +106,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // below. In general, a function is made into a `visitor` if it must\n // traffic in node-ids or update tables in the type context etc.\n \n-impl<'cx, 'tcx> Visitor for WritebackCx<'cx, 'tcx> {\n+impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n     fn visit_item(&mut self, _: &ast::Item) {\n         // Ignore items\n     }\n@@ -120,7 +120,7 @@ impl<'cx, 'tcx> Visitor for WritebackCx<'cx, 'tcx> {\n         visit::walk_stmt(self, s);\n     }\n \n-    fn visit_expr(&mut self, e:&ast::Expr) {\n+    fn visit_expr(&mut self, e: &ast::Expr) {\n         if self.fcx.writeback_errors.get() {\n             return;\n         }"}, {"sha": "ff3372b307260945951ee5696ff68c8290f964c3", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -191,7 +191,7 @@ struct CoherenceCheckVisitor<'a, 'tcx: 'a> {\n     cc: &'a CoherenceChecker<'a, 'tcx>\n }\n \n-impl<'a, 'tcx> visit::Visitor for CoherenceCheckVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> visit::Visitor<'v> for CoherenceCheckVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n \n         //debug!(\"(checking coherence) item '{}'\", token::get_ident(item.ident));\n@@ -218,7 +218,7 @@ struct PrivilegedScopeVisitor<'a, 'tcx: 'a> {\n     cc: &'a CoherenceChecker<'a, 'tcx>\n }\n \n-impl<'a, 'tcx> visit::Visitor for PrivilegedScopeVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> visit::Visitor<'v> for PrivilegedScopeVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n \n         match item.node {"}, {"sha": "20e76b01317b8dccd5116982e2253a982668c609", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -99,7 +99,7 @@ struct CollectTraitDefVisitor<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>\n }\n \n-impl<'a, 'tcx> visit::Visitor for CollectTraitDefVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> visit::Visitor<'v> for CollectTraitDefVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         match i.node {\n             ast::ItemTrait(..) => {\n@@ -120,7 +120,7 @@ struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>\n }\n \n-impl<'a, 'tcx> visit::Visitor for CollectItemTypesVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> visit::Visitor<'v> for CollectItemTypesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         convert(self.ccx, i);\n         visit::walk_item(self, i);"}, {"sha": "9526e5d3eb5b5b82b735b2a6a1675bf670829a68", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -337,7 +337,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor for TermsContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         debug!(\"add_inferreds for item {}\", item.repr(self.tcx));\n \n@@ -477,7 +477,7 @@ fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n     constraint_cx\n }\n \n-impl<'a, 'tcx> Visitor for ConstraintContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         let did = ast_util::local_def(item.id);\n         let tcx = self.terms_cx.tcx;"}, {"sha": "81099da3fac0561f838e3e8138b8454de48728e3", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -105,7 +105,7 @@ impl<'a> Context<'a> {\n     }\n }\n \n-impl<'a> Visitor for Context<'a> {\n+impl<'a, 'v> Visitor<'v> for Context<'a> {\n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n         match lang_items::extract(i.attrs.as_slice()) {\n             None => {}"}, {"sha": "457fcb861e6de58e3b4cab91ad8348059da31023", "filename": "src/librustc/plugin/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fplugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fplugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fbuild.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -21,7 +21,7 @@ struct RegistrarFinder {\n     registrars: Vec<(ast::NodeId, Span)> ,\n }\n \n-impl Visitor for RegistrarFinder {\n+impl<'v> Visitor<'v> for RegistrarFinder {\n     fn visit_item(&mut self, item: &ast::Item) {\n         match item.node {\n             ast::ItemFn(..) => {"}, {"sha": "ecbe3409139f7649738233ad8e68abe93764ae3b", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -87,7 +87,7 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n }\n \n // note that macros aren't expanded yet, and therefore macros can't add plugins.\n-impl<'a> Visitor for PluginLoader<'a> {\n+impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n     fn visit_view_item(&mut self, vi: &ast::ViewItem) {\n         match vi.node {\n             ast::ViewItemExternCrate(name, _, _) => {"}, {"sha": "b3ac44a3574d95079d66cab5c5d8610726ae2e64", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -62,7 +62,7 @@ struct LoopQueryVisitor<'a> {\n     flag: bool,\n }\n \n-impl<'a> Visitor for LoopQueryVisitor<'a> {\n+impl<'a, 'v> Visitor<'v> for LoopQueryVisitor<'a> {\n     fn visit_expr(&mut self, e: &ast::Expr) {\n         self.flag |= (self.p)(&e.node);\n         match e.node {\n@@ -90,7 +90,7 @@ struct BlockQueryVisitor<'a> {\n     flag: bool,\n }\n \n-impl<'a> Visitor for BlockQueryVisitor<'a> {\n+impl<'a, 'v> Visitor<'v> for BlockQueryVisitor<'a> {\n     fn visit_expr(&mut self, e: &ast::Expr) {\n         self.flag |= (self.p)(e);\n         visit::walk_expr(self, e)"}, {"sha": "c3d9edecc6e2bb1045c890c79720133288283243", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -322,7 +322,7 @@ mod svh_visitor {\n     }\n     fn content<K:InternKey>(k: K) -> token::InternedString { k.get_content() }\n \n-    impl<'a> Visitor for StrictVersionHashVisitor<'a> {\n+    impl<'a, 'v> Visitor<'v> for StrictVersionHashVisitor<'a> {\n \n         fn visit_mac(&mut self, macro: &Mac) {\n             // macro invocations, namely macro_rules definitions,\n@@ -469,7 +469,8 @@ mod svh_visitor {\n             SawGenerics.hash(self.st); visit::walk_generics(self, g)\n         }\n \n-        fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId) {\n+        fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n+                    b: &'v Block, s: Span, _: NodeId) {\n             SawFn.hash(self.st); visit::walk_fn(self, fk, fd, b, s)\n         }\n "}, {"sha": "ff733673bd26263220446459c2bd33c06e5ab60d", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -366,7 +366,7 @@ impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {\n     }\n }\n \n-impl<'a, O: IdVisitingOperation> Visitor for IdVisitor<'a, O> {\n+impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n     fn visit_mod(&mut self,\n                  module: &Mod,\n                  _: Span,\n@@ -475,13 +475,13 @@ impl<'a, O: IdVisitingOperation> Visitor for IdVisitor<'a, O> {\n     }\n \n     fn visit_fn(&mut self,\n-                function_kind: &visit::FnKind,\n-                function_declaration: &FnDecl,\n-                block: &Block,\n+                function_kind: visit::FnKind<'v>,\n+                function_declaration: &'v FnDecl,\n+                block: &'v Block,\n                 span: Span,\n                 node_id: NodeId) {\n         if !self.pass_through_items {\n-            match *function_kind {\n+            match function_kind {\n                 visit::FkMethod(..) if self.visited_outermost => return,\n                 visit::FkMethod(..) => self.visited_outermost = true,\n                 _ => {}\n@@ -490,7 +490,7 @@ impl<'a, O: IdVisitingOperation> Visitor for IdVisitor<'a, O> {\n \n         self.operation.visit_id(node_id);\n \n-        match *function_kind {\n+        match function_kind {\n             visit::FkItemFn(_, generics, _, _) |\n             visit::FkMethod(_, generics, _) => {\n                 self.visit_generics_helper(generics)\n@@ -509,7 +509,7 @@ impl<'a, O: IdVisitingOperation> Visitor for IdVisitor<'a, O> {\n                         span);\n \n         if !self.pass_through_items {\n-            match *function_kind {\n+            match function_kind {\n                 visit::FkMethod(..) => self.visited_outermost = false,\n                 _ => {}\n             }\n@@ -571,7 +571,7 @@ pub fn compute_id_range_for_inlined_item(item: &InlinedItem) -> IdRange {\n     visitor.result.get()\n }\n \n-pub fn compute_id_range_for_fn_body(fk: &visit::FnKind,\n+pub fn compute_id_range_for_fn_body(fk: visit::FnKind,\n                                     decl: &FnDecl,\n                                     body: &Block,\n                                     sp: Span,\n@@ -639,7 +639,7 @@ struct EachViewItemData<'a> {\n     callback: |&ast::ViewItem|: 'a -> bool,\n }\n \n-impl<'a> Visitor for EachViewItemData<'a> {\n+impl<'a, 'v> Visitor<'v> for EachViewItemData<'a> {\n     fn visit_view_item(&mut self, view_item: &ast::ViewItem) {\n         let _ = (self.callback)(view_item);\n     }"}, {"sha": "8b10c26c43cef9f01ad55d18aa37bbc414e5b346", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -651,7 +651,7 @@ struct PatIdentFinder {\n     ident_accumulator: Vec<ast::Ident>\n }\n \n-impl Visitor for PatIdentFinder {\n+impl<'v> Visitor<'v> for PatIdentFinder {\n     fn visit_pat(&mut self, pattern: &ast::Pat) {\n         match *pattern {\n             ast::Pat { id: _, node: ast::PatIdent(_, ref path1, ref inner), span: _ } => {\n@@ -1107,7 +1107,7 @@ struct MacroExterminator<'a>{\n     sess: &'a parse::ParseSess\n }\n \n-impl<'a> Visitor for MacroExterminator<'a> {\n+impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> {\n     fn visit_mac(&mut self, macro: &ast::Mac) {\n         self.sess.span_diagnostic.span_bug(macro.span,\n                                            \"macro exterminator: expected AST \\\n@@ -1144,7 +1144,7 @@ mod test {\n         path_accumulator: Vec<ast::Path> ,\n     }\n \n-    impl Visitor for PathExprFinderContext {\n+    impl<'v> Visitor<'v> for PathExprFinderContext {\n         fn visit_expr(&mut self, expr: &ast::Expr) {\n             match expr.node {\n                 ast::ExprPath(ref p) => {\n@@ -1169,7 +1169,7 @@ mod test {\n         ident_accumulator: Vec<ast::Ident>\n     }\n \n-    impl Visitor for IdentFinder {\n+    impl<'v> Visitor<'v> for IdentFinder {\n         fn visit_ident(&mut self, _: codemap::Span, id: ast::Ident){\n             self.ident_accumulator.push(id);\n         }"}, {"sha": "2a989e6d63a2349a3ef51bef68346d999806181d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 117, "deletions": 134, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7ef6ff06696c29dc956b17b9a5c57713b0c8e0cb", "patch": "@@ -26,9 +26,7 @@\n use abi::Abi;\n use ast::*;\n use ast;\n-use ast_util;\n use codemap::Span;\n-use parse;\n use owned_slice::OwnedSlice;\n \n use std::gc::Gc;\n@@ -45,23 +43,6 @@ pub enum FnKind<'a> {\n     FkFnBlock,\n }\n \n-pub fn name_of_fn(fk: &FnKind) -> Ident {\n-    match *fk {\n-        FkItemFn(name, _, _, _) | FkMethod(name, _, _) => name,\n-        FkFnBlock(..) => parse::token::special_idents::invalid\n-    }\n-}\n-\n-pub fn generics_of_fn(fk: &FnKind) -> Generics {\n-    match *fk {\n-        FkItemFn(_, generics, _, _) |\n-        FkMethod(_, generics, _) => {\n-            (*generics).clone()\n-        }\n-        FkFnBlock(..) => ast_util::empty_generics(),\n-    }\n-}\n-\n /// Each method of the Visitor trait is a hook to be potentially\n /// overridden.  Each method's default implementation recursively visits\n /// the substructure of the input via the corresponding `walk` method;\n@@ -71,38 +52,38 @@ pub fn generics_of_fn(fk: &FnKind) -> Generics {\n /// explicitly, you need to override each method.  (And you also need\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n-pub trait Visitor {\n+pub trait Visitor<'v> {\n \n     fn visit_ident(&mut self, _sp: Span, _ident: Ident) {\n         /*! Visit the idents */\n     }\n-    fn visit_mod(&mut self, m: &Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n-    fn visit_view_item(&mut self, i: &ViewItem) { walk_view_item(self, i) }\n-    fn visit_foreign_item(&mut self, i: &ForeignItem) { walk_foreign_item(self, i) }\n-    fn visit_item(&mut self, i: &Item) { walk_item(self, i) }\n-    fn visit_local(&mut self, l: &Local) { walk_local(self, l) }\n-    fn visit_block(&mut self, b: &Block) { walk_block(self, b) }\n-    fn visit_stmt(&mut self, s: &Stmt) { walk_stmt(self, s) }\n-    fn visit_arm(&mut self, a: &Arm) { walk_arm(self, a) }\n-    fn visit_pat(&mut self, p: &Pat) { walk_pat(self, p) }\n-    fn visit_decl(&mut self, d: &Decl) { walk_decl(self, d) }\n-    fn visit_expr(&mut self, ex: &Expr) { walk_expr(self, ex) }\n-    fn visit_expr_post(&mut self, _ex: &Expr) { }\n-    fn visit_ty(&mut self, t: &Ty) { walk_ty(self, t) }\n-    fn visit_generics(&mut self, g: &Generics) { walk_generics(self, g) }\n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId) {\n+    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n+    fn visit_view_item(&mut self, i: &'v ViewItem) { walk_view_item(self, i) }\n+    fn visit_foreign_item(&mut self, i: &'v ForeignItem) { walk_foreign_item(self, i) }\n+    fn visit_item(&mut self, i: &'v Item) { walk_item(self, i) }\n+    fn visit_local(&mut self, l: &'v Local) { walk_local(self, l) }\n+    fn visit_block(&mut self, b: &'v Block) { walk_block(self, b) }\n+    fn visit_stmt(&mut self, s: &'v Stmt) { walk_stmt(self, s) }\n+    fn visit_arm(&mut self, a: &'v Arm) { walk_arm(self, a) }\n+    fn visit_pat(&mut self, p: &'v Pat) { walk_pat(self, p) }\n+    fn visit_decl(&mut self, d: &'v Decl) { walk_decl(self, d) }\n+    fn visit_expr(&mut self, ex: &'v Expr) { walk_expr(self, ex) }\n+    fn visit_expr_post(&mut self, _ex: &'v Expr) { }\n+    fn visit_ty(&mut self, t: &'v Ty) { walk_ty(self, t) }\n+    fn visit_generics(&mut self, g: &'v Generics) { walk_generics(self, g) }\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) {\n         walk_fn(self, fk, fd, b, s)\n     }\n-    fn visit_ty_method(&mut self, t: &TypeMethod) { walk_ty_method(self, t) }\n-    fn visit_trait_item(&mut self, t: &TraitItem) { walk_trait_item(self, t) }\n-    fn visit_struct_def(&mut self, s: &StructDef, _: Ident, _: &Generics, _: NodeId) {\n+    fn visit_ty_method(&mut self, t: &'v TypeMethod) { walk_ty_method(self, t) }\n+    fn visit_trait_item(&mut self, t: &'v TraitItem) { walk_trait_item(self, t) }\n+    fn visit_struct_def(&mut self, s: &'v StructDef, _: Ident, _: &'v Generics, _: NodeId) {\n         walk_struct_def(self, s)\n     }\n-    fn visit_struct_field(&mut self, s: &StructField) { walk_struct_field(self, s) }\n-    fn visit_variant(&mut self, v: &Variant, g: &Generics) { walk_variant(self, v, g) }\n+    fn visit_struct_field(&mut self, s: &'v StructField) { walk_struct_field(self, s) }\n+    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics) { walk_variant(self, v, g) }\n     fn visit_opt_lifetime_ref(&mut self,\n                               _span: Span,\n-                              opt_lifetime: &Option<Lifetime>) {\n+                              opt_lifetime: &'v Option<Lifetime>) {\n         /*!\n          * Visits an optional reference to a lifetime. The `span` is\n          * the span of some surrounding reference should opt_lifetime\n@@ -113,55 +94,55 @@ pub trait Visitor {\n             None => ()\n         }\n     }\n-    fn visit_lifetime_ref(&mut self, _lifetime: &Lifetime) {\n+    fn visit_lifetime_ref(&mut self, _lifetime: &'v Lifetime) {\n         /*! Visits a reference to a lifetime */\n     }\n-    fn visit_lifetime_decl(&mut self, _lifetime: &LifetimeDef) {\n+    fn visit_lifetime_decl(&mut self, _lifetime: &'v LifetimeDef) {\n         /*! Visits a declaration of a lifetime */\n     }\n-    fn visit_explicit_self(&mut self, es: &ExplicitSelf) {\n+    fn visit_explicit_self(&mut self, es: &'v ExplicitSelf) {\n         walk_explicit_self(self, es)\n     }\n-    fn visit_mac(&mut self, _macro: &Mac) {\n+    fn visit_mac(&mut self, _macro: &'v Mac) {\n         fail!(\"visit_mac disabled by default\");\n         // NB: see note about macros above.\n         // if you really want a visitor that\n         // works on macros, use this\n         // definition in your trait impl:\n         // visit::walk_mac(self, _macro)\n     }\n-    fn visit_path(&mut self, path: &Path, _id: ast::NodeId) {\n+    fn visit_path(&mut self, path: &'v Path, _id: ast::NodeId) {\n         walk_path(self, path)\n     }\n-    fn visit_attribute(&mut self, _attr: &Attribute) {}\n+    fn visit_attribute(&mut self, _attr: &'v Attribute) {}\n }\n \n-pub fn walk_inlined_item<V: Visitor>(visitor: &mut V, item: &ast::InlinedItem) {\n+pub fn walk_inlined_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v InlinedItem) {\n     match *item {\n-        IIItem(i) => visitor.visit_item(&*i),\n-        IIForeign(i) => visitor.visit_foreign_item(&*i),\n-        IITraitItem(_, iti) => {\n-            match iti {\n-                ProvidedInlinedTraitItem(m) => {\n-                    walk_method_helper(visitor, &*m)\n+        IIItem(ref i) => visitor.visit_item(&**i),\n+        IIForeign(ref i) => visitor.visit_foreign_item(&**i),\n+        IITraitItem(_, ref iti) => {\n+            match *iti {\n+                ProvidedInlinedTraitItem(ref m) => {\n+                    walk_method_helper(visitor, &**m)\n                 }\n-                RequiredInlinedTraitItem(m) => {\n-                    walk_method_helper(visitor, &*m)\n+                RequiredInlinedTraitItem(ref m) => {\n+                    walk_method_helper(visitor, &**m)\n                 }\n             }\n         }\n     }\n }\n \n \n-pub fn walk_crate<V: Visitor>(visitor: &mut V, krate: &Crate) {\n+pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) {\n     visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID);\n     for attr in krate.attrs.iter() {\n         visitor.visit_attribute(attr);\n     }\n }\n \n-pub fn walk_mod<V: Visitor>(visitor: &mut V, module: &Mod) {\n+pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod) {\n     for view_item in module.view_items.iter() {\n         visitor.visit_view_item(view_item)\n     }\n@@ -171,7 +152,7 @@ pub fn walk_mod<V: Visitor>(visitor: &mut V, module: &Mod) {\n     }\n }\n \n-pub fn walk_view_item<V: Visitor>(visitor: &mut V, vi: &ViewItem) {\n+pub fn walk_view_item<'v, V: Visitor<'v>>(visitor: &mut V, vi: &'v ViewItem) {\n     match vi.node {\n         ViewItemExternCrate(name, _, _) => {\n             visitor.visit_ident(vi.span, name)\n@@ -204,16 +185,14 @@ pub fn walk_view_item<V: Visitor>(visitor: &mut V, vi: &ViewItem) {\n     }\n }\n \n-pub fn walk_local<V: Visitor>(visitor: &mut V, local: &Local) {\n+pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n     visitor.visit_pat(&*local.pat);\n     visitor.visit_ty(&*local.ty);\n-    match local.init {\n-        None => {}\n-        Some(initializer) => visitor.visit_expr(&*initializer),\n-    }\n+    walk_expr_opt(visitor, &local.init);\n }\n \n-pub fn walk_explicit_self<V: Visitor>(visitor: &mut V, explicit_self: &ExplicitSelf) {\n+pub fn walk_explicit_self<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                              explicit_self: &'v ExplicitSelf) {\n     match explicit_self.node {\n         SelfStatic | SelfValue(_) => {},\n         SelfRegion(ref lifetime, _, _) => {\n@@ -225,21 +204,21 @@ pub fn walk_explicit_self<V: Visitor>(visitor: &mut V, explicit_self: &ExplicitS\n \n /// Like with walk_method_helper this doesn't correspond to a method\n /// in Visitor, and so it gets a _helper suffix.\n-pub fn walk_trait_ref_helper<V: Visitor>(visitor: &mut V, trait_ref: &TraitRef) {\n+pub fn walk_trait_ref_helper<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v TraitRef) {\n     visitor.visit_path(&trait_ref.path, trait_ref.ref_id)\n }\n \n-pub fn walk_item<V: Visitor>(visitor: &mut V, item: &Item) {\n+pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n     visitor.visit_ident(item.span, item.ident);\n     match item.node {\n         ItemStatic(ref typ, _, ref expr) => {\n             visitor.visit_ty(&**typ);\n             visitor.visit_expr(&**expr);\n         }\n-        ItemFn(declaration, fn_style, abi, ref generics, body) => {\n-            visitor.visit_fn(&FkItemFn(item.ident, generics, fn_style, abi),\n-                             &*declaration,\n-                             &*body,\n+        ItemFn(ref declaration, fn_style, abi, ref generics, ref body) => {\n+            visitor.visit_fn(FkItemFn(item.ident, generics, fn_style, abi),\n+                             &**declaration,\n+                             &**body,\n                              item.span,\n                              item.id)\n         }\n@@ -264,19 +243,19 @@ pub fn walk_item<V: Visitor>(visitor: &mut V, item: &Item) {\n         }\n         ItemImpl(ref type_parameters,\n                  ref trait_reference,\n-                 typ,\n+                 ref typ,\n                  ref impl_items) => {\n             visitor.visit_generics(type_parameters);\n             match *trait_reference {\n                 Some(ref trait_reference) => walk_trait_ref_helper(visitor,\n                                                                    trait_reference),\n                 None => ()\n             }\n-            visitor.visit_ty(&*typ);\n+            visitor.visit_ty(&**typ);\n             for impl_item in impl_items.iter() {\n                 match *impl_item {\n-                    MethodImplItem(method) => {\n-                        walk_method_helper(visitor, &*method)\n+                    MethodImplItem(ref method) => {\n+                        walk_method_helper(visitor, &**method)\n                     }\n                 }\n             }\n@@ -302,17 +281,17 @@ pub fn walk_item<V: Visitor>(visitor: &mut V, item: &Item) {\n     }\n }\n \n-pub fn walk_enum_def<V: Visitor>(visitor: &mut V,\n-                                 enum_definition: &EnumDef,\n-                                 generics: &Generics) {\n-    for &variant in enum_definition.variants.iter() {\n-        visitor.visit_variant(&*variant, generics);\n+pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                         enum_definition: &'v EnumDef,\n+                                         generics: &'v Generics) {\n+    for variant in enum_definition.variants.iter() {\n+        visitor.visit_variant(&**variant, generics);\n     }\n }\n \n-pub fn walk_variant<V: Visitor>(visitor: &mut V,\n-                                variant: &Variant,\n-                                generics: &Generics) {\n+pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                        variant: &'v Variant,\n+                                        generics: &'v Generics) {\n     visitor.visit_ident(variant.span, variant.node.name);\n \n     match variant.node.kind {\n@@ -337,14 +316,14 @@ pub fn walk_variant<V: Visitor>(visitor: &mut V,\n     }\n }\n \n-pub fn skip_ty<V: Visitor>(_: &mut V, _: &Ty) {\n+pub fn skip_ty<'v, V: Visitor<'v>>(_: &mut V, _: &'v Ty) {\n     // Empty!\n }\n \n-pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n+pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     match typ.node {\n-        TyUniq(ty) | TyVec(ty) | TyBox(ty) | TyParen(ty) => {\n-            visitor.visit_ty(&*ty)\n+        TyUniq(ref ty) | TyVec(ref ty) | TyBox(ref ty) | TyParen(ref ty) => {\n+            visitor.visit_ty(&**ty)\n         }\n         TyPtr(ref mutable_type) => {\n             visitor.visit_ty(&*mutable_type.ty)\n@@ -354,8 +333,8 @@ pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n             visitor.visit_ty(&*mutable_type.ty)\n         }\n         TyTup(ref tuple_element_types) => {\n-            for &tuple_element_type in tuple_element_types.iter() {\n-                visitor.visit_ty(&*tuple_element_type)\n+            for tuple_element_type in tuple_element_types.iter() {\n+                visitor.visit_ty(&**tuple_element_type)\n             }\n         }\n         TyClosure(ref function_declaration) => {\n@@ -407,13 +386,14 @@ pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n     }\n }\n \n-fn walk_lifetime_decls<V: Visitor>(visitor: &mut V, lifetimes: &Vec<LifetimeDef>) {\n+fn walk_lifetime_decls<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                           lifetimes: &'v Vec<LifetimeDef>) {\n     for l in lifetimes.iter() {\n         visitor.visit_lifetime_decl(l);\n     }\n }\n \n-pub fn walk_path<V: Visitor>(visitor: &mut V, path: &Path) {\n+pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n     for segment in path.segments.iter() {\n         visitor.visit_ident(path.span, segment.identifier);\n \n@@ -426,7 +406,7 @@ pub fn walk_path<V: Visitor>(visitor: &mut V, path: &Path) {\n     }\n }\n \n-pub fn walk_pat<V: Visitor>(visitor: &mut V, pattern: &Pat) {\n+pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n     match pattern.node {\n         PatEnum(ref path, ref children) => {\n             visitor.visit_path(path, pattern.id);\n@@ -479,7 +459,8 @@ pub fn walk_pat<V: Visitor>(visitor: &mut V, pattern: &Pat) {\n     }\n }\n \n-pub fn walk_foreign_item<V: Visitor>(visitor: &mut V, foreign_item: &ForeignItem) {\n+pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                             foreign_item: &'v ForeignItem) {\n     visitor.visit_ident(foreign_item.span, foreign_item.ident);\n \n     match foreign_item.node {\n@@ -495,8 +476,8 @@ pub fn walk_foreign_item<V: Visitor>(visitor: &mut V, foreign_item: &ForeignItem\n     }\n }\n \n-pub fn walk_ty_param_bounds<V: Visitor>(visitor: &mut V,\n-                                        bounds: &OwnedSlice<TyParamBound>) {\n+pub fn walk_ty_param_bounds<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                                bounds: &'v OwnedSlice<TyParamBound>) {\n     for bound in bounds.iter() {\n         match *bound {\n             TraitTyParamBound(ref typ) => {\n@@ -515,7 +496,7 @@ pub fn walk_ty_param_bounds<V: Visitor>(visitor: &mut V,\n     }\n }\n \n-pub fn walk_generics<V: Visitor>(visitor: &mut V, generics: &Generics) {\n+pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n     for type_parameter in generics.ty_params.iter() {\n         walk_ty_param_bounds(visitor, &type_parameter.bounds);\n         match type_parameter.default {\n@@ -530,7 +511,7 @@ pub fn walk_generics<V: Visitor>(visitor: &mut V, generics: &Generics) {\n     }\n }\n \n-pub fn walk_fn_decl<V: Visitor>(visitor: &mut V, function_declaration: &FnDecl) {\n+pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) {\n     for argument in function_declaration.inputs.iter() {\n         visitor.visit_pat(&*argument.pat);\n         visitor.visit_ty(&*argument.ty)\n@@ -542,13 +523,13 @@ pub fn walk_fn_decl<V: Visitor>(visitor: &mut V, function_declaration: &FnDecl)\n // visit_fn() and check for FkMethod().  I named this visit_method_helper()\n // because it is not a default impl of any method, though I doubt that really\n // clarifies anything. - Niko\n-pub fn walk_method_helper<V: Visitor>(visitor: &mut V, method: &Method) {\n+pub fn walk_method_helper<'v, V: Visitor<'v>>(visitor: &mut V, method: &'v Method) {\n     match method.node {\n-        MethDecl(ident, ref generics, _, _, _, decl, body, _) => {\n+        MethDecl(ident, ref generics, _, _, _, ref decl, ref body, _) => {\n             visitor.visit_ident(method.span, ident);\n-            visitor.visit_fn(&FkMethod(ident, generics, method),\n-                             &*decl,\n-                             &*body,\n+            visitor.visit_fn(FkMethod(ident, generics, method),\n+                             &**decl,\n+                             &**body,\n                              method.span,\n                              method.id);\n             for attr in method.attrs.iter() {\n@@ -560,14 +541,14 @@ pub fn walk_method_helper<V: Visitor>(visitor: &mut V, method: &Method) {\n     }\n }\n \n-pub fn walk_fn<V: Visitor>(visitor: &mut V,\n-                           function_kind: &FnKind,\n-                           function_declaration: &FnDecl,\n-                           function_body: &Block,\n-                           _span: Span) {\n+pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                   function_kind: FnKind<'v>,\n+                                   function_declaration: &'v FnDecl,\n+                                   function_body: &'v Block,\n+                                   _span: Span) {\n     walk_fn_decl(visitor, function_declaration);\n \n-    match *function_kind {\n+    match function_kind {\n         FkItemFn(_, generics, _, _) => {\n             visitor.visit_generics(generics);\n         }\n@@ -586,7 +567,7 @@ pub fn walk_fn<V: Visitor>(visitor: &mut V,\n     visitor.visit_block(function_body)\n }\n \n-pub fn walk_ty_method<V: Visitor>(visitor: &mut V, method_type: &TypeMethod) {\n+pub fn walk_ty_method<'v, V: Visitor<'v>>(visitor: &mut V, method_type: &'v TypeMethod) {\n     visitor.visit_ident(method_type.span, method_type.ident);\n     visitor.visit_explicit_self(&method_type.explicit_self);\n     for argument_type in method_type.decl.inputs.iter() {\n@@ -599,7 +580,7 @@ pub fn walk_ty_method<V: Visitor>(visitor: &mut V, method_type: &TypeMethod) {\n     }\n }\n \n-pub fn walk_trait_item<V: Visitor>(visitor: &mut V, trait_method: &TraitItem) {\n+pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_method: &'v TraitItem) {\n     match *trait_method {\n         RequiredMethod(ref method_type) => {\n             visitor.visit_ty_method(method_type)\n@@ -608,8 +589,8 @@ pub fn walk_trait_item<V: Visitor>(visitor: &mut V, trait_method: &TraitItem) {\n     }\n }\n \n-pub fn walk_struct_def<V: Visitor>(visitor: &mut V,\n-                                   struct_definition: &StructDef) {\n+pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                           struct_definition: &'v StructDef) {\n     match struct_definition.super_struct {\n         Some(ref t) => visitor.visit_ty(&**t),\n         None => {},\n@@ -619,8 +600,8 @@ pub fn walk_struct_def<V: Visitor>(visitor: &mut V,\n     }\n }\n \n-pub fn walk_struct_field<V: Visitor>(visitor: &mut V,\n-                                     struct_field: &StructField) {\n+pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                             struct_field: &'v StructField) {\n     match struct_field.node.kind {\n         NamedField(name, _) => {\n             visitor.visit_ident(struct_field.span, name)\n@@ -635,17 +616,17 @@ pub fn walk_struct_field<V: Visitor>(visitor: &mut V,\n     }\n }\n \n-pub fn walk_block<V: Visitor>(visitor: &mut V, block: &Block) {\n+pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {\n     for view_item in block.view_items.iter() {\n         visitor.visit_view_item(view_item)\n     }\n     for statement in block.stmts.iter() {\n         visitor.visit_stmt(&**statement)\n     }\n-    walk_expr_opt(visitor, block.expr)\n+    walk_expr_opt(visitor, &block.expr)\n }\n \n-pub fn walk_stmt<V: Visitor>(visitor: &mut V, statement: &Stmt) {\n+pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n     match statement.node {\n         StmtDecl(ref declaration, _) => visitor.visit_decl(&**declaration),\n         StmtExpr(ref expression, _) | StmtSemi(ref expression, _) => {\n@@ -655,32 +636,32 @@ pub fn walk_stmt<V: Visitor>(visitor: &mut V, statement: &Stmt) {\n     }\n }\n \n-pub fn walk_decl<V: Visitor>(visitor: &mut V, declaration: &Decl) {\n+pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) {\n     match declaration.node {\n         DeclLocal(ref local) => visitor.visit_local(&**local),\n         DeclItem(ref item) => visitor.visit_item(&**item),\n     }\n }\n \n-pub fn walk_expr_opt<V: Visitor>(visitor: &mut V,\n-                                 optional_expression: Option<Gc<Expr>>) {\n-    match optional_expression {\n+pub fn walk_expr_opt<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                         optional_expression: &'v Option<Gc<Expr>>) {\n+    match *optional_expression {\n         None => {}\n         Some(ref expression) => visitor.visit_expr(&**expression),\n     }\n }\n \n-pub fn walk_exprs<V: Visitor>(visitor: &mut V, expressions: &[Gc<Expr>]) {\n+pub fn walk_exprs<'v, V: Visitor<'v>>(visitor: &mut V, expressions: &'v [Gc<Expr>]) {\n     for expression in expressions.iter() {\n         visitor.visit_expr(&**expression)\n     }\n }\n \n-pub fn walk_mac<V: Visitor>(_: &mut V, _: &Mac) {\n+pub fn walk_mac<'v, V: Visitor<'v>>(_: &mut V, _: &'v Mac) {\n     // Empty!\n }\n \n-pub fn walk_expr<V: Visitor>(visitor: &mut V, expression: &Expr) {\n+pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n     match expression.node {\n         ExprBox(ref place, ref subexpression) => {\n             visitor.visit_expr(&**place);\n@@ -693,7 +674,7 @@ pub fn walk_expr<V: Visitor>(visitor: &mut V, expression: &Expr) {\n             visitor.visit_expr(&**element);\n             visitor.visit_expr(&**count)\n         }\n-        ExprStruct(ref path, ref fields, optional_base) => {\n+        ExprStruct(ref path, ref fields, ref optional_base) => {\n             visitor.visit_path(path, expression.id);\n             for field in fields.iter() {\n                 visitor.visit_expr(&*field.expr)\n@@ -729,7 +710,7 @@ pub fn walk_expr<V: Visitor>(visitor: &mut V, expression: &Expr) {\n             visitor.visit_expr(&**subexpression);\n             visitor.visit_ty(&**typ)\n         }\n-        ExprIf(ref head_expression, ref if_block, optional_else) => {\n+        ExprIf(ref head_expression, ref if_block, ref optional_else) => {\n             visitor.visit_expr(&**head_expression);\n             visitor.visit_block(&**if_block);\n             walk_expr_opt(visitor, optional_else)\n@@ -751,21 +732,21 @@ pub fn walk_expr<V: Visitor>(visitor: &mut V, expression: &Expr) {\n             }\n         }\n         ExprFnBlock(_, ref function_declaration, ref body) => {\n-            visitor.visit_fn(&FkFnBlock,\n+            visitor.visit_fn(FkFnBlock,\n                              &**function_declaration,\n                              &**body,\n                              expression.span,\n                              expression.id)\n         }\n         ExprUnboxedFn(_, _, ref function_declaration, ref body) => {\n-            visitor.visit_fn(&FkFnBlock,\n+            visitor.visit_fn(FkFnBlock,\n                              &**function_declaration,\n                              &**body,\n                              expression.span,\n                              expression.id)\n         }\n         ExprProc(ref function_declaration, ref body) => {\n-            visitor.visit_fn(&FkFnBlock,\n+            visitor.visit_fn(FkFnBlock,\n                              &**function_declaration,\n                              &**body,\n                              expression.span,\n@@ -800,18 +781,20 @@ pub fn walk_expr<V: Visitor>(visitor: &mut V, expression: &Expr) {\n             visitor.visit_path(path, expression.id)\n         }\n         ExprBreak(_) | ExprAgain(_) => {}\n-        ExprRet(optional_expression) => {\n+        ExprRet(ref optional_expression) => {\n             walk_expr_opt(visitor, optional_expression)\n         }\n         ExprMac(ref macro) => visitor.visit_mac(macro),\n         ExprParen(ref subexpression) => {\n             visitor.visit_expr(&**subexpression)\n         }\n         ExprInlineAsm(ref ia) => {\n-            for &(_, ref input) in ia.inputs.iter() {\n+            for input in ia.inputs.iter() {\n+                let (_, ref input) = *input;\n                 visitor.visit_expr(&**input)\n             }\n-            for &(_, ref output, _) in ia.outputs.iter() {\n+            for output in ia.outputs.iter() {\n+                let (_, ref output, _) = *output;\n                 visitor.visit_expr(&**output)\n             }\n         }\n@@ -820,11 +803,11 @@ pub fn walk_expr<V: Visitor>(visitor: &mut V, expression: &Expr) {\n     visitor.visit_expr_post(expression)\n }\n \n-pub fn walk_arm<V: Visitor>(visitor: &mut V, arm: &Arm) {\n+pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n     for pattern in arm.pats.iter() {\n         visitor.visit_pat(&**pattern)\n     }\n-    walk_expr_opt(visitor, arm.guard);\n+    walk_expr_opt(visitor, &arm.guard);\n     visitor.visit_expr(&*arm.body);\n     for attr in arm.attrs.iter() {\n         visitor.visit_attribute(attr);"}]}