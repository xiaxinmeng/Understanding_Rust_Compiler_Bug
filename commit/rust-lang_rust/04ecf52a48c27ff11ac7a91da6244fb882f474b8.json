{"sha": "04ecf52a48c27ff11ac7a91da6244fb882f474b8", "node_id": "C_kwDOAAsO6NoAKDA0ZWNmNTJhNDhjMjdmZjExYWM3YTkxZGE2MjQ0ZmI4ODJmNDc0Yjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-27T20:46:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-27T20:46:37Z"}, "message": "Rollup merge of #94417 - GuillaumeGomez:fix-duplicated-impl-links, r=notriddle\n\nFix duplicated impl links\n\nFixes #78701.\n\nThe problem is that the blanket impl has the same ID as the other impl, except that we don't derive IDs when we generate the sidebar. We now do.\n\nr? ``@notriddle``", "tree": {"sha": "9902f8c0dc86a9600501c55c62e1953d146e3ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9902f8c0dc86a9600501c55c62e1953d146e3ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04ecf52a48c27ff11ac7a91da6244fb882f474b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiG+MuCRBK7hj4Ov3rIwAAOzcIAHocx/8kxefntPCCWOe50FCU\nabAXMdek4jZj2C3Qc8+trn2xII9AUn5NKoCUXd82esS0oMr3gJePfxocDTBtvuyd\nnDs15Aj1IaAndNWo28YmHToOdkQHpWZftHIQu4b1nKxEpqs1nRlXsu32BZEO4BwS\nPXouwUYJ0B74quHmj9BqzDgvuRhHUIGL92ST/A+CEZ2RFaxO6WtJzcI9WyADnEjJ\nGWyhFZy+7b3C8s3jtpWT0jsjvB9C+sYEep+13meF1s+rU/eSTfA8VOwuJCYrqUWz\nblB8D9t1OZCcWGI5mBczKLxWJKs/iOXwOL4UeBO5kzQXphDBMQTI+pKnNpiHTuw=\n=oKbj\n-----END PGP SIGNATURE-----\n", "payload": "tree 9902f8c0dc86a9600501c55c62e1953d146e3ed7\nparent c9308846197a7e0255080bdebfbc09026d7c6309\nparent 9b8a6b97e5fc08a8f5a1aedc803e1f7b44dd50b5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645994797 +0100\ncommitter GitHub <noreply@github.com> 1645994797 +0100\n\nRollup merge of #94417 - GuillaumeGomez:fix-duplicated-impl-links, r=notriddle\n\nFix duplicated impl links\n\nFixes #78701.\n\nThe problem is that the blanket impl has the same ID as the other impl, except that we don't derive IDs when we generate the sidebar. We now do.\n\nr? ``@notriddle``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04ecf52a48c27ff11ac7a91da6244fb882f474b8", "html_url": "https://github.com/rust-lang/rust/commit/04ecf52a48c27ff11ac7a91da6244fb882f474b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04ecf52a48c27ff11ac7a91da6244fb882f474b8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9308846197a7e0255080bdebfbc09026d7c6309", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9308846197a7e0255080bdebfbc09026d7c6309", "html_url": "https://github.com/rust-lang/rust/commit/c9308846197a7e0255080bdebfbc09026d7c6309"}, {"sha": "9b8a6b97e5fc08a8f5a1aedc803e1f7b44dd50b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b8a6b97e5fc08a8f5a1aedc803e1f7b44dd50b5", "html_url": "https://github.com/rust-lang/rust/commit/9b8a6b97e5fc08a8f5a1aedc803e1f7b44dd50b5"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "3c1737c5e3f5f72df730496e3269340e73034b01", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/04ecf52a48c27ff11ac7a91da6244fb882f474b8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ecf52a48c27ff11ac7a91da6244fb882f474b8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=04ecf52a48c27ff11ac7a91da6244fb882f474b8", "patch": "@@ -74,7 +74,7 @@ use crate::html::format::{\n     PrintWithSpace,\n };\n use crate::html::highlight;\n-use crate::html::markdown::{HeadingOffset, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{HeadingOffset, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine};\n use crate::html::sources;\n use crate::scrape_examples::{CallData, CallLocation};\n use crate::try_none;\n@@ -1950,8 +1950,10 @@ fn small_url_encode(s: String) -> String {\n fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n     let did = it.def_id.expect_def_id();\n     let cache = cx.cache();\n+\n     if let Some(v) = cache.impls.get(&did) {\n         let mut used_links = FxHashSet::default();\n+        let mut id_map = IdMap::new();\n \n         {\n             let used_links_bor = &mut used_links;\n@@ -1992,7 +1994,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 sidebar_deref_methods(cx, out, impl_, v, &mut derefs);\n             }\n \n-            let format_impls = |impls: Vec<&Impl>| {\n+            let format_impls = |impls: Vec<&Impl>, id_map: &mut IdMap| {\n                 let mut links = FxHashSet::default();\n \n                 let mut ret = impls\n@@ -2001,13 +2003,14 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                         if let Some(ref i) = it.inner_impl().trait_ {\n                             let i_display = format!(\"{:#}\", i.print(cx));\n                             let out = Escape(&i_display);\n-                            let encoded = small_url_encode(format!(\"{:#}\", i.print(cx)));\n+                            let encoded =\n+                                id_map.derive(small_url_encode(format!(\"impl-{:#}\", i.print(cx))));\n                             let prefix = match it.inner_impl().polarity {\n                                 ty::ImplPolarity::Positive | ty::ImplPolarity::Reservation => \"\",\n                                 ty::ImplPolarity::Negative => \"!\",\n                             };\n                             let generated =\n-                                format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\", encoded, prefix, out);\n+                                format!(\"<a href=\\\"#{}\\\">{}{}</a>\", encoded, prefix, out);\n                             if links.insert(generated.clone()) { Some(generated) } else { None }\n                         } else {\n                             None\n@@ -2023,9 +2026,9 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) =\n                 concrete.into_iter().partition::<Vec<_>, _>(|i| i.inner_impl().kind.is_blanket());\n \n-            let concrete_format = format_impls(concrete);\n-            let synthetic_format = format_impls(synthetic);\n-            let blanket_format = format_impls(blanket_impl);\n+            let concrete_format = format_impls(concrete, &mut id_map);\n+            let synthetic_format = format_impls(synthetic, &mut id_map);\n+            let blanket_format = format_impls(blanket_impl, &mut id_map);\n \n             if !concrete_format.is_empty() {\n                 print_sidebar_block("}, {"sha": "796d553fac45e817518c29ed23f7b01df18356a8", "filename": "src/test/rustdoc/issue-78701.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/04ecf52a48c27ff11ac7a91da6244fb882f474b8/src%2Ftest%2Frustdoc%2Fissue-78701.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ecf52a48c27ff11ac7a91da6244fb882f474b8/src%2Ftest%2Frustdoc%2Fissue-78701.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-78701.rs?ref=04ecf52a48c27ff11ac7a91da6244fb882f474b8", "patch": "@@ -0,0 +1,20 @@\n+#![crate_name = \"foo\"]\n+\n+// This test ensures that if a blanket impl has the same ID as another impl, it'll\n+// link to the blanket impl and not the other impl. Basically, we're checking if\n+// the ID is correctly derived.\n+\n+// @has 'foo/struct.AnotherStruct.html'\n+// @count - '//*[@class=\"sidebar\"]//a[@href=\"#impl-AnAmazingTrait\"]' 1\n+// @count - '//*[@class=\"sidebar\"]//a[@href=\"#impl-AnAmazingTrait-1\"]' 1\n+\n+pub trait Something {}\n+\n+pub trait AnAmazingTrait {}\n+\n+impl<T: Something> AnAmazingTrait for T {}\n+\n+pub struct AnotherStruct<T>(T);\n+\n+impl<T: Something> Something for AnotherStruct<T> {}\n+impl AnAmazingTrait for AnotherStruct<()> {}"}]}