{"sha": "d3c96ff15249a73736222d41d87ade7013440945", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzk2ZmYxNTI0OWE3MzczNjIyMmQ0MWQ4N2FkZTcwMTM0NDA5NDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-30T20:57:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:05Z"}, "message": "tests: worse diagnostics, but basically same errors", "tree": {"sha": "4f479277f42020a38dd7f70e1b05a12a4fc5eac6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f479277f42020a38dd7f70e1b05a12a4fc5eac6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c96ff15249a73736222d41d87ade7013440945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c96ff15249a73736222d41d87ade7013440945", "html_url": "https://github.com/rust-lang/rust/commit/d3c96ff15249a73736222d41d87ade7013440945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c96ff15249a73736222d41d87ade7013440945/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78705b5ec75b96d03b88b46f81466dd53f1c1c9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/78705b5ec75b96d03b88b46f81466dd53f1c1c9b", "html_url": "https://github.com/rust-lang/rust/commit/78705b5ec75b96d03b88b46f81466dd53f1c1c9b"}], "stats": {"total": 900, "additions": 463, "deletions": 437}, "files": [{"sha": "bc7888f74af22e739735dc72d11d7d763e4ff5c0", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -77,23 +77,35 @@ fn tuple_four<T>()\n     // not ok for tuple, two lifetimes, and lifetime matching is invariant\n }\n \n-pub fn main() {\n+pub fn call_foo() {\n     foo::<IntStruct>();\n     foo::<UintStruct>(); //~ ERROR type mismatch\n+}\n \n+pub fn call_bar() {\n     bar::<IntStruct>(); //~ ERROR type mismatch\n     bar::<UintStruct>();\n+}\n \n+pub fn call_tuple_one() {\n     tuple_one::<Tuple>();\n-    //~^ ERROR E0277\n-    //~| ERROR type mismatch\n+    //~^ ERROR E0495\n+    //~| ERROR E0495\n+}\n \n+pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n-    //~^ ERROR E0277\n-    //~| ERROR type mismatch\n+    //~^ ERROR E0495\n+    //~| ERROR E0495\n+}\n \n+pub fn call_tuple_three() {\n     tuple_three::<Tuple>();\n+}\n \n+pub fn call_tuple_four() {\n     tuple_four::<Tuple>();\n-    //~^ ERROR E0277\n+    //~^ ERROR E0495\n }\n+\n+fn main() { }"}, {"sha": "226733da0f63fbf00bf3a428685cd07c70a5c0e0", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 42, "deletions": 68, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -17,7 +17,7 @@ LL | | }\n    | |_^\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:84:5\n+  --> $DIR/associated-types-eq-hr.rs:86:5\n    |\n LL |     bar::<IntStruct>(); //~ ERROR type mismatch\n    |     ^^^^^^^^^^^^^^^^ expected isize, found usize\n@@ -34,93 +34,67 @@ LL | |     // ok for UintStruct, but not IntStruct\n LL | | }\n    | |_^\n \n-error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:87:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n-   |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n-note: required by `tuple_one`\n-  --> $DIR/associated-types-eq-hr.rs:56:1\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n-LL | / fn tuple_one<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick first\n-LL | | }\n-   | |_^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:20), 'x) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:21), 'y) })...\n+   = note: ...so that the types are compatible:\n+           expected TheTrait<(&'x isize, &'y isize)>\n+              found TheTrait<(&isize, &isize)>\n \n-error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:87:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n-   |\n-note: required by `tuple_one`\n-  --> $DIR/associated-types-eq-hr.rs:56:1\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n-LL | / fn tuple_one<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick first\n-LL | | }\n-   | |_^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:20), 'x) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:21), 'y) })...\n+   = note: ...so that the types are compatible:\n+           expected TheTrait<(&'x isize, &'y isize)>\n+              found TheTrait<(&isize, &isize)>\n \n-error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/associated-types-eq-hr.rs:97:5\n    |\n LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n-   |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n-note: required by `tuple_two`\n-  --> $DIR/associated-types-eq-hr.rs:62:1\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n-LL | / fn tuple_two<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick second\n-LL | | }\n-   | |_^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:23), 'x) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:24), 'y) })...\n+   = note: ...so that the types are compatible:\n+           expected TheTrait<(&'x isize, &'y isize)>\n+              found TheTrait<(&isize, &isize)>\n \n-error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'y isize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/associated-types-eq-hr.rs:97:5\n    |\n LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n-note: required by `tuple_two`\n-  --> $DIR/associated-types-eq-hr.rs:62:1\n-   |\n-LL | / fn tuple_two<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick second\n-LL | | }\n-   | |_^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:23), 'x) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:24), 'y) })...\n+   = note: ...so that the types are compatible:\n+           expected TheTrait<(&'x isize, &'y isize)>\n+              found TheTrait<(&isize, &isize)>\n \n-error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:97:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/associated-types-eq-hr.rs:107:5\n    |\n LL |     tuple_four::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n-   |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n-note: required by `tuple_four`\n-  --> $DIR/associated-types-eq-hr.rs:74:1\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n-LL | / fn tuple_four<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes, and lifetime matching is invariant\n-LL | | }\n-   | |_^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:28), 'x) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:29), 'y) })...\n+   = note: ...so that the types are compatible:\n+           expected TheTrait<(&'x isize, &'y isize)>\n+              found TheTrait<(&isize, &isize)>\n \n error: aborting due to 7 previous errors\n \n-Some errors occurred: E0271, E0277.\n+Some errors occurred: E0271, E0495.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "b5355e60099752bc00c0e071f7117ee5f93feec8", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,17 +1,24 @@\n-error[E0271]: type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n LL |     foo(());\n-   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+   |     ^^^\n    |\n-note: required by `foo`\n-  --> $DIR/higher-ranked-projection.rs:14:1\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:12), 'a) })...\n+   = note: ...so that the types are compatible:\n+           expected Mirror\n+              found Mirror\n+note: but, the lifetime must be valid for the expression at 25:5...\n+  --> $DIR/higher-ranked-projection.rs:25:5\n    |\n-LL | / fn foo<U, T>(_t: T)\n-LL | |     where for<'a> &'a T: Mirror<Image=U>\n-LL | | {}\n-   | |__^\n+LL |     foo(());\n+   |     ^^^\n+note: ...so type `fn(()) {foo::<&(), ()>}` of expression is valid during the expression\n+  --> $DIR/higher-ranked-projection.rs:25:5\n+   |\n+LL |     foo(());\n+   |     ^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "a837df0cd242971b42c6ea244a8267e0c8bf8e06", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -3,8 +3,7 @@ error: compilation successful\n    |\n LL | / fn main() { //[good]~ ERROR compilation successful\n LL | |     foo(());\n-LL | |     //[bad]~^ ERROR type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n-LL | |     //[bad]~| expected bound lifetime parameter 'a, found concrete lifetime\n+LL | |     //[bad]~^ ERROR E0495\n LL | | }\n    | |_^\n "}, {"sha": "2d2221c6c639247459a192a6b7497293bde6cb41", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -23,6 +23,5 @@ fn foo<U, T>(_t: T)\n #[rustc_error]\n fn main() { //[good]~ ERROR compilation successful\n     foo(());\n-    //[bad]~^ ERROR type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n-    //[bad]~| expected bound lifetime parameter 'a, found concrete lifetime\n+    //[bad]~^ ERROR E0495\n }"}, {"sha": "49f6565540b7e58948a392c2d38a94ddc084b6e6", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -28,23 +28,24 @@ fn expect_free_supply_bound() {\n     // Here, we are given a function whose region is bound at closure level,\n     // but we expect one bound in the argument. Error results.\n     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-    //~^ ERROR type mismatch in closure arguments\n+    //~^ ERROR mismatched types\n }\n \n fn expect_bound_supply_free_from_fn<'x>(x: &'x u32) {\n     // Here, we are given a `fn(&u32)` but we expect a `fn(&'x\n     // u32)`. In principle, this could be ok, but we demand equality.\n     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-    //~^ ERROR type mismatch in closure arguments\n+    //~^ ERROR mismatched types\n }\n \n fn expect_bound_supply_free_from_closure() {\n     // A variant on the previous test. Here, the region `'a` will be\n     // bound at the closure level, but we expect something bound at\n     // the argument level.\n     type Foo<'a> = fn(&'a u32);\n-    with_closure_expecting_fn_with_bound_region(|_x: Foo<'_>, y| {});\n-    //~^ ERROR type mismatch in closure arguments\n+    with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+    //~^ ERROR cannot infer\n+    });\n }\n \n fn expect_bound_supply_bound<'x>(x: &'x u32) {"}, {"sha": "d140e9989a3f6fa5d94a8e87782f055aa143356f", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 48, "deletions": 45, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -36,58 +36,61 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the b\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:30:5\n+error[E0308]: mismatched types\n+  --> $DIR/expect-fn-supply-fn.rs:30:52\n+   |\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |                                                    ^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `fn(&u32)`\n+              found type `for<'r> fn(&'r u32)`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U2, name: BrAnon(0) })...\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 30:48\n+  --> $DIR/expect-fn-supply-fn.rs:30:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `for<'a, 'r> fn(fn(&'a u32), &'r i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_free_region`\n-  --> $DIR/expect-fn-supply-fn.rs:1:1\n-   |\n-LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_^\n+   |                                                ^^^^^^^^^^^^^^^^^^^\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:37:5\n+error[E0308]: mismatched types\n+  --> $DIR/expect-fn-supply-fn.rs:37:53\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |     |\n-   |     expected signature of `for<'r> fn(for<'s> fn(&'s u32), &'r i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_bound_region`\n-  --> $DIR/expect-fn-supply-fn.rs:6:1\n-   |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_^\n+   |                                                     ^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `for<'r> fn(&'r u32)`\n+              found type `fn(&'x u32)`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })...\n+note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 34:37\n+  --> $DIR/expect-fn-supply-fn.rs:34:37\n+   |\n+LL | fn expect_bound_supply_free_from_fn<'x>(x: &'x u32) {\n+   |                                     ^^\n \n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:46:5\n-   |\n-LL |     with_closure_expecting_fn_with_bound_region(|_x: Foo<'_>, y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `for<'r> fn(for<'s> fn(&'s u32), &'r i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_bound_region`\n-  --> $DIR/expect-fn-supply-fn.rs:6:1\n-   |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_^\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n+  --> $DIR/expect-fn-supply-fn.rs:46:53\n+   |\n+LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |                                                     ^^^^^^^\n+   |\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })...\n+   = note: ...so that the types are compatible:\n+           expected for<'r> fn(&'r u32)\n+              found fn(&u32)\n+note: but, the lifetime must be valid for the expression at 46:65...\n+  --> $DIR/expect-fn-supply-fn.rs:46:65\n+   |\n+LL |       with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |  _________________________________________________________________^\n+LL | |     //~^ ERROR cannot infer\n+LL | |     });\n+   | |_____^\n+note: ...so that the type `fn(&u32)` will meet its required lifetime bounds\n+  --> $DIR/expect-fn-supply-fn.rs:46:53\n+   |\n+LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |                                                     ^^^^^^^\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0308, E0631.\n+Some errors occurred: E0308, E0495.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "4523e05696a2b3be2a94b85f3caac72c6d208ea2", "filename": "src/test/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -27,7 +27,9 @@ fn main() {\n         yield;\n         assert_foo(x);\n     };\n-    assert_foo(gen); //~ ERROR the trait bound `No: Foo` is not satisfied\n+    assert_foo(gen);\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     // Allow impls which matches any lifetime\n     let x = &OnlyFooIfRef(No);\n@@ -44,5 +46,7 @@ fn main() {\n         yield;\n         assert_foo(a);\n     };\n-    assert_foo(gen); //~ ERROR the requirement `for<'r, 's> 'r : 's` is not satisfied\n+    assert_foo(gen);\n+    //~^ ERROR E0495\n+    //~| ERROR E0495\n }"}, {"sha": "3998ffe2522b42cf7d37e99d24753d7aa74423f8", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,37 +1,50 @@\n-error[E0277]: the trait bound `No: Foo` is not satisfied in `[generator@$DIR/auto-trait-regions.rs:25:15: 29:6 x:&&OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`\n+error[E0308]: mismatched types\n   --> $DIR/auto-trait-regions.rs:30:5\n    |\n-LL |     assert_foo(gen); //~ ERROR the trait bound `No: Foo` is not satisfied\n-   |     ^^^^^^^^^^ within `[generator@$DIR/auto-trait-regions.rs:25:15: 29:6 x:&&OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`, the trait `Foo` is not implemented for `No`\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^ lifetime mismatch\n    |\n-   = help: the following implementations were found:\n-             <No as Foo>\n-   = note: required because it appears within the type `OnlyFooIfStaticRef`\n-   = note: required because it appears within the type `&OnlyFooIfStaticRef`\n-   = note: required because it appears within the type `for<'r> {&'r OnlyFooIfStaticRef, ()}`\n-   = note: required because it appears within the type `[generator@$DIR/auto-trait-regions.rs:25:15: 29:6 x:&&OnlyFooIfStaticRef for<'r> {&'r OnlyFooIfStaticRef, ()}]`\n-note: required by `assert_foo`\n-  --> $DIR/auto-trait-regions.rs:20:1\n+   = note: expected type `Foo`\n+              found type `Foo`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U31, name: BrAnon(1) })...\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/auto-trait-regions.rs:30:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^ lifetime mismatch\n    |\n-LL | fn assert_foo<T: Foo>(f: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected type `Foo`\n+              found type `Foo`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U35, name: BrAnon(1) })...\n+   = note: ...does not necessarily outlive the static lifetime\n \n-error[E0279]: the requirement `for<'r, 's> 'r : 's` is not satisfied (`expected bound lifetime parameter, found concrete lifetime`)\n-  --> $DIR/auto-trait-regions.rs:47:5\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n+  --> $DIR/auto-trait-regions.rs:49:5\n    |\n-LL |     assert_foo(gen); //~ ERROR the requirement `for<'r, 's> 'r : 's` is not satisfied\n+LL |     assert_foo(gen);\n    |     ^^^^^^^^^^\n    |\n-   = note: required because of the requirements on the impl of `for<'r, 's> Foo` for `A<'_, '_>`\n-   = note: required because it appears within the type `for<'r, 's> {A<'r, 's>, ()}`\n-   = note: required because it appears within the type `[generator@$DIR/auto-trait-regions.rs:42:15: 46:6 for<'r, 's> {A<'r, 's>, ()}]`\n-note: required by `assert_foo`\n-  --> $DIR/auto-trait-regions.rs:20:1\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U47, name: BrAnon(2) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U47, name: BrAnon(1) })...\n+   = note: ...so that the types are compatible:\n+           expected Foo\n+              found Foo\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n+  --> $DIR/auto-trait-regions.rs:49:5\n+   |\n+LL |     assert_foo(gen);\n+   |     ^^^^^^^^^^\n    |\n-LL | fn assert_foo<T: Foo>(f: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U51, name: BrAnon(2) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U51, name: BrAnon(1) })...\n+   = note: ...so that the types are compatible:\n+           expected Foo\n+              found Foo\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0277, E0279.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors occurred: E0308, E0495.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "940a6e3f06853207da511acb2e8331d7d09ad20a", "filename": "src/test/ui/hrtb/hrtb-cache-issue-54302.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-cache-issue-54302.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,17 +1,15 @@\n-error[E0279]: the requirement `for<'de> 'de : ` is not satisfied (`expected bound lifetime parameter 'de, found concrete lifetime`)\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'de` due to conflicting requirements\n   --> $DIR/hrtb-cache-issue-54302.rs:19:5\n    |\n LL |     assert_deserialize_owned::<&'static str>(); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required because of the requirements on the impl of `for<'de> Deserialize<'de>` for `&'static str`\n-   = note: required because of the requirements on the impl of `DeserializeOwned` for `&'static str`\n-note: required by `main::assert_deserialize_owned`\n-  --> $DIR/hrtb-cache-issue-54302.rs:18:5\n-   |\n-LL |     fn assert_deserialize_owned<T: DeserializeOwned>() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:12), 'de) })...\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected Deserialize<'de>\n+              found Deserialize<'_>\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0279`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "391303676d7845de2ead323c58a016e1ad74f0c0", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -25,6 +25,6 @@ impl<'a> Foo<(&'a isize, &'a isize)> for SomeStruct\n }\n \n fn a() { want_foo1::<SomeStruct>(); } // OK -- foo wants just one region\n-fn b() { want_foo2::<SomeStruct>(); } //~ ERROR E0277\n+fn b() { want_foo2::<SomeStruct>(); } //~ ERROR\n \n fn main() { }"}, {"sha": "24d374e470e329553fe00d8cfeff9ccc95487fe4", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,20 +1,15 @@\n-error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/hrtb-conflate-regions.rs:28:10\n    |\n-LL | fn b() { want_foo2::<SomeStruct>(); } //~ ERROR E0277\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n+LL | fn b() { want_foo2::<SomeStruct>(); } //~ ERROR\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the following implementations were found:\n-             <SomeStruct as Foo<(&'a isize, &'a isize)>>\n-note: required by `want_foo2`\n-  --> $DIR/hrtb-conflate-regions.rs:8:1\n-   |\n-LL | / fn want_foo2<T>()\n-LL | |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n-LL | | {\n-LL | | }\n-   | |_^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:11), 'a) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:12), 'b) })...\n+   = note: ...so that the types are compatible:\n+           expected Foo<(&'a isize, &'b isize)>\n+              found Foo<(&isize, &isize)>\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "f9ae1429ee4a2c52a2a4c6e03a29ef3fe512c849", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -44,7 +44,7 @@ fn want_qux<B>(b: &B)\n     where B : Qux\n {\n     want_foo_for_any_tcx(b);\n-    want_bar_for_any_ccx(b); //~ ERROR E0277\n+    want_bar_for_any_ccx(b); //~ ERROR\n }\n \n fn main() {}"}, {"sha": "b02764184fbe919bcdaf60bcdeb61ac8020b6217", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,19 +1,14 @@\n-error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n+error[E0308]: mismatched types\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:5\n    |\n-LL |     want_bar_for_any_ccx(b); //~ ERROR E0277\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+LL |     want_bar_for_any_ccx(b); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n-note: required by `want_bar_for_any_ccx`\n-  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:31:1\n-   |\n-LL | / fn want_bar_for_any_ccx<B>(b: &B)\n-LL | |     where B : for<'ccx> Bar<'ccx>\n-LL | | {\n-LL | | }\n-   | |_^\n+   = note: expected type `for<'ccx> Bar<'ccx>`\n+              found type `Bar<'static>`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U4, name: BrNamed(crate0:DefIndex(1:16), 'ccx) })...\n+   = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "638587f428d78a396be7ad8b1c19f6759065fbf6", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -15,7 +15,8 @@ fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n     where F : Foo<'x>\n {\n     want_foo_for_some_tcx(f);\n-    want_foo_for_any_tcx(f); //~ ERROR E0277\n+    want_foo_for_any_tcx(f); //~ ERROR E0308\n+    //~^ ERROR E0308\n }\n \n fn want_foo_for_any_tcx<F>(f: &F)\n@@ -32,7 +33,8 @@ fn want_bar_for_some_ccx<'x,B>(b: &B)\n     want_foo_for_any_tcx(b);\n \n     want_bar_for_some_ccx(b);\n-    want_bar_for_any_ccx(b); //~ ERROR E0277\n+    want_bar_for_any_ccx(b); //~ ERROR E0308\n+    //~^ ERROR E0308\n }\n \n fn want_bar_for_any_ccx<B>(b: &B)"}, {"sha": "71ed59ce2ff7e9adfd1446ab6b44b1083f4909b5", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 56, "deletions": 33, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,40 +1,63 @@\n-error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n+error[E0308]: mismatched types\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:5\n    |\n-LL |     want_foo_for_any_tcx(f); //~ ERROR E0277\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n+LL |     want_foo_for_any_tcx(f); //~ ERROR E0308\n+   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n-note: required by `want_foo_for_any_tcx`\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:21:1\n+   = note: expected type `for<'tcx> Foo<'tcx>`\n+              found type `Foo<'x>`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U4, name: BrNamed(crate0:DefIndex(1:15), 'tcx) })...\n+note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 14:26\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:14:26\n    |\n-LL | / fn want_foo_for_any_tcx<F>(f: &F)\n-LL | |     where F : for<'tcx> Foo<'tcx>\n-LL | | {\n-LL | |     want_foo_for_some_tcx(f);\n-LL | |     want_foo_for_any_tcx(f);\n-LL | | }\n-   | |_^\n+LL | fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n+   |                          ^^\n \n-error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:35:5\n-   |\n-LL |     want_bar_for_any_ccx(b); //~ ERROR E0277\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n-   |\n-   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n-note: required by `want_bar_for_any_ccx`\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:38:1\n-   |\n-LL | / fn want_bar_for_any_ccx<B>(b: &B)\n-LL | |     where B : for<'ccx> Bar<'ccx>\n-LL | | {\n-LL | |     want_foo_for_some_tcx(b);\n-...  |\n-LL | |     want_bar_for_any_ccx(b);\n-LL | | }\n-   | |_^\n+error[E0308]: mismatched types\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:18:5\n+   |\n+LL |     want_foo_for_any_tcx(f); //~ ERROR E0308\n+   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `for<'tcx> Foo<'tcx>`\n+              found type `Foo<'x>`\n+note: the lifetime 'x as defined on the function body at 14:26...\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:14:26\n+   |\n+LL | fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n+   |                          ^^\n+   = note: ...does not necessarily outlive lifetime RePlaceholder(Placeholder { universe: U4, name: BrNamed(crate0:DefIndex(1:15), 'tcx) })\n+\n+error[E0308]: mismatched types\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:36:5\n+   |\n+LL |     want_bar_for_any_ccx(b); //~ ERROR E0308\n+   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `for<'ccx> Bar<'ccx>`\n+              found type `Bar<'x>`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U8, name: BrNamed(crate0:DefIndex(1:19), 'ccx) })...\n+note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 29:26\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:29:26\n+   |\n+LL | fn want_bar_for_some_ccx<'x,B>(b: &B)\n+   |                          ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:36:5\n+   |\n+LL |     want_bar_for_any_ccx(b); //~ ERROR E0308\n+   |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `for<'ccx> Bar<'ccx>`\n+              found type `Bar<'x>`\n+note: the lifetime 'x as defined on the function body at 29:26...\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:29:26\n+   |\n+LL | fn want_bar_for_some_ccx<'x,B>(b: &B)\n+   |                          ^^\n+   = note: ...does not necessarily outlive lifetime RePlaceholder(Placeholder { universe: U8, name: BrNamed(crate0:DefIndex(1:19), 'ccx) })\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3aee241ccd2d7184019a537d64c461edd69cf921", "filename": "src/test/ui/hrtb/hrtb-just-for-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -21,7 +21,7 @@ fn give_any() {\n struct StaticInt;\n impl Foo<&'static isize> for StaticInt { }\n fn give_static() {\n-    want_hrtb::<StaticInt>() //~ ERROR `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n+    want_hrtb::<StaticInt>() //~ ERROR\n }\n \n fn main() { }"}, {"sha": "d3c2f7d059a6fd0a97d4c91bd9474f5d1290cacf", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,20 +1,14 @@\n-error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n+error[E0308]: mismatched types\n   --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n-LL |     want_hrtb::<StaticInt>() //~ ERROR `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n+LL |     want_hrtb::<StaticInt>() //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = help: the following implementations were found:\n-             <StaticInt as Foo<&'static isize>>\n-note: required by `want_hrtb`\n-  --> $DIR/hrtb-just-for-static.rs:8:1\n-   |\n-LL | / fn want_hrtb<T>()\n-LL | |     where T : for<'a> Foo<&'a isize>\n-LL | | {\n-LL | | }\n-   | |_^\n+   = note: expected type `Foo<&'a isize>`\n+              found type `Foo<&'static isize>`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:11), 'a) })...\n+   = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "31dad39efc3f5bc071a7100e85124adc3c78238d", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -43,7 +43,7 @@ fn foo_hrtb_bar_not<'b,T>(mut t: T)\n     // be implemented. Thus to satisfy `&mut T : for<'a> Foo<&'a\n     // isize>`, we require `T : for<'a> Bar<&'a isize>`, but the where\n     // clause only specifies `T : Bar<&'b isize>`.\n-    foo_hrtb_bar_not(&mut t); //~ ERROR `for<'a> T: Bar<&'a isize>` is not satisfied\n+    foo_hrtb_bar_not(&mut t); //~ ERROR E0495\n }\n \n fn foo_hrtb_bar_hrtb<T>(mut t: T)"}, {"sha": "2de60a79a85bda716432639fde271cb2ddefb3ee", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,23 +1,22 @@\n-error[E0277]: the trait bound `for<'a> T: Bar<&'a isize>` is not satisfied\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/hrtb-perfect-forwarding.rs:46:5\n    |\n-LL |     foo_hrtb_bar_not(&mut t); //~ ERROR `for<'a> T: Bar<&'a isize>` is not satisfied\n-   |     ^^^^^^^^^^^^^^^^ the trait `for<'a> Bar<&'a isize>` is not implemented for `T`\n+LL |     foo_hrtb_bar_not(&mut t); //~ ERROR E0495\n+   |     ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `where for<'a> T: Bar<&'a isize>` bound\n-   = note: required because of the requirements on the impl of `for<'a> Foo<&'a isize>` for `&mut T`\n-note: required by `foo_hrtb_bar_not`\n-  --> $DIR/hrtb-perfect-forwarding.rs:39:1\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:23), 'a) })...\n+   = note: ...so that the types are compatible:\n+           expected Foo<&'a isize>\n+              found Foo<&isize>\n+note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 39:21...\n+  --> $DIR/hrtb-perfect-forwarding.rs:39:21\n    |\n-LL | / fn foo_hrtb_bar_not<'b,T>(mut t: T)\n-LL | |     where T : for<'a> Foo<&'a isize> + Bar<&'b isize>\n-LL | | {\n-LL | |     // Not OK -- The forwarding impl for `Foo` requires that `Bar` also\n-...  |\n-LL | |     foo_hrtb_bar_not(&mut t); //~ ERROR `for<'a> T: Bar<&'a isize>` is not satisfied\n-LL | | }\n-   | |_^\n+LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n+   |                     ^^\n+   = note: ...so that the types are compatible:\n+           expected Bar<&isize>\n+              found Bar<&'b isize>\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "ebd096f1dde5ac98a2e29620a724251033b5dcaa", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,23 +1,14 @@\n-error[E0277]: the trait bound `for<'b> P: Process<'b>` is not satisfied\n+error[E0277]: `<P as Process<'_>>::Item` is not an iterator\n   --> $DIR/issue-22872.rs:20:36\n    |\n LL |     let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'b> Process<'b>` is not implemented for `P`\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'_>>::Item` is not an iterator\n    |\n-   = help: consider adding a `where for<'b> P: Process<'b>` bound\n+   = help: the trait `std::iter::Iterator` is not implemented for `<P as Process<'_>>::Item`\n+   = help: consider adding a `where <P as Process<'_>>::Item: std::iter::Iterator` bound\n    = note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n    = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n \n-error[E0277]: `<P as Process<'b>>::Item` is not an iterator\n-  --> $DIR/issue-22872.rs:20:36\n-   |\n-LL |     let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'b>>::Item` is not an iterator\n-   |\n-   = help: the trait `for<'b> std::iter::Iterator` is not implemented for `<P as Process<'b>>::Item`\n-   = note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n-   = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c7d1900ada958faa6e17f5fef9173113f1dbd75c", "filename": "src/test/ui/issues/issue-40000.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -3,6 +3,5 @@ fn main() {\n \n     fn foo(x: Box<Fn(&i32)>) {}\n     let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;\n-    foo(bar); //~ ERROR mismatched types\n-    //~| expected concrete lifetime, found bound lifetime parameter\n+    foo(bar); //~ ERROR E0495\n }"}, {"sha": "3aa1da8680c02248f2e5f7d9a463879a207466ce", "filename": "src/test/ui/issues/issue-40000.stderr", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,12 +1,26 @@\n-error[E0308]: mismatched types\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/issue-40000.rs:6:9\n    |\n-LL |     foo(bar); //~ ERROR mismatched types\n-   |         ^^^ expected concrete lifetime, found bound lifetime parameter\n+LL |     foo(bar); //~ ERROR E0495\n+   |         ^^^\n    |\n-   = note: expected type `std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r i32) + 'static)>`\n-              found type `std::boxed::Box<dyn std::ops::Fn(_)>`\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U8, name: BrAnon(0) })...\n+   = note: ...so that the types are compatible:\n+           expected dyn for<'r> std::ops::Fn(&'r i32)\n+              found dyn std::ops::Fn(&i32)\n+note: but, the lifetime must be valid for the block suffix following statement 2 at 5:5...\n+  --> $DIR/issue-40000.rs:5:5\n+   |\n+LL | /     let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;\n+LL | |     foo(bar); //~ ERROR E0495\n+LL | | }\n+   | |_^\n+note: ...so that variable is valid at time of its declaration\n+  --> $DIR/issue-40000.rs:5:9\n+   |\n+LL |     let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;\n+   |         ^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "286d37b182e31d12a3e5e288f6f504a62b8591a6", "filename": "src/test/ui/issues/issue-54302-cases.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -61,25 +61,25 @@ impl<T> RefFoo<T> for T where for<'a> &'a T: Foo<'static, T> {\n fn coerce_lifetime1(a: &u32) -> &'static u32\n {\n     <u32 as RefFoo<u32>>::ref_foo(a)\n-    //~^ ERROR the trait bound `for<'a> &'a u32: Foo2<'_, u32>` is not satisfied\n+    //~^ ERROR cannot infer\n }\n \n fn coerce_lifetime2(a: &i32) -> &'static i32\n {\n     <i32 as RefFoo<i32>>::ref_foo(a)\n-    //~^ ERROR the requirement `for<'a> 'a : ` is not satisfied\n+    //~^ ERROR cannot infer\n }\n \n fn coerce_lifetime3(a: &u64) -> &'static u64\n {\n     <u64 as RefFoo<u64>>::ref_foo(a)\n-    //~^ ERROR type mismatch resolving `for<'a> <&'a u64 as Mirror>::Image == &u64`\n+    //~^ ERROR cannot infer\n }\n \n fn coerce_lifetime4(a: &i64) -> &'static i64\n {\n     <i64 as RefFoo<i64>>::ref_foo(a)\n-    //~^ ERROR type mismatch resolving `for<'a> <&'a i64 as Mirror>::Image == &i64`\n+    //~^ ERROR cannot infer\n }\n \n fn main() {}"}, {"sha": "09a4e091d2bcfbc6b123ebd5ded550b2d5d3fda5", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,65 +1,51 @@\n-error[E0277]: the trait bound `for<'a> &'a u32: Foo2<'_, u32>` is not satisfied\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n   --> $DIR/issue-54302-cases.rs:63:5\n    |\n LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo2<'_, u32>` is not implemented for `&'a u32`\n-   |\n-   = help: the following implementations were found:\n-             <&'x u32 as Foo2<'x, u32>>\n-   = note: required because of the requirements on the impl of `for<'a> Foo<'static, u32>` for `&'a u32`\n-   = note: required because of the requirements on the impl of `RefFoo<u32>` for `u32`\n-note: required by `RefFoo::ref_foo`\n-  --> $DIR/issue-54302-cases.rs:51:5\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL |     fn ref_foo(&self) -> &'static T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:27), 'a) })...\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected Foo<'static, u32>\n+              found Foo<'_, u32>\n \n-error[E0279]: the requirement `for<'a> 'a : ` is not satisfied (`expected bound lifetime parameter 'a, found concrete lifetime`)\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n   --> $DIR/issue-54302-cases.rs:69:5\n    |\n LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required because of the requirements on the impl of `for<'a> Foo2<'_, i32>` for `&'a i32`\n-   = note: required because of the requirements on the impl of `for<'a> Foo<'static, i32>` for `&'a i32`\n-   = note: required because of the requirements on the impl of `RefFoo<i32>` for `i32`\n-note: required by `RefFoo::ref_foo`\n-  --> $DIR/issue-54302-cases.rs:51:5\n-   |\n-LL |     fn ref_foo(&self) -> &'static T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:27), 'a) })...\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected Foo<'static, i32>\n+              found Foo<'_, i32>\n \n-error[E0271]: type mismatch resolving `for<'a> <&'a u64 as Mirror>::Image == &u64`\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n   --> $DIR/issue-54302-cases.rs:75:5\n    |\n LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'a, found concrete lifetime\n-   |\n-   = note: required because of the requirements on the impl of `for<'a> Foo2<'_, u64>` for `&'a u64`\n-   = note: required because of the requirements on the impl of `for<'a> Foo<'static, u64>` for `&'a u64`\n-   = note: required because of the requirements on the impl of `RefFoo<u64>` for `u64`\n-note: required by `RefFoo::ref_foo`\n-  --> $DIR/issue-54302-cases.rs:51:5\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL |     fn ref_foo(&self) -> &'static T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:27), 'a) })...\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected Foo<'static, u64>\n+              found Foo<'_, u64>\n \n-error[E0271]: type mismatch resolving `for<'a> <&'a i64 as Mirror>::Image == &i64`\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n   --> $DIR/issue-54302-cases.rs:81:5\n    |\n LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'a, found concrete lifetime\n-   |\n-   = note: required because of the requirements on the impl of `for<'a> Foo2<'_, i64>` for `&'a i64`\n-   = note: required because of the requirements on the impl of `for<'a> Foo<'static, i64>` for `&'a i64`\n-   = note: required because of the requirements on the impl of `RefFoo<i64>` for `i64`\n-note: required by `RefFoo::ref_foo`\n-  --> $DIR/issue-54302-cases.rs:51:5\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL |     fn ref_foo(&self) -> &'static T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:27), 'a) })...\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected Foo<'static, i64>\n+              found Foo<'_, i64>\n \n error: aborting due to 4 previous errors\n \n-Some errors occurred: E0271, E0277, E0279.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "35cdc73a78fd0269b09a33956e7b5ddeb8d6daef", "filename": "src/test/ui/issues/issue-54302.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     // Then why does it implement DeserializeOwned? This compiles.\n     fn assert_deserialize_owned<T: DeserializeOwned>() {}\n     assert_deserialize_owned::<&'static str>();\n-    //~^ ERROR the requirement `for<'de> 'de : ` is not satisfied\n+    //~^ ERROR E0495\n \n     // It correctly does not implement for<'de> Deserialize<'de>.\n     //fn assert_hrtb<T: for<'de> Deserialize<'de>>() {}"}, {"sha": "b456d2582ffd6bda55b37ce31d9d6dd3c1b452ac", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,17 +1,15 @@\n-error[E0279]: the requirement `for<'de> 'de : ` is not satisfied (`expected bound lifetime parameter 'de, found concrete lifetime`)\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'de` due to conflicting requirements\n   --> $DIR/issue-54302.rs:13:5\n    |\n LL |     assert_deserialize_owned::<&'static str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required because of the requirements on the impl of `for<'de> Deserialize<'de>` for `&'static str`\n-   = note: required because of the requirements on the impl of `DeserializeOwned` for `&'static str`\n-note: required by `main::assert_deserialize_owned`\n-  --> $DIR/issue-54302.rs:12:5\n-   |\n-LL |     fn assert_deserialize_owned<T: DeserializeOwned>() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrNamed(crate0:DefIndex(1:12), 'de) })...\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the types are compatible:\n+           expected Deserialize<'de>\n+              found Deserialize<'_>\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0279`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "f71a1736d4d3f14f3a2d6751162e41388897bac8", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -7,6 +7,8 @@ fn main() {\n \n fn baz<F: Fn(*mut &u32)>(_: F) {}\n fn _test<'a>(f: fn(*mut &'a u32)) {\n-    baz(f); //~ ERROR type mismatch\n-     //~^ ERROR type mismatch\n+    baz(f); //~ ERROR mismatched types\n+     //~| ERROR mismatched types\n+     //~| ERROR mismatched types\n+     //~| ERROR mismatched types\n }"}, {"sha": "2cd63099bb756568d152feb0688618b14fedce4d", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 53, "deletions": 20, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -22,34 +22,67 @@ LL |     a.iter().map(|_: (u16, u16)| 45); //~ ERROR type mismatch\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n \n-error[E0631]: type mismatch in function arguments\n+error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n-LL |     baz(f); //~ ERROR type mismatch\n-   |     ^^^\n-   |     |\n-   |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n-   |     found signature of `fn(*mut &'a u32) -> _`\n+LL |     baz(f); //~ ERROR mismatched types\n+   |     ^^^ lifetime mismatch\n    |\n-note: required by `baz`\n-  --> $DIR/closure-arg-type-mismatch.rs:8:1\n+   = note: expected type `for<'r> std::ops::Fn<(*mut &'r u32,)>`\n+              found type `std::ops::Fn<(*mut &'a u32,)>`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U2, name: BrAnon(0) })...\n+note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 9:10\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n    |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n \n-error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n+error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n-LL |     baz(f); //~ ERROR type mismatch\n-   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n+LL |     baz(f); //~ ERROR mismatched types\n+   |     ^^^ lifetime mismatch\n    |\n-note: required by `baz`\n-  --> $DIR/closure-arg-type-mismatch.rs:8:1\n+   = note: expected type `std::ops::FnOnce<(*mut &u32,)>`\n+              found type `std::ops::FnOnce<(*mut &'a u32,)>`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })...\n+note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 9:10\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n    |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n \n-error: aborting due to 5 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+   |\n+LL |     baz(f); //~ ERROR mismatched types\n+   |     ^^^ lifetime mismatch\n+   |\n+   = note: expected type `for<'r> std::ops::Fn<(*mut &'r u32,)>`\n+              found type `std::ops::Fn<(*mut &'a u32,)>`\n+note: the lifetime 'a as defined on the function body at 9:10...\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+   = note: ...does not necessarily outlive lifetime RePlaceholder(Placeholder { universe: U2, name: BrAnon(0) })\n+\n+error[E0308]: mismatched types\n+  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+   |\n+LL |     baz(f); //~ ERROR mismatched types\n+   |     ^^^ lifetime mismatch\n+   |\n+   = note: expected type `std::ops::FnOnce<(*mut &u32,)>`\n+              found type `std::ops::FnOnce<(*mut &'a u32,)>`\n+note: the lifetime 'a as defined on the function body at 9:10...\n+  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+   |\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n+   |          ^^\n+   = note: ...does not necessarily outlive lifetime RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })\n+\n+error: aborting due to 7 previous errors\n \n-Some errors occurred: E0271, E0631.\n-For more information about an error, try `rustc --explain E0271`.\n+Some errors occurred: E0308, E0631.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "0f28e5dfd7ee018d1a4efcd0f4028fc50ad1505b", "filename": "src/test/ui/mismatched_types/closure-mismatch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -5,6 +5,5 @@ impl<T: Fn(&())> Foo for T {}\n fn baz<T: Foo>(_: T) {}\n \n fn main() {\n-    baz(|_| ()); //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n+    baz(|_| ()); //~ ERROR E0495\n }"}, {"sha": "f028817a935a7568c89bbbb8eef8022d5399b9f6", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,32 +1,15 @@\n-error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.rs:8:9: 8:15] as std::ops::FnOnce<(&'r (),)>>::Output == ()`\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n-LL |     baz(|_| ()); //~ ERROR type mismatch\n-   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n+LL |     baz(|_| ()); //~ ERROR E0495\n+   |     ^^^\n    |\n-   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n-note: required by `baz`\n-  --> $DIR/closure-mismatch.rs:5:1\n-   |\n-LL | fn baz<T: Foo>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-mismatch.rs:8:5\n-   |\n-LL |     baz(|_| ()); //~ ERROR type mismatch\n-   |     ^^^ ------ found signature of `fn(_) -> _`\n-   |     |\n-   |     expected signature of `for<'r> fn(&'r ()) -> _`\n-   |\n-   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n-note: required by `baz`\n-  --> $DIR/closure-mismatch.rs:5:1\n-   |\n-LL | fn baz<T: Foo>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U6, name: BrAnon(0) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U6, name: BrAnon(0) })...\n+   = note: ...so that the types are compatible:\n+           expected for<'r> std::ops::Fn<(&'r (),)>\n+              found std::ops::Fn<(&(),)>\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0271, E0631.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "e5514d32c4e9fceb3b4e304d81a8ac5584a7eeef", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -17,7 +17,7 @@ fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n+    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0495\n }\n \n fn e() {"}, {"sha": "3824755fa06f59316065c56afcd08c84b885ecca", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -16,16 +16,19 @@ LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n LL |     a(x, y); //~ ERROR lifetime mismatch [E0623]\n    |       ^ ...but data from `y` flows into `x` here\n \n-error[E0308]: mismatched types\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:20:43\n    |\n-LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n-   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n+LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0495\n+   |                                           ^\n    |\n-   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n+   = note: ...so that the expression is assignable:\n+           expected for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)\n+              found for<'r, 's> fn(&'r mut &isize, &'s mut &isize)\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0308, E0623.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors occurred: E0495, E0623.\n+For more information about an error, try `rustc --explain E0495`."}, {"sha": "3e635300d7b6810dd84a07dbd7ab7b12f0be2f17", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -19,7 +19,7 @@ fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n+    let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR E0495\n }\n \n fn e() {"}, {"sha": "f694d312640708184b8e2ad63a27c793b30be426", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -27,16 +27,19 @@ LL | fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n LL |     a(x, y, z); //~ ERROR lifetime mismatch [E0623]\n    |       ^ ...but data from `y` flows into `x` here\n \n-error[E0308]: mismatched types\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:22:56\n    |\n-LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n-   |                                                        ^ expected concrete lifetime, found bound lifetime parameter\n+LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR E0495\n+   |                                                        ^\n    |\n-   = note: expected type `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found type `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n+   = note: ...so that the expression is assignable:\n+           expected for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)\n+              found for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize)\n \n error: aborting due to 4 previous errors\n \n-Some errors occurred: E0308, E0623.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors occurred: E0495, E0623.\n+For more information about an error, try `rustc --explain E0495`."}, {"sha": "6ebfc3f80d2521e79716b09eebb2f126467433ae", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -17,7 +17,7 @@ fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n fn d() {\n     // 'a and 'b are early bound in the function `a` because they appear\n     // inconstraints:\n-    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n+    let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0495\n }\n \n fn e() {"}, {"sha": "20e28e8877fcad8cfa2f1a59bff2d916db3f4dd9", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -16,16 +16,19 @@ LL | fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n LL |     a(x, y); //~ ERROR lifetime mismatch [E0623]\n    |       ^ ...but data from `y` flows into `x` here\n \n-error[E0308]: mismatched types\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/regions-lifetime-bounds-on-fns.rs:20:43\n    |\n-LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n-   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n+LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR E0495\n+   |                                           ^\n    |\n-   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U1, name: BrAnon(1) })...\n+   = note: ...so that the expression is assignable:\n+           expected for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)\n+              found for<'r, 's> fn(&'r mut &isize, &'s mut &isize)\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0308, E0623.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors occurred: E0495, E0623.\n+For more information about an error, try `rustc --explain E0495`."}, {"sha": "c69055fe0cc828dc7e9653154b6bd73287e28653", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -18,6 +18,5 @@ fn foo<T>(x: &T)\n {}\n \n fn main() {\n-    foo(&X);\n-    //~^ error: `for<'a> &'a _: Bar` is not satisfied\n+    foo(&X); //~ ERROR E0308\n }"}, {"sha": "04d7bbabb2a575106db908024c0290b207fa2e40", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c96ff15249a73736222d41d87ade7013440945/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=d3c96ff15249a73736222d41d87ade7013440945", "patch": "@@ -1,19 +1,14 @@\n-error[E0277]: the trait bound `for<'a> &'a _: Bar` is not satisfied\n+error[E0308]: mismatched types\n   --> $DIR/where-for-self-2.rs:21:5\n    |\n-LL |     foo(&X);\n-   |     ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n+LL |     foo(&X); //~ ERROR E0308\n+   |     ^^^ lifetime mismatch\n    |\n-   = help: the following implementations were found:\n-             <&'static u32 as Bar>\n-note: required by `foo`\n-  --> $DIR/where-for-self-2.rs:16:1\n-   |\n-LL | / fn foo<T>(x: &T)\n-LL | |     where for<'a> &'a T: Bar\n-LL | | {}\n-   | |__^\n+   = note: expected type `Bar`\n+              found type `Bar`\n+   = note: lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:10), 'a) })...\n+   = note: ...does not necessarily outlive the static lifetime\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}]}