{"sha": "434fa8c26dc3337a688c5d1c8fd077e799ff052e", "node_id": "C_kwDOAAsO6NoAKDQzNGZhOGMyNmRjMzMzN2E2ODhjNWQxYzhmZDA3N2U3OTlmZjA1MmU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-30T14:53:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-06-01T21:41:58Z"}, "message": "Add e2e mir test for checked arithmetic.", "tree": {"sha": "aa20f9fa629830dd4b5d768220cfb1b047f41dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa20f9fa629830dd4b5d768220cfb1b047f41dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/434fa8c26dc3337a688c5d1c8fd077e799ff052e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/434fa8c26dc3337a688c5d1c8fd077e799ff052e", "html_url": "https://github.com/rust-lang/rust/commit/434fa8c26dc3337a688c5d1c8fd077e799ff052e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/434fa8c26dc3337a688c5d1c8fd077e799ff052e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c6f137d9a2ee2d53149876317ea9775ee23dd30", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6f137d9a2ee2d53149876317ea9775ee23dd30", "html_url": "https://github.com/rust-lang/rust/commit/2c6f137d9a2ee2d53149876317ea9775ee23dd30"}], "stats": {"total": 285, "additions": 285, "deletions": 0}, "files": [{"sha": "75c4c56dd67c7c4a6ac3d406b0066c67dee4046f", "filename": "tests/mir-opt/pre-codegen/checked_ops.checked_shl.PreCodegen.after.mir", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/434fa8c26dc3337a688c5d1c8fd077e799ff052e/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/434fa8c26dc3337a688c5d1c8fd077e799ff052e/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir?ref=434fa8c26dc3337a688c5d1c8fd077e799ff052e", "patch": "@@ -0,0 +1,160 @@\n+// MIR for `checked_shl` after PreCodegen\n+\n+fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n+    debug x => _1;                       // in scope 0 at $DIR/checked_ops.rs:+0:20: +0:21\n+    debug rhs => _2;                     // in scope 0 at $DIR/checked_ops.rs:+0:28: +0:31\n+    let mut _0: std::option::Option<u32>; // return place in scope 0 at $DIR/checked_ops.rs:+0:41: +0:52\n+    scope 1 (inlined core::num::<impl u32>::checked_shl) { // at $DIR/checked_ops.rs:14:7: 14:23\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _13: (u32, bool);        // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let _14: u32;                    // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let _15: bool;                   // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _16: bool;               // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        scope 2 {\n+            debug a => _14;              // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug b => _15;              // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        }\n+        scope 3 (inlined core::num::<impl u32>::overflowing_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug self => _1;            // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug rhs => _2;             // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            let mut _11: u32;            // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            let mut _12: bool;           // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            scope 4 (inlined core::num::<impl u32>::wrapping_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _1;        // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug rhs => _2;         // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                let mut _3: u32;         // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                let mut _4: u32;         // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                scope 5 {\n+                    scope 6 (inlined core::num::<impl u32>::unchecked_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                        debug self => _1; // in scope 6 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                        debug rhs => _4; // in scope 6 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                        let mut _5: (u32,); // in scope 6 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        let mut _6: u32; // in scope 6 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        let mut _10: u32; // in scope 6 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        scope 7 {\n+                            scope 8 (inlined core::num::<impl u32>::unchecked_shl::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                debug x => _6; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                let mut _7: std::result::Result<u32, std::convert::Infallible>; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                let mut _9: std::option::Option<u32>; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                scope 9 {\n+                                    scope 10 (inlined <u32 as TryInto<u32>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                        debug self => _6; // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                        scope 11 (inlined <u32 as TryFrom<u32>>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                            debug value => _6; // in scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                            scope 21 (inlined <u32 as Into<u32>>::into) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                debug self => _6; // in scope 21 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                scope 22 (inlined <u32 as From<u32>>::from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                    debug t => _6; // in scope 22 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                    scope 12 (inlined Result::<u32, Infallible>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                        debug self => _7; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        let _8: u32; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        scope 13 {\n+                                            debug x => _8; // in scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        }\n+                                    }\n+                                    scope 14 (inlined #[track_caller] Option::<u32>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                        debug self => _9; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        let mut _17: &std::option::Option<u32>; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        scope 15 {\n+                                            debug val => _10; // in scope 15 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        }\n+                                        scope 16 {\n+                                            scope 18 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                                                scope 19 {\n+                                                    scope 20 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                        scope 17 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                                            debug self => _17; // in scope 17 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_14);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageLive(_15);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageLive(_13);                // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_3);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _3 = const 31_u32;               // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _4 = BitAnd(_2, move _3);        // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_3);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_10);                // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _5 = (_4,);                      // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _6 = move (_5.0: u32);           // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_9);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_7);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _7 = Result::<u32, Infallible>::Ok(_6); // scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _8 = move ((_7 as Ok).0: u32);   // scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _9 = Option::<u32>::Some(move _8); // scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_8);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_7);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _10 = move ((_9 as Some).0: u32); // scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _11 = unchecked_shl::<u32>(_1, move _10) -> [return: bb1, unwind unreachable]; // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32, u32) -> u32 {unchecked_shl::<u32>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_10);                // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_4);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_12);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _12 = Ge(_2, const _);           // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _13 = (move _11, move _12);      // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_12);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _14 = (_13.0: u32);              // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _15 = (_13.1: bool);             // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_13);                // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_16);                // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _16 = unlikely(_15) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                         // + literal: Const { ty: extern \"rust-intrinsic\" fn(bool) -> bool {unlikely}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        switchInt(move _16) -> [0: bb3, otherwise: bb4]; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        _0 = Option::<u32>::Some(_14);   // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+    }\n+\n+    bb4: {\n+        _0 = Option::<u32>::None;        // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        StorageDead(_16);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_15);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageDead(_14);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        return;                          // scope 0 at $DIR/checked_ops.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "fc7626cce1785461e8bdf6872c533227864524ad", "filename": "tests/mir-opt/pre-codegen/checked_ops.ilog2.PreCodegen.after.mir", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/434fa8c26dc3337a688c5d1c8fd077e799ff052e/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.ilog2.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/434fa8c26dc3337a688c5d1c8fd077e799ff052e/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.ilog2.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.ilog2.PreCodegen.after.mir?ref=434fa8c26dc3337a688c5d1c8fd077e799ff052e", "patch": "@@ -0,0 +1,41 @@\n+// MIR for `ilog2` after PreCodegen\n+\n+fn ilog2(_1: u32) -> u32 {\n+    debug x => _1;                       // in scope 0 at $DIR/checked_ops.rs:+0:14: +0:15\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/checked_ops.rs:+0:25: +0:28\n+    scope 1 (inlined #[track_caller] core::num::<impl u32>::ilog2) { // at $DIR/checked_ops.rs:19:7: 19:14\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _2: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _3: isize;               // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _4: !;                   // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        scope 2 {\n+            debug log => _0;             // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _2 = core::num::<impl u32>::checked_ilog2(_1) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32) -> Option<u32> {core::num::<impl u32>::checked_ilog2}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        _3 = discriminant(_2);           // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        switchInt(move _3) -> [1: bb2, otherwise: bb3]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        _0 = ((_2 as Some).0: u32);      // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_2);                 // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/checked_ops.rs:+2:2: +2:2\n+    }\n+\n+    bb3: {\n+        _4 = core::num::int_log10::panic_for_nonpositive_argument(); // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: fn() -> ! {core::num::int_log10::panic_for_nonpositive_argument}, val: Value(<ZST>) }\n+    }\n+}"}, {"sha": "5a751362c09f3bd7921464a9839c9df0ee15e91d", "filename": "tests/mir-opt/pre-codegen/checked_ops.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/434fa8c26dc3337a688c5d1c8fd077e799ff052e/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434fa8c26dc3337a688c5d1c8fd077e799ff052e/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs?ref=434fa8c26dc3337a688c5d1c8fd077e799ff052e", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -O -Zmir-opt-level=2 -Cdebuginfo=2\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+#![feature(step_trait)]\n+\n+// EMIT_MIR checked_ops.step_forward.PreCodegen.after.mir\n+pub fn step_forward(x: u32, n: usize) -> u32 {\n+    std::iter::Step::forward(x, n)\n+}\n+\n+// EMIT_MIR checked_ops.checked_shl.PreCodegen.after.mir\n+pub fn checked_shl(x: u32, rhs: u32) -> Option<u32> {\n+    x.checked_shl(rhs)\n+}\n+\n+// EMIT_MIR checked_ops.ilog2.PreCodegen.after.mir\n+pub fn ilog2(x: u32) -> u32 {\n+    x.ilog2()\n+}"}, {"sha": "d61aac7d73bde425e868b590a998b8381204850b", "filename": "tests/mir-opt/pre-codegen/checked_ops.step_forward.PreCodegen.after.mir", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/434fa8c26dc3337a688c5d1c8fd077e799ff052e/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/434fa8c26dc3337a688c5d1c8fd077e799ff052e/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir?ref=434fa8c26dc3337a688c5d1c8fd077e799ff052e", "patch": "@@ -0,0 +1,64 @@\n+// MIR for `step_forward` after PreCodegen\n+\n+fn step_forward(_1: u32, _2: usize) -> u32 {\n+    debug x => _1;                       // in scope 0 at $DIR/checked_ops.rs:+0:21: +0:22\n+    debug n => _2;                       // in scope 0 at $DIR/checked_ops.rs:+0:29: +0:30\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/checked_ops.rs:+0:42: +0:45\n+    scope 1 (inlined <u32 as Step>::forward) { // at $DIR/checked_ops.rs:9:5: 9:35\n+        debug start => _1;               // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        debug n => _2;                   // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        let _3: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        let mut _4: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        let mut _7: bool;                // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        let mut _8: u32;                 // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        scope 2 {\n+        }\n+        scope 3 (inlined Option::<u32>::is_none) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            debug self => _4;            // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+            let mut _6: bool;            // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+            scope 4 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                debug self => _4;        // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _5: isize;       // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+            }\n+        }\n+        scope 5 (inlined core::num::<impl u32>::wrapping_add) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            debug self => _1;            // in scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug rhs => _8;             // in scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_3);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _3 = <u32 as Step>::forward_checked(_1, _2) -> bb1; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32, usize) -> Option<u32> {<u32 as Step>::forward_checked}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        _4 = &_3;                        // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _5 = discriminant((*_4));        // scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _6 = Eq(_5, const 1_isize);      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _7 = Not(move _6);               // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        assert(!const true, \"attempt to compute `{} + {}`, which would overflow\", const _, const 1_u32) -> bb3; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _8 = _2 as u32 (IntToInt);       // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _0 = Add(_1, _8);                // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_8);                 // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        return;                          // scope 0 at $DIR/checked_ops.rs:+2:2: +2:2\n+    }\n+}"}]}