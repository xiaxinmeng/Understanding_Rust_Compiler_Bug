{"sha": "f9c768864a7784c518b6ac1af6515950c6eff6ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5Yzc2ODg2NGE3Nzg0YzUxOGI2YWMxYWY2NTE1OTUwYzZlZmY2ZWM=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-14T14:08:39Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-14T21:00:40Z"}, "message": "Use places instead of ptrs to write packed immtys", "tree": {"sha": "c32a63cd3d10749d918f6a4f7aa009935ff6e87f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c32a63cd3d10749d918f6a4f7aa009935ff6e87f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c768864a7784c518b6ac1af6515950c6eff6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c768864a7784c518b6ac1af6515950c6eff6ec", "html_url": "https://github.com/rust-lang/rust/commit/f9c768864a7784c518b6ac1af6515950c6eff6ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c768864a7784c518b6ac1af6515950c6eff6ec/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50618b55cd8c2cd8da905697fe80e5f3a519fb3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/50618b55cd8c2cd8da905697fe80e5f3a519fb3b", "html_url": "https://github.com/rust-lang/rust/commit/50618b55cd8c2cd8da905697fe80e5f3a519fb3b"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "9107958e010ce9e25e83930e8c02c39408b23ef7", "filename": "src/helpers.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9c768864a7784c518b6ac1af6515950c6eff6ec/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c768864a7784c518b6ac1af6515950c6eff6ec/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f9c768864a7784c518b6ac1af6515950c6eff6ec", "patch": "@@ -318,27 +318,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     // Writes several `ImmTy`s contiguosly into memory. This is useful when you have to pack\n     // different values into a struct.\n-    fn write_immediates(\n+    fn write_packed_immediates(\n         &mut self,\n-        ptr: &Pointer<Tag>,\n+        place: &MPlaceTy<'tcx, Tag>,\n         imms: &[ImmTy<'tcx, Tag>],\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         let tcx = &{ this.tcx.tcx };\n \n-        let allocation = this.memory_mut().get_mut(ptr.alloc_id)?;\n         let mut offset = Size::from_bytes(0);\n \n-        for imm in imms {\n-            let size = imm.layout.size;\n-            allocation.write_scalar(\n-                tcx,\n-                ptr.offset(offset, tcx)?,\n-                imm.to_scalar()?.into(),\n-                size,\n+        for &imm in imms {\n+            this.write_immediate_to_mplace(\n+                *imm,\n+                place.offset(offset, None, imm.layout, tcx)?,\n             )?;\n-            offset += size;\n+            offset += imm.layout.size;\n         }\n \n         Ok(())"}, {"sha": "0153c1a912df53b8a0f501c386dec3c10dccc898", "filename": "src/shims/time.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9c768864a7784c518b6ac1af6515950c6eff6ec/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c768864a7784c518b6ac1af6515950c6eff6ec/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=f9c768864a7784c518b6ac1af6515950c6eff6ec", "patch": "@@ -10,7 +10,7 @@ use crate::*;\n fn get_time<'tcx>() -> InterpResult<'tcx, Duration> {\n     SystemTime::now()\n         .duration_since(SystemTime::UNIX_EPOCH)\n-        .map_err(|_| err_unsup_format!(\"Time went backwards\").into())\n+        .map_err(|_| err_unsup_format!(\"Times before the Unix epoch are not supported\").into())\n }\n \n fn int_to_immty_checked<'tcx>(\n@@ -52,7 +52,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n-        let tp = this.force_ptr(this.read_scalar(tp_op)?.not_undef()?)?;\n+        let tp = this.deref_operand(tp_op)?;\n \n         let duration = get_time()?;\n         let tv_sec = duration.as_secs() as i128;\n@@ -63,11 +63,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             int_to_immty_checked(tv_nsec, this.libc_ty_layout(\"c_long\")?)?,\n         ];\n \n-        this.write_immediates(&tp, &imms)?;\n+        this.write_packed_immediates(&tp, &imms)?;\n \n         Ok(0)\n     }\n-    // Foreign function used by generic unix\n+    // Foreign function used by generic unix (in particular macOS)\n     fn gettimeofday(\n         &mut self,\n         tv_op: OpTy<'tcx, Tag>,\n@@ -86,7 +86,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n-        let tv = this.force_ptr(this.read_scalar(tv_op)?.not_undef()?)?;\n+        let tv = this.deref_operand(tv_op)?;\n \n         let duration = get_time()?;\n         let tv_sec = duration.as_secs() as i128;\n@@ -97,7 +97,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             int_to_immty_checked(tv_usec, this.libc_ty_layout(\"suseconds_t\")?)?,\n         ];\n \n-        this.write_immediates(&tv, &imms)?;\n+        this.write_packed_immediates(&tv, &imms)?;\n \n         Ok(0)\n     }"}, {"sha": "23f45f91ada14dd5d1c066ac8c782fc1a9731425", "filename": "tests/run-pass/clock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9c768864a7784c518b6ac1af6515950c6eff6ec/tests%2Frun-pass%2Fclock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c768864a7784c518b6ac1af6515950c6eff6ec/tests%2Frun-pass%2Fclock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclock.rs?ref=f9c768864a7784c518b6ac1af6515950c6eff6ec", "patch": "@@ -1,3 +1,4 @@\n+// ignore-windows: TODO clock shims are not implemented on Windows\n // compile-flags: -Zmiri-disable-isolation\n \n use std::time::SystemTime;"}]}