{"sha": "99f9f576d46607e74f07c25a860de499dbce5c4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZjlmNTc2ZDQ2NjA3ZTc0ZjA3YzI1YTg2MGRlNDk5ZGJjZTVjNGQ=", "commit": {"author": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2019-10-25T06:05:24Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-10-25T06:05:24Z"}, "message": "Return an error if `--check` or `--emit json` are used with stdin. (#3875)", "tree": {"sha": "41ce48d17dac6a52b3f8b631ea35fe6cbc18aae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ce48d17dac6a52b3f8b631ea35fe6cbc18aae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99f9f576d46607e74f07c25a860de499dbce5c4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99f9f576d46607e74f07c25a860de499dbce5c4d", "html_url": "https://github.com/rust-lang/rust/commit/99f9f576d46607e74f07c25a860de499dbce5c4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99f9f576d46607e74f07c25a860de499dbce5c4d/comments", "author": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69cf48344b14f596bcc91db01c24e76b5b2f37ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/69cf48344b14f596bcc91db01c24e76b5b2f37ad", "html_url": "https://github.com/rust-lang/rust/commit/69cf48344b14f596bcc91db01c24e76b5b2f37ad"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "661502a2e0e98124dd8fba0f350de49e53370686", "filename": "src/bin/main.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/99f9f576d46607e74f07c25a860de499dbce5c4d/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f9f576d46607e74f07c25a860de499dbce5c4d/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=99f9f576d46607e74f07c25a860de499dbce5c4d", "patch": "@@ -73,6 +73,14 @@ pub enum OperationError {\n     /// An io error during reading or writing.\n     #[fail(display = \"io error: {}\", _0)]\n     IoError(IoError),\n+    /// Attempt to use --check with stdin, which isn't currently\n+    /// supported.\n+    #[fail(display = \"The `--check` option is not supported with standard input.\")]\n+    CheckWithStdin,\n+    /// Attempt to use --emit=json with stdin, which isn't currently\n+    /// supported.\n+    #[fail(display = \"Using `--emit` other than stdout is not supported with standard input.\")]\n+    EmitWithStdin,\n }\n \n impl From<IoError> for OperationError {\n@@ -242,6 +250,14 @@ fn format_string(input: String, options: GetOptsOptions) -> Result<i32, FailureE\n     // try to read config from local directory\n     let (mut config, _) = load_config(Some(Path::new(\".\")), Some(options.clone()))?;\n \n+    if options.check {\n+        return Err(OperationError::CheckWithStdin.into());\n+    }\n+    if let Some(emit_mode) = options.emit_mode {\n+        if emit_mode != EmitMode::Stdout {\n+            return Err(OperationError::EmitWithStdin.into());\n+        }\n+    }\n     // emit mode is always Stdout for Stdin.\n     config.set().emit_mode(EmitMode::Stdout);\n     config.set().verbose(Verbosity::Quiet);\n@@ -486,7 +502,7 @@ struct GetOptsOptions {\n     verbose: bool,\n     config_path: Option<PathBuf>,\n     inline_config: HashMap<String, String>,\n-    emit_mode: EmitMode,\n+    emit_mode: Option<EmitMode>,\n     backup: bool,\n     check: bool,\n     edition: Option<Edition>,\n@@ -574,7 +590,7 @@ impl GetOptsOptions {\n                 return Err(format_err!(\"Invalid to use `--emit` and `--check`\"));\n             }\n \n-            options.emit_mode = emit_mode_from_emit_str(emit_str)?;\n+            options.emit_mode = Some(emit_mode_from_emit_str(emit_str)?);\n         }\n \n         if let Some(ref edition_str) = matches.opt_str(\"edition\") {\n@@ -590,11 +606,13 @@ impl GetOptsOptions {\n         }\n \n         if !rust_nightly {\n-            if !STABLE_EMIT_MODES.contains(&options.emit_mode) {\n-                return Err(format_err!(\n-                    \"Invalid value for `--emit` - using an unstable \\\n-                     value without `--unstable-features`\",\n-                ));\n+            if let Some(ref emit_mode) = options.emit_mode {\n+                if !STABLE_EMIT_MODES.contains(emit_mode) {\n+                    return Err(format_err!(\n+                        \"Invalid value for `--emit` - using an unstable \\\n+                         value without `--unstable-features`\",\n+                    ));\n+                }\n             }\n         }\n \n@@ -643,8 +661,8 @@ impl CliOptions for GetOptsOptions {\n         }\n         if self.check {\n             config.set().emit_mode(EmitMode::Diff);\n-        } else {\n-            config.set().emit_mode(self.emit_mode);\n+        } else if let Some(emit_mode) = self.emit_mode {\n+            config.set().emit_mode(emit_mode);\n         }\n         if self.backup {\n             config.set().make_backup(true);"}]}