{"sha": "8c718bd3f657003f603ea6d4435f8d83752f0751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzE4YmQzZjY1NzAwM2Y2MDNlYTZkNDQzNWY4ZDgzNzUyZjA3NTE=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-04T09:43:24Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-04T10:24:54Z"}, "message": "Attempt to gather similar stats as rusage on Windows", "tree": {"sha": "723c2aaf8ce030909316a4258239dbfdadba6ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/723c2aaf8ce030909316a4258239dbfdadba6ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c718bd3f657003f603ea6d4435f8d83752f0751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c718bd3f657003f603ea6d4435f8d83752f0751", "html_url": "https://github.com/rust-lang/rust/commit/8c718bd3f657003f603ea6d4435f8d83752f0751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c718bd3f657003f603ea6d4435f8d83752f0751/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939b14334dfec68d85b01b62c1be0172cee03339", "url": "https://api.github.com/repos/rust-lang/rust/commits/939b14334dfec68d85b01b62c1be0172cee03339", "html_url": "https://github.com/rust-lang/rust/commit/939b14334dfec68d85b01b62c1be0172cee03339"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "c14ad6fa5fff4db8878dfe05b24f3b81d647d6a2", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c718bd3f657003f603ea6d4435f8d83752f0751/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8c718bd3f657003f603ea6d4435f8d83752f0751/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=8c718bd3f657003f603ea6d4435f8d83752f0751", "patch": "@@ -53,7 +53,7 @@ merge = \"0.1.0\"\n \n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\"\n-features = [\"fileapi\", \"ioapiset\", \"jobapi2\", \"handleapi\", \"winioctl\"]\n+features = [\"fileapi\", \"ioapiset\", \"jobapi2\", \"handleapi\", \"winioctl\", \"psapi\", \"impl-default\"]\n \n [dev-dependencies]\n pretty_assertions = \"0.6\""}, {"sha": "fb9f21bfd3c1fc45b307f809e5323626ab02be2b", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 67, "deletions": 5, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8c718bd3f657003f603ea6d4435f8d83752f0751/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c718bd3f657003f603ea6d4435f8d83752f0751/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=8c718bd3f657003f603ea6d4435f8d83752f0751", "patch": "@@ -156,9 +156,11 @@ fn main() {\n     }\n \n     let start = Instant::now();\n-    let status = {\n+    let (child, status) = {\n         let errmsg = format!(\"\\nFailed to run:\\n{:?}\\n-------------\", cmd);\n-        cmd.status().expect(&errmsg)\n+        let mut child = cmd.spawn().expect(&errmsg);\n+        let status = child.wait().expect(&errmsg);\n+        (child, status)\n     };\n \n     if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some()\n@@ -169,8 +171,19 @@ fn main() {\n             let is_test = args.iter().any(|a| a == \"--test\");\n             // If the user requested resource usage data, then\n             // include that in addition to the timing output.\n-            let rusage_data =\n-                env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| format_rusage_data());\n+            let rusage_data = env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| {\n+                #[cfg(windows)]\n+                {\n+                    use std::os::windows::io::AsRawHandle;\n+                    let handle = child.as_raw_handle();\n+                    format_rusage_data(handle)\n+                }\n+                #[cfg(not(windows))]\n+                {\n+                    let _child = child;\n+                    format_rusage_data()\n+                }\n+            });\n             eprintln!(\n                 \"[RUSTC-TIMING] {} test:{} {}.{:03}{}{}\",\n                 crate_name,\n@@ -207,13 +220,62 @@ fn main() {\n     }\n }\n \n-#[cfg(not(unix))]\n+#[cfg(all(not(unix), not(windows)))]\n /// getrusage is not available on non-unix platforms. So for now, we do not\n /// bother trying to make a shim for it.\n fn format_rusage_data() -> Option<String> {\n     None\n }\n \n+#[cfg(windows)]\n+fn format_rusage_data(handle: std::os::windows::raw::HANDLE) -> Option<String> {\n+    macro_rules! try_bool {\n+        ($e:expr) => {\n+            if $e != 1 {\n+                return None;\n+            }\n+        };\n+    }\n+    unsafe {\n+        let mut _filetime = winapi::shared::minwindef::FILETIME::default();\n+        let mut user_filetime = winapi::shared::minwindef::FILETIME::default();\n+        let mut kernel_filetime = winapi::shared::minwindef::FILETIME::default();\n+        try_bool!(winapi::um::processthreadsapi::GetProcessTimes(\n+            handle,\n+            &mut _filetime,\n+            &mut _filetime,\n+            &mut kernel_filetime,\n+            &mut user_filetime,\n+        ));\n+        let mut memory_counters = winapi::um::psapi::PROCESS_MEMORY_COUNTERS_EX::default();\n+        try_bool!(winapi::um::psapi::GetProcessMemoryInfo(\n+            handle as _,\n+            &mut memory_counters as *mut _ as _,\n+            std::mem::size_of::<winapi::um::psapi::PROCESS_MEMORY_COUNTERS_EX>() as u32,\n+        ));\n+        let mut user_time = winapi::um::minwinbase::SYSTEMTIME::default();\n+        try_bool!(winapi::um::timezoneapi::FileTimeToSystemTime(&user_filetime, &mut user_time));\n+        let mut kernel_time = winapi::um::minwinbase::SYSTEMTIME::default();\n+        try_bool!(winapi::um::timezoneapi::FileTimeToSystemTime(\n+            &kernel_filetime,\n+            &mut kernel_time\n+        ));\n+        let maxrss = memory_counters.PeakWorkingSetSize / 1024;\n+        Some(format!(\n+            \"user: {USER_SEC}.{USER_USEC:03} \\\n+         sys: {SYS_SEC}.{SYS_USEC:03} \\\n+         max rss (kb): {MAXRSS} \\\n+         page faults: {PAGE_FAULTS}\",\n+            USER_SEC = user_time.wSecond + (user_time.wMinute * 60),\n+            USER_USEC = user_time.wMilliseconds,\n+            SYS_SEC = kernel_time.wSecond + (kernel_time.wMinute * 60),\n+            SYS_USEC = kernel_time.wMilliseconds,\n+            MAXRSS = maxrss,\n+            PAGE_FAULTS = memory_counters.PageFaultCount,\n+        ))\n+    }\n+}\n+\n #[cfg(unix)]\n /// Tries to build a string with human readable data for several of the rusage\n /// fields. Note that we are focusing mainly on data that we believe to be"}]}