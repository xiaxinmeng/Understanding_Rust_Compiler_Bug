{"sha": "66adf52e7dfd68f04e60744ea9bf130c45befe5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YWRmNTJlN2RmZDY4ZjA0ZTYwNzQ0ZWE5YmYxMzBjNDViZWZlNWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T14:44:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T14:44:54Z"}, "message": "miri: give non-generic functions a stable address", "tree": {"sha": "ec29c4358d1921a13a4de039178ad5b5c3f1070f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec29c4358d1921a13a4de039178ad5b5c3f1070f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66adf52e7dfd68f04e60744ea9bf130c45befe5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66adf52e7dfd68f04e60744ea9bf130c45befe5e", "html_url": "https://github.com/rust-lang/rust/commit/66adf52e7dfd68f04e60744ea9bf130c45befe5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66adf52e7dfd68f04e60744ea9bf130c45befe5e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312f3827faa8dc3b8e1dc8c1ad685a6222f16f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/312f3827faa8dc3b8e1dc8c1ad685a6222f16f03", "html_url": "https://github.com/rust-lang/rust/commit/312f3827faa8dc3b8e1dc8c1ad685a6222f16f03"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "bb25d1b42095ae6713ce4efb65d6a15b083cabcc", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/66adf52e7dfd68f04e60744ea9bf130c45befe5e/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66adf52e7dfd68f04e60744ea9bf130c45befe5e/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=66adf52e7dfd68f04e60744ea9bf130c45befe5e", "patch": "@@ -27,7 +27,7 @@ pub use self::pointer::{Pointer, PointerArithmetic};\n use std::fmt;\n use crate::mir;\n use crate::hir::def_id::DefId;\n-use crate::ty::{self, TyCtxt, Instance};\n+use crate::ty::{self, TyCtxt, Instance, subst::UnpackedKind};\n use crate::ty::layout::{self, Size};\n use std::io;\n use crate::rustc_serialize::{Encoder, Decodable, Encodable};\n@@ -318,14 +318,29 @@ impl<'tcx> AllocMap<'tcx> {\n         id\n     }\n \n-    /// Functions cannot be identified by pointers, as asm-equal functions can get deduplicated\n-    /// by the linker and functions can be duplicated across crates.\n-    /// We thus generate a new `AllocId` for every mention of a function. This means that\n-    /// `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> AllocId {\n-        let id = self.reserve();\n-        self.id_to_kind.insert(id, AllocKind::Function(instance));\n-        id\n+        // Functions cannot be identified by pointers, as asm-equal functions can get deduplicated\n+        // by the linker (we set the \"unnamed_addr\" attribute for LLVM) and functions can be\n+        // duplicated across crates.\n+        // We thus generate a new `AllocId` for every mention of a function. This means that\n+        // `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n+        // However, formatting code relies on function identity (see #58320), so we only do\n+        // this for generic functions.  Lifetime parameters are ignored.\n+        let is_generic = instance.substs.into_iter().any(|kind| {\n+            match kind.unpack() {\n+                UnpackedKind::Lifetime(_) => false,\n+                _ => true,\n+            }\n+        });\n+        if is_generic {\n+            // Get a fresh ID\n+            let id = self.reserve();\n+            self.id_to_kind.insert(id, AllocKind::Function(instance));\n+            id\n+        } else {\n+            // Deduplicate\n+            self.intern(AllocKind::Function(instance))\n+        }\n     }\n \n     /// Returns `None` in case the `AllocId` is dangling. An `EvalContext` can still have a"}]}