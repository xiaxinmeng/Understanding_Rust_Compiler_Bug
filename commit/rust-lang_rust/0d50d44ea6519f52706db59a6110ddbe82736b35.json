{"sha": "0d50d44ea6519f52706db59a6110ddbe82736b35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNTBkNDRlYTY1MTlmNTI3MDZkYjU5YTYxMTBkZGJlODI3MzZiMzU=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-04-03T19:06:39Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-04-05T14:07:39Z"}, "message": "use a multispan for MANY_SINGLE_CHAR_NAMES", "tree": {"sha": "c1dfcc1f456f01f7c2cbb5008b7c8b8459f9af09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1dfcc1f456f01f7c2cbb5008b7c8b8459f9af09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d50d44ea6519f52706db59a6110ddbe82736b35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlynYS0WHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdC1CB/4968ZcUqqhqp5G5CKt3IpLPHQe\nTwSFVGYyom1+4y9J6B2RF9EUsZOZGepuY2//UpjkRzaoZLDnBWm+SHWWGGuXOTez\n3i5AdApEkLl5se+dlnkAGSCBmNylJzrFFIZMNwmhdBw5we8vTiM/2vBa/wxj0blS\nagX0wRURaRqKsutXq+fbSPVlU6OkpjDY4S/gtB23HZB1LMPiNnuFNSpvFNjC6XeB\n2VfzX1tLDEiYw/xk8k3fQrY4cPSVGtT1/KW9nUgfWMh4Udcv7jIEuAbTPaxsM4IJ\n34M3Ro5DS6EClP07AUXp/hJJ/YDedmf09HZoImmw5SN4h026mI0iivz8tt8r\n=i/IG\n-----END PGP SIGNATURE-----", "payload": "tree c1dfcc1f456f01f7c2cbb5008b7c8b8459f9af09\nparent 17e04ac751411a16d305aaf8d47a900675ad93f5\nauthor Andy Russell <arussell123@gmail.com> 1554318399 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1554473259 -0400\n\nuse a multispan for MANY_SINGLE_CHAR_NAMES\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d50d44ea6519f52706db59a6110ddbe82736b35", "html_url": "https://github.com/rust-lang/rust/commit/0d50d44ea6519f52706db59a6110ddbe82736b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d50d44ea6519f52706db59a6110ddbe82736b35/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17e04ac751411a16d305aaf8d47a900675ad93f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/17e04ac751411a16d305aaf8d47a900675ad93f5", "html_url": "https://github.com/rust-lang/rust/commit/17e04ac751411a16d305aaf8d47a900675ad93f5"}], "stats": {"total": 187, "additions": 142, "deletions": 45}, "files": [{"sha": "39d69d0bd51bfdea2d4e8036d7a9b7f21518d1a8", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 61, "deletions": 26, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/0d50d44ea6519f52706db59a6110ddbe82736b35/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d50d44ea6519f52706db59a6110ddbe82736b35/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=0d50d44ea6519f52706db59a6110ddbe82736b35", "patch": "@@ -88,7 +88,33 @@ struct SimilarNamesLocalVisitor<'a, 'tcx: 'a> {\n     names: Vec<ExistingName>,\n     cx: &'a EarlyContext<'tcx>,\n     lint: &'a NonExpressiveNames,\n-    single_char_names: Vec<char>,\n+\n+    /// A stack of scopes containing the single-character bindings in each scope.\n+    single_char_names: Vec<Vec<Ident>>,\n+}\n+\n+impl<'a, 'tcx: 'a> SimilarNamesLocalVisitor<'a, 'tcx> {\n+    fn check_single_char_names(&self) {\n+        let num_single_char_names = self.single_char_names.iter().flatten().count();\n+        let threshold = self.lint.single_char_binding_names_threshold;\n+        if num_single_char_names as u64 >= threshold {\n+            let span = self\n+                .single_char_names\n+                .iter()\n+                .flatten()\n+                .map(|ident| ident.span)\n+                .collect::<Vec<_>>();\n+            span_lint(\n+                self.cx,\n+                MANY_SINGLE_CHAR_NAMES,\n+                span,\n+                &format!(\n+                    \"{} bindings with single-character names in scope\",\n+                    num_single_char_names\n+                ),\n+            );\n+        }\n+    }\n }\n \n // this list contains lists of names that are allowed to be similar\n@@ -109,7 +135,7 @@ struct SimilarNamesNameVisitor<'a: 'b, 'tcx: 'a, 'b>(&'b mut SimilarNamesLocalVi\n impl<'a, 'tcx: 'a, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n     fn visit_pat(&mut self, pat: &'tcx Pat) {\n         match pat.node {\n-            PatKind::Ident(_, ident, _) => self.check_name(ident.span, ident.name),\n+            PatKind::Ident(_, ident, _) => self.check_ident(ident),\n             PatKind::Struct(_, ref fields, _) => {\n                 for field in fields {\n                     if !field.node.is_shorthand {\n@@ -140,44 +166,40 @@ fn whitelisted(interned_name: &str, list: &[&str]) -> bool {\n }\n \n impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n-    fn check_short_name(&mut self, c: char, span: Span) {\n-        // make sure we ignore shadowing\n-        if self.0.single_char_names.contains(&c) {\n+    fn check_short_ident(&mut self, ident: Ident) {\n+        // Ignore shadowing\n+        if self\n+            .0\n+            .single_char_names\n+            .iter()\n+            .flatten()\n+            .any(|id| id.name == ident.name)\n+        {\n             return;\n-        }\n-        self.0.single_char_names.push(c);\n-        if self.0.single_char_names.len() as u64 >= self.0.lint.single_char_binding_names_threshold {\n-            span_lint(\n-                self.0.cx,\n-                MANY_SINGLE_CHAR_NAMES,\n-                span,\n-                &format!(\n-                    \"{}th binding whose name is just one char\",\n-                    self.0.single_char_names.len()\n-                ),\n-            );\n+        } else if let Some(scope) = &mut self.0.single_char_names.last_mut() {\n+            scope.push(ident);\n         }\n     }\n+\n     #[allow(clippy::too_many_lines)]\n-    fn check_name(&mut self, span: Span, name: Name) {\n-        let interned_name = name.as_str();\n+    fn check_ident(&mut self, ident: Ident) {\n+        let interned_name = ident.name.as_str();\n         if interned_name.chars().any(char::is_uppercase) {\n             return;\n         }\n         if interned_name.chars().all(|c| c.is_digit(10) || c == '_') {\n             span_lint(\n                 self.0.cx,\n                 JUST_UNDERSCORES_AND_DIGITS,\n-                span,\n+                ident.span,\n                 \"consider choosing a more descriptive name\",\n             );\n             return;\n         }\n         let count = interned_name.chars().count();\n         if count < 3 {\n             if count == 1 {\n-                let c = interned_name.chars().next().expect(\"already checked\");\n-                self.check_short_name(c, span);\n+                self.check_short_ident(ident);\n             }\n             return;\n         }\n@@ -247,13 +269,13 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             span_lint_and_then(\n                 self.0.cx,\n                 SIMILAR_NAMES,\n-                span,\n+                ident.span,\n                 \"binding's name is too similar to existing binding\",\n                 |diag| {\n                     diag.span_note(existing_name.span, \"existing binding defined here\");\n                     if let Some(split) = split_at {\n                         diag.span_help(\n-                            span,\n+                            ident.span,\n                             &format!(\n                                 \"separate the discriminating character by an \\\n                                  underscore like: `{}_{}`\",\n@@ -269,7 +291,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n         self.0.names.push(ExistingName {\n             whitelist: get_whitelist(&interned_name).unwrap_or(&[]),\n             interned: interned_name,\n-            span,\n+            span: ident.span,\n             len: count,\n         });\n     }\n@@ -297,15 +319,25 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n         SimilarNamesNameVisitor(self).visit_pat(&*local.pat);\n     }\n     fn visit_block(&mut self, blk: &'tcx Block) {\n+        self.single_char_names.push(vec![]);\n+\n         self.apply(|this| walk_block(this, blk));\n+\n+        self.check_single_char_names();\n+        self.single_char_names.pop();\n     }\n     fn visit_arm(&mut self, arm: &'tcx Arm) {\n+        self.single_char_names.push(vec![]);\n+\n         self.apply(|this| {\n             // just go through the first pattern, as either all patterns\n             // bind the same bindings or rustc would have errored much earlier\n             SimilarNamesNameVisitor(this).visit_pat(&arm.pats[0]);\n             this.apply(|this| walk_expr(this, &arm.body));\n         });\n+\n+        self.check_single_char_names();\n+        self.single_char_names.pop();\n     }\n     fn visit_item(&mut self, _: &Item) {\n         // do not recurse into inner items\n@@ -335,14 +367,17 @@ fn do_check(lint: &mut NonExpressiveNames, cx: &EarlyContext<'_>, attrs: &[Attri\n             names: Vec::new(),\n             cx,\n             lint,\n-            single_char_names: Vec::new(),\n+            single_char_names: vec![vec![]],\n         };\n+\n         // initialize with function arguments\n         for arg in &decl.inputs {\n             SimilarNamesNameVisitor(&mut visitor).visit_pat(&arg.pat);\n         }\n         // walk all other bindings\n         walk_block(&mut visitor, blk);\n+\n+        visitor.check_single_char_names();\n     }\n }\n "}, {"sha": "5be0a67c64d0b2c435e9d7b60c33d6b767ec9b01", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d50d44ea6519f52706db59a6110ddbe82736b35/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d50d44ea6519f52706db59a6110ddbe82736b35/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=0d50d44ea6519f52706db59a6110ddbe82736b35", "patch": "@@ -5,7 +5,7 @@ use rustc::lint::{LateContext, Lint, LintContext};\n use rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart, SuggestionStyle};\n use std::env;\n use syntax::errors::DiagnosticBuilder;\n-use syntax::source_map::Span;\n+use syntax::source_map::{MultiSpan, Span};\n \n /// Wrapper around `DiagnosticBuilder` that adds a link to Clippy documentation for the emitted lint\n struct DiagnosticWrapper<'a>(DiagnosticBuilder<'a>);\n@@ -48,7 +48,7 @@ impl<'a> DiagnosticWrapper<'a> {\n /// 17 |     std::mem::forget(seven);\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n-pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: Span, msg: &str) {\n+pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n     DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg)).docs_link(lint);\n }\n "}, {"sha": "301ff2761206a879433cda57b0f9f1cf8b9a052c", "filename": "tests/ui/non_expressive_names.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d50d44ea6519f52706db59a6110ddbe82736b35/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d50d44ea6519f52706db59a6110ddbe82736b35/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=0d50d44ea6519f52706db59a6110ddbe82736b35", "patch": "@@ -49,6 +49,45 @@ fn bla() {\n     }\n }\n \n+fn bindings(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) {}\n+\n+fn bindings2() {\n+    let (a, b, c, d, e, f, g, h) = unimplemented!();\n+}\n+\n+fn shadowing() {\n+    let a = 0i32;\n+    let a = 0i32;\n+    let a = 0i32;\n+    let a = 0i32;\n+    let a = 0i32;\n+    let a = 0i32;\n+    {\n+        let a = 0i32;\n+    }\n+}\n+\n+fn patterns() {\n+    enum Z {\n+        A(i32),\n+        B(i32),\n+        C(i32),\n+        D(i32),\n+        E(i32),\n+        F(i32),\n+    }\n+\n+    // These should not trigger a warning, since the pattern bindings are a new scope.\n+    match Z::A(0) {\n+        Z::A(a) => {},\n+        Z::B(b) => {},\n+        Z::C(c) => {},\n+        Z::D(d) => {},\n+        Z::E(e) => {},\n+        Z::F(f) => {},\n+    }\n+}\n+\n fn underscores_and_numbers() {\n     let _1 = 1; //~ERROR Consider a more descriptive name\n     let ____1 = 1; //~ERROR Consider a more descriptive name"}, {"sha": "b848c07667cd5ce4d8cf18155149a037f879219e", "filename": "tests/ui/non_expressive_names.stderr", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0d50d44ea6519f52706db59a6110ddbe82736b35/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d50d44ea6519f52706db59a6110ddbe82736b35/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=0d50d44ea6519f52706db59a6110ddbe82736b35", "patch": "@@ -1,66 +1,89 @@\n-error: 5th binding whose name is just one char\n-  --> $DIR/non_expressive_names.rs:35:17\n+error: 5 bindings with single-character names in scope\n+  --> $DIR/non_expressive_names.rs:27:9\n    |\n+LL |     let a: i32;\n+   |         ^\n+LL |     let (b, c, d): (i32, i64, i16);\n+   |          ^  ^  ^\n+...\n LL |             let e: i32;\n    |                 ^\n    |\n    = note: `-D clippy::many-single-char-names` implied by `-D warnings`\n \n-error: 5th binding whose name is just one char\n-  --> $DIR/non_expressive_names.rs:38:17\n+error: 6 bindings with single-character names in scope\n+  --> $DIR/non_expressive_names.rs:27:9\n    |\n+LL |     let a: i32;\n+   |         ^\n+LL |     let (b, c, d): (i32, i64, i16);\n+   |          ^  ^  ^\n+...\n LL |             let e: i32;\n    |                 ^\n-\n-error: 6th binding whose name is just one char\n-  --> $DIR/non_expressive_names.rs:39:17\n-   |\n LL |             let f: i32;\n    |                 ^\n \n-error: 5th binding whose name is just one char\n-  --> $DIR/non_expressive_names.rs:43:13\n+error: 5 bindings with single-character names in scope\n+  --> $DIR/non_expressive_names.rs:27:9\n    |\n+LL |     let a: i32;\n+   |         ^\n+LL |     let (b, c, d): (i32, i64, i16);\n+   |          ^  ^  ^\n+...\n LL |             e => panic!(),\n    |             ^\n \n+error: 8 bindings with single-character names in scope\n+  --> $DIR/non_expressive_names.rs:52:13\n+   |\n+LL | fn bindings(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, g: i32, h: i32) {}\n+   |             ^       ^       ^       ^       ^       ^       ^       ^\n+\n+error: 8 bindings with single-character names in scope\n+  --> $DIR/non_expressive_names.rs:55:10\n+   |\n+LL |     let (a, b, c, d, e, f, g, h) = unimplemented!();\n+   |          ^  ^  ^  ^  ^  ^  ^  ^\n+\n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:53:9\n+  --> $DIR/non_expressive_names.rs:92:9\n    |\n LL |     let _1 = 1; //~ERROR Consider a more descriptive name\n    |         ^^\n    |\n    = note: `-D clippy::just-underscores-and-digits` implied by `-D warnings`\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:54:9\n+  --> $DIR/non_expressive_names.rs:93:9\n    |\n LL |     let ____1 = 1; //~ERROR Consider a more descriptive name\n    |         ^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:55:9\n+  --> $DIR/non_expressive_names.rs:94:9\n    |\n LL |     let __1___2 = 12; //~ERROR Consider a more descriptive name\n    |         ^^^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:75:13\n+  --> $DIR/non_expressive_names.rs:114:13\n    |\n LL |         let _1 = 1;\n    |             ^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:76:13\n+  --> $DIR/non_expressive_names.rs:115:13\n    |\n LL |         let ____1 = 1;\n    |             ^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:77:13\n+  --> $DIR/non_expressive_names.rs:116:13\n    |\n LL |         let __1___2 = 12;\n    |             ^^^^^^^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/non_expressive_names.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0d50d44ea6519f52706db59a6110ddbe82736b35/tests%2Fui%2Fnon_expressive_names.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0d50d44ea6519f52706db59a6110ddbe82736b35/tests%2Fui%2Fnon_expressive_names.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stdout?ref=0d50d44ea6519f52706db59a6110ddbe82736b35"}]}