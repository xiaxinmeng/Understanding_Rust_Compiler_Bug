{"sha": "48aaf674f73add4c7d96e03a4d6cd8fa61d5ffbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWFmNjc0ZjczYWRkNGM3ZDk2ZTAzYTRkNmNkOGZhNjFkNWZmYmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-14T07:26:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-14T07:39:57Z"}, "message": "tweak flag section in README", "tree": {"sha": "5fa5735bb5a78a817d89d4aa7bf9b995d69fe6c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa5735bb5a78a817d89d4aa7bf9b995d69fe6c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48aaf674f73add4c7d96e03a4d6cd8fa61d5ffbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48aaf674f73add4c7d96e03a4d6cd8fa61d5ffbb", "html_url": "https://github.com/rust-lang/rust/commit/48aaf674f73add4c7d96e03a4d6cd8fa61d5ffbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48aaf674f73add4c7d96e03a4d6cd8fa61d5ffbb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad111415387f1e7480dd64fdf7e872045479868", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad111415387f1e7480dd64fdf7e872045479868", "html_url": "https://github.com/rust-lang/rust/commit/0ad111415387f1e7480dd64fdf7e872045479868"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "88b91d416d4dfab2267ef5bcc9eaa7157836f4d1", "filename": "README.md", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/48aaf674f73add4c7d96e03a4d6cd8fa61d5ffbb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/48aaf674f73add4c7d96e03a4d6cd8fa61d5ffbb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=48aaf674f73add4c7d96e03a4d6cd8fa61d5ffbb", "patch": "@@ -160,45 +160,51 @@ up the sysroot.  If you are using `miri` (the Miri driver) directly, see\n ## Miri `-Z` flags and environment variables\n [miri-flags]: #miri--z-flags-and-environment-variables\n \n-Several `-Z` flags are relevant for Miri:\n-\n-* `-Zmiri-seed=<hex>` is a custom `-Z` flag added by Miri.  It configures the\n-  seed of the RNG that Miri uses to resolve non-determinism.  This RNG is used\n-  to pick base addresses for allocations.  When isolation is enabled (the default),\n-  this is also used to emulate system entropy.  The default seed is 0.\n-  **NOTE**: This entropy is not good enough for cryptographic use!  Do not\n-  generate secret keys in Miri or perform other kinds of cryptographic\n-  operations that rely on proper random numbers.\n-* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n-  enforced by default.  This is mostly useful for debugging.  It means Miri will\n-  miss bugs in your program.  However, this can also help to make Miri run\n-  faster.\n+Miri adds its own set of `-Z` flags:\n+\n+* `-Zmiri-disable-alignment-check` disables checking pointer alignment. This is\n+  useful to avoid [false positives][alignment-false-positives]. However, setting\n+  this flag means Miri could miss bugs in your program.\n * `-Zmiri-disable-stacked-borrows` disables checking the experimental\n   [Stacked Borrows] aliasing rules.  This can make Miri run faster, but it also\n   means no aliasing violations will be detected.\n-* `-Zmiri-disable-alignment-check` disables checking pointer alignment on memory\n-  accesses.\n+* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n+  enforced by default.  This is mostly useful to focus on other failures (such\n+  as out-of-bounds accesses) first.  Setting this flag means Miri will miss bugs\n+  in your program.  However, this can also help to make Miri run faster.\n * `-Zmiri-disable-isolation` disables host isolation.  As a consequence,\n   the program has access to host resources such as environment variables, file\n   systems, and randomness.\n-* `-Zmiri-ignore-leaks` disables the memory leak checker.\n * `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from\n-  the host. Can be used multiple times to exclude several variables. The `TERM`\n-  environment variable is excluded by default.\n+  the host so that it cannot be accessed by the program.  Can be used multiple\n+  times to exclude several variables.  On Windows, the `TERM` environment\n+  variable is excluded by default.\n+* `-Zmiri-ignore-leaks` disables the memory leak checker.\n+* `-Zmiri-seed=<hex>` configures the seed of the RNG that Miri uses to resolve\n+  non-determinism.  This RNG is used to pick base addresses for allocations.\n+  When isolation is enabled (the default), this is also used to emulate system\n+  entropy.  The default seed is 0.  **NOTE**: This entropy is not good enough\n+  for cryptographic use!  Do not generate secret keys in Miri or perform other\n+  kinds of cryptographic operations that rely on proper random numbers.\n+* `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n+  being allocated.  This helps in debugging memory leaks.\n+* `-Zmiri-track-pointer-tag=<tag>` shows a backtrace when the given pointer tag\n+  is popped from a borrow stack (which is where the tag becomes invalid and any\n+  future use of it will error).  This helps you in finding out why UB is\n+  happening and where in your code would be a good place to look for it.\n+\n+[alignment-false-positives]: https://github.com/rust-lang/miri/issues/1074\n+\n+Some native rustc `-Z` flags are also very relevant for Miri:\n+\n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n   overrides the default to be `0`; be advised that using any higher level can\n   make Miri miss bugs in your program because they got optimized away.\n * `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n   functions.  This is needed so that Miri can execute such functions, so Miri\n   sets this flag per default.\n * `-Zmir-emit-retag` controls whether `Retag` statements are emitted. Miri\n-  enables this per default because it is needed for validation.\n-* `-Zmiri-track-pointer-tag=<tag>` shows a backtrace when the given pointer tag\n-  is popped from a borrow stack (which is where the tag becomes invalid and any\n-  future use of it will error).  This helps you in finding out why UB is\n-  happening and where in your code would be a good place to look for it.\n-* `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n-  being allocated.  This helps in debugging memory leaks.\n+  enables this per default because it is needed for [Stacked Borrows].\n \n Moreover, Miri recognizes some environment variables:\n "}]}