{"sha": "8b88811419f3745a182e9453921101919c609739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiODg4MTE0MTlmMzc0NWExODJlOTQ1MzkyMTEwMTkxOWM2MDk3Mzk=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-09-15T21:13:00Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-09-17T06:53:54Z"}, "message": "rustdoc: Correctly distinguish enums and types\n\nThis is done by adding a new field to the `DefTy` variant of `middle::def::Def`,\nwhich also clarifies an error message in the process.\n\nCloses #16712.", "tree": {"sha": "d8acfcc2ab91c4387eec4084beb1fa7e81768769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8acfcc2ab91c4387eec4084beb1fa7e81768769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b88811419f3745a182e9453921101919c609739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b88811419f3745a182e9453921101919c609739", "html_url": "https://github.com/rust-lang/rust/commit/8b88811419f3745a182e9453921101919c609739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b88811419f3745a182e9453921101919c609739/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4b92159997093e1fd53a6f8dde377d78d7da4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4b92159997093e1fd53a6f8dde377d78d7da4a", "html_url": "https://github.com/rust-lang/rust/commit/ef4b92159997093e1fd53a6f8dde377d78d7da4a"}], "stats": {"total": 94, "additions": 57, "deletions": 37}, "files": [{"sha": "748e59b75ed63edee5858d2859b4dbe474c6b54a", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -325,7 +325,7 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n             };\n             DlDef(def::DefStaticMethod(did, provenance, fn_style))\n         }\n-        Type | ForeignType => DlDef(def::DefTy(did)),\n+        Type | ForeignType => DlDef(def::DefTy(did, false)),\n         Mod => DlDef(def::DefMod(did)),\n         ForeignMod => DlDef(def::DefForeignMod(did)),\n         StructVariant => {\n@@ -337,7 +337,7 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n             DlDef(def::DefVariant(enum_did, did, false))\n         }\n         Trait => DlDef(def::DefTrait(did)),\n-        Enum => DlDef(def::DefTy(did)),\n+        Enum => DlDef(def::DefTy(did, true)),\n         Impl => DlImpl(did),\n         PublicField | InheritedField => DlField,\n     }"}, {"sha": "880445ff38d324fffd2f1abcb2cb8efa5a90d2f4", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -454,7 +454,7 @@ impl tr for def::Def {\n             def::DefVariant(e_did.tr(dcx), v_did.tr(dcx), is_s)\n           },\n           def::DefTrait(did) => def::DefTrait(did.tr(dcx)),\n-          def::DefTy(did) => def::DefTy(did.tr(dcx)),\n+          def::DefTy(did, is_enum) => def::DefTy(did.tr(dcx), is_enum),\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n           def::DefTyParam(s, did, v) => def::DefTyParam(s, did.tr(dcx), v),\n           def::DefBinding(nid, bm) => def::DefBinding(dcx.tr_id(nid), bm),"}, {"sha": "70a9b6c533772988d18108473b5bf5d8d1c222fd", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -25,7 +25,7 @@ pub enum Def {\n     DefArg(ast::NodeId, ast::BindingMode),\n     DefLocal(ast::NodeId, ast::BindingMode),\n     DefVariant(ast::DefId /* enum */, ast::DefId /* variant */, bool /* is_structure */),\n-    DefTy(ast::DefId),\n+    DefTy(ast::DefId, bool /* is_enum */),\n     DefTrait(ast::DefId),\n     DefPrimTy(ast::PrimTy),\n     DefTyParam(ParamSpace, ast::DefId, uint),\n@@ -62,7 +62,7 @@ impl Def {\n         match *self {\n             DefFn(id, _) | DefStaticMethod(id, _, _) | DefMod(id) |\n             DefForeignMod(id) | DefStatic(id, _) |\n-            DefVariant(_, id, _) | DefTy(id) | DefTyParam(_, id, _) |\n+            DefVariant(_, id, _) | DefTy(id, _) | DefTyParam(_, id, _) |\n             DefUse(id) | DefStruct(id) | DefTrait(id) | DefMethod(id, _) => {\n                 id\n             }"}, {"sha": "4f9cc9c080f9bcab89cd1ba09a8cca16a6e49baf", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -531,7 +531,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n           def::DefMod(_) | def::DefForeignMod(_) | def::DefUse(_) |\n-          def::DefTrait(_) | def::DefTy(_) | def::DefPrimTy(_) |\n+          def::DefTrait(_) | def::DefTy(..) | def::DefPrimTy(_) |\n           def::DefTyParam(..) | def::DefTyParamBinder(..) | def::DefRegion(_) |\n           def::DefLabel(_) | def::DefSelfTy(..) | def::DefMethod(..) => {\n               Ok(Rc::new(cmt_ {"}, {"sha": "0eb684fe18e1061a5bbb472a210e9526b21fd508", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -771,7 +771,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             def::DefFn(..) => ck(\"function\"),\n             def::DefStatic(..) => ck(\"static\"),\n             def::DefVariant(..) => ck(\"variant\"),\n-            def::DefTy(..) => ck(\"type\"),\n+            def::DefTy(_, false) => ck(\"type\"),\n+            def::DefTy(_, true) => ck(\"enum\"),\n             def::DefTrait(..) => ck(\"trait\"),\n             def::DefStruct(..) => ck(\"struct\"),\n             def::DefMethod(_, Some(..)) => ck(\"trait method\"),"}, {"sha": "191f7113cc90d05a904053baad03401d136a832c", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -1252,7 +1252,7 @@ impl<'a> Resolver<'a> {\n                                    sp);\n \n                 name_bindings.define_type\n-                    (DefTy(local_def(item.id)), sp, is_public);\n+                    (DefTy(local_def(item.id), false), sp, is_public);\n                 parent\n             }\n \n@@ -1264,7 +1264,7 @@ impl<'a> Resolver<'a> {\n                                    sp);\n \n                 name_bindings.define_type\n-                    (DefTy(local_def(item.id)), sp, is_public);\n+                    (DefTy(local_def(item.id), true), sp, is_public);\n \n                 for variant in (*enum_definition).variants.iter() {\n                     self.build_reduced_graph_for_variant(\n@@ -1287,7 +1287,7 @@ impl<'a> Resolver<'a> {\n                 let name_bindings = self.add_child(ident, parent.clone(), forbid, sp);\n \n                 // Define a name in the type namespace.\n-                name_bindings.define_type(DefTy(local_def(item.id)), sp, is_public);\n+                name_bindings.define_type(DefTy(local_def(item.id), false), sp, is_public);\n \n                 // If this is a newtype or unit-like struct, define a name\n                 // in the value namespace as well\n@@ -1732,7 +1732,7 @@ impl<'a> Resolver<'a> {\n \n         match def {\n           DefMod(def_id) | DefForeignMod(def_id) | DefStruct(def_id) |\n-          DefTy(def_id) => {\n+          DefTy(def_id, _) => {\n             let type_def = child_name_bindings.type_def.borrow().clone();\n             match type_def {\n               Some(TypeNsDef { module_def: Some(module_def), .. }) => {\n@@ -1823,7 +1823,7 @@ impl<'a> Resolver<'a> {\n                                                   is_public,\n                                                   DUMMY_SP)\n           }\n-          DefTy(_) => {\n+          DefTy(..) => {\n               debug!(\"(building reduced graph for external \\\n                       crate) building type {}\", final_ident);\n \n@@ -4320,7 +4320,7 @@ impl<'a> Resolver<'a> {\n \n                         // If it's a typedef, give a note\n                         match def {\n-                            DefTy(_) => {\n+                            DefTy(..) => {\n                                 self.session.span_note(\n                                                 trait_reference.path.span,\n                                                 format!(\"`type` aliases cannot \\\n@@ -4381,7 +4381,7 @@ impl<'a> Resolver<'a> {\n                 Some(ref t) => match t.node {\n                     TyPath(ref path, None, path_id) => {\n                         match this.resolve_path(id, path, TypeNS, true) {\n-                            Some((DefTy(def_id), lp)) if this.structs.contains_key(&def_id) => {\n+                            Some((DefTy(def_id, _), lp)) if this.structs.contains_key(&def_id) => {\n                                 let def = DefStruct(def_id);\n                                 debug!(\"(resolving struct) resolved `{}` to type {:?}\",\n                                        token::get_ident(path.segments\n@@ -5440,7 +5440,7 @@ impl<'a> Resolver<'a> {\n         if allowed == Everything {\n             // Look for a field with the same name in the current self_type.\n             match self.def_map.borrow().find(&node_id) {\n-                 Some(&DefTy(did))\n+                 Some(&DefTy(did, _))\n                 | Some(&DefStruct(did))\n                 | Some(&DefVariant(_, did, _)) => match self.structs.find(&did) {\n                     None => {}\n@@ -5582,7 +5582,7 @@ impl<'a> Resolver<'a> {\n                         // structs, which wouldn't result in this error.)\n                         match self.with_no_errors(|this|\n                             this.resolve_path(expr.id, path, TypeNS, false)) {\n-                            Some((DefTy(struct_id), _))\n+                            Some((DefTy(struct_id, _), _))\n                               if self.structs.contains_key(&struct_id) => {\n                                 self.resolve_error(expr.span,\n                                         format!(\"`{}` is a structure name, but \\"}, {"sha": "37ba3b75f8917ad024b7f5a6332ec8e35b34ec96", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -226,7 +226,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefMod(_) |\n             def::DefForeignMod(_) => Some(recorder::ModRef),\n             def::DefStruct(_) => Some(recorder::StructRef),\n-            def::DefTy(_) |\n+            def::DefTy(..) |\n             def::DefTrait(_) => Some(recorder::TypeRef),\n             def::DefStatic(_, _) |\n             def::DefBinding(_, _) |"}, {"sha": "a9b633d483b6a72c47178166335d828cce447e12", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -438,7 +438,7 @@ pub fn ast_ty_to_builtin_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n             // FIXME(#12938): This is a hack until we have full support for\n             // DST.\n             match a_def {\n-                def::DefTy(did) | def::DefStruct(did)\n+                def::DefTy(did, _) | def::DefStruct(did)\n                         if Some(did) == this.tcx().lang_items.owned_box() => {\n                     if path.segments\n                            .iter()\n@@ -462,7 +462,7 @@ pub fn ast_ty_to_builtin_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                               \"not enough type parameters supplied to `Box<T>`\");\n                     Some(ty::mk_err())\n                 }\n-                def::DefTy(did) | def::DefStruct(did)\n+                def::DefTy(did, _) | def::DefStruct(did)\n                         if Some(did) == this.tcx().lang_items.gc() => {\n                     if path.segments\n                            .iter()\n@@ -833,7 +833,7 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                      result.substs.clone(),\n                                      bounds)\n                     }\n-                    def::DefTy(did) | def::DefStruct(did) => {\n+                    def::DefTy(did, _) | def::DefStruct(did) => {\n                         ast_path_to_ty(this, rscope, did, path).ty\n                     }\n                     def::DefTyParam(space, id, n) => {"}, {"sha": "3bda07e92070e33fb7eac6e0dfc5f593e7ec5666", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -4937,7 +4937,7 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n         return polytype_for_def(fcx, sp, *inner);\n       }\n       def::DefTrait(_) |\n-      def::DefTy(_) |\n+      def::DefTy(..) |\n       def::DefPrimTy(_) |\n       def::DefTyParam(..)=> {\n         fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found type\");"}, {"sha": "af670f25e5626cac3a89387896b8a9f59250a29a", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -1235,7 +1235,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                         Some(&d) => d\n                     };\n                     match a_def {\n-                        def::DefTy(did) | def::DefStruct(did) => {\n+                        def::DefTy(did, _) | def::DefStruct(did) => {\n                             let generics = ty::lookup_item_type(self.tcx, did).generics;\n \n                             let expected ="}, {"sha": "ccb01ca620eb77d5291dd77d90154ff178f05e5a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -87,7 +87,12 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n             ret.extend(build_impls(cx, tcx, did).into_iter());\n             clean::StructItem(build_struct(cx, tcx, did))\n         }\n-        def::DefTy(did) => {\n+        def::DefTy(did, false) => {\n+            record_extern_fqn(cx, did, clean::TypeTypedef);\n+            ret.extend(build_impls(cx, tcx, did).into_iter());\n+            build_type(cx, tcx, did)\n+        }\n+        def::DefTy(did, true) => {\n             record_extern_fqn(cx, did, clean::TypeEnum);\n             ret.extend(build_impls(cx, tcx, did).into_iter());\n             build_type(cx, tcx, did)"}, {"sha": "c03c56cd22312c8f2c2912e578c2bd4cefbdb53e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -1094,6 +1094,7 @@ pub enum TypeKind {\n     TypeStruct,\n     TypeTrait,\n     TypeVariant,\n+    TypeTypedef,\n }\n \n impl Primitive {\n@@ -2049,7 +2050,8 @@ fn resolve_type(cx: &DocContext, path: Path,\n fn register_def(cx: &DocContext, def: def::Def) -> ast::DefId {\n     let (did, kind) = match def {\n         def::DefFn(i, _) => (i, TypeFunction),\n-        def::DefTy(i) => (i, TypeEnum),\n+        def::DefTy(i, false) => (i, TypeTypedef),\n+        def::DefTy(i, true) => (i, TypeEnum),\n         def::DefTrait(i) => (i, TypeTrait),\n         def::DefStruct(i) => (i, TypeStruct),\n         def::DefMod(i) => (i, TypeModule),"}, {"sha": "6e240b0d8d4a6a2e17c4589a3d9c3d7a3bed0e27", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -45,7 +45,7 @@ impl ItemType {\n         match *self {\n             Module          => \"mod\",\n             Struct          => \"struct\",\n-            Enum            => \"type\",\n+            Enum            => \"enum\",\n             Function        => \"fn\",\n             Typedef         => \"type\",\n             Static          => \"static\","}, {"sha": "a0c4283711e689ce04568bc18b23d6fcda462dde", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -308,6 +308,7 @@ pub fn run(mut krate: clean::Crate, external_html: &ExternalHtml, dst: Path) ->\n                 clean::TypeModule => item_type::Module,\n                 clean::TypeStatic => item_type::Static,\n                 clean::TypeVariant => item_type::Variant,\n+                clean::TypeTypedef => item_type::Typedef,\n             }))\n         }).collect()\n     }).unwrap_or(HashMap::new());"}, {"sha": "dc18a08a4f862efdea2da621d3fad98e2baa31fa", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -555,7 +555,7 @@\n         // `rustdoc::html::item_type::ItemType` type in Rust.\n         var itemTypes = [\"mod\",\n                          \"struct\",\n-                         \"type\",\n+                         \"enum\",\n                          \"fn\",\n                          \"type\",\n                          \"static\","}, {"sha": "6951ed729b27bb162c50b6a83e106dad3db99c06", "filename": "src/test/auxiliary/static_priv_by_default.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -24,6 +24,7 @@ mod foo {\n     pub fn b() {}\n     pub struct c;\n     pub enum d {}\n+    pub type e = int;\n \n     pub struct A(());\n \n@@ -36,21 +37,25 @@ mod foo {\n     pub fn reexported_b() {}\n     pub struct reexported_c;\n     pub enum reexported_d {}\n+    pub type reexported_e = int;\n }\n \n pub mod bar {\n     pub use foo::reexported_a as e;\n     pub use foo::reexported_b as f;\n     pub use foo::reexported_c as g;\n     pub use foo::reexported_d as h;\n+    pub use foo::reexported_e as i;\n }\n \n pub static a: int = 0;\n pub fn b() {}\n pub struct c;\n pub enum d {}\n+pub type e = int;\n \n-static i: int = 0;\n-fn j() {}\n-struct k;\n-enum l {}\n+static j: int = 0;\n+fn k() {}\n+struct l;\n+enum m {}\n+type n = int;"}, {"sha": "43be96965d01f05bfd0736e5313da04e45311fc7", "filename": "src/test/compile-fail/xcrate-private-by-default.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b88811419f3745a182e9453921101919c609739/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b88811419f3745a182e9453921101919c609739/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs?ref=8b88811419f3745a182e9453921101919c609739", "patch": "@@ -20,22 +20,26 @@ fn main() {\n     static_priv_by_default::b;\n     static_priv_by_default::c;\n     foo::<static_priv_by_default::d>();\n+    foo::<static_priv_by_default::e>();\n \n     // publicly re-exported items should be available\n     static_priv_by_default::bar::e;\n     static_priv_by_default::bar::f;\n     static_priv_by_default::bar::g;\n     foo::<static_priv_by_default::bar::h>();\n+    foo::<static_priv_by_default::bar::i>();\n \n     // private items at the top should be inaccessible\n-    static_priv_by_default::i;\n-    //~^ ERROR: static `i` is private\n     static_priv_by_default::j;\n-    //~^ ERROR: function `j` is private\n+    //~^ ERROR: static `j` is private\n     static_priv_by_default::k;\n-    //~^ ERROR: struct `k` is private\n-    foo::<static_priv_by_default::l>();\n-    //~^ ERROR: type `l` is private\n+    //~^ ERROR: function `k` is private\n+    static_priv_by_default::l;\n+    //~^ ERROR: struct `l` is private\n+    foo::<static_priv_by_default::m>();\n+    //~^ ERROR: enum `m` is private\n+    foo::<static_priv_by_default::n>();\n+    //~^ ERROR: type `n` is private\n \n     // public items in a private mod should be inaccessible\n     static_priv_by_default::foo::a;\n@@ -45,5 +49,7 @@ fn main() {\n     static_priv_by_default::foo::c;\n     //~^ ERROR: struct `c` is private\n     foo::<static_priv_by_default::foo::d>();\n-    //~^ ERROR: type `d` is private\n+    //~^ ERROR: enum `d` is private\n+    foo::<static_priv_by_default::foo::e>();\n+    //~^ ERROR: type `e` is private\n }"}]}