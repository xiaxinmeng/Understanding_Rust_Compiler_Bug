{"sha": "6bbf82ddd7c09f8332190c7f9a5b53e53a317c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYmY4MmRkZDdjMDlmODMzMjE5MGM3ZjlhNWI1M2U1M2EzMTdjMjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-20T19:30:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-20T19:30:32Z"}, "message": "Rollup merge of #74557 - jakubadamw:issue-74539, r=nagisa\n\nFix an ICE on an invalid `binding @ ...` in a tuple struct pattern\n\nFixes #74539.", "tree": {"sha": "f1fa35ec33f0996a367957ebf567f26acbb8489e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1fa35ec33f0996a367957ebf567f26acbb8489e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfFfDZCRBK7hj4Ov3rIwAAdHIIAJkUwdG7YjdSqIgVQE96ULnf\nCL58HOWT4rzd5hKKy61KbD2cj6Nf2lWua7SCdpC0QZKlmrd4A135T3Tsibb0aNEt\nJvpb+QJJxsrJ2dXUOMijxX2EIc6HkufnBLa/JQsKj26C9AaKAQrzOqwYRxwzWnQQ\nXrXGmoH/TfBwYj7GP189RFHyFShWqNfxyp9c66u8jFhzPJtPAgMWxm157Cb/3RkT\nuxoOl5RblHkaIyAy63dHlDJU9Blk4fuZuu2LQiQplUL2JMkG8gtQ49YD3m64YSAt\n6CZbniU7pEFlBQJwwINpEJ1IO81k150YeIH7y3SWRstbLrQDnFqHzaHi9c2nW70=\n=ueUZ\n-----END PGP SIGNATURE-----\n", "payload": "tree f1fa35ec33f0996a367957ebf567f26acbb8489e\nparent 963b837a837a4c49086bb2f3b5d2ac0789dcf69c\nparent f5e5eb6f46ef2cf0dd45dba4f975305509334fc6\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595273432 -0700\ncommitter GitHub <noreply@github.com> 1595273432 -0700\n\nRollup merge of #74557 - jakubadamw:issue-74539, r=nagisa\n\nFix an ICE on an invalid `binding @ ...` in a tuple struct pattern\n\nFixes #74539.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21", "html_url": "https://github.com/rust-lang/rust/commit/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "963b837a837a4c49086bb2f3b5d2ac0789dcf69c", "url": "https://api.github.com/repos/rust-lang/rust/commits/963b837a837a4c49086bb2f3b5d2ac0789dcf69c", "html_url": "https://github.com/rust-lang/rust/commit/963b837a837a4c49086bb2f3b5d2ac0789dcf69c"}, {"sha": "f5e5eb6f46ef2cf0dd45dba4f975305509334fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e5eb6f46ef2cf0dd45dba4f975305509334fc6", "html_url": "https://github.com/rust-lang/rust/commit/f5e5eb6f46ef2cf0dd45dba4f975305509334fc6"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "261c2031364f66d409a012139a21231a4e11dc06", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=6bbf82ddd7c09f8332190c7f9a5b53e53a317c21", "patch": "@@ -1500,11 +1500,17 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         pat_src: PatternSource,\n         bindings: &mut SmallVec<[(PatBoundCtx, FxHashSet<Ident>); 1]>,\n     ) {\n+        let is_tuple_struct_pat = matches!(pat.kind, PatKind::TupleStruct(_, _));\n+\n         // Visit all direct subpatterns of this pattern.\n         pat.walk(&mut |pat| {\n             debug!(\"resolve_pattern pat={:?} node={:?}\", pat, pat.kind);\n             match pat.kind {\n-                PatKind::Ident(bmode, ident, ref sub) => {\n+                // In tuple struct patterns ignore the invalid `ident @ ...`.\n+                // It will be handled as an error by the AST lowering.\n+                PatKind::Ident(bmode, ident, ref sub)\n+                    if !(is_tuple_struct_pat && sub.as_ref().filter(|p| p.is_rest()).is_some()) =>\n+                {\n                     // First try to resolve the identifier as some existing entity,\n                     // then fall back to a fresh binding.\n                     let has_sub = sub.is_some();"}, {"sha": "75632d11c1df0d65d00272b69db73c9d63442a20", "filename": "src/test/ui/issues/issue-74539.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74539.rs?ref=6bbf82ddd7c09f8332190c7f9a5b53e53a317c21", "patch": "@@ -0,0 +1,12 @@\n+enum E {\n+    A(u8, u8),\n+}\n+\n+fn main() {\n+    let e = E::A(2, 3);\n+    match e {\n+        E::A(x @ ..) => {  //~ ERROR `x @` is not allowed in a tuple\n+            x //~ ERROR cannot find value `x` in this scope\n+        }\n+    };\n+}"}, {"sha": "94526dcd7cb3971223bcfa3bd263b9fb1d09bb59", "filename": "src/test/ui/issues/issue-74539.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bbf82ddd7c09f8332190c7f9a5b53e53a317c21/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74539.stderr?ref=6bbf82ddd7c09f8332190c7f9a5b53e53a317c21", "patch": "@@ -0,0 +1,21 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/issue-74539.rs:9:13\n+   |\n+LL |             x\n+   |             ^ help: a local variable with a similar name exists: `e`\n+\n+error: `x @` is not allowed in a tuple struct\n+  --> $DIR/issue-74539.rs:8:14\n+   |\n+LL |         E::A(x @ ..) => {\n+   |              ^^^^^^ this is only allowed in slice patterns\n+   |\n+   = help: remove this and bind each tuple field independently\n+help: if you don't need to use the contents of x, discard the tuple's remaining fields\n+   |\n+LL |         E::A(..) => {\n+   |              ^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}