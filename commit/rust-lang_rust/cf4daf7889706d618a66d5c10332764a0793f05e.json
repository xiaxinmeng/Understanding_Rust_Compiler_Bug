{"sha": "cf4daf7889706d618a66d5c10332764a0793f05e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNGRhZjc4ODk3MDZkNjE4YTY2ZDVjMTAzMzI3NjRhMDc5M2YwNWU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T12:21:31Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:55Z"}, "message": "mir: Don't lose sub-patterns inside slice patterns.", "tree": {"sha": "4b2a91ba370923089e802b09cdfe1195af2ce36d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b2a91ba370923089e802b09cdfe1195af2ce36d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf4daf7889706d618a66d5c10332764a0793f05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4daf7889706d618a66d5c10332764a0793f05e", "html_url": "https://github.com/rust-lang/rust/commit/cf4daf7889706d618a66d5c10332764a0793f05e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf4daf7889706d618a66d5c10332764a0793f05e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41499f45635d94003a9461c059d9b395b1a6e3ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/41499f45635d94003a9461c059d9b395b1a6e3ea", "html_url": "https://github.com/rust-lang/rust/commit/41499f45635d94003a9461c059d9b395b1a6e3ea"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "673ff9e86c440e859dff193c3ad9540e903b9176", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf4daf7889706d618a66d5c10332764a0793f05e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4daf7889706d618a66d5c10332764a0793f05e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=cf4daf7889706d618a66d5c10332764a0793f05e", "patch": "@@ -238,6 +238,13 @@ pub struct MatchPair<'pat, 'tcx:'pat> {\n \n     // ... must match this pattern.\n     pattern: &'pat Pattern<'tcx>,\n+\n+    // HACK(eddyb) This is used to toggle whether a Slice pattern\n+    // has had its length checked. This is only necessary because\n+    // the \"rest\" part of the pattern right now has type &[T] and\n+    // as such, it requires an Rvalue::Slice to be generated.\n+    // See RFC 495 / issue #23121 for the eventual (proper) solution.\n+    slice_len_checked: bool\n }\n \n #[derive(Clone, Debug, PartialEq)]"}, {"sha": "a3337badf884b92d9e0533052dc94fd4a5b98975", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf4daf7889706d618a66d5c10332764a0793f05e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4daf7889706d618a66d5c10332764a0793f05e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=cf4daf7889706d618a66d5c10332764a0793f05e", "patch": "@@ -95,7 +95,18 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 Err(match_pair)\n             }\n \n-            PatternKind::Array { ref prefix, ref slice, ref suffix } => {\n+            PatternKind::Range { .. } |\n+            PatternKind::Variant { .. } => {\n+                // cannot simplify, test is required\n+                Err(match_pair)\n+            }\n+\n+            PatternKind::Slice { .. } if !match_pair.slice_len_checked => {\n+                Err(match_pair)\n+            }\n+\n+            PatternKind::Array { ref prefix, ref slice, ref suffix } |\n+            PatternKind::Slice { ref prefix, ref slice, ref suffix } => {\n                 unpack!(block = self.prefix_suffix_slice(&mut candidate.match_pairs,\n                                                          block,\n                                                          match_pair.lvalue.clone(),\n@@ -105,13 +116,6 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 Ok(block)\n             }\n \n-            PatternKind::Slice { .. } |\n-            PatternKind::Range { .. } |\n-            PatternKind::Variant { .. } => {\n-                // cannot simplify, test is required\n-                Err(match_pair)\n-            }\n-\n             PatternKind::Leaf { ref subpatterns } => {\n                 // tuple struct, match subpats (if any)\n                 candidate.match_pairs"}, {"sha": "113084f8ccd22dcedfb6c0a6ad9a43d877b97896", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf4daf7889706d618a66d5c10332764a0793f05e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4daf7889706d618a66d5c10332764a0793f05e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=cf4daf7889706d618a66d5c10332764a0793f05e", "patch": "@@ -75,7 +75,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 }\n             }\n \n-            PatternKind::Slice { ref prefix, ref slice, ref suffix } => {\n+            PatternKind::Slice { ref prefix, ref slice, ref suffix }\n+                    if !match_pair.slice_len_checked => {\n                 let len = prefix.len() + suffix.len();\n                 let op = if slice.is_some() {\n                     BinOp::Ge\n@@ -89,6 +90,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n \n             PatternKind::Array { .. } |\n+            PatternKind::Slice { .. } |\n             PatternKind::Wild |\n             PatternKind::Binding { .. } |\n             PatternKind::Leaf { .. } |\n@@ -413,9 +415,26 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 }\n             }\n \n-            TestKind::Eq { .. } |\n-            TestKind::Range { .. } |\n+            // If we are performing a length check, then this\n+            // informs slice patterns, but nothing else.\n             TestKind::Len { .. } => {\n+                let pattern_test = self.test(&match_pair);\n+                match *match_pair.pattern.kind {\n+                    PatternKind::Slice { .. } if pattern_test.kind == test.kind => {\n+                        let mut new_candidate = candidate.clone();\n+\n+                        // Set up the MatchKind to simplify this like an array.\n+                        new_candidate.match_pairs[match_pair_index]\n+                                     .slice_len_checked = true;\n+                        resulting_candidates[0].push(new_candidate);\n+                        true\n+                    }\n+                    _ => false\n+                }\n+            }\n+\n+            TestKind::Eq { .. } |\n+            TestKind::Range { .. } => {\n                 // These are all binary tests.\n                 //\n                 // FIXME(#29623) we can be more clever here"}, {"sha": "d9b90fff78446694c3e112108c3c9f0a76062592", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf4daf7889706d618a66d5c10332764a0793f05e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf4daf7889706d618a66d5c10332764a0793f05e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=cf4daf7889706d618a66d5c10332764a0793f05e", "patch": "@@ -118,6 +118,7 @@ impl<'pat, 'tcx> MatchPair<'pat, 'tcx> {\n         MatchPair {\n             lvalue: lvalue,\n             pattern: pattern,\n+            slice_len_checked: false,\n         }\n     }\n }"}]}