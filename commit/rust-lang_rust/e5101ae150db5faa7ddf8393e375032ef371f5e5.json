{"sha": "e5101ae150db5faa7ddf8393e375032ef371f5e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MTAxYWUxNTBkYjVmYWE3ZGRmODM5M2UzNzUwMzJlZjM3MWY1ZTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T22:30:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T22:30:34Z"}, "message": "Centralize fixture parsing for assists", "tree": {"sha": "89f9a2cc1c4113222bbb3e1241e68c712c2a21fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f9a2cc1c4113222bbb3e1241e68c712c2a21fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5101ae150db5faa7ddf8393e375032ef371f5e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5101ae150db5faa7ddf8393e375032ef371f5e5", "html_url": "https://github.com/rust-lang/rust/commit/e5101ae150db5faa7ddf8393e375032ef371f5e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5101ae150db5faa7ddf8393e375032ef371f5e5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44cf263edf1c7e3b189ef5f1cfdf207dd28a0054", "url": "https://api.github.com/repos/rust-lang/rust/commits/44cf263edf1c7e3b189ef5f1cfdf207dd28a0054", "html_url": "https://github.com/rust-lang/rust/commit/44cf263edf1c7e3b189ef5f1cfdf207dd28a0054"}], "stats": {"total": 125, "additions": 65, "deletions": 60}, "files": [{"sha": "1cfbd75aa11cb86a1c30a4399f5fde0f89f17b64", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=e5101ae150db5faa7ddf8393e375032ef371f5e5", "patch": "@@ -986,6 +986,7 @@ fn main() {\n \",\n             r\"\n \n+\n pub(crate) fn bar() {\n     ${0:todo!()}\n }\","}, {"sha": "64270c86fab23f1b845970b1bb4b08a7dd1af035", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=e5101ae150db5faa7ddf8393e375032ef371f5e5", "patch": "@@ -763,9 +763,9 @@ mod tests {\n fn foo(opt: Option<i32>) {\n     match opt<|> {\n     }\n-}\"#;\n-        let before =\n-            &format!(\"//- /main.rs crate:main deps:core\\n{}{}\", before, FamousDefs::FIXTURE);\n+}\n+\"#;\n+        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n \n         check_assist(\n             fill_match_arms,"}, {"sha": "88b62278f61887a4a5419267243b6d3f4be63028", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=e5101ae150db5faa7ddf8393e375032ef371f5e5", "patch": "@@ -226,27 +226,31 @@ fn foo() {\n         mark::check!(test_introduce_var_last_expr);\n         check_assist(\n             introduce_variable,\n-            \"\n+            r#\"\n fn foo() {\n     bar(<|>1 + 1<|>)\n-}\",\n-            \"\n+}\n+\"#,\n+            r#\"\n fn foo() {\n     let $0var_name = 1 + 1;\n     bar(var_name)\n-}\",\n+}\n+\"#,\n         );\n         check_assist(\n             introduce_variable,\n-            \"\n+            r#\"\n fn foo() {\n     <|>bar(1 + 1)<|>\n-}\",\n-            \"\n+}\n+\"#,\n+            r#\"\n fn foo() {\n     let $0var_name = bar(1 + 1);\n     var_name\n-}\",\n+}\n+\"#,\n         )\n     }\n "}, {"sha": "d22d0aa5566fa4442fb7fffd75637728c9bee1b6", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=e5101ae150db5faa7ddf8393e375032ef371f5e5", "patch": "@@ -158,16 +158,16 @@ mod test {\n         check_assist(\n             make_raw_string,\n             r#\"\n-            fn f() {\n-                let s = <|>\"random\\nstring\";\n-            }\n-            \"#,\n+fn f() {\n+    let s = <|>\"random\\nstring\";\n+}\n+\"#,\n             r##\"\n-            fn f() {\n-                let s = r#\"random\n+fn f() {\n+    let s = r#\"random\n string\"#;\n-            }\n-            \"##,\n+}\n+\"##,\n         )\n     }\n \n@@ -193,16 +193,16 @@ string\"#;\n         check_assist(\n             make_raw_string,\n             r###\"\n-            fn f() {\n-                let s = <|>\"#random##\\nstring\";\n-            }\n-            \"###,\n+fn f() {\n+    let s = <|>\"#random##\\nstring\";\n+}\n+\"###,\n             r####\"\n-            fn f() {\n-                let s = r#\"#random##\n+fn f() {\n+    let s = r#\"#random##\n string\"#;\n-            }\n-            \"####,\n+}\n+\"####,\n         )\n     }\n \n@@ -211,16 +211,16 @@ string\"#;\n         check_assist(\n             make_raw_string,\n             r###\"\n-            fn f() {\n-                let s = <|>\"#random\\\"##\\nstring\";\n-            }\n-            \"###,\n+fn f() {\n+    let s = <|>\"#random\\\"##\\nstring\";\n+}\n+\"###,\n             r####\"\n-            fn f() {\n-                let s = r###\"#random\"##\n+fn f() {\n+    let s = r###\"#random\"##\n string\"###;\n-            }\n-            \"####,\n+}\n+\"####,\n         )\n     }\n "}, {"sha": "49837d60ba235b548b0bb844a901d05306749f49", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=e5101ae150db5faa7ddf8393e375032ef371f5e5", "patch": "@@ -4,18 +4,18 @@ use hir::Semantics;\n use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n use ra_ide_db::RootDatabase;\n use ra_syntax::TextRange;\n-use test_utils::{\n-    assert_eq_text, extract_offset, extract_range, extract_range_or_offset, RangeOrOffset,\n-};\n+use test_utils::{assert_eq_text, extract_offset, extract_range, extract_range_or_offset};\n \n use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, Assists};\n+use stdx::trim_indent;\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     RootDatabase::with_single_file(text)\n }\n \n pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n+    let ra_fixture_after = trim_indent(ra_fixture_after);\n+    check(assist, ra_fixture_before, ExpectedResult::After(&ra_fixture_after));\n }\n \n // FIXME: instead of having a separate function here, maybe use\n@@ -65,19 +65,8 @@ enum ExpectedResult<'a> {\n }\n \n fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n-    let (text_without_caret, file_with_caret_id, range_or_offset, db) = if before.contains(\"//-\") {\n-        let (db, position) = RootDatabase::with_position(before);\n-        (\n-            db.file_text(position.file_id).as_ref().to_owned(),\n-            position.file_id,\n-            RangeOrOffset::Offset(position.offset),\n-            db,\n-        )\n-    } else {\n-        let (range_or_offset, text_without_caret) = extract_range_or_offset(before);\n-        let (db, file_id) = with_single_file(&text_without_caret);\n-        (text_without_caret, file_id, range_or_offset, db)\n-    };\n+    let (db, file_with_caret_id, range_or_offset) = RootDatabase::with_range_or_offset(before);\n+    let text_without_caret = db.file_text(file_with_caret_id).as_ref().to_owned();\n \n     let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n "}, {"sha": "b7c45a61931b1f36046bdbfc08218993797e2a9c", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=e5101ae150db5faa7ddf8393e375032ef371f5e5", "patch": "@@ -198,8 +198,7 @@ pub(crate) struct FamousDefs<'a, 'b>(pub(crate) &'a Semantics<'b, RootDatabase>,\n #[allow(non_snake_case)]\n impl FamousDefs<'_, '_> {\n     #[cfg(test)]\n-    pub(crate) const FIXTURE: &'static str = r#\"\n-//- /libcore.rs crate:core\n+    pub(crate) const FIXTURE: &'static str = r#\"//- /libcore.rs crate:core\n pub mod convert {\n     pub trait From<T> {\n         fn from(T) -> Self;"}, {"sha": "541815fe7669449be97b4e89317d58ce412850e7", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=e5101ae150db5faa7ddf8393e375032ef371f5e5", "patch": "@@ -61,7 +61,7 @@ use std::{str::FromStr, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n-use test_utils::{extract_offset, Fixture, CURSOR_MARKER};\n+use test_utils::{extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER};\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n@@ -86,9 +86,19 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n     }\n \n     fn with_position(ra_fixture: &str) -> (Self, FilePosition) {\n+        let (db, file_id, range_or_offset) = Self::with_range_or_offset(ra_fixture);\n+        let offset = match range_or_offset {\n+            RangeOrOffset::Range(_) => panic!(),\n+            RangeOrOffset::Offset(it) => it,\n+        };\n+        (db, FilePosition { file_id, offset })\n+    }\n+\n+    fn with_range_or_offset(ra_fixture: &str) -> (Self, FileId, RangeOrOffset) {\n         let mut db = Self::default();\n         let (pos, _) = with_files(&mut db, ra_fixture);\n-        (db, pos.unwrap())\n+        let (file_id, range_or_offset) = pos.unwrap();\n+        (db, file_id, range_or_offset)\n     }\n \n     fn test_crate(&self) -> CrateId {\n@@ -151,7 +161,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n fn with_files(\n     db: &mut dyn SourceDatabaseExt,\n     fixture: &str,\n-) -> (Option<FilePosition>, Vec<FileId>) {\n+) -> (Option<(FileId, RangeOrOffset)>, Vec<FileId>) {\n     let fixture = Fixture::parse(fixture);\n \n     let mut files = Vec::new();\n@@ -193,9 +203,9 @@ fn with_files(\n         }\n \n         let text = if entry.text.contains(CURSOR_MARKER) {\n-            let (offset, text) = extract_offset(&entry.text);\n+            let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n             assert!(file_position.is_none());\n-            file_position = Some(FilePosition { file_id, offset });\n+            file_position = Some((file_id, range_or_offset));\n             text.to_string()\n         } else {\n             entry.text.to_string()"}, {"sha": "7e93fbcd64ba48e603b93c6c7488814d9c1ea14c", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5101ae150db5faa7ddf8393e375032ef371f5e5/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=e5101ae150db5faa7ddf8393e375032ef371f5e5", "patch": "@@ -30,7 +30,9 @@ impl Fixture {\n \n         let mut res: Vec<Fixture> = Vec::new();\n \n-        for (ix, line) in lines_with_ends(&fixture).enumerate() {\n+        let default = if ra_fixture.contains(\"//-\") { None } else { Some(\"//- /main.rs\") };\n+\n+        for (ix, line) in default.into_iter().chain(lines_with_ends(&fixture)).enumerate() {\n             if line.contains(\"//-\") {\n                 assert!(\n                     line.starts_with(\"//-\"),"}]}