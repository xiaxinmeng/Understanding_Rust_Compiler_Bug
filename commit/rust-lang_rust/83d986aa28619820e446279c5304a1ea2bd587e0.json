{"sha": "83d986aa28619820e446279c5304a1ea2bd587e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZDk4NmFhMjg2MTk4MjBlNDQ2Mjc5YzUzMDRhMWVhMmJkNTg3ZTA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-25T11:51:22Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-27T10:09:32Z"}, "message": "rustc_target: add lifetime parameter to `LayoutOf`.", "tree": {"sha": "3b06df0cb1a229f0e198f29c98f80b69b82b8edd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b06df0cb1a229f0e198f29c98f80b69b82b8edd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83d986aa28619820e446279c5304a1ea2bd587e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83d986aa28619820e446279c5304a1ea2bd587e0", "html_url": "https://github.com/rust-lang/rust/commit/83d986aa28619820e446279c5304a1ea2bd587e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83d986aa28619820e446279c5304a1ea2bd587e0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd6306d26af1a163aaaa1456b4594244ddd182f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd6306d26af1a163aaaa1456b4594244ddd182f", "html_url": "https://github.com/rust-lang/rust/commit/dfd6306d26af1a163aaaa1456b4594244ddd182f"}], "stats": {"total": 190, "additions": 88, "deletions": 102}, "files": [{"sha": "03f462a63b31bf211a33fcdee3323c4764054d3e", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -256,7 +256,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) inline_asm_index: u32,\n }\n \n-impl<'tcx> LayoutOf for FunctionCx<'_, '_, 'tcx> {\n+impl<'tcx> LayoutOf<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n \n@@ -364,7 +364,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n \n pub(crate) struct RevealAllLayoutCx<'tcx>(pub(crate) TyCtxt<'tcx>);\n \n-impl<'tcx> LayoutOf for RevealAllLayoutCx<'tcx> {\n+impl<'tcx> LayoutOf<'tcx> for RevealAllLayoutCx<'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n "}, {"sha": "47529f719b514a880a1409d8d42120680186e832", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -88,7 +88,7 @@ impl HasTargetSpec for Builder<'_, '_, 'tcx> {\n     }\n }\n \n-impl abi::LayoutOf for Builder<'_, '_, 'tcx> {\n+impl abi::LayoutOf<'tcx> for Builder<'_, '_, 'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n "}, {"sha": "45da18d4a24f3e003c06a301d274d395bd3a9622", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -835,7 +835,7 @@ impl ty::layout::HasTyCtxt<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n }\n \n-impl LayoutOf for CodegenCx<'ll, 'tcx> {\n+impl LayoutOf<'tcx> for CodegenCx<'ll, 'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n "}, {"sha": "1393fc71d6bc3fdd75903f28f2b82d7372691303", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -39,12 +39,17 @@ pub trait BackendTypes {\n }\n \n pub trait Backend<'tcx>:\n-    Sized + BackendTypes + HasTyCtxt<'tcx> + LayoutOf<Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n+    Sized\n+    + BackendTypes\n+    + HasTyCtxt<'tcx>\n+    + LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n {\n }\n \n impl<'tcx, T> Backend<'tcx> for T where\n-    Self: BackendTypes + HasTyCtxt<'tcx> + LayoutOf<Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n+    Self: BackendTypes\n+        + HasTyCtxt<'tcx>\n+        + LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n {\n }\n "}, {"sha": "6c622a430158d8a363d99b93e14d959f5d41378d", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -1059,7 +1059,7 @@ impl<'tcx> LateContext<'tcx> {\n     }\n }\n \n-impl<'tcx> LayoutOf for LateContext<'tcx> {\n+impl<'tcx> LayoutOf<'tcx> for LateContext<'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n "}, {"sha": "b388f71d9f2900136d91ba93f2f4cf4cc885292d", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -2054,7 +2054,7 @@ impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {\n \n pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;\n \n-impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {\n+impl LayoutOf<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n@@ -2066,7 +2066,7 @@ impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     }\n }\n \n-impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n+impl LayoutOf<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n@@ -2080,9 +2080,7 @@ impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n \n impl<'tcx, C> TyAndLayoutMethods<'tcx, C> for Ty<'tcx>\n where\n-    C: LayoutOf<Ty = Ty<'tcx>, TyAndLayout: MaybeResult<TyAndLayout<'tcx>>>\n-        + HasTyCtxt<'tcx>\n-        + HasParamEnv<'tcx>,\n+    C: LayoutOf<'tcx, Ty = Ty<'tcx>> + HasTyCtxt<'tcx> + HasParamEnv<'tcx>,\n {\n     fn for_variant(\n         this: TyAndLayout<'tcx>,\n@@ -2135,21 +2133,19 @@ where\n     }\n \n     fn field(this: TyAndLayout<'tcx>, cx: &C, i: usize) -> C::TyAndLayout {\n-        enum TyMaybeWithLayout<C: LayoutOf> {\n+        enum TyMaybeWithLayout<'tcx, C: LayoutOf<'tcx>> {\n             Ty(C::Ty),\n             TyAndLayout(C::TyAndLayout),\n         }\n \n         fn ty_and_layout_kind<\n-            C: LayoutOf<Ty = Ty<'tcx>, TyAndLayout: MaybeResult<TyAndLayout<'tcx>>>\n-                + HasTyCtxt<'tcx>\n-                + HasParamEnv<'tcx>,\n+            C: LayoutOf<'tcx, Ty = Ty<'tcx>> + HasTyCtxt<'tcx> + HasParamEnv<'tcx>,\n         >(\n             this: TyAndLayout<'tcx>,\n             cx: &C,\n             i: usize,\n             ty: C::Ty,\n-        ) -> TyMaybeWithLayout<C> {\n+        ) -> TyMaybeWithLayout<'tcx, C> {\n             let tcx = cx.tcx();\n             let tag_layout = |tag: &Scalar| -> C::TyAndLayout {\n                 let layout = Layout::scalar(cx, tag.clone());\n@@ -2538,7 +2534,7 @@ impl<'tcx> ty::Instance<'tcx> {\n \n pub trait FnAbiExt<'tcx, C>\n where\n-    C: LayoutOf<Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n+    C: LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n         + HasDataLayout\n         + HasTargetSpec\n         + HasTyCtxt<'tcx>\n@@ -2725,7 +2721,7 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n \n impl<'tcx, C> FnAbiExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n where\n-    C: LayoutOf<Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n+    C: LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n         + HasDataLayout\n         + HasTargetSpec\n         + HasTyCtxt<'tcx>\n@@ -3006,7 +3002,7 @@ where\n \n fn make_thin_self_ptr<'tcx, C>(cx: &C, mut layout: TyAndLayout<'tcx>) -> TyAndLayout<'tcx>\n where\n-    C: LayoutOf<Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n+    C: LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n         + HasTyCtxt<'tcx>\n         + HasParamEnv<'tcx>,\n {"}, {"sha": "347359e1456b08b3beb4378c65aa743d23ac9b0b", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -312,7 +312,7 @@ where\n     }\n }\n \n-impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> LayoutOf<'tcx> for InterpCx<'mir, 'tcx, M> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = InterpResult<'tcx, TyAndLayout<'tcx>>;\n "}, {"sha": "c17c88973a97533f09aeb7bab527fc87f564e1a2", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -330,7 +330,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     source_info: Option<SourceInfo>,\n }\n \n-impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n+impl<'mir, 'tcx> LayoutOf<'tcx> for ConstPropagator<'mir, 'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n "}, {"sha": "64ea4ee570e821d97a9269693f27c8182a6f7e4a", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -113,7 +113,7 @@ struct UnwrapLayoutCx<'tcx> {\n     param_env: ParamEnv<'tcx>,\n }\n \n-impl LayoutOf for UnwrapLayoutCx<'tcx> {\n+impl LayoutOf<'tcx> for UnwrapLayoutCx<'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n "}, {"sha": "02006e3fd693a684ec0f440f741feedbe916c215", "filename": "compiler/rustc_target/src/abi/call/aarch64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -4,7 +4,7 @@ use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>) -> Option<Uniform>\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     arg.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()).and_then(|unit| {\n         let size = arg.layout.size;\n@@ -27,7 +27,7 @@ where\n fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n@@ -49,7 +49,7 @@ where\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(32);\n@@ -71,7 +71,7 @@ where\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !fn_abi.ret.is_ignore() {\n         classify_ret(cx, &mut fn_abi.ret);"}, {"sha": "404702ae94b1caabbab75cacd3da7a903b2efdf8", "filename": "compiler/rustc_target/src/abi/call/amdgpu.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Famdgpu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Famdgpu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Famdgpu.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -4,23 +4,23 @@ use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n fn classify_ret<'a, Ty, C>(_cx: &C, ret: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     ret.extend_integer_width_to(32);\n }\n \n fn classify_arg<'a, Ty, C>(_cx: &C, arg: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     arg.extend_integer_width_to(32);\n }\n \n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !fn_abi.ret.is_ignore() {\n         classify_ret(cx, &mut fn_abi.ret);"}, {"sha": "55bcdba7aaa5c80fedd70b762dbb86c6dbee78ea", "filename": "compiler/rustc_target/src/abi/call/arm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -5,7 +5,7 @@ use crate::spec::HasTargetSpec;\n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>) -> Option<Uniform>\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     arg.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()).and_then(|unit| {\n         let size = arg.layout.size;\n@@ -28,7 +28,7 @@ where\n fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>, vfp: bool)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n@@ -54,7 +54,7 @@ where\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>, vfp: bool)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(32);\n@@ -76,7 +76,7 @@ where\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n {\n     // If this is a target with a hard-float ABI, and the function is not explicitly\n     // `extern \"aapcs\"`, then we must use the VFP registers for homogeneous aggregates."}, {"sha": "cc443197680e47c6aea6df744dbd6e0f4a158d07", "filename": "compiler/rustc_target/src/abi/call/mips.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -1,10 +1,9 @@\n use crate::abi::call::{ArgAbi, FnAbi, Reg, Uniform};\n-use crate::abi::{HasDataLayout, LayoutOf, Size, TyAndLayoutMethods};\n+use crate::abi::{HasDataLayout, Size};\n \n-fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n+fn classify_ret<Ty, C>(cx: &C, ret: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n where\n-    Ty: TyAndLayoutMethods<'a, C>,\n-    C: LayoutOf<Ty = Ty> + HasDataLayout,\n+    C: HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n@@ -14,10 +13,9 @@ where\n     }\n }\n \n-fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n+fn classify_arg<Ty, C>(cx: &C, arg: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n where\n-    Ty: TyAndLayoutMethods<'a, C>,\n-    C: LayoutOf<Ty = Ty> + HasDataLayout,\n+    C: HasDataLayout,\n {\n     let dl = cx.data_layout();\n     let size = arg.layout.size;\n@@ -35,10 +33,9 @@ where\n     *offset = offset.align_to(align) + size.align_to(align);\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'_, Ty>)\n+pub fn compute_abi_info<Ty, C>(cx: &C, fn_abi: &mut FnAbi<'_, Ty>)\n where\n-    Ty: TyAndLayoutMethods<'a, C>,\n-    C: LayoutOf<Ty = Ty> + HasDataLayout,\n+    C: HasDataLayout,\n {\n     let mut offset = Size::ZERO;\n     if !fn_abi.ret.is_ignore() {"}, {"sha": "1b03024e329071301d7f50e643446117e649242a", "filename": "compiler/rustc_target/src/abi/call/mips64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -20,7 +20,7 @@ fn extend_integer_width_mips<Ty>(arg: &mut ArgAbi<'_, Ty>, bits: u64) {\n fn float_reg<'a, Ty, C>(cx: &C, ret: &ArgAbi<'a, Ty>, i: usize) -> Option<Reg>\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     match ret.layout.field(cx, i).abi {\n         abi::Abi::Scalar(ref scalar) => match scalar.value {\n@@ -35,7 +35,7 @@ where\n fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n         extend_integer_width_mips(ret, 64);\n@@ -75,7 +75,7 @@ where\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !arg.layout.is_aggregate() {\n         extend_integer_width_mips(arg, 64);\n@@ -145,7 +145,7 @@ where\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !fn_abi.ret.is_ignore() {\n         classify_ret(cx, &mut fn_abi.ret);"}, {"sha": "452e700d5c206449894e326eac03f2d9fe7a920e", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -317,7 +317,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n     pub fn homogeneous_aggregate<C>(&self, cx: &C) -> Result<HomogeneousAggregate, Heterogeneous>\n     where\n         Ty: TyAndLayoutMethods<'a, C> + Copy,\n-        C: LayoutOf<Ty = Ty, TyAndLayout = Self>,\n+        C: LayoutOf<'a, Ty = Ty, TyAndLayout = Self>,\n     {\n         match self.abi {\n             Abi::Uninhabited => Err(Heterogeneous),\n@@ -604,7 +604,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n     pub fn adjust_for_cabi<C>(&mut self, cx: &C, abi: spec::abi::Abi) -> Result<(), String>\n     where\n         Ty: TyAndLayoutMethods<'a, C> + Copy,\n-        C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n+        C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n     {\n         if abi == spec::abi::Abi::X86Interrupt {\n             if let Some(arg) = self.args.first_mut() {"}, {"sha": "662a0b44af5c687fee358c7377aca37957123c76", "filename": "compiler/rustc_target/src/abi/call/powerpc64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -20,7 +20,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(\n ) -> Option<Uniform>\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     arg.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()).and_then(|unit| {\n         // ELFv1 only passes one-member aggregates transparently.\n@@ -44,7 +44,7 @@ where\n fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>, abi: ABI)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(64);\n@@ -87,7 +87,7 @@ where\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>, abi: ABI)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(64);\n@@ -117,7 +117,7 @@ where\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n {\n     let abi = if cx.target_spec().env == \"musl\" {\n         ELFv2"}, {"sha": "f1e7658aec615c297886524d2046ad81fcb006cd", "filename": "compiler/rustc_target/src/abi/call/riscv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -44,7 +44,7 @@ fn should_use_fp_conv_helper<'a, Ty, C>(\n ) -> Result<(), CannotUseFpConv>\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>>,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>>,\n {\n     match arg_layout.abi {\n         Abi::Scalar(ref scalar) => match scalar.value {\n@@ -131,7 +131,7 @@ fn should_use_fp_conv<'a, Ty, C>(\n ) -> Option<FloatConv>\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>>,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>>,\n {\n     let mut field1_kind = RegPassKind::Unknown;\n     let mut field2_kind = RegPassKind::Unknown;\n@@ -150,7 +150,7 @@ where\n fn classify_ret<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>, xlen: u64, flen: u64) -> bool\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>>,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>>,\n {\n     if let Some(conv) = should_use_fp_conv(cx, &arg.layout, xlen, flen) {\n         match conv {\n@@ -213,7 +213,7 @@ fn classify_arg<'a, Ty, C>(\n     avail_fprs: &mut u64,\n ) where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>>,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>>,\n {\n     if !is_vararg {\n         match should_use_fp_conv(cx, &arg.layout, xlen, flen) {\n@@ -321,7 +321,7 @@ fn extend_integer_width<'a, Ty>(arg: &mut ArgAbi<'a, Ty>, xlen: u64) {\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n {\n     let flen = match &cx.target_spec().llvm_abiname[..] {\n         \"ilp32f\" | \"lp64f\" => 32,"}, {"sha": "dea5d4605d13488a152044530eafdb74d2308c02", "filename": "compiler/rustc_target/src/abi/call/s390x.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fs390x.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -4,11 +4,7 @@\n use crate::abi::call::{ArgAbi, FnAbi, Reg};\n use crate::abi::{self, HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n \n-fn classify_ret<'a, Ty, C>(ret: &mut ArgAbi<'_, Ty>)\n-where\n-    Ty: TyAndLayoutMethods<'a, C>,\n-    C: LayoutOf<Ty = Ty> + HasDataLayout,\n-{\n+fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n     if !ret.layout.is_aggregate() && ret.layout.size.bits() <= 64 {\n         ret.extend_integer_width_to(64);\n     } else {\n@@ -19,7 +15,7 @@ where\n fn is_single_fp_element<'a, Ty, C>(cx: &C, layout: TyAndLayout<'a, Ty>) -> bool\n where\n     Ty: TyAndLayoutMethods<'a, C>,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     match layout.abi {\n         abi::Abi::Scalar(ref scalar) => scalar.value.is_float(),\n@@ -37,7 +33,7 @@ where\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !arg.layout.is_aggregate() && arg.layout.size.bits() <= 64 {\n         arg.extend_integer_width_to(64);\n@@ -64,7 +60,7 @@ where\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !fn_abi.ret.is_ignore() {\n         classify_ret(&mut fn_abi.ret);"}, {"sha": "cc443197680e47c6aea6df744dbd6e0f4a158d07", "filename": "compiler/rustc_target/src/abi/call/sparc.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -1,10 +1,9 @@\n use crate::abi::call::{ArgAbi, FnAbi, Reg, Uniform};\n-use crate::abi::{HasDataLayout, LayoutOf, Size, TyAndLayoutMethods};\n+use crate::abi::{HasDataLayout, Size};\n \n-fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n+fn classify_ret<Ty, C>(cx: &C, ret: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n where\n-    Ty: TyAndLayoutMethods<'a, C>,\n-    C: LayoutOf<Ty = Ty> + HasDataLayout,\n+    C: HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n@@ -14,10 +13,9 @@ where\n     }\n }\n \n-fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n+fn classify_arg<Ty, C>(cx: &C, arg: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n where\n-    Ty: TyAndLayoutMethods<'a, C>,\n-    C: LayoutOf<Ty = Ty> + HasDataLayout,\n+    C: HasDataLayout,\n {\n     let dl = cx.data_layout();\n     let size = arg.layout.size;\n@@ -35,10 +33,9 @@ where\n     *offset = offset.align_to(align) + size.align_to(align);\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'_, Ty>)\n+pub fn compute_abi_info<Ty, C>(cx: &C, fn_abi: &mut FnAbi<'_, Ty>)\n where\n-    Ty: TyAndLayoutMethods<'a, C>,\n-    C: LayoutOf<Ty = Ty> + HasDataLayout,\n+    C: HasDataLayout,\n {\n     let mut offset = Size::ZERO;\n     if !fn_abi.ret.is_ignore() {"}, {"sha": "bdbce38e86aba654b76c694b0873b3228f3f0c0f", "filename": "compiler/rustc_target/src/abi/call/sparc64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -6,7 +6,7 @@ use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>) -> Option<Uniform>\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     arg.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()).and_then(|unit| {\n         // Ensure we have at most eight uniquely addressable members.\n@@ -27,7 +27,7 @@ where\n fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(64);\n@@ -53,7 +53,7 @@ where\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(64);\n@@ -77,7 +77,7 @@ where\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !fn_abi.ret.is_ignore() {\n         classify_ret(cx, &mut fn_abi.ret);"}, {"sha": "c3187dff7af1924238f325d4cd3769e8106009a9", "filename": "compiler/rustc_target/src/abi/call/wasm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fwasm.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -4,7 +4,7 @@ use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n fn unwrap_trivial_aggregate<'a, Ty, C>(cx: &C, val: &mut ArgAbi<'a, Ty>) -> bool\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if val.layout.is_aggregate() {\n         if let Some(unit) = val.layout.homogeneous_aggregate(cx).ok().and_then(|ha| ha.unit()) {\n@@ -21,7 +21,7 @@ where\n fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     ret.extend_integer_width_to(32);\n     if ret.layout.is_aggregate() && !unwrap_trivial_aggregate(cx, ret) {\n@@ -32,7 +32,7 @@ where\n fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     arg.extend_integer_width_to(32);\n     if arg.layout.is_aggregate() && !unwrap_trivial_aggregate(cx, arg) {\n@@ -44,7 +44,7 @@ where\n pub fn compute_c_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     if !fn_abi.ret.is_ignore() {\n         classify_ret(cx, &mut fn_abi.ret);"}, {"sha": "d27f1996a61746e5906346f13a8c1d2a8319d17d", "filename": "compiler/rustc_target/src/abi/call/x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -11,7 +11,7 @@ pub enum Flavor {\n fn is_single_fp_element<'a, Ty, C>(cx: &C, layout: TyAndLayout<'a, Ty>) -> bool\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     match layout.abi {\n         abi::Abi::Scalar(ref scalar) => scalar.value.is_float(),\n@@ -29,7 +29,7 @@ where\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>, flavor: Flavor)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n {\n     if !fn_abi.ret.is_ignore() {\n         if fn_abi.ret.layout.is_aggregate() {"}, {"sha": "da47396e2d1d20af20d71b84040ee1e31f05af55", "filename": "compiler/rustc_target/src/abi/call/x86_64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -27,7 +27,7 @@ fn classify_arg<'a, Ty, C>(\n ) -> Result<[Option<Class>; MAX_EIGHTBYTES], Memory>\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     fn classify<'a, Ty, C>(\n         cx: &C,\n@@ -37,7 +37,7 @@ where\n     ) -> Result<(), Memory>\n     where\n         Ty: TyAndLayoutMethods<'a, C> + Copy,\n-        C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+        C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n     {\n         if !off.is_aligned(layout.align.abi) {\n             if !layout.is_zst() {\n@@ -173,7 +173,7 @@ const MAX_SSE_REGS: usize = 8; // XMM0-7\n pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n-    C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n+    C: LayoutOf<'a, Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout,\n {\n     let mut int_regs = MAX_INT_REGS;\n     let mut sse_regs = MAX_SSE_REGS;"}, {"sha": "1d1a34dc24844170db0a33c1c48cb10e32d0d469", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d986aa28619820e446279c5304a1ea2bd587e0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=83d986aa28619820e446279c5304a1ea2bd587e0", "patch": "@@ -1174,19 +1174,16 @@ impl<'a, Ty> Deref for TyAndLayout<'a, Ty> {\n }\n \n /// Trait for context types that can compute layouts of things.\n-pub trait LayoutOf {\n+pub trait LayoutOf<'a> {\n     type Ty;\n-    type TyAndLayout;\n+    type TyAndLayout: MaybeResult<TyAndLayout<'a, Self::Ty>>;\n \n     fn layout_of(&self, ty: Self::Ty) -> Self::TyAndLayout;\n     fn spanned_layout_of(&self, ty: Self::Ty, _span: Span) -> Self::TyAndLayout {\n         self.layout_of(ty)\n     }\n }\n \n-/// The `TyAndLayout` above will always be a `MaybeResult<TyAndLayout<'_, Self>>`.\n-/// We can't add the bound due to the lifetime, but this trait is still useful when\n-/// writing code that's generic over the `LayoutOf` impl.\n pub trait MaybeResult<T> {\n     type Error;\n \n@@ -1239,7 +1236,7 @@ pub struct PointeeInfo {\n     pub address_space: AddressSpace,\n }\n \n-pub trait TyAndLayoutMethods<'a, C: LayoutOf<Ty = Self>>: Sized {\n+pub trait TyAndLayoutMethods<'a, C: LayoutOf<'a, Ty = Self>>: Sized {\n     fn for_variant(\n         this: TyAndLayout<'a, Self>,\n         cx: &C,\n@@ -1253,25 +1250,23 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n     pub fn for_variant<C>(self, cx: &C, variant_index: VariantIdx) -> Self\n     where\n         Ty: TyAndLayoutMethods<'a, C>,\n-        C: LayoutOf<Ty = Ty>,\n+        C: LayoutOf<'a, Ty = Ty>,\n     {\n         Ty::for_variant(self, cx, variant_index)\n     }\n \n-    /// Callers might want to use `C: LayoutOf<Ty=Ty, TyAndLayout: MaybeResult<Self>>`\n-    /// to allow recursion (see `might_permit_zero_init` below for an example).\n     pub fn field<C>(self, cx: &C, i: usize) -> C::TyAndLayout\n     where\n         Ty: TyAndLayoutMethods<'a, C>,\n-        C: LayoutOf<Ty = Ty>,\n+        C: LayoutOf<'a, Ty = Ty>,\n     {\n         Ty::field(self, cx, i)\n     }\n \n     pub fn pointee_info_at<C>(self, cx: &C, offset: Size) -> Option<PointeeInfo>\n     where\n         Ty: TyAndLayoutMethods<'a, C>,\n-        C: LayoutOf<Ty = Ty>,\n+        C: LayoutOf<'a, Ty = Ty>,\n     {\n         Ty::pointee_info_at(self, cx, offset)\n     }\n@@ -1305,7 +1300,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n     where\n         Self: Copy,\n         Ty: TyAndLayoutMethods<'a, C>,\n-        C: LayoutOf<Ty = Ty, TyAndLayout: MaybeResult<Self, Error = E>> + HasDataLayout,\n+        C: LayoutOf<'a, Ty = Ty, TyAndLayout: MaybeResult<Self, Error = E>> + HasDataLayout,\n     {\n         let scalar_allows_raw_init = move |s: &Scalar| -> bool {\n             if zero {"}]}