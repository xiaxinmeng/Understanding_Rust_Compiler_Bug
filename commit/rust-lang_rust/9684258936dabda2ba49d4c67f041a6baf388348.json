{"sha": "9684258936dabda2ba49d4c67f041a6baf388348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ODQyNTg5MzZkYWJkYTJiYTQ5ZDRjNjdmMDQxYTZiYWYzODgzNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-26T19:58:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-26T19:58:11Z"}, "message": "Auto merge of #84600 - m-ou-se:rollup-mf5m2z8, r=m-ou-se\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #84120 (Stabilize Duration::MAX)\n - #84523 (Stabilize ordering_helpers.)\n - #84551 (Unify the docs of std::env::{args_os, args} more)\n - #84574 (rustdoc: Fix typos in maybe_inline_local fn)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8419a465ccab5aaf0ce31cc6d7a81df33188b3c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8419a465ccab5aaf0ce31cc6d7a81df33188b3c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9684258936dabda2ba49d4c67f041a6baf388348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9684258936dabda2ba49d4c67f041a6baf388348", "html_url": "https://github.com/rust-lang/rust/commit/9684258936dabda2ba49d4c67f041a6baf388348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9684258936dabda2ba49d4c67f041a6baf388348/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae54ee650750f8d84492e61f09e22051ec41b763", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae54ee650750f8d84492e61f09e22051ec41b763", "html_url": "https://github.com/rust-lang/rust/commit/ae54ee650750f8d84492e61f09e22051ec41b763"}, {"sha": "8b33dfa8ad03c18169e53fefd00f27697afc4f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b33dfa8ad03c18169e53fefd00f27697afc4f35", "html_url": "https://github.com/rust-lang/rust/commit/8b33dfa8ad03c18169e53fefd00f27697afc4f35"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "cdb6006b1b354cf6a64fe00d501e4146acaac16a", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9684258936dabda2ba49d4c67f041a6baf388348/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684258936dabda2ba49d4c67f041a6baf388348/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=9684258936dabda2ba49d4c67f041a6baf388348", "patch": "@@ -334,7 +334,6 @@ impl Ordering {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ordering_helpers)]\n     /// use std::cmp::Ordering;\n     ///\n     /// assert_eq!(Ordering::Less.is_eq(), false);\n@@ -343,7 +342,8 @@ impl Ordering {\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    #[rustc_const_stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n+    #[stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n     pub const fn is_eq(self) -> bool {\n         matches!(self, Equal)\n     }\n@@ -353,7 +353,6 @@ impl Ordering {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ordering_helpers)]\n     /// use std::cmp::Ordering;\n     ///\n     /// assert_eq!(Ordering::Less.is_ne(), true);\n@@ -362,7 +361,8 @@ impl Ordering {\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    #[rustc_const_stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n+    #[stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n     pub const fn is_ne(self) -> bool {\n         !matches!(self, Equal)\n     }\n@@ -372,7 +372,6 @@ impl Ordering {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ordering_helpers)]\n     /// use std::cmp::Ordering;\n     ///\n     /// assert_eq!(Ordering::Less.is_lt(), true);\n@@ -381,7 +380,8 @@ impl Ordering {\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    #[rustc_const_stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n+    #[stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n     pub const fn is_lt(self) -> bool {\n         matches!(self, Less)\n     }\n@@ -391,7 +391,6 @@ impl Ordering {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ordering_helpers)]\n     /// use std::cmp::Ordering;\n     ///\n     /// assert_eq!(Ordering::Less.is_gt(), false);\n@@ -400,7 +399,8 @@ impl Ordering {\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    #[rustc_const_stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n+    #[stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n     pub const fn is_gt(self) -> bool {\n         matches!(self, Greater)\n     }\n@@ -410,7 +410,6 @@ impl Ordering {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ordering_helpers)]\n     /// use std::cmp::Ordering;\n     ///\n     /// assert_eq!(Ordering::Less.is_le(), true);\n@@ -419,7 +418,8 @@ impl Ordering {\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    #[rustc_const_stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n+    #[stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n     pub const fn is_le(self) -> bool {\n         !matches!(self, Greater)\n     }\n@@ -429,7 +429,6 @@ impl Ordering {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ordering_helpers)]\n     /// use std::cmp::Ordering;\n     ///\n     /// assert_eq!(Ordering::Less.is_ge(), false);\n@@ -438,7 +437,8 @@ impl Ordering {\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"ordering_helpers\", issue = \"79885\")]\n+    #[rustc_const_stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n+    #[stable(feature = \"ordering_helpers\", since = \"1.53.0\")]\n     pub const fn is_ge(self) -> bool {\n         !matches!(self, Less)\n     }"}, {"sha": "bfea39e3211fcf4d84f0586847857ecf2a83b93d", "filename": "library/core/src/time.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9684258936dabda2ba49d4c67f041a6baf388348/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684258936dabda2ba49d4c67f041a6baf388348/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=9684258936dabda2ba49d4c67f041a6baf388348", "patch": "@@ -135,17 +135,21 @@ impl Duration {\n \n     /// The maximum duration.\n     ///\n-    /// It is roughly equal to a duration of 584,942,417,355 years.\n+    /// May vary by platform as necessary. Must be able to contain the difference between\n+    /// two instances of [`Instant`] or two instances of [`SystemTime`].\n+    /// This constraint gives it a value of about 584,942,417,355 years in practice,\n+    /// which is currently used on all platforms.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_constants)]\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::MAX, Duration::new(u64::MAX, 1_000_000_000 - 1));\n     /// ```\n-    #[unstable(feature = \"duration_constants\", issue = \"57391\")]\n+    /// [`Instant`]: ../../std/time/struct.Instant.html\n+    /// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n+    #[stable(feature = \"duration_saturating_ops\", since = \"1.53.0\")]\n     pub const MAX: Duration = Duration::new(u64::MAX, NANOS_PER_SEC - 1);\n \n     /// Creates a new `Duration` from the specified number of whole seconds and"}, {"sha": "116a37249e392c42e5bae62aec1dcb5037202bc3", "filename": "library/std/src/env.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9684258936dabda2ba49d4c67f041a6baf388348/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684258936dabda2ba49d4c67f041a6baf388348/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=9684258936dabda2ba49d4c67f041a6baf388348", "patch": "@@ -710,14 +710,14 @@ pub struct ArgsOs {\n /// passed as-is.\n ///\n /// On glibc Linux systems, arguments are retrieved by placing a function in `.init_array`.\n-/// Glibc passes `argc`, `argv`, and `envp` to functions in `.init_array`, as a non-standard\n+/// glibc passes `argc`, `argv`, and `envp` to functions in `.init_array`, as a non-standard\n /// extension. This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it\n /// does on macOS and Windows.\n ///\n /// # Panics\n ///\n /// The returned iterator will panic during iteration if any argument to the\n-/// process is not valid unicode. If this is not desired,\n+/// process is not valid Unicode. If this is not desired,\n /// use the [`args_os`] function instead.\n ///\n /// # Examples\n@@ -735,17 +735,25 @@ pub fn args() -> Args {\n     Args { inner: args_os() }\n }\n \n-/// Returns the arguments which this program was started with (normally passed\n+/// Returns the arguments that this program was started with (normally passed\n /// via the command line).\n ///\n /// The first element is traditionally the path of the executable, but it can be\n-/// set to arbitrary text, and it may not even exist, so this property should\n+/// set to arbitrary text, and may not even exist. This means this property should\n /// not be relied upon for security purposes.\n ///\n-/// On glibc Linux systems, arguments are retrieved by placing a function in \".init_array\".\n-/// Glibc passes argc, argv, and envp to functions in \".init_array\", as a non-standard extension.\n-/// This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it does on macOS\n-/// and Windows.\n+/// On Unix systems the shell usually expands unquoted arguments with glob patterns\n+/// (such as `*` and `?`). On Windows this is not done, and such arguments are\n+/// passed as-is.\n+///\n+/// On glibc Linux systems, arguments are retrieved by placing a function in `.init_array`.\n+/// glibc passes `argc`, `argv`, and `envp` to functions in `.init_array`, as a non-standard\n+/// extension. This allows `std::env::args_os` to work even in a `cdylib` or `staticlib`, as it\n+/// does on macOS and Windows.\n+///\n+/// Note that the returned iterator will not check if the arguments to the\n+/// process are valid Unicode. To ensure UTF-8 validity,\n+/// use the [`args`] function instead.\n ///\n /// # Examples\n ///"}, {"sha": "c9071eea78b7988aeaa6b0621d3663956990f53a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9684258936dabda2ba49d4c67f041a6baf388348/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684258936dabda2ba49d4c67f041a6baf388348/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9684258936dabda2ba49d4c67f041a6baf388348", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om\n     }\n \n-    /// Tries to resolve the target of a `crate use` statement and inlines the\n+    /// Tries to resolve the target of a `pub use` statement and inlines the\n     /// target if it is defined locally and would not be documented otherwise,\n     /// or when it is specifically requested with `please_inline`.\n     /// (the latter is the case when the import is marked `doc(inline)`)\n@@ -183,7 +183,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             || use_attrs.lists(sym::doc).has_word(sym::hidden);\n \n         // For cross-crate impl inlining we need to know whether items are\n-        // reachable in documentation -- a previously nonreachable item can be\n+        // reachable in documentation -- a previously unreachable item can be\n         // made reachable by cross-crate inlining which we're checking here.\n         // (this is done here because we need to know this upfront).\n         if !res_did.is_local() && !is_no_inline {"}]}