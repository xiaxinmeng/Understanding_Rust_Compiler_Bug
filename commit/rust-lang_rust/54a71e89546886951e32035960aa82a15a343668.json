{"sha": "54a71e89546886951e32035960aa82a15a343668", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YTcxZTg5NTQ2ODg2OTUxZTMyMDM1OTYwYWE4MmExNWEzNDM2Njg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T11:54:16Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T11:59:03Z"}, "message": "For backtrace, use StaticMutex instead of a raw sys Mutex.", "tree": {"sha": "0b7263c74ee1c744e4b31ae896bbdc2ed2aa0aa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b7263c74ee1c744e4b31ae896bbdc2ed2aa0aa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54a71e89546886951e32035960aa82a15a343668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54a71e89546886951e32035960aa82a15a343668", "html_url": "https://github.com/rust-lang/rust/commit/54a71e89546886951e32035960aa82a15a343668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54a71e89546886951e32035960aa82a15a343668/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ded394553296d56bb66e925d7001ab3271979ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ded394553296d56bb66e925d7001ab3271979ce", "html_url": "https://github.com/rust-lang/rust/commit/5ded394553296d56bb66e925d7001ab3271979ce"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "a9d8a4e2a81c1e03173b671bb99857f5a3e7da89", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54a71e89546886951e32035960aa82a15a343668/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a71e89546886951e32035960aa82a15a343668/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=54a71e89546886951e32035960aa82a15a343668", "patch": "@@ -303,7 +303,8 @@ impl Backtrace {\n     // Capture a backtrace which start just before the function addressed by\n     // `ip`\n     fn create(ip: usize) -> Backtrace {\n-        let _lock = lock();\n+        // SAFETY: We don't attempt to lock this reentrantly.\n+        let _lock = unsafe { lock() };\n         let mut frames = Vec::new();\n         let mut actual_start = None;\n         unsafe {\n@@ -408,7 +409,8 @@ impl Capture {\n         // Use the global backtrace lock to synchronize this as it's a\n         // requirement of the `backtrace` crate, and then actually resolve\n         // everything.\n-        let _lock = lock();\n+        // SAFETY: We don't attempt to lock this reentrantly.\n+        let _lock = unsafe { lock() };\n         for frame in self.frames.iter_mut() {\n             let symbols = &mut frame.symbols;\n             let frame = match &frame.frame {"}, {"sha": "a549770d8b37823dd30112db435af4e2985a504d", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/54a71e89546886951e32035960aa82a15a343668/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a71e89546886951e32035960aa82a15a343668/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=54a71e89546886951e32035960aa82a15a343668", "patch": "@@ -8,27 +8,15 @@ use crate::io;\n use crate::io::prelude::*;\n use crate::path::{self, Path, PathBuf};\n use crate::sync::atomic::{self, Ordering};\n-use crate::sys::mutex::Mutex;\n+use crate::sys_common::mutex::StaticMutex;\n \n /// Max number of frames to print.\n const MAX_NB_FRAMES: usize = 100;\n \n-pub fn lock() -> impl Drop {\n-    struct Guard;\n-    static LOCK: Mutex = Mutex::new();\n-\n-    impl Drop for Guard {\n-        fn drop(&mut self) {\n-            unsafe {\n-                LOCK.unlock();\n-            }\n-        }\n-    }\n-\n-    unsafe {\n-        LOCK.lock();\n-        Guard\n-    }\n+// SAFETY: Don't attempt to lock this reentrantly.\n+pub unsafe fn lock() -> impl Drop {\n+    static LOCK: StaticMutex = StaticMutex::new();\n+    LOCK.lock()\n }\n \n /// Prints the current backtrace."}]}