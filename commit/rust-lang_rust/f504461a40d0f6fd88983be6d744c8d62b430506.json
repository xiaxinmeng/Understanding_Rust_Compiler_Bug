{"sha": "f504461a40d0f6fd88983be6d744c8d62b430506", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MDQ0NjFhNDBkMGY2ZmQ4ODk4M2JlNmQ3NDRjOGQ2MmI0MzA1MDY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-03T10:19:02Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-03T10:27:00Z"}, "message": "make C-like enums immediate\n\nThis fixes two existing bugs along the way:\n\n* The `transmute` intrinsic did not correctly handle casts of immediate\n  aggregates like newtype structs and tuples.\n* The code for calling foreign functions used the wrong type to create\n  an `alloca` temporary\n\n    enum Foo { A, B }\n    fn foo() -> Foo { A }\n\nBefore:\n\n    ; Function Attrs: nounwind uwtable\n    define void @_ZN3foo18hbedc642d5d9cf5aag4v0.0E(%enum.Foo* noalias nocapture sret, { i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone) #0 {\n    \"function top level\":\n      %2 = getelementptr inbounds %enum.Foo* %0, i64 0, i32 0\n      store i64 0, i64* %2, align 8\n      ret void\n    }\n\nAfter:\n\n    ; Function Attrs: nounwind readnone uwtable\n    define %enum.Foo @_ZN3foo18hbedc642d5d9cf5aag4v0.0E({ i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone) #0 {\n    \"function top level\":\n      ret %enum.Foo zeroinitializer\n    }", "tree": {"sha": "278ac3650fb82652071b5be5c33f6abad91b9cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/278ac3650fb82652071b5be5c33f6abad91b9cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f504461a40d0f6fd88983be6d744c8d62b430506", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f504461a40d0f6fd88983be6d744c8d62b430506", "html_url": "https://github.com/rust-lang/rust/commit/f504461a40d0f6fd88983be6d744c8d62b430506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f504461a40d0f6fd88983be6d744c8d62b430506/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249b356fb3dba0998dbaef34980c9dd1c1e42f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/249b356fb3dba0998dbaef34980c9dd1c1e42f48", "html_url": "https://github.com/rust-lang/rust/commit/249b356fb3dba0998dbaef34980c9dd1c1e42f48"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "ddfcd2630fadb3018b3b90cb987cc791863f21f1", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f504461a40d0f6fd88983be6d744c8d62b430506/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f504461a40d0f6fd88983be6d744c8d62b430506/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f504461a40d0f6fd88983be6d744c8d62b430506", "patch": "@@ -69,10 +69,6 @@ pub fn type_is_immediate(ccx: &mut CrateContext, ty: ty::t) -> bool {\n     if simple {\n         return true;\n     }\n-    // FIXME: #9651: C-like enums should also be immediate\n-    if ty::type_is_c_like_enum(ccx.tcx, ty) {\n-        return false;\n-    }\n     match ty::get(ty).sty {\n         // FIXME: #9651: small `ty_struct` should also be immediate\n         ty::ty_struct(def_id, ref substs) => {"}, {"sha": "098f0e3db7c90f7fd8a12cdb5591f3a7c195f0c1", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f504461a40d0f6fd88983be6d744c8d62b430506/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f504461a40d0f6fd88983be6d744c8d62b430506/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f504461a40d0f6fd88983be6d744c8d62b430506", "patch": "@@ -1727,7 +1727,9 @@ fn trans_imm_cast(bcx: @mut Block, expr: &ast::Expr,\n             (cast_enum, cast_float) => {\n                 let bcx = bcx;\n                 let repr = adt::represent_type(ccx, t_in);\n-                let lldiscrim_a = adt::trans_get_discr(bcx, repr, llexpr);\n+                let slot = Alloca(bcx, ll_t_in, \"\");\n+                Store(bcx, llexpr, slot);\n+                let lldiscrim_a = adt::trans_get_discr(bcx, repr, slot);\n                 match k_out {\n                     cast_integral => int_cast(bcx, ll_t_out,\n                                               val_ty(lldiscrim_a),"}, {"sha": "4676af3d808c6453045eef44095dac9d9fc96458", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f504461a40d0f6fd88983be6d744c8d62b430506/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f504461a40d0f6fd88983be6d744c8d62b430506/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=f504461a40d0f6fd88983be6d744c8d62b430506", "patch": "@@ -222,7 +222,7 @@ pub fn trans_native_call(bcx: @mut Block,\n         // Ensure that we always have the Rust value indirectly,\n         // because it makes bitcasting easier.\n         if !rust_indirect {\n-            let scratch = base::alloca(bcx, arg_tys[i].ty, \"__arg\");\n+            let scratch = base::alloca(bcx, type_of::type_of(ccx, fn_sig.inputs[i]), \"__arg\");\n             Store(bcx, llarg_rust, scratch);\n             llarg_rust = scratch;\n         }"}, {"sha": "f081bef69faae971ae6e1a4943b07d811f72ac2f", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f504461a40d0f6fd88983be6d744c8d62b430506/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f504461a40d0f6fd88983be6d744c8d62b430506/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=f504461a40d0f6fd88983be6d744c8d62b430506", "patch": "@@ -12,7 +12,7 @@\n \n use back::{abi};\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n-use lib::llvm::{ValueRef, Pointer};\n+use lib::llvm::{ValueRef, Pointer, Array, Struct};\n use lib;\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -333,8 +333,12 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n                             (Pointer, other) | (other, Pointer) if other != Pointer => {\n                                 let tmp = Alloca(bcx, llouttype, \"\");\n                                 Store(bcx, llsrcval, PointerCast(bcx, tmp, llintype.ptr_to()));\n-                                let ll_load = Load(bcx, tmp);\n-                                Ret(bcx, ll_load);\n+                                Ret(bcx, Load(bcx, tmp));\n+                            }\n+                            (Array, _) | (_, Array) | (Struct, _) | (_, Struct) => {\n+                                let tmp = Alloca(bcx, llouttype, \"\");\n+                                Store(bcx, llsrcval, PointerCast(bcx, tmp, llintype.ptr_to()));\n+                                Ret(bcx, Load(bcx, tmp));\n                             }\n                             _ => {\n                                 let llbitcast = BitCast(bcx, llsrcval, llouttype);"}]}