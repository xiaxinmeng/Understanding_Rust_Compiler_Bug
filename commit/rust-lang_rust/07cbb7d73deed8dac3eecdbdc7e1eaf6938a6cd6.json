{"sha": "07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Y2JiN2Q3M2RlZWQ4ZGFjM2VlY2RiZGM3ZTFlYWY2OTM4YTZjZDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T09:22:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T09:22:09Z"}, "message": "Support if-let in scopes", "tree": {"sha": "4a1fa22fa8c908f0c3c9489a98aa2479f05def59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1fa22fa8c908f0c3c9489a98aa2479f05def59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "html_url": "https://github.com/rust-lang/rust/commit/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c16530c988e817c5596fa38ebe9e12a302886a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c16530c988e817c5596fa38ebe9e12a302886a8f", "html_url": "https://github.com/rust-lang/rust/commit/c16530c988e817c5596fa38ebe9e12a302886a8f"}], "stats": {"total": 383, "additions": 284, "deletions": 99}, "files": [{"sha": "69c039e8327c11cb106996093595d8ff3dac70de", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 85, "deletions": 16, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -1,4 +1,7 @@\n-use std::collections::HashMap;\n+use std::{\n+    fmt,\n+    collections::HashMap,\n+};\n \n use libsyntax2::{\n     File, TextUnit, AstNode, SyntaxNodeRef, SyntaxNode, SmolStr,\n@@ -49,33 +52,89 @@ fn compute_scopes(fn_def: ast::FnDef) -> FnScopes {\n         .filter_map(|it| it.pat())\n         .for_each(|it| scopes.add_bindings(root, it));\n \n-    let mut scope = root;\n     if let Some(body) = fn_def.body() {\n-        for stmt in body.statements() {\n-            match stmt {\n-                ast::Stmt::LetStmt(stmt) => {\n-                    scope = scopes.new_scope(scope);\n-                    if let Some(pat) = stmt.pat() {\n-                        scopes.add_bindings(scope, pat);\n-                    }\n-                    if let Some(expr) = stmt.initializer() {\n-                        scopes.set_scope(expr.syntax(), scope)\n-                    }\n+        compute_block_scopes(body, &mut scopes, root)\n+    }\n+    scopes\n+}\n+\n+fn compute_block_scopes(block: ast::Block, scopes: &mut FnScopes, mut scope: ScopeId) {\n+    for stmt in block.statements() {\n+        match stmt {\n+            ast::Stmt::LetStmt(stmt) => {\n+                scope = scopes.new_scope(scope);\n+                if let Some(pat) = stmt.pat() {\n+                    scopes.add_bindings(scope, pat);\n                 }\n-                ast::Stmt::ExprStmt(expr) => {\n+                if let Some(expr) = stmt.initializer() {\n                     scopes.set_scope(expr.syntax(), scope)\n                 }\n             }\n+            ast::Stmt::ExprStmt(expr_stmt) => {\n+                if let Some(expr) = expr_stmt.expr() {\n+                    scopes.set_scope(expr.syntax(), scope);\n+                    compute_expr_scopes(expr, scopes, scope);\n+                }\n+            }\n+        }\n+    }\n+    if let Some(expr) = block.expr() {\n+        scopes.set_scope(expr.syntax(), scope);\n+        compute_expr_scopes(expr, scopes, scope);\n+    }\n+}\n+\n+fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n+    match expr {\n+        ast::Expr::IfExpr(e) => {\n+            let cond_scope = e.condition().and_then(|cond| {\n+                compute_cond_scopes(cond, scopes, scope)\n+            });\n+            if let Some(block) = e.then_branch() {\n+                compute_block_scopes(block, scopes, cond_scope.unwrap_or(scope));\n+            }\n+            if let Some(block) = e.else_branch() {\n+                compute_block_scopes(block, scopes, scope);\n+            }\n+        },\n+        ast::Expr::WhileExpr(e) => {\n+            let cond_scope = e.condition().and_then(|cond| {\n+                compute_cond_scopes(cond, scopes, scope)\n+            });\n+            if let Some(block) = e.body() {\n+                compute_block_scopes(block, scopes, cond_scope.unwrap_or(scope));\n+            }\n+        },\n+        ast::Expr::BlockExpr(e) => {\n+            if let Some(block) = e.block() {\n+                compute_block_scopes(block, scopes, scope);\n+            }\n         }\n-        if let Some(expr) = body.expr() {\n-            scopes.set_scope(expr.syntax(), scope)\n+        // ForExpr(e) => TODO,\n+        _ => {\n+            expr.syntax().children()\n+                .filter_map(ast::Expr::cast)\n+                .for_each(|expr| compute_expr_scopes(expr, scopes, scope))\n+        }\n+    };\n+\n+    fn compute_cond_scopes(cond: ast::Condition, scopes: &mut FnScopes, scope: ScopeId) -> Option<ScopeId> {\n+        if let Some(expr) = cond.expr() {\n+            compute_expr_scopes(expr, scopes, scope);\n+        }\n+        if let Some(pat) = cond.pat() {\n+            let s = scopes.new_scope(scope);\n+            scopes.add_bindings(s, pat);\n+            Some(s)\n+        } else {\n+            None\n         }\n     }\n-    scopes\n }\n \n type ScopeId = usize;\n \n+#[derive(Debug)]\n struct FnScopes {\n     scopes: Vec<ScopeData>,\n     scope_for: HashMap<SyntaxNode, ScopeId>,\n@@ -120,6 +179,7 @@ impl FnScopes {\n     }\n }\n \n+#[derive(Debug)]\n struct ScopeData {\n     parent: Option<ScopeId>,\n     entries: Vec<ScopeEntry>\n@@ -149,3 +209,12 @@ impl ScopeEntry {\n             .unwrap()\n     }\n }\n+\n+impl fmt::Debug for ScopeEntry {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"ScopeEntry\")\n+         .field(\"name\", &self.name())\n+         .field(\"syntax\", &self.syntax)\n+         .finish()\n+    }\n+}"}, {"sha": "d051980b0897f1f14478033d68db6a52ff9881f1", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -273,6 +273,19 @@ fn quux(x: i32) {\n }\n \", r#\"[CompletionItem { name: \"y\" },\n        CompletionItem { name: \"x\" }]\"#);\n+\n+    do_check(r\"\n+fn quux() {\n+    if let Some(x) = foo() {\n+        let y = 92;\n+    };\n+    if let Some(a) = bar() {\n+        let b = 62;\n+        1 + <|>\n+    }\n+}\n+\", r#\"[CompletionItem { name: \"b\" },\n+       CompletionItem { name: \"a\" }]\"#);\n }\n \n fn file(text: &str) -> File {"}, {"sha": "6891e857c235f72b21d78f5f4aaad5ac5ccc35b1", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -141,7 +141,11 @@ impl<'a> AstNode<'a> for BlockExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> BlockExpr<'a> {}\n+impl<'a> BlockExpr<'a> {\n+    pub fn block(self) -> Option<Block<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // BreakExpr\n #[derive(Debug, Clone, Copy)]\n@@ -197,6 +201,32 @@ impl<'a> AstNode<'a> for CastExpr<'a> {\n \n impl<'a> CastExpr<'a> {}\n \n+// Condition\n+#[derive(Debug, Clone, Copy)]\n+pub struct Condition<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for Condition<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            CONDITION => Some(Condition { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> Condition<'a> {\n+    pub fn pat(self) -> Option<Pat<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn expr(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // ConstDef\n #[derive(Debug, Clone, Copy)]\n pub struct ConstDef<'a> {\n@@ -403,7 +433,11 @@ impl<'a> AstNode<'a> for ExprStmt<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> ExprStmt<'a> {}\n+impl<'a> ExprStmt<'a> {\n+    pub fn expr(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // FieldExpr\n #[derive(Debug, Clone, Copy)]\n@@ -504,7 +538,11 @@ impl<'a> AstNode<'a> for ForExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> ForExpr<'a> {}\n+impl<'a> ForExpr<'a> {\n+    pub fn body(self) -> Option<Block<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // ForType\n #[derive(Debug, Clone, Copy)]\n@@ -540,7 +578,11 @@ impl<'a> AstNode<'a> for IfExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> IfExpr<'a> {}\n+impl<'a> IfExpr<'a> {\n+    pub fn condition(self) -> Option<Condition<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // ImplItem\n #[derive(Debug, Clone, Copy)]\n@@ -674,7 +716,11 @@ impl<'a> AstNode<'a> for LoopExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LoopExpr<'a> {}\n+impl<'a> LoopExpr<'a> {\n+    pub fn body(self) -> Option<Block<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // MatchArm\n #[derive(Debug, Clone, Copy)]\n@@ -1742,5 +1788,13 @@ impl<'a> AstNode<'a> for WhileExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> WhileExpr<'a> {}\n+impl<'a> WhileExpr<'a> {\n+    pub fn condition(self) -> Option<Condition<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn body(self) -> Option<Block<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n "}, {"sha": "2ebee6a4f3675251929a1f2a4a52911d90e0c681", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -115,6 +115,18 @@ impl<'a> Module<'a> {\n     }\n }\n \n+impl<'a> IfExpr<'a> {\n+    pub fn then_branch(self) -> Option<Block<'a>> {\n+        self.blocks().nth(0)\n+    }\n+    pub fn else_branch(self) -> Option<Block<'a>> {\n+        self.blocks().nth(1)\n+    }\n+    fn blocks(self) -> impl Iterator<Item=Block<'a>> {\n+        children(self)\n+    }\n+}\n+\n fn child_opt<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> Option<C> {\n     children(parent).next()\n }"}, {"sha": "c9e128462b3557a5fa6f4de1250ec2394857da02", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -162,9 +162,10 @@ Grammar(\n         \"PATH_EXPR\",\n         \"LAMBDA_EXPR\",\n         \"IF_EXPR\",\n+        \"WHILE_EXPR\",\n+        \"CONDITION\",\n         \"LOOP_EXPR\",\n         \"FOR_EXPR\",\n-        \"WHILE_EXPR\",\n         \"CONTINUE_EXPR\",\n         \"BREAK_EXPR\",\n         \"LABEL\",\n@@ -336,14 +337,27 @@ Grammar(\n         \"ParenExpr\": (),\n         \"PathExpr\": (),\n         \"LambdaExpr\": (),\n-        \"IfExpr\": (),\n-        \"LoopExpr\": (),\n-        \"ForExpr\": (),\n-        \"WhileExpr\": (),\n+        \"IfExpr\": (\n+            options: [ [\"condition\", \"Condition\"] ]\n+        ),\n+        \"LoopExpr\": (\n+            options: [ [\"body\", \"Block\"] ]\n+        ),\n+        \"ForExpr\": (\n+            options: [ [\"body\", \"Block\"] ]\n+        ),\n+        \"WhileExpr\": (\n+            options: [\n+                [\"condition\", \"Condition\"],\n+                [\"body\", \"Block\"],\n+            ]\n+        ),\n         \"ContinueExpr\": (),\n         \"BreakExpr\": (),\n         \"Label\": (),\n-        \"BlockExpr\": (),\n+        \"BlockExpr\": (\n+            options: [ [\"block\", \"Block\"] ]\n+        ),\n         \"ReturnExpr\": (),\n         \"MatchExpr\": (),\n         \"MatchArmList\": (),\n@@ -432,11 +446,19 @@ Grammar(\n         \"TypeParamList\": ( collections: [ [\"type_params\", \"TypeParam\" ] ]),\n         \"TypeParam\": ( traits: [\"NameOwner\"] ),\n         \"WhereClause\": (),\n-        \"ExprStmt\": (),\n+        \"ExprStmt\": (\n+            options: [ [\"expr\", \"Expr\"] ]\n+        ),\n         \"LetStmt\": ( options: [\n             [\"pat\", \"Pat\"],\n             [\"initializer\", \"Expr\"],\n         ]),\n+        \"Condition\": (\n+            options: [\n+                [ \"pat\", \"Pat\" ],\n+                [ \"expr\", \"Expr\" ],\n+            ]\n+        ),\n         \"Stmt\": (\n             enum: [\"ExprStmt\", \"LetStmt\"],\n         ),"}, {"sha": "bb5402af7f70e8250a895dc81da43b6aa9985eb8", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -237,11 +237,13 @@ fn for_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n // test cond\n // fn foo() { if let Some(_) = None {} }\n fn cond(p: &mut Parser) {\n+    let m = p.start();\n     if p.eat(LET_KW) {\n         patterns::pattern(p);\n         p.expect(EQ);\n     }\n-    expr_no_struct(p)\n+    expr_no_struct(p);\n+    m.complete(p, CONDITION);\n }\n \n // test match_expr"}, {"sha": "0a22b11c22ecc7a33ff42f110a03be1ca2a2ef88", "filename": "crates/libsyntax2/src/syntax_kinds/generated.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -158,9 +158,10 @@ pub enum SyntaxKind {\n     PATH_EXPR,\n     LAMBDA_EXPR,\n     IF_EXPR,\n+    WHILE_EXPR,\n+    CONDITION,\n     LOOP_EXPR,\n     FOR_EXPR,\n-    WHILE_EXPR,\n     CONTINUE_EXPR,\n     BREAK_EXPR,\n     LABEL,\n@@ -418,9 +419,10 @@ impl SyntaxKind {\n             PATH_EXPR => &SyntaxInfo { name: \"PATH_EXPR\" },\n             LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n             IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n+            WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n+            CONDITION => &SyntaxInfo { name: \"CONDITION\" },\n             LOOP_EXPR => &SyntaxInfo { name: \"LOOP_EXPR\" },\n             FOR_EXPR => &SyntaxInfo { name: \"FOR_EXPR\" },\n-            WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n             CONTINUE_EXPR => &SyntaxInfo { name: \"CONTINUE_EXPR\" },\n             BREAK_EXPR => &SyntaxInfo { name: \"BREAK_EXPR\" },\n             LABEL => &SyntaxInfo { name: \"LABEL\" },"}, {"sha": "ae1a8101eb7af7a8cf62486e4fb7f2a15ce2646c", "filename": "crates/libsyntax2/tests/data/parser/inline/0065_if_expr.txt", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -15,8 +15,9 @@ ROOT@[0; 107)\n         IF_EXPR@[15; 25)\n           IF_KW@[15; 17)\n           WHITESPACE@[17; 18)\n-          LITERAL@[18; 22)\n-            TRUE_KW@[18; 22)\n+          CONDITION@[18; 22)\n+            LITERAL@[18; 22)\n+              TRUE_KW@[18; 22)\n           WHITESPACE@[22; 23)\n           BLOCK@[23; 25)\n             L_CURLY@[23; 24)\n@@ -27,8 +28,9 @@ ROOT@[0; 107)\n         IF_EXPR@[31; 49)\n           IF_KW@[31; 33)\n           WHITESPACE@[33; 34)\n-          LITERAL@[34; 38)\n-            TRUE_KW@[34; 38)\n+          CONDITION@[34; 38)\n+            LITERAL@[34; 38)\n+              TRUE_KW@[34; 38)\n           WHITESPACE@[38; 39)\n           BLOCK@[39; 41)\n             L_CURLY@[39; 40)\n@@ -45,8 +47,9 @@ ROOT@[0; 107)\n         IF_EXPR@[55; 90)\n           IF_KW@[55; 57)\n           WHITESPACE@[57; 58)\n-          LITERAL@[58; 62)\n-            TRUE_KW@[58; 62)\n+          CONDITION@[58; 62)\n+            LITERAL@[58; 62)\n+              TRUE_KW@[58; 62)\n           WHITESPACE@[62; 63)\n           BLOCK@[63; 65)\n             L_CURLY@[63; 64)\n@@ -57,8 +60,9 @@ ROOT@[0; 107)\n           IF_EXPR@[71; 90)\n             IF_KW@[71; 73)\n             WHITESPACE@[73; 74)\n-            LITERAL@[74; 79)\n-              FALSE_KW@[74; 79)\n+            CONDITION@[74; 79)\n+              LITERAL@[74; 79)\n+                FALSE_KW@[74; 79)\n             WHITESPACE@[79; 80)\n             BLOCK@[80; 82)\n               L_CURLY@[80; 81)\n@@ -75,11 +79,12 @@ ROOT@[0; 107)\n         IF_EXPR@[96; 103)\n           IF_KW@[96; 98)\n           WHITESPACE@[98; 99)\n-          PATH_EXPR@[99; 100)\n-            PATH@[99; 100)\n-              PATH_SEGMENT@[99; 100)\n-                NAME_REF@[99; 100)\n-                  IDENT@[99; 100) \"S\"\n+          CONDITION@[99; 100)\n+            PATH_EXPR@[99; 100)\n+              PATH@[99; 100)\n+                PATH_SEGMENT@[99; 100)\n+                  NAME_REF@[99; 100)\n+                    IDENT@[99; 100) \"S\"\n           WHITESPACE@[100; 101)\n           BLOCK@[101; 103)\n             L_CURLY@[101; 102)"}, {"sha": "1808f10fbe53eae3a5a58c159f6a382f2b88107c", "filename": "crates/libsyntax2/tests/data/parser/inline/0076_cond.txt", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0076_cond.txt", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0076_cond.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0076_cond.txt?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -14,25 +14,26 @@ ROOT@[0; 38)\n       IF_EXPR@[11; 35)\n         IF_KW@[11; 13)\n         WHITESPACE@[13; 14)\n-        LET_KW@[14; 17)\n-        WHITESPACE@[17; 18)\n-        TUPLE_STRUCT_PAT@[18; 25)\n-          PATH@[18; 22)\n-            PATH_SEGMENT@[18; 22)\n-              NAME_REF@[18; 22)\n-                IDENT@[18; 22) \"Some\"\n-          L_PAREN@[22; 23)\n-          PLACEHOLDER_PAT@[23; 24)\n-            UNDERSCORE@[23; 24)\n-          R_PAREN@[24; 25)\n-        WHITESPACE@[25; 26)\n-        EQ@[26; 27)\n-        WHITESPACE@[27; 28)\n-        PATH_EXPR@[28; 32)\n-          PATH@[28; 32)\n-            PATH_SEGMENT@[28; 32)\n-              NAME_REF@[28; 32)\n-                IDENT@[28; 32) \"None\"\n+        CONDITION@[14; 32)\n+          LET_KW@[14; 17)\n+          WHITESPACE@[17; 18)\n+          TUPLE_STRUCT_PAT@[18; 25)\n+            PATH@[18; 22)\n+              PATH_SEGMENT@[18; 22)\n+                NAME_REF@[18; 22)\n+                  IDENT@[18; 22) \"Some\"\n+            L_PAREN@[22; 23)\n+            PLACEHOLDER_PAT@[23; 24)\n+              UNDERSCORE@[23; 24)\n+            R_PAREN@[24; 25)\n+          WHITESPACE@[25; 26)\n+          EQ@[26; 27)\n+          WHITESPACE@[27; 28)\n+          PATH_EXPR@[28; 32)\n+            PATH@[28; 32)\n+              PATH_SEGMENT@[28; 32)\n+                NAME_REF@[28; 32)\n+                  IDENT@[28; 32) \"None\"\n         WHITESPACE@[32; 33)\n         BLOCK@[33; 35)\n           L_CURLY@[33; 34)"}, {"sha": "c73157c043721d9eeb159642bcfe0041e8336fbd", "filename": "crates/libsyntax2/tests/data/parser/inline/0077_while_expr.txt", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0077_while_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0077_while_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0077_while_expr.txt?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -15,8 +15,9 @@ ROOT@[0; 70)\n         WHILE_EXPR@[15; 28)\n           WHILE_KW@[15; 20)\n           WHITESPACE@[20; 21)\n-          LITERAL@[21; 25)\n-            TRUE_KW@[21; 25)\n+          CONDITION@[21; 25)\n+            LITERAL@[21; 25)\n+              TRUE_KW@[21; 25)\n           WHITESPACE@[25; 26)\n           BLOCK@[26; 28)\n             L_CURLY@[26; 27)\n@@ -27,33 +28,34 @@ ROOT@[0; 70)\n         WHILE_EXPR@[34; 66)\n           WHILE_KW@[34; 39)\n           WHITESPACE@[39; 40)\n-          LET_KW@[40; 43)\n-          WHITESPACE@[43; 44)\n-          TUPLE_STRUCT_PAT@[44; 51)\n-            PATH@[44; 48)\n-              PATH_SEGMENT@[44; 48)\n-                NAME_REF@[44; 48)\n-                  IDENT@[44; 48) \"Some\"\n-            L_PAREN@[48; 49)\n-            BIND_PAT@[49; 50)\n-              NAME@[49; 50)\n-                IDENT@[49; 50) \"x\"\n-            R_PAREN@[50; 51)\n-          WHITESPACE@[51; 52)\n-          EQ@[52; 53)\n-          WHITESPACE@[53; 54)\n-          METHOD_CALL_EXPR@[54; 63)\n-            PATH_EXPR@[54; 56)\n-              PATH@[54; 56)\n-                PATH_SEGMENT@[54; 56)\n-                  NAME_REF@[54; 56)\n-                    IDENT@[54; 56) \"it\"\n-            DOT@[56; 57)\n-            NAME_REF@[57; 61)\n-              IDENT@[57; 61) \"next\"\n-            ARG_LIST@[61; 63)\n-              L_PAREN@[61; 62)\n-              R_PAREN@[62; 63)\n+          CONDITION@[40; 63)\n+            LET_KW@[40; 43)\n+            WHITESPACE@[43; 44)\n+            TUPLE_STRUCT_PAT@[44; 51)\n+              PATH@[44; 48)\n+                PATH_SEGMENT@[44; 48)\n+                  NAME_REF@[44; 48)\n+                    IDENT@[44; 48) \"Some\"\n+              L_PAREN@[48; 49)\n+              BIND_PAT@[49; 50)\n+                NAME@[49; 50)\n+                  IDENT@[49; 50) \"x\"\n+              R_PAREN@[50; 51)\n+            WHITESPACE@[51; 52)\n+            EQ@[52; 53)\n+            WHITESPACE@[53; 54)\n+            METHOD_CALL_EXPR@[54; 63)\n+              PATH_EXPR@[54; 56)\n+                PATH@[54; 56)\n+                  PATH_SEGMENT@[54; 56)\n+                    NAME_REF@[54; 56)\n+                      IDENT@[54; 56) \"it\"\n+              DOT@[56; 57)\n+              NAME_REF@[57; 61)\n+                IDENT@[57; 61) \"next\"\n+              ARG_LIST@[61; 63)\n+                L_PAREN@[61; 62)\n+                R_PAREN@[62; 63)\n           WHITESPACE@[63; 64)\n           BLOCK@[64; 66)\n             L_CURLY@[64; 65)"}, {"sha": "f1b0e27878ac756f26661ab83809e8e95cdd6257", "filename": "crates/libsyntax2/tests/data/parser/inline/0086_no_semi_after_block.txt", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -15,8 +15,9 @@ ROOT@[0; 107)\n         IF_EXPR@[15; 25)\n           IF_KW@[15; 17)\n           WHITESPACE@[17; 18)\n-          LITERAL@[18; 22)\n-            TRUE_KW@[18; 22)\n+          CONDITION@[18; 22)\n+            LITERAL@[18; 22)\n+              TRUE_KW@[18; 22)\n           WHITESPACE@[22; 23)\n           BLOCK@[23; 25)\n             L_CURLY@[23; 24)\n@@ -46,8 +47,9 @@ ROOT@[0; 107)\n         WHILE_EXPR@[58; 71)\n           WHILE_KW@[58; 63)\n           WHITESPACE@[63; 64)\n-          LITERAL@[64; 68)\n-            TRUE_KW@[64; 68)\n+          CONDITION@[64; 68)\n+            LITERAL@[64; 68)\n+              TRUE_KW@[64; 68)\n           WHITESPACE@[68; 69)\n           BLOCK@[69; 71)\n             L_CURLY@[69; 70)"}, {"sha": "7685155955d1a65e99d486a0cfd357e93a19d0ac", "filename": "crates/libsyntax2/tests/data/parser/inline/0107_label.txt", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.txt", "raw_url": "https://github.com/rust-lang/rust/raw/07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0107_label.txt?ref=07cbb7d73deed8dac3eecdbdc7e1eaf6938a6cd6", "patch": "@@ -31,8 +31,9 @@ ROOT@[0; 74)\n           WHITESPACE@[34; 35)\n           WHILE_KW@[35; 40)\n           WHITESPACE@[40; 41)\n-          LITERAL@[41; 45)\n-            TRUE_KW@[41; 45)\n+          CONDITION@[41; 45)\n+            LITERAL@[41; 45)\n+              TRUE_KW@[41; 45)\n           WHITESPACE@[45; 46)\n           BLOCK@[46; 48)\n             L_CURLY@[46; 47)"}]}