{"sha": "22fdf97035990f544a44e53db3ad31bf938a9b98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZmRmOTcwMzU5OTBmNTQ0YTQ0ZTUzZGIzYWQzMWJmOTM4YTliOTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-02T18:58:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-02T18:58:09Z"}, "message": "rollup merge of #21815: nagisa/overflowing-lints", "tree": {"sha": "9e35cdacb38d20bb4b5b036b7e81d388e4db0d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e35cdacb38d20bb4b5b036b7e81d388e4db0d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22fdf97035990f544a44e53db3ad31bf938a9b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22fdf97035990f544a44e53db3ad31bf938a9b98", "html_url": "https://github.com/rust-lang/rust/commit/22fdf97035990f544a44e53db3ad31bf938a9b98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22fdf97035990f544a44e53db3ad31bf938a9b98/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0dee7b52a41db1972868692a3ad009559206678", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0dee7b52a41db1972868692a3ad009559206678", "html_url": "https://github.com/rust-lang/rust/commit/b0dee7b52a41db1972868692a3ad009559206678"}, {"sha": "afa526c5710e45c9fb010bcd0a40c2867b29496d", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa526c5710e45c9fb010bcd0a40c2867b29496d", "html_url": "https://github.com/rust-lang/rust/commit/afa526c5710e45c9fb010bcd0a40c2867b29496d"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "0619d3ab176902478bd2c320629a2f74a448ffa1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22fdf97035990f544a44e53db3ad31bf938a9b98/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22fdf97035990f544a44e53db3ad31bf938a9b98/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=22fdf97035990f544a44e53db3ad31bf938a9b98", "patch": "@@ -227,7 +227,7 @@ impl LintPass for TypeLimits {\n                                 if (negative && v > (min.abs() as u64)) ||\n                                    (!negative && v > (max.abs() as u64)) {\n                                     cx.span_lint(OVERFLOWING_LITERALS, e.span,\n-                                                 \"literal out of range for its type\");\n+                                                 &*format!(\"literal out of range for {:?}\", t));\n                                     return;\n                                 }\n                             }\n@@ -246,7 +246,7 @@ impl LintPass for TypeLimits {\n                         };\n                         if  lit_val < min || lit_val > max {\n                             cx.span_lint(OVERFLOWING_LITERALS, e.span,\n-                                         \"literal out of range for its type\");\n+                                         &*format!(\"literal out of range for {:?}\", t));\n                         }\n                     },\n                     ty::ty_float(t) => {\n@@ -263,7 +263,7 @@ impl LintPass for TypeLimits {\n                         };\n                         if lit_val < min || lit_val > max {\n                             cx.span_lint(OVERFLOWING_LITERALS, e.span,\n-                                         \"literal out of range for its type\");\n+                                         &*format!(\"literal out of range for {:?}\", t));\n                         }\n                     },\n                     _ => ()"}, {"sha": "95d892010e726b03aaa906bf1e987156ef66dbac", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22fdf97035990f544a44e53db3ad31bf938a9b98/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22fdf97035990f544a44e53db3ad31bf938a9b98/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=22fdf97035990f544a44e53db3ad31bf938a9b98", "patch": "@@ -26,7 +26,7 @@ fn bar() -> i8 {\n \n fn baz() -> bool {\n     128 > bar() //~ ERROR comparison is useless due to type limits\n-                //~^ WARNING literal out of range for its type\n+                //~^ WARNING literal out of range for i8\n }\n \n fn bleh() {\n@@ -44,7 +44,7 @@ fn bleh() {\n fn qux() {\n     let mut i = 1i8;\n     while 200 != i { //~ ERROR comparison is useless due to type limits\n-                     //~^ WARNING literal out of range for its type\n+                     //~^ WARNING literal out of range for i8\n         i += 1;\n     }\n }"}, {"sha": "ed6a0bd37eb284d689b451a32d0f186c6f514d53", "filename": "src/test/compile-fail/lint-type-overflow.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/22fdf97035990f544a44e53db3ad31bf938a9b98/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22fdf97035990f544a44e53db3ad31bf938a9b98/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs?ref=22fdf97035990f544a44e53db3ad31bf938a9b98", "patch": "@@ -18,42 +18,43 @@ fn test(x: i8) {\n #[allow(unused_variables)]\n fn main() {\n     let x1: u8 = 255; // should be OK\n-    let x1: u8 = 256; //~ error: literal out of range for its type\n+    let x1: u8 = 256; //~ error: literal out of range for u8\n \n     let x1 = 255_u8; // should be OK\n-    let x1 = 256_u8; //~ error: literal out of range for its type\n+    let x1 = 256_u8; //~ error: literal out of range for u8\n \n     let x2: i8 = -128; // should be OK\n-    let x1: i8 = 128; //~ error: literal out of range for its type\n-    let x2: i8 = --128; //~ error: literal out of range for its type\n+    let x1: i8 = 128; //~ error: literal out of range for i8\n+    let x2: i8 = --128; //~ error: literal out of range for i8\n \n-    let x3: i8 = -129; //~ error: literal out of range for its type\n-    let x3: i8 = -(129); //~ error: literal out of range for its type\n-    let x3: i8 = -{129}; //~ error: literal out of range for its type\n+    let x3: i8 = -129; //~ error: literal out of range for i8\n+    let x3: i8 = -(129); //~ error: literal out of range for i8\n+    let x3: i8 = -{129}; //~ error: literal out of range for i8\n \n-    test(1000); //~ error: literal out of range for its type\n+    test(1000); //~ error: literal out of range for i8\n \n-    let x = 128_i8; //~ error: literal out of range for its type\n+    let x = 128_i8; //~ error: literal out of range for i8\n     let x = 127_i8;\n     let x = -128_i8;\n     let x = -(128_i8);\n-    let x = -129_i8; //~ error: literal out of range for its type\n+    let x = -129_i8; //~ error: literal out of range for i8\n \n     let x: i32 = 2147483647; // should be OK\n     let x = 2147483647_i32; // should be OK\n-    let x: i32 = 2147483648; //~ error: literal out of range for its type\n-    let x = 2147483648_i32; //~ error: literal out of range for its type\n+    let x: i32 = 2147483648; //~ error: literal out of range for i32\n+    let x = 2147483648_i32; //~ error: literal out of range for i32\n     let x: i32 = -2147483648; // should be OK\n     let x = -2147483648_i32; // should be OK\n-    let x: i32 = -2147483649; //~ error: literal out of range for its type\n-    let x = -2147483649_i32; //~ error: literal out of range for its type\n+    let x: i32 = -2147483649; //~ error: literal out of range for i32\n+    let x = -2147483649_i32; //~ error: literal out of range for i32\n+    let x = 2147483648; //~ error: literal out of range for i32\n \n-    let x = 9223372036854775808_i64; //~ error: literal out of range for its type\n+    let x = 9223372036854775808_i64; //~ error: literal out of range for i64\n     let x = -9223372036854775808_i64; // should be OK\n-    let x = 18446744073709551615_i64; //~ error: literal out of range for its type\n+    let x = 18446744073709551615_i64; //~ error: literal out of range for i64\n \n-    let x = -3.40282348e+38_f32; //~ error: literal out of range for its type\n-    let x =  3.40282348e+38_f32; //~ error: literal out of range for its type\n-    let x = -1.7976931348623159e+308_f64; //~ error: literal out of range for its type\n-    let x =  1.7976931348623159e+308_f64; //~ error: literal out of range for its type\n+    let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n+    let x =  3.40282348e+38_f32; //~ error: literal out of range for f32\n+    let x = -1.7976931348623159e+308_f64; //~ error: literal out of range for f64\n+    let x =  1.7976931348623159e+308_f64; //~ error: literal out of range for f64\n }"}]}