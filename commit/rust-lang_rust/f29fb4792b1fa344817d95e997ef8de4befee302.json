{"sha": "f29fb4792b1fa344817d95e997ef8de4befee302", "node_id": "C_kwDOAAsO6NoAKGYyOWZiNDc5MmIxZmEzNDQ4MTdkOTVlOTk3ZWY4ZGU0YmVmZWUzMDI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-14T05:22:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-14T19:32:06Z"}, "message": "Make TyS::is_suggestable more structual", "tree": {"sha": "e9b2bc5ec3174bb223db1fe4fe31b2b032355456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b2bc5ec3174bb223db1fe4fe31b2b032355456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29fb4792b1fa344817d95e997ef8de4befee302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29fb4792b1fa344817d95e997ef8de4befee302", "html_url": "https://github.com/rust-lang/rust/commit/f29fb4792b1fa344817d95e997ef8de4befee302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29fb4792b1fa344817d95e997ef8de4befee302/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f117a77d0880ed59afcc1a19c72ec5c1e44b97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f117a77d0880ed59afcc1a19c72ec5c1e44b97c", "html_url": "https://github.com/rust-lang/rust/commit/8f117a77d0880ed59afcc1a19c72ec5c1e44b97c"}], "stats": {"total": 211, "additions": 112, "deletions": 99}, "files": [{"sha": "ee00f6c62f345005f9257a08de20dc0428b45125", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,7 +1,12 @@\n //! Diagnostics related methods for `TyS`.\n \n+use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::TyKind::*;\n-use crate::ty::{InferTy, TyCtxt, TyS};\n+use crate::ty::{\n+    ConstKind, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, InferTy,\n+    ProjectionTy, TyCtxt, TyS, TypeAndMut,\n+};\n+\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -63,16 +68,55 @@ impl<'tcx> TyS<'tcx> {\n \n     /// Whether the type can be safely suggested during error recovery.\n     pub fn is_suggestable(&self) -> bool {\n-        !matches!(\n-            self.kind(),\n+        fn generic_arg_is_suggestible(arg: GenericArg<'_>) -> bool {\n+            match arg.unpack() {\n+                GenericArgKind::Type(ty) => ty.is_suggestable(),\n+                GenericArgKind::Const(c) => const_is_suggestable(c.val),\n+                _ => true,\n+            }\n+        }\n+\n+        fn const_is_suggestable(kind: ConstKind<'_>) -> bool {\n+            match kind {\n+                ConstKind::Infer(..)\n+                | ConstKind::Bound(..)\n+                | ConstKind::Placeholder(..)\n+                | ConstKind::Error(..) => false,\n+                _ => true,\n+            }\n+        }\n+\n+        // FIXME(compiler-errors): Some types are still not good to suggest,\n+        // specifically references with lifetimes within the function. Not\n+        //sure we have enough information to resolve whether a region is\n+        // temporary, so I'll leave this as a fixme.\n+\n+        match self.kind() {\n             Opaque(..)\n-                | FnDef(..)\n-                | FnPtr(..)\n-                | Dynamic(..)\n-                | Closure(..)\n-                | Infer(..)\n-                | Projection(..)\n-        )\n+            | FnDef(..)\n+            | Closure(..)\n+            | Infer(..)\n+            | Generator(..)\n+            | GeneratorWitness(..)\n+            | Bound(_, _)\n+            | Placeholder(_)\n+            | Error(_) => false,\n+            Dynamic(dty, _) => dty.iter().all(|pred| match pred.skip_binder() {\n+                ExistentialPredicate::Trait(ExistentialTraitRef { substs, .. }) => {\n+                    substs.iter().all(generic_arg_is_suggestible)\n+                }\n+                ExistentialPredicate::Projection(ExistentialProjection { substs, ty, .. }) => {\n+                    ty.is_suggestable() && substs.iter().all(generic_arg_is_suggestible)\n+                }\n+                _ => true,\n+            }),\n+            Projection(ProjectionTy { substs: args, .. }) | Adt(_, args) | Tuple(args) => {\n+                args.iter().all(generic_arg_is_suggestible)\n+            }\n+            Slice(ty) | RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => ty.is_suggestable(),\n+            Array(ty, c) => ty.is_suggestable() && const_is_suggestable(c.val),\n+            _ => true,\n+        }\n     }\n }\n "}, {"sha": "505751969b623168fdc168c8ce5829c194300cdd", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -10,6 +10,7 @@ trait Tr {\n         //~^ ERROR mismatched types\n         //~| NOTE expected associated type, found `()`\n         //~| NOTE expected associated type `<Self as Tr>::A`\n+        //~| NOTE this expression has type `<Self as Tr>::A`\n     }\n }\n "}, {"sha": "71d421926e702f0b0b3a4786833392ff1f3a9c37", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -5,13 +5,15 @@ LL |     type A = ();\n    |     ------------ associated type defaults can't be assumed inside the trait defining them\n ...\n LL |         let () = p;\n-   |             ^^ expected associated type, found `()`\n+   |             ^^   - this expression has type `<Self as Tr>::A`\n+   |             |\n+   |             expected associated type, found `()`\n    |\n    = note: expected associated type `<Self as Tr>::A`\n                     found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-in-other-trait-items.rs:35:25\n+  --> $DIR/defaults-in-other-trait-items.rs:36:25\n    |\n LL |     type Ty = u8;\n    |     ------------- associated type defaults can't be assumed inside the trait defining them"}, {"sha": "9ea78bd097485a92c1d1bb80134892f162fa3638", "filename": "src/test/ui/destructuring-assignment/default-match-bindings-forbidden.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -2,9 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/default-match-bindings-forbidden.rs:6:5\n    |\n LL |     (x, y) = &(1, 2);\n-   |     ^^^^^^   ------- this expression has type `&({integer}, {integer})`\n-   |     |\n-   |     expected reference, found tuple\n+   |     ^^^^^^ expected reference, found tuple\n    |\n    = note: expected type `&({integer}, {integer})`\n              found tuple `(_, _)`"}, {"sha": "79ac15187665b7fe284410a9b16dd888010133ef", "filename": "src/test/ui/destructuring-assignment/tuple_destructure_fail.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -10,9 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/tuple_destructure_fail.rs:8:5\n    |\n LL |     (a, a, b) = (1, 2);\n-   |     ^^^^^^^^^   ------ this expression has type `({integer}, {integer})`\n-   |     |\n-   |     expected a tuple with 2 elements, found one with 3 elements\n+   |     ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n    |\n    = note: expected type `({integer}, {integer})`\n              found tuple `(_, _, _)`\n@@ -29,9 +27,7 @@ error[E0308]: mismatched types\n   --> $DIR/tuple_destructure_fail.rs:10:5\n    |\n LL |     (_,) = (1, 2);\n-   |     ^^^^   ------ this expression has type `({integer}, {integer})`\n-   |     |\n-   |     expected a tuple with 2 elements, found one with 1 element\n+   |     ^^^^ expected a tuple with 2 elements, found one with 1 element\n    |\n    = note: expected type `({integer}, {integer})`\n              found tuple `(_,)`"}, {"sha": "241485db49bc9ad35e4353ed47b0f3f79a6809d1", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision.rs:6:13\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99.., _] => {},\n    |             ^^ expected struct `std::ops::Range`, found integer\n    |"}, {"sha": "777d029d7dd7b392302af9c8a8114b4c31d61a84", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -7,8 +7,6 @@ LL |         [_, 99..] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision2.rs:6:13\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99..] => {},\n    |             ^^ expected struct `std::ops::Range`, found integer\n    |"}, {"sha": "6119733a7d84bda8b514709ccc0f4b9271d35c7a", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:12\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |            ^ expected struct `std::ops::Range`, found integer\n    |\n@@ -12,8 +10,6 @@ LL |         [..9, 99..100, _] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:15\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |               ^^  --- this is of type `{integer}`\n    |               |\n@@ -25,8 +21,6 @@ LL |         [..9, 99..100, _] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:19\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |               --  ^^^ expected struct `std::ops::Range`, found integer\n    |               |"}, {"sha": "31ea3a17871a56b9f3deb58c29b224394e38fe24", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-5.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-5.rs:8:10\n    |\n-LL |     match (0, 1) {\n-   |           ------ this expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n    |          ^^^ expected tuple, found `u8`\n    |"}, {"sha": "ecab1074a295f742cacdffb1d71eb4c71899da74", "filename": "src/test/ui/issues/issue-11844.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-11844.rs:6:9\n    |\n-LL |     match a {\n-   |           - this expression has type `Option<Box<{integer}>>`\n LL |         Ok(a) =>\n    |         ^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "1ba6852b17c06a4068a18f3ed333828202c721d8", "filename": "src/test/ui/issues/issue-12552.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:6:5\n    |\n-LL |   match t {\n-   |         - this expression has type `Result<_, {integer}>`\n LL |     Some(k) => match k {\n    |     ^^^^^^^ expected enum `Result`, found enum `Option`\n    |\n@@ -12,9 +10,6 @@ LL |     Some(k) => match k {\n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:9:5\n    |\n-LL |   match t {\n-   |         - this expression has type `Result<_, {integer}>`\n-...\n LL |     None => ()\n    |     ^^^^ expected enum `Result`, found enum `Option`\n    |"}, {"sha": "15ee49a5fdd25f48f17324b976d6bc990b1c1d4f", "filename": "src/test/ui/issues/issue-13466.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:8:9\n    |\n-LL |     let _x: usize = match Some(1) {\n-   |                           ------- this expression has type `Option<{integer}>`\n LL |         Ok(u) => u,\n    |         ^^^^^ expected enum `Option`, found enum `Result`\n    |\n@@ -12,9 +10,6 @@ LL |         Ok(u) => u,\n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:14:9\n    |\n-LL |     let _x: usize = match Some(1) {\n-   |                           ------- this expression has type `Option<{integer}>`\n-...\n LL |         Err(e) => panic!(e)\n    |         ^^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "8dc0dfa2356f4cf6606d8b7d762164b24c615fb6", "filename": "src/test/ui/issues/issue-3680.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-3680.rs:3:9\n    |\n-LL |     match None {\n-   |           ---- this expression has type `Option<_>`\n LL |         Err(_) => ()\n    |         ^^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "3e933a0f01b753dc41e7900be31ff7c7694cda37", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -36,23 +36,23 @@ error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:2:5\n    |\n LL | fn a() {\n-   |        - help: try adding a return type: `-> [{integer}; _]`\n+   |        - possibly return type missing here?\n LL |     [0; [|_: _ &_| ()].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:14:5\n    |\n LL | fn c() {\n-   |        - help: try adding a return type: `-> [{integer}; _]`\n+   |        - possibly return type missing here?\n LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:20:5\n    |\n LL | fn d() {\n-   |        - help: try adding a return type: `-> [{integer}; _]`\n+   |        - possibly return type missing here?\n LL |     [0; match [|f @ &ref _| () ] {} ]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n "}, {"sha": "5d3d390a95dedfe0aa94e02cf2d3d6246b6d3ca6", "filename": "src/test/ui/issues/issue-72574-1.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -21,8 +21,6 @@ LL |         (_a, _x @ ..) => {}\n error[E0308]: mismatched types\n   --> $DIR/issue-72574-1.rs:4:9\n    |\n-LL |     match x {\n-   |           - this expression has type `({integer}, {integer}, {integer})`\n LL |         (_a, _x @ ..) => {}\n    |         ^^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 2 elements\n    |"}, {"sha": "eb884bcc6226fef462095aeda83c2ca69e0a6e10", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -9,8 +9,6 @@ LL |         (0, ref y) | (y, 0) => {}\n error[E0308]: mismatched types\n   --> $DIR/E0409.rs:5:23\n    |\n-LL |     match x {\n-   |           - this expression has type `({integer}, {integer})`\n LL |         (0, ref y) | (y, 0) => {}\n    |             -----     ^ expected `&{integer}`, found integer\n    |             |"}, {"sha": "ccc8ac1278c63576c2ed2d253c653f312e9f8338", "filename": "src/test/ui/mut/mut-pattern-mismatched.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |      let &_\n    |          ^^ types differ in mutability\n-...\n-LL |         = foo;\n-   |           --- this expression has type `&mut {integer}`\n    |\n    = note: expected mutable reference `&mut {integer}`\n                       found reference `&_`\n@@ -15,9 +12,6 @@ error[E0308]: mismatched types\n    |\n LL |     let &mut _\n    |         ^^^^^^ types differ in mutability\n-...\n-LL |          = bar;\n-   |            --- this expression has type `&{integer}`\n    |\n    = note:      expected reference `&{integer}`\n            found mutable reference `&mut _`"}, {"sha": "e99a38aaaee95834ad6d506f2bd4982a43f7f391", "filename": "src/test/ui/never_type/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,15 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:8:5\n    |\n+LL | fn g() {\n+   |        - possibly return type missing here?\n LL |     &panic!()\n    |     ^^^^^^^^^ expected `()`, found reference\n    |\n    = note: expected unit type `()`\n               found reference `&_`\n-help: try adding a return type\n-   |\n-LL | fn g() -> &_ {\n-   |        +++++\n help: consider removing the borrow\n    |\n LL -     &panic!()"}, {"sha": "92416a0d5cbf086d739ef3e5df92d4b9cae3d084", "filename": "src/test/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -86,9 +86,8 @@ error[E0308]: mismatched types\n   --> $DIR/already-bound-name.rs:30:32\n    |\n LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n-   |              -                 ^                     ------- this expression has type `E<E<{integer}>>`\n-   |              |                 |\n-   |              |                 expected integer, found enum `E`\n+   |              -                 ^ expected integer, found enum `E`\n+   |              |\n    |              first introduced with type `{integer}` here\n    |\n    = note: expected type `{integer}`"}, {"sha": "95e8618808c08e392f294200cf5e43c4fe57e5fa", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -65,9 +65,8 @@ error[E0308]: mismatched types\n   --> $DIR/inconsistent-modes.rs:13:32\n    |\n LL |     let (Ok((ref a, b)) | Err((ref mut a, ref b))) = Ok((0, &0));\n-   |              -----             ^^^^^^^^^             ----------- this expression has type `Result<({integer}, &{integer}), (_, _)>`\n-   |              |                 |\n-   |              |                 types differ in mutability\n+   |              -----             ^^^^^^^^^ types differ in mutability\n+   |              |\n    |              first introduced with type `&{integer}` here\n    |\n    = note: expected type `&{integer}`"}, {"sha": "53dcf97f81c6a4d765577e4c39525b9a16948f88", "filename": "src/test/ui/pattern/issue-74702.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -22,9 +22,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-74702.rs:2:9\n    |\n LL |     let (foo @ ..,) = (0, 0);\n-   |         ^^^^^^^^^^^   ------ this expression has type `({integer}, {integer})`\n-   |         |\n-   |         expected a tuple with 2 elements, found one with 1 element\n+   |         ^^^^^^^^^^^ expected a tuple with 2 elements, found one with 1 element\n    |\n    = note: expected tuple `({integer}, {integer})`\n               found tuple `(_,)`"}, {"sha": "64b6e5eec5562565ee52e6ae1dbac996574b0cad", "filename": "src/test/ui/pattern/pat-tuple-overfield.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -150,8 +150,6 @@ LL |         E1::Z0 => {}\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-overfield.rs:19:9\n    |\n-LL |     match (1, 2, 3) {\n-   |           --------- this expression has type `({integer}, {integer}, {integer})`\n LL |         (1, 2, 3, 4) => {}\n    |         ^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 4 elements\n    |\n@@ -161,9 +159,6 @@ LL |         (1, 2, 3, 4) => {}\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-overfield.rs:20:9\n    |\n-LL |     match (1, 2, 3) {\n-   |           --------- this expression has type `({integer}, {integer}, {integer})`\n-LL |         (1, 2, 3, 4) => {}\n LL |         (1, 2, .., 3, 4) => {}\n    |         ^^^^^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 4 elements\n    |"}, {"sha": "f86209a651d139d1f72aeeadfd110d42d69a76b2", "filename": "src/test/ui/return/return-type.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,19 +1,15 @@\n error[E0308]: mismatched types\n   --> $DIR/return-type.rs:10:5\n    |\n+LL | fn bar() {\n+   |          - possibly return type missing here?\n LL |     foo(4 as usize)\n-   |     ^^^^^^^^^^^^^^^ expected `()`, found struct `S`\n+   |     ^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n+   |     |\n+   |     expected `()`, found struct `S`\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`\n-help: consider using a semicolon here\n-   |\n-LL |     foo(4 as usize);\n-   |                    +\n-help: try adding a return type\n-   |\n-LL | fn bar() -> S<usize> {\n-   |          +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1433a16d7274a57e4b074a51036f75440ccbd83c", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -644,7 +644,9 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:76:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found struct `std::ops::Range`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n+   |            |\n+   |            expected fn pointer, found struct `std::ops::Range`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`\n@@ -832,7 +834,9 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:140:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found struct `std::ops::Range`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n+   |               |\n+   |               expected fn pointer, found struct `std::ops::Range`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`"}, {"sha": "61eabed950423834089b6d0a9dd8289d0200c1eb", "filename": "src/test/ui/slightly-nice-generic-literal-messages.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/slightly-nice-generic-literal-messages.rs:7:9\n    |\n-LL |     match Foo(1.1, marker::PhantomData) {\n-   |           ----------------------------- this expression has type `Foo<{float}, _>`\n LL |         1 => {}\n    |         ^ expected struct `Foo`, found integer\n    |"}, {"sha": "98972a121599655cae0f36351dd2aa84dae2c516", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -101,8 +101,6 @@ LL | type PointF = Point<f32>;\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:54:9\n    |\n-LL |     match (Point { x: 1, y: 2 }) {\n-   |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF::<u32> { .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n@@ -112,8 +110,6 @@ LL |         PointF::<u32> { .. } => {}\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:59:9\n    |\n-LL |     match (Point { x: 1, y: 2 }) {\n-   |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF { .. } => {}\n    |         ^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n@@ -123,8 +119,6 @@ LL |         PointF { .. } => {}\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:67:9\n    |\n-LL |     match (Pair { x: 1, y: 2 }) {\n-   |           --------------------- this expression has type `Pair<{integer}, {integer}>`\n LL |         PairF::<u32> { .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |"}, {"sha": "b92a6f2ec2b485df7c3dd8c1378f6e8f7ba5232a", "filename": "src/test/ui/typeck/issue-57673-ice-on-deref-of-boxed-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-57673-ice-on-deref-of-boxed-trait.rs:5:5\n    |\n LL | fn ice(x: Box<dyn Iterator<Item=()>>) {\n-   |                                       - possibly return type missing here?\n+   |                                       - help: try adding a return type: `-> (dyn Iterator<Item = ()> + 'static)`\n LL |     *x\n    |     ^^ expected `()`, found trait object `dyn Iterator`\n    |"}, {"sha": "0872e83ea2e7e6917eff54dee6d4fb068d782a78", "filename": "src/test/ui/typeck/issue-91334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL | fn f(){||yield(((){),\n    |       -^^^^^^^^^^^^^^^ expected `()`, found generator\n    |       |\n-   |       help: try adding a return type: `-> [generator@$DIR/issue-91334.rs:10:8: 10:23]`\n+   |       possibly return type missing here?\n    |\n    = note: expected unit type `()`\n               found generator `[generator@$DIR/issue-91334.rs:10:8: 10:23]`"}, {"sha": "aee9769b28038800177a0938370cb84f3640b269", "filename": "src/test/ui/typeck/return_type_containing_closure.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -0,0 +1,10 @@\n+#[allow(unused)]\n+fn foo() {\n+    //~^ NOTE possibly return type missing here?\n+    vec!['a'].iter().map(|c| c)\n+    //~^ ERROR mismatched types [E0308]\n+    //~| NOTE expected `()`, found struct `Map`\n+    //~| NOTE expected unit type `()`\n+}\n+\n+fn main() {}"}, {"sha": "b08152d63318e97ca100f3ec9ae8701d630d17d6", "filename": "src/test/ui/typeck/return_type_containing_closure.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f29fb4792b1fa344817d95e997ef8de4befee302/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr?ref=f29fb4792b1fa344817d95e997ef8de4befee302", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return_type_containing_closure.rs:4:5\n+   |\n+LL | fn foo() {\n+   |          - possibly return type missing here?\n+LL |\n+LL |     vec!['a'].iter().map(|c| c)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n+   |     |\n+   |     expected `()`, found struct `Map`\n+   |\n+   = note: expected unit type `()`\n+                 found struct `Map<std::slice::Iter<'_, char>, [closure@$DIR/return_type_containing_closure.rs:4:26: 4:31]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}