{"sha": "af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMmQ2YTBjMTQ2YTA0ZGY0ODYwMDdjM2ZlOWFhZjFmYWZiZTZlOTk=", "commit": {"author": {"name": "Philipp Krones", "email": "uwdkn@student.kit.edu", "date": "2018-09-23T13:45:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-23T13:45:55Z"}, "message": "Merge pull request #3191 from vi/suggest_with_applicability\n\nUse span_suggestion_with_applicability instead of span_suggestion", "tree": {"sha": "5a9eb98b08fe756da79352a45f431049c9b83880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a9eb98b08fe756da79352a45f431049c9b83880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbp5kTCRBK7hj4Ov3rIwAAdHIIAKtHnaaugWi/zs9iLKL4W/sM\nO5IXyUrBEa2EqBM/FBIkLV3ZkC9aiAxSOGuv5gOOJHzPWpZaPMpzvVde11tfCtHs\nGv/Smr7W2eyxdwGfPMFZg9WRe/ZP0gkTJx0xT9tqfe1ke5WyauSuz5ca0cUCP9zp\nEhOAQGBvMmbjlhFrnMsQ0wAcM6Gu2ANt58rAQ62DVyewvZrxzaY+xN3bsVG+gN8W\nMzpLzIxI5aG1tdw28JNe5qPQMnZ/xqo3Z4BU7UIcfRJaLRK69bMoWJzf/sihXkcn\n3tQoMCwKHM+kHG6wAMK4L6LWor3Nm3KSQtD+El60BozKPfVu3HeWSBfdzh/MRDE=\n=jCsE\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a9eb98b08fe756da79352a45f431049c9b83880\nparent b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0\nparent 987b34d09018e8f7c1b880bcb26e8483e6843869\nauthor Philipp Krones <uwdkn@student.kit.edu> 1537710355 +0200\ncommitter GitHub <noreply@github.com> 1537710355 +0200\n\nMerge pull request #3191 from vi/suggest_with_applicability\n\nUse span_suggestion_with_applicability instead of span_suggestion"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "html_url": "https://github.com/rust-lang/rust/commit/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0", "html_url": "https://github.com/rust-lang/rust/commit/b5c4342ef9b2fccabee6e4d1471a2f6e8a76adc0"}, {"sha": "987b34d09018e8f7c1b880bcb26e8483e6843869", "url": "https://api.github.com/repos/rust-lang/rust/commits/987b34d09018e8f7c1b880bcb26e8483e6843869", "html_url": "https://github.com/rust-lang/rust/commit/987b34d09018e8f7c1b880bcb26e8483e6843869"}], "stats": {"total": 533, "additions": 427, "deletions": 106}, "files": [{"sha": "a05a4d55010bad985c2b62cc59a24f975bca91d2", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -6,6 +6,7 @@ use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::syntax::ast;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for `a = a op b` or `a = b commutative_op a`\n /// patterns.\n@@ -78,7 +79,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n                                         let long =\n                                             format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n-                                        db.span_suggestion(\n+                                        db.span_suggestion_with_applicability(\n                                             expr.span,\n                                             &format!(\n                                                 \"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n@@ -89,8 +90,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                                 long\n                                             ),\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                            Applicability::MachineApplicable,\n+                                        );\n+                                        db.span_suggestion_with_applicability(\n+                                            expr.span,\n+                                            \"or\",\n+                                            long,\n+                                            Applicability::MachineApplicable, // snippet\n                                         );\n-                                        db.span_suggestion(expr.span, \"or\", long);\n                                     }\n                                 },\n                             );\n@@ -172,10 +179,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                     if let (Some(snip_a), Some(snip_r)) =\n                                         (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs.span))\n                                     {\n-                                        db.span_suggestion(\n+                                        db.span_suggestion_with_applicability(\n                                             expr.span,\n                                             \"replace it with\",\n                                             format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                            Applicability::MachineApplicable,\n                                         );\n                                     }\n                                 },"}, {"sha": "e192c3f2093ffd3ccb1fa71293193398b639e1b3", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -13,6 +13,7 @@ use crate::rustc::ty::{self, TyCtxt};\n use semver::Version;\n use crate::syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use crate::syntax::source_map::Span;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics.\n@@ -203,7 +204,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                                             \"useless lint attribute\",\n                                             |db| {\n                                                 sugg = sugg.replacen(\"#[\", \"#![\", 1);\n-                                                db.span_suggestion(line_span, \"if you just forgot a `!`, use\", sugg);\n+                                                db.span_suggestion_with_applicability(\n+                                                    line_span,\n+                                                    \"if you just forgot a `!`, use\",\n+                                                    sugg,\n+                                                    Applicability::MachineApplicable,\n+                                                );\n                                             },\n                                         );\n                                     }"}, {"sha": "7151e8db9aa58b7074ce7558e241805729e60fe6", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -7,6 +7,7 @@ use crate::syntax::source_map::Span;\n use crate::utils::{span_lint, span_lint_and_then};\n use crate::utils::sugg::Sugg;\n use crate::consts::{constant, Constant};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for incompatible bit masks in comparisons.\n ///\n@@ -138,7 +139,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n                                    \"bit mask could be simplified with a call to `trailing_zeros`\",\n                                    |db| {\n                     let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n-                    db.span_suggestion(e.span, \"try\", format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()));\n+                    db.span_suggestion_with_applicability(\n+                        e.span,\n+                        \"try\",\n+                        format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 });\n             }\n         }"}, {"sha": "1201b4a0c6496a2ba6645d66c7a95e0ebb7c91e2", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -6,6 +6,7 @@ use crate::syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n use crate::syntax::source_map::{dummy_spanned, Span, DUMMY_SP};\n use crate::rustc_data_structures::thin_vec::ThinVec;\n use crate::utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq, get_trait_def_id, implements_trait};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for boolean expressions that can be written more\n /// concisely.\n@@ -390,10 +391,13 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                     \"this expression can be optimized out by applying boolean operations to the \\\n                                      outer expression\",\n                                 );\n-                                db.span_suggestion(\n+                                db.span_suggestion_with_applicability(\n                                     e.span,\n                                     \"it would look like the following\",\n                                     suggest(self.cx, suggestion, &h2q.terminals).0,\n+                                    // nonminimal_bool can produce minimal but\n+                                    // not human readable expressions (#3141)\n+                                    Applicability::Unspecified,\n                                 );\n                             },\n                         );\n@@ -416,7 +420,16 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                     NONMINIMAL_BOOL,\n                     e.span,\n                     \"this boolean expression can be simplified\",\n-                    |db| { db.span_suggestions(e.span, \"try\", suggestions); },\n+                    |db| {\n+                        db.span_suggestions_with_applicability(\n+                            e.span,\n+                            \"try\",\n+                            suggestions,\n+                            // nonminimal_bool can produce minimal but\n+                            // not human readable expressions (#3141)\n+                            Applicability::Unspecified,\n+                        );\n+                    },\n                 );\n             };\n             if improvements.is_empty() {"}, {"sha": "b0fb058116f2390b64d60464dc5aa7b17b746cb0", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -19,6 +19,7 @@ use crate::syntax::ast;\n \n use crate::utils::{in_macro, snippet_block, span_lint_and_sugg, span_lint_and_then};\n use crate::utils::sugg::Sugg;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for nested `if` statements which can be collapsed\n /// by `&&`-combining their conditions and for `else { if ... }` expressions\n@@ -133,11 +134,16 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n             span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {\n                 let lhs = Sugg::ast(cx, check, \"..\");\n                 let rhs = Sugg::ast(cx, check_inner, \"..\");\n-                db.span_suggestion(expr.span,\n-                                   \"try\",\n-                                   format!(\"if {} {}\",\n-                                           lhs.and(&rhs),\n-                                           snippet_block(cx, content.span, \"..\")));\n+                db.span_suggestion_with_applicability(\n+                    expr.span,\n+                    \"try\",\n+                    format!(\n+                        \"if {} {}\",\n+                        lhs.and(&rhs),\n+                        snippet_block(cx, content.span, \"..\"),\n+                    ),\n+                    Applicability::MachineApplicable, // snippet\n+                );\n             });\n         }\n     }"}, {"sha": "bb9829ad3c94bffebae6fcdec34f3327654943c3", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -2,6 +2,7 @@ use crate::syntax::ast::*;\n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for constants with an explicit `'static` lifetime.\n ///\n@@ -60,7 +61,12 @@ impl StaticConst {\n                                     lifetime.ident.span,\n                                     \"Constants have by default a `'static` lifetime\",\n                                     |db| {\n-                                        db.span_suggestion(ty.span, \"consider removing `'static`\", sugg);\n+                                        db.span_suggestion_with_applicability(\n+                                            ty.span, \n+                                            \"consider removing `'static`\",\n+                                            sugg,\n+                                            Applicability::MachineApplicable, //snippet\n+                                        );\n                                     },\n                                 );\n                             }"}, {"sha": "04a297e5e7e99413e1e3757497a47dfcba5159f5", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -202,7 +202,8 @@ fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n                 |db| {\n                     db.span_note(i.body.span, \"same as this\");\n \n-                    // Note: this does not use `span_suggestion` on purpose: there is no clean way\n+                    // Note: this does not use `span_suggestion_with_applicability` on purpose:\n+                    // there is no clean way\n                     // to remove the other arm. Building a span and suggest to replace it to \"\"\n                     // makes an even more confusing error message. Also in order not to make up a\n                     // span for the whole pattern, the suggestion is only shown when there is only"}, {"sha": "965d425b43d59dbfdb62791a392f9bb06cdc973e", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -6,6 +6,7 @@ use if_chain::if_chain;\n use crate::syntax::source_map::Span;\n use crate::utils::SpanlessEq;\n use crate::utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for uses of `contains_key` + `insert` on `HashMap`\n /// or `BTreeMap`.\n@@ -139,14 +140,24 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, params[1].span, \"..\"),\n                                            snippet(self.cx, params[2].span, \"..\"));\n \n-                        db.span_suggestion(self.span, \"consider using\", help);\n+                        db.span_suggestion_with_applicability(\n+                            self.span,\n+                            \"consider using\",\n+                            help,\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n                     }\n                     else {\n                         let help = format!(\"{}.entry({})\",\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n-                        db.span_suggestion(self.span, \"consider using\", help);\n+                        db.span_suggestion_with_applicability(\n+                            self.span,\n+                            \"consider using\",\n+                            help,\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n                     }\n                 });\n             }"}, {"sha": "7b9f2568da9a655d93e7ed89d618f66e22358405", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -2,6 +2,7 @@ use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, implements_trait, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for equal operands to comparison, logical and\n /// bitwise, difference and division binary operators (`==`, `>`, etc., `&&`,\n@@ -113,7 +114,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         } else if lcpy && !rcpy && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion(left.span, \"use the left value directly\", lsnip);\n+                                db.span_suggestion_with_applicability(\n+                                    left.span,\n+                                    \"use the left value directly\",\n+                                    lsnip,\n+                                    Applicability::MachineApplicable, // snippet\n+                                );\n                             })\n                         } else if !lcpy && rcpy && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()]) {\n                             span_lint_and_then(\n@@ -123,7 +129,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                 \"needlessly taken reference of right operand\",\n                                 |db| {\n                                     let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                    db.span_suggestion(right.span, \"use the right value directly\", rsnip);\n+                                    db.span_suggestion_with_applicability(\n+                                        right.span,\n+                                        \"use the right value directly\",\n+                                        rsnip,\n+                                        Applicability::MachineApplicable, // snippet\n+                                    );\n                                 },\n                             )\n                         }\n@@ -135,7 +146,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         if (requires_ref || lcpy) && implements_trait(cx, lty, trait_id, &[cx.tables.expr_ty(right).into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"needlessly taken reference of left operand\", |db| {\n                                 let lsnip = snippet(cx, l.span, \"...\").to_string();\n-                                db.span_suggestion(left.span, \"use the left value directly\", lsnip);\n+                                db.span_suggestion_with_applicability(\n+                                    left.span,\n+                                    \"use the left value directly\",\n+                                    lsnip,\n+                                    Applicability::MachineApplicable, // snippet\n+                                );\n                             })\n                         }\n                     },\n@@ -146,7 +162,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         if (requires_ref || rcpy) && implements_trait(cx, cx.tables.expr_ty(left), trait_id, &[rty.into()]) {\n                             span_lint_and_then(cx, OP_REF, e.span, \"taken reference of right operand\", |db| {\n                                 let rsnip = snippet(cx, r.span, \"...\").to_string();\n-                                db.span_suggestion(right.span, \"use the right value directly\", rsnip);\n+                                db.span_suggestion_with_applicability(\n+                                    right.span,\n+                                    \"use the right value directly\",\n+                                    rsnip,\n+                                    Applicability::MachineApplicable, // snippet\n+                                );\n                             })\n                         }\n                     },"}, {"sha": "556f76af3a7b270d2caab7e95a305141abd27c35", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -3,6 +3,7 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::ty;\n use crate::rustc::hir::*;\n use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n #[allow(missing_copy_implementations)]\n pub struct EtaPass;\n@@ -96,7 +97,12 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n             }\n             span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |db| {\n                 if let Some(snippet) = snippet_opt(cx, caller.span) {\n-                    db.span_suggestion(expr.span, \"remove closure as shown\", snippet);\n+                    db.span_suggestion_with_applicability(\n+                        expr.span,\n+                        \"remove closure as shown\",\n+                        snippet,\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n             });\n         }"}, {"sha": "2eb95ebffbf41901710a9e1b98f4c542111e9a6f", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -7,6 +7,7 @@ use crate::syntax::ast::LitKind;\n use crate::syntax_pos::Span;\n use crate::utils::paths;\n use crate::utils::{in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for the use of `format!(\"string literal with no\n /// argument\")` and `format!(\"{}\", foo)` where `foo` is a string.\n@@ -60,7 +61,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         then {\n                             let sugg = format!(\"{}.to_string()\", snippet(cx, format_arg, \"<arg>\").into_owned());\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                                db.span_suggestion(expr.span, \"consider using .to_string()\", sugg);\n+                                db.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    \"consider using .to_string()\",\n+                                    sugg,\n+                                    Applicability::MachineApplicable,\n+                                );\n                             });\n                         }\n                     }\n@@ -70,7 +76,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     if tup.is_empty() {\n                         let sugg = format!(\"{}.to_string()\", snippet(cx, expr.span, \"<expr>\").into_owned());\n                         span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                            db.span_suggestion(span, \"consider using .to_string()\", sugg);\n+                            db.span_suggestion_with_applicability(\n+                                span,\n+                                \"consider using .to_string()\",\n+                                sugg,\n+                                Applicability::MachineApplicable, // snippet\n+                            );\n                         });\n                     }\n                 },"}, {"sha": "5b1bd0ada7be651285771bd665591daf3a02690c", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -4,6 +4,7 @@ use crate::rustc::hir::*;\n use crate::syntax::ast::NodeId;\n use crate::utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};\n use crate::utils::{opt_def_id, paths, resolve_node};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for always-identical `Into`/`From`/`IntoIter` conversions.\n ///\n@@ -63,7 +64,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion(e.span, \"consider removing `.into()`\", sugg);\n+                            db.span_suggestion_with_applicability(\n+                                e.span,\n+                                \"consider removing `.into()`\",\n+                                sugg,\n+                                Applicability::MachineApplicable, // snippet\n+                            );\n                         });\n                     }\n                 }\n@@ -73,7 +79,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                            db.span_suggestion(e.span, \"consider removing `.into_iter()`\", sugg);\n+                            db.span_suggestion_with_applicability(\n+                                e.span,\n+                                \"consider removing `.into_iter()`\",\n+                                sugg,\n+                                Applicability::MachineApplicable, // snippet\n+                            );\n                         });\n                     }\n                 }\n@@ -88,7 +99,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                             let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();\n                             let sugg_msg = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                             span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n-                                db.span_suggestion(e.span, &sugg_msg, sugg);\n+                                db.span_suggestion_with_applicability(\n+                                    e.span,\n+                                    &sugg_msg,\n+                                    sugg,\n+                                    Applicability::MachineApplicable, // snippet\n+                                );\n                             });\n                         }\n                     }"}, {"sha": "c9fbf1b0775d366d03de5710dddd6e4b325476f9", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -2,6 +2,7 @@ use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Lint for redundant pattern matching over `Result` or\n /// `Option`\n@@ -77,10 +78,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n                     |db| {\n                         let span = expr.span.with_hi(op.span.hi());\n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             span,\n                             \"try this\",\n                             format!(\"if {}.{}\", snippet(cx, op.span, \"_\"), good_method),\n+                            Applicability::MachineApplicable, // snippet\n                         );\n                     },\n                 );"}, {"sha": "881bebc2f6043e0b884f32bf55b322e2aabb9141", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -6,6 +6,7 @@ use crate::rustc::hir::*;\n use crate::syntax::ast::{Attribute, Name};\n use crate::utils::span_lint_and_then;\n use crate::utils::sugg::DiagnosticBuilderExt;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for `#[inline]` on trait methods without bodies\n ///\n@@ -56,7 +57,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, name: Name, attrs: &[Attribute]) {\n             attr.span,\n             &format!(\"use of `#[inline]` on trait method `{}` which has no body\", name),\n             |db| {\n-                db.suggest_remove_item(cx, attr.span, \"remove\");\n+                db.suggest_remove_item(cx, attr.span, \"remove\", Applicability::MachineApplicable);\n             },\n         );\n     }"}, {"sha": "69a19e2fb01f89e47bac4a07367827fd63415938", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -2,6 +2,7 @@\n \n use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n@@ -152,7 +153,12 @@ impl IntPlusOne {\n \n     fn emit_warning(&self, cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n         span_lint_and_then(cx, INT_PLUS_ONE, block.span, \"Unnecessary `>= y + 1` or `x - 1 >=`\", |db| {\n-            db.span_suggestion(block.span, \"change `>= y + 1` to `> y` as shown\", recommendation);\n+            db.span_suggestion_with_applicability(\n+                block.span,\n+                \"change `>= y + 1` to `> y` as shown\",\n+                recommendation,\n+                Applicability::MachineApplicable, // snippet\n+            );\n         });\n     }\n }"}, {"sha": "e8982d92b562c185e7471b2d87002723eddc5e2c", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -5,6 +5,7 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc::hir::*;\n use crate::utils::{snippet_opt, span_lint_and_then};\n use crate::rustc::ty::layout::LayoutOf;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for large size differences between variants on\n /// `enum`s.\n@@ -96,11 +97,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                                     VariantData::Unit(_) => unreachable!(),\n                                 };\n                                 if let Some(snip) = snippet_opt(cx, span) {\n-                                    db.span_suggestion(\n+                                    db.span_suggestion_with_applicability(\n                                         span,\n                                         \"consider boxing the large fields to reduce the total size of the \\\n                                          enum\",\n                                         format!(\"Box<{}>\", snip),\n+                                        Applicability::MaybeIncorrect,\n                                     );\n                                     return;\n                                 }"}, {"sha": "53d13407be3511a682714033632738d9a4621b58", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -6,6 +6,7 @@ use crate::rustc::hir::BindingAnnotation;\n use crate::rustc::hir::def::Def;\n use crate::syntax::ast;\n use crate::utils::{snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for variable declarations immediately followed by a\n /// conditional affectation.\n@@ -120,9 +121,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                                        span,\n                                        \"`if _ { .. } else { .. }` is an expression\",\n                                        |db| {\n-                                           db.span_suggestion(span,\n-                                                              \"it is more idiomatic to write\",\n-                                                              sug);\n+                                           db.span_suggestion_with_applicability(\n+                                                span,\n+                                                \"it is more idiomatic to write\",\n+                                                sug,\n+                                                Applicability::HasPlaceholders,\n+                                            );\n                                            if !mutability.is_empty() {\n                                                db.note(\"you might not need `mut` at all\");\n                                            }"}, {"sha": "2c05d9a198feddf4e659d0e6fa70eadcb63017a8", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -1196,7 +1196,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                         expr.span,\n                         \"this range is empty so this for loop will never run\",\n                         |db| {\n-                            db.span_suggestion(\n+                            db.span_suggestion_with_applicability(\n                                 arg.span,\n                                 \"consider using the following if you are attempting to iterate over this \\\n                                  range in reverse\",\n@@ -1206,6 +1206,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                                     dots = dots,\n                                     start = start_snippet\n                                 ),\n+                                Applicability::MaybeIncorrect,\n                             );\n                         },\n                     );"}, {"sha": "40b81e6fdb88b783ae70ebe98253a807e3c17d5f", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -228,16 +228,23 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n                                          snippet(cx, binding.pat.span, \"_\"),\n                                          snippet(cx, var_arg.span, \"_\"),\n                                          snippet(cx, reduced_expr_span, \"_\"));\n-                db.span_suggestion(stmt.span, \"try this\", suggestion);\n+                db.span_suggestion_with_applicability(\n+                    stmt.span,\n+                    \"try this\",\n+                    suggestion,\n+                    Applicability::MachineApplicable, // snippet\n+                );\n             } else {\n                 let suggestion = format!(\"if let {0}({1}) = {2} {{ ... }}\",\n                                          variant,\n                                          snippet(cx, binding.pat.span, \"_\"),\n                                          snippet(cx, var_arg.span, \"_\"));\n-                db.span_suggestion_with_applicability(stmt.span,\n-                                                      \"try this\",\n-                                                      suggestion,\n-                                                      Applicability::Unspecified);\n+                db.span_suggestion_with_applicability(\n+                    stmt.span,\n+                    \"try this\",\n+                    suggestion,\n+                    Applicability::Unspecified,\n+                );\n             }\n         });\n     }"}, {"sha": "c1a65e756a9ee718555c41fcae9924a5a04cc743", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -12,6 +12,7 @@ use crate::utils::{expr_block, is_allowed, is_expn_of, match_qpath, match_type,\n             remove_blocks, snippet, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty};\n use crate::utils::sugg::Sugg;\n use crate::consts::{constant, Constant};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n /// will usually suffice.\n@@ -339,7 +340,12 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Ex\n                         };\n \n                         if let Some(sugg) = sugg {\n-                            db.span_suggestion(expr.span, \"consider using an if/else expression\", sugg);\n+                            db.span_suggestion_with_applicability(\n+                                expr.span,\n+                                \"consider using an if/else expression\",\n+                                sugg,\n+                                Applicability::HasPlaceholders,\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "03e3d2628e842c17876042ef9007dc9fef6be49e", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -17,6 +17,7 @@ use crate::utils::{get_arg_name, get_trait_def_id, implements_trait, in_macro, i\n use crate::utils::paths;\n use crate::utils::sugg;\n use crate::consts::{constant, Constant};\n+use crate::rustc_errors::Applicability;\n \n #[derive(Clone)]\n pub struct Pass;\n@@ -1127,8 +1128,18 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n                     let refs: String = iter::repeat('&').take(n + 1).collect();\n                     let derefs: String = iter::repeat('*').take(n).collect();\n                     let explicit = format!(\"{}{}::clone({})\", refs, ty, snip);\n-                    db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()));\n-                    db.span_suggestion(expr.span, \"or try being explicit about what type to clone\", explicit);\n+                    db.span_suggestion_with_applicability(\n+                        expr.span,\n+                        \"try dereferencing it\",\n+                        format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    db.span_suggestion_with_applicability(\n+                        expr.span, \n+                        \"or try being explicit about what type to clone\", \n+                        explicit,\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 },\n             );\n             return; // don't report clone_on_copy\n@@ -1169,7 +1180,12 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n         }\n         span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |db| {\n             if let Some((text, snip)) = snip {\n-                db.span_suggestion(expr.span, text, snip);\n+                db.span_suggestion_with_applicability(\n+                    expr.span,\n+                    text,\n+                    snip,\n+                    Applicability::Unspecified,\n+                );\n             }\n         });\n     }\n@@ -1639,7 +1655,12 @@ fn lint_map_or_none<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr,\n             let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n             span_lint_and_then(cx, OPTION_MAP_OR_NONE, expr.span, msg, |db| {\n-                db.span_suggestion(expr.span, \"try using and_then instead\", hint);\n+                db.span_suggestion_with_applicability(\n+                    expr.span,\n+                    \"try using and_then instead\",\n+                    hint,\n+                    Applicability::MachineApplicable, // snippet\n+                );\n             });\n         }\n     }"}, {"sha": "0fa05de2841079e9b7a45719c0562e39d075f434", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -13,6 +13,7 @@ use crate::utils::{get_item_name, get_parent_expr, implements_trait, in_constant\n use crate::utils::sugg::Sugg;\n use crate::syntax::ast::{LitKind, CRATE_NODE_ID};\n use crate::consts::{constant, Constant};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for function arguments and let bindings denoted as\n /// `ref`.\n@@ -294,12 +295,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         l.pat.span,\n                         \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n                         |db| {\n-                            db.span_suggestion(s.span,\n-                                               \"try\",\n-                                               format!(\"let {name}{tyopt} = {initref};\",\n-                                                       name=snippet(cx, i.span, \"_\"),\n-                                                       tyopt=tyopt,\n-                                                       initref=initref));\n+                            db.span_suggestion_with_applicability(\n+                                s.span,\n+                                \"try\",\n+                                format!(\n+                                    \"let {name}{tyopt} = {initref};\",\n+                                    name=snippet(cx, i.span, \"_\"),\n+                                    tyopt=tyopt,\n+                                    initref=initref,\n+                                ),\n+                                Applicability::MachineApplicable, // snippet\n+                            );\n                         }\n                     );\n                 }\n@@ -317,8 +323,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     \"boolean short circuit operator in statement may be clearer using an explicit test\",\n                     |db| {\n                         let sugg = if binop.node == BinOpKind::Or { !sugg } else { sugg };\n-                        db.span_suggestion(s.span, \"replace it with\",\n-                                           format!(\"if {} {{ {}; }}\", sugg, &snippet(cx, b.span, \"..\")));\n+                        db.span_suggestion_with_applicability(\n+                            s.span, \n+                            \"replace it with\",\n+                            format!(\n+                                \"if {} {{ {}; }}\",\n+                                sugg, \n+                                &snippet(cx, b.span, \"..\"),\n+                            ),\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n                     });\n             }\n         };\n@@ -363,10 +377,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             expr.span,\n                             \"consider comparing them within some error\",\n                             format!(\"({}).abs() < error\", lhs - rhs),\n+                            Applicability::MachineApplicable, // snippet\n                         );\n                         db.span_note(expr.span, \"std::f32::EPSILON and std::f64::EPSILON are available.\");\n                     });\n@@ -534,7 +549,12 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n                     }\n                 }\n             }\n-            db.span_suggestion(expr.span, \"try\", snip.to_string());\n+            db.span_suggestion_with_applicability(\n+                expr.span, \n+                \"try\",\n+                snip.to_string(),\n+                Applicability::MachineApplicable, // snippet\n+            );\n         },\n     );\n }"}, {"sha": "d3e1ca9378428aa391e30f90e25e4d49f77072ee", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -7,6 +7,7 @@ use crate::syntax::ast::*;\n use crate::syntax::source_map::Span;\n use crate::syntax::visit::FnKind;\n use crate::utils::{constants, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for structure field patterns bound to wildcards.\n ///\n@@ -307,7 +308,12 @@ impl EarlyLintPass for MiscEarly {\n                         \"Try not to call a closure in the expression where it is declared.\",\n                         |db| if decl.inputs.is_empty() {\n                             let hint = snippet(cx, block.span, \"..\").into_owned();\n-                            db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n+                            db.span_suggestion_with_applicability(\n+                                expr.span,\n+                                \"Try doing something like: \",\n+                                hint,\n+                                Applicability::MachineApplicable, // snippet\n+                            );\n                         },\n                     );\n                 }\n@@ -392,15 +398,17 @@ impl MiscEarly {\n                                         lit.span,\n                                         \"this is a decimal constant\",\n                                         |db| {\n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             lit.span,\n                             \"if you mean to use a decimal constant, remove the `0` to remove confusion\",\n                             src.trim_left_matches(|c| c == '_' || c == '0').to_string(),\n+                            Applicability::MaybeIncorrect,\n                         );\n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             lit.span,\n                             \"if you mean to use an octal constant, use `0o`\",\n                             format!(\"0o{}\", src.trim_left_matches(|c| c == '_' || c == '0')),\n+                            Applicability::MaybeIncorrect,\n                         );\n                     });\n                 }"}, {"sha": "8a676be99ea8d24f0ace6765c2c6f639ca9ebd6b", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -9,6 +9,7 @@ use crate::rustc::hir::{BindingAnnotation, Expr, ExprKind, MutImmutable, Pat, Pa\n use crate::rustc::ty;\n use crate::rustc::ty::adjustment::{Adjust, Adjustment};\n use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for address of operations (`&`) that are going to\n /// be dereferenced immediately by the compiler.\n@@ -75,7 +76,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                              by the compiler\",\n                             |db| {\n                                 if let Some(snippet) = snippet_opt(cx, inner.span) {\n-                                    db.span_suggestion(e.span, \"change this to\", snippet);\n+                                    db.span_suggestion_with_applicability(\n+                                        e.span, \n+                                        \"change this to\",\n+                                        snippet,\n+                                        Applicability::MachineApplicable,\n+                                    );\n                                 }\n                             },\n                         );\n@@ -103,7 +109,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n                     \"this pattern creates a reference to a reference\",\n                     |db| {\n                         if let Some(snippet) = snippet_opt(cx, name.span) {\n-                            db.span_suggestion(pat.span, \"change this to\", snippet);\n+                            db.span_suggestion_with_applicability(\n+                                pat.span,\n+                                \"change this to\",\n+                                snippet,\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n                     }\n                 )"}, {"sha": "057a097f4b75e48a196f83f13da1c1aea679315d", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -7,6 +7,7 @@ use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for useless borrowed references.\n ///\n@@ -77,7 +78,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n                                    \"this pattern takes a reference on something that is being de-referenced\",\n                                    |db| {\n                                        let hint = snippet(cx, spanned_name.span, \"..\").into_owned();\n-                                       db.span_suggestion(pat.span, \"try removing the `&ref` part and just keep\", hint);\n+                                       db.span_suggestion_with_applicability(\n+                                           pat.span, \n+                                           \"try removing the `&ref` part and just keep\",\n+                                           hint,\n+                                           Applicability::MachineApplicable, // snippet\n+                                       );\n                                    });\n             }\n         }"}, {"sha": "980e2c28a348217c7a08192c8e0975429138552d", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -17,6 +17,7 @@ use crate::utils::{get_trait_def_id, implements_trait, in_macro, is_copy, is_sel\n             snippet, snippet_opt, span_lint_and_then};\n use crate::utils::ptr::get_spans;\n use std::borrow::Cow;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for functions taking arguments by value, but not\n /// consuming them in its\n@@ -227,19 +228,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 }).unwrap());\n                             then {\n                                 let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n-                                db.span_suggestion(input.span,\n-                                                \"consider changing the type to\",\n-                                                slice_ty);\n+                                db.span_suggestion_with_applicability(\n+                                    input.span,\n+                                    \"consider changing the type to\",\n+                                    slice_ty,\n+                                    Applicability::Unspecified,\n+                                );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion(\n+                                    db.span_suggestion_with_applicability(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n                                                 |x| Cow::from(format!(\"change `{}` to\", x)),\n                                             ),\n-                                        suggestion.into()\n+                                        suggestion.into(),\n+                                        Applicability::Unspecified,\n                                     );\n                                 }\n \n@@ -252,17 +257,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         if match_type(cx, ty, &paths::STRING) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n-                                db.span_suggestion(input.span, \"consider changing the type to\", \"&str\".to_string());\n+                                db.span_suggestion_with_applicability(\n+                                    input.span,\n+                                    \"consider changing the type to\",\n+                                    \"&str\".to_string(),\n+                                    Applicability::Unspecified,\n+                                );\n \n                                 for (span, suggestion) in clone_spans {\n-                                    db.span_suggestion(\n+                                    db.span_suggestion_with_applicability(\n                                         span,\n                                         &snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n                                                 |x| Cow::from(format!(\"change `{}` to\", x))\n                                             ),\n                                         suggestion.into(),\n+                                        Applicability::Unspecified,\n                                     );\n                                 }\n "}, {"sha": "e0b54620faf92c73e4aa72350f90bd2d785a5f12", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -8,6 +8,7 @@ use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_and_then};\n use crate::utils::sugg::DiagnosticBuilderExt;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n /// implementation of\n@@ -129,7 +130,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                             impl_item.span,\n                                             &format!(\"you should consider deriving a `Default` implementation for `{}`\", self_ty),\n                                             |db| {\n-                                                db.suggest_item_with_attr(cx, sp, \"try this\", \"#[derive(Default)]\");\n+                                                db.suggest_item_with_attr(\n+                                                    cx,\n+                                                    sp,\n+                                                    \"try this\",\n+                                                    \"#[derive(Default)]\",\n+                                                    Applicability::MaybeIncorrect,\n+                                                );\n                                             });\n                                     } else {\n                                         span_lint_and_then(\n@@ -143,6 +150,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                                     item.span,\n                                                     \"try this\",\n                                                     &create_new_without_default_suggest_msg(self_ty),\n+                                                    Applicability::MaybeIncorrect,\n                                                 );\n                                             },\n                                         );"}, {"sha": "86cb89f2de124744821d52333bedfcddd4269196", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -12,6 +12,7 @@ use crate::syntax::source_map::Span;\n use crate::syntax_pos::MultiSpan;\n use crate::utils::{match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n use crate::utils::ptr::get_spans;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** This lint checks for function arguments of type `&String`\n /// or `&Vec` unless the references are mutable. It will also suggest you\n@@ -181,16 +182,22 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                          with non-Vec-based slices.\",\n                         |db| {\n                             if let Some(ref snippet) = ty_snippet {\n-                                db.span_suggestion(arg.span, \"change this to\", format!(\"&[{}]\", snippet));\n+                                db.span_suggestion_with_applicability(\n+                                            arg.span,\n+                                            \"change this to\",\n+                                            format!(\"&[{}]\", snippet),\n+                                            Applicability::Unspecified,\n+                                            );\n                             }\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion(\n+                                db.span_suggestion_with_applicability(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\n                                         \"change the call to\".into(),\n                                         |x| Cow::Owned(format!(\"change `{}` to\", x)),\n                                     ),\n                                     suggestion.into(),\n+                                    Applicability::Unspecified,\n                                 );\n                             }\n                         },\n@@ -204,15 +211,21 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                         arg.span,\n                         \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n                         |db| {\n-                            db.span_suggestion(arg.span, \"change this to\", \"&str\".into());\n+                            db.span_suggestion_with_applicability(\n+                                arg.span,\n+                                \"change this to\",\n+                                \"&str\".into(),\n+                                Applicability::Unspecified,\n+                            );\n                             for (clonespan, suggestion) in spans {\n-                                db.span_suggestion_short(\n+                                db.span_suggestion_short_with_applicability(\n                                     clonespan,\n                                     &snippet_opt(cx, clonespan).map_or(\n                                         \"change the call to\".into(),\n                                         |x| Cow::Owned(format!(\"change `{}` to\", x)),\n                                     ),\n                                     suggestion.into(),\n+                                    Applicability::Unspecified,\n                                 );\n                             }\n                         },\n@@ -239,7 +252,12 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                                 arg.span,\n                                 \"using a reference to `Cow` is not recommended.\",\n                                 |db| {\n-                                    db.span_suggestion(arg.span, \"change this to\", \"&\".to_owned() + &r);\n+                                    db.span_suggestion_with_applicability(\n+                                        arg.span,\n+                                        \"change this to\",\n+                                        \"&\".to_owned() + &r,\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             );\n                         }"}, {"sha": "ced0fe3ef5065896628a85f58cd152ddb32ef0e1", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -8,6 +8,7 @@ use crate::syntax::ptr::P;\n \n use crate::utils::{match_def_path, match_type, span_lint_and_then};\n use crate::utils::paths::*;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for expressions that could be replaced by the question mark operator\n ///\n@@ -70,10 +71,11 @@ impl QuestionMarkPass {\n                     |db| {\n                         let receiver_str = &Sugg::hir(cx, subject, \"..\");\n \n-                        db.span_suggestion(\n+                        db.span_suggestion_with_applicability(\n                             expr.span,\n                             \"replace_it_with\",\n                             format!(\"{}?;\", receiver_str),\n+                            Applicability::MachineApplicable, // snippet\n                         );\n                     }\n                 )"}, {"sha": "c60ed3842d4fe2fe92ed18f1431d87a40d4be408", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -7,6 +7,7 @@ use crate::syntax::source_map::Spanned;\n use crate::utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then, snippet_opt};\n use crate::utils::{get_trait_def_id, higher, implements_trait, SpanlessEq};\n use crate::utils::sugg::Sugg;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for calling `.step_by(0)` on iterators,\n /// which never terminates.\n@@ -150,13 +151,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let end = Sugg::hir(cx, y, \"y\");\n                         if let Some(is_wrapped) = &snippet_opt(cx, expr.span) {\n                             if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n-                                db.span_suggestion(expr.span,\n-                                           \"use\",\n-                                           format!(\"({}..={})\", start, end));\n+                                db.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    \"use\",\n+                                    format!(\"({}..={})\", start, end),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n                             } else {\n-                                db.span_suggestion(expr.span,\n-                                           \"use\",\n-                                           format!(\"{}..={}\", start, end));\n+                                db.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    \"use\",\n+                                    format!(\"{}..={}\", start, end),\n+                                    Applicability::MachineApplicable, // snippet\n+                                );\n                             }\n                         }\n                     },\n@@ -177,9 +184,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     |db| {\n                         let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                         let end = Sugg::hir(cx, y, \"y\");\n-                        db.span_suggestion(expr.span,\n-                                           \"use\",\n-                                           format!(\"{}..{}\", start, end));\n+                        db.span_suggestion_with_applicability(\n+                            expr.span,\n+                            \"use\",\n+                            format!(\"{}..{}\", start, end),\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n                     },\n                 );\n             }"}, {"sha": "9ab6b50ada6bb4033f5b1e412d63f2bff5cf508e", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -4,6 +4,7 @@ use if_chain::if_chain;\n use crate::syntax::ast;\n use crate::syntax::source_map::Span;\n use crate::syntax::visit::FnKind;\n+use crate::rustc_errors::Applicability;\n \n use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n \n@@ -108,7 +109,12 @@ impl ReturnPass {\n         }\n         span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n             if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion(ret_span, \"remove `return` as shown\", snippet);\n+                db.span_suggestion_with_applicability(\n+                    ret_span,\n+                    \"remove `return` as shown\",\n+                    snippet,\n+                    Applicability::MachineApplicable,\n+                );\n             }\n         });\n     }"}, {"sha": "5de2f0e54a90d2e7133b7c2f8eacfc314774f0b7", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -6,6 +6,7 @@ use if_chain::if_chain;\n use crate::rustc::ty;\n use crate::utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n use crate::utils::sugg::Sugg;\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for manual swapping.\n ///\n@@ -136,7 +137,12 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    &format!(\"this looks like you are swapping{} manually\", what),\n                                    |db| {\n                                        if !sugg.is_empty() {\n-                                           db.span_suggestion(span, \"try\", sugg);\n+                                           db.span_suggestion_with_applicability(\n+                                               span,\n+                                               \"try\",\n+                                               sugg,\n+                                               Applicability::Unspecified,\n+                                           );\n \n                                            if replace {\n                                                db.note(\"or maybe you should use `std::mem::replace`?\");\n@@ -180,8 +186,16 @@ fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                                    &format!(\"this looks like you are trying to swap{}\", what),\n                                    |db| {\n                                        if !what.is_empty() {\n-                                           db.span_suggestion(span, \"try\",\n-                                                              format!(\"std::mem::swap({}, {})\", lhs, rhs));\n+                                           db.span_suggestion_with_applicability(\n+                                               span,\n+                                               \"try\",\n+                                               format!(\n+                                                   \"std::mem::swap({}, {})\",\n+                                                   lhs,\n+                                                   rhs,\n+                                               ),\n+                                               Applicability::MaybeIncorrect,\n+                                           );\n                                            db.note(\"or maybe you should use `std::mem::replace`?\");\n                                        }\n                                    });"}, {"sha": "69422056df5e5418c97985b8f2099ec286df80c1", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -7,6 +7,7 @@ use std::borrow::Cow;\n use crate::syntax::ast;\n use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n use crate::utils::{opt_def_id, sugg};\n+use crate::rustc_errors::Applicability;\n \n /// **What it does:** Checks for transmutes that can't ever be correct on any\n /// architecture.\n@@ -245,7 +246,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n                                     };\n \n-                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                    db.span_suggestion_with_applicability(\n+                                        e.span,\n+                                        \"try\",\n+                                        sugg.to_string(),\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             ),\n                             (&ty::Int(_), &ty::RawPtr(_)) | (&ty::Uint(_), &ty::RawPtr(_)) => {\n@@ -255,7 +261,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     e.span,\n                                     \"transmute from an integer to a pointer\",\n                                     |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                        db.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()).to_string());\n+                                        db.span_suggestion_with_applicability(\n+                                            e.span,\n+                                            \"try\",\n+                                            arg.as_ty(&to_ty.to_string()).to_string(),\n+                                            Applicability::Unspecified,\n+                                        );\n                                     },\n                                 )\n                             },\n@@ -312,7 +323,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))\n                                     };\n \n-                                    db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n+                                    db.span_suggestion_with_applicability(\n+                                        e.span,\n+                                        \"try\",\n+                                        sugg::make_unop(deref, arg).to_string(),\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             ),\n                             (&ty::Int(ast::IntTy::I32), &ty::Char) |\n@@ -328,10 +344,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     } else {\n                                         arg\n                                     };\n-                                    db.span_suggestion(\n+                                    db.span_suggestion_with_applicability(\n                                         e.span,\n                                         \"consider using\",\n                                         format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n+                                        Applicability::Unspecified,\n                                     );\n                                 },\n                             ),\n@@ -353,14 +370,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             e.span,\n                                             &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                                             |db| {\n-                                                db.span_suggestion(\n+                                                db.span_suggestion_with_applicability(\n                                                     e.span,\n                                                     \"consider using\",\n                                                     format!(\n                                                         \"std::str::from_utf8{}({}).unwrap()\",\n                                                         postfix,\n                                                         snippet(cx, args[0].span, \"..\"),\n                                                     ),\n+                                                    Applicability::Unspecified,\n                                                 );\n                                             }\n                                         )\n@@ -380,7 +398,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                                     } else {\n                                                         sugg_paren.addr_deref()\n                                                     };\n-                                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                                    db.span_suggestion_with_applicability(\n+                                                        e.span,\n+                                                        \"try\",\n+                                                        sugg.to_string(),\n+                                                        Applicability::Unspecified,\n+                                                    );\n                                                 },\n                                             )\n                                         }\n@@ -394,7 +417,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 \"transmute from a pointer to a pointer\",\n                                 |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n                                     let sugg = arg.as_ty(cx.tcx.mk_ptr(to_ty));\n-                                    db.span_suggestion(e.span, \"try\", sugg.to_string());\n+                                    db.span_suggestion_with_applicability(\n+                                        e.span,\n+                                        \"try\",\n+                                        sugg.to_string(),\n+                                        Applicability::Unspecified,\n+                                    );\n                                 },\n                             ),\n                             (&ty::Int(ast::IntTy::I8), &ty::Bool) | (&ty::Uint(ast::UintTy::U8), &ty::Bool) => {\n@@ -406,10 +434,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     |db| {\n                                         let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                         let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));\n-                                        db.span_suggestion(\n+                                        db.span_suggestion_with_applicability(\n                                             e.span,\n                                             \"consider using\",\n                                             sugg::make_binop(ast::BinOpKind::Ne, &arg, &zero).to_string(),\n+                                            Applicability::Unspecified,\n                                         );\n                                     },\n                                 )\n@@ -432,10 +461,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                         } else {\n                                             arg\n                                         };\n-                                        db.span_suggestion(\n+                                        db.span_suggestion_with_applicability(\n                                             e.span,\n                                             \"consider using\",\n                                             format!(\"{}::from_bits({})\", to_ty, arg.to_string()),\n+                                            Applicability::Unspecified,\n                                         );\n                                     },\n                                 )"}, {"sha": "856fa80569f771a0e55a55896da861d861a55a4c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -575,7 +575,7 @@ pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     sugg: String,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |db| {\n-        db.span_suggestion(sp, help, sugg);\n+        db.span_suggestion_with_applicability(sp, help, sugg, Applicability::Unspecified);\n     });\n }\n "}, {"sha": "076907e4945232ed2596bf8399a9c988e54c3a02", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2d6a0c146a04df486007c3fe9aaf1fafbe6e99/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=af2d6a0c146a04df486007c3fe9aaf1fafbe6e99", "patch": "@@ -15,6 +15,7 @@ use crate::syntax::util::parser::AssocOp;\n use crate::syntax::ast;\n use crate::utils::{higher, snippet, snippet_opt};\n use crate::syntax_pos::{BytePos, Pos};\n+use crate::rustc_errors::Applicability;\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -461,7 +462,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     /// ```rust,ignore\n     /// db.suggest_item_with_attr(cx, item, \"#[derive(Default)]\");\n     /// ```\n-    fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D);\n+    fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D, applicability: Applicability);\n \n     /// Suggest to add an item before another.\n     ///\n@@ -475,7 +476,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     ///     bar();\n     /// }\");\n     /// ```\n-    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str);\n+    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str, applicability: Applicability);\n \n     /// Suggest to completely remove an item.\n     ///\n@@ -488,19 +489,24 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     /// ```rust,ignore\n     /// db.suggest_remove_item(cx, item, \"remove this\")\n     /// ```\n-    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str);\n+    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }\n \n impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n-    fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D) {\n+    fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D, applicability: Applicability) {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent));\n+            self.span_suggestion_with_applicability(\n+                        span,\n+                        msg,\n+                        format!(\"{}\\n{}\", attr, indent),\n+                        applicability,\n+                        );\n         }\n     }\n \n-    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str) {\n+    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str, applicability: Applicability) {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n@@ -517,11 +523,16 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent));\n+            self.span_suggestion_with_applicability(\n+                        span,\n+                        msg,\n+                        format!(\"{}\\n{}\", new_item, indent),\n+                        applicability,\n+                        );\n         }\n     }\n \n-    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str) {\n+    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability) {\n         let mut remove_span = item;\n         let hi = cx.sess().source_map().next_point(remove_span).hi();\n         let fmpos = cx.sess().source_map().lookup_byte_offset(hi);\n@@ -534,6 +545,11 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n             }\n         }\n \n-        self.span_suggestion(remove_span, msg, String::new());\n+        self.span_suggestion_with_applicability(\n+            remove_span,\n+            msg,\n+            String::new(),\n+            applicability,\n+        );\n     }\n }"}]}