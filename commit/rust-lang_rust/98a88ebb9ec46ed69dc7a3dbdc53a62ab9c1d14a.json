{"sha": "98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTg4ZWJiOWVjNDZlZDY5ZGM3YTNkYmRjNTNhNjJhYjljMWQxNGE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-25T18:02:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-25T18:02:05Z"}, "message": "Intern block locations and handle them in ModuleId", "tree": {"sha": "0b69af26876f331a08960a8e402c8f0f37754a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b69af26876f331a08960a8e402c8f0f37754a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "html_url": "https://github.com/rust-lang/rust/commit/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c735ed734be9b9041921478e0049fffd7160f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c735ed734be9b9041921478e0049fffd7160f78", "html_url": "https://github.com/rust-lang/rust/commit/2c735ed734be9b9041921478e0049fffd7160f78"}], "stats": {"total": 169, "additions": 104, "deletions": 65}, "files": [{"sha": "aef7e1f6cd0366e2698738d1ef159d37a23b8189", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "patch": "@@ -2,9 +2,9 @@\n use std::sync::Arc;\n \n use base_db::{salsa, CrateId, SourceDatabase, Upcast};\n-use hir_expand::{db::AstDatabase, AstId, HirFileId};\n+use hir_expand::{db::AstDatabase, HirFileId};\n use la_arena::ArenaMap;\n-use syntax::{ast, SmolStr};\n+use syntax::SmolStr;\n \n use crate::{\n     adt::{EnumData, StructData},\n@@ -16,9 +16,10 @@ use crate::{\n     item_tree::ItemTree,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::DefMap,\n-    AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n-    GenericDefId, ImplId, ImplLoc, LocalEnumVariantId, LocalFieldId, StaticId, StaticLoc, StructId,\n-    StructLoc, TraitId, TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc, VariantId,\n+    AttrDefId, BlockId, BlockLoc, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId,\n+    FunctionLoc, GenericDefId, ImplId, ImplLoc, LocalEnumVariantId, LocalFieldId, StaticId,\n+    StaticLoc, StructId, StructLoc, TraitId, TraitLoc, TypeAliasId, TypeAliasLoc, UnionId,\n+    UnionLoc, VariantId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -41,6 +42,8 @@ pub trait InternDatabase: SourceDatabase {\n     fn intern_type_alias(&self, loc: TypeAliasLoc) -> TypeAliasId;\n     #[salsa::interned]\n     fn intern_impl(&self, loc: ImplLoc) -> ImplId;\n+    #[salsa::interned]\n+    fn intern_block(&self, loc: BlockLoc) -> BlockId;\n }\n \n #[salsa::query_group(DefDatabaseStorage)]\n@@ -56,7 +59,7 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     fn crate_def_map_query(&self, krate: CrateId) -> Arc<DefMap>;\n \n     #[salsa::invoke(DefMap::block_def_map_query)]\n-    fn block_def_map(&self, krate: CrateId, block: AstId<ast::BlockExpr>) -> Arc<DefMap>;\n+    fn block_def_map(&self, block: BlockId) -> Arc<DefMap>;\n \n     #[salsa::invoke(StructData::struct_data_query)]\n     fn struct_data(&self, id: StructId) -> Arc<StructData>;"}, {"sha": "42b50b5b75fae05fc9e76f2704ebf9b5fe5fd8a2", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "patch": "@@ -74,12 +74,16 @@ use stdx::impl_from;\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n     krate: CrateId,\n+    block: Option<BlockId>,\n     pub local_id: LocalModuleId,\n }\n \n impl ModuleId {\n     pub fn def_map(&self, db: &dyn db::DefDatabase) -> Arc<DefMap> {\n-        db.crate_def_map(self.krate)\n+        match self.block {\n+            Some(block) => db.block_def_map(block),\n+            None => db.crate_def_map(self.krate),\n+        }\n     }\n \n     pub fn krate(&self) -> CrateId {\n@@ -230,6 +234,15 @@ pub struct ImplId(salsa::InternId);\n type ImplLoc = ItemLoc<Impl>;\n impl_intern!(ImplId, ImplLoc, intern_impl, lookup_intern_impl);\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Ord, PartialOrd)]\n+pub struct BlockId(salsa::InternId);\n+#[derive(Debug, Hash, PartialEq, Eq, Clone)]\n+pub struct BlockLoc {\n+    ast_id: AstId<ast::BlockExpr>,\n+    module: ModuleId,\n+}\n+impl_intern!(BlockId, BlockLoc, intern_block, lookup_intern_block);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeParamId {\n     pub parent: GenericDefId,"}, {"sha": "199771e9a83b568870ddb705503b54103c2f8886", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 26, "deletions": 47, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "patch": "@@ -62,22 +62,22 @@ use la_arena::Arena;\n use profile::Count;\n use rustc_hash::FxHashMap;\n use stdx::format_to;\n-use syntax::{ast, AstNode};\n+use syntax::ast;\n \n use crate::{\n     db::DefDatabase,\n     item_scope::{BuiltinShadowMode, ItemScope},\n     nameres::{diagnostics::DefDiagnostic, path_resolution::ResolveMode},\n     path::ModPath,\n     per_ns::PerNs,\n-    AstId, LocalModuleId, ModuleDefId, ModuleId,\n+    AstId, BlockId, BlockLoc, LocalModuleId, ModuleDefId, ModuleId,\n };\n \n /// Contains all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]\n pub struct DefMap {\n     _c: Count<Self>,\n-    parent: Option<Arc<DefMap>>,\n+    block: Option<BlockInfo>,\n     root: LocalModuleId,\n     modules: Arena<ModuleData>,\n     krate: CrateId,\n@@ -91,6 +91,13 @@ pub struct DefMap {\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n+#[derive(Debug, PartialEq, Eq)]\n+struct BlockInfo {\n+    block: BlockId,\n+    parent: Arc<DefMap>,\n+    parent_module: LocalModuleId,\n+}\n+\n impl std::ops::Index<LocalModuleId> for DefMap {\n     type Output = ModuleData;\n     fn index(&self, id: LocalModuleId) -> &ModuleData {\n@@ -190,26 +197,26 @@ impl DefMap {\n         Arc::new(def_map)\n     }\n \n-    pub(crate) fn block_def_map_query(\n-        db: &dyn DefDatabase,\n-        krate: CrateId,\n-        block: AstId<ast::BlockExpr>,\n-    ) -> Arc<DefMap> {\n-        let item_tree = db.item_tree(block.file_id);\n-        let block_items = item_tree.inner_items_of_block(block.value);\n+    pub(crate) fn block_def_map_query(db: &dyn DefDatabase, block_id: BlockId) -> Arc<DefMap> {\n+        let block: BlockLoc = db.lookup_intern_block(block_id);\n+        let item_tree = db.item_tree(block.ast_id.file_id);\n+        let block_items = item_tree.inner_items_of_block(block.ast_id.value);\n \n-        let parent = parent_def_map(db, krate, block);\n+        let parent = block.module.def_map(db);\n \n         if block_items.is_empty() {\n             // If there are no inner items, nothing new is brought into scope, so we can just return\n             // the parent DefMap. This keeps DefMap parent chains short.\n             return parent;\n         }\n \n-        let mut def_map = DefMap::empty(krate, parent.edition);\n-        def_map.parent = Some(parent);\n+        let block_info =\n+            BlockInfo { block: block_id, parent, parent_module: block.module.local_id };\n+\n+        let mut def_map = DefMap::empty(block.module.krate, block_info.parent.edition);\n+        def_map.block = Some(block_info);\n \n-        let def_map = collector::collect_defs(db, def_map, Some(block.value));\n+        let def_map = collector::collect_defs(db, def_map, Some(block.ast_id.value));\n         Arc::new(def_map)\n     }\n \n@@ -218,7 +225,7 @@ impl DefMap {\n         let root = modules.alloc(ModuleData::default());\n         DefMap {\n             _c: Count::new(),\n-            parent: None,\n+            block: None,\n             krate,\n             edition,\n             extern_prelude: FxHashMap::default(),\n@@ -266,7 +273,8 @@ impl DefMap {\n     }\n \n     pub fn module_id(&self, local_id: LocalModuleId) -> ModuleId {\n-        ModuleId { krate: self.krate, local_id }\n+        let block = self.block.as_ref().map(|b| b.block);\n+        ModuleId { krate: self.krate, local_id, block }\n     }\n \n     pub(crate) fn resolve_path(\n@@ -286,9 +294,9 @@ impl DefMap {\n     pub fn dump(&self) -> String {\n         let mut buf = String::new();\n         let mut current_map = self;\n-        while let Some(parent) = &current_map.parent {\n+        while let Some(block) = &current_map.block {\n             go(&mut buf, current_map, \"block scope\", current_map.root);\n-            current_map = &**parent;\n+            current_map = &*block.parent;\n         }\n         go(&mut buf, current_map, \"crate\", current_map.root);\n         return buf;\n@@ -342,35 +350,6 @@ impl ModuleData {\n     }\n }\n \n-fn parent_def_map(\n-    db: &dyn DefDatabase,\n-    krate: CrateId,\n-    block: AstId<ast::BlockExpr>,\n-) -> Arc<DefMap> {\n-    // FIXME: store this info in the item tree instead of reparsing here\n-    let ast_id_map = db.ast_id_map(block.file_id);\n-    let block_ptr = ast_id_map.get(block.value);\n-    let root = match db.parse_or_expand(block.file_id) {\n-        Some(it) => it,\n-        None => {\n-            return Arc::new(DefMap::empty(krate, Edition::Edition2018));\n-        }\n-    };\n-    let ast = block_ptr.to_node(&root);\n-\n-    for ancestor in ast.syntax().ancestors().skip(1) {\n-        if let Some(block_expr) = ast::BlockExpr::cast(ancestor) {\n-            let ancestor_id = ast_id_map.ast_id(&block_expr);\n-            let ast_id = InFile::new(block.file_id, ancestor_id);\n-            let parent_map = db.block_def_map(krate, ast_id);\n-            return parent_map;\n-        }\n-    }\n-\n-    // No enclosing block scope, so the parent is the crate-level DefMap.\n-    db.crate_def_map(krate)\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum ModuleSource {\n     SourceFile(ast::SourceFile),"}, {"sha": "8ce127ddeacacfff4648cb01ee9037b45ed018fa", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "patch": "@@ -131,8 +131,8 @@ impl DefMap {\n             result.krate = result.krate.or(new.krate);\n             result.segment_index = result.segment_index.min(new.segment_index);\n \n-            match &current_map.parent {\n-                Some(map) => current_map = map,\n+            match &current_map.block {\n+                Some(block) => current_map = &block.parent,\n                 None => return result,\n             }\n         }"}, {"sha": "b36d0b59bd73ac62a91a45e7d2bfeef36b0f54b3", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=98a88ebb9ec46ed69dc7a3dbdc53a62ab9c1d14a", "patch": "@@ -8,12 +8,12 @@ mod block;\n \n use std::sync::Arc;\n \n-use base_db::{fixture::WithFixture, SourceDatabase};\n+use base_db::{fixture::WithFixture, FilePosition, SourceDatabase};\n use expect_test::{expect, Expect};\n-use hir_expand::db::AstDatabase;\n+use syntax::AstNode;\n use test_utils::mark;\n \n-use crate::{db::DefDatabase, nameres::*, test_db::TestDB};\n+use crate::{db::DefDatabase, nameres::*, test_db::TestDB, Lookup};\n \n fn compute_crate_def_map(ra_fixture: &str) -> Arc<DefMap> {\n     let db = TestDB::with_files(ra_fixture);\n@@ -23,14 +23,58 @@ fn compute_crate_def_map(ra_fixture: &str) -> Arc<DefMap> {\n \n fn compute_block_def_map(ra_fixture: &str) -> Arc<DefMap> {\n     let (db, position) = TestDB::with_position(ra_fixture);\n+\n+    // FIXME: perhaps we should make this use body lowering tests instead?\n+\n     let module = db.module_for_file(position.file_id);\n-    let ast_map = db.ast_id_map(position.file_id.into());\n-    let ast = db.parse(position.file_id);\n-    let block: ast::BlockExpr =\n-        syntax::algo::find_node_at_offset(&ast.syntax_node(), position.offset).unwrap();\n-    let block_id = ast_map.ast_id(&block);\n+    let mut def_map = db.crate_def_map(module.krate);\n+    while let Some(new_def_map) = descend_def_map_at_position(&db, position, def_map.clone()) {\n+        def_map = new_def_map;\n+    }\n+\n+    // FIXME: select the right module, not the root\n+\n+    def_map\n+}\n+\n+fn descend_def_map_at_position(\n+    db: &dyn DefDatabase,\n+    position: FilePosition,\n+    def_map: Arc<DefMap>,\n+) -> Option<Arc<DefMap>> {\n+    for (local_id, module_data) in def_map.modules() {\n+        let mod_def = module_data.origin.definition_source(db);\n+        let ast_map = db.ast_id_map(mod_def.file_id);\n+        let item_tree = db.item_tree(mod_def.file_id);\n+        let root = db.parse_or_expand(mod_def.file_id).unwrap();\n+        for item in module_data.scope.declarations() {\n+            match item {\n+                ModuleDefId::FunctionId(it) => {\n+                    // Technically blocks can be inside any type (due to arrays and const generics),\n+                    // and also in const/static initializers. For tests we only really care about\n+                    // functions though.\n+\n+                    let ast = ast_map.get(item_tree[it.lookup(db).id.value].ast_id).to_node(&root);\n+\n+                    if ast.syntax().text_range().contains(position.offset) {\n+                        // Cursor inside function, descend into its body's DefMap.\n+                        // Note that we don't handle block *expressions* inside function bodies.\n+                        let ast_map = db.ast_id_map(position.file_id.into());\n+                        let ast_id = ast_map.ast_id(&ast.body().unwrap());\n+                        let block = BlockLoc {\n+                            ast_id: InFile::new(position.file_id.into(), ast_id),\n+                            module: def_map.module_id(local_id),\n+                        };\n+                        let block_id = db.intern_block(block);\n+                        return Some(db.block_def_map(block_id));\n+                    }\n+                }\n+                _ => continue,\n+            }\n+        }\n+    }\n \n-    db.block_def_map(module.krate, InFile::new(position.file_id.into(), block_id))\n+    None\n }\n \n fn check(ra_fixture: &str, expect: Expect) {"}]}