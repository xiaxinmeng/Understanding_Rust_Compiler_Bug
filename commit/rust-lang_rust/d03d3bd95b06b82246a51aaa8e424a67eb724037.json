{"sha": "d03d3bd95b06b82246a51aaa8e424a67eb724037", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwM2QzYmQ5NWIwNmI4MjI0NmE1MWFhYThlNDI0YTY3ZWI3MjQwMzc=", "commit": {"author": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-17T14:01:25Z"}, "committer": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-18T10:20:46Z"}, "message": "Fixes internal lint warning in code base.", "tree": {"sha": "18ede8cacee50a2931bec306f68f975d4e924c6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ede8cacee50a2931bec306f68f975d4e924c6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d03d3bd95b06b82246a51aaa8e424a67eb724037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d03d3bd95b06b82246a51aaa8e424a67eb724037", "html_url": "https://github.com/rust-lang/rust/commit/d03d3bd95b06b82246a51aaa8e424a67eb724037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d03d3bd95b06b82246a51aaa8e424a67eb724037/comments", "author": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "html_url": "https://github.com/rust-lang/rust/commit/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3"}], "stats": {"total": 304, "additions": 153, "deletions": 151}, "files": [{"sha": "7d34ef157e4103fcf73a48c516ca834559b0e5dd", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::paths;\n-use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_then};\n+use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_note, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_hir::{Item, ItemKind, TraitRef};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -163,14 +163,13 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait\n             _ => (),\n         }\n \n-        span_lint_and_then(\n+        span_lint_and_note(\n             cx,\n             EXPL_IMPL_CLONE_ON_COPY,\n             item.span,\n             \"you are implementing `Clone` explicitly on a `Copy` type\",\n-            |diag| {\n-                diag.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n-            },\n+            item.span,\n+            \"consider deriving `Clone` or removing `Copy`\",\n         );\n     }\n }"}, {"sha": "82c0bf93a7fc09f95091084ccdf23be14d40bf05", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -1,6 +1,6 @@\n //! lint when there is an enum with no variants\n \n-use crate::utils::span_lint_and_then;\n+use crate::utils::span_lint_and_help;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -45,13 +45,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n             let ty = cx.tcx.type_of(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants.is_empty() {\n-                span_lint_and_then(cx, EMPTY_ENUM, item.span, \"enum with no variants\", |diag| {\n-                    diag.span_help(\n-                        item.span,\n-                        \"consider using the uninhabited type `!` (never type) or a wrapper \\\n-                         around it to introduce a type which can't be instantiated\",\n-                    );\n-                });\n+                span_lint_and_then(\n+                    cx,\n+                    EMPTY_ENUM,\n+                    item.span,\n+                    \"enum with no variants\",\n+                    \"consider using the uninhabited type `!` (never type) or a wrapper around it \\\n+                    to introduce a type which can't be instantiated\",\n+                );\n             }\n         }\n     }"}, {"sha": "e3e1136b67693aa856500090f28503b2f097bcef", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -7,7 +7,8 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{\n-    implements_trait, is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then, type_is_unsafe_function,\n+    implements_trait, is_adjusted, iter_input_pats, snippet_opt, span_lint_and_sugg, span_lint_and_then,\n+    type_is_unsafe_function,\n };\n \n declare_clippy_lint! {\n@@ -131,14 +132,15 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n             if let Some(name) = get_ufcs_type_name(cx, method_def_id, &args[0]);\n \n             then {\n-                span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure found\", |diag| {\n-                    diag.span_suggestion(\n-                        expr.span,\n-                        \"remove closure as shown\",\n-                        format!(\"{}::{}\", name, path.ident.name),\n-                        Applicability::MachineApplicable,\n-                    );\n-                });\n+                span_lint_and_sugg(\n+                    cx,\n+                    REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n+                    expr.span,\n+                    \"redundant closure found\",\n+                    \"remove closure as shown\",\n+                    format!(\"{}::{}\", name, path.ident.name),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n         );\n     }"}, {"sha": "33a9478f058830adedb7cfea69f26c5f8c50f669", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then,\n+    match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_sugg,\n };\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n@@ -58,29 +58,31 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n \n-                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n-                            diag.span_suggestion(\n-                                e.span,\n-                                \"consider removing `.into()`\",\n-                                sugg,\n-                                Applicability::MachineApplicable, // snippet\n-                            );\n-                        });\n+                        span_lint_and_sugg(\n+                            cx,\n+                            IDENTITY_CONVERSION,\n+                            e.span,\n+                            \"identical conversion\",\n+                            \"consider removing `.into()`\",\n+                            sugg,\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n                     }\n                 }\n                 if match_trait_method(cx, e, &paths::INTO_ITERATOR) && &*name.ident.as_str() == \"into_iter\" {\n                     let a = cx.tables.expr_ty(e);\n                     let b = cx.tables.expr_ty(&args[0]);\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n-                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n-                            diag.span_suggestion(\n-                                e.span,\n-                                \"consider removing `.into_iter()`\",\n-                                sugg,\n-                                Applicability::MachineApplicable, // snippet\n-                            );\n-                        });\n+                        span_lint_and_sugg(\n+                            cx,\n+                            IDENTITY_CONVERSION,\n+                            e.span,\n+                            \"identical conversion\",\n+                            \"consider removing `.into_iter()`\",\n+                            sugg,\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n                     }\n                 }\n             },\n@@ -95,14 +97,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                                 let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n-                                span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |diag| {\n-                                    diag.span_suggestion(\n-                                        e.span,\n-                                        &sugg_msg,\n-                                        sugg,\n-                                        Applicability::MachineApplicable, // snippet\n-                                    );\n-                                });\n+                                span_lint_and_sugg(\n+                                    cx,\n+                                    IDENTITY_CONVERSION,\n+                                    e.span,\n+                                    \"identical conversion\",\n+                                    &sugg_msg,\n+                                    sugg,\n+                                    Applicability::MachineApplicable, // snippet\n+                                );\n                             }\n                         }\n                     }"}, {"sha": "d5dbd495680b2fca928e3a69131e6243127b6899", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n@@ -149,19 +149,14 @@ impl IntPlusOne {\n     }\n \n     fn emit_warning(cx: &EarlyContext<'_>, block: &Expr, recommendation: String) {\n-        span_lint_and_then(\n+        span_lint_and_sugg(\n             cx,\n             INT_PLUS_ONE,\n             block.span,\n             \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n-            |diag| {\n-                diag.span_suggestion(\n-                    block.span,\n-                    \"change it to\",\n-                    recommendation,\n-                    Applicability::MachineApplicable, // snippet\n-                );\n-            },\n+            \"change it to\",\n+            recommendation,\n+            Applicability::MachineApplicable, // snippet\n         );\n     }\n }"}, {"sha": "313a7e8569ae904d1b9f2328a5a0dfbc9bfc61a0", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -2471,45 +2471,50 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n                 match_type(cx, ty, &paths::HASHMAP) {\n                 if method.ident.name == sym!(len) {\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n-                        diag.span_suggestion(\n-                            span,\n+                    span_lint_and_sugg(cx,\n+                        NEEDLESS_COLLECT,\n+                        span,\n+                        NEEDLESS_COLLECT_MSG,\n                             \"replace with\",\n                             \".count()\".to_string(),\n                             Applicability::MachineApplicable,\n                         );\n-                    });\n                 }\n                 if method.ident.name == sym!(is_empty) {\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n-                        diag.span_suggestion(\n-                            span,\n-                            \"replace with\",\n-                            \".next().is_none()\".to_string(),\n-                            Applicability::MachineApplicable,\n+                    span_lint_and_sugg(cx,\n+                        NEEDLESS_COLLECT,\n+                        span,\n+                        NEEDLESS_COLLECT_MSG,\n+                        \"replace with\",\n+                        \".next().is_none()\".to_string(),\n+                        Applicability::MachineApplicable,\n                         );\n-                    });\n                 }\n                 if method.ident.name == sym!(contains) {\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |diag| {\n-                        let (arg, pred) = if contains_arg.starts_with('&') {\n-                            (\"x\", &contains_arg[1..])\n-                        } else {\n-                            (\"&x\", &*contains_arg)\n-                        };\n-                        diag.span_suggestion(\n-                            span,\n-                            \"replace with\",\n-                            format!(\n-                                \".any(|{}| x == {})\",\n-                                arg, pred\n-                            ),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_then(cx,\n+                        NEEDLESS_COLLECT,\n+                        span,\n+                        NEEDLESS_COLLECT_MSG,\n+                    |db| {\n+                            let (arg, pred) = if contains_arg.starts_with('&') {\n+                                (\"x\", &contains_arg[1..])\n+                            } else {\n+                                (\"&x\", &*contains_arg)\n+                            };\n+                            db.span_suggestion(\n+                                span,\n+                                \"replace with\",\n+                                format!(\n+                                    \".any(|{}| x == {})\",\n+                                    arg, pred\n+                                ),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    );\n                 }\n             }\n         }"}, {"sha": "1e2afb7a67406110160bed904d1cf0a859f8c746", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -2,8 +2,8 @@\n \n use crate::utils::ptr::get_spans;\n use crate::utils::{\n-    is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then,\n-    walk_ptrs_hir_ty,\n+    is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, walk_ptrs_hir_ty,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -234,19 +234,14 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n                     then {\n                         let replacement = snippet_opt(cx, inner.span);\n                         if let Some(r) = replacement {\n-                            span_lint_and_then(\n+                            span_lint_and_sugg(\n                                 cx,\n                                 PTR_ARG,\n                                 arg.span,\n                                 \"using a reference to `Cow` is not recommended.\",\n-                                |diag| {\n-                                    diag.span_suggestion(\n-                                        arg.span,\n-                                        \"change this to\",\n-                                        \"&\".to_owned() + &r,\n-                                        Applicability::Unspecified,\n-                                    );\n-                                },\n+                                \"change this to\",\n+                                \"&\".to_owned() + &r,\n+                                Applicability::Unspecified,\n                             );\n                         }\n                     }"}, {"sha": "3229b244296a877e82a07a13c1e5772c7ea9fc27", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 47, "deletions": 41, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then};\n+use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for return statements at the end of a block.\n@@ -162,24 +162,26 @@ impl Return {\n             },\n             None => match replacement {\n                 RetReplacement::Empty => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"remove `return`\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_sugg(\n+                        cx,\n+                        NEEDLESS_RETURN,\n+                        ret_span,\n+                        \"unneeded `return` statement\",\n+                        \"remove `return`\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 },\n                 RetReplacement::Block => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"replace `return` with an empty block\",\n-                            \"{}\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_sugg(\n+                        cx,\n+                        NEEDLESS_RETURN,\n+                        ret_span,\n+                        \"unneeded `return` statement\",\n+                        \"replace `return` with an empty block\",\n+                        \"{}\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 },\n             },\n         }\n@@ -259,14 +261,15 @@ impl EarlyLintPass for Return {\n                 } else {\n                     (ty.span, Applicability::MaybeIncorrect)\n                 };\n-                span_lint_and_then(cx, UNUSED_UNIT, rspan, \"unneeded unit return type\", |diag| {\n-                    diag.span_suggestion(\n-                        rspan,\n-                        \"remove the `-> ()`\",\n-                        String::new(),\n-                        appl,\n-                    );\n-                });\n+                span_lint_and_sugg(\n+                    cx,\n+                    UNUSED_UNIT,\n+                    rspan,\n+                    \"unneeded unit return type\",\n+                    \"remove the `-> ()`\",\n+                    String::new(),\n+                    appl,\n+                );\n             }\n         }\n     }\n@@ -279,14 +282,16 @@ impl EarlyLintPass for Return {\n             if is_unit_expr(expr) && !stmt.span.from_expansion();\n             then {\n                 let sp = expr.span;\n-                span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |diag| {\n-                    diag.span_suggestion(\n-                        sp,\n-                        \"remove the final `()`\",\n-                        String::new(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                });\n+                span_lint_and_sugg(\n+                    cx,\n+                    UNUSED_UNIT,\n+                    sp,\n+                    \"unneeded unit expression\",\n+                    \"remove the final `()`\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+\n             }\n         }\n     }\n@@ -295,14 +300,15 @@ impl EarlyLintPass for Return {\n         match e.kind {\n             ast::ExprKind::Ret(Some(ref expr)) | ast::ExprKind::Break(_, Some(ref expr)) => {\n                 if is_unit_expr(expr) && !expr.span.from_expansion() {\n-                    span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |diag| {\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"remove the `()`\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    });\n+                    span_lint_and_sugg(\n+                        cx,\n+                        UNUSED_UNIT,\n+                        expr.span,\n+                        \"unneeded `()`\",\n+                        \"remove the `()`\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n             },\n             _ => (),"}, {"sha": "e24d2c4f495dba2aeb01e8ef09a590f0f9000348", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d3bd95b06b82246a51aaa8e424a67eb724037/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=d03d3bd95b06b82246a51aaa8e424a67eb724037", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::{\n-    is_normalizable, last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then, sugg,\n+    is_normalizable, last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, sugg,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -441,24 +442,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     \"\"\n                                 };\n \n-                                span_lint_and_then(\n+                                span_lint_and_sugg(\n                                     cx,\n                                     TRANSMUTE_BYTES_TO_STR,\n                                     e.span,\n                                     &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                                    |diag| {\n-                                        diag.span_suggestion(\n-                                            e.span,\n-                                            \"consider using\",\n-                                            format!(\n-                                                \"std::str::from_utf8{}({}).unwrap()\",\n-                                                postfix,\n-                                                snippet(cx, args[0].span, \"..\"),\n-                                            ),\n-                                            Applicability::Unspecified,\n-                                        );\n-                                    }\n-                                )\n+                                    \"consider using\",\n+                                    format!(\n+                                        \"std::str::from_utf8{}({}).unwrap()\",\n+                                        postfix,\n+                                        snippet(cx, args[0].span, \"..\"),\n+                                    ),\n+                                    Applicability::Unspecified,\n+                                );\n                             } else {\n                                 if cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty) {\n                                     span_lint_and_then("}]}