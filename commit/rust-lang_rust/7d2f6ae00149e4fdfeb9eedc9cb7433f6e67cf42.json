{"sha": "7d2f6ae00149e4fdfeb9eedc9cb7433f6e67cf42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMmY2YWUwMDE0OWU0ZmRmZWI5ZWVkYzljYjc0MzNmNmU2N2NmNDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-08T22:27:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-09T15:25:31Z"}, "message": "miri: equip unary_op with overflow detection", "tree": {"sha": "02972959495f80f45505012f9549a0400349aee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02972959495f80f45505012f9549a0400349aee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d2f6ae00149e4fdfeb9eedc9cb7433f6e67cf42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2f6ae00149e4fdfeb9eedc9cb7433f6e67cf42", "html_url": "https://github.com/rust-lang/rust/commit/7d2f6ae00149e4fdfeb9eedc9cb7433f6e67cf42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d2f6ae00149e4fdfeb9eedc9cb7433f6e67cf42/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f85c6ffad77554150e7cab4ccac38b26621bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f85c6ffad77554150e7cab4ccac38b26621bdb", "html_url": "https://github.com/rust-lang/rust/commit/28f85c6ffad77554150e7cab4ccac38b26621bdb"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "9a3c08248b5efc8a631c0743511e3633dcd1118b", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7d2f6ae00149e4fdfeb9eedc9cb7433f6e67cf42/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2f6ae00149e4fdfeb9eedc9cb7433f6e67cf42/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=7d2f6ae00149e4fdfeb9eedc9cb7433f6e67cf42", "patch": "@@ -342,7 +342,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Typed version of `checked_binary_op`, returning an `ImmTy`. Also ignores overflows.\n+    /// Typed version of `overflowing_binary_op`, returning an `ImmTy`. Also ignores overflows.\n     #[inline]\n     pub fn binary_op(\n         &self,\n@@ -354,11 +354,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(ImmTy::from_scalar(val, self.layout_of(ty)?))\n     }\n \n-    pub fn unary_op(\n+    /// Returns the result of the specified operation, whether it overflowed, and\n+    /// the result type.\n+    pub fn overflowing_unary_op(\n         &self,\n         un_op: mir::UnOp,\n         val: ImmTy<'tcx, M::PointerTag>,\n-    ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {\n+    ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, bool, Ty<'tcx>)> {\n         use rustc::mir::UnOp::*;\n \n         let layout = val.layout;\n@@ -372,29 +374,45 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Not => !val,\n                     _ => bug!(\"Invalid bool op {:?}\", un_op),\n                 };\n-                Ok(ImmTy::from_scalar(Scalar::from_bool(res), self.layout_of(self.tcx.types.bool)?))\n+                Ok((Scalar::from_bool(res), false, self.tcx.types.bool))\n             }\n             ty::Float(fty) => {\n                 let res = match (un_op, fty) {\n                     (Neg, FloatTy::F32) => Scalar::from_f32(-val.to_f32()?),\n                     (Neg, FloatTy::F64) => Scalar::from_f64(-val.to_f64()?),\n                     _ => bug!(\"Invalid float op {:?}\", un_op),\n                 };\n-                Ok(ImmTy::from_scalar(res, layout))\n+                Ok((res, false, layout.ty))\n             }\n             _ => {\n                 assert!(layout.ty.is_integral());\n                 let val = self.force_bits(val, layout.size)?;\n-                let res = match un_op {\n-                    Not => !val,\n+                let (res, overflow) = match un_op {\n+                    Not => (self.truncate(!val, layout), false), // bitwise negation, then truncate\n                     Neg => {\n+                        // arithmetic negation\n                         assert!(layout.abi.is_signed());\n-                        (-(val as i128)) as u128\n+                        let val = self.sign_extend(val, layout) as i128;\n+                        let (res, overflow) = val.overflowing_neg();\n+                        let res = res as u128;\n+                        // Truncate to target type.\n+                        // If that truncation loses any information, we have an overflow.\n+                        let truncated = self.truncate(res, layout);\n+                        (truncated, overflow || self.sign_extend(truncated, layout) != res)\n                     }\n                 };\n                 // res needs tuncating\n-                Ok(ImmTy::from_uint(self.truncate(res, layout), layout))\n+                Ok((Scalar::from_uint(res, layout.size), overflow, layout.ty))\n             }\n         }\n     }\n+\n+    pub fn unary_op(\n+        &self,\n+        un_op: mir::UnOp,\n+        val: ImmTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {\n+        let (val, _overflow, ty) = self.overflowing_unary_op(un_op, val)?;\n+        Ok(ImmTy::from_scalar(val, self.layout_of(ty)?))\n+    }\n }"}]}