{"sha": "08f658bc72ed2f7d19e6a40ae17e80c289acfa20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZjY1OGJjNzJlZDJmN2QxOWU2YTQwYWUxN2U4MGMyODlhY2ZhMjA=", "commit": {"author": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-08-14T17:35:06Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-08-14T17:35:06Z"}, "message": "Use different span", "tree": {"sha": "7f438406506e5c28505940eb5226e7acddcfc0e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f438406506e5c28505940eb5226e7acddcfc0e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08f658bc72ed2f7d19e6a40ae17e80c289acfa20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl1URkoACgkQj1SKWi7R\nP1j8aw//XbGN5uirezQG2urKOYjHKds5YHDk92wsBMQzTf0oXJOtfXXO3S8VRQME\nQmvzjiEFA2ynOcnFY+3TurLz0POuZ7uK0juu2BxxaZfzHxqP5D7V+YeMxp6/L++8\n5+bp1cl4bTIp2fYaJAezoEXTAdTE96c+BmOhXtf+iW0uwVRBAKi5QdnGn9yPsBaw\nkGBSy2UnU58vleCK3mWuyo3z7WtxsWFGy6LfXSH3B6rTj8qF8x69RgKhX2jDEdVl\ntJkBtqnv4lIC4d6cyMEIzF3T9CL4ne7kF5Tu4dRHfNZZGGwVgVcre/dRLM9FDq4I\nkDI1650wzNb/URlLUPpv7UoOjCh23Jkbu+gEGZFVpI7I1eMgo7oBcC21+/b9Zhx2\nzcDMSDJJNOdVEYGR3FiPNczDU0KdU+wGPIpX7Suda3C3bHzG3qoSjEntJchuIJYV\nr9CH3i0dzuXHcJsR7xFsybEz7zOzXTnZSb1HHywJYUzS6HSZ/fbSQzsqHg7loZKc\nNZFnUAgTZQQkMR2ovUkPogSMhWDrjrmZUQ4RW+Ww0Eu+LDnzE0K6zQTCRk00Gaib\nqZaWcv4gu62wElGIXYMmroHdT6NwRudO514+MSAoPa0SCiQxwHMAR/PDuCeqI6Lk\nGBTJ4cJexWpJo1qx8iaVENqwVOGo3zXnT4Kt87Y2XpyF8z5kQns=\n=jQJe\n-----END PGP SIGNATURE-----", "payload": "tree 7f438406506e5c28505940eb5226e7acddcfc0e6\nparent 214d4991038d0fef99efbb0fc8899bc7f003d7c1\nauthor Jeremy Stucki <stucki.jeremy@gmail.com> 1565804106 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1565804106 +0200\n\nUse different span\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08f658bc72ed2f7d19e6a40ae17e80c289acfa20", "html_url": "https://github.com/rust-lang/rust/commit/08f658bc72ed2f7d19e6a40ae17e80c289acfa20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08f658bc72ed2f7d19e6a40ae17e80c289acfa20/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214d4991038d0fef99efbb0fc8899bc7f003d7c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/214d4991038d0fef99efbb0fc8899bc7f003d7c1", "html_url": "https://github.com/rust-lang/rust/commit/214d4991038d0fef99efbb0fc8899bc7f003d7c1"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "d73f74e0866af8be74ba3a71f24968465300b66a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/08f658bc72ed2f7d19e6a40ae17e80c289acfa20/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f658bc72ed2f7d19e6a40ae17e80c289acfa20/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=08f658bc72ed2f7d19e6a40ae17e80c289acfa20", "patch": "@@ -1663,6 +1663,7 @@ fn lint_iter_cloned_collect<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Ex\n fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n     fn check_fold_with_op(\n         cx: &LateContext<'_, '_>,\n+        expr: &hir::Expr,\n         fold_args: &[hir::Expr],\n         op: hir::BinOpKind,\n         replacement_method_name: &str,\n@@ -1685,30 +1686,28 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n             if match_var(&*left_expr, first_arg_ident);\n             if replacement_has_args || match_var(&*right_expr, second_arg_ident);\n \n-            then {\n-                // Span containing `.fold(...)`\n-                let next_point = cx.sess().source_map().next_point(fold_args[0].span);\n-                let fold_span = next_point.with_hi(fold_args[2].span.hi() + BytePos(1));\n+            if let hir::ExprKind::MethodCall(_, span, _) = &expr.node;\n \n+            then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if replacement_has_args {\n                     format!(\n-                        \".{replacement}(|{s}| {r})\",\n+                        \"{replacement}(|{s}| {r})\",\n                         replacement = replacement_method_name,\n                         s = second_arg_ident,\n                         r = snippet_with_applicability(cx, right_expr.span, \"EXPR\", &mut applicability),\n                     )\n                 } else {\n                     format!(\n-                        \".{replacement}()\",\n+                        \"{replacement}()\",\n                         replacement = replacement_method_name,\n                     )\n                 };\n \n                 span_lint_and_sugg(\n                     cx,\n                     UNNECESSARY_FOLD,\n-                    fold_span,\n+                    span.with_hi(expr.span.hi()),\n                     // TODO #2371 don't suggest e.g., .any(|x| f(x)) if we can suggest .any(f)\n                     \"this `.fold` can be written more succinctly using another method\",\n                     \"try\",\n@@ -1732,10 +1731,10 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n     // Check if the first argument to .fold is a suitable literal\n     if let hir::ExprKind::Lit(ref lit) = fold_args[1].node {\n         match lit.node {\n-            ast::LitKind::Bool(false) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Or, \"any\", true),\n-            ast::LitKind::Bool(true) => check_fold_with_op(cx, fold_args, hir::BinOpKind::And, \"all\", true),\n-            ast::LitKind::Int(0, _) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Add, \"sum\", false),\n-            ast::LitKind::Int(1, _) => check_fold_with_op(cx, fold_args, hir::BinOpKind::Mul, \"product\", false),\n+            ast::LitKind::Bool(false) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Or, \"any\", true),\n+            ast::LitKind::Bool(true) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::And, \"all\", true),\n+            ast::LitKind::Int(0, _) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Add, \"sum\", false),\n+            ast::LitKind::Int(1, _) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Mul, \"product\", false),\n             _ => (),\n         }\n     }"}]}