{"sha": "b2397437530eecef72a1524a7e0a4b42034fa360", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMzk3NDM3NTMwZWVjZWY3MmExNTI0YTdlMGE0YjQyMDM0ZmEzNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-06T16:58:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-06T16:58:27Z"}, "message": "Auto merge of #52644 - varkor:lib-feature-gate-2, r=withoutboats\n\nAdd errors for unknown, stable and duplicate feature attributes\n\n- Adds an error for unknown (lang and lib) features.\n- Extends the lint for unnecessary feature attributes for stable features to libs features (this already exists for lang features).\n- Adds an error for duplicate (lang and lib) features.\n\n```rust\n#![feature(fake_feature)] //~ ERROR unknown feature `fake_feature`\n\n#![feature(i128_type)] //~ WARNING the feature `i128_type` has been stable since 1.26.0\n\n#![feature(non_exhaustive)]\n#![feature(non_exhaustive)] //~ ERROR duplicate `non_exhaustive` feature attribute\n```\n\nFixes #52053, fixes #53032 and address some of the problems noted in #44232 (though not unused features).\n\nThere are a few outstanding problems, that I haven't narrowed down yet:\n- [x] Stability attributes on macros do not seem to be taken into account.\n- [x] Stability attributes behind `cfg` attributes are not taken into account.\n- [x] There are failing incremental tests.", "tree": {"sha": "429466887a0f431e3586e4985775d268dd2374f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/429466887a0f431e3586e4985775d268dd2374f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2397437530eecef72a1524a7e0a4b42034fa360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2397437530eecef72a1524a7e0a4b42034fa360", "html_url": "https://github.com/rust-lang/rust/commit/b2397437530eecef72a1524a7e0a4b42034fa360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2397437530eecef72a1524a7e0a4b42034fa360/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8089daf8046d7999310d44e5c68ccff4ab255a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8089daf8046d7999310d44e5c68ccff4ab255a", "html_url": "https://github.com/rust-lang/rust/commit/4b8089daf8046d7999310d44e5c68ccff4ab255a"}, {"sha": "4687476470d383fefe62ac9cde4e6f9015ba550f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4687476470d383fefe62ac9cde4e6f9015ba550f", "html_url": "https://github.com/rust-lang/rust/commit/4687476470d383fefe62ac9cde4e6f9015ba550f"}], "stats": {"total": 2250, "additions": 1040, "deletions": 1210}, "files": [{"sha": "469a38da2b8312426589baef8928b7ad0a5d9e96", "filename": "src/etc/test-float-parse/many-digits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rand)]\n-\n extern crate rand;\n \n mod _common;"}, {"sha": "2994dd9d5e6446511698fd96162dab55767cd7c1", "filename": "src/etc/test-float-parse/rand-f64.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rand)]\n-\n extern crate rand;\n \n mod _common;"}, {"sha": "b4f4fd74f3a39ac41815df8681ef3261b2fc1a6d", "filename": "src/liballoc/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fliballoc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fliballoc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rand)]\n #![feature(repr_simd)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(test)]"}, {"sha": "7787102ba8266b4dd23c8cc13ed2ab18ba50af2b", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -2370,7 +2370,7 @@ macro_rules! __impl_slice_eq1 {\n         __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n     };\n     ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n-        #[stable(feature = \"vec-deque-partial-eq-slice\", since = \"1.17.0\")]\n+        #[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]\n         impl<'a, 'b, A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n             fn eq(&self, other: &$Rhs) -> bool {\n                 if self.len() != other.len() {"}, {"sha": "d1b607bbe9b534d7d4984ac2dfaf50952d37f688", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -74,27 +74,24 @@\n #![needs_allocator]\n #![deny(missing_debug_implementations)]\n \n-#![cfg_attr(test, allow(deprecated))] // rand\n-#![cfg_attr(not(test), feature(exact_size_is_empty))]\n+#![cfg_attr(not(test), feature(fn_traits))]\n #![cfg_attr(not(test), feature(generator_trait))]\n-#![cfg_attr(test, feature(rand, test))]\n+#![cfg_attr(test, feature(test))]\n+\n #![feature(allocator_api)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n-#![feature(ascii_ctype)]\n #![feature(box_into_raw_non_null)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n-#![feature(collections_range)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n-#![feature(from_ref)]\n #![feature(fundamental)]\n #![feature(futures_api)]\n #![feature(lang_items)]\n@@ -118,14 +115,9 @@\n #![feature(allocator_internals)]\n #![feature(on_unimplemented)]\n #![feature(exact_chunks)]\n-#![feature(pointer_methods)]\n-#![feature(inclusive_range_methods)]\n #![feature(rustc_const_unstable)]\n #![feature(const_vec_new)]\n \n-#![cfg_attr(not(test), feature(fn_traits, i128))]\n-#![cfg_attr(test, feature(test))]\n-\n // Allow testing this library\n \n #[cfg(test)]"}, {"sha": "c12c7a81f79c8905a3ee3b77f7eb2662919ea488", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -16,11 +16,8 @@\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]\n-#![feature(rand)]\n #![feature(slice_sort_by_cached_key)]\n-#![feature(splice)]\n #![feature(str_escape)]\n-#![feature(string_retain)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(exact_chunks)]"}, {"sha": "64a17786b0a6b1b7bb92ec7df180190c2458bc1f", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -1050,8 +1050,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1084,8 +1082,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1118,8 +1114,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1155,8 +1149,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1189,8 +1181,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1226,8 +1216,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1264,8 +1252,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1298,8 +1284,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1349,8 +1333,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';\n@@ -1385,8 +1367,6 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = 'A';\n     /// let uppercase_g = 'G';\n     /// let a = 'a';"}, {"sha": "a4a01990c22a505f4b75ba7c60fdef002f91a40a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -82,7 +82,6 @@\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(const_int_ops)]\n-#![feature(core_float)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]\n@@ -102,16 +101,13 @@\n #![feature(rustc_attrs)]\n #![feature(rustc_const_unstable)]\n #![feature(simd_ffi)]\n-#![feature(core_slice_ext)]\n-#![feature(core_str_ext)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(stmt_expr_attributes)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(doc_alias)]\n-#![feature(inclusive_range_methods)]\n #![feature(mmx_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(sse4a_target_feature)]"}, {"sha": "44a3b310ebe4d2e92ab99c24e02ed167df5456d3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -3761,8 +3761,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -3799,8 +3797,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -3837,8 +3833,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -3878,8 +3872,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -3916,8 +3908,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -3957,8 +3947,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -3999,8 +3987,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -4037,8 +4023,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -4092,8 +4076,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';\n@@ -4132,8 +4114,6 @@ impl u8 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ascii_ctype)]\n-    ///\n     /// let uppercase_a = b'A';\n     /// let uppercase_g = b'G';\n     /// let a = b'a';"}, {"sha": "187ac3c7a7f06ab7b1bea4c1ea6f2e4fa2466bf5", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -2007,7 +2007,7 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n }\n \n-#[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n+#[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n impl<T> SliceIndex<[T]> for usize {\n     type Output = T;\n \n@@ -2056,7 +2056,7 @@ impl<T> SliceIndex<[T]> for usize {\n     }\n }\n \n-#[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n+#[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n impl<T> SliceIndex<[T]> for  ops::Range<usize> {\n     type Output = [T];\n \n@@ -2117,7 +2117,7 @@ impl<T> SliceIndex<[T]> for  ops::Range<usize> {\n     }\n }\n \n-#[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n+#[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n     type Output = [T];\n \n@@ -2152,7 +2152,7 @@ impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {\n     }\n }\n \n-#[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n+#[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n     type Output = [T];\n \n@@ -2187,7 +2187,7 @@ impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {\n     }\n }\n \n-#[stable(feature = \"slice-get-slice-impls\", since = \"1.15.0\")]\n+#[stable(feature = \"slice_get_slice_impls\", since = \"1.15.0\")]\n impl<T> SliceIndex<[T]> for ops::RangeFull {\n     type Output = [T];\n "}, {"sha": "fc92a5a222512a660da46ce339ae631b3220db37", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,18 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(ascii_ctype)]\n #![feature(box_syntax)]\n #![feature(cell_update)]\n-#![feature(core_float)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n #![feature(dec2flt)]\n-#![feature(decode_utf8)]\n #![feature(euclidean_division)]\n #![feature(exact_size_is_empty)]\n #![feature(fixed_size_array)]\n-#![feature(float_internals)]\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n@@ -29,7 +25,6 @@\n #![feature(refcell_map_split)]\n #![feature(refcell_replace_swap)]\n #![feature(slice_patterns)]\n-#![feature(slice_rotate)]\n #![feature(sort_internals)]\n #![feature(specialization)]\n #![feature(step_trait)]"}, {"sha": "2abdf7cee63210e46ee43e8e312d1f2080a78198", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -39,7 +39,6 @@\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(unwind_attributes)]\n-#![cfg_attr(target_env = \"msvc\", feature(raw))]\n \n #![panic_runtime]\n #![feature(panic_runtime)]"}, {"sha": "b7281cf0445cdf0a30c72cfc7f5c44030a215d4f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -615,7 +615,9 @@ define_dep_nodes!( <'tcx>\n     [input] CrateName(CrateNum),\n     [] ItemChildren(DefId),\n     [] ExternModStmtCnum(DefId),\n-    [input] GetLangItems,\n+    [eval_always] GetLibFeatures,\n+    [] DefinedLibFeatures(CrateNum),\n+    [eval_always] GetLangItems,\n     [] DefinedLangItems(CrateNum),\n     [] MissingLangItems(CrateNum),\n     [] VisibleParentMap,"}, {"sha": "a3c0688dcc8edcaad3955249d64f03ba0cd7ab8c", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -1918,6 +1918,30 @@ fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n ```\n \"##,\n \n+E0635: r##\"\n+The `#![feature]` attribute specified an unknown feature.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0635\n+#![feature(nonexistent_rust_feature)] // error: unknown feature\n+```\n+\n+\"##,\n+\n+E0636: r##\"\n+A `#![feature]` attribute was declared multiple times.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0636\n+#![allow(stable_features)]\n+#![feature(rust1)]\n+#![feature(rust1)] // error: the feature `rust1` has already been declared\n+```\n+\n+\"##,\n+\n E0644: r##\"\n A closure or generator was constructed that references its own type.\n \n@@ -2138,4 +2162,5 @@ register_diagnostics! {\n     E0708, // `async` non-`move` closures with arguments are not currently supported\n     E0709, // multiple different lifetimes used in arguments of `async fn`\n     E0710, // an unknown tool name found in scoped lint\n+    E0711, // a feature has been declared with conflicting stability attributes\n }"}, {"sha": "fe87053681ae8b6d735eda1243fdab00e9bae532", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -1072,6 +1072,11 @@ impl_stable_hash_for!(struct hir::def::Export {\n     span\n });\n \n+impl_stable_hash_for!(struct ::middle::lib_features::LibFeatures {\n+    stable,\n+    unstable\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for ::middle::lang_items::LangItem {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _: &mut StableHashingContext<'a>,"}, {"sha": "d086d3bd28df00227bda9bedc7b92467270a8873", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -511,7 +511,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for feature_gate::Features {\n                                           hasher: &mut StableHasher<W>) {\n         // Unfortunately we cannot exhaustively list fields here, since the\n         // struct is macro generated.\n-        self.declared_stable_lang_features.hash_stable(hcx, hasher);\n+        self.declared_lang_features.hash_stable(hcx, hasher);\n         self.declared_lib_features.hash_stable(hcx, hasher);\n \n         self.walk_feature_fields(|feature_name, value| {"}, {"sha": "a5913467b80db48370bbaa044ebe4fcaadc5c290", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -45,8 +45,6 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n-#![feature(from_ref)]\n-#![feature(fs_read_write)]\n #![feature(iterator_find_map)]\n #![cfg_attr(windows, feature(libc))]\n #![feature(macro_vis_matcher)]\n@@ -72,7 +70,6 @@\n #![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(macro_at_most_once_rep)]\n-#![feature(inclusive_range_methods)]\n #![feature(crate_in_paths)]\n \n #![recursion_limit=\"512\"]\n@@ -141,6 +138,7 @@ pub mod middle {\n     pub mod exported_symbols;\n     pub mod free_region;\n     pub mod intrinsicck;\n+    pub mod lib_features;\n     pub mod lang_items;\n     pub mod liveness;\n     pub mod mem_categorization;"}, {"sha": "590b59568c4aa398a5f9f0371e4f7597efc45db8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -102,7 +102,7 @@ declare_lint! {\n declare_lint! {\n     pub UNUSED_FEATURES,\n     Warn,\n-    \"unused or unknown features found in crate-level #[feature] directives\"\n+    \"unused features found in crate-level #[feature] directives\"\n }\n \n declare_lint! {"}, {"sha": "47c6bfbe6945a4b6822ff88e3ff2f3f33b0ed447", "filename": "src/librustc/middle/lib_features.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -0,0 +1,178 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Detecting lib features (i.e. features that are not lang features).\n+//\n+// These are declared using stability attributes (e.g. `#[stable (..)]`\n+// and `#[unstable (..)]`), but are not declared in one single location\n+// (unlike lang features), which means we need to collect them instead.\n+\n+use ty::TyCtxt;\n+use syntax::symbol::Symbol;\n+use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n+use syntax_pos::{Span, DUMMY_SP};\n+use hir;\n+use hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n+use errors::DiagnosticId;\n+\n+pub struct LibFeatures {\n+    // A map from feature to stabilisation version.\n+    pub stable: FxHashMap<Symbol, Symbol>,\n+    pub unstable: FxHashSet<Symbol>,\n+}\n+\n+impl LibFeatures {\n+    fn new() -> LibFeatures {\n+        LibFeatures {\n+            stable: FxHashMap(),\n+            unstable: FxHashSet(),\n+        }\n+    }\n+\n+    pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n+        let mut all_features: Vec<_> = self.stable.iter().map(|(f, s)| (*f, Some(*s)))\n+            .chain(self.unstable.iter().map(|f| (*f, None)))\n+            .collect();\n+        all_features.sort_unstable_by_key(|f| f.0.as_str());\n+        all_features\n+    }\n+}\n+\n+pub struct LibFeatureCollector<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    lib_features: LibFeatures,\n+}\n+\n+impl<'a, 'tcx> LibFeatureCollector<'a, 'tcx> {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LibFeatureCollector<'a, 'tcx> {\n+        LibFeatureCollector {\n+            tcx,\n+            lib_features: LibFeatures::new(),\n+        }\n+    }\n+\n+    fn extract(&self, attrs: &[Attribute]) -> Vec<(Symbol, Option<Symbol>, Span)> {\n+        let stab_attrs = vec![\"stable\", \"unstable\", \"rustc_const_unstable\"];\n+        let mut features = vec![];\n+\n+        for attr in attrs {\n+            // Find a stability attribute (i.e. `#[stable (..)]`, `#[unstable (..)]`,\n+            // `#[rustc_const_unstable (..)]`).\n+            if let Some(stab_attr) = stab_attrs.iter().find(|stab_attr| {\n+                attr.check_name(stab_attr)\n+            }) {\n+                let meta_item = attr.meta();\n+                if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta_item {\n+                    let mut feature = None;\n+                    let mut since = None;\n+                    for meta in metas {\n+                        if let Some(mi) = meta.meta_item() {\n+                            // Find the `feature = \"..\"` meta-item.\n+                            match (&*mi.name().as_str(), mi.value_str()) {\n+                                (\"feature\", val) => feature = val,\n+                                (\"since\", val) => since = val,\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n+                    if let Some(feature) = feature {\n+                        // This additional check for stability is to make sure we\n+                        // don't emit additional, irrelevant errors for malformed\n+                        // attributes.\n+                        if *stab_attr != \"stable\" || since.is_some() {\n+                            features.push((feature, since, attr.span));\n+                        }\n+                    }\n+                    // We need to iterate over the other attributes, because\n+                    // `rustc_const_unstable` is not mutually exclusive with\n+                    // the other stability attributes, so we can't just `break`\n+                    // here.\n+                }\n+            }\n+        }\n+\n+        features\n+    }\n+\n+    fn collect_feature(&mut self, feature: Symbol, since: Option<Symbol>, span: Span) {\n+        let already_in_stable = self.lib_features.stable.contains_key(&feature);\n+        let already_in_unstable = self.lib_features.unstable.contains(&feature);\n+\n+        match (since, already_in_stable, already_in_unstable) {\n+            (Some(since), _, false) => {\n+                if let Some(prev_since) = self.lib_features.stable.get(&feature) {\n+                    if *prev_since != since {\n+                        let msg = format!(\n+                            \"feature `{}` is declared stable since {}, \\\n+                             but was previously declared stable since {}\",\n+                            feature,\n+                            since,\n+                            prev_since,\n+                        );\n+                        self.tcx.sess.struct_span_err_with_code(span, &msg,\n+                            DiagnosticId::Error(\"E0711\".into())).emit();\n+                        return;\n+                    }\n+                }\n+\n+                self.lib_features.stable.insert(feature, since);\n+            }\n+            (None, false, _) => {\n+                self.lib_features.unstable.insert(feature);\n+            }\n+            (Some(_), _, true) | (None, true, _) => {\n+                let msg = format!(\n+                    \"feature `{}` is declared {}, but was previously declared {}\",\n+                    feature,\n+                    if since.is_some() { \"stable\"} else { \"unstable\" },\n+                    if since.is_none() { \"stable\"} else { \"unstable\" },\n+                );\n+                self.tcx.sess.struct_span_err_with_code(span, &msg,\n+                    DiagnosticId::Error(\"E0711\".into())).emit();\n+            }\n+        }\n+    }\n+\n+    fn collect_from_attrs(&mut self, attrs: &[Attribute]) {\n+        for (feature, stable, span) in self.extract(attrs) {\n+            self.collect_feature(feature, stable, span);\n+        }\n+    }\n+}\n+\n+impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LibFeatureCollector<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        self.collect_from_attrs(&item.attrs);\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n+        self.collect_from_attrs(&trait_item.attrs);\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n+        self.collect_from_attrs(&impl_item.attrs);\n+    }\n+}\n+\n+pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LibFeatures {\n+    let mut collector = LibFeatureCollector::new(tcx);\n+    for &cnum in tcx.crates().iter() {\n+        for &(feature, since) in tcx.defined_lib_features(cnum).iter() {\n+            collector.collect_feature(feature, since, DUMMY_SP);\n+        }\n+    }\n+    collector.collect_from_attrs(&tcx.hir.krate().attrs);\n+    tcx.hir.krate().visit_all_item_likes(&mut collector);\n+    for exported_macro in &tcx.hir.krate().exported_macros {\n+        collector.collect_from_attrs(&exported_macro.attrs);\n+    }\n+    collector.lib_features\n+}"}, {"sha": "0aa532fd9a46e9e5e6fd625af800902f0ead7154", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 66, "deletions": 33, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -18,12 +18,12 @@ use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n-use session::DiagnosticMessageId;\n+use session::{DiagnosticMessageId, Session};\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, MultiSpan};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n-use syntax::feature_gate::{GateIssue, emit_feature_err, find_lang_feature_accepted_version};\n+use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::attr::{self, Stability, Deprecation};\n use util::nodemap::{FxHashSet, FxHashMap};\n \n@@ -813,37 +813,70 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }\n \n-    let ref declared_lib_features = tcx.features().declared_lib_features;\n-    let mut remaining_lib_features: FxHashMap<Symbol, Span>\n-        = declared_lib_features.clone().into_iter().collect();\n-    remaining_lib_features.remove(&Symbol::intern(\"proc_macro\"));\n-\n-    for &(ref stable_lang_feature, span) in &tcx.features().declared_stable_lang_features {\n-        let version = find_lang_feature_accepted_version(&stable_lang_feature.as_str())\n-            .expect(\"unexpectedly couldn't find version feature was stabilized\");\n-        tcx.lint_node(lint::builtin::STABLE_FEATURES,\n-                      ast::CRATE_NODE_ID,\n-                      span,\n-                      &format_stable_since_msg(version));\n-    }\n-\n-    // FIXME(#44232) the `used_features` table no longer exists, so we don't\n-    //               lint about unknown or unused features. We should reenable\n-    //               this one day!\n-    //\n-    // let index = tcx.stability();\n-    // for (used_lib_feature, level) in &index.used_features {\n-    //     remaining_lib_features.remove(used_lib_feature);\n-    // }\n-    //\n-    // for &span in remaining_lib_features.values() {\n-    //     tcx.lint_node(lint::builtin::UNUSED_FEATURES,\n-    //                   ast::CRATE_NODE_ID,\n-    //                   span,\n-    //                   \"unused or unknown feature\");\n-    // }\n+    let declared_lang_features = &tcx.features().declared_lang_features;\n+    let mut lang_features = FxHashSet();\n+    for &(feature, span, since) in declared_lang_features {\n+        if let Some(since) = since {\n+            // Warn if the user has enabled an already-stable lang feature.\n+            unnecessary_stable_feature_lint(tcx, span, feature, since);\n+        }\n+        if lang_features.contains(&feature) {\n+            // Warn if the user enables a lang feature multiple times.\n+            duplicate_feature_err(tcx.sess, span, feature);\n+        }\n+        lang_features.insert(feature);\n+    }\n+\n+    let declared_lib_features = &tcx.features().declared_lib_features;\n+    let mut remaining_lib_features = FxHashMap();\n+    for (feature, span) in declared_lib_features {\n+        if remaining_lib_features.contains_key(&feature) {\n+            // Warn if the user enables a lib feature multiple times.\n+            duplicate_feature_err(tcx.sess, *span, *feature);\n+        }\n+        remaining_lib_features.insert(feature, span.clone());\n+    }\n+    // `stdbuild` has special handling for `libc`, so we need to\n+    // recognise the feature when building std.\n+    // Likewise, libtest is handled specially, so `test` isn't\n+    // available as we'd like it to be.\n+    // FIXME: only remove `libc` when `stdbuild` is active.\n+    // FIXME: remove special casing for `test`.\n+    remaining_lib_features.remove(&Symbol::intern(\"libc\"));\n+    remaining_lib_features.remove(&Symbol::intern(\"test\"));\n+\n+    for (feature, stable) in tcx.lib_features().to_vec() {\n+        if let Some(since) = stable {\n+            if let Some(span) = remaining_lib_features.get(&feature) {\n+                // Warn if the user has enabled an already-stable lib feature.\n+                unnecessary_stable_feature_lint(tcx, *span, feature, since);\n+            }\n+        }\n+        remaining_lib_features.remove(&feature);\n+    }\n+\n+    for (feature, span) in remaining_lib_features {\n+        struct_span_err!(tcx.sess, span, E0635, \"unknown feature `{}`\", feature).emit();\n+    }\n+\n+    // FIXME(#44232): the `used_features` table no longer exists, so we\n+    // don't lint about unused features. We should reenable this one day!\n+}\n+\n+fn unnecessary_stable_feature_lint<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    span: Span,\n+    feature: Symbol,\n+    since: Symbol\n+) {\n+    tcx.lint_node(lint::builtin::STABLE_FEATURES,\n+        ast::CRATE_NODE_ID,\n+        span,\n+        &format!(\"the feature `{}` has been stable since {} and no longer requires \\\n+                  an attribute to enable\", feature, since));\n }\n \n-fn format_stable_since_msg(version: &str) -> String {\n-    format!(\"this feature has been stable since {}. Attribute no longer needed\", version)\n+fn duplicate_feature_err(sess: &Session, span: Span, feature: Symbol) {\n+    struct_span_err!(sess, span, E0636, \"the feature `{}` has already been declared\", feature)\n+        .emit();\n }"}, {"sha": "bb14af29a7afe4d71bf4d6747c57296cc2d9c088", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -1192,6 +1192,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.sess.consider_optimizing(&cname, msg)\n     }\n \n+    pub fn lib_features(self) -> Lrc<middle::lib_features::LibFeatures> {\n+        self.get_lib_features(LOCAL_CRATE)\n+    }\n+\n     pub fn lang_items(self) -> Lrc<middle::lang_items::LanguageItems> {\n         self.get_lang_items(LOCAL_CRATE)\n     }\n@@ -2840,17 +2844,13 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n     };\n+    providers.get_lib_features = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        Lrc::new(middle::lib_features::collect(tcx))\n+    };\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n-        // FIXME(#42293) Right now we insert a `with_ignore` node in the dep\n-        // graph here to ignore the fact that `get_lang_items` below depends on\n-        // the entire crate.  For now this'll prevent false positives of\n-        // recompiling too much when anything changes.\n-        //\n-        // Once red/green incremental compilation lands we should be able to\n-        // remove this because while the crate changes often the lint level map\n-        // will change rarely.\n-        tcx.dep_graph.with_ignore(|| Lrc::new(middle::lang_items::collect(tcx)))\n+        Lrc::new(middle::lang_items::collect(tcx))\n     };\n     providers.freevars = |tcx, id| tcx.gcx.freevars.get(&id).cloned();\n     providers.maybe_unused_trait_import = |tcx, id| {"}, {"sha": "ecf35c1b0da391b7a24558f277f4ea327c1b1d27", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -626,6 +626,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::crate_name<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::get_lib_features<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"calculating the lib features map\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::defined_lib_features<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"calculating the lib features defined in a crate\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::get_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         \"calculating the lang items map\".to_string()"}, {"sha": "35080123d3e10ff20cee4331e24229b7e8e38666", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -24,6 +24,7 @@ use middle::reachable::ReachableSet;\n use middle::region;\n use middle::resolve_lifetime::{ResolveLifetimes, Region, ObjectLifetimeDefault};\n use middle::stability::{self, DeprecationEntry};\n+use middle::lib_features::LibFeatures;\n use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n use mir::interpret::ConstEvalResult;\n@@ -492,6 +493,9 @@ define_queries! { <'tcx>\n         [] fn item_children: ItemChildren(DefId) -> Lrc<Vec<Export>>,\n         [] fn extern_mod_stmt_cnum: ExternModStmtCnum(DefId) -> Option<CrateNum>,\n \n+        [] fn get_lib_features: get_lib_features_node(CrateNum) -> Lrc<LibFeatures>,\n+        [] fn defined_lib_features: DefinedLibFeatures(CrateNum)\n+            -> Lrc<Vec<(Symbol, Option<Symbol>)>>,\n         [] fn get_lang_items: get_lang_items_node(CrateNum) -> Lrc<LanguageItems>,\n         [] fn defined_lang_items: DefinedLangItems(CrateNum) -> Lrc<Vec<(DefId, usize)>>,\n         [] fn missing_lang_items: MissingLangItems(CrateNum) -> Lrc<Vec<LangItem>>,\n@@ -800,6 +804,10 @@ fn link_args_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::LinkArgs\n }\n \n+fn get_lib_features_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::GetLibFeatures\n+}\n+\n fn get_lang_items_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::GetLangItems\n }"}, {"sha": "f59e48cb35158070ca1dc4720935d12f519683a3", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -1218,6 +1218,8 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CrateName => { force!(crate_name, krate!()); }\n         DepKind::ItemChildren => { force!(item_children, def_id!()); }\n         DepKind::ExternModStmtCnum => { force!(extern_mod_stmt_cnum, def_id!()); }\n+        DepKind::GetLibFeatures => { force!(get_lib_features, LOCAL_CRATE); }\n+        DepKind::DefinedLibFeatures => { force!(defined_lib_features, krate!()); }\n         DepKind::GetLangItems => { force!(get_lang_items, LOCAL_CRATE); }\n         DepKind::DefinedLangItems => { force!(defined_lang_items, krate!()); }\n         DepKind::MissingLangItems => { force!(missing_lang_items, krate!()); }"}, {"sha": "c7e7465a353fea9db2865ea9ade4a02a6c277430", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -14,7 +14,6 @@\n \n #![allow(non_camel_case_types)]\n \n-#![feature(from_ref)]\n #![feature(quote)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "9599ccfe97964849b3f548804795eed8c5cd4fc6", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -23,7 +23,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(custom_attribute)]\n #![feature(extern_types)]\n-#![feature(fs_read_write)]\n #![feature(in_band_lifetimes)]\n #![allow(unused_attributes)]\n #![feature(libc)]"}, {"sha": "dd90cf7ae19e45bf246a9f2ca36a2001fd152ef6", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -20,7 +20,6 @@\n       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![feature(collections_range)]\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]\n #![feature(unsize)]"}, {"sha": "73886e5e2816caa695539b3dc044780667e05efc", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -14,7 +14,6 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![feature(fs_read_write)]\n #![feature(specialization)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "75d16232a37e099cdf0bb505556d708ae9dba945", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -342,7 +342,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_renamed(\"bare_trait_object\", \"bare_trait_objects\");\n     store.register_renamed(\"unstable_name_collision\", \"unstable_name_collisions\");\n     store.register_renamed(\"unused_doc_comment\", \"unused_doc_comments\");\n-    store.register_renamed(\"unknown_features\", \"unused_features\");\n+    store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");\n     store.register_removed(\"raw_pointer_derive\", \"using derive with raw pointers is ok\");"}, {"sha": "060dddd5343885d60119a5c7aec7d49720448633", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -240,6 +240,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         cdata.each_child_of_item(def_id.index, |child| result.push(child), tcx.sess);\n         Lrc::new(result)\n     }\n+    defined_lib_features => { Lrc::new(cdata.get_lib_features()) }\n     defined_lang_items => { Lrc::new(cdata.get_lang_items()) }\n     missing_lang_items => { Lrc::new(cdata.get_missing_lang_items()) }\n "}, {"sha": "45a61ec33085d2345e1fde4d47ce1fc1b3688a4f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -645,6 +645,14 @@ impl<'a, 'tcx> CrateMetadata {\n         self.get_impl_data(id).trait_ref.map(|tr| tr.decode((self, tcx)))\n     }\n \n+    /// Iterates over all the stability attributes in the given crate.\n+    pub fn get_lib_features(&self) -> Vec<(ast::Name, Option<ast::Name>)> {\n+        self.root\n+            .lib_features\n+            .decode(self)\n+            .collect()\n+    }\n+\n     /// Iterates over the language items in the given crate.\n     pub fn get_lang_items(&self) -> Vec<(DefId, usize)> {\n         self.root"}, {"sha": "96d6c5b75f49e677b475ea161dc9b43f5275bde1", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -394,6 +394,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ());\n         let dep_bytes = self.position() - i;\n \n+        // Encode the lib features.\n+        i = self.position();\n+        let lib_features = self.tracked(IsolatedEncoder::encode_lib_features, ());\n+        let lib_feature_bytes = self.position() - i;\n+\n         // Encode the language items.\n         i = self.position();\n         let lang_items = self.tracked(IsolatedEncoder::encode_lang_items, ());\n@@ -513,6 +518,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n             crate_deps,\n             dylib_dependency_formats,\n+            lib_features,\n             lang_items,\n             lang_items_missing,\n             native_libraries,\n@@ -537,6 +543,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n             println!(\"metadata stats:\");\n             println!(\"             dep bytes: {}\", dep_bytes);\n+            println!(\"     lib feature bytes: {}\", lib_feature_bytes);\n             println!(\"       lang item bytes: {}\", lang_item_bytes);\n             println!(\"          native bytes: {}\", native_lib_bytes);\n             println!(\"         codemap bytes: {}\", codemap_bytes);\n@@ -1456,6 +1463,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         self.lazy_seq_ref(deps.iter().map(|&(_, ref dep)| dep))\n     }\n \n+    fn encode_lib_features(&mut self, _: ()) -> LazySeq<(ast::Name, Option<ast::Name>)> {\n+        let tcx = self.tcx;\n+        let lib_features = tcx.lib_features();\n+        self.lazy_seq(lib_features.to_vec())\n+    }\n+\n     fn encode_lang_items(&mut self, _: ()) -> LazySeq<(DefIndex, usize)> {\n         let tcx = self.tcx;\n         let lang_items = tcx.lang_items();"}, {"sha": "98946ad6081eba20f49ed9fc56cc070b07be7287", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,7 +13,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_patterns)]\n-#![feature(fs_read_write)]\n #![feature(libc)]\n #![feature(macro_at_most_once_rep)]\n #![feature(proc_macro_internals)]"}, {"sha": "894c7cbf683dcae2d1ecddf009d09b9ec55ce23c", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -198,6 +198,7 @@ pub struct CrateRoot {\n \n     pub crate_deps: LazySeq<CrateDep>,\n     pub dylib_dependency_formats: LazySeq<Option<LinkagePreference>>,\n+    pub lib_features: LazySeq<(Symbol, Option<Symbol>)>,\n     pub lang_items: LazySeq<(DefIndex, usize)>,\n     pub lang_items_missing: LazySeq<lang_items::LangItem>,\n     pub native_libraries: LazySeq<NativeLibrary>,"}, {"sha": "05c843096d27d1f2655f219eb3fc26696a789d6e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -18,21 +18,17 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(in_band_lifetimes)]\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n-#![feature(from_ref)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(catch_expr)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]\n-#![feature(fs_read_write)]\n-#![feature(in_band_lifetimes)]\n #![feature(macro_vis_matcher)]\n #![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(crate_visibility_modifier)]\n #![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]"}, {"sha": "af2697f62f79eee60fce18b12ba9cb7a3514ee73", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -23,8 +23,6 @@\n \n #![feature(box_syntax)]\n #![feature(const_fn)]\n-#![feature(fs_read_write)]\n-#![feature(inclusive_range)]\n #![feature(slice_patterns)]\n \n #[macro_use]"}, {"sha": "ecc167d5a196776c77214d05298198bdc03ca6e7", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -74,7 +74,6 @@ This API is completely unstable and subject to change.\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(from_ref)]\n #![feature(exhaustive_patterns)]\n #![feature(iterator_find_map)]\n #![feature(quote)]"}, {"sha": "78ecfd13e2f96bdf647cd7ef7e6403d15b3ec2c3", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,17 +13,14 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\")]\n \n-#![feature(ascii_ctype)]\n #![feature(rustc_private)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(fs_read_write)]\n #![feature(iterator_find_map)]\n #![feature(set_stdio)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(test)]\n #![feature(vec_remove_item)]\n-#![feature(entry_and_modify)]\n #![feature(ptr_offset_from)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]"}, {"sha": "2f18719b9eb0dc349a3dfcae8eac9a8204dfa5a2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -232,6 +232,7 @@\n \n // std is implemented with unstable features, many of which are internal\n // compiler details that will never be stable\n+#![cfg_attr(test, feature(test, update_panic_count))]\n #![feature(alloc)]\n #![feature(alloc_error_handler)]\n #![feature(alloc_system)]\n@@ -242,33 +243,27 @@\n #![feature(align_offset)]\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n-#![feature(ascii_ctype)]\n #![feature(asm)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(cfg_target_vendor)]\n #![feature(char_error_internals)]\n-#![feature(char_internals)]\n-#![feature(collections_range)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(external_doc)]\n-#![feature(fs_read_write)]\n #![feature(fixed_size_array)]\n-#![feature(float_from_str_radix)]\n #![feature(fn_traits)]\n #![feature(fnbox)]\n #![feature(futures_api)]\n #![feature(generator_trait)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n #![feature(integer_atomics)]\n-#![feature(into_cow)]\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(link_args)]\n@@ -277,34 +272,25 @@\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n-#![feature(num_bits_bytes)]\n-#![feature(old_wrapping)]\n #![feature(on_unimplemented)]\n-#![feature(oom)]\n #![feature(optin_builtin_traits)]\n #![feature(panic_internals)]\n #![feature(panic_unwind)]\n-#![feature(peek)]\n #![feature(pin)]\n-#![feature(placement_new_protocol)]\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n-#![feature(rand)]\n #![feature(raw)]\n #![feature(rustc_attrs)]\n #![feature(std_internals)]\n #![feature(stdsimd)]\n #![feature(shrink_to)]\n-#![feature(slice_bytes)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(stmt_expr_attributes)]\n-#![feature(str_char)]\n #![feature(str_internals)]\n-#![feature(str_utf16)]\n-#![feature(test, rustc_private)]\n+#![feature(rustc_private)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n #![feature(try_from)]\n@@ -313,15 +299,12 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(use_extern_macros)]\n-#![feature(vec_push_all)]\n #![feature(doc_cfg)]\n #![feature(doc_masked)]\n #![feature(doc_spotlight)]\n-#![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(used))]\n #![feature(doc_alias)]\n #![feature(doc_keyword)]\n-#![feature(float_internals)]\n #![feature(panic_info_message)]\n #![feature(panic_implementation)]\n "}, {"sha": "15abad555f4b65c05dde873d7458f0e072356635", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -374,6 +374,20 @@ and likely to change in the future.\n \n \"##,\n \n+E0705: r##\"\n+A `#![feature]` attribute was declared for a feature that is stable in\n+the current edition.\n+\n+Erroneous code example:\n+\n+```ignore (limited to a warning during 2018 edition development)\n+#![feature(rust_2018_preview)]\n+#![feature(raw_identifiers)] // error: the feature `raw_identifiers` is\n+                             // included in the Rust 2018 edition\n+```\n+\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "193e560893f37455e45f055e77bb9a28912d0842", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -25,6 +25,7 @@\n use self::AttributeType::*;\n use self::AttributeGate::*;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n@@ -59,8 +60,8 @@ macro_rules! declare_features {\n         /// A set of features to be used by later passes.\n         #[derive(Clone)]\n         pub struct Features {\n-            /// `#![feature]` attrs for stable language features, for error reporting\n-            pub declared_stable_lang_features: Vec<(Symbol, Span)>,\n+            /// `#![feature]` attrs for language features, for error reporting\n+            pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n             /// `#![feature]` attrs for non-language (library) features\n             pub declared_lib_features: Vec<(Symbol, Span)>,\n             $(pub $feature: bool),+\n@@ -69,7 +70,7 @@ macro_rules! declare_features {\n         impl Features {\n             pub fn new() -> Features {\n                 Features {\n-                    declared_stable_lang_features: Vec::new(),\n+                    declared_lang_features: Vec::new(),\n                     declared_lib_features: Vec::new(),\n                     $($feature: false),+\n                 }\n@@ -140,7 +141,6 @@ declare_features! (\n     (active, linkage, \"1.0.0\", Some(29603), None),\n     (active, quote, \"1.0.0\", Some(29601), None),\n \n-\n     // rustc internal\n     (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n     (active, rustc_const_unstable, \"1.0.0\", None, None),\n@@ -322,7 +322,6 @@ declare_features! (\n     // `extern \"x86-interrupt\" fn()`\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n-\n     // Allows the `catch {...}` expression\n     (active, catch_expr, \"1.17.0\", Some(31436), Some(Edition::Edition2018)),\n \n@@ -1220,10 +1219,6 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n     cx.check_attribute(attr, true);\n }\n \n-pub fn find_lang_feature_accepted_version(feature: &str) -> Option<&'static str> {\n-    ACCEPTED_FEATURES.iter().find(|t| t.0 == feature).map(|t| t.1)\n-}\n-\n fn find_lang_feature_issue(feature: &str) -> Option<u32> {\n     if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.0 == feature) {\n         let issue = info.2;\n@@ -1906,10 +1901,13 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n \n     let mut feature_checker = FeatureChecker::default();\n \n-    for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+    let mut edition_enabled_features = FxHashMap();\n+\n+    for &(name, .., f_edition, set) in ACTIVE_FEATURES.iter() {\n         if let Some(f_edition) = f_edition {\n             if f_edition <= crate_edition {\n                 set(&mut features, DUMMY_SP);\n+                edition_enabled_features.insert(Symbol::intern(name), crate_edition);\n             }\n         }\n     }\n@@ -1937,42 +1935,56 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 continue\n             };\n \n-            if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n-                set(&mut features, mi.span);\n-                feature_checker.collect(&features, mi.span);\n-                continue\n-            }\n-\n-            let removed = REMOVED_FEATURES.iter().find(|f| name == f.0);\n-            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.0);\n-            if let Some((.., reason)) = removed.or(stable_removed) {\n-                feature_removed(span_handler, mi.span, *reason);\n-                continue\n-            }\n-\n-            if ACCEPTED_FEATURES.iter().any(|f| name == f.0) {\n-                features.declared_stable_lang_features.push((name, mi.span));\n-                continue\n-            }\n-\n             if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n                 if *edition <= crate_edition {\n                     continue\n                 }\n \n-                for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+                for &(name, .., f_edition, set) in ACTIVE_FEATURES.iter() {\n                     if let Some(f_edition) = f_edition {\n-                        if *edition >= f_edition {\n+                        if f_edition <= *edition {\n                             // FIXME(Manishearth) there is currently no way to set\n                             // lib features by edition\n                             set(&mut features, DUMMY_SP);\n+                            edition_enabled_features.insert(Symbol::intern(name), *edition);\n                         }\n                     }\n                 }\n \n                 continue\n             }\n \n+            if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n+                if let Some(edition) = edition_enabled_features.get(&name) {\n+                    struct_span_warn!(\n+                        span_handler,\n+                        mi.span,\n+                        E0705,\n+                        \"the feature `{}` is included in the Rust {} edition\",\n+                        name,\n+                        edition,\n+                    ).emit();\n+                } else {\n+                    set(&mut features, mi.span);\n+                    feature_checker.collect(&features, mi.span);\n+                    features.declared_lang_features.push((name, mi.span, None));\n+                }\n+                continue\n+            }\n+\n+            let removed = REMOVED_FEATURES.iter().find(|f| name == f.0);\n+            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.0);\n+            if let Some((.., reason)) = removed.or(stable_removed) {\n+                feature_removed(span_handler, mi.span, *reason);\n+                continue\n+            }\n+\n+            if let Some((_, since, ..)) = ACCEPTED_FEATURES.iter().find(|f| name == f.0) {\n+                let since = Some(Symbol::intern(since));\n+                features.declared_lang_features.push((name, mi.span, since));\n+                continue\n+            }\n+\n             features.declared_lib_features.push((name, mi.span));\n         }\n     }"}, {"sha": "c8e60620248b3c9205304b630171dc70720d2d69", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -19,7 +19,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(deny(warnings))))]\n \n-#![feature(const_atomic_usize_new)]\n #![feature(crate_visibility_modifier)]\n #![feature(macro_at_most_once_rep)]\n #![feature(rustc_attrs)]"}, {"sha": "eedc1e745e270c15d883ce060277aac5f767e734", "filename": "src/test/compile-fail-fulldeps/auxiliary/pub_and_stability.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -36,16 +36,16 @@\n \n #![feature(staged_api)]\n \n-#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+#![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n-#[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+#[stable(feature = \"unit_test\", since = \"1.0.0\")]\n pub use m::{Record, Trait, Tuple};\n \n mod m {\n     #[derive(Default)]\n-    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     pub struct Record {\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         pub a_stable_pub: i32,\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         pub a_unstable_declared_pub: i32,\n@@ -55,14 +55,14 @@ mod m {\n         pub(crate) b_crate: i32,\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n         pub(in m) c_mod: i32,\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")] // SILLY\n         d_priv: i32\n     }\n \n     #[derive(Default)]\n     #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     pub struct Tuple(\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         pub i32,\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         pub i32,\n@@ -84,27 +84,27 @@ mod m {\n     }\n \n \n-    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     pub trait Trait {\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         type Type;\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         fn stable_trait_method(&self) -> Self::Type;\n         #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n         fn unstable_undeclared_trait_method(&self) -> Self::Type;\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         fn unstable_declared_trait_method(&self) -> Self::Type;\n     }\n \n-    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     impl Trait for Record {\n         type Type = i32;\n         fn stable_trait_method(&self) -> i32 { self.d_priv }\n         fn unstable_undeclared_trait_method(&self) -> i32 { self.d_priv }\n         fn unstable_declared_trait_method(&self) -> i32 { self.d_priv }\n     }\n \n-    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n     impl Trait for Tuple {\n         type Type = i32;\n         fn stable_trait_method(&self) -> i32 { self.3 }\n@@ -117,14 +117,14 @@ mod m {\n         pub fn unstable_undeclared(&self) -> i32 { self.d_priv }\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         pub fn unstable_declared(&self) -> i32 { self.d_priv }\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         pub fn stable(&self) -> i32 { self.d_priv }\n \n         #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")] // SILLY\n         pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n         pub(in m) fn pub_mod(&self) -> i32 { self.d_priv }\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")] // SILLY\n         fn private(&self) -> i32 { self.d_priv }\n     }\n \n@@ -133,7 +133,7 @@ mod m {\n         pub fn unstable_undeclared(&self) -> i32 { self.0 }\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n         pub fn unstable_declared(&self) -> i32 { self.0 }\n-        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n         pub fn stable(&self) -> i32 { self.0 }\n \n         pub(crate) fn pub_crate(&self) -> i32 { self.0 }"}, {"sha": "f690cbd029d5fc59ff81f2a484111a1e5ca9b471", "filename": "src/test/compile-fail/auxiliary/inherited_stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Finherited_stability.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n #![crate_name=\"inherited_stability\"]\n #![crate_type = \"lib\"]\n-#![unstable(feature = \"test_feature\", issue = \"0\")]\n+#![unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n #![feature(staged_api)]\n \n pub fn unstable() {}\n@@ -19,16 +19,16 @@ pub fn stable() {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod stable_mod {\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub fn unstable() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn stable() {}\n }\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub mod unstable_mod {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n \n@@ -37,7 +37,7 @@ pub mod unstable_mod {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Stable {\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     fn unstable(&self);\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "6ba66f3e45fece9f5e7e0eec334526d6ac6278fe", "filename": "src/test/compile-fail/auxiliary/lint_output_format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_output_format.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,20 +11,20 @@\n #![crate_name=\"lint_output_format\"]\n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n-#![unstable(feature = \"test_feature\", issue = \"0\")]\n+#![unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn foo() -> usize {\n     20\n }\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub fn bar() -> usize {\n     40\n }\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub fn baz() -> usize {\n     30\n }"}, {"sha": "5547458abbef8e1a8fd281adc66f9751af639e02", "filename": "src/test/compile-fail/auxiliary/lint_stability.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -14,27 +14,27 @@\n #![feature(associated_type_defaults)]\n #![stable(feature = \"lint_stability\", since = \"1.0.0\")]\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated() {}\n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_text() {}\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"99.99.99\", reason = \"text\")]\n pub fn deprecated_future() {}\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable() {}\n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable_text() {}\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub fn unstable() {}\n-#[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n pub fn unstable_text() {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -46,23 +46,23 @@ pub fn stable_text() {}\n pub struct MethodTester;\n \n impl MethodTester {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated(&self) {}\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_text(&self) {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable(&self) {}\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable_text(&self) {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub fn method_unstable(&self) {}\n-    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n     pub fn method_unstable_text(&self) {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -71,25 +71,25 @@ impl MethodTester {\n     pub fn method_stable_text(&self) {}\n }\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub trait Trait {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated(&self) {}\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_text(&self) {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable(&self) {}\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable_text(&self) {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     fn trait_unstable(&self) {}\n-    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n     fn trait_unstable_text(&self) {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -98,100 +98,100 @@ pub trait Trait {\n     fn trait_stable_text(&self) {}\n }\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub trait TraitWithAssociatedTypes {\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     type TypeUnstable = u8;\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     type TypeDeprecated = u8;\n }\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n impl Trait for MethodTester {}\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub trait UnstableTrait { fn dummy(&self) { } }\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub trait DeprecatedTrait {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")] fn dummy(&self) { }\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] fn dummy(&self) { }\n }\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedStruct {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableStruct {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub struct UnstableStruct {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableStruct {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")] pub i: isize\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub enum UnstableEnum {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum StableEnum {}\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnitStruct;\n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableUnitStruct;\n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub struct UnstableUnitStruct;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableUnitStruct;\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub enum Enum {\n-    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     DeprecatedVariant,\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     DeprecatedUnstableVariant,\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     UnstableVariant,\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     StableVariant,\n }\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! macro_test {\n     () => (deprecated());\n }\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! macro_test_arg {\n     ($func:expr) => ($func);\n }\n \n-#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! macro_test_arg_nested {\n     ($func:ident) => (macro_test_arg!($func()));"}, {"sha": "6b79c36fc0587ea9c663edcf0a458eef5e47e314", "filename": "src/test/compile-fail/auxiliary/lint_stability_fields.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_stability_fields.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -15,47 +15,47 @@\n pub struct Stable {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub inherit: u8, // it's a lie (stable doesn't inherit)\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub override1: u8,\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub override2: u8,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stable2(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                   #[unstable(feature = \"test_feature\", issue = \"0\")] pub u8,\n-                   #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                   #[unstable(feature = \"unstable_test_feature\", issue = \"0\")] pub u8,\n+                   #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n                    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub struct Unstable {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub override1: u8,\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub override2: u8,\n }\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub struct Unstable2(pub u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                     #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                     #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n                      #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct Deprecated {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub override1: u8,\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub override2: u8,\n }\n \n-#[unstable(feature = \"test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct Deprecated2(pub u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                       #[unstable(feature = \"test_feature\", issue = \"0\")] pub u8);\n+                       #[unstable(feature = \"unstable_test_feature\", issue = \"0\")] pub u8);"}, {"sha": "1ee623c34fb48d9cd6333de6074da3e33b45b38e", "filename": "src/test/compile-fail/auxiliary/stability_attribute_issue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstability_attribute_issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstability_attribute_issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstability_attribute_issue.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n #![feature(staged_api)]\n-#![stable(feature = \"foo\", since = \"1.2.0\")]\n+#![stable(feature = \"stable_test_feature\", since = \"1.2.0\")]\n \n \n-#[unstable(feature = \"foo\", issue = \"1\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"1\")]\n pub fn unstable() {}\n \n-#[unstable(feature = \"foo\", reason = \"message\", issue = \"2\")]\n+#[unstable(feature = \"unstable_test_feature\", reason = \"message\", issue = \"2\")]\n pub fn unstable_msg() {}"}, {"sha": "a59f4b4e8f44b9760b72452564435acd3a4f6f6b", "filename": "src/test/compile-fail/auxiliary/stability_cfg2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstability_cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstability_cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstability_cfg2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,6 +10,6 @@\n \n // compile-flags:--cfg foo\n \n-#![cfg_attr(foo, unstable(feature = \"test_feature\", issue = \"0\"))]\n+#![cfg_attr(foo, unstable(feature = \"unstable_test_feature\", issue = \"0\"))]\n #![cfg_attr(not(foo), stable(feature = \"test_feature\", since = \"1.0.0\"))]\n #![feature(staged_api)]"}, {"sha": "836164a721a4603a1015adf2616a51ee710976b8", "filename": "src/test/compile-fail/auxiliary/unstable-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(staged_api)]\n-#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+#![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n #[macro_export]"}, {"sha": "5c6facbf01436ad6abf05e175638236c49a83ace", "filename": "src/test/compile-fail/deprecation-in-staged-api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fdeprecation-in-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fdeprecation-in-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecation-in-staged-api.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(staged_api)]\n \n-#![stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n \n #[deprecated]\n fn main() { } //~ERROR `#[deprecated]` cannot be used in staged api"}, {"sha": "b10a0a60f1471598562f94b9b4a1e9a53aec50b6", "filename": "src/test/compile-fail/enable-unstable-lib-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenable-unstable-lib-feature.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,7 @@\n \n // aux-build:stability_cfg2.rs\n \n-#![feature(test_feature)]\n+#![feature(unstable_test_feature)]\n #![deny(non_snake_case)] // To trigger a hard error\n \n // Shouldn't generate a warning about unstable features"}, {"sha": "0f6b9d1b5dc4fc5a6c6a893b440090b02b267f57", "filename": "src/test/compile-fail/issue-28075.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28075.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -16,7 +16,8 @@\n \n extern crate lint_stability;\n \n-use lint_stability::{unstable, deprecated}; //~ ERROR use of unstable library feature 'test_feature'\n+use lint_stability::{unstable, deprecated};\n+//~^ ERROR use of unstable library feature 'unstable_test_feature'\n \n fn main() {\n }"}, {"sha": "12e3457ef9e34c0b5817a34a7ee98dccd0178710", "filename": "src/test/compile-fail/issue-28388-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28388-3.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -14,7 +14,8 @@\n \n extern crate lint_stability;\n \n-use lint_stability::UnstableEnum::{}; //~ ERROR use of unstable library feature 'test_feature'\n+use lint_stability::UnstableEnum::{};\n+//~^ ERROR use of unstable library feature 'unstable_test_feature'\n use lint_stability::StableEnum::{}; // OK\n \n fn main() {}"}, {"sha": "f6b94e89826329a5dfd9067788ec1b9ae6fb6217", "filename": "src/test/compile-fail/lint-renamed-allow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-renamed-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-renamed-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-renamed-allow.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,6 +13,6 @@\n \n #![allow(renamed_and_removed_lints)]\n \n-#[deny(unknown_features)]\n+#[deny(single_use_lifetime)]\n #[deny(unused)]\n fn main() { let unused = (); } //~ ERROR unused"}, {"sha": "f5abf2733b97793c28e64d8229daaf30f565cd5f", "filename": "src/test/compile-fail/lint-renamed-cmdline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-renamed-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-renamed-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-renamed-cmdline.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-D unknown_features\n+// compile-flags:-D bare_trait_object\n \n-// error-pattern:lint `unknown_features` has been renamed to `unused_features`\n-// error-pattern:requested on the command line with `-D unknown_features`\n+// error-pattern:lint `bare_trait_object` has been renamed to `bare_trait_objects`\n+// error-pattern:requested on the command line with `-D bare_trait_object`\n // error-pattern:unused\n \n #[deny(unused)]"}, {"sha": "c147ec5cf95052dd35e7e99e5ded2148b9f1bb4d", "filename": "src/test/compile-fail/lint-renamed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-renamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-renamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-renamed.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unknown_features)] //~ WARN lint `unknown_features` has been renamed to `unused_features`\n+#[deny(bare_trait_object)]\n+//~^ WARN lint `bare_trait_object` has been renamed to `bare_trait_objects`\n #[deny(unused)]\n fn main() { let unused = (); } //~ ERROR unused"}, {"sha": "1f2fa077cafc8292a6d82590091d7e2739c28cce", "filename": "src/test/compile-fail/lint-stability-2.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -76,15 +76,15 @@ mod cross_crate {\n         <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n \n         foo.method_unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         Foo::method_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         <Foo>::method_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         foo.trait_unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         <Foo>::trait_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n \n         stable();\n         foo.method_stable();\n@@ -149,9 +149,9 @@ mod cross_crate {\n         foo.trait_unstable(); //~ ERROR use of unstable library feature\n         <Foo>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n         foo.trait_unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         <Foo>::trait_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         foo.trait_stable();\n         Trait::trait_stable(&foo);\n         <Foo>::trait_stable(&foo);\n@@ -167,7 +167,7 @@ mod cross_crate {\n         //~^ ERROR use of unstable library feature\n         foo.trait_unstable(); //~ ERROR use of unstable library feature\n         foo.trait_unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         foo.trait_stable();\n     }\n \n@@ -178,16 +178,16 @@ mod cross_crate {\n }\n \n mod this_crate {\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub fn unstable() {}\n-    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n     pub fn unstable_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -199,16 +199,16 @@ mod this_crate {\n     pub struct MethodTester;\n \n     impl MethodTester {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated(&self) {}\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         pub fn method_unstable(&self) {}\n-        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n         pub fn method_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -218,16 +218,16 @@ mod this_crate {\n     }\n \n     pub trait Trait {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated(&self) {}\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         fn trait_unstable(&self) {}\n-        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n         fn trait_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -238,43 +238,43 @@ mod this_crate {\n \n     impl Trait for MethodTester {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedUnitStruct;\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableUnitStruct;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableUnitStruct;\n \n     pub enum Enum {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         DeprecatedVariant,\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         UnstableVariant,\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         StableVariant,\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableTupleStruct(isize);\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableTupleStruct(isize);\n@@ -391,23 +391,23 @@ mod this_crate {\n         foo.trait_stable();\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body();\n     }\n \n     impl MethodTester {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body();\n         }\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }"}, {"sha": "de2c27bdcbcca690fc1c03337780db68b29566ce", "filename": "src/test/compile-fail/lint-stability-deprecated.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -16,7 +16,7 @@\n \n #![warn(deprecated)]\n #![allow(dead_code, unused_extern_crates)]\n-#![feature(staged_api, test_feature, rustc_attrs)]\n+#![feature(staged_api, unstable_test_feature, rustc_attrs)]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -227,16 +227,16 @@ mod inheritance {\n }\n \n mod this_crate {\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub fn unstable() {}\n-    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n     pub fn unstable_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -248,16 +248,16 @@ mod this_crate {\n     pub struct MethodTester;\n \n     impl MethodTester {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated(&self) {}\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         pub fn method_unstable(&self) {}\n-        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n         pub fn method_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -267,16 +267,16 @@ mod this_crate {\n     }\n \n     pub trait Trait {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated(&self) {}\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         fn trait_unstable(&self) {}\n-        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n         fn trait_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -287,43 +287,43 @@ mod this_crate {\n \n     impl Trait for MethodTester {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedUnitStruct;\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableUnitStruct;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableUnitStruct;\n \n     pub enum Enum {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         DeprecatedVariant,\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         UnstableVariant,\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         StableVariant,\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableTupleStruct(isize);\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableTupleStruct(isize);\n@@ -441,23 +441,23 @@ mod this_crate {\n         foo.trait_stable();\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body(); //~ WARN use of deprecated item 'this_crate::test_fn_body::fn_in_body': text\n     }\n \n     impl MethodTester {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body(); //~ WARN use of deprecated item 'this_crate::MethodTester::test_method_body::fn_in_body': text\n         }\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }"}, {"sha": "0ad4466d0e271142071cae0b9a1dbf9ab4ffe289", "filename": "src/test/compile-fail/lint-stability-fields-deprecated.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability-fields-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability-fields-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields-deprecated.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n // aux-build:lint_stability_fields.rs\n+\n #![deny(deprecated)]\n #![allow(dead_code)]\n-#![feature(staged_api, test_feature)]\n+#![feature(staged_api, unstable_test_feature)]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -162,50 +163,50 @@ mod this_crate {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable {\n         inherit: u8,\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         override1: u8,\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable2(u8,\n                    #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                   #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                   #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n                    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     struct Unstable {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     struct Unstable2(u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                     #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                     #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n                      #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated2(u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                       #[unstable(feature = \"test_feature\", issue = \"0\")] u8);\n+                       #[unstable(feature = \"unstable_test_feature\", issue = \"0\")] u8);\n \n     pub fn foo() {\n         let x = Stable {"}, {"sha": "db6b64dabfe4b446dc4eabc897e23c2c63f7d254", "filename": "src/test/compile-fail/lint-stability-fields.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -138,50 +138,50 @@ mod this_crate {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable {\n         inherit: u8,\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         override1: u8,\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable2(u8,\n                    #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                   #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                   #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n                    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     struct Unstable {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     struct Unstable2(u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                     #[unstable(feature = \"test_feature\", issue = \"0\")]\n+                     #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n                      #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated2(u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                       #[unstable(feature = \"test_feature\", issue = \"0\")] u8);\n+                       #[unstable(feature = \"unstable_test_feature\", issue = \"0\")] u8);\n \n     pub fn foo() {\n         let x = Stable {"}, {"sha": "720b1235d47f684c45d5bfe307ce99816a94e7f7", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -71,11 +71,11 @@ mod cross_crate {\n         <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n \n         unstable_text();\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         Trait::trait_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         <Foo as Trait>::trait_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n \n         stable();\n         foo.method_stable();\n@@ -162,9 +162,9 @@ mod cross_crate {\n         Trait::trait_unstable(&foo); //~ ERROR use of unstable library feature\n         <Foo as Trait>::trait_unstable(&foo); //~ ERROR use of unstable library feature\n         Trait::trait_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         <Foo as Trait>::trait_unstable_text(&foo);\n-        //~^ ERROR use of unstable library feature 'test_feature': text\n+        //~^ ERROR use of unstable library feature 'unstable_test_feature': text\n         foo.trait_stable();\n         Trait::trait_stable(&foo);\n         <Foo>::trait_stable(&foo);\n@@ -213,20 +213,20 @@ mod inheritance {\n }\n \n mod this_crate {\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"99.99.99\", reason = \"text\")]\n     pub fn deprecated_future() {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub fn unstable() {}\n-    #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n     pub fn unstable_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -238,16 +238,16 @@ mod this_crate {\n     pub struct MethodTester;\n \n     impl MethodTester {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated(&self) {}\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         pub fn method_unstable(&self) {}\n-        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n         pub fn method_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -257,16 +257,16 @@ mod this_crate {\n     }\n \n     pub trait Trait {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated(&self) {}\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         fn trait_unstable(&self) {}\n-        #[unstable(feature = \"test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n         fn trait_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -277,43 +277,43 @@ mod this_crate {\n \n     impl Trait for MethodTester {}\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableStruct {\n-        #[stable(feature = \"test_feature\", since = \"1.0.0\")] i: isize\n+        #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedUnitStruct;\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableUnitStruct;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableUnitStruct;\n \n     pub enum Enum {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         DeprecatedVariant,\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         UnstableVariant,\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         StableVariant,\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     pub struct UnstableTupleStruct(isize);\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableTupleStruct(isize);\n@@ -432,23 +432,23 @@ mod this_crate {\n         foo.trait_stable();\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body();\n     }\n \n     impl MethodTester {\n-        #[unstable(feature = \"test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body();\n         }\n     }\n \n-    #[unstable(feature = \"test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }"}, {"sha": "5a0568f05e6e154fd28fabed515b688736a41ac4", "filename": "src/test/compile-fail/lint-unknown-feature-default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature-default.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,9 @@\n \n // Tests the default for the unused_features lint\n \n+#![allow(stable_features)]\n // FIXME(#44232) we should warn that this isn't used.\n-#![feature(this_is_not_a_feature)]\n+#![feature(rust1)]\n \n #![feature(rustc_attrs)]\n "}, {"sha": "81f99f9949284b0823069c292d1b819da44a926a", "filename": "src/test/compile-fail/lint-unknown-feature.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,9 @@\n \n #![warn(unused_features)]\n \n+#![allow(stable_features)]\n // FIXME(#44232) we should warn that this isn't used.\n-#![feature(this_is_not_a_feature)]\n+#![feature(rust1)]\n \n #![feature(rustc_attrs)]\n "}, {"sha": "1922efb5e19dc379b04b7e3a455bcda7ff0eef61", "filename": "src/test/compile-fail/missing-stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,20 +13,20 @@\n #![crate_type=\"lib\"]\n #![feature(staged_api)]\n \n-#![stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n \n pub fn unmarked() {\n     //~^ ERROR This node does not have a stability attribute\n     ()\n }\n \n-#[unstable(feature = \"foo\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n pub mod foo {\n     // #[unstable] is inherited\n     pub fn unmarked() {}\n }\n \n-#[stable(feature = \"bar\", since=\"1.0.0\")]\n+#[stable(feature = \"stable_test_feature\", since=\"1.0.0\")]\n pub mod bar {\n     // #[stable] is not inherited\n     pub fn unmarked() {}"}, {"sha": "826bf675bd699899da0638a33c1b7b8edd8ba420", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(extern_absolute_paths)]\n-\n use xcrate::S; //~ ERROR can't find crate for `xcrate`\n \n fn main() {}"}, {"sha": "053bf92f4d196a2aa0108d5062a397a4ff995ea5", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(extern_absolute_paths)]\n-\n fn main() {\n     let s = ::xcrate::S; //~ ERROR can't find crate for `xcrate`\n }"}, {"sha": "1b9e5a75e83071f82bc8f0bccc067d6f85bf030d", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(extern_absolute_paths)]\n-\n use ycrate; //~ ERROR can't find crate for `ycrate`\n \n fn main() {}"}, {"sha": "e9de0f01b30d92924fd6cbe0ada6c21dd93c40f8", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/single-segment.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,9 +11,6 @@\n // aux-build:xcrate.rs\n // edition:2018\n \n-#![feature(crate_in_paths)]\n-#![feature(extern_absolute_paths)]\n-\n use crate; //~ ERROR unresolved import `crate`\n            //~^ NOTE crate root imports need to be explicitly named: `use crate as name;`\n use *; //~ ERROR unresolved import `*`"}, {"sha": "754c6f792f95dc5e594e14cb584735683243c3db", "filename": "src/test/compile-fail/stability-attribute-issue.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstability-attribute-issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstability-attribute-issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-issue.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,13 +9,16 @@\n // except according to those terms.\n \n // aux-build:stability_attribute_issue.rs\n+// ignore-tidy-linelength\n \n #![deny(deprecated)]\n \n extern crate stability_attribute_issue;\n use stability_attribute_issue::*;\n \n fn main() {\n-    unstable(); //~ ERROR use of unstable library feature 'foo' (see issue #1)\n-    unstable_msg(); //~ ERROR use of unstable library feature 'foo': message (see issue #2)\n+    unstable();\n+    //~^ ERROR use of unstable library feature 'unstable_test_feature' (see issue #1)\n+    unstable_msg();\n+    //~^ ERROR use of unstable library feature 'unstable_test_feature': message (see issue #2)\n }"}, {"sha": "9c54315bfd0045a55eea0d09b606beb35de0cee9", "filename": "src/test/compile-fail/stability-attribute-sanity-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(staged_api)]\n \n-#![stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n \n #[stable(feature = \"a\", feature = \"b\", since = \"1.0.0\")] //~ ERROR multiple 'feature' items\n fn f1() { }"}, {"sha": "d4821e009f22353077940792a573e1a50290f8a1", "filename": "src/test/compile-fail/stability-attribute-sanity-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-3.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(staged_api)]\n \n-#![stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n \n #[macro_export]\n macro_rules! mac { //~ ERROR This node does not have a stability attribute"}, {"sha": "794ae1ca08707a1a5f2d0f194fef16c70a2f5e5d", "filename": "src/test/compile-fail/stability-attribute-sanity.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -15,7 +15,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n mod bogus_attribute_types_1 {\n-    #[stable(feature = \"a\", since = \"a\", reason)] //~ ERROR unknown meta item 'reason' [E0541]\n+    #[stable(feature = \"a\", since = \"b\", reason)] //~ ERROR unknown meta item 'reason' [E0541]\n     fn f1() { }\n \n     #[stable(feature = \"a\", since)] //~ ERROR incorrect meta item [E0539]\n@@ -35,7 +35,7 @@ mod bogus_attribute_types_2 {\n     #[unstable] //~ ERROR incorrect stability attribute type [E0548]\n     fn f1() { }\n \n-    #[unstable = \"a\"] //~ ERROR incorrect stability attribute type [E0548]\n+    #[unstable = \"b\"] //~ ERROR incorrect stability attribute type [E0548]\n     fn f2() { }\n \n     #[stable] //~ ERROR incorrect stability attribute type [E0548]\n@@ -57,7 +57,7 @@ mod missing_feature_names {\n     #[unstable(issue = \"0\")] //~ ERROR missing 'feature' [E0546]\n     fn f1() { }\n \n-    #[unstable(feature = \"a\")] //~ ERROR missing 'issue' [E0547]\n+    #[unstable(feature = \"b\")] //~ ERROR missing 'issue' [E0547]\n     fn f2() { }\n \n     #[stable(since = \"a\")] //~ ERROR missing 'feature' [E0546]\n@@ -73,12 +73,12 @@ mod missing_version {\n     fn f2() { }\n }\n \n-#[unstable(feature = \"a\", issue = \"0\")]\n+#[unstable(feature = \"b\", issue = \"0\")]\n #[stable(feature = \"a\", since = \"b\")] //~ ERROR multiple stability levels [E0544]\n fn multiple1() { }\n \n-#[unstable(feature = \"a\", issue = \"0\")]\n-#[unstable(feature = \"a\", issue = \"0\")] //~ ERROR multiple stability levels [E0544]\n+#[unstable(feature = \"b\", issue = \"0\")]\n+#[unstable(feature = \"b\", issue = \"0\")] //~ ERROR multiple stability levels [E0544]\n fn multiple2() { }\n \n #[stable(feature = \"a\", since = \"b\")]\n@@ -88,8 +88,8 @@ fn multiple3() { }\n #[stable(feature = \"a\", since = \"b\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n-#[rustc_const_unstable(feature = \"a\")]\n-#[rustc_const_unstable(feature = \"b\")]\n+#[rustc_const_unstable(feature = \"c\")]\n+#[rustc_const_unstable(feature = \"d\")]\n pub const fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n //~^ ERROR Invalid stability or deprecation version found\n //~| ERROR multiple rustc_const_unstable attributes"}, {"sha": "32991dd6499b5ceaaad0175bd1a109ffa13a3ac4", "filename": "src/test/compile-fail/stable-features.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstable-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fcompile-fail%2Fstable-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstable-features.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,10 +13,11 @@\n \n #![deny(stable_features)]\n \n-#![feature(test_accepted_feature)] //~ ERROR this feature has been stable since 1.0.0\n+#![feature(test_accepted_feature)]\n+//~^ ERROR the feature `test_accepted_feature` has been stable since 1.0.0\n \n-// FIXME(#44232) we should error that this isn't used.\n #![feature(rust1)]\n+//~^ ERROR the feature `rust1` has been stable since 1.0.0\n \n fn main() {\n     let _foo: Vec<()> = Vec::new();"}, {"sha": "f5dab5a55b45cc3e59693839d73f509b7bfb6434", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -15,7 +15,6 @@\n #![allow(dead_code, unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n-#![feature(static_mutex)]\n \n // This test makes sure that the compiler doesn't crash when trying to assign\n // debug locations to const-expressions."}, {"sha": "3eca89fbed3310ab6f16b54c3953cbfe3b6dfe4d", "filename": "src/test/run-fail/args-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fargs-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fargs-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-panic.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,7 +11,6 @@\n \n // error-pattern:meep\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(_a: isize, _b: isize, _c: Box<isize>) {"}, {"sha": "c8f851be556d7ddfa953006df6f907e210631502", "filename": "src/test/run-fail/panic-macro-any.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-macro-any.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern:panicked at 'Box<Any>'\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn main() {"}, {"sha": "2d430be07ef2f2eff1f3fe97566a15696f18ba9f", "filename": "src/test/run-fail/panic-set-handler.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern:greetings from the panic handler\n \n-#![feature(panic_handler)]\n-\n use std::panic;\n \n fn main() {"}, {"sha": "e7659d0bd88b7cb5354047aed6bd792c1e41364e", "filename": "src/test/run-fail/panic-set-unset-handler.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern:thread 'main' panicked at 'foobar'\n \n-#![feature(panic_handler)]\n-\n use std::panic;\n \n fn main() {"}, {"sha": "46e937c5d9b79709522d24e17e6be0d079485c15", "filename": "src/test/run-fail/panic-take-handler-nop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fpanic-take-handler-nop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-fail%2Fpanic-take-handler-nop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-take-handler-nop.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern:thread 'main' panicked at 'foobar'\n \n-#![feature(panic_handler)]\n-\n use std::panic;\n \n fn main() {"}, {"sha": "1dad2ed90521dc60b59ec5e9807b2fe61eb9ea45", "filename": "src/test/run-make-fulldeps/allow-warnings-cmdline-stability/bar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,6 +10,6 @@\n \n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n-#![unstable(feature = \"test_feature\", issue = \"0\")]\n+#![unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n \n-pub fn baz() { }\n+pub fn baz() {}"}, {"sha": "b728136a89e294d31e9b67405c02cfc2c3cad8bb", "filename": "src/test/run-make-fulldeps/allow-warnings-cmdline-stability/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Ffoo.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(test_feature)]\n+#![feature(unstable_test_feature)]\n \n extern crate bar;\n "}, {"sha": "f3502e8bcd4139d423237a95bae05576a5669adb", "filename": "src/test/run-make-fulldeps/link-path-order/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(libc, exit_status)]\n+#![feature(libc)]\n \n extern crate libc;\n "}, {"sha": "7e5343df84141863793de151f7b8fca9b33d471f", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/extern_absolute_paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_absolute_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_absolute_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_absolute_paths.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(extern_absolute_paths)]\n-\n use krate2::hello;\n \n fn main() {"}, {"sha": "6b165f1f7009268a4dca4f790fd492528d8bf008", "filename": "src/test/run-make/wasm-custom-section/bar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Fbar.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_type = \"cdylib\"]\n-#![feature(wasm_custom_section)]\n #![deny(warnings)]\n \n extern crate foo;"}, {"sha": "6a35d743710dd40cb137d908c4398d30e6c5ee09", "filename": "src/test/run-make/wasm-custom-section/foo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2Ffoo.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_type = \"rlib\"]\n-#![feature(wasm_custom_section)]\n #![deny(warnings)]\n \n #[link_section = \"foo\"]"}, {"sha": "baf9e0d5dc5a6165bd06b4b2688cde9c13c921a1", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,8 +12,7 @@\n \n // ignore-cross-compile\n \n-#![feature(rustc_private, path)]\n-#![feature(core)]\n+#![feature(rustc_private)]\n \n extern crate getopts;\n extern crate rustc;"}, {"sha": "4c5b3259902eb39a7479bbd09baeeae8d9393ed3", "filename": "src/test/run-pass-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n "}, {"sha": "e967873280470431417e1246ee6bec5f8b8d777a", "filename": "src/test/run-pass-fulldeps/deriving-global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-global.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rand, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate serialize;\n "}, {"sha": "3356828c04b990cdc98fa68d919ac1d44f73b856", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,7 +11,7 @@\n // aux-build:attr-stmt-expr.rs\n // ignore-stage1\n \n-#![feature(use_extern_macros, stmt_expr_attributes, proc_macro_stmt, proc_macro_expr)]\n+#![feature(use_extern_macros, stmt_expr_attributes, proc_macro_expr)]\n \n extern crate attr_stmt_expr;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr,"}, {"sha": "360e8c9cc4f4fb4bc7754545228586d5afd713e6", "filename": "src/test/run-pass-valgrind/coerce-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcoerce-match.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "c1f75d5ee74ea828e208e081d6432dace8bfab6b", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct pair<A,B> {"}, {"sha": "b17464e04190f459bfebe1101c1360e3c714b71b", "filename": "src/test/run-pass/allocator/auxiliary/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,7 @@\n \n // no-prefer-dynamic\n \n-#![feature(heap_api, allocator_api)]\n+#![feature(allocator_api)]\n #![crate_type = \"rlib\"]\n \n use std::alloc::{GlobalAlloc, System, Layout};"}, {"sha": "7a45fd28bdbc57713f20b7526f2ff1ed1deaf5ef", "filename": "src/test/run-pass/allocator/xcrate-use2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,7 +13,7 @@\n // aux-build:helper.rs\n // no-prefer-dynamic\n \n-#![feature(heap_api, allocator_api)]\n+#![feature(allocator_api)]\n \n extern crate custom;\n extern crate custom_as_global;"}, {"sha": "de83e4edd8527d475fae6b629fc917ab6039b7e9", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=isize>>) -> isize {"}, {"sha": "62fa07e20b6b0020a0c1a112a911299734b8cc18", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,8 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n use std::slice;\n \n trait Bound {}"}, {"sha": "73f1041082825f453ccfd95fc0c650e7071715f9", "filename": "src/test/run-pass/attr-shebang.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fattr-shebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fattr-shebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-shebang.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unknown_features)]\n-#![feature(bogus)]\n+#![allow(stable_features)]\n+#![feature(rust1)]\n pub fn main() { }\n // ignore-license"}, {"sha": "f6ff9a31fa13c85c5eabd9dcb63c2a837cf1775d", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "234af92610abe3ae0b3d45c091c76fa42fb64a1f", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "5890fe44166616213ad0348f690d4d28596eed2d", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "2598ec17d2aea9240a6bd3c2143e446939cc7f54", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "7c83b9c982fbd13d8b2d31101de62718663cf9b8", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait double {"}, {"sha": "4096d45d8df8dfc2f18a97287520e87200b7852e", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "91de734ec3a678b13cd1380cfed5483540e9a28a", "filename": "src/test/run-pass/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcci_nested_lib.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cell::RefCell;"}, {"sha": "36562fd0049284da178aa9b80e9a6640bd5fe300", "filename": "src/test/run-pass/auxiliary/edition-kw-macro-2018.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(raw_identifiers)]\n-\n #[macro_export]\n macro_rules! produces_async {\n     () => (pub fn async() {})"}, {"sha": "b3e0f06148593999ca861beba973a2fdc764f5e9", "filename": "src/test/run-pass/auxiliary/issue-2380.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-2380.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,7 +11,6 @@\n #![crate_name=\"a\"]\n #![crate_type = \"lib\"]\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub trait i<T>"}, {"sha": "dee40b2fc573558641977edcf574eb99b991cfaf", "filename": "src/test/run-pass/auxiliary/issue13507.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n pub mod testtypes {\n     use std::any::TypeId;\n "}, {"sha": "785a8b05664315e0092d2a8305eebaafc6c9351c", "filename": "src/test/run-pass/auxiliary/method_self_arg1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n #![crate_type = \"lib\"]\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut COUNT: u64 = 1;"}, {"sha": "3761d58087e0d06a9513ca48c4e4b1359a6d5d9a", "filename": "src/test/run-pass/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fmethod_self_arg2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n #![crate_type = \"lib\"]\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut COUNT: u64 = 1;"}, {"sha": "0d0f1b3a482ea8423d9eac0b44fadf453a2737ae", "filename": "src/test/run-pass/auxiliary/typeid-intrinsic-aux1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n use std::any::{Any, TypeId};\n \n pub struct A;"}, {"sha": "0d0f1b3a482ea8423d9eac0b44fadf453a2737ae", "filename": "src/test/run-pass/auxiliary/typeid-intrinsic-aux2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n use std::any::{Any, TypeId};\n \n pub struct A;"}, {"sha": "836164a721a4603a1015adf2616a51ee710976b8", "filename": "src/test/run-pass/auxiliary/unstable-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(staged_api)]\n-#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+#![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n #[macro_export]"}, {"sha": "1d7230510df2baf65290a1e95189aff3e9b016f2", "filename": "src/test/run-pass/borrowck/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn borrow<F>(x: &isize, f: F) where F: FnOnce(&isize) {"}, {"sha": "a465c9cf811aa4b83241c2ba5121d257708de56a", "filename": "src/test/run-pass/borrowck/borrowck-field-sensitivity.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "c3645867117d262fc31d92430fd45504a0f5e9dc", "filename": "src/test/run-pass/borrowck/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "ec868bc5c85ef8ea26ddf782a6b04e2b876883bf", "filename": "src/test/run-pass/borrowck/borrowck-mut-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::mem::swap;"}, {"sha": "8c94df6dbf454ee205545be4f4f83d4afa5f5d5e", "filename": "src/test/run-pass/borrowck/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "56a0437146b9ef542567abadb6e0e33d987a3474", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-wasm32-bare no libc to test with\n \n-#![feature(libc, std_misc)]\n+#![feature(libc)]\n \n extern crate libc;\n "}, {"sha": "ac309216250553f60bddbc77d12467c7cba6d58f", "filename": "src/test/run-pass/cancel-clean-via-immediate-rvalue-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcancel-clean-via-immediate-rvalue-ref.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: &mut Box<u8>) {"}, {"sha": "1535ddfb4de0e47d0e9cefd1ec9c81eac1a12ccd", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_borrow_lib.rs\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n extern crate cci_borrow_lib;"}, {"sha": "03c80e497410ef3e9b88a25196364cd948d2ceb4", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,8 +13,6 @@\n // pretty-expanded FIXME #23616\n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n \n fn child2(_s: String) { }"}, {"sha": "04c4b2cb37765842bd55d6a20a713dd5e2ab2ed8", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_class_cast.rs\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n extern crate cci_class_cast;"}, {"sha": "343d414758cc0eef926bca878245cd0aff32f101", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::fmt;"}, {"sha": "dd900c56b40b1109c006934a7b9637bc32c67734", "filename": "src/test/run-pass/cleanup-arm-conditional.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-arm-conditional.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,7 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax, os)]\n \n use std::os;"}, {"sha": "b117f4abd9572ed91b53bc93f6111d1b0882591c", "filename": "src/test/run-pass/cleanup-rvalue-during-if-and-while.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // This test verifies that temporaries created for `while`'s and `if`\n // conditions are dropped after the condition is evaluated.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Temporary;"}, {"sha": "ae455d916b6f9fe984cee5af9e64ac1e6c1a4cfc", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -26,7 +26,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "6ac7acd2a6b6821951b901f5bcf718f9fdec8816", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,7 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax, std_misc)]\n+#![feature(box_syntax)]\n \n use std::thread;\n "}, {"sha": "ba700e4e326515c55afc4f7afb5bc20f4ffa7998", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,6 @@\n // storing closure data (as we used to do), the u64 would\n // overwrite the u16.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Pair<A,B> {"}, {"sha": "5a1953b563aa4cf04ce58967696f0e74f8b70b49", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cell::RefCell;"}, {"sha": "7c78cbdce0853faa2ad58faac062ba40005613d9", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "eaec9b1926a20dc51211c17ff44969b11f0fb3b9", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -16,7 +16,7 @@\n // memory, which makes for some *confusing* logs. That's why these are here\n // instead of in std.\n \n-#![feature(libc, std_misc, duration)]\n+#![feature(libc, duration)]\n \n extern crate libc;\n "}, {"sha": "c0bc97b1f659dc90ce1f94ac15d6c79af20509c4", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // This is a regression test that the metadata for the"}, {"sha": "0e65e5b43b732c60c57199e22c914741c578ca76", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cell::Cell;"}, {"sha": "0e6b3d87d345b43bc5a8b9dffaf024e1d72001d0", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "d3aaa3ded69d800a52079ec2441f94821f9a5a57", "filename": "src/test/run-pass/deriving-associated-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-associated-types.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n pub trait DeclaredTrait {\n     type Type;\n }"}, {"sha": "70ac284cd30c9c0c804e484395ee3f65d9074b4b", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::default::Default;"}, {"sha": "ceeb42663965f1b3e24fa3b625de416569abee0c", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(hash_default)]\n-\n use std::hash::{Hash, SipHasher, Hasher};\n use std::mem::size_of;\n "}, {"sha": "8dea648508d6deedc1efa62d705f5a6a6ebdaac9", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum t { foo(Box<isize>), }"}, {"sha": "17603e11dddd99b501e0fe7f8270ea99c88a4487", "filename": "src/test/run-pass/drop-struct-as-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // Test that destructor on a struct runs successfully after the struct\n // is boxed and converted to an object.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut value: usize = 0;"}, {"sha": "a6027615adb5a8ea04d4af4b50543825054896cd", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "6bda400a7cdbb6c3240b575e720ab325b4f4a1cd", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,9 +11,6 @@\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n \n-\n-#![feature(core)]\n-\n use std::ops::Index;\n use std::fmt::Debug;\n "}, {"sha": "40ca847278722a222cef5beea9016db44f79aebe", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {"}, {"sha": "a412306b96645dcba42b1615a3e31a14d184029f", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {"}, {"sha": "7c2125d00f9bab499670a992e7246ed55fe69484", "filename": "src/test/run-pass/dst-tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdst-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fdst-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-tuple.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(unsized_tuple_coercion)]\n "}, {"sha": "7d5de00cdb8c2b3702555d5bc10d03dbdf691899", "filename": "src/test/run-pass/edition-keywords-2018-2015.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // edition:2018\n // aux-build:edition-kw-macro-2015.rs\n \n-#![feature(raw_identifiers)]\n-\n #[macro_use]\n extern crate edition_kw_macro_2015;\n "}, {"sha": "6462fc4da60a02125c45235ecf7577ec1508ffc8", "filename": "src/test/run-pass/edition-keywords-2018-2018.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // edition:2018\n // aux-build:edition-kw-macro-2018.rs\n \n-#![feature(raw_identifiers)]\n-\n #[macro_use]\n extern crate edition_kw_macro_2018;\n "}, {"sha": "b5db8d913204af4d8e09263db0dac616940d7f3b", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n /*!"}, {"sha": "e92f24a27519e8d6bfcb3c4dc5bdd148953c5fd3", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // ignore-cloudabi no environment variables present\n // ignore-emscripten env vars don't work?\n \n-#![feature(path)]\n-\n use std::env::*;\n use std::path::PathBuf;\n "}, {"sha": "d2274ced55610f282a5be7d7c64384d43a3a077f", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Copy, Clone)]"}, {"sha": "bb7e612a9f2a788fbbfe2a2685abb1d63a523be4", "filename": "src/test/run-pass/explicit-self-objects-uniq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "11711e6ab74be939f30de60f60c26c340e0ea2d3", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static tau: f64 = 2.0*3.14159265358979323;"}, {"sha": "304f1c7a2eacd72db6bc51982a2bc3e940a43478", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test_generic<T, F>(expected: Box<T>, eq: F) where T: Clone, F: FnOnce(Box<T>, Box<T>) -> bool {"}, {"sha": "af3f5547867a1294e154260c3e536c31d7e6f7d8", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test_generic<T, F>(expected: T, eq: F) where T: Clone, F: FnOnce(T, T) -> bool {"}, {"sha": "2426ee5966c9f5961bd96648c70d11b294cb9efb", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() { let x: Box<_> = { box 100 }; assert_eq!(*x, 100); }"}, {"sha": "a8547536603adecaac28b186f6629488f09f50a1", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-\n // Tests for if as expressions returning boxed types\n fn test_box() {\n     let rs: Box<_> = if true { box 100 } else { box 101 };"}, {"sha": "3fce798c285c0ad1627c70d0d86f544c10ff336f", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: Box<T>, eq: F) where F: FnOnce(Box<T>, Box<T>) -> bool {"}, {"sha": "5500edcf239f50ee319a5d22270a87d9dc51c4e6", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {"}, {"sha": "e66f09c63ea4bcd0cf4a936c18fc475888ad6598", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Tests for match as expressions resulting in boxed types"}, {"sha": "a29ea377947c794b43b9c5bb7eb210ea93a4f1ad", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -14,7 +14,7 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(libc, std_misc)]\n+#![feature(libc)]\n \n extern crate libc;\n use std::thread;"}, {"sha": "fd827efbfdd440a0b2f17ed65ab5566d3ef98e36", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-wasm32-bare no libc to test ffi with\n \n-#![feature(std_misc, libc)]\n+#![feature(libc)]\n \n extern crate libc;\n use std::ffi::CString;"}, {"sha": "efd7f66e93b837d92e73ccc3aaca2c7542ebf625", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax, core)]\n \n struct ncint { v: isize }"}, {"sha": "7d9501879d0a9be06a6ab6c690144e89b699f6e4", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // Test that we do not leak when the arg pattern must drop part of the\n // argument (in this case, the `y` field).\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Foo {"}, {"sha": "5214f2d02f51d9398d9f78b989a358d82dfde96e", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -14,8 +14,6 @@\n // boxes. Make sure that we don't free the box as we match the\n // pattern.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "c4fd31196153158d80682e34c9a8996bc322f580", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn id<T:Send>(t: T) -> T { return t; }"}, {"sha": "64091d2926c97714c33a09d30d5bfd54b1f955c3", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Recbox<T> {x: Box<T>}"}, {"sha": "debe3706891ce1a129aff75f2e1bee58c05aedc5", "filename": "src/test/run-pass/generic-extern-mangle.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n-\n use std::ops::Add;\n \n extern \"C\" fn foo<T: Add>(a: T, b: T) -> T::Output { a + b }"}, {"sha": "3585cd2e0797d7954af2dc2d18ec326221a41ecc", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f<T>(x: Box<T>) -> Box<T> { return x; }"}, {"sha": "7e737fe00afd4fa77accae075d3e0a5f4bfcaf8d", "filename": "src/test/run-pass/generic-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-object.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Foo<T> {"}, {"sha": "ca2bf0ac224594bfdaefbc09eb61a1b47e0f36ca", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum list<T> { cons(Box<T>, Box<list<T>>), nil, }"}, {"sha": "a79465c8cd86034f2da4ba2a7af53b2bf9d4b08b", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variables)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum option<T> { some(Box<T>), none, }"}, {"sha": "1b1355ea336a6d196c9666a4f642293b4dc88d8d", "filename": "src/test/run-pass/generic-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Triple<T> { x: T, y: T, z: T }"}, {"sha": "2e98e0fe5ca3d24a3b5547ad89bff219576b5427", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,9 +10,6 @@\n \n // ignore-emscripten No support for threads\n \n-#![allow(unknown_features)]\n-#![feature(std_misc)]\n-\n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n "}, {"sha": "511d32348576e2c98769e25bc3e6f4cc9766845b", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n-\n // Test that `Fn(isize) -> isize + 'static` parses as `(Fn(isize) -> isize) +\n // 'static` and not `Fn(isize) -> (isize + 'static)`. The latter would\n // cause a compilation error. Issue #18772."}, {"sha": "c8f9a0e4cab6d9b7e07c593c163fea185c892ab8", "filename": "src/test/run-pass/init-large-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Finit-large-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Finit-large-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-large-type.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -15,7 +15,7 @@\n // pretty-expanded FIXME #23616\n // ignore-emscripten no threads support\n \n-#![feature(intrinsics, std_misc)]\n+#![feature(intrinsics)]\n \n use std::thread;\n "}, {"sha": "4b11158e8c3d1c8926cc3faf9c3502c85f2c9277", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(intrinsics)]\n "}, {"sha": "67b73bdadbb62b86aa0404835b5c3108eb566025", "filename": "src/test/run-pass/issue-10682.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-10682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-10682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10682.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,7 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn work(_: Box<isize>) {}"}, {"sha": "2184aa00fa409ef03206ef7a8d858cdc62c113fa", "filename": "src/test/run-pass/issue-10767.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10767.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "1e700d4e18b270c79eac8d7a7a8fc915bc17fcaf", "filename": "src/test/run-pass/issue-10802.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10802.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct DroppableStruct;"}, {"sha": "aa980e48c5ee74be0c1ca4f08d800dacdac85b5a", "filename": "src/test/run-pass/issue-11552.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-11552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-11552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11552.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "634046e86ee6c45969f41bb73f731bd6678b4a8f", "filename": "src/test/run-pass/issue-13259-windows-tcb-trash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(libc, std_misc)]\n+#![feature(libc)]\n \n extern crate libc;\n "}, {"sha": "36036ae241e2105c6092038df08403f20722d0b7", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n-#![feature(io, process_capture)]\n-\n use std::env;\n use std::io::prelude::*;\n use std::io;"}, {"sha": "de72d7152f8ec8bebb1cf4d007a0d10f11a9c4b3", "filename": "src/test/run-pass/issue-13323.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-13323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-13323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13323.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct StrWrap {"}, {"sha": "d5c67bea099f54af25f9f40c9a84225789e0a299", "filename": "src/test/run-pass/issue-14399.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14399.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -15,7 +15,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "601fafbf02eb9edac8dc8f93fd464a9bf25dcf35", "filename": "src/test/run-pass/issue-14456.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14456.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n-#![feature(io, process_capture)]\n-\n use std::env;\n use std::io::prelude::*;\n use std::io;"}, {"sha": "35915a62102d389828354c4a987b30f3ff3bfb73", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn match_on_local() {"}, {"sha": "5a35239cf72d25c1cb347afcde8fba58cd5a07bf", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,9 +11,6 @@\n // If `Index` used an associated type for its output, this test would\n // work more smoothly.\n \n-\n-#![feature(core)]\n-\n use std::ops::Index;\n \n struct Mat<T> { data: Vec<T>, cols: usize, }"}, {"sha": "e1176d470636c6c24fb2c7b88ae1f2c90e86d6c4", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(PartialEq, Debug)]"}, {"sha": "7944e80a42860fbe6a7b238c1634236b5fba276b", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-\n struct Parser<'a, I, O> {\n     parse: Box<FnMut(I) -> Result<O, String> + 'a>\n }"}, {"sha": "2bdedfebe3e99f6857fb669dd2dab9527e71c401", "filename": "src/test/run-pass/issue-16739.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16739.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(unboxed_closures, fn_traits)]\n "}, {"sha": "1309d2ffab8e05abca5c478f1e27073d2aaac193", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n "}, {"sha": "c94345f794d17c1dac055808dbaf9ebad834cc8c", "filename": "src/test/run-pass/issue-17322.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17322.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax, io)]\n+#![feature(box_syntax)]\n \n use std::io::{self, Write};\n "}, {"sha": "88f83a300a785eeb3e7b9a57a2a44c7352e4547a", "filename": "src/test/run-pass/issue-17351.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-17351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-17351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17351.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n trait Str { fn foo(&self) {} }\n impl Str for str {}\n impl<'a, S: ?Sized> Str for &'a S where S: Str {}"}, {"sha": "7671b43d493e1b2440c5e9c96d714907df554b74", "filename": "src/test/run-pass/issue-20091.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20091.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,7 +11,7 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n \n-#![feature(std_misc, os)]\n+#![feature(os)]\n \n #[cfg(unix)]\n fn main() {"}, {"sha": "15cb79ac6a86f5dc65200579de8517d4f79eb99b", "filename": "src/test/run-pass/issue-20454.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-20454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-20454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20454.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(std_misc)]\n-\n use std::thread;\n \n fn _foo() {"}, {"sha": "51896786d0c35a73fac35bd97d0e8f22d8ba3c5d", "filename": "src/test/run-pass/issue-21562.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-21562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-21562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21562.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n extern crate core;\n use core::marker::Sync;\n "}, {"sha": "895b9d222a8565e0599734a9fb98c13ba007edbb", "filename": "src/test/run-pass/issue-22346.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-22346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-22346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22346.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n // This used to cause an ICE because the retslot for the \"return\" had the wrong type\n fn testcase<'a>() -> Box<Iterator<Item=usize> + 'a> {\n     return Box::new((0..3).map(|i| { return i; }));"}, {"sha": "83ffdb3bf4424419b80f9aa57e5d0e1fb2babebf", "filename": "src/test/run-pass/issue-22577.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22577.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // pretty-expanded FIXME #23616\n // ignore-cloudabi no std::fs\n \n-#![feature(fs, net)]\n-\n use std::{fs, net};\n \n fn assert_both<T: Send + Sync>() {}"}, {"sha": "b8353ea4413669857ff9769e17c2d548a3ae95e4", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait clam<A> {"}, {"sha": "b955947c4101bc00569aa9274f6ffa0ec6f5e36d", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n "}, {"sha": "cf565b9f901975ea8e2afe37e8357dd26f775b06", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Font {"}, {"sha": "d59f2956ee4027614e973b5840c143f0edbbdcac", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n //\n \n-#![feature(std_misc)]\n-\n pub type Task = isize;\n \n // tjc: I don't know why"}, {"sha": "916e3dd689fcf84ac589db22a52cd6a8386d0ec3", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait hax {"}, {"sha": "af8eef557f821b4e43fb7adb592927b0fcb285b3", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait hax {"}, {"sha": "b2ea183e9f8787f212d2ab2678040b4e29a23c2c", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n //type t = { a: isize };"}, {"sha": "a0bdcf18ec520f56c557353bdbefef30cd509867", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Copy, Clone)]"}, {"sha": "6c775e15fb56ec8e2adbc82077e56b0b53b0843e", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "1558d94bae79914af08c8dae1a30045a76165238", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::cell::RefCell;"}, {"sha": "56208d08779cb56ca8f5da6c06baa62913c9e931", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -22,8 +22,6 @@\n // that are already linked in. Using WriterUtil allows us to use the write_line\n // method.\n \n-#![feature(core)]\n-\n use std::fmt;\n use std::iter::repeat;\n use std::slice;"}, {"sha": "f53053f2edcb778ecb729977e897fbd50004880e", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n-#![feature(std_misc)]\n-\n use std::thread;\n use std::sync::mpsc::Sender;\n "}, {"sha": "e6eb8efe442f3d88d3c4cd8dfa86287ebbfa42f4", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,8 +12,6 @@\n // Issue Name: pub method preceded by attribute can't be parsed\n // Abstract: Visibility parsing failed when compiler parsing\n \n-#![feature(core)]\n-\n use std::f64;\n \n #[derive(Copy, Clone)]"}, {"sha": "badb833ee800bca94c2420c3dbf2b66e97d3fe29", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait T {"}, {"sha": "e0e11b4fd865019e18835f5c6ec4a662595ca0e4", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,7 +11,6 @@\n // pretty-expanded FIXME #23616\n \n #![allow(path_statements)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "a84d7f3fe8287b2bf2da25f23ccc1a7d0c2ff050", "filename": "src/test/run-pass/issue-4333.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4333.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(io)]\n-\n use std::io;\n \n pub fn main() {"}, {"sha": "7788a8f3ec2332c76719924040af56460dd62ad7", "filename": "src/test/run-pass/issue-4759.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-4759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-4759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4759.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct T { a: Box<isize> }"}, {"sha": "0758ace42da9055e9a441b5cbddd51a73887baec", "filename": "src/test/run-pass/issue-5192.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5192.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub trait EventLoop {"}, {"sha": "eba83227f449b4c829fdd1d2faf6ea497557044e", "filename": "src/test/run-pass/issue-5666.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5666.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Dog {"}, {"sha": "0bc9a07cb002379f86ea24e4c544b5d7e07b4bed", "filename": "src/test/run-pass/issue-5718.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5718.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Element;"}, {"sha": "c3247876c7ab9f6a148a68b43fecaa62d3e9016f", "filename": "src/test/run-pass/issue-5884.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5884.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub struct Foo {"}, {"sha": "69c7ec4cf1f8ade1e448c8ae264339f4353ff185", "filename": "src/test/run-pass/issue-6318.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6318.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub enum Thing {"}, {"sha": "109383b343bf8977cbf3d0c327177e0cf8103390", "filename": "src/test/run-pass/issue-6557.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-6557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-6557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6557.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "f5acebf3a66fae69323e1ec0e37bb3304f6ccbd9", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -16,7 +16,6 @@\n \n */\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {}"}, {"sha": "6b573698a36002738f53face68f4472940900963", "filename": "src/test/run-pass/issue-8827.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-8827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8827.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n use std::sync::mpsc::{channel, Receiver};\n "}, {"sha": "485f10357b3f329b187a54ba16e85f9514fa8082", "filename": "src/test/run-pass/issue-9129.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9129.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-pretty unreported\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub trait bomb { fn boom(&self, _: Ident); }"}, {"sha": "7538e55fd95df6af2eab19af5d1d10dc9880324d", "filename": "src/test/run-pass/issue-9382.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9382.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,7 +11,6 @@\n // except according to those terms.\n \n #![allow(unnecessary_allocation)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Tests for a previous bug that occurred due to an interaction"}, {"sha": "0da1d18afd8efed4e1d9c7efe4e35a7b6a0f11a1", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "1c5d8a69bf3406a9a7eb7d9f9ddea8376f6fba87", "filename": "src/test/run-pass/kindck-implicit-close-over-mut-var.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-implicit-close-over-mut-var.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(std_misc)]\n-\n use std::thread;\n \n fn user(_i: isize) {}"}, {"sha": "9b56666fd464cd68eae2ee49394589053e88a38b", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait repeat<A> { fn get(&self) -> A; }"}, {"sha": "cb2a2061406a243d9928d439c9fccb92d1ec6a98", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // Make sure #1399 stays fixed\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct A { a: Box<isize> }"}, {"sha": "d89888927e1bdef212b0f04fa925e7388e4aa3b9", "filename": "src/test/run-pass/leak-unique-as-tydesc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn leaky<T>(_t: T) { }"}, {"sha": "69b0eab99f71f5c5cf15d861d7d55302b59e1c12", "filename": "src/test/run-pass/let-assignability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-assignability.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f() {"}, {"sha": "37612415555099880cca736a9bdb71aa99168693", "filename": "src/test/run-pass/list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flist.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n enum list { cons(isize, Box<list>), nil, }"}, {"sha": "10de6eeabddaaf278d0e100855e2e18d9774b378", "filename": "src/test/run-pass/match-implicit-copy-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Pair { a: Box<isize>, b: Box<isize> }"}, {"sha": "ca864c05cfdc8f6ce1b08cb89984bfa833df06dc", "filename": "src/test/run-pass/match-unique-bind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "ab56a8cfc9392e781fff1f993869eb9ef2891430", "filename": "src/test/run-pass/match-value-binding-in-guard-3291.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-value-binding-in-guard-3291.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: Option<Box<isize>>, b: bool) -> isize {"}, {"sha": "2572baf68fd12e35e3015384e9cfb1ba975a4fe1", "filename": "src/test/run-pass/method-self-arg-aux1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // Test method calls with self as an argument (cross-crate)\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // aux-build:method_self_arg1.rs"}, {"sha": "51de69ff01f0fb422dc38e55f4b58a942b5f9ef8", "filename": "src/test/run-pass/method-self-arg-aux2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-aux2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // Test method calls with self as an argument (cross-crate)\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // aux-build:method_self_arg2.rs"}, {"sha": "34e849bd0d2d85965018eca62e2f971184347c80", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // Test method calls with self as an argument\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut COUNT: u64 = 1;"}, {"sha": "b7fb2fa138da902a65585013b17f81ec0f24ea66", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // Test method calls with self as an argument\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n static mut COUNT: usize = 1;"}, {"sha": "f403f5260395038ec4c888cbc62e105e894c4783", "filename": "src/test/run-pass/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -19,8 +19,6 @@\n // codegen the call as `Foo::foo(&x)` and let the specific impl get\n // chosen later.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "3f0f4f357453419e28e6a7eba12da47cbb63df20", "filename": "src/test/run-pass/method-two-traits-distinguished-via-where-clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-traits-distinguished-via-where-clause.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,8 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n trait A {\n     fn foo(self);\n }"}, {"sha": "5c8dd41c6466383a6263a8cf4c7657a37644ac29", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "0b67e54e234580726bf1a5dec34ca17e95fd9305", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct X { x: isize, y: isize, z: isize }"}, {"sha": "0fbc2de91e6cd3f66144a43b8501136c8bae381f", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct X { x: isize, y: isize, z: isize }"}, {"sha": "36ad3a40b3f56b881e722f59f7a6def4b0a15429", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(Clone)]"}, {"sha": "266e34c98a40d767c52b2d985608a910983513b6", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Triple {a: isize, b: isize, c: isize}"}, {"sha": "481068869e34d48d4d976731743130c0f0352c9a", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Triple { a: isize, b: isize, c: isize }"}, {"sha": "b6e225cc8b73e8f683562e4d912db6ac57c5e6e9", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test(foo: Box<Vec<isize>> ) { assert_eq!((*foo)[0], 10); }"}, {"sha": "78774854c9f1606ea67a0540c100e27db1e0997f", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn test(foo: Box<Vec<isize>>) { assert_eq!((*foo)[0], 10); }"}, {"sha": "548a62f4603de67c320ec0dc488ca0079206c2b2", "filename": "src/test/run-pass/moves-based-on-type-capture-clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n \n pub fn main() {"}, {"sha": "bf4d4ea921aa58209eb468925589bad3e7f08199", "filename": "src/test/run-pass/mut-function-arguments.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(mut y: Box<isize>) {"}, {"sha": "d6881ea90afb6fbe3f4003b2589b298e6a3caaf5", "filename": "src/test/run-pass/new-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fnew-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fnew-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn f(x: Box<isize>) {"}, {"sha": "d33102a38f96e4b3b5024c756d91d65080be2f17", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,"}, {"sha": "284beccdb29566d54dabebfca93b37ce38aa17a3", "filename": "src/test/run-pass/object-one-type-two-traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,7 +11,6 @@\n // Testing creating two vtables with the same self type, but different\n // traits.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::any::Any;"}, {"sha": "c27bc62ada803e19e7949f8abe16ec902b64bab7", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,8 +12,6 @@\n // closed over do not contain managed values, and thus the boxes do\n // not have headers.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n "}, {"sha": "5d9658dc15d63aed48680e7094b591fc8d9f4776", "filename": "src/test/run-pass/objects-owned-object-owned-method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,8 +12,6 @@\n // closed over contain managed values. This implies that the boxes\n // will have headers that must be skipped over.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait FooTrait {"}, {"sha": "c3a1164ba9c6af2e1c229e7e2311fefe822bb09e", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n use std::cmp;\n use std::ops;\n "}, {"sha": "2171b8c481d1fd7c24b7f4f882437ba67534bf1f", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variables)]\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct A { a: isize, b: isize }"}, {"sha": "759e2aace6104b3be5f38777195270b00c72084e", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax, core)]\n \n use std::cell::RefCell;"}, {"sha": "50140d1aab9da1316726afff77eb1c9d79ebf4c0", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,9 +11,6 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n-\n-#![feature(core)]\n-\n use std::ops::Index;\n \n struct AssociationList<K,V> {"}, {"sha": "9988599d59dcc8392407c98051d68f1f736e1c1c", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // Test overloaded indexing combined with autoderef.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax, core)]\n \n use std::ops::{Index, IndexMut};"}, {"sha": "7e2b586631dce84758e01b4fe518767348a69229", "filename": "src/test/run-pass/overloaded-index-in-field.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,9 +11,6 @@\n // Test using overloaded indexing when the \"map\" is stored in a\n // field. This caused problems at some point.\n \n-\n-#![feature(core)]\n-\n use std::ops::Index;\n \n struct Foo {"}, {"sha": "b54a18f722a729eb2a827f6bc56a8e1c6806181d", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {"}, {"sha": "e2de795bdb72b315af722e2bbc6d6373fc6cec0a", "filename": "src/test/run-pass/panic-handler-chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(panic_handler, std_panic)]\n+#![feature(std_panic)]\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::panic;"}, {"sha": "f0c50f842ab3c55fc4596971bf87244f0071f596", "filename": "src/test/run-pass/panic-handler-flail-wildly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-handler-flail-wildly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-handler-flail-wildly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-flail-wildly.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -7,10 +7,11 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(panic_handler, std_panic)]\n \n // ignore-emscripten no threads support\n \n+#![feature(std_panic)]\n+\n use std::panic;\n use std::thread;\n "}, {"sha": "120483ab336ffbf8ed1ab595c1faca2c55cfc76d", "filename": "src/test/run-pass/panic-handler-set-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(panic_handler, std_panic)]\n+#![feature(std_panic)]\n \n // ignore-emscripten no threads support\n "}, {"sha": "cc2cfb6be969bc7ef6b632f15b40dd55a079c170", "filename": "src/test/run-pass/panic-recover-propagate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-recover-propagate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-recover-propagate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-recover-propagate.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(panic_handler)]\n-\n use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n use std::panic;\n use std::thread;"}, {"sha": "731603606e426fc68dd5d06849902237b35eb80e", "filename": "src/test/run-pass/panic-runtime/abort-link-to-unwinding-crates.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,6 +13,7 @@\n // no-prefer-dynamic\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n+// ignore-macos\n \n extern crate exit_success_if_unwind;\n "}, {"sha": "4692ad3ca2f1d942362934c71e8176e042181306", "filename": "src/test/run-pass/panic-runtime/abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Fabort.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,6 +12,7 @@\n // no-prefer-dynamic\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n+// ignore-macos\n \n use std::process::Command;\n use std::env;"}, {"sha": "9f5407e4526a52b29499873faf616cd31ef83b17", "filename": "src/test/run-pass/panic-runtime/link-to-abort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flink-to-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flink-to-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-runtime%2Flink-to-abort.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,10 +10,10 @@\n \n // compile-flags:-C panic=abort\n // no-prefer-dynamic\n+// ignore-macos\n \n #![feature(panic_abort)]\n \n extern crate panic_abort;\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "27b9eeccbeb14d130aba5282154a69b79ce62388", "filename": "src/test/run-pass/parallel-codegen-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fparallel-codegen-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fparallel-codegen-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparallel-codegen-closures.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -14,7 +14,6 @@\n // ignore-bitrig\n // compile-flags: -C codegen_units=2\n \n-#![feature(core)]\n #![feature(iter_arith)]\n \n mod a {"}, {"sha": "3313196a5eced2a8bb17bcf124adc5b11be4a2b4", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn sums_to(v: Vec<isize> , sum: isize) -> bool {"}, {"sha": "bc869113fe90000e5be3114e827c9693ad823c74", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait get {"}, {"sha": "61ef386442bb91da051a77faee29950aa3f1d59e", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,7 +13,7 @@\n // Ideally this would be revised to use no_std, but for now it serves\n // well enough to reproduce (and illustrate) the bug from #16687.\n \n-#![feature(heap_api, allocator_api)]\n+#![feature(allocator_api)]\n \n use std::alloc::{Global, Alloc, Layout, handle_alloc_error};\n use std::ptr::{self, NonNull};"}, {"sha": "abebb670e65d2cd76c19c005840a95ca38223daf", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: &usize) -> usize {"}, {"sha": "48b09b338511810c93d210db24630a26eb2ccde6", "filename": "src/test/run-pass/regions-borrow-uniq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: &usize) -> usize {"}, {"sha": "4a24e201b3538bc3c97b39d8dc82289fd156cf75", "filename": "src/test/run-pass/regions-close-over-type-parameter-successfully.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-close-over-type-parameter-successfully.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // A test where we (successfully) close over a reference into\n // an object.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait SomeTrait { fn get(&self) -> isize; }"}, {"sha": "c8b39bbe74994bf0cd475248fbcc92ea686a7024", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // Test lifetimes are linked properly when we create dependent region pointers.\n // Issue #3148.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "75c209a09207018e9556f481e1c444b82415e517", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // Tests that you can use an early-bound lifetime parameter as\n // on of the generic parameters in a trait.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n trait Trait<'a> {"}, {"sha": "7cb719cccced81e7a5620c33e16e4c30592d252c", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn foo(x: &usize) -> &usize { x }"}, {"sha": "f762b4f41ed40076e9a4f1506af339a814eb6ddb", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -14,7 +14,6 @@\n \n #![allow(dead_assignment)]\n #![allow(unused_variables)]\n-#![allow(unknown_features)]\n \n // Should pass region checking.\n fn ok(f: Box<FnMut(&usize)>) {"}, {"sha": "a40ba8382fc2b3af300151dd766e0f4e5a8ffbf1", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n fn borrow<T>(x: &T) -> &T {x}"}, {"sha": "72208272df75ab8d9091b96047e0346a7fd8aa51", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Point {x: isize, y: isize}"}, {"sha": "2a20cd2b773c3acfa13a541af28068afd1828abc", "filename": "src/test/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -24,7 +24,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n pub fn main() {"}, {"sha": "3322fc36fd3a40655cb200bc52ab4060b0b4a0b2", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -17,8 +17,6 @@\n // changes were caught. However, those uses in the compiler could\n // easily get changed or refactored away in the future.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Ctxt<'tcx> {"}, {"sha": "93384b81e4aa7687f8b71afc9df4e6fc7439113a", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/basic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // aux-build:xcrate.rs\n // edition:2018\n \n-#![feature(extern_absolute_paths)]\n-\n use xcrate::Z;\n \n fn f() {"}, {"sha": "cace83d6274615b8ef7a1083a9651f05f5d32aae", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -15,8 +15,5 @@\n // edition:2018\n // compile-flags: --test\n \n-#![feature(extern_absolute_paths)]\n-\n #[test]\n-fn test() {\n-}\n+fn test() {}"}, {"sha": "fcd233c361b8398ab34fa6282105071c3b75c53f", "filename": "src/test/run-pass/self-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fself-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fself-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-impl.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -12,7 +12,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct Foo;"}, {"sha": "905a23f22a6f8abc1bed08058e60c3df55b61d0d", "filename": "src/test/run-pass/self-in-mut-slot-default-method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n struct X {"}, {"sha": "05295aa3309d4237b79d7da55d46e0e3ca83cd6e", "filename": "src/test/run-pass/self-re-assign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-re-assign.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // Ensure assigning an owned or managed variable to itself works. In particular,\n // that we do not glue_drop before we glue_take (#3290).\n \n-\n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::rc::Rc;"}, {"sha": "59332d6b65e8cd5a177cc92948ba7aad539b39cd", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // pretty-expanded FIXME #23616\n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "ecd0bfb1440764d5df1be7ff2ab9ce7b6feb5fa3", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "dfd7b947c57e5dab881d6fb950e54edb3452f4f1", "filename": "src/test/run-pass/slice.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,9 +10,6 @@\n \n // Test slicing sugar.\n \n-\n-#![feature(core)]\n-\n extern crate core;\n use core::ops::{Index, IndexMut, Range, RangeTo, RangeFrom, RangeFull};\n "}, {"sha": "7b6f0a7c9abc80f011de192d4b5595ff02b632ce", "filename": "src/test/run-pass/small-enum-range-edge.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -8,13 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// this is for the wrapping_add call below.\n-#![feature(core)]\n-\n-/*!\n- * Tests the range assertion wraparound case when reading discriminants.\n- */\n+// Tests the range assertion wraparound case when reading discriminants.\n \n #[repr(u8)]\n #[derive(Copy, Clone)]"}, {"sha": "1ad04493528b4f913413dff08b5e45c85cc11911", "filename": "src/test/run-pass/std-sync-right-kind-impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,9 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(static_mutex, static_rwlock, static_condvar)]\n-#![feature(semaphore)]\n-\n use std::sync;\n \n fn assert_both<T: Sync + Send>() {}"}, {"sha": "e9584e12b2e3ec9f818368abd014fdf06699b520", "filename": "src/test/run-pass/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(warnings)]\n-#![feature(drain, collections_bound, btree_range, vecmap)]\n+#![feature(drain, collections_bound, btree_range)]\n \n use std::collections::BinaryHeap;\n use std::collections::{BTreeMap, BTreeSet};"}, {"sha": "55269a28666313cd1288f635abbefb1529b5a0c4", "filename": "src/test/run-pass/sync-send-iterators-in-libcore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -13,7 +13,6 @@\n #![allow(warnings)]\n #![feature(iter_empty)]\n #![feature(iter_once)]\n-#![feature(iter_unfold)]\n #![feature(str_escape)]\n \n use std::iter::{empty, once, repeat};"}, {"sha": "01e6d4cf7dee43a8844243b828c5088111256b51", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "3295e68ac4e3a3f6925bf4f2ff2c5c38e523cd83", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n \n pub fn main() { test00(); }"}, {"sha": "a69bba82ff0cdca1225a982bbdc25ed6b56fe760", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::thread;\n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "c7beeb53850efe1f277a182f480c204068a0432a", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2397437530eecef72a1524a7e0a4b42034fa360/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=b2397437530eecef72a1524a7e0a4b42034fa360", "patch": "@@ -11,8 +11,6 @@\n // pretty-expanded FIXME #23616\n // ignore-emscripten no threads support\n \n-#![feature(std_misc)]\n-\n use std::sync::mpsc::{channel, Sender};\n use std::thread;\n "}]}