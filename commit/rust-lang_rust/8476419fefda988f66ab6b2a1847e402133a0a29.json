{"sha": "8476419fefda988f66ab6b2a1847e402133a0a29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NzY0MTlmZWZkYTk4OGY2NmFiNmIyYTE4NDdlNDAyMTMzYTBhMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-21T01:40:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-21T01:40:39Z"}, "message": "auto merge of #7896 : pcwalton/rust/pub-extern, r=pcwalton\n\nr? @nikomatsakis", "tree": {"sha": "9895ad23e668015072f4efcc5b07707d3121e6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9895ad23e668015072f4efcc5b07707d3121e6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8476419fefda988f66ab6b2a1847e402133a0a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8476419fefda988f66ab6b2a1847e402133a0a29", "html_url": "https://github.com/rust-lang/rust/commit/8476419fefda988f66ab6b2a1847e402133a0a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8476419fefda988f66ab6b2a1847e402133a0a29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b4b1b027ec5c5b72d496b7a10da418d5308c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b4b1b027ec5c5b72d496b7a10da418d5308c01", "html_url": "https://github.com/rust-lang/rust/commit/75b4b1b027ec5c5b72d496b7a10da418d5308c01"}, {"sha": "06594ed96bae46cca494dc456ddffcd403efbd8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06594ed96bae46cca494dc456ddffcd403efbd8e", "html_url": "https://github.com/rust-lang/rust/commit/06594ed96bae46cca494dc456ddffcd403efbd8e"}], "stats": {"total": 1526, "additions": 825, "deletions": 701}, "files": [{"sha": "51b01a158ffd57ebbd963093b529dd2839dae50f", "filename": "src/libextra/dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdbg.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -25,7 +25,7 @@ pub mod rustrt {\n     use std::unstable::intrinsics::{TyDesc};\n \n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         pub unsafe fn debug_tydesc(td: *TyDesc);\n         pub unsafe fn debug_opaque(td: *TyDesc, x: *());\n         pub unsafe fn debug_box(td: *TyDesc, x: *());"}, {"sha": "830ef781be9be5271246d75bb0bdbbafbccfcad8", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -24,18 +24,18 @@ pub mod rustrt {\n     use std::libc::{c_int, c_void, size_t};\n \n     #[link_name = \"rustrt\"]\n-    pub extern {\n-        unsafe fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n-                                             src_buf_len: size_t,\n-                                             pout_len: *mut size_t,\n-                                             flags: c_int)\n-                                          -> *c_void;\n+    extern {\n+        pub unsafe fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n+                                                 src_buf_len: size_t,\n+                                                 pout_len: *mut size_t,\n+                                                 flags: c_int)\n+                                                 -> *c_void;\n \n-        unsafe fn tinfl_decompress_mem_to_heap(psrc_buf: *const c_void,\n-                                               src_buf_len: size_t,\n-                                               pout_len: *mut size_t,\n-                                               flags: c_int)\n-                                            -> *c_void;\n+        pub unsafe fn tinfl_decompress_mem_to_heap(psrc_buf: *const c_void,\n+                                                   src_buf_len: size_t,\n+                                                   pout_len: *mut size_t,\n+                                                   flags: c_int)\n+                                                   -> *c_void;\n     }\n }\n "}, {"sha": "038ffd5788cc7a94176fd80c122fb938ace2194a", "filename": "src/libextra/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet%2Ftcp.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -35,11 +35,11 @@ pub mod rustrt {\n     use std::libc;\n \n     #[nolink]\n-    pub extern {\n-        unsafe fn rust_uv_current_kernel_malloc(size: libc::c_uint)\n-                                             -> *libc::c_void;\n-        unsafe fn rust_uv_current_kernel_free(mem: *libc::c_void);\n-        unsafe fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n+    extern {\n+        pub unsafe fn rust_uv_current_kernel_malloc(size: libc::c_uint)\n+                                                    -> *libc::c_void;\n+        pub unsafe fn rust_uv_current_kernel_free(mem: *libc::c_void);\n+        pub unsafe fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n     }\n }\n "}, {"sha": "e962eaa9677d450c0662023ff9152220bd42eca7", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -19,7 +19,7 @@ use std::str;\n pub mod rustrt {\n     use std::libc::{c_char, c_int};\n \n-    pub extern {\n+    extern {\n         pub unsafe fn linenoise(prompt: *c_char) -> *c_char;\n         pub unsafe fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n         pub unsafe fn linenoiseHistorySetMaxLen(len: c_int) -> c_int;"}, {"sha": "e08327f82c7904f9f30cca49493e94619a0d317c", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -22,7 +22,7 @@ pub mod rustrt {\n     use super::Tm;\n \n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         pub unsafe fn get_time(sec: &mut i64, nsec: &mut i32);\n \n         pub unsafe fn precise_time_ns(ns: &mut u64);"}, {"sha": "1b860cf2281847adc2cf6fc776bd981f69b7afb5", "filename": "src/libextra/unicode.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -161,15 +161,15 @@ pub mod icu {\n     pub mod libicu {\n         #[link_name = \"icuuc\"]\n         #[abi = \"cdecl\"]\n-        pub extern {\n-            unsafe fn u_hasBinaryProperty(c: UChar32, which: UProperty)\n-                                       -> UBool;\n-            unsafe fn u_isdigit(c: UChar32) -> UBool;\n-            unsafe fn u_islower(c: UChar32) -> UBool;\n-            unsafe fn u_isspace(c: UChar32) -> UBool;\n-            unsafe fn u_isupper(c: UChar32) -> UBool;\n-            unsafe fn u_tolower(c: UChar32) -> UChar32;\n-            unsafe fn u_toupper(c: UChar32) -> UChar32;\n+        extern {\n+            pub unsafe fn u_hasBinaryProperty(c: UChar32, which: UProperty)\n+                                              -> UBool;\n+            pub unsafe fn u_isdigit(c: UChar32) -> UBool;\n+            pub unsafe fn u_islower(c: UChar32) -> UBool;\n+            pub unsafe fn u_isspace(c: UChar32) -> UBool;\n+            pub unsafe fn u_isupper(c: UChar32) -> UBool;\n+            pub unsafe fn u_tolower(c: UChar32) -> UChar32;\n+            pub unsafe fn u_toupper(c: UChar32) -> UChar32;\n         }\n     }\n }"}, {"sha": "05992c431dac8f8dcbcef52f961d2265a954e400", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -273,7 +273,7 @@ pub mod llvm {\n     #[link_args = \"-Lrustllvm -lrustllvm\"]\n     #[link_name = \"rustllvm\"]\n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         /* Create and destroy contexts. */\n         #[fast_ffi]\n         pub unsafe fn LLVMContextCreate() -> ContextRef;"}, {"sha": "bb011a8cd32701f55be55c88b37dfc9f8f713700", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -166,7 +166,7 @@ pub mod rustrt {\n     use libc::c_void;\n \n     #[link_name = \"rustrt\"]\n-    pub extern {\n+    extern {\n         #[rust_stack]\n         // FIXME (#4386): Unable to make following method private.\n         pub unsafe fn rust_get_task() -> *c_void;"}, {"sha": "62be923d7707a0d73b68a61b32594827c6cef7aa", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -64,7 +64,7 @@ pub mod rustrt {\n     use super::StackSegment;\n \n     #[link_name = \"rustrt\"]\n-    pub extern {\n+    extern {\n         #[rust_stack]\n         pub unsafe fn rust_gc_metadata() -> *Word;\n "}, {"sha": "6ceaf5caea3604f320a04b68bc0914f4ac540ab2", "filename": "src/libstd/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -77,10 +77,10 @@ pub mod rustrt {\n \n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n-    pub extern {\n-        unsafe fn rust_get_stdin() -> *libc::FILE;\n-        unsafe fn rust_get_stdout() -> *libc::FILE;\n-        unsafe fn rust_get_stderr() -> *libc::FILE;\n+    extern {\n+        pub unsafe fn rust_get_stdin() -> *libc::FILE;\n+        pub unsafe fn rust_get_stdout() -> *libc::FILE;\n+        pub unsafe fn rust_get_stderr() -> *libc::FILE;\n     }\n }\n "}, {"sha": "bc360441f2fb1519cfd086bed3d91b12357d6a29", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 446, "deletions": 372, "changes": 818, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -2292,20 +2292,20 @@ pub mod funcs {\n         pub mod ctype {\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n-            pub extern {\n-                unsafe fn isalnum(c: c_int) -> c_int;\n-                unsafe fn isalpha(c: c_int) -> c_int;\n-                unsafe fn iscntrl(c: c_int) -> c_int;\n-                unsafe fn isdigit(c: c_int) -> c_int;\n-                unsafe fn isgraph(c: c_int) -> c_int;\n-                unsafe fn islower(c: c_int) -> c_int;\n-                unsafe fn isprint(c: c_int) -> c_int;\n-                unsafe fn ispunct(c: c_int) -> c_int;\n-                unsafe fn isspace(c: c_int) -> c_int;\n-                unsafe fn isupper(c: c_int) -> c_int;\n-                unsafe fn isxdigit(c: c_int) -> c_int;\n-                unsafe fn tolower(c: c_char) -> c_char;\n-                unsafe fn toupper(c: c_char) -> c_char;\n+            extern {\n+                pub unsafe fn isalnum(c: c_int) -> c_int;\n+                pub unsafe fn isalpha(c: c_int) -> c_int;\n+                pub unsafe fn iscntrl(c: c_int) -> c_int;\n+                pub unsafe fn isdigit(c: c_int) -> c_int;\n+                pub unsafe fn isgraph(c: c_int) -> c_int;\n+                pub unsafe fn islower(c: c_int) -> c_int;\n+                pub unsafe fn isprint(c: c_int) -> c_int;\n+                pub unsafe fn ispunct(c: c_int) -> c_int;\n+                pub unsafe fn isspace(c: c_int) -> c_int;\n+                pub unsafe fn isupper(c: c_int) -> c_int;\n+                pub unsafe fn isxdigit(c: c_int) -> c_int;\n+                pub unsafe fn tolower(c: c_char) -> c_char;\n+                pub unsafe fn toupper(c: c_char) -> c_char;\n             }\n         }\n \n@@ -2315,50 +2315,67 @@ pub mod funcs {\n             use libc::types::common::c95::{FILE, c_void, fpos_t};\n             use libc::types::os::arch::c95::{c_char, c_int, c_long, size_t};\n \n-            pub extern {\n-                unsafe fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n-                unsafe fn freopen(filename: *c_char, mode: *c_char,\n-                           file: *FILE) -> *FILE;\n-                unsafe fn fflush(file: *FILE) -> c_int;\n-                unsafe fn fclose(file: *FILE) -> c_int;\n-                unsafe fn remove(filename: *c_char) -> c_int;\n-                unsafe fn rename(oldname: *c_char, newname: *c_char) -> c_int;\n-                unsafe fn tmpfile() -> *FILE;\n-                unsafe fn setvbuf(stream: *FILE, buffer: *c_char,\n-                           mode: c_int, size: size_t) -> c_int;\n-                unsafe fn setbuf(stream: *FILE, buf: *c_char);\n+            extern {\n+                pub unsafe fn fopen(filename: *c_char, mode: *c_char)\n+                                    -> *FILE;\n+                pub unsafe fn freopen(filename: *c_char,\n+                                      mode: *c_char,\n+                                      file: *FILE)\n+                                      -> *FILE;\n+                pub unsafe fn fflush(file: *FILE) -> c_int;\n+                pub unsafe fn fclose(file: *FILE) -> c_int;\n+                pub unsafe fn remove(filename: *c_char) -> c_int;\n+                pub unsafe fn rename(oldname: *c_char, newname: *c_char)\n+                                     -> c_int;\n+                pub unsafe fn tmpfile() -> *FILE;\n+                pub unsafe fn setvbuf(stream: *FILE,\n+                                      buffer: *c_char,\n+                                      mode: c_int,\n+                                      size: size_t)\n+                                      -> c_int;\n+                pub unsafe fn setbuf(stream: *FILE, buf: *c_char);\n                 // Omitted: printf and scanf variants.\n-                unsafe fn fgetc(stream: *FILE) -> c_int;\n+                pub unsafe fn fgetc(stream: *FILE) -> c_int;\n                 #[fast_ffi]\n-                unsafe fn fgets(buf: *mut c_char, n: c_int,\n-                         stream: *FILE) -> *c_char;\n+                pub unsafe fn fgets(buf: *mut c_char,\n+                                    n: c_int,\n+                                    stream: *FILE)\n+                                    -> *c_char;\n                 #[fast_ffi]\n-                unsafe fn fputc(c: c_int, stream: *FILE) -> c_int;\n+                pub unsafe fn fputc(c: c_int, stream: *FILE) -> c_int;\n                 #[fast_ffi]\n-                unsafe fn fputs(s: *c_char, stream: *FILE) -> *c_char;\n+                pub unsafe fn fputs(s: *c_char, stream: *FILE) -> *c_char;\n                 // Omitted: getc, getchar (might be macros).\n \n                 // Omitted: gets, so ridiculously unsafe that it should not\n                 // survive.\n \n                 // Omitted: putc, putchar (might be macros).\n-                unsafe fn puts(s: *c_char) -> c_int;\n-                unsafe fn ungetc(c: c_int, stream: *FILE) -> c_int;\n+                pub unsafe fn puts(s: *c_char) -> c_int;\n+                pub unsafe fn ungetc(c: c_int, stream: *FILE) -> c_int;\n                 #[fast_ffi]\n-                unsafe fn fread(ptr: *mut c_void, size: size_t,\n-                         nobj: size_t, stream: *FILE) -> size_t;\n+                pub unsafe fn fread(ptr: *mut c_void,\n+                                    size: size_t,\n+                                    nobj: size_t,\n+                                    stream: *FILE)\n+                                    -> size_t;\n                 #[fast_ffi]\n-                unsafe fn fwrite(ptr: *c_void, size: size_t,\n-                          nobj: size_t, stream: *FILE) -> size_t;\n-                unsafe fn fseek(stream: *FILE, offset: c_long,\n-                         whence: c_int) -> c_int;\n-                unsafe fn ftell(stream: *FILE) -> c_long;\n-                unsafe fn rewind(stream: *FILE);\n-                unsafe fn fgetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n-                unsafe fn fsetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n-                unsafe fn feof(stream: *FILE) -> c_int;\n-                unsafe fn ferror(stream: *FILE) -> c_int;\n-                unsafe fn perror(s: *c_char);\n+                pub unsafe fn fwrite(ptr: *c_void,\n+                                     size: size_t,\n+                                     nobj: size_t,\n+                                     stream: *FILE)\n+                                     -> size_t;\n+                pub unsafe fn fseek(stream: *FILE,\n+                                    offset: c_long,\n+                                    whence: c_int)\n+                                    -> c_int;\n+                pub unsafe fn ftell(stream: *FILE) -> c_long;\n+                pub unsafe fn rewind(stream: *FILE);\n+                pub unsafe fn fgetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n+                pub unsafe fn fsetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n+                pub unsafe fn feof(stream: *FILE) -> c_int;\n+                pub unsafe fn ferror(stream: *FILE) -> c_int;\n+                pub unsafe fn perror(s: *c_char);\n             }\n         }\n \n@@ -2370,33 +2387,34 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_long, c_uint, c_ulong};\n             use libc::types::os::arch::c95::{size_t};\n \n-            pub extern {\n-                unsafe fn abs(i: c_int) -> c_int;\n-                unsafe fn labs(i: c_long) -> c_long;\n+            extern {\n+                pub unsafe fn abs(i: c_int) -> c_int;\n+                pub unsafe fn labs(i: c_long) -> c_long;\n                 // Omitted: div, ldiv (return pub type incomplete).\n-                unsafe fn atof(s: *c_char) -> c_double;\n-                unsafe fn atoi(s: *c_char) -> c_int;\n-                unsafe fn strtod(s: *c_char, endp: **c_char) -> c_double;\n-                unsafe fn strtol(s: *c_char, endp: **c_char, base: c_int)\n-                              -> c_long;\n-                unsafe fn strtoul(s: *c_char, endp: **c_char, base: c_int)\n-                               -> c_ulong;\n+                pub unsafe fn atof(s: *c_char) -> c_double;\n+                pub unsafe fn atoi(s: *c_char) -> c_int;\n+                pub unsafe fn strtod(s: *c_char, endp: **c_char) -> c_double;\n+                pub unsafe fn strtol(s: *c_char, endp: **c_char, base: c_int)\n+                                     -> c_long;\n+                pub unsafe fn strtoul(s: *c_char, endp: **c_char, base: c_int)\n+                                      -> c_ulong;\n                 #[fast_ffi]\n-                unsafe fn calloc(nobj: size_t, size: size_t) -> *c_void;\n+                pub unsafe fn calloc(nobj: size_t, size: size_t) -> *c_void;\n                 #[fast_ffi]\n-                unsafe fn malloc(size: size_t) -> *c_void;\n+                pub unsafe fn malloc(size: size_t) -> *c_void;\n                 #[fast_ffi]\n-                unsafe fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;\n+                pub unsafe fn realloc(p: *mut c_void, size: size_t)\n+                                      -> *mut c_void;\n                 #[fast_ffi]\n-                unsafe fn free(p: *c_void);\n-                unsafe fn abort() -> !;\n-                unsafe fn exit(status: c_int) -> !;\n+                pub unsafe fn free(p: *c_void);\n+                pub unsafe fn abort() -> !;\n+                pub unsafe fn exit(status: c_int) -> !;\n                 // Omitted: atexit.\n-                unsafe fn system(s: *c_char) -> c_int;\n-                unsafe fn getenv(s: *c_char) -> *c_char;\n+                pub unsafe fn system(s: *c_char) -> c_int;\n+                pub unsafe fn getenv(s: *c_char) -> *c_char;\n                 // Omitted: bsearch, qsort\n-                unsafe fn rand() -> c_int;\n-                unsafe fn srand(seed: c_uint);\n+                pub unsafe fn rand() -> c_int;\n+                pub unsafe fn srand(seed: c_uint);\n             }\n         }\n \n@@ -2407,41 +2425,42 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n             use libc::types::os::arch::c95::{wchar_t};\n \n-            pub extern {\n-                unsafe fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n-                unsafe fn strncpy(dst: *c_char, src: *c_char, n: size_t)\n-                               -> *c_char;\n-                unsafe fn strcat(s: *c_char, ct: *c_char) -> *c_char;\n-                unsafe fn strncat(s: *c_char, ct: *c_char, n: size_t)\n-                               -> *c_char;\n-                unsafe fn strcmp(cs: *c_char, ct: *c_char) -> c_int;\n-                unsafe fn strncmp(cs: *c_char, ct: *c_char, n: size_t)\n-                               -> c_int;\n-                unsafe fn strcoll(cs: *c_char, ct: *c_char) -> c_int;\n-                unsafe fn strchr(cs: *c_char, c: c_int) -> *c_char;\n-                unsafe fn strrchr(cs: *c_char, c: c_int) -> *c_char;\n-                unsafe fn strspn(cs: *c_char, ct: *c_char) -> size_t;\n-                unsafe fn strcspn(cs: *c_char, ct: *c_char) -> size_t;\n-                unsafe fn strpbrk(cs: *c_char, ct: *c_char) -> *c_char;\n-                unsafe fn strstr(cs: *c_char, ct: *c_char) -> *c_char;\n-                unsafe fn strlen(cs: *c_char) -> size_t;\n-                unsafe fn strerror(n: c_int) -> *c_char;\n-                unsafe fn strtok(s: *c_char, t: *c_char) -> *c_char;\n-                unsafe fn strxfrm(s: *c_char, ct: *c_char, n: size_t)\n-                               -> size_t;\n-                unsafe fn wcslen(buf: *wchar_t) -> size_t;\n+            extern {\n+                pub unsafe fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n+                pub unsafe fn strncpy(dst: *c_char, src: *c_char, n: size_t)\n+                                      -> *c_char;\n+                pub unsafe fn strcat(s: *c_char, ct: *c_char) -> *c_char;\n+                pub unsafe fn strncat(s: *c_char, ct: *c_char, n: size_t)\n+                                      -> *c_char;\n+                pub unsafe fn strcmp(cs: *c_char, ct: *c_char) -> c_int;\n+                pub unsafe fn strncmp(cs: *c_char, ct: *c_char, n: size_t)\n+                                      -> c_int;\n+                pub unsafe fn strcoll(cs: *c_char, ct: *c_char) -> c_int;\n+                pub unsafe fn strchr(cs: *c_char, c: c_int) -> *c_char;\n+                pub unsafe fn strrchr(cs: *c_char, c: c_int) -> *c_char;\n+                pub unsafe fn strspn(cs: *c_char, ct: *c_char) -> size_t;\n+                pub unsafe fn strcspn(cs: *c_char, ct: *c_char) -> size_t;\n+                pub unsafe fn strpbrk(cs: *c_char, ct: *c_char) -> *c_char;\n+                pub unsafe fn strstr(cs: *c_char, ct: *c_char) -> *c_char;\n+                pub unsafe fn strlen(cs: *c_char) -> size_t;\n+                pub unsafe fn strerror(n: c_int) -> *c_char;\n+                pub unsafe fn strtok(s: *c_char, t: *c_char) -> *c_char;\n+                pub unsafe fn strxfrm(s: *c_char, ct: *c_char, n: size_t)\n+                                      -> size_t;\n+                pub unsafe fn wcslen(buf: *wchar_t) -> size_t;\n \n                 // Omitted: memcpy, memmove, memset (provided by LLVM)\n \n                 // These are fine to execute on the Rust stack. They must be,\n                 // in fact, because LLVM generates calls to them!\n                 #[rust_stack]\n                 #[inline]\n-                unsafe fn memcmp(cx: *c_void, ct: *c_void, n: size_t)\n-                              -> c_int;\n+                pub unsafe fn memcmp(cx: *c_void, ct: *c_void, n: size_t)\n+                                     -> c_int;\n                 #[rust_stack]\n                 #[inline]\n-                unsafe fn memchr(cx: *c_void, c: c_int, n: size_t) -> *c_void;\n+                pub unsafe fn memchr(cx: *c_void, c: c_int, n: size_t)\n+                                     -> *c_void;\n             }\n         }\n     }\n@@ -2460,18 +2479,18 @@ pub mod funcs {\n             use libc::types::os::common::posix01::stat;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n-            pub extern {\n+            extern {\n                 #[link_name = \"_chmod\"]\n-                unsafe fn chmod(path: *c_char, mode: c_int) -> c_int;\n+                pub unsafe fn chmod(path: *c_char, mode: c_int) -> c_int;\n \n                 #[link_name = \"_mkdir\"]\n-                unsafe fn mkdir(path: *c_char) -> c_int;\n+                pub unsafe fn mkdir(path: *c_char) -> c_int;\n \n                 #[link_name = \"_fstat64\"]\n-                unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+                pub unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n                 #[link_name = \"_stat64\"]\n-                unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n             }\n         }\n \n@@ -2481,33 +2500,33 @@ pub mod funcs {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n-            pub extern {\n+            extern {\n                 #[link_name = \"_popen\"]\n-                unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n+                pub unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n \n                 #[link_name = \"_pclose\"]\n-                unsafe fn pclose(stream: *FILE) -> c_int;\n+                pub unsafe fn pclose(stream: *FILE) -> c_int;\n \n                 #[link_name = \"_fdopen\"]\n                 #[fast_ffi]\n-                unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n+                pub unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n \n                 #[link_name = \"_fileno\"]\n-                unsafe fn fileno(stream: *FILE) -> c_int;\n+                pub unsafe fn fileno(stream: *FILE) -> c_int;\n             }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub mod fcntl {\n             use libc::types::os::arch::c95::{c_int, c_char};\n-            pub extern {\n+            extern {\n                 #[link_name = \"_open\"]\n-                unsafe fn open(path: *c_char, oflag: c_int, mode: c_int)\n-                            -> c_int;\n+                pub unsafe fn open(path: *c_char, oflag: c_int, mode: c_int)\n+                                   -> c_int;\n \n                 #[link_name = \"_creat\"]\n-                unsafe fn creat(path: *c_char, mode: c_int) -> c_int;\n+                pub unsafe fn creat(path: *c_char, mode: c_int) -> c_int;\n             }\n         }\n \n@@ -2525,68 +2544,75 @@ pub mod funcs {\n                                              c_long, size_t};\n             use libc::types::os::arch::c99::intptr_t;\n \n-            pub extern {\n+            extern {\n                 #[link_name = \"_access\"]\n-                unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n+                pub unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n \n                 #[link_name = \"_chdir\"]\n-                unsafe fn chdir(dir: *c_char) -> c_int;\n+                pub unsafe fn chdir(dir: *c_char) -> c_int;\n \n                 #[link_name = \"_close\"]\n-                unsafe fn close(fd: c_int) -> c_int;\n+                pub unsafe fn close(fd: c_int) -> c_int;\n \n                 #[link_name = \"_dup\"]\n-                unsafe fn dup(fd: c_int) -> c_int;\n+                pub unsafe fn dup(fd: c_int) -> c_int;\n \n                 #[link_name = \"_dup2\"]\n-                unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n+                pub unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n \n                 #[link_name = \"_execv\"]\n-                unsafe fn execv(prog: *c_char, argv: **c_char) -> intptr_t;\n+                pub unsafe fn execv(prog: *c_char, argv: **c_char)\n+                                    -> intptr_t;\n \n                 #[link_name = \"_execve\"]\n-                unsafe fn execve(prog: *c_char, argv: **c_char,\n-                          envp: **c_char) -> c_int;\n+                pub unsafe fn execve(prog: *c_char,\n+                                     argv: **c_char,\n+                                     envp: **c_char)\n+                                     -> c_int;\n \n                 #[link_name = \"_execvp\"]\n-                unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n+                pub unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n \n                 #[link_name = \"_execvpe\"]\n-                unsafe fn execvpe(c: *c_char, argv: **c_char,\n-                           envp: **c_char) -> c_int;\n+                pub unsafe fn execvpe(c: *c_char,\n+                                      argv: **c_char,\n+                                      envp: **c_char)\n+                                      -> c_int;\n \n                 #[link_name = \"_getcwd\"]\n-                unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+                pub unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n \n                 #[link_name = \"_getpid\"]\n-                unsafe fn getpid() -> c_int;\n+                pub unsafe fn getpid() -> c_int;\n \n                 #[link_name = \"_isatty\"]\n-                unsafe fn isatty(fd: c_int) -> c_int;\n+                pub unsafe fn isatty(fd: c_int) -> c_int;\n \n                 #[link_name = \"_lseek\"]\n-                unsafe fn lseek(fd: c_int, offset: c_long, origin: c_int)\n-                             -> c_long;\n+                pub unsafe fn lseek(fd: c_int, offset: c_long, origin: c_int)\n+                                    -> c_long;\n \n                 #[link_name = \"_pipe\"]\n-                unsafe fn pipe(fds: *mut c_int, psize: c_uint,\n-                        textmode: c_int) -> c_int;\n+                pub unsafe fn pipe(fds: *mut c_int,\n+                                   psize: c_uint,\n+                                   textmode: c_int)\n+                                   -> c_int;\n \n                 #[link_name = \"_read\"]\n                 #[fast_ffi]\n-                unsafe fn read(fd: c_int, buf: *mut c_void, count: c_uint)\n-                            -> c_int;\n+                pub unsafe fn read(fd: c_int, buf: *mut c_void, count: c_uint)\n+                                   -> c_int;\n \n                 #[link_name = \"_rmdir\"]\n-                unsafe fn rmdir(path: *c_char) -> c_int;\n+                pub unsafe fn rmdir(path: *c_char) -> c_int;\n \n                 #[link_name = \"_unlink\"]\n-                unsafe fn unlink(c: *c_char) -> c_int;\n+                pub unsafe fn unlink(c: *c_char) -> c_int;\n \n                 #[link_name = \"_write\"]\n                 #[fast_ffi]\n-                unsafe fn write(fd: c_int, buf: *c_void, count: c_uint)\n-                             -> c_int;\n+                pub unsafe fn write(fd: c_int, buf: *c_void, count: c_uint)\n+                                    -> c_int;\n             }\n         }\n \n@@ -2607,30 +2633,30 @@ pub mod funcs {\n \n             #[nolink]\n             #[abi = \"cdecl\"]\n-            pub extern {\n-                unsafe fn chmod(path: *c_char, mode: mode_t) -> c_int;\n-                unsafe fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n+            extern {\n+                pub unsafe fn chmod(path: *c_char, mode: mode_t) -> c_int;\n+                pub unsafe fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n \n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n                 #[cfg(target_os = \"android\")]\n-               unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+                pub unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n                 #[link_name = \"fstat64\"]\n-                unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+                pub unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n-                unsafe fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n-                unsafe fn mkfifo(path: *c_char, mode: mode_t) -> c_int;\n+                pub unsafe fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n+                pub unsafe fn mkfifo(path: *c_char, mode: mode_t) -> c_int;\n \n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n                 #[cfg(target_os = \"android\")]\n-                unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n                 #[link_name = \"stat64\"]\n-                unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n             }\n         }\n \n@@ -2640,11 +2666,11 @@ pub mod funcs {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n-            pub extern {\n-                unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n-                unsafe fn pclose(stream: *FILE) -> c_int;\n-                unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n-                unsafe fn fileno(stream: *FILE) -> c_int;\n+            extern {\n+                pub unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n+                pub unsafe fn pclose(stream: *FILE) -> c_int;\n+                pub unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n+                pub unsafe fn fileno(stream: *FILE) -> c_int;\n             }\n         }\n \n@@ -2654,11 +2680,11 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::arch::posix88::mode_t;\n \n-            pub extern {\n-                unsafe fn open(path: *c_char, oflag: c_int, mode: c_int)\n-                            -> c_int;\n-                unsafe fn creat(path: *c_char, mode: mode_t) -> c_int;\n-                unsafe fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n+            extern {\n+                pub unsafe fn open(path: *c_char, oflag: c_int, mode: c_int)\n+                                   -> c_int;\n+                pub unsafe fn creat(path: *c_char, mode: mode_t) -> c_int;\n+                pub unsafe fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n             }\n         }\n \n@@ -2686,11 +2712,11 @@ pub mod funcs {\n                 unsafe fn rust_readdir(dirp: *DIR) -> *dirent_t;\n             }\n \n-            pub extern {\n-                unsafe fn closedir(dirp: *DIR) -> c_int;\n-                unsafe fn rewinddir(dirp: *DIR);\n-                unsafe fn seekdir(dirp: *DIR, loc: c_long);\n-                unsafe fn telldir(dirp: *DIR) -> c_long;\n+            extern {\n+                pub unsafe fn closedir(dirp: *DIR) -> c_int;\n+                pub unsafe fn rewinddir(dirp: *DIR);\n+                pub unsafe fn seekdir(dirp: *DIR, loc: c_long);\n+                pub unsafe fn telldir(dirp: *DIR) -> c_long;\n             }\n         }\n \n@@ -2703,59 +2729,63 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::{gid_t, off_t, pid_t};\n             use libc::types::os::arch::posix88::{ssize_t, uid_t};\n \n-            pub extern {\n-                unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n-                unsafe fn alarm(seconds: c_uint) -> c_uint;\n-                unsafe fn chdir(dir: *c_char) -> c_int;\n-                unsafe fn chown(path: *c_char, uid: uid_t, gid: gid_t)\n-                             -> c_int;\n-                unsafe fn close(fd: c_int) -> c_int;\n-                unsafe fn dup(fd: c_int) -> c_int;\n-                unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n-                unsafe fn execv(prog: *c_char, argv: **c_char) -> c_int;\n-                unsafe fn execve(prog: *c_char,\n-                                 argv: **c_char,\n-                                 envp: **c_char)\n-                              -> c_int;\n-                unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n-                unsafe fn fork() -> pid_t;\n-                unsafe fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n-                unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n-                unsafe fn getegid() -> gid_t;\n-                unsafe fn geteuid() -> uid_t;\n-                unsafe fn getgid() -> gid_t ;\n-                unsafe fn getgroups(ngroups_max: c_int, groups: *mut gid_t)\n-                                 -> c_int;\n-                unsafe fn getlogin() -> *c_char;\n-                unsafe fn getopt(argc: c_int, argv: **c_char, optstr: *c_char)\n-                              -> c_int;\n-                unsafe fn getpgrp() -> pid_t;\n-                unsafe fn getpid() -> pid_t;\n-                unsafe fn getppid() -> pid_t;\n-                unsafe fn getuid() -> uid_t;\n-                unsafe fn isatty(fd: c_int) -> c_int;\n-                unsafe fn link(src: *c_char, dst: *c_char) -> c_int;\n-                unsafe fn lseek(fd: c_int, offset: off_t, whence: c_int)\n-                             -> off_t;\n-                unsafe fn pathconf(path: *c_char, name: c_int) -> c_long;\n-                unsafe fn pause() -> c_int;\n-                unsafe fn pipe(fds: *mut c_int) -> c_int;\n+            extern {\n+                pub unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n+                pub unsafe fn alarm(seconds: c_uint) -> c_uint;\n+                pub unsafe fn chdir(dir: *c_char) -> c_int;\n+                pub unsafe fn chown(path: *c_char, uid: uid_t, gid: gid_t)\n+                                    -> c_int;\n+                pub unsafe fn close(fd: c_int) -> c_int;\n+                pub unsafe fn dup(fd: c_int) -> c_int;\n+                pub unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n+                pub unsafe fn execv(prog: *c_char, argv: **c_char) -> c_int;\n+                pub unsafe fn execve(prog: *c_char,\n+                                     argv: **c_char,\n+                                     envp: **c_char)\n+                                     -> c_int;\n+                pub unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n+                pub unsafe fn fork() -> pid_t;\n+                pub unsafe fn fpathconf(filedes: c_int, name: c_int)\n+                                        -> c_long;\n+                pub unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+                pub unsafe fn getegid() -> gid_t;\n+                pub unsafe fn geteuid() -> uid_t;\n+                pub unsafe fn getgid() -> gid_t ;\n+                pub unsafe fn getgroups(ngroups_max: c_int,\n+                                        groups: *mut gid_t)\n+                                        -> c_int;\n+                pub unsafe fn getlogin() -> *c_char;\n+                pub unsafe fn getopt(argc: c_int,\n+                                     argv: **c_char,\n+                                     optstr: *c_char)\n+                                     -> c_int;\n+                pub unsafe fn getpgrp() -> pid_t;\n+                pub unsafe fn getpid() -> pid_t;\n+                pub unsafe fn getppid() -> pid_t;\n+                pub unsafe fn getuid() -> uid_t;\n+                pub unsafe fn isatty(fd: c_int) -> c_int;\n+                pub unsafe fn link(src: *c_char, dst: *c_char) -> c_int;\n+                pub unsafe fn lseek(fd: c_int, offset: off_t, whence: c_int)\n+                                    -> off_t;\n+                pub unsafe fn pathconf(path: *c_char, name: c_int) -> c_long;\n+                pub unsafe fn pause() -> c_int;\n+                pub unsafe fn pipe(fds: *mut c_int) -> c_int;\n                 #[fast_ffi]\n-                unsafe fn read(fd: c_int, buf: *mut c_void,\n-                        count: size_t) -> ssize_t;\n-                unsafe fn rmdir(path: *c_char) -> c_int;\n-                unsafe fn setgid(gid: gid_t) -> c_int;\n-                unsafe fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;\n-                unsafe fn setsid() -> pid_t;\n-                unsafe fn setuid(uid: uid_t) -> c_int;\n-                unsafe fn sleep(secs: c_uint) -> c_uint;\n-                unsafe fn sysconf(name: c_int) -> c_long;\n-                unsafe fn tcgetpgrp(fd: c_int) -> pid_t;\n-                unsafe fn ttyname(fd: c_int) -> *c_char;\n-                unsafe fn unlink(c: *c_char) -> c_int;\n+                pub unsafe fn read(fd: c_int, buf: *mut c_void, count: size_t)\n+                                   -> ssize_t;\n+                pub unsafe fn rmdir(path: *c_char) -> c_int;\n+                pub unsafe fn setgid(gid: gid_t) -> c_int;\n+                pub unsafe fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;\n+                pub unsafe fn setsid() -> pid_t;\n+                pub unsafe fn setuid(uid: uid_t) -> c_int;\n+                pub unsafe fn sleep(secs: c_uint) -> c_uint;\n+                pub unsafe fn sysconf(name: c_int) -> c_long;\n+                pub unsafe fn tcgetpgrp(fd: c_int) -> pid_t;\n+                pub unsafe fn ttyname(fd: c_int) -> *c_char;\n+                pub unsafe fn unlink(c: *c_char) -> c_int;\n                 #[fast_ffi]\n-                unsafe fn write(fd: c_int, buf: *c_void, count: size_t)\n-                             -> ssize_t;\n+                pub unsafe fn write(fd: c_int, buf: *c_void, count: size_t)\n+                                    -> ssize_t;\n             }\n         }\n \n@@ -2765,8 +2795,8 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_int};\n             use libc::types::os::arch::posix88::{pid_t};\n \n-            pub extern {\n-                unsafe fn kill(pid: pid_t, sig: c_int) -> c_int;\n+            extern {\n+                pub unsafe fn kill(pid: pid_t, sig: c_int) -> c_int;\n             }\n         }\n \n@@ -2777,28 +2807,33 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{size_t, c_int, c_char};\n             use libc::types::os::arch::posix88::{mode_t, off_t};\n \n-            pub extern {\n-                unsafe fn mlock(addr: *c_void, len: size_t) -> c_int;\n-                unsafe fn munlock(addr: *c_void, len: size_t) -> c_int;\n-                unsafe fn mlockall(flags: c_int) -> c_int;\n-                unsafe fn munlockall() -> c_int;\n-\n-                unsafe fn mmap(addr: *c_void,\n-                               len: size_t,\n-                               prot: c_int,\n-                               flags: c_int,\n-                               fd: c_int,\n-                               offset: off_t) -> *mut c_void;\n-                unsafe fn munmap(addr: *c_void, len: size_t) -> c_int;\n-\n-                unsafe fn mprotect(addr: *c_void, len: size_t, prot: c_int)\n-                    -> c_int;\n-\n-                unsafe fn msync(addr: *c_void, len: size_t, flags: c_int)\n-                    -> c_int;\n-                unsafe fn shm_open(name: *c_char, oflag: c_int, mode: mode_t)\n-                    -> c_int;\n-                unsafe fn shm_unlink(name: *c_char) -> c_int;\n+            extern {\n+                pub unsafe fn mlock(addr: *c_void, len: size_t) -> c_int;\n+                pub unsafe fn munlock(addr: *c_void, len: size_t) -> c_int;\n+                pub unsafe fn mlockall(flags: c_int) -> c_int;\n+                pub unsafe fn munlockall() -> c_int;\n+\n+                pub unsafe fn mmap(addr: *c_void,\n+                                   len: size_t,\n+                                   prot: c_int,\n+                                   flags: c_int,\n+                                   fd: c_int,\n+                                   offset: off_t)\n+                                   -> *mut c_void;\n+                pub unsafe fn munmap(addr: *c_void, len: size_t) -> c_int;\n+\n+                pub unsafe fn mprotect(addr: *c_void,\n+                                       len: size_t,\n+                                       prot: c_int)\n+                                       -> c_int;\n+\n+                pub unsafe fn msync(addr: *c_void, len: size_t, flags: c_int)\n+                                    -> c_int;\n+                pub unsafe fn shm_open(name: *c_char,\n+                                       oflag: c_int,\n+                                       mode: mode_t)\n+                                       -> c_int;\n+                pub unsafe fn shm_unlink(name: *c_char) -> c_int;\n             }\n         }\n     }\n@@ -2814,15 +2849,15 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::arch::posix01::stat;\n \n-            pub extern {\n+            extern {\n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n                 #[cfg(target_os = \"android\")]\n-                unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n                 #[link_name = \"lstat64\"]\n-                unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n             }\n         }\n \n@@ -2832,22 +2867,27 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n             use libc::types::os::arch::posix88::{ssize_t};\n \n-            pub extern {\n-                unsafe fn readlink(path: *c_char, buf: *mut c_char,\n-                            bufsz: size_t) -> ssize_t;\n+            extern {\n+                pub unsafe fn readlink(path: *c_char,\n+                                       buf: *mut c_char,\n+                                       bufsz: size_t)\n+                                       -> ssize_t;\n \n-                unsafe fn fsync(fd: c_int) -> c_int;\n+                pub unsafe fn fsync(fd: c_int) -> c_int;\n \n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"android\")]\n-                unsafe fn fdatasync(fd: c_int) -> c_int;\n+                pub unsafe fn fdatasync(fd: c_int) -> c_int;\n \n-                unsafe fn setenv(name: *c_char, val: *c_char,\n-                          overwrite: c_int) -> c_int;\n-                unsafe fn unsetenv(name: *c_char) -> c_int;\n-                unsafe fn putenv(string: *c_char) -> c_int;\n+                pub unsafe fn setenv(name: *c_char,\n+                                     val: *c_char,\n+                                     overwrite: c_int)\n+                                     -> c_int;\n+                pub unsafe fn unsetenv(name: *c_char) -> c_int;\n+                pub unsafe fn putenv(string: *c_char) -> c_int;\n \n-                unsafe fn symlink(path1: *c_char, path2: *c_char) -> c_int;\n+                pub unsafe fn symlink(path1: *c_char, path2: *c_char)\n+                                      -> c_int;\n             }\n         }\n \n@@ -2857,11 +2897,11 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_int};\n             use libc::types::os::arch::posix88::{pid_t};\n \n-            pub extern {\n-                unsafe fn waitpid(pid: pid_t,\n-                                  status: *mut c_int,\n-                                  options: c_int)\n-                               -> pid_t;\n+            extern {\n+                pub unsafe fn waitpid(pid: pid_t,\n+                                      status: *mut c_int,\n+                                      options: c_int)\n+                                      -> pid_t;\n             }\n         }\n \n@@ -2872,11 +2912,12 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int};\n             use libc::types::os::common::posix01::{glob_t};\n \n-            pub extern {\n-                unsafe fn glob(pattern: *c_char, flags: c_int,\n-                               errfunc: *c_void, // XXX callback\n-                               pglob: *mut glob_t);\n-                unsafe fn globfree(pglob: *mut glob_t);\n+            extern {\n+                pub unsafe fn glob(pattern: *c_char,\n+                                   flags: c_int,\n+                                   errfunc: *c_void, // XXX callback\n+                                   pglob: *mut glob_t);\n+                pub unsafe fn globfree(pglob: *mut glob_t);\n             }\n         }\n \n@@ -2886,10 +2927,11 @@ pub mod funcs {\n             use libc::types::common::c95::{c_void};\n             use libc::types::os::arch::c95::{c_int, size_t};\n \n-            pub extern {\n-                unsafe fn posix_madvise(addr: *c_void,\n-                                        len: size_t,\n-                                        advice: c_int) -> c_int;\n+            extern {\n+                pub unsafe fn posix_madvise(addr: *c_void,\n+                                            len: size_t,\n+                                            advice: c_int)\n+                                            -> c_int;\n             }\n         }\n     }\n@@ -2929,25 +2971,34 @@ pub mod funcs {\n                                          size_t};\n \n         #[abi = \"cdecl\"]\n-        pub extern {\n-            unsafe fn sysctl(name: *c_int, namelen: c_uint,\n-                      oldp: *mut c_void, oldlenp: *mut size_t,\n-                      newp: *c_void, newlen: size_t) -> c_int;\n+        extern {\n+            pub unsafe fn sysctl(name: *c_int,\n+                                 namelen: c_uint,\n+                                 oldp: *mut c_void,\n+                                 oldlenp: *mut size_t,\n+                                 newp: *c_void,\n+                                 newlen: size_t)\n+                                 -> c_int;\n \n-            unsafe fn sysctlbyname(name: *c_char,\n-                            oldp: *mut c_void, oldlenp: *mut size_t,\n-                            newp: *c_void, newlen: size_t) -> c_int;\n+            pub unsafe fn sysctlbyname(name: *c_char,\n+                                       oldp: *mut c_void,\n+                                       oldlenp: *mut size_t,\n+                                       newp: *c_void,\n+                                       newlen: size_t)\n+                                       -> c_int;\n \n-            unsafe fn sysctlnametomib(name: *c_char, mibp: *mut c_int,\n-                               sizep: *mut size_t) -> c_int;\n+            pub unsafe fn sysctlnametomib(name: *c_char,\n+                                          mibp: *mut c_int,\n+                                          sizep: *mut size_t)\n+                                          -> c_int;\n \n-            unsafe fn getdtablesize() -> c_int;\n+            pub unsafe fn getdtablesize() -> c_int;\n \n-            unsafe fn madvise(addr: *c_void, len: size_t, advice: c_int)\n-                -> c_int;\n+            pub unsafe fn madvise(addr: *c_void, len: size_t, advice: c_int)\n+                                  -> c_int;\n \n-            unsafe fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n-                -> c_int;\n+            pub unsafe fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n+                                  -> c_int;\n         }\n     }\n \n@@ -2959,14 +3010,14 @@ pub mod funcs {\n         use libc::types::os::arch::c95::{c_uchar, c_int, size_t};\n \n         #[abi = \"cdecl\"]\n-        pub extern {\n-            unsafe fn getdtablesize() -> c_int;\n+        extern {\n+            pub unsafe fn getdtablesize() -> c_int;\n \n-            unsafe fn madvise(addr: *c_void, len: size_t, advice: c_int)\n-                -> c_int;\n+            pub unsafe fn madvise(addr: *c_void, len: size_t, advice: c_int)\n+                                  -> c_int;\n \n-            unsafe fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n-                -> c_int;\n+            pub unsafe fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n+                                  -> c_int;\n         }\n     }\n \n@@ -2981,10 +3032,10 @@ pub mod funcs {\n         use libc::types::os::arch::c95::{c_char, c_int};\n \n         #[abi = \"cdecl\"]\n-        pub extern {\n-            unsafe fn _NSGetExecutablePath(buf: *mut c_char,\n-                                           bufsize: *mut u32)\n-                                        -> c_int;\n+        extern {\n+            pub unsafe fn _NSGetExecutablePath(buf: *mut c_char,\n+                                               bufsize: *mut u32)\n+                                               -> c_int;\n         }\n     }\n \n@@ -3014,96 +3065,119 @@ pub mod funcs {\n             use libc::types::os::arch::extra::{HANDLE, LPHANDLE};\n \n             #[abi = \"stdcall\"]\n-            pub extern \"stdcall\" {\n-                unsafe fn GetEnvironmentVariableW(n: LPCWSTR,\n-                                                  v: LPWSTR,\n-                                                  nsize: DWORD)\n-                                               -> DWORD;\n-                unsafe fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n-                                               -> BOOL;\n-                unsafe fn GetEnvironmentStringsA() -> LPTCH;\n-                unsafe fn FreeEnvironmentStringsA(env_ptr: LPTCH) -> BOOL;\n-\n-                unsafe fn GetModuleFileNameW(hModule: HMODULE,\n-                                             lpFilename: LPWSTR,\n-                                             nSize: DWORD)\n-                                          -> DWORD;\n-                unsafe fn CreateDirectoryW(lpPathName: LPCWSTR,\n-                                           lpSecurityAttributes:\n-                                           LPSECURITY_ATTRIBUTES)\n+            extern \"stdcall\" {\n+                pub unsafe fn GetEnvironmentVariableW(n: LPCWSTR,\n+                                                      v: LPWSTR,\n+                                                      nsize: DWORD)\n+                                                      -> DWORD;\n+                pub unsafe fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n+                                                      -> BOOL;\n+                pub unsafe fn GetEnvironmentStringsA() -> LPTCH;\n+                pub unsafe fn FreeEnvironmentStringsA(env_ptr: LPTCH) -> BOOL;\n+\n+                pub unsafe fn GetModuleFileNameW(hModule: HMODULE,\n+                                                 lpFilename: LPWSTR,\n+                                                 nSize: DWORD)\n+                                                 -> DWORD;\n+                pub unsafe fn CreateDirectoryW(lpPathName: LPCWSTR,\n+                                               lpSecurityAttributes:\n+                                               LPSECURITY_ATTRIBUTES)\n+                                            -> BOOL;\n+                pub unsafe fn CopyFileW(lpExistingFileName: LPCWSTR,\n+                                        lpNewFileName: LPCWSTR,\n+                                        bFailIfExists: BOOL)\n                                         -> BOOL;\n-                unsafe fn CopyFileW(lpExistingFileName: LPCWSTR,\n-                                    lpNewFileName: LPCWSTR,\n-                                    bFailIfExists: BOOL)\n-                                 -> BOOL;\n-                unsafe fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n-                unsafe fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-                unsafe fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-\n-                unsafe fn GetLastError() -> DWORD;\n-                unsafe fn FindFirstFileW(fileName: *u16,\n-                                        findFileData: HANDLE)\n-                    -> HANDLE;\n-                unsafe fn FindNextFileW(findFile: HANDLE,\n-                                       findFileData: HANDLE)\n-                    -> BOOL;\n-                unsafe fn FindClose(findFile: HANDLE) -> BOOL;\n-                unsafe fn DuplicateHandle(hSourceProcessHandle: HANDLE,\n-                                          hSourceHandle: HANDLE,\n-                                          hTargetProcessHandle: HANDLE,\n-                                          lpTargetHandle: LPHANDLE,\n-                                          dwDesiredAccess: DWORD,\n+                pub unsafe fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n+                pub unsafe fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub unsafe fn SetCurrentDirectoryW(lpPathName: LPCWSTR)\n+                                                   -> BOOL;\n+\n+                pub unsafe fn GetLastError() -> DWORD;\n+                pub unsafe fn FindFirstFileW(fileName: *u16,\n+                                             findFileData: HANDLE)\n+                                             -> HANDLE;\n+                pub unsafe fn FindNextFileW(findFile: HANDLE,\n+                                            findFileData: HANDLE)\n+                                            -> BOOL;\n+                pub unsafe fn FindClose(findFile: HANDLE) -> BOOL;\n+                pub unsafe fn DuplicateHandle(hSourceProcessHandle: HANDLE,\n+                                              hSourceHandle: HANDLE,\n+                                              hTargetProcessHandle: HANDLE,\n+                                              lpTargetHandle: LPHANDLE,\n+                                              dwDesiredAccess: DWORD,\n+                                              bInheritHandle: BOOL,\n+                                              dwOptions: DWORD)\n+                                              -> BOOL;\n+                pub unsafe fn CloseHandle(hObject: HANDLE) -> BOOL;\n+                pub unsafe fn OpenProcess(dwDesiredAccess: DWORD,\n                                           bInheritHandle: BOOL,\n-                                          dwOptions: DWORD) -> BOOL;\n-                unsafe fn CloseHandle(hObject: HANDLE) -> BOOL;\n-                unsafe fn OpenProcess(dwDesiredAccess: DWORD,\n-                                      bInheritHandle: BOOL,\n-                                      dwProcessId: DWORD) -> HANDLE;\n-                unsafe fn GetCurrentProcess() -> HANDLE;\n-                unsafe fn CreateProcessA(lpApplicationName: LPCTSTR,\n-                                         lpCommandLine: LPTSTR,\n-                                         lpProcessAttributes: LPSECURITY_ATTRIBUTES,\n-                                         lpThreadAttributes: LPSECURITY_ATTRIBUTES,\n-                                         bInheritHandles: BOOL,\n-                                         dwCreationFlags: DWORD,\n-                                         lpEnvironment: LPVOID,\n-                                         lpCurrentDirectory: LPCTSTR,\n-                                         lpStartupInfo: LPSTARTUPINFO,\n-                                         lpProcessInformation: LPPROCESS_INFORMATION) -> BOOL;\n-                unsafe fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n-                unsafe fn TerminateProcess(hProcess: HANDLE, uExitCode: c_uint) -> BOOL;\n-                unsafe fn GetExitCodeProcess(hProcess: HANDLE, lpExitCode: LPDWORD) -> BOOL;\n-\n-                unsafe fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n-                unsafe fn VirtualAlloc(lpAddress: LPVOID,\n-                                       dwSize: SIZE_T,\n-                                       flAllocationType: DWORD,\n-                                       flProtect: DWORD) -> LPVOID;\n-                unsafe fn VirtualFree(lpAddress: LPVOID,\n-                                      dwSize: SIZE_T,\n-                                      dwFreeType: DWORD) -> BOOL;\n-                unsafe fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;\n-                unsafe fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;\n-                unsafe fn VirtualProtect(lpAddress: LPVOID,\n-                                         dwSize: SIZE_T,\n-                                         flNewProtect: DWORD,\n-                                         lpflOldProtect: LPDWORD) -> BOOL;\n-                unsafe fn VirtualQuery(lpAddress: LPCVOID,\n-                                       lpBuffer: LPMEMORY_BASIC_INFORMATION,\n-                                       dwLength: SIZE_T) -> SIZE_T;\n-\n-                unsafe fn CreateFileMappingW(hFile: HANDLE,\n-                                             lpAttributes: LPSECURITY_ATTRIBUTES,\n-                                             flProtect: DWORD,\n-                                             dwMaximumSizeHigh: DWORD,\n-                                             dwMaximumSizeLow: DWORD,\n-                                             lpName: LPCTSTR) -> HANDLE;\n-                unsafe fn MapViewOfFile(hFileMappingObject: HANDLE,\n-                                        dwDesiredAccess: DWORD,\n-                                        dwFileOffsetHigh: DWORD,\n-                                        dwFileOffsetLow: DWORD,\n-                                        dwNumberOfBytesToMap: SIZE_T) -> LPVOID;\n-                unsafe fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n+                                          dwProcessId: DWORD)\n+                                          -> HANDLE;\n+                pub unsafe fn GetCurrentProcess() -> HANDLE;\n+                pub unsafe fn CreateProcessA(lpApplicationName: LPCTSTR,\n+                                             lpCommandLine: LPTSTR,\n+                                             lpProcessAttributes:\n+                                             LPSECURITY_ATTRIBUTES,\n+                                             lpThreadAttributes:\n+                                             LPSECURITY_ATTRIBUTES,\n+                                             bInheritHandles: BOOL,\n+                                             dwCreationFlags: DWORD,\n+                                             lpEnvironment: LPVOID,\n+                                             lpCurrentDirectory: LPCTSTR,\n+                                             lpStartupInfo: LPSTARTUPINFO,\n+                                             lpProcessInformation:\n+                                             LPPROCESS_INFORMATION)\n+                                             -> BOOL;\n+                pub unsafe fn WaitForSingleObject(hHandle: HANDLE,\n+                                                  dwMilliseconds: DWORD)\n+                                                  -> DWORD;\n+                pub unsafe fn TerminateProcess(hProcess: HANDLE,\n+                                               uExitCode: c_uint)\n+                                               -> BOOL;\n+                pub unsafe fn GetExitCodeProcess(hProcess: HANDLE,\n+                                                 lpExitCode: LPDWORD)\n+                                                 -> BOOL;\n+\n+                pub unsafe fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n+                pub unsafe fn VirtualAlloc(lpAddress: LPVOID,\n+                                           dwSize: SIZE_T,\n+                                           flAllocationType: DWORD,\n+                                           flProtect: DWORD)\n+                                           -> LPVOID;\n+                pub unsafe fn VirtualFree(lpAddress: LPVOID,\n+                                          dwSize: SIZE_T,\n+                                          dwFreeType: DWORD)\n+                                          -> BOOL;\n+                pub unsafe fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T)\n+                                          -> BOOL;\n+                pub unsafe fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T)\n+                                            -> BOOL;\n+                pub unsafe fn VirtualProtect(lpAddress: LPVOID,\n+                                             dwSize: SIZE_T,\n+                                             flNewProtect: DWORD,\n+                                             lpflOldProtect: LPDWORD)\n+                                             -> BOOL;\n+                pub unsafe fn VirtualQuery(lpAddress: LPCVOID,\n+                                           lpBuffer:\n+                                           LPMEMORY_BASIC_INFORMATION,\n+                                           dwLength: SIZE_T)\n+                                           -> SIZE_T;\n+\n+                pub unsafe fn CreateFileMappingW(hFile: HANDLE,\n+                                                 lpAttributes:\n+                                                 LPSECURITY_ATTRIBUTES,\n+                                                 flProtect: DWORD,\n+                                                 dwMaximumSizeHigh: DWORD,\n+                                                 dwMaximumSizeLow: DWORD,\n+                                                 lpName: LPCTSTR)\n+                                                 -> HANDLE;\n+                pub unsafe fn MapViewOfFile(hFileMappingObject: HANDLE,\n+                                            dwDesiredAccess: DWORD,\n+                                            dwFileOffsetHigh: DWORD,\n+                                            dwFileOffsetLow: DWORD,\n+                                            dwNumberOfBytesToMap: SIZE_T)\n+                                            -> LPVOID;\n+                pub unsafe fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n             }\n         }\n \n@@ -3112,12 +3186,12 @@ pub mod funcs {\n \n             #[abi = \"cdecl\"]\n             #[nolink]\n-            pub extern {\n+            extern {\n                 #[link_name = \"_commit\"]\n-                unsafe fn commit(fd: c_int) -> c_int;\n+                pub unsafe fn commit(fd: c_int) -> c_int;\n \n                 #[link_name = \"_get_osfhandle\"]\n-                unsafe fn get_osfhandle(fd: c_int) -> c_long;\n+                pub unsafe fn get_osfhandle(fd: c_int) -> c_long;\n             }\n         }\n     }"}, {"sha": "e3dae5308fed957ce88dd71744935f41ec3d7114", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -104,11 +104,11 @@ fn newsched_log_str(msg: ~str) {\n pub mod rustrt {\n     use libc;\n \n-    pub extern {\n-        unsafe fn rust_log_console_on();\n-        unsafe fn rust_log_console_off();\n-        unsafe fn rust_log_str(level: u32,\n-                               string: *libc::c_char,\n-                               size: libc::size_t);\n+    extern {\n+        pub unsafe fn rust_log_console_on();\n+        pub unsafe fn rust_log_console_off();\n+        pub unsafe fn rust_log_str(level: u32,\n+                                   string: *libc::c_char,\n+                                   size: libc::size_t);\n     }\n }"}, {"sha": "f7aa3267d6dc927995992ec5be65d7e29720a77f", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 133, "deletions": 99, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -19,81 +19,86 @@ pub mod c_double_utils {\n \n     #[link_name = \"m\"]\n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         // Alpabetically sorted by link_name\n \n-        unsafe fn acos(n: c_double) -> c_double;\n-        unsafe fn asin(n: c_double) -> c_double;\n-        unsafe fn atan(n: c_double) -> c_double;\n-        unsafe fn atan2(a: c_double, b: c_double) -> c_double;\n-        unsafe fn cbrt(n: c_double) -> c_double;\n-        unsafe fn ceil(n: c_double) -> c_double;\n-        unsafe fn copysign(x: c_double, y: c_double) -> c_double;\n-        unsafe fn cos(n: c_double) -> c_double;\n-        unsafe fn cosh(n: c_double) -> c_double;\n-        unsafe fn erf(n: c_double) -> c_double;\n-        unsafe fn erfc(n: c_double) -> c_double;\n-        unsafe fn exp(n: c_double) -> c_double;\n+        pub unsafe fn acos(n: c_double) -> c_double;\n+        pub unsafe fn asin(n: c_double) -> c_double;\n+        pub unsafe fn atan(n: c_double) -> c_double;\n+        pub unsafe fn atan2(a: c_double, b: c_double) -> c_double;\n+        pub unsafe fn cbrt(n: c_double) -> c_double;\n+        pub unsafe fn ceil(n: c_double) -> c_double;\n+        pub unsafe fn copysign(x: c_double, y: c_double) -> c_double;\n+        pub unsafe fn cos(n: c_double) -> c_double;\n+        pub unsafe fn cosh(n: c_double) -> c_double;\n+        pub unsafe fn erf(n: c_double) -> c_double;\n+        pub unsafe fn erfc(n: c_double) -> c_double;\n+        pub unsafe fn exp(n: c_double) -> c_double;\n         // rename: for consistency with underscore usage elsewhere\n         #[link_name=\"expm1\"] unsafe fn exp_m1(n: c_double) -> c_double;\n-        unsafe fn exp2(n: c_double) -> c_double;\n+        pub unsafe fn exp2(n: c_double) -> c_double;\n         #[link_name=\"fabs\"] unsafe fn abs(n: c_double) -> c_double;\n         // rename: for clarity and consistency with add/sub/mul/div\n         #[link_name=\"fdim\"]\n-        unsafe fn abs_sub(a: c_double, b: c_double) -> c_double;\n-        unsafe fn floor(n: c_double) -> c_double;\n+        pub unsafe fn abs_sub(a: c_double, b: c_double) -> c_double;\n+        pub unsafe fn floor(n: c_double) -> c_double;\n         // rename: for clarity and consistency with add/sub/mul/div\n         #[link_name=\"fma\"]\n-        unsafe fn mul_add(a: c_double, b: c_double, c: c_double) -> c_double;\n+        pub unsafe fn mul_add(a: c_double, b: c_double, c: c_double)\n+                              -> c_double;\n         #[link_name=\"fmax\"]\n-        unsafe fn fmax(a: c_double, b: c_double) -> c_double;\n+        pub unsafe fn fmax(a: c_double, b: c_double) -> c_double;\n         #[link_name=\"fmin\"]\n-        unsafe fn fmin(a: c_double, b: c_double) -> c_double;\n+        pub unsafe fn fmin(a: c_double, b: c_double) -> c_double;\n         #[link_name=\"nextafter\"]\n-        unsafe fn next_after(x: c_double, y: c_double) -> c_double;\n-        unsafe fn frexp(n: c_double, value: &mut c_int) -> c_double;\n-        unsafe fn hypot(x: c_double, y: c_double) -> c_double;\n-        unsafe fn ldexp(x: c_double, n: c_int) -> c_double;\n+        pub unsafe fn next_after(x: c_double, y: c_double) -> c_double;\n+        pub unsafe fn frexp(n: c_double, value: &mut c_int) -> c_double;\n+        pub unsafe fn hypot(x: c_double, y: c_double) -> c_double;\n+        pub unsafe fn ldexp(x: c_double, n: c_int) -> c_double;\n         #[cfg(unix)]\n         #[link_name=\"lgamma_r\"]\n-        unsafe fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+        pub unsafe fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n         #[cfg(windows)]\n         #[link_name=\"__lgamma_r\"]\n-        unsafe fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n-        // renamed: log is a reserved keyword; ln seems more natural, too\n-        #[link_name=\"log\"] unsafe fn ln(n: c_double) -> c_double;\n+        pub unsafe fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+        // renamed: ln seems more natural\n+        #[link_name=\"log\"]\n+        pub unsafe fn ln(n: c_double) -> c_double;\n         // renamed: \"logb\" /often/ is confused for log2 by beginners\n-        #[link_name=\"logb\"] unsafe fn log_radix(n: c_double) -> c_double;\n+        #[link_name=\"logb\"]\n+        pub unsafe fn log_radix(n: c_double) -> c_double;\n         // renamed: to be consitent with log as ln\n-        #[link_name=\"log1p\"] unsafe fn ln_1p(n: c_double) -> c_double;\n-        unsafe fn log10(n: c_double) -> c_double;\n-        unsafe fn log2(n: c_double) -> c_double;\n-        #[link_name=\"ilogb\"] unsafe fn ilog_radix(n: c_double) -> c_int;\n-        unsafe fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n-        unsafe fn pow(n: c_double, e: c_double) -> c_double;\n+        #[link_name=\"log1p\"]\n+        pub unsafe fn ln_1p(n: c_double) -> c_double;\n+        pub unsafe fn log10(n: c_double) -> c_double;\n+        pub unsafe fn log2(n: c_double) -> c_double;\n+        #[link_name=\"ilogb\"]\n+        pub unsafe fn ilog_radix(n: c_double) -> c_int;\n+        pub unsafe fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n+        pub unsafe fn pow(n: c_double, e: c_double) -> c_double;\n     // FIXME (#1379): enable when rounding modes become available\n     //    unsafe fn rint(n: c_double) -> c_double;\n-        unsafe fn round(n: c_double) -> c_double;\n+        pub unsafe fn round(n: c_double) -> c_double;\n         // rename: for consistency with logradix\n-        #[link_name=\"scalbn\"] unsafe fn ldexp_radix(n: c_double, i: c_int) ->\n-            c_double;\n-        unsafe fn sin(n: c_double) -> c_double;\n-        unsafe fn sinh(n: c_double) -> c_double;\n-        unsafe fn sqrt(n: c_double) -> c_double;\n-        unsafe fn tan(n: c_double) -> c_double;\n-        unsafe fn tanh(n: c_double) -> c_double;\n-        unsafe fn tgamma(n: c_double) -> c_double;\n-        unsafe fn trunc(n: c_double) -> c_double;\n+        #[link_name=\"scalbn\"]\n+        pub unsafe fn ldexp_radix(n: c_double, i: c_int) -> c_double;\n+        pub unsafe fn sin(n: c_double) -> c_double;\n+        pub unsafe fn sinh(n: c_double) -> c_double;\n+        pub unsafe fn sqrt(n: c_double) -> c_double;\n+        pub unsafe fn tan(n: c_double) -> c_double;\n+        pub unsafe fn tanh(n: c_double) -> c_double;\n+        pub unsafe fn tgamma(n: c_double) -> c_double;\n+        pub unsafe fn trunc(n: c_double) -> c_double;\n \n         // These are commonly only available for doubles\n \n-        unsafe fn j0(n: c_double) -> c_double;\n-        unsafe fn j1(n: c_double) -> c_double;\n-        unsafe fn jn(i: c_int, n: c_double) -> c_double;\n+        pub unsafe fn j0(n: c_double) -> c_double;\n+        pub unsafe fn j1(n: c_double) -> c_double;\n+        pub unsafe fn jn(i: c_int, n: c_double) -> c_double;\n \n-        unsafe fn y0(n: c_double) -> c_double;\n-        unsafe fn y1(n: c_double) -> c_double;\n-        unsafe fn yn(i: c_int, n: c_double) -> c_double;\n+        pub unsafe fn y0(n: c_double) -> c_double;\n+        pub unsafe fn y1(n: c_double) -> c_double;\n+        pub unsafe fn yn(i: c_int, n: c_double) -> c_double;\n     }\n }\n \n@@ -102,73 +107,102 @@ pub mod c_float_utils {\n \n     #[link_name = \"m\"]\n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         // Alpabetically sorted by link_name\n \n-        #[link_name=\"acosf\"] unsafe fn acos(n: c_float) -> c_float;\n-        #[link_name=\"asinf\"] unsafe fn asin(n: c_float) -> c_float;\n-        #[link_name=\"atanf\"] unsafe fn atan(n: c_float) -> c_float;\n+        #[link_name=\"acosf\"]\n+        pub unsafe fn acos(n: c_float) -> c_float;\n+        #[link_name=\"asinf\"]\n+        pub unsafe fn asin(n: c_float) -> c_float;\n+        #[link_name=\"atanf\"]\n+        pub unsafe fn atan(n: c_float) -> c_float;\n         #[link_name=\"atan2f\"]\n-        unsafe fn atan2(a: c_float, b: c_float) -> c_float;\n-        #[link_name=\"cbrtf\"] unsafe fn cbrt(n: c_float) -> c_float;\n-        #[link_name=\"ceilf\"] unsafe fn ceil(n: c_float) -> c_float;\n-        #[link_name=\"copysignf\"] unsafe fn copysign(x: c_float,\n-                                                  y: c_float) -> c_float;\n-        #[link_name=\"cosf\"] unsafe fn cos(n: c_float) -> c_float;\n-        #[link_name=\"coshf\"] unsafe fn cosh(n: c_float) -> c_float;\n-        #[link_name=\"erff\"] unsafe fn erf(n: c_float) -> c_float;\n-        #[link_name=\"erfcf\"] unsafe fn erfc(n: c_float) -> c_float;\n-        #[link_name=\"expf\"] unsafe fn exp(n: c_float) -> c_float;\n-        #[link_name=\"expm1f\"]unsafe fn exp_m1(n: c_float) -> c_float;\n-        #[link_name=\"exp2f\"] unsafe fn exp2(n: c_float) -> c_float;\n-        #[link_name=\"fabsf\"] unsafe fn abs(n: c_float) -> c_float;\n+        pub unsafe fn atan2(a: c_float, b: c_float) -> c_float;\n+        #[link_name=\"cbrtf\"]\n+        pub unsafe fn cbrt(n: c_float) -> c_float;\n+        #[link_name=\"ceilf\"]\n+        pub unsafe fn ceil(n: c_float) -> c_float;\n+        #[link_name=\"copysignf\"]\n+        pub unsafe fn copysign(x: c_float, y: c_float) -> c_float;\n+        #[link_name=\"cosf\"]\n+        pub unsafe fn cos(n: c_float) -> c_float;\n+        #[link_name=\"coshf\"]\n+        pub unsafe fn cosh(n: c_float) -> c_float;\n+        #[link_name=\"erff\"]\n+        pub unsafe fn erf(n: c_float) -> c_float;\n+        #[link_name=\"erfcf\"]\n+        pub unsafe fn erfc(n: c_float) -> c_float;\n+        #[link_name=\"expf\"]\n+        pub unsafe fn exp(n: c_float) -> c_float;\n+        #[link_name=\"expm1f\"]\n+        pub unsafe fn exp_m1(n: c_float) -> c_float;\n+        #[link_name=\"exp2f\"]\n+        pub unsafe fn exp2(n: c_float) -> c_float;\n+        #[link_name=\"fabsf\"]\n+        pub unsafe fn abs(n: c_float) -> c_float;\n         #[link_name=\"fdimf\"]\n-        unsafe fn abs_sub(a: c_float, b: c_float) -> c_float;\n-        #[link_name=\"floorf\"] unsafe fn floor(n: c_float) -> c_float;\n-        #[link_name=\"frexpf\"] unsafe fn frexp(n: c_float,\n-                                            value: &mut c_int) -> c_float;\n+        pub unsafe fn abs_sub(a: c_float, b: c_float) -> c_float;\n+        #[link_name=\"floorf\"]\n+        pub unsafe fn floor(n: c_float) -> c_float;\n+        #[link_name=\"frexpf\"]\n+        pub unsafe fn frexp(n: c_float, value: &mut c_int) -> c_float;\n         #[link_name=\"fmaf\"]\n-        unsafe fn mul_add(a: c_float, b: c_float, c: c_float) -> c_float;\n+        pub unsafe fn mul_add(a: c_float, b: c_float, c: c_float) -> c_float;\n         #[link_name=\"fmaxf\"]\n-        unsafe fn fmax(a: c_float, b: c_float) -> c_float;\n+        pub unsafe fn fmax(a: c_float, b: c_float) -> c_float;\n         #[link_name=\"fminf\"]\n-        unsafe fn fmin(a: c_float, b: c_float) -> c_float;\n+        pub unsafe fn fmin(a: c_float, b: c_float) -> c_float;\n         #[link_name=\"nextafterf\"]\n-        unsafe fn next_after(x: c_float, y: c_float) -> c_float;\n+        pub unsafe fn next_after(x: c_float, y: c_float) -> c_float;\n         #[link_name=\"hypotf\"]\n-        unsafe fn hypot(x: c_float, y: c_float) -> c_float;\n+        pub unsafe fn hypot(x: c_float, y: c_float) -> c_float;\n         #[link_name=\"ldexpf\"]\n-        unsafe fn ldexp(x: c_float, n: c_int) -> c_float;\n+        pub unsafe fn ldexp(x: c_float, n: c_int) -> c_float;\n \n         #[cfg(unix)]\n-        #[link_name=\"lgammaf_r\"] unsafe fn lgamma(n: c_float,\n-                                                sign: &mut c_int) -> c_float;\n+        #[link_name=\"lgammaf_r\"]\n+        pub unsafe fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n \n         #[cfg(windows)]\n         #[link_name=\"__lgammaf_r\"]\n-        unsafe fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n+        pub unsafe fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n \n-        #[link_name=\"logf\"] unsafe fn ln(n: c_float) -> c_float;\n-        #[link_name=\"logbf\"] unsafe fn log_radix(n: c_float) -> c_float;\n-        #[link_name=\"log1pf\"] unsafe fn ln_1p(n: c_float) -> c_float;\n-        #[link_name=\"log2f\"] unsafe fn log2(n: c_float) -> c_float;\n-        #[link_name=\"log10f\"] unsafe fn log10(n: c_float) -> c_float;\n-        #[link_name=\"ilogbf\"] unsafe fn ilog_radix(n: c_float) -> c_int;\n-        #[link_name=\"modff\"] unsafe fn modf(n: c_float,\n-                                          iptr: &mut c_float) -> c_float;\n-        #[link_name=\"powf\"] unsafe fn pow(n: c_float, e: c_float) -> c_float;\n+        #[link_name=\"logf\"]\n+        pub unsafe fn ln(n: c_float) -> c_float;\n+        #[link_name=\"logbf\"]\n+        pub unsafe fn log_radix(n: c_float) -> c_float;\n+        #[link_name=\"log1pf\"]\n+        pub unsafe fn ln_1p(n: c_float) -> c_float;\n+        #[link_name=\"log2f\"]\n+        pub unsafe fn log2(n: c_float) -> c_float;\n+        #[link_name=\"log10f\"]\n+        pub unsafe fn log10(n: c_float) -> c_float;\n+        #[link_name=\"ilogbf\"]\n+        pub unsafe fn ilog_radix(n: c_float) -> c_int;\n+        #[link_name=\"modff\"]\n+        pub unsafe fn modf(n: c_float, iptr: &mut c_float) -> c_float;\n+        #[link_name=\"powf\"]\n+        pub unsafe fn pow(n: c_float, e: c_float) -> c_float;\n     // FIXME (#1379): enable when rounding modes become available\n     //    #[link_name=\"rintf\"] unsafe fn rint(n: c_float) -> c_float;\n-        #[link_name=\"roundf\"] unsafe fn round(n: c_float) -> c_float;\n-        #[link_name=\"scalbnf\"] unsafe fn ldexp_radix(n: c_float, i: c_int)\n-            -> c_float;\n-        #[link_name=\"sinf\"] unsafe fn sin(n: c_float) -> c_float;\n-        #[link_name=\"sinhf\"] unsafe fn sinh(n: c_float) -> c_float;\n-        #[link_name=\"sqrtf\"] unsafe fn sqrt(n: c_float) -> c_float;\n-        #[link_name=\"tanf\"] unsafe fn tan(n: c_float) -> c_float;\n-        #[link_name=\"tanhf\"] unsafe fn tanh(n: c_float) -> c_float;\n-        #[link_name=\"tgammaf\"] unsafe fn tgamma(n: c_float) -> c_float;\n-        #[link_name=\"truncf\"] unsafe fn trunc(n: c_float) -> c_float;\n+        #[link_name=\"roundf\"]\n+        pub unsafe fn round(n: c_float) -> c_float;\n+        #[link_name=\"scalbnf\"]\n+        pub unsafe fn ldexp_radix(n: c_float, i: c_int) -> c_float;\n+        #[link_name=\"sinf\"]\n+        pub unsafe fn sin(n: c_float) -> c_float;\n+        #[link_name=\"sinhf\"]\n+        pub unsafe fn sinh(n: c_float) -> c_float;\n+        #[link_name=\"sqrtf\"]\n+        pub unsafe fn sqrt(n: c_float) -> c_float;\n+        #[link_name=\"tanf\"]\n+        pub unsafe fn tan(n: c_float) -> c_float;\n+        #[link_name=\"tanhf\"]\n+        pub unsafe fn tanh(n: c_float) -> c_float;\n+        #[link_name=\"tgammaf\"]\n+        pub unsafe fn tgamma(n: c_float) -> c_float;\n+        #[link_name=\"truncf\"]\n+        pub unsafe fn trunc(n: c_float) -> c_float;\n     }\n }\n "}, {"sha": "3b37fb077d66d3f1cdb62284684ecad93319188d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -61,12 +61,12 @@ pub mod rustrt {\n     use libc::{c_char, c_int};\n     use libc;\n \n-    pub extern {\n-        unsafe fn rust_get_argc() -> c_int;\n-        unsafe fn rust_get_argv() -> **c_char;\n-        unsafe fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n-        unsafe fn rust_path_exists(path: *libc::c_char) -> c_int;\n-        unsafe fn rust_set_exit_status(code: libc::intptr_t);\n+    extern {\n+        pub unsafe fn rust_get_argc() -> c_int;\n+        pub unsafe fn rust_get_argv() -> **c_char;\n+        pub unsafe fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n+        pub unsafe fn rust_path_exists(path: *libc::c_char) -> c_int;\n+        pub unsafe fn rust_set_exit_status(code: libc::intptr_t);\n     }\n }\n "}, {"sha": "07b435f1b64b3c7c9fe41a64ce986cec8f6d2edb", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -256,20 +256,21 @@ pub mod rustrt {\n     use libc;\n     use super::rust_task;\n \n-    pub extern {\n+    extern {\n         #[rust_stack]\n-        unsafe fn rust_get_task() -> *rust_task;\n+        pub unsafe fn rust_get_task() -> *rust_task;\n         #[rust_stack]\n-        unsafe fn rust_task_ref(task: *rust_task);\n-        unsafe fn rust_task_deref(task: *rust_task);\n+        pub unsafe fn rust_task_ref(task: *rust_task);\n+        pub unsafe fn rust_task_deref(task: *rust_task);\n \n         #[rust_stack]\n-        unsafe fn task_clear_event_reject(task: *rust_task);\n+        pub unsafe fn task_clear_event_reject(task: *rust_task);\n \n-        unsafe fn task_wait_event(this: *rust_task,\n-                                  killed: &mut *libc::c_void)\n-                               -> bool;\n-        unsafe fn task_signal_event(target: *rust_task, event: *libc::c_void);\n+        pub unsafe fn task_wait_event(this: *rust_task,\n+                                      killed: &mut *libc::c_void)\n+                                   -> bool;\n+        pub unsafe fn task_signal_event(target: *rust_task,\n+                                        event: *libc::c_void);\n     }\n }\n "}, {"sha": "5be73bbfc68aea3b8cde8f8253eea5c533764e62", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -251,9 +251,9 @@ impl<T: Rand + 'static> Rand for @T {\n pub mod rustrt {\n     use libc::size_t;\n \n-    pub extern {\n-        unsafe fn rand_seed_size() -> size_t;\n-        unsafe fn rand_gen_seed(buf: *mut u8, sz: size_t);\n+    extern {\n+        pub unsafe fn rand_seed_size() -> size_t;\n+        pub unsafe fn rand_gen_seed(buf: *mut u8, sz: size_t);\n     }\n }\n \n@@ -1087,10 +1087,11 @@ mod tests {\n             #[allow(non_camel_case_types)] // runtime type\n             pub enum rust_rng {}\n \n-            pub extern {\n-                unsafe fn rand_new_seeded(buf: *u8, sz: size_t) -> *rust_rng;\n-                unsafe fn rand_next(rng: *rust_rng) -> u32;\n-                unsafe fn rand_free(rng: *rust_rng);\n+            extern {\n+                pub unsafe fn rand_new_seeded(buf: *u8, sz: size_t)\n+                                              -> *rust_rng;\n+                pub unsafe fn rand_next(rng: *rust_rng) -> u32;\n+                pub unsafe fn rand_free(rng: *rust_rng);\n             }\n         }\n "}, {"sha": "ef6155b1fb70159afd0e79c8a60912a80b48f68a", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -345,9 +345,9 @@ pub fn context() -> RuntimeContext {\n         }\n     }\n \n-    pub extern {\n+    extern {\n         #[rust_stack]\n-        fn rust_try_get_task() -> *rust_task;\n+        pub fn rust_try_get_task() -> *rust_task;\n     }\n }\n "}, {"sha": "c0b46ba273d29dfd12005d67ec3661863445b71b", "filename": "src/libstd/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -643,9 +643,9 @@ fn spawn_process_os(prog: &str, args: &[~str],\n         use libc::c_void;\n \n         #[abi = \"cdecl\"]\n-        pub extern {\n-            unsafe fn rust_unset_sigprocmask();\n-            unsafe fn rust_set_environ(envp: *c_void);\n+        extern {\n+            pub unsafe fn rust_unset_sigprocmask();\n+            pub unsafe fn rust_set_environ(envp: *c_void);\n         }\n     }\n "}, {"sha": "d50d90376abe078801687d1234798f208084c7d2", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -30,11 +30,11 @@ pub struct Closure {\n pub mod rustrt {\n     use libc::{c_char, size_t};\n \n-    pub extern {\n+    extern {\n         #[rust_stack]\n-        unsafe fn rust_upcall_fail(expr: *c_char,\n-                                   file: *c_char,\n-                                   line: size_t);\n+        pub unsafe fn rust_upcall_fail(expr: *c_char,\n+                                       file: *c_char,\n+                                       line: size_t);\n     }\n }\n "}, {"sha": "f2563b37347a5e6768be87d7e987e1bacf042c42", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -995,13 +995,13 @@ mod testrt {\n     use libc;\n \n     #[nolink]\n-    pub extern {\n-        unsafe fn rust_dbg_lock_create() -> *libc::c_void;\n-        unsafe fn rust_dbg_lock_destroy(lock: *libc::c_void);\n-        unsafe fn rust_dbg_lock_lock(lock: *libc::c_void);\n-        unsafe fn rust_dbg_lock_unlock(lock: *libc::c_void);\n-        unsafe fn rust_dbg_lock_wait(lock: *libc::c_void);\n-        unsafe fn rust_dbg_lock_signal(lock: *libc::c_void);\n+    extern {\n+        pub unsafe fn rust_dbg_lock_create() -> *libc::c_void;\n+        pub unsafe fn rust_dbg_lock_destroy(lock: *libc::c_void);\n+        pub unsafe fn rust_dbg_lock_lock(lock: *libc::c_void);\n+        pub unsafe fn rust_dbg_lock_unlock(lock: *libc::c_void);\n+        pub unsafe fn rust_dbg_lock_wait(lock: *libc::c_void);\n+        pub unsafe fn rust_dbg_lock_signal(lock: *libc::c_void);\n     }\n }\n "}, {"sha": "3720bc585cc3695282c78a1bb2fe1ea271b46fa2", "filename": "src/libstd/task/rt.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Ftask%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Ftask%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Frt.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -30,39 +30,39 @@ pub type rust_task = libc::c_void;\n #[allow(non_camel_case_types)] // runtime type\n pub type rust_closure = libc::c_void;\n \n-pub extern {\n+extern {\n     #[rust_stack]\n-    fn rust_task_yield(task: *rust_task) -> bool;\n+    pub fn rust_task_yield(task: *rust_task) -> bool;\n \n-    fn rust_get_sched_id() -> sched_id;\n-    fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n-    fn rust_sched_threads() -> libc::size_t;\n-    fn rust_sched_current_nonlazy_threads() -> libc::size_t;\n+    pub fn rust_get_sched_id() -> sched_id;\n+    pub fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n+    pub fn rust_sched_threads() -> libc::size_t;\n+    pub fn rust_sched_current_nonlazy_threads() -> libc::size_t;\n \n-    fn get_task_id() -> task_id;\n+    pub fn get_task_id() -> task_id;\n     #[rust_stack]\n-    fn rust_get_task() -> *rust_task;\n+    pub fn rust_get_task() -> *rust_task;\n \n-    fn new_task() -> *rust_task;\n-    fn rust_new_task_in_sched(id: sched_id) -> *rust_task;\n+    pub fn new_task() -> *rust_task;\n+    pub fn rust_new_task_in_sched(id: sched_id) -> *rust_task;\n \n-    fn start_task(task: *rust_task, closure: *rust_closure);\n+    pub fn start_task(task: *rust_task, closure: *rust_closure);\n \n-    fn rust_task_is_unwinding(task: *rust_task) -> bool;\n-    fn rust_osmain_sched_id() -> sched_id;\n+    pub fn rust_task_is_unwinding(task: *rust_task) -> bool;\n+    pub fn rust_osmain_sched_id() -> sched_id;\n     #[rust_stack]\n-    fn rust_task_inhibit_kill(t: *rust_task);\n+    pub fn rust_task_inhibit_kill(t: *rust_task);\n     #[rust_stack]\n-    fn rust_task_allow_kill(t: *rust_task);\n+    pub fn rust_task_allow_kill(t: *rust_task);\n     #[rust_stack]\n-    fn rust_task_inhibit_yield(t: *rust_task);\n+    pub fn rust_task_inhibit_yield(t: *rust_task);\n     #[rust_stack]\n-    fn rust_task_allow_yield(t: *rust_task);\n-    fn rust_task_kill_other(task: *rust_task);\n-    fn rust_task_kill_all(task: *rust_task);\n+    pub fn rust_task_allow_yield(t: *rust_task);\n+    pub fn rust_task_kill_other(task: *rust_task);\n+    pub fn rust_task_kill_all(task: *rust_task);\n \n     #[rust_stack]\n-    fn rust_get_task_local_data(task: *rust_task) -> *mut *libc::c_void;\n+    pub fn rust_get_task_local_data(task: *rust_task) -> *mut *libc::c_void;\n     #[rust_stack]\n-    fn rust_task_local_data_atexit(task: *rust_task, cleanup_fn: *u8);\n+    pub fn rust_task_local_data_atexit(task: *rust_task, cleanup_fn: *u8);\n }"}, {"sha": "20ddf941a7b95d67af79b17eb75777fb7c1e4bc9", "filename": "src/libstd/unstable/at_exit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Funstable%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Funstable%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fat_exit.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -41,8 +41,8 @@ pub fn at_exit(f: ~fn()) {\n mod rustrt {\n     use libc::c_void;\n \n-    pub extern {\n-        fn rust_register_exit_function(runner: *c_void, f: ~~fn());\n+    extern {\n+        pub fn rust_register_exit_function(runner: *c_void, f: ~~fn());\n     }\n }\n "}, {"sha": "275a8c94c6902714698fc48808ec64dc4d007734", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -158,7 +158,7 @@ pub trait TyVisitor {\n }\n \n #[abi = \"rust-intrinsic\"]\n-pub extern \"rust-intrinsic\" {\n+extern \"rust-intrinsic\" {\n \n     /// Atomic compare and exchange, sequentially consistent.\n     pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;"}, {"sha": "92357f210a5d2445cffe223409956670427f312e", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -26,22 +26,23 @@ pub mod rustrt {\n     use unstable::lang::rust_task;\n     use libc::{c_char, uintptr_t};\n \n-    pub extern {\n+    extern {\n         #[rust_stack]\n-        unsafe fn rust_upcall_malloc(td: *c_char, size: uintptr_t) -> *c_char;\n+        pub unsafe fn rust_upcall_malloc(td: *c_char, size: uintptr_t)\n+                                         -> *c_char;\n \n         #[rust_stack]\n-        unsafe fn rust_upcall_free(ptr: *c_char);\n+        pub unsafe fn rust_upcall_free(ptr: *c_char);\n \n         #[fast_ffi]\n-        unsafe fn rust_upcall_malloc_noswitch(td: *c_char,\n-                                              size: uintptr_t)\n-                                           -> *c_char;\n+        pub unsafe fn rust_upcall_malloc_noswitch(td: *c_char,\n+                                                  size: uintptr_t)\n+                                                  -> *c_char;\n \n         #[rust_stack]\n-        fn rust_try_get_task() -> *rust_task;\n+        pub fn rust_try_get_task() -> *rust_task;\n \n-        fn rust_dbg_breakpoint();\n+        pub fn rust_dbg_breakpoint();\n     }\n }\n "}, {"sha": "d844344d9f282a4a714829a21c3f87be6370f383", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -63,6 +63,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteNamedExternModule,\n     ObsoleteMultipleLocalDecl,\n     ObsoleteMutWithMultipleBindings,\n+    ObsoleteExternVisibility,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -248,6 +249,11 @@ impl ParserObsoleteMethods for Parser {\n                 \"use multiple local declarations instead of e.g. `let mut \\\n                  (x, y) = ...`.\"\n             ),\n+            ObsoleteExternVisibility => (\n+                \"`pub extern` or `priv extern`\",\n+                \"place the `pub` or `priv` on the individual external items \\\n+                 instead\"\n+            )\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "7f309a01877ec8949dd3432bebef4acce5de0d59", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -84,7 +84,7 @@ use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n use parse::obsolete::{ObsoleteConstItem, ObsoleteFixedLengthVectorType};\n use parse::obsolete::{ObsoleteNamedExternModule, ObsoleteMultipleLocalDecl};\n use parse::obsolete::{ObsoleteMutWithMultipleBindings};\n-use parse::obsolete::{ParserObsoleteMethods};\n+use parse::obsolete::{ObsoleteExternVisibility, ParserObsoleteMethods};\n use parse::token::{can_begin_expr, get_ident_interner, ident_to_str, is_ident};\n use parse::token::{is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, keywords, special_idents};\n@@ -4191,16 +4191,23 @@ impl Parser {\n                 self.obsolete(*self.last_span, ObsoleteNamedExternModule);\n             }\n \n+            // Do not allow visibility to be specified.\n+            if visibility != ast::inherited {\n+                self.obsolete(*self.span, ObsoleteExternVisibility);\n+            }\n+\n             let abis = opt_abis.get_or_default(AbiSet::C());\n \n             let (inner, next) = self.parse_inner_attrs_and_next();\n             let m = self.parse_foreign_mod_items(sort, abis, next);\n             self.expect(&token::RBRACE);\n \n-            return iovi_item(self.mk_item(lo, self.last_span.hi, ident,\n-                                          item_foreign_mod(m), visibility,\n-                                          maybe_append(attrs,\n-                                                       Some(inner))));\n+            return iovi_item(self.mk_item(lo,\n+                                          self.last_span.hi,\n+                                          ident,\n+                                          item_foreign_mod(m),\n+                                          public,\n+                                          maybe_append(attrs, Some(inner))));\n         }\n \n         if opt_abis.is_some() {"}, {"sha": "f88b7b9a1f8531341dbde775c6353ff9b381e9f8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -524,7 +524,7 @@ pub fn print_item(s: @ps, item: &ast::item) {\n         bclose(s, item.span);\n       }\n       ast::item_foreign_mod(ref nmod) => {\n-        head(s, visibility_qualified(item.vis, \"extern\"));\n+        head(s, \"extern\");\n         word_nbsp(s, nmod.abis.to_str());\n         match nmod.sort {\n             ast::named => {"}, {"sha": "ebcb1e7fef9d0d859acdaca17f2ff44fc24e5710", "filename": "src/test/auxiliary/cci_intrinsic.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,22 +10,22 @@\n \n pub mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n-        fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n-        fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n-        fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n+    extern \"rust-intrinsic\" {\n+        pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n+        pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n+        pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n \n-        fn atomic_xchg(dst: &mut int, src: int) -> int;\n-        fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n-        fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xchg(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n \n-        fn atomic_xadd(dst: &mut int, src: int) -> int;\n-        fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n-        fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xadd(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n \n-        fn atomic_xsub(dst: &mut int, src: int) -> int;\n-        fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n-        fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xsub(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n+        pub fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n     }\n }\n "}, {"sha": "4ec63d52251ec23b1dea5ffe9bc95c8bec2ed893", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -18,7 +18,7 @@ use std::libc;\n pub mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }"}, {"sha": "90399ea48a536cabde60c8298d0722b74da3e9e5", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -13,7 +13,7 @@\n pub mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_get_argc() -> libc::c_int;\n     }\n }"}, {"sha": "875ea6b75cf600d5a0a738fe4bc7ff526e5de9d4", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -12,7 +12,7 @@\n \n mod test {\n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         pub unsafe fn free();\n     }\n }"}, {"sha": "7c9fe73c974e2aa05db1a607d3d1c4a7a501908e", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -13,7 +13,7 @@\n #[deny(unused_unsafe)];\n \n mod foo {\n-    pub extern {\n+    extern {\n         pub fn bar();\n     }\n }"}, {"sha": "7b5e05a5671ab505d4b47f245c684f6f2fe6c8aa", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,7 +10,7 @@\n \n //error-pattern:libc::c_int or libc::c_long should be used\n mod xx {\n-    pub extern {\n+    extern {\n         pub fn strlen(str: *u8) -> uint;\n         pub fn foo(x: int, y: uint);\n     }"}, {"sha": "717cecff6d68186c95a79809799c4583628d27ba", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -18,9 +18,9 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n-                          -> libc::uintptr_t;\n+                             -> libc::uintptr_t;\n     }\n }\n "}, {"sha": "c3230965eceabc92fecf6c5babe13a25da4086f3", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -23,7 +23,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_get_argc() -> libc::c_int;\n     }\n }"}, {"sha": "b360cc7528fde14501ae1c2277c451599c85d07e", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -86,7 +86,7 @@ mod test {\n \n     #[abi = \"cdecl\"]\n     #[nolink]\n-    pub extern {\n+    extern {\n         pub fn rust_get_sched_id() -> libc::intptr_t;\n         pub fn get_task_id() -> libc::intptr_t;\n     }"}, {"sha": "747066cb4e851cf9a2a0db74fb28ceda4c331e7b", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -14,7 +14,7 @@ mod rustrt {\n     use std::libc;\n \n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         pub fn get_task_id() -> libc::intptr_t;\n     }\n }"}, {"sha": "d09f8493d805a7a849143ce55e6a12c3ae4af0bd", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -13,7 +13,7 @@ use std::str;\n mod libc {\n     #[abi = \"cdecl\"]\n     #[nolink]\n-    pub extern {\n+    extern {\n         pub fn atol(x: *u8) -> int;\n         pub fn atoll(x: *u8) -> i64;\n     }"}, {"sha": "fdf8edc5861a4a2370f2866058e10c6c65583bcf", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -22,14 +22,14 @@ static b: bool = true;\n mod rustrt {\n     #[cfg(bogus)]\n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         // This symbol doesn't exist and would be a link error if this\n         // module was translated\n         pub fn bogus();\n     }\n \n     #[abi = \"cdecl\"]\n-    pub extern {}\n+    extern {}\n }\n \n #[cfg(bogus)]\n@@ -110,7 +110,7 @@ fn test_in_fn_ctxt() {\n mod test_foreign_items {\n     pub mod rustrt {\n         #[abi = \"cdecl\"]\n-        pub extern {\n+        extern {\n             #[cfg(bogus)]\n             pub fn rust_get_stdin() -> ~str;\n             pub fn rust_get_stdin() -> ~str;"}, {"sha": "de7aca88625d18407d8a9c3493e54678159d0065", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -13,7 +13,7 @@ use std::libc;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }"}, {"sha": "518e48f29f7894dd0374109f17f325584201d3cb", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -14,7 +14,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }"}, {"sha": "e1db41a32f1ef0eca3679f2aa953817442ab0b5d", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -18,7 +18,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }"}, {"sha": "66563a9a5fa671374ddddba2cf13321f216ff9fa", "filename": "src/test/run-pass/extern-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -13,7 +13,7 @@ use std::libc;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }"}, {"sha": "a899488f8734e58ef29e176467af85ca005a2958", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -18,7 +18,7 @@ struct TwoU16s {\n     one: u16, two: u16\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n }\n "}, {"sha": "3389c56c83bf00afd777789a2f270c409f0a8721", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -16,7 +16,7 @@ struct TwoU32s {\n     one: u32, two: u32\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;\n }\n "}, {"sha": "983817b12debcab6521053d851ba30cf982a4fc5", "filename": "src/test/run-pass/extern-pass-TwoU64s-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -15,7 +15,7 @@ struct TwoU64s {\n     one: u64, two: u64\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_TwoU64s(u: TwoU64s) -> TwoU64s;\n }\n "}, {"sha": "dd1110b59cdb0db7b02671b7cf0a55b60f27f8da", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -20,7 +20,7 @@ struct TwoU64s {\n     one: u64, two: u64\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;\n }\n "}, {"sha": "fa8ea8d1f2ad1730a7b0d76c68690bb4564702fe", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -18,7 +18,7 @@ struct TwoU8s {\n     one: u8, two: u8\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n }\n "}, {"sha": "0cdfaf29a0582a44e9934eb12c26fa256ab508c8", "filename": "src/test/run-pass/extern-pass-char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,7 +10,7 @@\n \n // Test a function that takes/returns a u8.\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;\n }\n "}, {"sha": "cb0a061a7abd831e2d42e185b43e5c3bf1834e50", "filename": "src/test/run-pass/extern-pass-double.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_double(v: f64) -> f64;\n }\n "}, {"sha": "aa54f014046127c735d695d8d74b1fec1177af95", "filename": "src/test/run-pass/extern-pass-u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,7 +10,7 @@\n \n // Test a function that takes/returns a u32.\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_u32(v: u32) -> u32;\n }\n "}, {"sha": "7c39080a5689732dc778d8554e015c0e12a31eee", "filename": "src/test/run-pass/extern-pass-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,7 +10,7 @@\n \n // Test a call to a function that takes/returns a u64.\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_identity_u64(v: u64) -> u64;\n }\n "}, {"sha": "0aa6b3cc83d52215ab1be144fe8269e6fda2a892", "filename": "src/test/run-pass/extern-return-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -15,7 +15,7 @@ struct TwoU16s {\n     one: u16, two: u16\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_return_TwoU16s() -> TwoU16s;\n }\n "}, {"sha": "90562f0f6b1cec5419f334d707acc5a6b9fdfbc7", "filename": "src/test/run-pass/extern-return-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -12,7 +12,7 @@ struct TwoU32s {\n     one: u32, two: u32\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_return_TwoU32s() -> TwoU32s;\n }\n "}, {"sha": "9f878a90c142acdc923d0e8e44b6ff456ad71f2a", "filename": "src/test/run-pass/extern-return-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -12,7 +12,7 @@ struct TwoU64s {\n     one: u64, two: u64\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_return_TwoU64s() -> TwoU64s;\n }\n "}, {"sha": "c4d50d1766c5dc469ab2a304d3fea4a2d474e0be", "filename": "src/test/run-pass/extern-return-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -15,7 +15,7 @@ struct TwoU8s {\n     one: u8, two: u8\n }\n \n-pub extern {\n+extern {\n     pub fn rust_dbg_extern_return_TwoU8s() -> TwoU8s;\n }\n "}, {"sha": "33003aa8ba680ce22e9de8c98336e0e944532070", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -17,7 +17,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }"}, {"sha": "103ed71fc2ba13a7e39d9a2a8d9143e223d0925c", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -14,7 +14,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }"}, {"sha": "c26a1f75b3e1460e666aa7f654ee912d18eeecdf", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -16,7 +16,7 @@ mod rustrt1 {\n \n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n-    pub extern {\n+    extern {\n         pub fn rust_get_argc() -> libc::c_int;\n     }\n }\n@@ -26,7 +26,7 @@ mod rustrt2 {\n \n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n-    pub extern {\n+    extern {\n         pub fn rust_get_argc() -> libc::c_int;\n     }\n }"}, {"sha": "f0cac8f2f3e40891ae368e9708281195a44093b9", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -17,7 +17,7 @@ use std::vec;\n mod libc {\n     #[nolink]\n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         #[link_name = \"strlen\"]\n         pub fn my_strlen(str: *u8) -> uint;\n     }"}, {"sha": "7721de93a006616e19f83a7b2109f3d6bf0ea550", "filename": "src/test/run-pass/foreign-lib-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -16,7 +16,7 @@ mod WHATGOESHERE {\n     // FIXME: I want to name a mod that would not link successfully\n     // wouthout providing a -L argument to the compiler, and that\n     // will also be found successfully at runtime.\n-    pub extern {\n+    extern {\n         pub fn IDONTKNOW() -> u32;\n     }\n }"}, {"sha": "a1f6cf6988bf71926933819375ea21e428c1bf39", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,7 +10,7 @@\n \n mod foo {\n     #[nolink]\n-    pub extern {\n+    extern {\n         pub static errno: int;\n     }\n }"}, {"sha": "203e31e859b33ba54cad7dd5fad625ccdd42e62a", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -13,7 +13,7 @@\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn get_task_id() -> libc::intptr_t;\n     }\n }"}, {"sha": "57686b200f23d9a6ef1c1ecb3cd9a6a9ab4af09a", "filename": "src/test/run-pass/foreign-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-struct.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -17,7 +17,7 @@ mod bindgen {\n     use super::void;\n \n     #[nolink]\n-    pub extern {\n+    extern {\n         pub fn printf(v: void);\n     }\n }"}, {"sha": "72bdd5e2946b9d21a534b45f2791f4151417d61d", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -11,28 +11,28 @@\n mod bar {\n     #[abi = \"cdecl\"]\n     #[nolink]\n-    pub extern {}\n+    extern {}\n }\n \n mod zed {\n     #[abi = \"cdecl\"]\n     #[nolink]\n-    pub extern {}\n+    extern {}\n }\n \n mod libc {\n     #[abi = \"cdecl\"]\n     #[nolink]\n-    pub extern {\n+    extern {\n         pub fn write(fd: int, buf: *u8, count: ::std::libc::size_t)\n-                  -> ::std::libc::ssize_t;\n+                     -> ::std::libc::ssize_t;\n     }\n }\n \n mod baz {\n     #[abi = \"cdecl\"]\n     #[nolink]\n-    pub extern {}\n+    extern {}\n }\n \n pub fn main() { }"}, {"sha": "90d4bd1e7aecaf6eb5ed4d0db92116c14b6149bb", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -12,7 +12,7 @@\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> uint;\n         pub fn min_align_of<T>() -> uint;\n     }"}, {"sha": "f1354cbb20f5da526f61c24f9d7509447919e61b", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,7 +10,7 @@\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         pub fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n         pub fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n         pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;"}, {"sha": "452104ec4a2aa3a8166f0d0e1406a87b2603c777", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -12,7 +12,7 @@\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         pub fn frame_address(f: &once fn(*u8));\n     }\n }"}, {"sha": "18d63b32a1f770a77926537a039fbecdad590df0", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,7 +10,7 @@\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         pub fn move_val_init<T>(dst: &mut T, src: T);\n         pub fn move_val<T>(dst: &mut T, src: T);\n     }"}, {"sha": "993e27771976540655e50788a8b1d07cea40128b", "filename": "src/test/run-pass/intrinsic-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-uninit.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -10,7 +10,7 @@\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         fn uninit<T>() -> T;\n     }\n }"}, {"sha": "4b17a95cf661dac4ce65ad24aa881498443409c0", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -14,7 +14,7 @@ extern mod extra;\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         fn ctpop8(x: i8) -> i8;\n         fn ctpop16(x: i16) -> i16;\n         fn ctpop32(x: i32) -> i32;"}, {"sha": "fb58d8681a5399f28d2ca30497429cb5e89e7205", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -14,37 +14,37 @@ use std::f64;\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n-        fn sqrtf32(x: f32) -> f32;\n-        fn sqrtf64(x: f64) -> f64;\n-        fn powif32(a: f32, x: i32) -> f32;\n-        fn powif64(a: f64, x: i32) -> f64;\n-        fn sinf32(x: f32) -> f32;\n-        fn sinf64(x: f64) -> f64;\n-        fn cosf32(x: f32) -> f32;\n-        fn cosf64(x: f64) -> f64;\n-        fn powf32(a: f32, x: f32) -> f32;\n-        fn powf64(a: f64, x: f64) -> f64;\n-        fn expf32(x: f32) -> f32;\n-        fn expf64(x: f64) -> f64;\n-        fn exp2f32(x: f32) -> f32;\n-        fn exp2f64(x: f64) -> f64;\n-        fn logf32(x: f32) -> f32;\n-        fn logf64(x: f64) -> f64;\n-        fn log10f32(x: f32) -> f32;\n-        fn log10f64(x: f64) -> f64;\n-        fn log2f32(x: f32) -> f32;\n-        fn log2f64(x: f64) -> f64;\n-        fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n-        fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n-        fn fabsf32(x: f32) -> f32;\n-        fn fabsf64(x: f64) -> f64;\n-        fn floorf32(x: f32) -> f32;\n-        fn floorf64(x: f64) -> f64;\n-        fn ceilf32(x: f32) -> f32;\n-        fn ceilf64(x: f64) -> f64;\n-        fn truncf32(x: f32) -> f32;\n-        fn truncf64(x: f64) -> f64;\n+    extern \"rust-intrinsic\" {\n+        pub fn sqrtf32(x: f32) -> f32;\n+        pub fn sqrtf64(x: f64) -> f64;\n+        pub fn powif32(a: f32, x: i32) -> f32;\n+        pub fn powif64(a: f64, x: i32) -> f64;\n+        pub fn sinf32(x: f32) -> f32;\n+        pub fn sinf64(x: f64) -> f64;\n+        pub fn cosf32(x: f32) -> f32;\n+        pub fn cosf64(x: f64) -> f64;\n+        pub fn powf32(a: f32, x: f32) -> f32;\n+        pub fn powf64(a: f64, x: f64) -> f64;\n+        pub fn expf32(x: f32) -> f32;\n+        pub fn expf64(x: f64) -> f64;\n+        pub fn exp2f32(x: f32) -> f32;\n+        pub fn exp2f64(x: f64) -> f64;\n+        pub fn logf32(x: f32) -> f32;\n+        pub fn logf64(x: f64) -> f64;\n+        pub fn log10f32(x: f32) -> f32;\n+        pub fn log10f64(x: f64) -> f64;\n+        pub fn log2f32(x: f32) -> f32;\n+        pub fn log2f64(x: f64) -> f64;\n+        pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n+        pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n+        pub fn fabsf32(x: f32) -> f32;\n+        pub fn fabsf64(x: f64) -> f64;\n+        pub fn floorf32(x: f32) -> f32;\n+        pub fn floorf64(x: f64) -> f64;\n+        pub fn ceilf32(x: f32) -> f32;\n+        pub fn ceilf64(x: f64) -> f64;\n+        pub fn truncf32(x: f32) -> f32;\n+        pub fn truncf64(x: f64) -> f64;\n     }\n }\n "}, {"sha": "546368c8f9a742e4a16a51e1ce71d269193a91a7", "filename": "src/test/run-pass/issue-1251.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1251.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -13,7 +13,7 @@\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn get_task_id() -> libc::intptr_t;\n     }\n }"}, {"sha": "f4c685d5644619c9c7b97e220742d6a86442e79c", "filename": "src/test/run-pass/issue-1866.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1866.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -13,7 +13,7 @@ mod a {\n     pub type rust_task = uint;\n     pub mod rustrt {\n         use super::rust_task;\n-        pub extern {\n+        extern {\n             pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n         }\n     }\n@@ -23,7 +23,7 @@ mod b {\n     pub type rust_task = bool;\n     pub mod rustrt {\n         use super::rust_task;\n-        pub extern {\n+        extern {\n             pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n         }\n     }"}, {"sha": "19785a49cd02d64686cc0930866ef1d33a272b74", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -31,7 +31,7 @@ mod m {\n \n     #[link_name = \"m\"]\n     #[abi = \"cdecl\"]\n-    pub extern {\n+    extern {\n         #[cfg(unix)]\n         #[link_name=\"lgamma_r\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;"}, {"sha": "77affb5ecf31e5481654971f7977f0e423eb5b2b", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -40,7 +40,7 @@ mod test_single_attr_outer {\n     pub mod rustrt {\n         #[attr = \"val\"]\n         #[abi = \"cdecl\"]\n-        pub extern {}\n+        extern {}\n     }\n }\n \n@@ -61,7 +61,7 @@ mod test_multi_attr_outer {\n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n         #[abi = \"cdecl\"]\n-        pub extern {}\n+        extern {}\n     }\n \n     #[attr1 = \"val\"]\n@@ -84,7 +84,7 @@ mod test_stmt_single_attr_outer {\n         mod rustrt {\n             #[attr = \"val\"]\n             #[abi = \"cdecl\"]\n-            pub extern {\n+            extern {\n             }\n         }\n     }\n@@ -111,7 +111,7 @@ mod test_stmt_multi_attr_outer {\n             #[attr1 = \"val\"]\n             #[attr2 = \"val\"]\n             #[abi = \"cdecl\"]\n-            pub extern {\n+            extern {\n             }\n         }\n         */\n@@ -170,7 +170,7 @@ mod test_foreign_items {\n         use std::libc;\n \n         #[abi = \"cdecl\"]\n-        pub extern {\n+        extern {\n             #[attr];\n \n             #[attr]"}, {"sha": "ef6bb4e93b2da61e1d77750bd8bfb37ec878326c", "filename": "src/test/run-pass/morestack-address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fmorestack-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack-address.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -11,7 +11,7 @@\n mod rusti {\n     #[nolink]\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         pub fn morestack_addr() -> *();\n     }\n }"}, {"sha": "cbbead6dbda3b781c909d57837454cacf700b166", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -17,7 +17,7 @@ use std::task;\n mod rustrt {\n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn debug_get_stk_seg() -> *u8;\n \n         pub fn rust_get_sched_id() -> libc::intptr_t;"}, {"sha": "15795f954b8e767f42a609a67827cf9a7e3bbf7d", "filename": "src/test/run-pass/nil-decl-in-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -11,7 +11,7 @@\n // Issue #901\n mod libc {\n     #[nolink]\n-    pub extern {\n+    extern {\n         pub fn printf(x: ());\n     }\n }"}, {"sha": "f475292093cc294df2f6052803d84a0a1f142d56", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -14,7 +14,7 @@ use std::sys;\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> uint;\n         pub fn min_align_of<T>() -> uint;\n     }"}, {"sha": "571ad2f3fb2c4585e84cf075efc496bdf0f6f6d6", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -14,7 +14,7 @@ use std::sys;\n \n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n-    pub extern \"rust-intrinsic\" {\n+    extern \"rust-intrinsic\" {\n         pub fn pref_align_of<T>() -> uint;\n         pub fn min_align_of<T>() -> uint;\n     }"}, {"sha": "e110ac010653fd4b565c00c3d6717b99efeddbc7", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -25,7 +25,7 @@ mod rustrt {\n \n     use std::libc;\n \n-    pub extern {\n+    extern {\n         pub fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n         pub fn rust_get_sched_id() -> sched_id;\n         pub fn rust_new_task_in_sched(id: sched_id) -> task_id;"}, {"sha": "bf9d070c84ca68351377d5073ded89c677a8cbb2", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -15,7 +15,7 @@ mod rustrt {\n     use super::{Floats, Quad};\n \n     #[nolink]\n-    pub extern {\n+    extern {\n         pub fn debug_abi_1(q: Quad) -> Quad;\n         pub fn debug_abi_2(f: Floats) -> Floats;\n     }"}, {"sha": "f2cc2d79a946ece2b6253158caf4d0f94d141bff", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -14,7 +14,7 @@\n \n mod libc {\n     #[nolink]\n-    pub extern {\n+    extern {\n         pub fn malloc(size: int) -> *u8;\n     }\n }"}, {"sha": "a0159e7413edcda94ca25f9cc912f9e638f94278", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8476419fefda988f66ab6b2a1847e402133a0a29/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=8476419fefda988f66ab6b2a1847e402133a0a29", "patch": "@@ -19,7 +19,7 @@ mod kernel32 {\n \n     #[cfg(target_os = \"win32\")]\n     #[abi = \"stdcall\"]\n-    pub extern \"stdcall\" {\n+    extern \"stdcall\" {\n         pub fn GetProcessHeap() -> HANDLE;\n         pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T)\n                       -> LPVOID;"}]}