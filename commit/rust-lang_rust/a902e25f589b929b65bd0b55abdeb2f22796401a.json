{"sha": "a902e25f589b929b65bd0b55abdeb2f22796401a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MDJlMjVmNTg5YjkyOWI2NWJkMGI1NWFiZGViMmYyMjc5NjQwMWE=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-29T18:33:31Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-07-06T18:12:56Z"}, "message": "Add s to non_fmt_panic", "tree": {"sha": "e4aba51e9f649d0afa8860bc4f219221b7937dc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4aba51e9f649d0afa8860bc4f219221b7937dc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a902e25f589b929b65bd0b55abdeb2f22796401a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a902e25f589b929b65bd0b55abdeb2f22796401a", "html_url": "https://github.com/rust-lang/rust/commit/a902e25f589b929b65bd0b55abdeb2f22796401a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a902e25f589b929b65bd0b55abdeb2f22796401a/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e5b78fdcf29142a20c3ba1af6aac20f82833729", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b78fdcf29142a20c3ba1af6aac20f82833729", "html_url": "https://github.com/rust-lang/rust/commit/4e5b78fdcf29142a20c3ba1af6aac20f82833729"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "6225b71692139da12f2c36352a01fed2b139eaf0", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -327,6 +327,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     store.register_renamed(\"safe_packed_borrows\", \"unaligned_references\");\n     store.register_renamed(\"disjoint_capture_migration\", \"rust_2021_incompatible_closure_captures\");\n     store.register_renamed(\"or_patterns_back_compat\", \"rust_2021_incompatible_or_patterns\");\n+    store.register_renamed(\"non_fmt_panic\", \"non_fmt_panics\");\n \n     // These were moved to tool lints, but rustc still sees them when compiling normally, before\n     // tool lints are registered, so `check_tool_name_for_backwards_compat` doesn't work. Use"}, {"sha": "99a88f6bf610d494d1bfb7a0e80ee3230a0a4007", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -9,7 +9,7 @@ use rustc_span::edition::Edition;\n use rustc_span::{hygiene, sym, symbol::kw, symbol::SymbolStr, InnerSpan, Span, Symbol};\n \n declare_lint! {\n-    /// The `non_fmt_panic` lint detects `panic!(..)` invocations where the first\n+    /// The `non_fmt_panics` lint detects `panic!(..)` invocations where the first\n     /// argument is not a formatting string.\n     ///\n     /// ### Example\n@@ -29,7 +29,7 @@ declare_lint! {\n     /// an `i32` as message.\n     ///\n     /// Rust 2021 always interprets the first argument as format string.\n-    NON_FMT_PANIC,\n+    NON_FMT_PANICS,\n     Warn,\n     \"detect single-argument panic!() invocations in which the argument is not a format string\",\n     @future_incompatible = FutureIncompatibleInfo {\n@@ -39,7 +39,7 @@ declare_lint! {\n     report_in_external_macro\n }\n \n-declare_lint_pass!(NonPanicFmt => [NON_FMT_PANIC]);\n+declare_lint_pass!(NonPanicFmt => [NON_FMT_PANICS]);\n \n impl<'tcx> LateLintPass<'tcx> for NonPanicFmt {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n@@ -91,7 +91,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         arg_span = expn.call_site;\n     }\n \n-    cx.struct_span_lint(NON_FMT_PANIC, arg_span, |lint| {\n+    cx.struct_span_lint(NON_FMT_PANICS, arg_span, |lint| {\n         let mut l = lint.build(\"panic message is not a string literal\");\n         l.note(\"this usage of panic!() is deprecated; it will be a hard error in Rust 2021\");\n         l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n@@ -174,7 +174,7 @@ fn check_panic_str<'tcx>(\n             [] => vec![fmt_span],\n             v => v.iter().map(|span| fmt_span.from_inner(*span)).collect(),\n         };\n-        cx.struct_span_lint(NON_FMT_PANIC, arg_spans, |lint| {\n+        cx.struct_span_lint(NON_FMT_PANICS, arg_spans, |lint| {\n             let mut l = lint.build(match n_arguments {\n                 1 => \"panic message contains an unused formatting placeholder\",\n                 _ => \"panic message contains unused formatting placeholders\",\n@@ -208,7 +208,7 @@ fn check_panic_str<'tcx>(\n             Some(v) if v.len() == 1 => \"panic message contains a brace\",\n             _ => \"panic message contains braces\",\n         };\n-        cx.struct_span_lint(NON_FMT_PANIC, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n+        cx.struct_span_lint(NON_FMT_PANICS, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n             let mut l = lint.build(msg);\n             l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n             if span.contains(arg.span) {"}, {"sha": "3557dbad90cc215f01af0e199f63879b0c2a3183", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -164,8 +164,8 @@\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(no_coverage)] // rust-lang/rust#84605\n #![deny(unsafe_op_in_unsafe_fn)]\n-#![allow(renamed_and_removed_lints)]\n-#![deny(or_patterns_back_compat)]\n+#![cfg_attr(bootstrap, deny(or_patterns_back_compat))]\n+#![cfg_attr(not(bootstrap), deny(rust_2021_incompatible_or_patterns))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "e4455d86a1440b7f183c7d96582f5557bcd6d5f2", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_panic)]\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n #![crate_type = \"lib\"]\n \n const MSG: &str = \"hello\";"}, {"sha": "b30e9a47a13e8bc4a76d13ae3208fd458cad0445", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -16,13 +16,13 @@ fn main() {\n \n fn named_argument_takes_precedence_to_captured() {\n     let foo = \"captured\";\n-    let s = format!(\"{foo}\", foo=\"named\");\n+    let s = format!(\"{foo}\", foo = \"named\");\n     assert_eq!(&s, \"named\");\n \n-    let s = format!(\"{foo}-{foo}-{foo}\", foo=\"named\");\n+    let s = format!(\"{foo}-{foo}-{foo}\", foo = \"named\");\n     assert_eq!(&s, \"named-named-named\");\n \n-    let s = format!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n+    let s = format!(\"{}-{bar}-{foo}\", \"positional\", bar = \"named\");\n     assert_eq!(&s, \"positional-named-captured\");\n }\n \n@@ -42,10 +42,11 @@ fn panic_with_single_argument_does_not_get_formatted() {\n     // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n     // For stability reasons this will need to part of an edition change.\n \n-    #[allow(non_fmt_panic)]\n+    #[allow(non_fmt_panics)]\n     let msg = std::panic::catch_unwind(|| {\n         panic!(\"{foo}\");\n-    }).unwrap_err();\n+    })\n+    .unwrap_err();\n \n     assert_eq!(msg.downcast_ref::<&str>(), Some(&\"{foo}\"))\n }\n@@ -55,8 +56,9 @@ fn panic_with_multiple_arguments_is_formatted() {\n     let foo = \"captured\";\n \n     let msg = std::panic::catch_unwind(|| {\n-        panic!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n-    }).unwrap_err();\n+        panic!(\"{}-{bar}-{foo}\", \"positional\", bar = \"named\");\n+    })\n+    .unwrap_err();\n \n     assert_eq!(msg.downcast_ref::<String>(), Some(&\"positional-named-captured\".to_string()))\n }"}, {"sha": "753675872b9cac6f39228a89f28785a09c18002a", "filename": "src/test/ui/macros/assert-macro-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -2,7 +2,7 @@\n // error-pattern:panicked at 'test-assert-owned'\n // ignore-emscripten no processes\n \n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n fn main() {\n     assert!(false, \"test-assert-owned\".to_string());"}, {"sha": "780e158fe0b8f8bf46fd1ee6d961fc06f68d5f5b", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -14,11 +14,12 @@\n // revisions: std core\n \n // ignore-wasm32-bare compiled with panic=abort by default\n-\n #![cfg_attr(core, no_std)]\n \n-#[cfg(std)] use std::fmt;\n-#[cfg(core)] use core::fmt;\n+#[cfg(core)]\n+use core::fmt;\n+#[cfg(std)]\n+use std::fmt;\n \n // an easy mistake in the implementation of 'assert!'\n // would cause this to say \"explicit panic\"\n@@ -57,7 +58,7 @@ fn writeln_1arg() {\n //\n // (Example: Issue #48042)\n #[test]\n-#[allow(non_fmt_panic)]\n+#[allow(non_fmt_panics)]\n fn to_format_or_not_to_format() {\n     // (\"{}\" is the easiest string to test because if this gets\n     // sent to format_args!, it'll simply fail to compile.\n@@ -80,13 +81,17 @@ fn to_format_or_not_to_format() {\n     // format!(\"{}\",); // see check-fail\n     // format_args!(\"{}\",); // see check-fail\n \n-    if falsum() { panic!(\"{}\",); }\n+    if falsum() {\n+        panic!(\"{}\",);\n+    }\n \n     // print!(\"{}\",); // see check-fail\n     // println!(\"{}\",); // see check-fail\n     // unimplemented!(\"{}\",); // see check-fail\n \n-    if falsum() { unreachable!(\"{}\",); }\n+    if falsum() {\n+        unreachable!(\"{}\",);\n+    }\n \n     // write!(&mut stdout, \"{}\",); // see check-fail\n     // writeln!(&mut stdout, \"{}\",); // see check-fail"}, {"sha": "6aa2eb174e922166af0333ce180de8478dfedc85", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -4,7 +4,7 @@ warning: panic message contains a brace\n LL |     panic!(\"here's a brace: {\");\n    |                             ^\n    |\n-   = note: `#[warn(non_fmt_panic)]` on by default\n+   = note: `#[warn(non_fmt_panics)]` on by default\n    = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |"}, {"sha": "9d80357873488352e8078db797eae2f0c656e43c", "filename": "src/test/ui/panics/explicit-panic-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -1,6 +1,6 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n // run-fail\n // error-pattern:wooooo"}, {"sha": "663bf6713d090e444e8f900d3687d1e3be383a5e", "filename": "src/test/ui/panics/panic-macro-any-wrapped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -2,7 +2,7 @@\n // error-pattern:panicked at 'Box<dyn Any>'\n // ignore-emscripten no processes\n \n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n fn main() {\n     panic!(Box::new(612_i64));"}, {"sha": "08acc6e8078f9b8df2b804ee4a30e019f34f186f", "filename": "src/test/ui/panics/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -3,7 +3,7 @@\n // ignore-emscripten no processes\n \n #![feature(box_syntax)]\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n fn main() {\n     panic!(box 413 as Box<dyn std::any::Any + Send>);"}, {"sha": "421614057c577771c457fc6e129f071ed68e2de3", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -592,7 +592,7 @@ Released 2021-02-11\n \n * Previously deprecated [`str_to_string`] and [`string_to_string`] have been un-deprecated\n   as `restriction` lints [#6333](https://github.com/rust-lang/rust-clippy/pull/6333)\n-* Deprecate `panic_params` lint. This is now available in rustc as `non_fmt_panic`\n+* Deprecate `panic_params` lint. This is now available in rustc as `non_fmt_panics`\n   [#6351](https://github.com/rust-lang/rust-clippy/pull/6351)\n * Move [`map_err_ignore`] to `restriction`\n   [#6416](https://github.com/rust-lang/rust-clippy/pull/6416)"}, {"sha": "c29b3e7c74c2c113fd85fbd0893d52ab4aad2f30", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -2171,7 +2171,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::unused_label\", \"unused_labels\");\n     ls.register_renamed(\"clippy::drop_bounds\", \"drop_bounds\");\n     ls.register_renamed(\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\");\n-    ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panic\");\n+    ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panics\");\n     ls.register_renamed(\"clippy::unknown_clippy_lints\", \"unknown_lints\");\n }\n "}, {"sha": "2180f848d62cd256f7538d100d6cf5c634398ec2", "filename": "src/tools/clippy/tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -1,4 +1,4 @@\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n macro_rules! assert_const {\n     ($len:expr) => {"}, {"sha": "c0002e5354310ab9bcc32c2f0753e534c02ff9eb", "filename": "src/tools/clippy/tests/ui/deprecated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a902e25f589b929b65bd0b55abdeb2f22796401a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr?ref=a902e25f589b929b65bd0b55abdeb2f22796401a", "patch": "@@ -60,11 +60,11 @@ error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cs\n LL | #[warn(clippy::temporary_cstring_as_ptr)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n-error: lint `clippy::panic_params` has been renamed to `non_fmt_panic`\n+error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n   --> $DIR/deprecated.rs:11:8\n    |\n LL | #[warn(clippy::panic_params)]\n-   |        ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panic`\n+   |        ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n   --> $DIR/deprecated.rs:12:8"}]}