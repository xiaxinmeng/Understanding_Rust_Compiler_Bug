{"sha": "dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1", "node_id": "C_kwDOAAsO6NoAKGRjZmU5MmUxOTNlYjBkM2Q5ZGY0NTVmMzI3NGQ2YmEyZDkwYzQ1YzE", "commit": {"author": {"name": "leocth", "email": "leocth31@gmail.com", "date": "2022-06-25T03:19:08Z"}, "committer": {"name": "leocth", "email": "leocth31@gmail.com", "date": "2022-06-25T03:19:08Z"}, "message": "add `fetch_not` method on `AtomicBool`", "tree": {"sha": "7a6d3c6437a89827dadaa27c85c4dbf960b2aae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a6d3c6437a89827dadaa27c85c4dbf960b2aae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1", "html_url": "https://github.com/rust-lang/rust/commit/dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1/comments", "author": {"login": "pluiedev", "id": 22406910, "node_id": "MDQ6VXNlcjIyNDA2OTEw", "avatar_url": "https://avatars.githubusercontent.com/u/22406910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pluiedev", "html_url": "https://github.com/pluiedev", "followers_url": "https://api.github.com/users/pluiedev/followers", "following_url": "https://api.github.com/users/pluiedev/following{/other_user}", "gists_url": "https://api.github.com/users/pluiedev/gists{/gist_id}", "starred_url": "https://api.github.com/users/pluiedev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pluiedev/subscriptions", "organizations_url": "https://api.github.com/users/pluiedev/orgs", "repos_url": "https://api.github.com/users/pluiedev/repos", "events_url": "https://api.github.com/users/pluiedev/events{/privacy}", "received_events_url": "https://api.github.com/users/pluiedev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pluiedev", "id": 22406910, "node_id": "MDQ6VXNlcjIyNDA2OTEw", "avatar_url": "https://avatars.githubusercontent.com/u/22406910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pluiedev", "html_url": "https://github.com/pluiedev", "followers_url": "https://api.github.com/users/pluiedev/followers", "following_url": "https://api.github.com/users/pluiedev/following{/other_user}", "gists_url": "https://api.github.com/users/pluiedev/gists{/gist_id}", "starred_url": "https://api.github.com/users/pluiedev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pluiedev/subscriptions", "organizations_url": "https://api.github.com/users/pluiedev/orgs", "repos_url": "https://api.github.com/users/pluiedev/repos", "events_url": "https://api.github.com/users/pluiedev/events{/privacy}", "received_events_url": "https://api.github.com/users/pluiedev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d017d59ed013a4bc2431d023077eb7209fe9c60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d017d59ed013a4bc2431d023077eb7209fe9c60d", "html_url": "https://github.com/rust-lang/rust/commit/d017d59ed013a4bc2431d023077eb7209fe9c60d"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "afc4eda49abd5d73c4a5ba2b7ae59422172edf0d", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1", "patch": "@@ -854,6 +854,41 @@ impl AtomicBool {\n         unsafe { atomic_xor(self.v.get(), val as u8, order) != 0 }\n     }\n \n+    /// Logical \"not\" with a boolean value.\n+    ///\n+    /// Performs a logical \"not\" operation on the current value, and sets\n+    /// the new value to the result.\n+    ///\n+    /// Returns the previous value.\n+    ///\n+    /// `fetch_not` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation. All ordering modes are possible. Note that using\n+    /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n+    /// using [`Release`] makes the load part [`Relaxed`].\n+    ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let foo = AtomicBool::new(true);\n+    /// assert_eq!(foo.fetch_not(Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), false);\n+    ///\n+    /// let foo = AtomicBool::new(false);\n+    /// assert_eq!(foo.fetch_not(Ordering::SeqCst), false);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), true);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(target_has_atomic = \"8\")]\n+    pub fn fetch_not(&self, order: Ordering) -> bool {\n+        self.fetch_xor(true, order)\n+    }\n+\n     /// Returns a mutable pointer to the underlying [`bool`].\n     ///\n     /// Doing non-atomic reads and writes on the resulting integer can be a data race."}, {"sha": "36d1929d5be46e53c8ebe8d1ed2bc10774a99361", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=dcfe92e193eb0d3d9df455f3274d6ba2d90c45c1", "patch": "@@ -30,6 +30,18 @@ fn bool_nand() {\n     assert_eq!(a.fetch_nand(true, SeqCst), false);\n     assert_eq!(a.load(SeqCst), true);\n }\n+#[test]\n+fn bool_not() {\n+    let a = AtomicBool::new(false);\n+    assert_eq!(a.fetch_not(SeqCst), false);\n+    assert_eq!(a.load(SeqCst), true);\n+    assert_eq!(a.fetch_not(SeqCst), true);\n+    assert_eq!(a.load(SeqCst), false);\n+    assert_eq!(a.fetch_not(SeqCst), false);\n+    assert_eq!(a.load(SeqCst), true);\n+    assert_eq!(a.fetch_not(SeqCst), true);\n+    assert_eq!(a.load(SeqCst), false);\n+}\n \n #[test]\n fn uint_and() {\n@@ -158,6 +170,8 @@ fn atomic_access_bool() {\n         assert_eq!(*ATOMIC.get_mut(), true);\n         ATOMIC.fetch_xor(true, SeqCst);\n         assert_eq!(*ATOMIC.get_mut(), false);\n+        ATOMIC.fetch_not(SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n     }\n }\n "}]}