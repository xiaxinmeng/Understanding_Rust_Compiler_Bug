{"sha": "1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYzgyMmU2YWZhYTNhODRmMGQ2OGE1OTBlOWJhY2RmODAwMTdlYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T19:43:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T19:43:41Z"}, "message": "Auto merge of #1884 - DrMeepster:start, r=RalfJung\n\nadd support for `#[start]`\n\nThis PR adds support for the `#[start]` attribute and fixes #1825.\n\nIt also renames `eval_main` to `eval_entry` to reflect that it can evaluate any entry function.", "tree": {"sha": "b4cfa7073a91c1ddfb2161ed145467a7b7415db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4cfa7073a91c1ddfb2161ed145467a7b7415db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "html_url": "https://github.com/rust-lang/rust/commit/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97c34020ee82986a3a1b8f2321454635a244254", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97c34020ee82986a3a1b8f2321454635a244254", "html_url": "https://github.com/rust-lang/rust/commit/b97c34020ee82986a3a1b8f2321454635a244254"}, {"sha": "1ec28f78f3c9c68a850ac943a6d2100266782dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec28f78f3c9c68a850ac943a6d2100266782dc1", "html_url": "https://github.com/rust-lang/rust/commit/1ec28f78f3c9c68a850ac943a6d2100266782dc1"}], "stats": {"total": 102, "additions": 66, "deletions": 36}, "files": [{"sha": "be542c2bc0a6a28ffa2e8c935356410e01fc28c6", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "patch": "@@ -20,11 +20,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n         compiler.session().abort_if_errors();\n \n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n-            let (entry_def_id, _) = tcx.entry_fn(()).expect(\"no main or start function found\");\n+            let (entry_def_id, entry_type) =\n+                tcx.entry_fn(()).expect(\"no main or start function found\");\n \n             self.bencher.iter(|| {\n                 let config = miri::MiriConfig::default();\n-                miri::eval_main(tcx, entry_def_id, config);\n+                miri::eval_entry(tcx, entry_def_id, entry_type, config);\n             });\n         });\n "}, {"sha": "fbc87148ec7b71a5d3571848e3ac1968ef81afa2", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "patch": "@@ -58,8 +58,8 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n \n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n             init_late_loggers(tcx);\n-            let (entry_def_id, _) = if let Some((entry_def, x)) = tcx.entry_fn(()) {\n-                (entry_def, x)\n+            let (entry_def_id, entry_type) = if let Some(entry_def) = tcx.entry_fn(()) {\n+                entry_def\n             } else {\n                 let output_ty = ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(\n                     ColorConfig::Auto,\n@@ -79,7 +79,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 env::set_current_dir(cwd).unwrap();\n             }\n \n-            if let Some(return_code) = miri::eval_main(tcx, entry_def_id, config) {\n+            if let Some(return_code) = miri::eval_entry(tcx, entry_def_id, entry_type, config) {\n                 std::process::exit(\n                     i32::try_from(return_code).expect(\"Return value was too large!\"),\n                 );"}, {"sha": "311b930cd9dd899a7891b9678d72c282497ac48c", "filename": "src/eval.rs", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "patch": "@@ -13,6 +13,8 @@ use rustc_middle::ty::{\n };\n use rustc_target::spec::abi::Abi;\n \n+use rustc_session::config::EntryFnType;\n+\n use crate::*;\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -120,12 +122,13 @@ impl Default for MiriConfig {\n }\n \n /// Returns a freshly created `InterpCx`, along with an `MPlaceTy` representing\n-/// the location where the return value of the `start` lang item will be\n+/// the location where the return value of the `start` function will be\n /// written to.\n /// Public because this is also used by `priroda`.\n pub fn create_ecx<'mir, 'tcx: 'mir>(\n     tcx: TyCtxt<'tcx>,\n-    main_id: DefId,\n+    entry_id: DefId,\n+    entry_type: EntryFnType,\n     config: MiriConfig,\n ) -> InterpResult<'tcx, (InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>, MPlaceTy<'tcx, Tag>)> {\n     let param_env = ty::ParamEnv::reveal_all();\n@@ -148,26 +151,10 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     }\n \n     // Setup first stack-frame\n-    let main_instance = ty::Instance::mono(tcx, main_id);\n-    let main_mir = ecx.load_mir(main_instance.def, None)?;\n-    if main_mir.arg_count != 0 {\n-        bug!(\"main function must not take any arguments\");\n-    }\n+    let entry_instance = ty::Instance::mono(tcx, entry_id);\n \n-    let start_id = tcx.lang_items().start_fn().unwrap();\n-    let main_ret_ty = tcx.fn_sig(main_id).output();\n-    let main_ret_ty = main_ret_ty.no_bound_vars().unwrap();\n-    let start_instance = ty::Instance::resolve(\n-        tcx,\n-        ty::ParamEnv::reveal_all(),\n-        start_id,\n-        tcx.mk_substs(::std::iter::once(ty::subst::GenericArg::from(main_ret_ty))),\n-    )\n-    .unwrap()\n-    .unwrap();\n+    // First argument is constructed later, because its skipped if the entry function uses #[start]\n \n-    // First argument: pointer to `main()`.\n-    let main_ptr = ecx.memory.create_fn_alloc(FnVal::Instance(main_instance));\n     // Second argument (argc): length of `config.args`.\n     let argc = Scalar::from_machine_usize(u64::try_from(config.args.len()).unwrap(), &ecx);\n     // Third argument (`argv`): created from `config.args`.\n@@ -243,25 +230,58 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     // Return place (in static memory so that it does not count as leak).\n     let ret_place = ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into())?;\n     // Call start function.\n-    ecx.call_function(\n-        start_instance,\n-        Abi::Rust,\n-        &[Scalar::from_pointer(main_ptr, &ecx).into(), argc.into(), argv],\n-        Some(&ret_place.into()),\n-        StackPopCleanup::None { cleanup: true },\n-    )?;\n+\n+    match entry_type {\n+        EntryFnType::Main => {\n+            let start_id = tcx.lang_items().start_fn().unwrap();\n+            let main_ret_ty = tcx.fn_sig(entry_id).output();\n+            let main_ret_ty = main_ret_ty.no_bound_vars().unwrap();\n+            let start_instance = ty::Instance::resolve(\n+                tcx,\n+                ty::ParamEnv::reveal_all(),\n+                start_id,\n+                tcx.mk_substs(::std::iter::once(ty::subst::GenericArg::from(main_ret_ty))),\n+            )\n+            .unwrap()\n+            .unwrap();\n+\n+            let main_ptr = ecx.memory.create_fn_alloc(FnVal::Instance(entry_instance));\n+\n+            ecx.call_function(\n+                start_instance,\n+                Abi::Rust,\n+                &[Scalar::from_pointer(main_ptr, &ecx).into(), argc.into(), argv],\n+                Some(&ret_place.into()),\n+                StackPopCleanup::None { cleanup: true },\n+            )?;\n+        }\n+        EntryFnType::Start => {\n+            ecx.call_function(\n+                entry_instance,\n+                Abi::Rust,\n+                &[argc.into(), argv],\n+                Some(&ret_place.into()),\n+                StackPopCleanup::None { cleanup: true },\n+            )?;\n+        }\n+    }\n \n     Ok((ecx, ret_place))\n }\n \n-/// Evaluates the main function specified by `main_id`.\n+/// Evaluates the entry function specified by `entry_id`.\n /// Returns `Some(return_code)` if program executed completed.\n /// Returns `None` if an evaluation error occured.\n-pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n+pub fn eval_entry<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    entry_id: DefId,\n+    entry_type: EntryFnType,\n+    config: MiriConfig,\n+) -> Option<i64> {\n     // Copy setting before we move `config`.\n     let ignore_leaks = config.ignore_leaks;\n \n-    let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {\n+    let (mut ecx, ret_place) = match create_ecx(tcx, entry_id, entry_type, config) {\n         Ok(v) => v,\n         Err(err) => {\n             err.print_backtrace();"}, {"sha": "7ed915b6d1d4bbda509e632371e7b5bf60c14ac8", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "patch": "@@ -60,7 +60,7 @@ pub use crate::diagnostics::{\n     NonHaltingDiagnostic, TerminationInfo,\n };\n pub use crate::eval::{\n-    create_ecx, eval_main, AlignmentCheck, IsolatedOp, MiriConfig, RejectOpWith,\n+    create_ecx, eval_entry, AlignmentCheck, IsolatedOp, MiriConfig, RejectOpWith,\n };\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n pub use crate::machine::{"}, {"sha": "f25d62fa8c33532989ee7f44c14ab69a61c620b8", "filename": "tests/run-pass/start.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/tests%2Frun-pass%2Fstart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/tests%2Frun-pass%2Fstart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstart.rs?ref=1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "patch": "@@ -0,0 +1,8 @@\n+#![feature(start)]\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    println!(\"Hello from start!\");\n+\n+    0\n+}"}, {"sha": "d7f627d237c3e90eacc545922975ae35168f333b", "filename": "tests/run-pass/start.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/tests%2Frun-pass%2Fstart.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1cc822e6afaa3a84f0d68a590e9bacdf80017ea6/tests%2Frun-pass%2Fstart.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstart.stdout?ref=1cc822e6afaa3a84f0d68a590e9bacdf80017ea6", "patch": "@@ -0,0 +1 @@\n+Hello from start!"}]}