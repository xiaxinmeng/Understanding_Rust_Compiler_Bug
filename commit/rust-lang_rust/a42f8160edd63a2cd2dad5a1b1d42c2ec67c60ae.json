{"sha": "a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MmY4MTYwZWRkNjNhMmNkMmRhZDVhMWIxZDQyYzJlYzY3YzYwYWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-12T19:10:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-15T08:14:29Z"}, "message": "Add E0612", "tree": {"sha": "d28bc1c06f4f846fcf7d81c7fda17be4ee89aecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d28bc1c06f4f846fcf7d81c7fda17be4ee89aecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "html_url": "https://github.com/rust-lang/rust/commit/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302f99693f09fae5e9323cfa0160f2c6ebd6b274", "url": "https://api.github.com/repos/rust-lang/rust/commits/302f99693f09fae5e9323cfa0160f2c6ebd6b274", "html_url": "https://github.com/rust-lang/rust/commit/302f99693f09fae5e9323cfa0160f2c6ebd6b274"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "fff6cb068c85e372e14e6467a756f5f06167c65d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "patch": "@@ -3053,26 +3053,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let struct_path = self.tcx().item_path_str(did);\n             struct_span_err!(self.tcx().sess, expr.span, E0611,\n                              \"field `{}` of tuple-struct `{}` is private\",\n-                             idx.node, struct_path);\n+                             idx.node, struct_path).emit();\n             return field_ty;\n         }\n \n-        self.type_error_message(\n-            expr.span,\n-            |actual| {\n-                if tuple_like {\n-                    format!(\"attempted out-of-bounds tuple index `{}` on \\\n-                                    type `{}`\",\n-                                   idx.node,\n-                                   actual)\n-                } else {\n-                    format!(\"attempted tuple index `{}` on type `{}`, but the \\\n-                                     type was not a tuple or tuple struct\",\n-                                    idx.node,\n-                                    actual)\n-                }\n-            },\n-            expr_t);\n+        if tuple_like {\n+            type_error_struct!(self.tcx().sess, expr.span, expr_t, E0612,\n+                               \"attempted out-of-bounds tuple index `{}` on type `{}`\",\n+                               idx.node, expr_t).emit();\n+        } else {\n+            type_error_struct!(self.tcx().sess, expr.span, expr_t, E0613,\n+                               \"attempted tuple index `{}` on type `{}`, but the type was not a \\\n+                                tuple or tuple struct\",\n+                               idx.node, expr_t).emit();\n+        }\n \n         self.tcx().types.err\n     }\n@@ -3173,10 +3167,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 field_type_hint = tcx.types.err;\n                 if let Some(_) = variant.find_field_named(field.name.node) {\n                     let mut err = struct_span_err!(self.tcx.sess,\n-                                                field.name.span,\n-                                                E0062,\n-                                                \"field `{}` specified more than once\",\n-                                                field.name.node);\n+                                                   field.name.span,\n+                                                   E0062,\n+                                                   \"field `{}` specified more than once\",\n+                                                   field.name.node);\n \n                     err.span_label(field.name.span, \"used more than once\");\n "}, {"sha": "9eff22027c7d2c62857a607ae68b418e933fa2f3", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "patch": "@@ -4208,6 +4208,40 @@ println!(\"{}\", y.get()); // So we can get the value through the function.\n ```\n \"##,\n \n+E0612: r##\"\n+Attempted out-of-bounds tuple index.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0612\n+struct Foo(u32);\n+\n+let y = Foo(0);\n+println!(\"{}\", y.1); // error: attempted out-of-bounds tuple index `1`\n+                     //        on type `Foo`\n+```\n+\n+If a tuple/tuple-struct type has n fields, you can only try to access these n\n+fields from 0 to (n - 1). So in this case, you can only index `0`. Example:\n+\n+```\n+struct Foo(u32);\n+\n+let y = Foo(0);\n+println!(\"{}\", y.0); // ok!\n+```\n+\"##,\n+\n+E0613: r##\"\n+Attempted tuple index on a type which isn't a tuple nor a tuple-struct.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0613\n+\n+```\n+\"##,\n+\n E0617: r##\"\n Attempted to pass an invalid type of variable into a variadic function.\n "}, {"sha": "429a8bb7eb7b2119be64b58dda966c98fdce3b54", "filename": "src/test/compile-fail/E0612.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Ftest%2Fcompile-fail%2FE0612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Ftest%2Fcompile-fail%2FE0612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0612.rs?ref=a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo(u32);\n+\n+fn main() {\n+   let y = Foo(0);\n+   y.1; //~ ERROR E0612\n+}"}, {"sha": "5b2e04e25a93d6ab82b01023b9573ad37be488ab", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "patch": "@@ -42,7 +42,7 @@ fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B, z: inner::Z) {\n     e.b; //~ ERROR: field `b` of struct `xc::B` is private\n \n     z.0;\n-    z.1; //~ ERROR: field `1` of struct `inner::Z` is private\n+    z.1; //~ ERROR: field `1` of tuple-struct `inner::Z` is private\n }\n \n fn main() {}"}, {"sha": "136b04fcb0f588878b11d4a4e563c8eb915fcb84", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "patch": "@@ -16,7 +16,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 51 |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n \n-error: attempted tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n+error[E0613]: attempted tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n   --> $DIR/macro-backtrace-invalid-internals.rs:27:11\n    |\n 27 |           (1).0\n@@ -43,7 +43,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 55 |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation\n \n-error: attempted tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n+error[E0613]: attempted tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n   --> $DIR/macro-backtrace-invalid-internals.rs:45:11\n    |\n 45 |           (1).0"}]}