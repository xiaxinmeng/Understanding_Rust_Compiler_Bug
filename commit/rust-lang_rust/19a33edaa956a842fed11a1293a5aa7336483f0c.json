{"sha": "19a33edaa956a842fed11a1293a5aa7336483f0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YTMzZWRhYTk1NmE4NDJmZWQxMWExMjkzYTVhYTczMzY0ODNmMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-01T11:58:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-01T11:58:28Z"}, "message": "Auto merge of #28060 - GuillaumeGomez:patch-3, r=Manishearth\n\nPart of #24407\r\n\r\nr? @Manishearth", "tree": {"sha": "f72ae35fd9b42356064eca34d9702313e35a9b07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f72ae35fd9b42356064eca34d9702313e35a9b07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a33edaa956a842fed11a1293a5aa7336483f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a33edaa956a842fed11a1293a5aa7336483f0c", "html_url": "https://github.com/rust-lang/rust/commit/19a33edaa956a842fed11a1293a5aa7336483f0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a33edaa956a842fed11a1293a5aa7336483f0c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "html_url": "https://github.com/rust-lang/rust/commit/ae75ef9e62b7df8c46865cfb907c56cab1f29f81"}, {"sha": "ae0409b6958429b99752102562ca747c8a0b04f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0409b6958429b99752102562ca747c8a0b04f0", "html_url": "https://github.com/rust-lang/rust/commit/ae0409b6958429b99752102562ca747c8a0b04f0"}], "stats": {"total": 198, "additions": 189, "deletions": 9}, "files": [{"sha": "f06fd9f70e2c1f1e118b842e3c6d60f601bbd9af", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/19a33edaa956a842fed11a1293a5aa7336483f0c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a33edaa956a842fed11a1293a5aa7336483f0c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=19a33edaa956a842fed11a1293a5aa7336483f0c", "patch": "@@ -397,6 +397,55 @@ impl Bar {\n ```\n \"##,\n \n+E0411: r##\"\n+The `Self` keyword was used outside an impl or a trait. Erroneous\n+code example:\n+\n+```\n+<Self>::foo; // error: use of `Self` outside of an impl or trait\n+```\n+\n+The `Self` keyword represents the current type, which explains why it\n+can only be used inside an impl or a trait. It gives access to the\n+associated items of a type:\n+\n+```\n+trait Foo {\n+    type Bar;\n+}\n+\n+trait Baz : Foo {\n+    fn bar() -> Self::Bar; // like this\n+}\n+```\n+\n+However, be careful when two types has a common associated type:\n+\n+```\n+trait Foo {\n+    type Bar;\n+}\n+\n+trait Foo2 {\n+    type Bar;\n+}\n+\n+trait Baz : Foo + Foo2 {\n+    fn bar() -> Self::Bar;\n+    // error: ambiguous associated type `Bar` in bounds of `Self`\n+}\n+```\n+\n+This problem can be solved by specifying from which trait we want\n+to use the `Bar` type:\n+\n+```\n+trait Baz : Foo + Foo2 {\n+    fn bar() -> <Self as Foo>::Bar; // ok!\n+}\n+```\n+\"##,\n+\n E0412: r##\"\n An undeclared type name was used. Example of erroneous codes:\n \n@@ -823,8 +872,8 @@ impl Foo for i32 {}\n }\n \n register_diagnostics! {\n-    E0153, // called no where\n-    E0157, // called from no where\n+//  E0153, unused error code\n+//  E0157, unused error code\n     E0254, // import conflicts with imported crate in this module\n     E0257,\n     E0258,\n@@ -835,7 +884,6 @@ register_diagnostics! {\n     E0409, // variable is bound with different mode in pattern # than in\n            // pattern #1\n     E0410, // variable from pattern is not bound in pattern 1\n-    E0411, // use of `Self` outside of an impl or trait\n     E0414, // only irrefutable patterns allowed here\n     E0418, // is not an enum variant, struct or const\n     E0420, // is not an associated const"}, {"sha": "e356f612cdef24c915c1e6094e097b2836b6c837", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 138, "deletions": 6, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/19a33edaa956a842fed11a1293a5aa7336483f0c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a33edaa956a842fed11a1293a5aa7336483f0c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=19a33edaa956a842fed11a1293a5aa7336483f0c", "patch": "@@ -3020,6 +3020,144 @@ parameters. You can read more about it in the API documentation:\n https://doc.rust-lang.org/std/marker/struct.PhantomData.html\n \"##,\n \n+E0439: r##\"\n+The length of the platform-intrinsic function `simd_shuffle`\n+wasn't specified. Erroneous code example:\n+\n+```\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B;\n+    // error: invalid `simd_shuffle`, needs length: `simd_shuffle`\n+}\n+```\n+\n+The `simd_shuffle` function needs the length of the array passed as\n+last parameter in its name. Example:\n+\n+```\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle8<A,B>(a: A, b: A, c: [u32; 8]) -> B;\n+}\n+```\n+\"##,\n+\n+E0440: r##\"\n+A platform-specific intrinsic function has the wrong number of type\n+parameters. Erroneous code example:\n+\n+```\n+#[repr(simd)]\n+struct f64x2(f64, f64);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_movemask_pd<T>(x: f64x2) -> i32;\n+    // error: platform-specific intrinsic has wrong number of type\n+    //        parameters\n+}\n+```\n+\n+Please refer to the function declaration to see if it corresponds\n+with yours. Example:\n+\n+```\n+#[repr(simd)]\n+struct f64x2(f64, f64);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_movemask_pd(x: f64x2) -> i32;\n+}\n+```\n+\"##,\n+\n+E0441: r##\"\n+An unknown platform-specific intrinsic function was used. Erroneous\n+code example:\n+\n+```\n+#[repr(simd)]\n+struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_ep16(x: i16x8, y: i16x8) -> i16x8;\n+    // error: unrecognized platform-specific intrinsic function\n+}\n+```\n+\n+Please verify that the function name wasn't misspelled, and ensure\n+that it is declared in the rust source code (in the file\n+src/librustc_platform_intrinsics/x86.rs). Example:\n+\n+```\n+#[repr(simd)]\n+struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\n+}\n+```\n+\"##,\n+\n+E0442: r##\"\n+Intrinsic argument(s) and/or return value have the wrong type.\n+Erroneous code example:\n+\n+```\n+#[repr(simd)]\n+struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8,\n+             i8, i8, i8, i8, i8, i8, i8, i8);\n+#[repr(simd)]\n+struct i32x4(i32, i32, i32, i32);\n+#[repr(simd)]\n+struct i64x2(i64, i64);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;\n+    // error: intrinsic arguments/return value have wrong type\n+}\n+```\n+\n+To fix this error, please refer to the function declaration to give\n+it the awaited types. Example:\n+\n+```\n+#[repr(simd)]\n+struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\n+}\n+```\n+\"##,\n+\n+E0443: r##\"\n+Intrinsic argument(s) and/or return value have the wrong type.\n+Erroneous code example:\n+\n+```\n+#[repr(simd)]\n+struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+#[repr(simd)]\n+struct i64x8(i64, i64, i64, i64, i64, i64, i64, i64);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i64x8;\n+    // error: intrinsic argument/return value has wrong type\n+}\n+```\n+\n+To fix this error, please refer to the function declaration to give\n+it the awaited types. Example:\n+\n+```\n+#[repr(simd)]\n+struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+\n+extern \"platform-intrinsic\" {\n+    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; // ok!\n+}\n+```\n+\"##,\n+\n E0444: r##\"\n A platform-specific intrinsic function has wrong number of arguments.\n Erroneous code example:\n@@ -3128,10 +3266,4 @@ register_diagnostics! {\n     E0399, // trait items need to be implemented because the associated\n            // type `{}` was overridden\n     E0436,  // functional record update requires a struct\n-    E0439, // invalid `simd_shuffle`, needs length: `{}`\n-    E0440, // platform-specific intrinsic has wrong number of type parameters\n-    E0441, // unrecognized platform-specific intrinsic function\n-    E0442, // intrinsic {} has wrong type: found {}, expected {}\n-    E0443, // intrinsic {} has wrong type: found `{}`, expected `{}` which\n-           // was used for this vector type previously in this signature\n }"}]}