{"sha": "a43daa63662320ac299a137d18f125a651da47b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0M2RhYTYzNjYyMzIwYWMyOTlhMTM3ZDE4ZjEyNWE2NTFkYTQ3Yjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-15T15:24:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-15T15:24:47Z"}, "message": "Audit integer types in result.", "tree": {"sha": "3753bc3844a7297e03318c06bc1c560003f785e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3753bc3844a7297e03318c06bc1c560003f785e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a43daa63662320ac299a137d18f125a651da47b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a43daa63662320ac299a137d18f125a651da47b7", "html_url": "https://github.com/rust-lang/rust/commit/a43daa63662320ac299a137d18f125a651da47b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a43daa63662320ac299a137d18f125a651da47b7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f673c82e7d3e48ed858186e418d943d18f1c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f673c82e7d3e48ed858186e418d943d18f1c4c", "html_url": "https://github.com/rust-lang/rust/commit/d7f673c82e7d3e48ed858186e418d943d18f1c4c"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "1a874ee178ba0fd8c477c69e2232b01a1d50edd5", "filename": "src/libcore/result.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a43daa63662320ac299a137d18f125a651da47b7/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43daa63662320ac299a137d18f125a651da47b7/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=a43daa63662320ac299a137d18f125a651da47b7", "patch": "@@ -311,10 +311,10 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(2);\n+    /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.ok(), Some(2));\n     ///\n-    /// let x: Result<uint, &str> = Err(\"Nothing here\");\n+    /// let x: Result<u32, &str> = Err(\"Nothing here\");\n     /// assert_eq!(x.ok(), None);\n     /// ```\n     #[inline]\n@@ -334,10 +334,10 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(2);\n+    /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.err(), None);\n     ///\n-    /// let x: Result<uint, &str> = Err(\"Nothing here\");\n+    /// let x: Result<u32, &str> = Err(\"Nothing here\");\n     /// assert_eq!(x.err(), Some(\"Nothing here\"));\n     /// ```\n     #[inline]\n@@ -359,10 +359,10 @@ impl<T, E> Result<T, E> {\n     /// into the original, leaving the original in place.\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(2);\n+    /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.as_ref(), Ok(&2));\n     ///\n-    /// let x: Result<uint, &str> = Err(\"Error\");\n+    /// let x: Result<u32, &str> = Err(\"Error\");\n     /// assert_eq!(x.as_ref(), Err(&\"Error\"));\n     /// ```\n     #[inline]\n@@ -404,7 +404,7 @@ impl<T, E> Result<T, E> {\n     /// Convert from `Result<T, E>` to `&mut [T]` (without copying)\n     ///\n     /// ```\n-    /// let mut x: Result<&str, uint> = Ok(\"Gold\");\n+    /// let mut x: Result<&str, u32> = Ok(\"Gold\");\n     /// {\n     ///     let v = x.as_mut_slice();\n     ///     assert!(v == [\"Gold\"]);\n@@ -413,7 +413,7 @@ impl<T, E> Result<T, E> {\n     /// }\n     /// assert_eq!(x, Ok(\"Silver\"));\n     ///\n-    /// let mut x: Result<&str, uint> = Err(45);\n+    /// let mut x: Result<&str, u32> = Err(45);\n     /// assert!(x.as_mut_slice().is_empty());\n     /// ```\n     #[inline]\n@@ -481,12 +481,12 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// fn stringify(x: uint) -> String { format!(\"error code: {}\", x) }\n+    /// fn stringify(x: u32) -> String { format!(\"error code: {}\", x) }\n     ///\n-    /// let x: Result<uint, uint> = Ok(2);\n+    /// let x: Result<u32, u32> = Ok(2);\n     /// assert_eq!(x.map_err(stringify), Ok(2));\n     ///\n-    /// let x: Result<uint, uint> = Err(13);\n+    /// let x: Result<u32, u32> = Err(13);\n     /// assert_eq!(x.map_err(stringify), Err(\"error code: 13\".to_string()));\n     /// ```\n     #[inline]\n@@ -507,10 +507,10 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(7);\n+    /// let x: Result<u32, &str> = Ok(7);\n     /// assert_eq!(x.iter().next(), Some(&7));\n     ///\n-    /// let x: Result<uint, &str> = Err(\"nothing!\");\n+    /// let x: Result<u32, &str> = Err(\"nothing!\");\n     /// assert_eq!(x.iter().next(), None);\n     /// ```\n     #[inline]\n@@ -524,14 +524,14 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let mut x: Result<uint, &str> = Ok(7);\n+    /// let mut x: Result<u32, &str> = Ok(7);\n     /// match x.iter_mut().next() {\n     ///     Some(&mut ref mut x) => *x = 40,\n     ///     None => {},\n     /// }\n     /// assert_eq!(x, Ok(40));\n     ///\n-    /// let mut x: Result<uint, &str> = Err(\"nothing!\");\n+    /// let mut x: Result<u32, &str> = Err(\"nothing!\");\n     /// assert_eq!(x.iter_mut().next(), None);\n     /// ```\n     #[inline]\n@@ -545,12 +545,12 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(5);\n-    /// let v: Vec<uint> = x.into_iter().collect();\n+    /// let x: Result<u32, &str> = Ok(5);\n+    /// let v: Vec<u32> = x.into_iter().collect();\n     /// assert_eq!(v, vec![5]);\n     ///\n-    /// let x: Result<uint, &str> = Err(\"nothing!\");\n-    /// let v: Vec<uint> = x.into_iter().collect();\n+    /// let x: Result<u32, &str> = Err(\"nothing!\");\n+    /// let v: Vec<u32> = x.into_iter().collect();\n     /// assert_eq!(v, vec![]);\n     /// ```\n     #[inline]\n@@ -568,19 +568,19 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(2);\n+    /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<&str, &str> = Err(\"late error\");\n     /// assert_eq!(x.and(y), Err(\"late error\"));\n     ///\n-    /// let x: Result<uint, &str> = Err(\"early error\");\n+    /// let x: Result<u32, &str> = Err(\"early error\");\n     /// let y: Result<&str, &str> = Ok(\"foo\");\n     /// assert_eq!(x.and(y), Err(\"early error\"));\n     ///\n-    /// let x: Result<uint, &str> = Err(\"not a 2\");\n+    /// let x: Result<u32, &str> = Err(\"not a 2\");\n     /// let y: Result<&str, &str> = Err(\"late error\");\n     /// assert_eq!(x.and(y), Err(\"not a 2\"));\n     ///\n-    /// let x: Result<uint, &str> = Ok(2);\n+    /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<&str, &str> = Ok(\"different result type\");\n     /// assert_eq!(x.and(y), Ok(\"different result type\"));\n     /// ```\n@@ -600,8 +600,8 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// fn sq(x: uint) -> Result<uint, uint> { Ok(x * x) }\n-    /// fn err(x: uint) -> Result<uint, uint> { Err(x) }\n+    /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n+    /// fn err(x: u32) -> Result<u32, u32> { Err(x) }\n     ///\n     /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));\n     /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));\n@@ -622,20 +622,20 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(2);\n-    /// let y: Result<uint, &str> = Err(\"late error\");\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// let y: Result<u32, &str> = Err(\"late error\");\n     /// assert_eq!(x.or(y), Ok(2));\n     ///\n-    /// let x: Result<uint, &str> = Err(\"early error\");\n-    /// let y: Result<uint, &str> = Ok(2);\n+    /// let x: Result<u32, &str> = Err(\"early error\");\n+    /// let y: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.or(y), Ok(2));\n     ///\n-    /// let x: Result<uint, &str> = Err(\"not a 2\");\n-    /// let y: Result<uint, &str> = Err(\"late error\");\n+    /// let x: Result<u32, &str> = Err(\"not a 2\");\n+    /// let y: Result<u32, &str> = Err(\"late error\");\n     /// assert_eq!(x.or(y), Err(\"late error\"));\n     ///\n-    /// let x: Result<uint, &str> = Ok(2);\n-    /// let y: Result<uint, &str> = Ok(100);\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// let y: Result<u32, &str> = Ok(100);\n     /// assert_eq!(x.or(y), Ok(2));\n     /// ```\n     #[inline]\n@@ -654,8 +654,8 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// fn sq(x: uint) -> Result<uint, uint> { Ok(x * x) }\n-    /// fn err(x: uint) -> Result<uint, uint> { Err(x) }\n+    /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n+    /// fn err(x: u32) -> Result<u32, u32> { Err(x) }\n     ///\n     /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));\n     /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));\n@@ -678,10 +678,10 @@ impl<T, E> Result<T, E> {\n     ///\n     /// ```\n     /// let optb = 2;\n-    /// let x: Result<uint, &str> = Ok(9);\n+    /// let x: Result<u32, &str> = Ok(9);\n     /// assert_eq!(x.unwrap_or(optb), 9);\n     ///\n-    /// let x: Result<uint, &str> = Err(\"error\");\n+    /// let x: Result<u32, &str> = Err(\"error\");\n     /// assert_eq!(x.unwrap_or(optb), optb);\n     /// ```\n     #[inline]\n@@ -699,7 +699,7 @@ impl<T, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// fn count(x: &str) -> uint { x.len() }\n+    /// fn count(x: &str) -> usize { x.len() }\n     ///\n     /// assert_eq!(Ok(2).unwrap_or_else(count), 2);\n     /// assert_eq!(Err(\"foo\").unwrap_or_else(count), 3);\n@@ -726,12 +726,12 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Ok(2);\n+    /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.unwrap(), 2);\n     /// ```\n     ///\n     /// ```{.should_fail}\n-    /// let x: Result<uint, &str> = Err(\"emergency failure\");\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.unwrap(); // panics with `emergency failure`\n     /// ```\n     #[inline]\n@@ -757,12 +757,12 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// # Example\n     ///\n     /// ```{.should_fail}\n-    /// let x: Result<uint, &str> = Ok(2);\n+    /// let x: Result<u32, &str> = Ok(2);\n     /// x.unwrap_err(); // panics with `2`\n     /// ```\n     ///\n     /// ```\n-    /// let x: Result<uint, &str> = Err(\"emergency failure\");\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n     /// ```\n     #[inline]\n@@ -811,7 +811,7 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     #[inline]\n     fn next(&mut self) -> Option<&'a T> { self.inner.take() }\n     #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         let n = if self.inner.is_some() {1} else {0};\n         (n, Some(n))\n     }\n@@ -841,7 +841,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     #[inline]\n     fn next(&mut self) -> Option<&'a mut T> { self.inner.take() }\n     #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         let n = if self.inner.is_some() {1} else {0};\n         (n, Some(n))\n     }\n@@ -867,7 +867,7 @@ impl<T> Iterator for IntoIter<T> {\n     #[inline]\n     fn next(&mut self) -> Option<T> { self.inner.take() }\n     #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         let n = if self.inner.is_some() {1} else {0};\n         (n, Some(n))\n     }\n@@ -896,11 +896,11 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     /// checking for overflow:\n     ///\n     /// ```rust\n-    /// use std::uint;\n+    /// use std::u32;\n     ///\n     /// let v = vec!(1, 2);\n-    /// let res: Result<Vec<uint>, &'static str> = v.iter().map(|&x: &uint|\n-    ///     if x == uint::MAX { Err(\"Overflow!\") }\n+    /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|&x: &u32|\n+    ///     if x == u32::MAX { Err(\"Overflow!\") }\n     ///     else { Ok(x + 1) }\n     /// ).collect();\n     /// assert!(res == Ok(vec!(2, 3)));"}]}