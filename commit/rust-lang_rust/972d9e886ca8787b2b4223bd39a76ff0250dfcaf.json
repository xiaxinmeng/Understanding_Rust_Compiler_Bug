{"sha": "972d9e886ca8787b2b4223bd39a76ff0250dfcaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmQ5ZTg4NmNhODc4N2IyYjQyMjNiZDM5YTc2ZmYwMjUwZGZjYWY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-23T11:58:32Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-23T11:58:32Z"}, "message": "move `visit_predicate` into `TypeVisitor`", "tree": {"sha": "9d1973a97efc05083d055bb391a1f22ab5b1f8b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d1973a97efc05083d055bb391a1f22ab5b1f8b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972d9e886ca8787b2b4223bd39a76ff0250dfcaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972d9e886ca8787b2b4223bd39a76ff0250dfcaf", "html_url": "https://github.com/rust-lang/rust/commit/972d9e886ca8787b2b4223bd39a76ff0250dfcaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972d9e886ca8787b2b4223bd39a76ff0250dfcaf/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9cd294cf2775441e713c7ee2918b728733b99f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cd294cf2775441e713c7ee2918b728733b99f5", "html_url": "https://github.com/rust-lang/rust/commit/a9cd294cf2775441e713c7ee2918b728733b99f5"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "0e5e22dcaae9f34134dfaf4250e51189a81e3534", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/972d9e886ca8787b2b4223bd39a76ff0250dfcaf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972d9e886ca8787b2b4223bd39a76ff0250dfcaf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=972d9e886ca8787b2b4223bd39a76ff0250dfcaf", "patch": "@@ -30,8 +30,6 @@\n //!\n //! These methods return true to indicate that the visitor has found what it is\n //! looking for, and does not need to visit anything else.\n-\n-use crate::ty::structural_impls::PredicateVisitor;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -211,6 +209,10 @@ pub trait TypeVisitor<'tcx>: Sized {\n     fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n         c.super_visit_with(self)\n     }\n+\n+    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> bool {\n+        p.super_visit_with(self)\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -868,9 +870,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n             _ => ct.super_visit_with(self),\n         }\n     }\n-}\n \n-impl<'tcx> PredicateVisitor<'tcx> for HasEscapingVarsVisitor {\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool {\n         predicate.inner.outer_exclusive_binder > self.outer_index\n     }\n@@ -903,9 +903,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n         flags.intersects(self.flags)\n     }\n-}\n \n-impl<'tcx> PredicateVisitor<'tcx> for HasTypeFlagsVisitor {\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n@@ -914,6 +912,7 @@ impl<'tcx> PredicateVisitor<'tcx> for HasTypeFlagsVisitor {\n         predicate.inner.flags.intersects(self.flags)\n     }\n }\n+\n /// Collects all the late-bound regions at the innermost binding level\n /// into a hash set.\n struct LateBoundRegionsCollector {"}, {"sha": "53521d0e9f332021dc0df1933e8ee0a229a2b1b1", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/972d9e886ca8787b2b4223bd39a76ff0250dfcaf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972d9e886ca8787b2b4223bd39a76ff0250dfcaf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=972d9e886ca8787b2b4223bd39a76ff0250dfcaf", "patch": "@@ -1040,16 +1040,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     }\n }\n \n-pub(super) trait PredicateVisitor<'tcx>: TypeVisitor<'tcx> {\n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool;\n-}\n-\n-impl<T: TypeVisitor<'tcx>> PredicateVisitor<'tcx> for T {\n-    default fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool {\n-        predicate.super_visit_with(self)\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         fold_list(*self, folder, |tcx, v| tcx.intern_predicates(v))"}]}