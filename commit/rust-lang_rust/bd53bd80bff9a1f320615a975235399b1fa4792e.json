{"sha": "bd53bd80bff9a1f320615a975235399b1fa4792e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNTNiZDgwYmZmOWExZjMyMDYxNWE5NzUyMzUzOTliMWZhNDc5MmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T09:45:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T09:45:45Z"}, "message": "Push resolver up", "tree": {"sha": "13daa52031149da494c861016e7ca92242b0c2e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13daa52031149da494c861016e7ca92242b0c2e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd53bd80bff9a1f320615a975235399b1fa4792e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd53bd80bff9a1f320615a975235399b1fa4792e", "html_url": "https://github.com/rust-lang/rust/commit/bd53bd80bff9a1f320615a975235399b1fa4792e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd53bd80bff9a1f320615a975235399b1fa4792e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e00e6554ddc13be86733dc8a37a0a229931f378a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e00e6554ddc13be86733dc8a37a0a229931f378a", "html_url": "https://github.com/rust-lang/rust/commit/e00e6554ddc13be86733dc8a37a0a229931f378a"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "86b08ae6ffea29395219f4228ac276de1527d8b1", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bd53bd80bff9a1f320615a975235399b1fa4792e/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd53bd80bff9a1f320615a975235399b1fa4792e/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=bd53bd80bff9a1f320615a975235399b1fa4792e", "patch": "@@ -8,10 +8,14 @@ use std::iter::successors;\n use hir_def::{lang_item::LangItemTarget, resolver::Resolver};\n use hir_expand::name;\n use log::{info, warn};\n+use ra_db::CrateId;\n \n use crate::{db::HirDatabase, Trait};\n \n-use super::{traits::Solution, Canonical, Substs, Ty, TypeWalk};\n+use super::{\n+    traits::{InEnvironment, Solution},\n+    Canonical, Substs, Ty, TypeWalk,\n+};\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n \n@@ -31,16 +35,17 @@ pub(crate) fn deref(\n     if let Some(derefed) = ty.value.builtin_deref() {\n         Some(Canonical { value: derefed, num_vars: ty.num_vars })\n     } else {\n-        deref_by_trait(db, resolver, ty)\n+        let krate = resolver.krate()?;\n+        let environment = super::lower::trait_env(db, resolver);\n+        deref_by_trait(db, krate, InEnvironment { value: ty, environment })\n     }\n }\n \n fn deref_by_trait(\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n-    ty: &Canonical<Ty>,\n+    krate: CrateId,\n+    ty: InEnvironment<&Canonical<Ty>>,\n ) -> Option<Canonical<Ty>> {\n-    let krate = resolver.krate()?;\n     let deref_trait = match db.lang_item(krate.into(), \"deref\".into())? {\n         LangItemTarget::TraitId(t) => Trait::from(t),\n         _ => return None,\n@@ -56,10 +61,8 @@ fn deref_by_trait(\n \n     // FIXME make the Canonical handling nicer\n \n-    let env = super::lower::trait_env(db, resolver);\n-\n     let parameters = Substs::build_for_generics(&generic_params)\n-        .push(ty.value.clone().shift_bound_vars(1))\n+        .push(ty.value.value.clone().shift_bound_vars(1))\n         .build();\n \n     let projection = super::traits::ProjectionPredicate {\n@@ -69,9 +72,9 @@ fn deref_by_trait(\n \n     let obligation = super::Obligation::Projection(projection);\n \n-    let in_env = super::traits::InEnvironment { value: obligation, environment: env };\n+    let in_env = InEnvironment { value: obligation, environment: ty.environment };\n \n-    let canonical = super::Canonical { num_vars: 1 + ty.num_vars, value: in_env };\n+    let canonical = super::Canonical { num_vars: 1 + ty.value.num_vars, value: in_env };\n \n     let solution = db.trait_solve(krate.into(), canonical)?;\n \n@@ -89,14 +92,14 @@ fn deref_by_trait(\n             // the case.\n             for i in 1..vars.0.num_vars {\n                 if vars.0.value[i] != Ty::Bound((i - 1) as u32) {\n-                    warn!(\"complex solution for derefing {:?}: {:?}, ignoring\", ty, solution);\n+                    warn!(\"complex solution for derefing {:?}: {:?}, ignoring\", ty.value, solution);\n                     return None;\n                 }\n             }\n             Some(Canonical { value: vars.0.value[0].clone(), num_vars: vars.0.num_vars })\n         }\n         Solution::Ambig(_) => {\n-            info!(\"Ambiguous solution for derefing {:?}: {:?}\", ty, solution);\n+            info!(\"Ambiguous solution for derefing {:?}: {:?}\", ty.value, solution);\n             None\n         }\n     }"}]}