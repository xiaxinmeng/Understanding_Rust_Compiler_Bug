{"sha": "3e99439f4dacc8ba0d2ca48d221694362d587927", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTk0MzlmNGRhY2M4YmEwZDJjYTQ4ZDIyMTY5NDM2MmQ1ODc5Mjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T19:15:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T19:15:21Z"}, "message": "Auto merge of #85414 - RalfJung:rollup-ueqcik4, r=RalfJung\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #85087 (`eval_fn_call`: check the ABI of `body.source`)\n - #85302 (Expand WASI abbreviation in docs)\n - #85355 (More tests for issue-85255)\n - #85367 (Fix invalid input:disabled CSS selector)\n - #85374 (mark internal inplace_iteration traits as hidden)\n - #85408 (remove size field from Allocation)\n - #85409 (Simplify `cfg(any(unix, target_os=\"redox\"))` in example to just `cfg(unix)`)\n - #85412 (remove some functions that were only used by Miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "053448fd07db4cdc40aa64bc42ec11d7915140d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/053448fd07db4cdc40aa64bc42ec11d7915140d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e99439f4dacc8ba0d2ca48d221694362d587927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e99439f4dacc8ba0d2ca48d221694362d587927", "html_url": "https://github.com/rust-lang/rust/commit/3e99439f4dacc8ba0d2ca48d221694362d587927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e99439f4dacc8ba0d2ca48d221694362d587927/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa72878a61f2b0a2127fe7d700724642fc79ec66", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa72878a61f2b0a2127fe7d700724642fc79ec66", "html_url": "https://github.com/rust-lang/rust/commit/fa72878a61f2b0a2127fe7d700724642fc79ec66"}, {"sha": "a28be5cbe8acafb440fbd0bf05d72d3f3c6de4b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a28be5cbe8acafb440fbd0bf05d72d3f3c6de4b1", "html_url": "https://github.com/rust-lang/rust/commit/a28be5cbe8acafb440fbd0bf05d72d3f3c6de4b1"}], "stats": {"total": 357, "additions": 174, "deletions": 183}, "files": [{"sha": "929818bd1eee990a2ecc6c0d558669f4c0739f1e", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -27,8 +27,6 @@ pub struct Allocation<Tag = (), Extra = ()> {\n     relocations: Relocations<Tag>,\n     /// Denotes which part of this allocation is initialized.\n     init_mask: InitMask,\n-    /// The size of the allocation. Currently, must always equal `bytes.len()`.\n-    pub size: Size,\n     /// The alignment of the allocation to detect unaligned reads.\n     /// (`Align` guarantees that this is a power of two.)\n     pub align: Align,\n@@ -94,7 +92,6 @@ impl<Tag> Allocation<Tag> {\n             bytes,\n             relocations: Relocations::new(),\n             init_mask: InitMask::new(size, true),\n-            size,\n             align,\n             mutability: Mutability::Not,\n             extra: (),\n@@ -110,7 +107,6 @@ impl<Tag> Allocation<Tag> {\n             bytes: vec![0; size.bytes_usize()],\n             relocations: Relocations::new(),\n             init_mask: InitMask::new(size, false),\n-            size,\n             align,\n             mutability: Mutability::Mut,\n             extra: (),\n@@ -127,7 +123,6 @@ impl Allocation<(), ()> {\n     ) -> Allocation<T, E> {\n         Allocation {\n             bytes: self.bytes,\n-            size: self.size,\n             relocations: Relocations::from_presorted(\n                 self.relocations\n                     .iter()\n@@ -150,7 +145,11 @@ impl Allocation<(), ()> {\n /// Raw accessors. Provide access to otherwise private bytes.\n impl<Tag, Extra> Allocation<Tag, Extra> {\n     pub fn len(&self) -> usize {\n-        self.size.bytes_usize()\n+        self.bytes.len()\n+    }\n+\n+    pub fn size(&self) -> Size {\n+        Size::from_bytes(self.len())\n     }\n \n     /// Looks at a slice which may describe uninitialized bytes or describe a relocation. This differs\n@@ -276,29 +275,6 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n /// Reading and writing.\n impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n-    /// Reads bytes until a `0` is encountered. Will error if the end of the allocation is reached\n-    /// before a `0` is found.\n-    ///\n-    /// Most likely, you want to call `Memory::read_c_str` instead of this method.\n-    pub fn read_c_str(\n-        &self,\n-        cx: &impl HasDataLayout,\n-        ptr: Pointer<Tag>,\n-    ) -> InterpResult<'tcx, &[u8]> {\n-        let offset = ptr.offset.bytes_usize();\n-        Ok(match self.bytes[offset..].iter().position(|&c| c == 0) {\n-            Some(size) => {\n-                let size_with_null = Size::from_bytes(size) + Size::from_bytes(1);\n-                // Go through `get_bytes` for checks and AllocationExtra hooks.\n-                // We read the null, so we include it in the request, but we want it removed\n-                // from the result, so we do subslicing.\n-                &self.get_bytes(cx, ptr, size_with_null)?[..size]\n-            }\n-            // This includes the case where `offset` is out-of-bounds to begin with.\n-            None => throw_ub!(UnterminatedCString(ptr.erase_tag())),\n-        })\n-    }\n-\n     /// Validates that `ptr.offset` and `ptr.offset + size` do not point to the middle of a\n     /// relocation. If `allow_uninit_and_ptr` is `false`, also enforces that the memory in the\n     /// given range contains neither relocations nor uninitialized bytes."}, {"sha": "5200e4aa90dfa42072364b67301e19f86f074602", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 82, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -244,7 +244,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         let new_ptr = self.allocate(new_size, new_align, kind);\n         let old_size = match old_size_and_align {\n             Some((size, _align)) => size,\n-            None => self.get_raw(ptr.alloc_id)?.size,\n+            None => self.get_raw(ptr.alloc_id)?.size(),\n         };\n         self.copy(ptr, new_ptr, old_size.min(new_size), /*nonoverlapping*/ true)?;\n         self.deallocate(ptr, old_size_and_align, kind)?;\n@@ -306,11 +306,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             );\n         }\n         if let Some((size, align)) = old_size_and_align {\n-            if size != alloc.size || align != alloc.align {\n+            if size != alloc.size() || align != alloc.align {\n                 throw_ub_format!(\n                     \"incorrect layout on deallocation: {} has size {} and alignment {}, but gave size {} and alignment {}\",\n                     ptr.alloc_id,\n-                    alloc.size.bytes(),\n+                    alloc.size().bytes(),\n                     alloc.align.bytes(),\n                     size.bytes(),\n                     align.bytes(),\n@@ -319,11 +319,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n \n         // Let the machine take some extra action\n-        let size = alloc.size;\n+        let size = alloc.size();\n         AllocationExtra::memory_deallocated(&mut alloc, ptr, size)?;\n \n         // Don't forget to remember size and align of this now-dead allocation\n-        let old = self.dead_alloc_map.insert(ptr.alloc_id, (alloc.size, alloc.align));\n+        let old = self.dead_alloc_map.insert(ptr.alloc_id, (alloc.size(), alloc.align));\n         if old.is_some() {\n             bug!(\"Nothing can be deallocated twice\");\n         }\n@@ -586,7 +586,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // a) cause cycles in case `id` refers to a static\n         // b) duplicate a global's allocation in miri\n         if let Some((_, alloc)) = self.alloc_map.get(id) {\n-            return Ok((alloc.size, alloc.align));\n+            return Ok((alloc.size(), alloc.align));\n         }\n \n         // # Function pointers\n@@ -614,7 +614,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some(GlobalAlloc::Memory(alloc)) => {\n                 // Need to duplicate the logic here, because the global allocations have\n                 // different associated types than the interpreter-local ones.\n-                Ok((alloc.size, alloc.align))\n+                Ok((alloc.size(), alloc.align))\n             }\n             Some(GlobalAlloc::Function(_)) => bug!(\"We already checked function pointers above\"),\n             // The rest must be dead.\n@@ -804,41 +804,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get_raw(ptr.alloc_id)?.get_bytes(self, ptr, size)\n     }\n \n-    /// Reads a 0-terminated sequence of bytes from memory. Returns them as a slice.\n-    ///\n-    /// Performs appropriate bounds checks.\n-    pub fn read_c_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, &[u8]> {\n-        let ptr = self.force_ptr(ptr)?; // We need to read at least 1 byte, so we *need* a ptr.\n-        self.get_raw(ptr.alloc_id)?.read_c_str(self, ptr)\n-    }\n-\n-    /// Reads a 0x0000-terminated u16-sequence from memory. Returns them as a Vec<u16>.\n-    /// Terminator 0x0000 is not included in the returned Vec<u16>.\n-    ///\n-    /// Performs appropriate bounds checks.\n-    pub fn read_wide_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, Vec<u16>> {\n-        let size_2bytes = Size::from_bytes(2);\n-        let align_2bytes = Align::from_bytes(2).unwrap();\n-        // We need to read at least 2 bytes, so we *need* a ptr.\n-        let mut ptr = self.force_ptr(ptr)?;\n-        let allocation = self.get_raw(ptr.alloc_id)?;\n-        let mut u16_seq = Vec::new();\n-\n-        loop {\n-            ptr = self\n-                .check_ptr_access(ptr.into(), size_2bytes, align_2bytes)?\n-                .expect(\"cannot be a ZST\");\n-            let single_u16 = allocation.read_scalar(self, ptr, size_2bytes)?.to_u16()?;\n-            if single_u16 != 0x0000 {\n-                u16_seq.push(single_u16);\n-                ptr = ptr.offset(size_2bytes, self)?;\n-            } else {\n-                break;\n-            }\n-        }\n-        Ok(u16_seq)\n-    }\n-\n     /// Writes the given stream of bytes into memory.\n     ///\n     /// Performs appropriate bounds checks.\n@@ -866,46 +831,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get_raw_mut(ptr.alloc_id)?.write_bytes(&tcx, ptr, src)\n     }\n \n-    /// Writes the given stream of u16s into memory.\n-    ///\n-    /// Performs appropriate bounds checks.\n-    pub fn write_u16s(\n-        &mut self,\n-        ptr: Scalar<M::PointerTag>,\n-        src: impl IntoIterator<Item = u16>,\n-    ) -> InterpResult<'tcx> {\n-        let mut src = src.into_iter();\n-        let (lower, upper) = src.size_hint();\n-        let len = upper.expect(\"can only write bounded iterators\");\n-        assert_eq!(lower, len, \"can only write iterators with a precise length\");\n-\n-        let size = Size::from_bytes(lower);\n-        let ptr = match self.check_ptr_access(ptr, size, Align::from_bytes(2).unwrap())? {\n-            Some(ptr) => ptr,\n-            None => {\n-                // zero-sized access\n-                assert_matches!(\n-                    src.next(),\n-                    None,\n-                    \"iterator said it was empty but returned an element\"\n-                );\n-                return Ok(());\n-            }\n-        };\n-        let tcx = self.tcx;\n-        let allocation = self.get_raw_mut(ptr.alloc_id)?;\n-\n-        for idx in 0..len {\n-            let val = Scalar::from_u16(\n-                src.next().expect(\"iterator was shorter than it said it would be\"),\n-            );\n-            let offset_ptr = ptr.offset(Size::from_bytes(idx) * 2, &tcx)?; // `Size` multiplication\n-            allocation.write_scalar(&tcx, offset_ptr, val.into(), Size::from_bytes(2))?;\n-        }\n-        assert_matches!(src.next(), None, \"iterator was longer than it said it would be\");\n-        Ok(())\n-    }\n-\n     /// Expects the caller to have checked bounds and alignment.\n     pub fn copy(\n         &mut self,"}, {"sha": "a7fcb41f74a991b1ac08f984039dd3b936e2f560", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -3,7 +3,10 @@ use std::convert::TryFrom;\n \n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::Instance;\n-use rustc_middle::{mir, ty};\n+use rustc_middle::{\n+    mir,\n+    ty::{self, Ty},\n+};\n use rustc_target::abi::{self, LayoutOf as _};\n use rustc_target::spec::abi::Abi;\n \n@@ -228,15 +231,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n \n         // ABI check\n-        {\n-            let callee_abi = {\n-                let instance_ty = instance.ty(*self.tcx, self.param_env);\n-                match instance_ty.kind() {\n-                    ty::FnDef(..) => instance_ty.fn_sig(*self.tcx).abi(),\n-                    ty::Closure(..) => Abi::RustCall,\n-                    ty::Generator(..) => Abi::Rust,\n-                    _ => span_bug!(self.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n-                }\n+        let check_abi = |this: &Self, instance_ty: Ty<'tcx>| -> InterpResult<'tcx> {\n+            let callee_abi = match instance_ty.kind() {\n+                ty::FnDef(..) => instance_ty.fn_sig(*this.tcx).abi(),\n+                ty::Closure(..) => Abi::RustCall,\n+                ty::Generator(..) => Abi::Rust,\n+                _ => span_bug!(this.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n             };\n             let normalize_abi = |abi| match abi {\n                 Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic =>\n@@ -253,10 +253,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     caller_abi.name()\n                 )\n             }\n-        }\n+            Ok(())\n+        };\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n+                check_abi(self, instance.ty(*self.tcx, self.param_env))?;\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n                 M::call_intrinsic(self, instance, args, ret, unwind)\n             }\n@@ -274,6 +276,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         None => return Ok(()),\n                     };\n \n+                // Check against the ABI of the MIR body we are calling (not the ABI of `instance`;\n+                // these can differ when `find_mir_or_eval_fn` does something clever like resolve\n+                // exported symbol names).\n+                check_abi(self, self.tcx.type_of(body.source.def_id()))?;\n+\n                 self.push_stack_frame(\n                     instance,\n                     body,"}, {"sha": "c4e1e184ac52a34ebfae2e8e54baa757a3e4b8f4", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -776,8 +776,8 @@ pub struct RenderAllocation<'a, 'tcx, Tag, Extra> {\n impl<Tag: Copy + Debug, Extra> std::fmt::Display for RenderAllocation<'a, 'tcx, Tag, Extra> {\n     fn fmt(&self, w: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let RenderAllocation { tcx, alloc } = *self;\n-        write!(w, \"size: {}, align: {})\", alloc.size.bytes(), alloc.align.bytes())?;\n-        if alloc.size == Size::ZERO {\n+        write!(w, \"size: {}, align: {})\", alloc.size().bytes(), alloc.align.bytes())?;\n+        if alloc.size() == Size::ZERO {\n             // We are done.\n             return write!(w, \" {{}}\");\n         }\n@@ -822,9 +822,9 @@ fn write_allocation_bytes<Tag: Copy + Debug, Extra>(\n     w: &mut dyn std::fmt::Write,\n     prefix: &str,\n ) -> std::fmt::Result {\n-    let num_lines = alloc.size.bytes_usize().saturating_sub(BYTES_PER_LINE);\n+    let num_lines = alloc.size().bytes_usize().saturating_sub(BYTES_PER_LINE);\n     // Number of chars needed to represent all line numbers.\n-    let pos_width = format!(\"{:x}\", alloc.size.bytes()).len();\n+    let pos_width = format!(\"{:x}\", alloc.size().bytes()).len();\n \n     if num_lines > 0 {\n         write!(w, \"{}0x{:02$x} \u2502 \", prefix, 0, pos_width)?;\n@@ -845,7 +845,7 @@ fn write_allocation_bytes<Tag: Copy + Debug, Extra>(\n         }\n     };\n \n-    while i < alloc.size {\n+    while i < alloc.size() {\n         // The line start already has a space. While we could remove that space from the line start\n         // printing and unconditionally print a space here, that would cause the single-line case\n         // to have a single space before it, which looks weird.\n@@ -929,7 +929,7 @@ fn write_allocation_bytes<Tag: Copy + Debug, Extra>(\n             i += Size::from_bytes(1);\n         }\n         // Print a new line header if the next line still has some bytes to print.\n-        if i == line_start + Size::from_bytes(BYTES_PER_LINE) && i != alloc.size {\n+        if i == line_start + Size::from_bytes(BYTES_PER_LINE) && i != alloc.size() {\n             line_start = write_allocation_newline(w, line_start, &ascii, pos_width, prefix)?;\n             ascii.clear();\n         }"}, {"sha": "544e18d1ff3911cea4f2d4295598d1b5422c6d37", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -1299,6 +1299,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n impl<T> FusedIterator for IntoIter<T> {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+#[doc(hidden)]\n unsafe impl<T> SourceIter for IntoIter<T> {\n     type Source = IntoIter<T>;\n \n@@ -1309,6 +1310,7 @@ unsafe impl<T> SourceIter for IntoIter<T> {\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+#[doc(hidden)]\n unsafe impl<I> InPlaceIterable for IntoIter<I> {}\n \n impl<I> AsIntoIter for IntoIter<I> {"}, {"sha": "8da4d995ba5c66094dbfb45a431f7bd720fc96c4", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -264,9 +264,11 @@ unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+#[doc(hidden)]\n unsafe impl<T, A: Allocator> InPlaceIterable for IntoIter<T, A> {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+#[doc(hidden)]\n unsafe impl<T, A: Allocator> SourceIter for IntoIter<T, A> {\n     type Source = Self;\n "}, {"sha": "4f69b82ba4c3bd801f669aab98d916c34c879b3d", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -88,6 +88,7 @@ pub use self::zip::zip;\n /// [`FromIterator`]: crate::iter::FromIterator\n /// [`as_inner`]: SourceIter::as_inner\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+#[doc(hidden)]\n pub unsafe trait SourceIter {\n     /// A source stage in an iterator pipeline.\n     type Source: Iterator;"}, {"sha": "22b5ffdf8869a916849d08ca3107c0448437875e", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -53,4 +53,5 @@ unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}\n /// [`next()`]: Iterator::next\n /// [`try_fold()`]: Iterator::try_fold\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+#[doc(hidden)]\n pub unsafe trait InPlaceIterable: Iterator {}"}, {"sha": "ca391ffb3d56c489bd6735c3ccc8dfb5c6b0bacd", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -601,7 +601,7 @@ impl OsStr {\n     /// // sequences simply through collecting user command line arguments, for\n     /// // example.\n     ///\n-    /// #[cfg(any(unix, target_os = \"redox\"))] {\n+    /// #[cfg(unix)] {\n     ///     use std::ffi::OsStr;\n     ///     use std::os::unix::ffi::OsStrExt;\n     ///"}, {"sha": "44b7c32e956170ede0952c016c111c999625f116", "filename": "library/std/src/os/wasi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -1,4 +1,4 @@\n-//! Platform-specific extensions to `std` for WASI.\n+//! Platform-specific extensions to `std` for the WebAssembly System Interface (WASI).\n //!\n //! Provides access to platform-level information on WASI, and exposes\n //! WASI-specific functions that would otherwise be inappropriate as"}, {"sha": "16f40ec14d5ea8bb88f34dec787e320991dff8e9", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -248,8 +248,8 @@ details.undocumented > summary::before {\n \tbox-shadow: 0 0 0 1px #148099,0 0 0 2px transparent;\n }\n \n-.search-focus:disabled {\n-\tcolor: #929292;\n+.search-input:disabled {\n+\tbackground-color: #3e3e3e;\n }\n \n .module-item .stab,"}, {"sha": "fe05a462e81e948af00e1c4a3875df26ab7ad098", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -209,7 +209,7 @@ details.undocumented > summary::before {\n \tborder-color: #008dfd;\n }\n \n-.search-focus:disabled {\n+.search-input:disabled {\n \tbackground-color: #c5c4c4;\n }\n "}, {"sha": "2253fac1c09d1d8d101eb32d7f172e4502f0e84e", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -207,7 +207,7 @@ details.undocumented > summary::before {\n \tborder-color: #66afe9;\n }\n \n-.search-focus:disabled {\n+.search-input:disabled {\n \tbackground-color: #e6e6e6;\n }\n "}, {"sha": "8714a8992d7e0b405b1e565c287d838ac25740be", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -77,10 +77,10 @@\n           _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // ty::Const\n                                            // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })\n+                                           // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }\n           StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n           (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.1: bool) = const false;     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34"}, {"sha": "bccfa9da6153008a8706584a74c0b49931610c08", "filename": "src/test/mir-opt/const_prop/checked_add.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -16,7 +16,7 @@\n +         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +                                          // mir::Constant\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n-+                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [2, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [2, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n       }\n   "}, {"sha": "19af626c49fda0b4a681cef7bbf705e75a607cf1", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -22,10 +22,10 @@\n                                            // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n                                            // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n+                                           // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n       }\n   \n       bb2: {"}, {"sha": "57a00ba12b0eb35283346009294eb142499adcb1", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -20,7 +20,7 @@\n +         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n-+                                          // + literal: Const { ty: (u8, bool), val: Value(ByRef { alloc: Allocation { bytes: [3, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: (u8, bool), val: Value(ByRef { alloc: Allocation { bytes: [3, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n       }\n   "}, {"sha": "518974e24b389f0969db4cad74d099e8b087675b", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -17,7 +17,7 @@\n +         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n +                                          // mir::Constant\n +                                          // + span: $DIR/issue-67019.rs:11:10: 11:19\n-+                                          // + literal: Const { ty: (u8, u8), val: Value(ByRef { alloc: Allocation { bytes: [1, 2], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: (u8, u8), val: Value(ByRef { alloc: Allocation { bytes: [1, 2], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n           StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n           _1 = test(move _2) -> bb1;       // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n                                            // mir::Constant"}, {"sha": "d94c4f6fb26b5ac58231082727f2850767f92c92", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -22,7 +22,7 @@\n +         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n +                                          // mir::Constant\n +                                          // + span: $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n-+                                          // + literal: Const { ty: (i32, i32), val: Value(ByRef { alloc: Allocation { bytes: [42, 0, 0, 0, 99, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: (i32, i32), val: Value(ByRef { alloc: Allocation { bytes: [42, 0, 0, 0, 99, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n           nop;                             // scope 0 at $DIR/mutable_variable_aggregate.rs:4:11: 8:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:8:1: 8:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:8:1: 8:2"}, {"sha": "537f1b6253ca0ed98ff8d95c3b5c27d1c85b904f", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -29,7 +29,7 @@\n +         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n       }\n   "}, {"sha": "537f1b6253ca0ed98ff8d95c3b5c27d1c85b904f", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -29,7 +29,7 @@\n +         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n       }\n   "}, {"sha": "97808246dd4bcaf8bfa2b6c2a2632f064b6f8a17", "filename": "src/test/mir-opt/const_prop/return_place.add.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -11,7 +11,7 @@\n +         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +                                          // mir::Constant\n +                                          // + span: $DIR/return_place.rs:6:5: 6:10\n-+                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n       }\n   "}, {"sha": "b8f9cd34c99cbef9072e44ce5862a869bd36c7fa", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -20,7 +20,7 @@\n +         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n +                                          // mir::Constant\n +                                          // + span: $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-+                                          // + literal: Const { ty: (u32, u32), val: Value(ByRef { alloc: Allocation { bytes: [1, 0, 0, 0, 2, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: (u32, u32), val: Value(ByRef { alloc: Allocation { bytes: [1, 0, 0, 0, 2, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n           _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n                                            // mir::Constant\n                                            // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12"}, {"sha": "97ffd664463bb70f9ead3f2bcd0f102fa9450416", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -43,10 +43,10 @@\n +                                          // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n +                                          // ty::Const\n +                                          // + ty: &str\n-+                                          // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n++                                          // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n +                                          // mir::Constant\n +                                          // + span: $DIR/inline-diverging.rs:16:9: 16:16\n-+                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n++                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n       }\n   }\n   "}, {"sha": "0c220eb91a4b1b65a4faa98af2d847d4aa7f7e41", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -23,7 +23,7 @@\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n++                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -33,7 +33,7 @@\n -     bb1: {\n +                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageDead(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43"}, {"sha": "7f3a72ee5ad75d158a96c5fb9d700a2be710b624", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -23,7 +23,7 @@\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n++                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -33,7 +33,7 @@\n -     bb1: {\n +                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0_usize; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageDead(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43"}, {"sha": "96adadbe030d14586049780f6a269b0f140e635b", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -71,10 +71,10 @@\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n                                            // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, size: Size { raw: 40 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 })\n+                                           // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 })\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, size: Size { raw: 40 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }\n       }\n   \n       bb2: {"}, {"sha": "86ec31ce47edaa3edd82a0b79e83b3b0c140b33b", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -92,10 +92,10 @@ fn num_to_digit(_1: char) -> u32 {\n                                          // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                          // ty::Const\n                                          // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, size: Size { raw: 43 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 })\n+                                         // + val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 })\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:26: 14:50\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, size: Size { raw: 43 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 }) }\n     }\n \n     bb7: {"}, {"sha": "8a1134478d6b597eb402a46f5d72b31be50e745e", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -26,10 +26,10 @@ fn unwrap(_1: Option<T>) -> T {\n                                          // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                          // ty::Const\n                                          // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n+                                         // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n     }\n \n     bb2: {"}, {"sha": "7bdf7b6a6482eb4d8dd5a66a8fa2ee9d18578d31", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -15,10 +15,10 @@ fn main() -> () {\n         _4 = const \"\";                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // ty::Const\n                                          // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })\n+                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n         _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant"}, {"sha": "258347ec2dc167ef2bd9dece66aa4b39a4531879", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -192,10 +192,10 @@ static XXX: &Foo = {\n         _2 = Foo { tup: const \"hi\", data: move _3 }; // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n                                          // ty::Const\n                                          // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n+                                         // + val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:6:10: 6:14\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n         StorageDead(_3);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         _1 = &_2;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n         _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2"}, {"sha": "17dcc99bc0c6f9a4409b798ee45b0234eaded96c", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -21,10 +21,10 @@ fn main() -> () {\n         _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                          // ty::Const\n                                          // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                         // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n         StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n@@ -41,10 +41,10 @@ fn main() -> () {\n         _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                          // ty::Const\n                                          // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                         // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n         StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n         goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n@@ -54,10 +54,10 @@ fn main() -> () {\n         _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // ty::Const\n                                          // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                         // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n     }\n "}, {"sha": "9ae7a9d7384c150af7fe4c0a4e019882da5023bf", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -27,10 +27,10 @@\n           _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                            // ty::Const\n                                            // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                           // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n           StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n@@ -40,10 +40,10 @@\n           _1 = const \"A(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n                                            // ty::Const\n                                            // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n+                                           // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n       }\n   \n@@ -52,10 +52,10 @@\n           _4 = const \"B(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n                                            // ty::Const\n                                            // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n+                                           // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n           _1 = &(*_4);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n           StorageDead(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n@@ -76,10 +76,10 @@\n           _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                            // ty::Const\n                                            // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                           // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n           StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n           goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n@@ -89,10 +89,10 @@\n           _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // ty::Const\n                                            // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n+                                           // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n       }\n   "}, {"sha": "8c4aad66d474dd2d2e7e9dd4194244ec0200f245", "filename": "src/test/ui/lint/dead-code/issue-85255.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -2,6 +2,7 @@\n // check-pass\n \n #![warn(dead_code)]\n+#![feature(crate_visibility_modifier)]\n \n struct Foo {\n     a: i32, //~ WARNING: field is never read\n@@ -15,8 +16,36 @@ impl Bar {\n     pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n }\n \n+pub(crate) struct Foo1 {\n+    a: i32, //~ WARNING: field is never read\n+    pub b: i32, //~ WARNING: field is never read\n+}\n+\n+pub(crate) struct Bar1;\n+\n+impl Bar1 {\n+    fn a(&self) -> i32 { 5 } //~ WARNING: associated function is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n+}\n+\n+crate struct Foo2 {\n+    a: i32, //~ WARNING: field is never read\n+    pub b: i32, //~ WARNING: field is never read\n+}\n+\n+crate struct Bar2;\n+\n+impl Bar2 {\n+    fn a(&self) -> i32 { 5 } //~ WARNING: associated function is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n+}\n+\n \n fn main() {\n     let _ = Foo { a: 1, b: 2 };\n     let _ = Bar;\n+    let _ = Foo1 { a: 1, b: 2 };\n+    let _ = Bar1;\n+    let _ = Foo2 { a: 1, b: 2 };\n+    let _ = Bar2;\n }"}, {"sha": "736b1a20422768d43ecf27988e19cf99ffaa2f23", "filename": "src/test/ui/lint/dead-code/issue-85255.stderr", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -1,5 +1,5 @@\n warning: field is never read: `a`\n-  --> $DIR/issue-85255.rs:7:5\n+  --> $DIR/issue-85255.rs:8:5\n    |\n LL |     a: i32,\n    |     ^^^^^^\n@@ -11,22 +11,70 @@ LL | #![warn(dead_code)]\n    |         ^^^^^^^^^\n \n warning: field is never read: `b`\n-  --> $DIR/issue-85255.rs:8:5\n+  --> $DIR/issue-85255.rs:9:5\n+   |\n+LL |     pub b: i32,\n+   |     ^^^^^^^^^^\n+\n+warning: associated function is never used: `a`\n+  --> $DIR/issue-85255.rs:15:8\n+   |\n+LL |     fn a(&self) -> i32 { 5 }\n+   |        ^\n+\n+warning: associated function is never used: `b`\n+  --> $DIR/issue-85255.rs:16:12\n+   |\n+LL |     pub fn b(&self) -> i32 { 6 }\n+   |            ^\n+\n+warning: field is never read: `a`\n+  --> $DIR/issue-85255.rs:20:5\n+   |\n+LL |     a: i32,\n+   |     ^^^^^^\n+\n+warning: field is never read: `b`\n+  --> $DIR/issue-85255.rs:21:5\n+   |\n+LL |     pub b: i32,\n+   |     ^^^^^^^^^^\n+\n+warning: associated function is never used: `a`\n+  --> $DIR/issue-85255.rs:27:8\n+   |\n+LL |     fn a(&self) -> i32 { 5 }\n+   |        ^\n+\n+warning: associated function is never used: `b`\n+  --> $DIR/issue-85255.rs:28:12\n+   |\n+LL |     pub fn b(&self) -> i32 { 6 }\n+   |            ^\n+\n+warning: field is never read: `a`\n+  --> $DIR/issue-85255.rs:32:5\n+   |\n+LL |     a: i32,\n+   |     ^^^^^^\n+\n+warning: field is never read: `b`\n+  --> $DIR/issue-85255.rs:33:5\n    |\n LL |     pub b: i32,\n    |     ^^^^^^^^^^\n \n warning: associated function is never used: `a`\n-  --> $DIR/issue-85255.rs:14:8\n+  --> $DIR/issue-85255.rs:39:8\n    |\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n \n warning: associated function is never used: `b`\n-  --> $DIR/issue-85255.rs:15:12\n+  --> $DIR/issue-85255.rs:40:12\n    |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: 4 warnings emitted\n+warning: 12 warnings emitted\n "}]}