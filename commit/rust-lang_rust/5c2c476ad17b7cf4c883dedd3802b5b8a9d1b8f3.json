{"sha": "5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "node_id": "C_kwDOAAsO6NoAKDVjMmM0NzZhZDE3YjdjZjRjODgzZGVkZDM4MDJiNWI4YTlkMWI4ZjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-19T08:35:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-19T08:35:51Z"}, "message": "Rollup merge of #102863 - compiler-errors:call-suggestion-on-unimplemented, r=nagisa\n\nStandardize \"use parentheses to call\" suggestions between typeck and trait selection\n\n1. Suggest calling constructors, since they're basically `FnDef`s but they have a different def kind and hir representation, so we were leaving them out.\n2. Standardize the call suggestions between trait fulfillment errors and type mismatch. In the type mismatch suggestion, we suggest `/* Ty */` as the placeholder for an arg, and not the parameter's name, which is less helpful.\n3. Use `predicate_must_hold_modulo_regions` instead of matching on `EvaluationResult` -- this might cause some suggestions to be filtered out, but we really shouldn't be suggesting a call if it \"may\" hold, only when it \"must\" hold.\n4. Borrow some logic from `extract_callable_info` to generalize this suggestion to fn pointers, type parameters, and opaque types.\n\nFixes #102852", "tree": {"sha": "e63a8e812c2a9a49fb89db99646259df67edd152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e63a8e812c2a9a49fb89db99646259df67edd152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjT7bnCRBK7hj4Ov3rIwAAdbEIADWnzl68r20LWJHRkSuHSqMe\nE7HEOo9xQeQ2UvWRDT1d2atGdQoMiS/fsDJdIY47oWcf/UW9GDneyn9SrYFwlNUF\n6FlY2rJ1g+OXNftE4PisSOYxEjpNhXl6OOJ5BAJQDBPZMT/Uj1gCXSdoR5JzKJD+\nR3VTyhr87fIpqm1zIAqAwyXOuizKooLIIGOjBO6Lu1H2sMKbvPV4ryo/Pk53Dq5f\nSMFjPnKVpM6bMwgmD9PXa0fFRHfnZsqKxEKPNVtjhgTrYbvMMX8+o6FQmVpXKySv\nDopnqc5eYvNF4K8GbkeRbBn4gBpswDJ0ro2xMxUteEivinL+quqfbolQeMzRISU=\n=eDj8\n-----END PGP SIGNATURE-----\n", "payload": "tree e63a8e812c2a9a49fb89db99646259df67edd152\nparent 84365fff0a99fbf6deab383bd9a8152202b6779b\nparent 35f157073238b9e0e97d9e9d17b4861103d87962\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666168551 +0530\ncommitter GitHub <noreply@github.com> 1666168551 +0530\n\nRollup merge of #102863 - compiler-errors:call-suggestion-on-unimplemented, r=nagisa\n\nStandardize \"use parentheses to call\" suggestions between typeck and trait selection\n\n1. Suggest calling constructors, since they're basically `FnDef`s but they have a different def kind and hir representation, so we were leaving them out.\n2. Standardize the call suggestions between trait fulfillment errors and type mismatch. In the type mismatch suggestion, we suggest `/* Ty */` as the placeholder for an arg, and not the parameter's name, which is less helpful.\n3. Use `predicate_must_hold_modulo_regions` instead of matching on `EvaluationResult` -- this might cause some suggestions to be filtered out, but we really shouldn't be suggesting a call if it \"may\" hold, only when it \"must\" hold.\n4. Borrow some logic from `extract_callable_info` to generalize this suggestion to fn pointers, type parameters, and opaque types.\n\nFixes #102852\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "html_url": "https://github.com/rust-lang/rust/commit/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84365fff0a99fbf6deab383bd9a8152202b6779b", "url": "https://api.github.com/repos/rust-lang/rust/commits/84365fff0a99fbf6deab383bd9a8152202b6779b", "html_url": "https://github.com/rust-lang/rust/commit/84365fff0a99fbf6deab383bd9a8152202b6779b"}, {"sha": "35f157073238b9e0e97d9e9d17b4861103d87962", "url": "https://api.github.com/repos/rust-lang/rust/commits/35f157073238b9e0e97d9e9d17b4861103d87962", "html_url": "https://github.com/rust-lang/rust/commit/35f157073238b9e0e97d9e9d17b4861103d87962"}], "stats": {"total": 368, "additions": 262, "deletions": 106}, "files": [{"sha": "088de1979babe5cf7a4423276d42bd8b99c1bfdc", "filename": "compiler/rustc_hir_analysis/src/check/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -1,6 +1,6 @@\n use super::method::probe::{IsSuggestion, Mode, ProbeScope};\n use super::method::MethodCallee;\n-use super::{DefIdOrName, Expectation, FnCtxt, TupleArgumentsFlag};\n+use super::{Expectation, FnCtxt, TupleArgumentsFlag};\n use crate::type_error_struct;\n \n use rustc_ast::util::parser::PREC_POSTFIX;\n@@ -27,6 +27,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi;\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n+use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n use std::iter;"}, {"sha": "08b21b82faf5a0b47e8224039be9c5cecf27d290", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -2,7 +2,6 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n \n-use hir::def_id::DefId;\n use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX};\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n@@ -19,6 +18,7 @@ use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n+use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -90,7 +90,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if ty.is_suggestable(self.tcx, false) {\n                                 format!(\"/* {ty} */\")\n                             } else {\n-                                \"\".to_string()\n+                                \"/* value */\".to_string()\n                             }\n                         })\n                         .collect::<Vec<_>>()\n@@ -102,10 +102,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let msg = match def_id_or_name {\n                 DefIdOrName::DefId(def_id) => match self.tcx.def_kind(def_id) {\n-                    DefKind::Ctor(CtorOf::Struct, _) => \"instantiate this tuple struct\".to_string(),\n-                    DefKind::Ctor(CtorOf::Variant, _) => {\n-                        \"instantiate this tuple variant\".to_string()\n-                    }\n+                    DefKind::Ctor(CtorOf::Struct, _) => \"construct this tuple struct\".to_string(),\n+                    DefKind::Ctor(CtorOf::Variant, _) => \"construct this tuple variant\".to_string(),\n                     kind => format!(\"call this {}\", kind.descr(def_id)),\n                 },\n                 DefIdOrName::Name(name) => format!(\"call this {name}\"),\n@@ -1209,8 +1207,3 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n }\n-\n-pub enum DefIdOrName {\n-    DefId(DefId),\n-    Name(&'static str),\n-}"}, {"sha": "b7e6a564f3953f5c113706bf4b9d5bae37f600f8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -2,10 +2,10 @@ pub mod on_unimplemented;\n pub mod suggestions;\n \n use super::{\n-    EvaluationResult, FulfillmentContext, FulfillmentError, FulfillmentErrorCode,\n-    MismatchedProjectionTypes, Obligation, ObligationCause, ObligationCauseCode,\n-    OnUnimplementedDirective, OnUnimplementedNote, OutputTypeParameterMismatch, Overflow,\n-    PredicateObligation, SelectionContext, SelectionError, TraitNotObjectSafe,\n+    FulfillmentContext, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n+    Obligation, ObligationCause, ObligationCauseCode, OnUnimplementedDirective,\n+    OnUnimplementedNote, OutputTypeParameterMismatch, Overflow, PredicateObligation,\n+    SelectionContext, SelectionError, TraitNotObjectSafe,\n };\n \n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n@@ -2796,3 +2796,8 @@ impl<'tcx> ty::TypeVisitor<'tcx> for HasNumericInferVisitor {\n         }\n     }\n }\n+\n+pub enum DefIdOrName {\n+    DefId(DefId),\n+    Name(&'static str),\n+}"}, {"sha": "8c41d9d240c704c00ee77240a97ab3ca1e0a9cef", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 153, "deletions": 64, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -1,12 +1,13 @@\n use super::{\n-    EvaluationResult, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation,\n+    DefIdOrName, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation,\n     SelectionContext,\n };\n \n use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n use crate::traits::normalize_to;\n \n+use hir::def::CtorOf;\n use hir::HirId;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -22,14 +23,15 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n     GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, IsSuggestable,\n     ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{BytePos, DesugaringKind, ExpnKind, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use std::fmt;\n@@ -812,74 +814,136 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n-        // Skipping binder here, remapping below\n-        let self_ty = trait_pred.self_ty().skip_binder();\n-\n-        let (def_id, output_ty, callable) = match *self_ty.kind() {\n-            ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig().output(), \"closure\"),\n-            ty::FnDef(def_id, _) => (def_id, self_ty.fn_sig(self.tcx).output(), \"function\"),\n-            _ => return false,\n-        };\n-        let msg = format!(\"use parentheses to call the {}\", callable);\n+        if let ty::PredicateKind::Trait(trait_pred) = obligation.predicate.kind().skip_binder()\n+            && Some(trait_pred.def_id()) == self.tcx.lang_items().sized_trait()\n+        {\n+            // Don't suggest calling to turn an unsized type into a sized type\n+            return false;\n+        }\n \n-        // \"We should really create a single list of bound vars from the combined vars\n-        // from the predicate and function, but instead we just liberate the function bound vars\"\n-        let output_ty = self.tcx.liberate_late_bound_regions(def_id, output_ty);\n+        // This is duplicated from `extract_callable_info` in typeck, which\n+        // relies on autoderef, so we can't use it here.\n+        let found = trait_pred.self_ty().skip_binder().peel_refs();\n+        let Some((def_id_or_name, output, inputs)) = (match *found.kind()\n+        {\n+            ty::FnPtr(fn_sig) => {\n+                Some((DefIdOrName::Name(\"function pointer\"), fn_sig.output(), fn_sig.inputs()))\n+            }\n+            ty::FnDef(def_id, _) => {\n+                let fn_sig = found.fn_sig(self.tcx);\n+                Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs()))\n+            }\n+            ty::Closure(def_id, substs) => {\n+                let fn_sig = substs.as_closure().sig();\n+                Some((\n+                    DefIdOrName::DefId(def_id),\n+                    fn_sig.output(),\n+                    fn_sig.inputs().map_bound(|inputs| &inputs[1..]),\n+                ))\n+            }\n+            ty::Opaque(def_id, substs) => {\n+                self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n+                    if let ty::PredicateKind::Projection(proj) = pred.kind().skip_binder()\n+                    && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    // args tuple will always be substs[1]\n+                    && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n+                    {\n+                        Some((\n+                            DefIdOrName::DefId(def_id),\n+                            pred.kind().rebind(proj.term.ty().unwrap()),\n+                            pred.kind().rebind(args.as_slice()),\n+                        ))\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            ty::Dynamic(data, _, ty::Dyn) => {\n+                data.iter().find_map(|pred| {\n+                    if let ty::ExistentialPredicate::Projection(proj) = pred.skip_binder()\n+                    && Some(proj.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    // for existential projection, substs are shifted over by 1\n+                    && let ty::Tuple(args) = proj.substs.type_at(0).kind()\n+                    {\n+                        Some((\n+                            DefIdOrName::Name(\"trait object\"),\n+                            pred.rebind(proj.term.ty().unwrap()),\n+                            pred.rebind(args.as_slice()),\n+                        ))\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            ty::Param(_) => {\n+                obligation.param_env.caller_bounds().iter().find_map(|pred| {\n+                    if let ty::PredicateKind::Projection(proj) = pred.kind().skip_binder()\n+                    && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    && proj.projection_ty.self_ty() == found\n+                    // args tuple will always be substs[1]\n+                    && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n+                    {\n+                        Some((\n+                            DefIdOrName::Name(\"type parameter\"),\n+                            pred.kind().rebind(proj.term.ty().unwrap()),\n+                            pred.kind().rebind(args.as_slice()),\n+                        ))\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            _ => None,\n+        }) else { return false; };\n+        let output = self.replace_bound_vars_with_fresh_vars(\n+            obligation.cause.span,\n+            LateBoundRegionConversionTime::FnCall,\n+            output,\n+        );\n+        let inputs = inputs.skip_binder().iter().map(|ty| {\n+            self.replace_bound_vars_with_fresh_vars(\n+                obligation.cause.span,\n+                LateBoundRegionConversionTime::FnCall,\n+                inputs.rebind(*ty),\n+            )\n+        });\n \n         // Remapping bound vars here\n-        let trait_pred_and_self = trait_pred.map_bound(|trait_pred| (trait_pred, output_ty));\n+        let trait_pred_and_self = trait_pred.map_bound(|trait_pred| (trait_pred, output));\n \n         let new_obligation =\n             self.mk_trait_obligation_with_new_self_ty(obligation.param_env, trait_pred_and_self);\n-\n-        match self.evaluate_obligation(&new_obligation) {\n-            Ok(\n-                EvaluationResult::EvaluatedToOk\n-                | EvaluationResult::EvaluatedToOkModuloRegions\n-                | EvaluationResult::EvaluatedToOkModuloOpaqueTypes\n-                | EvaluationResult::EvaluatedToAmbig,\n-            ) => {}\n-            _ => return false,\n+        if !self.predicate_must_hold_modulo_regions(&new_obligation) {\n+            return false;\n         }\n-        let hir = self.tcx.hir();\n+\n         // Get the name of the callable and the arguments to be used in the suggestion.\n-        let (snippet, sugg) = match hir.get_if_local(def_id) {\n-            Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(hir::Closure { fn_decl, fn_decl_span, .. }),\n-                ..\n-            })) => {\n-                err.span_label(*fn_decl_span, \"consider calling this closure\");\n-                let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n-                    return false;\n-                };\n-                let args = fn_decl.inputs.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                let sugg = format!(\"({})\", args);\n-                (format!(\"{}{}\", name, sugg), sugg)\n-            }\n-            Some(hir::Node::Item(hir::Item {\n-                ident,\n-                kind: hir::ItemKind::Fn(.., body_id),\n-                ..\n-            })) => {\n-                err.span_label(ident.span, \"consider calling this function\");\n-                let body = hir.body(*body_id);\n-                let args = body\n-                    .params\n-                    .iter()\n-                    .map(|arg| match &arg.pat.kind {\n-                        hir::PatKind::Binding(_, _, ident, None)\n-                        // FIXME: provide a better suggestion when encountering `SelfLower`, it\n-                        // should suggest a method call.\n-                        if ident.name != kw::SelfLower => ident.to_string(),\n-                        _ => \"_\".to_string(),\n-                    })\n-                    .collect::<Vec<_>>()\n-                    .join(\", \");\n-                let sugg = format!(\"({})\", args);\n-                (format!(\"{}{}\", ident, sugg), sugg)\n-            }\n-            _ => return false,\n+        let hir = self.tcx.hir();\n+\n+        let msg = match def_id_or_name {\n+            DefIdOrName::DefId(def_id) => match self.tcx.def_kind(def_id) {\n+                DefKind::Ctor(CtorOf::Struct, _) => {\n+                    \"use parentheses to construct this tuple struct\".to_string()\n+                }\n+                DefKind::Ctor(CtorOf::Variant, _) => {\n+                    \"use parentheses to construct this tuple variant\".to_string()\n+                }\n+                kind => format!(\"use parentheses to call this {}\", kind.descr(def_id)),\n+            },\n+            DefIdOrName::Name(name) => format!(\"use parentheses to call this {name}\"),\n         };\n+\n+        let args = inputs\n+            .map(|ty| {\n+                if ty.is_suggestable(self.tcx, false) {\n+                    format!(\"/* {ty} */\")\n+                } else {\n+                    \"/* value */\".to_string()\n+                }\n+            })\n+            .collect::<Vec<_>>()\n+            .join(\", \");\n+\n         if matches!(obligation.cause.code(), ObligationCauseCode::FunctionArgumentObligation { .. })\n             && obligation.cause.span.can_be_used_for_suggestions()\n         {\n@@ -890,11 +954,36 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             err.span_suggestion_verbose(\n                 obligation.cause.span.shrink_to_hi(),\n                 &msg,\n-                sugg,\n+                format!(\"({args})\"),\n                 Applicability::HasPlaceholders,\n             );\n-        } else {\n-            err.help(&format!(\"{}: `{}`\", msg, snippet));\n+        } else if let DefIdOrName::DefId(def_id) = def_id_or_name {\n+            let name = match hir.get_if_local(def_id) {\n+                Some(hir::Node::Expr(hir::Expr {\n+                    kind: hir::ExprKind::Closure(hir::Closure { fn_decl_span, .. }),\n+                    ..\n+                })) => {\n+                    err.span_label(*fn_decl_span, \"consider calling this closure\");\n+                    let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n+                        return false;\n+                    };\n+                    name.to_string()\n+                }\n+                Some(hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(..), .. })) => {\n+                    err.span_label(ident.span, \"consider calling this function\");\n+                    ident.to_string()\n+                }\n+                Some(hir::Node::Ctor(..)) => {\n+                    let name = self.tcx.def_path_str(def_id);\n+                    err.span_label(\n+                        self.tcx.def_span(def_id),\n+                        format!(\"consider calling the constructor for `{}`\", name),\n+                    );\n+                    name\n+                }\n+                _ => return false,\n+            };\n+            err.help(&format!(\"{msg}: `{name}({args})`\"));\n         }\n         true\n     }"}, {"sha": "263a35d9829114aacec90478a2e3e59ec34ad791", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -19,7 +19,7 @@ LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'a> fn(&'a i32) -> &'a i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for fn item `for<'a> fn(&'a i32) -> &'a i32 {foo}`\n-   = help: use parentheses to call the function: `foo(s)`\n+   = help: use parentheses to call this function: `foo(/* &i32 */)`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "8ad8273fc2b9b483df2f3fca1bf33ee759cd677e", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `take_const_owned`\n    |\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n    |                                                  ^^^^ required by this bound in `take_const_owned`\n+help: use parentheses to call this type parameter\n+   |\n+LL |     take_const_owned(f());\n+   |                       ++\n help: consider further restricting this bound\n    |\n LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {"}, {"sha": "42a78ed97e02524c9f0b710bfe5b9d4559d0f855", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -11,7 +11,7 @@ LL | fn test() -> Foo { Foo }\n    |\n    = note: expected struct `Foo`\n              found fn item `fn(u32) -> Foo {Foo}`\n-help: use parentheses to instantiate this tuple struct\n+help: use parentheses to construct this tuple struct\n    |\n LL | fn test() -> Foo { Foo(/* u32 */) }\n    |                       +++++++++++"}, {"sha": "b30bcfb776c8c415cfd1277644bfac5856eba06a", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -29,7 +29,7 @@ LL |     assert_eq!(a, 0);\n    |     ^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for fn item `fn() -> i32 {a}`\n-   = help: use parentheses to call the function: `a()`\n+   = help: use parentheses to call this function: `a()`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "82a4211f08ac35fe6a5387a4e47552f0d2bf82a7", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -327,7 +327,7 @@ LL |         let _: Z = Z::Fn;\n    |\n    = note: expected enum `Z`\n            found fn item `fn(u8) -> Z {Z::Fn}`\n-help: use parentheses to instantiate this tuple variant\n+help: use parentheses to construct this tuple variant\n    |\n LL |         let _: Z = Z::Fn(/* u8 */);\n    |                         ++++++++++\n@@ -362,7 +362,7 @@ LL |     let _: E = m::E::Fn;\n    |\n    = note: expected enum `E`\n            found fn item `fn(u8) -> E {E::Fn}`\n-help: use parentheses to instantiate this tuple variant\n+help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = m::E::Fn(/* u8 */);\n    |                        ++++++++++\n@@ -397,7 +397,7 @@ LL |     let _: E = E::Fn;\n    |\n    = note: expected enum `E`\n            found fn item `fn(u8) -> E {E::Fn}`\n-help: use parentheses to instantiate this tuple variant\n+help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = E::Fn(/* u8 */);\n    |                     ++++++++++"}, {"sha": "8ed62f854f09636e6ddae724fce92c10f4c1a02d", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `fn() -> impl Future<Output = ()> {foo}` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:10:9\n    |\n-LL | async fn foo() {}\n-   |          --- consider calling this function\n-...\n LL |     bar(foo);\n    |     --- ^^^ `fn() -> impl Future<Output = ()> {foo}` is not a future\n    |     |\n@@ -16,16 +13,14 @@ note: required by a bound in `bar`\n    |\n LL | fn bar(f: impl Future<Output=()>) {}\n    |                ^^^^^^^^^^^^^^^^^ required by this bound in `bar`\n-help: use parentheses to call the function\n+help: use parentheses to call this function\n    |\n LL |     bar(foo());\n    |            ++\n \n error[E0277]: `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n    |\n-LL |     let async_closure = async || ();\n-   |                         -------- consider calling this closure\n LL |     bar(async_closure);\n    |     --- ^^^^^^^^^^^^^ `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:33]` is not a future\n    |     |\n@@ -38,7 +33,7 @@ note: required by a bound in `bar`\n    |\n LL | fn bar(f: impl Future<Output=()>) {}\n    |                ^^^^^^^^^^^^^^^^^ required by this bound in `bar`\n-help: use parentheses to call the closure\n+help: use parentheses to call this closure\n    |\n LL |     bar(async_closure());\n    |                      ++"}, {"sha": "5f811044eb349a14105043175417716b2314d646", "filename": "src/test/ui/suggestions/call-on-unimplemented-ctor.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.rs?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -0,0 +1,17 @@\n+fn main() {\n+    insert_resource(Marker);\n+    insert_resource(Time);\n+    //~^ ERROR the trait bound `fn(u32) -> Time {Time}: Resource` is not satisfied\n+    //~| HELP use parentheses to construct this tuple struct\n+}\n+\n+trait Resource {}\n+\n+fn insert_resource<R: Resource>(resource: R) {}\n+\n+struct Marker;\n+impl Resource for Marker {}\n+\n+struct Time(u32);\n+\n+impl Resource for Time {}"}, {"sha": "58612cbfb239e317f910b8df890cf75ac8147d8d", "filename": "src/test/ui/suggestions/call-on-unimplemented-ctor.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-ctor.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `fn(u32) -> Time {Time}: Resource` is not satisfied\n+  --> $DIR/call-on-unimplemented-ctor.rs:3:21\n+   |\n+LL |     insert_resource(Time);\n+   |     --------------- ^^^^ the trait `Resource` is not implemented for fn item `fn(u32) -> Time {Time}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `insert_resource`\n+  --> $DIR/call-on-unimplemented-ctor.rs:10:23\n+   |\n+LL | fn insert_resource<R: Resource>(resource: R) {}\n+   |                       ^^^^^^^^ required by this bound in `insert_resource`\n+help: use parentheses to construct this tuple struct\n+   |\n+LL |     insert_resource(Time(/* u32 */));\n+   |                         +++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "86490c724e0183627edac8e71b62e8a17ccd2eb0", "filename": "src/test/ui/suggestions/call-on-unimplemented-fn-ptr.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.rs?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -0,0 +1,15 @@\n+struct Foo;\n+\n+trait Bar {}\n+\n+impl Bar for Foo {}\n+\n+fn needs_bar<T: Bar>(_: T) {}\n+\n+fn blah(f: fn() -> Foo) {\n+    needs_bar(f);\n+    //~^ ERROR the trait bound `fn() -> Foo: Bar` is not satisfied\n+    //~| HELP use parentheses to call this function pointer\n+}\n+\n+fn main() {}"}, {"sha": "167f7e592a97c362db75e54517122458728f5633", "filename": "src/test/ui/suggestions/call-on-unimplemented-fn-ptr.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-unimplemented-fn-ptr.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `fn() -> Foo: Bar` is not satisfied\n+  --> $DIR/call-on-unimplemented-fn-ptr.rs:10:15\n+   |\n+LL |     needs_bar(f);\n+   |     --------- ^ the trait `Bar` is not implemented for `fn() -> Foo`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `needs_bar`\n+  --> $DIR/call-on-unimplemented-fn-ptr.rs:7:17\n+   |\n+LL | fn needs_bar<T: Bar>(_: T) {}\n+   |                 ^^^ required by this bound in `needs_bar`\n+help: use parentheses to call this function pointer\n+   |\n+LL |     needs_bar(f());\n+   |                ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "955148315baefe01231f163e4b6e8232c4583954", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `fn() -> impl T<O = ()> {foo}: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:9\n    |\n-LL | fn foo() -> impl T<O=()> { S }\n-   |    --- consider calling this function\n-...\n LL |     bar(foo);\n    |     --- ^^^ the trait `T` is not implemented for fn item `fn() -> impl T<O = ()> {foo}`\n    |     |\n@@ -14,16 +11,14 @@ note: required by a bound in `bar`\n    |\n LL | fn bar(f: impl T<O=()>) {}\n    |                ^^^^^^^ required by this bound in `bar`\n-help: use parentheses to call the function\n+help: use parentheses to call this function\n    |\n LL |     bar(foo());\n    |            ++\n \n error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:21]: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n    |\n-LL |     let closure = || S;\n-   |                   -- consider calling this closure\n LL |     bar(closure);\n    |     --- ^^^^^^^ the trait `T` is not implemented for closure `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:21]`\n    |     |\n@@ -34,7 +29,7 @@ note: required by a bound in `bar`\n    |\n LL | fn bar(f: impl T<O=()>) {}\n    |                ^^^^^^^ required by this bound in `bar`\n-help: use parentheses to call the closure\n+help: use parentheses to call this closure\n    |\n LL |     bar(closure());\n    |                ++"}, {"sha": "597dc61c3f7e2e501dd977370bc3c421929cf5b0", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -49,7 +49,7 @@ LL |     let _: S = S;\n    |\n    = note: expected struct `S`\n              found fn item `fn(usize, usize) -> S {S}`\n-help: use parentheses to instantiate this tuple struct\n+help: use parentheses to construct this tuple struct\n    |\n LL |     let _: S = S(/* usize */, /* usize */);\n    |                 ++++++++++++++++++++++++++\n@@ -85,7 +85,7 @@ LL |     let _: V = V;\n    |\n    = note: expected struct `V`\n              found fn item `fn() -> V {V}`\n-help: use parentheses to instantiate this tuple struct\n+help: use parentheses to construct this tuple struct\n    |\n LL |     let _: V = V();\n    |                 ++\n@@ -139,7 +139,7 @@ LL |     let _: E = E::A;\n    |\n    = note: expected enum `E`\n            found fn item `fn(usize) -> E {E::A}`\n-help: use parentheses to instantiate this tuple variant\n+help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = E::A(/* usize */);\n    |                    +++++++++++++"}, {"sha": "23e7b7cc363fec81063cda1ae800da5b0c3c159e", "filename": "src/test/ui/typeck/issue-87181/empty-tuple-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo}` in the\n LL |     thing.bar.foo();\n    |               ^^^ method not found in `fn() -> Foo {Foo}`\n    |\n-help: use parentheses to instantiate this tuple struct\n+help: use parentheses to construct this tuple struct\n    |\n LL |     (thing.bar)().foo();\n    |     +         +++"}, {"sha": "2247ea27021f45e1559f54adfcc2121157d49365", "filename": "src/test/ui/typeck/issue-87181/enum-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo::Tup}` i\n LL |     thing.bar.foo();\n    |               ^^^ method not found in `fn() -> Foo {Foo::Tup}`\n    |\n-help: use parentheses to instantiate this tuple variant\n+help: use parentheses to construct this tuple variant\n    |\n LL |     (thing.bar)().foo();\n    |     +         +++"}, {"sha": "0a7d30b615a635990599586121124f374557db29", "filename": "src/test/ui/typeck/issue-87181/tuple-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr?ref=5c2c476ad17b7cf4c883dedd3802b5b8a9d1b8f3", "patch": "@@ -4,7 +4,7 @@ error[E0609]: no field `0` on type `fn(char, u16) -> Foo {Foo}`\n LL |     thing.bar.0;\n    |               ^\n    |\n-help: use parentheses to instantiate this tuple struct\n+help: use parentheses to construct this tuple struct\n    |\n LL |     (thing.bar)(/* char */, /* u16 */).0;\n    |     +         ++++++++++++++++++++++++"}]}