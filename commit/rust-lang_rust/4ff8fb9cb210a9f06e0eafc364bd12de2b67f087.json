{"sha": "4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZjhmYjljYjIxMGE5ZjA2ZTBlYWZjMzY0YmQxMmRlMmI2N2YwODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-05T03:20:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-05T03:20:43Z"}, "message": "Auto merge of #68831 - Dylan-DPC:rollup-j6x15y9, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #68282 (Instrument C / C++ in MemorySanitizer example)\n - #68758 (Fix 59191 - ICE when macro replaces crate root with non-module item)\n - #68805 (bootstrap: fix clippy warnings)\n - #68810 (Remove Copy impl from OnceWith)\n - #68815 (remove redundant imports (clippy::single_component_path_imports))\n - #68818 (fix couple of perf related clippy warnings)\n - #68819 (Suggest `split_at_mut` on multiple mutable index access)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6f9b7c76baf956f86cb6a9f881e5908bbadb16cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f9b7c76baf956f86cb6a9f881e5908bbadb16cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "html_url": "https://github.com/rust-lang/rust/commit/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1", "html_url": "https://github.com/rust-lang/rust/commit/002287d25f6ef9718dbabd3e23c00b5ebcfb51c1"}, {"sha": "793a5e68b4589d4168fa778c65ca9b92e0b85f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/793a5e68b4589d4168fa778c65ca9b92e0b85f62", "html_url": "https://github.com/rust-lang/rust/commit/793a5e68b4589d4168fa778c65ca9b92e0b85f62"}], "stats": {"total": 270, "additions": 156, "deletions": 114}, "files": [{"sha": "a8c00c8c3ca88368764e4d5cb22068f9057671fc", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -47,7 +47,7 @@ fn main() {\n     };\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n-    let on_fail = env::var_os(\"RUSTC_ON_FAIL\").map(|of| Command::new(of));\n+    let on_fail = env::var_os(\"RUSTC_ON_FAIL\").map(Command::new);\n \n     let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n     let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n@@ -64,7 +64,7 @@ fn main() {\n     if let Some(crate_name) = crate_name {\n         if let Some(target) = env::var_os(\"RUSTC_TIME\") {\n             if target == \"all\"\n-                || target.into_string().unwrap().split(\",\").any(|c| c.trim() == crate_name)\n+                || target.into_string().unwrap().split(',').any(|c| c.trim() == crate_name)\n             {\n                 cmd.arg(\"-Ztime\");\n             }\n@@ -189,7 +189,7 @@ fn main() {\n                 crate_name,\n                 is_test,\n                 dur.as_secs(),\n-                dur.subsec_nanos() / 1_000_000\n+                dur.subsec_millis()\n             );\n \n             match status.code() {"}, {"sha": "04345867bf5c185e21155a195f48665710adfe8b", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -61,7 +61,7 @@ fn main() {\n     }\n \n     // Needed to be able to run all rustdoc tests.\n-    if let Some(_) = env::var_os(\"RUSTDOC_GENERATE_REDIRECT_PAGES\") {\n+    if env::var_os(\"RUSTDOC_GENERATE_REDIRECT_PAGES\").is_some() {\n         // This \"unstable-options\" can be removed when `--generate-redirect-pages` is stabilized\n         if !has_unstable {\n             cmd.arg(\"-Z\").arg(\"unstable-options\");"}, {"sha": "18f6fda760846ac4f2d949a74543d9d66820abc8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -510,17 +510,15 @@ impl<'a> Builder<'a> {\n             Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n         };\n \n-        let builder = Builder {\n+        Builder {\n             build,\n             top_stage: build.config.stage.unwrap_or(2),\n             kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n             time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n             paths: paths.to_owned(),\n-        };\n-\n-        builder\n+        }\n     }\n \n     pub fn execute_cli(&self) {\n@@ -753,13 +751,12 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUST_CHECK\", \"1\");\n         }\n \n-        let stage;\n-        if compiler.stage == 0 && self.local_rebuild {\n+        let stage = if compiler.stage == 0 && self.local_rebuild {\n             // Assume the local-rebuild rustc already has stage1 features.\n-            stage = 1;\n+            1\n         } else {\n-            stage = compiler.stage;\n-        }\n+            compiler.stage\n+        };\n \n         let mut rustflags = Rustflags::new(&target);\n         if stage != 0 {\n@@ -1252,12 +1249,7 @@ impl<'a> Builder<'a> {\n         };\n \n         if self.config.print_step_timings && dur > Duration::from_millis(100) {\n-            println!(\n-                \"[TIMING] {:?} -- {}.{:03}\",\n-                step,\n-                dur.as_secs(),\n-                dur.subsec_nanos() / 1_000_000\n-            );\n+            println!(\"[TIMING] {:?} -- {}.{:03}\", step, dur.as_secs(), dur.subsec_millis());\n         }\n \n         {\n@@ -1302,7 +1294,7 @@ impl Rustflags {\n \n     fn arg(&mut self, arg: &str) -> &mut Self {\n         assert_eq!(arg.split_whitespace().count(), 1);\n-        if self.0.len() > 0 {\n+        if !self.0.is_empty() {\n             self.0.push_str(\" \");\n         }\n         self.0.push_str(arg);"}, {"sha": "cca8ab80c93b1d329cf3f4bb9f92b4998b1461dd", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -19,7 +19,6 @@ fn configure(host: &[&str], target: &[&str]) -> Config {\n     config.out = dir;\n     config.build = INTERNER.intern_str(\"A\");\n     config.hosts = vec![config.build]\n-        .clone()\n         .into_iter()\n         .chain(host.iter().map(|s| INTERNER.intern_str(s)))\n         .collect::<Vec<_>>();"}, {"sha": "7dded96e18efde448effb85f955c42128f61a0ea", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -18,7 +18,6 @@ use std::str;\n use build_helper::{output, t, up_to_date};\n use filetime::FileTime;\n use serde::Deserialize;\n-use serde_json;\n \n use crate::builder::Cargo;\n use crate::dist;\n@@ -149,7 +148,8 @@ fn copy_third_party_objects(\n     // which is provided by std for this target.\n     if target == \"x86_64-fortanix-unknown-sgx\" {\n         let src_path_env = \"X86_FORTANIX_SGX_LIBS\";\n-        let src = env::var(src_path_env).expect(&format!(\"{} not found in env\", src_path_env));\n+        let src =\n+            env::var(src_path_env).unwrap_or_else(|_| panic!(\"{} not found in env\", src_path_env));\n         copy_and_stamp(Path::new(&src), \"libunwind.a\");\n     }\n \n@@ -361,7 +361,7 @@ impl Step for StartupObjects {\n                 );\n             }\n \n-            let target = sysroot_dir.join(file.to_string() + \".o\");\n+            let target = sysroot_dir.join((*file).to_string() + \".o\");\n             builder.copy(dst_file, &target);\n             target_deps.push(target);\n         }\n@@ -515,7 +515,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: Interne\n         .env(\"CFG_VERSION\", builder.rust_version())\n         .env(\"CFG_PREFIX\", builder.config.prefix.clone().unwrap_or_default());\n \n-    let libdir_relative = builder.config.libdir_relative().unwrap_or(Path::new(\"lib\"));\n+    let libdir_relative = builder.config.libdir_relative().unwrap_or_else(|| Path::new(\"lib\"));\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n \n     if let Some(ref ver_date) = builder.rust_info.commit_date() {\n@@ -843,11 +843,11 @@ pub fn run_cargo(\n         };\n         for filename in filenames {\n             // Skip files like executables\n-            if !filename.ends_with(\".rlib\")\n-                && !filename.ends_with(\".lib\")\n-                && !filename.ends_with(\".a\")\n-                && !is_dylib(&filename)\n-                && !(is_check && filename.ends_with(\".rmeta\"))\n+            if !(filename.ends_with(\".rlib\")\n+                || filename.ends_with(\".lib\")\n+                || filename.ends_with(\".a\")\n+                || is_dylib(&filename)\n+                || (is_check && filename.ends_with(\".rmeta\")))\n             {\n                 continue;\n             }\n@@ -905,7 +905,7 @@ pub fn run_cargo(\n     for (prefix, extension, expected_len) in toplevel {\n         let candidates = contents.iter().filter(|&&(_, ref filename, ref meta)| {\n             filename.starts_with(&prefix[..])\n-                && filename[prefix.len()..].starts_with(\"-\")\n+                && filename[prefix.len()..].starts_with('-')\n                 && filename.ends_with(&extension[..])\n                 && meta.len() == expected_len\n         });"}, {"sha": "709cf2908eadf7783acef0849509ba98219e4f67", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -16,7 +16,6 @@ use crate::flags::Flags;\n pub use crate::flags::Subcommand;\n use build_helper::t;\n use serde::Deserialize;\n-use toml;\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -440,7 +439,7 @@ impl Config {\n                     }\n                 }\n             })\n-            .unwrap_or_else(|| TomlConfig::default());\n+            .unwrap_or_else(TomlConfig::default);\n \n         let build = toml.build.clone().unwrap_or_default();\n         // set by bootstrap.py\n@@ -539,7 +538,7 @@ impl Config {\n             config.llvm_ldflags = llvm.ldflags.clone();\n             set(&mut config.llvm_use_libcxx, llvm.use_libcxx);\n             config.llvm_use_linker = llvm.use_linker.clone();\n-            config.llvm_allow_old_toolchain = llvm.allow_old_toolchain.clone();\n+            config.llvm_allow_old_toolchain = llvm.allow_old_toolchain;\n         }\n \n         if let Some(ref rust) = toml.rust {\n@@ -606,7 +605,7 @@ impl Config {\n                 target.ar = cfg.ar.clone().map(PathBuf::from);\n                 target.ranlib = cfg.ranlib.clone().map(PathBuf::from);\n                 target.linker = cfg.linker.clone().map(PathBuf::from);\n-                target.crt_static = cfg.crt_static.clone();\n+                target.crt_static = cfg.crt_static;\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n                 target.wasi_root = cfg.wasi_root.clone().map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);"}, {"sha": "8003d8906e8247b4dd60bd5b07918922a26cddf1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -828,7 +828,7 @@ impl Step for Analysis {\n         assert!(builder.config.extended);\n         let name = pkgname(builder, \"rust-analysis\");\n \n-        if &compiler.host != builder.config.build {\n+        if compiler.host != builder.config.build {\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n@@ -877,7 +877,7 @@ fn copy_src_dirs(builder: &Builder<'_>, src_dirs: &[&str], exclude_dirs: &[&str]\n             Some(path) => path,\n             None => return false,\n         };\n-        if spath.ends_with(\"~\") || spath.ends_with(\".pyc\") {\n+        if spath.ends_with('~') || spath.ends_with(\".pyc\") {\n             return false;\n         }\n "}, {"sha": "b0d9a5b94641cf68aa9eb299b9dd3fe67e8d49cf", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -560,7 +560,7 @@ impl Step for Rustdoc {\n         builder.ensure(Rustc { stage, target });\n \n         // Build rustdoc.\n-        builder.ensure(tool::Rustdoc { compiler: compiler });\n+        builder.ensure(tool::Rustdoc { compiler });\n \n         // Symlink compiler docs to the output directory of rustdoc documentation.\n         let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target).join(\"doc\");"}, {"sha": "516be6a30c235125e546239742d7bb73e56affc4", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -571,7 +571,7 @@ fn split(s: &[String]) -> Vec<String> {\n }\n \n fn parse_deny_warnings(matches: &getopts::Matches) -> Option<bool> {\n-    match matches.opt_str(\"warnings\").as_ref().map(|v| v.as_str()) {\n+    match matches.opt_str(\"warnings\").as_deref() {\n         Some(\"deny\") => Some(true),\n         Some(\"warn\") => Some(false),\n         Some(value) => {"}, {"sha": "6549262811b9f32a79f88186ec205cbf3716b9ce", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -126,9 +126,8 @@ fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {\n         None => return path.to_path_buf(),\n     };\n     for part in path.components() {\n-        match part {\n-            Component::Normal(s) => ret.push(s),\n-            _ => {}\n+        if let Component::Normal(s) = part {\n+            ret.push(s)\n         }\n     }\n     ret"}, {"sha": "0db4fb38901002b6344a922266d3f4aa2a00c299", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -444,7 +444,7 @@ impl Build {\n             builder.execute_cli();\n         } else {\n             let builder = builder::Builder::new(&self);\n-            let _ = builder.execute_cli();\n+            builder.execute_cli();\n         }\n \n         // Check for postponed failures from `test --no-fail-fast`.\n@@ -839,7 +839,7 @@ impl Build {\n             .target_config\n             .get(&target)\n             .and_then(|t| t.musl_root.as_ref())\n-            .or(self.config.musl_root.as_ref())\n+            .or_else(|| self.config.musl_root.as_ref())\n             .map(|p| &**p)\n     }\n "}, {"sha": "292aa3b1e24a73e7eddcfba383cf154280e62378", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -5,7 +5,6 @@ use std::process::Command;\n \n use build_helper::output;\n use serde::Deserialize;\n-use serde_json;\n \n use crate::cache::INTERNER;\n use crate::{Build, Crate};"}, {"sha": "1cfb4b2f63b5764639fea4b8d73e80e084fe86ae", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -15,8 +15,6 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use build_helper::{output, t};\n-use cc;\n-use cmake;\n \n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n@@ -205,7 +203,7 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_ENABLE_LIBXML2\", \"OFF\");\n         }\n \n-        if enabled_llvm_projects.len() > 0 {\n+        if !enabled_llvm_projects.is_empty() {\n             enabled_llvm_projects.sort();\n             enabled_llvm_projects.dedup();\n             cfg.define(\"LLVM_ENABLE_PROJECTS\", enabled_llvm_projects.join(\";\"));"}, {"sha": "8d9e62010015bfddb21b247789ad510637ebf8db", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -1424,13 +1424,10 @@ impl Step for ErrorIndex {\n }\n \n fn markdown_test(builder: &Builder<'_>, compiler: Compiler, markdown: &Path) -> bool {\n-    match fs::read_to_string(markdown) {\n-        Ok(contents) => {\n-            if !contents.contains(\"```\") {\n-                return true;\n-            }\n+    if let Ok(contents) = fs::read_to_string(markdown) {\n+        if !contents.contains(\"```\") {\n+            return true;\n         }\n-        Err(_) => {}\n     }\n \n     builder.info(&format!(\"doc tests for: {}\", markdown.display()));"}, {"sha": "67e0ed5c58029df2e34414e6595430af62e01303", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -234,7 +234,7 @@ pub fn prepare_tool_cargo(\n         cargo.env(\"RUSTC_EXTERNAL_TOOL\", \"1\");\n     }\n \n-    let mut features = extra_features.iter().cloned().collect::<Vec<_>>();\n+    let mut features = extra_features.to_vec();\n     if builder.build.config.cargo_native_static {\n         if path.ends_with(\"cargo\")\n             || path.ends_with(\"rls\")"}, {"sha": "bb012a38855117e741a9810da13763d8d5ce0c8f", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -124,7 +124,7 @@ fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n     let output = t!(String::from_utf8(output.stdout));\n \n     for (tool, submodule) in STABLE_TOOLS.iter().chain(NIGHTLY_TOOLS.iter()) {\n-        let changed = output.lines().any(|l| l.starts_with(\"M\") && l.ends_with(submodule));\n+        let changed = output.lines().any(|l| l.starts_with('M') && l.ends_with(submodule));\n         eprintln!(\"Verifying status of {}...\", tool);\n         if !changed {\n             continue;"}, {"sha": "eac790fe504b8e1f9a84fdbde31b232d02bb4c2a", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -98,7 +98,7 @@ impl Drop for TimeIt {\n     fn drop(&mut self) {\n         let time = self.1.elapsed();\n         if !self.0 {\n-            println!(\"\\tfinished in {}.{:03}\", time.as_secs(), time.subsec_nanos() / 1_000_000);\n+            println!(\"\\tfinished in {}.{:03}\", time.as_secs(), time.subsec_millis());\n         }\n     }\n }"}, {"sha": "414ac7e63a331077e83ef0805cd8dff51edc434a", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -170,7 +170,7 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n ## MemorySanitizer\n \n Use of uninitialized memory. Note that we are using `-Zbuild-std` to instrument\n-standard library, and passing `-msan-track-origins=2` to the LLVM to track\n+the standard library, and passing `-Zsanitizer-track-origins` to track the\n origins of uninitialized memory:\n \n ```shell\n@@ -185,7 +185,15 @@ fn main() {\n     }\n }\n \n-$ env RUSTFLAGS=\"-Zsanitizer=memory -Cllvm-args=-msan-track-origins=2\" cargo -Zbuild-std run --target x86_64-unknown-linux-gnu\n+$ export \\\n+  CC=clang \\\n+  CXX=clang++ \\\n+  CFLAGS='-fsanitize=memory -fsanitize-memory-track-origins' \\\n+  CXXFLAGS='-fsanitize=memory -fsanitize-memory-track-origins' \\\n+  RUSTFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins' \\\n+  RUSTDOCFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins'\n+$ cargo clean\n+$ cargo -Zbuild-std run --target x86_64-unknown-linux-gnu\n ==9416==WARNING: MemorySanitizer: use-of-uninitialized-value\n     #0 0x560c04f7488a in core::fmt::num::imp::fmt_u64::haa293b0b098501ca $RUST/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/src/libcore/fmt/num.rs:202:16\n ..."}, {"sha": "a1d4e1b31e9b15f6c9cc77a557f67932247e5063", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -398,7 +398,7 @@ pub fn once<T>(value: T) -> Once<T> {\n /// See its documentation for more.\n ///\n /// [`once_with`]: fn.once_with.html\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Clone, Debug)]\n #[stable(feature = \"iter_once_with\", since = \"1.43.0\")]\n pub struct OnceWith<F> {\n     gen: Option<F>,"}, {"sha": "b1b3d44044ebc6baf4e428682fa32a1d7dd4c65f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -31,7 +31,6 @@ use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::{self, AdtKind, GenericParamDefKind, List, ToPredicate, Ty, TyCtxt, WithConstness};\n use crate::util::common::ErrorReported;\n-use chalk_engine;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;"}, {"sha": "1db83c5bafac9e411ad84f44b857afb7c5b9f128", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -2,7 +2,6 @@ use crate::traits;\n use crate::traits::project::Normalized;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::{self, Lift, Ty, TyCtxt};\n-use chalk_engine;\n use rustc_span::symbol::Symbol;\n use smallvec::SmallVec;\n "}, {"sha": "1b3e42447c47d9d7668cdb5f25ff271cf9ff0368", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -46,7 +46,6 @@ use rustc_target::abi::Align;\n use syntax::ast::{self, Constness, Ident, Name};\n use syntax::node_id::{NodeId, NodeMap, NodeSet};\n \n-use smallvec;\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n use std::fmt;\n@@ -1348,7 +1347,7 @@ pub trait ToPredicate<'tcx> {\n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n         ty::Predicate::Trait(\n-            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value.clone() }),\n+            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value }),\n             self.constness,\n         )\n     }"}, {"sha": "ac7ba49ba185d94c02c159b780efdc8678317582", "filename": "src/librustc_builtin_macros/log_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flog_syntax.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -1,6 +1,5 @@\n use rustc_ast_pretty::pprust;\n use rustc_expand::base;\n-use rustc_span;\n use syntax::tokenstream::TokenStream;\n \n pub fn expand_log_syntax<'cx>("}, {"sha": "0b8cbd3a7833301e861501af778423255aa1b99a", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -363,7 +363,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 krate.attrs = vec![];\n                 krate.module = ast::Mod { inner: orig_mod_span, items: vec![], inline: true };\n             }\n-            _ => unreachable!(),\n+            Some(ast::Item { span, kind, .. }) => {\n+                krate.attrs = vec![];\n+                krate.module = ast::Mod { inner: orig_mod_span, items: vec![], inline: true };\n+                self.cx.span_err(\n+                    span,\n+                    &format!(\n+                        \"expected crate top-level item to be a module after macro expansion, found a {}\",\n+                        kind.descriptive_variant()\n+                    ),\n+                );\n+            }\n         };\n         self.cx.trace_macros_diag();\n         krate"}, {"sha": "5c72b049d97e98647e56efe307c7433eb0085b85", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -90,8 +90,7 @@ pub fn read_file(\n         let mut rustc_version_str_len = [0u8; 1];\n         file.read_exact(&mut rustc_version_str_len)?;\n         let rustc_version_str_len = rustc_version_str_len[0] as usize;\n-        let mut buffer = Vec::with_capacity(rustc_version_str_len);\n-        buffer.resize(rustc_version_str_len, 0);\n+        let mut buffer = vec![0; rustc_version_str_len];\n         file.read_exact(&mut buffer)?;\n \n         if buffer != rustc_version().as_bytes() {"}, {"sha": "803e89585720295e0a05b4481bb34a39a97339fb", "filename": "src/librustc_interface/callbacks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_interface%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_interface%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fcallbacks.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -11,7 +11,6 @@\n \n use rustc::ty::tls;\n use rustc_errors::{Diagnostic, TRACK_DIAGNOSTICS};\n-use rustc_span;\n use std::fmt;\n \n /// This is a callback from libsyntax as it cannot access the implicit state"}, {"sha": "bf8bcd71efa4158e3cc3a1993030a6eaa0d5d1a9", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -17,7 +17,6 @@ use rustc::traits;\n use rustc::ty::steal::Steal;\n use rustc::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc::util::common::ErrorReported;\n-use rustc_builtin_macros;\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::filename_for_metadata;\n@@ -26,18 +25,15 @@ use rustc_data_structures::{box_region_allow_access, declare_box_region_type, pa\n use rustc_errors::PResult;\n use rustc_expand::base::ExtCtxt;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n-use rustc_incremental;\n use rustc_lint::LintStore;\n use rustc_mir as mir;\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n-use rustc_privacy;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_span::symbol::Symbol;\n use rustc_span::FileName;\n-use rustc_traits;\n use rustc_typeck as typeck;\n use syntax::mut_visit::MutVisitor;\n use syntax::{self, ast, visit};"}, {"sha": "a246b34b2c295a45520cfb6ef0ce72acf12d0a3b", "filename": "src/librustc_macros/src/lift.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_macros%2Fsrc%2Flift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_macros%2Fsrc%2Flift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flift.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -1,7 +1,5 @@\n-use proc_macro2;\n use quote::quote;\n use syn::{self, parse_quote};\n-use synstructure;\n \n pub fn lift_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     s.add_bounds(synstructure::AddBounds::Generics);"}, {"sha": "6dc4f7f2515956e412653ae2cae7c0c580cb3b76", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -2,7 +2,6 @@ use itertools::Itertools;\n use proc_macro::TokenStream;\n use proc_macro2::{Delimiter, TokenTree};\n use quote::quote;\n-use syn;\n use syn::parse::{Parse, ParseStream, Result};\n use syn::punctuated::Punctuated;\n use syn::spanned::Spanned;"}, {"sha": "feddcd5f994290e2b9a9d30a144efc96609b863d", "filename": "src/librustc_macros/src/symbols.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -1,7 +1,6 @@\n use proc_macro::TokenStream;\n use quote::quote;\n use std::collections::HashSet;\n-use syn;\n use syn::parse::{Parse, ParseStream, Result};\n use syn::{braced, parse_macro_input, Ident, LitStr, Token};\n "}, {"sha": "687401e33449b68a5f621ad2b7ce3ee7cd0a17de", "filename": "src/librustc_macros/src/type_foldable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Ftype_foldable.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -1,6 +1,4 @@\n use quote::quote;\n-use syn;\n-use synstructure;\n \n pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     if let syn::Data::Union(_) = s.ast().data {"}, {"sha": "b49e7b7f0d9f897895f4d3077ec3dc61cf2ff7dd", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -397,14 +397,20 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             (BorrowKind::Mut { .. }, BorrowKind::Mut { .. }) => {\n                 first_borrow_desc = \"first \";\n-                self.cannot_mutably_borrow_multiply(\n+                let mut err = self.cannot_mutably_borrow_multiply(\n                     span,\n                     &desc_place,\n                     &msg_place,\n                     issued_span,\n                     &msg_borrow,\n                     None,\n-                )\n+                );\n+                self.suggest_split_at_mut_if_applicable(\n+                    &mut err,\n+                    &place,\n+                    &issued_borrow.borrowed_place,\n+                );\n+                err\n             }\n \n             (BorrowKind::Unique, BorrowKind::Unique) => {\n@@ -549,6 +555,23 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n+    fn suggest_split_at_mut_if_applicable(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        place: &Place<'tcx>,\n+        borrowed_place: &Place<'tcx>,\n+    ) {\n+        match (&place.projection[..], &borrowed_place.projection[..]) {\n+            ([ProjectionElem::Index(_)], [ProjectionElem::Index(_)]) => {\n+                err.help(\n+                    \"consider using `.split_at_mut(position)` or similar method to obtain \\\n+                     two mutable non-overlapping sub-slices\",\n+                );\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     /// Returns the description of the root place for a conflicting borrow and the full\n     /// descriptions of the places that caused the conflict.\n     ///"}, {"sha": "9367909d10c30c61614587f5c6fcdbae36cbac20", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{Node, PatKind, TyKind};\n use rustc_session::lint;\n \n-use rustc_span;\n use rustc_span::symbol::sym;\n use syntax::{ast, attr};\n "}, {"sha": "ad1a6c4906ea368c7472fe56f2c37e8fc71db311", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -22,8 +22,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_errors::emitter::HumanReadableErrorType;\n use rustc_errors::{ColorConfig, FatalError, Handler, HandlerFlags};\n \n-use getopts;\n-\n use std::collections::btree_map::{\n     Iter as BTreeMapIter, Keys as BTreeMapKeysIter, Values as BTreeMapValuesIter,\n };\n@@ -816,7 +814,6 @@ mod opt {\n     #![allow(dead_code)]\n \n     use super::RustcOptGroup;\n-    use getopts;\n \n     pub type R = RustcOptGroup;\n     pub type S = &'static str;\n@@ -1862,7 +1859,6 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n pub mod nightly_options {\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n     use crate::early_error;\n-    use getopts;\n     use rustc_feature::UnstableFeatures;\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {"}, {"sha": "d6b71641da52f8e5087c64ad7a63c75141bc4b74", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -11,8 +11,6 @@ use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n \n-use getopts;\n-\n use std::collections::BTreeMap;\n \n use std::collections::hash_map::DefaultHasher;"}, {"sha": "f8cba58f9d904197420bad7e73da185b8a7319da", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -33,7 +33,6 @@ use rustc_data_structures::jobserver::{self, Client};\n use rustc_data_structures::profiling::{SelfProfiler, SelfProfilerRef};\n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n \n-use std;\n use std::cell::{self, RefCell};\n use std::env;\n use std::fmt;"}, {"sha": "231aed48fb6be7ff580c1e5c895c28275b04d77b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -1438,10 +1438,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // Expand trait aliases recursively and check that only one regular (non-auto) trait\n         // is used and no 'maybe' bounds are used.\n-        let expanded_traits = traits::expand_trait_aliases(\n-            tcx,\n-            bounds.trait_bounds.iter().map(|&(a, b, _)| (a.clone(), b)),\n-        );\n+        let expanded_traits =\n+            traits::expand_trait_aliases(tcx, bounds.trait_bounds.iter().map(|&(a, b, _)| (a, b)));\n         let (mut auto_traits, regular_traits): (Vec<_>, Vec<_>) =\n             expanded_traits.partition(|i| tcx.trait_is_auto(i.trait_ref().def_id()));\n         if regular_traits.len() > 1 {"}, {"sha": "32bd7e4c4c1d0ef83d86e380257c586e30e2ce68", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -3,7 +3,6 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/variance.html\n \n-use arena;\n use hir::Node;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, CrateVariancesMap, TyCtxt};"}, {"sha": "356660763a7550c38de50332af3773965b3e4249", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -16,7 +16,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n "}, {"sha": "1b776930d7a78c9c0fcaf17a370eaa6ebf9b4698", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -3,7 +3,6 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n-use getopts;\n use rustc::lint::Level;\n use rustc::session;\n use rustc::session::config::{\n@@ -13,7 +12,6 @@ use rustc::session::config::{\n use rustc::session::config::{parse_crate_types_from_list, parse_externs, CrateType};\n use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc::session::search_paths::SearchPath;\n-use rustc_driver;\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_target::spec::TargetTriple;\n "}, {"sha": "429988db9d84363dbf6bb7080a36913fbdd095ae", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -11,7 +11,6 @@ use rustc_hir::def::Namespace::TypeNS;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use rustc_hir::HirId;\n use rustc_interface::interface;\n-use rustc_lint;\n use rustc_resolve as resolve;\n use rustc_session::lint;\n "}, {"sha": "6a23b230e1224b8fd84e0f3b86d12795f5759e41", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -73,8 +73,6 @@ use crate::html::markdown::{self, ErrorCodes, IdMap, Markdown, MarkdownHtml, Mar\n use crate::html::sources;\n use crate::html::{highlight, layout, static_files};\n \n-use minifier;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -3629,14 +3627,7 @@ fn render_impl(\n                 for it in &i.inner_impl().items {\n                     if let clean::TypedefItem(ref tydef, _) = it.inner {\n                         write!(w, \"<span class=\\\"where fmt-newline\\\">  \");\n-                        assoc_type(\n-                            w,\n-                            it,\n-                            &vec![],\n-                            Some(&tydef.type_),\n-                            AssocItemLink::Anchor(None),\n-                            \"\",\n-                        );\n+                        assoc_type(w, it, &[], Some(&tydef.type_), AssocItemLink::Anchor(None), \"\");\n                         write!(w, \";</span>\");\n                     }\n                 }"}, {"sha": "a37efc22c93052840fd662b9aabd504358abd37c", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -5,7 +5,6 @@ use std::path::PathBuf;\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n-use testing;\n \n use crate::config::{Options, RenderOptions};\n use crate::externalfiles::{load_string, LoadStringError};"}, {"sha": "332d19fbfaeca1845f1e833bb6f2dbe285f7d691", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -13,7 +13,6 @@ use rustc_hir::def_id::DefId;\n use rustc_resolve::ParentScope;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n-use syntax;\n use syntax::ast::{self, Ident};\n \n use std::ops::Range;"}, {"sha": "2892c4b15379032b612306f94297461ddfffad87", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -20,7 +20,6 @@ use std::str;\n use syntax::ast;\n use syntax::with_globals;\n use tempfile::Builder as TempFileBuilder;\n-use testing;\n \n use crate::clean::Attributes;\n use crate::config::Options;"}, {"sha": "778600b2196b7108443a6ada9c883210480ce489", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -1,6 +1,5 @@\n //! Module converting command-line arguments into test configuration.\n \n-use getopts;\n use std::env;\n use std::path::PathBuf;\n "}, {"sha": "149c9202e6e2d9788334dbc582820cb960936d9d", "filename": "src/libtest/console.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibtest%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Flibtest%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fconsole.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -4,8 +4,6 @@ use std::fs::File;\n use std::io;\n use std::io::prelude::Write;\n \n-use term;\n-\n use super::{\n     bench::fmt_bench_samples,\n     cli::TestOpts,"}, {"sha": "d9ee77067ecb7d713bdbc4e242b40fb3b996533e", "filename": "src/test/ui/proc-macro/auxiliary/issue-59191.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-59191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-59191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-59191.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn no_main(_attrs: TokenStream, _input: TokenStream) -> TokenStream {\n+    let new_krate = r#\"\n+        fn main() {}\n+    \"#;\n+    new_krate.parse().unwrap()\n+}"}, {"sha": "a59cacb8bde1f6ab1b895a5a54098a6a6d4fe0ff", "filename": "src/test/ui/proc-macro/issue-59191-replace-root-with-fn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+// aux-crate:issue_59191=issue-59191.rs\n+// Test that using a macro to replace the entire crate tree with a non-'mod' item errors out nicely.\n+// `issue_59191::no_main` replaces whatever's passed in with `fn main() {}`.\n+#![feature(custom_inner_attributes)]\n+//~^ ERROR `main` function not found in crate `issue_59191_replace_root_with_fn` [E0601]\n+#![issue_59191::no_main]\n+//~^ ERROR expected crate top-level item to be a module after macro expansion, found a function"}, {"sha": "e0a3caef9db889d5383364f57d890c52af9c66e3", "filename": "src/test/ui/proc-macro/issue-59191-replace-root-with-fn.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -0,0 +1,17 @@\n+error: expected crate top-level item to be a module after macro expansion, found a function\n+  --> $DIR/issue-59191-replace-root-with-fn.rs:7:1\n+   |\n+LL | #![issue_59191::no_main]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0601]: `main` function not found in crate `issue_59191_replace_root_with_fn`\n+  --> $DIR/issue-59191-replace-root-with-fn.rs:5:1\n+   |\n+LL | / #![feature(custom_inner_attributes)]\n+LL | |\n+LL | | #![issue_59191::no_main]\n+   | |________________________^ consider adding a `main` function to `$DIR/issue-59191-replace-root-with-fn.rs`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "d294c20b8240eacdc5511728120c9c153f2c0a5a", "filename": "src/test/ui/suggestions/suggest-split-at-mut.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-split-at-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-split-at-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-split-at-mut.rs?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let mut foo = [1, 2, 3, 4];\n+    let a = &mut foo[2];\n+    let b = &mut foo[3]; //~ ERROR cannot borrow `foo[_]` as mutable more than once at a time\n+    *a = 5;\n+    *b = 6;\n+    println!(\"{:?} {:?}\", a, b);\n+}"}, {"sha": "330f012b2a9be2dabc367f980fa0b6f0b9e11191", "filename": "src/test/ui/suggestions/suggest-split-at-mut.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-split-at-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-split-at-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-split-at-mut.stderr?ref=4ff8fb9cb210a9f06e0eafc364bd12de2b67f087", "patch": "@@ -0,0 +1,15 @@\n+error[E0499]: cannot borrow `foo[_]` as mutable more than once at a time\n+  --> $DIR/suggest-split-at-mut.rs:4:13\n+   |\n+LL |     let a = &mut foo[2];\n+   |             ----------- first mutable borrow occurs here\n+LL |     let b = &mut foo[3];\n+   |             ^^^^^^^^^^^ second mutable borrow occurs here\n+LL |     *a = 5;\n+   |     ------ first borrow later used here\n+   |\n+   = help: consider using `.split_at_mut(position)` or similar method to obtain two mutable non-overlapping sub-slices\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}]}