{"sha": "e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzY2ViY2IzYmQ0ZmZhZjg2YmIwY2RmZDJhZjViN2U2OTg3MTdiMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-19T15:49:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-19T15:49:18Z"}, "message": "Auto merge of #62690 - alexcrichton:azure-update, r=pietroalbini\n\nazure: Prepare configuration for 4-core machines\n\nThis commit updates some of our assorted Azure/CI configuration to\nprepare for some 4-core machines coming online. We're still in the\nprocess of performance testing them to get final numbers, but some\nchanges are worth landing ahead of this. The updates here are:\n\n* Use `C:/` instead of `D:/` for submodule checkout since it should have\n  plenty of space and the 4-core machines won't have `D:/`\n\n* Update `lzma-sys` to 0.1.14 which has support for VS2019, where 0.1.10\n  doesn't.\n\n* Update `src/ci/docker/run.sh` to work when it itself is running inside\n  of a docker container (see the comment in the file for more info)\n\n* Print step timings on the `try` branch in addition to the `auto`\n  branch in. The logs there should be seen by similarly many humans (not\n  many) and can be useful for performance analysis after a `try` build\n  runs.\n\n* Install the WIX and InnoSetup tools manually on Windows instead of\n  relying on pre-installed copies on the VM. This gives us more control\n  over what's being used on the Azure cloud right now (we control the\n  version) and in the 4-core machines these won't be pre-installed. Note\n  that on AppVeyor we actually already were installing InnoSetup, we\n  just didn't carry that over on Azure!", "tree": {"sha": "1fa755afded0bf5bf1f472743f1c89ad16b4951b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa755afded0bf5bf1f472743f1c89ad16b4951b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "html_url": "https://github.com/rust-lang/rust/commit/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527dce7137f7a3c7bf47d9a503abf25f88ea22de", "url": "https://api.github.com/repos/rust-lang/rust/commits/527dce7137f7a3c7bf47d9a503abf25f88ea22de", "html_url": "https://github.com/rust-lang/rust/commit/527dce7137f7a3c7bf47d9a503abf25f88ea22de"}, {"sha": "9b4f6de7a47c87f78f88a70397cf222d8e359e35", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4f6de7a47c87f78f88a70397cf222d8e359e35", "html_url": "https://github.com/rust-lang/rust/commit/9b4f6de7a47c87f78f88a70397cf222d8e359e35"}], "stats": {"total": 84, "additions": 71, "deletions": 13}, "files": [{"sha": "c42c2311b493ff05cea5a751206fb36bea676fc5", "filename": ".azure-pipelines/steps/install-windows-build-deps.yml", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "patch": "@@ -1,4 +1,29 @@\n steps:\n+# We use the WIX toolset to create combined installers for Windows, and these\n+# binaries are downloaded from\n+# https://github.com/wixtoolset/wix3 originally\n+- bash: |\n+    set -e\n+    curl -O https://rust-lang-ci2.s3-us-west-1.amazonaws.com/rust-ci-mirror/wix311-binaries.zip\n+    echo \"##vso[task.setvariable variable=WIX]`pwd`/wix\"\n+    mkdir -p wix/bin\n+    cd wix/bin\n+    7z x ../../wix311-binaries.zip\n+  displayName: Install wix\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+\n+# We use InnoSetup and its `iscc` program to also create combined installers.\n+# Honestly at this point WIX above and `iscc` are just holdovers from\n+# oh-so-long-ago and are required for creating installers on Windows. I think\n+# one is MSI installers and one is EXE, but they're not used so frequently at\n+# this point anyway so perhaps it's a wash!\n+- script: |\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf is-install.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-08-22-is.exe\"\n+    is-install.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n+    echo ##vso[task.prependpath]C:\\Program Files (x86)\\Inno Setup 5\n+  displayName: Install InnoSetup\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+\n # We've had issues with the default drive in use running out of space during a\n # build, and it looks like the `C:` drive has more space than the default `D:`\n # drive. We should probably confirm this with the azure pipelines team at some"}, {"sha": "795eb73507c736f86815e74cbb583967a0cc7af4", "filename": ".azure-pipelines/steps/run.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/.azure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/.azure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Frun.yml?ref=e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "patch": "@@ -111,8 +111,8 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB), ne(variables['Agent.OS'], 'Windows_NT'))\n   displayName: Check out submodules (Unix)\n - script: |\n-    if not exist D:\\cache\\rustsrc\\NUL mkdir D:\\cache\\rustsrc\n-    sh src/ci/init_repo.sh . /d/cache/rustsrc\n+    if not exist C:\\cache\\rustsrc\\NUL mkdir C:\\cache\\rustsrc\n+    sh src/ci/init_repo.sh . /c/cache/rustsrc\n   condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['Agent.OS'], 'Windows_NT'))\n   displayName: Check out submodules (Windows)\n "}, {"sha": "7b2ee720104b9f13943230f56626b7f0b3584ce6", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "patch": "@@ -1547,11 +1547,10 @@ dependencies = [\n \n [[package]]\n name = \"lzma-sys\"\n-version = \"0.1.10\"\n+version = \"0.1.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"filetime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -4282,7 +4281,7 @@ name = \"xz2\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lzma-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lzma-sys 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -4437,7 +4436,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum log_settings 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"19af41f0565d7c19b2058153ad0b42d4d5ce89ec4dbf06ed6741114a8b63e7cd\"\n \"checksum lsp-codec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"169d737ad89cf8ddd82d1804d9122f54568c49377665157277cc90d747b1d31a\"\n \"checksum lsp-types 0.57.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b62b77309737b1e262b3bbf37ff8faa740562c633b14702afe9be85dbcb6f88a\"\n-\"checksum lzma-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1eaa027402541975218bb0eec67d6b0412f6233af96e0d096d31dbdfd22e614\"\n+\"checksum lzma-sys 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"16b5c59c57cc4d39e7999f50431aa312ea78af7c93b23fbb0c3567bd672e7f35\"\n \"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n \"checksum macro-utils 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2c4deaccc2ead6a28c16c0ba82f07d52b6475397415ce40876e559b0b0ea510\"\n \"checksum maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08cbb6b4fef96b6d77bfc40ec491b1690c779e77b05cd9f07f787ed376fd4c43\""}, {"sha": "7d3f013ea017253439d1e23ebb1cb105600cef4a", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "patch": "@@ -125,26 +125,60 @@ fi\n # goes ahead and sets it for all builders.\n args=\"$args --privileged\"\n \n-exec docker \\\n+# Things get a little weird if this script is already running in a docker\n+# container. If we're already in a docker container then we assume it's set up\n+# to do docker-in-docker where we have access to a working `docker` command.\n+#\n+# If this is the case (we check via the presence of `/.dockerenv`)\n+# then we can't actually use the `--volume` argument. Typically we use\n+# `--volume` to efficiently share the build and source directory between this\n+# script and the container we're about to spawn. If we're inside docker already\n+# though the `--volume` argument maps the *host's* folder to the container we're\n+# about to spawn, when in fact we want the folder in this container itself. To\n+# work around this we use a recipe cribbed from\n+# https://circleci.com/docs/2.0/building-docker-images/#mounting-folders to\n+# create a temporary container with a volume. We then copy the entire source\n+# directory into this container, and then use that copy in the container we're\n+# about to spawn. Finally after the build finishes we re-extract the object\n+# directory.\n+#\n+# Note that none of this is necessary if we're *not* in a docker-in-docker\n+# scenario. If this script is run on a bare metal host then we share a bunch of\n+# data directories to share as much data as possible. Note that we also use\n+# `LOCAL_USER_ID` (recognized in `src/ci/run.sh`) to ensure that files are all\n+# read/written as the same user as the bare-metal user.\n+if [ -f /.dockerenv ]; then\n+  docker create -v /checkout --name checkout alpine:3.4 /bin/true\n+  docker cp . checkout:/checkout\n+  args=\"$args --volumes-from checkout\"\n+else\n+  args=\"$args --volume $root_dir:/checkout:ro\"\n+  args=\"$args --volume $objdir:/checkout/obj\"\n+  args=\"$args --volume $HOME/.cargo:/cargo\"\n+  args=\"$args --volume $HOME/rustsrc:$HOME/rustsrc\"\n+  args=\"$args --env LOCAL_USER_ID=`id -u`\"\n+fi\n+\n+docker \\\n   run \\\n-  --volume \"$root_dir:/checkout:ro\" \\\n-  --volume \"$objdir:/checkout/obj\" \\\n   --workdir /checkout/obj \\\n   --env SRC=/checkout \\\n   $args \\\n   --env CARGO_HOME=/cargo \\\n   --env DEPLOY \\\n   --env DEPLOY_ALT \\\n-  --env LOCAL_USER_ID=`id -u` \\\n   --env CI \\\n   --env TF_BUILD \\\n   --env BUILD_SOURCEBRANCHNAME \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --env TOOLSTATE_REPO \\\n   --env CI_JOB_NAME=\"${CI_JOB_NAME-$IMAGE}\" \\\n-  --volume \"$HOME/.cargo:/cargo\" \\\n-  --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --init \\\n   --rm \\\n   rust-ci \\\n   /checkout/src/ci/run.sh\n+\n+if [ -f /.dockerenv ]; then\n+  rm -rf $objdir\n+  docker cp checkout:/checkout/obj $objdir\n+fi"}, {"sha": "1039343827d87376a24ddb15dc6f16020d9dcfd0", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=e3cebcb3bd4ffaf86bb0cdfd2af5b7e698717b01", "patch": "@@ -25,7 +25,7 @@ source \"$ci_dir/shared.sh\"\n \n branch_name=$(getCIBranch)\n \n-if [ ! isCI ] || [ \"$branch_name\" = \"auto\" ]; then\n+if [ ! isCI ] || [ \"$branch_name\" = \"auto\" ] || [ \"$branch_name\" = \"try\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n fi\n "}]}