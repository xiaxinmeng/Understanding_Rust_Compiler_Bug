{"sha": "afca9dc684cec625ea9e960248e0764abcd30a01", "node_id": "C_kwDOAAsO6NoAKGFmY2E5ZGM2ODRjZWM2MjVlYTllOTYwMjQ4ZTA3NjRhYmNkMzBhMDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T11:15:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T11:15:36Z"}, "message": "Auto merge of #2594 - RalfJung:target, r=RalfJung\n\nprint the target also when running tests on the host\n\nThat makes errors a bit easier to analyze.", "tree": {"sha": "4756beac7c3e7930a3eed975dca9da84a322e33e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4756beac7c3e7930a3eed975dca9da84a322e33e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afca9dc684cec625ea9e960248e0764abcd30a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afca9dc684cec625ea9e960248e0764abcd30a01", "html_url": "https://github.com/rust-lang/rust/commit/afca9dc684cec625ea9e960248e0764abcd30a01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afca9dc684cec625ea9e960248e0764abcd30a01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e5ffd893165caf776a9f3c5ad03c354eae1a418", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5ffd893165caf776a9f3c5ad03c354eae1a418", "html_url": "https://github.com/rust-lang/rust/commit/3e5ffd893165caf776a9f3c5ad03c354eae1a418"}, {"sha": "4dc75324421fa73cb8ff70ca88ca809517fa2859", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc75324421fa73cb8ff70ca88ca809517fa2859", "html_url": "https://github.com/rust-lang/rust/commit/4dc75324421fa73cb8ff70ca88ca809517fa2859"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "143e8f8274a34cb48741b6438649e2ddfd43f38c", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afca9dc684cec625ea9e960248e0764abcd30a01/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/afca9dc684cec625ea9e960248e0764abcd30a01/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=afca9dc684cec625ea9e960248e0764abcd30a01", "patch": "@@ -419,6 +419,7 @@ dependencies = [\n  \"rand\",\n  \"regex\",\n  \"rustc-workspace-hack\",\n+ \"rustc_version\",\n  \"shell-escape\",\n  \"smallvec\",\n  \"ui_test\","}, {"sha": "02485dab74c5b87cc59b7a0c7da96783f8b0502d", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afca9dc684cec625ea9e960248e0764abcd30a01/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/afca9dc684cec625ea9e960248e0764abcd30a01/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=afca9dc684cec625ea9e960248e0764abcd30a01", "patch": "@@ -41,6 +41,7 @@ libloading = \"0.7\"\n [dev-dependencies]\n colored = \"2\"\n ui_test = \"0.3.1\"\n+rustc_version = \"0.4\"\n # Features chosen to match those required by env_logger, to avoid rebuilds\n regex = { version = \"1.5.5\", default-features = false, features = [\"perf\", \"std\"] }\n lazy_static = \"1.4.0\""}, {"sha": "c80ec3625efefbc2939b58bb0a40e7e84a9ad1b9", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/afca9dc684cec625ea9e960248e0764abcd30a01/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afca9dc684cec625ea9e960248e0764abcd30a01/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=afca9dc684cec625ea9e960248e0764abcd30a01", "patch": "@@ -8,6 +8,12 @@ fn miri_path() -> PathBuf {\n     PathBuf::from(option_env!(\"MIRI\").unwrap_or(env!(\"CARGO_BIN_EXE_miri\")))\n }\n \n+fn get_host() -> String {\n+    rustc_version::VersionMeta::for_command(std::process::Command::new(miri_path()))\n+        .expect(\"failed to parse rustc version info\")\n+        .host\n+}\n+\n // Build the shared object file for testing external C function calls.\n fn build_so_for_c_ffi_tests() -> PathBuf {\n     let cc = option_env!(\"CC\").unwrap_or(\"cc\");\n@@ -37,14 +43,9 @@ fn build_so_for_c_ffi_tests() -> PathBuf {\n     so_file_path\n }\n \n-fn run_tests(\n-    mode: Mode,\n-    path: &str,\n-    target: Option<String>,\n-    with_dependencies: bool,\n-) -> Result<()> {\n+fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n     let mut config = Config {\n-        target,\n+        target: Some(target.to_owned()),\n         stderr_filters: STDERR.clone(),\n         stdout_filters: STDOUT.clone(),\n         root_dir: PathBuf::from(path),\n@@ -179,13 +180,8 @@ enum Dependencies {\n \n use Dependencies::*;\n \n-fn ui(mode: Mode, path: &str, with_dependencies: Dependencies) -> Result<()> {\n-    let target = get_target();\n-\n-    let msg = format!(\n-        \"## Running ui tests in {path} against miri for {}\",\n-        target.as_deref().unwrap_or(\"host\")\n-    );\n+fn ui(mode: Mode, path: &str, target: &str, with_dependencies: Dependencies) -> Result<()> {\n+    let msg = format!(\"## Running ui tests in {path} against miri for {target}\");\n     eprintln!(\"{}\", msg.green().bold());\n \n     let with_dependencies = match with_dependencies {\n@@ -195,25 +191,31 @@ fn ui(mode: Mode, path: &str, with_dependencies: Dependencies) -> Result<()> {\n     run_tests(mode, path, target, with_dependencies)\n }\n \n-fn get_target() -> Option<String> {\n-    env::var(\"MIRI_TEST_TARGET\").ok()\n+fn get_target() -> String {\n+    env::var(\"MIRI_TEST_TARGET\").ok().unwrap_or_else(get_host)\n }\n \n fn main() -> Result<()> {\n     ui_test::color_eyre::install()?;\n+    let target = get_target();\n \n     // Add a test env var to do environment communication tests.\n     env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n     // Let the tests know where to store temp files (they might run for a different target, which can make this hard to find).\n     env::set_var(\"MIRI_TEMP\", env::temp_dir());\n \n-    ui(Mode::Pass, \"tests/pass\", WithoutDependencies)?;\n-    ui(Mode::Pass, \"tests/pass-dep\", WithDependencies)?;\n-    ui(Mode::Panic, \"tests/panic\", WithDependencies)?;\n-    ui(Mode::Fail { require_patterns: true }, \"tests/fail\", WithDependencies)?;\n+    ui(Mode::Pass, \"tests/pass\", &target, WithoutDependencies)?;\n+    ui(Mode::Pass, \"tests/pass-dep\", &target, WithDependencies)?;\n+    ui(Mode::Panic, \"tests/panic\", &target, WithDependencies)?;\n+    ui(Mode::Fail { require_patterns: true }, \"tests/fail\", &target, WithDependencies)?;\n     if cfg!(target_os = \"linux\") {\n-        ui(Mode::Pass, \"tests/extern-so/pass\", WithoutDependencies)?;\n-        ui(Mode::Fail { require_patterns: true }, \"tests/extern-so/fail\", WithoutDependencies)?;\n+        ui(Mode::Pass, \"tests/extern-so/pass\", &target, WithoutDependencies)?;\n+        ui(\n+            Mode::Fail { require_patterns: true },\n+            \"tests/extern-so/fail\",\n+            &target,\n+            WithoutDependencies,\n+        )?;\n     }\n \n     Ok(())"}]}