{"sha": "01b6fd3e82f84a504f37597152c39da9929fbfbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYjZmZDNlODJmODRhNTA0ZjM3NTk3MTUyYzM5ZGE5OTI5ZmJmYmY=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-18T14:34:07Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-18T14:34:07Z"}, "message": "Remove examples from trait implementations. Unhide imports.", "tree": {"sha": "82ad5199e065ab29ae17793a1696bf4f051933f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ad5199e065ab29ae17793a1696bf4f051933f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b6fd3e82f84a504f37597152c39da9929fbfbf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b6fd3e82f84a504f37597152c39da9929fbfbf", "html_url": "https://github.com/rust-lang/rust/commit/01b6fd3e82f84a504f37597152c39da9929fbfbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b6fd3e82f84a504f37597152c39da9929fbfbf/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2a02b580d4193a75e4aacdd58e87805437480c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a02b580d4193a75e4aacdd58e87805437480c5", "html_url": "https://github.com/rust-lang/rust/commit/b2a02b580d4193a75e4aacdd58e87805437480c5"}], "stats": {"total": 172, "additions": 18, "deletions": 154}, "files": [{"sha": "14027bc1f544fd868dbd0fd3df90742d36dae616", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 18, "deletions": 154, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/01b6fd3e82f84a504f37597152c39da9929fbfbf/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b6fd3e82f84a504f37597152c39da9929fbfbf/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=01b6fd3e82f84a504f37597152c39da9929fbfbf", "patch": "@@ -1551,7 +1551,7 @@ impl<T: Hash + Eq> HashSet<T, RandomSipHasher> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n     /// let mut set: HashSet<int> = HashSet::new();\n     /// ```\n     #[inline]\n@@ -1565,7 +1565,7 @@ impl<T: Hash + Eq> HashSet<T, RandomSipHasher> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n     /// let mut set: HashSet<int> = HashSet::with_capacity(10);\n     /// ```\n     #[inline]\n@@ -1583,7 +1583,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n     /// use std::hash::sip::SipHasher;\n     ///\n     /// let h = SipHasher::new();\n@@ -1606,7 +1606,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n     /// use std::hash::sip::SipHasher;\n     ///\n     /// let h = SipHasher::new();\n@@ -1623,7 +1623,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n     /// let mut set: HashSet<int> = HashSet::new();\n     /// set.reserve(10);\n     /// ```\n@@ -1641,7 +1641,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// values hash the same, which is why we implement `Hash`.\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n     /// use std::hash::Hash;\n     /// use std::hash::sip::SipState;\n     ///\n@@ -1682,7 +1682,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n+    ///\n     /// let mut set = HashSet::new();\n     /// set.insert(\"a\");\n     /// set.insert(\"b\");\n@@ -1703,7 +1704,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n+    ///\n     /// let mut set = HashSet::new();\n     /// set.insert(\"a\".to_string());\n     /// set.insert(\"b\".to_string());\n@@ -1725,7 +1727,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n+    ///\n     /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n     /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n@@ -1754,7 +1757,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n+    ///\n     /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n     /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n@@ -1779,7 +1783,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n+    ///\n     /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n     /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n@@ -1804,7 +1809,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::collections::HashSet;\n+    /// use std::collections::HashSet;\n+    ///\n     /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n     /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n@@ -1823,22 +1829,6 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n }\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n-    /// Partial equality between sets.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// let b: HashSet<int> = [1i, 2, 3, 4].iter().map(|&x| x).collect();\n-    /// let c: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    ///\n-    /// assert!(a.eq(&c));\n-    ///\n-    /// // eq and ne defines the == and != operators\n-    /// assert!(a == c);\n-    /// assert!(a != b);\n-    /// ```\n     fn eq(&self, other: &HashSet<T, H>) -> bool {\n         if self.len() != other.len() { return false; }\n \n@@ -1849,127 +1839,33 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Eq for HashSet<T, H> {}\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Collection for HashSet<T, H> {\n-    /// Return the number of elements in the set.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let set: HashSet<int> = [1i, 2, 3, 2].iter().map(|&x| x).collect();\n-    /// assert_eq!(set.len(), 3);\n-    /// ```\n     fn len(&self) -> uint { self.map.len() }\n }\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Mutable for HashSet<T, H> {\n-    /// Clear the set. Keeps the allocated memory for reuse.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let mut set: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// set.clear();\n-    /// assert!(set.is_empty());\n-    /// ```\n     fn clear(&mut self) { self.map.clear() }\n }\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Set<T> for HashSet<T, H> {\n-    /// Return true if `value` is contained by the set.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let set: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// assert_eq!(set.contains(&1), true);\n-    /// assert_eq!(set.contains(&4), false);\n-    /// ```\n     fn contains(&self, value: &T) -> bool { self.map.contains_key(value) }\n \n-    /// Return true if the set is disjoint with `other`.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// let mut b: HashSet<int> = HashSet::new();\n-    ///\n-    /// assert_eq!(a.is_disjoint(&b), true);\n-    /// b.insert(4);\n-    /// assert_eq!(a.is_disjoint(&b), true);\n-    /// b.insert(1);\n-    /// assert_eq!(a.is_disjoint(&b), false);\n-    /// ```\n     fn is_disjoint(&self, other: &HashSet<T, H>) -> bool {\n         self.iter().all(|v| !other.contains(v))\n     }\n \n-    /// Return true if the set is a subset of `other`.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let sup: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// let mut set: HashSet<int> = HashSet::new();\n-    ///\n-    /// assert_eq!(set.is_subset(&sup), true);\n-    /// set.insert(2);\n-    /// assert_eq!(set.is_subset(&sup), true);\n-    /// set.insert(4);\n-    /// assert_eq!(set.is_subset(&sup), false);\n-    /// ```\n     fn is_subset(&self, other: &HashSet<T, H>) -> bool {\n         self.iter().all(|v| other.contains(v))\n     }\n }\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S>> MutableSet<T> for HashSet<T, H> {\n-    /// Insert an element.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let mut set = HashSet::new();\n-    /// set.insert(2i);\n-    /// set.insert(2i);\n-    /// assert_eq!(set.len(), 1);\n-    /// ```\n     fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n \n-    /// Remove an element.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let mut set = HashSet::new();\n-    /// set.insert(2i);\n-    ///\n-    /// // Return boolean success flag.\n-    /// assert_eq!(set.remove(&2), true);\n-    /// assert_eq!(set.remove(&2), false);\n-    /// ```\n     fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n }\n \n \n impl<T: Eq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n-    /// Implement the `Show` trait for easy output format. The values in the\n-    /// set must also implement `Show`.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// // Will call .fmt() to print, in some order.\n-    /// println!(\"{}\", a);\n-    /// ```\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n \n@@ -1983,17 +1879,6 @@ impl<T: Eq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n }\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T, H> {\n-    /// Build a set from an external iterator.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let values = vec!(1i, 2, 3);\n-    /// let set: HashSet<int> = values.move_iter().collect();\n-    /// let another_set: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n-    /// assert_eq!(set, another_set);\n-    /// ```\n     fn from_iter<I: Iterator<T>>(iter: I) -> HashSet<T, H> {\n         let (lower, _) = iter.size_hint();\n         let mut set = HashSet::with_capacity_and_hasher(lower, Default::default());\n@@ -2003,18 +1888,6 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T,\n }\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Extendable<T> for HashSet<T, H> {\n-    /// Extend the set with the values yielded by an iterator.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// let values = vec!(1i, 2, 3);\n-    /// let mut set = HashSet::new();\n-    /// set.insert(0i);\n-    /// set.extend(values.move_iter());\n-    /// assert_eq!(set.len(), 4);\n-    /// ```\n     fn extend<I: Iterator<T>>(&mut self, mut iter: I) {\n         for k in iter {\n             self.insert(k);\n@@ -2023,15 +1896,6 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Extendable<T> for HashSet<T, H>\n }\n \n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n-    /// Create a default set.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// # use std::collections::HashSet;\n-    /// use std::default::Default;\n-    /// let mut set: HashSet<int> = Default::default();\n-    /// ```\n     fn default() -> HashSet<T, H> {\n         HashSet::with_hasher(Default::default())\n     }"}]}