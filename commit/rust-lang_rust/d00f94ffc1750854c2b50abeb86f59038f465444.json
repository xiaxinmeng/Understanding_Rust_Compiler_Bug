{"sha": "d00f94ffc1750854c2b50abeb86f59038f465444", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMGY5NGZmYzE3NTA4NTRjMmI1MGFiZWI4NmY1OTAzOGY0NjU0NDQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-17T20:00:12Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-24T18:44:08Z"}, "message": "Remove redundant `descr`/`descriptive_variant` methods from HIR.", "tree": {"sha": "2f5f10b20bd5d97fc81ca7edd78672c6824ac289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f5f10b20bd5d97fc81ca7edd78672c6824ac289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d00f94ffc1750854c2b50abeb86f59038f465444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d00f94ffc1750854c2b50abeb86f59038f465444", "html_url": "https://github.com/rust-lang/rust/commit/d00f94ffc1750854c2b50abeb86f59038f465444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d00f94ffc1750854c2b50abeb86f59038f465444/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18be5a08a2cadefe28cdc9e635f3534b0d615b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/18be5a08a2cadefe28cdc9e635f3534b0d615b03", "html_url": "https://github.com/rust-lang/rust/commit/18be5a08a2cadefe28cdc9e635f3534b0d615b03"}], "stats": {"total": 115, "additions": 34, "deletions": 81}, "files": [{"sha": "d342f8b0ad21c3d601b4470316bbf82be44252e8", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -2452,27 +2452,6 @@ pub enum ItemKind<'hir> {\n }\n \n impl ItemKind<'_> {\n-    pub fn descr(&self) -> &str {\n-        match *self {\n-            ItemKind::ExternCrate(..) => \"extern crate\",\n-            ItemKind::Use(..) => \"`use` import\",\n-            ItemKind::Static(..) => \"static item\",\n-            ItemKind::Const(..) => \"constant item\",\n-            ItemKind::Fn(..) => \"function\",\n-            ItemKind::Mod(..) => \"module\",\n-            ItemKind::ForeignMod(..) => \"extern block\",\n-            ItemKind::GlobalAsm(..) => \"global asm item\",\n-            ItemKind::TyAlias(..) => \"type alias\",\n-            ItemKind::OpaqueTy(..) => \"opaque type\",\n-            ItemKind::Enum(..) => \"enum\",\n-            ItemKind::Struct(..) => \"struct\",\n-            ItemKind::Union(..) => \"union\",\n-            ItemKind::Trait(..) => \"trait\",\n-            ItemKind::TraitAlias(..) => \"trait alias\",\n-            ItemKind::Impl { .. } => \"implementation\",\n-        }\n-    }\n-\n     pub fn generics(&self) -> Option<&Generics<'_>> {\n         Some(match *self {\n             ItemKind::Fn(_, ref generics, _)\n@@ -2551,16 +2530,6 @@ pub enum ForeignItemKind<'hir> {\n     Type,\n }\n \n-impl ForeignItemKind<'hir> {\n-    pub fn descriptive_variant(&self) -> &str {\n-        match *self {\n-            ForeignItemKind::Fn(..) => \"foreign function\",\n-            ForeignItemKind::Static(..) => \"foreign static item\",\n-            ForeignItemKind::Type => \"foreign type\",\n-        }\n-    }\n-}\n-\n /// A variable captured by a closure.\n #[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Upvar {"}, {"sha": "61a9e7d907c95acd756a47ff0acbf70f144cc5c1", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -553,12 +553,13 @@ impl DeadVisitor<'tcx> {\n         id: hir::HirId,\n         span: rustc_span::Span,\n         name: ast::Name,\n-        node_type: &str,\n         participle: &str,\n     ) {\n         if !name.as_str().starts_with('_') {\n             self.tcx.struct_span_lint_hir(lint::builtin::DEAD_CODE, id, span, |lint| {\n-                lint.build(&format!(\"{} is never {}: `{}`\", node_type, participle, name)).emit()\n+                let def_id = self.tcx.hir().local_def_id(id);\n+                let descr = self.tcx.def_kind(def_id).descr(def_id);\n+                lint.build(&format!(\"{} is never {}: `{}`\", descr, participle, name)).emit()\n             });\n         }\n     }\n@@ -604,7 +605,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                 hir::ItemKind::Struct(..) => \"constructed\", // Issue #52325\n                 _ => \"used\",\n             };\n-            self.warn_dead_code(item.hir_id, span, item.ident.name, item.kind.descr(), participle);\n+            self.warn_dead_code(item.hir_id, span, item.ident.name, participle);\n         } else {\n             // Only continue if we didn't warn\n             intravisit::walk_item(self, item);\n@@ -618,34 +619,22 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n         id: hir::HirId,\n     ) {\n         if self.should_warn_about_variant(&variant) {\n-            self.warn_dead_code(\n-                variant.id,\n-                variant.span,\n-                variant.ident.name,\n-                \"variant\",\n-                \"constructed\",\n-            );\n+            self.warn_dead_code(variant.id, variant.span, variant.ident.name, \"constructed\");\n         } else {\n             intravisit::walk_variant(self, variant, g, id);\n         }\n     }\n \n     fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem<'tcx>) {\n         if self.should_warn_about_foreign_item(fi) {\n-            self.warn_dead_code(\n-                fi.hir_id,\n-                fi.span,\n-                fi.ident.name,\n-                fi.kind.descriptive_variant(),\n-                \"used\",\n-            );\n+            self.warn_dead_code(fi.hir_id, fi.span, fi.ident.name, \"used\");\n         }\n         intravisit::walk_foreign_item(self, fi);\n     }\n \n     fn visit_struct_field(&mut self, field: &'tcx hir::StructField<'tcx>) {\n         if self.should_warn_about_field(&field) {\n-            self.warn_dead_code(field.hir_id, field.span, field.ident.name, \"field\", \"read\");\n+            self.warn_dead_code(field.hir_id, field.span, field.ident.name, \"read\");\n         }\n         intravisit::walk_struct_field(self, field);\n     }\n@@ -658,7 +647,6 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                         impl_item.hir_id,\n                         impl_item.span,\n                         impl_item.ident.name,\n-                        \"associated const\",\n                         \"used\",\n                     );\n                 }\n@@ -667,13 +655,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n             hir::ImplItemKind::Fn(_, body_id) => {\n                 if !self.symbol_is_live(impl_item.hir_id) {\n                     let span = self.tcx.sess.source_map().guess_head_span(impl_item.span);\n-                    self.warn_dead_code(\n-                        impl_item.hir_id,\n-                        span,\n-                        impl_item.ident.name,\n-                        \"method\",\n-                        \"used\",\n-                    );\n+                    self.warn_dead_code(impl_item.hir_id, span, impl_item.ident.name, \"used\");\n                 }\n                 self.visit_nested_body(body_id)\n             }"}, {"sha": "167590d64c947856d3c4e1be2d59720bf0328bd9", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -337,12 +337,14 @@ struct MissingStabilityAnnotations<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MissingStabilityAnnotations<'a, 'tcx> {\n-    fn check_missing_stability(&self, hir_id: HirId, span: Span, name: &str) {\n+    fn check_missing_stability(&self, hir_id: HirId, span: Span) {\n         let stab = self.tcx.stability().local_stability(hir_id);\n         let is_error =\n             !self.tcx.sess.opts.test && stab.is_none() && self.access_levels.is_reachable(hir_id);\n         if is_error {\n-            self.tcx.sess.span_err(span, &format!(\"{} has missing stability attribute\", name));\n+            let def_id = self.tcx.hir().local_def_id(hir_id);\n+            let descr = self.tcx.def_kind(def_id).descr(def_id);\n+            self.tcx.sess.span_err(span, &format!(\"{} has missing stability attribute\", descr));\n         }\n     }\n }\n@@ -362,42 +364,42 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n             // optional. They inherit stability from their parents when unannotated.\n             hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..) => {}\n \n-            _ => self.check_missing_stability(i.hir_id, i.span, i.kind.descr()),\n+            _ => self.check_missing_stability(i.hir_id, i.span),\n         }\n \n         intravisit::walk_item(self, i)\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n-        self.check_missing_stability(ti.hir_id, ti.span, \"item\");\n+        self.check_missing_stability(ti.hir_id, ti.span);\n         intravisit::walk_trait_item(self, ti);\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let impl_def_id = self.tcx.hir().local_def_id(self.tcx.hir().get_parent_item(ii.hir_id));\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n-            self.check_missing_stability(ii.hir_id, ii.span, \"item\");\n+            self.check_missing_stability(ii.hir_id, ii.span);\n         }\n         intravisit::walk_impl_item(self, ii);\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n-        self.check_missing_stability(var.id, var.span, \"variant\");\n+        self.check_missing_stability(var.id, var.span);\n         intravisit::walk_variant(self, var, g, item_id);\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n-        self.check_missing_stability(s.hir_id, s.span, \"field\");\n+        self.check_missing_stability(s.hir_id, s.span);\n         intravisit::walk_struct_field(self, s);\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n-        self.check_missing_stability(i.hir_id, i.span, i.kind.descriptive_variant());\n+        self.check_missing_stability(i.hir_id, i.span);\n         intravisit::walk_foreign_item(self, i);\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        self.check_missing_stability(md.hir_id, md.span, \"macro\");\n+        self.check_missing_stability(md.hir_id, md.span);\n     }\n }\n \n@@ -585,7 +587,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n-        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.item.span, \"crate\");\n+        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.item.span);\n         intravisit::walk_crate(&mut missing, krate);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }"}, {"sha": "e659bdb83f9c1886ea471fbd28d725909d0e6c85", "filename": "src/test/ui/associated-const/associated-const-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.rs?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -4,7 +4,7 @@ struct MyFoo;\n \n impl MyFoo {\n     const BAR: u32 = 1;\n-    //~^ ERROR associated const is never used: `BAR`\n+    //~^ ERROR associated constant is never used: `BAR`\n }\n \n fn main() {"}, {"sha": "9b6bbb68a71f770d6d8fb978b1e3bcb6621d7c84", "filename": "src/test/ui/associated-const/associated-const-dead-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-dead-code.stderr?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -1,4 +1,4 @@\n-error: associated const is never used: `BAR`\n+error: associated constant is never used: `BAR`\n   --> $DIR/associated-const-dead-code.rs:6:5\n    |\n LL |     const BAR: u32 = 1;"}, {"sha": "7386478f9f08c83970236cac22dac15390dfdc54", "filename": "src/test/ui/issues/issue-17718-const-naming.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.rs?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -3,6 +3,6 @@\n \n const foo: isize = 3;\n //~^ ERROR: should have an upper case name\n-//~^^ ERROR: constant item is never used\n+//~^^ ERROR: constant is never used\n \n fn main() {}"}, {"sha": "ce4ebcb5e3ef692431f66a03f790372d742cd939", "filename": "src/test/ui/issues/issue-17718-const-naming.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -1,4 +1,4 @@\n-error: constant item is never used: `foo`\n+error: constant is never used: `foo`\n   --> $DIR/issue-17718-const-naming.rs:4:1\n    |\n LL | const foo: isize = 3;"}, {"sha": "896147fcc7738caa3e39614e4a31cc8cee592408", "filename": "src/test/ui/lint/dead-code/lint-dead-code-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.rs?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -17,14 +17,14 @@ mod foo2 {\n }\n \n pub static pub_static: isize = 0;\n-static priv_static: isize = 0; //~ ERROR: static item is never used\n+static priv_static: isize = 0; //~ ERROR: static is never used\n const used_static: isize = 0;\n pub static used_static2: isize = used_static;\n const USED_STATIC: isize = 0;\n const STATIC_USED_IN_ENUM_DISCRIMINANT: isize = 10;\n \n pub const pub_const: isize = 0;\n-const priv_const: isize = 0; //~ ERROR: constant item is never used\n+const priv_const: isize = 0; //~ ERROR: constant is never used\n const used_const: isize = 0;\n pub const used_const2: isize = used_const;\n const USED_CONST: isize = 1;"}, {"sha": "af97ea98b2b6d0a595308333c8330c78974298e8", "filename": "src/test/ui/lint/dead-code/lint-dead-code-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-1.stderr?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -10,13 +10,13 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: static item is never used: `priv_static`\n+error: static is never used: `priv_static`\n   --> $DIR/lint-dead-code-1.rs:20:1\n    |\n LL | static priv_static: isize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: constant item is never used: `priv_const`\n+error: constant is never used: `priv_const`\n   --> $DIR/lint-dead-code-1.rs:27:1\n    |\n LL | const priv_const: isize = 0;"}, {"sha": "6826d2cd67eb9489f251b21038e0c15e6dd1fa1d", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -12,7 +12,7 @@ extern {\n \n struct Foo; //~ ERROR: struct is never constructed\n impl Foo {\n-    fn foo(&self) { //~ ERROR: method is never used\n+    fn foo(&self) { //~ ERROR: associated function is never used\n         bar()\n     }\n }\n@@ -58,7 +58,7 @@ mod blah {\n \n enum c_void {} //~ ERROR: enum is never used\n extern {\n-    fn free(p: *const c_void); //~ ERROR: foreign function is never used\n+    fn free(p: *const c_void); //~ ERROR: function is never used\n }\n \n // Check provided method"}, {"sha": "a2614a0bf74b318fef357975129d8ca93c53caaf", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: method is never used: `foo`\n+error: associated function is never used: `foo`\n   --> $DIR/lint-dead-code-3.rs:15:5\n    |\n LL |     fn foo(&self) {\n@@ -28,7 +28,7 @@ error: enum is never used: `c_void`\n LL | enum c_void {}\n    |      ^^^^^^\n \n-error: foreign function is never used: `free`\n+error: function is never used: `free`\n   --> $DIR/lint-dead-code-3.rs:61:5\n    |\n LL |     fn free(p: *const c_void);"}, {"sha": "38faa24691604331294d0b020e3c1d3db0b4fe86", "filename": "src/test/ui/stability-attribute/missing-stability-attr-at-top-level.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-stability-attr-at-top-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-stability-attr-at-top-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-stability-attr-at-top-level.rs?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -1,4 +1,4 @@\n #![feature(staged_api)]\n-//~^ ERROR crate has missing stability attribute\n+//~^ ERROR module has missing stability attribute\n \n fn main() {}"}, {"sha": "c7ade234d3dccb072aeadf0c3a3b661f83c5b23a", "filename": "src/test/ui/stability-attribute/missing-stability-attr-at-top-level.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-stability-attr-at-top-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d00f94ffc1750854c2b50abeb86f59038f465444/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-stability-attr-at-top-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-stability-attr-at-top-level.stderr?ref=d00f94ffc1750854c2b50abeb86f59038f465444", "patch": "@@ -1,4 +1,4 @@\n-error: crate has missing stability attribute\n+error: module has missing stability attribute\n   --> $DIR/missing-stability-attr-at-top-level.rs:1:1\n    |\n LL | / #![feature(staged_api)]"}]}