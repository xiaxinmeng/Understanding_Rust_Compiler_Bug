{"sha": "89e2578a9d1cd18270b7148a5d5d6b8bee051ac5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZTI1NzhhOWQxY2QxODI3MGI3MTQ4YTVkNWQ2YjhiZWUwNTFhYzU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-25T00:30:35Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-25T00:30:35Z"}, "message": "trie: add find_mut method", "tree": {"sha": "6ab22eb46606e4989b738d38ecd17268b97575e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ab22eb46606e4989b738d38ecd17268b97575e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e2578a9d1cd18270b7148a5d5d6b8bee051ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e2578a9d1cd18270b7148a5d5d6b8bee051ac5", "html_url": "https://github.com/rust-lang/rust/commit/89e2578a9d1cd18270b7148a5d5d6b8bee051ac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e2578a9d1cd18270b7148a5d5d6b8bee051ac5/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77433386be3d5afa201cfd40dbaaa4d20dbbd80", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77433386be3d5afa201cfd40dbaaa4d20dbbd80", "html_url": "https://github.com/rust-lang/rust/commit/d77433386be3d5afa201cfd40dbaaa4d20dbbd80"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "007bafcd03d965c3140b3dfb8d460c50db87de14", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/89e2578a9d1cd18270b7148a5d5d6b8bee051ac5/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e2578a9d1cd18270b7148a5d5d6b8bee051ac5/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=89e2578a9d1cd18270b7148a5d5d6b8bee051ac5", "patch": "@@ -90,7 +90,7 @@ impl<T> Map<uint, T> for TrieMap<T> {\n         self.root.mutate_values(f);\n     }\n \n-    /// Return the value corresponding to the key in the map\n+    /// Return a reference to the value corresponding to the key\n     #[inline(hint)]\n     fn find(&self, key: &uint) -> Option<&'self T> {\n         let mut node: &'self TrieNode<T> = &self.root;\n@@ -153,6 +153,12 @@ pub impl<T> TrieMap<T> {\n     fn each_value_reverse(&self, f: &fn(&T) -> bool) {\n         self.each_reverse(|&(_, v)| f(v))\n     }\n+\n+    /// Return a mutable reference to the value corresponding to the key\n+    #[inline(always)]\n+    fn find_mut(&mut self, key: &uint) -> Option<&'self mut T> {\n+        find_mut(&mut self.root.children[chunk(*key, 0)], *key, 1)\n+    }\n }\n \n pub struct TrieSet {\n@@ -276,6 +282,17 @@ fn chunk(n: uint, idx: uint) -> uint {\n     (n >> sh) & MASK\n }\n \n+fn find_mut<T>(child: &'r mut Child<T>, key: uint, idx: uint) -> Option<&'r mut T> {\n+    unsafe { // FIXME(#4903)---requires flow-sensitive borrow checker\n+        (match *child {\n+            External(_, ref value) => Some(cast::transmute_mut(value)),\n+            Internal(ref x) => find_mut(cast::transmute_mut(&x.children[chunk(key, idx)]),\n+                                        key, idx + 1),\n+            Nothing => None\n+        }).map_consume(|x| cast::transmute_mut_region(x))\n+    }\n+}\n+\n fn insert<T>(count: &mut uint, child: &mut Child<T>, key: uint, value: T,\n              idx: uint) -> bool {\n     let mut tmp = Nothing;\n@@ -357,8 +374,22 @@ pub fn check_integrity<T>(trie: &TrieNode<T>) {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use core::option::{Some, None};\n     use uint;\n \n+    #[test]\n+    fn test_find_mut() {\n+        let mut m = TrieMap::new();\n+        fail_unless!(m.insert(1, 12));\n+        fail_unless!(m.insert(2, 8));\n+        fail_unless!(m.insert(5, 14));\n+        let new = 100;\n+        match m.find_mut(&5) {\n+            None => fail!(), Some(x) => *x = new\n+        }\n+        assert_eq!(m.find(&5), Some(&new));\n+    }\n+\n     #[test]\n     fn test_step() {\n         let mut trie = TrieMap::new();"}]}