{"sha": "e9c0283369bbb9879e0be2440d77f23d806b5537", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YzAyODMzNjliYmI5ODc5ZTBiZTI0NDBkNzdmMjNkODA2YjU1Mzc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-24T06:12:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-24T11:48:00Z"}, "message": "Add comments and fix a nit", "tree": {"sha": "9162e371db6c47669b5f2553b9e7ea365f3c9ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9162e371db6c47669b5f2553b9e7ea365f3c9ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c0283369bbb9879e0be2440d77f23d806b5537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c0283369bbb9879e0be2440d77f23d806b5537", "html_url": "https://github.com/rust-lang/rust/commit/e9c0283369bbb9879e0be2440d77f23d806b5537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c0283369bbb9879e0be2440d77f23d806b5537/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c421ac67ef55541de73689f2f6bbabd7ddb0a9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c421ac67ef55541de73689f2f6bbabd7ddb0a9a", "html_url": "https://github.com/rust-lang/rust/commit/3c421ac67ef55541de73689f2f6bbabd7ddb0a9a"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "596faac35882af13748a8dcf04fc7c7467184b6f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9c0283369bbb9879e0be2440d77f23d806b5537/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c0283369bbb9879e0be2440d77f23d806b5537/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e9c0283369bbb9879e0be2440d77f23d806b5537", "patch": "@@ -35,10 +35,18 @@ use std_inject;\n use std::collections::HashSet;\n use std::env;\n \n+// A trait for AST nodes and AST node lists into which macro invocations may expand.\n trait MacroGenerable: Sized {\n+    // Expand the given MacResult using its appropriate `make_*` method.\n     fn make_with<'a>(result: Box<MacResult + 'a>) -> Option<Self>;\n+\n+    // Fold this node or list of nodes using the given folder.\n     fn fold_with<F: Folder>(self, folder: &mut F) -> Self;\n+\n+    // Return a placeholder expansion to allow compilation to continue after an erroring expansion.\n     fn dummy(span: Span) -> Self;\n+\n+    // The user-friendly name of the node type (e.g. \"expression\", \"item\", etc.) for diagnostics.\n     fn kind_name() -> &'static str;\n }\n \n@@ -207,7 +215,7 @@ fn expand_mac_invoc<T>(mac: ast::Mac, ident: Option<Ident>, attrs: Vec<ast::Attr\n             return None;\n         };\n \n-        let ident = ident.unwrap_or(Ident::with_empty_ctxt(keywords::Invalid.name()));\n+        let ident = ident.unwrap_or(keywords::Invalid.ident());\n         match *extension {\n             NormalTT(ref expandfun, exp_span, allow_internal_unstable) => {\n                 if ident.name != keywords::Invalid.name() {"}]}