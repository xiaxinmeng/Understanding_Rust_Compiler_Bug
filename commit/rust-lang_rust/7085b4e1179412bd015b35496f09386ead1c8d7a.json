{"sha": "7085b4e1179412bd015b35496f09386ead1c8d7a", "node_id": "C_kwDOAAsO6NoAKDcwODViNGUxMTc5NDEyYmQwMTViMzU0OTZmMDkzODZlYWQxYzhkN2E", "commit": {"author": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2021-12-14T04:33:53Z"}, "committer": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2021-12-14T04:33:53Z"}, "message": "Remove `in_band_lifetimes` from `rustc_hir`", "tree": {"sha": "ae1d3816c80c8efb1b6aa2aa671ed82db5a5d632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1d3816c80c8efb1b6aa2aa671ed82db5a5d632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7085b4e1179412bd015b35496f09386ead1c8d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7085b4e1179412bd015b35496f09386ead1c8d7a", "html_url": "https://github.com/rust-lang/rust/commit/7085b4e1179412bd015b35496f09386ead1c8d7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7085b4e1179412bd015b35496f09386ead1c8d7a/comments", "author": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f117a77d0880ed59afcc1a19c72ec5c1e44b97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f117a77d0880ed59afcc1a19c72ec5c1e44b97c", "html_url": "https://github.com/rust-lang/rust/commit/8f117a77d0880ed59afcc1a19c72ec5c1e44b97c"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "1807bd3654fccf196beb7b439dea15c3e5bb03b4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7085b4e1179412bd015b35496f09386ead1c8d7a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7085b4e1179412bd015b35496f09386ead1c8d7a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7085b4e1179412bd015b35496f09386ead1c8d7a", "patch": "@@ -522,7 +522,7 @@ pub struct GenericParam<'hir> {\n     pub kind: GenericParamKind<'hir>,\n }\n \n-impl GenericParam<'hir> {\n+impl<'hir> GenericParam<'hir> {\n     pub fn bounds_span_for_suggestions(&self) -> Option<Span> {\n         self.bounds\n             .iter()\n@@ -557,7 +557,7 @@ pub struct Generics<'hir> {\n     pub span: Span,\n }\n \n-impl Generics<'hir> {\n+impl<'hir> Generics<'hir> {\n     pub const fn empty() -> Generics<'hir> {\n         Generics {\n             params: &[],\n@@ -622,7 +622,7 @@ pub enum WherePredicate<'hir> {\n     EqPredicate(WhereEqPredicate<'hir>),\n }\n \n-impl WherePredicate<'_> {\n+impl<'hir> WherePredicate<'hir> {\n     pub fn span(&self) -> Span {\n         match self {\n             WherePredicate::BoundPredicate(p) => p.span,\n@@ -644,7 +644,7 @@ pub struct WhereBoundPredicate<'hir> {\n     pub bounds: GenericBounds<'hir>,\n }\n \n-impl WhereBoundPredicate<'hir> {\n+impl<'hir> WhereBoundPredicate<'hir> {\n     /// Returns `true` if `param_def_id` matches the `bounded_ty` of this predicate.\n     pub fn is_param_bound(&self, param_def_id: DefId) -> bool {\n         let path = match self.bounded_ty.kind {\n@@ -1236,7 +1236,7 @@ pub struct Body<'hir> {\n     pub generator_kind: Option<GeneratorKind>,\n }\n \n-impl Body<'hir> {\n+impl<'hir> Body<'hir> {\n     pub fn id(&self) -> BodyId {\n         BodyId { hir_id: self.value.hir_id }\n     }\n@@ -2623,7 +2623,7 @@ pub enum VariantData<'hir> {\n     Unit(HirId),\n }\n \n-impl VariantData<'hir> {\n+impl<'hir> VariantData<'hir> {\n     /// Return the fields of this variant.\n     pub fn fields(&self) -> &'hir [FieldDef<'hir>] {\n         match *self {"}, {"sha": "a2f1db3579a8e05261c627c2dc62c12668e43fa0", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7085b4e1179412bd015b35496f09386ead1c8d7a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7085b4e1179412bd015b35496f09386ead1c8d7a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=7085b4e1179412bd015b35496f09386ead1c8d7a", "patch": "@@ -139,7 +139,7 @@ pub trait Map<'hir> {\n }\n \n // Used when no map is actually available, forcing manual implementation of nested visitors.\n-impl Map<'hir> for ! {\n+impl<'hir> Map<'hir> for ! {\n     fn find(&self, _: HirId) -> Option<Node<'hir>> {\n         unreachable!()\n     }"}, {"sha": "1df9b5f9c78a95b66d070d4f76a2c987f8fad802", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7085b4e1179412bd015b35496f09386ead1c8d7a/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7085b4e1179412bd015b35496f09386ead1c8d7a/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=7085b4e1179412bd015b35496f09386ead1c8d7a", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(const_btree_new)]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "c8d729a999e831e15cb21a625c9a8d32d3c1bb70", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7085b4e1179412bd015b35496f09386ead1c8d7a/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7085b4e1179412bd015b35496f09386ead1c8d7a/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=7085b4e1179412bd015b35496f09386ead1c8d7a", "patch": "@@ -211,7 +211,7 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Item<'_> {\n     }\n }\n \n-impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for OwnerNodes<'tcx> {\n+impl<'tcx, HirCtx: crate::HashStableContext> HashStable<HirCtx> for OwnerNodes<'tcx> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         // We ignore the `nodes` and `bodies` fields since these refer to information included in\n         // `hash` which is hashed in the collector and used for the crate hash.\n@@ -221,7 +221,7 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for OwnerNodes<'tcx> {\n     }\n }\n \n-impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for AttributeMap<'tcx> {\n+impl<'tcx, HirCtx: crate::HashStableContext> HashStable<HirCtx> for AttributeMap<'tcx> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         // We ignore the `map` since it refers to information included in `hash` which is hashed in\n         // the collector and used for the crate hash."}]}