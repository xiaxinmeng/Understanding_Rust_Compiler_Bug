{"sha": "0db928078396da36c1d2a0601126b3d455750eb8", "node_id": "C_kwDOAAsO6NoAKDBkYjkyODA3ODM5NmRhMzZjMWQyYTA2MDExMjZiM2Q0NTU3NTBlYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T14:48:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T14:48:32Z"}, "message": "Auto merge of #9159 - alex-semenyuk:fix_typos, r=dswij\n\nFix typos\n\nchangelog: none", "tree": {"sha": "58c6f8f36aa20c0f3538dc33c7688ac3004f2323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58c6f8f36aa20c0f3538dc33c7688ac3004f2323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db928078396da36c1d2a0601126b3d455750eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db928078396da36c1d2a0601126b3d455750eb8", "html_url": "https://github.com/rust-lang/rust/commit/0db928078396da36c1d2a0601126b3d455750eb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db928078396da36c1d2a0601126b3d455750eb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e", "html_url": "https://github.com/rust-lang/rust/commit/44be2d4b0e460e1ca7d9e337a7cb378a74aaa52e"}, {"sha": "0930ac91b9109e9ebc31ebe70620a2ec0fe08b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/0930ac91b9109e9ebc31ebe70620a2ec0fe08b57", "html_url": "https://github.com/rust-lang/rust/commit/0930ac91b9109e9ebc31ebe70620a2ec0fe08b57"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "201929ec11c3d22c9c6c2f747da060a7e2078890", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -364,7 +364,7 @@ Released 2022-04-07\n \n * [`needless_borrow`]: Prevent mutable borrows being moved and suggest removing the borrow on method calls\n   [#8217](https://github.com/rust-lang/rust-clippy/pull/8217)\n-* [`chars_next_cmp`]: Correctly excapes the suggestion\n+* [`chars_next_cmp`]: Correctly escapes the suggestion\n   [#8376](https://github.com/rust-lang/rust-clippy/pull/8376)\n * [`explicit_write`]: Add suggestions for `write!`s with format arguments\n   [#8365](https://github.com/rust-lang/rust-clippy/pull/8365)\n@@ -2525,7 +2525,7 @@ Released 2019-09-26\n   * [`inherent_to_string_shadow_display`] [#4259](https://github.com/rust-lang/rust-clippy/pull/4259)\n   * [`type_repetition_in_bounds`] [#3766](https://github.com/rust-lang/rust-clippy/pull/3766)\n   * [`try_err`] [#4222](https://github.com/rust-lang/rust-clippy/pull/4222)\n-* Move `{unnnecessary,panicking}_unwrap` out of nursery [#4307](https://github.com/rust-lang/rust-clippy/pull/4307)\n+* Move `{unnecessary,panicking}_unwrap` out of nursery [#4307](https://github.com/rust-lang/rust-clippy/pull/4307)\n * Extend the `use_self` lint to suggest uses of `Self::Variant` [#4308](https://github.com/rust-lang/rust-clippy/pull/4308)\n * Improve suggestion for needless return [#4262](https://github.com/rust-lang/rust-clippy/pull/4262)\n * Add auto-fixable suggestion for `let_unit` [#4337](https://github.com/rust-lang/rust-clippy/pull/4337)"}, {"sha": "f03967d88bc14712181b06f27c4306d2171eb5e4", "filename": "book/src/usage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/book%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/book%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fusage.md?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -56,7 +56,7 @@ For more information on configuring lint levels, see the [rustc documentation].\n Clippy has lint groups which are allow-by-default. This means, that you will\n have to enable the lints in those groups manually.\n \n-For a full list of all lints with their description and examples, please refere\n+For a full list of all lints with their description and examples, please refer\n to [Clippy's lint list]. The two most important allow-by-default groups are\n described below:\n "}, {"sha": "937765b66147912aa6c9172a2b61b4369f91cbec", "filename": "clippy_lints/src/borrow_deref_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -22,7 +22,7 @@ declare_clippy_lint! {\n     /// ```\n     /// let x = &12;\n     /// let addr_x = &x as *const _ as usize;\n-    /// let addr_y = &&*x as *const _ as usize; // assert ok now, and lint triggerd.\n+    /// let addr_y = &&*x as *const _ as usize; // assert ok now, and lint triggered.\n     ///                                         // But if we fix it, assert will fail.\n     /// assert_ne!(addr_x, addr_y);\n     /// ```"}, {"sha": "c58df126d62442a056d63437518699c3d189012c", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -30,7 +30,7 @@ declare_clippy_lint! {\n     /// For types that implement `Copy`, the suggestion to `Box` a variant's\n     /// data would require removing the trait impl. The types can of course\n     /// still be `Clone`, but that is worse ergonomically. Depending on the\n-    /// use case it may be possible to store the large data in an auxillary\n+    /// use case it may be possible to store the large data in an auxiliary\n     /// structure (e.g. Arena or ECS).\n     ///\n     /// The lint will ignore generic types if the layout depends on the"}, {"sha": "215c83a7edf6e9f91d86ecc5ce962894ad71ffa6", "filename": "clippy_lints/src/loops/manual_find.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Floops%2Fmanual_find.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Floops%2Fmanual_find.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_find.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -139,7 +139,7 @@ fn last_stmt_and_ret<'tcx>(\n     if_chain! {\n         // This should be the loop\n         if let Some((node_hir, Node::Stmt(..))) = parent_iter.next();\n-        // This should be the funciton body\n+        // This should be the function body\n         if let Some((_, Node::Block(block))) = parent_iter.next();\n         if let Some((last_stmt, last_ret)) = extract(block);\n         if last_stmt.hir_id == node_hir;"}, {"sha": "582782f245fcc5382ef06a3695b4d73c0316f579", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -365,7 +365,7 @@ impl<'a> NormalizedPat<'a> {\n             (Self::Slice(pats, None), Self::Slice(front, Some(back)))\n             | (Self::Slice(front, Some(back)), Self::Slice(pats, None)) => {\n                 // Here `pats` is an exact size match. If the combined lengths of `front` and `back` are greater\n-                // then the minium length required will be greater than the length of `pats`.\n+                // then the minimum length required will be greater than the length of `pats`.\n                 if pats.len() < front.len() + back.len() {\n                     return false;\n                 }"}, {"sha": "254d9a70010a8e0ab10556f5b8ef322e46299205", "filename": "clippy_lints/src/mismatching_type_param_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -9,7 +9,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for type parameters which are positioned inconsistently between\n-    /// a type definition and impl block. Specifically, a paramater in an impl\n+    /// a type definition and impl block. Specifically, a parameter in an impl\n     /// block which has the same name as a parameter in the type def, but is in\n     /// a different place.\n     ///"}, {"sha": "aaeca47677d2b9a81fa29c65b18aa12d8a64c027", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -1018,7 +1018,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for LintResolver<'a, 'hir> {\n /// This visitor finds the highest applicability value in the visited expressions\n struct ApplicabilityResolver<'a, 'hir> {\n     cx: &'a LateContext<'hir>,\n-    /// This is the index of hightest `Applicability` for `paths::APPLICABILITY_VALUES`\n+    /// This is the index of highest `Applicability` for `paths::APPLICABILITY_VALUES`\n     applicability_index: Option<usize>,\n }\n "}, {"sha": "bae8ad9f5659067030d39315aa3276d68a4910a5", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -30,7 +30,7 @@ impl Continue for () {\n     }\n }\n \n-/// Allows for controlled descent whe using visitor functions. Use `()` instead when always\n+/// Allows for controlled descent when using visitor functions. Use `()` instead when always\n /// descending into child nodes.\n #[derive(Clone, Copy)]\n pub enum Descend {"}, {"sha": "6cbfafbb38b9913e7ec71de26f6206fce73ae1cf", "filename": "tests/ui/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_mutex.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -27,7 +27,7 @@ fn if_let_option() {\n     };\n }\n \n-// When mutexs are different don't warn\n+// When mutexes are different don't warn\n fn if_let_different_mutex() {\n     let m = Mutex::new(Some(0_u8));\n     let other = Mutex::new(None::<u8>);"}, {"sha": "74ba2f1c5e70bd09c67e02c39d2c52a076bc8164", "filename": "tests/ui/inconsistent_struct_constructor.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Finconsistent_struct_constructor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Finconsistent_struct_constructor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.fixed?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -36,7 +36,7 @@ mod without_base {\n         // issue #7069.\n         new_foo!();\n \n-        // Shoule NOT lint because the order is the same as in the definition.\n+        // Should NOT lint because the order is the same as in the definition.\n         Foo { x, y, z };\n \n         // Should NOT lint because z is not a shorthand init."}, {"sha": "ba96e1e330f5fc62f3e408036a3897d2d6d28a24", "filename": "tests/ui/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -36,7 +36,7 @@ mod without_base {\n         // issue #7069.\n         new_foo!();\n \n-        // Shoule NOT lint because the order is the same as in the definition.\n+        // Should NOT lint because the order is the same as in the definition.\n         Foo { x, y, z };\n \n         // Should NOT lint because z is not a shorthand init."}, {"sha": "312819a0a2cf83d567307d788cb5e8c72394561b", "filename": "tests/ui/map_flatten_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fmap_flatten_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fmap_flatten_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.fixed?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -58,7 +58,7 @@ fn issue8878() {\n         .and_then(|_| {\n // we need some newlines\n // so that the span is big enough\n-// for a splitted output of the diagnostic\n+// for a split output of the diagnostic\n             Some(\"\")\n  // whitespace beforehand is important as well\n         });"}, {"sha": "3fbf4f9a1b044b8c5621a2f73c8ffd7bd39deb84", "filename": "tests/ui/map_flatten_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fmap_flatten_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fmap_flatten_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -59,7 +59,7 @@ fn issue8878() {\n         .map(|_| {\n // we need some newlines\n // so that the span is big enough\n-// for a splitted output of the diagnostic\n+// for a split output of the diagnostic\n             Some(\"\")\n  // whitespace beforehand is important as well\n         })"}, {"sha": "c91f0b9ae94fec2626997de308d60c006d6ffaa4", "filename": "tests/ui/map_flatten_fixable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fmap_flatten_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fmap_flatten_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.stderr?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -78,7 +78,7 @@ LL |           .map(|_| {\n    |  __________^\n LL | | // we need some newlines\n LL | | // so that the span is big enough\n-LL | | // for a splitted output of the diagnostic\n+LL | | // for a split output of the diagnostic\n ...  |\n LL | |         })\n LL | |         .flatten();\n@@ -89,7 +89,7 @@ help: try replacing `map` with `and_then` and remove the `.flatten()`\n LL ~         .and_then(|_| {\n LL + // we need some newlines\n LL + // so that the span is big enough\n-LL + // for a splitted output of the diagnostic\n+LL + // for a split output of the diagnostic\n LL +             Some(\"\")\n LL +  // whitespace beforehand is important as well\n LL ~         });"}, {"sha": "daef95a425c92b564e6a202bca3be4b3d5a80193", "filename": "tests/ui/same_name_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -62,7 +62,7 @@ mod should_lint {\n         impl T1 for S {}\n     }\n \n-    mod mulitply_conflicit_trait {\n+    mod multiply_conflicit_trait {\n         use crate::{T1, T2};\n \n         struct S;"}, {"sha": "539239fc18f9449f8b582b68a930f39ae2fcf664", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::transmutes_expressible_as_ptr_casts)]\n-// These two warnings currrently cover the cases transmutes_expressible_as_ptr_casts\n+// These two warnings currently cover the cases transmutes_expressible_as_ptr_casts\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]"}, {"sha": "b9e446dc89a95f2160736ec83b80689642c4c0e5", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::transmutes_expressible_as_ptr_casts)]\n-// These two warnings currrently cover the cases transmutes_expressible_as_ptr_casts\n+// These two warnings currently cover the cases transmutes_expressible_as_ptr_casts\n // would otherwise be responsible for\n #![warn(clippy::useless_transmute)]\n #![warn(clippy::transmute_ptr_to_ptr)]"}, {"sha": "ef55f1c31a88bef188aba44728b4e9bdda0f890f", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -199,7 +199,7 @@ mod super_imports {\n         }\n     }\n \n-    mod should_be_replaced_futher_inside {\n+    mod should_be_replaced_further_inside {\n         fn insidefoo() {}\n         mod inner {\n             use super::insidefoo;"}, {"sha": "b81285142069b0e5d14557805ec8211ca5a4cff2", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db928078396da36c1d2a0601126b3d455750eb8/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=0db928078396da36c1d2a0601126b3d455750eb8", "patch": "@@ -200,7 +200,7 @@ mod super_imports {\n         }\n     }\n \n-    mod should_be_replaced_futher_inside {\n+    mod should_be_replaced_further_inside {\n         fn insidefoo() {}\n         mod inner {\n             use super::*;"}]}