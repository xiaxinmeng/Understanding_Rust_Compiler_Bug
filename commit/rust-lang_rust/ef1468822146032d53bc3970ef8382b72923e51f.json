{"sha": "ef1468822146032d53bc3970ef8382b72923e51f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMTQ2ODgyMjE0NjAzMmQ1M2JjMzk3MGVmODM4MmI3MjkyM2U1MWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-21T09:42:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-21T09:42:50Z"}, "message": "Auto merge of #82340 - kennytm:fix-82254, r=Mark-Simulacrum\n\nFix some Python2\u21923 error in publish_toolstate.py\n\nFix #82254.\n\nThe error is primarily due to `data = json.dumps(\u2026)` producing a `str` instead of a `bytes`, which are different types on Python 3. But then `urllib.request.urlopen(\u2026, data)` cannot accept `data` as a `str`, thus the error.\n\nThis PR added `.encode()` call after `json.dumps()` to ensure we are sending `bytes`. Additionally, we added type annotation to ensure things can statically type-check with `mypy` on both Python 2 and 3.", "tree": {"sha": "de62c233f776ad1da92990fd72638df1f1083b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de62c233f776ad1da92990fd72638df1f1083b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef1468822146032d53bc3970ef8382b72923e51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1468822146032d53bc3970ef8382b72923e51f", "html_url": "https://github.com/rust-lang/rust/commit/ef1468822146032d53bc3970ef8382b72923e51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef1468822146032d53bc3970ef8382b72923e51f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed58a2b03b6284b070fae2349898b16df98b7765", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed58a2b03b6284b070fae2349898b16df98b7765", "html_url": "https://github.com/rust-lang/rust/commit/ed58a2b03b6284b070fae2349898b16df98b7765"}, {"sha": "45da2277a0e6452adc4e95baf57e62b01b27b429", "url": "https://api.github.com/repos/rust-lang/rust/commits/45da2277a0e6452adc4e95baf57e62b01b27b429", "html_url": "https://github.com/rust-lang/rust/commit/45da2277a0e6452adc4e95baf57e62b01b27b429"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "f97914b1e97561f40e4a70dc18be66b29da1dff9", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ef1468822146032d53bc3970ef8382b72923e51f/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/ef1468822146032d53bc3970ef8382b72923e51f/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=ef1468822146032d53bc3970ef8382b72923e51f", "patch": "@@ -17,8 +17,14 @@\n import textwrap\n try:\n     import urllib2\n+    from urllib2 import HTTPError\n except ImportError:\n     import urllib.request as urllib2\n+    from urllib.error import HTTPError\n+try:\n+    import typing\n+except ImportError:\n+    pass\n \n # List of people to ping when the status of a tool or a book changed.\n # These should be collaborators of the rust-lang/rust repository (with at least\n@@ -63,20 +69,23 @@\n }\n \n def load_json_from_response(resp):\n+    # type: (typing.Any) -> typing.Any\n     content = resp.read()\n     if isinstance(content, bytes):\n-        content = content.decode('utf-8')\n+        content_str = content.decode('utf-8')\n     else:\n         print(\"Refusing to decode \" + str(type(content)) + \" to str\")\n-    return json.loads(content)\n+    return json.loads(content_str)\n \n def validate_maintainers(repo, github_token):\n+    # type: (str, str) -> None\n     '''Ensure all maintainers are assignable on a GitHub repo'''\n     next_link_re = re.compile(r'<([^>]+)>; rel=\"next\"')\n \n     # Load the list of assignable people in the GitHub repo\n-    assignable = []\n-    url = 'https://api.github.com/repos/%s/collaborators?per_page=100' % repo\n+    assignable = [] # type: typing.List[str]\n+    url = 'https://api.github.com/repos/' \\\n+        + '%s/collaborators?per_page=100' % repo # type: typing.Optional[str]\n     while url is not None:\n         response = urllib2.urlopen(urllib2.Request(url, headers={\n             'Authorization': 'token ' + github_token,\n@@ -116,9 +125,10 @@ def validate_maintainers(repo, github_token):\n \n \n def read_current_status(current_commit, path):\n+    # type: (str, str) -> typing.Mapping[str, typing.Any]\n     '''Reads build status of `current_commit` from content of `history/*.tsv`\n     '''\n-    with open(path, 'rU') as f:\n+    with open(path, 'r') as f:\n         for line in f:\n             (commit, status) = line.split('\\t', 1)\n             if commit == current_commit:\n@@ -127,10 +137,12 @@ def read_current_status(current_commit, path):\n \n \n def gh_url():\n+    # type: () -> str\n     return os.environ['TOOLSTATE_ISSUES_API_URL']\n \n \n def maybe_delink(message):\n+    # type: (str) -> str\n     if os.environ.get('TOOLSTATE_SKIP_MENTIONS') is not None:\n         return message.replace(\"@\", \"\")\n     return message\n@@ -143,8 +155,10 @@ def issue(\n     relevant_pr_number,\n     relevant_pr_user,\n     labels,\n+    github_token,\n ):\n-    # Open an issue about the toolstate failure.\n+    # type: (str, str, typing.Iterable[str], str, str, typing.List[str], str) -> None\n+    '''Open an issue about the toolstate failure.'''\n     if status == 'test-fail':\n         status_description = 'has failing tests'\n     else:\n@@ -168,7 +182,7 @@ def issue(\n     print(\"Creating issue:\\n{}\".format(request))\n     response = urllib2.urlopen(urllib2.Request(\n         gh_url(),\n-        request,\n+        request.encode(),\n         {\n             'Authorization': 'token ' + github_token,\n             'Content-Type': 'application/json',\n@@ -183,8 +197,10 @@ def update_latest(\n     relevant_pr_url,\n     relevant_pr_user,\n     pr_reviewer,\n-    current_datetime\n+    current_datetime,\n+    github_token,\n ):\n+    # type: (str, str, str, str, str, str, str) -> str\n     '''Updates `_data/latest.json` to match build result of the given commit.\n     '''\n     with open('_data/latest.json', 'r+') as f:\n@@ -243,13 +259,14 @@ def update_latest(\n             if create_issue_for_status is not None:\n                 try:\n                     issue(\n-                        tool, create_issue_for_status, MAINTAINERS.get(tool, ''),\n-                        relevant_pr_number, relevant_pr_user, LABELS.get(tool, ''),\n+                        tool, create_issue_for_status, MAINTAINERS.get(tool, ()),\n+                        relevant_pr_number, relevant_pr_user, LABELS.get(tool, []),\n+                        github_token,\n                     )\n-                except urllib2.HTTPError as e:\n+                except HTTPError as e:\n                     # network errors will simply end up not creating an issue, but that's better\n                     # than failing the entire build job\n-                    print(\"HTTPError when creating issue for status regression: {0}\\n{1}\"\n+                    print(\"HTTPError when creating issue for status regression: {0}\\n{1!r}\"\n                           .format(e, e.read()))\n                 except IOError as e:\n                     print(\"I/O error when creating issue for status regression: {0}\".format(e))\n@@ -318,7 +335,8 @@ def update_latest(\n         relevant_pr_url,\n         relevant_pr_user,\n         pr_reviewer,\n-        cur_datetime\n+        cur_datetime,\n+        github_token,\n     )\n     if not message:\n         print('<Nothing changed>')\n@@ -337,13 +355,13 @@ def update_latest(\n     issue_url = gh_url() + '/{}/comments'.format(number)\n     response = urllib2.urlopen(urllib2.Request(\n         issue_url,\n-        json.dumps({'body': maybe_delink(message)}),\n+        json.dumps({'body': maybe_delink(message)}).encode(),\n         {\n             'Authorization': 'token ' + github_token,\n             'Content-Type': 'application/json',\n         }\n     ))\n     response.read()\n-except urllib2.HTTPError as e:\n-    print(\"HTTPError: %s\\n%s\" % (e, e.read()))\n+except HTTPError as e:\n+    print(\"HTTPError: %s\\n%r\" % (e, e.read()))\n     raise"}]}