{"sha": "071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MWVkMzgwZmI3NGQyZTZhMDFhZWJkYWUwZTlhZThiYThiNGE5ZWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T22:32:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T22:33:02Z"}, "message": "rustc: Declare upcalls with real signatures; preparation for killing rust_native_rust_* stubs", "tree": {"sha": "c43a419e5c5cfa9678ec726bafded5494ebd0fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c43a419e5c5cfa9678ec726bafded5494ebd0fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee", "html_url": "https://github.com/rust-lang/rust/commit/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cfca125da06f762db0f6a5d8f35e1476c31091d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfca125da06f762db0f6a5d8f35e1476c31091d", "html_url": "https://github.com/rust-lang/rust/commit/4cfca125da06f762db0f6a5d8f35e1476c31091d"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "5f0ccd97b3fec8e86d3a1b6bcfe58486649c38a2", "filename": "src/comp/back/upcall.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee", "patch": "@@ -0,0 +1,125 @@\n+import middle.trans;\n+\n+import trans.decl_cdecl_fn;\n+import trans.type_names;\n+import trans.ModuleRef;\n+import trans.TypeRef;\n+import trans.ValueRef;\n+\n+import trans.T_crate;\n+import trans.T_f32;\n+import trans.T_f64;\n+import trans.T_fn;\n+import trans.T_i8;\n+import trans.T_i32;\n+import trans.T_int;\n+import trans.T_opaque_chan_ptr;\n+import trans.T_opaque_port_ptr;\n+import trans.T_opaque_vec_ptr;\n+import trans.T_ptr;\n+import trans.T_size_t;\n+import trans.T_str;\n+import trans.T_taskptr;\n+import trans.T_tydesc;\n+import trans.T_void;\n+\n+type upcalls = rec(\n+    ValueRef grow_task,\n+    ValueRef log_int,\n+    ValueRef log_float,\n+    ValueRef log_double,\n+    ValueRef log_str,\n+    ValueRef trace_word,\n+    ValueRef trace_str,\n+    ValueRef new_port,\n+    ValueRef del_port,\n+    ValueRef new_chan,\n+    ValueRef flush_chan,\n+    ValueRef del_chan,\n+    ValueRef clone_chan,\n+    ValueRef _yield,\n+    ValueRef sleep,\n+    ValueRef _join,\n+    ValueRef send,\n+    ValueRef recv,\n+    ValueRef _fail,\n+    ValueRef kill,\n+    ValueRef exit,\n+    ValueRef malloc,\n+    ValueRef free,\n+    ValueRef mark,\n+    ValueRef new_str,\n+    ValueRef new_vec,\n+    ValueRef vec_grow,\n+    ValueRef require_rust_sym,\n+    ValueRef require_c_sym,\n+    ValueRef get_type_desc,\n+    ValueRef new_task,\n+    ValueRef start_task,\n+    ValueRef new_thread,\n+    ValueRef start_thread\n+);\n+\n+fn declare_upcalls(type_names tn, ModuleRef llmod) -> upcalls {\n+    fn decl(type_names tn, ModuleRef llmod, str name, vec[TypeRef] tys)\n+            -> ValueRef {\n+        let vec[TypeRef] arg_tys = vec(T_taskptr(tn));\n+        for (TypeRef t in tys) { arg_tys += vec(t); }\n+        auto fn_ty = T_fn(arg_tys, T_void());\n+        ret trans.decl_cdecl_fn(llmod, \"upcall_\" + name, fn_ty);\n+    }\n+\n+    auto d = bind decl(tn, llmod, _, _);\n+\n+    // FIXME: Sigh... remove this when I fix the typechecker pushdown.\n+    // --pcwalton\n+    let vec[TypeRef] empty_vec = vec();\n+\n+    ret rec(\n+        grow_task=d(\"grow_task\", vec(T_size_t())),\n+        log_int=d(\"log_int\", vec(T_i32(), T_i32())),\n+        log_float=d(\"log_float\", vec(T_i32(), T_f32())),\n+        log_double=d(\"log_double\", vec(T_i32(), T_ptr(T_f64()))),\n+        log_str=d(\"log_str\", vec(T_i32(), T_ptr(T_str()))),\n+        trace_word=d(\"trace_word\", vec(T_int())),\n+        trace_str=d(\"trace_str\", vec(T_ptr(T_i8()))),\n+        new_port=d(\"new_port\", vec(T_size_t())),\n+        del_port=d(\"del_port\", vec(T_opaque_port_ptr(tn))),\n+        new_chan=d(\"new_chan\", vec(T_opaque_port_ptr(tn))),\n+        flush_chan=d(\"flush_chan\", vec(T_opaque_chan_ptr(tn))),\n+        del_chan=d(\"del_chan\", vec(T_opaque_chan_ptr(tn))),\n+        clone_chan=d(\"clone_chan\", vec(T_taskptr(tn), T_opaque_chan_ptr(tn))),\n+        _yield=d(\"yield\", empty_vec),\n+        sleep=d(\"sleep\", vec(T_size_t())),\n+        _join=d(\"join\", vec(T_taskptr(tn))),\n+        send=d(\"send\", vec(T_opaque_chan_ptr(tn), T_ptr(T_i8()))),\n+        recv=d(\"recv\", vec(T_ptr(T_int()), T_opaque_port_ptr(tn))),\n+        _fail=d(\"fail\", vec(T_ptr(T_i8()), T_ptr(T_i8()), T_size_t())),\n+        kill=d(\"kill\", vec(T_taskptr(tn))),\n+        exit=d(\"exit\", empty_vec),\n+        malloc=d(\"malloc\", vec(T_size_t(), T_ptr(T_tydesc(tn)))),\n+        free=d(\"free\", vec(T_ptr(T_i8()), T_int())),\n+        mark=d(\"mark\", vec(T_ptr(T_i8()))),\n+        new_str=d(\"new_str\", vec(T_ptr(T_i8()), T_size_t())),\n+        new_vec=d(\"new_vec\", vec(T_size_t(), T_ptr(T_tydesc(tn)))),\n+        vec_grow=d(\"vec_grow\", vec(T_opaque_vec_ptr(), T_size_t(),\n+                                   T_ptr(T_int()), T_ptr(T_tydesc(tn)))),\n+        require_rust_sym=d(\"require_rust_sym\",\n+                           vec(T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n+                               T_size_t(), T_ptr(T_i8()),\n+                               T_ptr(T_ptr(T_i8())))),\n+        require_c_sym=d(\"require_c_sym\",\n+                        vec(T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n+                            T_ptr(T_i8()), T_ptr(T_i8()))),\n+        get_type_desc=d(\"get_type_desc\",\n+                        vec(T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n+                            T_size_t(), T_ptr(T_ptr(T_tydesc(tn))))),\n+        new_task=d(\"new_task\", vec(T_ptr(T_i8()))),\n+        start_task=d(\"start_task\", vec(T_taskptr(tn), T_int(), T_int(),\n+                                       T_int(), T_size_t())),\n+        new_thread=d(\"new_thread\", vec(T_ptr(T_i8()))),\n+        start_thread=d(\"start_thread\", vec(T_taskptr(tn), T_int(), T_int(),\n+                                           T_int(), T_size_t()))\n+    );\n+}\n+"}, {"sha": "cb537b38a1aa68bfbb0afd9c6da5c06a5b11c5d1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee", "patch": "@@ -305,6 +305,11 @@ fn T_char() -> TypeRef {\n     ret T_i32();\n }\n \n+fn T_size_t() -> TypeRef {\n+    // FIXME: switch on target type.\n+    ret T_i32();\n+}\n+\n fn T_fn(vec[TypeRef] inputs, TypeRef output) -> TypeRef {\n     ret llvm.LLVMFunctionType(output,\n                               Vec.buf[TypeRef](inputs),\n@@ -586,6 +591,26 @@ fn T_opaque_obj_ptr(type_names tn) -> TypeRef {\n     ret T_obj_ptr(tn, 0u);\n }\n \n+fn T_opaque_port_ptr(type_names tn) -> TypeRef {\n+    auto s = \"*port\";\n+    if (tn.name_has_type(s)) { ret tn.get_type(s); }\n+\n+    auto t = T_ptr(T_i8());\n+\n+    tn.associate(s, t);\n+    ret t;\n+}\n+\n+fn T_opaque_chan_ptr(type_names tn) -> TypeRef {\n+    auto s = \"*chan\";\n+    if (tn.name_has_type(s)) { ret tn.get_type(s); }\n+\n+    auto t = T_ptr(T_i8());\n+\n+    tn.associate(s, t);\n+    ret t;\n+}\n+\n \n // This function now fails if called on a type with dynamic size (as its\n // return value was always meaningless in that case anyhow). Beware!"}, {"sha": "816a4503aba99ccd7e60aaa9d24811a541183167", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=071ed380fb74d2e6a01aebdae0e9ae8ba8b4a9ee", "patch": "@@ -35,6 +35,7 @@ mod front {\n mod back {\n     mod Link;\n     mod abi;\n+    mod upcall;\n     mod x86;\n }\n "}]}