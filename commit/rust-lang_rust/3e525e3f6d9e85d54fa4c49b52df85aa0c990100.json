{"sha": "3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNTI1ZTNmNmQ5ZTg1ZDU0ZmE0YzQ5YjUyZGY4NWFhMGM5OTAxMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-18T19:03:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-18T19:03:21Z"}, "message": "Auto merge of #54733 - GuillaumeGomez:stabilize-rustdoc-theme, r=ollie27,Dylan-DPC\n\nStabilize rustdoc theme options\n\nCloses #54730\n\nThis PR stabilizes the `--themes` (now `--theme`) and `--theme-checker` (now `--check-theme`) options, for allowing users to add custom themes to their documentation.\n\nRustdoc includes two themes by default: `light` and `dark`. Using the `--theme` option, you can give rustdoc a CSS file to include as an extra theme for that render. Themes are named after the CSS file used, so using `--theme /path/to/your/custom-theme.css` will add a theme called `custom-theme` to the documentation.\n\nEven though the CLI flag to add a theme is getting stabilized, there's no guarantee that a theme file will always have the same effect on documentation generated with future versions of rustdoc. To aid in ensuring that a theme will work, the flag `--check-theme` is also available, which compares the CSS rules defined by a custom theme against the ones used in the `light` theme. If the `light` theme defines a CSS rule that the custom theme does not, rustdoc will report an error. (Rustdoc also performs this check for themes given to `--theme`, but only reports a warning when a difference is found.)", "tree": {"sha": "f33e407c05a06de415002ba3e778c585b7be71ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f33e407c05a06de415002ba3e778c585b7be71ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "html_url": "https://github.com/rust-lang/rust/commit/3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d40f8bdfcc3c28355467973f97fd4c45ac5876", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d40f8bdfcc3c28355467973f97fd4c45ac5876", "html_url": "https://github.com/rust-lang/rust/commit/a0d40f8bdfcc3c28355467973f97fd4c45ac5876"}, {"sha": "45b83c9164c2462503c2cd381a4b1b85f75fa107", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b83c9164c2462503c2cd381a4b1b85f75fa107", "html_url": "https://github.com/rust-lang/rust/commit/45b83c9164c2462503c2cd381a4b1b85f75fa107"}], "stats": {"total": 140, "additions": 88, "deletions": 52}, "files": [{"sha": "2e32ce31ecae0eb0a9c76805eff79e1c73d2c7ea", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -355,7 +355,38 @@ $ rustdoc src/lib.rs --edition 2018\n $ rustdoc --test src/lib.rs --edition 2018\n ```\n \n-This flag allows rustdoc to treat your rust code as the given edition. It will compile doctests with\n+This flag allows `rustdoc` to treat your rust code as the given edition. It will compile doctests with\n the given edition as well. As with `rustc`, the default edition that `rustdoc` will use is `2015`\n (the first edition).\n \n+## `--theme`: add a theme to the documentation output\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --theme /path/to/your/custom-theme.css\n+```\n+\n+`rustdoc`'s default output includes two themes: `light` (the default) and\n+`dark`. This flag allows you to add custom themes to the output. Giving a CSS\n+file to this flag adds it to your documentation as an additional theme choice.\n+The theme's name is determined by its filename; a theme file named\n+`custom-theme.css` will add a theme named `custom-theme` to the documentation.\n+\n+## `--check-theme`: verify custom themes against the default theme\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc --check-theme /path/to/your/custom-theme.css\n+```\n+\n+While `rustdoc`'s HTML output is more-or-less consistent between versions, there\n+is no guarantee that a theme file will have the same effect. The `--theme` flag\n+will still allow you to add the theme to your documentation, but to ensure that\n+your theme works as expected, you can use this flag to verify that it implements\n+the same CSS rules as the official `light` theme.\n+\n+`--check-theme` is a separate mode in `rustdoc`. When `rustdoc` sees the\n+`--check-theme` flag, it discards all other flags and only performs the CSS rule\n+comparison operation."}, {"sha": "a48526d39fd0a5fcaa0ccaca99ca909e6c4aa5bc", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -294,30 +294,6 @@ some consideration for their stability, and names that end in a number). Giving\n `rustdoc` will disable this sorting and instead make it print the items in the order they appear in\n the source.\n \n-### `--themes`: provide additional themes\n-\n-Using this flag looks like this:\n-\n-```bash\n-$ rustdoc src/lib.rs -Z unstable-options --themes theme.css\n-```\n-\n-Giving this flag to `rustdoc` will make it copy your theme into the generated crate docs and enable\n-it in the theme selector. Note that `rustdoc` will reject your theme file if it doesn't style\n-everything the \"light\" theme does. See `--theme-checker` below for details.\n-\n-### `--theme-checker`: verify theme CSS for validity\n-\n-Using this flag looks like this:\n-\n-```bash\n-$ rustdoc -Z unstable-options --theme-checker theme.css\n-```\n-\n-Before including your theme in crate docs, `rustdoc` will compare all the CSS rules it contains\n-against the \"light\" theme included by default. Using this flag will allow you to see which rules are\n-missing if `rustdoc` rejects your theme.\n-\n ### `--resource-suffix`: modifying the name of CSS/JavaScript in crate docs\n \n Using this flag looks like this:"}, {"sha": "cdb1a1f6997c9f80024e9e34c5fc6bd69b7aa294", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -1,4 +1,5 @@\n use std::collections::BTreeMap;\n+use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n@@ -281,12 +282,12 @@ impl Options {\n         // check for deprecated options\n         check_deprecated_options(&matches, &diag);\n \n-        let to_check = matches.opt_strs(\"theme-checker\");\n+        let to_check = matches.opt_strs(\"check-theme\");\n         if !to_check.is_empty() {\n             let paths = theme::load_css_paths(static_files::themes::LIGHT.as_bytes());\n             let mut errors = 0;\n \n-            println!(\"rustdoc: [theme-checker] Starting tests!\");\n+            println!(\"rustdoc: [check-theme] Starting tests! (Ignoring all other arguments)\");\n             for theme_file in to_check.iter() {\n                 print!(\" - Checking \\\"{}\\\"...\", theme_file);\n                 let (success, differences) = theme::test_theme_against(theme_file, &paths, &diag);\n@@ -357,23 +358,35 @@ impl Options {\n         }\n \n         let mut themes = Vec::new();\n-        if matches.opt_present(\"themes\") {\n+        if matches.opt_present(\"theme\") {\n             let paths = theme::load_css_paths(static_files::themes::LIGHT.as_bytes());\n \n-            for (theme_file, theme_s) in matches.opt_strs(\"themes\")\n+            for (theme_file, theme_s) in matches.opt_strs(\"theme\")\n                                                 .iter()\n                                                 .map(|s| (PathBuf::from(&s), s.to_owned())) {\n                 if !theme_file.is_file() {\n-                    diag.struct_err(\"option --themes arguments must all be files\").emit();\n+                    diag.struct_err(&format!(\"invalid argument: \\\"{}\\\"\", theme_s))\n+                        .help(\"arguments to --theme must be files\")\n+                        .emit();\n                     return Err(1);\n                 }\n-                let (success, ret) = theme::test_theme_against(&theme_file, &paths, &diag);\n-                if !success || !ret.is_empty() {\n-                    diag.struct_err(&format!(\"invalid theme: \\\"{}\\\"\", theme_s))\n-                        .help(\"check what's wrong with the --theme-checker option\")\n+                if theme_file.extension() != Some(OsStr::new(\"css\")) {\n+                    diag.struct_err(&format!(\"invalid argument: \\\"{}\\\"\", theme_s))\n                         .emit();\n                     return Err(1);\n                 }\n+                let (success, ret) = theme::test_theme_against(&theme_file, &paths, &diag);\n+                if !success {\n+                    diag.struct_err(&format!(\"error loading theme file: \\\"{}\\\"\", theme_s)).emit();\n+                    return Err(1);\n+                } else if !ret.is_empty() {\n+                    diag.struct_warn(&format!(\"theme file \\\"{}\\\" is missing CSS rules from the \\\n+                                               default theme\", theme_s))\n+                        .warn(\"the theme may appear incorrect when loaded\")\n+                        .help(&format!(\"to see what rules are missing, call `rustdoc \\\n+                                        --check-theme \\\"{}\\\"`\", theme_s))\n+                        .emit();\n+                }\n                 themes.push(theme_file);\n             }\n         }"}, {"sha": "8249e69e9a74f65352c23d387ae8210c6ce98fa6", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -1,6 +1,7 @@\n use std::path::PathBuf;\n \n use crate::externalfiles::ExternalHtml;\n+use crate::html::escape::Escape;\n use crate::html::render::ensure_trailing_slash;\n use crate::html::format::{Buffer, Print};\n \n@@ -166,10 +167,11 @@ pub fn render<T: Print, S: Print>(\n     themes = themes.iter()\n                    .filter_map(|t| t.file_stem())\n                    .filter_map(|t| t.to_str())\n-                   .map(|t| format!(r#\"<link rel=\"stylesheet\" type=\"text/css\" href=\"{}{}{}.css\">\"#,\n-                                    static_root_path,\n-                                    t,\n-                                    page.resource_suffix))\n+                   .map(|t| format!(r#\"<link rel=\"stylesheet\" type=\"text/css\" href=\"{}.css\">\"#,\n+                                    Escape(&format!(\"{}{}{}\",\n+                                                    static_root_path,\n+                                                    t,\n+                                                    page.resource_suffix))))\n                    .collect::<String>(),\n     suffix=page.resource_suffix,\n     static_extra_scripts=page.static_extra_scripts.iter().map(|e| {"}, {"sha": "1207c5e3bc58dfae106fc5fd859c90d18302521e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -633,19 +633,16 @@ function handleThemeButtonsBlur(e) {{\n \n themePicker.onclick = switchThemeButtonState;\n themePicker.onblur = handleThemeButtonsBlur;\n-[{}].forEach(function(item) {{\n+{}.forEach(function(item) {{\n     var but = document.createElement('button');\n-    but.innerHTML = item;\n+    but.textContent = item;\n     but.onclick = function(el) {{\n         switchTheme(currentTheme, mainTheme, item, true);\n     }};\n     but.onblur = handleThemeButtonsBlur;\n     themes.appendChild(but);\n }});\"#,\n-                 themes.iter()\n-                       .map(|s| format!(\"\\\"{}\\\"\", s))\n-                       .collect::<Vec<String>>()\n-                       .join(\",\"));\n+                 as_json(&themes));\n     write(cx.dst.join(&format!(\"theme{}.js\", cx.shared.resource_suffix)),\n           theme_js.as_bytes()\n     )?;"}, {"sha": "9fc1d76185fb7bf6aa12c41efe419c648f9bfe0c", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -59,7 +59,7 @@ pub static RUST_FAVICON: &'static [u8] = include_bytes!(\"static/favicon.ico\");\n /// The built-in themes given to every documentation site.\n pub mod themes {\n     /// The \"light\" theme, selected by default when no setting is available. Used as the basis for\n-    /// the `--theme-checker` functionality.\n+    /// the `--check-theme` functionality.\n     pub static LIGHT: &'static str = include_str!(\"static/themes/light.css\");\n \n     /// The \"dark\" theme."}, {"sha": "277475f6fffd876869ec13e8eae523f80eafecd0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -252,13 +252,13 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optflag(\"\", \"sort-modules-by-appearance\", \"sort modules by where they appear in the \\\n                                                          program, rather than alphabetically\")\n         }),\n-        unstable(\"themes\", |o| {\n-            o.optmulti(\"\", \"themes\",\n+        stable(\"theme\", |o| {\n+            o.optmulti(\"\", \"theme\",\n                        \"additional themes which will be added to the generated docs\",\n                        \"FILES\")\n         }),\n-        unstable(\"theme-checker\", |o| {\n-            o.optmulti(\"\", \"theme-checker\",\n+        stable(\"check-theme\", |o| {\n+            o.optmulti(\"\", \"check-theme\",\n                        \"check if given theme is valid\",\n                        \"FILES\")\n         }),"}, {"sha": "1be85f4a91d0e77dbe524bb3fa48ab815f4686ab", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -273,6 +273,7 @@ pub fn test_theme_against<P: AsRef<Path>>(\n     diag: &Handler,\n ) -> (bool, Vec<String>) {\n     let data = try_something!(fs::read(f), diag, (false, vec![]));\n+\n     let paths = load_css_paths(&data);\n     let mut ret = vec![];\n     get_differences(against, &paths, &mut ret);"}, {"sha": "f5a471e66e573fc66f14eb08630a2221349f3fa8", "filename": "src/test/run-make-fulldeps/rustdoc-themes/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2FMakefile?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+# Test that rustdoc will properly load in a theme file and display it in the theme selector.\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc-themes\"\n+\n+all:\n+\tcp $(S)/src/librustdoc/html/static/themes/light.css $(TMPDIR)/test.css\n+\t$(RUSTDOC) -o $(OUTPUT_DIR) foo.rs --theme $(TMPDIR)/test.css\n+\t$(HTMLDOCCK) $(OUTPUT_DIR) foo.rs"}, {"sha": "58efaf7d5a05a0641a99a2514fa2ccfeb74c4e44", "filename": "src/test/run-make-fulldeps/rustdoc-themes/foo.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-themes%2Ffoo.rs?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -0,0 +1,4 @@\n+// @has test.css\n+// @has foo/struct.Foo.html\n+// @has - '//link[@rel=\"stylesheet\"]/@href' '../test.css'\n+pub struct Foo;"}, {"sha": "48fd3ff7246345d7ac7d608dbd85cf433ee47bc1", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -15,7 +15,7 @@ RUSTC := $(RUSTC) -Clinker=$(RUSTC_LINKER)\n RUSTDOC := $(RUSTDOC) -Clinker=$(RUSTC_LINKER)\n endif\n #CC := $(CC) -L $(TMPDIR)\n-HTMLDOCCK := $(PYTHON) $(S)/src/etc/htmldocck.py\n+HTMLDOCCK := '$(PYTHON)' '$(S)/src/etc/htmldocck.py'\n CGREP := \"$(S)/src/etc/cat-and-grep.sh\"\n \n # This is the name of the binary we will generate and run; use this"}, {"sha": "a549b0d0efaac876bc845662a158084ce2af5444", "filename": "src/tools/rustdoc-themes/main.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Ftools%2Frustdoc-themes%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e525e3f6d9e85d54fa4c49b52df85aa0c990100/src%2Ftools%2Frustdoc-themes%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-themes%2Fmain.rs?ref=3e525e3f6d9e85d54fa4c49b52df85aa0c990100", "patch": "@@ -38,9 +38,11 @@ fn main() {\n         eprintln!(\"No theme found in \\\"{}\\\"...\", themes_folder);\n         exit(1);\n     }\n+    let arg_name = \"--check-theme\".to_owned();\n     let status = Command::new(rustdoc_bin)\n-                        .args(&[\"-Z\", \"unstable-options\", \"--theme-checker\"])\n-                        .args(&themes)\n+                        .args(&themes.iter()\n+                                     .flat_map(|t| vec![&arg_name, t].into_iter())\n+                                     .collect::<Vec<_>>())\n                         .status()\n                         .expect(\"failed to execute child\");\n     if !status.success() {"}]}