{"sha": "9b2117d1f62116467de870d8264dfb926d68c22f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMjExN2QxZjYyMTE2NDY3ZGU4NzBkODI2NGRmYjkyNmQ2OGMyMmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-26T12:39:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-26T12:39:00Z"}, "message": "Rollup merge of #77758 - Stupremee:turbofish-help-for-const, r=varkor\n\nsuggest turbofish syntax for uninferred const arguments\n\nWhen not providing a const generic value, and it can not be inferred, the following suggestion is suggested:\n![image](https://user-images.githubusercontent.com/39732259/95616180-af127b80-0a69-11eb-8877-551c815f9627.png)\n\nResolves #76737\n\nr? ``@varkor``", "tree": {"sha": "1a812f55f357b16b097e64571dcdb57512b43f21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a812f55f357b16b097e64571dcdb57512b43f21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2117d1f62116467de870d8264dfb926d68c22f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfv6HkCRBK7hj4Ov3rIwAAdHIIAK4Tb4/lXTT3xvTZyOKvWfP9\n0u4keWU/mhBdTtFyfGy+1m2U38ncVMYoHJq8WwdxbxQY4HeP/0EvQrz5KH6Kgww/\n06PyI4/z+O32eiQw7Oj//o1mjkXP+6/t6iQd24S6rBO762yBaeEXsmsN+mk1a1Zw\n+VvLdIqg5DGUrg/v8EiOc1rPgX920C9/mz/H/SM6zdXbqse5ERYfq6H/DBnusqie\nAqnxOfZwZfSTJYxl9aS/m2vt1M1H1vgYNfXaDexFUdGtCnqhueBZQeCJ2R2XrUyD\n9eay6cm6DE1HpeXhlKhuCoq3CnXqUGJxRLGvzGmuT5pw7xjOKbgXqOBMYIwX4og=\n=8G1a\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a812f55f357b16b097e64571dcdb57512b43f21\nparent 0d9651648d3b741e81ba7042e49a07b78a441517\nparent 4379a43e461f7727af2a37b12c7c83f290fc7856\nauthor Jonas Schievink <jonasschievink@gmail.com> 1606394340 +0100\ncommitter GitHub <noreply@github.com> 1606394340 +0100\n\nRollup merge of #77758 - Stupremee:turbofish-help-for-const, r=varkor\n\nsuggest turbofish syntax for uninferred const arguments\n\nWhen not providing a const generic value, and it can not be inferred, the following suggestion is suggested:\n![image](https://user-images.githubusercontent.com/39732259/95616180-af127b80-0a69-11eb-8877-551c815f9627.png)\n\nResolves #76737\n\nr? ``@varkor``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2117d1f62116467de870d8264dfb926d68c22f", "html_url": "https://github.com/rust-lang/rust/commit/9b2117d1f62116467de870d8264dfb926d68c22f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2117d1f62116467de870d8264dfb926d68c22f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9651648d3b741e81ba7042e49a07b78a441517", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9651648d3b741e81ba7042e49a07b78a441517", "html_url": "https://github.com/rust-lang/rust/commit/0d9651648d3b741e81ba7042e49a07b78a441517"}, {"sha": "4379a43e461f7727af2a37b12c7c83f290fc7856", "url": "https://api.github.com/repos/rust-lang/rust/commits/4379a43e461f7727af2a37b12c7c83f290fc7856", "html_url": "https://github.com/rust-lang/rust/commit/4379a43e461f7727af2a37b12c7c83f290fc7856"}], "stats": {"total": 118, "additions": 110, "deletions": 8}, "files": [{"sha": "373f0a602c0ef74ba6f0b11a0a91f5e8e1b26d14", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -124,6 +124,11 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n                 return;\n             }\n         }\n+\n+        // FIXME(const_generics): Currently, any uninferred `const` generics arguments\n+        // are handled specially, but instead they should be handled in `annotate_method_call`,\n+        // which currently doesn't work because this evaluates to `false` for const arguments.\n+        // See https://github.com/rust-lang/rust/pull/77758 for more details.\n         if self.node_ty_contains_target(expr.hir_id).is_some() {\n             match expr.kind {\n                 ExprKind::Closure(..) => self.found_closure = Some(&expr),\n@@ -345,11 +350,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> DiagnosticBuilder<'tcx> {\n         let arg = self.resolve_vars_if_possible(arg);\n         let arg_data = self.extract_inference_diagnostics_data(arg, None);\n-        let kind_str = match arg.unpack() {\n-            GenericArgKind::Type(_) => \"type\",\n-            GenericArgKind::Const(_) => \"the value\",\n-            GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n-        };\n \n         let mut local_visitor = FindHirNodeVisitor::new(&self, arg, span);\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n@@ -618,6 +618,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .any(|span_label| span_label.label.is_some() && span_label.span == span)\n             && local_visitor.found_arg_pattern.is_none()\n         {\n+            let (kind_str, const_value) = match arg.unpack() {\n+                GenericArgKind::Type(_) => (\"type\", None),\n+                GenericArgKind::Const(_) => (\"the value\", Some(())),\n+                GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n+            };\n+\n+            // FIXME(const_generics): we would like to handle const arguments\n+            // as part of the normal diagnostics flow below, but there appear to\n+            // be subtleties in doing so, so for now we special-case const args\n+            // here.\n+            if let Some(suggestion) = const_value\n+                .and_then(|_| arg_data.parent_name.as_ref())\n+                .map(|parent| format!(\"{}::<{}>\", parent, arg_data.name))\n+            {\n+                err.span_suggestion_verbose(\n+                    span,\n+                    \"consider specifying the const argument\",\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+\n             // Avoid multiple labels pointing at `span`.\n             err.span_label(\n                 span,"}, {"sha": "05bf67a5ff7c6c1bf16da16dd882f02adc496bb3", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.full.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -3,6 +3,11 @@ error[E0282]: type annotations needed\n    |\n LL |     foo();\n    |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |     foo::<X>();\n+   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "05bf67a5ff7c6c1bf16da16dd882f02adc496bb3", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.min.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -3,6 +3,11 @@ error[E0282]: type annotations needed\n    |\n LL |     foo();\n    |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |     foo::<X>();\n+   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "99894173bc8f60c7bf88299def65e2e706b2591e", "filename": "src/test/ui/const-generics/infer/issue-77092.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -3,6 +3,11 @@ error[E0282]: type annotations needed\n    |\n LL |         println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n    |                          ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `take_array_from_mut`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |         println!(\"{:?}\", take_array_from_mut::<N>(&mut arr, i));\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7aa3bd44df84436a69d77774e66fb1baec42bd55", "filename": "src/test/ui/const-generics/infer/method-chain.full.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -3,6 +3,11 @@ error[E0282]: type annotations needed\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n    |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |     Foo.bar().bar().bar().bar().baz::<N>();\n+   |                                 ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7aa3bd44df84436a69d77774e66fb1baec42bd55", "filename": "src/test/ui/const-generics/infer/method-chain.min.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -3,6 +3,11 @@ error[E0282]: type annotations needed\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n    |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |     Foo.bar().bar().bar().bar().baz::<N>();\n+   |                                 ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cc6c9a475104c15087c050ef0619d520b63c2963", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.full.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.full.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/one-param-uninferred.rs:15:23\n+   |\n+LL |     let _: [u8; 17] = foo();\n+   |                       ^^^ cannot infer the value of const parameter `M` declared on the function `foo`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |     let _: [u8; 17] = foo::<M>();\n+   |                       ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "cc6c9a475104c15087c050ef0619d520b63c2963", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.min.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/one-param-uninferred.rs:15:23\n+   |\n+LL |     let _: [u8; 17] = foo();\n+   |                       ^^^ cannot infer the value of const parameter `M` declared on the function `foo`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |     let _: [u8; 17] = foo::<M>();\n+   |                       ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "0e947131f4cdb4deca473e66279a6f400eec98da", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.rs?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -0,0 +1,17 @@\n+// Test that we emit an error if we cannot properly infer a constant.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+fn foo<const N: usize, const M: usize>() -> [u8; N] {\n+    todo!()\n+}\n+\n+fn main() {\n+    // FIXME(const_generics): Currently this only suggests one const parameter,\n+    // but instead it should suggest to provide all parameters.\n+    let _: [u8; 17] = foo();\n+                  //~^ ERROR type annotations needed\n+}"}, {"sha": "4be625ba90930f475c8ceff6470a339ea13e3a0f", "filename": "src/test/ui/const-generics/infer/uninferred-consts.full.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -2,7 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/uninferred-consts.rs:14:9\n    |\n LL |     Foo.foo();\n-   |         ^^^ cannot infer the value of const parameter `N` declared on the associated function `foo`\n+   |         ^^^ cannot infer the value of const parameter `A` declared on the associated function `foo`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |     Foo.foo::<A>();\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4be625ba90930f475c8ceff6470a339ea13e3a0f", "filename": "src/test/ui/const-generics/infer/uninferred-consts.min.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -2,7 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/uninferred-consts.rs:14:9\n    |\n LL |     Foo.foo();\n-   |         ^^^ cannot infer the value of const parameter `N` declared on the associated function `foo`\n+   |         ^^^ cannot infer the value of const parameter `A` declared on the associated function `foo`\n+   |\n+help: consider specifying the const argument\n+   |\n+LL |     Foo.foo::<A>();\n+   |         ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "00fb6eac9920810466362d7d3bdbb32696a9b8d9", "filename": "src/test/ui/const-generics/infer/uninferred-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2117d1f62116467de870d8264dfb926d68c22f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs?ref=9b2117d1f62116467de870d8264dfb926d68c22f", "patch": "@@ -8,7 +8,7 @@\n // taken from https://github.com/rust-lang/rust/issues/70507#issuecomment-615268893\n struct Foo;\n impl Foo {\n-    fn foo<const N: usize>(self) {}\n+    fn foo<const A: usize, const B: usize>(self) {}\n }\n fn main() {\n     Foo.foo();"}]}