{"sha": "fc38388bc12716d987df1303aa52f1dc4884fc58", "node_id": "C_kwDOAAsO6NoAKGZjMzgzODhiYzEyNzE2ZDk4N2RmMTMwM2FhNTJmMWRjNDg4NGZjNTg", "commit": {"author": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2022-04-26T06:58:51Z"}, "committer": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2022-04-26T07:35:04Z"}, "message": "Add functions to un-poison Mutex and RwLock\n\nSee discussion at https://internals.rust-lang.org/t/unpoisoning-a-mutex/16521/3", "tree": {"sha": "5b592256b2303e798318bc2fa5851af923cecc3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b592256b2303e798318bc2fa5851af923cecc3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc38388bc12716d987df1303aa52f1dc4884fc58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc38388bc12716d987df1303aa52f1dc4884fc58", "html_url": "https://github.com/rust-lang/rust/commit/fc38388bc12716d987df1303aa52f1dc4884fc58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc38388bc12716d987df1303aa52f1dc4884fc58/comments", "author": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "html_url": "https://github.com/rust-lang/rust/commit/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "4d6916fba9870b12358eb6625164e4df9bc36113", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc38388bc12716d987df1303aa52f1dc4884fc58/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc38388bc12716d987df1303aa52f1dc4884fc58/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=fc38388bc12716d987df1303aa52f1dc4884fc58", "patch": "@@ -363,6 +363,40 @@ impl<T: ?Sized> Mutex<T> {\n         self.poison.get()\n     }\n \n+    /// Clear the poisoned state from a mutex\n+    ///\n+    /// If the mutex is poisoned, it will remain poisoned until this function is called\n+    /// with a mutex guard. This allows recovering from a poisoned state and marking\n+    /// that it has recovered. For example, if the value is overwritten by a known-good value,\n+    /// then the mutex can be marked as un-poisoned. Or possibly, the value could be inspected to\n+    /// determine if it is in a consistent state, and if so the poison is removed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(mutex_unpoison)]\n+    ///\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    ///\n+    /// let mutex = Arc::new(Mutex::new(0));\n+    /// let c_mutex = Arc::clone(&mutex);\n+    ///\n+    /// let _ = thread::spawn(move || {\n+    ///     let _lock = c_mutex.lock().unwrap();\n+    ///     panic!(); // the mutex gets poisoned\n+    /// }).join();\n+    ///\n+    /// let guard = mutex.lock().unwrap_err().into_inner();\n+    /// Mutex::clear_poison(&guard);\n+    /// assert_eq!(mutex.is_poisoned(), false);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"mutex_unpoison\", issue = \"none\")]\n+    pub fn clear_poison(guard: &MutexGuard<'_, T>) {\n+        guard.lock.poison.clear();\n+    }\n+\n     /// Consumes this mutex, returning the underlying data.\n     ///\n     /// # Errors"}, {"sha": "ba91fb0499ff0287a577cee60ba0460107b52167", "filename": "library/std/src/sync/poison.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc38388bc12716d987df1303aa52f1dc4884fc58/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc38388bc12716d987df1303aa52f1dc4884fc58/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs?ref=fc38388bc12716d987df1303aa52f1dc4884fc58", "patch": "@@ -40,6 +40,11 @@ impl Flag {\n     pub fn get(&self) -> bool {\n         self.failed.load(Ordering::Relaxed)\n     }\n+\n+    #[inline]\n+    pub fn clear(&self) {\n+        self.failed.store(false, Ordering::Relaxed)\n+    }\n }\n \n pub struct Guard {"}, {"sha": "b7a7186da139359c677ddf23f244b5dc83c4c132", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc38388bc12716d987df1303aa52f1dc4884fc58/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc38388bc12716d987df1303aa52f1dc4884fc58/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=fc38388bc12716d987df1303aa52f1dc4884fc58", "patch": "@@ -366,6 +366,40 @@ impl<T: ?Sized> RwLock<T> {\n         self.poison.get()\n     }\n \n+    /// Clear the poisoned state from a lock\n+    ///\n+    /// If the lock is poisoned, it will remain poisoned until this function is called\n+    /// with a write guard. This allows recovering from a poisoned state and marking\n+    /// that it has recovered. For example, if the value is overwritten by a known-good value,\n+    /// then the mutex can be marked as un-poisoned. Or possibly, the value could be inspected to\n+    /// determine if it is in a consistent state, and if so the poison is removed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(mutex_unpoison)]\n+    ///\n+    /// use std::sync::{Arc, RwLock};\n+    /// use std::thread;\n+    ///\n+    /// let lock = Arc::new(RwLock::new(0));\n+    /// let c_lock = Arc::clone(&lock);\n+    ///\n+    /// let _ = thread::spawn(move || {\n+    ///     let _lock = c_lock.write().unwrap();\n+    ///     panic!(); // the mutex gets poisoned\n+    /// }).join();\n+    ///\n+    /// let guard = lock.write().unwrap_err().into_inner();\n+    /// RwLock::clear_poison(&guard);\n+    /// assert_eq!(lock.is_poisoned(), false);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"mutex_unpoison\", issue = \"none\")]\n+    pub fn clear_poison(guard: &RwLockWriteGuard<'_, T>) {\n+        guard.lock.poison.clear();\n+    }\n+\n     /// Consumes this `RwLock`, returning the underlying data.\n     ///\n     /// # Errors"}]}