{"sha": "030d78345fa79af07f8ebd89a9d244576fac992b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMGQ3ODM0NWZhNzlhZjA3ZjhlYmQ4OWE5ZDI0NDU3NmZhYzk5MmI=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-23T01:58:22Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-31T00:10:23Z"}, "message": "Fix invoking cargo without consulting CARGO or standard installation paths", "tree": {"sha": "935da29fbb0418e8158e06f227f238bda13ee55f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935da29fbb0418e8158e06f227f238bda13ee55f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030d78345fa79af07f8ebd89a9d244576fac992b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030d78345fa79af07f8ebd89a9d244576fac992b", "html_url": "https://github.com/rust-lang/rust/commit/030d78345fa79af07f8ebd89a9d244576fac992b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030d78345fa79af07f8ebd89a9d244576fac992b/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a", "html_url": "https://github.com/rust-lang/rust/commit/5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "7de784c1cde30862cb12e7b3c82112368bbaf029", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/030d78345fa79af07f8ebd89a9d244576fac992b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/030d78345fa79af07f8ebd89a9d244576fac992b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=030d78345fa79af07f8ebd89a9d244576fac992b", "patch": "@@ -1364,6 +1364,7 @@ dependencies = [\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"ra_tt\",\n+ \"ra_toolchain\",\n  \"ra_vfs\",\n  \"rand\",\n  \"relative-path\","}, {"sha": "2e49448cc6ca93b3ea5175dd961cc43903b1d6c1", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/030d78345fa79af07f8ebd89a9d244576fac992b/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/030d78345fa79af07f8ebd89a9d244576fac992b/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=030d78345fa79af07f8ebd89a9d244576fac992b", "patch": "@@ -48,6 +48,7 @@ hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }\n ra_proc_macro_srv = { path = \"../ra_proc_macro_srv\" }\n+ra_toolchain = { path = \"../ra_toolchain\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = \"0.3.8\""}, {"sha": "1b5b3325c04ff8e31084495fd0c239f16735303f", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/030d78345fa79af07f8ebd89a9d244576fac992b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030d78345fa79af07f8ebd89a9d244576fac992b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=030d78345fa79af07f8ebd89a9d244576fac992b", "patch": "@@ -40,6 +40,7 @@ use crate::{\n     world::WorldSnapshot,\n     LspError, Result,\n };\n+use anyhow::Context;\n \n pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n     let _p = profile(\"handle_analyzer_status\");\n@@ -982,10 +983,15 @@ fn to_lsp_runnable(\n             target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n         }\n     };\n+    let cargo_path = ra_toolchain::cargo()\n+        .to_str()\n+        .context(\"Path to cargo executable contains invalid UTF8 characters\")?\n+        .to_owned();\n+\n     Ok(lsp_ext::Runnable {\n         range: to_proto::range(&line_index, runnable.range),\n         label,\n-        bin: \"cargo\".to_string(),\n+        bin: cargo_path,\n         args,\n         extra_args,\n         env: {"}, {"sha": "46cd3d7778478f43e3d5ccfe5dcaec8f5c637548", "filename": "editors/code/src/cargo.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030d78345fa79af07f8ebd89a9d244576fac992b/editors%2Fcode%2Fsrc%2Fcargo.ts", "raw_url": "https://github.com/rust-lang/rust/raw/030d78345fa79af07f8ebd89a9d244576fac992b/editors%2Fcode%2Fsrc%2Fcargo.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcargo.ts?ref=030d78345fa79af07f8ebd89a9d244576fac992b", "patch": "@@ -126,8 +126,8 @@ export class Cargo {\n     }\n }\n \n-// Mirrors `ra_env::get_path_for_executable` implementation\n-function getCargoPathOrFail(): string {\n+// Mirrors `ra_toolchain::cargo()` implementation\n+export function getCargoPathOrFail(): string {\n     const envVar = process.env.CARGO;\n     const executableName = \"cargo\";\n "}, {"sha": "c22d693623f857af23ad39823421965d426db568", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/030d78345fa79af07f8ebd89a9d244576fac992b/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/030d78345fa79af07f8ebd89a9d244576fac992b/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=030d78345fa79af07f8ebd89a9d244576fac992b", "patch": "@@ -1,4 +1,5 @@\n import * as vscode from 'vscode';\n+import { getCargoPathOrFail } from \"./cargo\";\n \n // This ends up as the `type` key in tasks.json. RLS also uses `cargo` and\n // our configuration should be compatible with it so use the same key.\n@@ -24,6 +25,8 @@ class CargoTaskProvider implements vscode.TaskProvider {\n         // set of tasks that always exist. These tasks cannot be removed in\n         // tasks.json - only tweaked.\n \n+        const cargoPath = getCargoPathOrFail();\n+\n         return [\n             { command: 'build', group: vscode.TaskGroup.Build },\n             { command: 'check', group: vscode.TaskGroup.Build },\n@@ -46,7 +49,7 @@ class CargoTaskProvider implements vscode.TaskProvider {\n                     `cargo ${command}`,\n                     'rust',\n                     // What to do when this command is executed.\n-                    new vscode.ShellExecution('cargo', [command]),\n+                    new vscode.ShellExecution(cargoPath, [command]),\n                     // Problem matchers.\n                     ['$rustc'],\n                 );\n@@ -80,4 +83,4 @@ class CargoTaskProvider implements vscode.TaskProvider {\n export function activateTaskProvider(target: vscode.WorkspaceFolder): vscode.Disposable {\n     const provider = new CargoTaskProvider(target);\n     return vscode.tasks.registerTaskProvider(TASK_TYPE, provider);\n-}\n\\ No newline at end of file\n+}"}]}