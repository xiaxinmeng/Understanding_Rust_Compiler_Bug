{"sha": "9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMTdmZTBlMmYwNGQ2MWRkMjljOWFhZWJlZTJjOTkzNzA1ZTFkMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-15T13:24:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-15T13:24:15Z"}, "message": "Auto merge of #59850 - Zoxc:symbols-attrs, r=petrochenkov\n\nPreallocate BUILTIN_ATTRIBUTES symbols\n\nBuilds on https://github.com/rust-lang/rust/pull/59655\n\nr? @petrochenkov", "tree": {"sha": "445e1db2fa1bfd2e51e759e1c79dbeec387faa52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/445e1db2fa1bfd2e51e759e1c79dbeec387faa52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "html_url": "https://github.com/rust-lang/rust/commit/9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf850f34a4db4baa3ccda0e8e2e53eca5fc9936", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf850f34a4db4baa3ccda0e8e2e53eca5fc9936", "html_url": "https://github.com/rust-lang/rust/commit/fcf850f34a4db4baa3ccda0e8e2e53eca5fc9936"}, {"sha": "cf3a25615997a1193196c4364a529a4b3830945f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3a25615997a1193196c4364a529a4b3830945f", "html_url": "https://github.com/rust-lang/rust/commit/cf3a25615997a1193196c4364a529a4b3830945f"}], "stats": {"total": 1442, "additions": 837, "deletions": 605}, "files": [{"sha": "0e3d39bcbb3d9277581e62da8458516b0e2a78b5", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -3356,9 +3356,11 @@ name = \"syntax\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_macros 0.1.0\",\n  \"rustc_target 0.0.0\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\","}, {"sha": "f289b0b48fbdf3f926721532cefc266b64e3b395", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -42,7 +42,7 @@ use syntax::edition::Edition;\n use syntax::feature_gate::{AttributeGate, AttributeTemplate, AttributeType};\n use syntax::feature_gate::{Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n-use syntax::symbol::keywords;\n+use syntax::symbol::{Symbol, keywords};\n use syntax::errors::{Applicability, DiagnosticBuilder};\n use syntax::print::pprust::expr_to_string;\n use syntax::visit::FnKind;\n@@ -653,7 +653,7 @@ impl EarlyLintPass for AnonymousParameters {\n pub struct DeprecatedAttr {\n     // This is not free to compute, so we want to keep it around, rather than\n     // compute it for every attribute.\n-    depr_attrs: Vec<&'static (&'static str, AttributeType, AttributeTemplate, AttributeGate)>,\n+    depr_attrs: Vec<&'static (Symbol, AttributeType, AttributeTemplate, AttributeGate)>,\n }\n \n impl_lint_pass!(DeprecatedAttr => []);\n@@ -668,9 +668,8 @@ impl DeprecatedAttr {\n \n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n-        let name = attr.name_or_empty();\n         for &&(n, _, _, ref g) in &self.depr_attrs {\n-            if name == n {\n+            if attr.ident().map(|ident| ident.name) == Some(n) {\n                 if let &AttributeGate::Gated(Stability::Deprecated(link, suggestion),\n                                              ref name,\n                                              ref reason,"}, {"sha": "9354f203e4e4ecb02b8f45807eecb58defc590ed", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -118,7 +118,7 @@ macro_rules! late_lint_passes {\n             UnusedBrokenConst: UnusedBrokenConst,\n \n             // Uses attr::is_used which is untracked, can't be an incremental module pass.\n-            UnusedAttributes: UnusedAttributes,\n+            UnusedAttributes: UnusedAttributes::new(),\n \n             // Needs to run after UnusedAttributes as it marks all `feature` attributes as used.\n             UnstableFeatures: UnstableFeatures,"}, {"sha": "1182307600d058aa9edbf0b780094f488e14f02c", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -3,15 +3,17 @@ use rustc::hir::def_id::DefId;\n use rustc::lint;\n use rustc::ty;\n use rustc::ty::adjustment;\n+use rustc_data_structures::fx::FxHashMap;\n use lint::{LateContext, EarlyContext, LintContext, LintArray};\n use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use syntax::ast;\n use syntax::attr;\n use syntax::errors::Applicability;\n-use syntax::feature_gate::{BUILTIN_ATTRIBUTES, AttributeType};\n+use syntax::feature_gate::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n+use syntax::symbol::Symbol;\n use syntax::util::parser;\n use syntax_pos::Span;\n \n@@ -210,17 +212,32 @@ declare_lint! {\n     \"detects attributes that were not used by the compiler\"\n }\n \n-declare_lint_pass!(UnusedAttributes => [UNUSED_ATTRIBUTES]);\n+#[derive(Copy, Clone)]\n+pub struct UnusedAttributes {\n+    builtin_attributes: &'static FxHashMap<Symbol, &'static BuiltinAttribute>,\n+}\n+\n+impl UnusedAttributes {\n+    pub fn new() -> Self {\n+        UnusedAttributes {\n+            builtin_attributes: &*BUILTIN_ATTRIBUTE_MAP,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(UnusedAttributes => [UNUSED_ATTRIBUTES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n     fn check_attribute(&mut self, cx: &LateContext<'_, '_>, attr: &ast::Attribute) {\n         debug!(\"checking attribute: {:?}\", attr);\n-        // Note that check_name() marks the attribute as used if it matches.\n-        for &(name, ty, ..) in BUILTIN_ATTRIBUTES {\n+\n+        let attr_info = attr.ident().and_then(|ident| self.builtin_attributes.get(&ident.name));\n+\n+        if let Some(&&(name, ty, ..)) = attr_info {\n             match ty {\n-                AttributeType::Whitelisted if attr.check_name(name) => {\n+                AttributeType::Whitelisted => {\n                     debug!(\"{:?} is Whitelisted\", name);\n-                    break;\n+                    return;\n                 }\n                 _ => (),\n             }\n@@ -239,11 +256,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n             debug!(\"Emitting warning for: {:?}\", attr);\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n-            let known_crate = BUILTIN_ATTRIBUTES.iter()\n-                .find(|&&(builtin, ty, ..)| {\n-                    name == builtin && ty == AttributeType::CrateLevel\n-                })\n-                .is_some();\n+            let known_crate = attr_info.map(|&&(_, ty, ..)| {\n+                    ty == AttributeType::CrateLevel\n+            }).unwrap_or(false);\n \n             // Has a plugin registered this attribute as one that must be used at\n             // the crate level?"}, {"sha": "cb0cfd93a60dd93a4d25c3893c2b1b757f846722", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -360,8 +360,8 @@ impl<'a> Resolver<'a> {\n \n         let attr_candidates = BUILTIN_ATTRIBUTES\n             .iter()\n-            .filter_map(|(name, _, _, gate)| {\n-                if name.starts_with(\"rustc_\") && !features.rustc_attrs {\n+            .filter_map(|&(name, _, _, ref gate)| {\n+                if name.as_str().starts_with(\"rustc_\") && !features.rustc_attrs {\n                     return None;\n                 }\n \n@@ -376,7 +376,6 @@ impl<'a> Resolver<'a> {\n                     _ => None,\n                 }\n             })\n-            .map(|name| Symbol::intern(name))\n             .chain(\n                 // Add built-in macro attributes as well.\n                 self.builtin_macros.iter().filter_map(|(name, binding)| {"}, {"sha": "b48f3c9b8b8d8fb10203c651fc4b3100cfba72c6", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -14,8 +14,10 @@ bitflags = \"1.0\"\n serialize = { path = \"../libserialize\" }\n log = \"0.4\"\n scoped-tls = \"1.0\"\n+lazy_static = \"1.0.0\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "c8b020d8c0b03328e15342dadfc752089dfc0c39", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 492, "deletions": 392, "changes": 884, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -30,6 +30,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP, symbols};\n use log::debug;\n+use lazy_static::lazy_static;\n \n use std::env;\n \n@@ -811,406 +812,473 @@ macro_rules! cfg_fn {\n     }}\n }\n \n-pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType,\n+pub fn deprecated_attributes() -> Vec<&'static (Symbol, AttributeType,\n                                                 AttributeTemplate, AttributeGate)> {\n     BUILTIN_ATTRIBUTES.iter().filter(|(.., gate)| gate.is_deprecated()).collect()\n }\n \n pub fn is_builtin_attr_name(name: ast::Name) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, ..)| name == builtin_name)\n+    BUILTIN_ATTRIBUTE_MAP.get(&name).is_some()\n }\n \n pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, ..)| attr.path == builtin_name)\n+    attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).is_some()\n }\n \n-// Attributes that have a special meaning to rustc or rustdoc\n-pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, AttributeGate)] = &[\n+/// Attributes that have a special meaning to rustc or rustdoc\n+pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Normal attributes\n \n-    (\"warn\", Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), Ungated),\n-    (\"allow\", Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), Ungated),\n-    (\"forbid\", Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), Ungated),\n-    (\"deny\", Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), Ungated),\n-\n-    (\"macro_use\", Normal, template!(Word, List: \"name1, name2, ...\"), Ungated),\n-    (\"macro_export\", Normal, template!(Word, List: \"local_inner_macros\"), Ungated),\n-    (\"plugin_registrar\", Normal, template!(Word), Ungated),\n-\n-    (\"cfg\", Normal, template!(List: \"predicate\"), Ungated),\n-    (\"cfg_attr\", Normal, template!(List: \"predicate, attr1, attr2, ...\"), Ungated),\n-    (\"main\", Normal, template!(Word), Ungated),\n-    (\"start\", Normal, template!(Word), Ungated),\n-    (\"repr\", Normal, template!(List: \"C, packed, ...\"), Ungated),\n-    (\"path\", Normal, template!(NameValueStr: \"file\"), Ungated),\n-    (\"automatically_derived\", Normal, template!(Word), Ungated),\n-    (\"no_mangle\", Normal, template!(Word), Ungated),\n-    (\"no_link\", Normal, template!(Word), Ungated),\n-    (\"derive\", Normal, template!(List: \"Trait1, Trait2, ...\"), Ungated),\n-    (\"should_panic\", Normal, template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n-                                Ungated),\n-    (\"ignore\", Normal, template!(Word, NameValueStr: \"reason\"), Ungated),\n-    (\"no_implicit_prelude\", Normal, template!(Word), Ungated),\n-    (\"reexport_test_harness_main\", Normal, template!(NameValueStr: \"name\"), Ungated),\n-    (\"link_args\", Normal, template!(NameValueStr: \"args\"), Gated(Stability::Unstable,\n+    (\n+        symbols::warn,\n+        Normal,\n+        template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        Ungated\n+    ),\n+    (\n+        symbols::allow,\n+        Normal,\n+        template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        Ungated\n+    ),\n+    (\n+        symbols::forbid,\n+        Normal,\n+        template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        Ungated\n+    ),\n+    (\n+        symbols::deny,\n+        Normal,\n+        template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        Ungated\n+    ),\n+\n+    (symbols::macro_use, Normal, template!(Word, List: \"name1, name2, ...\"), Ungated),\n+    (symbols::macro_export, Normal, template!(Word, List: \"local_inner_macros\"), Ungated),\n+    (symbols::plugin_registrar, Normal, template!(Word), Ungated),\n+\n+    (symbols::cfg, Normal, template!(List: \"predicate\"), Ungated),\n+    (symbols::cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\"), Ungated),\n+    (symbols::main, Normal, template!(Word), Ungated),\n+    (symbols::start, Normal, template!(Word), Ungated),\n+    (symbols::repr, Normal, template!(List: \"C, packed, ...\"), Ungated),\n+    (symbols::path, Normal, template!(NameValueStr: \"file\"), Ungated),\n+    (symbols::automatically_derived, Normal, template!(Word), Ungated),\n+    (symbols::no_mangle, Normal, template!(Word), Ungated),\n+    (symbols::no_link, Normal, template!(Word), Ungated),\n+    (symbols::derive, Normal, template!(List: \"Trait1, Trait2, ...\"), Ungated),\n+    (\n+        symbols::should_panic,\n+        Normal,\n+        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n+        Ungated\n+    ),\n+    (symbols::ignore, Normal, template!(Word, NameValueStr: \"reason\"), Ungated),\n+    (symbols::no_implicit_prelude, Normal, template!(Word), Ungated),\n+    (symbols::reexport_test_harness_main, Normal, template!(NameValueStr: \"name\"), Ungated),\n+    (symbols::link_args, Normal, template!(NameValueStr: \"args\"), Gated(Stability::Unstable,\n                                 \"link_args\",\n                                 \"the `link_args` attribute is experimental and not \\\n-                                 portable across platforms, it is recommended to \\\n-                                 use `#[link(name = \\\"foo\\\")] instead\",\n+                                portable across platforms, it is recommended to \\\n+                                use `#[link(name = \\\"foo\\\")] instead\",\n                                 cfg_fn!(link_args))),\n-    (\"macro_escape\", Normal, template!(Word), Ungated),\n+    (symbols::macro_escape, Normal, template!(Word), Ungated),\n \n     // RFC #1445.\n-    (\"structural_match\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (symbols::structural_match, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"structural_match\",\n                                             \"the semantics of constant patterns is \\\n-                                             not yet settled\",\n+                                            not yet settled\",\n                                             cfg_fn!(structural_match))),\n \n     // RFC #2008\n-    (\"non_exhaustive\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                          \"non_exhaustive\",\n-                                          \"non exhaustive is an experimental feature\",\n-                                          cfg_fn!(non_exhaustive))),\n+    (symbols::non_exhaustive, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                        \"non_exhaustive\",\n+                                        \"non exhaustive is an experimental feature\",\n+                                        cfg_fn!(non_exhaustive))),\n \n     // RFC #1268\n-    (\"marker\", Normal, template!(Word), Gated(Stability::Unstable,\n-                             \"marker_trait_attr\",\n-                             \"marker traits is an experimental feature\",\n-                             cfg_fn!(marker_trait_attr))),\n-\n-    (\"plugin\", CrateLevel, template!(List: \"name|name(args)\"), Gated(Stability::Unstable,\n-                                 \"plugin\",\n-                                 \"compiler plugins are experimental \\\n-                                  and possibly buggy\",\n-                                 cfg_fn!(plugin))),\n-\n-    (\"no_std\", CrateLevel, template!(Word), Ungated),\n-    (\"no_core\", CrateLevel, template!(Word), Gated(Stability::Unstable,\n-                                  \"no_core\",\n-                                  \"no_core is experimental\",\n-                                  cfg_fn!(no_core))),\n-    (\"lang\", Normal, template!(NameValueStr: \"name\"), Gated(Stability::Unstable,\n-                           \"lang_items\",\n-                           \"language items are subject to change\",\n-                           cfg_fn!(lang_items))),\n-    (\"linkage\", Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n-                                   Gated(Stability::Unstable,\n-                                   \"linkage\",\n-                                   \"the `linkage` attribute is experimental \\\n+    (symbols::marker, Normal, template!(Word), Gated(Stability::Unstable,\n+                            \"marker_trait_attr\",\n+                            \"marker traits is an experimental feature\",\n+                            cfg_fn!(marker_trait_attr))),\n+\n+    (symbols::plugin, CrateLevel, template!(List: \"name|name(args)\"), Gated(Stability::Unstable,\n+                                \"plugin\",\n+                                \"compiler plugins are experimental \\\n+                                and possibly buggy\",\n+                                cfg_fn!(plugin))),\n+\n+    (symbols::no_std, CrateLevel, template!(Word), Ungated),\n+    (symbols::no_core, CrateLevel, template!(Word), Gated(Stability::Unstable,\n+                                \"no_core\",\n+                                \"no_core is experimental\",\n+                                cfg_fn!(no_core))),\n+    (symbols::lang, Normal, template!(NameValueStr: \"name\"), Gated(Stability::Unstable,\n+                        \"lang_items\",\n+                        \"language items are subject to change\",\n+                        cfg_fn!(lang_items))),\n+    (symbols::linkage, Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n+                                Gated(Stability::Unstable,\n+                                \"linkage\",\n+                                \"the `linkage` attribute is experimental \\\n                                     and not portable across platforms\",\n-                                   cfg_fn!(linkage))),\n-    (\"thread_local\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                cfg_fn!(linkage))),\n+    (symbols::thread_local, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                         \"thread_local\",\n                                         \"`#[thread_local]` is an experimental feature, and does \\\n                                          not currently handle destructors\",\n                                         cfg_fn!(thread_local))),\n \n-    (\"rustc_on_unimplemented\", Whitelisted, template!(List:\n-                          r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n-                          NameValueStr: \"message\"),\n-                                             Gated(Stability::Unstable,\n-                                             \"on_unimplemented\",\n-                                             \"the `#[rustc_on_unimplemented]` attribute \\\n-                                              is an experimental feature\",\n-                                             cfg_fn!(on_unimplemented))),\n-    (\"rustc_const_unstable\", Normal, template!(List: r#\"feature = \"name\"\"#),\n-                                             Gated(Stability::Unstable,\n-                                             \"rustc_const_unstable\",\n-                                             \"the `#[rustc_const_unstable]` attribute \\\n-                                              is an internal feature\",\n-                                             cfg_fn!(rustc_const_unstable))),\n-    (\"global_allocator\", Normal, template!(Word), Ungated),\n-    (\"default_lib_allocator\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n+    (symbols::rustc_on_unimplemented, Whitelisted, template!(List:\n+                        r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n+                        NameValueStr: \"message\"),\n+                                            Gated(Stability::Unstable,\n+                                            \"on_unimplemented\",\n+                                            \"the `#[rustc_on_unimplemented]` attribute \\\n+                                            is an experimental feature\",\n+                                            cfg_fn!(on_unimplemented))),\n+    (symbols::rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#),\n+                                            Gated(Stability::Unstable,\n+                                            \"rustc_const_unstable\",\n+                                            \"the `#[rustc_const_unstable]` attribute \\\n+                                            is an internal feature\",\n+                                            cfg_fn!(rustc_const_unstable))),\n+    (symbols::global_allocator, Normal, template!(Word), Ungated),\n+    (symbols::default_lib_allocator, Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"allocator_internals\",\n                                             \"the `#[default_lib_allocator]` \\\n-                                             attribute is an experimental feature\",\n+                                            attribute is an experimental feature\",\n                                             cfg_fn!(allocator_internals))),\n-    (\"needs_allocator\", Normal, template!(Word), Gated(Stability::Unstable,\n-                                      \"allocator_internals\",\n-                                      \"the `#[needs_allocator]` \\\n-                                       attribute is an experimental \\\n-                                       feature\",\n-                                      cfg_fn!(allocator_internals))),\n-    (\"panic_runtime\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                         \"panic_runtime\",\n-                                         \"the `#[panic_runtime]` attribute is \\\n-                                          an experimental feature\",\n-                                         cfg_fn!(panic_runtime))),\n-    (\"needs_panic_runtime\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                               \"needs_panic_runtime\",\n-                                               \"the `#[needs_panic_runtime]` \\\n+    (symbols::needs_allocator, Normal, template!(Word), Gated(Stability::Unstable,\n+                                    \"allocator_internals\",\n+                                    \"the `#[needs_allocator]` \\\n+                                    attribute is an experimental \\\n+                                    feature\",\n+                                    cfg_fn!(allocator_internals))),\n+    (symbols::panic_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                        \"panic_runtime\",\n+                                        \"the `#[panic_runtime]` attribute is \\\n+                                        an experimental feature\",\n+                                        cfg_fn!(panic_runtime))),\n+    (symbols::needs_panic_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                            \"needs_panic_runtime\",\n+                                            \"the `#[needs_panic_runtime]` \\\n                                                 attribute is an experimental \\\n                                                 feature\",\n-                                               cfg_fn!(needs_panic_runtime))),\n-    (\"rustc_outlives\", Normal, template!(Word), Gated(Stability::Unstable,\n-                                     \"rustc_attrs\",\n-                                     \"the `#[rustc_outlives]` attribute \\\n-                                      is just used for rustc unit tests \\\n-                                      and will never be stable\",\n-                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_variance\", Normal, template!(Word), Gated(Stability::Unstable,\n-                                     \"rustc_attrs\",\n-                                     \"the `#[rustc_variance]` attribute \\\n-                                      is just used for rustc unit tests \\\n-                                      and will never be stable\",\n-                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_layout\", Normal, template!(List: \"field1, field2, ...\"),\n-     Gated(Stability::Unstable,\n-           \"rustc_attrs\",\n-           \"the `#[rustc_layout]` attribute \\\n+                                            cfg_fn!(needs_panic_runtime))),\n+    (symbols::rustc_outlives, Normal, template!(Word), Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"the `#[rustc_outlives]` attribute \\\n+                                    is just used for rustc unit tests \\\n+                                    and will never be stable\",\n+                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_variance, Normal, template!(Word), Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"the `#[rustc_variance]` attribute \\\n+                                    is just used for rustc unit tests \\\n+                                    and will never be stable\",\n+                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_layout, Normal, template!(List: \"field1, field2, ...\"),\n+    Gated(Stability::Unstable,\n+        \"rustc_attrs\",\n+        \"the `#[rustc_layout]` attribute \\\n             is just used for rustc unit tests \\\n             and will never be stable\",\n-           cfg_fn!(rustc_attrs))),\n-    (\"rustc_layout_scalar_valid_range_start\", Whitelisted, template!(List: \"value\"),\n-     Gated(Stability::Unstable,\n-           \"rustc_attrs\",\n-           \"the `#[rustc_layout_scalar_valid_range_start]` attribute \\\n+        cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_layout_scalar_valid_range_start, Whitelisted, template!(List: \"value\"),\n+    Gated(Stability::Unstable,\n+        \"rustc_attrs\",\n+        \"the `#[rustc_layout_scalar_valid_range_start]` attribute \\\n             is just used to enable niche optimizations in libcore \\\n             and will never be stable\",\n-           cfg_fn!(rustc_attrs))),\n-    (\"rustc_layout_scalar_valid_range_end\", Whitelisted, template!(List: \"value\"),\n-     Gated(Stability::Unstable,\n-           \"rustc_attrs\",\n-           \"the `#[rustc_layout_scalar_valid_range_end]` attribute \\\n+        cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_layout_scalar_valid_range_end, Whitelisted, template!(List: \"value\"),\n+    Gated(Stability::Unstable,\n+        \"rustc_attrs\",\n+        \"the `#[rustc_layout_scalar_valid_range_end]` attribute \\\n             is just used to enable niche optimizations in libcore \\\n             and will never be stable\",\n-           cfg_fn!(rustc_attrs))),\n-    (\"rustc_regions\", Normal, template!(Word), Gated(Stability::Unstable,\n+        cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_regions, Normal, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_regions]` attribute \\\n-                                     is just used for rustc unit tests \\\n-                                     and will never be stable\",\n+                                    is just used for rustc unit tests \\\n+                                    and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_error\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                       \"rustc_attrs\",\n-                                       \"the `#[rustc_error]` attribute \\\n+    (symbols::rustc_error, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"the `#[rustc_error]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n-                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_dump_user_substs\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                       \"rustc_attrs\",\n-                                       \"this attribute \\\n+                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_dump_user_substs, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"this attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n-                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_if_this_changed\", Whitelisted, template!(Word, List: \"DepNode\"),\n-                                                 Gated(Stability::Unstable,\n-                                                 \"rustc_attrs\",\n-                                                 \"the `#[rustc_if_this_changed]` attribute \\\n-                                                  is just used for rustc unit tests \\\n-                                                  and will never be stable\",\n-                                                 cfg_fn!(rustc_attrs))),\n-    (\"rustc_then_this_would_need\", Whitelisted, template!(List: \"DepNode\"),\n-                                                      Gated(Stability::Unstable,\n-                                                      \"rustc_attrs\",\n-                                                      \"the `#[rustc_if_this_changed]` attribute \\\n-                                                       is just used for rustc unit tests \\\n-                                                       and will never be stable\",\n-                                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_dirty\", Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n+                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_if_this_changed, Whitelisted, template!(Word, List: \"DepNode\"),\n+                                                Gated(Stability::Unstable,\n+                                                \"rustc_attrs\",\n+                                                \"the `#[rustc_if_this_changed]` attribute \\\n+                                                is just used for rustc unit tests \\\n+                                                and will never be stable\",\n+                                                cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_then_this_would_need, Whitelisted, template!(List: \"DepNode\"),\n+                                                    Gated(Stability::Unstable,\n+                                                    \"rustc_attrs\",\n+                                                    \"the `#[rustc_if_this_changed]` attribute \\\n+                                                    is just used for rustc unit tests \\\n+                                                    and will never be stable\",\n+                                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_dirty, Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n                                                     /*opt*/ except = \"...\"\"#),\n-                                       Gated(Stability::Unstable,\n-                                       \"rustc_attrs\",\n-                                       \"the `#[rustc_dirty]` attribute \\\n+                                    Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"the `#[rustc_dirty]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n-                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_clean\", Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n+                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_clean, Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n                                                     /*opt*/ except = \"...\"\"#),\n-                                       Gated(Stability::Unstable,\n-                                       \"rustc_attrs\",\n-                                       \"the `#[rustc_clean]` attribute \\\n+                                    Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"the `#[rustc_clean]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n-                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_partition_reused\", Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n-                                                  Gated(Stability::Unstable,\n-                                                  \"rustc_attrs\",\n-                                                  \"this attribute \\\n-                                                   is just used for rustc unit tests \\\n-                                                   and will never be stable\",\n-                                                  cfg_fn!(rustc_attrs))),\n-    (\"rustc_partition_codegened\", Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n-                                                      Gated(Stability::Unstable,\n-                                                      \"rustc_attrs\",\n-                                                      \"this attribute \\\n-                                                       is just used for rustc unit tests \\\n-                                                       and will never be stable\",\n-                                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_expected_cgu_reuse\", Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\",\n-                                                              kind = \"...\"\"#),\n+                                    cfg_fn!(rustc_attrs))),\n+    (\n+        symbols::rustc_partition_reused,\n+        Whitelisted,\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+        Gated(\n+            Stability::Unstable,\n+            \"rustc_attrs\",\n+            \"this attribute \\\n+            is just used for rustc unit tests \\\n+            and will never be stable\",\n+            cfg_fn!(rustc_attrs)\n+        )\n+    ),\n+    (\n+        symbols::rustc_partition_codegened,\n+        Whitelisted,\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+        Gated(\n+            Stability::Unstable,\n+            \"rustc_attrs\",\n+            \"this attribute \\\n+            is just used for rustc unit tests \\\n+            and will never be stable\",\n+            cfg_fn!(rustc_attrs),\n+        )\n+    ),\n+    (symbols::rustc_expected_cgu_reuse, Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\",\n+                                                            kind = \"...\"\"#),\n                                                     Gated(Stability::Unstable,\n                                                     \"rustc_attrs\",\n                                                     \"this attribute \\\n-                                                     is just used for rustc unit tests \\\n-                                                     and will never be stable\",\n+                                                    is just used for rustc unit tests \\\n+                                                    and will never be stable\",\n+                                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_synthetic, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                    \"rustc_attrs\",\n+                                                    \"this attribute \\\n+                                                    is just used for rustc unit tests \\\n+                                                    and will never be stable\",\n+                                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_symbol_name, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                            \"rustc_attrs\",\n+                                            \"internal rustc attributes will never be stable\",\n+                                            cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_def_path, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                        \"rustc_attrs\",\n+                                        \"internal rustc attributes will never be stable\",\n+                                        cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_mir, Whitelisted, template!(List: \"arg1, arg2, ...\"), Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"the `#[rustc_mir]` attribute \\\n+                                    is just used for rustc unit tests \\\n+                                    and will never be stable\",\n+                                    cfg_fn!(rustc_attrs))),\n+    (\n+        symbols::rustc_inherit_overflow_checks,\n+        Whitelisted,\n+        template!(Word),\n+        Gated(\n+            Stability::Unstable,\n+            \"rustc_attrs\",\n+            \"the `#[rustc_inherit_overflow_checks]` \\\n+            attribute is just used to control \\\n+            overflow checking behavior of several \\\n+            libcore functions that are inlined \\\n+            across crates and will never be stable\",\n+            cfg_fn!(rustc_attrs),\n+        )\n+    ),\n+\n+    (symbols::rustc_dump_program_clauses, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                    \"rustc_attrs\",\n+                                                    \"the `#[rustc_dump_program_clauses]` \\\n+                                                    attribute is just used for rustc unit \\\n+                                                    tests and will never be stable\",\n                                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_synthetic\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                      \"rustc_attrs\",\n-                                                      \"this attribute \\\n-                                                       is just used for rustc unit tests \\\n-                                                       and will never be stable\",\n-                                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_symbol_name\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                             \"rustc_attrs\",\n-                                             \"internal rustc attributes will never be stable\",\n-                                             cfg_fn!(rustc_attrs))),\n-    (\"rustc_def_path\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                           \"rustc_attrs\",\n-                                           \"internal rustc attributes will never be stable\",\n-                                           cfg_fn!(rustc_attrs))),\n-    (\"rustc_mir\", Whitelisted, template!(List: \"arg1, arg2, ...\"), Gated(Stability::Unstable,\n-                                     \"rustc_attrs\",\n-                                     \"the `#[rustc_mir]` attribute \\\n-                                      is just used for rustc unit tests \\\n-                                      and will never be stable\",\n-                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_inherit_overflow_checks\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                         \"rustc_attrs\",\n-                                                         \"the `#[rustc_inherit_overflow_checks]` \\\n-                                                          attribute is just used to control \\\n-                                                          overflow checking behavior of several \\\n-                                                          libcore functions that are inlined \\\n-                                                          across crates and will never be stable\",\n-                                                          cfg_fn!(rustc_attrs))),\n-\n-    (\"rustc_dump_program_clauses\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                     \"rustc_attrs\",\n-                                                     \"the `#[rustc_dump_program_clauses]` \\\n-                                                      attribute is just used for rustc unit \\\n-                                                      tests and will never be stable\",\n-                                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_test_marker\", Normal, template!(Word), Gated(Stability::Unstable,\n-                                     \"rustc_attrs\",\n-                                     \"the `#[rustc_test_marker]` attribute \\\n-                                      is used internally to track tests\",\n-                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_transparent_macro\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                   \"rustc_attrs\",\n-                                                   \"used internally for testing macro hygiene\",\n+    (symbols::rustc_test_marker, Normal, template!(Word), Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"the `#[rustc_test_marker]` attribute \\\n+                                    is used internally to track tests\",\n+                                    cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_transparent_macro, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                \"rustc_attrs\",\n+                                                \"used internally for testing macro hygiene\",\n                                                     cfg_fn!(rustc_attrs))),\n-    (\"compiler_builtins\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                             \"compiler_builtins\",\n-                                             \"the `#[compiler_builtins]` attribute is used to \\\n-                                              identify the `compiler_builtins` crate which \\\n-                                              contains compiler-rt intrinsics and will never be \\\n-                                              stable\",\n-                                          cfg_fn!(compiler_builtins))),\n-    (\"sanitizer_runtime\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                             \"sanitizer_runtime\",\n-                                             \"the `#[sanitizer_runtime]` attribute is used to \\\n-                                              identify crates that contain the runtime of a \\\n-                                              sanitizer and will never be stable\",\n-                                             cfg_fn!(sanitizer_runtime))),\n-    (\"profiler_runtime\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                             \"profiler_runtime\",\n-                                             \"the `#[profiler_runtime]` attribute is used to \\\n-                                              identify the `profiler_builtins` crate which \\\n-                                              contains the profiler runtime and will never be \\\n-                                              stable\",\n-                                             cfg_fn!(profiler_runtime))),\n-\n-    (\"allow_internal_unstable\", Normal, template!(Word, List: \"feat1, feat2, ...\"),\n-                                              Gated(Stability::Unstable,\n-                                              \"allow_internal_unstable\",\n-                                              EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n-                                              cfg_fn!(allow_internal_unstable))),\n-\n-    (\"allow_internal_unsafe\", Normal, template!(Word), Gated(Stability::Unstable,\n+    (symbols::compiler_builtins, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                            \"compiler_builtins\",\n+                                            \"the `#[compiler_builtins]` attribute is used to \\\n+                                            identify the `compiler_builtins` crate which \\\n+                                            contains compiler-rt intrinsics and will never be \\\n+                                            stable\",\n+                                        cfg_fn!(compiler_builtins))),\n+    (symbols::sanitizer_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                            \"sanitizer_runtime\",\n+                                            \"the `#[sanitizer_runtime]` attribute is used to \\\n+                                            identify crates that contain the runtime of a \\\n+                                            sanitizer and will never be stable\",\n+                                            cfg_fn!(sanitizer_runtime))),\n+    (symbols::profiler_runtime, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                            \"profiler_runtime\",\n+                                            \"the `#[profiler_runtime]` attribute is used to \\\n+                                            identify the `profiler_builtins` crate which \\\n+                                            contains the profiler runtime and will never be \\\n+                                            stable\",\n+                                            cfg_fn!(profiler_runtime))),\n+\n+    (symbols::allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n+                                            Gated(Stability::Unstable,\n+                                            \"allow_internal_unstable\",\n+                                            EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n+                                            cfg_fn!(allow_internal_unstable))),\n+\n+    (symbols::allow_internal_unsafe, Normal, template!(Word), Gated(Stability::Unstable,\n                                             \"allow_internal_unsafe\",\n                                             EXPLAIN_ALLOW_INTERNAL_UNSAFE,\n                                             cfg_fn!(allow_internal_unsafe))),\n \n-    (\"fundamental\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                       \"fundamental\",\n-                                       \"the `#[fundamental]` attribute \\\n+    (symbols::fundamental, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                    \"fundamental\",\n+                                    \"the `#[fundamental]` attribute \\\n                                         is an experimental feature\",\n-                                       cfg_fn!(fundamental))),\n+                                    cfg_fn!(fundamental))),\n \n-    (\"proc_macro_derive\", Normal, template!(List: \"TraitName, \\\n-                                                   /*opt*/ attributes(name1, name2, ...)\"),\n-                                       Ungated),\n+    (symbols::proc_macro_derive, Normal, template!(List: \"TraitName, \\\n+                                                /*opt*/ attributes(name1, name2, ...)\"),\n+                                    Ungated),\n \n-    (\"rustc_copy_clone_marker\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                   \"rustc_attrs\",\n-                                                   \"internal implementation detail\",\n-                                                   cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_copy_clone_marker, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                \"rustc_attrs\",\n+                                                \"internal implementation detail\",\n+                                                cfg_fn!(rustc_attrs))),\n \n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n-    (\"doc\", Whitelisted, template!(List: \"hidden|inline|...\", NameValueStr: \"string\"), Ungated),\n+    (\n+        symbols::doc,\n+        Whitelisted,\n+        template!(List: \"hidden|inline|...\", NameValueStr: \"string\"),\n+        Ungated\n+    ),\n \n     // FIXME: #14406 these are processed in codegen, which happens after the\n     // lint pass\n-    (\"cold\", Whitelisted, template!(Word), Ungated),\n-    (\"naked\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                 \"naked_functions\",\n-                                 \"the `#[naked]` attribute \\\n-                                  is an experimental feature\",\n-                                 cfg_fn!(naked_functions))),\n-    (\"ffi_returns_twice\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                 \"ffi_returns_twice\",\n-                                 \"the `#[ffi_returns_twice]` attribute \\\n-                                  is an experimental feature\",\n-                                 cfg_fn!(ffi_returns_twice))),\n-    (\"target_feature\", Whitelisted, template!(List: r#\"enable = \"name\"\"#), Ungated),\n-    (\"export_name\", Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (\"inline\", Whitelisted, template!(Word, List: \"always|never\"), Ungated),\n-    (\"link\", Whitelisted, template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n-                                             /*opt*/ cfg = \"...\"\"#), Ungated),\n-    (\"link_name\", Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (\"link_section\", Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n-    (\"no_builtins\", Whitelisted, template!(Word), Ungated),\n-    (\"no_mangle\", Whitelisted, template!(Word), Ungated),\n-    (\"no_debug\", Whitelisted, template!(Word), Gated(\n+    (symbols::cold, Whitelisted, template!(Word), Ungated),\n+    (symbols::naked, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                \"naked_functions\",\n+                                \"the `#[naked]` attribute \\\n+                                is an experimental feature\",\n+                                cfg_fn!(naked_functions))),\n+    (symbols::ffi_returns_twice, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                \"ffi_returns_twice\",\n+                                \"the `#[ffi_returns_twice]` attribute \\\n+                                is an experimental feature\",\n+                                cfg_fn!(ffi_returns_twice))),\n+    (symbols::target_feature, Whitelisted, template!(List: r#\"enable = \"name\"\"#), Ungated),\n+    (symbols::export_name, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (symbols::inline, Whitelisted, template!(Word, List: \"always|never\"), Ungated),\n+    (symbols::link, Whitelisted, template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n+                                               /*opt*/ cfg = \"...\"\"#), Ungated),\n+    (symbols::link_name, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (symbols::link_section, Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (symbols::no_builtins, Whitelisted, template!(Word), Ungated),\n+    (symbols::no_debug, Whitelisted, template!(Word), Gated(\n         Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\", None),\n         \"no_debug\",\n         \"the `#[no_debug]` attribute was an experimental feature that has been \\\n-         deprecated due to lack of demand\",\n+        deprecated due to lack of demand\",\n         cfg_fn!(no_debug))),\n-    (\"omit_gdb_pretty_printer_section\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                       \"omit_gdb_pretty_printer_section\",\n-                                                       \"the `#[omit_gdb_pretty_printer_section]` \\\n-                                                        attribute is just used for the Rust test \\\n-                                                        suite\",\n-                                                       cfg_fn!(omit_gdb_pretty_printer_section))),\n-    (\"unsafe_destructor_blind_to_params\",\n-     Normal,\n-     template!(Word),\n-     Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\",\n-                                 Some(\"replace this attribute with `#[may_dangle]`\")),\n-           \"dropck_parametricity\",\n-           \"unsafe_destructor_blind_to_params has been replaced by \\\n+    (\n+        symbols::omit_gdb_pretty_printer_section,\n+        Whitelisted,\n+        template!(Word),\n+        Gated(\n+            Stability::Unstable,\n+            \"omit_gdb_pretty_printer_section\",\n+            \"the `#[omit_gdb_pretty_printer_section]` \\\n+                attribute is just used for the Rust test \\\n+                suite\",\n+            cfg_fn!(omit_gdb_pretty_printer_section)\n+        )\n+    ),\n+    (symbols::unsafe_destructor_blind_to_params,\n+    Normal,\n+    template!(Word),\n+    Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\",\n+                                Some(\"replace this attribute with `#[may_dangle]`\")),\n+        \"dropck_parametricity\",\n+        \"unsafe_destructor_blind_to_params has been replaced by \\\n             may_dangle and will be removed in the future\",\n-           cfg_fn!(dropck_parametricity))),\n-    (\"may_dangle\",\n-     Normal,\n-     template!(Word),\n-     Gated(Stability::Unstable,\n-           \"dropck_eyepatch\",\n-           \"may_dangle has unstable semantics and may be removed in the future\",\n-           cfg_fn!(dropck_eyepatch))),\n-    (\"unwind\", Whitelisted, template!(List: \"allowed|aborts\"), Gated(Stability::Unstable,\n-                                  \"unwind_attributes\",\n-                                  \"#[unwind] is experimental\",\n-                                  cfg_fn!(unwind_attributes))),\n-    (\"used\", Whitelisted, template!(Word), Ungated),\n+        cfg_fn!(dropck_parametricity))),\n+    (symbols::may_dangle,\n+    Normal,\n+    template!(Word),\n+    Gated(Stability::Unstable,\n+        \"dropck_eyepatch\",\n+        \"may_dangle has unstable semantics and may be removed in the future\",\n+        cfg_fn!(dropck_eyepatch))),\n+    (symbols::unwind, Whitelisted, template!(List: \"allowed|aborts\"), Gated(Stability::Unstable,\n+                                \"unwind_attributes\",\n+                                \"#[unwind] is experimental\",\n+                                cfg_fn!(unwind_attributes))),\n+    (symbols::used, Whitelisted, template!(Word), Ungated),\n \n     // used in resolve\n-    (\"prelude_import\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                          \"prelude_import\",\n-                                          \"`#[prelude_import]` is for use by rustc only\",\n-                                          cfg_fn!(prelude_import))),\n+    (symbols::prelude_import, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                        \"prelude_import\",\n+                                        \"`#[prelude_import]` is for use by rustc only\",\n+                                        cfg_fn!(prelude_import))),\n \n     // FIXME: #14407 these are only looked at on-demand so we can't\n     // guarantee they'll have already been checked\n-    (\"rustc_deprecated\", Whitelisted, template!(List: r#\"since = \"version\", reason = \"...\"\"#),\n-                                        Ungated),\n-    (\"must_use\", Whitelisted, template!(Word, NameValueStr: \"reason\"), Ungated),\n-    (\"stable\", Whitelisted, template!(List: r#\"feature = \"name\", since = \"version\"\"#), Ungated),\n-    (\"unstable\", Whitelisted, template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n-                                        Ungated),\n-    (\"deprecated\",\n+    (\n+        symbols::rustc_deprecated,\n+        Whitelisted,\n+        template!(List: r#\"since = \"version\", reason = \"...\"\"#),\n+        Ungated\n+    ),\n+    (symbols::must_use, Whitelisted, template!(Word, NameValueStr: \"reason\"), Ungated),\n+    (\n+        symbols::stable,\n+        Whitelisted,\n+        template!(List: r#\"feature = \"name\", since = \"version\"\"#),\n+        Ungated\n+    ),\n+    (\n+        symbols::unstable,\n+        Whitelisted,\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n+        Ungated\n+    ),\n+    (symbols::deprecated,\n         Normal,\n         template!(\n             Word,\n@@ -1220,73 +1288,88 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n         Ungated\n     ),\n \n-    (\"rustc_paren_sugar\", Normal, template!(Word), Gated(Stability::Unstable,\n+    (symbols::rustc_paren_sugar, Normal, template!(Word), Gated(Stability::Unstable,\n                                         \"unboxed_closures\",\n                                         \"unboxed_closures are still evolving\",\n                                         cfg_fn!(unboxed_closures))),\n \n-    (\"windows_subsystem\", Whitelisted, template!(NameValueStr: \"windows|console\"), Ungated),\n+    (symbols::windows_subsystem, Whitelisted, template!(NameValueStr: \"windows|console\"), Ungated),\n \n-    (\"proc_macro_attribute\", Normal, template!(Word), Ungated),\n-    (\"proc_macro\", Normal, template!(Word), Ungated),\n+    (symbols::proc_macro_attribute, Normal, template!(Word), Ungated),\n+    (symbols::proc_macro, Normal, template!(Word), Ungated),\n \n-    (\"rustc_proc_macro_decls\", Normal, template!(Word), Gated(Stability::Unstable,\n-                                             \"rustc_attrs\",\n-                                             \"used internally by rustc\",\n-                                             cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_proc_macro_decls, Normal, template!(Word), Gated(Stability::Unstable,\n+                                            \"rustc_attrs\",\n+                                            \"used internally by rustc\",\n+                                            cfg_fn!(rustc_attrs))),\n \n-    (\"allow_fail\", Normal, template!(Word), Gated(Stability::Unstable,\n-                                 \"allow_fail\",\n-                                 \"allow_fail attribute is currently unstable\",\n-                                 cfg_fn!(allow_fail))),\n+    (symbols::allow_fail, Normal, template!(Word), Gated(Stability::Unstable,\n+                                \"allow_fail\",\n+                                \"allow_fail attribute is currently unstable\",\n+                                cfg_fn!(allow_fail))),\n \n-    (\"rustc_std_internal_symbol\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                     \"rustc_attrs\",\n-                                     \"this is an internal attribute that will \\\n-                                      never be stable\",\n-                                     cfg_fn!(rustc_attrs))),\n+    (symbols::rustc_std_internal_symbol, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"this is an internal attribute that will \\\n+                                    never be stable\",\n+                                    cfg_fn!(rustc_attrs))),\n \n     // whitelists \"identity-like\" conversion methods to suggest on type mismatch\n-    (\"rustc_conversion_suggestion\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n-                                                       \"rustc_attrs\",\n-                                                       \"this is an internal attribute that will \\\n+    (symbols::rustc_conversion_suggestion, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                    \"rustc_attrs\",\n+                                                    \"this is an internal attribute that will \\\n                                                         never be stable\",\n-                                                       cfg_fn!(rustc_attrs))),\n+                                                    cfg_fn!(rustc_attrs))),\n \n-    (\"rustc_args_required_const\", Whitelisted, template!(List: \"N\"), Gated(Stability::Unstable,\n-                                 \"rustc_attrs\",\n-                                 \"never will be stable\",\n-                                 cfg_fn!(rustc_attrs))),\n+    (\n+        symbols::rustc_args_required_const,\n+        Whitelisted,\n+        template!(List: \"N\"),\n+        Gated(Stability::Unstable, \"rustc_attrs\", \"never will be stable\", cfg_fn!(rustc_attrs))\n+    ),\n     // RFC 2070\n-    (\"panic_handler\", Normal, template!(Word), Ungated),\n+    (symbols::panic_handler, Normal, template!(Word), Ungated),\n \n-    (\"alloc_error_handler\", Normal, template!(Word), Gated(Stability::Unstable,\n-                           \"alloc_error_handler\",\n-                           \"#[alloc_error_handler] is an unstable feature\",\n-                           cfg_fn!(alloc_error_handler))),\n+    (symbols::alloc_error_handler, Normal, template!(Word), Gated(Stability::Unstable,\n+                        \"alloc_error_handler\",\n+                        \"#[alloc_error_handler] is an unstable feature\",\n+                        cfg_fn!(alloc_error_handler))),\n \n     // RFC 2412\n-    (\"optimize\", Whitelisted, template!(List: \"size|speed\"), Gated(Stability::Unstable,\n-                               \"optimize_attribute\",\n-                               \"#[optimize] attribute is an unstable feature\",\n-                               cfg_fn!(optimize_attribute))),\n+    (symbols::optimize, Whitelisted, template!(List: \"size|speed\"), Gated(Stability::Unstable,\n+                            \"optimize_attribute\",\n+                            \"#[optimize] attribute is an unstable feature\",\n+                            cfg_fn!(optimize_attribute))),\n \n     // Crate level attributes\n-    (\"crate_name\", CrateLevel, template!(NameValueStr: \"name\"), Ungated),\n-    (\"crate_type\", CrateLevel, template!(NameValueStr: \"bin|lib|...\"), Ungated),\n-    (\"crate_id\", CrateLevel, template!(NameValueStr: \"ignored\"), Ungated),\n-    (\"feature\", CrateLevel, template!(List: \"name1, name1, ...\"), Ungated),\n-    (\"no_start\", CrateLevel, template!(Word), Ungated),\n-    (\"no_main\", CrateLevel, template!(Word), Ungated),\n-    (\"no_builtins\", CrateLevel, template!(Word), Ungated),\n-    (\"recursion_limit\", CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n-    (\"type_length_limit\", CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n-    (\"test_runner\", CrateLevel, template!(List: \"path\"), Gated(Stability::Unstable,\n+    (symbols::crate_name, CrateLevel, template!(NameValueStr: \"name\"), Ungated),\n+    (symbols::crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\"), Ungated),\n+    (symbols::crate_id, CrateLevel, template!(NameValueStr: \"ignored\"), Ungated),\n+    (symbols::feature, CrateLevel, template!(List: \"name1, name1, ...\"), Ungated),\n+    (symbols::no_start, CrateLevel, template!(Word), Ungated),\n+    (symbols::no_main, CrateLevel, template!(Word), Ungated),\n+    (symbols::recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n+    (symbols::type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n+    (symbols::test_runner, CrateLevel, template!(List: \"path\"), Gated(Stability::Unstable,\n                     \"custom_test_frameworks\",\n                     EXPLAIN_CUSTOM_TEST_FRAMEWORKS,\n                     cfg_fn!(custom_test_frameworks))),\n ];\n \n+pub type BuiltinAttribute = (Symbol, AttributeType, AttributeTemplate, AttributeGate);\n+\n+lazy_static! {\n+    pub static ref BUILTIN_ATTRIBUTE_MAP: FxHashMap<Symbol, &'static BuiltinAttribute> = {\n+        let mut map = FxHashMap::default();\n+        for attr in BUILTIN_ATTRIBUTES.iter() {\n+            if map.insert(attr.0, attr).is_some() {\n+                panic!(\"duplicate builtin attribute `{}`\", attr.0);\n+            }\n+        }\n+        map\n+    };\n+}\n+\n // cfg(...)'s that are feature gated\n const GATED_CFGS: &[(&str, &str, fn(&Features) -> bool)] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n@@ -1353,29 +1436,31 @@ macro_rules! gate_feature {\n }\n \n impl<'a> Context<'a> {\n-    fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) {\n+    fn check_attribute(\n+        &self,\n+        attr: &ast::Attribute,\n+        attr_info: Option<&BuiltinAttribute>,\n+        is_macro: bool\n+    ) {\n         debug!(\"check_attribute(attr = {:?})\", attr);\n-        let name = attr.name_or_empty();\n-        for &(n, ty, _template, ref gateage) in BUILTIN_ATTRIBUTES {\n-            if name == n {\n-                if let Gated(_, name, desc, ref has_feature) = *gateage {\n-                    if !attr.span.allows_unstable(name) {\n-                        gate_feature_fn!(\n-                            self, has_feature, attr.span, name, desc, GateStrength::Hard\n+        if let Some(&(name, ty, _template, ref gateage)) = attr_info {\n+            if let Gated(_, name, desc, ref has_feature) = *gateage {\n+                if !attr.span.allows_unstable(name) {\n+                    gate_feature_fn!(\n+                        self, has_feature, attr.span, name, desc, GateStrength::Hard\n+                    );\n+                }\n+            } else if name == symbols::doc {\n+                if let Some(content) = attr.meta_item_list() {\n+                    if content.iter().any(|c| c.check_name(symbols::include)) {\n+                        gate_feature!(self, external_doc, attr.span,\n+                            \"#[doc(include = \\\"...\\\")] is experimental\"\n                         );\n                     }\n-                } else if n == \"doc\" {\n-                    if let Some(content) = attr.meta_item_list() {\n-                        if content.iter().any(|c| c.check_name(symbols::include)) {\n-                            gate_feature!(self, external_doc, attr.span,\n-                                \"#[doc(include = \\\"...\\\")] is experimental\"\n-                            );\n-                        }\n-                    }\n                 }\n-                debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n-                return;\n             }\n+            debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n+            return;\n         }\n         for &(ref n, ref ty) in self.plugin_attributes {\n             if attr.path == &**n {\n@@ -1387,7 +1472,7 @@ impl<'a> Context<'a> {\n             }\n         }\n         if !attr::is_known(attr) {\n-            if name.starts_with(\"rustc_\") {\n+            if attr.name_or_empty().starts_with(\"rustc_\") {\n                 let msg = \"unless otherwise specified, attributes with the prefix `rustc_` \\\n                            are reserved for internal compiler diagnostics\";\n                 gate_feature!(self, rustc_attrs, attr.span, msg);\n@@ -1405,7 +1490,11 @@ impl<'a> Context<'a> {\n \n pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n     let cx = Context { features: features, parse_sess: parse_sess, plugin_attributes: &[] };\n-    cx.check_attribute(attr, true);\n+    cx.check_attribute(\n+        attr,\n+        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name).map(|a| *a)),\n+        true\n+    );\n }\n \n fn find_lang_feature_issue(feature: &str) -> Option<u32> {\n@@ -1542,6 +1631,7 @@ pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &str =\n \n struct PostExpansionVisitor<'a> {\n     context: &'a Context<'a>,\n+    builtin_attributes: &'static FxHashMap<Symbol, &'static BuiltinAttribute>,\n }\n \n macro_rules! gate_feature_post {\n@@ -1615,15 +1705,15 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn check_builtin_attribute(&mut self, attr: &ast::Attribute, name: &str,\n+    fn check_builtin_attribute(&mut self, attr: &ast::Attribute, name: Symbol,\n                                template: AttributeTemplate) {\n         // Some special attributes like `cfg` must be checked\n         // before the generic check, so we skip them here.\n-        let should_skip = |name| name == \"cfg\";\n+        let should_skip = |name| name == symbols::cfg;\n         // Some of previously accepted forms were used in practice,\n         // report them as warnings for now.\n-        let should_warn = |name| name == \"doc\" || name == \"ignore\" ||\n-                                 name == \"inline\" || name == \"link\";\n+        let should_warn = |name| name == symbols::doc || name == symbols::ignore ||\n+                                 name == symbols::inline || name == symbols::link;\n \n         match attr.parse_meta(self.context.parse_sess) {\n             Ok(meta) => if !should_skip(name) && !template.compatible(&meta.node) {\n@@ -1664,8 +1754,12 @@ impl<'a> PostExpansionVisitor<'a> {\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+        let attr_info = attr.ident().and_then(|ident| {\n+            self.builtin_attributes.get(&ident.name).map(|a| *a)\n+        });\n+\n         // check for gated attributes\n-        self.context.check_attribute(attr, false);\n+        self.context.check_attribute(attr, attr_info, false);\n \n         if attr.check_name(symbols::doc) {\n             if let Some(content) = attr.meta_item_list() {\n@@ -1693,8 +1787,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n         }\n \n-        match BUILTIN_ATTRIBUTES.iter().find(|(name, ..)| attr.path == *name) {\n-            Some(&(name, _, template, _)) => self.check_builtin_attribute(attr, name, template),\n+        match attr_info {\n+            Some(&(name, _, template, _)) => self.check_builtin_attribute(\n+                attr,\n+                name,\n+                template\n+            ),\n             None => if let Some(TokenTree::Token(_, token::Eq)) = attr.tokens.trees().next() {\n                 // All key-value attributes are restricted to meta-item syntax.\n                 attr.parse_meta(self.context.parse_sess).map_err(|mut err| err.emit()).ok();\n@@ -2210,8 +2308,10 @@ pub fn check_crate(krate: &ast::Crate,\n         parse_sess: sess,\n         plugin_attributes,\n     };\n-\n-    let visitor = &mut PostExpansionVisitor { context: &ctx };\n+    let visitor = &mut PostExpansionVisitor {\n+        context: &ctx,\n+        builtin_attributes: &*BUILTIN_ATTRIBUTE_MAP,\n+    };\n     visit::walk_crate(visitor, krate);\n }\n "}, {"sha": "cdbfabae7ce1f01cd2c7303da7635bd201bdf971", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 121, "deletions": 10, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -100,8 +100,127 @@ symbols! {\n \n     // Other symbols that can be referred to with syntax_pos::symbols::*\n     Other {\n-        doc, cfg, masked, spotlight, alias, keyword, feature, include, simd, align, stable,\n-        unstable, rustc_const_unstable,\n+        alias,\n+        align,\n+        alloc_error_handler,\n+        allow,\n+        allow_fail,\n+        allow_internal_unsafe,\n+        allow_internal_unstable,\n+        automatically_derived,\n+        cfg,\n+        cfg_attr,\n+        cold,\n+        compiler_builtins,\n+        crate_id,\n+        crate_name,\n+        crate_type,\n+        default_lib_allocator,\n+        deny,\n+        deprecated,\n+        derive,\n+        doc,\n+        export_name,\n+        feature,\n+        ffi_returns_twice,\n+        forbid,\n+        fundamental,\n+        global_allocator,\n+        ignore,\n+        include,\n+        inline,\n+        keyword,\n+        lang,\n+        link,\n+        link_args,\n+        link_name,\n+        link_section,\n+        linkage,\n+        macro_escape,\n+        macro_export,\n+        macro_use,\n+        main,\n+        marker,\n+        masked,\n+        may_dangle,\n+        must_use,\n+        naked,\n+        needs_allocator,\n+        needs_panic_runtime,\n+        no_builtins,\n+        no_core,\n+        no_debug,\n+        no_implicit_prelude,\n+        no_link,\n+        no_main,\n+        no_mangle,\n+        no_start,\n+        no_std,\n+        non_exhaustive,\n+        omit_gdb_pretty_printer_section,\n+        optimize,\n+        panic_handler,\n+        panic_runtime,\n+        path,\n+        plugin,\n+        plugin_registrar,\n+        prelude_import,\n+        proc_macro,\n+        proc_macro_attribute,\n+        proc_macro_derive,\n+        profiler_runtime,\n+        recursion_limit,\n+        reexport_test_harness_main,\n+        repr,\n+        rustc_args_required_const,\n+        rustc_clean,\n+        rustc_const_unstable,\n+        rustc_conversion_suggestion,\n+        rustc_copy_clone_marker,\n+        rustc_def_path,\n+        rustc_deprecated,\n+        rustc_dirty,\n+        rustc_dump_program_clauses,\n+        rustc_dump_user_substs,\n+        rustc_error,\n+        rustc_expected_cgu_reuse,\n+        rustc_if_this_changed,\n+        rustc_inherit_overflow_checks,\n+        rustc_layout,\n+        rustc_layout_scalar_valid_range_end,\n+        rustc_layout_scalar_valid_range_start,\n+        rustc_mir,\n+        rustc_on_unimplemented,\n+        rustc_outlives,\n+        rustc_paren_sugar,\n+        rustc_partition_codegened,\n+        rustc_partition_reused,\n+        rustc_proc_macro_decls,\n+        rustc_regions,\n+        rustc_std_internal_symbol,\n+        rustc_symbol_name,\n+        rustc_synthetic,\n+        rustc_test_marker,\n+        rustc_then_this_would_need,\n+        rustc_transparent_macro,\n+        rustc_variance,\n+        sanitizer_runtime,\n+        should_panic,\n+        simd,\n+        spotlight,\n+        stable,\n+        start,\n+        structural_match,\n+        target_feature,\n+        test_runner,\n+        thread_local,\n+        type_length_limit,\n+        unsafe_destructor_blind_to_params,\n+        unstable,\n+        unwind,\n+        used,\n+        warn,\n+        windows_subsystem,\n     }\n }\n \n@@ -237,14 +356,6 @@ newtype_index! {\n     pub struct SymbolIndex { .. }\n }\n \n-// The interner is pointed to by a thread local value which is only set on the main thread\n-// with parallelization is disabled. So we don't allow `Symbol` to transfer between threads\n-// to avoid panics and other errors, even though it would be memory safe to do so.\n-#[cfg(not(parallel_compiler))]\n-impl !Send for Symbol { }\n-#[cfg(not(parallel_compiler))]\n-impl !Sync for Symbol { }\n-\n impl Symbol {\n     const fn new(n: u32) -> Self {\n         Symbol(SymbolIndex::from_u32_const(n))"}, {"sha": "0129a3f72b2422d0b7c59ef6fd6ebc1b7c778f0d", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -52,7 +52,7 @@\n //~^ WARN unused attribute\n #![path = \"3800\"] //~ WARN unused attribute\n #![automatically_derived] //~ WARN unused attribute\n-#![no_mangle]\n+#![no_mangle] //~ WARN unused attribute\n #![no_link] //~ WARN unused attribute\n // see issue-43106-gating-of-derive.rs\n #![should_panic] //~ WARN unused attribute\n@@ -70,8 +70,6 @@\n #![link()]\n #![link_name = \"1900\"]\n #![link_section = \"1800\"]\n-#![no_builtins] // Yikes, dupe'd on BUILTIN_ATTRIBUTES list (see \"0300\")\n-#![no_mangle] // Yikes, dupe'd on BUILTIN_ATTRIBUTES list (see \"3500\")\n // see issue-43106-gating-of-rustc_deprecated.rs\n #![must_use]\n // see issue-43106-gating-of-stable.rs"}, {"sha": "dcbe13a749f69b981661308165761959c3a26d47", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 185, "deletions": 179, "changes": 364, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -29,165 +29,165 @@ LL | #![deny(x5100)]\n    |         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:101:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:99:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:104:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:102:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:107:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:105:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:110:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:108:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:113:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:111:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:116:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:118:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:121:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:124:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:129:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:127:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:132:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:130:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:135:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:137:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:140:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:143:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:148:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:146:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:151:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:149:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:154:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:156:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:159:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:162:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:167:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:165:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:170:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:168:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:173:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:457:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:460:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: consider an outer attribute, #[macro_use] mod ...\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:181:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:179:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n@@ -199,913 +199,913 @@ LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:184:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:182:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:187:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:185:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:190:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:188:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:197:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:195:17\n    |\n LL |     mod inner { #![macro_export] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:200:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:198:5\n    |\n LL |     #[macro_export] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:203:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:201:5\n    |\n LL |     #[macro_export] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:206:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:204:5\n    |\n LL |     #[macro_export] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:209:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:207:5\n    |\n LL |     #[macro_export] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:192:1\n    |\n LL | #[macro_export]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:214:17\n    |\n LL |     mod inner { #![plugin_registrar] }\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:221:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:5\n    |\n LL |     #[plugin_registrar] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:222:5\n    |\n LL |     #[plugin_registrar] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:225:5\n    |\n LL |     #[plugin_registrar] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:211:1\n    |\n LL | #[plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:234:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:232:17\n    |\n LL |     mod inner { #![main] }\n    |                 ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:239:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:237:5\n    |\n LL |     #[main] struct S;\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:242:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:240:5\n    |\n LL |     #[main] type T = S;\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:245:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:243:5\n    |\n LL |     #[main] impl S { }\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:231:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:229:1\n    |\n LL | #[main]\n    | ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:252:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:250:17\n    |\n LL |     mod inner { #![start] }\n    |                 ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:257:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:255:5\n    |\n LL |     #[start] struct S;\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:260:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:258:5\n    |\n LL |     #[start] type T = S;\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:263:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:261:5\n    |\n LL |     #[start] impl S { }\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:249:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:247:1\n    |\n LL | #[start]\n    | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:314:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:319:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:317:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:322:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:320:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:325:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:323:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:332:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:330:17\n    |\n LL |     mod inner { #![automatically_derived] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:335:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:333:5\n    |\n LL |     #[automatically_derived] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:338:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:336:5\n    |\n LL |     #[automatically_derived] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:341:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:339:5\n    |\n LL |     #[automatically_derived] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:344:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:342:5\n    |\n LL |     #[automatically_derived] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:329:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:327:1\n    |\n LL | #[automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:362:17\n    |\n LL |     mod inner { #![no_link] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:365:5\n    |\n LL |     #[no_link] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:368:5\n    |\n LL |     #[no_link] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:371:5\n    |\n LL |     #[no_link]type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:374:5\n    |\n LL |     #[no_link] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:361:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:359:1\n    |\n LL | #[no_link]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:383:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:381:17\n    |\n LL |     mod inner { #![should_panic] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:384:5\n    |\n LL |     #[should_panic] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:387:5\n    |\n LL |     #[should_panic] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:390:5\n    |\n LL |     #[should_panic] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:393:5\n    |\n LL |     #[should_panic] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:380:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:378:1\n    |\n LL | #[should_panic]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:402:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:400:17\n    |\n LL |     mod inner { #![ignore] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:403:5\n    |\n LL |     #[ignore] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:406:5\n    |\n LL |     #[ignore] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:409:5\n    |\n LL |     #[ignore] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:412:5\n    |\n LL |     #[ignore] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:399:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:397:1\n    |\n LL | #[ignore]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:421:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:419:17\n    |\n LL |     mod inner { #![no_implicit_prelude] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:422:5\n    |\n LL |     #[no_implicit_prelude] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:425:5\n    |\n LL |     #[no_implicit_prelude] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:428:5\n    |\n LL |     #[no_implicit_prelude] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:431:5\n    |\n LL |     #[no_implicit_prelude] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:418:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:416:1\n    |\n LL | #[no_implicit_prelude]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:440:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:443:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:441:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:444:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:447:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:450:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:437:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:435:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:463:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:461:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:464:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:467:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:472:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:484:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:484:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:490:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:490:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:494:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:494:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:633:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:633:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:637:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:637:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:641:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:641:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:645:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:645:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:649:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:649:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:629:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:629:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:658:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:658:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:662:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:662:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:666:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:666:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:670:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:670:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:654:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:654:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:772:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:772:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:768:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:768:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1152,6 +1152,12 @@ warning: unused attribute\n LL | #![automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n+   |\n+LL | #![no_mangle]\n+   | ^^^^^^^^^^^^^\n+\n warning: unused attribute\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n    |"}, {"sha": "99a87f0c3aa0f1fe35648b036584a9ed7a0c23b1", "filename": "src/test/ui/malformed/malformed-regressions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -27,7 +27,7 @@ LL | #[inline = \"\"]\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n warning: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n-                                             /*opt*/ cfg = \"...\")]`\n+                                               /*opt*/ cfg = \"...\")]`\n   --> $DIR/malformed-regressions.rs:6:1\n    |\n LL | #[link]\n@@ -37,7 +37,7 @@ LL | #[link]\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n warning: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n-                                             /*opt*/ cfg = \"...\")]`\n+                                               /*opt*/ cfg = \"...\")]`\n   --> $DIR/malformed-regressions.rs:7:1\n    |\n LL | #[link = \"\"]"}]}