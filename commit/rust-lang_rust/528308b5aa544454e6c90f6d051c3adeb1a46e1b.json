{"sha": "528308b5aa544454e6c90f6d051c3adeb1a46e1b", "node_id": "C_kwDOAAsO6NoAKDUyODMwOGI1YWE1NDQ0NTRlNmM5MGY2ZDA1MWMzYWRlYjFhNDZlMWI", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-07-02T22:00:24Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-07-06T07:48:51Z"}, "message": "Extend unnecessary_lazy_eval to cover `bool::then` -> `bool::then_some`", "tree": {"sha": "86d6784bf8866d3c0afb2b2c55a0138b3fc73937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d6784bf8866d3c0afb2b2c55a0138b3fc73937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/528308b5aa544454e6c90f6d051c3adeb1a46e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/528308b5aa544454e6c90f6d051c3adeb1a46e1b", "html_url": "https://github.com/rust-lang/rust/commit/528308b5aa544454e6c90f6d051c3adeb1a46e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/528308b5aa544454e6c90f6d051c3adeb1a46e1b/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c341d66a1203d58e53fad206a131357550b2d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c341d66a1203d58e53fad206a131357550b2d7b", "html_url": "https://github.com/rust-lang/rust/commit/8c341d66a1203d58e53fad206a131357550b2d7b"}], "stats": {"total": 88, "additions": 52, "deletions": 36}, "files": [{"sha": "36389d798ed573afa8c350cd60e1645bbcae663a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/528308b5aa544454e6c90f6d051c3adeb1a46e1b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528308b5aa544454e6c90f6d051c3adeb1a46e1b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=528308b5aa544454e6c90f6d051c3adeb1a46e1b", "patch": "@@ -2737,6 +2737,7 @@ impl Methods {\n                     }\n                 },\n                 (\"take\", []) => needless_option_take::check(cx, expr, recv),\n+                (\"then\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"then_some\"),\n                 (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n                     implicit_clone::check(cx, name, expr, recv);\n                 },"}, {"sha": "a9c641b46068371161a13c6b701a9f1cb7ba218f", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/528308b5aa544454e6c90f6d051c3adeb1a46e1b/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528308b5aa544454e6c90f6d051c3adeb1a46e1b/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=528308b5aa544454e6c90f6d051c3adeb1a46e1b", "patch": "@@ -20,8 +20,9 @@ pub(super) fn check<'tcx>(\n ) {\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n+    let is_bool = cx.typeck_results().expr_ty(recv).is_bool();\n \n-    if is_option || is_result {\n+    if is_option || is_result || is_bool {\n         if let hir::ExprKind::Closure { body, .. } = arg.kind {\n             let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n@@ -33,8 +34,10 @@ pub(super) fn check<'tcx>(\n             if eager_or_lazy::switch_to_eager_eval(cx, body_expr) {\n                 let msg = if is_option {\n                     \"unnecessary closure used to substitute value for `Option::None`\"\n-                } else {\n+                } else if is_result {\n                     \"unnecessary closure used to substitute value for `Result::Err`\"\n+                } else {\n+                    \"unnecessary closure used with `bool::then`\"\n                 };\n                 let applicability = if body\n                     .params"}, {"sha": "eed817968832193aa2d7588043480134c3e04d13", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/528308b5aa544454e6c90f6d051c3adeb1a46e1b/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/528308b5aa544454e6c90f6d051c3adeb1a46e1b/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=528308b5aa544454e6c90f6d051c3adeb1a46e1b", "patch": "@@ -30,6 +30,7 @@ fn main() {\n     let ext_opt = Some(42);\n     let nested_opt = Some(Some(42));\n     let nested_tuple_opt = Some(Some((42, 43)));\n+    let cond = true;\n \n     // Should lint - Option\n     let _ = opt.unwrap_or(2);\n@@ -42,6 +43,7 @@ fn main() {\n     let _ = opt.get_or_insert(2);\n     let _ = opt.ok_or(2);\n     let _ = nested_tuple_opt.unwrap_or(Some((1, 2)));\n+    let _ = cond.then_some(astronomers_pi);\n \n     // Cases when unwrap is not called on a simple variable\n     let _ = Some(10).unwrap_or(2);"}, {"sha": "1588db79b38a8c2345a5a623466a705998fedb97", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/528308b5aa544454e6c90f6d051c3adeb1a46e1b/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528308b5aa544454e6c90f6d051c3adeb1a46e1b/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=528308b5aa544454e6c90f6d051c3adeb1a46e1b", "patch": "@@ -30,6 +30,7 @@ fn main() {\n     let ext_opt = Some(42);\n     let nested_opt = Some(Some(42));\n     let nested_tuple_opt = Some(Some((42, 43)));\n+    let cond = true;\n \n     // Should lint - Option\n     let _ = opt.unwrap_or_else(|| 2);\n@@ -42,6 +43,7 @@ fn main() {\n     let _ = opt.get_or_insert_with(|| 2);\n     let _ = opt.ok_or_else(|| 2);\n     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n+    let _ = cond.then(|| astronomers_pi);\n \n     // Cases when unwrap is not called on a simple variable\n     let _ = Some(10).unwrap_or_else(|| 2);"}, {"sha": "83dc7fd832c38f8a7974f6175fbb3ac91fd8a179", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/528308b5aa544454e6c90f6d051c3adeb1a46e1b/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/528308b5aa544454e6c90f6d051c3adeb1a46e1b/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=528308b5aa544454e6c90f6d051c3adeb1a46e1b", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:35:13\n+  --> $DIR/unnecessary_lazy_eval.rs:36:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n    |             ^^^^--------------------\n@@ -9,255 +9,263 @@ LL |     let _ = opt.unwrap_or_else(|| 2);\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:36:13\n+  --> $DIR/unnecessary_lazy_eval.rs:37:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n    |             ^^^^---------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:37:13\n+  --> $DIR/unnecessary_lazy_eval.rs:38:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n    |             ^^^^-------------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:39:13\n+  --> $DIR/unnecessary_lazy_eval.rs:40:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n    |             ^^^^---------------------\n    |                 |\n    |                 help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:40:13\n+  --> $DIR/unnecessary_lazy_eval.rs:41:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:41:13\n+  --> $DIR/unnecessary_lazy_eval.rs:42:13\n    |\n LL |     let _ = opt.or_else(|| None);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:42:13\n+  --> $DIR/unnecessary_lazy_eval.rs:43:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n    |             ^^^^------------------------\n    |                 |\n    |                 help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:43:13\n+  --> $DIR/unnecessary_lazy_eval.rs:44:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:44:13\n+  --> $DIR/unnecessary_lazy_eval.rs:45:13\n    |\n LL |     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n    |             ^^^^^^^^^^^^^^^^^-------------------------------\n    |                              |\n    |                              help: use `unwrap_or(..)` instead: `unwrap_or(Some((1, 2)))`\n \n+error: unnecessary closure used with `bool::then`\n+  --> $DIR/unnecessary_lazy_eval.rs:46:13\n+   |\n+LL |     let _ = cond.then(|| astronomers_pi);\n+   |             ^^^^^-----------------------\n+   |                  |\n+   |                  help: use `then_some(..)` instead: `then_some(astronomers_pi)`\n+\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:47:13\n+  --> $DIR/unnecessary_lazy_eval.rs:49:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n    |             ^^^^^^^^^--------------------\n    |                      |\n    |                      help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:48:13\n+  --> $DIR/unnecessary_lazy_eval.rs:50:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n    |             ^^^^^^^^^---------------------\n    |                      |\n    |                      help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:49:28\n+  --> $DIR/unnecessary_lazy_eval.rs:51:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:50:13\n+  --> $DIR/unnecessary_lazy_eval.rs:52:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n    |             ^^^^^------------------------\n    |                  |\n    |                  help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:51:35\n+  --> $DIR/unnecessary_lazy_eval.rs:53:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n    |                                   ^^^^^----------------\n    |                                        |\n    |                                        help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:52:28\n+  --> $DIR/unnecessary_lazy_eval.rs:54:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n    |                            ^^^^^----------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:55:13\n+  --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n    |             ^^^^^^^--------------------\n    |                    |\n    |                    help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:56:13\n+  --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n    |             ^^^^^^^---------------------\n    |                    |\n    |                    help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:57:13\n+  --> $DIR/unnecessary_lazy_eval.rs:59:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:58:13\n+  --> $DIR/unnecessary_lazy_eval.rs:60:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n    |             ^^^^^^^------------------------\n    |                    |\n    |                    help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:59:13\n+  --> $DIR/unnecessary_lazy_eval.rs:61:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:79:28\n+  --> $DIR/unnecessary_lazy_eval.rs:81:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| Some(3));\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:80:13\n+  --> $DIR/unnecessary_lazy_eval.rs:82:13\n    |\n LL |     let _ = deep.0.or_else(|| Some(3));\n    |             ^^^^^^^-------------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:81:13\n+  --> $DIR/unnecessary_lazy_eval.rs:83:13\n    |\n LL |     let _ = opt.or_else(|| Some(3));\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:87:13\n+  --> $DIR/unnecessary_lazy_eval.rs:89:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n    |             ^^^^^---------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:88:13\n+  --> $DIR/unnecessary_lazy_eval.rs:90:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n    |             ^^^^^----------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:89:13\n+  --> $DIR/unnecessary_lazy_eval.rs:91:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n    |             ^^^^^--------------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:111:35\n+  --> $DIR/unnecessary_lazy_eval.rs:113:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(2));\n    |                                   ^^^^--------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:112:35\n+  --> $DIR/unnecessary_lazy_eval.rs:114:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n    |                                   ^^^^---------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:113:35\n+  --> $DIR/unnecessary_lazy_eval.rs:115:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n    |                                   ^^^^-------------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:115:35\n+  --> $DIR/unnecessary_lazy_eval.rs:117:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n    |                                   ^^^^------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:116:35\n+  --> $DIR/unnecessary_lazy_eval.rs:118:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n    |                                   ^^^^-------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:117:35\n+  --> $DIR/unnecessary_lazy_eval.rs:119:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n    |                                   ^^^^-----------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:118:35\n+  --> $DIR/unnecessary_lazy_eval.rs:120:35\n    |\n LL |       let _: Result<usize, usize> = res.\n    |  ___________________________________^\n@@ -271,5 +279,5 @@ LL | |         or_else(|_| Ok(ext_str.some_field));\n    |           |\n    |           help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 34 previous errors\n "}]}