{"sha": "939c93208c306596d84f632acb0245542f3d46aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWM5MzIwOGMzMDY1OTZkODRmNjMyYWNiMDI0NTU0MmYzZDQ2YWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-25T16:30:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T16:30:29Z"}, "message": "Rollup merge of #71168 - SimonSapin:into_raw_non_null, r=Amanieu\n\nDeprecate `{Box,Rc,Arc}::into_raw_non_null`\n\nPer ongoing FCP at https://github.com/rust-lang/rust/issues/47336#issuecomment-586589016\nSee also https://github.com/rust-lang/rust/issues/47336#issuecomment-614054164", "tree": {"sha": "7f7a9189351388addb12bed73555e976f3b53e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7a9189351388addb12bed73555e976f3b53e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939c93208c306596d84f632acb0245542f3d46aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepGWlCRBK7hj4Ov3rIwAAdHIIAA2F0lk/leoQyJQ6qMc2Id0p\nOmYVKe1WT6FEMPbYa8f56EOlmTpacyjctKZSXrvLni+awembRB6xohOHntYRoIia\nmG7i93Nu4LeQMtA7PRgq73oniHtYYyJbHdzF6ttfpP5ZZzfxHO5CdIhoSQgVogCJ\nQPep3bGzTJOLmOkmRhW7HBB6Le6ve6UxAxkwfksUlxkzv7AhvtVfAWLfRlAyrS4O\ntLktGcdlWNKhI74jVWfPIhUCtNXE4//pBMTbSrdRsSd1BHIWtM/A54JUf+5OPArW\nfBakAmnW8WI0R5+zmNLoKxF/VXL9f2Uj7hCbKXyvm/MItksGsLwrnIoh7RAgRH4=\n=r4/k\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f7a9189351388addb12bed73555e976f3b53e0c\nparent 29fd52811428c040b972a6ac77dbbb8b69239b45\nparent 7709d205ddcea48294f7916a3d7eb6d843bb6dbc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587832229 +0200\ncommitter GitHub <noreply@github.com> 1587832229 +0200\n\nRollup merge of #71168 - SimonSapin:into_raw_non_null, r=Amanieu\n\nDeprecate `{Box,Rc,Arc}::into_raw_non_null`\n\nPer ongoing FCP at https://github.com/rust-lang/rust/issues/47336#issuecomment-586589016\nSee also https://github.com/rust-lang/rust/issues/47336#issuecomment-614054164\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939c93208c306596d84f632acb0245542f3d46aa", "html_url": "https://github.com/rust-lang/rust/commit/939c93208c306596d84f632acb0245542f3d46aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939c93208c306596d84f632acb0245542f3d46aa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29fd52811428c040b972a6ac77dbbb8b69239b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/29fd52811428c040b972a6ac77dbbb8b69239b45", "html_url": "https://github.com/rust-lang/rust/commit/29fd52811428c040b972a6ac77dbbb8b69239b45"}, {"sha": "7709d205ddcea48294f7916a3d7eb6d843bb6dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7709d205ddcea48294f7916a3d7eb6d843bb6dbc", "html_url": "https://github.com/rust-lang/rust/commit/7709d205ddcea48294f7916a3d7eb6d843bb6dbc"}], "stats": {"total": 77, "additions": 46, "deletions": 31}, "files": [{"sha": "3d657396a9feb704e534e6ff43fda3b9e37528e6", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=939c93208c306596d84f632acb0245542f3d46aa", "patch": "@@ -428,7 +428,12 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n-        Box::into_raw_non_null(b).as_ptr()\n+        // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n+        // raw pointer for the type system. Turning it directly into a raw pointer would not be\n+        // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n+        // so all raw pointer methods go through `leak` which creates a (unique)\n+        // mutable reference. Turning *that* to a raw pointer behaves correctly.\n+        Box::leak(b) as *mut T\n     }\n \n     /// Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.\n@@ -451,6 +456,7 @@ impl<T: ?Sized> Box<T> {\n     ///\n     /// ```\n     /// #![feature(box_into_raw_non_null)]\n+    /// #![allow(deprecated)]\n     ///\n     /// let x = Box::new(5);\n     /// let ptr = Box::into_raw_non_null(x);\n@@ -460,24 +466,34 @@ impl<T: ?Sized> Box<T> {\n     /// let x = unsafe { Box::from_raw(ptr.as_ptr()) };\n     /// ```\n     #[unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")]\n+    #[rustc_deprecated(\n+        since = \"1.44.0\",\n+        reason = \"use `Box::leak(b).into()` or `NonNull::from(Box::leak(b))` instead\"\n+    )]\n     #[inline]\n     pub fn into_raw_non_null(b: Box<T>) -> NonNull<T> {\n-        Box::into_unique(b).into()\n-    }\n-\n-    #[unstable(feature = \"ptr_internals\", issue = \"none\", reason = \"use into_raw_non_null instead\")]\n+        // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n+        // raw pointer for the type system. Turning it directly into a raw pointer would not be\n+        // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n+        // so all raw pointer methods go through `leak` which creates a (unique)\n+        // mutable reference. Turning *that* to a raw pointer behaves correctly.\n+        Box::leak(b).into()\n+    }\n+\n+    #[unstable(\n+        feature = \"ptr_internals\",\n+        issue = \"none\",\n+        reason = \"use `Box::leak(b).into()` or `Unique::from(Box::leak(b))` instead\"\n+    )]\n     #[inline]\n     #[doc(hidden)]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n-        let b = mem::ManuallyDrop::new(b);\n-        let mut unique = b.0;\n-        // Box is kind-of a library type, but recognized as a \"unique pointer\" by\n-        // Stacked Borrows.  This function here corresponds to \"reborrowing to\n-        // a raw pointer\", but there is no actual reborrow here -- so\n-        // without some care, the pointer we are returning here still carries\n-        // the tag of `b`, with `Unique` permission.\n-        // We round-trip through a mutable reference to avoid that.\n-        unsafe { Unique::new_unchecked(unique.as_mut() as *mut T) }\n+        // Box is recognized as a \"unique pointer\" by Stacked Borrows, but internally it is a\n+        // raw pointer for the type system. Turning it directly into a raw pointer would not be\n+        // recognized as \"releasing\" the unique pointer to permit aliased raw accesses,\n+        // so all raw pointer methods go through `leak` which creates a (unique)\n+        // mutable reference. Turning *that* to a raw pointer behaves correctly.\n+        Box::leak(b).into()\n     }\n \n     /// Consumes and leaks the `Box`, returning a mutable reference,\n@@ -523,7 +539,7 @@ impl<T: ?Sized> Box<T> {\n     where\n         T: 'a, // Technically not needed, but kept to be explicit.\n     {\n-        unsafe { &mut *Box::into_raw(b) }\n+        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }\n     }\n \n     /// Converts a `Box<T>` into a `Pin<Box<T>>`"}, {"sha": "5825bd306b6b312e110d3ab567730c989147ad9c", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=939c93208c306596d84f632acb0245542f3d46aa", "patch": "@@ -143,7 +143,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = self.head;\n             node.prev = None;\n-            let node = Some(Box::into_raw_non_null(node));\n+            let node = Some(Box::leak(node).into());\n \n             match self.head {\n                 None => self.tail = node,\n@@ -184,7 +184,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = None;\n             node.prev = self.tail;\n-            let node = Some(Box::into_raw_non_null(node));\n+            let node = Some(Box::leak(node).into());\n \n             match self.tail {\n                 None => self.head = node,\n@@ -1133,11 +1133,9 @@ impl<T> IterMut<'_, T> {\n                     Some(prev) => prev,\n                 };\n \n-                let node = Some(Box::into_raw_non_null(box Node {\n-                    next: Some(head),\n-                    prev: Some(prev),\n-                    element,\n-                }));\n+                let node = Some(\n+                    Box::leak(box Node { next: Some(head), prev: Some(prev), element }).into(),\n+                );\n \n                 // Not creating references to entire nodes to not invalidate the\n                 // reference to `element` we handed to the user.\n@@ -1450,7 +1448,7 @@ impl<'a, T> CursorMut<'a, T> {\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn insert_after(&mut self, item: T) {\n         unsafe {\n-            let spliced_node = Box::into_raw_non_null(Box::new(Node::new(item)));\n+            let spliced_node = Box::leak(Box::new(Node::new(item))).into();\n             let node_next = match self.current {\n                 None => self.list.head,\n                 Some(node) => node.as_ref().next,\n@@ -1470,7 +1468,7 @@ impl<'a, T> CursorMut<'a, T> {\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn insert_before(&mut self, item: T) {\n         unsafe {\n-            let spliced_node = Box::into_raw_non_null(Box::new(Node::new(item)));\n+            let spliced_node = Box::leak(Box::new(Node::new(item))).into();\n             let node_prev = match self.current {\n                 None => self.list.tail,\n                 Some(node) => node.as_ref().prev,"}, {"sha": "be603d656f094f972d52304eaaffaccc984a4d0c", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=939c93208c306596d84f632acb0245542f3d46aa", "patch": "@@ -77,7 +77,6 @@\n #![feature(allocator_api)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n-#![feature(box_into_raw_non_null)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]"}, {"sha": "dd225808878e955c1b0bfda89b15594171d0b3d2", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=939c93208c306596d84f632acb0245542f3d46aa", "patch": "@@ -324,11 +324,9 @@ impl<T> Rc<T> {\n         // pointers, which ensures that the weak destructor never frees\n         // the allocation while the strong destructor is running, even\n         // if the weak pointer is stored inside the strong one.\n-        Self::from_inner(Box::into_raw_non_null(box RcBox {\n-            strong: Cell::new(1),\n-            weak: Cell::new(1),\n-            value,\n-        }))\n+        Self::from_inner(\n+            Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),\n+        )\n     }\n \n     /// Constructs a new `Rc` with uninitialized contents.\n@@ -662,6 +660,7 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// ```\n     /// #![feature(rc_into_raw_non_null)]\n+    /// #![allow(deprecated)]\n     ///\n     /// use std::rc::Rc;\n     ///\n@@ -671,6 +670,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert_eq!(deref, \"hello\");\n     /// ```\n     #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n+    #[rustc_deprecated(since = \"1.44.0\", reason = \"use `Rc::into_raw` instead\")]\n     #[inline]\n     pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n         // safe because Rc guarantees its pointer is non-null"}, {"sha": "cb660b476c4dfef32d1869664a7034e96a7d1020", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939c93208c306596d84f632acb0245542f3d46aa/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=939c93208c306596d84f632acb0245542f3d46aa", "patch": "@@ -325,7 +325,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data,\n         };\n-        Self::from_inner(Box::into_raw_non_null(x))\n+        Self::from_inner(Box::leak(x).into())\n     }\n \n     /// Constructs a new `Arc` with uninitialized contents.\n@@ -659,6 +659,7 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// ```\n     /// #![feature(rc_into_raw_non_null)]\n+    /// #![allow(deprecated)]\n     ///\n     /// use std::sync::Arc;\n     ///\n@@ -668,6 +669,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(deref, \"hello\");\n     /// ```\n     #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n+    #[rustc_deprecated(since = \"1.44.0\", reason = \"use `Arc::into_raw` instead\")]\n     #[inline]\n     pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n         // safe because Arc guarantees its pointer is non-null"}]}