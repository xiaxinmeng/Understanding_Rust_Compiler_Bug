{"sha": "834a3bf49c9e6cc422a0028926654d46dc5749ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNGEzYmY0OWM5ZTZjYzQyMmEwMDI4OTI2NjU0ZDQ2ZGM1NzQ5YmE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-17T18:45:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:29:35Z"}, "message": "[WIP]", "tree": {"sha": "c9c01802d013c7a734dbe03af24bde3b62927fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c01802d013c7a734dbe03af24bde3b62927fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/834a3bf49c9e6cc422a0028926654d46dc5749ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/834a3bf49c9e6cc422a0028926654d46dc5749ba", "html_url": "https://github.com/rust-lang/rust/commit/834a3bf49c9e6cc422a0028926654d46dc5749ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/834a3bf49c9e6cc422a0028926654d46dc5749ba/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "641a210ff688d8101688b32650d09c270d381b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/641a210ff688d8101688b32650d09c270d381b02", "html_url": "https://github.com/rust-lang/rust/commit/641a210ff688d8101688b32650d09c270d381b02"}], "stats": {"total": 147, "additions": 133, "deletions": 14}, "files": [{"sha": "e51f257f6b46a4924b0c49c4c425add01a6c2b80", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 115, "deletions": 14, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/834a3bf49c9e6cc422a0028926654d46dc5749ba/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834a3bf49c9e6cc422a0028926654d46dc5749ba/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=834a3bf49c9e6cc422a0028926654d46dc5749ba", "patch": "@@ -117,22 +117,123 @@ impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsiz\n fn take_f32(_f: f32) {}\n fn take_unique(_u: Unique<()>) {}\n \n-fn checked_div_i128(lhs: i128, rhs: i128) -> Option<i128> {\n-    if rhs == 0 || (lhs == -170141183460469231731687303715884105728 && rhs == -1) {\n-        None\n-    } else {\n-        Some(unsafe { intrinsics::unchecked_div(lhs, rhs) })\n+fn main() {\n+    take_unique(Unique {\n+        pointer: 0 as *const (),\n+        _marker: PhantomData,\n+    });\n+    take_f32(0.1);\n+\n+    //return;\n+\n+    unsafe {\n+        printf(\"Hello %s\\n\\0\" as *const str as *const i8, \"printf\\0\" as *const str as *const i8);\n+\n+        let hello: &[u8] = b\"Hello\\0\" as &[u8; 6];\n+        let ptr: *const u8 = hello as *const [u8] as *const u8;\n+        puts(ptr);\n+\n+        let world: Box<&str> = box \"World!\\0\";\n+        puts(*world as *const str as *const u8);\n+        world as Box<SomeTrait>;\n+\n+        assert_eq!(intrinsics::bitreverse(0b10101000u8), 0b00010101u8);\n+\n+        assert_eq!(intrinsics::bswap(0xabu8), 0xabu8);\n+        assert_eq!(intrinsics::bswap(0xddccu16), 0xccddu16);\n+        assert_eq!(intrinsics::bswap(0xffee_ddccu32), 0xccdd_eeffu32);\n+        assert_eq!(intrinsics::bswap(0x1234_5678_ffee_ddccu64), 0xccdd_eeff_7856_3412u64);\n+\n+        assert_eq!(intrinsics::size_of_val(hello) as u8, 6);\n+\n+        let chars = &['C', 'h', 'a', 'r', 's'];\n+        let chars = chars as &[char];\n+        assert_eq!(intrinsics::size_of_val(chars) as u8, 4 * 5);\n+\n+        let a: &dyn SomeTrait = &\"abc\\0\";\n+        a.object_safe();\n+\n+        assert_eq!(intrinsics::size_of_val(a) as u8, 16);\n+        assert_eq!(intrinsics::size_of_val(&0u32) as u8, 4);\n+\n+        assert_eq!(intrinsics::min_align_of::<u16>() as u8, 2);\n+        assert_eq!(intrinsics::min_align_of_val(&a) as u8, intrinsics::min_align_of::<&str>() as u8);\n+\n+        assert!(!intrinsics::needs_drop::<u8>());\n+        assert!(intrinsics::needs_drop::<NoisyDrop>());\n+\n+        Unique {\n+            pointer: 0 as *const &str,\n+            _marker: PhantomData,\n+        } as Unique<dyn SomeTrait>;\n+\n+        struct MyDst<T: ?Sized>(T);\n+\n+        intrinsics::size_of_val(&MyDst([0u8; 4]) as &MyDst<[u8]>);\n+\n+        struct Foo {\n+            x: u8,\n+            y: !,\n+        }\n+\n+        unsafe fn zeroed<T>() -> T {\n+            intrinsics::init::<T>()\n+        }\n+\n+        unsafe fn uninitialized<T>() -> T {\n+            MaybeUninit { uninit: () }.value\n+        }\n+\n+        zeroed::<(u8, u8)>();\n+        #[allow(unreachable_code)]\n+        {\n+            if false {\n+                zeroed::<!>();\n+                zeroed::<Foo>();\n+                uninitialized::<Foo>();\n+            }\n+        }\n     }\n-}\n \n-fn checked_div_u128(lhs: u128, rhs: u128) -> Option<u128> {\n-    match rhs {\n-        0 => None,\n-        rhs => Some(unsafe { intrinsics::unchecked_div(lhs, rhs) })\n+    let _ = box NoisyDrop {\n+        text: \"Boxed outer got dropped!\\0\",\n+        inner: NoisyDropInner,\n+    } as Box<SomeTrait>;\n+\n+    const FUNC_REF: Option<fn()> = Some(main);\n+    match FUNC_REF {\n+        Some(_) => {},\n+        None => assert!(false),\n     }\n-}\n \n-fn main() {\n-    checked_div_i128(0i128, 2i128);\n-    checked_div_u128(0u128, 2u128);\n+    match Ordering::Less {\n+        Ordering::Less => {},\n+        _ => assert!(false),\n+    }\n+\n+    [NoisyDropInner, NoisyDropInner];\n+\n+    let x = &[0u32, 42u32] as &[u32];\n+    match x {\n+        [] => assert_eq!(0u32, 1),\n+        [_, ref y..] => assert_eq!(&x[1] as *const u32 as usize, &y[0] as *const u32 as usize),\n+    }\n+\n+    assert_eq!(((|()| 42u8) as fn(()) -> u8)(()), 42);\n+\n+    extern {\n+        #[linkage = \"weak\"]\n+        static ABC: *const u8;\n+    }\n+\n+    {\n+        extern {\n+            #[linkage = \"weak\"]\n+            static ABC: *const u8;\n+        }\n+    }\n+\n+    unsafe { assert_eq!(ABC as usize, 0); }\n+\n+    &mut (|| Some(0 as *const ())) as &mut FnMut() -> Option<*const ()>;\n }"}, {"sha": "a67ca2f79c7a3bb9e22831a1b338a81807f3f751", "filename": "example/std_example.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/834a3bf49c9e6cc422a0028926654d46dc5749ba/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834a3bf49c9e6cc422a0028926654d46dc5749ba/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=834a3bf49c9e6cc422a0028926654d46dc5749ba", "patch": "@@ -1,7 +1,25 @@\n #![feature(core_intrinsics)]\n \n use std::io::Write;\n+use std::intrinsics;\n+\n+fn checked_div_i128(lhs: i128, rhs: i128) -> Option<i128> {\n+    if rhs == 0 || (lhs == -170141183460469231731687303715884105728 && rhs == -1) {\n+        None\n+    } else {\n+        Some(unsafe { intrinsics::unchecked_div(lhs, rhs) })\n+    }\n+}\n+\n+fn checked_div_u128(lhs: u128, rhs: u128) -> Option<u128> {\n+    match rhs {\n+        0 => None,\n+        rhs => Some(unsafe { intrinsics::unchecked_div(lhs, rhs) })\n+    }\n+}\n \n fn main() {\n+    checked_div_i128(0i128, 2i128);\n+    checked_div_u128(0u128, 2u128);\n     assert_eq!(1u128 + 2, 3);\n }"}]}