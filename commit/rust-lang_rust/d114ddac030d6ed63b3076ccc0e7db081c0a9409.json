{"sha": "d114ddac030d6ed63b3076ccc0e7db081c0a9409", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMTRkZGFjMDMwZDZlZDYzYjMwNzZjY2MwZTdkYjA4MWMwYTk0MDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-27T06:16:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-27T06:16:14Z"}, "message": "auto merge of #15963 : nham/rust/moar_15294, r=alexcrichton\n\nImplements PartialEq/Eq/Clone/Hash/FromIterator/Extendable for SmallIntMap and Clone/Show for TrieMap/TrieSet. cc #15294", "tree": {"sha": "07123ded4a678b1be386d2756f4456f5122be60a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07123ded4a678b1be386d2756f4456f5122be60a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d114ddac030d6ed63b3076ccc0e7db081c0a9409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d114ddac030d6ed63b3076ccc0e7db081c0a9409", "html_url": "https://github.com/rust-lang/rust/commit/d114ddac030d6ed63b3076ccc0e7db081c0a9409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d114ddac030d6ed63b3076ccc0e7db081c0a9409/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2de3fad72c7e845e0ba8c29d68003b163161576d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2de3fad72c7e845e0ba8c29d68003b163161576d", "html_url": "https://github.com/rust-lang/rust/commit/2de3fad72c7e845e0ba8c29d68003b163161576d"}, {"sha": "fadbc0b88bb39ac42aa4874e4a90df53a778ef59", "url": "https://api.github.com/repos/rust-lang/rust/commits/fadbc0b88bb39ac42aa4874e4a90df53a778ef59", "html_url": "https://github.com/rust-lang/rust/commit/fadbc0b88bb39ac42aa4874e4a90df53a778ef59"}], "stats": {"total": 196, "additions": 194, "deletions": 2}, "files": [{"sha": "a60f80b9aef2b27974c406e5362dc99b47956dcb", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 100, "deletions": 1, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d114ddac030d6ed63b3076ccc0e7db081c0a9409/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d114ddac030d6ed63b3076ccc0e7db081c0a9409/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=d114ddac030d6ed63b3076ccc0e7db081c0a9409", "patch": "@@ -24,6 +24,8 @@ use core::mem::replace;\n use {Collection, Mutable, Map, MutableMap, MutableSeq};\n use {vec, slice};\n use vec::Vec;\n+use hash;\n+use hash::Hash;\n \n /// A map optimized for small integer keys.\n ///\n@@ -58,6 +60,7 @@ use vec::Vec;\n /// months.clear();\n /// assert!(months.is_empty());\n /// ```\n+#[deriving(PartialEq, Eq)]\n pub struct SmallIntMap<T> {\n     v: Vec<Option<T>>,\n }\n@@ -151,6 +154,27 @@ impl<V> Default for SmallIntMap<V> {\n     fn default() -> SmallIntMap<V> { SmallIntMap::new() }\n }\n \n+impl<V:Clone> Clone for SmallIntMap<V> {\n+    #[inline]\n+    fn clone(&self) -> SmallIntMap<V> {\n+        SmallIntMap { v: self.v.clone() }\n+    }\n+\n+    #[inline]\n+    fn clone_from(&mut self, source: &SmallIntMap<V>) {\n+        self.v.reserve(source.v.len());\n+        for (i, w) in self.v.mut_iter().enumerate() {\n+            *w = source.v[i].clone();\n+        }\n+    }\n+}\n+\n+impl <S: hash::Writer, T: Hash<S>> Hash<S> for SmallIntMap<T> {\n+    fn hash(&self, state: &mut S) {\n+        self.v.hash(state)\n+    }\n+}\n+\n impl<V> SmallIntMap<V> {\n     /// Create an empty SmallIntMap.\n     ///\n@@ -362,6 +386,22 @@ impl<V: fmt::Show> fmt::Show for SmallIntMap<V> {\n     }\n }\n \n+impl<V> FromIterator<(uint, V)> for SmallIntMap<V> {\n+    fn from_iter<Iter: Iterator<(uint, V)>>(iter: Iter) -> SmallIntMap<V> {\n+        let mut map = SmallIntMap::new();\n+        map.extend(iter);\n+        map\n+    }\n+}\n+\n+impl<V> Extendable<(uint, V)> for SmallIntMap<V> {\n+    fn extend<Iter: Iterator<(uint, V)>>(&mut self, mut iter: Iter) {\n+        for (k, v) in iter {\n+            self.insert(k, v);\n+        }\n+    }\n+}\n+\n macro_rules! iterator {\n     (impl $name:ident -> $elem:ty, $getter:ident) => {\n         impl<'a, T> Iterator<$elem> for $name<'a, T> {\n@@ -446,8 +486,10 @@ pub type Values<'a, T> =\n #[cfg(test)]\n mod test_map {\n     use std::prelude::*;\n+    use vec::Vec;\n+    use hash;\n \n-    use {Map, MutableMap, Mutable};\n+    use {Map, MutableMap, Mutable, MutableSeq};\n     use super::SmallIntMap;\n \n     #[test]\n@@ -698,6 +740,63 @@ mod test_map {\n         assert!(map_str == \"{1: 2, 3: 4}\" || map_str == \"{3: 4, 1: 2}\");\n         assert_eq!(format!(\"{}\", empty), \"{}\".to_string());\n     }\n+\n+    #[test]\n+    fn test_clone() {\n+        let mut a = SmallIntMap::new();\n+\n+        a.insert(1, 'x');\n+        a.insert(4, 'y');\n+        a.insert(6, 'z');\n+\n+        assert!(a.clone() == a);\n+    }\n+\n+    #[test]\n+    fn test_eq() {\n+        let mut a = SmallIntMap::new();\n+        let mut b = SmallIntMap::new();\n+\n+        assert!(a == b);\n+        assert!(a.insert(0, 5i));\n+        assert!(a != b);\n+        assert!(b.insert(0, 4i));\n+        assert!(a != b);\n+        assert!(a.insert(5, 19));\n+        assert!(a != b);\n+        assert!(!b.insert(0, 5));\n+        assert!(a != b);\n+        assert!(b.insert(5, 19));\n+        assert!(a == b);\n+    }\n+\n+    #[test]\n+    fn test_hash() {\n+        let mut x = SmallIntMap::new();\n+        let mut y = SmallIntMap::new();\n+\n+        assert!(hash::hash(&x) == hash::hash(&y));\n+        x.insert(1, 'a');\n+        x.insert(2, 'b');\n+        x.insert(3, 'c');\n+\n+        y.insert(3, 'c');\n+        y.insert(2, 'b');\n+        y.insert(1, 'a');\n+\n+        assert!(hash::hash(&x) == hash::hash(&y));\n+    }\n+\n+    #[test]\n+    fn test_from_iter() {\n+        let xs: Vec<(uint, char)> = vec![(1u, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')];\n+\n+        let map: SmallIntMap<char> = xs.iter().map(|&x| x).collect();\n+\n+        for &(k, v) in xs.iter() {\n+            assert_eq!(map.find(&k), Some(&v));\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "1ac05fbd562ed35a3b6b258291cfdfad8849a972", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d114ddac030d6ed63b3076ccc0e7db081c0a9409/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d114ddac030d6ed63b3076ccc0e7db081c0a9409/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=d114ddac030d6ed63b3076ccc0e7db081c0a9409", "patch": "@@ -15,6 +15,8 @@ use core::prelude::*;\n \n use alloc::boxed::Box;\n use core::default::Default;\n+use core::fmt;\n+use core::fmt::Show;\n use core::mem::zeroed;\n use core::mem;\n use core::uint;\n@@ -31,6 +33,7 @@ static SIZE: uint = 1 << SHIFT;\n static MASK: uint = SIZE - 1;\n static NUM_CHUNKS: uint = uint::BITS / SHIFT;\n \n+#[deriving(Clone)]\n enum Child<T> {\n     Internal(Box<TrieNode<T>>),\n     External(uint, T),\n@@ -75,6 +78,7 @@ enum Child<T> {\n /// map.clear();\n /// assert!(map.is_empty());\n /// ```\n+#[deriving(Clone)]\n pub struct TrieMap<T> {\n     root: TrieNode<T>,\n     length: uint\n@@ -89,6 +93,19 @@ impl<T: PartialEq> PartialEq for TrieMap<T> {\n \n impl<T: Eq> Eq for TrieMap<T> {}\n \n+impl<T: Show> Show for TrieMap<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, \"{{\"));\n+\n+        for (i, (k, v)) in self.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}: {}\", k, *v));\n+        }\n+\n+        write!(f, \"}}\")\n+    }\n+}\n+\n impl<T> Collection for TrieMap<T> {\n     /// Return the number of elements in the map.\n     #[inline]\n@@ -500,11 +517,24 @@ impl<S: Writer, T: Hash<S>> Hash<S> for TrieMap<T> {\n /// set.clear();\n /// assert!(set.is_empty());\n /// ```\n-#[deriving(Hash, PartialEq, Eq)]\n+#[deriving(Clone, Hash, PartialEq, Eq)]\n pub struct TrieSet {\n     map: TrieMap<()>\n }\n \n+impl Show for TrieSet {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, \"{{\"));\n+\n+        for (i, x) in self.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}\", x));\n+        }\n+\n+        write!(f, \"}}\")\n+    }\n+}\n+\n impl Collection for TrieSet {\n     /// Return the number of elements in the set.\n     #[inline]\n@@ -673,6 +703,19 @@ struct TrieNode<T> {\n     children: [Child<T>, ..SIZE]\n }\n \n+impl<T:Clone> Clone for TrieNode<T> {\n+    #[inline]\n+    fn clone(&self) -> TrieNode<T> {\n+        let ch = &self.children;\n+        TrieNode {\n+            count: self.count,\n+             children: [ch[0].clone(), ch[1].clone(), ch[2].clone(), ch[3].clone(),\n+                        ch[4].clone(), ch[5].clone(), ch[6].clone(), ch[7].clone(),\n+                        ch[8].clone(), ch[9].clone(), ch[10].clone(), ch[11].clone(),\n+                        ch[12].clone(), ch[13].clone(), ch[14].clone(), ch[15].clone()]}\n+    }\n+}\n+\n impl<T> TrieNode<T> {\n     #[inline]\n     fn new() -> TrieNode<T> {\n@@ -1237,6 +1280,17 @@ mod test_map {\n         assert!(m_upper.iter().all(|(_, &x)| x == 0));\n     }\n \n+    #[test]\n+    fn test_clone() {\n+        let mut a = TrieMap::new();\n+\n+        a.insert(1, 'a');\n+        a.insert(2, 'b');\n+        a.insert(3, 'c');\n+\n+        assert!(a.clone() == a);\n+    }\n+\n     #[test]\n     fn test_eq() {\n         let mut a = TrieMap::new();\n@@ -1271,6 +1325,20 @@ mod test_map {\n \n       assert!(hash::hash(&x) == hash::hash(&y));\n     }\n+\n+    #[test]\n+    fn test_show() {\n+        let mut map = TrieMap::new();\n+        let empty: TrieMap<uint> = TrieMap::new();\n+\n+        map.insert(1, 'a');\n+        map.insert(2, 'b');\n+\n+        let map_str = format!(\"{}\", map);\n+\n+        assert!(map_str == \"{1: a, 2: b}\".to_string());\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_string());\n+    }\n }\n \n #[cfg(test)]\n@@ -1420,4 +1488,29 @@ mod test_set {\n             assert!(set.contains(x));\n         }\n     }\n+\n+    #[test]\n+    fn test_show() {\n+        let mut set = TrieSet::new();\n+        let empty = TrieSet::new();\n+\n+        set.insert(1);\n+        set.insert(2);\n+\n+        let set_str = format!(\"{}\", set);\n+\n+        assert!(set_str == \"{1, 2}\".to_string());\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_string());\n+    }\n+\n+    #[test]\n+    fn test_clone() {\n+        let mut a = TrieSet::new();\n+\n+        a.insert(1);\n+        a.insert(2);\n+        a.insert(3);\n+\n+        assert!(a.clone() == a);\n+    }\n }"}]}