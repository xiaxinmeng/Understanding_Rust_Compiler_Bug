{"sha": "62522def7409a233f5316546cd6bee91e812a039", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNTIyZGVmNzQwOWEyMzNmNTMxNjU0NmNkNmJlZTkxZTgxMmEwMzk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-20T20:55:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-20T20:55:56Z"}, "message": "Tidy up handling of unimplemented features. These are expected (if undesirable) sorts of error, we should handle better than \"backtrace and exit 2\".", "tree": {"sha": "5ac4085ee755b9c83bdd378d6460d4a57ebb0846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac4085ee755b9c83bdd378d6460d4a57ebb0846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62522def7409a233f5316546cd6bee91e812a039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62522def7409a233f5316546cd6bee91e812a039", "html_url": "https://github.com/rust-lang/rust/commit/62522def7409a233f5316546cd6bee91e812a039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62522def7409a233f5316546cd6bee91e812a039/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd33ad4b0b182fd28b93d0ec52c041b1a6ea110", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd33ad4b0b182fd28b93d0ec52c041b1a6ea110", "html_url": "https://github.com/rust-lang/rust/commit/0bd33ad4b0b182fd28b93d0ec52c041b1a6ea110"}], "stats": {"total": 144, "additions": 90, "deletions": 54}, "files": [{"sha": "cef66f77d7ceac1aaa35ccab66d03d1dae9421de", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=62522def7409a233f5316546cd6bee91e812a039", "patch": "@@ -238,7 +238,7 @@ let _ =\n ;;\n \n \n-let (crate:Ast.crate) =\n+let parse_input_crate _ : Ast.crate =\n   Session.time_inner \"parse\" sess\n     begin\n       fun _ ->\n@@ -292,6 +292,15 @@ let (crate:Ast.crate) =\n     end\n ;;\n \n+let (crate:Ast.crate) =\n+  try\n+    parse_input_crate()\n+  with\n+      Not_implemented (ido, str) ->\n+        Session.report_err sess ido str;\n+        { node = Ast.empty_crate'; id = Common.Node 0 }\n+;;\n+\n exit_if_failed ()\n ;;\n \n@@ -399,9 +408,16 @@ let main_pipeline _ =\n           exit_if_failed ()\n ;;\n \n-if sess.Session.sess_alt_backend\n-then Glue.alt_pipeline sess sem_cx crate\n-else main_pipeline ()\n+try\n+  if sess.Session.sess_alt_backend\n+  then Glue.alt_pipeline sess sem_cx crate\n+  else main_pipeline ()\n+with\n+    Not_implemented (ido, str) ->\n+      Session.report_err sess ido str\n+;;\n+\n+exit_if_failed ()\n ;;\n \n if sess.Session.sess_report_timing"}, {"sha": "210dd7be33a505fce2949996ee5e66e7e814aeb7", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=62522def7409a233f5316546cd6bee91e812a039", "patch": "@@ -101,6 +101,19 @@ let filename_of (fo:filename option) : filename =\n     | Some f -> f\n ;;\n \n+let report_err sess ido str =\n+  let spano = match ido with\n+      None -> None\n+    | Some id -> get_span sess id\n+  in\n+    match spano with\n+        None ->\n+          fail sess \"Error: %s\\n%!\" str\n+      | Some span ->\n+          fail sess \"%s:E:Error: %s\\n%!\"\n+            (string_of_span span) str\n+;;\n+\n (*\n  * Local Variables:\n  * fill-column: 78;"}, {"sha": "76e6e306195db2ff75934ef444b74f1909665faa", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=62522def7409a233f5316546cd6bee91e812a039", "patch": "@@ -457,6 +457,18 @@ and crate' =\n and crate = crate' identified\n ;;\n \n+let empty_crate' =\n+  { crate_items = ({ view_imports = Hashtbl.create 0;\n+                     view_exports = Hashtbl.create 0 },\n+                   Hashtbl.create 0);\n+    crate_meta = [||];\n+    crate_auth = Hashtbl.create 0;\n+    crate_required = Hashtbl.create 0;\n+    crate_required_syms = Hashtbl.create 0;\n+    crate_main = None;\n+    crate_files = Hashtbl.create 0 }\n+;;\n+\n (*\n  * NB: names can only be type-parametric in their *last* path-entry.\n  * All path-entries before that must be ident or idx (non-parametric)."}, {"sha": "5d3a99ef962d77ba6f99b92287bd5f626c4afd55", "filename": "src/boot/fe/cexp.ml", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Ffe%2Fcexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Ffe%2Fcexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fcexp.ml?ref=62522def7409a233f5316546cd6bee91e812a039", "patch": "@@ -605,14 +605,7 @@ let with_err_handling sess thunk =\n                (Session.string_of_pos pos) cx)\n           ps.pstate_ctxt;\n         let apos = lexpos ps in\n-          span ps apos apos\n-            { Ast.crate_items = (Item.empty_view, Hashtbl.create 0);\n-              Ast.crate_meta = [||];\n-              Ast.crate_auth = Hashtbl.create 0;\n-              Ast.crate_required = Hashtbl.create 0;\n-              Ast.crate_required_syms = Hashtbl.create 0;\n-              Ast.crate_main = None;\n-              Ast.crate_files = Hashtbl.create 0 }\n+          span ps apos apos Ast.empty_crate'\n ;;\n \n "}, {"sha": "c885c7a1917d714999d56b96e7e5d79dbc85ae69", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=62522def7409a233f5316546cd6bee91e812a039", "patch": "@@ -330,8 +330,7 @@ let trans_crate\n \n       | Ast.TY_tag _ | Ast.TY_iso _ | Ast.TY_idx _\n       | Ast.TY_obj _ | Ast.TY_type ->\n-          raise (Not_implemented\n-                   (\"trans_ty_full \" ^ (Ast.sprintf_ty() ty)))\n+          Common.unimpl None \"LLVM type translation for: %a\" Ast.sprintf_ty ty\n \n       | Ast.TY_param _ | Ast.TY_named _ ->\n           bug () \"unresolved type in lltrans\"\n@@ -566,9 +565,10 @@ let trans_crate\n             ()  (* Modules simply contain other items that are translated\n                    on their own. *)\n \n-        | _ -> raise (Not_implemented\n-                        (\"declare_mod_item \" ^\n-                           (Ast.sprintf_mod_item() (name,mod_item))))\n+        | _ ->\n+            Common.unimpl (Some id)\n+              \"LLVM module declaration for: %a\"\n+              Ast.sprintf_mod_item (name, mod_item)\n   in\n \n   let trans_fn\n@@ -715,12 +715,15 @@ let trans_crate\n                 match referent with\n                     Semant.DEFN_slot _ -> Hashtbl.find slot_to_llvalue id\n                   | Semant.DEFN_item _ -> Hashtbl.find llitems id\n-                  | _ -> raise\n-                      (Not_implemented\n-                         (\"referent of \" ^ (Ast.sprintf_lval() lval)))\n+                  | _ ->\n+                      Common.unimpl (Some id)\n+                        \"LLVM base-referent translation of: %a\"\n+                        Ast.sprintf_lval lval\n               end\n-          | Ast.LVAL_ext _ -> raise\n-              (Not_implemented (\"trans_lval \" ^ (Ast.sprintf_lval() lval)))\n+          | Ast.LVAL_ext _ ->\n+              Common.unimpl (Some (Semant.lval_base_id lval))\n+                        \"LLVM lval translation of: %a\"\n+                        Ast.sprintf_lval lval\n       in\n \n       let trans_atom (atom:Ast.atom) : Llvm.llvalue =\n@@ -746,8 +749,10 @@ let trans_crate\n           | Ast.BINOP_div -> Llvm.build_sdiv lllhs llrhs llid llbuilder\n           | Ast.BINOP_mod -> Llvm.build_srem lllhs llrhs llid llbuilder\n \n-          | _ -> raise\n-              (Not_implemented (\"build_binop \" ^ (Ast.sprintf_binop() op)))\n+          | _ ->\n+              Common.unimpl None\n+                \"LLVM binop trranslation of: %a\"\n+                Ast.sprintf_binop op\n       in\n \n       let trans_binary_expr\n@@ -770,9 +775,10 @@ let trans_crate\n           build_binop op lllhs llrhs\n       in\n \n-      let trans_unary_expr e = raise\n-        (Not_implemented (\"trans_unary_expr \" ^\n-                            (Ast.sprintf_expr() (Ast.EXPR_unary e))))\n+      let trans_unary_expr e =\n+        Common.unimpl None\n+          \"LLVM unary-expression translation of: %a\"\n+          Ast.sprintf_expr (Ast.EXPR_unary e)\n       in\n \n       let trans_expr (expr:Ast.expr) : Llvm.llvalue =\n@@ -945,8 +951,10 @@ let trans_crate\n               | Ast.STMT_decl _ ->\n                   trans_tail ()\n \n-              | _ -> raise (Not_implemented\n-                              (\"trans_stmts \" ^ (Ast.sprintf_stmt() head)))\n+              | _ ->\n+                  Common.unimpl (Some head.id)\n+                    \"LLVM statement translation of: %a\"\n+                    Ast.sprintf_stmt head\n \n     (* \n      * Translates an AST block to one or more LLVM basic blocks and returns"}, {"sha": "41d28d322479c13e803b802d3777c3a190aab825", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=62522def7409a233f5316546cd6bee91e812a039", "patch": "@@ -261,23 +261,10 @@ let new_ctxt sess abi crate =\n   }\n ;;\n \n-let report_err cx ido str =\n-  let sess = cx.ctxt_sess in\n-  let spano = match ido with\n-      None -> None\n-    | Some id -> (Session.get_span sess id)\n-  in\n-    match spano with\n-        None ->\n-          Session.fail sess \"Error: %s\\n%!\" str\n-      | Some span ->\n-          Session.fail sess \"%s:E:Error: %s\\n%!\"\n-            (Session.string_of_span span) str\n-;;\n \n let bugi (cx:ctxt) (i:node_id) =\n   let k s =\n-    report_err cx (Some i) s;\n+    Session.report_err cx.ctxt_sess (Some i) s;\n     failwith s\n   in Printf.ksprintf k\n ;;\n@@ -1857,7 +1844,8 @@ let run_passes\n         Session.time_inner name sess\n           (fun _ -> Array.iteri do_pass passes)\n       with\n-          Semant_err (ido, str) -> report_err cx ido str\n+          Semant_err (ido, str) ->\n+            Session.report_err cx.ctxt_sess ido str\n ;;\n \n (* Rust type -> IL type conversion. *)"}, {"sha": "005db095fff9754a71a5750460e41e66dac64bd5", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=62522def7409a233f5316546cd6bee91e812a039", "patch": "@@ -950,15 +950,14 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n     }\n   in\n \n-  try\n-    Walk.walk_crate\n-      (Walk.path_managing_visitor path\n-        (Semant.mod_item_logging_visitor\n-          cx\n-          cx.Semant.ctxt_sess.Session.sess_log_type log 0 path\n-          (visitor cx Walk.empty_visitor)))\n-      crate\n-  with Common.Semant_err (ido, str) -> Semant.report_err cx ido str;\n+  let passes =\n+    [|\n+      (visitor cx Walk.empty_visitor)\n+    |]\n+  in\n+  let log_flag = cx.Semant.ctxt_sess.Session.sess_log_type in\n+    Semant.run_passes cx \"type\" path passes log_flag log crate\n+;;\n \n (*\n  * Local Variables:"}, {"sha": "58caf78d0f96a5684cf2e879a57a5fe62e86bfef", "filename": "src/boot/util/common.ml", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Futil%2Fcommon.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62522def7409a233f5316546cd6bee91e812a039/src%2Fboot%2Futil%2Fcommon.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Futil%2Fcommon.ml?ref=62522def7409a233f5316546cd6bee91e812a039", "patch": "@@ -26,7 +26,7 @@ let bug _ =\n ;;\n \n (* TODO: On some joyous day, remove me. *)\n-exception Not_implemented of string\n+exception Not_implemented of ((node_id option) * string)\n ;;\n \n exception Semant_err of ((node_id option) * string)\n@@ -39,6 +39,13 @@ let err (idopt:node_id option) =\n     Printf.ksprintf k\n ;;\n \n+let unimpl (idopt:node_id option) =\n+  let k s =\n+    raise (Not_implemented (idopt, \"unimplemented \" ^ s))\n+  in\n+    Printf.ksprintf k\n+;;\n+\n (* Some ubiquitous low-level types. *)\n \n type target ="}]}