{"sha": "1f1746e2d35692bed22fa0c6108b09a736cd65cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMTc0NmUyZDM1NjkyYmVkMjJmYTBjNjEwOGIwOWE3MzZjZDY1Y2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-15T09:14:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-15T09:14:27Z"}, "message": "Implement intrinsic min_align_of_val", "tree": {"sha": "518b800f8ee0354ccd00892c2978221b9291f13e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/518b800f8ee0354ccd00892c2978221b9291f13e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f1746e2d35692bed22fa0c6108b09a736cd65cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f1746e2d35692bed22fa0c6108b09a736cd65cb", "html_url": "https://github.com/rust-lang/rust/commit/1f1746e2d35692bed22fa0c6108b09a736cd65cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f1746e2d35692bed22fa0c6108b09a736cd65cb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e87a4f16d49411a0d432f0338cb5e0885f3af2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e87a4f16d49411a0d432f0338cb5e0885f3af2e", "html_url": "https://github.com/rust-lang/rust/commit/6e87a4f16d49411a0d432f0338cb5e0885f3af2e"}], "stats": {"total": 87, "additions": 62, "deletions": 25}, "files": [{"sha": "544f2eceac0fad459ad4233cc453cf49fdf56a31", "filename": "examples/mini_core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1746e2d35692bed22fa0c6108b09a736cd65cb/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1746e2d35692bed22fa0c6108b09a736cd65cb/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=1f1746e2d35692bed22fa0c6108b09a736cd65cb", "patch": "@@ -222,6 +222,8 @@ pub mod intrinsics {\n         pub fn abort() -> !;\n         pub fn size_of<T>() -> usize;\n         pub fn size_of_val<T: ?::Sized>(val: &T) -> usize;\n+        pub fn min_align_of<T>() -> usize;\n+        pub fn min_align_of_val<T: ?::Sized>(val: &T) -> usize;\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn uninit<T>() -> T;"}, {"sha": "ff7d7975e27674e1e82951d81dda7a3d9e7788be", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1f1746e2d35692bed22fa0c6108b09a736cd65cb/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1746e2d35692bed22fa0c6108b09a736cd65cb/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=1f1746e2d35692bed22fa0c6108b09a736cd65cb", "patch": "@@ -86,6 +86,22 @@ fn start<T: Termination + 'static>(\n static mut NUM: u8 = 6 * 7;\n static NUM_REF: &'static u8 = unsafe { &NUM };\n \n+macro_rules! assert {\n+    ($e:expr) => {\n+        if !$e {\n+            panic(&(stringify!(! $e), file!(), line!(), 0));\n+        }\n+    };\n+}\n+\n+macro_rules! assert_eq {\n+    ($l:expr, $r: expr) => {\n+        if $l != $r {\n+            panic(&(stringify!($l != $r), file!(), line!(), 0));\n+        }\n+    }\n+}\n+\n fn main() {\n     unsafe {\n         let hello: &[u8] = b\"Hello\\0\" as &[u8; 6];\n@@ -99,34 +115,23 @@ fn main() {\n             puts(*world as *const str as *const u8);\n         }\n \n-        if intrinsics::size_of_val(hello) as u8 != 6 {\n-            panic(&(\"\", \"\", 0, 0));\n-        };\n+        assert_eq!(intrinsics::size_of_val(hello) as u8, 6);\n \n         let chars = &['C', 'h', 'a', 'r', 's'];\n         let chars = chars as &[char];\n-        if intrinsics::size_of_val(chars) as u8 != 4 * 5 {\n-            panic(&(\"\", \"\", 0, 0));\n-        }\n+        assert_eq!(intrinsics::size_of_val(chars) as u8, 4 * 5);\n \n         let a: &dyn SomeTrait = &\"abc\\0\";\n         a.object_safe();\n \n-        if intrinsics::size_of_val(a) as u8 != 16 {\n-            panic(&(\"\", \"\", 0, 0));\n-        }\n+        assert_eq!(intrinsics::size_of_val(a) as u8, 16);\n+        assert_eq!(intrinsics::size_of_val(&0u32) as u8, 4);\n \n-        if intrinsics::size_of_val(&0u32) as u8 != 4 {\n-            panic(&(\"\", \"\", 0, 0));\n-        }\n+        assert_eq!(intrinsics::min_align_of::<u16>() as u8, 2);\n+        assert_eq!(intrinsics::min_align_of_val(&a) as u8, intrinsics::min_align_of::<&str>() as u8);\n \n-        if intrinsics::needs_drop::<u8>() {\n-            panic(&(\"\", \"\", 0, 0));\n-        }\n-\n-        if !intrinsics::needs_drop::<NoisyDrop>() {\n-            panic(&(\"\", \"\", 0, 0));\n-        }\n+        assert!(!intrinsics::needs_drop::<u8>());\n+        assert!(intrinsics::needs_drop::<NoisyDrop>());\n     }\n \n     let _ = NoisyDrop {"}, {"sha": "21886218962092344d220e13043250354a9964e8", "filename": "src/abi.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f1746e2d35692bed22fa0c6108b09a736cd65cb/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1746e2d35692bed22fa0c6108b09a736cd65cb/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=1f1746e2d35692bed22fa0c6108b09a736cd65cb", "patch": "@@ -675,18 +675,34 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     };\n                     ret.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n                 }\n-                \"type_id\" => {\n-                    assert_eq!(args.len(), 0);\n-                    let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n-                    let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n-                    ret.write_cvalue(fx, type_id);\n-                }\n                 \"min_align_of\" => {\n                     assert_eq!(args.len(), 0);\n                     let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n                     let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n                     ret.write_cvalue(fx, min_align);\n                 }\n+                \"min_align_of_val\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let layout = fx.layout_of(substs.type_at(0));\n+                    let align = match &layout.ty.sty {\n+                        _ if !layout.is_unsized() => {\n+                            fx.bcx.ins().iconst(fx.module.pointer_type(), layout.align.abi() as i64)\n+                        }\n+                        ty::Slice(elem) => {\n+                            let align = fx.layout_of(elem).align.abi() as i64;\n+                            fx.bcx.ins().iconst(fx.module.pointer_type(), align)\n+                        }\n+                        ty::Dynamic(..) => crate::vtable::min_align_of_obj(fx, args[0]),\n+                        ty => unimplemented!(\"min_align_of_val for {:?}\", ty),\n+                    };\n+                    ret.write_cvalue(fx, CValue::ByVal(align, usize_layout));\n+                }\n+                \"type_id\" => {\n+                    assert_eq!(args.len(), 0);\n+                    let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n+                    let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n+                    ret.write_cvalue(fx, type_id);\n+                }\n                 _ if intrinsic.starts_with(\"unchecked_\") => {\n                     assert_eq!(args.len(), 2);\n                     let bin_op = match intrinsic {"}, {"sha": "da9c3765588c4230ff534bdaae878582f9ee9313", "filename": "src/vtable.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f1746e2d35692bed22fa0c6108b09a736cd65cb/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1746e2d35692bed22fa0c6108b09a736cd65cb/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=1f1746e2d35692bed22fa0c6108b09a736cd65cb", "patch": "@@ -20,6 +20,20 @@ pub fn size_of_obj<'a, 'tcx: 'a>(\n     )\n }\n \n+pub fn min_align_of_obj<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    val: CValue<'tcx>,\n+) -> Value {\n+    let (_ptr, vtable) = val.load_value_pair(fx);\n+    let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n+    fx.bcx.ins().load(\n+        pointer_ty(fx.tcx),\n+        MemFlags::new(),\n+        vtable,\n+        (ALIGN_INDEX * usize_size) as i32,\n+    )\n+}\n+\n pub fn get_ptr_and_method_ref<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     arg: CValue<'tcx>,"}]}