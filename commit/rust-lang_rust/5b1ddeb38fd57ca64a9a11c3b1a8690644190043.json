{"sha": "5b1ddeb38fd57ca64a9a11c3b1a8690644190043", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMWRkZWIzOGZkNTdjYTY0YTlhMTFjM2IxYTg2OTA2NDQxOTAwNDM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-05T20:56:02Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-05T20:56:02Z"}, "message": "Rollup merge of #25114 - michaelsproul:error-markdown, r=alexcrichton\n\nI've added backticks in a few places to ensure correct highlighting in the HTML output (cf #25062). \r\n\r\nOther changes include:\r\n\r\n* Remove use of `1.` and `2.` separated by a code block as this was being rendered as two separate lists beginning at 1.\r\n* Correct the spelling of successful in two places (from \"succesful\").\r\n\r\nOther changes are a result of reflowing text to stay within the 80 character limit.", "tree": {"sha": "a0eaf1e6c6e4160a60be222116626bac78e321d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0eaf1e6c6e4160a60be222116626bac78e321d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b1ddeb38fd57ca64a9a11c3b1a8690644190043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1ddeb38fd57ca64a9a11c3b1a8690644190043", "html_url": "https://github.com/rust-lang/rust/commit/5b1ddeb38fd57ca64a9a11c3b1a8690644190043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b1ddeb38fd57ca64a9a11c3b1a8690644190043/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aaafeaf797fa7cb1157023fcd3f1eccc1deb3de", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aaafeaf797fa7cb1157023fcd3f1eccc1deb3de", "html_url": "https://github.com/rust-lang/rust/commit/8aaafeaf797fa7cb1157023fcd3f1eccc1deb3de"}, {"sha": "68f5c8475a09bf000d4a0870338f7457cd4dd1cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f5c8475a09bf000d4a0870338f7457cd4dd1cc", "html_url": "https://github.com/rust-lang/rust/commit/68f5c8475a09bf000d4a0870338f7457cd4dd1cc"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "19d2df0b486cf8acb440e6cd790e1aaaf63140ce", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5b1ddeb38fd57ca64a9a11c3b1a8690644190043/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1ddeb38fd57ca64a9a11c3b1a8690644190043/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=5b1ddeb38fd57ca64a9a11c3b1a8690644190043", "patch": "@@ -37,7 +37,7 @@ An example of an empty type is `enum Empty { }`.\n E0003: r##\"\n Not-a-Number (NaN) values cannot be compared for equality and hence can never\n match the input to a match expression. To match against NaN values, you should\n-instead use the `is_nan` method in a guard, as in: x if x.is_nan() => ...\n+instead use the `is_nan` method in a guard, as in: `x if x.is_nan() => ...`\n \"##,\n \n E0004: r##\"\n@@ -71,7 +71,7 @@ failure.\n E0007: r##\"\n This error indicates that the bindings in a match arm would require a value to\n be moved into more than one location, thus violating unique ownership. Code like\n-the following is invalid as it requires the entire Option<String> to be moved\n+the following is invalid as it requires the entire `Option<String>` to be moved\n into a variable called `op_string` while simultaneously requiring the inner\n String to be moved into a variable called `s`.\n \n@@ -99,10 +99,10 @@ match Some(\"hi\".to_string()) {\n }\n ```\n \n-The variable `s` has type String, and its use in the guard is as a variable of\n-type String. The guard code effectively executes in a separate scope to the body\n-of the arm, so the value would be moved into this anonymous scope and therefore\n-become unavailable in the body of the arm. Although this example seems\n+The variable `s` has type `String`, and its use in the guard is as a variable of\n+type `String`. The guard code effectively executes in a separate scope to the\n+body of the arm, so the value would be moved into this anonymous scope and\n+therefore become unavailable in the body of the arm. Although this example seems\n innocuous, the problem is most clear when considering functions that take their\n argument by value.\n \n@@ -140,7 +140,8 @@ match x {\n ```\n \n You have two solutions:\n-1. Bind the pattern's values the same way:\n+\n+Solution #1: Bind the pattern's values the same way.\n \n ```\n struct X { x: (), }\n@@ -153,8 +154,9 @@ match x {\n }\n ```\n \n-2. Implement the `Copy` trait for the X structure (however, please\n-keep in mind that the first solution should be preferred!):\n+Solution #2: Implement the `Copy` trait for the `X` structure.\n+\n+However, please keep in mind that the first solution should be preferred.\n \n ```\n #[derive(Clone, Copy)]\n@@ -258,11 +260,13 @@ functions via FFI or marked as unsafe, is potentially dangerous and disallowed\n by safety checks. As such, those safety checks can be temporarily relaxed by\n wrapping the unsafe instructions inside an `unsafe` block. For instance:\n \n+```\n unsafe fn f() { return; }\n \n fn main() {\n     unsafe { f(); }\n }\n+```\n \n See also http://doc.rust-lang.org/book/unsafe.html\n \"##,\n@@ -313,8 +317,8 @@ it around as usual.\n \n E0162: r##\"\n An if-let pattern attempts to match the pattern, and enters the body if the\n-match was succesful. If the match is irrefutable (when it cannot fail to match),\n-use a regular `let`-binding instead. For instance:\n+match was successful. If the match is irrefutable (when it cannot fail to\n+match), use a regular `let`-binding instead. For instance:\n \n ```\n struct Irrefutable(i32);\n@@ -334,8 +338,8 @@ foo(x);\n \n E0165: r##\"\n A while-let pattern attempts to match the pattern, and enters the body if the\n-match was succesful. If the match is irrefutable (when it cannot fail to match),\n-use a regular `let`-binding inside a `loop` instead. For instance:\n+match was successful. If the match is irrefutable (when it cannot fail to\n+match), use a regular `let`-binding inside a `loop` instead. For instance:\n \n ```\n struct Irrefutable(i32);\n@@ -374,7 +378,7 @@ match m {\n ```\n \n If you don't qualify the names, the code will bind new variables named \"GET\" and\n-\"POST\" instead. This behavior is likely not what you want, so rustc warns when\n+\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\n that happens.\n \n Qualified names are good practice, and most code works well with them. But if\n@@ -403,16 +407,16 @@ const Y: u32 = X;\n \"##,\n \n E0267: r##\"\n-This error indicates the use of loop keyword (break or continue) inside a\n-closure but outside of any loop. Break and continue can be used as normal\n-inside closures as long as they are also contained within a loop. To halt the\n-execution of a closure you should instead use a return statement.\n+This error indicates the use of a loop keyword (`break` or `continue`) inside a\n+closure but outside of any loop. Break and continue can be used as normal inside\n+closures as long as they are also contained within a loop. To halt the execution\n+of a closure you should instead use a return statement.\n \"##,\n \n E0268: r##\"\n-This error indicates the use of loop keyword (break or continue) outside of a\n-loop. Without a loop to break out of or continue in, no sensible action can be\n-taken.\n+This error indicates the use of a loop keyword (`break` or `continue`) outside\n+of a loop. Without a loop to break out of or continue in, no sensible action can\n+be taken.\n \"##,\n \n E0296: r##\"\n@@ -507,7 +511,7 @@ match Some(\"hi\".to_string()) {\n }\n ```\n \n-The `op_string_ref` binding has type &Option<&String> in both cases.\n+The `op_string_ref` binding has type `&Option<&String>` in both cases.\n \n See also https://github.com/rust-lang/rust/issues/14587\n \"##,"}]}