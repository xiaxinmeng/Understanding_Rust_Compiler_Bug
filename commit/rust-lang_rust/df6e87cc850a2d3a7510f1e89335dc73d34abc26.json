{"sha": "df6e87cc850a2d3a7510f1e89335dc73d34abc26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNmU4N2NjODUwYTJkM2E3NTEwZjFlODkzMzVkYzczZDM0YWJjMjY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-06T17:28:41Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-14T20:20:10Z"}, "message": "Use `TypeVisitor::BreakTy` in `UnresolvedTypeFinder`", "tree": {"sha": "d6683af3143b94c60608b4e0fb0334cfdef6dc2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6683af3143b94c60608b4e0fb0334cfdef6dc2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df6e87cc850a2d3a7510f1e89335dc73d34abc26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df6e87cc850a2d3a7510f1e89335dc73d34abc26", "html_url": "https://github.com/rust-lang/rust/commit/df6e87cc850a2d3a7510f1e89335dc73d34abc26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df6e87cc850a2d3a7510f1e89335dc73d34abc26/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f7d8fcf624b0e8aee130527092c03b4e0ba5ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/44f7d8fcf624b0e8aee130527092c03b4e0ba5ba", "html_url": "https://github.com/rust-lang/rust/commit/44f7d8fcf624b0e8aee130527092c03b4e0ba5ba"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "225582a2db6a54cd50731239e4d80b0496d05824", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df6e87cc850a2d3a7510f1e89335dc73d34abc26/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6e87cc850a2d3a7510f1e89335dc73d34abc26/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=df6e87cc850a2d3a7510f1e89335dc73d34abc26", "patch": "@@ -1,5 +1,3 @@\n-//! See the Book for more information.\n-\n pub use self::freshen::TypeFreshener;\n pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n@@ -1334,9 +1332,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let mut r = resolve::UnresolvedTypeFinder::new(self);\n-        value.visit_with(&mut r);\n-        r.first_unresolved\n+        value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()\n     }\n \n     pub fn probe_const_var("}, {"sha": "822fa77aa0ed004ceb08d111e1b73a05e6619712", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df6e87cc850a2d3a7510f1e89335dc73d34abc26/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6e87cc850a2d3a7510f1e89335dc73d34abc26/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=df6e87cc850a2d3a7510f1e89335dc73d34abc26", "patch": "@@ -111,18 +111,16 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n /// involve some hashing and so forth).\n pub struct UnresolvedTypeFinder<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-\n-    /// Used to find the type parameter name and location for error reporting.\n-    pub first_unresolved: Option<(Ty<'tcx>, Option<Span>)>,\n }\n \n impl<'a, 'tcx> UnresolvedTypeFinder<'a, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n-        UnresolvedTypeFinder { infcx, first_unresolved: None }\n+        UnresolvedTypeFinder { infcx }\n     }\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n+    type BreakTy = (Ty<'tcx>, Option<Span>);\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let t = self.infcx.shallow_resolve(t);\n         if t.has_infer_types() {\n@@ -144,8 +142,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n                 } else {\n                     None\n                 };\n-                self.first_unresolved = Some((t, ty_var_span));\n-                ControlFlow::BREAK\n+                ControlFlow::Break((t, ty_var_span))\n             } else {\n                 // Otherwise, visit its contents.\n                 t.super_visit_with(self)"}]}