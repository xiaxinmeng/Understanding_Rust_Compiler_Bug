{"sha": "4545f289a991ec3888896aac0e0bcbfac9061e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDVmMjg5YTk5MWVjMzg4ODg5NmFhYzBlMGJjYmZhYzkwNjFlODA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-03T18:58:56Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Handle type args", "tree": {"sha": "968011283d685f325f980459c6f4f5ba1d5d1bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/968011283d685f325f980459c6f4f5ba1d5d1bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4545f289a991ec3888896aac0e0bcbfac9061e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4545f289a991ec3888896aac0e0bcbfac9061e80", "html_url": "https://github.com/rust-lang/rust/commit/4545f289a991ec3888896aac0e0bcbfac9061e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4545f289a991ec3888896aac0e0bcbfac9061e80/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cb1f7132277e16ec4eecafbc274563c4d27158e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb1f7132277e16ec4eecafbc274563c4d27158e", "html_url": "https://github.com/rust-lang/rust/commit/5cb1f7132277e16ec4eecafbc274563c4d27158e"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "7b50fb422fcc65159a5fd1cc460ce22fccc6370e", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4545f289a991ec3888896aac0e0bcbfac9061e80/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4545f289a991ec3888896aac0e0bcbfac9061e80/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=4545f289a991ec3888896aac0e0bcbfac9061e80", "patch": "@@ -156,13 +156,13 @@ fn add_missing_impl_members_inner(\n             .collect();\n         let items = missing_items\n             .into_iter()\n+            .map(|it| {\n+                substitute_type_params(db, hir::InFile::new(file_id.into(), it), &substs_by_param)\n+            })\n             .map(|it| match module {\n                 Some(module) => qualify_paths(db, hir::InFile::new(file_id.into(), it), module),\n                 None => it,\n             })\n-            .map(|it| {\n-                substitute_type_params(db, hir::InFile::new(file_id.into(), it), &substs_by_param)\n-            })\n             .map(|it| match it {\n                 ast::ImplItem::FnDef(def) => ast::ImplItem::FnDef(add_body(def)),\n                 _ => it,\n@@ -239,11 +239,9 @@ fn substitute_type_params<N: AstNode>(\n \n use hir::PathResolution;\n \n-// TODO handle generic args\n-// TODO handle associated item paths\n-// TODO handle value ns?\n-\n // FIXME extract this to a general utility as well\n+// FIXME handle value ns?\n+// FIXME this doesn't 'commute' with `substitute_type_params`, since type params in newly generated type arg lists don't resolve. Currently we can avoid this problem, but it's worth thinking about a solution\n fn qualify_paths<N: AstNode>(db: &impl HirDatabase, node: hir::InFile<N>, from: hir::Module) -> N {\n     let path_replacements = node\n         .value\n@@ -255,12 +253,17 @@ fn qualify_paths<N: AstNode>(db: &impl HirDatabase, node: hir::InFile<N>, from:\n                 // don't try to qualify `Fn(Foo) -> Bar` paths, they are in prelude anyway\n                 return None;\n             }\n+            // FIXME check if some ancestor is already being replaced, if so skip this\n             let analyzer = hir::SourceAnalyzer::new(db, node.with_value(p.syntax()), None);\n             let resolution = analyzer.resolve_path(db, &p)?;\n             match resolution {\n                 PathResolution::Def(def) => {\n                     let found_path = from.find_path(db, def)?;\n-                    Some((p, found_path.to_ast()))\n+                    let args = p\n+                        .segment()\n+                        .and_then(|s| s.type_arg_list())\n+                        .map(|arg_list| qualify_paths(db, node.with_value(arg_list), from));\n+                    Some((p, make::path_with_type_arg_list(found_path.to_ast(), args)))\n                 }\n                 PathResolution::Local(_)\n                 | PathResolution::TypeParam(_)\n@@ -535,7 +538,7 @@ impl foo::Foo for S { <|> }\",\n             \"\n mod foo {\n     pub struct Bar<T>;\n-    impl Bar { type Assoc = u32; }\n+    impl Bar<T> { type Assoc = u32; }\n     trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n }\n struct S;"}, {"sha": "68d64a0cc42cb9b0d050e08b62636994768fe5ae", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4545f289a991ec3888896aac0e0bcbfac9061e80/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4545f289a991ec3888896aac0e0bcbfac9061e80/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=4545f289a991ec3888896aac0e0bcbfac9061e80", "patch": "@@ -21,6 +21,13 @@ pub fn path_qualified(qual: ast::Path, name_ref: ast::NameRef) -> ast::Path {\n fn path_from_text(text: &str) -> ast::Path {\n     ast_from_text(text)\n }\n+pub fn path_with_type_arg_list(path: ast::Path, args: Option<ast::TypeArgList>) -> ast::Path {\n+    if let Some(args) = args {\n+        ast_from_text(&format!(\"const X: {}{}\", path.syntax(), args.syntax()))\n+    } else {\n+        path\n+    }\n+}\n \n pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n     return match expr {"}]}