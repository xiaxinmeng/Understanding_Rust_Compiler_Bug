{"sha": "b35cb1ee93d50313abd14baab5de055f372507cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNWNiMWVlOTNkNTAzMTNhYmQxNGJhYWI1ZGUwNTVmMzcyNTA3Y2Q=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-12T18:26:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-12T18:26:24Z"}, "message": "Rollup merge of #47081 - pietroalbini:fix-nested-tree-dump, r=nrc\n\nFix nested imports not included in the save_analysis output\n\nThis PR fixes #46823.\n\nThe bug was caused by the old access level checking code, which checked against the root UseTree even for nested trees. The problem with that is, for nested trees the root is lowered as an empty `ListStem`, which is not reachable by definition. The new code computes the access level with each tree's own ID, and with the root tree's visibility.\n\nI tested this manually and it works, but I'm not really satisfied with that. I looked at the existing tests though, and no one checked for the save_analysis output as far as I can see. How should I proceed with that? I think having a test about this would be really nice.", "tree": {"sha": "03a11f4fd5a49cb1b1138fd6a2c7cfcdf9541cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a11f4fd5a49cb1b1138fd6a2c7cfcdf9541cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b35cb1ee93d50313abd14baab5de055f372507cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b35cb1ee93d50313abd14baab5de055f372507cd", "html_url": "https://github.com/rust-lang/rust/commit/b35cb1ee93d50313abd14baab5de055f372507cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b35cb1ee93d50313abd14baab5de055f372507cd/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a35164ceb4d50c2d9f3c5248a0883cdca9a4ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a35164ceb4d50c2d9f3c5248a0883cdca9a4ac", "html_url": "https://github.com/rust-lang/rust/commit/30a35164ceb4d50c2d9f3c5248a0883cdca9a4ac"}, {"sha": "9991fdf17a21d10df35af5a6346998de672a390e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9991fdf17a21d10df35af5a6346998de672a390e", "html_url": "https://github.com/rust-lang/rust/commit/9991fdf17a21d10df35af5a6346998de672a390e"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "30e3c9c4ca8a3ed30c201b9b480cc2dce8f5bf66", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b35cb1ee93d50313abd14baab5de055f372507cd/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35cb1ee93d50313abd14baab5de055f372507cd/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=b35cb1ee93d50313abd14baab5de055f372507cd", "patch": "@@ -1252,7 +1252,13 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                          root_item: &'l ast::Item,\n                          prefix: &ast::Path) {\n         let path = &use_tree.prefix;\n-        let access = access_from!(self.save_ctxt, root_item);\n+\n+        // The access is calculated using the current tree ID, but with the root tree's visibility\n+        // (since nested trees don't have their own visibility).\n+        let access = Access {\n+            public: root_item.vis == ast::Visibility::Public,\n+            reachable: self.save_ctxt.analysis.access_levels.is_reachable(id),\n+        };\n \n         // The parent def id of a given use tree is always the enclosing item.\n         let parent = self.save_ctxt.tcx.hir.opt_local_def_id(id)"}]}