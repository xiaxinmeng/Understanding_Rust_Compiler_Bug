{"sha": "381d32e7d6ac5037be4ce23aca7c7b38404928a8", "node_id": "C_kwDOAAsO6NoAKDM4MWQzMmU3ZDZhYzUwMzdiZTRjZTIzYWNhN2M3YjM4NDA0OTI4YTg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-18T18:23:58Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:41:41Z"}, "message": "Add fn_arg_names table.", "tree": {"sha": "1de7fcdff1a71a438dbde24258fdbe56220094fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de7fcdff1a71a438dbde24258fdbe56220094fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/381d32e7d6ac5037be4ce23aca7c7b38404928a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/381d32e7d6ac5037be4ce23aca7c7b38404928a8", "html_url": "https://github.com/rust-lang/rust/commit/381d32e7d6ac5037be4ce23aca7c7b38404928a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/381d32e7d6ac5037be4ce23aca7c7b38404928a8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc96a45acfc2bf0af1942439c00adebf64c0ac5", "html_url": "https://github.com/rust-lang/rust/commit/6cc96a45acfc2bf0af1942439c00adebf64c0ac5"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "6f9cd871e917588c5aed482eb4d8bb3a7eabadc3", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/381d32e7d6ac5037be4ce23aca7c7b38404928a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/381d32e7d6ac5037be4ce23aca7c7b38404928a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=381d32e7d6ac5037be4ce23aca7c7b38404928a8", "patch": "@@ -1395,15 +1395,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))\n     }\n \n-    fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {\n-        let param_names = match self.kind(id) {\n-            EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,\n-            EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,\n-            _ => Lazy::empty(),\n-        };\n-        LazyQueryDecodable::decode_query(Some(param_names), self, tcx, || unreachable!())\n-    }\n-\n     fn exported_symbols(\n         self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "d53631d49d38d49f527294c91cf906cfc6352af4", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/381d32e7d6ac5037be4ce23aca7c7b38404928a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/381d32e7d6ac5037be4ce23aca7c7b38404928a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=381d32e7d6ac5037be4ce23aca7c7b38404928a8", "patch": "@@ -139,6 +139,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     mir_const_qualif => { table }\n     rendered_const => { table }\n     asyncness => { table }\n+    fn_arg_names => { table }\n \n     trait_def => { cdata.get_trait_def(def_id.index, tcx.sess) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n@@ -154,7 +155,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     generator_kind => { cdata.generator_kind(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n-    fn_arg_names => { cdata.get_fn_param_names(tcx, def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }"}, {"sha": "9821a63dfaacabfa7c9fc1904990ccc49246c639", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/381d32e7d6ac5037be4ce23aca7c7b38404928a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/381d32e7d6ac5037be4ce23aca7c7b38404928a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=381d32e7d6ac5037be4ce23aca7c7b38404928a8", "patch": "@@ -1195,12 +1195,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             ty::AssocKind::Fn => {\n                 let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n-                    let param_names = match *m {\n-                        hir::TraitFn::Required(ref names) => self.encode_fn_param_names(names),\n-                        hir::TraitFn::Provided(body) => self.encode_fn_param_names_for_body(body),\n+                    match *m {\n+                        hir::TraitFn::Required(ref names) => {\n+                            record!(self.tables.fn_arg_names[def_id] <- *names)\n+                        }\n+                        hir::TraitFn::Provided(body) => {\n+                            record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body))\n+                        }\n                     };\n                     record!(self.tables.asyncness[def_id] <- m_sig.header.asyncness);\n-                    FnData { constness: hir::Constness::NotConst, param_names }\n+                    FnData { constness: hir::Constness::NotConst }\n                 } else {\n                     bug!()\n                 };\n@@ -1262,14 +1266,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ty::AssocKind::Fn => {\n                 let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {\n                     record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n+                    record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n                     FnData {\n                         // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n                         constness: if self.tcx.is_const_fn_raw(def_id) {\n                             hir::Constness::Const\n                         } else {\n                             hir::Constness::NotConst\n                         },\n-                        param_names: self.encode_fn_param_names_for_body(body),\n                     }\n                 } else {\n                     bug!()\n@@ -1294,14 +1298,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {\n-        self.lazy(self.tcx.hir().body_param_names(body_id))\n-    }\n-\n-    fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {\n-        self.lazy(param_names.iter())\n-    }\n-\n     fn encode_mir(&mut self) {\n         if self.is_proc_macro {\n             return;\n@@ -1405,10 +1401,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n-                let data = FnData {\n-                    constness: sig.header.constness,\n-                    param_names: self.encode_fn_param_names_for_body(body),\n-                };\n+                record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n+                let data = FnData { constness: sig.header.constness };\n \n                 EntryKind::Fn(self.lazy(data))\n             }\n@@ -1874,13 +1868,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         match nitem.kind {\n             hir::ForeignItemKind::Fn(_, ref names, _) => {\n                 record!(self.tables.asyncness[def_id] <- hir::IsAsync::NotAsync);\n+                record!(self.tables.fn_arg_names[def_id] <- *names);\n                 let data = FnData {\n                     constness: if self.tcx.is_const_fn_raw(def_id) {\n                         hir::Constness::Const\n                     } else {\n                         hir::Constness::NotConst\n                     },\n-                    param_names: self.encode_fn_param_names(names),\n                 };\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignFn(self.lazy(data)));\n             }"}, {"sha": "b3255f6f570e9cdd7a5d3e63422b5f5a7fcae617", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/381d32e7d6ac5037be4ce23aca7c7b38404928a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/381d32e7d6ac5037be4ce23aca7c7b38404928a8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=381d32e7d6ac5037be4ce23aca7c7b38404928a8", "patch": "@@ -311,6 +311,7 @@ define_tables! {\n     mir_const_qualif: Table<DefIndex, Lazy!(mir::ConstQualifs)>,\n     rendered_const: Table<DefIndex, Lazy!(String)>,\n     asyncness: Table<DefIndex, Lazy!(hir::IsAsync)>,\n+    fn_arg_names: Table<DefIndex, Lazy!([Ident])>,\n \n     trait_item_def_id: Table<DefIndex, Lazy<DefId>>,\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n@@ -363,7 +364,6 @@ enum EntryKind {\n #[derive(MetadataEncodable, MetadataDecodable)]\n struct FnData {\n     constness: hir::Constness,\n-    param_names: Lazy<[Ident]>,\n }\n \n #[derive(TyEncodable, TyDecodable)]"}]}