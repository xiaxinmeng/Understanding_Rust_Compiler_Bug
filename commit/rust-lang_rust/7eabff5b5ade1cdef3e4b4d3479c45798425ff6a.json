{"sha": "7eabff5b5ade1cdef3e4b4d3479c45798425ff6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYWJmZjViNWFkZTFjZGVmM2U0YjRkMzQ3OWM0NTc5ODQyNWZmNmE=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-06T06:54:34Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-06T06:54:34Z"}, "message": "Hopefully, it now works", "tree": {"sha": "c0e97cccb4486a4cecc0316a0cd801981b99bb07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e97cccb4486a4cecc0316a0cd801981b99bb07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eabff5b5ade1cdef3e4b4d3479c45798425ff6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eabff5b5ade1cdef3e4b4d3479c45798425ff6a", "html_url": "https://github.com/rust-lang/rust/commit/7eabff5b5ade1cdef3e4b4d3479c45798425ff6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eabff5b5ade1cdef3e4b4d3479c45798425ff6a/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297e3969e27c69e0a556af66c94a700a561eeb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/297e3969e27c69e0a556af66c94a700a561eeb7e", "html_url": "https://github.com/rust-lang/rust/commit/297e3969e27c69e0a556af66c94a700a561eeb7e"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "953173f8aace8470d6c14caf65f7e91492c779ba", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 42, "deletions": 31, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7eabff5b5ade1cdef3e4b4d3479c45798425ff6a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eabff5b5ade1cdef3e4b4d3479c45798425ff6a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7eabff5b5ade1cdef3e4b4d3479c45798425ff6a", "patch": "@@ -304,7 +304,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// ```\n     /// let ptr = &0;\n-    /// let ptr_num_transmute = mem::transmute::<&i32, usize>(ptr);\n+    /// let ptr_num_transmute = unsafe {\n+    ///     std::mem::transmute::<&i32, usize>(ptr)\n+    /// };\n     /// // Use an `as` cast instead\n     /// let ptr_num_cast = ptr as *const i32 as usize;\n     /// ```\n@@ -313,43 +315,49 @@ extern \"rust-intrinsic\" {\n     ///\n     /// ```\n     /// let ptr: *mut i32 = &mut 0;\n-    /// let ref_transmuted = mem::transmute::<*mut i32, &mut i32>(ptr);\n+    /// let ref_transmuted = unsafe {\n+    ///     std::mem::transmute::<*mut i32, &mut i32>(ptr)\n+    /// };\n     /// // Use a reborrow instead\n-    /// let ref_casted = &mut *ptr;\n+    /// let ref_casted = unsafe { &mut *ptr };\n     /// ```\n     ///\n     /// Turning an `&mut T` into an `&mut U`:\n     ///\n     /// ```\n     /// let ptr = &mut 0;\n-    /// let val_transmuted = mem::transmute::<&mut i32, &mut u32>(ptr);\n+    /// let val_transmuted = unsafe {\n+    ///     std::mem::transmute::<&mut i32, &mut u32>(ptr)\n+    /// };\n     /// // Now, put together `as` and reborrowing\n-    /// let val_casts = &mut *(ptr as *mut i32 as *mut u32);\n+    /// let val_casts = unsafe { &mut *(ptr as *mut i32 as *mut u32) };\n     /// ```\n     ///\n     /// Turning an `&str` into an `&[u8]`:\n     ///\n     /// ```\n     /// // this is not a good way to do this.\n-    /// let slice = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n+    /// let slice = unsafe { std::mem::transmute::<&str, &[u8]>(\"Rust\") };\n     /// assert_eq!(slice, &[82, 117, 115, 116]);\n     /// // You could use `str::as_bytes`\n     /// let slice = \"Rust\".as_bytes();\n     /// assert_eq!(slice, &[82, 117, 115, 116]);\n     /// // Or, just use a byte string, if you have control over the string\n     /// // literal\n-    /// assert_eq!(b\"Rust\", &[82, 117, 116, 116]);\n+    /// assert_eq!(b\"Rust\", &[82, 117, 115, 116]);\n     /// ```\n     ///\n     /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`:\n     ///\n     /// ```\n     /// let store = [0, 1, 2, 3];\n-    /// let v_orig = store.iter().collect::<Vec<&i32>>();\n+    /// let mut v_orig = store.iter().collect::<Vec<&i32>>();\n     /// // Using transmute: this is Undefined Behavior, and a bad idea.\n     /// // However, it is no-copy.\n-    /// let v_transmuted = mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n-    ///     v_orig.clone());\n+    /// let v_transmuted = unsafe {\n+    ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n+    ///         v_orig.clone())\n+    /// };\n     /// // This is the suggested, safe way.\n     /// // It does copy the entire Vector, though, into a new array.\n     /// let v_collected = v_orig.clone()\n@@ -363,10 +371,12 @@ extern \"rust-intrinsic\" {\n     /// // type. The same caveats exist for this method as transmute, for\n     /// // the original inner type (`&i32`) to the converted inner type\n     /// // (`Option<&i32>`), so read the nomicon pages linked above.\n-    /// let v_from_raw = Vec::from_raw_parts(v_orig.as_mut_ptr(),\n-    ///                                      v_orig.len(),\n-    ///                                      v_orig.capacity());\n-    /// mem::forget(v_orig);\n+    /// let v_from_raw = unsafe {\n+    ///     Vec::from_raw_parts(v_orig.as_mut_ptr(),\n+    ///                         v_orig.len(),\n+    ///                         v_orig.capacity())\n+    /// };\n+    /// std::mem::forget(v_orig);\n     /// ```\n     ///\n     /// Implementing `split_at_mut`:\n@@ -375,39 +385,39 @@ extern \"rust-intrinsic\" {\n     /// use std::{slice, mem};\n     /// // There are multiple ways to do this; and there are multiple problems\n     /// // with the following, transmute, way.\n-    /// fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n+    /// fn split_at_mut_transmute<T>(slice: &mut [T], mid: usize)\n     ///                              -> (&mut [T], &mut [T]) {\n     ///     let len = slice.len();\n-    ///     assert!(index < len);\n+    ///     assert!(mid <= len);\n     ///     unsafe {\n     ///         let slice2 = mem::transmute::<&mut [T], &mut [T]>(slice);\n     ///         // first: transmute is not typesafe; all it checks is that T and\n     ///         // U are of the same size. Second, right here, you have two\n     ///         // mutable references pointing to the same memory.\n-    ///         (&mut slice[0..index], &mut slice2[index..len])\n+    ///         (&mut slice[0..mid], &mut slice2[mid..len])\n     ///     }\n     /// }\n     /// // This gets rid of the typesafety problems; `&mut *` will *only* give\n     /// // you an `&mut T` from an `&mut T` or `*mut T`.\n-    /// fn split_at_mut_casts<T>(slice: &mut [T], index: usize)\n+    /// fn split_at_mut_casts<T>(slice: &mut [T], mid: usize)\n     ///                          -> (&mut [T], &mut [T]) {\n     ///     let len = slice.len();\n-    ///     assert!(index < len);\n+    ///     assert!(mid <= len);\n     ///     unsafe {\n     ///         let slice2 = &mut *(slice as *mut [T]);\n     ///         // however, you still have two mutable references pointing to\n     ///         // the same memory.\n-    ///         (&mut slice[0..index], &mut slice2[index..len])\n+    ///         (&mut slice[0..mid], &mut slice2[mid..len])\n     ///     }\n     /// }\n     /// // This is how the standard library does it. This is the best method, if\n     /// // you need to do something like this\n-    /// fn split_at_stdlib<T>(slice: &mut [T], index: usize)\n+    /// fn split_at_stdlib<T>(slice: &mut [T], mid: usize)\n     ///                       -> (&mut [T], &mut [T]) {\n-    ///     let len = self.len();\n-    ///     let ptr = self.as_mut_ptr();\n+    ///     let len = slice.len();\n+    ///     assert!(mid <= len);\n     ///     unsafe {\n-    ///         assert!(mid <= len);\n+    ///         let ptr = slice.as_mut_ptr();\n     ///         // This now has three mutable references pointing at the same\n     ///         // memory. `slice`, the rvalue ret.0, and the rvalue ret.1.\n     ///         // `slice` is never used after `let ptr = ...`, and so one can\n@@ -426,7 +436,9 @@ extern \"rust-intrinsic\" {\n     /// Getting the bitpattern of a floating point type:\n     ///\n     /// ```\n-    /// let bitpattern = std::mem::transmute::<f32, u32>(1.0);\n+    /// let bitpattern = unsafe {\n+    ///     std::mem::transmute::<f32, u32>(1.0)\n+    /// };\n     /// assert_eq!(bitpattern, 0x3F800000);\n     /// ```\n     ///\n@@ -438,25 +450,24 @@ extern \"rust-intrinsic\" {\n     ///     0\n     /// }\n     /// let pointer = foo as *const ();\n-    /// let function = std::mem::transmute::<*const (), fn() -> i32>(pointer)\n+    /// let function = unsafe {\n+    ///     std::mem::transmute::<*const (), fn() -> i32>(pointer)\n+    /// };\n     /// assert_eq!(function(), 0);\n     /// ```\n     ///\n     /// Extending a lifetime, or shortening an invariant lifetime; this is\n     /// advanced, very unsafe rust:\n     ///\n     /// ```\n-    /// use std::mem;\n-    ///\n     /// struct R<'a>(&'a i32);\n     /// unsafe fn extend_lifetime<'b>(r: R<'b>) -> R<'static> {\n-    ///     mem::transmute::<R<'b>, R<'static>>(ptr);\n+    ///     std::mem::transmute::<R<'b>, R<'static>>(r)\n     /// }\n     ///\n     /// unsafe fn shorten_invariant_lifetime<'b, 'c>(r: &'b mut R<'static>)\n     ///                                              -> &'b mut R<'c> {\n-    ///     mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(\n-    ///         ref_to_extended)\n+    ///     std::mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(r)\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}