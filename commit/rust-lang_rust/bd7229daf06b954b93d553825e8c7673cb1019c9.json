{"sha": "bd7229daf06b954b93d553825e8c7673cb1019c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNzIyOWRhZjA2Yjk1NGI5M2Q1NTM4MjVlOGM3NjczY2IxMDE5Yzk=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-04T16:53:43Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-04T17:52:14Z"}, "message": "make intern_const_alloc_recursive return error fix #78655", "tree": {"sha": "84b23f192d7692859fbf4f89a2f8b5568ba12e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b23f192d7692859fbf4f89a2f8b5568ba12e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd7229daf06b954b93d553825e8c7673cb1019c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7229daf06b954b93d553825e8c7673cb1019c9", "html_url": "https://github.com/rust-lang/rust/commit/bd7229daf06b954b93d553825e8c7673cb1019c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd7229daf06b954b93d553825e8c7673cb1019c9/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e8939b8045b7af6076fb718e2e298844aaf4650", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8939b8045b7af6076fb718e2e298844aaf4650", "html_url": "https://github.com/rust-lang/rust/commit/8e8939b8045b7af6076fb718e2e298844aaf4650"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "e35ff6b996ee08662944cc3c09265d0744c1b537", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -81,6 +81,12 @@ impl From<ErrorHandled> for InterpErrorInfo<'_> {\n     }\n }\n \n+impl From<ErrorReported> for InterpErrorInfo<'_> {\n+    fn from(err: ErrorReported) -> Self {\n+        InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err)).into()\n+    }\n+}\n+\n impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n     fn from(kind: InterpError<'tcx>) -> Self {\n         let capture_backtrace = tls::with_opt(|tcx| {\n@@ -115,8 +121,8 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error.\n     ReferencedConstant,\n-    /// Abort in case type errors are reached.\n-    TypeckError(ErrorReported),\n+    /// Abort in case errors are already reported.\n+    AlreadyReported(ErrorReported),\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n     /// An invalid transmute happened.\n@@ -129,7 +135,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n             ReferencedConstant => write!(f, \"referenced constant has errors\"),\n-            TypeckError(ErrorReported) => {\n+            AlreadyReported(ErrorReported) => {\n                 write!(f, \"encountered constants with type errors, stopping evaluation\")\n             }\n             Layout(ref err) => write!(f, \"{}\", err),"}, {"sha": "39358e03e7590932fec370cb1fb55957f7b8232b", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             err_inval!(Layout(LayoutError::Unknown(_))) | err_inval!(TooGeneric) => {\n                 return ErrorHandled::TooGeneric;\n             }\n-            err_inval!(TypeckError(error_reported)) => {\n+            err_inval!(AlreadyReported(error_reported)) => {\n                 return ErrorHandled::Reported(error_reported);\n             }\n             // We must *always* hard error on these, even if the caller wants just a lint."}, {"sha": "438704d0f4d6dd56d4fdab80bfc32a51862310af", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -67,7 +67,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n             None => InternKind::Constant,\n         }\n     };\n-    intern_const_alloc_recursive(ecx, intern_kind, ret);\n+    intern_const_alloc_recursive(ecx, intern_kind, ret)?;\n \n     debug!(\"eval_body_using_ecx done: {:?}\", *ret);\n     Ok(ret)"}, {"sha": "9dd2a8592a7e0a0d5d47110727e2de5df73db714", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -29,7 +29,9 @@ pub(crate) fn const_caller_location(\n     let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all(), false);\n \n     let loc_place = ecx.alloc_caller_location(file, line, col);\n-    intern_const_alloc_recursive(&mut ecx, InternKind::Constant, loc_place);\n+    if intern_const_alloc_recursive(&mut ecx, InternKind::Constant, loc_place).is_err() {\n+        bug!(\"intern_const_alloc_recursive should not error in this case\")\n+    }\n     ConstValue::Scalar(loc_place.ptr)\n }\n "}, {"sha": "1ec2e3b7c5a8f884832cd36aa153acae813caefa", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -471,7 +471,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let Some(def) = def.as_local() {\n             if self.tcx.has_typeck_results(def.did) {\n                 if let Some(error_reported) = self.tcx.typeck_opt_const_arg(def).tainted_by_errors {\n-                    throw_inval!(TypeckError(error_reported))\n+                    throw_inval!(AlreadyReported(error_reported))\n                 }\n             }\n         }\n@@ -527,8 +527,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Ok(Some(instance)) => Ok(instance),\n             Ok(None) => throw_inval!(TooGeneric),\n \n-            // FIXME(eddyb) this could be a bit more specific than `TypeckError`.\n-            Err(error_reported) => throw_inval!(TypeckError(error_reported)),\n+            // FIXME(eddyb) this could be a bit more specific than `AlreadyReported`.\n+            Err(error_reported) => throw_inval!(AlreadyReported(error_reported)),\n         }\n     }\n "}, {"sha": "413be427339f3bd2838879289056e54b4fec377a", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -16,6 +16,7 @@\n \n use super::validity::RefTracking;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_middle::mir::interpret::InterpResult;\n use rustc_middle::ty::{self, layout::TyAndLayout, Ty};\n@@ -285,11 +286,13 @@ pub enum InternKind {\n /// tracks where in the value we are and thus can show much better error messages.\n /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures\n /// are hard errors.\n+#[tracing::instrument(skip(ecx))]\n pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n     ecx: &mut InterpCx<'mir, 'tcx, M>,\n     intern_kind: InternKind,\n     ret: MPlaceTy<'tcx>,\n-) where\n+) -> Result<(), ErrorReported>\n+where\n     'tcx: 'mir,\n {\n     let tcx = ecx.tcx;\n@@ -405,12 +408,14 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             // Codegen does not like dangling pointers, and generally `tcx` assumes that\n             // all allocations referenced anywhere actually exist. So, make sure we error here.\n             ecx.tcx.sess.span_err(ecx.tcx.span, \"encountered dangling pointer in final constant\");\n+            return Err(ErrorReported);\n         } else if ecx.tcx.get_global_alloc(alloc_id).is_none() {\n             // We have hit an `AllocId` that is neither in local or global memory and isn't\n             // marked as dangling by local memory.  That should be impossible.\n             span_bug!(ecx.tcx.span, \"encountered unknown alloc id {:?}\", alloc_id);\n         }\n     }\n+    Ok(())\n }\n \n impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {"}, {"sha": "ba59ac14f9f916426841621b8b084d7686021de3", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -550,7 +550,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Early-return cases.\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n+            ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def, substs)?;\n                 return Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into());"}, {"sha": "066764bc46fc4ca158168c9006c4cac16d495b8f", "filename": "src/test/ui/consts/issue-78655.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -0,0 +1,10 @@\n+const FOO: *const u32 = { //~ ERROR encountered dangling pointer in final constant\n+    let x;\n+    &x //~ ERROR borrow of possibly-uninitialized variable: `x`\n+};\n+\n+fn main() {\n+    let FOO = FOO;\n+    //~^ ERROR could not evaluate constant pattern\n+    //~| ERROR could not evaluate constant pattern\n+}"}, {"sha": "cf3fe18f802fbafb058a639f771d03fa031c7d31", "filename": "src/test/ui/consts/issue-78655.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bd7229daf06b954b93d553825e8c7673cb1019c9/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7229daf06b954b93d553825e8c7673cb1019c9/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr?ref=bd7229daf06b954b93d553825e8c7673cb1019c9", "patch": "@@ -0,0 +1,30 @@\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n+  --> $DIR/issue-78655.rs:3:5\n+   |\n+LL |     &x\n+   |     ^^ use of possibly-uninitialized `x`\n+\n+error: encountered dangling pointer in final constant\n+  --> $DIR/issue-78655.rs:1:1\n+   |\n+LL | / const FOO: *const u32 = {\n+LL | |     let x;\n+LL | |     &x\n+LL | | };\n+   | |__^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-78655.rs:7:9\n+   |\n+LL |     let FOO = FOO;\n+   |         ^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-78655.rs:7:9\n+   |\n+LL |     let FOO = FOO;\n+   |         ^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0381`."}]}