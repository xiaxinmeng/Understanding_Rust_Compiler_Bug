{"sha": "ecb3df5a91b71e31e242737d9203b2798bd489de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYjNkZjVhOTFiNzFlMzFlMjQyNzM3ZDkyMDNiMjc5OGJkNDg5ZGU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-07-29T23:40:22Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:38Z"}, "message": "Add simd_cast intrinsic.", "tree": {"sha": "278555f6cd710143bb47bf982a90b3bb37d51299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/278555f6cd710143bb47bf982a90b3bb37d51299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecb3df5a91b71e31e242737d9203b2798bd489de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb3df5a91b71e31e242737d9203b2798bd489de", "html_url": "https://github.com/rust-lang/rust/commit/ecb3df5a91b71e31e242737d9203b2798bd489de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecb3df5a91b71e31e242737d9203b2798bd489de/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d3b0271ef62e52e65962744701861c32534114", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d3b0271ef62e52e65962744701861c32534114", "html_url": "https://github.com/rust-lang/rust/commit/f1d3b0271ef62e52e65962744701861c32534114"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "88a80076640c37fa3357efc380b415b35df7f32e", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ecb3df5a91b71e31e242737d9203b2798bd489de/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb3df5a91b71e31e242737d9203b2798bd489de/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=ecb3df5a91b71e31e242737d9203b2798bd489de", "patch": "@@ -1445,5 +1445,56 @@ fn generic_simd_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                  \"SIMD insert intrinsic monomorphised with returned type not SIMD element type\");\n         return ExtractElement(bcx, llargs[0], llargs[1])\n     }\n+\n+    if name == \"simd_cast\" {\n+        require!(arg_tys[0].simd_size(tcx) == ret_ty.simd_size(tcx),\n+                 \"SIMD cast intrinsic monomorphised with input and \\\n+                  return types of different lengths\");\n+        // casting cares about nominal type, not just structural type\n+        let in_ = arg_tys[0].simd_type(tcx);\n+        let out = ret_ty.simd_type(tcx);\n+\n+        if in_ == out { return llargs[0]; }\n+\n+        match (&in_.sty, &out.sty) {\n+            (&ty::TyInt(lhs), &ty::TyUint(rhs)) => {\n+                match (lhs, rhs) {\n+                    (ast::TyI8, ast::TyU8) |\n+                    (ast::TyI16, ast::TyU16) |\n+                    (ast::TyI32, ast::TyU32) |\n+                    (ast::TyI64, ast::TyU64) => return llargs[0],\n+                    _ => {},\n+                }\n+            }\n+            (&ty::TyUint(lhs), &ty::TyInt(rhs)) => {\n+                match (lhs, rhs) {\n+                    (ast::TyU8, ast::TyI8) |\n+                    (ast::TyU16, ast::TyI16) |\n+                    (ast::TyU32, ast::TyI32) |\n+                    (ast::TyU64, ast::TyI64) => return llargs[0],\n+                    _ => {},\n+                }\n+            }\n+            (&ty::TyInt(ast::TyI32), &ty::TyFloat(ast::TyF32)) |\n+            (&ty::TyInt(ast::TyI64), &ty::TyFloat(ast::TyF64)) => {\n+                return SIToFP(bcx, llargs[0], llret_ty)\n+            }\n+            (&ty::TyUint(ast::TyU32), &ty::TyFloat(ast::TyF32)) |\n+            (&ty::TyUint(ast::TyU64), &ty::TyFloat(ast::TyF64)) => {\n+                return UIToFP(bcx, llargs[0], llret_ty)\n+            }\n+\n+            (&ty::TyFloat(ast::TyF32), &ty::TyInt(ast::TyI32)) |\n+            (&ty::TyFloat(ast::TyF64), &ty::TyInt(ast::TyI64)) => {\n+                return FPToSI(bcx, llargs[0], llret_ty)\n+            }\n+            (&ty::TyFloat(ast::TyF32), &ty::TyUint(ast::TyU32)) |\n+            (&ty::TyFloat(ast::TyF64), &ty::TyUint(ast::TyU64)) => {\n+                return FPToUI(bcx, llargs[0], llret_ty)\n+            }\n+            _ => {}\n+        }\n+        require!(false, \"SIMD cast intrinsic monomorphised with incompatible cast\");\n+    }\n     bcx.sess().span_bug(call_info.span, \"unknown SIMD intrinsic\");\n }"}, {"sha": "3edd4530ceb695836055edc5d09731915642062b", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecb3df5a91b71e31e242737d9203b2798bd489de/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb3df5a91b71e31e242737d9203b2798bd489de/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=ecb3df5a91b71e31e242737d9203b2798bd489de", "patch": "@@ -182,6 +182,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         None => ()\n     }\n \n+    debug!(\"sizing_type_of {:?}\", t);\n     let llsizingty = match t.sty {\n         _ if !type_is_sized(cx.tcx(), t) => {\n             Type::struct_(cx, &[Type::i8p(cx), Type::i8p(cx)], false)\n@@ -240,6 +241,10 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         ty::TySlice(_) | ty::TyTrait(..) | ty::TyStr => unreachable!()\n     };\n \n+    debug!(\"--> mapped t={:?} to llsizingty={}\",\n+            t,\n+            cx.tn().type_to_string(llsizingty));\n+\n     cx.llsizingtypes().borrow_mut().insert(t, llsizingty);\n     llsizingty\n }\n@@ -426,8 +431,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TyError(..) => cx.sess().bug(\"type_of with TyError\"),\n     };\n \n-    debug!(\"--> mapped t={:?} {:?} to llty={}\",\n-            t,\n+    debug!(\"--> mapped t={:?} to llty={}\",\n             t,\n             cx.tn().type_to_string(llty));\n "}, {"sha": "742bd57a130e96810609b26b901d3fca4e615a61", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecb3df5a91b71e31e242737d9203b2798bd489de/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb3df5a91b71e31e242737d9203b2798bd489de/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ecb3df5a91b71e31e242737d9203b2798bd489de", "patch": "@@ -5346,6 +5346,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             }\n             \"simd_insert\" => (2, vec![param(ccx, 0), tcx.types.u32, param(ccx, 1)], param(ccx, 0)),\n             \"simd_extract\" => (2, vec![param(ccx, 0), tcx.types.u32], param(ccx, 1)),\n+            \"simd_cast\" => (2, vec![param(ccx, 0)], param(ccx, 1)),\n             name if name.starts_with(\"simd_shuffle\") => {\n                 match name[\"simd_shuffle\".len()..].parse() {\n                     Ok(n) => {"}]}