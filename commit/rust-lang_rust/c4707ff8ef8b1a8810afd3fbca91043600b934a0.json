{"sha": "c4707ff8ef8b1a8810afd3fbca91043600b934a0", "node_id": "C_kwDOAAsO6NoAKGM0NzA3ZmY4ZWY4YjFhODgxMGFmZDNmYmNhOTEwNDM2MDBiOTM0YTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-19T06:56:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-19T06:56:41Z"}, "message": "Rollup merge of #100208 - RalfJung:dyn-upcast-nop, r=petrochenkov\n\nmake NOP dyn casts not require anything about the vtable\n\nAs suggested [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/144729-t-types/topic/dyn-upcasting.20stabilization/near/292151439). This matches what the codegen backends already do, and what Miri did do until https://github.com/rust-lang/rust/pull/99420 when I made it super extra paranoid.", "tree": {"sha": "0c68719478fcea3414cbeb72884d72ce43b3acbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c68719478fcea3414cbeb72884d72ce43b3acbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4707ff8ef8b1a8810afd3fbca91043600b934a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/zQpCRBK7hj4Ov3rIwAAb8sIAFGpZL++UMzn+FOVOoWjNftZ\n9FnWYMbOKQXBfY3h3OydqZobGlVaOxPHW6dzHaBSo96zMlZKwuIrz9so6JRIuGd9\nU9lcg4YsClKLUUDKSxZzeiL6NrwYQ6N5X+ylc2iauu77/ZNMb/A9dlKsqckkpjZw\nrHMMMrPVbIbiOqmICsfBp/CIDeLxJqsX42roPqzNYk25Sk1Nax0bUWpL4J38CwGv\nKDh7JszMnUFhqSm4pFWh1itrENe4f2vMxspDiAAfLoyyoy8OzDNCEZCPbQrylySk\nCJxNCy4RDdPPpHrIPFZgpFtDgLhl7ESPZC3Zqdc+v1G5Qk88q+sYbLKM0HmG2hA=\n=i6Mf\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c68719478fcea3414cbeb72884d72ce43b3acbc\nparent 2fe29753912a1be758a56453eaa80ddbe745300a\nparent 3c8563abcf91eda340aa77d238954dd00fa0cb34\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660892201 +0530\ncommitter GitHub <noreply@github.com> 1660892201 +0530\n\nRollup merge of #100208 - RalfJung:dyn-upcast-nop, r=petrochenkov\n\nmake NOP dyn casts not require anything about the vtable\n\nAs suggested [on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/144729-t-types/topic/dyn-upcasting.20stabilization/near/292151439). This matches what the codegen backends already do, and what Miri did do until https://github.com/rust-lang/rust/pull/99420 when I made it super extra paranoid.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4707ff8ef8b1a8810afd3fbca91043600b934a0", "html_url": "https://github.com/rust-lang/rust/commit/c4707ff8ef8b1a8810afd3fbca91043600b934a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4707ff8ef8b1a8810afd3fbca91043600b934a0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe29753912a1be758a56453eaa80ddbe745300a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe29753912a1be758a56453eaa80ddbe745300a", "html_url": "https://github.com/rust-lang/rust/commit/2fe29753912a1be758a56453eaa80ddbe745300a"}, {"sha": "3c8563abcf91eda340aa77d238954dd00fa0cb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8563abcf91eda340aa77d238954dd00fa0cb34", "html_url": "https://github.com/rust-lang/rust/commit/3c8563abcf91eda340aa77d238954dd00fa0cb34"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "dd9d891ddbdee5d47272982e7685606270ae2197", "filename": "compiler/rustc_codegen_cranelift/src/unsize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4707ff8ef8b1a8810afd3fbca91043600b934a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4707ff8ef8b1a8810afd3fbca91043600b934a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs?ref=c4707ff8ef8b1a8810afd3fbca91043600b934a0", "patch": "@@ -29,6 +29,7 @@ pub(crate) fn unsized_info<'tcx>(\n             let old_info =\n                 old_info.expect(\"unsized_info: missing old info for trait upcasting coercion\");\n             if data_a.principal_def_id() == data_b.principal_def_id() {\n+                // A NOP cast that doesn't actually change anything, should be allowed even with invalid vtables.\n                 return old_info;\n             }\n "}, {"sha": "4c6be3f910827d7886b48e2ebbada31c3d701a86", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4707ff8ef8b1a8810afd3fbca91043600b934a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4707ff8ef8b1a8810afd3fbca91043600b934a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=c4707ff8ef8b1a8810afd3fbca91043600b934a0", "patch": "@@ -151,6 +151,7 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             let old_info =\n                 old_info.expect(\"unsized_info: missing old info for trait upcasting coercion\");\n             if data_a.principal_def_id() == data_b.principal_def_id() {\n+                // A NOP cast that doesn't actually change anything, should be allowed even with invalid vtables.\n                 return old_info;\n             }\n "}, {"sha": "14eb2a1537b1f82630327fe43f42595e6a3d3919", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4707ff8ef8b1a8810afd3fbca91043600b934a0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4707ff8ef8b1a8810afd3fbca91043600b934a0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=c4707ff8ef8b1a8810afd3fbca91043600b934a0", "patch": "@@ -298,7 +298,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(val, dest)\n             }\n             (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {\n-                let (old_data, old_vptr) = self.read_immediate(src)?.to_scalar_pair()?;\n+                let val = self.read_immediate(src)?;\n+                if data_a.principal() == data_b.principal() {\n+                    // A NOP cast that doesn't actually change anything, should be allowed even with mismatching vtables.\n+                    return self.write_immediate(*val, dest);\n+                }\n+                let (old_data, old_vptr) = val.to_scalar_pair()?;\n                 let old_vptr = old_vptr.to_pointer(self)?;\n                 let (ty, old_trait) = self.get_ptr_vtable(old_vptr)?;\n                 if old_trait != data_a.principal() {"}, {"sha": "9431fb33c53295c0d53f4d85369d520db2903c07", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c4707ff8ef8b1a8810afd3fbca91043600b934a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4707ff8ef8b1a8810afd3fbca91043600b934a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=c4707ff8ef8b1a8810afd3fbca91043600b934a0", "patch": "@@ -278,26 +278,36 @@ LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_,\n                \u257eallocN\u2500\u257c \u257eallocN\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:147:62\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:147:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n-   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a vtable pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257eallocN\u2500\u257c 00 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+           }\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:150:65\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:149:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered allocN, but expected a vtable pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257eallocN\u2500\u257c \u257eallocN\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+           }\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:157:5\n+  --> $DIR/ub-wide-ptr.rs:155:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:161:5\n+  --> $DIR/ub-wide-ptr.rs:159:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable"}, {"sha": "15ef703024aff77228181e33c4b20dcfb97369d1", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c4707ff8ef8b1a8810afd3fbca91043600b934a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4707ff8ef8b1a8810afd3fbca91043600b934a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=c4707ff8ef8b1a8810afd3fbca91043600b934a0", "patch": "@@ -278,26 +278,36 @@ LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_,\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:147:62\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:147:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n-   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a vtable pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+           }\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:150:65\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:149:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered allocN, but expected a vtable pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:157:5\n+  --> $DIR/ub-wide-ptr.rs:155:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:161:5\n+  --> $DIR/ub-wide-ptr.rs:159:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable"}, {"sha": "2da694a8bc43c1a19fa7da1c3e0000fd684f9b0a", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4707ff8ef8b1a8810afd3fbca91043600b934a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4707ff8ef8b1a8810afd3fbca91043600b934a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=c4707ff8ef8b1a8810afd3fbca91043600b934a0", "patch": "@@ -145,11 +145,9 @@ const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool\n \n // # raw trait object\n const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n-//~^ ERROR evaluation of constant value failed\n-//~| null pointer\n+//~^ ERROR it is undefined behavior to use this value\n const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-//~^ ERROR evaluation of constant value failed\n-//~| does not point to a vtable\n+//~^ ERROR it is undefined behavior to use this value\n const RAW_TRAIT_OBJ_CONTENT_INVALID: *const dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) } as *const dyn Trait; // ok because raw\n \n // Const eval fails for these, so they need to be statics to error."}]}