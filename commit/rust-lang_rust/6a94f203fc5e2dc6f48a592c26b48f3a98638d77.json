{"sha": "6a94f203fc5e2dc6f48a592c26b48f3a98638d77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTRmMjAzZmM1ZTJkYzZmNDhhNTkyYzI2YjQ4ZjNhOTg2MzhkNzc=", "commit": {"author": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-03T10:07:20Z"}, "committer": {"name": "Evgenii P", "email": "eupn@protonmail.com", "date": "2019-08-03T10:07:20Z"}, "message": "Use std::future::Future trait from stdlib", "tree": {"sha": "d5fa1f245af600896aaa6e09cd9779c7e478eb64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5fa1f245af600896aaa6e09cd9779c7e478eb64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a94f203fc5e2dc6f48a592c26b48f3a98638d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a94f203fc5e2dc6f48a592c26b48f3a98638d77", "html_url": "https://github.com/rust-lang/rust/commit/6a94f203fc5e2dc6f48a592c26b48f3a98638d77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a94f203fc5e2dc6f48a592c26b48f3a98638d77/comments", "author": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eupn", "id": 36292692, "node_id": "MDQ6VXNlcjM2MjkyNjky", "avatar_url": "https://avatars.githubusercontent.com/u/36292692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eupn", "html_url": "https://github.com/eupn", "followers_url": "https://api.github.com/users/eupn/followers", "following_url": "https://api.github.com/users/eupn/following{/other_user}", "gists_url": "https://api.github.com/users/eupn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eupn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eupn/subscriptions", "organizations_url": "https://api.github.com/users/eupn/orgs", "repos_url": "https://api.github.com/users/eupn/repos", "events_url": "https://api.github.com/users/eupn/events{/privacy}", "received_events_url": "https://api.github.com/users/eupn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957de26a1dba7134a6b3b340681880060aa90b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/957de26a1dba7134a6b3b340681880060aa90b3c", "html_url": "https://github.com/rust-lang/rust/commit/957de26a1dba7134a6b3b340681880060aa90b3c"}], "stats": {"total": 76, "additions": 44, "deletions": 32}, "files": [{"sha": "6a9f228b82d0a80656f7f5689c64ca5c6ae0b38e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6a94f203fc5e2dc6f48a592c26b48f3a98638d77/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a94f203fc5e2dc6f48a592c26b48f3a98638d77/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=6a94f203fc5e2dc6f48a592c26b48f3a98638d77", "patch": "@@ -7,28 +7,29 @@\n /// purely for \"IDE needs\".\n use std::sync::Arc;\n \n-use ra_db::{FileId, FilePosition};\n-use ra_syntax::{\n-    algo::find_node_at_offset,\n-    ast::{self, AstNode, NameOwner},\n-    AstPtr,\n-    SyntaxKind::*,\n-    SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n-};\n-use rustc_hash::{FxHashMap, FxHashSet};\n-\n use crate::{\n-    expr,\n     expr::{\n+        self,\n         scope::{ExprScopes, ScopeId},\n         BodySourceMap,\n     },\n     ids::LocationCtx,\n-    lang_item::LangItemTarget,\n+    name,\n+    path::{PathKind, PathSegment},\n     ty::method_resolution::implements_trait,\n     AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HirDatabase, HirFileId,\n-    MacroDef, Module, Name, Path, PerNs, Resolver, Static, Struct, Trait, Ty,\n+    MacroDef, Module, ModuleDef, Name, Path, PerNs, Resolution, Resolver, Static, Struct, Trait,\n+    Ty,\n+};\n+use ra_db::{FileId, FilePosition};\n+use ra_syntax::{\n+    algo::find_node_at_offset,\n+    ast::{self, AstNode, NameOwner},\n+    AstPtr,\n+    SyntaxKind::*,\n+    SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n };\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n /// Locates the module by `FileId`. Picks topmost module in the file.\n pub fn module_from_file_id(db: &impl HirDatabase, file_id: FileId) -> Option<Module> {\n@@ -411,18 +412,32 @@ impl SourceAnalyzer {\n         crate::ty::autoderef(db, &self.resolver, canonical).map(|canonical| canonical.value)\n     }\n \n-    /// Checks that particular type `ty` implements `Future` trait (`future_trait` lang item).\n+    /// Checks that particular type `ty` implements `std::future::Future`.\n     /// This function is used in `.await` syntax completion.\n     pub fn impls_future(&self, db: &impl HirDatabase, ty: Ty) -> bool {\n-        let krate = self.resolver.krate();\n-        if let Some(krate) = krate {\n-            let future_trait = match db.lang_item(krate, \"future_trait\".into()) {\n-                Some(LangItemTarget::Trait(t)) => t,\n-                _ => return false,\n+        let std_future_path = Path {\n+            kind: PathKind::Abs,\n+            segments: vec![\n+                PathSegment { name: name::STD, args_and_bindings: None },\n+                PathSegment { name: name::FUTURE_MOD, args_and_bindings: None },\n+                PathSegment { name: name::FUTURE_TYPE, args_and_bindings: None },\n+            ],\n+        };\n+\n+        let std_future_trait =\n+            match self.resolver.resolve_path_segments(db, &std_future_path).into_fully_resolved() {\n+                PerNs { types: Some(Resolution::Def(ModuleDef::Trait(trait_))), .. } => {\n+                    Some(trait_)\n+                }\n+                _ => None,\n             };\n \n-            let canonical_ty = crate::ty::Canonical { value: ty, num_vars: 0 };\n-            return implements_trait(&canonical_ty, db, &self.resolver, krate, future_trait);\n+        let krate = self.resolver.krate();\n+        if let Some(krate) = krate {\n+            if let Some(trait_) = std_future_trait {\n+                let canonical_ty = crate::ty::Canonical { value: ty, num_vars: 0 };\n+                return implements_trait(&canonical_ty, db, &self.resolver, krate, trait_);\n+            }\n         }\n \n         false"}, {"sha": "9a3b353a92602a8453dd9619af830fc1dd6a7700", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a94f203fc5e2dc6f48a592c26b48f3a98638d77/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a94f203fc5e2dc6f48a592c26b48f3a98638d77/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=6a94f203fc5e2dc6f48a592c26b48f3a98638d77", "patch": "@@ -425,28 +425,25 @@ mod tests {\n         assert_debug_snapshot_matches!(\n         do_completion(\n             r###\"\n-            // Mock Future trait from stdlib\n-            pub mod std {\n-                pub mod future {\n-                    #[lang = \"future_trait\"]\n-                    pub trait Future {}\n-                }\n-            }\n-\n+            //- /main.rs\n             use std::future::*;\n             struct A {}\n             impl Future for A {}\n-\n             fn foo(a: A) {\n                 a.<|>\n             }\n+\n+            //- /std/lib.rs\n+            pub mod future {\n+                pub trait Future {}\n+            }\n             \"###, CompletionKind::Keyword),\n         @r###\"\n        \u22ee[\n        \u22ee    CompletionItem {\n        \u22ee        label: \"await\",\n-       \u22ee        source_range: [358; 358),\n-       \u22ee        delete: [358; 358),\n+       \u22ee        source_range: [74; 74),\n+       \u22ee        delete: [74; 74),\n        \u22ee        insert: \"await\",\n        \u22ee        detail: \"expr.await\",\n        \u22ee    },"}]}