{"sha": "d016cb486738c1ab2574a322924183fa8a870b06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTZjYjQ4NjczOGMxYWIyNTc0YTMyMjkyNDE4M2ZhOGE4NzBiMDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T22:48:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T22:48:38Z"}, "message": "Use only one code-path for parsing fixtures\n\nThis removes leading newlines everywhere, shifting all ranges in tests\nby one", "tree": {"sha": "841871b66bc008a18a5a1053f5a33415c3a54ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/841871b66bc008a18a5a1053f5a33415c3a54ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d016cb486738c1ab2574a322924183fa8a870b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d016cb486738c1ab2574a322924183fa8a870b06", "html_url": "https://github.com/rust-lang/rust/commit/d016cb486738c1ab2574a322924183fa8a870b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d016cb486738c1ab2574a322924183fa8a870b06/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5101ae150db5faa7ddf8393e375032ef371f5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5101ae150db5faa7ddf8393e375032ef371f5e5", "html_url": "https://github.com/rust-lang/rust/commit/e5101ae150db5faa7ddf8393e375032ef371f5e5"}], "stats": {"total": 5541, "additions": 2751, "deletions": 2790}, "files": [{"sha": "858f5ca80fa6e8cd4e5e6bfd2f586c21a365435d", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -4,7 +4,7 @@ use hir::Semantics;\n use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n use ra_ide_db::RootDatabase;\n use ra_syntax::TextRange;\n-use test_utils::{assert_eq_text, extract_offset, extract_range, extract_range_or_offset};\n+use test_utils::{assert_eq_text, extract_offset, extract_range};\n \n use crate::{handlers::Handler, Assist, AssistConfig, AssistContext, Assists};\n use stdx::trim_indent;\n@@ -30,8 +30,9 @@ pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n }\n \n fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n-    let (selection, before) = extract_range_or_offset(before);\n-    let (db, file_id) = crate::tests::with_single_file(&before);\n+    let after = trim_indent(after);\n+    let (db, file_id, selection) = RootDatabase::with_range_or_offset(&before);\n+    let before = db.file_text(file_id).to_string();\n     let frange = FileRange { file_id, range: selection.into() };\n \n     let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n@@ -51,11 +52,11 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n \n     let actual = {\n         let change = assist.source_change.source_file_edits.pop().unwrap();\n-        let mut actual = before.clone();\n+        let mut actual = before;\n         change.edit.apply(&mut actual);\n         actual\n     };\n-    assert_eq_text!(after, &actual);\n+    assert_eq_text!(&after, &actual);\n }\n \n enum ExpectedResult<'a> {\n@@ -66,7 +67,7 @@ enum ExpectedResult<'a> {\n \n fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n     let (db, file_with_caret_id, range_or_offset) = RootDatabase::with_range_or_offset(before);\n-    let text_without_caret = db.file_text(file_with_caret_id).as_ref().to_owned();\n+    let text_without_caret = db.file_text(file_with_caret_id).to_string();\n \n     let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n "}, {"sha": "ddf46e6c44f26f4d2affa4f27af4042a21f0b40f", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -74,8 +74,9 @@ pub const WORKSPACE: SourceRootId = SourceRootId(0);\n pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n     fn with_single_file(text: &str) -> (Self, FileId) {\n         let mut db = Self::default();\n-        let file_id = with_single_file(&mut db, text);\n-        (db, file_id)\n+        let (_, files) = with_files(&mut db, text);\n+        assert_eq!(files.len(), 1);\n+        (db, files[0])\n     }\n \n     fn with_files(ra_fixture: &str) -> Self {\n@@ -112,52 +113,6 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n \n impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}\n \n-fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId {\n-    let file_id = FileId(0);\n-    let mut file_set = vfs::file_set::FileSet::default();\n-    file_set.insert(file_id, vfs::VfsPath::new_virtual_path(\"/main.rs\".to_string()));\n-\n-    let source_root = SourceRoot::new_local(file_set);\n-\n-    let crate_graph = if let Some(meta) = ra_fixture.lines().find(|it| it.contains(\"//-\")) {\n-        let entry = Fixture::parse_meta_line(meta.trim());\n-        let meta = match ParsedMeta::from(&entry) {\n-            ParsedMeta::File(it) => it,\n-        };\n-\n-        let mut crate_graph = CrateGraph::default();\n-        crate_graph.add_crate_root(\n-            file_id,\n-            meta.edition,\n-            meta.krate.map(|name| {\n-                CrateName::new(&name).expect(\"Fixture crate name should not contain dashes\")\n-            }),\n-            meta.cfg,\n-            meta.env,\n-            Default::default(),\n-        );\n-        crate_graph\n-    } else {\n-        let mut crate_graph = CrateGraph::default();\n-        crate_graph.add_crate_root(\n-            file_id,\n-            Edition::Edition2018,\n-            None,\n-            CfgOptions::default(),\n-            Env::default(),\n-            Default::default(),\n-        );\n-        crate_graph\n-    };\n-\n-    db.set_file_text(file_id, Arc::new(ra_fixture.to_string()));\n-    db.set_file_source_root(file_id, WORKSPACE);\n-    db.set_source_root(WORKSPACE, Arc::new(source_root));\n-    db.set_crate_graph(Arc::new(crate_graph));\n-\n-    file_id\n-}\n-\n fn with_files(\n     db: &mut dyn SourceDatabaseExt,\n     fixture: &str,"}, {"sha": "0b74199d9fc6245db8476b9a629e9621f676133d", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -189,20 +189,22 @@ mod tests {\n     }\n \n     fn do_check(ra_fixture: &str, expected: &[&str]) {\n-        let (off, code) = extract_offset(ra_fixture);\n+        let (offset, code) = extract_offset(ra_fixture);\n         let code = {\n             let mut buf = String::new();\n-            let off: usize = off.into();\n+            let off: usize = offset.into();\n             buf.push_str(&code[..off]);\n-            buf.push_str(\"marker\");\n+            buf.push_str(\"<|>marker\");\n             buf.push_str(&code[off..]);\n             buf\n         };\n \n-        let (db, file_id) = TestDB::with_single_file(&code);\n+        let (db, position) = TestDB::with_position(&code);\n+        let file_id = position.file_id;\n+        let offset = position.offset;\n \n         let file_syntax = db.parse(file_id).syntax_node();\n-        let marker: ast::PathExpr = find_node_at_offset(&file_syntax, off).unwrap();\n+        let marker: ast::PathExpr = find_node_at_offset(&file_syntax, offset).unwrap();\n         let function = find_function(&db, file_id);\n \n         let scopes = db.expr_scopes(function.into());\n@@ -302,27 +304,28 @@ mod tests {\n     fn test_bindings_after_at() {\n         do_check(\n             r\"\n-            fn foo() {\n-                match Some(()) {\n-                    opt @ Some(unit) => {\n-                        <|>\n-                    }\n-                    _ => {}\n-                }\n-            }\",\n+fn foo() {\n+    match Some(()) {\n+        opt @ Some(unit) => {\n+            <|>\n+        }\n+        _ => {}\n+    }\n+}\n+\",\n             &[\"opt\", \"unit\"],\n         );\n     }\n \n-    fn do_check_local_name(code: &str, expected_offset: u32) {\n-        let (off, code) = extract_offset(code);\n-\n-        let (db, file_id) = TestDB::with_single_file(&code);\n+    fn do_check_local_name(ra_fixture: &str, expected_offset: u32) {\n+        let (db, position) = TestDB::with_position(ra_fixture);\n+        let file_id = position.file_id;\n+        let offset = position.offset;\n \n         let file = db.parse(file_id).ok().unwrap();\n         let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into())\n             .expect(\"failed to find a name at the target offset\");\n-        let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n+        let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), offset).unwrap();\n \n         let function = find_function(&db, file_id);\n \n@@ -350,53 +353,55 @@ mod tests {\n     fn test_resolve_local_name() {\n         do_check_local_name(\n             r#\"\n-            fn foo(x: i32, y: u32) {\n-                {\n-                    let z = x * 2;\n-                }\n-                {\n-                    let t = x<|> * 3;\n-                }\n-            }\"#,\n-            21,\n+fn foo(x: i32, y: u32) {\n+    {\n+        let z = x * 2;\n+    }\n+    {\n+        let t = x<|> * 3;\n+    }\n+}\n+\"#,\n+            7,\n         );\n     }\n \n     #[test]\n     fn test_resolve_local_name_declaration() {\n         do_check_local_name(\n             r#\"\n-            fn foo(x: String) {\n-                let x : &str = &x<|>;\n-            }\"#,\n-            21,\n+fn foo(x: String) {\n+    let x : &str = &x<|>;\n+}\n+\"#,\n+            7,\n         );\n     }\n \n     #[test]\n     fn test_resolve_local_name_shadow() {\n         do_check_local_name(\n             r\"\n-            fn foo(x: String) {\n-                let x : &str = &x;\n-                x<|>\n-            }\n-            \",\n-            53,\n+fn foo(x: String) {\n+    let x : &str = &x;\n+    x<|>\n+}\n+\",\n+            28,\n         );\n     }\n \n     #[test]\n     fn ref_patterns_contribute_bindings() {\n         do_check_local_name(\n             r\"\n-            fn foo() {\n-                if let Some(&from) = bar() {\n-                    from<|>;\n-                }\n-            }\n-            \",\n-            53,\n+fn foo() {\n+    if let Some(&from) = bar() {\n+        from<|>;\n+    }\n+}\n+\",\n+            28,\n         );\n     }\n "}, {"sha": "a2601c68a50c589389ae865d38af7081611de6ad", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 316, "deletions": 316, "changes": 632, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -29,10 +29,10 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..41 '{     ...4 }; }': ()\n-    21..22 'a': i32\n-    30..38 '{ 1i64 }': i64\n-    32..36 '1i64': i64\n+    10..40 '{     ...4 }; }': ()\n+    20..21 'a': i32\n+    29..37 '{ 1i64 }': i64\n+    31..35 '1i64': i64\n     \"###);\n }\n \n@@ -63,50 +63,50 @@ fn test2() {\n }\n \"#),\n         @r###\"\n-    31..32 '_': &[T]\n-    45..56 '{ loop {} }': T\n-    47..54 'loop {}': !\n-    52..54 '{}': ()\n-    65..66 '_': S<&[T]>\n-    82..93 '{ loop {} }': T\n-    84..91 'loop {}': !\n-    89..91 '{}': ()\n-    122..133 '{ loop {} }': *mut [T; _]\n-    124..131 'loop {}': !\n-    129..131 '{}': ()\n-    160..173 '{     gen() }': *mut [U]\n-    166..169 'gen': fn gen<U>() -> *mut [U; _]\n-    166..171 'gen()': *mut [U; _]\n-    186..420 '{     ...rr); }': ()\n-    196..199 'arr': &[u8; _]\n-    212..216 '&[1]': &[u8; _]\n-    213..216 '[1]': [u8; _]\n-    214..215 '1': u8\n-    227..228 'a': &[u8]\n-    237..240 'arr': &[u8; _]\n-    250..251 'b': u8\n-    254..255 'f': fn f<u8>(&[u8]) -> u8\n-    254..260 'f(arr)': u8\n-    256..259 'arr': &[u8; _]\n-    270..271 'c': &[u8]\n-    280..287 '{ arr }': &[u8]\n-    282..285 'arr': &[u8; _]\n-    297..298 'd': u8\n-    301..302 'g': fn g<u8>(S<&[u8]>) -> u8\n-    301..316 'g(S { a: arr })': u8\n-    303..315 'S { a: arr }': S<&[u8]>\n-    310..313 'arr': &[u8; _]\n-    326..327 'e': [&[u8]; _]\n-    341..346 '[arr]': [&[u8]; _]\n-    342..345 'arr': &[u8; _]\n-    356..357 'f': [&[u8]; _]\n-    371..379 '[arr; 2]': [&[u8]; _]\n-    372..375 'arr': &[u8; _]\n-    377..378 '2': usize\n-    389..390 'g': (&[u8], &[u8])\n-    407..417 '(arr, arr)': (&[u8], &[u8])\n-    408..411 'arr': &[u8; _]\n-    413..416 'arr': &[u8; _]\n+    30..31 '_': &[T]\n+    44..55 '{ loop {} }': T\n+    46..53 'loop {}': !\n+    51..53 '{}': ()\n+    64..65 '_': S<&[T]>\n+    81..92 '{ loop {} }': T\n+    83..90 'loop {}': !\n+    88..90 '{}': ()\n+    121..132 '{ loop {} }': *mut [T; _]\n+    123..130 'loop {}': !\n+    128..130 '{}': ()\n+    159..172 '{     gen() }': *mut [U]\n+    165..168 'gen': fn gen<U>() -> *mut [U; _]\n+    165..170 'gen()': *mut [U; _]\n+    185..419 '{     ...rr); }': ()\n+    195..198 'arr': &[u8; _]\n+    211..215 '&[1]': &[u8; _]\n+    212..215 '[1]': [u8; _]\n+    213..214 '1': u8\n+    226..227 'a': &[u8]\n+    236..239 'arr': &[u8; _]\n+    249..250 'b': u8\n+    253..254 'f': fn f<u8>(&[u8]) -> u8\n+    253..259 'f(arr)': u8\n+    255..258 'arr': &[u8; _]\n+    269..270 'c': &[u8]\n+    279..286 '{ arr }': &[u8]\n+    281..284 'arr': &[u8; _]\n+    296..297 'd': u8\n+    300..301 'g': fn g<u8>(S<&[u8]>) -> u8\n+    300..315 'g(S { a: arr })': u8\n+    302..314 'S { a: arr }': S<&[u8]>\n+    309..312 'arr': &[u8; _]\n+    325..326 'e': [&[u8]; _]\n+    340..345 '[arr]': [&[u8]; _]\n+    341..344 'arr': &[u8; _]\n+    355..356 'f': [&[u8]; _]\n+    370..378 '[arr; 2]': [&[u8]; _]\n+    371..374 'arr': &[u8; _]\n+    376..377 '2': usize\n+    388..389 'g': (&[u8], &[u8])\n+    406..416 '(arr, arr)': (&[u8], &[u8])\n+    407..410 'arr': &[u8; _]\n+    412..415 'arr': &[u8; _]\n     \"###\n     );\n }\n@@ -121,15 +121,15 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..76 '{     ...[1]; }': ()\n-    21..22 'x': &[isize]\n-    35..39 '&[1]': &[isize; _]\n-    36..39 '[1]': [isize; _]\n-    37..38 '1': isize\n-    49..50 'x': *const [isize]\n-    69..73 '&[1]': &[isize; _]\n-    70..73 '[1]': [isize; _]\n-    71..72 '1': isize\n+    10..75 '{     ...[1]; }': ()\n+    20..21 'x': &[isize]\n+    34..38 '&[1]': &[isize; _]\n+    35..38 '[1]': [isize; _]\n+    36..37 '1': isize\n+    48..49 'x': *const [isize]\n+    68..72 '&[1]': &[isize; _]\n+    69..72 '[1]': [isize; _]\n+    70..71 '1': isize\n     \"###);\n }\n \n@@ -155,31 +155,31 @@ fn test(a: A<[u8; 2]>, b: B<[u8; 2]>, c: C<[u8; 2]>) {\n }\n \"#),\n         @r###\"\n-    258..259 'x': A<[T]>\n-    279..284 '{ x }': A<[T]>\n-    281..282 'x': A<[T]>\n-    296..297 'x': B<[T]>\n-    317..322 '{ x }': B<[T]>\n-    319..320 'x': B<[T]>\n-    334..335 'x': C<[T]>\n-    355..360 '{ x }': C<[T]>\n-    357..358 'x': C<[T]>\n-    370..371 'a': A<[u8; _]>\n-    385..386 'b': B<[u8; _]>\n-    400..401 'c': C<[u8; _]>\n-    415..481 '{     ...(c); }': ()\n-    425..426 'd': A<[{unknown}]>\n-    429..433 'foo1': fn foo1<{unknown}>(A<[{unknown}]>) -> A<[{unknown}]>\n-    429..436 'foo1(a)': A<[{unknown}]>\n-    434..435 'a': A<[u8; _]>\n-    446..447 'e': B<[u8]>\n-    450..454 'foo2': fn foo2<u8>(B<[u8]>) -> B<[u8]>\n-    450..457 'foo2(b)': B<[u8]>\n-    455..456 'b': B<[u8; _]>\n-    467..468 'f': C<[u8]>\n-    471..475 'foo3': fn foo3<u8>(C<[u8]>) -> C<[u8]>\n-    471..478 'foo3(c)': C<[u8]>\n-    476..477 'c': C<[u8; _]>\n+    257..258 'x': A<[T]>\n+    278..283 '{ x }': A<[T]>\n+    280..281 'x': A<[T]>\n+    295..296 'x': B<[T]>\n+    316..321 '{ x }': B<[T]>\n+    318..319 'x': B<[T]>\n+    333..334 'x': C<[T]>\n+    354..359 '{ x }': C<[T]>\n+    356..357 'x': C<[T]>\n+    369..370 'a': A<[u8; _]>\n+    384..385 'b': B<[u8; _]>\n+    399..400 'c': C<[u8; _]>\n+    414..480 '{     ...(c); }': ()\n+    424..425 'd': A<[{unknown}]>\n+    428..432 'foo1': fn foo1<{unknown}>(A<[{unknown}]>) -> A<[{unknown}]>\n+    428..435 'foo1(a)': A<[{unknown}]>\n+    433..434 'a': A<[u8; _]>\n+    445..446 'e': B<[u8]>\n+    449..453 'foo2': fn foo2<u8>(B<[u8]>) -> B<[u8]>\n+    449..456 'foo2(b)': B<[u8]>\n+    454..455 'b': B<[u8; _]>\n+    466..467 'f': C<[u8]>\n+    470..474 'foo3': fn foo3<u8>(C<[u8]>) -> C<[u8]>\n+    470..477 'foo3(c)': C<[u8]>\n+    475..476 'c': C<[u8; _]>\n     \"###\n     );\n }\n@@ -198,24 +198,24 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..12 'x': &[T]\n-    28..39 '{ loop {} }': &[T]\n-    30..37 'loop {}': !\n-    35..37 '{}': ()\n-    50..126 '{     ...  }; }': ()\n-    60..61 'x': &[i32]\n-    64..123 'if tru...     }': &[i32]\n-    67..71 'true': bool\n-    72..97 '{     ...     }': &[i32]\n-    82..85 'foo': fn foo<i32>(&[i32]) -> &[i32]\n-    82..91 'foo(&[1])': &[i32]\n-    86..90 '&[1]': &[i32; _]\n-    87..90 '[1]': [i32; _]\n-    88..89 '1': i32\n-    103..123 '{     ...     }': &[i32; _]\n-    113..117 '&[1]': &[i32; _]\n-    114..117 '[1]': [i32; _]\n-    115..116 '1': i32\n+    10..11 'x': &[T]\n+    27..38 '{ loop {} }': &[T]\n+    29..36 'loop {}': !\n+    34..36 '{}': ()\n+    49..125 '{     ...  }; }': ()\n+    59..60 'x': &[i32]\n+    63..122 'if tru...     }': &[i32]\n+    66..70 'true': bool\n+    71..96 '{     ...     }': &[i32]\n+    81..84 'foo': fn foo<i32>(&[i32]) -> &[i32]\n+    81..90 'foo(&[1])': &[i32]\n+    85..89 '&[1]': &[i32; _]\n+    86..89 '[1]': [i32; _]\n+    87..88 '1': i32\n+    102..122 '{     ...     }': &[i32; _]\n+    112..116 '&[1]': &[i32; _]\n+    113..116 '[1]': [i32; _]\n+    114..115 '1': i32\n     \"###\n     );\n }\n@@ -234,24 +234,24 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..12 'x': &[T]\n-    28..39 '{ loop {} }': &[T]\n-    30..37 'loop {}': !\n-    35..37 '{}': ()\n-    50..126 '{     ...  }; }': ()\n-    60..61 'x': &[i32]\n-    64..123 'if tru...     }': &[i32]\n-    67..71 'true': bool\n-    72..92 '{     ...     }': &[i32; _]\n-    82..86 '&[1]': &[i32; _]\n-    83..86 '[1]': [i32; _]\n-    84..85 '1': i32\n-    98..123 '{     ...     }': &[i32]\n-    108..111 'foo': fn foo<i32>(&[i32]) -> &[i32]\n-    108..117 'foo(&[1])': &[i32]\n-    112..116 '&[1]': &[i32; _]\n-    113..116 '[1]': [i32; _]\n-    114..115 '1': i32\n+    10..11 'x': &[T]\n+    27..38 '{ loop {} }': &[T]\n+    29..36 'loop {}': !\n+    34..36 '{}': ()\n+    49..125 '{     ...  }; }': ()\n+    59..60 'x': &[i32]\n+    63..122 'if tru...     }': &[i32]\n+    66..70 'true': bool\n+    71..91 '{     ...     }': &[i32; _]\n+    81..85 '&[1]': &[i32; _]\n+    82..85 '[1]': [i32; _]\n+    83..84 '1': i32\n+    97..122 '{     ...     }': &[i32]\n+    107..110 'foo': fn foo<i32>(&[i32]) -> &[i32]\n+    107..116 'foo(&[1])': &[i32]\n+    111..115 '&[1]': &[i32; _]\n+    112..115 '[1]': [i32; _]\n+    113..114 '1': i32\n     \"###\n     );\n }\n@@ -270,31 +270,31 @@ fn test(i: i32) {\n }\n \"#),\n         @r###\"\n-    11..12 'x': &[T]\n-    28..39 '{ loop {} }': &[T]\n-    30..37 'loop {}': !\n-    35..37 '{}': ()\n-    48..49 'i': i32\n-    56..150 '{     ...  }; }': ()\n-    66..67 'x': &[i32]\n-    70..147 'match ...     }': &[i32]\n-    76..77 'i': i32\n-    88..89 '2': i32\n-    88..89 '2': i32\n-    93..96 'foo': fn foo<i32>(&[i32]) -> &[i32]\n-    93..102 'foo(&[2])': &[i32]\n-    97..101 '&[2]': &[i32; _]\n-    98..101 '[2]': [i32; _]\n-    99..100 '2': i32\n-    112..113 '1': i32\n-    112..113 '1': i32\n-    117..121 '&[1]': &[i32; _]\n-    118..121 '[1]': [i32; _]\n-    119..120 '1': i32\n-    131..132 '_': i32\n-    136..140 '&[3]': &[i32; _]\n-    137..140 '[3]': [i32; _]\n-    138..139 '3': i32\n+    10..11 'x': &[T]\n+    27..38 '{ loop {} }': &[T]\n+    29..36 'loop {}': !\n+    34..36 '{}': ()\n+    47..48 'i': i32\n+    55..149 '{     ...  }; }': ()\n+    65..66 'x': &[i32]\n+    69..146 'match ...     }': &[i32]\n+    75..76 'i': i32\n+    87..88 '2': i32\n+    87..88 '2': i32\n+    92..95 'foo': fn foo<i32>(&[i32]) -> &[i32]\n+    92..101 'foo(&[2])': &[i32]\n+    96..100 '&[2]': &[i32; _]\n+    97..100 '[2]': [i32; _]\n+    98..99 '2': i32\n+    111..112 '1': i32\n+    111..112 '1': i32\n+    116..120 '&[1]': &[i32; _]\n+    117..120 '[1]': [i32; _]\n+    118..119 '1': i32\n+    130..131 '_': i32\n+    135..139 '&[3]': &[i32; _]\n+    136..139 '[3]': [i32; _]\n+    137..138 '3': i32\n     \"###\n     );\n }\n@@ -313,31 +313,31 @@ fn test(i: i32) {\n }\n \"#),\n         @r###\"\n-    11..12 'x': &[T]\n-    28..39 '{ loop {} }': &[T]\n-    30..37 'loop {}': !\n-    35..37 '{}': ()\n-    48..49 'i': i32\n-    56..150 '{     ...  }; }': ()\n-    66..67 'x': &[i32]\n-    70..147 'match ...     }': &[i32]\n-    76..77 'i': i32\n-    88..89 '1': i32\n-    88..89 '1': i32\n-    93..97 '&[1]': &[i32; _]\n-    94..97 '[1]': [i32; _]\n-    95..96 '1': i32\n-    107..108 '2': i32\n-    107..108 '2': i32\n-    112..115 'foo': fn foo<i32>(&[i32]) -> &[i32]\n-    112..121 'foo(&[2])': &[i32]\n-    116..120 '&[2]': &[i32; _]\n-    117..120 '[2]': [i32; _]\n-    118..119 '2': i32\n-    131..132 '_': i32\n-    136..140 '&[3]': &[i32; _]\n-    137..140 '[3]': [i32; _]\n-    138..139 '3': i32\n+    10..11 'x': &[T]\n+    27..38 '{ loop {} }': &[T]\n+    29..36 'loop {}': !\n+    34..36 '{}': ()\n+    47..48 'i': i32\n+    55..149 '{     ...  }; }': ()\n+    65..66 'x': &[i32]\n+    69..146 'match ...     }': &[i32]\n+    75..76 'i': i32\n+    87..88 '1': i32\n+    87..88 '1': i32\n+    92..96 '&[1]': &[i32; _]\n+    93..96 '[1]': [i32; _]\n+    94..95 '1': i32\n+    106..107 '2': i32\n+    106..107 '2': i32\n+    111..114 'foo': fn foo<i32>(&[i32]) -> &[i32]\n+    111..120 'foo(&[2])': &[i32]\n+    115..119 '&[2]': &[i32; _]\n+    116..119 '[2]': [i32; _]\n+    117..118 '2': i32\n+    130..131 '_': i32\n+    135..139 '&[3]': &[i32; _]\n+    136..139 '[3]': [i32; _]\n+    137..138 '3': i32\n     \"###\n     );\n }\n@@ -358,24 +358,24 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..145 '{     ...  }; }': ()\n-    21..22 't': &mut i32\n-    25..31 '&mut 1': &mut i32\n-    30..31 '1': i32\n-    41..42 'x': *const i32\n-    45..142 'match ...     }': *const i32\n-    51..52 '1': i32\n-    63..64 '1': i32\n-    63..64 '1': i32\n-    68..69 't': &mut i32\n-    68..81 't as *mut i32': *mut i32\n-    91..92 '2': i32\n-    91..92 '2': i32\n-    96..97 't': &mut i32\n-    96..105 't as &i32': &i32\n-    115..116 '_': i32\n-    120..121 't': &mut i32\n-    120..135 't as *const i32': *const i32\n+    10..144 '{     ...  }; }': ()\n+    20..21 't': &mut i32\n+    24..30 '&mut 1': &mut i32\n+    29..30 '1': i32\n+    40..41 'x': *const i32\n+    44..141 'match ...     }': *const i32\n+    50..51 '1': i32\n+    62..63 '1': i32\n+    62..63 '1': i32\n+    67..68 't': &mut i32\n+    67..80 't as *mut i32': *mut i32\n+    90..91 '2': i32\n+    90..91 '2': i32\n+    95..96 't': &mut i32\n+    95..104 't as &i32': &i32\n+    114..115 '_': i32\n+    119..120 't': &mut i32\n+    119..134 't as *const i32': *const i32\n     \"###\n     );\n }\n@@ -389,9 +389,9 @@ fn foo() -> u32 {\n }\n \"#, true),\n         @r###\"\n-    17..40 '{     ...own; }': u32\n-    23..37 'return unknown': !\n-    30..37 'unknown': u32\n+    16..39 '{     ...own; }': u32\n+    22..36 'return unknown': !\n+    29..36 'unknown': u32\n     \"###\n     );\n }\n@@ -409,24 +409,24 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    30..31 'x': &Foo\n-    39..41 '{}': ()\n-    52..133 '{     ...oo); }': ()\n-    58..71 'takes_ref_foo': fn takes_ref_foo(&Foo)\n-    58..77 'takes_...(&Foo)': ()\n-    72..76 '&Foo': &Foo\n-    73..76 'Foo': Foo\n-    83..96 'takes_ref_foo': fn takes_ref_foo(&Foo)\n-    83..103 'takes_...&&Foo)': ()\n-    97..102 '&&Foo': &&Foo\n-    98..102 '&Foo': &Foo\n-    99..102 'Foo': Foo\n-    109..122 'takes_ref_foo': fn takes_ref_foo(&Foo)\n-    109..130 'takes_...&&Foo)': ()\n-    123..129 '&&&Foo': &&&Foo\n-    124..129 '&&Foo': &&Foo\n-    125..129 '&Foo': &Foo\n-    126..129 'Foo': Foo\n+    29..30 'x': &Foo\n+    38..40 '{}': ()\n+    51..132 '{     ...oo); }': ()\n+    57..70 'takes_ref_foo': fn takes_ref_foo(&Foo)\n+    57..76 'takes_...(&Foo)': ()\n+    71..75 '&Foo': &Foo\n+    72..75 'Foo': Foo\n+    82..95 'takes_ref_foo': fn takes_ref_foo(&Foo)\n+    82..102 'takes_...&&Foo)': ()\n+    96..101 '&&Foo': &&Foo\n+    97..101 '&Foo': &Foo\n+    98..101 'Foo': Foo\n+    108..121 'takes_ref_foo': fn takes_ref_foo(&Foo)\n+    108..129 'takes_...&&Foo)': ()\n+    122..128 '&&&Foo': &&&Foo\n+    123..128 '&&Foo': &&Foo\n+    124..128 '&Foo': &Foo\n+    125..128 'Foo': Foo\n     \"###\n     );\n }\n@@ -444,26 +444,26 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    29..30 'x': &T\n-    41..47 '{ *x }': T\n-    43..45 '*x': T\n-    44..45 'x': &T\n-    58..127 '{     ...oo); }': ()\n-    64..73 'takes_ref': fn takes_ref<Foo>(&Foo) -> Foo\n-    64..79 'takes_ref(&Foo)': Foo\n-    74..78 '&Foo': &Foo\n-    75..78 'Foo': Foo\n-    85..94 'takes_ref': fn takes_ref<&Foo>(&&Foo) -> &Foo\n-    85..101 'takes_...&&Foo)': &Foo\n-    95..100 '&&Foo': &&Foo\n-    96..100 '&Foo': &Foo\n-    97..100 'Foo': Foo\n-    107..116 'takes_ref': fn takes_ref<&&Foo>(&&&Foo) -> &&Foo\n-    107..124 'takes_...&&Foo)': &&Foo\n-    117..123 '&&&Foo': &&&Foo\n-    118..123 '&&Foo': &&Foo\n-    119..123 '&Foo': &Foo\n-    120..123 'Foo': Foo\n+    28..29 'x': &T\n+    40..46 '{ *x }': T\n+    42..44 '*x': T\n+    43..44 'x': &T\n+    57..126 '{     ...oo); }': ()\n+    63..72 'takes_ref': fn takes_ref<Foo>(&Foo) -> Foo\n+    63..78 'takes_ref(&Foo)': Foo\n+    73..77 '&Foo': &Foo\n+    74..77 'Foo': Foo\n+    84..93 'takes_ref': fn takes_ref<&Foo>(&&Foo) -> &Foo\n+    84..100 'takes_...&&Foo)': &Foo\n+    94..99 '&&Foo': &&Foo\n+    95..99 '&Foo': &Foo\n+    96..99 'Foo': Foo\n+    106..115 'takes_ref': fn takes_ref<&&Foo>(&&&Foo) -> &&Foo\n+    106..123 'takes_...&&Foo)': &&Foo\n+    116..122 '&&&Foo': &&&Foo\n+    117..122 '&&Foo': &&Foo\n+    118..122 '&Foo': &Foo\n+    119..122 'Foo': Foo\n     \"###\n     );\n }\n@@ -483,18 +483,18 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    127..128 'x': &str\n-    136..138 '{}': ()\n-    169..180 '{ loop {} }': String\n-    171..178 'loop {}': !\n-    176..178 '{}': ()\n-    191..236 '{     ... }); }': ()\n-    197..210 'takes_ref_str': fn takes_ref_str(&str)\n-    197..233 'takes_...g() })': ()\n-    211..232 '&{ ret...ng() }': &String\n-    212..232 '{ retu...ng() }': String\n-    214..228 'returns_string': fn returns_string() -> String\n-    214..230 'return...ring()': String\n+    126..127 'x': &str\n+    135..137 '{}': ()\n+    168..179 '{ loop {} }': String\n+    170..177 'loop {}': !\n+    175..177 '{}': ()\n+    190..235 '{     ... }); }': ()\n+    196..209 'takes_ref_str': fn takes_ref_str(&str)\n+    196..232 'takes_...g() })': ()\n+    210..231 '&{ ret...ng() }': &String\n+    211..231 '{ retu...ng() }': String\n+    213..227 'returns_string': fn returns_string() -> String\n+    213..229 'return...ring()': String\n     \"###\n     );\n }\n@@ -513,19 +513,19 @@ fn foo() {\n }\n \"#, true),\n         @r###\"\n-    10..106 '{     ...  }; }': ()\n-    20..21 'x': || -> &u32\n-    24..103 '|| {  ...     }': || -> &u32\n-    27..103 '{     ...     }': &u32\n-    37..82 'if tru...     }': ()\n-    40..44 'true': bool\n-    45..82 '{     ...     }': ()\n-    59..71 'return &1u32': !\n-    66..71 '&1u32': &u32\n-    67..71 '1u32': u32\n-    91..97 '&&1u32': &&u32\n-    92..97 '&1u32': &u32\n-    93..97 '1u32': u32\n+    9..105 '{     ...  }; }': ()\n+    19..20 'x': || -> &u32\n+    23..102 '|| {  ...     }': || -> &u32\n+    26..102 '{     ...     }': &u32\n+    36..81 'if tru...     }': ()\n+    39..43 'true': bool\n+    44..81 '{     ...     }': ()\n+    58..70 'return &1u32': !\n+    65..70 '&1u32': &u32\n+    66..70 '1u32': u32\n+    90..96 '&&1u32': &&u32\n+    91..96 '&1u32': &u32\n+    92..96 '1u32': u32\n     \"###\n     );\n }\n@@ -540,12 +540,12 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    8..9 'x': u32\n-    25..30 '{ 1 }': isize\n-    27..28 '1': isize\n-    41..79 '{     ...foo; }': ()\n-    51..52 'f': fn(u32) -> isize\n-    73..76 'foo': fn foo(u32) -> isize\n+    7..8 'x': u32\n+    24..29 '{ 1 }': isize\n+    26..27 '1': isize\n+    40..78 '{     ...foo; }': ()\n+    50..51 'f': fn(u32) -> isize\n+    72..75 'foo': fn foo(u32) -> isize\n     \"###\n     );\n }\n@@ -567,27 +567,27 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    9..10 'x': u32\n-    26..31 '{ 1 }': isize\n-    28..29 '1': isize\n-    40..41 'x': u32\n-    57..62 '{ 2 }': isize\n-    59..60 '2': isize\n-    71..72 'x': u32\n-    88..93 '{ 3 }': isize\n-    90..91 '3': isize\n-    104..193 '{     ...  }; }': ()\n-    114..115 'x': fn(u32) -> isize\n-    118..190 'match ...     }': fn(u32) -> isize\n-    124..125 '1': i32\n-    136..137 '1': i32\n-    136..137 '1': i32\n-    141..145 'foo1': fn foo1(u32) -> isize\n-    155..156 '2': i32\n-    155..156 '2': i32\n-    160..164 'foo2': fn foo2(u32) -> isize\n-    174..175 '_': i32\n-    179..183 'foo3': fn foo3(u32) -> isize\n+    8..9 'x': u32\n+    25..30 '{ 1 }': isize\n+    27..28 '1': isize\n+    39..40 'x': u32\n+    56..61 '{ 2 }': isize\n+    58..59 '2': isize\n+    70..71 'x': u32\n+    87..92 '{ 3 }': isize\n+    89..90 '3': isize\n+    103..192 '{     ...  }; }': ()\n+    113..114 'x': fn(u32) -> isize\n+    117..189 'match ...     }': fn(u32) -> isize\n+    123..124 '1': i32\n+    135..136 '1': i32\n+    135..136 '1': i32\n+    140..144 'foo1': fn foo1(u32) -> isize\n+    154..155 '2': i32\n+    154..155 '2': i32\n+    159..163 'foo2': fn foo2(u32) -> isize\n+    173..174 '_': i32\n+    178..182 'foo3': fn foo3(u32) -> isize\n     \"###\n     );\n }\n@@ -601,12 +601,12 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    11..55 '{     ...1 }; }': ()\n-    21..22 'f': fn(u32) -> isize\n-    43..52 '|x| { 1 }': |u32| -> isize\n-    44..45 'x': u32\n-    47..52 '{ 1 }': isize\n-    49..50 '1': isize\n+    10..54 '{     ...1 }; }': ()\n+    20..21 'f': fn(u32) -> isize\n+    42..51 '|x| { 1 }': |u32| -> isize\n+    43..44 'x': u32\n+    46..51 '{ 1 }': isize\n+    48..49 '1': isize\n     \"###\n     );\n }\n@@ -624,11 +624,11 @@ impl<TT> S<TT> {\n }\n \"#, true),\n         @r###\"\n-    51..55 'self': &S<TT>\n-    64..87 '{     ...     }': &TT\n-    74..81 '&self.t': &TT\n-    75..79 'self': &S<TT>\n-    75..81 'self.t': TT\n+    50..54 'self': &S<TT>\n+    63..86 '{     ...     }': &TT\n+    73..80 '&self.t': &TT\n+    74..78 'self': &S<TT>\n+    74..80 'self.t': TT\n     \"###\n     );\n }\n@@ -649,13 +649,13 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    162..199 '{     ... 3]; }': ()\n-    172..173 'f': &[usize]\n-    186..196 '&[1, 2, 3]': &[usize; _]\n-    187..196 '[1, 2, 3]': [usize; _]\n-    188..189 '1': usize\n-    191..192 '2': usize\n-    194..195 '3': usize\n+    161..198 '{     ... 3]; }': ()\n+    171..172 'f': &[usize]\n+    185..195 '&[1, 2, 3]': &[usize; _]\n+    186..195 '[1, 2, 3]': [usize; _]\n+    187..188 '1': usize\n+    190..191 '2': usize\n+    193..194 '3': usize\n     \"###\n     );\n }\n@@ -689,19 +689,19 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    388..573 '{     ...bj2; }': ()\n-    398..401 'obj': &dyn Baz<i8, i16>\n-    423..425 '&S': &S<i8, i16>\n-    424..425 'S': S<i8, i16>\n-    435..438 'obj': &dyn Bar<usize, i8, i16>\n-    460..463 'obj': &dyn Baz<i8, i16>\n-    473..476 'obj': &dyn Foo<i8, usize>\n-    495..498 'obj': &dyn Bar<usize, i8, i16>\n-    508..512 'obj2': &dyn Baz<i8, i16>\n-    534..536 '&S': &S<i8, i16>\n-    535..536 'S': S<i8, i16>\n-    546..547 '_': &dyn Foo<i8, usize>\n-    566..570 'obj2': &dyn Baz<i8, i16>\n+    387..572 '{     ...bj2; }': ()\n+    397..400 'obj': &dyn Baz<i8, i16>\n+    422..424 '&S': &S<i8, i16>\n+    423..424 'S': S<i8, i16>\n+    434..437 'obj': &dyn Bar<usize, i8, i16>\n+    459..462 'obj': &dyn Baz<i8, i16>\n+    472..475 'obj': &dyn Foo<i8, usize>\n+    494..497 'obj': &dyn Bar<usize, i8, i16>\n+    507..511 'obj2': &dyn Baz<i8, i16>\n+    533..535 '&S': &S<i8, i16>\n+    534..535 'S': S<i8, i16>\n+    545..546 '_': &dyn Foo<i8, usize>\n+    565..569 'obj2': &dyn Baz<i8, i16>\n     \"###\n     );\n }\n@@ -734,12 +734,12 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    292..348 '{     ...obj; }': ()\n-    302..305 'obj': &dyn D\n-    316..318 '&S': &S\n-    317..318 'S': S\n-    328..331 'obj': &dyn A\n-    342..345 'obj': &dyn D\n+    291..347 '{     ...obj; }': ()\n+    301..304 'obj': &dyn D\n+    315..317 '&S': &S\n+    316..317 'S': S\n+    327..330 'obj': &dyn A\n+    341..344 'obj': &dyn D\n     \"###\n     );\n }"}, {"sha": "be2b48dcc032339757980a82c7bc333ea08ed576", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -71,8 +71,8 @@ fn main() {\n     !1..4 'Foo': Foo({unknown}) -> Foo\n     !1..16 'Foo(vec![1,2,])': Foo\n     !5..15 'vec![1,2,]': {unknown}\n-    156..182 '{     ...,2); }': ()\n-    166..167 'x': Foo\n+    155..181 '{     ...,2); }': ()\n+    165..166 'x': Foo\n     \"###\n     );\n }\n@@ -104,10 +104,10 @@ fn main() {\n     !1..4 'Foo': Foo({unknown}) -> Foo\n     !1..16 'Foo(vec![1,2,])': Foo\n     !5..15 'vec![1,2,]': {unknown}\n-    195..251 '{     ...,2); }': ()\n-    205..206 'x': Foo\n-    228..229 'y': {unknown}\n-    232..248 'crate:...!(1,2)': {unknown}\n+    194..250 '{     ...,2); }': ()\n+    204..205 'x': Foo\n+    227..228 'y': {unknown}\n+    231..247 'crate:...!(1,2)': {unknown}\n     \"###\n     );\n }\n@@ -133,9 +133,9 @@ fn main() {\n         @r###\"\n     !0..5 '42i32': i32\n     !0..5 '42i32': i32\n-    111..164 '{     ...!(); }': ()\n-    121..122 'x': i32\n-    148..149 'y': i32\n+    110..163 '{     ...!(); }': ()\n+    120..121 'x': i32\n+    147..148 'y': i32\n     \"###\n     );\n }\n@@ -197,26 +197,26 @@ fn spam() {\n     !0..6 '1isize': isize\n     !0..6 '1isize': isize\n     !0..6 '1isize': isize\n-    54..457 '{     ...!(); }': ()\n-    88..109 'spam!(...am!())': {unknown}\n-    115..134 'for _ ...!() {}': ()\n-    119..120 '_': {unknown}\n-    132..134 '{}': ()\n-    139..149 '|| spam!()': || -> isize\n-    155..171 'while ...!() {}': ()\n-    169..171 '{}': ()\n-    176..189 'break spam!()': !\n-    195..209 'return spam!()': !\n-    215..269 'match ...     }': isize\n-    239..240 '_': isize\n-    274..290 'spam!(...am!())': {unknown}\n-    296..318 'Spam {...m!() }': {unknown}\n-    324..340 'spam!(...am!()]': {unknown}\n-    365..381 'spam!(... usize': usize\n-    387..395 '&spam!()': &isize\n-    401..409 '-spam!()': isize\n-    415..431 'spam!(...pam!()': {unknown}\n-    437..454 'spam!(...pam!()': isize\n+    53..456 '{     ...!(); }': ()\n+    87..108 'spam!(...am!())': {unknown}\n+    114..133 'for _ ...!() {}': ()\n+    118..119 '_': {unknown}\n+    131..133 '{}': ()\n+    138..148 '|| spam!()': || -> isize\n+    154..170 'while ...!() {}': ()\n+    168..170 '{}': ()\n+    175..188 'break spam!()': !\n+    194..208 'return spam!()': !\n+    214..268 'match ...     }': isize\n+    238..239 '_': isize\n+    273..289 'spam!(...am!())': {unknown}\n+    295..317 'Spam {...m!() }': {unknown}\n+    323..339 'spam!(...am!()]': {unknown}\n+    364..380 'spam!(... usize': usize\n+    386..394 '&spam!()': &isize\n+    400..408 '-spam!()': isize\n+    414..430 'spam!(...pam!()': {unknown}\n+    436..453 'spam!(...pam!()': isize\n     \"###\n     );\n }\n@@ -245,8 +245,8 @@ fn foo() {\n \"#),\n         @r###\"\n     !0..5 '42i32': i32\n-    171..206 '{     ...32); }': ()\n-    181..184 'foo': i32\n+    170..205 '{     ...32); }': ()\n+    180..183 'foo': i32\n     \"###\n     );\n }\n@@ -397,12 +397,12 @@ fn main() {\n }\n \"#),\n         @r###\"\n-        159..164 '{ 0 }': u64\n-        161..162 '0': u64\n-        175..197 '{     ...f(); }': ()\n-        185..187 '_a': u64\n-        191..192 'f': fn f() -> u64\n-        191..194 'f()': u64\n+    158..163 '{ 0 }': u64\n+    160..161 '0': u64\n+    174..196 '{     ...f(); }': ()\n+    184..186 '_a': u64\n+    190..191 'f': fn f() -> u64\n+    190..193 'f()': u64\n     \"###\n     );\n }\n@@ -419,10 +419,10 @@ fn main() {\n }\n \"#),\n         @r###\"\n-        !0..6 '1usize': usize\n-        11..90 '{     ...!(); }': ()\n-        17..66 'macro_...     }': {unknown}\n-        75..77 '_a': usize\n+    !0..6 '1usize': usize\n+    10..89 '{     ...!(); }': ()\n+    16..65 'macro_...     }': {unknown}\n+    74..76 '_a': usize\n     \"###\n     );\n }\n@@ -466,8 +466,8 @@ fn main() {\n \"#),\n         @r###\"\n     !0..1 '0': i32\n-    64..88 '{     ...!(); }': ()\n-    74..75 'x': i32\n+    63..87 '{     ...!(); }': ()\n+    73..74 'x': i32\n     \"###\n     );\n }\n@@ -485,8 +485,8 @@ fn main() {\n \"#),\n         @r###\"\n     !0..2 '\"\"': &str\n-    64..88 '{     ...!(); }': ()\n-    74..75 'x': &str\n+    63..87 '{     ...!(); }': ()\n+    73..74 'x': &str\n     \"###\n     );\n }\n@@ -504,8 +504,8 @@ fn main() {\n \"#),\n         @r###\"\n     !0..1 '0': i32\n-    66..92 '{     ...!(); }': ()\n-    76..77 'x': i32\n+    65..91 '{     ...!(); }': ()\n+    75..76 'x': i32\n     \"###\n     );\n }\n@@ -523,8 +523,8 @@ fn main() {\n \"#),\n         @r###\"\n     !0..13 '\"helloworld!\"': &str\n-    66..122 '{     ...\")); }': ()\n-    76..77 'x': &str\n+    65..121 '{     ...\")); }': ()\n+    75..76 'x': &str\n     \"###\n     );\n }\n@@ -658,8 +658,8 @@ fn main() {\n \"#),\n         @r###\"\n     !0..13 '\"helloworld!\"': &str\n-    104..161 '{     ...\")); }': ()\n-    114..115 'x': &str\n+    103..160 '{     ...\")); }': ()\n+    113..114 'x': &str\n     \"###\n     );\n }\n@@ -677,9 +677,9 @@ fn main() {\n }\n \"#),\n         @r###\"\n-    !0..5 '\"bar\"': &str\n-    88..116 '{     ...o\"); }': ()\n-    98..99 'x': &str\n+    !0..22 '\"__RA_...TED__\"': &str\n+    62..90 '{     ...o\"); }': ()\n+    72..73 'x': &str\n     \"###\n     );\n }\n@@ -794,12 +794,12 @@ fn main() {\n }\n \"#),\n         @r###\"\n-    52..111 '{     ...  }; }': ()\n-    62..63 'x': u32\n-    66..108 'match ...     }': u32\n-    72..74 '()': ()\n-    85..92 'unit!()': ()\n-    96..101 '92u32': u32\n+    51..110 '{     ...  }; }': ()\n+    61..62 'x': u32\n+    65..107 'match ...     }': u32\n+    71..73 '()': ()\n+    84..91 'unit!()': ()\n+    95..100 '92u32': u32\n     \"###\n     );\n }"}, {"sha": "20329bae47905592bfd50c571fa0abd9a3b7aec1", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 189, "deletions": 189, "changes": 378, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -22,15 +22,15 @@ fn test(x: &[u8]) {\n }\n \"#),\n         @r###\"\n-    45..49 'self': &[T]\n-    56..79 '{     ...     }': T\n-    66..73 'loop {}': !\n-    71..73 '{}': ()\n-    131..132 'x': &[u8]\n-    141..163 '{     ...(x); }': ()\n-    147..157 '<[_]>::foo': fn foo<u8>(&[u8]) -> u8\n-    147..160 '<[_]>::foo(x)': u8\n-    158..159 'x': &[u8]\n+    44..48 'self': &[T]\n+    55..78 '{     ...     }': T\n+    65..72 'loop {}': !\n+    70..72 '{}': ()\n+    130..131 'x': &[u8]\n+    140..162 '{     ...(x); }': ()\n+    146..156 '<[_]>::foo': fn foo<u8>(&[u8]) -> u8\n+    146..159 '<[_]>::foo(x)': u8\n+    157..158 'x': &[u8]\n     \"###\n     );\n }\n@@ -52,15 +52,15 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    49..75 '{     ...     }': A\n-    59..69 'A { x: 0 }': A\n-    66..67 '0': u32\n-    88..122 '{     ...a.x; }': ()\n-    98..99 'a': A\n-    102..108 'A::new': fn new() -> A\n-    102..110 'A::new()': A\n-    116..117 'a': A\n-    116..119 'a.x': u32\n+    48..74 '{     ...     }': A\n+    58..68 'A { x: 0 }': A\n+    65..66 '0': u32\n+    87..121 '{     ...a.x; }': ()\n+    97..98 'a': A\n+    101..107 'A::new': fn new() -> A\n+    101..109 'A::new()': A\n+    115..116 'a': A\n+    115..118 'a.x': u32\n     \"###\n     );\n }\n@@ -87,19 +87,19 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    47..67 '{     ...     }': A\n-    57..61 'A::B': A\n-    88..108 '{     ...     }': A\n-    98..102 'A::C': A\n-    121..178 '{     ...  c; }': ()\n-    131..132 'a': A\n-    135..139 'A::b': fn b() -> A\n-    135..141 'A::b()': A\n-    147..148 'a': A\n-    158..159 'c': A\n-    162..166 'A::c': fn c() -> A\n-    162..168 'A::c()': A\n-    174..175 'c': A\n+    46..66 '{     ...     }': A\n+    56..60 'A::B': A\n+    87..107 '{     ...     }': A\n+    97..101 'A::C': A\n+    120..177 '{     ...  c; }': ()\n+    130..131 'a': A\n+    134..138 'A::b': fn b() -> A\n+    134..140 'A::b()': A\n+    146..147 'a': A\n+    157..158 'c': A\n+    161..165 'A::c': fn c() -> A\n+    161..167 'A::c()': A\n+    173..174 'c': A\n     \"###\n     );\n }\n@@ -131,22 +131,22 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    56..64 '{ A {} }': A\n-    58..62 'A {}': A\n-    126..132 '{ 99 }': u32\n-    128..130 '99': u32\n-    202..210 '{ C {} }': C\n-    204..208 'C {}': C\n-    241..325 '{     ...g(); }': ()\n-    251..252 'x': A\n-    255..266 'a::A::thing': fn thing() -> A\n-    255..268 'a::A::thing()': A\n-    278..279 'y': u32\n-    282..293 'b::B::thing': fn thing() -> u32\n-    282..295 'b::B::thing()': u32\n-    305..306 'z': C\n-    309..320 'c::C::thing': fn thing() -> C\n-    309..322 'c::C::thing()': C\n+    55..63 '{ A {} }': A\n+    57..61 'A {}': A\n+    125..131 '{ 99 }': u32\n+    127..129 '99': u32\n+    201..209 '{ C {} }': C\n+    203..207 'C {}': C\n+    240..324 '{     ...g(); }': ()\n+    250..251 'x': A\n+    254..265 'a::A::thing': fn thing() -> A\n+    254..267 'a::A::thing()': A\n+    277..278 'y': u32\n+    281..292 'b::B::thing': fn thing() -> u32\n+    281..294 'b::B::thing()': u32\n+    304..305 'z': C\n+    308..319 'c::C::thing': fn thing() -> C\n+    308..321 'c::C::thing()': C\n     \"###\n     );\n }\n@@ -170,15 +170,15 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    64..67 'val': T\n-    82..109 '{     ...     }': Gen<T>\n-    92..103 'Gen { val }': Gen<T>\n-    98..101 'val': T\n-    123..155 '{     ...32); }': ()\n-    133..134 'a': Gen<u32>\n-    137..146 'Gen::make': fn make<u32>(u32) -> Gen<u32>\n-    137..152 'Gen::make(0u32)': Gen<u32>\n-    147..151 '0u32': u32\n+    63..66 'val': T\n+    81..108 '{     ...     }': Gen<T>\n+    91..102 'Gen { val }': Gen<T>\n+    97..100 'val': T\n+    122..154 '{     ...32); }': ()\n+    132..133 'a': Gen<u32>\n+    136..145 'Gen::make': fn make<u32>(u32) -> Gen<u32>\n+    136..151 'Gen::make(0u32)': Gen<u32>\n+    146..150 '0u32': u32\n     \"###\n     );\n }\n@@ -202,13 +202,13 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    76..100 '{     ...     }': Gen<T>\n-    86..94 'loop { }': !\n-    91..94 '{ }': ()\n-    114..149 '{     ...e(); }': ()\n-    124..125 'a': Gen<u32>\n-    128..144 'Gen::<...::make': fn make<u32>() -> Gen<u32>\n-    128..146 'Gen::<...make()': Gen<u32>\n+    75..99 '{     ...     }': Gen<T>\n+    85..93 'loop { }': !\n+    90..93 '{ }': ()\n+    113..148 '{     ...e(); }': ()\n+    123..124 'a': Gen<u32>\n+    127..143 'Gen::<...::make': fn make<u32>() -> Gen<u32>\n+    127..145 'Gen::<...make()': Gen<u32>\n     \"###\n     );\n }\n@@ -233,13 +233,13 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    102..126 '{     ...     }': Gen<u32, T>\n-    112..120 'loop { }': !\n-    117..120 '{ }': ()\n-    140..180 '{     ...e(); }': ()\n-    150..151 'a': Gen<u32, u64>\n-    154..175 'Gen::<...::make': fn make<u64>() -> Gen<u32, u64>\n-    154..177 'Gen::<...make()': Gen<u32, u64>\n+    101..125 '{     ...     }': Gen<u32, T>\n+    111..119 'loop { }': !\n+    116..119 '{ }': ()\n+    139..179 '{     ...e(); }': ()\n+    149..150 'a': Gen<u32, u64>\n+    153..174 'Gen::<...::make': fn make<u64>() -> Gen<u32, u64>\n+    153..176 'Gen::<...make()': Gen<u32, u64>\n     \"###\n     );\n }\n@@ -287,13 +287,13 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    31..35 'self': &Self\n-    110..114 'self': &Self\n-    170..228 '{     ...i128 }': ()\n-    176..178 'S1': S1\n-    176..187 'S1.method()': u32\n-    203..205 'S2': S2\n-    203..214 'S2.method()': i128\n+    30..34 'self': &Self\n+    109..113 'self': &Self\n+    169..227 '{     ...i128 }': ()\n+    175..177 'S1': S1\n+    175..186 'S1.method()': u32\n+    202..204 'S2': S2\n+    202..213 'S2.method()': i128\n     \"###\n     );\n }\n@@ -334,14 +334,14 @@ mod bar_test {\n }\n \"#),\n         @r###\"\n-    63..67 'self': &Self\n-    169..173 'self': &Self\n-    300..337 '{     ...     }': ()\n-    310..311 'S': S\n-    310..320 'S.method()': u32\n-    416..454 '{     ...     }': ()\n-    426..427 'S': S\n-    426..436 'S.method()': i128\n+    62..66 'self': &Self\n+    168..172 'self': &Self\n+    299..336 '{     ...     }': ()\n+    309..310 'S': S\n+    309..319 'S.method()': u32\n+    415..453 '{     ...     }': ()\n+    425..426 'S': S\n+    425..435 'S.method()': i128\n     \"###\n     );\n }\n@@ -361,10 +361,10 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    33..37 'self': &Self\n-    92..111 '{     ...d(); }': ()\n-    98..99 'S': S\n-    98..108 'S.method()': u32\n+    32..36 'self': &Self\n+    91..110 '{     ...d(); }': ()\n+    97..98 'S': S\n+    97..107 'S.method()': u32\n     \"###\n     );\n }\n@@ -390,17 +390,17 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    43..47 'self': &Self\n-    82..86 'self': &Self\n-    210..361 '{     ..., i8 }': ()\n-    216..218 'S1': S1\n-    216..228 'S1.method1()': (u8, u16, u32)\n-    250..252 'S1': S1\n-    250..262 'S1.method2()': (u32, u16, u8)\n-    284..286 'S2': S2\n-    284..296 'S2.method1()': (i8, i16, {unknown})\n-    324..326 'S2': S2\n-    324..336 'S2.method2()': ({unknown}, i16, i8)\n+    42..46 'self': &Self\n+    81..85 'self': &Self\n+    209..360 '{     ..., i8 }': ()\n+    215..217 'S1': S1\n+    215..227 'S1.method1()': (u8, u16, u32)\n+    249..251 'S1': S1\n+    249..261 'S1.method2()': (u32, u16, u8)\n+    283..285 'S2': S2\n+    283..295 'S2.method1()': (i8, i16, {unknown})\n+    323..325 'S2': S2\n+    323..335 'S2.method2()': ({unknown}, i16, i8)\n     \"###\n     );\n }\n@@ -420,12 +420,12 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    33..37 'self': &Self\n-    102..127 '{     ...d(); }': ()\n-    108..109 'S': S<u32>(u32) -> S<u32>\n-    108..115 'S(1u32)': S<u32>\n-    108..124 'S(1u32...thod()': u32\n-    110..114 '1u32': u32\n+    32..36 'self': &Self\n+    101..126 '{     ...d(); }': ()\n+    107..108 'S': S<u32>(u32) -> S<u32>\n+    107..114 'S(1u32)': S<u32>\n+    107..123 'S(1u32...thod()': u32\n+    109..113 '1u32': u32\n     \"###\n     );\n }\n@@ -446,16 +446,16 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    87..193 '{     ...t(); }': ()\n-    97..99 's1': S\n-    105..121 'Defaul...efault': fn default<S>() -> S\n-    105..123 'Defaul...ault()': S\n-    133..135 's2': S\n-    138..148 'S::default': fn default<S>() -> S\n-    138..150 'S::default()': S\n-    160..162 's3': S\n-    165..188 '<S as ...efault': fn default<S>() -> S\n-    165..190 '<S as ...ault()': S\n+    86..192 '{     ...t(); }': ()\n+    96..98 's1': S\n+    104..120 'Defaul...efault': fn default<S>() -> S\n+    104..122 'Defaul...ault()': S\n+    132..134 's2': S\n+    137..147 'S::default': fn default<S>() -> S\n+    137..149 'S::default()': S\n+    159..161 's3': S\n+    164..187 '<S as ...efault': fn default<S>() -> S\n+    164..189 '<S as ...ault()': S\n     \"###\n     );\n }\n@@ -478,16 +478,16 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    127..211 '{     ...e(); }': ()\n-    137..138 'a': u32\n-    141..148 'S::make': fn make<S, u32>() -> u32\n-    141..150 'S::make()': u32\n-    160..161 'b': u64\n-    164..178 'G::<u64>::make': fn make<G<u64>, u64>() -> u64\n-    164..180 'G::<u6...make()': u64\n-    190..191 'c': f64\n-    199..206 'G::make': fn make<G<f64>, f64>() -> f64\n-    199..208 'G::make()': f64\n+    126..210 '{     ...e(); }': ()\n+    136..137 'a': u32\n+    140..147 'S::make': fn make<S, u32>() -> u32\n+    140..149 'S::make()': u32\n+    159..160 'b': u64\n+    163..177 'G::<u64>::make': fn make<G<u64>, u64>() -> u64\n+    163..179 'G::<u6...make()': u64\n+    189..190 'c': f64\n+    198..205 'G::make': fn make<G<f64>, f64>() -> f64\n+    198..207 'G::make()': f64\n     \"###\n     );\n }\n@@ -512,22 +512,22 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    135..313 '{     ...e(); }': ()\n-    145..146 'a': (u32, i64)\n-    149..163 'S::make::<i64>': fn make<S, u32, i64>() -> (u32, i64)\n-    149..165 'S::mak...i64>()': (u32, i64)\n-    175..176 'b': (u32, i64)\n-    189..196 'S::make': fn make<S, u32, i64>() -> (u32, i64)\n-    189..198 'S::make()': (u32, i64)\n-    208..209 'c': (u32, i64)\n-    212..233 'G::<u3...:<i64>': fn make<G<u32>, u32, i64>() -> (u32, i64)\n-    212..235 'G::<u3...i64>()': (u32, i64)\n-    245..246 'd': (u32, i64)\n-    259..273 'G::make::<i64>': fn make<G<u32>, u32, i64>() -> (u32, i64)\n-    259..275 'G::mak...i64>()': (u32, i64)\n-    285..286 'e': (u32, i64)\n-    301..308 'G::make': fn make<G<u32>, u32, i64>() -> (u32, i64)\n-    301..310 'G::make()': (u32, i64)\n+    134..312 '{     ...e(); }': ()\n+    144..145 'a': (u32, i64)\n+    148..162 'S::make::<i64>': fn make<S, u32, i64>() -> (u32, i64)\n+    148..164 'S::mak...i64>()': (u32, i64)\n+    174..175 'b': (u32, i64)\n+    188..195 'S::make': fn make<S, u32, i64>() -> (u32, i64)\n+    188..197 'S::make()': (u32, i64)\n+    207..208 'c': (u32, i64)\n+    211..232 'G::<u3...:<i64>': fn make<G<u32>, u32, i64>() -> (u32, i64)\n+    211..234 'G::<u3...i64>()': (u32, i64)\n+    244..245 'd': (u32, i64)\n+    258..272 'G::make::<i64>': fn make<G<u32>, u32, i64>() -> (u32, i64)\n+    258..274 'G::mak...i64>()': (u32, i64)\n+    284..285 'e': (u32, i64)\n+    300..307 'G::make': fn make<G<u32>, u32, i64>() -> (u32, i64)\n+    300..309 'G::make()': (u32, i64)\n     \"###\n     );\n }\n@@ -546,10 +546,10 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    101..127 '{     ...e(); }': ()\n-    111..112 'a': (S<i32>, i64)\n-    115..122 'S::make': fn make<S<i32>, i64>() -> (S<i32>, i64)\n-    115..124 'S::make()': (S<i32>, i64)\n+    100..126 '{     ...e(); }': ()\n+    110..111 'a': (S<i32>, i64)\n+    114..121 'S::make': fn make<S<i32>, i64>() -> (S<i32>, i64)\n+    114..123 'S::make()': (S<i32>, i64)\n     \"###\n     );\n }\n@@ -570,13 +570,13 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    131..203 '{     ...e(); }': ()\n-    141..142 'a': (S<u64>, i64)\n-    158..165 'S::make': fn make<S<u64>, i64>() -> (S<u64>, i64)\n-    158..167 'S::make()': (S<u64>, i64)\n-    177..178 'b': (S<u32>, i32)\n-    191..198 'S::make': fn make<S<u32>, i32>() -> (S<u32>, i32)\n-    191..200 'S::make()': (S<u32>, i32)\n+    130..202 '{     ...e(); }': ()\n+    140..141 'a': (S<u64>, i64)\n+    157..164 'S::make': fn make<S<u64>, i64>() -> (S<u64>, i64)\n+    157..166 'S::make()': (S<u64>, i64)\n+    176..177 'b': (S<u32>, i32)\n+    190..197 'S::make': fn make<S<u32>, i32>() -> (S<u32>, i32)\n+    190..199 'S::make()': (S<u32>, i32)\n     \"###\n     );\n }\n@@ -596,13 +596,13 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    107..211 '{     ...>(); }': ()\n-    117..118 'a': (S<u64>, i64, u8)\n-    121..150 '<S as ...::<u8>': fn make<S<u64>, i64, u8>() -> (S<u64>, i64, u8)\n-    121..152 '<S as ...<u8>()': (S<u64>, i64, u8)\n-    162..163 'b': (S<u64>, i64, u8)\n-    182..206 'Trait:...::<u8>': fn make<S<u64>, i64, u8>() -> (S<u64>, i64, u8)\n-    182..208 'Trait:...<u8>()': (S<u64>, i64, u8)\n+    106..210 '{     ...>(); }': ()\n+    116..117 'a': (S<u64>, i64, u8)\n+    120..149 '<S as ...::<u8>': fn make<S<u64>, i64, u8>() -> (S<u64>, i64, u8)\n+    120..151 '<S as ...<u8>()': (S<u64>, i64, u8)\n+    161..162 'b': (S<u64>, i64, u8)\n+    181..205 'Trait:...::<u8>': fn make<S<u64>, i64, u8>() -> (S<u64>, i64, u8)\n+    181..207 'Trait:...<u8>()': (S<u64>, i64, u8)\n     \"###\n     );\n }\n@@ -619,11 +619,11 @@ fn test<T: Trait>(t: T) {\n }\n \"#),\n         @r###\"\n-    30..34 'self': &Self\n-    64..65 't': T\n-    70..89 '{     ...d(); }': ()\n-    76..77 't': T\n-    76..86 't.method()': u32\n+    29..33 'self': &Self\n+    63..64 't': T\n+    69..88 '{     ...d(); }': ()\n+    75..76 't': T\n+    75..85 't.method()': u32\n     \"###\n     );\n }\n@@ -640,11 +640,11 @@ fn test<U, T: Trait<U>>(t: T) {\n }\n \"#),\n         @r###\"\n-    33..37 'self': &Self\n-    71..72 't': T\n-    77..96 '{     ...d(); }': ()\n-    83..84 't': T\n-    83..93 't.method()': U\n+    32..36 'self': &Self\n+    70..71 't': T\n+    76..95 '{     ...d(); }': ()\n+    82..83 't': T\n+    82..92 't.method()': U\n     \"###\n     );\n }\n@@ -666,18 +666,18 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    29..33 'self': Self\n-    111..202 '{     ...(S); }': ()\n-    121..122 'x': u32\n-    130..131 'S': S\n-    130..138 'S.into()': u32\n-    148..149 'y': u64\n-    157..158 'S': S\n-    157..165 'S.into()': u64\n-    175..176 'z': u64\n-    179..196 'Into::...::into': fn into<S, u64>(S) -> u64\n-    179..199 'Into::...nto(S)': u64\n-    197..198 'S': S\n+    28..32 'self': Self\n+    110..201 '{     ...(S); }': ()\n+    120..121 'x': u32\n+    129..130 'S': S\n+    129..137 'S.into()': u32\n+    147..148 'y': u64\n+    156..157 'S': S\n+    156..164 'S.into()': u64\n+    174..175 'z': u64\n+    178..195 'Into::...::into': fn into<S, u64>(S) -> u64\n+    178..198 'Into::...nto(S)': u64\n+    196..197 'S': S\n     \"###\n     );\n }\n@@ -1063,13 +1063,13 @@ fn test(d: &dyn Trait) {\n }\n \"#),\n         @r###\"\n-    52..56 'self': &Self\n-    65..70 '{ 0 }': u32\n-    67..68 '0': u32\n-    177..178 'd': &dyn Trait\n-    192..208 '{     ...o(); }': ()\n-    198..199 'd': &dyn Trait\n-    198..205 'd.foo()': u32\n+    51..55 'self': &Self\n+    64..69 '{ 0 }': u32\n+    66..67 '0': u32\n+    176..177 'd': &dyn Trait\n+    191..207 '{     ...o(); }': ()\n+    197..198 'd': &dyn Trait\n+    197..204 'd.foo()': u32\n     \"###\n     );\n }"}, {"sha": "ab9a990f59b0b85cdece7ad3da9c53d772be114f", "filename": "crates/ra_hir_ty/src/tests/never_type.rs", "status": "modified", "additions": 95, "deletions": 95, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fnever_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fnever_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fnever_type.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -291,40 +291,40 @@ fn test6() {\n         true,\n     );\n     assert_snapshot!(t, @r###\"\n-    25..53 '{     ...urn; }': ()\n-    35..36 'x': u32\n-    44..50 'return': !\n-    65..98 '{     ...; }; }': ()\n-    75..76 'x': u32\n-    84..95 '{ return; }': u32\n-    86..92 'return': !\n-    110..139 '{     ... {}; }': ()\n-    120..121 'x': u32\n-    129..136 'loop {}': !\n-    134..136 '{}': ()\n-    151..184 '{     ...} }; }': ()\n-    161..162 'x': u32\n-    170..181 '{ loop {} }': u32\n-    172..179 'loop {}': !\n-    177..179 '{}': ()\n-    196..260 '{     ...} }; }': ()\n-    206..207 'x': u32\n-    215..257 '{ if t...}; } }': u32\n-    217..255 'if tru... {}; }': u32\n-    220..224 'true': bool\n-    225..237 '{ loop {}; }': u32\n-    227..234 'loop {}': !\n-    232..234 '{}': ()\n-    243..255 '{ loop {}; }': u32\n-    245..252 'loop {}': !\n-    250..252 '{}': ()\n-    272..324 '{     ...; }; }': ()\n-    282..283 'x': u32\n-    291..321 '{ let ...; }; }': u32\n-    297..298 'y': u32\n-    306..318 '{ loop {}; }': u32\n-    308..315 'loop {}': !\n-    313..315 '{}': ()\n+    11..39 '{     ...urn; }': ()\n+    21..22 'x': u32\n+    30..36 'return': !\n+    51..84 '{     ...; }; }': ()\n+    61..62 'x': u32\n+    70..81 '{ return; }': u32\n+    72..78 'return': !\n+    96..125 '{     ... {}; }': ()\n+    106..107 'x': u32\n+    115..122 'loop {}': !\n+    120..122 '{}': ()\n+    137..170 '{     ...} }; }': ()\n+    147..148 'x': u32\n+    156..167 '{ loop {} }': u32\n+    158..165 'loop {}': !\n+    163..165 '{}': ()\n+    182..246 '{     ...} }; }': ()\n+    192..193 'x': u32\n+    201..243 '{ if t...}; } }': u32\n+    203..241 'if tru... {}; }': u32\n+    206..210 'true': bool\n+    211..223 '{ loop {}; }': u32\n+    213..220 'loop {}': !\n+    218..220 '{}': ()\n+    229..241 '{ loop {}; }': u32\n+    231..238 'loop {}': !\n+    236..238 '{}': ()\n+    258..310 '{     ...; }; }': ()\n+    268..269 'x': u32\n+    277..307 '{ let ...; }; }': u32\n+    283..284 'y': u32\n+    292..304 '{ loop {}; }': u32\n+    294..301 'loop {}': !\n+    299..301 '{}': ()\n     \"###);\n }\n \n@@ -341,14 +341,14 @@ fn test1() {\n         true,\n     );\n     assert_snapshot!(t, @r###\"\n-    25..98 '{     ...\" }; }': ()\n-    68..69 'x': u32\n-    77..95 '{ loop...foo\" }': &str\n-    79..86 'loop {}': !\n-    84..86 '{}': ()\n-    88..93 '\"foo\"': &str\n-    77..95: expected u32, got &str\n-    88..93: expected u32, got &str\n+    11..84 '{     ...\" }; }': ()\n+    54..55 'x': u32\n+    63..81 '{ loop...foo\" }': &str\n+    65..72 'loop {}': !\n+    70..72 '{}': ()\n+    74..79 '\"foo\"': &str\n+    63..81: expected u32, got &str\n+    74..79: expected u32, got &str\n     \"###);\n }\n \n@@ -381,58 +381,58 @@ fn test3() {\n         true,\n     );\n     assert_snapshot!(t, @r###\"\n-    25..99 '{     ...} }; }': ()\n-    68..69 'x': u32\n-    77..96 '{ loop...k; } }': ()\n-    79..94 'loop { break; }': ()\n-    84..94 '{ break; }': ()\n-    86..91 'break': !\n-    77..96: expected u32, got ()\n-    79..94: expected u32, got ()\n-    111..357 '{     ...; }; }': ()\n-    154..155 'x': u32\n-    163..189 '{ for ...; }; }': ()\n-    165..186 'for a ...eak; }': ()\n-    169..170 'a': {unknown}\n-    174..175 'b': {unknown}\n-    176..186 '{ break; }': ()\n-    178..183 'break': !\n-    240..241 'x': u32\n-    249..267 '{ for ... {}; }': ()\n-    251..264 'for a in b {}': ()\n-    255..256 'a': {unknown}\n-    260..261 'b': {unknown}\n-    262..264 '{}': ()\n-    318..319 'x': u32\n-    327..354 '{ for ...; }; }': ()\n-    329..351 'for a ...urn; }': ()\n-    333..334 'a': {unknown}\n-    338..339 'b': {unknown}\n-    340..351 '{ return; }': ()\n-    342..348 'return': !\n-    163..189: expected u32, got ()\n-    249..267: expected u32, got ()\n-    327..354: expected u32, got ()\n-    369..668 '{     ...; }; }': ()\n-    412..413 'x': u32\n-    421..447 '{ whil...; }; }': ()\n-    423..444 'while ...eak; }': ()\n-    429..433 'true': bool\n-    434..444 '{ break; }': ()\n-    436..441 'break': !\n-    551..552 'x': u32\n-    560..578 '{ whil... {}; }': ()\n-    562..575 'while true {}': ()\n-    568..572 'true': bool\n-    573..575 '{}': ()\n-    629..630 'x': u32\n-    638..665 '{ whil...; }; }': ()\n-    640..662 'while ...urn; }': ()\n-    646..650 'true': bool\n-    651..662 '{ return; }': ()\n-    653..659 'return': !\n-    421..447: expected u32, got ()\n-    560..578: expected u32, got ()\n-    638..665: expected u32, got ()\n+    11..85 '{     ...} }; }': ()\n+    54..55 'x': u32\n+    63..82 '{ loop...k; } }': ()\n+    65..80 'loop { break; }': ()\n+    70..80 '{ break; }': ()\n+    72..77 'break': !\n+    63..82: expected u32, got ()\n+    65..80: expected u32, got ()\n+    97..343 '{     ...; }; }': ()\n+    140..141 'x': u32\n+    149..175 '{ for ...; }; }': ()\n+    151..172 'for a ...eak; }': ()\n+    155..156 'a': {unknown}\n+    160..161 'b': {unknown}\n+    162..172 '{ break; }': ()\n+    164..169 'break': !\n+    226..227 'x': u32\n+    235..253 '{ for ... {}; }': ()\n+    237..250 'for a in b {}': ()\n+    241..242 'a': {unknown}\n+    246..247 'b': {unknown}\n+    248..250 '{}': ()\n+    304..305 'x': u32\n+    313..340 '{ for ...; }; }': ()\n+    315..337 'for a ...urn; }': ()\n+    319..320 'a': {unknown}\n+    324..325 'b': {unknown}\n+    326..337 '{ return; }': ()\n+    328..334 'return': !\n+    149..175: expected u32, got ()\n+    235..253: expected u32, got ()\n+    313..340: expected u32, got ()\n+    355..654 '{     ...; }; }': ()\n+    398..399 'x': u32\n+    407..433 '{ whil...; }; }': ()\n+    409..430 'while ...eak; }': ()\n+    415..419 'true': bool\n+    420..430 '{ break; }': ()\n+    422..427 'break': !\n+    537..538 'x': u32\n+    546..564 '{ whil... {}; }': ()\n+    548..561 'while true {}': ()\n+    554..558 'true': bool\n+    559..561 '{}': ()\n+    615..616 'x': u32\n+    624..651 '{ whil...; }; }': ()\n+    626..648 'while ...urn; }': ()\n+    632..636 'true': bool\n+    637..648 '{ return; }': ()\n+    639..645 'return': !\n+    407..433: expected u32, got ()\n+    546..564: expected u32, got ()\n+    624..651: expected u32, got ()\n     \"###);\n }"}, {"sha": "8fa29613775c809a98a450e7925d32b4653e9632", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 285, "deletions": 285, "changes": 570, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -30,54 +30,54 @@ fn test(x: &i32) {\n }\n \"#),\n         @r###\"\n-    9..10 'x': &i32\n-    18..369 '{     ...o_x; }': ()\n-    28..29 'y': &i32\n-    32..33 'x': &i32\n-    43..45 '&z': &i32\n-    44..45 'z': i32\n-    48..49 'x': &i32\n-    59..60 'a': i32\n-    63..64 'z': i32\n-    74..80 '(c, d)': (i32, &str)\n-    75..76 'c': i32\n-    78..79 'd': &str\n-    83..95 '(1, \"hello\")': (i32, &str)\n-    84..85 '1': i32\n-    87..94 '\"hello\"': &str\n-    102..152 'for (e...     }': ()\n-    106..112 '(e, f)': ({unknown}, {unknown})\n-    107..108 'e': {unknown}\n-    110..111 'f': {unknown}\n-    116..125 'some_iter': {unknown}\n-    126..152 '{     ...     }': ()\n-    140..141 'g': {unknown}\n-    144..145 'e': {unknown}\n-    158..205 'if let...     }': ()\n-    165..170 '[val]': [{unknown}]\n-    166..169 'val': {unknown}\n-    173..176 'opt': [{unknown}]\n-    177..205 '{     ...     }': ()\n-    191..192 'h': {unknown}\n-    195..198 'val': {unknown}\n-    215..221 'lambda': |u64, u64, i32| -> i32\n-    224..256 '|a: u6...b; c }': |u64, u64, i32| -> i32\n-    225..226 'a': u64\n-    233..234 'b': u64\n-    236..237 'c': i32\n-    244..256 '{ a + b; c }': i32\n-    246..247 'a': u64\n-    246..251 'a + b': u64\n-    250..251 'b': u64\n-    253..254 'c': i32\n-    267..279 'ref ref_to_x': &&i32\n-    282..283 'x': &i32\n-    293..302 'mut mut_x': &i32\n-    305..306 'x': &i32\n-    316..336 'ref mu...f_to_x': &mut &i32\n-    339..340 'x': &i32\n-    350..351 'k': &mut &i32\n-    354..366 'mut_ref_to_x': &mut &i32\n+    8..9 'x': &i32\n+    17..368 '{     ...o_x; }': ()\n+    27..28 'y': &i32\n+    31..32 'x': &i32\n+    42..44 '&z': &i32\n+    43..44 'z': i32\n+    47..48 'x': &i32\n+    58..59 'a': i32\n+    62..63 'z': i32\n+    73..79 '(c, d)': (i32, &str)\n+    74..75 'c': i32\n+    77..78 'd': &str\n+    82..94 '(1, \"hello\")': (i32, &str)\n+    83..84 '1': i32\n+    86..93 '\"hello\"': &str\n+    101..151 'for (e...     }': ()\n+    105..111 '(e, f)': ({unknown}, {unknown})\n+    106..107 'e': {unknown}\n+    109..110 'f': {unknown}\n+    115..124 'some_iter': {unknown}\n+    125..151 '{     ...     }': ()\n+    139..140 'g': {unknown}\n+    143..144 'e': {unknown}\n+    157..204 'if let...     }': ()\n+    164..169 '[val]': [{unknown}]\n+    165..168 'val': {unknown}\n+    172..175 'opt': [{unknown}]\n+    176..204 '{     ...     }': ()\n+    190..191 'h': {unknown}\n+    194..197 'val': {unknown}\n+    214..220 'lambda': |u64, u64, i32| -> i32\n+    223..255 '|a: u6...b; c }': |u64, u64, i32| -> i32\n+    224..225 'a': u64\n+    232..233 'b': u64\n+    235..236 'c': i32\n+    243..255 '{ a + b; c }': i32\n+    245..246 'a': u64\n+    245..250 'a + b': u64\n+    249..250 'b': u64\n+    252..253 'c': i32\n+    266..278 'ref ref_to_x': &&i32\n+    281..282 'x': &i32\n+    292..301 'mut mut_x': &i32\n+    304..305 'x': &i32\n+    315..335 'ref mu...f_to_x': &mut &i32\n+    338..339 'x': &i32\n+    349..350 'k': &mut &i32\n+    353..365 'mut_ref_to_x': &mut &i32\n     \"###\n     );\n }\n@@ -97,47 +97,47 @@ fn test(x: &i32) {\n }\n \"#, true),\n         @r###\"\n-    18..29 '{ loop {} }': T\n-    20..27 'loop {}': !\n-    25..27 '{}': ()\n-    38..39 'x': &i32\n-    47..209 '{     ...) {} }': ()\n-    53..76 'if let...y() {}': ()\n-    60..65 '\"foo\"': &str\n-    60..65 '\"foo\"': &str\n-    68..71 'any': fn any<&str>() -> &str\n-    68..73 'any()': &str\n-    74..76 '{}': ()\n-    81..100 'if let...y() {}': ()\n-    88..89 '1': i32\n-    88..89 '1': i32\n-    92..95 'any': fn any<i32>() -> i32\n-    92..97 'any()': i32\n-    98..100 '{}': ()\n-    105..127 'if let...y() {}': ()\n-    112..116 '1u32': u32\n-    112..116 '1u32': u32\n-    119..122 'any': fn any<u32>() -> u32\n-    119..124 'any()': u32\n-    125..127 '{}': ()\n-    132..154 'if let...y() {}': ()\n-    139..143 '1f32': f32\n-    139..143 '1f32': f32\n-    146..149 'any': fn any<f32>() -> f32\n-    146..151 'any()': f32\n-    152..154 '{}': ()\n-    159..180 'if let...y() {}': ()\n-    166..169 '1.0': f64\n-    166..169 '1.0': f64\n-    172..175 'any': fn any<f64>() -> f64\n-    172..177 'any()': f64\n-    178..180 '{}': ()\n-    185..207 'if let...y() {}': ()\n-    192..196 'true': bool\n-    192..196 'true': bool\n-    199..202 'any': fn any<bool>() -> bool\n-    199..204 'any()': bool\n-    205..207 '{}': ()\n+    17..28 '{ loop {} }': T\n+    19..26 'loop {}': !\n+    24..26 '{}': ()\n+    37..38 'x': &i32\n+    46..208 '{     ...) {} }': ()\n+    52..75 'if let...y() {}': ()\n+    59..64 '\"foo\"': &str\n+    59..64 '\"foo\"': &str\n+    67..70 'any': fn any<&str>() -> &str\n+    67..72 'any()': &str\n+    73..75 '{}': ()\n+    80..99 'if let...y() {}': ()\n+    87..88 '1': i32\n+    87..88 '1': i32\n+    91..94 'any': fn any<i32>() -> i32\n+    91..96 'any()': i32\n+    97..99 '{}': ()\n+    104..126 'if let...y() {}': ()\n+    111..115 '1u32': u32\n+    111..115 '1u32': u32\n+    118..121 'any': fn any<u32>() -> u32\n+    118..123 'any()': u32\n+    124..126 '{}': ()\n+    131..153 'if let...y() {}': ()\n+    138..142 '1f32': f32\n+    138..142 '1f32': f32\n+    145..148 'any': fn any<f32>() -> f32\n+    145..150 'any()': f32\n+    151..153 '{}': ()\n+    158..179 'if let...y() {}': ()\n+    165..168 '1.0': f64\n+    165..168 '1.0': f64\n+    171..174 'any': fn any<f64>() -> f64\n+    171..176 'any()': f64\n+    177..179 '{}': ()\n+    184..206 'if let...y() {}': ()\n+    191..195 'true': bool\n+    191..195 'true': bool\n+    198..201 'any': fn any<bool>() -> bool\n+    198..203 'any()': bool\n+    204..206 '{}': ()\n     \"###\n     );\n }\n@@ -152,16 +152,16 @@ fn test(x: &i32) {\n }\n \"#, true),\n         @r###\"\n-    9..10 'x': &i32\n-    18..76 '{     ...2 {} }': ()\n-    24..46 'if let...u32 {}': ()\n-    31..36 '1..76': u32\n-    39..43 '2u32': u32\n-    44..46 '{}': ()\n-    51..74 'if let...u32 {}': ()\n-    58..64 '1..=76': u32\n-    67..71 '2u32': u32\n-    72..74 '{}': ()\n+    8..9 'x': &i32\n+    17..75 '{     ...2 {} }': ()\n+    23..45 'if let...u32 {}': ()\n+    30..35 '1..76': u32\n+    38..42 '2u32': u32\n+    43..45 '{}': ()\n+    50..73 'if let...u32 {}': ()\n+    57..63 '1..=76': u32\n+    66..70 '2u32': u32\n+    71..73 '{}': ()\n     \"###\n     );\n }\n@@ -178,19 +178,19 @@ fn test() {\n }\n \"#),\n     @r###\"\n-    28..79 '{     ...(1); }': ()\n-    38..42 'A(n)': A<i32>\n-    40..41 'n': &i32\n-    45..50 '&A(1)': &A<i32>\n-    46..47 'A': A<i32>(i32) -> A<i32>\n-    46..50 'A(1)': A<i32>\n-    48..49 '1': i32\n-    60..64 'A(n)': A<i32>\n-    62..63 'n': &mut i32\n-    67..76 '&mut A(1)': &mut A<i32>\n-    72..73 'A': A<i32>(i32) -> A<i32>\n-    72..76 'A(1)': A<i32>\n-    74..75 '1': i32\n+    27..78 '{     ...(1); }': ()\n+    37..41 'A(n)': A<i32>\n+    39..40 'n': &i32\n+    44..49 '&A(1)': &A<i32>\n+    45..46 'A': A<i32>(i32) -> A<i32>\n+    45..49 'A(1)': A<i32>\n+    47..48 '1': i32\n+    59..63 'A(n)': A<i32>\n+    61..62 'n': &mut i32\n+    66..75 '&mut A(1)': &mut A<i32>\n+    71..72 'A': A<i32>(i32) -> A<i32>\n+    71..75 'A(1)': A<i32>\n+    73..74 '1': i32\n     \"###\n     );\n }\n@@ -206,18 +206,18 @@ fn test() {\n }\n \"#),\n     @r###\"\n-    11..57 '{     ...= v; }': ()\n-    21..22 'v': &(i32, &i32)\n-    25..33 '&(1, &2)': &(i32, &i32)\n-    26..33 '(1, &2)': (i32, &i32)\n-    27..28 '1': i32\n-    30..32 '&2': &i32\n-    31..32 '2': i32\n-    43..50 '(_, &w)': (i32, &i32)\n-    44..45 '_': i32\n-    47..49 '&w': &i32\n-    48..49 'w': i32\n-    53..54 'v': &(i32, &i32)\n+    10..56 '{     ...= v; }': ()\n+    20..21 'v': &(i32, &i32)\n+    24..32 '&(1, &2)': &(i32, &i32)\n+    25..32 '(1, &2)': (i32, &i32)\n+    26..27 '1': i32\n+    29..31 '&2': &i32\n+    30..31 '2': i32\n+    42..49 '(_, &w)': (i32, &i32)\n+    43..44 '_': i32\n+    46..48 '&w': &i32\n+    47..48 'w': i32\n+    52..53 'v': &(i32, &i32)\n     \"###\n     );\n }\n@@ -242,30 +242,30 @@ fn test() {\n }\n \"#),\n     @r###\"\n-    11..210 '{     ...   } }': ()\n-    21..26 'slice': &[f64]\n-    37..43 '&[0.0]': &[f64; _]\n-    38..43 '[0.0]': [f64; _]\n-    39..42 '0.0': f64\n-    49..208 'match ...     }': ()\n-    55..60 'slice': &[f64]\n-    71..74 '&[]': &[f64]\n-    72..74 '[]': [f64]\n-    78..80 '{}': ()\n-    90..94 '&[a]': &[f64]\n-    91..94 '[a]': [f64]\n-    92..93 'a': f64\n-    98..124 '{     ...     }': ()\n-    112..113 'a': f64\n-    134..141 '&[b, c]': &[f64]\n-    135..141 '[b, c]': [f64]\n-    136..137 'b': f64\n-    139..140 'c': f64\n-    145..186 '{     ...     }': ()\n-    159..160 'b': f64\n-    174..175 'c': f64\n-    195..196 '_': &[f64]\n-    200..202 '{}': ()\n+    10..209 '{     ...   } }': ()\n+    20..25 'slice': &[f64]\n+    36..42 '&[0.0]': &[f64; _]\n+    37..42 '[0.0]': [f64; _]\n+    38..41 '0.0': f64\n+    48..207 'match ...     }': ()\n+    54..59 'slice': &[f64]\n+    70..73 '&[]': &[f64]\n+    71..73 '[]': [f64]\n+    77..79 '{}': ()\n+    89..93 '&[a]': &[f64]\n+    90..93 '[a]': [f64]\n+    91..92 'a': f64\n+    97..123 '{     ...     }': ()\n+    111..112 'a': f64\n+    133..140 '&[b, c]': &[f64]\n+    134..140 '[b, c]': [f64]\n+    135..136 'b': f64\n+    138..139 'c': f64\n+    144..185 '{     ...     }': ()\n+    158..159 'b': f64\n+    173..174 'c': f64\n+    194..195 '_': &[f64]\n+    199..201 '{}': ()\n     \"###\n     );\n }\n@@ -288,25 +288,25 @@ fn test() {\n }\n \"#),\n     @r###\"\n-    11..180 '{     ...   } }': ()\n-    21..24 'arr': [f64; _]\n-    37..47 '[0.0, 1.0]': [f64; _]\n-    38..41 '0.0': f64\n-    43..46 '1.0': f64\n-    53..178 'match ...     }': ()\n-    59..62 'arr': [f64; _]\n-    73..81 '[1.0, a]': [f64; _]\n-    74..77 '1.0': f64\n-    74..77 '1.0': f64\n-    79..80 'a': f64\n-    85..111 '{     ...     }': ()\n-    99..100 'a': f64\n-    121..127 '[b, c]': [f64; _]\n-    122..123 'b': f64\n-    125..126 'c': f64\n-    131..172 '{     ...     }': ()\n-    145..146 'b': f64\n-    160..161 'c': f64\n+    10..179 '{     ...   } }': ()\n+    20..23 'arr': [f64; _]\n+    36..46 '[0.0, 1.0]': [f64; _]\n+    37..40 '0.0': f64\n+    42..45 '1.0': f64\n+    52..177 'match ...     }': ()\n+    58..61 'arr': [f64; _]\n+    72..80 '[1.0, a]': [f64; _]\n+    73..76 '1.0': f64\n+    73..76 '1.0': f64\n+    78..79 'a': f64\n+    84..110 '{     ...     }': ()\n+    98..99 'a': f64\n+    120..126 '[b, c]': [f64; _]\n+    121..122 'b': f64\n+    124..125 'c': f64\n+    130..171 '{     ...     }': ()\n+    144..145 'b': f64\n+    159..160 'c': f64\n     \"###\n     );\n }\n@@ -339,31 +339,31 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    68..289 '{     ...  d; }': ()\n-    78..79 'e': E\n-    82..95 'E::A { x: 3 }': E\n-    92..93 '3': usize\n-    106..113 'S(y, z)': S\n-    108..109 'y': u32\n-    111..112 'z': E\n-    116..119 'foo': S\n-    129..148 'E::A {..._var }': E\n-    139..146 'new_var': usize\n-    151..152 'e': E\n-    159..245 'match ...     }': usize\n-    165..166 'e': E\n-    177..187 'E::A { x }': E\n-    184..185 'x': usize\n-    191..192 'x': usize\n-    202..206 'E::B': E\n-    210..213 'foo': bool\n-    217..218 '1': usize\n-    228..232 'E::B': E\n-    236..238 '10': usize\n-    256..275 'ref d ...{ .. }': &E\n-    264..275 'E::A { .. }': E\n-    278..279 'e': E\n-    285..286 'd': &E\n+    67..288 '{     ...  d; }': ()\n+    77..78 'e': E\n+    81..94 'E::A { x: 3 }': E\n+    91..92 '3': usize\n+    105..112 'S(y, z)': S\n+    107..108 'y': u32\n+    110..111 'z': E\n+    115..118 'foo': S\n+    128..147 'E::A {..._var }': E\n+    138..145 'new_var': usize\n+    150..151 'e': E\n+    158..244 'match ...     }': usize\n+    164..165 'e': E\n+    176..186 'E::A { x }': E\n+    183..184 'x': usize\n+    190..191 'x': usize\n+    201..205 'E::B': E\n+    209..212 'foo': bool\n+    216..217 '1': usize\n+    227..231 'E::B': E\n+    235..237 '10': usize\n+    255..274 'ref d ...{ .. }': &E\n+    263..274 'E::A { .. }': E\n+    277..278 'e': E\n+    284..285 'd': &E\n     \"###\n     );\n }\n@@ -389,20 +389,20 @@ impl E {\n }\n \"#),\n         @r###\"\n-    76..218 '{     ...     }': ()\n-    86..211 'match ...     }': ()\n-    93..100 'loop {}': !\n-    98..100 '{}': ()\n-    116..129 'Self::A { x }': E\n-    126..127 'x': usize\n-    133..139 '{ x; }': ()\n-    135..136 'x': usize\n-    153..163 'Self::B(x)': E\n-    161..162 'x': usize\n-    167..173 '{ x; }': ()\n-    169..170 'x': usize\n-    187..194 'Self::C': E\n-    198..200 '{}': ()\n+    75..217 '{     ...     }': ()\n+    85..210 'match ...     }': ()\n+    92..99 'loop {}': !\n+    97..99 '{}': ()\n+    115..128 'Self::A { x }': E\n+    125..126 'x': usize\n+    132..138 '{ x; }': ()\n+    134..135 'x': usize\n+    152..162 'Self::B(x)': E\n+    160..161 'x': usize\n+    166..172 '{ x; }': ()\n+    168..169 'x': usize\n+    186..193 'Self::C': E\n+    197..199 '{}': ()\n     \"###\n     );\n }\n@@ -430,23 +430,23 @@ fn test(a1: A<u32>, o: Option<u64>) {\n }\n \"#),\n         @r###\"\n-    79..81 'a1': A<u32>\n-    91..92 'o': Option<u64>\n-    107..244 '{     ...  }; }': ()\n-    117..128 'A { x: x2 }': A<u32>\n-    124..126 'x2': u32\n-    131..133 'a1': A<u32>\n-    143..161 'A::<i6...: x3 }': A<i64>\n-    157..159 'x3': i64\n-    164..174 'A { x: 1 }': A<i64>\n-    171..172 '1': i64\n-    180..241 'match ...     }': u64\n-    186..187 'o': Option<u64>\n-    198..213 'Option::Some(t)': Option<u64>\n-    211..212 't': u64\n-    217..218 't': u64\n-    228..229 '_': Option<u64>\n-    233..234 '1': u64\n+    78..80 'a1': A<u32>\n+    90..91 'o': Option<u64>\n+    106..243 '{     ...  }; }': ()\n+    116..127 'A { x: x2 }': A<u32>\n+    123..125 'x2': u32\n+    130..132 'a1': A<u32>\n+    142..160 'A::<i6...: x3 }': A<i64>\n+    156..158 'x3': i64\n+    163..173 'A { x: 1 }': A<i64>\n+    170..171 '1': i64\n+    179..240 'match ...     }': u64\n+    185..186 'o': Option<u64>\n+    197..212 'Option::Some(t)': Option<u64>\n+    210..211 't': u64\n+    216..217 't': u64\n+    227..228 '_': Option<u64>\n+    232..233 '1': u64\n     \"###\n     );\n }\n@@ -470,27 +470,27 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    74..75 '1': usize\n-    88..310 '{     ...atch }': ()\n-    98..99 'a': Option<u32>\n-    115..119 'None': Option<u32>\n-    129..130 'b': Option<i64>\n-    146..183 'match ...     }': Option<i64>\n-    152..153 'a': Option<u32>\n-    164..168 'None': Option<u32>\n-    172..176 'None': Option<i64>\n-    193..194 '_': ()\n-    201..224 'match ... Foo }': Foo\n-    207..209 '()': ()\n-    212..215 'Foo': Foo\n-    219..222 'Foo': Foo\n-    255..256 '_': ()\n-    263..286 'match ... Bar }': usize\n-    269..271 '()': ()\n-    274..277 'Bar': usize\n-    281..284 'Bar': usize\n-    201..224: expected (), got Foo\n-    263..286: expected (), got usize\n+    73..74 '1': usize\n+    87..309 '{     ...atch }': ()\n+    97..98 'a': Option<u32>\n+    114..118 'None': Option<u32>\n+    128..129 'b': Option<i64>\n+    145..182 'match ...     }': Option<i64>\n+    151..152 'a': Option<u32>\n+    163..167 'None': Option<u32>\n+    171..175 'None': Option<i64>\n+    192..193 '_': ()\n+    200..223 'match ... Foo }': Foo\n+    206..208 '()': ()\n+    211..214 'Foo': Foo\n+    218..221 'Foo': Foo\n+    254..255 '_': ()\n+    262..285 'match ... Bar }': usize\n+    268..270 '()': ()\n+    273..276 'Bar': usize\n+    280..283 'Bar': usize\n+    200..223: expected (), got Foo\n+    262..285: expected (), got usize\n     \"###\n     );\n }\n@@ -507,18 +507,18 @@ fn main() {\n         s if s.foo() => (),\n     }\n }\n-    \"#), @\"\n-        28..32 'self': &S\n-        42..51 '{ false }': bool\n-        44..49 'false': bool\n-        65..116 '{     ...   } }': ()\n-        71..114 'match ...     }': ()\n-        77..78 'S': S\n-        89..90 's': S\n-        94..95 's': S\n-        94..101 's.foo()': bool\n-        105..107 '()': ()\n-    \")\n+    \"#), @r###\"\n+    27..31 'self': &S\n+    41..50 '{ false }': bool\n+    43..48 'false': bool\n+    64..115 '{     ...   } }': ()\n+    70..113 'match ...     }': ()\n+    76..77 'S': S\n+    88..89 's': S\n+    93..94 's': S\n+    93..100 's.foo()': bool\n+    104..106 '()': ()\n+    \"###)\n }\n \n #[test]\n@@ -538,35 +538,35 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    94..95 't': T\n-    100..101 'f': F\n-    111..122 '{ loop {} }': U\n-    113..120 'loop {}': !\n-    118..120 '{}': ()\n-    134..233 '{     ... x); }': ()\n-    140..143 'foo': fn foo<&(i32, &str), i32, |&(i32, &str)| -> i32>(&(i32, &str), |&(i32, &str)| -> i32) -> i32\n-    140..167 'foo(&(...y)| x)': i32\n-    144..153 '&(1, \"a\")': &(i32, &str)\n-    145..153 '(1, \"a\")': (i32, &str)\n-    146..147 '1': i32\n-    149..152 '\"a\"': &str\n-    155..166 '|&(x, y)| x': |&(i32, &str)| -> i32\n-    156..163 '&(x, y)': &(i32, &str)\n-    157..163 '(x, y)': (i32, &str)\n-    158..159 'x': i32\n-    161..162 'y': &str\n-    165..166 'x': i32\n-    204..207 'foo': fn foo<&(i32, &str), &i32, |&(i32, &str)| -> &i32>(&(i32, &str), |&(i32, &str)| -> &i32) -> &i32\n-    204..230 'foo(&(...y)| x)': &i32\n-    208..217 '&(1, \"a\")': &(i32, &str)\n-    209..217 '(1, \"a\")': (i32, &str)\n-    210..211 '1': i32\n-    213..216 '\"a\"': &str\n-    219..229 '|(x, y)| x': |&(i32, &str)| -> &i32\n-    220..226 '(x, y)': (i32, &str)\n-    221..222 'x': &i32\n-    224..225 'y': &&str\n-    228..229 'x': &i32\n+    93..94 't': T\n+    99..100 'f': F\n+    110..121 '{ loop {} }': U\n+    112..119 'loop {}': !\n+    117..119 '{}': ()\n+    133..232 '{     ... x); }': ()\n+    139..142 'foo': fn foo<&(i32, &str), i32, |&(i32, &str)| -> i32>(&(i32, &str), |&(i32, &str)| -> i32) -> i32\n+    139..166 'foo(&(...y)| x)': i32\n+    143..152 '&(1, \"a\")': &(i32, &str)\n+    144..152 '(1, \"a\")': (i32, &str)\n+    145..146 '1': i32\n+    148..151 '\"a\"': &str\n+    154..165 '|&(x, y)| x': |&(i32, &str)| -> i32\n+    155..162 '&(x, y)': &(i32, &str)\n+    156..162 '(x, y)': (i32, &str)\n+    157..158 'x': i32\n+    160..161 'y': &str\n+    164..165 'x': i32\n+    203..206 'foo': fn foo<&(i32, &str), &i32, |&(i32, &str)| -> &i32>(&(i32, &str), |&(i32, &str)| -> &i32) -> &i32\n+    203..229 'foo(&(...y)| x)': &i32\n+    207..216 '&(1, \"a\")': &(i32, &str)\n+    208..216 '(1, \"a\")': (i32, &str)\n+    209..210 '1': i32\n+    212..215 '\"a\"': &str\n+    218..228 '|(x, y)| x': |&(i32, &str)| -> &i32\n+    219..225 '(x, y)': (i32, &str)\n+    220..221 'x': &i32\n+    223..224 'y': &&str\n+    227..228 'x': &i32\n     \"###\n     );\n }"}, {"sha": "eedaa27bad6dafc563c49b7f9f71872267bf779e", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 173, "deletions": 173, "changes": 346, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -15,11 +15,11 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..37 '{    l... {}; }': ()\n-    20..21 'x': ()\n-    24..34 'if true {}': ()\n-    27..31 'true': bool\n-    32..34 '{}': ()\n+    10..36 '{    l... {}; }': ()\n+    19..20 'x': ()\n+    23..33 'if true {}': ()\n+    26..30 'true': bool\n+    31..33 '{}': ()\n     \"###\n     );\n }\n@@ -35,10 +35,10 @@ fn test(x: X) {\n }\n \"#),\n         @r###\"\n-    20..21 'x': X\n-    26..47 '{     ...eld; }': ()\n-    32..33 'x': X\n-    32..44 'x.some_field': {unknown}\n+    19..20 'x': X\n+    25..46 '{     ...eld; }': ()\n+    31..32 'x': X\n+    31..43 'x.some_field': {unknown}\n     \"###\n     );\n }\n@@ -56,14 +56,14 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..89 '{     ...   } }': ()\n-    17..21 'X {}': {unknown}\n-    27..87 'match ...     }': ()\n-    33..34 'x': {unknown}\n-    45..52 'A::B {}': {unknown}\n-    56..58 '()': ()\n-    68..74 'A::Y()': {unknown}\n-    78..80 '()': ()\n+    10..88 '{     ...   } }': ()\n+    16..20 'X {}': {unknown}\n+    26..86 'match ...     }': ()\n+    32..33 'x': {unknown}\n+    44..51 'A::B {}': {unknown}\n+    55..57 '()': ()\n+    67..73 'A::Y()': {unknown}\n+    77..79 '()': ()\n     \"###\n     );\n }\n@@ -78,12 +78,12 @@ fn quux() {\n }\n \"#),\n         @r###\"\n-    11..41 '{     ...+ y; }': ()\n-    21..22 'y': i32\n-    25..27 '92': i32\n-    33..34 '1': i32\n-    33..38 '1 + y': i32\n-    37..38 'y': i32\n+    10..40 '{     ...+ y; }': ()\n+    20..21 'y': i32\n+    24..26 '92': i32\n+    32..33 '1': i32\n+    32..37 '1 + y': i32\n+    36..37 'y': i32\n     \"###\n     );\n }\n@@ -100,13 +100,13 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..48 '{     ...&y]; }': ()\n-    21..22 'y': &{unknown}\n-    25..32 'unknown': &{unknown}\n-    38..45 '[y, &y]': [&&{unknown}; _]\n-    39..40 'y': &{unknown}\n-    42..44 '&y': &&{unknown}\n-    43..44 'y': &{unknown}\n+    10..47 '{     ...&y]; }': ()\n+    20..21 'y': &{unknown}\n+    24..31 'unknown': &{unknown}\n+    37..44 '[y, &y]': [&&{unknown}; _]\n+    38..39 'y': &{unknown}\n+    41..43 '&y': &&{unknown}\n+    42..43 'y': &{unknown}\n     \"###\n     );\n }\n@@ -122,20 +122,20 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..80 '{     ...x)]; }': ()\n-    21..22 'x': &&{unknown}\n-    25..32 'unknown': &&{unknown}\n-    42..43 'y': &&{unknown}\n-    46..53 'unknown': &&{unknown}\n-    59..77 '[(x, y..., &x)]': [(&&&{unknown}, &&&{unknown}); _]\n-    60..66 '(x, y)': (&&&{unknown}, &&&{unknown})\n-    61..62 'x': &&{unknown}\n-    64..65 'y': &&{unknown}\n-    68..76 '(&y, &x)': (&&&{unknown}, &&&{unknown})\n-    69..71 '&y': &&&{unknown}\n-    70..71 'y': &&{unknown}\n-    73..75 '&x': &&&{unknown}\n-    74..75 'x': &&{unknown}\n+    10..79 '{     ...x)]; }': ()\n+    20..21 'x': &&{unknown}\n+    24..31 'unknown': &&{unknown}\n+    41..42 'y': &&{unknown}\n+    45..52 'unknown': &&{unknown}\n+    58..76 '[(x, y..., &x)]': [(&&&{unknown}, &&&{unknown}); _]\n+    59..65 '(x, y)': (&&&{unknown}, &&&{unknown})\n+    60..61 'x': &&{unknown}\n+    63..64 'y': &&{unknown}\n+    67..75 '(&y, &x)': (&&&{unknown}, &&&{unknown})\n+    68..70 '&y': &&&{unknown}\n+    69..70 'y': &&{unknown}\n+    72..74 '&x': &&&{unknown}\n+    73..74 'x': &&{unknown}\n     \"###\n     );\n }\n@@ -157,12 +157,12 @@ fn write() {\n }\n \"#),\n         @r###\"\n-    54..139 '{     ...   } }': ()\n-    60..137 'match ...     }': ()\n-    66..83 'someth...nknown': Maybe<{unknown}>\n-    94..124 'Maybe:...thing)': Maybe<{unknown}>\n-    106..123 'ref mu...ething': &mut {unknown}\n-    128..130 '()': ()\n+    53..138 '{     ...   } }': ()\n+    59..136 'match ...     }': ()\n+    65..82 'someth...nknown': Maybe<{unknown}>\n+    93..123 'Maybe:...thing)': Maybe<{unknown}>\n+    105..122 'ref mu...ething': &mut {unknown}\n+    127..129 '()': ()\n     \"###\n     );\n }\n@@ -178,13 +178,13 @@ fn test_line_buffer() {\n }\n \"#),\n         @r###\"\n-    23..53 '{     ...n']; }': ()\n-    29..50 '&[0, b...b'\\n']': &[u8; _]\n-    30..50 '[0, b'...b'\\n']': [u8; _]\n-    31..32 '0': u8\n-    34..39 'b'\\n'': u8\n-    41..42 '1': u8\n-    44..49 'b'\\n'': u8\n+    22..52 '{     ...n']; }': ()\n+    28..49 '&[0, b...b'\\n']': &[u8; _]\n+    29..49 '[0, b'...b'\\n']': [u8; _]\n+    30..31 '0': u8\n+    33..38 'b'\\n'': u8\n+    40..41 '1': u8\n+    43..48 'b'\\n'': u8\n     \"###\n     );\n }\n@@ -201,14 +201,14 @@ pub fn compute() {\n }\n \"#),\n         @r###\"\n-    18..108 '{     ...   } }': ()\n-    24..106 'match ...     }': ()\n-    30..37 'nope!()': {unknown}\n-    48..94 'SizeSk...tail }': {unknown}\n-    82..86 'true': bool\n-    82..86 'true': bool\n-    88..92 'tail': {unknown}\n-    98..100 '{}': ()\n+    17..107 '{     ...   } }': ()\n+    23..105 'match ...     }': ()\n+    29..36 'nope!()': {unknown}\n+    47..93 'SizeSk...tail }': {unknown}\n+    81..85 'true': bool\n+    81..85 'true': bool\n+    87..91 'tail': {unknown}\n+    97..99 '{}': ()\n     \"###\n     );\n }\n@@ -225,14 +225,14 @@ pub fn primitive_type() {\n }\n \"#),\n         @r###\"\n-    25..106 '{     ...   } }': ()\n-    31..104 'match ...     }': ()\n-    37..42 '*self': {unknown}\n-    38..42 'self': {unknown}\n-    53..91 'Borrow...), ..}': {unknown}\n-    74..86 'Primitive(p)': {unknown}\n-    84..85 'p': {unknown}\n-    95..97 '{}': ()\n+    24..105 '{     ...   } }': ()\n+    30..103 'match ...     }': ()\n+    36..41 '*self': {unknown}\n+    37..41 'self': {unknown}\n+    52..90 'Borrow...), ..}': {unknown}\n+    73..85 'Primitive(p)': {unknown}\n+    83..84 'p': {unknown}\n+    94..96 '{}': ()\n     \"###\n     );\n }\n@@ -259,29 +259,29 @@ fn extra_compiler_flags() {\n }\n \"#),\n         @r###\"\n-    27..323 '{     ...   } }': ()\n-    33..321 'for co...     }': ()\n-    37..44 'content': &{unknown}\n-    48..61 'doesnt_matter': {unknown}\n-    62..321 '{     ...     }': ()\n-    76..80 'name': &&{unknown}\n-    83..167 'if doe...     }': &&{unknown}\n-    86..99 'doesnt_matter': bool\n-    100..129 '{     ...     }': &&{unknown}\n-    114..119 'first': &&{unknown}\n-    135..167 '{     ...     }': &&{unknown}\n-    149..157 '&content': &&{unknown}\n-    150..157 'content': &{unknown}\n-    182..189 'content': &{unknown}\n-    192..314 'if ICE...     }': &{unknown}\n-    195..232 'ICE_RE..._VALUE': {unknown}\n-    195..248 'ICE_RE...&name)': bool\n-    242..247 '&name': &&&{unknown}\n-    243..247 'name': &&{unknown}\n-    249..277 '{     ...     }': &&{unknown}\n-    263..267 'name': &&{unknown}\n-    283..314 '{     ...     }': &{unknown}\n-    297..304 'content': &{unknown}\n+    26..322 '{     ...   } }': ()\n+    32..320 'for co...     }': ()\n+    36..43 'content': &{unknown}\n+    47..60 'doesnt_matter': {unknown}\n+    61..320 '{     ...     }': ()\n+    75..79 'name': &&{unknown}\n+    82..166 'if doe...     }': &&{unknown}\n+    85..98 'doesnt_matter': bool\n+    99..128 '{     ...     }': &&{unknown}\n+    113..118 'first': &&{unknown}\n+    134..166 '{     ...     }': &&{unknown}\n+    148..156 '&content': &&{unknown}\n+    149..156 'content': &{unknown}\n+    181..188 'content': &{unknown}\n+    191..313 'if ICE...     }': &{unknown}\n+    194..231 'ICE_RE..._VALUE': {unknown}\n+    194..247 'ICE_RE...&name)': bool\n+    241..246 '&name': &&&{unknown}\n+    242..246 'name': &&{unknown}\n+    248..276 '{     ...     }': &&{unknown}\n+    262..266 'name': &&{unknown}\n+    282..313 '{     ...     }': &{unknown}\n+    296..303 'content': &{unknown}\n     \"###\n     );\n }\n@@ -302,11 +302,11 @@ fn test<R>(query_response: Canonical<QueryResponse<R>>) {\n }\n \"#),\n         @r###\"\n-    92..106 'query_response': Canonical<QueryResponse<R>>\n-    137..167 '{     ...lue; }': ()\n-    143..164 '&query....value': &QueryResponse<R>\n-    144..158 'query_response': Canonical<QueryResponse<R>>\n-    144..164 'query_....value': QueryResponse<R>\n+    91..105 'query_response': Canonical<QueryResponse<R>>\n+    136..166 '{     ...lue; }': ()\n+    142..163 '&query....value': &QueryResponse<R>\n+    143..157 'query_response': Canonical<QueryResponse<R>>\n+    143..163 'query_....value': QueryResponse<R>\n     \"###\n     );\n }\n@@ -322,9 +322,9 @@ fn test() {\n \"#),\n         @r###\"\n     !0..4 '0u32': u32\n-    45..70 '{     ...()); }': ()\n-    55..56 'a': u32\n-        \"###\n+    44..69 '{     ...()); }': ()\n+    54..55 'a': u32\n+    \"###\n     );\n }\n \n@@ -344,10 +344,10 @@ pub fn main_loop() {\n }\n \"#),\n     @r###\"\n-    144..146 '{}': ()\n-    169..198 '{     ...t(); }': ()\n-    175..193 'FxHash...efault': fn default<{unknown}, FxHasher>() -> HashSet<{unknown}, FxHasher>\n-    175..195 'FxHash...ault()': HashSet<{unknown}, FxHasher>\n+    143..145 '{}': ()\n+    168..197 '{     ...t(); }': ()\n+    174..192 'FxHash...efault': fn default<{unknown}, FxHasher>() -> HashSet<{unknown}, FxHasher>\n+    174..194 'FxHash...ault()': HashSet<{unknown}, FxHasher>\n     \"###\n     );\n }\n@@ -395,9 +395,9 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    26..53 '{     ...oo() }': ()\n-    32..49 '<Trait...>::foo': {unknown}\n-    32..51 '<Trait...:foo()': ()\n+    25..52 '{     ...oo() }': ()\n+    31..48 '<Trait...>::foo': {unknown}\n+    31..50 '<Trait...:foo()': ()\n     \"###\n     );\n }\n@@ -495,13 +495,13 @@ fn foo(params: &[usize]) {\n }\n \"#),\n         @r###\"\n-    8..14 'params': &[usize]\n-    26..81 '{     ...   } }': ()\n-    32..79 'match ...     }': ()\n-    38..44 'params': &[usize]\n-    55..67 '[ps @ .., _]': [usize]\n-    65..66 '_': usize\n-    71..73 '{}': ()\n+    7..13 'params': &[usize]\n+    25..80 '{     ...   } }': ()\n+    31..78 'match ...     }': ()\n+    37..43 'params': &[usize]\n+    54..66 '[ps @ .., _]': [usize]\n+    64..65 '_': usize\n+    70..72 '{}': ()\n     \"###\n     );\n }\n@@ -522,13 +522,13 @@ fn foo(b: Bar) {\n }\n \"#),\n         @r###\"\n-    36..37 'b': Bar\n-    44..96 '{     ...   } }': ()\n-    50..94 'match ...     }': ()\n-    56..57 'b': Bar\n-    68..81 'Bar { a: .. }': Bar\n-    77..79 '..': bool\n-    85..87 '{}': ()\n+    35..36 'b': Bar\n+    43..95 '{     ...   } }': ()\n+    49..93 'match ...     }': ()\n+    55..56 'b': Bar\n+    67..80 'Bar { a: .. }': Bar\n+    76..78 '..': bool\n+    84..86 '{}': ()\n     \"###\n     );\n }\n@@ -549,16 +549,16 @@ fn main() {\n     a.foo();\n }\n \"#), @r###\"\n-    32..38 'FOO {}': FOO\n-    64..68 'self': &FOO\n-    70..72 '{}': ()\n-    86..120 '{     ...o(); }': ()\n-    96..97 'a': &FOO\n-    100..104 '&FOO': &FOO\n-    101..104 'FOO': FOO\n-    110..111 'a': &FOO\n-    110..117 'a.foo()': ()\n-\"###\n+    31..37 'FOO {}': FOO\n+    63..67 'self': &FOO\n+    69..71 '{}': ()\n+    85..119 '{     ...o(); }': ()\n+    95..96 'a': &FOO\n+    99..103 '&FOO': &FOO\n+    100..103 'FOO': FOO\n+    109..110 'a': &FOO\n+    109..116 'a.foo()': ()\n+    \"###\n     );\n }\n \n@@ -580,17 +580,17 @@ fn main() {\n     let _a = foo!();\n }\n \"#), @r###\"\n-    45..60 '{     loop {} }': T\n-    51..58 'loop {}': !\n-    56..58 '{}': ()\n+    44..59 '{     loop {} }': T\n+    50..57 'loop {}': !\n+    55..57 '{}': ()\n     !0..31 '{letr:...g();r}': Foo\n     !4..5 'r': Foo\n     !18..26 'anything': fn anything<Foo>() -> Foo\n     !18..28 'anything()': Foo\n     !29..30 'r': Foo\n-    164..188 '{     ...!(); }': ()\n-    174..176 '_a': Foo\n-\"###);\n+    163..187 '{     ...!(); }': ()\n+    173..175 '_a': Foo\n+    \"###);\n }\n \n #[test]\n@@ -623,13 +623,13 @@ where\n }\n \"#),\n         @r###\"\n-    66..70 'self': Self\n-    268..272 'self': Self\n-    467..471 'self': SelectStatement<F, S, D, W, O, LOf, {unknown}, {unknown}>\n-    489..523 '{     ...     }': ()\n-    499..503 'self': SelectStatement<F, S, D, W, O, LOf, {unknown}, {unknown}>\n-    499..509 'self.order': O\n-    499..516 'self.o...into()': dyn QueryFragment<DB>\n+    65..69 'self': Self\n+    267..271 'self': Self\n+    466..470 'self': SelectStatement<F, S, D, W, O, LOf, {unknown}, {unknown}>\n+    488..522 '{     ...     }': ()\n+    498..502 'self': SelectStatement<F, S, D, W, O, LOf, {unknown}, {unknown}>\n+    498..508 'self.order': O\n+    498..515 'self.o...into()': dyn QueryFragment<DB>\n     \"###\n     );\n }\n@@ -644,10 +644,10 @@ impl Foo {\n }\n \"#),\n         @r###\"\n-    59..73 '{ Self(0i64) }': Foo\n-    61..65 'Self': Foo(i64) -> Foo\n-    61..71 'Self(0i64)': Foo\n-    66..70 '0i64': i64\n+    58..72 '{ Self(0i64) }': Foo\n+    60..64 'Self': Foo(i64) -> Foo\n+    60..70 'Self(0i64)': Foo\n+    65..69 '0i64': i64\n     \"###\n     );\n     assert_snapshot!(\n@@ -658,10 +658,10 @@ impl Foo<i64> {\n }\n \"#),\n         @r###\"\n-    65..79 '{ Self(0i64) }': Foo<i64>\n-    67..71 'Self': Foo<i64>(i64) -> Foo<i64>\n-    67..77 'Self(0i64)': Foo<i64>\n-    72..76 '0i64': i64\n+    64..78 '{ Self(0i64) }': Foo<i64>\n+    66..70 'Self': Foo<i64>(i64) -> Foo<i64>\n+    66..76 'Self(0i64)': Foo<i64>\n+    71..75 '0i64': i64\n     \"###\n     );\n }\n@@ -685,11 +685,11 @@ fn check<T: PrimInt>(i: T) {\n }\n \"#),\n         @r###\"\n-    118..122 'self': Self\n-    149..150 'i': T\n-    155..171 '{     ...w(); }': ()\n-    161..162 'i': T\n-    161..168 'i.pow()': ()\n+    117..121 'self': Self\n+    148..149 'i': T\n+    154..170 '{     ...w(); }': ()\n+    160..161 'i': T\n+    160..167 'i.pow()': ()\n     \"###\n     );\n }\n@@ -720,13 +720,13 @@ where\n }\n \"#),\n         @r###\"\n-    137..140 'key': &K\n-    199..215 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n-    205..208 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n-    205..213 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n-    209..212 'key': &K\n-    229..232 'key': &K\n-    291..294 '{ }': ()\n+    136..139 'key': &K\n+    198..214 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n+    204..207 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n+    204..212 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n+    208..211 'key': &K\n+    228..231 'key': &K\n+    290..293 '{ }': ()\n     \"###\n     );\n }\n@@ -776,11 +776,11 @@ pub trait Service<Request> {\n }\n \"#),\n         @r###\"\n-    380..384 'self': &mut PeerSet<D>\n-    402..425 '{     ...     }': dyn Future<Output = ()>\n-    412..419 'loop {}': !\n-    417..419 '{}': ()\n-    576..580 'self': &mut Self\n+    379..383 'self': &mut PeerSet<D>\n+    401..424 '{     ...     }': dyn Future<Output = ()>\n+    411..418 'loop {}': !\n+    416..418 '{}': ()\n+    575..579 'self': &mut Self\n     \"###\n     );\n }"}, {"sha": "d7ef9add667ff423f2f7023d81f36cd0ec0e0c41", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 827, "deletions": 827, "changes": 1654, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -64,9 +64,9 @@ impl S<u32> {\n }\n \"#,\n     ), @r###\"\n-    63..93 '{     ...     }': ()\n-    73..86 'Self { x: 1 }': S<u32>\n-    83..84 '1': u32\n+    49..79 '{     ...     }': ()\n+    59..72 'Self { x: 1 }': S<u32>\n+    69..70 '1': u32\n     \"###);\n }\n \n@@ -85,9 +85,9 @@ fn foo() {\n \n \"#,\n     ), @r###\"\n-    64..84 '{     ...1 }; }': ()\n-    70..81 'SS { x: 1 }': S<u32>\n-    78..79 '1': u32\n+    50..70 '{     ...1 }; }': ()\n+    56..67 'SS { x: 1 }': S<u32>\n+    64..65 '1': u32\n     \"###);\n }\n \n@@ -175,19 +175,19 @@ fn test(a: u32, b: isize, c: !, d: &str) {\n     1.0f32;\n }\"#),\n         @r###\"\n-    9..10 'a': u32\n-    17..18 'b': isize\n-    27..28 'c': !\n-    33..34 'd': &str\n-    42..121 '{     ...f32; }': ()\n-    48..49 'a': u32\n-    55..56 'b': isize\n-    62..63 'c': !\n-    69..70 'd': &str\n-    76..82 '1usize': usize\n-    88..94 '1isize': isize\n-    100..106 '\"test\"': &str\n-    112..118 '1.0f32': f32\n+    8..9 'a': u32\n+    16..17 'b': isize\n+    26..27 'c': !\n+    32..33 'd': &str\n+    41..120 '{     ...f32; }': ()\n+    47..48 'a': u32\n+    54..55 'b': isize\n+    61..62 'c': !\n+    68..69 'd': &str\n+    75..81 '1usize': usize\n+    87..93 '1isize': isize\n+    99..105 '\"test\"': &str\n+    111..117 '1.0f32': f32\n     \"###\n     );\n }\n@@ -206,17 +206,17 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..118 '{     ...= e; }': ()\n-    21..22 'a': isize\n-    25..31 '1isize': isize\n-    41..42 'b': usize\n-    52..53 '1': usize\n-    63..64 'c': usize\n-    67..68 'b': usize\n-    78..79 'd': u32\n-    94..95 'e': i32\n-    105..106 'f': i32\n-    114..115 'e': i32\n+    10..117 '{     ...= e; }': ()\n+    20..21 'a': isize\n+    24..30 '1isize': isize\n+    40..41 'b': usize\n+    51..52 '1': usize\n+    62..63 'c': usize\n+    66..67 'b': usize\n+    77..78 'd': u32\n+    93..94 'e': i32\n+    104..105 'f': i32\n+    113..114 'e': i32\n     \"###\n     );\n }\n@@ -237,15 +237,15 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    15..20 '{ 1 }': u32\n-    17..18 '1': u32\n-    48..53 '{ 1 }': u32\n-    50..51 '1': u32\n-    67..91 '{     ...c(); }': ()\n-    73..74 'a': fn a() -> u32\n-    73..76 'a()': u32\n-    82..86 'b::c': fn c() -> u32\n-    82..88 'b::c()': u32\n+    14..19 '{ 1 }': u32\n+    16..17 '1': u32\n+    47..52 '{ 1 }': u32\n+    49..50 '1': u32\n+    66..90 '{     ...c(); }': ()\n+    72..73 'a': fn a() -> u32\n+    72..75 'a()': u32\n+    81..85 'b::c': fn c() -> u32\n+    81..87 'b::c()': u32\n     \"###\n     );\n }\n@@ -266,13 +266,13 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    41..46 '{ 1 }': i32\n-    43..44 '1': i32\n-    60..93 '{     ...o(); }': ()\n-    66..72 'S::foo': fn foo() -> i32\n-    66..74 'S::foo()': i32\n-    80..88 '<S>::foo': fn foo() -> i32\n-    80..90 '<S>::foo()': i32\n+    40..45 '{ 1 }': i32\n+    42..43 '1': i32\n+    59..92 '{     ...o(); }': ()\n+    65..71 'S::foo': fn foo() -> i32\n+    65..73 'S::foo()': i32\n+    79..87 '<S>::foo': fn foo() -> i32\n+    79..89 '<S>::foo()': i32\n     \"###\n     );\n }\n@@ -297,22 +297,22 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    72..154 '{     ...a.c; }': ()\n-    82..83 'c': C\n-    86..87 'C': C(usize) -> C\n-    86..90 'C(1)': C\n-    88..89 '1': usize\n-    96..97 'B': B\n-    107..108 'a': A\n-    114..133 'A { b:...C(1) }': A\n-    121..122 'B': B\n-    127..128 'C': C(usize) -> C\n-    127..131 'C(1)': C\n-    129..130 '1': usize\n-    139..140 'a': A\n-    139..142 'a.b': B\n-    148..149 'a': A\n-    148..151 'a.c': C\n+    71..153 '{     ...a.c; }': ()\n+    81..82 'c': C\n+    85..86 'C': C(usize) -> C\n+    85..89 'C(1)': C\n+    87..88 '1': usize\n+    95..96 'B': B\n+    106..107 'a': A\n+    113..132 'A { b:...C(1) }': A\n+    120..121 'B': B\n+    126..127 'C': C(usize) -> C\n+    126..130 'C(1)': C\n+    128..129 '1': usize\n+    138..139 'a': A\n+    138..141 'a.b': B\n+    147..148 'a': A\n+    147..150 'a.c': C\n     \"###\n     );\n }\n@@ -330,10 +330,10 @@ fn test() {\n   E::V2;\n }\"#),\n         @r###\"\n-    48..82 '{   E:...:V2; }': ()\n-    52..70 'E::V1 ...d: 1 }': E\n-    67..68 '1': u32\n-    74..79 'E::V2': E\n+    47..81 '{   E:...:V2; }': ()\n+    51..69 'E::V1 ...d: 1 }': E\n+    66..67 '1': u32\n+    73..78 'E::V2': E\n     \"###\n     );\n }\n@@ -357,29 +357,29 @@ fn test(a: &u32, b: &mut u32, c: *const u32, d: *mut u32) {\n }\n \"#),\n         @r###\"\n-    9..10 'a': &u32\n-    18..19 'b': &mut u32\n-    31..32 'c': *const u32\n-    46..47 'd': *mut u32\n-    59..150 '{     ... *d; }': ()\n-    65..66 'a': &u32\n-    72..74 '*a': u32\n-    73..74 'a': &u32\n-    80..82 '&a': &&u32\n-    81..82 'a': &u32\n-    88..94 '&mut a': &mut &u32\n-    93..94 'a': &u32\n-    100..101 'b': &mut u32\n-    107..109 '*b': u32\n-    108..109 'b': &mut u32\n-    115..117 '&b': &&mut u32\n-    116..117 'b': &mut u32\n-    123..124 'c': *const u32\n-    130..132 '*c': u32\n-    131..132 'c': *const u32\n-    138..139 'd': *mut u32\n-    145..147 '*d': u32\n-    146..147 'd': *mut u32\n+    8..9 'a': &u32\n+    17..18 'b': &mut u32\n+    30..31 'c': *const u32\n+    45..46 'd': *mut u32\n+    58..149 '{     ... *d; }': ()\n+    64..65 'a': &u32\n+    71..73 '*a': u32\n+    72..73 'a': &u32\n+    79..81 '&a': &&u32\n+    80..81 'a': &u32\n+    87..93 '&mut a': &mut &u32\n+    92..93 'a': &u32\n+    99..100 'b': &mut u32\n+    106..108 '*b': u32\n+    107..108 'b': &mut u32\n+    114..116 '&b': &&mut u32\n+    115..116 'b': &mut u32\n+    122..123 'c': *const u32\n+    129..131 '*c': u32\n+    130..131 'c': *const u32\n+    137..138 'd': *mut u32\n+    144..146 '*d': u32\n+    145..146 'd': *mut u32\n     \"###\n     );\n }\n@@ -394,12 +394,12 @@ fn test(a: i32) {\n }\n \"#),\n         @r###\"\n-    9..10 'a': i32\n-    17..54 '{     ...t a; }': ()\n-    23..33 '&raw mut a': *mut i32\n-    32..33 'a': i32\n-    39..51 '&raw const a': *const i32\n-    50..51 'a': i32\n+    8..9 'a': i32\n+    16..53 '{     ...t a; }': ()\n+    22..32 '&raw mut a': *mut i32\n+    31..32 'a': i32\n+    38..50 '&raw const a': *const i32\n+    49..50 'a': i32\n     \"###\n     );\n }\n@@ -429,20 +429,20 @@ fn test() {\n }\n \"##),\n         @r###\"\n-    11..221 '{     ...o\"#; }': ()\n-    17..21 '5i32': i32\n-    27..31 '5f32': f32\n-    37..41 '5f64': f64\n-    47..54 '\"hello\"': &str\n-    60..68 'b\"bytes\"': &[u8; _]\n-    74..77 ''c'': char\n-    83..87 'b'b'': u8\n-    93..97 '3.14': f64\n-    103..107 '5000': i32\n-    113..118 'false': bool\n-    124..128 'true': bool\n-    134..202 'r#\"   ...    \"#': &str\n-    208..218 'br#\"yolo\"#': &[u8; _]\n+    10..220 '{     ...o\"#; }': ()\n+    16..20 '5i32': i32\n+    26..30 '5f32': f32\n+    36..40 '5f64': f64\n+    46..53 '\"hello\"': &str\n+    59..67 'b\"bytes\"': &[u8; _]\n+    73..76 ''c'': char\n+    82..86 'b'b'': u8\n+    92..96 '3.14': f64\n+    102..106 '5000': i32\n+    112..117 'false': bool\n+    123..127 'true': bool\n+    133..201 'r#\"   ...    \"#': &str\n+    207..217 'br#\"yolo\"#': &[u8; _]\n     \"###\n     );\n }\n@@ -472,47 +472,47 @@ fn test(x: SomeType) {\n }\n \"#),\n         @r###\"\n-    27..28 'x': SomeType\n-    40..272 '{     ...lo\"; }': ()\n-    50..51 'b': bool\n-    54..59 'false': bool\n-    69..70 'c': bool\n-    73..75 '!b': bool\n-    74..75 'b': bool\n-    85..86 'a': i128\n-    89..92 '100': i128\n-    102..103 'd': i128\n-    112..114 '-a': i128\n-    113..114 'a': i128\n-    124..125 'e': i32\n-    128..132 '-100': i32\n-    129..132 '100': i32\n-    142..143 'f': bool\n-    146..153 '!!!true': bool\n-    147..153 '!!true': bool\n-    148..153 '!true': bool\n-    149..153 'true': bool\n-    163..164 'g': i32\n-    167..170 '!42': i32\n-    168..170 '42': i32\n-    180..181 'h': u32\n-    184..190 '!10u32': u32\n-    185..190 '10u32': u32\n-    200..201 'j': i128\n-    204..206 '!a': i128\n-    205..206 'a': i128\n-    212..217 '-3.14': f64\n-    213..217 '3.14': f64\n-    223..225 '!3': i32\n-    224..225 '3': i32\n-    231..233 '-x': {unknown}\n-    232..233 'x': SomeType\n-    239..241 '!x': {unknown}\n-    240..241 'x': SomeType\n-    247..255 '-\"hello\"': {unknown}\n-    248..255 '\"hello\"': &str\n-    261..269 '!\"hello\"': {unknown}\n-    262..269 '\"hello\"': &str\n+    26..27 'x': SomeType\n+    39..271 '{     ...lo\"; }': ()\n+    49..50 'b': bool\n+    53..58 'false': bool\n+    68..69 'c': bool\n+    72..74 '!b': bool\n+    73..74 'b': bool\n+    84..85 'a': i128\n+    88..91 '100': i128\n+    101..102 'd': i128\n+    111..113 '-a': i128\n+    112..113 'a': i128\n+    123..124 'e': i32\n+    127..131 '-100': i32\n+    128..131 '100': i32\n+    141..142 'f': bool\n+    145..152 '!!!true': bool\n+    146..152 '!!true': bool\n+    147..152 '!true': bool\n+    148..152 'true': bool\n+    162..163 'g': i32\n+    166..169 '!42': i32\n+    167..169 '42': i32\n+    179..180 'h': u32\n+    183..189 '!10u32': u32\n+    184..189 '10u32': u32\n+    199..200 'j': i128\n+    203..205 '!a': i128\n+    204..205 'a': i128\n+    211..216 '-3.14': f64\n+    212..216 '3.14': f64\n+    222..224 '!3': i32\n+    223..224 '3': i32\n+    230..232 '-x': {unknown}\n+    231..232 'x': SomeType\n+    238..240 '!x': {unknown}\n+    239..240 'x': SomeType\n+    246..254 '-\"hello\"': {unknown}\n+    247..254 '\"hello\"': &str\n+    260..268 '!\"hello\"': {unknown}\n+    261..268 '\"hello\"': &str\n     \"###\n     );\n }\n@@ -535,26 +535,26 @@ fn test() -> &mut &f64 {\n }\n \"#),\n         @r###\"\n-    14..15 'x': u32\n-    22..24 '{}': ()\n-    78..231 '{     ...t &c }': &mut &f64\n-    88..89 'a': u32\n-    92..108 'unknow...nction': {unknown}\n-    92..110 'unknow...tion()': u32\n-    116..125 'takes_u32': fn takes_u32(u32)\n-    116..128 'takes_u32(a)': ()\n-    126..127 'a': u32\n-    138..139 'b': i32\n-    142..158 'unknow...nction': {unknown}\n-    142..160 'unknow...tion()': i32\n-    166..184 'S { i3...d: b }': S\n-    181..182 'b': i32\n-    194..195 'c': f64\n-    198..214 'unknow...nction': {unknown}\n-    198..216 'unknow...tion()': f64\n-    222..229 '&mut &c': &mut &f64\n-    227..229 '&c': &f64\n-    228..229 'c': f64\n+    13..14 'x': u32\n+    21..23 '{}': ()\n+    77..230 '{     ...t &c }': &mut &f64\n+    87..88 'a': u32\n+    91..107 'unknow...nction': {unknown}\n+    91..109 'unknow...tion()': u32\n+    115..124 'takes_u32': fn takes_u32(u32)\n+    115..127 'takes_u32(a)': ()\n+    125..126 'a': u32\n+    137..138 'b': i32\n+    141..157 'unknow...nction': {unknown}\n+    141..159 'unknow...tion()': i32\n+    165..183 'S { i3...d: b }': S\n+    180..181 'b': i32\n+    193..194 'c': f64\n+    197..213 'unknow...nction': {unknown}\n+    197..215 'unknow...tion()': f64\n+    221..228 '&mut &c': &mut &f64\n+    226..228 '&c': &f64\n+    227..228 'c': f64\n     \"###\n     );\n }\n@@ -581,16 +581,16 @@ impl S {\n }\n \"#),\n         @r###\"\n-    34..38 'self': &S\n-    40..61 '{     ...     }': ()\n-    50..54 'self': &S\n-    75..79 'self': &S\n-    88..109 '{     ...     }': ()\n-    98..102 'self': &S\n-    133..153 '{     ...     }': S\n-    143..147 'S {}': S\n-    177..200 '{     ...     }': S\n-    187..194 'Self {}': S\n+    33..37 'self': &S\n+    39..60 '{     ...     }': ()\n+    49..53 'self': &S\n+    74..78 'self': &S\n+    87..108 '{     ...     }': ()\n+    97..101 'self': &S\n+    132..152 '{     ...     }': S\n+    142..146 'S {}': S\n+    176..199 '{     ...     }': S\n+    186..193 'Self {}': S\n     \"###\n     );\n }\n@@ -624,17 +624,17 @@ impl E {\n }\n \"#),\n         @r###\"\n-    87..108 '{     ...     }': ()\n-    97..101 'Self': S1\n-    135..159 '{     ...     }': ()\n-    145..149 'Self': S2(isize) -> S2\n-    145..152 'Self(1)': S2\n-    150..151 '1': isize\n-    185..231 '{     ...     }': ()\n-    195..203 'Self::V1': E\n-    213..221 'Self::V2': V2(u32) -> E\n-    213..224 'Self::V2(1)': E\n-    222..223 '1': u32\n+    86..107 '{     ...     }': ()\n+    96..100 'Self': S1\n+    134..158 '{     ...     }': ()\n+    144..148 'Self': S2(isize) -> S2\n+    144..151 'Self(1)': S2\n+    149..150 '1': isize\n+    184..230 '{     ...     }': ()\n+    194..202 'Self::V1': E\n+    212..220 'Self::V2': V2(u32) -> E\n+    212..223 'Self::V2(1)': E\n+    221..222 '1': u32\n     \"###\n     );\n }\n@@ -664,56 +664,56 @@ fn test() -> bool {\n }\n \"#),\n         @r###\"\n-    6..7 'x': bool\n-    22..34 '{     0i32 }': i32\n-    28..32 '0i32': i32\n-    54..370 '{     ... < 3 }': bool\n-    64..65 'x': bool\n-    68..69 'a': bool\n-    68..74 'a && b': bool\n-    73..74 'b': bool\n-    84..85 'y': bool\n-    88..92 'true': bool\n-    88..101 'true || false': bool\n-    96..101 'false': bool\n-    111..112 'z': bool\n-    115..116 'x': bool\n-    115..121 'x == y': bool\n-    120..121 'y': bool\n-    131..132 't': bool\n-    135..136 'x': bool\n-    135..141 'x != y': bool\n-    140..141 'y': bool\n-    151..162 'minus_forty': isize\n-    172..180 '-40isize': isize\n-    173..180 '40isize': isize\n-    190..191 'h': bool\n-    194..205 'minus_forty': isize\n-    194..216 'minus_...ONST_2': bool\n-    209..216 'CONST_2': isize\n-    226..227 'c': i32\n-    230..231 'f': fn f(bool) -> i32\n-    230..239 'f(z || y)': i32\n-    230..243 'f(z || y) + 5': i32\n-    232..233 'z': bool\n-    232..238 'z || y': bool\n-    237..238 'y': bool\n-    242..243 '5': i32\n-    253..254 'd': {unknown}\n-    257..258 'b': {unknown}\n-    268..269 'g': ()\n-    272..283 'minus_forty': isize\n-    272..288 'minus_...y ^= i': ()\n-    287..288 'i': isize\n-    298..301 'ten': usize\n-    311..313 '10': usize\n-    323..336 'ten_is_eleven': bool\n-    339..342 'ten': usize\n-    339..354 'ten == some_num': bool\n-    346..354 'some_num': usize\n-    361..364 'ten': usize\n-    361..368 'ten < 3': bool\n-    367..368 '3': usize\n+    5..6 'x': bool\n+    21..33 '{     0i32 }': i32\n+    27..31 '0i32': i32\n+    53..369 '{     ... < 3 }': bool\n+    63..64 'x': bool\n+    67..68 'a': bool\n+    67..73 'a && b': bool\n+    72..73 'b': bool\n+    83..84 'y': bool\n+    87..91 'true': bool\n+    87..100 'true || false': bool\n+    95..100 'false': bool\n+    110..111 'z': bool\n+    114..115 'x': bool\n+    114..120 'x == y': bool\n+    119..120 'y': bool\n+    130..131 't': bool\n+    134..135 'x': bool\n+    134..140 'x != y': bool\n+    139..140 'y': bool\n+    150..161 'minus_forty': isize\n+    171..179 '-40isize': isize\n+    172..179 '40isize': isize\n+    189..190 'h': bool\n+    193..204 'minus_forty': isize\n+    193..215 'minus_...ONST_2': bool\n+    208..215 'CONST_2': isize\n+    225..226 'c': i32\n+    229..230 'f': fn f(bool) -> i32\n+    229..238 'f(z || y)': i32\n+    229..242 'f(z || y) + 5': i32\n+    231..232 'z': bool\n+    231..237 'z || y': bool\n+    236..237 'y': bool\n+    241..242 '5': i32\n+    252..253 'd': {unknown}\n+    256..257 'b': {unknown}\n+    267..268 'g': ()\n+    271..282 'minus_forty': isize\n+    271..287 'minus_...y ^= i': ()\n+    286..287 'i': isize\n+    297..300 'ten': usize\n+    310..312 '10': usize\n+    322..335 'ten_is_eleven': bool\n+    338..341 'ten': usize\n+    338..353 'ten == some_num': bool\n+    345..353 'some_num': usize\n+    360..363 'ten': usize\n+    360..367 'ten < 3': bool\n+    366..367 '3': usize\n     \"###\n     );\n }\n@@ -728,13 +728,13 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    11..48 '{     ...5u8; }': ()\n-    17..21 '1u32': u32\n-    17..28 '1u32 << 5u8': u32\n-    25..28 '5u8': u8\n-    34..38 '1u32': u32\n-    34..45 '1u32 >> 5u8': u32\n-    42..45 '5u8': u8\n+    10..47 '{     ...5u8; }': ()\n+    16..20 '1u32': u32\n+    16..27 '1u32 << 5u8': u32\n+    24..27 '5u8': u8\n+    33..37 '1u32': u32\n+    33..44 '1u32 >> 5u8': u32\n+    41..44 '5u8': u8\n     \"###\n     );\n }\n@@ -767,49 +767,49 @@ fn test2(a1: *const A, a2: *mut A) {\n }\n \"#),\n         @r###\"\n-    44..45 'a': A\n-    50..213 '{     ...5.b; }': ()\n-    60..62 'a1': A\n-    65..66 'a': A\n-    72..74 'a1': A\n-    72..76 'a1.b': B\n-    86..88 'a2': &A\n-    91..93 '&a': &A\n-    92..93 'a': A\n-    99..101 'a2': &A\n-    99..103 'a2.b': B\n-    113..115 'a3': &mut A\n-    118..124 '&mut a': &mut A\n-    123..124 'a': A\n-    130..132 'a3': &mut A\n-    130..134 'a3.b': B\n-    144..146 'a4': &&&&&&&A\n-    149..157 '&&&&&&&a': &&&&&&&A\n-    150..157 '&&&&&&a': &&&&&&A\n-    151..157 '&&&&&a': &&&&&A\n-    152..157 '&&&&a': &&&&A\n-    153..157 '&&&a': &&&A\n-    154..157 '&&a': &&A\n-    155..157 '&a': &A\n-    156..157 'a': A\n-    163..165 'a4': &&&&&&&A\n-    163..167 'a4.b': B\n-    177..179 'a5': &mut &&mut &&mut A\n-    182..200 '&mut &...&mut a': &mut &&mut &&mut A\n-    187..200 '&&mut &&mut a': &&mut &&mut A\n-    188..200 '&mut &&mut a': &mut &&mut A\n-    193..200 '&&mut a': &&mut A\n-    194..200 '&mut a': &mut A\n-    199..200 'a': A\n-    206..208 'a5': &mut &&mut &&mut A\n-    206..210 'a5.b': B\n-    224..226 'a1': *const A\n-    238..240 'a2': *mut A\n-    250..273 '{     ...2.b; }': ()\n-    256..258 'a1': *const A\n-    256..260 'a1.b': B\n-    266..268 'a2': *mut A\n-    266..270 'a2.b': B\n+    43..44 'a': A\n+    49..212 '{     ...5.b; }': ()\n+    59..61 'a1': A\n+    64..65 'a': A\n+    71..73 'a1': A\n+    71..75 'a1.b': B\n+    85..87 'a2': &A\n+    90..92 '&a': &A\n+    91..92 'a': A\n+    98..100 'a2': &A\n+    98..102 'a2.b': B\n+    112..114 'a3': &mut A\n+    117..123 '&mut a': &mut A\n+    122..123 'a': A\n+    129..131 'a3': &mut A\n+    129..133 'a3.b': B\n+    143..145 'a4': &&&&&&&A\n+    148..156 '&&&&&&&a': &&&&&&&A\n+    149..156 '&&&&&&a': &&&&&&A\n+    150..156 '&&&&&a': &&&&&A\n+    151..156 '&&&&a': &&&&A\n+    152..156 '&&&a': &&&A\n+    153..156 '&&a': &&A\n+    154..156 '&a': &A\n+    155..156 'a': A\n+    162..164 'a4': &&&&&&&A\n+    162..166 'a4.b': B\n+    176..178 'a5': &mut &&mut &&mut A\n+    181..199 '&mut &...&mut a': &mut &&mut &&mut A\n+    186..199 '&&mut &&mut a': &&mut &&mut A\n+    187..199 '&mut &&mut a': &mut &&mut A\n+    192..199 '&&mut a': &&mut A\n+    193..199 '&mut a': &mut A\n+    198..199 'a': A\n+    205..207 'a5': &mut &&mut &&mut A\n+    205..209 'a5.b': B\n+    223..225 'a1': *const A\n+    237..239 'a2': *mut A\n+    249..272 '{     ...2.b; }': ()\n+    255..257 'a1': *const A\n+    255..259 'a1.b': B\n+    265..267 'a2': *mut A\n+    265..269 'a2.b': B\n     \"###\n     );\n }\n@@ -846,30 +846,30 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    68..72 'self': &Self\n-    139..143 'self': &A<T>\n-    151..174 '{     ...     }': &T\n-    161..168 '&self.0': &T\n-    162..166 'self': &A<T>\n-    162..168 'self.0': T\n-    255..259 'self': &B<T>\n-    278..301 '{     ...     }': &T\n-    288..295 '&self.0': &T\n-    289..293 'self': &B<T>\n-    289..295 'self.0': T\n-    315..353 '{     ...))); }': ()\n-    325..326 't': &i32\n-    329..335 'A::foo': fn foo<i32>(&A<i32>) -> &i32\n-    329..350 'A::foo...42))))': &i32\n-    336..349 '&&B(B(A(42)))': &&B<B<A<i32>>>\n-    337..349 '&B(B(A(42)))': &B<B<A<i32>>>\n-    338..339 'B': B<B<A<i32>>>(B<A<i32>>) -> B<B<A<i32>>>\n-    338..349 'B(B(A(42)))': B<B<A<i32>>>\n-    340..341 'B': B<A<i32>>(A<i32>) -> B<A<i32>>\n-    340..348 'B(A(42))': B<A<i32>>\n-    342..343 'A': A<i32>(i32) -> A<i32>\n-    342..347 'A(42)': A<i32>\n-    344..346 '42': i32\n+    67..71 'self': &Self\n+    138..142 'self': &A<T>\n+    150..173 '{     ...     }': &T\n+    160..167 '&self.0': &T\n+    161..165 'self': &A<T>\n+    161..167 'self.0': T\n+    254..258 'self': &B<T>\n+    277..300 '{     ...     }': &T\n+    287..294 '&self.0': &T\n+    288..292 'self': &B<T>\n+    288..294 'self.0': T\n+    314..352 '{     ...))); }': ()\n+    324..325 't': &i32\n+    328..334 'A::foo': fn foo<i32>(&A<i32>) -> &i32\n+    328..349 'A::foo...42))))': &i32\n+    335..348 '&&B(B(A(42)))': &&B<B<A<i32>>>\n+    336..348 '&B(B(A(42)))': &B<B<A<i32>>>\n+    337..338 'B': B<B<A<i32>>>(B<A<i32>>) -> B<B<A<i32>>>\n+    337..348 'B(B(A(42)))': B<B<A<i32>>>\n+    339..340 'B': B<A<i32>>(A<i32>) -> B<A<i32>>\n+    339..347 'B(A(42))': B<A<i32>>\n+    341..342 'A': A<i32>(i32) -> A<i32>\n+    341..346 'A(42)': A<i32>\n+    343..345 '42': i32\n     \"###\n     );\n }\n@@ -906,34 +906,34 @@ fn test(a: A<i32>) {\n }\n \"#),\n         @r###\"\n-    68..72 'self': &Self\n-    144..148 'self': &A<T>\n-    150..151 'x': &A<T>\n-    166..187 '{     ...     }': &T\n-    176..181 '&*x.0': &T\n-    177..181 '*x.0': T\n-    178..179 'x': &A<T>\n-    178..181 'x.0': *mut T\n-    268..272 'self': &B<T>\n-    291..314 '{     ...     }': &T\n-    301..308 '&self.0': &T\n-    302..306 'self': &B<T>\n-    302..308 'self.0': T\n-    326..327 'a': A<i32>\n-    337..383 '{     ...))); }': ()\n-    347..348 't': &i32\n-    351..352 'A': A<i32>(*mut i32) -> A<i32>\n-    351..365 'A(0 as *mut _)': A<i32>\n-    351..380 'A(0 as...B(a)))': &i32\n-    353..354 '0': i32\n-    353..364 '0 as *mut _': *mut i32\n-    370..379 '&&B(B(a))': &&B<B<A<i32>>>\n-    371..379 '&B(B(a))': &B<B<A<i32>>>\n-    372..373 'B': B<B<A<i32>>>(B<A<i32>>) -> B<B<A<i32>>>\n-    372..379 'B(B(a))': B<B<A<i32>>>\n-    374..375 'B': B<A<i32>>(A<i32>) -> B<A<i32>>\n-    374..378 'B(a)': B<A<i32>>\n-    376..377 'a': A<i32>\n+    67..71 'self': &Self\n+    143..147 'self': &A<T>\n+    149..150 'x': &A<T>\n+    165..186 '{     ...     }': &T\n+    175..180 '&*x.0': &T\n+    176..180 '*x.0': T\n+    177..178 'x': &A<T>\n+    177..180 'x.0': *mut T\n+    267..271 'self': &B<T>\n+    290..313 '{     ...     }': &T\n+    300..307 '&self.0': &T\n+    301..305 'self': &B<T>\n+    301..307 'self.0': T\n+    325..326 'a': A<i32>\n+    336..382 '{     ...))); }': ()\n+    346..347 't': &i32\n+    350..351 'A': A<i32>(*mut i32) -> A<i32>\n+    350..364 'A(0 as *mut _)': A<i32>\n+    350..379 'A(0 as...B(a)))': &i32\n+    352..353 '0': i32\n+    352..363 '0 as *mut _': *mut i32\n+    369..378 '&&B(B(a))': &&B<B<A<i32>>>\n+    370..378 '&B(B(a))': &B<B<A<i32>>>\n+    371..372 'B': B<B<A<i32>>>(B<A<i32>>) -> B<B<A<i32>>>\n+    371..378 'B(B(a))': B<B<A<i32>>>\n+    373..374 'B': B<A<i32>>(A<i32>) -> B<A<i32>>\n+    373..377 'B(a)': B<A<i32>>\n+    375..376 'a': A<i32>\n     \"###\n     );\n }\n@@ -952,16 +952,16 @@ fn main(foo: Foo) {\n }\n \"#),\n         @r###\"\n-    35..38 'foo': Foo\n-    45..109 '{     ...   } }': ()\n-    51..107 'if tru...     }': ()\n-    54..58 'true': bool\n-    59..67 '{      }': ()\n-    73..107 'if fal...     }': i32\n-    76..81 'false': bool\n-    82..107 '{     ...     }': i32\n-    92..95 'foo': Foo\n-    92..101 'foo.field': i32\n+    34..37 'foo': Foo\n+    44..108 '{     ...   } }': ()\n+    50..106 'if tru...     }': ()\n+    53..57 'true': bool\n+    58..66 '{      }': ()\n+    72..106 'if fal...     }': i32\n+    75..80 'false': bool\n+    81..106 '{     ...     }': i32\n+    91..94 'foo': Foo\n+    91..100 'foo.field': i32\n     \"###\n     )\n }\n@@ -993,38 +993,38 @@ fn foo() {\n     };\n }\"#),\n         @r###\"\n-    10..323 '{     ...  }; }': ()\n-    20..23 '_x1': i32\n-    26..80 'if tru...     }': i32\n-    29..33 'true': bool\n-    34..51 '{     ...     }': i32\n-    44..45 '1': i32\n-    57..80 '{     ...     }': i32\n-    67..73 'return': !\n-    90..93 '_x2': i32\n-    96..149 'if tru...     }': i32\n-    99..103 'true': bool\n-    104..121 '{     ...     }': i32\n-    114..115 '2': i32\n-    127..149 '{     ...     }': !\n-    137..143 'return': !\n-    159..162 '_x3': i32\n-    165..247 'match ...     }': i32\n-    171..175 'true': bool\n-    186..190 'true': bool\n-    186..190 'true': bool\n-    194..195 '3': i32\n-    205..206 '_': bool\n-    210..241 '{     ...     }': i32\n-    224..230 'return': !\n-    257..260 '_x4': i32\n-    263..320 'match ...     }': i32\n-    269..273 'true': bool\n-    284..288 'true': bool\n-    284..288 'true': bool\n-    292..293 '4': i32\n-    303..304 '_': bool\n-    308..314 'return': !\n+    9..322 '{     ...  }; }': ()\n+    19..22 '_x1': i32\n+    25..79 'if tru...     }': i32\n+    28..32 'true': bool\n+    33..50 '{     ...     }': i32\n+    43..44 '1': i32\n+    56..79 '{     ...     }': i32\n+    66..72 'return': !\n+    89..92 '_x2': i32\n+    95..148 'if tru...     }': i32\n+    98..102 'true': bool\n+    103..120 '{     ...     }': i32\n+    113..114 '2': i32\n+    126..148 '{     ...     }': !\n+    136..142 'return': !\n+    158..161 '_x3': i32\n+    164..246 'match ...     }': i32\n+    170..174 'true': bool\n+    185..189 'true': bool\n+    185..189 'true': bool\n+    193..194 '3': i32\n+    204..205 '_': bool\n+    209..240 '{     ...     }': i32\n+    223..229 'return': !\n+    256..259 '_x4': i32\n+    262..319 'match ...     }': i32\n+    268..272 'true': bool\n+    283..287 'true': bool\n+    283..287 'true': bool\n+    291..292 '4': i32\n+    302..303 '_': bool\n+    307..313 'return': !\n     \"###\n     )\n }\n@@ -1052,24 +1052,24 @@ fn test(a: A) {\n }\n \"#),\n         @r###\"\n-    32..36 'self': A\n-    38..39 'x': u32\n-    53..55 '{}': ()\n-    103..107 'self': &A\n-    109..110 'x': u64\n-    124..126 '{}': ()\n-    144..145 'a': A\n-    150..198 '{     ...(1); }': ()\n-    156..157 'a': A\n-    156..164 'a.foo(1)': i32\n-    162..163 '1': u32\n-    170..181 '(&a).bar(1)': i64\n-    171..173 '&a': &A\n-    172..173 'a': A\n-    179..180 '1': u64\n-    187..188 'a': A\n-    187..195 'a.bar(1)': i64\n-    193..194 '1': u64\n+    31..35 'self': A\n+    37..38 'x': u32\n+    52..54 '{}': ()\n+    102..106 'self': &A\n+    108..109 'x': u64\n+    123..125 '{}': ()\n+    143..144 'a': A\n+    149..197 '{     ...(1); }': ()\n+    155..156 'a': A\n+    155..163 'a.foo(1)': i32\n+    161..162 '1': u32\n+    169..180 '(&a).bar(1)': i64\n+    170..172 '&a': &A\n+    171..172 'a': A\n+    178..179 '1': u64\n+    186..187 'a': A\n+    186..194 'a.bar(1)': i64\n+    192..193 '1': u64\n     \"###\n     );\n }\n@@ -1088,11 +1088,11 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    40..44 'self': &str\n-    53..55 '{}': ()\n-    69..89 '{     ...o(); }': ()\n-    75..80 '\"foo\"': &str\n-    75..86 '\"foo\".foo()': i32\n+    39..43 'self': &str\n+    52..54 '{}': ()\n+    68..88 '{     ...o(); }': ()\n+    74..79 '\"foo\"': &str\n+    74..85 '\"foo\".foo()': i32\n     \"###\n     );\n }\n@@ -1111,33 +1111,33 @@ fn test(x: &str, y: isize) {\n }\n \"#),\n         @r###\"\n-    9..10 'x': &str\n-    18..19 'y': isize\n-    28..170 '{     ...d\"); }': ()\n-    38..39 'a': (u32, &str)\n-    55..63 '(1, \"a\")': (u32, &str)\n-    56..57 '1': u32\n-    59..62 '\"a\"': &str\n-    73..74 'b': ((u32, &str), &str)\n-    77..83 '(a, x)': ((u32, &str), &str)\n-    78..79 'a': (u32, &str)\n-    81..82 'x': &str\n-    93..94 'c': (isize, &str)\n-    97..103 '(y, x)': (isize, &str)\n-    98..99 'y': isize\n-    101..102 'x': &str\n-    113..114 'd': ((isize, &str), &str)\n-    117..123 '(c, x)': ((isize, &str), &str)\n-    118..119 'c': (isize, &str)\n-    121..122 'x': &str\n-    133..134 'e': (i32, &str)\n-    137..145 '(1, \"e\")': (i32, &str)\n-    138..139 '1': i32\n-    141..144 '\"e\"': &str\n-    155..156 'f': ((i32, &str), &str)\n-    159..167 '(e, \"d\")': ((i32, &str), &str)\n-    160..161 'e': (i32, &str)\n-    163..166 '\"d\"': &str\n+    8..9 'x': &str\n+    17..18 'y': isize\n+    27..169 '{     ...d\"); }': ()\n+    37..38 'a': (u32, &str)\n+    54..62 '(1, \"a\")': (u32, &str)\n+    55..56 '1': u32\n+    58..61 '\"a\"': &str\n+    72..73 'b': ((u32, &str), &str)\n+    76..82 '(a, x)': ((u32, &str), &str)\n+    77..78 'a': (u32, &str)\n+    80..81 'x': &str\n+    92..93 'c': (isize, &str)\n+    96..102 '(y, x)': (isize, &str)\n+    97..98 'y': isize\n+    100..101 'x': &str\n+    112..113 'd': ((isize, &str), &str)\n+    116..122 '(c, x)': ((isize, &str), &str)\n+    117..118 'c': (isize, &str)\n+    120..121 'x': &str\n+    132..133 'e': (i32, &str)\n+    136..144 '(1, \"e\")': (i32, &str)\n+    137..138 '1': i32\n+    140..143 '\"e\"': &str\n+    154..155 'f': ((i32, &str), &str)\n+    158..166 '(e, \"d\")': ((i32, &str), &str)\n+    159..160 'e': (i32, &str)\n+    162..165 '\"d\"': &str\n     \"###\n     );\n }\n@@ -1165,58 +1165,58 @@ fn test(x: &str, y: isize) {\n }\n \"#),\n         @r###\"\n-    9..10 'x': &str\n-    18..19 'y': isize\n-    28..293 '{     ... []; }': ()\n-    38..39 'a': [&str; _]\n-    42..45 '[x]': [&str; _]\n-    43..44 'x': &str\n-    55..56 'b': [[&str; _]; _]\n-    59..65 '[a, a]': [[&str; _]; _]\n-    60..61 'a': [&str; _]\n-    63..64 'a': [&str; _]\n-    75..76 'c': [[[&str; _]; _]; _]\n-    79..85 '[b, b]': [[[&str; _]; _]; _]\n-    80..81 'b': [[&str; _]; _]\n-    83..84 'b': [[&str; _]; _]\n-    96..97 'd': [isize; _]\n-    100..112 '[y, 1, 2, 3]': [isize; _]\n-    101..102 'y': isize\n-    104..105 '1': isize\n-    107..108 '2': isize\n-    110..111 '3': isize\n-    122..123 'd': [isize; _]\n-    126..138 '[1, y, 2, 3]': [isize; _]\n-    127..128 '1': isize\n-    130..131 'y': isize\n-    133..134 '2': isize\n-    136..137 '3': isize\n-    148..149 'e': [isize; _]\n-    152..155 '[y]': [isize; _]\n-    153..154 'y': isize\n-    165..166 'f': [[isize; _]; _]\n-    169..175 '[d, d]': [[isize; _]; _]\n-    170..171 'd': [isize; _]\n-    173..174 'd': [isize; _]\n-    185..186 'g': [[isize; _]; _]\n-    189..195 '[e, e]': [[isize; _]; _]\n-    190..191 'e': [isize; _]\n-    193..194 'e': [isize; _]\n-    206..207 'h': [i32; _]\n-    210..216 '[1, 2]': [i32; _]\n-    211..212 '1': i32\n-    214..215 '2': i32\n-    226..227 'i': [&str; _]\n-    230..240 '[\"a\", \"b\"]': [&str; _]\n-    231..234 '\"a\"': &str\n-    236..239 '\"b\"': &str\n-    251..252 'b': [[&str; _]; _]\n-    255..265 '[a, [\"b\"]]': [[&str; _]; _]\n-    256..257 'a': [&str; _]\n-    259..264 '[\"b\"]': [&str; _]\n-    260..263 '\"b\"': &str\n-    275..276 'x': [u8; _]\n-    288..290 '[]': [u8; _]\n+    8..9 'x': &str\n+    17..18 'y': isize\n+    27..292 '{     ... []; }': ()\n+    37..38 'a': [&str; _]\n+    41..44 '[x]': [&str; _]\n+    42..43 'x': &str\n+    54..55 'b': [[&str; _]; _]\n+    58..64 '[a, a]': [[&str; _]; _]\n+    59..60 'a': [&str; _]\n+    62..63 'a': [&str; _]\n+    74..75 'c': [[[&str; _]; _]; _]\n+    78..84 '[b, b]': [[[&str; _]; _]; _]\n+    79..80 'b': [[&str; _]; _]\n+    82..83 'b': [[&str; _]; _]\n+    95..96 'd': [isize; _]\n+    99..111 '[y, 1, 2, 3]': [isize; _]\n+    100..101 'y': isize\n+    103..104 '1': isize\n+    106..107 '2': isize\n+    109..110 '3': isize\n+    121..122 'd': [isize; _]\n+    125..137 '[1, y, 2, 3]': [isize; _]\n+    126..127 '1': isize\n+    129..130 'y': isize\n+    132..133 '2': isize\n+    135..136 '3': isize\n+    147..148 'e': [isize; _]\n+    151..154 '[y]': [isize; _]\n+    152..153 'y': isize\n+    164..165 'f': [[isize; _]; _]\n+    168..174 '[d, d]': [[isize; _]; _]\n+    169..170 'd': [isize; _]\n+    172..173 'd': [isize; _]\n+    184..185 'g': [[isize; _]; _]\n+    188..194 '[e, e]': [[isize; _]; _]\n+    189..190 'e': [isize; _]\n+    192..193 'e': [isize; _]\n+    205..206 'h': [i32; _]\n+    209..215 '[1, 2]': [i32; _]\n+    210..211 '1': i32\n+    213..214 '2': i32\n+    225..226 'i': [&str; _]\n+    229..239 '[\"a\", \"b\"]': [&str; _]\n+    230..233 '\"a\"': &str\n+    235..238 '\"b\"': &str\n+    250..251 'b': [[&str; _]; _]\n+    254..264 '[a, [\"b\"]]': [[&str; _]; _]\n+    255..256 'a': [&str; _]\n+    258..263 '[\"b\"]': [&str; _]\n+    259..262 '\"b\"': &str\n+    274..275 'x': [u8; _]\n+    287..289 '[]': [u8; _]\n     \"###\n     );\n }\n@@ -1238,21 +1238,21 @@ fn test(a1: A<u32>, i: i32) {\n }\n \"#),\n         @r###\"\n-    36..38 'a1': A<u32>\n-    48..49 'i': i32\n-    56..147 '{     ...3.x; }': ()\n-    62..64 'a1': A<u32>\n-    62..66 'a1.x': u32\n-    76..78 'a2': A<i32>\n-    81..91 'A { x: i }': A<i32>\n-    88..89 'i': i32\n-    97..99 'a2': A<i32>\n-    97..101 'a2.x': i32\n-    111..113 'a3': A<i128>\n-    116..134 'A::<i1...x: 1 }': A<i128>\n-    131..132 '1': i128\n-    140..142 'a3': A<i128>\n-    140..144 'a3.x': i128\n+    35..37 'a1': A<u32>\n+    47..48 'i': i32\n+    55..146 '{     ...3.x; }': ()\n+    61..63 'a1': A<u32>\n+    61..65 'a1.x': u32\n+    75..77 'a2': A<i32>\n+    80..90 'A { x: i }': A<i32>\n+    87..88 'i': i32\n+    96..98 'a2': A<i32>\n+    96..100 'a2.x': i32\n+    110..112 'a3': A<i128>\n+    115..133 'A::<i1...x: 1 }': A<i128>\n+    130..131 '1': i128\n+    139..141 'a3': A<i128>\n+    139..143 'a3.x': i128\n     \"###\n     );\n }\n@@ -1275,22 +1275,22 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    76..184 '{     ...one; }': ()\n-    82..83 'A': A<i32>(i32) -> A<i32>\n-    82..87 'A(42)': A<i32>\n-    84..86 '42': i32\n-    93..94 'A': A<u128>(u128) -> A<u128>\n-    93..102 'A(42u128)': A<u128>\n-    95..101 '42u128': u128\n-    108..112 'Some': Some<&str>(&str) -> Option<&str>\n-    108..117 'Some(\"x\")': Option<&str>\n-    113..116 '\"x\"': &str\n-    123..135 'Option::Some': Some<&str>(&str) -> Option<&str>\n-    123..140 'Option...e(\"x\")': Option<&str>\n-    136..139 '\"x\"': &str\n-    146..150 'None': Option<{unknown}>\n-    160..161 'x': Option<i64>\n-    177..181 'None': Option<i64>\n+    75..183 '{     ...one; }': ()\n+    81..82 'A': A<i32>(i32) -> A<i32>\n+    81..86 'A(42)': A<i32>\n+    83..85 '42': i32\n+    92..93 'A': A<u128>(u128) -> A<u128>\n+    92..101 'A(42u128)': A<u128>\n+    94..100 '42u128': u128\n+    107..111 'Some': Some<&str>(&str) -> Option<&str>\n+    107..116 'Some(\"x\")': Option<&str>\n+    112..115 '\"x\"': &str\n+    122..134 'Option::Some': Some<&str>(&str) -> Option<&str>\n+    122..139 'Option...e(\"x\")': Option<&str>\n+    135..138 '\"x\"': &str\n+    145..149 'None': Option<{unknown}>\n+    159..160 'x': Option<i64>\n+    176..180 'None': Option<i64>\n     \"###\n     );\n }\n@@ -1308,20 +1308,20 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    10..11 't': T\n-    21..26 '{ t }': T\n-    23..24 't': T\n-    38..98 '{     ...(1); }': ()\n-    44..46 'id': fn id<u32>(u32) -> u32\n-    44..52 'id(1u32)': u32\n-    47..51 '1u32': u32\n-    58..68 'id::<i128>': fn id<i128>(i128) -> i128\n-    58..71 'id::<i128>(1)': i128\n-    69..70 '1': i128\n-    81..82 'x': u64\n-    90..92 'id': fn id<u64>(u64) -> u64\n-    90..95 'id(1)': u64\n-    93..94 '1': u64\n+    9..10 't': T\n+    20..25 '{ t }': T\n+    22..23 't': T\n+    37..97 '{     ...(1); }': ()\n+    43..45 'id': fn id<u32>(u32) -> u32\n+    43..51 'id(1u32)': u32\n+    46..50 '1u32': u32\n+    57..67 'id::<i128>': fn id<i128>(i128) -> i128\n+    57..70 'id::<i128>(1)': i128\n+    68..69 '1': i128\n+    80..81 'x': u64\n+    89..91 'id': fn id<u64>(u64) -> u64\n+    89..94 'id(1)': u64\n+    92..93 '1': u64\n     \"###\n     );\n }\n@@ -1355,38 +1355,38 @@ fn test() -> i128 {\n }\n \"#),\n         @r###\"\n-    74..78 'self': A<X, Y>\n-    85..107 '{     ...     }': X\n-    95..99 'self': A<X, Y>\n-    95..101 'self.x': X\n-    117..121 'self': A<X, Y>\n-    128..150 '{     ...     }': Y\n-    138..142 'self': A<X, Y>\n-    138..144 'self.y': Y\n-    163..167 'self': A<X, Y>\n-    169..170 't': T\n-    188..223 '{     ...     }': (X, Y, T)\n-    198..217 '(self.....y, t)': (X, Y, T)\n-    199..203 'self': A<X, Y>\n-    199..205 'self.x': X\n-    207..211 'self': A<X, Y>\n-    207..213 'self.y': Y\n-    215..216 't': T\n-    245..342 '{     ...(1); }': ()\n-    255..256 'a': A<u64, i64>\n-    259..281 'A { x:...1i64 }': A<u64, i64>\n-    266..270 '1u64': u64\n-    275..279 '1i64': i64\n-    287..288 'a': A<u64, i64>\n-    287..292 'a.x()': u64\n-    298..299 'a': A<u64, i64>\n-    298..303 'a.y()': i64\n-    309..310 'a': A<u64, i64>\n-    309..319 'a.z(1i128)': (u64, i64, i128)\n-    313..318 '1i128': i128\n-    325..326 'a': A<u64, i64>\n-    325..339 'a.z::<u128>(1)': (u64, i64, u128)\n-    337..338 '1': u128\n+    73..77 'self': A<X, Y>\n+    84..106 '{     ...     }': X\n+    94..98 'self': A<X, Y>\n+    94..100 'self.x': X\n+    116..120 'self': A<X, Y>\n+    127..149 '{     ...     }': Y\n+    137..141 'self': A<X, Y>\n+    137..143 'self.y': Y\n+    162..166 'self': A<X, Y>\n+    168..169 't': T\n+    187..222 '{     ...     }': (X, Y, T)\n+    197..216 '(self.....y, t)': (X, Y, T)\n+    198..202 'self': A<X, Y>\n+    198..204 'self.x': X\n+    206..210 'self': A<X, Y>\n+    206..212 'self.y': Y\n+    214..215 't': T\n+    244..341 '{     ...(1); }': ()\n+    254..255 'a': A<u64, i64>\n+    258..280 'A { x:...1i64 }': A<u64, i64>\n+    265..269 '1u64': u64\n+    274..278 '1i64': i64\n+    286..287 'a': A<u64, i64>\n+    286..291 'a.x()': u64\n+    297..298 'a': A<u64, i64>\n+    297..302 'a.y()': i64\n+    308..309 'a': A<u64, i64>\n+    308..318 'a.z(1i128)': (u64, i64, i128)\n+    312..317 '1i128': i128\n+    324..325 'a': A<u64, i64>\n+    324..338 'a.z::<u128>(1)': (u64, i64, u128)\n+    336..337 '1': u128\n     \"###\n     );\n }\n@@ -1408,15 +1408,15 @@ fn test(o: Option<u32>) {\n }\n \"#),\n         @r###\"\n-    78..82 'self': &Option<T>\n-    98..100 '{}': ()\n-    111..112 'o': Option<u32>\n-    127..165 '{     ...f(); }': ()\n-    133..146 '(&o).as_ref()': Option<&u32>\n-    134..136 '&o': &Option<u32>\n-    135..136 'o': Option<u32>\n-    152..153 'o': Option<u32>\n-    152..162 'o.as_ref()': Option<&u32>\n+    77..81 'self': &Option<T>\n+    97..99 '{}': ()\n+    110..111 'o': Option<u32>\n+    126..164 '{     ...f(); }': ()\n+    132..145 '(&o).as_ref()': Option<&u32>\n+    133..135 '&o': &Option<u32>\n+    134..135 'o': Option<u32>\n+    151..152 'o': Option<u32>\n+    151..161 'o.as_ref()': Option<&u32>\n     \"###\n     );\n }\n@@ -1445,35 +1445,35 @@ fn test() -> i128 {\n }\n \"#),\n         @r###\"\n-    53..57 'self': A<T2>\n-    65..87 '{     ...     }': T2\n-    75..79 'self': A<T2>\n-    75..81 'self.x': T2\n-    99..100 't': T\n-    110..115 '{ t }': T\n-    112..113 't': T\n-    135..261 '{     ....x() }': i128\n-    146..147 'x': i128\n-    150..151 '1': i128\n-    162..163 'y': i128\n-    166..168 'id': fn id<i128>(i128) -> i128\n-    166..171 'id(x)': i128\n-    169..170 'x': i128\n-    182..183 'a': A<i128>\n-    186..200 'A { x: id(y) }': A<i128>\n-    193..195 'id': fn id<i128>(i128) -> i128\n-    193..198 'id(y)': i128\n-    196..197 'y': i128\n-    211..212 'z': i128\n-    215..217 'id': fn id<i128>(i128) -> i128\n-    215..222 'id(a.x)': i128\n-    218..219 'a': A<i128>\n-    218..221 'a.x': i128\n-    233..234 'b': A<i128>\n-    237..247 'A { x: z }': A<i128>\n-    244..245 'z': i128\n-    254..255 'b': A<i128>\n-    254..259 'b.x()': i128\n+    52..56 'self': A<T2>\n+    64..86 '{     ...     }': T2\n+    74..78 'self': A<T2>\n+    74..80 'self.x': T2\n+    98..99 't': T\n+    109..114 '{ t }': T\n+    111..112 't': T\n+    134..260 '{     ....x() }': i128\n+    145..146 'x': i128\n+    149..150 '1': i128\n+    161..162 'y': i128\n+    165..167 'id': fn id<i128>(i128) -> i128\n+    165..170 'id(x)': i128\n+    168..169 'x': i128\n+    181..182 'a': A<i128>\n+    185..199 'A { x: id(y) }': A<i128>\n+    192..194 'id': fn id<i128>(i128) -> i128\n+    192..197 'id(y)': i128\n+    195..196 'y': i128\n+    210..211 'z': i128\n+    214..216 'id': fn id<i128>(i128) -> i128\n+    214..221 'id(a.x)': i128\n+    217..218 'a': A<i128>\n+    217..220 'a.x': i128\n+    232..233 'b': A<i128>\n+    236..246 'A { x: z }': A<i128>\n+    243..244 'z': i128\n+    253..254 'b': A<i128>\n+    253..258 'b.x()': i128\n     \"###\n     );\n }\n@@ -1511,16 +1511,16 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    52..53 '1': u32\n-    105..106 '2': u32\n-    213..214 '5': u32\n-    229..307 '{     ...:ID; }': ()\n-    239..240 'x': u32\n-    243..254 'Struct::FOO': u32\n-    264..265 'y': u32\n-    268..277 'Enum::BAR': u32\n-    287..288 'z': u32\n-    291..304 'TraitTest::ID': u32\n+    51..52 '1': u32\n+    104..105 '2': u32\n+    212..213 '5': u32\n+    228..306 '{     ...:ID; }': ()\n+    238..239 'x': u32\n+    242..253 'Struct::FOO': u32\n+    263..264 'y': u32\n+    267..276 'Enum::BAR': u32\n+    286..287 'z': u32\n+    290..303 'TraitTest::ID': u32\n     \"###\n     );\n }\n@@ -1543,22 +1543,22 @@ fn test(x: Foo, y: Bar<&str>, z: Baz<i8, u8>) {\n }\n \"#),\n         @r###\"\n-    116..117 'x': A<u32, i128>\n-    124..125 'y': A<&str, u128>\n-    138..139 'z': A<u8, i8>\n-    154..211 '{     ...z.y; }': ()\n-    160..161 'x': A<u32, i128>\n-    160..163 'x.x': u32\n-    169..170 'x': A<u32, i128>\n-    169..172 'x.y': i128\n-    178..179 'y': A<&str, u128>\n-    178..181 'y.x': &str\n-    187..188 'y': A<&str, u128>\n-    187..190 'y.y': u128\n-    196..197 'z': A<u8, i8>\n-    196..199 'z.x': u8\n-    205..206 'z': A<u8, i8>\n-    205..208 'z.y': i8\n+    115..116 'x': A<u32, i128>\n+    123..124 'y': A<&str, u128>\n+    137..138 'z': A<u8, i8>\n+    153..210 '{     ...z.y; }': ()\n+    159..160 'x': A<u32, i128>\n+    159..162 'x.x': u32\n+    168..169 'x': A<u32, i128>\n+    168..171 'x.y': i128\n+    177..178 'y': A<&str, u128>\n+    177..180 'y.x': &str\n+    186..187 'y': A<&str, u128>\n+    186..189 'y.y': u128\n+    195..196 'z': A<u8, i8>\n+    195..198 'z.x': u8\n+    204..205 'z': A<u8, i8>\n+    204..207 'z.y': i8\n     \"###\n     )\n }\n@@ -1573,8 +1573,8 @@ type Bar = A<Bar>;\n fn test(x: Foo) {}\n \"#),\n         @r###\"\n-    59..60 'x': {unknown}\n-    67..69 '{}': ()\n+    58..59 'x': {unknown}\n+    66..68 '{}': ()\n     \"###\n     )\n }\n@@ -1599,26 +1599,26 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    10..11 'x': T\n-    21..30 '{     x }': T\n-    27..28 'x': T\n-    44..45 'x': &T\n-    56..66 '{     *x }': T\n-    62..64 '*x': T\n-    63..64 'x': &T\n-    78..158 '{     ...(1); }': ()\n-    88..89 'y': u32\n-    92..97 '10u32': u32\n-    103..105 'id': fn id<u32>(u32) -> u32\n-    103..108 'id(y)': u32\n-    106..107 'y': u32\n-    118..119 'x': bool\n-    128..133 'clone': fn clone<bool>(&bool) -> bool\n-    128..136 'clone(z)': bool\n-    134..135 'z': &bool\n-    142..152 'id::<i128>': fn id<i128>(i128) -> i128\n-    142..155 'id::<i128>(1)': i128\n-    153..154 '1': i128\n+    9..10 'x': T\n+    20..29 '{     x }': T\n+    26..27 'x': T\n+    43..44 'x': &T\n+    55..65 '{     *x }': T\n+    61..63 '*x': T\n+    62..63 'x': &T\n+    77..157 '{     ...(1); }': ()\n+    87..88 'y': u32\n+    91..96 '10u32': u32\n+    102..104 'id': fn id<u32>(u32) -> u32\n+    102..107 'id(y)': u32\n+    105..106 'y': u32\n+    117..118 'x': bool\n+    127..132 'clone': fn clone<bool>(&bool) -> bool\n+    127..135 'clone(z)': bool\n+    133..134 'z': &bool\n+    141..151 'id::<i128>': fn id<i128>(i128) -> i128\n+    141..154 'id::<i128>(1)': i128\n+    152..153 '1': i128\n     \"###\n     );\n }\n@@ -1638,16 +1638,16 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    49..50 '0': u32\n-    80..83 '101': u32\n-    95..213 '{     ...NST; }': ()\n-    138..139 'x': u32\n-    142..153 'LOCAL_CONST': u32\n-    163..164 'z': u32\n-    167..179 'GLOBAL_CONST': u32\n-    189..191 'id': u32\n-    194..210 'Foo::A..._CONST': u32\n-    126..128 '99': u32\n+    48..49 '0': u32\n+    79..82 '101': u32\n+    94..212 '{     ...NST; }': ()\n+    137..138 'x': u32\n+    141..152 'LOCAL_CONST': u32\n+    162..163 'z': u32\n+    166..178 'GLOBAL_CONST': u32\n+    188..190 'id': u32\n+    193..209 'Foo::A..._CONST': u32\n+    125..127 '99': u32\n     \"###\n     );\n }\n@@ -1668,19 +1668,19 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    29..32 '101': u32\n-    70..73 '101': u32\n-    85..280 '{     ...MUT; }': ()\n-    173..174 'x': u32\n-    177..189 'LOCAL_STATIC': u32\n-    199..200 'y': u32\n-    203..219 'LOCAL_...IC_MUT': u32\n-    229..230 'z': u32\n-    233..246 'GLOBAL_STATIC': u32\n-    256..257 'w': u32\n-    260..277 'GLOBAL...IC_MUT': u32\n-    118..120 '99': u32\n-    161..163 '99': u32\n+    28..31 '101': u32\n+    69..72 '101': u32\n+    84..279 '{     ...MUT; }': ()\n+    172..173 'x': u32\n+    176..188 'LOCAL_STATIC': u32\n+    198..199 'y': u32\n+    202..218 'LOCAL_...IC_MUT': u32\n+    228..229 'z': u32\n+    232..245 'GLOBAL_STATIC': u32\n+    255..256 'w': u32\n+    259..276 'GLOBAL...IC_MUT': u32\n+    117..119 '99': u32\n+    160..162 '99': u32\n     \"###\n     );\n }\n@@ -1748,12 +1748,12 @@ fn foo() -> u32 {\n }\n \"#),\n         @r###\"\n-    17..59 '{     ...; }; }': ()\n-    27..28 'x': || -> usize\n-    31..56 '|| -> ...n 1; }': || -> usize\n-    43..56 '{ return 1; }': usize\n-    45..53 'return 1': !\n-    52..53 '1': usize\n+    16..58 '{     ...; }; }': ()\n+    26..27 'x': || -> usize\n+    30..55 '|| -> ...n 1; }': || -> usize\n+    42..55 '{ return 1; }': usize\n+    44..52 'return 1': !\n+    51..52 '1': usize\n     \"###\n     );\n }\n@@ -1767,11 +1767,11 @@ fn foo() -> u32 {\n }\n \"#),\n         @r###\"\n-    17..48 '{     ...; }; }': ()\n-    27..28 'x': || -> ()\n-    31..45 '|| { return; }': || -> ()\n-    34..45 '{ return; }': ()\n-    36..42 'return': !\n+    16..47 '{     ...; }; }': ()\n+    26..27 'x': || -> ()\n+    30..44 '|| { return; }': || -> ()\n+    33..44 '{ return; }': ()\n+    35..41 'return': !\n     \"###\n     );\n }\n@@ -1785,11 +1785,11 @@ fn foo() -> u32 {\n }\n \"#),\n         @r###\"\n-    17..47 '{     ...\" }; }': ()\n-    27..28 'x': || -> &str\n-    31..44 '|| { \"test\" }': || -> &str\n-    34..44 '{ \"test\" }': &str\n-    36..42 '\"test\"': &str\n+    16..46 '{     ...\" }; }': ()\n+    26..27 'x': || -> &str\n+    30..43 '|| { \"test\" }': || -> &str\n+    33..43 '{ \"test\" }': &str\n+    35..41 '\"test\"': &str\n     \"###\n     );\n }\n@@ -1808,14 +1808,14 @@ fn main() {\n }\n \"#),\n         @r###\"\n-    48..121 '{     ...hod; }': ()\n-    58..64 'vtable': Vtable\n-    67..91 'Vtable...| {} }': Vtable\n-    84..89 '|| {}': || -> ()\n-    87..89 '{}': ()\n-    101..102 'm': fn()\n-    105..111 'vtable': Vtable\n-    105..118 'vtable.method': fn()\n+    47..120 '{     ...hod; }': ()\n+    57..63 'vtable': Vtable\n+    66..90 'Vtable...| {} }': Vtable\n+    83..88 '|| {}': || -> ()\n+    86..88 '{}': ()\n+    100..101 'm': fn()\n+    104..110 'vtable': Vtable\n+    104..117 'vtable.method': fn()\n     \"###\n     );\n }\n@@ -1832,22 +1832,22 @@ fn main() {\n }\n \"#),\n         @r###\"\n-    11..131 '{     ...2 }; }': ()\n-    21..22 'x': i32\n-    32..38 '{ 92 }': i32\n-    34..36 '92': i32\n-    48..49 'y': {unknown}\n-    58..80 '{ asyn...wait }': {unknown}\n-    60..78 'async ....await': {unknown}\n-    66..72 '{ () }': ()\n-    68..70 '()': ()\n-    90..91 'z': {unknown}\n-    94..104 'try { () }': {unknown}\n-    98..104 '{ () }': ()\n-    100..102 '()': ()\n-    114..115 't': i32\n-    122..128 '{ 92 }': i32\n-    124..126 '92': i32\n+    10..130 '{     ...2 }; }': ()\n+    20..21 'x': i32\n+    31..37 '{ 92 }': i32\n+    33..35 '92': i32\n+    47..48 'y': {unknown}\n+    57..79 '{ asyn...wait }': {unknown}\n+    59..77 'async ....await': {unknown}\n+    65..71 '{ () }': ()\n+    67..69 '()': ()\n+    89..90 'z': {unknown}\n+    93..103 'try { () }': {unknown}\n+    97..103 '{ () }': ()\n+    99..101 '()': ()\n+    113..114 't': i32\n+    121..127 '{ 92 }': i32\n+    123..125 '92': i32\n     \"###\n     )\n }\n@@ -1867,16 +1867,16 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    60..130 '{     ...   } }': ()\n-    70..77 'mut end': Option<bool>\n-    80..84 'None': Option<bool>\n-    90..128 'loop {...     }': !\n-    95..128 '{     ...     }': ()\n-    105..108 'end': Option<bool>\n-    105..121 'end = ...(true)': ()\n-    111..115 'Some': Some<bool>(bool) -> Option<bool>\n-    111..121 'Some(true)': Option<bool>\n-    116..120 'true': bool\n+    59..129 '{     ...   } }': ()\n+    69..76 'mut end': Option<bool>\n+    79..83 'None': Option<bool>\n+    89..127 'loop {...     }': !\n+    94..127 '{     ...     }': ()\n+    104..107 'end': Option<bool>\n+    104..120 'end = ...(true)': ()\n+    110..114 'Some': Some<bool>(bool) -> Option<bool>\n+    110..120 'Some(true)': Option<bool>\n+    115..119 'true': bool\n     \"###\n     );\n }\n@@ -1899,19 +1899,19 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    60..169 '{     ...  }; }': ()\n-    70..71 'x': Option<bool>\n-    74..166 'loop {...     }': Option<bool>\n-    79..166 '{     ...     }': ()\n-    89..133 'if fal...     }': ()\n-    92..97 'false': bool\n-    98..133 '{     ...     }': ()\n-    112..122 'break None': !\n-    118..122 'None': Option<bool>\n-    143..159 'break ...(true)': !\n-    149..153 'Some': Some<bool>(bool) -> Option<bool>\n-    149..159 'Some(true)': Option<bool>\n-    154..158 'true': bool\n+    59..168 '{     ...  }; }': ()\n+    69..70 'x': Option<bool>\n+    73..165 'loop {...     }': Option<bool>\n+    78..165 '{     ...     }': ()\n+    88..132 'if fal...     }': ()\n+    91..96 'false': bool\n+    97..132 '{     ...     }': ()\n+    111..121 'break None': !\n+    117..121 'None': Option<bool>\n+    142..158 'break ...(true)': !\n+    148..152 'Some': Some<bool>(bool) -> Option<bool>\n+    148..158 'Some(true)': Option<bool>\n+    153..157 'true': bool\n     \"###\n     );\n }\n@@ -1932,14 +1932,14 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    60..137 '{     ...  }; }': ()\n-    70..71 'x': ()\n-    74..134 'loop {...     }': ()\n-    79..134 '{     ...     }': ()\n-    89..128 'if fal...     }': ()\n-    92..97 'false': bool\n-    98..128 '{     ...     }': ()\n-    112..117 'break': !\n+    59..136 '{     ...  }; }': ()\n+    69..70 'x': ()\n+    73..133 'loop {...     }': ()\n+    78..133 '{     ...     }': ()\n+    88..127 'if fal...     }': ()\n+    91..96 'false': bool\n+    97..127 '{     ...     }': ()\n+    111..116 'break': !\n     \"###\n     );\n }\n@@ -1964,36 +1964,36 @@ fn foo() {\n }\n \"#),\n         @r###\"\n-    10..336 '{     ...  }; }': ()\n-    20..22 '_x': || -> bool\n-    25..333 '|| 'ou...     }': || -> bool\n-    28..333 ''outer...     }': bool\n-    41..333 '{     ...     }': ()\n-    55..60 'inner': i8\n-    63..301 ''inner...     }': i8\n-    76..301 '{     ...     }': ()\n-    94..95 'i': bool\n-    98..114 'Defaul...efault': {unknown}\n-    98..116 'Defaul...ault()': bool\n-    130..270 'if (br...     }': ()\n-    134..148 'break 'outer i': !\n-    147..148 'i': bool\n-    150..209 '{     ...     }': ()\n-    168..194 'loop {...5i8; }': !\n-    173..194 '{ brea...5i8; }': ()\n-    175..191 'break ...er 5i8': !\n-    188..191 '5i8': i8\n-    215..270 'if tru...     }': ()\n-    218..222 'true': bool\n-    223..270 '{     ...     }': ()\n-    241..255 'break 'inner 6': !\n-    254..255 '6': i8\n-    283..290 'break 7': !\n-    289..290 '7': i8\n-    311..326 'break inner < 8': !\n-    317..322 'inner': i8\n-    317..326 'inner < 8': bool\n-    325..326 '8': i8\n+    9..335 '{     ...  }; }': ()\n+    19..21 '_x': || -> bool\n+    24..332 '|| 'ou...     }': || -> bool\n+    27..332 ''outer...     }': bool\n+    40..332 '{     ...     }': ()\n+    54..59 'inner': i8\n+    62..300 ''inner...     }': i8\n+    75..300 '{     ...     }': ()\n+    93..94 'i': bool\n+    97..113 'Defaul...efault': {unknown}\n+    97..115 'Defaul...ault()': bool\n+    129..269 'if (br...     }': ()\n+    133..147 'break 'outer i': !\n+    146..147 'i': bool\n+    149..208 '{     ...     }': ()\n+    167..193 'loop {...5i8; }': !\n+    172..193 '{ brea...5i8; }': ()\n+    174..190 'break ...er 5i8': !\n+    187..190 '5i8': i8\n+    214..269 'if tru...     }': ()\n+    217..221 'true': bool\n+    222..269 '{     ...     }': ()\n+    240..254 'break 'inner 6': !\n+    253..254 '6': i8\n+    282..289 'break 7': !\n+    288..289 '7': i8\n+    310..325 'break inner < 8': !\n+    316..321 'inner': i8\n+    316..325 'inner < 8': bool\n+    324..325 '8': i8\n     \"###\n     );\n }\n@@ -2022,35 +2022,35 @@ fn test(t1: Thing, t2: OtherThing, t3: Thing<i32>, t4: OtherThing<i32>) {\n }\n \"#),\n         @r###\"\n-    98..100 't1': Thing<()>\n-    109..111 't2': OtherThing<()>\n-    125..127 't3': Thing<i32>\n-    141..143 't4': OtherThing<i32>\n-    162..385 '{     ...   } }': ()\n-    168..170 't1': Thing<()>\n-    168..172 't1.t': ()\n-    178..180 't3': Thing<i32>\n-    178..182 't3.t': i32\n-    188..283 'match ...     }': ()\n-    194..196 't2': OtherThing<()>\n-    207..228 'OtherT... { t }': OtherThing<()>\n-    225..226 't': ()\n-    232..238 '{ t; }': ()\n-    234..235 't': ()\n-    248..266 'OtherT...Two(t)': OtherThing<()>\n-    264..265 't': ()\n-    270..276 '{ t; }': ()\n-    272..273 't': ()\n-    288..383 'match ...     }': ()\n-    294..296 't4': OtherThing<i32>\n-    307..328 'OtherT... { t }': OtherThing<i32>\n-    325..326 't': i32\n-    332..338 '{ t; }': ()\n-    334..335 't': i32\n-    348..366 'OtherT...Two(t)': OtherThing<i32>\n-    364..365 't': i32\n-    370..376 '{ t; }': ()\n-    372..373 't': i32\n+    97..99 't1': Thing<()>\n+    108..110 't2': OtherThing<()>\n+    124..126 't3': Thing<i32>\n+    140..142 't4': OtherThing<i32>\n+    161..384 '{     ...   } }': ()\n+    167..169 't1': Thing<()>\n+    167..171 't1.t': ()\n+    177..179 't3': Thing<i32>\n+    177..181 't3.t': i32\n+    187..282 'match ...     }': ()\n+    193..195 't2': OtherThing<()>\n+    206..227 'OtherT... { t }': OtherThing<()>\n+    224..225 't': ()\n+    231..237 '{ t; }': ()\n+    233..234 't': ()\n+    247..265 'OtherT...Two(t)': OtherThing<()>\n+    263..264 't': ()\n+    269..275 '{ t; }': ()\n+    271..272 't': ()\n+    287..382 'match ...     }': ()\n+    293..295 't4': OtherThing<i32>\n+    306..327 'OtherT... { t }': OtherThing<i32>\n+    324..325 't': i32\n+    331..337 '{ t; }': ()\n+    333..334 't': i32\n+    347..365 'OtherT...Two(t)': OtherThing<i32>\n+    363..364 't': i32\n+    369..375 '{ t; }': ()\n+    371..372 't': i32\n     \"###\n     );\n }\n@@ -2078,30 +2078,30 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    100..320 '{     ...32); }': ()\n-    110..111 'x': Thing<!>\n-    114..134 'Thing ...p {} }': Thing<!>\n-    125..132 'loop {}': !\n-    130..132 '{}': ()\n-    144..145 'y': Thing<()>\n-    148..163 'Thing { t: () }': Thing<()>\n-    159..161 '()': ()\n-    173..174 'z': Thing<i32>\n-    177..194 'Thing ...1i32 }': Thing<i32>\n-    188..192 '1i32': i32\n-    200..241 'if let...     }': ()\n-    207..218 'Thing { t }': Thing<i32>\n-    215..216 't': i32\n-    221..222 'z': Thing<i32>\n-    223..241 '{     ...     }': ()\n-    233..234 't': i32\n-    251..252 'a': OtherThing<i32>\n-    255..282 'OtherT...1i32 }': OtherThing<i32>\n-    276..280 '1i32': i32\n-    292..293 'b': OtherThing<i32>\n-    296..311 'OtherThing::Two': Two<i32>(i32) -> OtherThing<i32>\n-    296..317 'OtherT...(1i32)': OtherThing<i32>\n-    312..316 '1i32': i32\n+    99..319 '{     ...32); }': ()\n+    109..110 'x': Thing<!>\n+    113..133 'Thing ...p {} }': Thing<!>\n+    124..131 'loop {}': !\n+    129..131 '{}': ()\n+    143..144 'y': Thing<()>\n+    147..162 'Thing { t: () }': Thing<()>\n+    158..160 '()': ()\n+    172..173 'z': Thing<i32>\n+    176..193 'Thing ...1i32 }': Thing<i32>\n+    187..191 '1i32': i32\n+    199..240 'if let...     }': ()\n+    206..217 'Thing { t }': Thing<i32>\n+    214..215 't': i32\n+    220..221 'z': Thing<i32>\n+    222..240 '{     ...     }': ()\n+    232..233 't': i32\n+    250..251 'a': OtherThing<i32>\n+    254..281 'OtherT...1i32 }': OtherThing<i32>\n+    275..279 '1i32': i32\n+    291..292 'b': OtherThing<i32>\n+    295..310 'OtherThing::Two': Two<i32>(i32) -> OtherThing<i32>\n+    295..316 'OtherT...(1i32)': OtherThing<i32>\n+    311..315 '1i32': i32\n     \"###\n     );\n }"}, {"sha": "646e1715c1f8311baefb23be8426ecc126c63038", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 747, "deletions": 747, "changes": 1494, "blob_url": "https://github.com/rust-lang/rust/blob/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d016cb486738c1ab2574a322924183fa8a870b06/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=d016cb486738c1ab2574a322924183fa8a870b06", "patch": "@@ -259,16 +259,16 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    86..87 't': T\n-    92..94 '{}': ()\n-    105..144 '{     ...(s); }': ()\n-    115..116 's': S<u32>\n-    119..120 'S': S<u32>(u32) -> S<u32>\n-    119..129 'S(unknown)': S<u32>\n-    121..128 'unknown': u32\n-    135..138 'foo': fn foo<S<u32>>(S<u32>)\n-    135..141 'foo(s)': ()\n-    139..140 's': S<u32>\n+    85..86 't': T\n+    91..93 '{}': ()\n+    104..143 '{     ...(s); }': ()\n+    114..115 's': S<u32>\n+    118..119 'S': S<u32>(u32) -> S<u32>\n+    118..128 'S(unknown)': S<u32>\n+    120..127 'unknown': u32\n+    134..137 'foo': fn foo<S<u32>>(S<u32>)\n+    134..140 'foo(s)': ()\n+    138..139 's': S<u32>\n     \"###\n     );\n }\n@@ -287,17 +287,17 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    87..88 't': T\n-    98..100 '{}': ()\n-    111..163 '{     ...(s); }': ()\n-    121..122 's': S<u32>\n-    125..126 'S': S<u32>(u32) -> S<u32>\n-    125..135 'S(unknown)': S<u32>\n-    127..134 'unknown': u32\n-    145..146 'x': u32\n-    154..157 'foo': fn foo<u32, S<u32>>(S<u32>) -> u32\n-    154..160 'foo(s)': u32\n-    158..159 's': S<u32>\n+    86..87 't': T\n+    97..99 '{}': ()\n+    110..162 '{     ...(s); }': ()\n+    120..121 's': S<u32>\n+    124..125 'S': S<u32>(u32) -> S<u32>\n+    124..134 'S(unknown)': S<u32>\n+    126..133 'unknown': u32\n+    144..145 'x': u32\n+    153..156 'foo': fn foo<u32, S<u32>>(S<u32>) -> u32\n+    153..159 'foo(s)': u32\n+    157..158 's': S<u32>\n     \"###\n     );\n }\n@@ -315,12 +315,12 @@ trait Trait {\n }\n \"#),\n         @r###\"\n-    27..31 'self': &Self\n-    53..57 'self': &Self\n-    62..97 '{     ...     }': ()\n-    76..77 'x': i64\n-    80..84 'self': &Self\n-    80..90 'self.foo()': i64\n+    26..30 'self': &Self\n+    52..56 'self': &Self\n+    61..96 '{     ...     }': ()\n+    75..76 'x': i64\n+    79..83 'self': &Self\n+    79..89 'self.foo()': i64\n     \"###\n     );\n }\n@@ -339,12 +339,12 @@ trait Trait: SuperTrait {\n }\n \"#),\n         @r###\"\n-    32..36 'self': &Self\n-    86..90 'self': &Self\n-    95..130 '{     ...     }': ()\n-    109..110 'x': i64\n-    113..117 'self': &Self\n-    113..123 'self.foo()': i64\n+    31..35 'self': &Self\n+    85..89 'self': &Self\n+    94..129 '{     ...     }': ()\n+    108..109 'x': i64\n+    112..116 'self': &Self\n+    112..122 'self.foo()': i64\n     \"###\n     );\n }\n@@ -366,15 +366,15 @@ fn test<T: Iterable>() {\n }\n \"#),\n         @r###\"\n-    108..261 '{     ...ter; }': ()\n-    118..119 'x': u32\n-    145..146 '1': u32\n-    156..157 'y': Iterable::Item<T>\n-    183..192 'no_matter': Iterable::Item<T>\n-    202..203 'z': Iterable::Item<T>\n-    215..224 'no_matter': Iterable::Item<T>\n-    234..235 'a': Iterable::Item<T>\n-    249..258 'no_matter': Iterable::Item<T>\n+    107..260 '{     ...ter; }': ()\n+    117..118 'x': u32\n+    144..145 '1': u32\n+    155..156 'y': Iterable::Item<T>\n+    182..191 'no_matter': Iterable::Item<T>\n+    201..202 'z': Iterable::Item<T>\n+    214..223 'no_matter': Iterable::Item<T>\n+    233..234 'a': Iterable::Item<T>\n+    248..257 'no_matter': Iterable::Item<T>\n     \"###\n     );\n }\n@@ -398,25 +398,25 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    106..107 't': T\n-    123..125 '{}': ()\n-    147..148 't': T\n-    178..180 '{}': ()\n-    202..203 't': T\n-    221..223 '{}': ()\n-    234..300 '{     ...(S); }': ()\n-    244..245 'x': u32\n-    248..252 'foo1': fn foo1<S>(S) -> <S as Iterable>::Item\n-    248..255 'foo1(S)': u32\n-    253..254 'S': S\n-    265..266 'y': u32\n-    269..273 'foo2': fn foo2<S>(S) -> <S as Iterable>::Item\n-    269..276 'foo2(S)': u32\n-    274..275 'S': S\n-    286..287 'z': u32\n-    290..294 'foo3': fn foo3<S>(S) -> <S as Iterable>::Item\n-    290..297 'foo3(S)': u32\n-    295..296 'S': S\n+    105..106 't': T\n+    122..124 '{}': ()\n+    146..147 't': T\n+    177..179 '{}': ()\n+    201..202 't': T\n+    220..222 '{}': ()\n+    233..299 '{     ...(S); }': ()\n+    243..244 'x': u32\n+    247..251 'foo1': fn foo1<S>(S) -> <S as Iterable>::Item\n+    247..254 'foo1(S)': u32\n+    252..253 'S': S\n+    264..265 'y': u32\n+    268..272 'foo2': fn foo2<S>(S) -> <S as Iterable>::Item\n+    268..275 'foo2(S)': u32\n+    273..274 'S': S\n+    285..286 'z': u32\n+    289..293 'foo3': fn foo3<S>(S) -> <S as Iterable>::Item\n+    289..296 'foo3(S)': u32\n+    294..295 'S': S\n     \"###\n     );\n }\n@@ -433,9 +433,9 @@ fn test<T: Iterable<Item=u32>>() {\n }\n \"#),\n         @r###\"\n-    67..100 '{     ...own; }': ()\n-    77..78 'y': u32\n-    90..97 'unknown': u32\n+    66..99 '{     ...own; }': ()\n+    76..77 'y': u32\n+    89..96 'unknown': u32\n     \"###\n     );\n }\n@@ -448,13 +448,13 @@ const A: u32 = 1 + 1;\n static B: u64 = { let x = 1; x };\n \"#),\n         @r###\"\n-    16..17 '1': u32\n-    16..21 '1 + 1': u32\n-    20..21 '1': u32\n-    39..55 '{ let ...1; x }': u64\n-    45..46 'x': u64\n-    49..50 '1': u64\n-    52..53 'x': u64\n+    15..16 '1': u32\n+    15..20 '1 + 1': u32\n+    19..20 '1': u32\n+    38..54 '{ let ...1; x }': u64\n+    44..45 'x': u64\n+    48..49 '1': u64\n+    51..52 'x': u64\n     \"###\n     );\n }\n@@ -471,17 +471,17 @@ fn test() -> u64 {\n }\n \"#),\n         @r###\"\n-    38..87 '{     ... a.1 }': u64\n-    48..49 'a': S\n-    52..53 'S': S(i32, u64) -> S\n-    52..59 'S(4, 6)': S\n-    54..55 '4': i32\n-    57..58 '6': u64\n-    69..70 'b': i32\n-    73..74 'a': S\n-    73..76 'a.0': i32\n-    82..83 'a': S\n-    82..85 'a.1': u64\n+    37..86 '{     ... a.1 }': u64\n+    47..48 'a': S\n+    51..52 'S': S(i32, u64) -> S\n+    51..58 'S(4, 6)': S\n+    53..54 '4': i32\n+    56..57 '6': u64\n+    68..69 'b': i32\n+    72..73 'a': S\n+    72..75 'a.0': i32\n+    81..82 'a': S\n+    81..84 'a.1': u64\n     \"###\n     );\n }\n@@ -498,24 +498,24 @@ fn test() -> u64 {\n }\n \"#),\n         @r###\"\n-    44..102 '{     ...0(2) }': u64\n-    54..55 'a': S\n-    58..59 'S': S(fn(u32) -> u64) -> S\n-    58..68 'S(|i| 2*i)': S\n-    60..67 '|i| 2*i': |u32| -> u64\n-    61..62 'i': u32\n-    64..65 '2': u32\n-    64..67 '2*i': u32\n-    66..67 'i': u32\n-    78..79 'b': u64\n-    82..83 'a': S\n-    82..85 'a.0': fn(u32) -> u64\n-    82..88 'a.0(4)': u64\n-    86..87 '4': u32\n-    94..95 'a': S\n-    94..97 'a.0': fn(u32) -> u64\n-    94..100 'a.0(2)': u64\n-    98..99 '2': u32\n+    43..101 '{     ...0(2) }': u64\n+    53..54 'a': S\n+    57..58 'S': S(fn(u32) -> u64) -> S\n+    57..67 'S(|i| 2*i)': S\n+    59..66 '|i| 2*i': |u32| -> u64\n+    60..61 'i': u32\n+    63..64 '2': u32\n+    63..66 '2*i': u32\n+    65..66 'i': u32\n+    77..78 'b': u64\n+    81..82 'a': S\n+    81..84 'a.0': fn(u32) -> u64\n+    81..87 'a.0(4)': u64\n+    85..86 '4': u32\n+    93..94 'a': S\n+    93..96 'a.0': fn(u32) -> u64\n+    93..99 'a.0(2)': u64\n+    97..98 '2': u32\n     \"###\n     );\n }\n@@ -946,34 +946,34 @@ fn test(x: impl Trait<u64>, y: &impl Trait<u32>) {\n }\n \"#, true),\n         @r###\"\n-    30..34 'self': &Self\n-    55..59 'self': &Self\n-    78..79 'x': impl Trait<u16>\n-    98..100 '{}': ()\n-    155..156 'x': impl Trait<u64>\n-    175..176 'y': &impl Trait<u32>\n-    196..324 '{     ...2(); }': ()\n-    202..203 'x': impl Trait<u64>\n-    209..210 'y': &impl Trait<u32>\n-    220..221 'z': S<u16>\n-    224..225 'S': S<u16>(u16) -> S<u16>\n-    224..228 'S(1)': S<u16>\n-    226..227 '1': u16\n-    234..237 'bar': fn bar(S<u16>)\n-    234..240 'bar(z)': ()\n-    238..239 'z': S<u16>\n-    246..247 'x': impl Trait<u64>\n-    246..253 'x.foo()': u64\n-    259..260 'y': &impl Trait<u32>\n-    259..266 'y.foo()': u32\n-    272..273 'z': S<u16>\n-    272..279 'z.foo()': u16\n-    285..286 'x': impl Trait<u64>\n-    285..293 'x.foo2()': i64\n-    299..300 'y': &impl Trait<u32>\n-    299..307 'y.foo2()': i64\n-    313..314 'z': S<u16>\n-    313..321 'z.foo2()': i64\n+    29..33 'self': &Self\n+    54..58 'self': &Self\n+    77..78 'x': impl Trait<u16>\n+    97..99 '{}': ()\n+    154..155 'x': impl Trait<u64>\n+    174..175 'y': &impl Trait<u32>\n+    195..323 '{     ...2(); }': ()\n+    201..202 'x': impl Trait<u64>\n+    208..209 'y': &impl Trait<u32>\n+    219..220 'z': S<u16>\n+    223..224 'S': S<u16>(u16) -> S<u16>\n+    223..227 'S(1)': S<u16>\n+    225..226 '1': u16\n+    233..236 'bar': fn bar(S<u16>)\n+    233..239 'bar(z)': ()\n+    237..238 'z': S<u16>\n+    245..246 'x': impl Trait<u64>\n+    245..252 'x.foo()': u64\n+    258..259 'y': &impl Trait<u32>\n+    258..265 'y.foo()': u32\n+    271..272 'z': S<u16>\n+    271..278 'z.foo()': u16\n+    284..285 'x': impl Trait<u64>\n+    284..292 'x.foo2()': i64\n+    298..299 'y': &impl Trait<u32>\n+    298..306 'y.foo2()': i64\n+    312..313 'z': S<u16>\n+    312..320 'z.foo2()': i64\n     \"###\n     );\n }\n@@ -1007,39 +1007,39 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    156..157 'x': impl Trait\n-    176..187 '{ loop {} }': T\n-    178..185 'loop {}': !\n-    183..185 '{}': ()\n-    200..201 'x': impl Trait\n-    220..231 '{ loop {} }': T\n-    222..229 'loop {}': !\n-    227..229 '{}': ()\n-    301..510 '{     ... i32 }': ()\n-    307..315 'Foo::bar': fn bar<{unknown}, {unknown}>(S) -> {unknown}\n-    307..318 'Foo::bar(S)': {unknown}\n-    316..317 'S': S\n-    324..339 '<F as Foo>::bar': fn bar<F, {unknown}>(S) -> {unknown}\n-    324..342 '<F as ...bar(S)': {unknown}\n-    340..341 'S': S\n-    348..354 'F::bar': fn bar<F, {unknown}>(S) -> {unknown}\n-    348..357 'F::bar(S)': {unknown}\n-    355..356 'S': S\n-    363..378 'Foo::bar::<u32>': fn bar<{unknown}, u32>(S) -> u32\n-    363..381 'Foo::b...32>(S)': u32\n-    379..380 'S': S\n-    387..409 '<F as ...:<u32>': fn bar<F, u32>(S) -> u32\n-    387..412 '<F as ...32>(S)': u32\n-    410..411 'S': S\n-    419..422 'foo': fn foo<{unknown}>(S) -> {unknown}\n-    419..425 'foo(S)': {unknown}\n-    423..424 'S': S\n-    431..441 'foo::<u32>': fn foo<u32>(S) -> u32\n-    431..444 'foo::<u32>(S)': u32\n-    442..443 'S': S\n-    450..465 'foo::<u32, i32>': fn foo<u32>(S) -> u32\n-    450..468 'foo::<...32>(S)': u32\n-    466..467 'S': S\n+    155..156 'x': impl Trait\n+    175..186 '{ loop {} }': T\n+    177..184 'loop {}': !\n+    182..184 '{}': ()\n+    199..200 'x': impl Trait\n+    219..230 '{ loop {} }': T\n+    221..228 'loop {}': !\n+    226..228 '{}': ()\n+    300..509 '{     ... i32 }': ()\n+    306..314 'Foo::bar': fn bar<{unknown}, {unknown}>(S) -> {unknown}\n+    306..317 'Foo::bar(S)': {unknown}\n+    315..316 'S': S\n+    323..338 '<F as Foo>::bar': fn bar<F, {unknown}>(S) -> {unknown}\n+    323..341 '<F as ...bar(S)': {unknown}\n+    339..340 'S': S\n+    347..353 'F::bar': fn bar<F, {unknown}>(S) -> {unknown}\n+    347..356 'F::bar(S)': {unknown}\n+    354..355 'S': S\n+    362..377 'Foo::bar::<u32>': fn bar<{unknown}, u32>(S) -> u32\n+    362..380 'Foo::b...32>(S)': u32\n+    378..379 'S': S\n+    386..408 '<F as ...:<u32>': fn bar<F, u32>(S) -> u32\n+    386..411 '<F as ...32>(S)': u32\n+    409..410 'S': S\n+    418..421 'foo': fn foo<{unknown}>(S) -> {unknown}\n+    418..424 'foo(S)': {unknown}\n+    422..423 'S': S\n+    430..440 'foo::<u32>': fn foo<u32>(S) -> u32\n+    430..443 'foo::<u32>(S)': u32\n+    441..442 'S': S\n+    449..464 'foo::<u32, i32>': fn foo<u32>(S) -> u32\n+    449..467 'foo::<...32>(S)': u32\n+    465..466 'S': S\n     \"###\n     );\n }\n@@ -1064,24 +1064,24 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    88..92 'self': F<T>\n-    94..95 'x': impl Trait\n-    119..130 '{ loop {} }': (T, U)\n-    121..128 'loop {}': !\n-    126..128 '{}': ()\n-    144..284 '{     ...ored }': ()\n-    150..151 'F': F<{unknown}>\n-    150..158 'F.foo(S)': ({unknown}, {unknown})\n-    156..157 'S': S\n-    164..172 'F::<u32>': F<u32>\n-    164..179 'F::<u32>.foo(S)': (u32, {unknown})\n-    177..178 'S': S\n-    185..193 'F::<u32>': F<u32>\n-    185..207 'F::<u3...32>(S)': (u32, i32)\n-    205..206 'S': S\n-    213..221 'F::<u32>': F<u32>\n-    213..240 'F::<u3...32>(S)': (u32, i32)\n-    238..239 'S': S\n+    87..91 'self': F<T>\n+    93..94 'x': impl Trait\n+    118..129 '{ loop {} }': (T, U)\n+    120..127 'loop {}': !\n+    125..127 '{}': ()\n+    143..283 '{     ...ored }': ()\n+    149..150 'F': F<{unknown}>\n+    149..157 'F.foo(S)': ({unknown}, {unknown})\n+    155..156 'S': S\n+    163..171 'F::<u32>': F<u32>\n+    163..178 'F::<u32>.foo(S)': (u32, {unknown})\n+    176..177 'S': S\n+    184..192 'F::<u32>': F<u32>\n+    184..206 'F::<u3...32>(S)': (u32, i32)\n+    204..205 'S': S\n+    212..220 'F::<u32>': F<u32>\n+    212..239 'F::<u3...32>(S)': (u32, i32)\n+    237..238 'S': S\n     \"###\n     );\n }\n@@ -1100,13 +1100,13 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    23..24 'x': impl Trait\n-    38..49 '{ loop {} }': ()\n-    40..47 'loop {}': !\n-    45..47 '{}': ()\n-    91..124 '{     ...foo; }': ()\n-    101..102 'f': fn(S)\n-    118..121 'foo': fn foo(S)\n+    22..23 'x': impl Trait\n+    37..48 '{ loop {} }': ()\n+    39..46 'loop {}': !\n+    44..46 '{}': ()\n+    90..123 '{     ...foo; }': ()\n+    100..101 'f': fn(S)\n+    117..120 'foo': fn foo(S)\n     \"###\n     );\n }\n@@ -1134,29 +1134,29 @@ fn test(x: impl Trait<u64>, y: &impl Trait<u64>) {\n }\n \"#),\n         @r###\"\n-    30..34 'self': &Self\n-    55..59 'self': &Self\n-    99..101 '{}': ()\n-    111..112 'x': impl Trait<u64>\n-    131..132 'y': &impl Trait<u64>\n-    152..269 '{     ...2(); }': ()\n-    158..159 'x': impl Trait<u64>\n-    165..166 'y': &impl Trait<u64>\n-    176..177 'z': impl Trait<u64>\n-    180..183 'bar': fn bar() -> impl Trait<u64>\n-    180..185 'bar()': impl Trait<u64>\n-    191..192 'x': impl Trait<u64>\n-    191..198 'x.foo()': u64\n-    204..205 'y': &impl Trait<u64>\n-    204..211 'y.foo()': u64\n-    217..218 'z': impl Trait<u64>\n-    217..224 'z.foo()': u64\n-    230..231 'x': impl Trait<u64>\n-    230..238 'x.foo2()': i64\n-    244..245 'y': &impl Trait<u64>\n-    244..252 'y.foo2()': i64\n-    258..259 'z': impl Trait<u64>\n-    258..266 'z.foo2()': i64\n+    29..33 'self': &Self\n+    54..58 'self': &Self\n+    98..100 '{}': ()\n+    110..111 'x': impl Trait<u64>\n+    130..131 'y': &impl Trait<u64>\n+    151..268 '{     ...2(); }': ()\n+    157..158 'x': impl Trait<u64>\n+    164..165 'y': &impl Trait<u64>\n+    175..176 'z': impl Trait<u64>\n+    179..182 'bar': fn bar() -> impl Trait<u64>\n+    179..184 'bar()': impl Trait<u64>\n+    190..191 'x': impl Trait<u64>\n+    190..197 'x.foo()': u64\n+    203..204 'y': &impl Trait<u64>\n+    203..210 'y.foo()': u64\n+    216..217 'z': impl Trait<u64>\n+    216..223 'z.foo()': u64\n+    229..230 'x': impl Trait<u64>\n+    229..237 'x.foo2()': i64\n+    243..244 'y': &impl Trait<u64>\n+    243..251 'y.foo2()': i64\n+    257..258 'z': impl Trait<u64>\n+    257..265 'z.foo2()': i64\n     \"###\n     );\n }\n@@ -1177,16 +1177,16 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    30..34 'self': &Self\n-    72..83 '{ loop {} }': !\n-    74..81 'loop {}': !\n-    79..81 '{}': ()\n-    95..130 '{     ...o(); }': ()\n-    105..106 'a': impl Trait<u64>\n-    109..112 'bar': fn bar() -> impl Trait<u64>\n-    109..114 'bar()': impl Trait<u64>\n-    120..121 'a': impl Trait<u64>\n-    120..127 'a.foo()': u64\n+    29..33 'self': &Self\n+    71..82 '{ loop {} }': !\n+    73..80 'loop {}': !\n+    78..80 '{}': ()\n+    94..129 '{     ...o(); }': ()\n+    104..105 'a': impl Trait<u64>\n+    108..111 'bar': fn bar() -> impl Trait<u64>\n+    108..113 'bar()': impl Trait<u64>\n+    119..120 'a': impl Trait<u64>\n+    119..126 'a.foo()': u64\n     \"###\n     );\n }\n@@ -1215,37 +1215,37 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    50..54 'self': &mut Self\n-    102..106 'self': &Self\n-    185..196 '{ loop {} }': ({unknown}, {unknown})\n-    187..194 'loop {}': !\n-    192..194 '{}': ()\n-    207..208 't': T\n-    269..280 '{ loop {} }': ({unknown}, {unknown})\n-    271..278 'loop {}': !\n-    276..278 '{}': ()\n-    292..414 '{     ...o(); }': ()\n-    302..308 '(a, b)': (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n-    303..304 'a': impl Iterator<Item = impl Trait<u32>>\n-    306..307 'b': impl Trait<u64>\n-    311..314 'bar': fn bar() -> (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n-    311..316 'bar()': (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n-    322..323 'a': impl Iterator<Item = impl Trait<u32>>\n-    322..330 'a.next()': impl Trait<u32>\n-    322..336 'a.next().foo()': u32\n-    342..343 'b': impl Trait<u64>\n-    342..349 'b.foo()': u64\n-    359..365 '(c, d)': (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n-    360..361 'c': impl Iterator<Item = impl Trait<u128>>\n-    363..364 'd': impl Trait<u128>\n-    368..371 'baz': fn baz<u128>(u128) -> (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n-    368..378 'baz(1u128)': (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n-    372..377 '1u128': u128\n-    384..385 'c': impl Iterator<Item = impl Trait<u128>>\n-    384..392 'c.next()': impl Trait<u128>\n-    384..398 'c.next().foo()': u128\n-    404..405 'd': impl Trait<u128>\n-    404..411 'd.foo()': u128\n+    49..53 'self': &mut Self\n+    101..105 'self': &Self\n+    184..195 '{ loop {} }': ({unknown}, {unknown})\n+    186..193 'loop {}': !\n+    191..193 '{}': ()\n+    206..207 't': T\n+    268..279 '{ loop {} }': ({unknown}, {unknown})\n+    270..277 'loop {}': !\n+    275..277 '{}': ()\n+    291..413 '{     ...o(); }': ()\n+    301..307 '(a, b)': (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n+    302..303 'a': impl Iterator<Item = impl Trait<u32>>\n+    305..306 'b': impl Trait<u64>\n+    310..313 'bar': fn bar() -> (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n+    310..315 'bar()': (impl Iterator<Item = impl Trait<u32>>, impl Trait<u64>)\n+    321..322 'a': impl Iterator<Item = impl Trait<u32>>\n+    321..329 'a.next()': impl Trait<u32>\n+    321..335 'a.next().foo()': u32\n+    341..342 'b': impl Trait<u64>\n+    341..348 'b.foo()': u64\n+    358..364 '(c, d)': (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n+    359..360 'c': impl Iterator<Item = impl Trait<u128>>\n+    362..363 'd': impl Trait<u128>\n+    367..370 'baz': fn baz<u128>(u128) -> (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n+    367..377 'baz(1u128)': (impl Iterator<Item = impl Trait<u128>>, impl Trait<u128>)\n+    371..376 '1u128': u128\n+    383..384 'c': impl Iterator<Item = impl Trait<u128>>\n+    383..391 'c.next()': impl Trait<u128>\n+    383..397 'c.next().foo()': u128\n+    403..404 'd': impl Trait<u128>\n+    403..410 'd.foo()': u128\n     \"###\n     );\n }\n@@ -1273,29 +1273,29 @@ fn test(x: dyn Trait<u64>, y: &dyn Trait<u64>) {\n }\n \"#),\n         @r###\"\n-    30..34 'self': &Self\n-    55..59 'self': &Self\n-    98..100 '{}': ()\n-    110..111 'x': dyn Trait<u64>\n-    129..130 'y': &dyn Trait<u64>\n-    149..266 '{     ...2(); }': ()\n-    155..156 'x': dyn Trait<u64>\n-    162..163 'y': &dyn Trait<u64>\n-    173..174 'z': dyn Trait<u64>\n-    177..180 'bar': fn bar() -> dyn Trait<u64>\n-    177..182 'bar()': dyn Trait<u64>\n-    188..189 'x': dyn Trait<u64>\n-    188..195 'x.foo()': u64\n-    201..202 'y': &dyn Trait<u64>\n-    201..208 'y.foo()': u64\n-    214..215 'z': dyn Trait<u64>\n-    214..221 'z.foo()': u64\n-    227..228 'x': dyn Trait<u64>\n-    227..235 'x.foo2()': i64\n-    241..242 'y': &dyn Trait<u64>\n-    241..249 'y.foo2()': i64\n-    255..256 'z': dyn Trait<u64>\n-    255..263 'z.foo2()': i64\n+    29..33 'self': &Self\n+    54..58 'self': &Self\n+    97..99 '{}': ()\n+    109..110 'x': dyn Trait<u64>\n+    128..129 'y': &dyn Trait<u64>\n+    148..265 '{     ...2(); }': ()\n+    154..155 'x': dyn Trait<u64>\n+    161..162 'y': &dyn Trait<u64>\n+    172..173 'z': dyn Trait<u64>\n+    176..179 'bar': fn bar() -> dyn Trait<u64>\n+    176..181 'bar()': dyn Trait<u64>\n+    187..188 'x': dyn Trait<u64>\n+    187..194 'x.foo()': u64\n+    200..201 'y': &dyn Trait<u64>\n+    200..207 'y.foo()': u64\n+    213..214 'z': dyn Trait<u64>\n+    213..220 'z.foo()': u64\n+    226..227 'x': dyn Trait<u64>\n+    226..234 'x.foo2()': i64\n+    240..241 'y': &dyn Trait<u64>\n+    240..248 'y.foo2()': i64\n+    254..255 'z': dyn Trait<u64>\n+    254..262 'z.foo2()': i64\n     \"###\n     );\n }\n@@ -1321,17 +1321,17 @@ fn test(s: S<u32, i32>) {\n }\n \"#),\n         @r###\"\n-    33..37 'self': &Self\n-    103..107 'self': &S<T, U>\n-    129..140 '{ loop {} }': &dyn Trait<T, U>\n-    131..138 'loop {}': !\n-    136..138 '{}': ()\n-    176..180 'self': &Self\n-    252..253 's': S<u32, i32>\n-    268..290 '{     ...z(); }': ()\n-    274..275 's': S<u32, i32>\n-    274..281 's.bar()': &dyn Trait<u32, i32>\n-    274..287 's.bar().baz()': (u32, i32)\n+    32..36 'self': &Self\n+    102..106 'self': &S<T, U>\n+    128..139 '{ loop {} }': &dyn Trait<T, U>\n+    130..137 'loop {}': !\n+    135..137 '{}': ()\n+    175..179 'self': &Self\n+    251..252 's': S<u32, i32>\n+    267..289 '{     ...z(); }': ()\n+    273..274 's': S<u32, i32>\n+    273..280 's.bar()': &dyn Trait<u32, i32>\n+    273..286 's.bar().baz()': (u32, i32)\n     \"###\n     );\n }\n@@ -1355,22 +1355,22 @@ fn test(x: Trait, y: &Trait) -> u64 {\n }\n \"#),\n         @r###\"\n-    27..31 'self': &Self\n-    61..63 '{}': ()\n-    73..74 'x': dyn Trait\n-    83..84 'y': &dyn Trait\n-    101..176 '{     ...o(); }': ()\n-    107..108 'x': dyn Trait\n-    114..115 'y': &dyn Trait\n-    125..126 'z': dyn Trait\n-    129..132 'bar': fn bar() -> dyn Trait\n-    129..134 'bar()': dyn Trait\n-    140..141 'x': dyn Trait\n-    140..147 'x.foo()': u64\n-    153..154 'y': &dyn Trait\n-    153..160 'y.foo()': u64\n-    166..167 'z': dyn Trait\n-    166..173 'z.foo()': u64\n+    26..30 'self': &Self\n+    60..62 '{}': ()\n+    72..73 'x': dyn Trait\n+    82..83 'y': &dyn Trait\n+    100..175 '{     ...o(); }': ()\n+    106..107 'x': dyn Trait\n+    113..114 'y': &dyn Trait\n+    124..125 'z': dyn Trait\n+    128..131 'bar': fn bar() -> dyn Trait\n+    128..133 'bar()': dyn Trait\n+    139..140 'x': dyn Trait\n+    139..146 'x.foo()': u64\n+    152..153 'y': &dyn Trait\n+    152..159 'y.foo()': u64\n+    165..166 'z': dyn Trait\n+    165..172 'z.foo()': u64\n     \"###\n     );\n }\n@@ -1384,13 +1384,13 @@ fn test(a: impl Trait + 'lifetime, b: impl 'lifetime, c: impl (Trait), d: impl (\n }\n \"#),\n         @r###\"\n-    24..25 'a': impl Trait + {error}\n-    51..52 'b': impl {error}\n-    70..71 'c': impl Trait\n-    87..88 'd': impl {error}\n-    108..109 'e': impl {error}\n-    124..125 'f': impl Trait + {error}\n-    148..151 '{ }': ()\n+    23..24 'a': impl Trait + {error}\n+    50..51 'b': impl {error}\n+    69..70 'c': impl Trait\n+    86..87 'd': impl {error}\n+    107..108 'e': impl {error}\n+    123..124 'f': impl Trait + {error}\n+    147..150 '{ }': ()\n     \"###\n     );\n }\n@@ -1439,41 +1439,41 @@ fn test<T: Trait<Type = u32>>(x: T, y: impl Trait<Type = i64>) {\n }\n \"#),\n         @r###\"\n-    50..51 't': T\n-    78..80 '{}': ()\n-    112..113 't': T\n-    123..125 '{}': ()\n-    155..156 't': T\n-    166..169 '{t}': T\n-    167..168 't': T\n-    257..258 'x': T\n-    263..264 'y': impl Trait<Type = i64>\n-    290..398 '{     ...r>); }': ()\n-    296..299 'get': fn get<T>(T) -> <T as Trait>::Type\n-    296..302 'get(x)': u32\n-    300..301 'x': T\n-    308..312 'get2': fn get2<u32, T>(T) -> u32\n-    308..315 'get2(x)': u32\n-    313..314 'x': T\n-    321..324 'get': fn get<impl Trait<Type = i64>>(impl Trait<Type = i64>) -> <impl Trait<Type = i64> as Trait>::Type\n-    321..327 'get(y)': i64\n-    325..326 'y': impl Trait<Type = i64>\n-    333..337 'get2': fn get2<i64, impl Trait<Type = i64>>(impl Trait<Type = i64>) -> i64\n-    333..340 'get2(y)': i64\n-    338..339 'y': impl Trait<Type = i64>\n-    346..349 'get': fn get<S<u64>>(S<u64>) -> <S<u64> as Trait>::Type\n-    346..357 'get(set(S))': u64\n-    350..353 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n-    350..356 'set(S)': S<u64>\n-    354..355 'S': S<u64>\n-    363..367 'get2': fn get2<u64, S<u64>>(S<u64>) -> u64\n-    363..375 'get2(set(S))': u64\n-    368..371 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n-    368..374 'set(S)': S<u64>\n-    372..373 'S': S<u64>\n-    381..385 'get2': fn get2<str, S<str>>(S<str>) -> str\n-    381..395 'get2(S::<str>)': str\n-    386..394 'S::<str>': S<str>\n+    49..50 't': T\n+    77..79 '{}': ()\n+    111..112 't': T\n+    122..124 '{}': ()\n+    154..155 't': T\n+    165..168 '{t}': T\n+    166..167 't': T\n+    256..257 'x': T\n+    262..263 'y': impl Trait<Type = i64>\n+    289..397 '{     ...r>); }': ()\n+    295..298 'get': fn get<T>(T) -> <T as Trait>::Type\n+    295..301 'get(x)': u32\n+    299..300 'x': T\n+    307..311 'get2': fn get2<u32, T>(T) -> u32\n+    307..314 'get2(x)': u32\n+    312..313 'x': T\n+    320..323 'get': fn get<impl Trait<Type = i64>>(impl Trait<Type = i64>) -> <impl Trait<Type = i64> as Trait>::Type\n+    320..326 'get(y)': i64\n+    324..325 'y': impl Trait<Type = i64>\n+    332..336 'get2': fn get2<i64, impl Trait<Type = i64>>(impl Trait<Type = i64>) -> i64\n+    332..339 'get2(y)': i64\n+    337..338 'y': impl Trait<Type = i64>\n+    345..348 'get': fn get<S<u64>>(S<u64>) -> <S<u64> as Trait>::Type\n+    345..356 'get(set(S))': u64\n+    349..352 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n+    349..355 'set(S)': S<u64>\n+    353..354 'S': S<u64>\n+    362..366 'get2': fn get2<u64, S<u64>>(S<u64>) -> u64\n+    362..374 'get2(set(S))': u64\n+    367..370 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n+    367..373 'set(S)': S<u64>\n+    371..372 'S': S<u64>\n+    380..384 'get2': fn get2<str, S<str>>(S<str>) -> str\n+    380..394 'get2(S::<str>)': str\n+    385..393 'S::<str>': S<str>\n     \"###\n     );\n }\n@@ -1538,11 +1538,11 @@ fn test<T: Trait1<Type = u32>>(x: T) {\n }\n \"#),\n         @r###\"\n-    62..66 'self': Self\n-    164..165 'x': T\n-    170..186 '{     ...o(); }': ()\n-    176..177 'x': T\n-    176..183 'x.foo()': u32\n+    61..65 'self': Self\n+    163..164 'x': T\n+    169..185 '{     ...o(); }': ()\n+    175..176 'x': T\n+    175..182 'x.foo()': u32\n     \"###\n     );\n }\n@@ -1584,15 +1584,15 @@ fn test<T: Trait1, U: Trait2>(x: T, y: U) {\n }\n \"#),\n         @r###\"\n-    50..54 'self': &Self\n-    63..65 '{}': ()\n-    182..183 'x': T\n-    188..189 'y': U\n-    194..223 '{     ...o(); }': ()\n-    200..201 'x': T\n-    200..207 'x.foo()': u32\n-    213..214 'y': U\n-    213..220 'y.foo()': u32\n+    49..53 'self': &Self\n+    62..64 '{}': ()\n+    181..182 'x': T\n+    187..188 'y': U\n+    193..222 '{     ...o(); }': ()\n+    199..200 'x': T\n+    199..206 'x.foo()': u32\n+    212..213 'y': U\n+    212..219 'y.foo()': u32\n     \"###\n     );\n }\n@@ -1613,12 +1613,12 @@ fn test(x: &impl Trait1) {\n }\n \"#),\n         @r###\"\n-    50..54 'self': &Self\n-    63..65 '{}': ()\n-    116..117 'x': &impl Trait1\n-    133..149 '{     ...o(); }': ()\n-    139..140 'x': &impl Trait1\n-    139..146 'x.foo()': u32\n+    49..53 'self': &Self\n+    62..64 '{}': ()\n+    115..116 'x': &impl Trait1\n+    132..148 '{     ...o(); }': ()\n+    138..139 'x': &impl Trait1\n+    138..145 'x.foo()': u32\n     \"###\n     );\n }\n@@ -1636,10 +1636,10 @@ fn test<T: A>(x: T) {\n }\n \"#),\n         @r###\"\n-    44..45 'x': T\n-    50..66 '{     ...o(); }': ()\n-    56..57 'x': T\n-    56..63 'x.foo()': {unknown}\n+    43..44 'x': T\n+    49..65 '{     ...o(); }': ()\n+    55..56 'x': T\n+    55..62 'x.foo()': {unknown}\n     \"###\n     );\n }\n@@ -1663,17 +1663,17 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    103..104 't': T\n-    114..116 '{}': ()\n-    146..147 't': T\n-    157..160 '{t}': T\n-    158..159 't': T\n-    259..280 '{     ...S)); }': ()\n-    265..269 'get2': fn get2<u64, S<u64>>(S<u64>) -> u64\n-    265..277 'get2(set(S))': u64\n-    270..273 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n-    270..276 'set(S)': S<u64>\n-    274..275 'S': S<u64>\n+    102..103 't': T\n+    113..115 '{}': ()\n+    145..146 't': T\n+    156..159 '{t}': T\n+    157..158 't': T\n+    258..279 '{     ...S)); }': ()\n+    264..268 'get2': fn get2<u64, S<u64>>(S<u64>) -> u64\n+    264..276 'get2(set(S))': u64\n+    269..272 'set': fn set<S<u64>>(S<u64>) -> S<u64>\n+    269..275 'set(S)': S<u64>\n+    273..274 'S': S<u64>\n     \"###\n     );\n }\n@@ -1693,15 +1693,15 @@ fn test<F: FnOnce(u32, u64) -> u128>(f: F) {\n }\n \"#),\n         @r###\"\n-    57..61 'self': Self\n-    63..67 'args': Args\n-    150..151 'f': F\n-    156..184 '{     ...2)); }': ()\n-    162..163 'f': F\n-    162..181 'f.call...1, 2))': u128\n-    174..180 '(1, 2)': (u32, u64)\n-    175..176 '1': u32\n-    178..179 '2': u64\n+    56..60 'self': Self\n+    62..66 'args': Args\n+    149..150 'f': F\n+    155..183 '{     ...2)); }': ()\n+    161..162 'f': F\n+    161..180 'f.call...1, 2))': u128\n+    173..179 '(1, 2)': (u32, u64)\n+    174..175 '1': u32\n+    177..178 '2': u64\n     \"###\n     );\n }\n@@ -1742,24 +1742,24 @@ fn test() {\n }\n \"#),\n         @r###\"\n-75..79 'self': Self\n-81..85 'args': Args\n-140..144 'self': &Self\n-244..248 'self': &Bar<F>\n-261..263 '{}': ()\n-347..351 'self': Opt<T>\n-353..354 'f': F\n-369..371 '{}': ()\n-385..501 '{     ...(f); }': ()\n-395..398 'bar': Bar<fn(u8) -> u32>\n-424..427 'bar': Bar<fn(u8) -> u32>\n-424..433 'bar.foo()': {unknown}\n-444..447 'opt': Opt<u8>\n-466..467 'f': fn(u8) -> u32\n-488..491 'opt': Opt<u8>\n-488..498 'opt.map(f)': Opt<FnOnce::Output<fn(u8) -> u32, (u8,)>>\n-496..497 'f': fn(u8) -> u32\n-\"###\n+    74..78 'self': Self\n+    80..84 'args': Args\n+    139..143 'self': &Self\n+    243..247 'self': &Bar<F>\n+    260..262 '{}': ()\n+    346..350 'self': Opt<T>\n+    352..353 'f': F\n+    368..370 '{}': ()\n+    384..500 '{     ...(f); }': ()\n+    394..397 'bar': Bar<fn(u8) -> u32>\n+    423..426 'bar': Bar<fn(u8) -> u32>\n+    423..432 'bar.foo()': {unknown}\n+    443..446 'opt': Opt<u8>\n+    465..466 'f': fn(u8) -> u32\n+    487..490 'opt': Opt<u8>\n+    487..497 'opt.map(f)': Opt<FnOnce::Output<fn(u8) -> u32, (u8,)>>\n+    495..496 'f': fn(u8) -> u32\n+    \"###\n     );\n }\n \n@@ -1808,32 +1808,32 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    65..69 'self': &Self\n-    166..170 'self': Self\n-    172..176 'args': Args\n-    240..244 'self': &Foo\n-    255..257 '{}': ()\n-    335..336 'f': F\n-    355..357 '{}': ()\n-    444..690 '{     ...o(); }': ()\n-    454..459 'lazy1': Lazy<Foo, || -> Foo>\n-    476..485 'Lazy::new': fn new<Foo, || -> Foo>(|| -> Foo) -> Lazy<Foo, || -> Foo>\n-    476..493 'Lazy::...| Foo)': Lazy<Foo, || -> Foo>\n-    486..492 '|| Foo': || -> Foo\n-    489..492 'Foo': Foo\n-    503..505 'r1': usize\n-    508..513 'lazy1': Lazy<Foo, || -> Foo>\n-    508..519 'lazy1.foo()': usize\n-    561..576 'make_foo_fn_ptr': fn() -> Foo\n-    592..603 'make_foo_fn': fn make_foo_fn() -> Foo\n-    613..618 'lazy2': Lazy<Foo, fn() -> Foo>\n-    635..644 'Lazy::new': fn new<Foo, fn() -> Foo>(fn() -> Foo) -> Lazy<Foo, fn() -> Foo>\n-    635..661 'Lazy::...n_ptr)': Lazy<Foo, fn() -> Foo>\n-    645..660 'make_foo_fn_ptr': fn() -> Foo\n-    671..673 'r2': {unknown}\n-    676..681 'lazy2': Lazy<Foo, fn() -> Foo>\n-    676..687 'lazy2.foo()': {unknown}\n-    550..552 '{}': ()\n+    64..68 'self': &Self\n+    165..169 'self': Self\n+    171..175 'args': Args\n+    239..243 'self': &Foo\n+    254..256 '{}': ()\n+    334..335 'f': F\n+    354..356 '{}': ()\n+    443..689 '{     ...o(); }': ()\n+    453..458 'lazy1': Lazy<Foo, || -> Foo>\n+    475..484 'Lazy::new': fn new<Foo, || -> Foo>(|| -> Foo) -> Lazy<Foo, || -> Foo>\n+    475..492 'Lazy::...| Foo)': Lazy<Foo, || -> Foo>\n+    485..491 '|| Foo': || -> Foo\n+    488..491 'Foo': Foo\n+    502..504 'r1': usize\n+    507..512 'lazy1': Lazy<Foo, || -> Foo>\n+    507..518 'lazy1.foo()': usize\n+    560..575 'make_foo_fn_ptr': fn() -> Foo\n+    591..602 'make_foo_fn': fn make_foo_fn() -> Foo\n+    612..617 'lazy2': Lazy<Foo, fn() -> Foo>\n+    634..643 'Lazy::new': fn new<Foo, fn() -> Foo>(fn() -> Foo) -> Lazy<Foo, fn() -> Foo>\n+    634..660 'Lazy::...n_ptr)': Lazy<Foo, fn() -> Foo>\n+    644..659 'make_foo_fn_ptr': fn() -> Foo\n+    670..672 'r2': {unknown}\n+    675..680 'lazy2': Lazy<Foo, fn() -> Foo>\n+    675..686 'lazy2.foo()': {unknown}\n+    549..551 '{}': ()\n     \"###\n     );\n }\n@@ -1860,32 +1860,32 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    148..152 'self': Option<T>\n-    154..155 'f': F\n-    173..175 '{}': ()\n-    189..308 '{     ... 1); }': ()\n-    199..200 'x': Option<u32>\n-    203..215 'Option::Some': Some<u32>(u32) -> Option<u32>\n-    203..221 'Option...(1u32)': Option<u32>\n-    216..220 '1u32': u32\n-    227..228 'x': Option<u32>\n-    227..243 'x.map(...v + 1)': Option<u32>\n-    233..242 '|v| v + 1': |u32| -> u32\n-    234..235 'v': u32\n-    237..238 'v': u32\n-    237..242 'v + 1': u32\n-    241..242 '1': u32\n-    249..250 'x': Option<u32>\n-    249..265 'x.map(... 1u64)': Option<u64>\n-    255..264 '|_v| 1u64': |u32| -> u64\n-    256..258 '_v': u32\n-    260..264 '1u64': u64\n-    275..276 'y': Option<i64>\n-    292..293 'x': Option<u32>\n-    292..305 'x.map(|_v| 1)': Option<i64>\n-    298..304 '|_v| 1': |u32| -> i64\n-    299..301 '_v': u32\n-    303..304 '1': i64\n+    147..151 'self': Option<T>\n+    153..154 'f': F\n+    172..174 '{}': ()\n+    188..307 '{     ... 1); }': ()\n+    198..199 'x': Option<u32>\n+    202..214 'Option::Some': Some<u32>(u32) -> Option<u32>\n+    202..220 'Option...(1u32)': Option<u32>\n+    215..219 '1u32': u32\n+    226..227 'x': Option<u32>\n+    226..242 'x.map(...v + 1)': Option<u32>\n+    232..241 '|v| v + 1': |u32| -> u32\n+    233..234 'v': u32\n+    236..237 'v': u32\n+    236..241 'v + 1': u32\n+    240..241 '1': u32\n+    248..249 'x': Option<u32>\n+    248..264 'x.map(... 1u64)': Option<u64>\n+    254..263 '|_v| 1u64': |u32| -> u64\n+    255..257 '_v': u32\n+    259..263 '1u64': u64\n+    274..275 'y': Option<i64>\n+    291..292 'x': Option<u32>\n+    291..304 'x.map(|_v| 1)': Option<i64>\n+    297..303 '|_v| 1': |u32| -> i64\n+    298..300 '_v': u32\n+    302..303 '1': i64\n     \"###\n     );\n }\n@@ -1906,26 +1906,26 @@ fn test<F: FnOnce(u32) -> u64>(f: F) {\n }\n \"#),\n         @r###\"\n-    73..74 'f': F\n-    79..155 '{     ...+ v; }': ()\n-    85..86 'f': F\n-    85..89 'f(1)': {unknown}\n-    87..88 '1': i32\n-    99..100 'g': |u64| -> i32\n-    103..112 '|v| v + 1': |u64| -> i32\n-    104..105 'v': u64\n-    107..108 'v': u64\n-    107..112 'v + 1': i32\n-    111..112 '1': i32\n-    118..119 'g': |u64| -> i32\n-    118..125 'g(1u64)': i32\n-    120..124 '1u64': u64\n-    135..136 'h': |u128| -> u128\n-    139..152 '|v| 1u128 + v': |u128| -> u128\n-    140..141 'v': u128\n-    143..148 '1u128': u128\n-    143..152 '1u128 + v': u128\n-    151..152 'v': u128\n+    72..73 'f': F\n+    78..154 '{     ...+ v; }': ()\n+    84..85 'f': F\n+    84..88 'f(1)': {unknown}\n+    86..87 '1': i32\n+    98..99 'g': |u64| -> i32\n+    102..111 '|v| v + 1': |u64| -> i32\n+    103..104 'v': u64\n+    106..107 'v': u64\n+    106..111 'v + 1': i32\n+    110..111 '1': i32\n+    117..118 'g': |u64| -> i32\n+    117..124 'g(1u64)': i32\n+    119..123 '1u64': u64\n+    134..135 'h': |u128| -> u128\n+    138..151 '|v| 1u128 + v': |u128| -> u128\n+    139..140 'v': u128\n+    142..147 '1u128': u128\n+    142..151 '1u128 + v': u128\n+    150..151 'v': u128\n     \"###\n     );\n }\n@@ -1958,54 +1958,54 @@ fn test() {\n }\n \"#),\n         @r###\"\n-    95..96 'x': T\n-    101..102 'f': F\n-    112..114 '{}': ()\n-    148..149 'f': F\n-    154..155 'x': T\n-    165..167 '{}': ()\n-    202..206 'self': S\n-    254..258 'self': S\n-    260..261 'x': T\n-    266..267 'f': F\n-    277..279 '{}': ()\n-    317..321 'self': S\n-    323..324 'f': F\n-    329..330 'x': T\n-    340..342 '{}': ()\n-    356..515 '{     ... S); }': ()\n-    366..368 'x1': u64\n-    371..375 'foo1': fn foo1<S, u64, |S| -> u64>(S, |S| -> u64) -> u64\n-    371..394 'foo1(S...hod())': u64\n-    376..377 'S': S\n-    379..393 '|s| s.method()': |S| -> u64\n-    380..381 's': S\n-    383..384 's': S\n-    383..393 's.method()': u64\n-    404..406 'x2': u64\n-    409..413 'foo2': fn foo2<S, u64, |S| -> u64>(|S| -> u64, S) -> u64\n-    409..432 'foo2(|...(), S)': u64\n-    414..428 '|s| s.method()': |S| -> u64\n-    415..416 's': S\n-    418..419 's': S\n-    418..428 's.method()': u64\n-    430..431 'S': S\n-    442..444 'x3': u64\n-    447..448 'S': S\n-    447..472 'S.foo1...hod())': u64\n-    454..455 'S': S\n-    457..471 '|s| s.method()': |S| -> u64\n-    458..459 's': S\n-    461..462 's': S\n-    461..471 's.method()': u64\n-    482..484 'x4': u64\n-    487..488 'S': S\n-    487..512 'S.foo2...(), S)': u64\n-    494..508 '|s| s.method()': |S| -> u64\n-    495..496 's': S\n-    498..499 's': S\n-    498..508 's.method()': u64\n-    510..511 'S': S\n+    94..95 'x': T\n+    100..101 'f': F\n+    111..113 '{}': ()\n+    147..148 'f': F\n+    153..154 'x': T\n+    164..166 '{}': ()\n+    201..205 'self': S\n+    253..257 'self': S\n+    259..260 'x': T\n+    265..266 'f': F\n+    276..278 '{}': ()\n+    316..320 'self': S\n+    322..323 'f': F\n+    328..329 'x': T\n+    339..341 '{}': ()\n+    355..514 '{     ... S); }': ()\n+    365..367 'x1': u64\n+    370..374 'foo1': fn foo1<S, u64, |S| -> u64>(S, |S| -> u64) -> u64\n+    370..393 'foo1(S...hod())': u64\n+    375..376 'S': S\n+    378..392 '|s| s.method()': |S| -> u64\n+    379..380 's': S\n+    382..383 's': S\n+    382..392 's.method()': u64\n+    403..405 'x2': u64\n+    408..412 'foo2': fn foo2<S, u64, |S| -> u64>(|S| -> u64, S) -> u64\n+    408..431 'foo2(|...(), S)': u64\n+    413..427 '|s| s.method()': |S| -> u64\n+    414..415 's': S\n+    417..418 's': S\n+    417..427 's.method()': u64\n+    429..430 'S': S\n+    441..443 'x3': u64\n+    446..447 'S': S\n+    446..471 'S.foo1...hod())': u64\n+    453..454 'S': S\n+    456..470 '|s| s.method()': |S| -> u64\n+    457..458 's': S\n+    460..461 's': S\n+    460..470 's.method()': u64\n+    481..483 'x4': u64\n+    486..487 'S': S\n+    486..511 'S.foo2...(), S)': u64\n+    493..507 '|s| s.method()': |S| -> u64\n+    494..495 's': S\n+    497..498 's': S\n+    497..507 's.method()': u64\n+    509..510 'S': S\n     \"###\n     );\n }\n@@ -2080,18 +2080,18 @@ impl Trait for S2 {\n }\n \"#,\n     ), @r###\"\n-    54..58 'self': &Self\n-    60..61 'x': Trait::Item<Self>\n-    140..144 'self': &S\n-    146..147 'x': u32\n-    161..175 '{ let y = x; }': ()\n-    167..168 'y': u32\n-    171..172 'x': u32\n-    242..246 'self': &S2\n-    248..249 'x': i32\n-    265..279 '{ let y = x; }': ()\n-    271..272 'y': i32\n-    275..276 'x': i32\n+    40..44 'self': &Self\n+    46..47 'x': Trait::Item<Self>\n+    126..130 'self': &S\n+    132..133 'x': u32\n+    147..161 '{ let y = x; }': ()\n+    153..154 'y': u32\n+    157..158 'x': u32\n+    228..232 'self': &S2\n+    234..235 'x': i32\n+    251..265 '{ let y = x; }': ()\n+    257..258 'y': i32\n+    261..262 'x': i32\n     \"###);\n }\n \n@@ -2331,15 +2331,15 @@ impl TokenStream for Rustc {\n }\n \"#),\n         @r###\"\n-    1062..1073 '{ loop {} }': T\n-    1064..1071 'loop {}': !\n-    1069..1071 '{}': ()\n-    1137..1200 '{     ...     }': T\n-    1151..1156 'group': G\n-    1172..1176 'make': fn make<G>() -> G\n-    1172..1178 'make()': G\n-    1188..1192 'make': fn make<T>() -> T\n-    1188..1194 'make()': T\n+    1061..1072 '{ loop {} }': T\n+    1063..1070 'loop {}': !\n+    1068..1070 '{}': ()\n+    1136..1199 '{     ...     }': T\n+    1150..1155 'group': G\n+    1171..1175 'make': fn make<G>() -> G\n+    1171..1177 'make()': G\n+    1187..1191 'make': fn make<T>() -> T\n+    1187..1193 'make()': T\n     \"###\n     );\n }\n@@ -2366,37 +2366,37 @@ fn test() -> impl Trait<i32> {\n }\n \"#, true),\n         @r###\"\n-    27..28 'x': impl Trait<u32>\n-    47..58 '{ loop {} }': ()\n-    49..56 'loop {}': !\n-    54..56 '{}': ()\n-    69..70 'x': impl Trait<T>\n-    92..103 '{ loop {} }': T\n-    94..101 'loop {}': !\n-    99..101 '{}': ()\n-    172..183 '{ loop {} }': T\n-    174..181 'loop {}': !\n-    179..181 '{}': ()\n-    214..310 '{     ...t()) }': S<{unknown}>\n-    224..226 's1': S<u32>\n-    229..230 'S': S<u32>(u32) -> S<u32>\n-    229..241 'S(default())': S<u32>\n-    231..238 'default': fn default<u32>() -> u32\n-    231..240 'default()': u32\n-    247..250 'foo': fn foo(S<u32>)\n-    247..254 'foo(s1)': ()\n-    251..253 's1': S<u32>\n-    264..265 'x': i32\n-    273..276 'bar': fn bar<i32>(S<i32>) -> i32\n-    273..290 'bar(S(...lt()))': i32\n-    277..278 'S': S<i32>(i32) -> S<i32>\n-    277..289 'S(default())': S<i32>\n-    279..286 'default': fn default<i32>() -> i32\n-    279..288 'default()': i32\n-    296..297 'S': S<{unknown}>({unknown}) -> S<{unknown}>\n-    296..308 'S(default())': S<{unknown}>\n-    298..305 'default': fn default<{unknown}>() -> {unknown}\n-    298..307 'default()': {unknown}\n+    26..27 'x': impl Trait<u32>\n+    46..57 '{ loop {} }': ()\n+    48..55 'loop {}': !\n+    53..55 '{}': ()\n+    68..69 'x': impl Trait<T>\n+    91..102 '{ loop {} }': T\n+    93..100 'loop {}': !\n+    98..100 '{}': ()\n+    171..182 '{ loop {} }': T\n+    173..180 'loop {}': !\n+    178..180 '{}': ()\n+    213..309 '{     ...t()) }': S<{unknown}>\n+    223..225 's1': S<u32>\n+    228..229 'S': S<u32>(u32) -> S<u32>\n+    228..240 'S(default())': S<u32>\n+    230..237 'default': fn default<u32>() -> u32\n+    230..239 'default()': u32\n+    246..249 'foo': fn foo(S<u32>)\n+    246..253 'foo(s1)': ()\n+    250..252 's1': S<u32>\n+    263..264 'x': i32\n+    272..275 'bar': fn bar<i32>(S<i32>) -> i32\n+    272..289 'bar(S(...lt()))': i32\n+    276..277 'S': S<i32>(i32) -> S<i32>\n+    276..288 'S(default())': S<i32>\n+    278..285 'default': fn default<i32>() -> i32\n+    278..287 'default()': i32\n+    295..296 'S': S<{unknown}>({unknown}) -> S<{unknown}>\n+    295..307 'S(default())': S<{unknown}>\n+    297..304 'default': fn default<{unknown}>() -> {unknown}\n+    297..306 'default()': {unknown}\n     \"###\n     );\n }\n@@ -2430,15 +2430,15 @@ fn main() {\n }\n \"#),\n         @r###\"\n-    147..149 '_v': F\n-    192..195 '{ }': ()\n-    207..238 '{     ... }); }': ()\n-    213..223 'f::<(), _>': fn f<(), |&()| -> ()>(|&()| -> ())\n-    213..235 'f::<()... z; })': ()\n-    224..234 '|z| { z; }': |&()| -> ()\n-    225..226 'z': &()\n-    228..234 '{ z; }': ()\n-    230..231 'z': &()\n+    133..135 '_v': F\n+    178..181 '{ }': ()\n+    193..224 '{     ... }); }': ()\n+    199..209 'f::<(), _>': fn f<(), |&()| -> ()>(|&()| -> ())\n+    199..221 'f::<()... z; })': ()\n+    210..220 '|z| { z; }': |&()| -> ()\n+    211..212 'z': &()\n+    214..220 '{ z; }': ()\n+    216..217 'z': &()\n     \"###\n     );\n }\n@@ -2591,46 +2591,46 @@ fn main() {\n }\n \"#),\n         @r###\"\n-    240..244 'self': Self\n-    246..247 'f': F\n-    331..342 '{ loop {} }': FilterMap<Self, F>\n-    333..340 'loop {}': !\n-    338..340 '{}': ()\n-    363..367 'self': Self\n-    369..370 'f': F\n-    419..430 '{ loop {} }': ()\n-    421..428 'loop {}': !\n-    426..428 '{}': ()\n-    539..543 'self': Self\n-    868..872 'self': I\n-    879..899 '{     ...     }': I\n-    889..893 'self': I\n-    958..969 '{ loop {} }': Vec<T>\n-    960..967 'loop {}': !\n-    965..967 '{}': ()\n-    1156..1287 '{     ... }); }': ()\n-    1162..1177 'Vec::<i32>::new': fn new<i32>() -> Vec<i32>\n-    1162..1179 'Vec::<...:new()': Vec<i32>\n-    1162..1191 'Vec::<...iter()': IntoIter<i32>\n-    1162..1256 'Vec::<...one })': FilterMap<IntoIter<i32>, |i32| -> Option<u32>>\n-    1162..1284 'Vec::<... y; })': ()\n-    1210..1255 '|x| if...None }': |i32| -> Option<u32>\n-    1211..1212 'x': i32\n-    1214..1255 'if x >...None }': Option<u32>\n-    1217..1218 'x': i32\n-    1217..1222 'x > 0': bool\n-    1221..1222 '0': i32\n-    1223..1241 '{ Some...u32) }': Option<u32>\n-    1225..1229 'Some': Some<u32>(u32) -> Option<u32>\n-    1225..1239 'Some(x as u32)': Option<u32>\n-    1230..1231 'x': i32\n-    1230..1238 'x as u32': u32\n-    1247..1255 '{ None }': Option<u32>\n-    1249..1253 'None': Option<u32>\n-    1273..1283 '|y| { y; }': |u32| -> ()\n-    1274..1275 'y': u32\n-    1277..1283 '{ y; }': ()\n-    1279..1280 'y': u32\n+    226..230 'self': Self\n+    232..233 'f': F\n+    317..328 '{ loop {} }': FilterMap<Self, F>\n+    319..326 'loop {}': !\n+    324..326 '{}': ()\n+    349..353 'self': Self\n+    355..356 'f': F\n+    405..416 '{ loop {} }': ()\n+    407..414 'loop {}': !\n+    412..414 '{}': ()\n+    525..529 'self': Self\n+    854..858 'self': I\n+    865..885 '{     ...     }': I\n+    875..879 'self': I\n+    944..955 '{ loop {} }': Vec<T>\n+    946..953 'loop {}': !\n+    951..953 '{}': ()\n+    1142..1273 '{     ... }); }': ()\n+    1148..1163 'Vec::<i32>::new': fn new<i32>() -> Vec<i32>\n+    1148..1165 'Vec::<...:new()': Vec<i32>\n+    1148..1177 'Vec::<...iter()': IntoIter<i32>\n+    1148..1242 'Vec::<...one })': FilterMap<IntoIter<i32>, |i32| -> Option<u32>>\n+    1148..1270 'Vec::<... y; })': ()\n+    1196..1241 '|x| if...None }': |i32| -> Option<u32>\n+    1197..1198 'x': i32\n+    1200..1241 'if x >...None }': Option<u32>\n+    1203..1204 'x': i32\n+    1203..1208 'x > 0': bool\n+    1207..1208 '0': i32\n+    1209..1227 '{ Some...u32) }': Option<u32>\n+    1211..1215 'Some': Some<u32>(u32) -> Option<u32>\n+    1211..1225 'Some(x as u32)': Option<u32>\n+    1216..1217 'x': i32\n+    1216..1224 'x as u32': u32\n+    1233..1241 '{ None }': Option<u32>\n+    1235..1239 'None': Option<u32>\n+    1259..1269 '|y| { y; }': |u32| -> ()\n+    1260..1261 'y': u32\n+    1263..1269 '{ y; }': ()\n+    1265..1266 'y': u32\n     \"###\n     );\n }\n@@ -2682,13 +2682,13 @@ fn test(x: &dyn Foo) {\n }\n \"#, true),\n         @r###\"\n-    22..23 'x': &dyn Foo\n-    35..37 '{}': ()\n-    47..48 'x': &dyn Foo\n-    60..75 '{     foo(x); }': ()\n-    66..69 'foo': fn foo(&dyn Foo)\n-    66..72 'foo(x)': ()\n-    70..71 'x': &dyn Foo\n+    21..22 'x': &dyn Foo\n+    34..36 '{}': ()\n+    46..47 'x': &dyn Foo\n+    59..74 '{     foo(x); }': ()\n+    65..68 'foo': fn foo(&dyn Foo)\n+    65..71 'foo(x)': ()\n+    69..70 'x': &dyn Foo\n     \"###\n     );\n }\n@@ -2715,20 +2715,20 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    111..115 'self': &Self\n-    167..268 '{     ...t(); }': ()\n-    173..179 'IsCopy': IsCopy\n-    173..186 'IsCopy.test()': bool\n-    192..199 'NotCopy': NotCopy\n-    192..206 'NotCopy.test()': {unknown}\n-    212..228 '(IsCop...sCopy)': (IsCopy, IsCopy)\n-    212..235 '(IsCop...test()': bool\n-    213..219 'IsCopy': IsCopy\n-    221..227 'IsCopy': IsCopy\n-    241..258 '(IsCop...tCopy)': (IsCopy, NotCopy)\n-    241..265 '(IsCop...test()': {unknown}\n-    242..248 'IsCopy': IsCopy\n-    250..257 'NotCopy': NotCopy\n+    110..114 'self': &Self\n+    166..267 '{     ...t(); }': ()\n+    172..178 'IsCopy': IsCopy\n+    172..185 'IsCopy.test()': bool\n+    191..198 'NotCopy': NotCopy\n+    191..205 'NotCopy.test()': {unknown}\n+    211..227 '(IsCop...sCopy)': (IsCopy, IsCopy)\n+    211..234 '(IsCop...test()': bool\n+    212..218 'IsCopy': IsCopy\n+    220..226 'IsCopy': IsCopy\n+    240..257 '(IsCop...tCopy)': (IsCopy, NotCopy)\n+    240..264 '(IsCop...test()': {unknown}\n+    241..247 'IsCopy': IsCopy\n+    249..256 'NotCopy': NotCopy\n     \"###\n     );\n }\n@@ -2756,20 +2756,20 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    42..44 '{}': ()\n-    61..62 'T': {unknown}\n-    69..71 '{}': ()\n-    69..71: expected T, got ()\n-    146..150 'self': &Self\n-    202..282 '{     ...t(); }': ()\n-    208..211 'foo': fn foo()\n-    208..218 'foo.test()': bool\n-    224..227 'bar': fn bar<{unknown}>({unknown}) -> {unknown}\n-    224..234 'bar.test()': bool\n-    240..246 'Struct': Struct(usize) -> Struct\n-    240..253 'Struct.test()': bool\n-    259..272 'Enum::Variant': Variant(usize) -> Enum\n-    259..279 'Enum::...test()': bool\n+    41..43 '{}': ()\n+    60..61 'T': {unknown}\n+    68..70 '{}': ()\n+    68..70: expected T, got ()\n+    145..149 'self': &Self\n+    201..281 '{     ...t(); }': ()\n+    207..210 'foo': fn foo()\n+    207..217 'foo.test()': bool\n+    223..226 'bar': fn bar<{unknown}>({unknown}) -> {unknown}\n+    223..233 'bar.test()': bool\n+    239..245 'Struct': Struct(usize) -> Struct\n+    239..252 'Struct.test()': bool\n+    258..271 'Enum::Variant': Variant(usize) -> Enum\n+    258..278 'Enum::...test()': bool\n     \"###\n     );\n }\n@@ -2791,17 +2791,17 @@ fn test(f1: fn(), f2: fn(usize) -> u8, f3: fn(u8, u8) -> &u8) {\n }\n \"#, true),\n         @r###\"\n-    55..59 'self': &Self\n-    109..111 'f1': fn()\n-    119..121 'f2': fn(usize) -> u8\n-    140..142 'f3': fn(u8, u8) -> &u8\n-    163..211 '{     ...t(); }': ()\n-    169..171 'f1': fn()\n-    169..178 'f1.test()': bool\n-    184..186 'f2': fn(usize) -> u8\n-    184..193 'f2.test()': bool\n-    199..201 'f3': fn(u8, u8) -> &u8\n-    199..208 'f3.test()': bool\n+    54..58 'self': &Self\n+    108..110 'f1': fn()\n+    118..120 'f2': fn(usize) -> u8\n+    139..141 'f3': fn(u8, u8) -> &u8\n+    162..210 '{     ...t(); }': ()\n+    168..170 'f1': fn()\n+    168..177 'f1.test()': bool\n+    183..185 'f2': fn(usize) -> u8\n+    183..192 'f2.test()': bool\n+    198..200 'f3': fn(u8, u8) -> &u8\n+    198..207 'f3.test()': bool\n     \"###\n     );\n }\n@@ -2824,22 +2824,22 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n-    57..61 'self': &Self\n-    114..229 '{     ...ized }': ()\n-    120..123 '1u8': u8\n-    120..130 '1u8.test()': bool\n-    136..151 '(*\"foo\").test()': {unknown}\n-    137..143 '*\"foo\"': str\n-    138..143 '\"foo\"': &str\n-    170..180 '(1u8, 1u8)': (u8, u8)\n-    170..187 '(1u8, ...test()': bool\n-    171..174 '1u8': u8\n-    176..179 '1u8': u8\n-    193..206 '(1u8, *\"foo\")': (u8, str)\n-    193..213 '(1u8, ...test()': {unknown}\n-    194..197 '1u8': u8\n-    199..205 '*\"foo\"': str\n-    200..205 '\"foo\"': &str\n+    56..60 'self': &Self\n+    113..228 '{     ...ized }': ()\n+    119..122 '1u8': u8\n+    119..129 '1u8.test()': bool\n+    135..150 '(*\"foo\").test()': {unknown}\n+    136..142 '*\"foo\"': str\n+    137..142 '\"foo\"': &str\n+    169..179 '(1u8, 1u8)': (u8, u8)\n+    169..186 '(1u8, ...test()': bool\n+    170..173 '1u8': u8\n+    175..178 '1u8': u8\n+    192..205 '(1u8, *\"foo\")': (u8, str)\n+    192..212 '(1u8, ...test()': {unknown}\n+    193..196 '1u8': u8\n+    198..204 '*\"foo\"': str\n+    199..204 '\"foo\"': &str\n     \"###\n     );\n }\n@@ -2909,17 +2909,17 @@ fn infer_closure_arg() {\n         \"#\n         ),\n         @r###\"\n-    137..259 '{     ...     }': ()\n-    159..160 's': Option<i32>\n-    163..175 'Option::None': Option<i32>\n-    197..198 'f': |Option<i32>| -> ()\n-    201..220 '|x: Op...2>| {}': |Option<i32>| -> ()\n-    202..203 'x': Option<i32>\n-    218..220 '{}': ()\n-    238..245 '(&f)(s)': ()\n-    239..241 '&f': &|Option<i32>| -> ()\n-    240..241 'f': |Option<i32>| -> ()\n-    243..244 's': Option<i32>\n+    52..126 '{     ...)(s) }': ()\n+    62..63 's': Option<i32>\n+    66..78 'Option::None': Option<i32>\n+    88..89 'f': |Option<i32>| -> ()\n+    92..111 '|x: Op...2>| {}': |Option<i32>| -> ()\n+    93..94 'x': Option<i32>\n+    109..111 '{}': ()\n+    117..124 '(&f)(s)': ()\n+    118..120 '&f': &|Option<i32>| -> ()\n+    119..120 'f': |Option<i32>| -> ()\n+    122..123 's': Option<i32>\n     \"###\n     );\n }\n@@ -2958,17 +2958,17 @@ fn infer_fn_trait_arg() {\n         \"#\n         ),\n         @r###\"\n-    183..187 'self': &Self\n-    189..193 'args': Args\n-    350..354 'self': &Self\n-    356..360 'args': Args\n-    515..516 'f': F\n-    597..663 '{     ...     }': T\n-    619..620 's': Option<i32>\n-    623..627 'None': Option<i32>\n-    645..646 'f': F\n-    645..649 'f(s)': T\n-    647..648 's': Option<i32>\n+    101..105 'self': &Self\n+    107..111 'args': Args\n+    220..224 'self': &Self\n+    226..230 'args': Args\n+    313..314 'f': F\n+    359..389 '{     ...f(s) }': T\n+    369..370 's': Option<i32>\n+    373..377 'None': Option<i32>\n+    383..384 'f': F\n+    383..387 'f(s)': T\n+    385..386 's': Option<i32>\n     \"###\n     );\n }\n@@ -3020,26 +3020,26 @@ fn infer_box_fn_arg() {\n         \"#\n         ),\n         @r###\"\n-    182..186 'self': Self\n-    188..192 'args': Args\n-    356..360 'self': &Self\n-    622..626 'self': &Box<T>\n-    634..685 '{     ...     }': &T\n-    656..667 '&self.inner': &*mut T\n-    657..661 'self': &Box<T>\n-    657..667 'self.inner': *mut T\n-    812..957 '{     ...     }': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, (&Option<i32>,)>\n-    834..835 's': Option<i32>\n-    838..850 'Option::None': Option<i32>\n-    872..873 'f': Box<dyn FnOnce<(&Option<i32>,)>>\n-    907..920 'box (|ps| {})': Box<|{unknown}| -> ()>\n-    912..919 '|ps| {}': |{unknown}| -> ()\n-    913..915 'ps': {unknown}\n-    917..919 '{}': ()\n-    938..939 'f': Box<dyn FnOnce<(&Option<i32>,)>>\n-    938..943 'f(&s)': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, (&Option<i32>,)>\n-    940..942 '&s': &Option<i32>\n-    941..942 's': Option<i32>\n+    100..104 'self': Self\n+    106..110 'args': Args\n+    214..218 'self': &Self\n+    384..388 'self': &Box<T>\n+    396..423 '{     ...     }': &T\n+    406..417 '&self.inner': &*mut T\n+    407..411 'self': &Box<T>\n+    407..417 'self.inner': *mut T\n+    478..575 '{     ...(&s) }': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, (&Option<i32>,)>\n+    488..489 's': Option<i32>\n+    492..504 'Option::None': Option<i32>\n+    514..515 'f': Box<dyn FnOnce<(&Option<i32>,)>>\n+    549..562 'box (|ps| {})': Box<|{unknown}| -> ()>\n+    554..561 '|ps| {}': |{unknown}| -> ()\n+    555..557 'ps': {unknown}\n+    559..561 '{}': ()\n+    568..569 'f': Box<dyn FnOnce<(&Option<i32>,)>>\n+    568..573 'f(&s)': FnOnce::Output<dyn FnOnce<(&Option<i32>,)>, (&Option<i32>,)>\n+    570..572 '&s': &Option<i32>\n+    571..572 's': Option<i32>\n     \"###\n     );\n }\n@@ -3090,24 +3090,24 @@ fn infer_dyn_fn_output() {\n         \"#\n         ),\n         @r###\"\n-    182..186 'self': Self\n-    188..192 'args': Args\n-    349..353 'self': &Self\n-    355..359 'args': Args\n-    523..527 'self': &Self\n-    789..793 'self': &Box<T>\n-    801..852 '{     ...     }': &T\n-    823..834 '&self.inner': &*mut T\n-    824..828 'self': &Box<T>\n-    824..834 'self.inner': *mut T\n-    889..990 '{     ...     }': ()\n-    911..912 'f': Box<dyn Fn<(), Output = i32>>\n-    937..946 'box(|| 5)': Box<|| -> i32>\n-    941..945 '|| 5': || -> i32\n-    944..945 '5': i32\n-    968..969 'x': FnOnce::Output<dyn Fn<(), Output = i32>, ()>\n-    972..973 'f': Box<dyn Fn<(), Output = i32>>\n-    972..975 'f()': FnOnce::Output<dyn Fn<(), Output = i32>, ()>\n+    100..104 'self': Self\n+    106..110 'args': Args\n+    219..223 'self': &Self\n+    225..229 'args': Args\n+    333..337 'self': &Self\n+    503..507 'self': &Box<T>\n+    515..542 '{     ...     }': &T\n+    525..536 '&self.inner': &*mut T\n+    526..530 'self': &Box<T>\n+    526..536 'self.inner': *mut T\n+    555..620 '{     ...f(); }': ()\n+    565..566 'f': Box<dyn Fn<(), Output = i32>>\n+    591..600 'box(|| 5)': Box<|| -> i32>\n+    595..599 '|| 5': || -> i32\n+    598..599 '5': i32\n+    610..611 'x': FnOnce::Output<dyn Fn<(), Output = i32>, ()>\n+    614..615 'f': Box<dyn Fn<(), Output = i32>>\n+    614..617 'f()': FnOnce::Output<dyn Fn<(), Output = i32>, ()>\n     \"###\n     );\n }"}]}