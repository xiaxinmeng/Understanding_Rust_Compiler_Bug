{"sha": "38485a9e3445b1e926da293448fd056ca78cf156", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NDg1YTllMzQ0NWIxZTkyNmRhMjkzNDQ4ZmQwNTZjYTc4Y2YxNTY=", "commit": {"author": {"name": "Andrey Cherkashin", "email": "andoriyu@gmail.com", "date": "2021-04-25T21:29:24Z"}, "committer": {"name": "Andrey Cherkashin", "email": "andoriyu@gmail.com", "date": "2021-04-25T22:51:50Z"}, "message": "feat(libtest): Add JUnit formatter", "tree": {"sha": "2d2901bacc3e21300d3be1dcc5445836b8ce8d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d2901bacc3e21300d3be1dcc5445836b8ce8d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38485a9e3445b1e926da293448fd056ca78cf156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38485a9e3445b1e926da293448fd056ca78cf156", "html_url": "https://github.com/rust-lang/rust/commit/38485a9e3445b1e926da293448fd056ca78cf156", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38485a9e3445b1e926da293448fd056ca78cf156/comments", "author": {"login": "andoriyu", "id": 148123, "node_id": "MDQ6VXNlcjE0ODEyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/148123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andoriyu", "html_url": "https://github.com/andoriyu", "followers_url": "https://api.github.com/users/andoriyu/followers", "following_url": "https://api.github.com/users/andoriyu/following{/other_user}", "gists_url": "https://api.github.com/users/andoriyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/andoriyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andoriyu/subscriptions", "organizations_url": "https://api.github.com/users/andoriyu/orgs", "repos_url": "https://api.github.com/users/andoriyu/repos", "events_url": "https://api.github.com/users/andoriyu/events{/privacy}", "received_events_url": "https://api.github.com/users/andoriyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andoriyu", "id": 148123, "node_id": "MDQ6VXNlcjE0ODEyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/148123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andoriyu", "html_url": "https://github.com/andoriyu", "followers_url": "https://api.github.com/users/andoriyu/followers", "following_url": "https://api.github.com/users/andoriyu/following{/other_user}", "gists_url": "https://api.github.com/users/andoriyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/andoriyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andoriyu/subscriptions", "organizations_url": "https://api.github.com/users/andoriyu/orgs", "repos_url": "https://api.github.com/users/andoriyu/repos", "events_url": "https://api.github.com/users/andoriyu/events{/privacy}", "received_events_url": "https://api.github.com/users/andoriyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "url": "https://api.github.com/repos/rust-lang/rust/commits/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "html_url": "https://github.com/rust-lang/rust/commit/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83"}], "stats": {"total": 155, "additions": 150, "deletions": 5}, "files": [{"sha": "84874a2d2254ac310bdb11819261a90cd9da6326", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=38485a9e3445b1e926da293448fd056ca78cf156", "patch": "@@ -95,8 +95,9 @@ fn optgroups() -> getopts::Options {\n             \"Configure formatting of output:\n             pretty = Print verbose output;\n             terse  = Display one character per test;\n-            json   = Output a json document\",\n-            \"pretty|terse|json\",\n+            json   = Output a json document;\n+            junit  = Output a JUnit document\",\n+            \"pretty|terse|json|junit\",\n         )\n         .optflag(\"\", \"show-output\", \"Show captured stdout of successful tests\")\n         .optopt(\n@@ -336,10 +337,15 @@ fn get_format(\n             }\n             OutputFormat::Json\n         }\n-\n+        Some(\"junit\") => {\n+            if !allow_unstable {\n+                return Err(\"The \\\"junit\\\" format is only accepted on the nightly compiler\".into());\n+            }\n+            OutputFormat::Junit\n+        }\n         Some(v) => {\n             return Err(format!(\n-                \"argument for --format must be pretty, terse, or json (was \\\n+                \"argument for --format must be pretty, terse, json or junit (was \\\n                  {})\",\n                 v\n             ));"}, {"sha": "9cfc7eaf4bcf459af5f471f963e1fa4b27bfd1ab", "filename": "library/test/src/console.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=38485a9e3445b1e926da293448fd056ca78cf156", "patch": "@@ -10,7 +10,7 @@ use super::{\n     cli::TestOpts,\n     event::{CompletedTest, TestEvent},\n     filter_tests,\n-    formatters::{JsonFormatter, OutputFormatter, PrettyFormatter, TerseFormatter},\n+    formatters::{JsonFormatter, JunitFormatter, OutputFormatter, PrettyFormatter, TerseFormatter},\n     helpers::{concurrency::get_concurrency, metrics::MetricMap},\n     options::{Options, OutputFormat},\n     run_tests,\n@@ -277,6 +277,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n             Box::new(TerseFormatter::new(output, opts.use_color(), max_name_len, is_multithreaded))\n         }\n         OutputFormat::Json => Box::new(JsonFormatter::new(output)),\n+        OutputFormat::Junit => Box::new(JunitFormatter::new(output)),\n     };\n     let mut st = ConsoleTestState::new(opts)?;\n "}, {"sha": "1d3c4ab604c3b87bfaacc7ca153827073b3aae6f", "filename": "library/test/src/formatters/junit.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=38485a9e3445b1e926da293448fd056ca78cf156", "patch": "@@ -0,0 +1,134 @@\n+use std::io::{self, prelude::Write};\n+use std::time::Duration;\n+\n+use super::OutputFormatter;\n+use crate::{\n+    console::{ConsoleTestState, OutputLocation},\n+    test_result::TestResult,\n+    time,\n+    types::TestDesc,\n+};\n+\n+pub struct JunitFormatter<T> {\n+    out: OutputLocation<T>,\n+    results: Vec<(TestDesc, TestResult, Duration)>,\n+}\n+\n+impl<T: Write> JunitFormatter<T> {\n+    pub fn new(out: OutputLocation<T>) -> Self {\n+        Self { out, results: Vec::new() }\n+    }\n+\n+    fn write_message(&mut self, s: &str) -> io::Result<()> {\n+        assert!(!s.contains('\\n'));\n+\n+        self.out.write_all(s.as_ref())\n+    }\n+}\n+\n+impl<T: Write> OutputFormatter for JunitFormatter<T> {\n+    fn write_run_start(&mut self, _test_count: usize) -> io::Result<()> {\n+        // We write xml header on run start\n+        self.write_message(&\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\")\n+    }\n+\n+    fn write_test_start(&mut self, _desc: &TestDesc) -> io::Result<()> {\n+        // We do not output anything on test start.\n+        Ok(())\n+    }\n+\n+    fn write_timeout(&mut self, _desc: &TestDesc) -> io::Result<()> {\n+        // We do not output anything on test timeout.\n+        Ok(())\n+    }\n+\n+    fn write_result(\n+        &mut self,\n+        desc: &TestDesc,\n+        result: &TestResult,\n+        exec_time: Option<&time::TestExecTime>,\n+        _stdout: &[u8],\n+        _state: &ConsoleTestState,\n+    ) -> io::Result<()> {\n+        // Because testsuit node holds some of the information as attributes, we can't write it\n+        // until all of the tests has ran. Instead of writting every result as they come in, we add\n+        // them to a Vec and write them all at once when run is complete.\n+        let duration = exec_time.map(|t| t.0.clone()).unwrap_or_default();\n+        self.results.push((desc.clone(), result.clone(), duration));\n+        Ok(())\n+    }\n+    fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n+        self.write_message(\"<testsuites>\")?;\n+\n+        self.write_message(&*format!(\n+            \"<testsuite name=\\\"test\\\" package=\\\"test\\\" id=\\\"0\\\" \\\n+             errors=\\\"0\\\" \\\n+             failures=\\\"{}\\\" \\\n+             tests=\\\"{}\\\" \\\n+             skipped=\\\"{}\\\" \\\n+             >\",\n+            state.failed, state.total, state.ignored\n+        ))?;\n+        for (desc, result, duration) in std::mem::replace(&mut self.results, Vec::new()) {\n+            match result {\n+                TestResult::TrIgnored => { /* no-op */ }\n+                TestResult::TrFailed => {\n+                    self.write_message(&*format!(\n+                        \"<testcase classname=\\\"test.global\\\" \\\n+                         name=\\\"{}\\\" time=\\\"{}\\\">\",\n+                        desc.name.as_slice(),\n+                        duration.as_secs()\n+                    ))?;\n+                    self.write_message(\"<failure type=\\\"assert\\\"/>\")?;\n+                    self.write_message(\"</testcase>\")?;\n+                }\n+\n+                TestResult::TrFailedMsg(ref m) => {\n+                    self.write_message(&*format!(\n+                        \"<testcase classname=\\\"test.global\\\" \\\n+                         name=\\\"{}\\\" time=\\\"{}\\\">\",\n+                        desc.name.as_slice(),\n+                        duration.as_secs()\n+                    ))?;\n+                    self.write_message(&*format!(\"<failure message=\\\"{}\\\" type=\\\"assert\\\"/>\", m))?;\n+                    self.write_message(\"</testcase>\")?;\n+                }\n+\n+                TestResult::TrTimedFail => {\n+                    self.write_message(&*format!(\n+                        \"<testcase classname=\\\"test.global\\\" \\\n+                         name=\\\"{}\\\" time=\\\"{}\\\">\",\n+                        desc.name.as_slice(),\n+                        duration.as_secs()\n+                    ))?;\n+                    self.write_message(\"<failure type=\\\"timeout\\\"/>\")?;\n+                    self.write_message(\"</testcase>\")?;\n+                }\n+\n+                TestResult::TrBench(ref b) => {\n+                    self.write_message(&*format!(\n+                        \"<testcase classname=\\\"benchmark.global\\\" \\\n+                         name=\\\"{}\\\" time=\\\"{}\\\" />\",\n+                        desc.name.as_slice(),\n+                        b.ns_iter_summ.sum\n+                    ))?;\n+                }\n+\n+                TestResult::TrOk | TestResult::TrAllowedFail => {\n+                    self.write_message(&*format!(\n+                        \"<testcase classname=\\\"test.global\\\" \\\n+                         name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n+                        desc.name.as_slice(),\n+                        duration.as_secs()\n+                    ))?;\n+                }\n+            }\n+        }\n+        self.write_message(\"<system-out/>\")?;\n+        self.write_message(\"<system-err/>\")?;\n+        self.write_message(\"</testsuite>\")?;\n+        self.write_message(\"</testsuites>\")?;\n+\n+        Ok(state.failed == 0)\n+    }\n+}"}, {"sha": "2e03581b3af3a2112f99288a14400350e115b9b8", "filename": "library/test/src/formatters/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs?ref=38485a9e3445b1e926da293448fd056ca78cf156", "patch": "@@ -8,10 +8,12 @@ use crate::{\n };\n \n mod json;\n+mod junit;\n mod pretty;\n mod terse;\n \n pub(crate) use self::json::JsonFormatter;\n+pub(crate) use self::junit::JunitFormatter;\n pub(crate) use self::pretty::PrettyFormatter;\n pub(crate) use self::terse::TerseFormatter;\n "}, {"sha": "baf36b5f1d85edf2fb330872946e4cfcada4db70", "filename": "library/test/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38485a9e3445b1e926da293448fd056ca78cf156/library%2Ftest%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Foptions.rs?ref=38485a9e3445b1e926da293448fd056ca78cf156", "patch": "@@ -39,6 +39,8 @@ pub enum OutputFormat {\n     Terse,\n     /// JSON output\n     Json,\n+    /// JUnit output\n+    Junit,\n }\n \n /// Whether ignored test should be run or not"}]}