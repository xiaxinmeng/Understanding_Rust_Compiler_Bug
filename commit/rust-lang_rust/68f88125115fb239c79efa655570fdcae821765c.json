{"sha": "68f88125115fb239c79efa655570fdcae821765c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4Zjg4MTI1MTE1ZmIyMzljNzllZmE2NTU1NzBmZGNhZTgyMTc2NWM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-23T14:44:52Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-23T14:44:52Z"}, "message": "Guard against infinitely expanding generic/inline functions\n\nCloses #2220\n\nTest case disabled until a memory-leak issue is resolved.", "tree": {"sha": "de7353eb90a70fd7de2ff1e9aa4b40957ef03981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7353eb90a70fd7de2ff1e9aa4b40957ef03981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68f88125115fb239c79efa655570fdcae821765c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68f88125115fb239c79efa655570fdcae821765c", "html_url": "https://github.com/rust-lang/rust/commit/68f88125115fb239c79efa655570fdcae821765c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68f88125115fb239c79efa655570fdcae821765c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2782cfb783129c1bf271cf31ac51f3a02d55c335", "url": "https://api.github.com/repos/rust-lang/rust/commits/2782cfb783129c1bf271cf31ac51f3a02d55c335", "html_url": "https://github.com/rust-lang/rust/commit/2782cfb783129c1bf271cf31ac51f3a02d55c335"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "39de3a72949273de4d05abfa4f1ec71b32ead484", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/68f88125115fb239c79efa655570fdcae821765c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f88125115fb239c79efa655570fdcae821765c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=68f88125115fb239c79efa655570fdcae821765c", "patch": "@@ -1938,31 +1938,41 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n \n     let map_node = ccx.tcx.items.get(fn_id.node);\n     // Get the path so that we can create a symbol\n-    let (pt, name) = alt map_node {\n+    let (pt, name, span) = alt map_node {\n       ast_map::node_item(i, pt) {\n         alt i.node {\n           ast::item_res(_, _, _, dtor_id, _, _) {\n             item_ty = ty::node_id_to_type(ccx.tcx, dtor_id);\n           }\n           _ {}\n         }\n-        (pt, i.ident)\n+        (pt, i.ident, i.span)\n       }\n-      ast_map::node_variant(v, _, pt) { (pt, v.node.name) }\n-      ast_map::node_method(m, _, pt) { (pt, m.ident) }\n+      ast_map::node_variant(v, enm, pt) { (pt, v.node.name, enm.span) }\n+      ast_map::node_method(m, _, pt) { (pt, m.ident, m.span) }\n       ast_map::node_native_item(i, ast::native_abi_rust_intrinsic, pt)\n-      { (pt, i.ident) }\n+      { (pt, i.ident, i.span) }\n       ast_map::node_native_item(_, abi, _) {\n         // Natives don't have to be monomorphized.\n         ret {val: get_item_val(ccx, fn_id.node),\n              must_cast: true};\n       }\n-      ast_map::node_ctor(nm, _, _, pt) { (pt, nm) }\n+      ast_map::node_ctor(nm, _, _, pt) { (pt, nm, ast_util::dummy_sp()) }\n       _ { fail \"unexpected node type\"; }\n     };\n     let mono_ty = ty::subst_tps(ccx.tcx, substs, item_ty);\n     let llfty = type_of_fn_from_ty(ccx, mono_ty);\n \n+    let depth = option::get_or_default(ccx.monomorphizing.find(fn_id), 0u);\n+    // Random cut-off -- code that needs to instantiate the same function\n+    // recursively more than ten times can probably safely be assumed to be\n+    // causing an infinite expansion.\n+    if depth > 10u {\n+        ccx.sess.span_fatal(\n+            span, \"overly deep expansion of inlined function\");\n+    }\n+    ccx.monomorphizing.insert(fn_id, depth + 1u);\n+\n     let pt = *pt + [path_name(ccx.names(name))];\n     let s = mangle_exported_name(ccx, pt, mono_ty);\n     let lldecl = decl_internal_cdecl_fn(ccx.llmod, s, llfty);\n@@ -2014,6 +2024,7 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n         }\n       }\n     }\n+    ccx.monomorphizing.insert(fn_id, depth);\n     {val: lldecl, must_cast: must_cast}\n }\n \n@@ -5022,6 +5033,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           tydescs: ty::new_ty_hash(),\n           external: util::common::new_def_hash(),\n           monomorphized: map::hashmap(hash_mono_id, {|a, b| a == b}),\n+          monomorphizing: ast_util::new_def_id_hash(),\n           type_use_cache: util::common::new_def_hash(),\n           vtables: map::hashmap(hash_mono_id, {|a, b| a == b}),\n           const_cstr_cache: map::str_hash(),"}, {"sha": "1f69efe0ccd1f600ed1cab3c7f449119894d35d4", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68f88125115fb239c79efa655570fdcae821765c/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f88125115fb239c79efa655570fdcae821765c/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=68f88125115fb239c79efa655570fdcae821765c", "patch": "@@ -95,6 +95,7 @@ type crate_ctxt = {\n      external: hashmap<ast::def_id, option<ast::node_id>>,\n      // Cache instances of monomorphized functions\n      monomorphized: hashmap<mono_id, ValueRef>,\n+     monomorphizing: hashmap<ast::def_id, uint>,\n      // Cache computed type parameter uses (see type_use.rs)\n      type_use_cache: hashmap<ast::def_id, [type_use::type_uses]>,\n      // Cache generated vtables"}, {"sha": "5bf485ba5353ad465cdbbebe9e802c25817c641f", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/68f88125115fb239c79efa655570fdcae821765c/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f88125115fb239c79efa655570fdcae821765c/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=68f88125115fb239c79efa655570fdcae821765c", "patch": "@@ -0,0 +1,30 @@\n+// error-pattern: overly deep expansion\n+// issue 2258\n+// This is currently exposing a memory leak, and xfailed for that reason\n+// xfail-test\n+\n+iface to_opt {\n+    fn to_option() -> option<self>;\n+}\n+\n+impl of to_opt for uint {\n+    fn to_option() -> option<uint> {\n+        some(self)\n+    }\n+}\n+\n+impl<T:copy> of to_opt for option<T> {\n+    fn to_option() -> option<option<T>> {\n+        some(self)\n+    }\n+}\n+\n+fn function<T:to_opt>(counter: uint, t: T) {\n+    if counter > 0u {\n+        function(counter - 1u, t.to_option());\n+    }\n+}\n+\n+fn main() {\n+    function(22u, 22u);\n+}"}]}