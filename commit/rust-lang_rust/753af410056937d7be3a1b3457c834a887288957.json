{"sha": "753af410056937d7be3a1b3457c834a887288957", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1M2FmNDEwMDU2OTM3ZDdiZTNhMWIzNDU3YzgzNGE4ODcyODg5NTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-31T13:48:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-31T13:48:07Z"}, "message": "Merge #5920\n\n5920: Reduce path_from_text usage\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1e1420034351cee24f789d9398ec029b7a506f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e1420034351cee24f789d9398ec029b7a506f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753af410056937d7be3a1b3457c834a887288957", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTP+XCRBK7hj4Ov3rIwAAdHIIAKPckF4nyvS7uHEMGEvZKPs4\nNBFFFnIa27W3BQQ1zISJGYqctuSDwwLiVhdny8VVJZr35D/UKe00ksq6QLnb0cmA\nnDzEvpc875fqRBzggvc6zmbhVDMfUH3R2UuLfIJJe+kr7u8hdnoXVNtQFbnBIfMJ\nOj6O0kIiWBCAJqTt2VRfIIn5k7RD5/bxiZo/eEsjtn/DF4riYLsXMj/C0SXawa+Y\nCr867Eq12M7YIrdPFeWyiLjyCafQeevdZUK0T5Z9NcdR3qV+A0lZ54pVH8sDGeCb\nNMd8a34axmnIMTSRDGVjLidsdTGnSiBklltXgk8BtPHWimplPhBgI4xJE+N2wE4=\n=PFu5\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e1420034351cee24f789d9398ec029b7a506f33\nparent ac4b134c6be27642dbe915f32a41f9a21bd0c1c9\nparent b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598881687 +0000\ncommitter GitHub <noreply@github.com> 1598881687 +0000\n\nMerge #5920\n\n5920: Reduce path_from_text usage\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753af410056937d7be3a1b3457c834a887288957", "html_url": "https://github.com/rust-lang/rust/commit/753af410056937d7be3a1b3457c834a887288957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753af410056937d7be3a1b3457c834a887288957/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac4b134c6be27642dbe915f32a41f9a21bd0c1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4b134c6be27642dbe915f32a41f9a21bd0c1c9", "html_url": "https://github.com/rust-lang/rust/commit/ac4b134c6be27642dbe915f32a41f9a21bd0c1c9"}, {"sha": "b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3", "html_url": "https://github.com/rust-lang/rust/commit/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "e14ac7f65ed5d128cca6f8220a938043409ebfa3", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/753af410056937d7be3a1b3457c834a887288957/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753af410056937d7be3a1b3457c834a887288957/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=753af410056937d7be3a1b3457c834a887288957", "patch": "@@ -4,7 +4,11 @@ use ide_db::{\n     defs::{classify_name_ref, Definition, NameRefClass},\n     search::SearchScope,\n };\n-use syntax::{algo, ast, AstNode, Direction, SyntaxNode, SyntaxToken, T};\n+use syntax::{\n+    algo,\n+    ast::{self, make},\n+    AstNode, Direction, SyntaxNode, SyntaxToken, T,\n+};\n \n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n@@ -249,16 +253,19 @@ fn replace_ast(\n \n     let new_use_trees: Vec<ast::UseTree> = names_to_import\n         .iter()\n-        .map(|n| ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false))\n+        .map(|n| {\n+            let path = make::path_unqualified(make::path_segment(make::name_ref(&n.to_string())));\n+            make::use_tree(path, None, None, false)\n+        })\n         .collect();\n \n     let use_trees = [&existing_use_trees[..], &new_use_trees[..]].concat();\n \n     match use_trees.as_slice() {\n         [name] => {\n             if let Some(end_path) = name.path() {\n-                let replacement = ast::make::use_tree(\n-                    ast::make::path_from_text(&format!(\"{}::{}\", path, end_path)),\n+                let replacement = make::use_tree(\n+                    make::path_from_text(&format!(\"{}::{}\", path, end_path)),\n                     None,\n                     None,\n                     false,\n@@ -273,15 +280,12 @@ fn replace_ast(\n         }\n         names => {\n             let replacement = match parent {\n-                Either::Left(_) => ast::make::use_tree(\n-                    path,\n-                    Some(ast::make::use_tree_list(names.to_owned())),\n-                    None,\n-                    false,\n-                )\n-                .syntax()\n-                .clone(),\n-                Either::Right(_) => ast::make::use_tree_list(names.to_owned()).syntax().clone(),\n+                Either::Left(_) => {\n+                    make::use_tree(path, Some(make::use_tree_list(names.to_owned())), None, false)\n+                        .syntax()\n+                        .clone()\n+                }\n+                Either::Right(_) => make::use_tree_list(names.to_owned()).syntax().clone(),\n             };\n \n             algo::diff("}, {"sha": "c2c938ad11d11f16928a9b4c11639afce599560e", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/753af410056937d7be3a1b3457c834a887288957/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753af410056937d7be3a1b3457c834a887288957/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=753af410056937d7be3a1b3457c834a887288957", "patch": "@@ -33,6 +33,7 @@ pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {\n     path_from_text(&format!(\"{}::{}\", qual, segment))\n }\n+// FIXME: make this private\n pub fn path_from_text(text: &str) -> ast::Path {\n     ast_from_text(text)\n }\n@@ -144,10 +145,6 @@ fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))\n }\n \n-pub fn try_expr_from_text(text: &str) -> Option<ast::Expr> {\n-    try_ast_from_text(&format!(\"const C: () = {};\", text))\n-}\n-\n pub fn condition(expr: ast::Expr, pattern: Option<ast::Pat>) -> ast::Condition {\n     match pattern {\n         None => ast_from_text(&format!(\"const _: () = while {} {{}};\", expr)),\n@@ -332,16 +329,6 @@ fn ast_from_text<N: AstNode>(text: &str) -> N {\n     node\n }\n \n-fn try_ast_from_text<N: AstNode>(text: &str) -> Option<N> {\n-    let parse = SourceFile::parse(text);\n-    let node = parse.tree().syntax().descendants().find_map(N::cast)?;\n-    let node = node.syntax().clone();\n-    let node = unroot(node);\n-    let node = N::cast(node).unwrap();\n-    assert_eq!(node.syntax().text_range().start(), 0.into());\n-    Some(node)\n-}\n-\n fn unroot(n: SyntaxNode) -> SyntaxNode {\n     SyntaxNode::new_root(n.green().clone())\n }"}]}