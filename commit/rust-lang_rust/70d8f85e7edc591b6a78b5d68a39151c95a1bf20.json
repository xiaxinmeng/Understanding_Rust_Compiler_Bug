{"sha": "70d8f85e7edc591b6a78b5d68a39151c95a1bf20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZDhmODVlN2VkYzU5MWI2YTc4YjVkNjhhMzkxNTFjOTVhMWJmMjA=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-03-21T18:10:10Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-03-21T18:10:10Z"}, "message": "Minor refactoring (walk_ptrs_ty_depth)\n\nReplace `walk_ptrs_ty_depth` with `walk_ptrs_ty` when the depth value is\nignored.", "tree": {"sha": "4a36333c57585201c1947c1157e4bb2001d8e4e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a36333c57585201c1947c1157e4bb2001d8e4e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d8f85e7edc591b6a78b5d68a39151c95a1bf20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d8f85e7edc591b6a78b5d68a39151c95a1bf20", "html_url": "https://github.com/rust-lang/rust/commit/70d8f85e7edc591b6a78b5d68a39151c95a1bf20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d8f85e7edc591b6a78b5d68a39151c95a1bf20/comments", "author": null, "committer": null, "parents": [{"sha": "2d01f42ddef14fc6170fed0334641a475de02bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d01f42ddef14fc6170fed0334641a475de02bee", "html_url": "https://github.com/rust-lang/rust/commit/2d01f42ddef14fc6170fed0334641a475de02bee"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "a9882bdfe0cd3e182883f86cd9ee17fab1938aa2", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70d8f85e7edc591b6a78b5d68a39151c95a1bf20/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d8f85e7edc591b6a78b5d68a39151c95a1bf20/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=70d8f85e7edc591b6a78b5d68a39151c95a1bf20", "patch": "@@ -1034,7 +1034,7 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n }\n \n fn lint_clone_on_ref_ptr(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n-    let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(arg));\n+    let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(arg));\n \n     if let ty::TyAdt(_, subst) = obj_ty.sty {\n         let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n@@ -1063,7 +1063,7 @@ fn lint_string_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n     let arg = &args[1];\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n         let target = &arglists[0][0];\n-        let (self_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(target));\n+        let self_ty = walk_ptrs_ty(cx.tables.expr_ty(target));\n         let ref_str = if self_ty.sty == ty::TyStr {\n             \"\"\n         } else if match_type(cx, self_ty, &paths::STRING) {\n@@ -1089,7 +1089,7 @@ fn lint_string_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n }\n \n fn lint_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n-    let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(&args[0]));\n+    let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&args[0]));\n     if match_type(cx, obj_ty, &paths::STRING) {\n         lint_string_extend(cx, expr, args);\n     }\n@@ -1327,7 +1327,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: Ty) -> Option<sugg::S\n \n /// lint use of `unwrap()` for `Option`s and `Result`s\n fn lint_unwrap(cx: &LateContext, expr: &hir::Expr, unwrap_args: &[hir::Expr]) {\n-    let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(&unwrap_args[0]));\n+    let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&unwrap_args[0]));\n \n     let mess = if match_type(cx, obj_ty, &paths::OPTION) {\n         Some((OPTION_UNWRAP_USED, \"an Option\", \"None\"))"}, {"sha": "248990f4f37bfded22d902b555c2b51316ecb80e", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70d8f85e7edc591b6a78b5d68a39151c95a1bf20/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d8f85e7edc591b6a78b5d68a39151c95a1bf20/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=70d8f85e7edc591b6a78b5d68a39151c95a1bf20", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::{Expr, ExprLit, ExprMethodCall};\n use rustc::lint::*;\n use syntax::ast::LitKind;\n use syntax::codemap::{Span, Spanned};\n-use utils::{match_type, paths, span_lint, walk_ptrs_ty_depth};\n+use utils::{match_type, paths, span_lint, walk_ptrs_ty};\n \n /// **What it does:** Checks for duplicate open options as well as combinations\n /// that make no sense.\n@@ -22,7 +22,6 @@ declare_lint! {\n     \"nonsensical combination of options for opening a file\"\n }\n \n-\n #[derive(Copy, Clone)]\n pub struct NonSensical;\n \n@@ -35,7 +34,7 @@ impl LintPass for NonSensical {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSensical {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprMethodCall(ref path, _, ref arguments) = e.node {\n-            let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(&arguments[0]));\n+            let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&arguments[0]));\n             if path.name == \"open\" && match_type(cx, obj_ty, &paths::OPEN_OPTIONS) {\n                 let mut options = Vec::new();\n                 get_open_options(cx, &arguments[0], &mut options);\n@@ -63,7 +62,7 @@ enum OpenOption {\n \n fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<(OpenOption, Argument)>) {\n     if let ExprMethodCall(ref path, _, ref arguments) = argument.node {\n-        let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(&arguments[0]));\n+        let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&arguments[0]));\n \n         // Only proceed if this is a call on some object of type std::fs::OpenOptions\n         if match_type(cx, obj_ty, &paths::OPEN_OPTIONS) && arguments.len() >= 2 {"}]}