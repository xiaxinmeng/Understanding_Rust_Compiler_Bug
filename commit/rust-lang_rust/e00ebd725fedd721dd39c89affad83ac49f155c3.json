{"sha": "e00ebd725fedd721dd39c89affad83ac49f155c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMGViZDcyNWZlZGQ3MjFkZDM5Yzg5YWZmYWQ4M2FjNDlmMTU1YzM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T21:37:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-19T19:32:35Z"}, "message": "Derive HashStable in librustc.", "tree": {"sha": "a105e8cdb8ccc6026ee956eff4382fffc352f5ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a105e8cdb8ccc6026ee956eff4382fffc352f5ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e00ebd725fedd721dd39c89affad83ac49f155c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e00ebd725fedd721dd39c89affad83ac49f155c3", "html_url": "https://github.com/rust-lang/rust/commit/e00ebd725fedd721dd39c89affad83ac49f155c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e00ebd725fedd721dd39c89affad83ac49f155c3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8", "html_url": "https://github.com/rust-lang/rust/commit/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "541121928c79debb85bcf9094b02dfbde0da53a5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e00ebd725fedd721dd39c89affad83ac49f155c3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00ebd725fedd721dd39c89affad83ac49f155c3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e00ebd725fedd721dd39c89affad83ac49f155c3", "patch": "@@ -2081,21 +2081,15 @@ impl_stable_hash_for!(struct ReprFlags {\n });\n \n /// Represents the repr options provided by the user,\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Default)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable,\n+         Default, HashStable)]\n pub struct ReprOptions {\n     pub int: Option<attr::IntType>,\n     pub align: Option<Align>,\n     pub pack: Option<Align>,\n     pub flags: ReprFlags,\n }\n \n-impl_stable_hash_for!(struct ReprOptions {\n-    align,\n-    pack,\n-    int,\n-    flags\n-});\n-\n impl ReprOptions {\n     pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {\n         let mut flags = ReprFlags::empty();\n@@ -3439,17 +3433,13 @@ pub struct CrateInherentImpls {\n     pub inherent_impls: DefIdMap<Vec<DefId>>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct SymbolName {\n     // FIXME: we don't rely on interning or equality here - better have\n     // this be a `&'tcx str`.\n     pub name: Symbol\n }\n \n-impl_stable_hash_for!(struct self::SymbolName {\n-    name\n-});\n-\n impl SymbolName {\n     pub fn new(name: &str) -> SymbolName {\n         SymbolName {"}, {"sha": "858f9d7e34c6cf4233392b3aa8a62527d68febe5", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e00ebd725fedd721dd39c89affad83ac49f155c3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00ebd725fedd721dd39c89affad83ac49f155c3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e00ebd725fedd721dd39c89affad83ac49f155c3", "patch": "@@ -1379,21 +1379,20 @@ rustc_index::newtype_index! {\n     pub struct BoundVar { .. }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct BoundTy {\n     pub var: BoundVar,\n     pub kind: BoundTyKind,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub enum BoundTyKind {\n     Anon,\n     Param(Symbol),\n }\n \n-impl_stable_hash_for!(struct BoundTy { var, kind });\n-impl_stable_hash_for!(enum self::BoundTyKind { Anon, Param(a) });\n-\n impl From<BoundVar> for BoundTy {\n     fn from(var: BoundVar) -> Self {\n         BoundTy {"}]}