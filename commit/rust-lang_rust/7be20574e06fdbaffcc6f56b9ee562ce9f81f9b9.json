{"sha": "7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZTIwNTc0ZTA2ZmRiYWZmY2M2ZjU2YjllZTU2MmNlOWY4MWY5Yjk=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-10-05T15:09:41Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-10-06T09:23:55Z"}, "message": "rustdoc: Support unboxed fn sugar in bounds", "tree": {"sha": "463de8fb339cd036f23c2d4ed86225c2e5375842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/463de8fb339cd036f23c2d4ed86225c2e5375842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9", "html_url": "https://github.com/rust-lang/rust/commit/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f955c73d635c987ffb6b1d9381ba0ca8f837762", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f955c73d635c987ffb6b1d9381ba0ca8f837762", "html_url": "https://github.com/rust-lang/rust/commit/2f955c73d635c987ffb6b1d9381ba0ca8f837762"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "4bef672ea0df9a861db83d0fcbb00a04e621e455", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9", "patch": "@@ -324,7 +324,7 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n             trait_: associated_trait.clean(cx).map(|bound| {\n                 match bound {\n                     clean::TraitBound(ty) => ty,\n-                    clean::UnboxedFnBound => unimplemented!(),\n+                    clean::UnboxedFnBound(..) |\n                     clean::RegionBound(..) |\n                     clean::UnknownBound => unreachable!(),\n                 }"}, {"sha": "0b37a21cb0b8076590fe74ef3ab763df2e1e3582", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9", "patch": "@@ -474,7 +474,7 @@ impl Clean<TyParam> for ty::TypeParameterDef {\n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n-    UnboxedFnBound, // FIXME\n+    UnboxedFnBound(UnboxedFnType),\n     UnknownBound,\n     TraitBound(Type)\n }\n@@ -483,10 +483,7 @@ impl Clean<TyParamBound> for ast::TyParamBound {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         match *self {\n             ast::RegionTyParamBound(lt) => RegionBound(lt.clean(cx)),\n-            ast::UnboxedFnTyParamBound(_) => {\n-                // FIXME(pcwalton): Wrong.\n-                UnboxedFnBound\n-            },\n+            ast::UnboxedFnTyParamBound(ref ty) => { UnboxedFnBound(ty.clean(cx)) },\n             ast::TraitTyParamBound(ref t) => TraitBound(t.clean(cx)),\n         }\n     }\n@@ -598,6 +595,21 @@ impl Clean<Option<Vec<TyParamBound>>> for subst::Substs {\n     }\n }\n \n+#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+pub struct UnboxedFnType {\n+    pub path: Path,\n+    pub decl: FnDecl\n+}\n+\n+impl Clean<UnboxedFnType> for ast::UnboxedFnBound {\n+    fn clean(&self, cx: &DocContext) -> UnboxedFnType {\n+        UnboxedFnType {\n+            path: self.path.clean(cx),\n+            decl: self.decl.clean(cx)\n+        }\n+    }\n+}\n+\n #[deriving(Clone, Encodable, Decodable, PartialEq)]\n pub struct Lifetime(String);\n "}, {"sha": "9d77b621d4aa03ec4449e15b0a9e6a7adac33a6f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7be20574e06fdbaffcc6f56b9ee562ce9f81f9b9", "patch": "@@ -143,8 +143,8 @@ impl fmt::Show for clean::TyParamBound {\n             clean::RegionBound(ref lt) => {\n                 write!(f, \"{}\", *lt)\n             }\n-            clean::UnboxedFnBound(..) => {\n-                write!(f, \"Fn(???)\") // FIXME\n+            clean::UnboxedFnBound(ref ty) => {\n+                write!(f, \"{}{}\", ty.path, ty.decl)\n             }\n             clean::UnknownBound => {\n                 write!(f, \"'static\")\n@@ -408,7 +408,7 @@ impl fmt::Show for clean::Type {\n                            for bound in decl.bounds.iter() {\n                                 match *bound {\n                                     clean::RegionBound(..) |\n-                                    clean::UnboxedFnBound |\n+                                    clean::UnboxedFnBound(..) |\n                                     clean::UnknownBound => {}\n                                     clean::TraitBound(ref t) => {\n                                         if ret.len() == 0 {"}]}