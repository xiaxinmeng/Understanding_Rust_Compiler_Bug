{"sha": "5a90b66de32bdd5320e5b98ca954059f9e19fec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOTBiNjZkZTMyYmRkNTMyMGU1Yjk4Y2E5NTQwNTlmOWUxOWZlYzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-28T07:43:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T07:43:27Z"}, "message": "Rollup merge of #58581 - varkor:const-generics-encoder-refactor, r=eddyb\n\nRefactor generic parameter encoder functions\n\nAddresses https://github.com/rust-lang/rust/pull/58503#discussion_r257488950.\n\nr? @eddyb", "tree": {"sha": "b969453816cac13bf243989eaee127d539e80012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b969453816cac13bf243989eaee127d539e80012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a90b66de32bdd5320e5b98ca954059f9e19fec6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnHsfCRBK7hj4Ov3rIwAAdHIIALFtyMguy/denX090e8+YfQK\n85PQGZwCoGoilMjSGFq1rOyvYmeeoHhNsQozaC59fgONaEnvg+bru86AwMAREWVm\nZXstgj+MjhiqW0uuVfJLDqEWPWC31gP9MU9r65lrOIOCccIPBzHiMNlJJN5kJ1hN\nQo3sSlJDGQ3CVEUYO6FFSA0Vn9qohlsvsxbXM2KtKuOMixXQjx0IvUNEBI48NWv7\nZGGQw2TKep0nZid4OfkRLX96d6f25sburmL5y1eCrP0aRleycnAAnVG4gIOEWPxE\nut07aaLvAi5x/ZQehsEn872YgDHv3YsfvBQU65AhqgsHSWjx9PvSJNbJopwaGZI=\n=pw87\n-----END PGP SIGNATURE-----\n", "payload": "tree b969453816cac13bf243989eaee127d539e80012\nparent c313647a95fdf9b27980959ea658a1d39f367ecc\nparent 6217ee12824574256ca22e848db9421210e0ceed\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553759007 +0100\ncommitter GitHub <noreply@github.com> 1553759007 +0100\n\nRollup merge of #58581 - varkor:const-generics-encoder-refactor, r=eddyb\n\nRefactor generic parameter encoder functions\n\nAddresses https://github.com/rust-lang/rust/pull/58503#discussion_r257488950.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a90b66de32bdd5320e5b98ca954059f9e19fec6", "html_url": "https://github.com/rust-lang/rust/commit/5a90b66de32bdd5320e5b98ca954059f9e19fec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a90b66de32bdd5320e5b98ca954059f9e19fec6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c313647a95fdf9b27980959ea658a1d39f367ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c313647a95fdf9b27980959ea658a1d39f367ecc", "html_url": "https://github.com/rust-lang/rust/commit/c313647a95fdf9b27980959ea658a1d39f367ecc"}, {"sha": "6217ee12824574256ca22e848db9421210e0ceed", "url": "https://api.github.com/repos/rust-lang/rust/commits/6217ee12824574256ca22e848db9421210e0ceed", "html_url": "https://github.com/rust-lang/rust/commit/6217ee12824574256ca22e848db9421210e0ceed"}], "stats": {"total": 81, "additions": 39, "deletions": 42}, "files": [{"sha": "f456a5c1619c5a06ed6874bd874080af2a5b1adb", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a90b66de32bdd5320e5b98ca954059f9e19fec6/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a90b66de32bdd5320e5b98ca954059f9e19fec6/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5a90b66de32bdd5320e5b98ca954059f9e19fec6", "patch": "@@ -413,6 +413,8 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::ForeignFn(_) => Def::Fn(did),\n             EntryKind::Method(_) => Def::Method(did),\n             EntryKind::Type => Def::TyAlias(did),\n+            EntryKind::TypeParam => Def::TyParam(did),\n+            EntryKind::ConstParam => Def::ConstParam(did),\n             EntryKind::Existential => Def::Existential(did),\n             EntryKind::AssociatedType(_) => Def::AssociatedTy(did),\n             EntryKind::AssociatedExistential(_) => Def::AssociatedExistential(did),"}, {"sha": "f466297481073ada64d8ac36de30c0fc79c2d906", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5a90b66de32bdd5320e5b98ca954059f9e19fec6/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a90b66de32bdd5320e5b98ca954059f9e19fec6/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=5a90b66de32bdd5320e5b98ca954059f9e19fec6", "patch": "@@ -7,6 +7,7 @@ use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc::hir::GenericParamKind;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::middle::dependency_format::Linkage;\n@@ -1352,25 +1353,22 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn encode_info_for_ty_param(&mut self,\n-                                (def_id, Untracked(has_default)): (DefId, Untracked<bool>))\n-                                -> Entry<'tcx> {\n-        debug!(\"IsolatedEncoder::encode_info_for_ty_param({:?})\", def_id);\n+    fn encode_info_for_generic_param(\n+        &mut self,\n+        def_id: DefId,\n+        entry_kind: EntryKind<'tcx>,\n+        encode_type: bool,\n+    ) -> Entry<'tcx> {\n         let tcx = self.tcx;\n         Entry {\n-            kind: EntryKind::Type,\n+            kind: entry_kind,\n             visibility: self.lazy(&ty::Visibility::Public),\n             span: self.lazy(&tcx.def_span(def_id)),\n             attributes: LazySeq::empty(),\n             children: LazySeq::empty(),\n             stability: None,\n             deprecation: None,\n-\n-            ty: if has_default {\n-                Some(self.encode_item_type(def_id))\n-            } else {\n-                None\n-            },\n+            ty: if encode_type { Some(self.encode_item_type(def_id)) } else { None },\n             inherent_impls: LazySeq::empty(),\n             variances: LazySeq::empty(),\n             generics: None,\n@@ -1381,27 +1379,20 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn encode_info_for_const_param(&mut self, def_id: DefId) -> Entry<'tcx> {\n-        debug!(\"IsolatedEncoder::encode_info_for_const_param({:?})\", def_id);\n-        let tcx = self.tcx;\n-        Entry {\n-            kind: EntryKind::Type,\n-            visibility: self.lazy(&ty::Visibility::Public),\n-            span: self.lazy(&tcx.def_span(def_id)),\n-            attributes: LazySeq::empty(),\n-            children: LazySeq::empty(),\n-            stability: None,\n-            deprecation: None,\n-\n-            ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n-            variances: LazySeq::empty(),\n-            generics: None,\n-            predicates: None,\n-            predicates_defined_on: None,\n+    fn encode_info_for_ty_param(\n+        &mut self,\n+        (def_id, Untracked(encode_type)): (DefId, Untracked<bool>),\n+    ) -> Entry<'tcx> {\n+        debug!(\"IsolatedEncoder::encode_info_for_ty_param({:?})\", def_id);\n+        self.encode_info_for_generic_param(def_id, EntryKind::TypeParam, encode_type)\n+    }\n \n-            mir: None,\n-        }\n+    fn encode_info_for_const_param(\n+        &mut self,\n+        def_id: DefId,\n+    ) -> Entry<'tcx> {\n+        debug!(\"IsolatedEncoder::encode_info_for_const_param({:?})\", def_id);\n+        self.encode_info_for_generic_param(def_id, EntryKind::ConstParam, true)\n     }\n \n     fn encode_info_for_closure(&mut self, def_id: DefId) -> Entry<'tcx> {\n@@ -1748,18 +1739,18 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n \n     fn encode_info_for_generics(&mut self, generics: &hir::Generics) {\n         for param in &generics.params {\n+            let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n             match param.kind {\n-                hir::GenericParamKind::Lifetime { .. } => {}\n-                hir::GenericParamKind::Type { ref default, .. } => {\n-                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n-                    let has_default = Untracked(default.is_some());\n-                    let encode_info = IsolatedEncoder::encode_info_for_ty_param;\n-                    self.record(def_id, encode_info, (def_id, has_default));\n+                GenericParamKind::Lifetime { .. } => continue,\n+                GenericParamKind::Type { ref default, .. } => {\n+                    self.record(\n+                        def_id,\n+                        IsolatedEncoder::encode_info_for_ty_param,\n+                        (def_id, Untracked(default.is_some())),\n+                    );\n                 }\n-                hir::GenericParamKind::Const { .. } => {\n-                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n-                    let encode_info = IsolatedEncoder::encode_info_for_const_param;\n-                    self.record(def_id, encode_info, def_id);\n+                GenericParamKind::Const { .. } => {\n+                    self.record(def_id, IsolatedEncoder::encode_info_for_const_param, def_id);\n                 }\n             }\n         }"}, {"sha": "fe2ea26c327410a1edfd376b6796c48eaee89820", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a90b66de32bdd5320e5b98ca954059f9e19fec6/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a90b66de32bdd5320e5b98ca954059f9e19fec6/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=5a90b66de32bdd5320e5b98ca954059f9e19fec6", "patch": "@@ -299,6 +299,8 @@ pub enum EntryKind<'tcx> {\n     ForeignType,\n     GlobalAsm,\n     Type,\n+    TypeParam,\n+    ConstParam,\n     Existential,\n     Enum(ReprOptions),\n     Field,\n@@ -335,7 +337,9 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for EntryKind<'gcx> {\n             EntryKind::ForeignType      |\n             EntryKind::Field |\n             EntryKind::Existential |\n-            EntryKind::Type => {\n+            EntryKind::Type |\n+            EntryKind::TypeParam |\n+            EntryKind::ConstParam => {\n                 // Nothing else to hash here.\n             }\n             EntryKind::Const(qualif, ref const_data) => {"}]}