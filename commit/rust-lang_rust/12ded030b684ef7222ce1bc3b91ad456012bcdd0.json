{"sha": "12ded030b684ef7222ce1bc3b91ad456012bcdd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZGVkMDMwYjY4NGVmNzIyMmNlMWJjM2I5MWFkNDU2MDEyYmNkZDA=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-12T08:03:06Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T09:48:33Z"}, "message": "TyKind", "tree": {"sha": "8a896d112901eb3e48a1ad700e4336c02e3f9916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a896d112901eb3e48a1ad700e4336c02e3f9916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ded030b684ef7222ce1bc3b91ad456012bcdd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ded030b684ef7222ce1bc3b91ad456012bcdd0", "html_url": "https://github.com/rust-lang/rust/commit/12ded030b684ef7222ce1bc3b91ad456012bcdd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ded030b684ef7222ce1bc3b91ad456012bcdd0/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d4102ee786dea507dc42e1c4968b959767abdbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4102ee786dea507dc42e1c4968b959767abdbd", "html_url": "https://github.com/rust-lang/rust/commit/5d4102ee786dea507dc42e1c4968b959767abdbd"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "8a480a0286e34f6468ad752dbc692c35aa6048bf", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx> Functions {\n }\n \n fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<ast::NodeId> {\n-    if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyPtr(_)) = (&arg.pat.node, &ty.node) {\n+    if let (&hir::PatKind::Binding(_, id, _, _), &hir::TyKind::Ptr(_)) = (&arg.pat.node, &ty.node) {\n         Some(id)\n     } else {\n         None"}, {"sha": "7ef477baa652fb93c87efca13b45426239e656e3", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -338,10 +338,10 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n     fn visit_ty(&mut self, ty: &'tcx Ty) {\n         match ty.node {\n-            TyRptr(ref lt, _) if lt.is_elided() => {\n+            TyKind::Rptr(ref lt, _) if lt.is_elided() => {\n                 self.record(&None);\n             },\n-            TyPath(ref path) => {\n+            TyKind::Path(ref path) => {\n                 if let QPath::Resolved(_, ref path) = *path {\n                     if let Def::Existential(def_id) = path.def {\n                         let node_id = self.cx.tcx.hir.as_local_node_id(def_id).unwrap();"}, {"sha": "e2a1ee44f2cbf1057141a060fa35f95cfca50d33", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -2057,7 +2057,7 @@ impl SelfKind {\n                         return true;\n                     }\n                     match ty.node {\n-                        hir::TyRptr(_, ref mt_ty) => {\n+                        hir::TyKind::Rptr(_, ref mt_ty) => {\n                             let mutability_match = if self == SelfKind::Ref {\n                                 mt_ty.mutbl == hir::MutImmutable\n                             } else {\n@@ -2128,8 +2128,8 @@ fn is_as_ref_or_mut_trait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Gener\n fn is_ty(ty: &hir::Ty, self_ty: &hir::Ty) -> bool {\n     match (&ty.node, &self_ty.node) {\n         (\n-            &hir::TyPath(hir::QPath::Resolved(_, ref ty_path)),\n-            &hir::TyPath(hir::QPath::Resolved(_, ref self_ty_path)),\n+            &hir::TyKind::Path(hir::QPath::Resolved(_, ref ty_path)),\n+            &hir::TyKind::Path(hir::QPath::Resolved(_, ref self_ty_path)),\n         ) => ty_path\n             .segments\n             .iter()\n@@ -2140,7 +2140,7 @@ fn is_ty(ty: &hir::Ty, self_ty: &hir::Ty) -> bool {\n }\n \n fn single_segment_ty(ty: &hir::Ty) -> Option<&hir::PathSegment> {\n-    if let hir::TyPath(ref path) = ty.node {\n+    if let hir::TyKind::Path(ref path) = ty.node {\n         single_segment_path(path)\n     } else {\n         None\n@@ -2181,14 +2181,14 @@ impl OutType {\n             (OutType::Unit, &hir::Return(ref ty)) if is_unit(ty) => true,\n             (OutType::Bool, &hir::Return(ref ty)) if is_bool(ty) => true,\n             (OutType::Any, &hir::Return(ref ty)) if !is_unit(ty) => true,\n-            (OutType::Ref, &hir::Return(ref ty)) => matches!(ty.node, hir::TyRptr(_, _)),\n+            (OutType::Ref, &hir::Return(ref ty)) => matches!(ty.node, hir::TyKind::Rptr(_, _)),\n             _ => false,\n         }\n     }\n }\n \n fn is_bool(ty: &hir::Ty) -> bool {\n-    if let hir::TyPath(ref p) = ty.node {\n+    if let hir::TyKind::Path(ref p) = ty.node {\n         match_qpath(p, &[\"bool\"])\n     } else {\n         false"}, {"sha": "64443301dfc47939cc68e6df26548fa09552e33b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -571,7 +571,7 @@ fn non_macro_local(cx: &LateContext, def: &def::Def) -> bool {\n \n fn check_cast(cx: &LateContext, span: Span, e: &Expr, ty: &Ty) {\n     if_chain! {\n-        if let TyPtr(MutTy { mutbl, .. }) = ty.node;\n+        if let TyKind::Ptr(MutTy { mutbl, .. }) = ty.node;\n         if let ExprKind::Lit(ref lit) = e.node;\n         if let LitKind::Int(value, ..) = lit.node;\n         if value == 0;"}, {"sha": "ef08e60c4efe5936fd8413e14d5ec5ce67f62edc", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -87,15 +87,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n     }\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-        if let hir::TyRptr(\n+        if let hir::TyKind::Rptr(\n             _,\n             hir::MutTy {\n                 ty: ref pty,\n                 mutbl: hir::MutMutable,\n             },\n         ) = ty.node\n         {\n-            if let hir::TyRptr(\n+            if let hir::TyKind::Rptr(\n                 _,\n                 hir::MutTy {\n                     mutbl: hir::MutMutable,"}, {"sha": "a4f8f585223f5602898dd3ed9918d2adca6d9dca", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -215,7 +215,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                             if match_type(cx, ty, &paths::VEC);\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_owned()\")]);\n-                            if let TyPath(QPath::Resolved(_, ref path)) = input.node;\n+                            if let TyKind::Path(QPath::Resolved(_, ref path)) = input.node;\n                             if let Some(elem_ty) = path.segments.iter()\n                                 .find(|seg| seg.ident.name == \"Vec\")\n                                 .and_then(|ps| ps.args.as_ref())"}, {"sha": "bc3bc27f5d9ba11dd670855641a0c19a064d3353", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -159,7 +159,7 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n             if match_type(cx, ty, &paths::VEC) {\n                 let mut ty_snippet = None;\n                 if_chain! {\n-                    if let TyPath(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).node;\n+                    if let TyKind::Path(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).node;\n                     if let Some(&PathSegment{args: Some(ref parameters), ..}) = path.segments.last();\n                     then {\n                         let types: Vec<_> = parameters.args.iter().filter_map(|arg| match arg {\n@@ -219,8 +219,8 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                 }\n             } else if match_type(cx, ty, &paths::COW) {\n                 if_chain! {\n-                    if let TyRptr(_, MutTy { ref ty, ..} ) = arg.node;\n-                    if let TyPath(ref path) = ty.node;\n+                    if let TyKind::Rptr(_, MutTy { ref ty, ..} ) = arg.node;\n+                    if let TyKind::Path(ref path) = ty.node;\n                     if let QPath::Resolved(None, ref pp) = *path;\n                     if let [ref bx] = *pp.segments;\n                     if let Some(ref params) = bx.args;\n@@ -273,7 +273,7 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n }\n \n fn get_rptr_lm(ty: &Ty) -> Option<(&Lifetime, Mutability, Span)> {\n-    if let Ty_::TyRptr(ref lt, ref m) = ty.node {\n+    if let TyKind::Rptr(ref lt, ref m) = ty.node {\n         Some((lt, m.mutbl, ty.span))\n     } else {\n         None"}, {"sha": "23971395c2f1180b1d04a0a025044141ee826f03", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -347,16 +347,16 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n \n fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut Vec<(Name, Span)>) {\n     match ty.node {\n-        TySlice(ref sty) => check_ty(cx, sty, bindings),\n-        TyArray(ref fty, ref anon_const) => {\n+        TyKind::Slice(ref sty) => check_ty(cx, sty, bindings),\n+        TyKind::Array(ref fty, ref anon_const) => {\n             check_ty(cx, fty, bindings);\n             check_expr(cx, &cx.tcx.hir.body(anon_const.body).value, bindings);\n         },\n-        TyPtr(MutTy { ty: ref mty, .. }) | TyRptr(_, MutTy { ty: ref mty, .. }) => check_ty(cx, mty, bindings),\n-        TyTup(ref tup) => for t in tup {\n+        TyKind::Ptr(MutTy { ty: ref mty, .. }) | TyKind::Rptr(_, MutTy { ty: ref mty, .. }) => check_ty(cx, mty, bindings),\n+        TyKind::Tup(ref tup) => for t in tup {\n             check_ty(cx, t, bindings)\n         },\n-        TyTypeof(ref anon_const) => check_expr(cx, &cx.tcx.hir.body(anon_const.body).value, bindings),\n+        TyKind::Typeof(ref anon_const) => check_expr(cx, &cx.tcx.hir.body(anon_const.body).value, bindings),\n         _ => (),\n     }\n }"}, {"sha": "55ad4f40e10e703b37c5b25a7950ad96c6cec247", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -90,7 +90,7 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n                             if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, lhs2) {\n                                 let ty = walk_ptrs_ty(cx.tables.expr_ty(lhs1));\n \n-                                if matches!(ty.sty, ty::TySlice(_)) ||\n+                                if matches!(ty.sty, ty::TyKind::Slice(_)) ||\n                                     matches!(ty.sty, ty::TyArray(_, _)) ||\n                                     match_type(cx, ty, &paths::VEC) ||\n                                     match_type(cx, ty, &paths::VEC_DEQUE) {"}, {"sha": "9914ab0e8db3da61afb23721df82dbe3d6bc269e", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -461,7 +461,7 @@ fn get_type_snippet(cx: &LateContext, path: &QPath, to_ref_ty: Ty) -> String {\n             GenericArg::Type(ty) => Some(ty),\n             GenericArg::Lifetime(_) => None,\n         }).nth(1);\n-        if let TyRptr(_, ref to_ty) = to_ty.node;\n+        if let TyKind::Rptr(_, ref to_ty) = to_ty.node;\n         then {\n             return snippet(cx, to_ty.ty.span, &to_ref_ty.to_string()).to_string();\n         }"}, {"sha": "e8ee73520efe22ddce8149b1534eeedffb619341", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());\n                 if size <= self.limit;\n-                if let Ty_::TyRptr(_, MutTy { ty: ref decl_ty, .. }) = input.node;\n+                if let TyKind::Rptr(_, MutTy { ty: ref decl_ty, .. }) = input.node;\n                 then {\n                     let value_type = if is_self(arg) {\n                         \"self\".into()"}, {"sha": "98889aaa33ccb9c8cf9331891c352870e6d754ce", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -186,7 +186,7 @@ fn match_type_parameter(cx: &LateContext, qpath: &QPath, path: &[&str]) -> bool\n             GenericArg::Type(ty) => Some(ty),\n             GenericArg::Lifetime(_) => None,\n         });\n-        if let TyPath(ref qpath) = ty.node;\n+        if let TyKind::Path(ref qpath) = ty.node;\n         if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(ty.id)));\n         if match_def_path(cx.tcx, did, path);\n         then {\n@@ -206,7 +206,7 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n         return;\n     }\n     match ast_ty.node {\n-        TyPath(ref qpath) if !is_local => {\n+        TyKind::Path(ref qpath) if !is_local => {\n             let hir_id = cx.tcx.hir.node_to_hir_id(ast_ty.id);\n             let def = cx.tables.qpath_def(qpath, hir_id);\n             if let Some(def_id) = opt_def_id(def) {\n@@ -282,10 +282,10 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                 },\n             }\n         },\n-        TyRptr(ref lt, ref mut_ty) => check_ty_rptr(cx, ast_ty, is_local, lt, mut_ty),\n+        TyKind::Rptr(ref lt, ref mut_ty) => check_ty_rptr(cx, ast_ty, is_local, lt, mut_ty),\n         // recurse\n-        TySlice(ref ty) | TyArray(ref ty, _) | TyPtr(MutTy { ref ty, .. }) => check_ty(cx, ty, is_local),\n-        TyTup(ref tys) => for ty in tys {\n+        TyKind::Slice(ref ty) | TyKind::Array(ref ty, _) | TyKind::Ptr(MutTy { ref ty, .. }) => check_ty(cx, ty, is_local),\n+        TyKind::Tup(ref tys) => for ty in tys {\n             check_ty(cx, ty, is_local);\n         },\n         _ => {},\n@@ -294,7 +294,7 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n \n fn check_ty_rptr(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool, lt: &Lifetime, mut_ty: &MutTy) {\n     match mut_ty.ty.node {\n-        TyPath(ref qpath) => {\n+        TyKind::Path(ref qpath) => {\n             let hir_id = cx.tcx.hir.node_to_hir_id(mut_ty.ty.id);\n             let def = cx.tables.qpath_def(qpath, hir_id);\n             if_chain! {\n@@ -1214,13 +1214,13 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n         let (add_score, sub_nest) = match ty.node {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n-            TyInfer | TyPtr(..) | TyRptr(..) => (1, 0),\n+            TyKind::Infer | TyKind::Ptr(..) | TyKind::Rptr(..) => (1, 0),\n \n             // the \"normal\" components of a type: named types, arrays/tuples\n-            TyPath(..) | TySlice(..) | TyTup(..) | TyArray(..) => (10 * self.nest, 1),\n+            TyKind::Path(..) | TyKind::Slice(..) | TyKind::Tup(..) | TyKind::Array(..) => (10 * self.nest, 1),\n \n             // function types bring a lot of overhead\n-            TyBareFn(..) => (50 * self.nest, 1),\n+            TyKind::BareFn(..) => (50 * self.nest, 1),\n \n             TyTraitObject(ref param_bounds, _) => {\n                 let has_lifetime_parameters = param_bounds\n@@ -1878,7 +1878,7 @@ enum ImplicitHasherType<'tcx> {\n impl<'tcx> ImplicitHasherType<'tcx> {\n     /// Checks that `ty` is a target type without a BuildHasher.\n     fn new<'a>(cx: &LateContext<'a, 'tcx>, hir_ty: &hir::Ty) -> Option<Self> {\n-        if let TyPath(QPath::Resolved(None, ref path)) = hir_ty.node {\n+        if let TyKind::Path(QPath::Resolved(None, ref path)) = hir_ty.node {\n             let params: Vec<_> = path.segments.last().as_ref()?.args.as_ref()?\n                 .args.iter().filter_map(|arg| match arg {\n                     GenericArg::Type(ty) => Some(ty),\n@@ -1986,7 +1986,7 @@ impl<'a, 'b, 'tcx: 'a + 'b> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'\n         if_chain! {\n             if let ExprKind::Call(ref fun, ref args) = e.node;\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref method)) = fun.node;\n-            if let TyPath(QPath::Resolved(None, ref ty_path)) = ty.node;\n+            if let TyKind::Path(QPath::Resolved(None, ref ty_path)) = ty.node;\n             then {\n                 if !same_tys(self.cx, self.target.ty(), self.body.expr_ty(e)) {\n                     return;"}, {"sha": "1af8fe83e8bde6a533cebb1d4f7f62505d117f49", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n         }\n         if_chain! {\n             if let ItemImpl(.., ref item_type, ref refs) = item.node;\n-            if let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node;\n+            if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.node;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n                 let should_check = if let Some(ref params) = *parameters {"}, {"sha": "a20901b1504b2263d33e5a1949dd517a39e68741", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -283,8 +283,8 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 let qp_label = self.next(\"qp\");\n \n                 println!(\"Cast(ref {}, ref {}) = {};\", cast_pat, cast_ty, current);\n-                if let Ty_::TyPath(ref qp) = ty.node {\n-                    println!(\"    if let Ty_::TyPath(ref {}) = {}.node;\", qp_label, cast_ty);\n+                if let TyKind::Path(ref qp) = ty.node {\n+                    println!(\"    if let TyKind::Path(ref {}) = {}.node;\", qp_label, cast_ty);\n                     self.current = qp_label;\n                     self.print_qpath(qp);\n                 }\n@@ -674,7 +674,7 @@ fn print_path(path: &QPath, first: &mut bool) {\n             print!(\"{:?}\", segment.ident.as_str());\n         },\n         QPath::TypeRelative(ref ty, ref segment) => match ty.node {\n-            hir::Ty_::TyPath(ref inner_path) => {\n+            hir::TyKind::Path(ref inner_path) => {\n                 print_path(inner_path, first);\n                 if *first {\n                     *first = false;"}, {"sha": "4fec24b3489be995a38aedc1dcfe024ed23df48d", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -246,10 +246,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         self.eq_ty_kind(&left.node, &right.node)\n     }\n \n-    pub fn eq_ty_kind(&mut self, left: &Ty_, right: &Ty_) -> bool {\n+    pub fn eq_ty_kind(&mut self, left: &TyKind, right: &TyKind) -> bool {\n         match (left, right) {\n-            (&TySlice(ref l_vec), &TySlice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n-            (&TyArray(ref lt, ref ll_id), &TyArray(ref rt, ref rl_id)) => {\n+            (&TyKind::Slice(ref l_vec), &TyKind::Slice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n+            (&TyKind::Array(ref lt, ref ll_id), &TyKind::Array(ref rt, ref rl_id)) => {\n                 let full_table = self.tables;\n \n                 let mut celcx = constant_context(self.cx, self.cx.tcx.body_tables(ll_id.body));\n@@ -264,13 +264,13 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n                 self.tables = full_table;\n                 eq_ty && ll == rl\n             },\n-            (&TyPtr(ref l_mut), &TyPtr(ref r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty),\n-            (&TyRptr(_, ref l_rmut), &TyRptr(_, ref r_rmut)) => {\n+            (&TyKind::Ptr(ref l_mut), &TyKind::Ptr(ref r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty),\n+            (&TyKind::Rptr(_, ref l_rmut), &TyKind::Rptr(_, ref r_rmut)) => {\n                 l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(&*l_rmut.ty, &*r_rmut.ty)\n             },\n-            (&TyPath(ref l), &TyPath(ref r)) => self.eq_qpath(l, r),\n-            (&TyTup(ref l), &TyTup(ref r)) => over(l, r, |l, r| self.eq_ty(l, r)),\n-            (&TyInfer, &TyInfer) => true,\n+            (&TyKind::Path(ref l), &TyKind::Path(ref r)) => self.eq_qpath(l, r),\n+            (&TyKind::Tup(ref l), &TyKind::Tup(ref r)) => over(l, r, |l, r| self.eq_ty(l, r)),\n+            (&TyKind::Infer, &TyKind::Infer) => true,\n             _ => false,\n         }\n     }"}, {"sha": "10d46d8894e01da8870ab2ad6ac50d86834a7d9a", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -162,15 +162,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n \n \n fn is_lint_ref_type(ty: &Ty) -> bool {\n-    if let TyRptr(\n+    if let TyKind::Rptr(\n         _,\n         MutTy {\n             ty: ref inner,\n             mutbl: MutImmutable,\n         },\n     ) = ty.node\n     {\n-        if let TyPath(ref path) = inner.node {\n+        if let TyKind::Path(ref path) = inner.node {\n             return match_qpath(path, &paths::LINT);\n         }\n     }\n@@ -179,7 +179,7 @@ fn is_lint_ref_type(ty: &Ty) -> bool {\n \n \n fn is_lint_array_type(ty: &Ty) -> bool {\n-    if let TyPath(ref path) = ty.node {\n+    if let TyKind::Path(ref path) = ty.node {\n         match_qpath(path, &paths::LINT_ARRAY)\n     } else {\n         false"}, {"sha": "8a94ae34382ce55977be74909f84034fecd8e17d", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -210,7 +210,7 @@ pub fn match_qpath(path: &QPath, segments: &[&str]) -> bool {\n     match *path {\n         QPath::Resolved(_, ref path) => match_path(path, segments),\n         QPath::TypeRelative(ref ty, ref segment) => match ty.node {\n-            TyPath(ref inner_path) => {\n+            TyKind::Path(ref inner_path) => {\n                 !segments.is_empty() && match_qpath(inner_path, &segments[..(segments.len() - 1)])\n                     && segment.ident.name == segments[segments.len() - 1]\n             },\n@@ -667,7 +667,7 @@ where\n /// Return the base type for HIR references and pointers.\n pub fn walk_ptrs_hir_ty(ty: &hir::Ty) -> &hir::Ty {\n     match ty.node {\n-        TyPtr(ref mut_ty) | TyRptr(_, ref mut_ty) => walk_ptrs_hir_ty(&mut_ty.ty),\n+        TyKind::Ptr(ref mut_ty) | TyKind::Rptr(_, ref mut_ty) => walk_ptrs_hir_ty(&mut_ty.ty),\n         _ => ty,\n     }\n }\n@@ -998,7 +998,7 @@ pub fn is_self(slf: &Arg) -> bool {\n \n pub fn is_self_ty(slf: &hir::Ty) -> bool {\n     if_chain! {\n-        if let TyPath(ref qp) = slf.node;\n+        if let TyKind::Path(ref qp) = slf.node;\n         if let QPath::Resolved(None, ref path) = *qp;\n         if let Def::SelfTy(..) = path.def;\n         then {"}, {"sha": "10b7348b4b5b4973cf5728b519f96f7f0ccbfbc9", "filename": "tests/ui/author.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ded030b684ef7222ce1bc3b91ad456012bcdd0/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/12ded030b684ef7222ce1bc3b91ad456012bcdd0/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=12ded030b684ef7222ce1bc3b91ad456012bcdd0", "patch": "@@ -3,7 +3,7 @@ if_chain! {\n     if let Decl_::DeclLocal(ref local) = decl.node;\n     if let Some(ref init) = local.init\n     if let ExprKind::Cast(ref expr, ref cast_ty) = init.node;\n-    if let Ty_::TyPath(ref qp) = cast_ty.node;\n+    if let TyKind::Path(ref qp) = cast_ty.node;\n     if match_qpath(qp, &[\"char\"]);\n     if let ExprKind::Lit(ref lit) = expr.node;\n     if let LitKind::Int(69, _) = lit.node;"}]}