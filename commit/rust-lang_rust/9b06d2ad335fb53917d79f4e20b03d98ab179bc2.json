{"sha": "9b06d2ad335fb53917d79f4e20b03d98ab179bc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMDZkMmFkMzM1ZmI1MzkxN2Q3OWY0ZTIwYjAzZDk4YWIxNzliYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-15T14:37:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-15T14:37:27Z"}, "message": "Auto merge of #33300 - seanmonstar:map-entry-take, r=alexcrichton\n\nMap::Entry methods to recover key and value together\n\nSee https://github.com/rust-lang/rust/issues/32281#issuecomment-213066344", "tree": {"sha": "b13951db200c5fffdcad393d798789369f3cbdd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b13951db200c5fffdcad393d798789369f3cbdd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b06d2ad335fb53917d79f4e20b03d98ab179bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b06d2ad335fb53917d79f4e20b03d98ab179bc2", "html_url": "https://github.com/rust-lang/rust/commit/9b06d2ad335fb53917d79f4e20b03d98ab179bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b06d2ad335fb53917d79f4e20b03d98ab179bc2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a94881563c18e4ffca2e24aed4bd8f5de583cc91", "url": "https://api.github.com/repos/rust-lang/rust/commits/a94881563c18e4ffca2e24aed4bd8f5de583cc91", "html_url": "https://github.com/rust-lang/rust/commit/a94881563c18e4ffca2e24aed4bd8f5de583cc91"}, {"sha": "217a964027bebd7c1ed95b2e242e69bc810b821a", "url": "https://api.github.com/repos/rust-lang/rust/commits/217a964027bebd7c1ed95b2e242e69bc810b821a", "html_url": "https://github.com/rust-lang/rust/commit/217a964027bebd7c1ed95b2e242e69bc810b821a"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "3b775dc2865eea0b2cb9ba1ea83731592098c600", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b06d2ad335fb53917d79f4e20b03d98ab179bc2/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b06d2ad335fb53917d79f4e20b03d98ab179bc2/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=9b06d2ad335fb53917d79f4e20b03d98ab179bc2", "patch": "@@ -1898,6 +1898,12 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n         &self.key\n     }\n \n+    /// Take ownership of the key.\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    pub fn into_key(self) -> K {\n+        self.key\n+    }\n+\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1950,6 +1956,12 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n         self.handle.reborrow().into_kv().0\n     }\n \n+    /// Take ownership of the key and value from the map.\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    pub fn remove_pair(self) -> (K, V) {\n+        self.remove_kv()\n+    }\n+\n     /// Gets a reference to the value in the entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {"}, {"sha": "536f168e4010843216c6bc07044ae6a57c78e1e4", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b06d2ad335fb53917d79f4e20b03d98ab179bc2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b06d2ad335fb53917d79f4e20b03d98ab179bc2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9b06d2ad335fb53917d79f4e20b03d98ab179bc2", "patch": "@@ -1552,6 +1552,12 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n         self.elem.read().0\n     }\n \n+    /// Take the ownership of the key and value from the map.\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    pub fn remove_pair(self) -> (K, V) {\n+        pop_internal(self.elem)\n+    }\n+\n     /// Gets a reference to the value in the entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {\n@@ -1584,6 +1590,7 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     pub fn remove(self) -> V {\n         pop_internal(self.elem).1\n     }\n+\n     /// Returns a key that was used for search.\n     ///\n     /// The key was retained for further use.\n@@ -1600,6 +1607,12 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n         &self.key\n     }\n \n+    /// Take ownership of the key.\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    pub fn into_key(self) -> K {\n+        self.key\n+    }\n+\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}