{"sha": "20adc7530486e885f4fef33a863cee1b216d6fb1", "node_id": "C_kwDOAAsO6NoAKDIwYWRjNzUzMDQ4NmU4ODVmNGZlZjMzYTg2M2NlZTFiMjE2ZDZmYjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T01:13:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T01:13:09Z"}, "message": "Auto merge of #2562 - pvdrz:miri-num-cpus, r=RalfJung\n\nAdd flag to specify the number of cpus\n\nApparently you can't rename a branch from github's website without it closing all your PRs with that branch. So this is  just #2545", "tree": {"sha": "f104529bb508b4865bef056a60b0ac445f16d7b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f104529bb508b4865bef056a60b0ac445f16d7b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20adc7530486e885f4fef33a863cee1b216d6fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20adc7530486e885f4fef33a863cee1b216d6fb1", "html_url": "https://github.com/rust-lang/rust/commit/20adc7530486e885f4fef33a863cee1b216d6fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20adc7530486e885f4fef33a863cee1b216d6fb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8683f50fb11779bd5d748255f0994627fbe5a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8683f50fb11779bd5d748255f0994627fbe5a71", "html_url": "https://github.com/rust-lang/rust/commit/e8683f50fb11779bd5d748255f0994627fbe5a71"}, {"sha": "9ce9dae57f0fd0874b179857ab151fa768f759a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce9dae57f0fd0874b179857ab151fa768f759a4", "html_url": "https://github.com/rust-lang/rust/commit/9ce9dae57f0fd0874b179857ab151fa768f759a4"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "bb9b002c6899f34312fdfe8591698fe7bbccb943", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=20adc7530486e885f4fef33a863cee1b216d6fb1", "patch": "@@ -293,6 +293,9 @@ environment variable. We first document the most relevant and most commonly used\n   value of forwarded variables stays the same. Has no effect if `-Zmiri-disable-isolation` is set.\n * `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n   remaining threads to exist when the main thread exits.\n+* `-Zmiri-num-cpus` states the number of available CPUs to be reported by miri. By default, the\n+  number of available CPUs is `1`. Note that this flag does not affect how miri handles threads in\n+  any way.\n * `-Zmiri-permissive-provenance` disables the warning for integer-to-pointer casts and\n   [`ptr::from_exposed_addr`](https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html).\n   This will necessarily miss some bugs as those operations are not efficiently and accurately\n@@ -357,7 +360,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n   This is **work in progress**; currently, only integer arguments and return values are\n   supported (and no, pointer/integer casts to work around this limitation will not work;\n   they will fail horribly). It also only works on unix hosts for now.\n-  Follow [the discussion on supporting other types](https://github.com/rust-lang/miri/issues/2365). \n+  Follow [the discussion on supporting other types](https://github.com/rust-lang/miri/issues/2365).\n * `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n    This can be used to find which parts of your program are executing slowly under Miri.\n    The profile is written out to a file with the prefix `<name>`, and can be processed\n@@ -387,7 +390,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n   Borrows \"protectors\". Specifying this argument multiple times does not overwrite the previous\n   values, instead it appends its values to the list. Listing an id multiple times has no effect.\n * `-Zmiri-track-pointer-tag=<tag1>,<tag2>,...` shows a backtrace when a given pointer tag\n-  is created and when (if ever) it is popped from a borrow stack (which is where the tag becomes invalid \n+  is created and when (if ever) it is popped from a borrow stack (which is where the tag becomes invalid\n   and any future use of it will error).  This helps you in finding out why UB is\n   happening and where in your code would be a good place to look for it.\n   Specifying this argument multiple times does not overwrite the previous"}, {"sha": "5b16fc2948cbbb0be35e220a9e835f0785f83419", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=20adc7530486e885f4fef33a863cee1b216d6fb1", "patch": "@@ -550,6 +550,13 @@ fn main() {\n             } else {\n                 show_error!(\"-Zmiri-extern-so-file `{}` does not exist\", filename);\n             }\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-num-cpus=\") {\n+            let num_cpus = match param.parse::<u32>() {\n+                Ok(i) => i,\n+                Err(err) => show_error!(\"-Zmiri-num-cpus requires a `u32`: {}\", err),\n+            };\n+\n+            miri_config.num_cpus = num_cpus;\n         } else {\n             // Forward to rustc.\n             rustc_args.push(arg);"}, {"sha": "b211f3c5f7133f43402ce956994810cae8d954bf", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=20adc7530486e885f4fef33a863cee1b216d6fb1", "patch": "@@ -132,6 +132,8 @@ pub struct MiriConfig {\n     pub external_so_file: Option<PathBuf>,\n     /// Run a garbage collector for SbTags every N basic blocks.\n     pub gc_interval: u32,\n+    /// The number of CPUs to be reported by miri.\n+    pub num_cpus: u32,\n }\n \n impl Default for MiriConfig {\n@@ -164,6 +166,7 @@ impl Default for MiriConfig {\n             retag_fields: false,\n             external_so_file: None,\n             gc_interval: 10_000,\n+            num_cpus: 1,\n         }\n     }\n }"}, {"sha": "bf4e21319b5262250a357528084918dee3c1b389", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=20adc7530486e885f4fef33a863cee1b216d6fb1", "patch": "@@ -104,7 +104,7 @@ pub use crate::helpers::{CurrentSpan, EvalContextExt as HelpersEvalContextExt};\n pub use crate::intptrcast::ProvenanceMode;\n pub use crate::machine::{\n     AllocExtra, FrameData, MiriInterpCx, MiriInterpCxExt, MiriMachine, MiriMemoryKind, Provenance,\n-    ProvenanceExtra, NUM_CPUS, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n+    ProvenanceExtra, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n };\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;"}, {"sha": "03df78c1af715142f64c59d9320af112efd3ef0d", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=20adc7530486e885f4fef33a863cee1b216d6fb1", "patch": "@@ -35,7 +35,6 @@ use crate::{\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture\n pub const STACK_ADDR: u64 = 32 * PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations\n pub const STACK_SIZE: u64 = 16 * PAGE_SIZE; // whatever\n-pub const NUM_CPUS: u64 = 1;\n \n /// Extra data stored with each stack frame\n pub struct FrameData<'tcx> {\n@@ -410,6 +409,8 @@ pub struct MiriMachine<'mir, 'tcx> {\n     pub(crate) gc_interval: u32,\n     /// The number of blocks that passed since the last SbTag GC pass.\n     pub(crate) since_gc: u32,\n+    /// The number of CPUs to be reported by miri.\n+    pub(crate) num_cpus: u32,\n }\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n@@ -489,6 +490,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             }),\n             gc_interval: config.gc_interval,\n             since_gc: 0,\n+            num_cpus: config.num_cpus,\n         }\n     }\n "}, {"sha": "c21e0441cacf4da56c0c8ed093fb135067806d4d", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=20adc7530486e885f4fef33a863cee1b216d6fb1", "patch": "@@ -225,13 +225,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"sysconf\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let name = this.read_scalar(name)?.to_i32()?;\n-\n                 // FIXME: Which of these are POSIX, and which are GNU/Linux?\n                 // At least the names seem to all also exist on macOS.\n                 let sysconfs: &[(&str, fn(&MiriInterpCx<'_, '_>) -> Scalar<Provenance>)] = &[\n                     (\"_SC_PAGESIZE\", |this| Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n-                    (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n-                    (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(this.machine.num_cpus, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(this.machine.num_cpus, this.pointer_size())),\n                     // 512 seems to be a reasonable default. The value is not critical, in\n                     // the sense that getpwuid_r takes and checks the buffer length.\n                     (\"_SC_GETPW_R_SIZE_MAX\", |this| Scalar::from_int(512, this.pointer_size()))"}, {"sha": "c5f0de4307c3a56709c9681af7585fdb427a1d0b", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=20adc7530486e885f4fef33a863cee1b216d6fb1", "patch": "@@ -163,7 +163,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 )?;\n                 // Set number of processors.\n                 let num_cpus = system_info.offset(field_offsets[6], dword_layout, &this.tcx)?;\n-                this.write_scalar(Scalar::from_int(NUM_CPUS, dword_layout.size), &num_cpus.into())?;\n+                this.write_scalar(\n+                    Scalar::from_int(this.machine.num_cpus, dword_layout.size),\n+                    &num_cpus.into(),\n+                )?;\n             }\n \n             // Thread-local storage"}, {"sha": "137fa510249755ee922f3c11323b64f154957ac4", "filename": "src/tools/miri/tests/pass/available-parallelism-miri-num-cpus.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20adc7530486e885f4fef33a863cee1b216d6fb1/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs?ref=20adc7530486e885f4fef33a863cee1b216d6fb1", "patch": "@@ -0,0 +1,8 @@\n+//@compile-flags: -Zmiri-num-cpus=1024\n+\n+use std::num::NonZeroUsize;\n+use std::thread::available_parallelism;\n+\n+fn main() {\n+    assert_eq!(available_parallelism().unwrap(), NonZeroUsize::new(1024).unwrap());\n+}"}]}