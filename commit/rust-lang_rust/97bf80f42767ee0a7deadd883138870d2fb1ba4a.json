{"sha": "97bf80f42767ee0a7deadd883138870d2fb1ba4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YmY4MGY0Mjc2N2VlMGE3ZGVhZGQ4ODMxMzg4NzBkMmZiMWJhNGE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-05-25T23:45:13Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-05-25T23:45:13Z"}, "message": "Fix handling of C arguments\n\nFixes #33868", "tree": {"sha": "b9775ebf4534bc11577aa247709ca285709ca015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9775ebf4534bc11577aa247709ca285709ca015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97bf80f42767ee0a7deadd883138870d2fb1ba4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97bf80f42767ee0a7deadd883138870d2fb1ba4a", "html_url": "https://github.com/rust-lang/rust/commit/97bf80f42767ee0a7deadd883138870d2fb1ba4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97bf80f42767ee0a7deadd883138870d2fb1ba4a/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da66f2fd8cab261911163ece04d5c15a13cf5e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/da66f2fd8cab261911163ece04d5c15a13cf5e58", "html_url": "https://github.com/rust-lang/rust/commit/da66f2fd8cab261911163ece04d5c15a13cf5e58"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "5a9b4e109a5ba9837faf07f518bc800a475b6fcb", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/97bf80f42767ee0a7deadd883138870d2fb1ba4a/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bf80f42767ee0a7deadd883138870d2fb1ba4a/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=97bf80f42767ee0a7deadd883138870d2fb1ba4a", "patch": "@@ -1663,21 +1663,30 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n                                     arg_ty,\n                                     datum::Lvalue::new(\"FunctionContext::bind_args\"))\n                 } else {\n-                    unpack_datum!(bcx, datum::lvalue_scratch_datum(bcx, arg_ty, \"\",\n-                                                                   uninit_reason,\n-                                                                   arg_scope_id, |bcx, dst| {\n-                        debug!(\"FunctionContext::bind_args: {:?}: {:?}\", hir_arg, arg_ty);\n+                    let lltmp = if common::type_is_fat_ptr(bcx.tcx(), arg_ty) {\n+                        let lltemp = alloc_ty(bcx, arg_ty, \"\");\n                         let b = &bcx.build();\n-                        if common::type_is_fat_ptr(bcx.tcx(), arg_ty) {\n-                            let meta = &self.fn_ty.args[idx];\n-                            idx += 1;\n-                            arg.store_fn_arg(b, &mut llarg_idx, expr::get_dataptr(bcx, dst));\n-                            meta.store_fn_arg(b, &mut llarg_idx, expr::get_meta(bcx, dst));\n-                        } else {\n-                            arg.store_fn_arg(b, &mut llarg_idx, dst);\n-                        }\n-                        bcx\n-                    }))\n+                        // we pass fat pointers as two words, but we want to\n+                        // represent them internally as a pointer to two words,\n+                        // so make an alloca to store them in.\n+                        let meta = &self.fn_ty.args[idx];\n+                        idx += 1;\n+                        arg.store_fn_arg(b, &mut llarg_idx, expr::get_dataptr(bcx, lltemp));\n+                        meta.store_fn_arg(b, &mut llarg_idx, expr::get_meta(bcx, lltemp));\n+                        lltemp\n+                    } else  {\n+                        // otherwise, arg is passed by value, so store it into a temporary.\n+                        let llarg_ty = arg.cast.unwrap_or(arg.memory_ty(bcx.ccx()));\n+                        let lltemp = alloca(bcx, llarg_ty, \"\");\n+                        let b = &bcx.build();\n+                        arg.store_fn_arg(b, &mut llarg_idx, lltemp);\n+                        // And coerce the temporary into the type we expect.\n+                        b.pointercast(lltemp, arg.memory_ty(bcx.ccx()).ptr_to())\n+                    };\n+\n+                    // FIXME: hacky lol?\n+                    datum::Datum::new(lltmp, arg_ty,\n+                                      datum::Lvalue::new(\"datum::lvalue_scratch_datum\"))\n                 }\n             } else {\n                 // FIXME(pcwalton): Reduce the amount of code bloat this is responsible for."}, {"sha": "ffc14b4468b5b68506147780bd753bb372238b24", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97bf80f42767ee0a7deadd883138870d2fb1ba4a/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bf80f42767ee0a7deadd883138870d2fb1ba4a/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=97bf80f42767ee0a7deadd883138870d2fb1ba4a", "patch": "@@ -327,23 +327,28 @@ fn arg_value_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n             llarg_idx += 1;\n             llarg\n         } else {\n-            let lltemp = bcx.with_block(|bcx| {\n-                base::alloc_ty(bcx, arg_ty, &format!(\"arg{}\", arg_index))\n-            });\n             if common::type_is_fat_ptr(tcx, arg_ty) {\n+                let lltemp = bcx.with_block(|bcx| {\n+                    base::alloc_ty(bcx, arg_ty, &format!(\"arg{}\", arg_index))\n+                });\n                 // we pass fat pointers as two words, but we want to\n                 // represent them internally as a pointer to two words,\n                 // so make an alloca to store them in.\n                 let meta = &fcx.fn_ty.args[idx];\n                 idx += 1;\n                 arg.store_fn_arg(bcx, &mut llarg_idx, get_dataptr(bcx, lltemp));\n                 meta.store_fn_arg(bcx, &mut llarg_idx, get_meta(bcx, lltemp));\n+                lltemp\n             } else  {\n-                // otherwise, arg is passed by value, so make a\n-                // temporary and store it there\n+                // otherwise, arg is passed by value, so store it into a temporary.\n+                let llarg_ty = arg.cast.unwrap_or(arg.memory_ty(bcx.ccx()));\n+                let lltemp = bcx.with_block(|bcx| {\n+                    base::alloca(bcx, llarg_ty, &format!(\"arg{}\", arg_index))\n+                });\n                 arg.store_fn_arg(bcx, &mut llarg_idx, lltemp);\n+                // And coerce the temporary into the type we expect.\n+                bcx.pointercast(lltemp, arg.memory_ty(bcx.ccx()).ptr_to())\n             }\n-            lltemp\n         };\n         bcx.with_block(|bcx| arg_scope.map(|scope| {\n             // Is this a regular argument?"}]}