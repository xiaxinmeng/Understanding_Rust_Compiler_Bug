{"sha": "32ea6a154f49e64abe21729d48e798ce7a68fa63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZWE2YTE1NGY0OWU2NGFiZTIxNzI5ZDQ4ZTc5OGNlN2E2OGZhNjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-14T08:22:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-14T08:22:40Z"}, "message": "Rollup merge of #71525 - ldm0:intosug, r=Mark-Simulacrum\n\n`prefix` should not be mutable.\n\nChange the process from for loop to find, which makes the `prefix` able to be immutable.", "tree": {"sha": "0bb091343b50cd2e2c4a939d0988c96609bbb72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bb091343b50cd2e2c4a939d0988c96609bbb72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32ea6a154f49e64abe21729d48e798ce7a68fa63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevP/RCRBK7hj4Ov3rIwAAdHIIAEvIHBJ1dd4ii6kcSkwBM1UU\ntub7M2U7QmKVNcRZdnsB3aFvcuTQVSBD0yriEAonI7lZBU6CNzsCNCmyp3ygtpet\nH8oILY9PYT1xqndVsNyKDeQ2ezvsAhuyw5clYOX+6GMYkOsX+oGgCdtAop+5Okz/\n8dR+Y81/OpngZpHdXPlXtIkuiaznhg+ZCalleGYN7KjcT3E7kqWPEYWBLvbblv4T\nOX0aD7KzNrjk4m479hSKzu6WUt8dtTbYFq5WM/V0efsu93totmXL/Rg8uRgpDCtX\nx5+TFve287q6KmzIMoat8IOFfiOlvCRNWOX8XNsmYB3N163oam4xQt3Dp/hbC2w=\n=w/8E\n-----END PGP SIGNATURE-----\n", "payload": "tree 0bb091343b50cd2e2c4a939d0988c96609bbb72f\nparent 23ffeea307c31f0c20ebb5a15d5171e0c414629d\nparent 079817d62481ca8d84ca87dde9a276a1d5d663cf\nauthor Ralf Jung <post@ralfj.de> 1589444560 +0200\ncommitter GitHub <noreply@github.com> 1589444560 +0200\n\nRollup merge of #71525 - ldm0:intosug, r=Mark-Simulacrum\n\n`prefix` should not be mutable.\n\nChange the process from for loop to find, which makes the `prefix` able to be immutable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32ea6a154f49e64abe21729d48e798ce7a68fa63", "html_url": "https://github.com/rust-lang/rust/commit/32ea6a154f49e64abe21729d48e798ce7a68fa63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32ea6a154f49e64abe21729d48e798ce7a68fa63/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ffeea307c31f0c20ebb5a15d5171e0c414629d", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ffeea307c31f0c20ebb5a15d5171e0c414629d", "html_url": "https://github.com/rust-lang/rust/commit/23ffeea307c31f0c20ebb5a15d5171e0c414629d"}, {"sha": "079817d62481ca8d84ca87dde9a276a1d5d663cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/079817d62481ca8d84ca87dde9a276a1d5d663cf", "html_url": "https://github.com/rust-lang/rust/commit/079817d62481ca8d84ca87dde9a276a1d5d663cf"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "6831a995df574d5624f656eb82af3150e8b3e25a", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/32ea6a154f49e64abe21729d48e798ce7a68fa63/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ea6a154f49e64abe21729d48e798ce7a68fa63/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=32ea6a154f49e64abe21729d48e798ce7a68fa63", "patch": "@@ -708,24 +708,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n-        let mut prefix = String::new();\n-        if let Some(hir::Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Struct(_, fields, _), ..\n+        let prefix = if let Some(hir::Node::Expr(hir::Expr {\n+            kind: hir::ExprKind::Struct(_, fields, _),\n+            ..\n         })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n         {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n-            for field in *fields {\n-                if field.expr.hir_id == expr.hir_id && field.is_shorthand {\n-                    // This is a field literal\n-                    prefix = format!(\"{}: \", field.ident);\n-                    break;\n-                }\n-            }\n-            if &prefix == \"\" {\n+            match (*fields)\n+                .iter()\n+                .find(|field| field.expr.hir_id == expr.hir_id && field.is_shorthand)\n+            {\n+                // This is a field literal\n+                Some(field) => format!(\"{}: \", field.ident),\n                 // Likely a field was meant, but this field wasn't found. Do not suggest anything.\n-                return false;\n+                None => return false,\n             }\n-        }\n+        } else {\n+            String::new()\n+        };\n         if let hir::ExprKind::Call(path, args) = &expr.kind {\n             if let (hir::ExprKind::Path(hir::QPath::TypeRelative(base_ty, path_segment)), 1) =\n                 (&path.kind, args.len())\n@@ -817,7 +817,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let suggest_to_change_suffix_or_into =\n                 |err: &mut DiagnosticBuilder<'_>, is_fallible: bool| {\n-                    let into_sugg = into_suggestion.clone();\n                     err.span_suggestion(\n                         expr.span,\n                         if literal_is_ty_suffixed(expr) {\n@@ -832,7 +831,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else if is_fallible {\n                             try_into_suggestion\n                         } else {\n-                            into_sugg\n+                            into_suggestion.clone()\n                         },\n                         Applicability::MachineApplicable,\n                     );"}]}