{"sha": "1e40c80cf527c3b18baaf443f0fc553f35424499", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDBjODBjZjUyN2MzYjE4YmFhZjQ0M2YwZmM1NTNmMzU0MjQ0OTk=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-11-04T01:07:00Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-11-04T01:07:00Z"}, "message": "Fix issues with the Add/AddAssign impls for Cow<str>\n\n* Correct the stability attributes.\n* Make Add and AddAssign actually behave the same.\n* Use String::with_capacity when allocating a new string.\n* Fix the tests.", "tree": {"sha": "e8ce2bbd0496d3c27e4bfe4f5896ff0add4d685c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ce2bbd0496d3c27e4bfe4f5896ff0add4d685c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e40c80cf527c3b18baaf443f0fc553f35424499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e40c80cf527c3b18baaf443f0fc553f35424499", "html_url": "https://github.com/rust-lang/rust/commit/1e40c80cf527c3b18baaf443f0fc553f35424499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e40c80cf527c3b18baaf443f0fc553f35424499/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acfe959701ce221af37516401726be6d2814cc3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/acfe959701ce221af37516401726be6d2814cc3f", "html_url": "https://github.com/rust-lang/rust/commit/acfe959701ce221af37516401726be6d2814cc3f"}], "stats": {"total": 196, "additions": 143, "deletions": 53}, "files": [{"sha": "3bc2a3f8f68b7052f4dcbca7fe466b88810be5b7", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1e40c80cf527c3b18baaf443f0fc553f35424499/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e40c80cf527c3b18baaf443f0fc553f35424499/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=1e40c80cf527c3b18baaf443f0fc553f35424499", "patch": "@@ -17,6 +17,7 @@ use core::hash::{Hash, Hasher};\n use core::ops::{Add, AddAssign, Deref};\n \n use fmt;\n+use string::String;\n \n use self::Cow::*;\n \n@@ -284,48 +285,60 @@ impl<'a, T: ?Sized + ToOwned> AsRef<T> for Cow<'a, T> {\n     }\n }\n \n-#[stable(feature = \"cow_add\", since = \"1.13.0\")]\n+#[stable(feature = \"cow_add\", since = \"1.14.0\")]\n impl<'a> Add<&'a str> for Cow<'a, str> {\n     type Output = Cow<'a, str>;\n \n-    fn add(self, rhs: &'a str) -> Self {\n-        if self == \"\" {\n-            Cow::Borrowed(rhs)\n-        } else if rhs == \"\" {\n-            self\n-        } else {\n-            Cow::Owned(self.into_owned() + rhs)\n-        }\n+    #[inline]\n+    fn add(mut self, rhs: &'a str) -> Self::Output {\n+        self += rhs;\n+        self\n     }\n }\n \n-#[stable(feature = \"cow_add\", since = \"1.13.0\")]\n+#[stable(feature = \"cow_add\", since = \"1.14.0\")]\n impl<'a> Add<Cow<'a, str>> for Cow<'a, str> {\n     type Output = Cow<'a, str>;\n \n-    fn add(self, rhs: Cow<'a, str>) -> Self {\n-        if self == \"\" {\n-            rhs\n-        } else if rhs == \"\" {\n-            self\n-        } else {\n-            Cow::Owned(self.into_owned() + rhs.borrow())\n-        }\n+    #[inline]\n+    fn add(mut self, rhs: Cow<'a, str>) -> Self::Output {\n+        self += rhs;\n+        self\n     }\n }\n \n-#[stable(feature = \"cow_add\", since = \"1.13.0\")]\n+#[stable(feature = \"cow_add\", since = \"1.14.0\")]\n impl<'a> AddAssign<&'a str> for Cow<'a, str> {\n     fn add_assign(&mut self, rhs: &'a str) {\n-        if rhs == \"\" { return; }\n-        self.to_mut().push_str(rhs);\n+        if self.is_empty() {\n+            *self = Cow::Borrowed(rhs)\n+        } else if rhs.is_empty() {\n+            return;\n+        } else {\n+            if let Cow::Borrowed(lhs) = *self {\n+                let mut s = String::with_capacity(lhs.len() + rhs.len());\n+                s.push_str(lhs);\n+                *self = Cow::Owned(s);\n+            }\n+            self.to_mut().push_str(rhs);\n+        }\n     }\n }\n \n-#[stable(feature = \"cow_add\", since = \"1.13.0\")]\n+#[stable(feature = \"cow_add\", since = \"1.14.0\")]\n impl<'a> AddAssign<Cow<'a, str>> for Cow<'a, str> {\n     fn add_assign(&mut self, rhs: Cow<'a, str>) {\n-        if rhs == \"\" { return; }\n-        self.to_mut().push_str(rhs.borrow());\n+        if self.is_empty() {\n+            *self = rhs\n+        } else if rhs.is_empty() {\n+            return;\n+        } else {\n+            if let Cow::Borrowed(lhs) = *self {\n+                let mut s = String::with_capacity(lhs.len() + rhs.len());\n+                s.push_str(lhs);\n+                *self = Cow::Owned(s);\n+            }\n+            self.to_mut().push_str(&rhs);\n+        }\n     }\n }"}, {"sha": "b29245121daadeb52d6c206130090d43e9406008", "filename": "src/libcollectionstest/cow_str.rs", "status": "modified", "additions": 105, "deletions": 29, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/1e40c80cf527c3b18baaf443f0fc553f35424499/src%2Flibcollectionstest%2Fcow_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e40c80cf527c3b18baaf443f0fc553f35424499/src%2Flibcollectionstest%2Fcow_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fcow_str.rs?ref=1e40c80cf527c3b18baaf443f0fc553f35424499", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,54 +12,130 @@ use std::borrow::Cow;\n \n // check that Cow<'a, str> implements addition\n #[test]\n-fn check_cow_add() {\n-    borrowed1 = Cow::Borrowed(\"Hello, \");\n-    borrowed2 = Cow::Borrowed(\"World!\");\n-    borrow_empty = Cow::Borrowed(\"\");\n+fn check_cow_add_cow() {\n+    let borrowed1 = Cow::Borrowed(\"Hello, \");\n+    let borrowed2 = Cow::Borrowed(\"World!\");\n+    let borrow_empty = Cow::Borrowed(\"\");\n \n-    owned1 = Cow::Owned(\"Hi, \".into());\n-    owned2 = Cow::Owned(\"Rustaceans!\".into());\n-    owned_empty = Cow::Owned(\"\".into());\n+    let owned1: Cow<str> = Cow::Owned(String::from(\"Hi, \"));\n+    let owned2: Cow<str> = Cow::Owned(String::from(\"Rustaceans!\"));\n+    let owned_empty: Cow<str> = Cow::Owned(String::new());\n \n-    assert_eq!(\"Hello, World!\", borrowed1 + borrowed2);\n-    assert_eq!(\"Hello, Rustaceans!\", borrowed1 + owned2);\n+    assert_eq!(\"Hello, World!\", borrowed1.clone() + borrowed2.clone());\n+    assert_eq!(\"Hello, Rustaceans!\", borrowed1.clone() + owned2.clone());\n \n-    assert_eq!(\"Hello, World!\", owned1 + borrowed2);\n-    assert_eq!(\"Hello, Rustaceans!\", owned1 + owned2);\n+    assert_eq!(\"Hi, World!\", owned1.clone() + borrowed2.clone());\n+    assert_eq!(\"Hi, Rustaceans!\", owned1.clone() + owned2.clone());\n \n-    if let Cow::Owned(_) = borrowed1 + borrow_empty {\n+    if let Cow::Owned(_) = borrowed1.clone() + borrow_empty.clone() {\n         panic!(\"Adding empty strings to a borrow should note allocate\");\n     }\n-    if let Cow::Owned(_) = borrow_empty + borrowed1 {\n+    if let Cow::Owned(_) = borrow_empty.clone() + borrowed1.clone() {\n         panic!(\"Adding empty strings to a borrow should note allocate\");\n     }\n-    if let Cow::Owned(_) = borrowed1 + owned_empty {\n+    if let Cow::Owned(_) = borrowed1.clone() + owned_empty.clone() {\n         panic!(\"Adding empty strings to a borrow should note allocate\");\n     }\n-    if let Cow::Owned(_) = owned_empty + borrowed1 {\n+    if let Cow::Owned(_) = owned_empty.clone() + borrowed1.clone() {\n         panic!(\"Adding empty strings to a borrow should note allocate\");\n     }\n }\n \n-fn check_cow_add_assign() {\n-    borrowed1 = Cow::Borrowed(\"Hello, \");\n-    borrowed2 = Cow::Borrowed(\"World!\");\n-    borrow_empty = Cow::Borrowed(\"\");\n+#[test]\n+fn check_cow_add_str() {\n+    let borrowed = Cow::Borrowed(\"Hello, \");\n+    let borrow_empty = Cow::Borrowed(\"\");\n+\n+    let owned: Cow<str> = Cow::Owned(String::from(\"Hi, \"));\n+    let owned_empty: Cow<str> = Cow::Owned(String::new());\n \n-    owned1 = Cow::Owned(\"Hi, \".into());\n-    owned2 = Cow::Owned(\"Rustaceans!\".into());\n-    owned_empty = Cow::Owned(\"\".into());\n+    assert_eq!(\"Hello, World!\", borrowed.clone() + \"World!\");\n \n-    let borrowed1clone = borrowed1.clone();\n-    borrowed1clone += borrow_empty;\n-    assert_eq!((&borrowed1clone).as_ptr(), (&borrowed1).as_ptr());\n+    assert_eq!(\"Hi, World!\", owned.clone() + \"World!\");\n \n-    borrowed1clone += owned_empty;\n-    assert_eq!((&borrowed1clone).as_ptr(), (&borrowed1).as_ptr());\n+    if let Cow::Owned(_) = borrowed.clone() + \"\" {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    if let Cow::Owned(_) = borrow_empty.clone() + \"Hello, \" {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    if let Cow::Owned(_) = owned_empty.clone() + \"Hello, \" {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+}\n+\n+#[test]\n+fn check_cow_add_assign_cow() {\n+    let mut borrowed1 = Cow::Borrowed(\"Hello, \");\n+    let borrowed2 = Cow::Borrowed(\"World!\");\n+    let borrow_empty = Cow::Borrowed(\"\");\n+\n+    let mut owned1: Cow<str> = Cow::Owned(String::from(\"Hi, \"));\n+    let owned2: Cow<str> = Cow::Owned(String::from(\"Rustaceans!\"));\n+    let owned_empty: Cow<str> = Cow::Owned(String::new());\n+\n+    let mut s = borrowed1.clone();\n+    s += borrow_empty.clone();\n+    assert_eq!(\"Hello, \", s);\n+    if let Cow::Owned(_) = s {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    let mut s = borrow_empty.clone();\n+    s += borrowed1.clone();\n+    assert_eq!(\"Hello, \", s);\n+    if let Cow::Owned(_) = s {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    let mut s = borrowed1.clone();\n+    s += owned_empty.clone();\n+    assert_eq!(\"Hello, \", s);\n+    if let Cow::Owned(_) = s {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    let mut s = owned_empty.clone();\n+    s += borrowed1.clone();\n+    assert_eq!(\"Hello, \", s);\n+    if let Cow::Owned(_) = s {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n \n     owned1 += borrowed2;\n     borrowed1 += owned2;\n \n-    assert_eq!(\"Hello, World!\", owned1);\n+    assert_eq!(\"Hi, World!\", owned1);\n     assert_eq!(\"Hello, Rustaceans!\", borrowed1);\n }\n+\n+#[test]\n+fn check_cow_add_assign_str() {\n+    let mut borrowed = Cow::Borrowed(\"Hello, \");\n+    let borrow_empty = Cow::Borrowed(\"\");\n+\n+    let mut owned: Cow<str> = Cow::Owned(String::from(\"Hi, \"));\n+    let owned_empty: Cow<str> = Cow::Owned(String::new());\n+\n+    let mut s = borrowed.clone();\n+    s += \"\";\n+    assert_eq!(\"Hello, \", s);\n+    if let Cow::Owned(_) = s {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    let mut s = borrow_empty.clone();\n+    s += \"World!\";\n+    assert_eq!(\"World!\", s);\n+    if let Cow::Owned(_) = s {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+    let mut s = owned_empty.clone();\n+    s += \"World!\";\n+    assert_eq!(\"World!\", s);\n+    if let Cow::Owned(_) = s {\n+        panic!(\"Adding empty strings to a borrow should note allocate\");\n+    }\n+\n+    owned += \"World!\";\n+    borrowed += \"World!\";\n+\n+    assert_eq!(\"Hi, World!\", owned);\n+    assert_eq!(\"Hello, World!\", borrowed);\n+}"}, {"sha": "14ec8d58bef61065ad669414be9eb19850670a8d", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e40c80cf527c3b18baaf443f0fc553f35424499/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e40c80cf527c3b18baaf443f0fc553f35424499/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=1e40c80cf527c3b18baaf443f0fc553f35424499", "patch": "@@ -42,6 +42,7 @@ mod bench;\n \n mod binary_heap;\n mod btree;\n+mod cow_str;\n mod enum_set;\n mod fmt;\n mod linked_list;"}]}