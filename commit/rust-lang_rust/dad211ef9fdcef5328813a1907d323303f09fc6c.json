{"sha": "dad211ef9fdcef5328813a1907d323303f09fc6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDIxMWVmOWZkY2VmNTMyODgxM2ExOTA3ZDMyMzMwM2YwOWZjNmM=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-12-03T17:16:20Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-02-17T15:42:49Z"}, "message": "Modify doctest's auto-`fn main()` to allow `Result`s\n\nThis lets the default `fn main()` unwrap any `Result`s, which\nallows the use of `?` in most tests without adding it manually.", "tree": {"sha": "ccb9785522c11eb483b9bf6c5addeacdb1ec8c31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb9785522c11eb483b9bf6c5addeacdb1ec8c31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad211ef9fdcef5328813a1907d323303f09fc6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad211ef9fdcef5328813a1907d323303f09fc6c", "html_url": "https://github.com/rust-lang/rust/commit/dad211ef9fdcef5328813a1907d323303f09fc6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad211ef9fdcef5328813a1907d323303f09fc6c/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007115746c6d0234742719dd67efba054abe97ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/007115746c6d0234742719dd67efba054abe97ce", "html_url": "https://github.com/rust-lang/rust/commit/007115746c6d0234742719dd67efba054abe97ce"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "020ffe4e1df87a281842b5740554a978d746338e", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dad211ef9fdcef5328813a1907d323303f09fc6c/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/dad211ef9fdcef5328813a1907d323303f09fc6c/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=dad211ef9fdcef5328813a1907d323303f09fc6c", "patch": "@@ -236,6 +236,23 @@ appears to the reader as the initial idea but works with doc tests:\n /// ```\n ```\n \n+As of version 1.34.0, one can also omit the `fn main()`, but you will have to\n+disambiguate the error type:\n+\n+```ignore\n+/// ```\n+/// use std::io;\n+/// let mut input = String::new();\n+/// io::stdin().read_line(&mut input)?;\n+/// # Ok::<(), io:Error>(())\n+/// ```\n+```\n+\n+This is an unfortunate consequence of the `?` operator adding an implicit\n+conversion, so type inference fails because the type is not unique. Please note\n+that you must write the `(())` in one sequence without intermediate whitespace\n+so that rustdoc understands you want an implicit `Result`-returning function.\n+\n ## Documenting macros\n \n Here\u2019s an example of documenting a macro:"}, {"sha": "133edb77051a6536b528ed6e9bb86c9d3aef0e78", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dad211ef9fdcef5328813a1907d323303f09fc6c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad211ef9fdcef5328813a1907d323303f09fc6c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=dad211ef9fdcef5328813a1907d323303f09fc6c", "patch": "@@ -470,13 +470,19 @@ pub fn make_test(s: &str,\n         }\n     }\n \n-    if dont_insert_main || already_has_main {\n+    // FIXME: This code cannot yet handle no_std test cases yet\n+    if dont_insert_main || already_has_main || prog.contains(\"![no_std]\") {\n         prog.push_str(everything_else);\n     } else {\n-        prog.push_str(\"fn main() {\\n\");\n+        let returns_result = everything_else.trim_end().ends_with(\"(())\");\n+        let (main_pre, main_post) = if returns_result {\n+            (\"fn main() { fn _inner() -> Result<(), impl core::fmt::Debug> {\",\n+             \"}\\n_inner().unwrap() }\")\n+        } else {\n+            (\"fn main() {\\n\", \"\\n}\")\n+        };\n+        prog.extend([main_pre, everything_else, main_post].iter().cloned());\n         line_offset += 1;\n-        prog.push_str(everything_else);\n-        prog.push_str(\"\\n}\");\n     }\n \n     debug!(\"final doctest:\\n{}\", prog);"}, {"sha": "32258792b6e8b88c601b50ac6d4a53b5e84d69be", "filename": "src/test/rustdoc/process-termination.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dad211ef9fdcef5328813a1907d323303f09fc6c/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad211ef9fdcef5328813a1907d323303f09fc6c/src%2Ftest%2Frustdoc%2Fprocess-termination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprocess-termination.rs?ref=dad211ef9fdcef5328813a1907d323303f09fc6c", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags:--test\n+\n+/// A check of using various process termination strategies\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// assert!(true); // this returns `()`, all is well\n+/// ```\n+///\n+/// You can also simply return `Ok(())`, but you'll need to disambiguate the\n+/// type using turbofish, because we cannot infer the type:\n+///\n+/// ```rust\n+/// Ok::<(), &'static str>(())\n+/// ```\n+///\n+/// You can err with anything that implements `Debug`:\n+///\n+/// ```rust,should_panic\n+/// Err(\"This is returned from `main`, leading to panic\")?;\n+/// Ok::<(), &'static str>(())\n+/// ```\n+pub fn check_process_termination() {}"}]}