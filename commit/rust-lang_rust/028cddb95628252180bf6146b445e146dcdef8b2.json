{"sha": "028cddb95628252180bf6146b445e146dcdef8b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOGNkZGI5NTYyODI1MjE4MGJmNjE0NmI0NDVlMTQ2ZGNkZWY4YjI=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-02-29T21:46:59Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-02-29T21:46:59Z"}, "message": "Finished checking for cases of absolute values", "tree": {"sha": "2090c8aec2a8c20fac53fe3d3c1ce92f4750fcca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2090c8aec2a8c20fac53fe3d3c1ce92f4750fcca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/028cddb95628252180bf6146b445e146dcdef8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/028cddb95628252180bf6146b445e146dcdef8b2", "html_url": "https://github.com/rust-lang/rust/commit/028cddb95628252180bf6146b445e146dcdef8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/028cddb95628252180bf6146b445e146dcdef8b2/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a21661ce54bf2485e90d21282e1fe7be45879af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a21661ce54bf2485e90d21282e1fe7be45879af", "html_url": "https://github.com/rust-lang/rust/commit/5a21661ce54bf2485e90d21282e1fe7be45879af"}], "stats": {"total": 173, "additions": 145, "deletions": 28}, "files": [{"sha": "8a6ae10ab0b901808671cb2cc4420462725ae77c", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/028cddb95628252180bf6146b445e146dcdef8b2/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028cddb95628252180bf6146b445e146dcdef8b2/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=028cddb95628252180bf6146b445e146dcdef8b2", "patch": "@@ -387,6 +387,18 @@ fn is_testing_positive(cx: &LateContext<'_, '_>, expr: &Expr<'_>, test: &Expr<'_\n     }\n }\n \n+fn is_testing_negative(cx: &LateContext<'_, '_>, expr: &Expr<'_>, test: &Expr<'_>) -> bool {\n+    if let ExprKind::Binary(Spanned { node: op, .. }, left, right) = expr.kind {\n+        match op {\n+            BinOpKind::Gt | BinOpKind::Ge => is_zero(left) && are_exprs_equal(cx, right, test),\n+            BinOpKind::Lt | BinOpKind::Le => is_zero(right) && are_exprs_equal(cx, left, test),\n+            _ => false,\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n fn are_exprs_equal(cx: &LateContext<'_, '_>, expr1: &Expr<'_>, expr2: &Expr<'_>) -> bool {\n     SpanlessEq::new(cx).ignore_fn().eq_expr(expr1, expr2)\n }\n@@ -410,30 +422,9 @@ fn is_zero(expr: &Expr<'_>) -> bool {\n \n fn check_custom_abs(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     if let Some((cond, body, Some(else_body))) = higher::if_block(&expr) {\n-        if let ExprKind::Block(\n-            Block {\n-                stmts: [],\n-                expr:\n-                    Some(Expr {\n-                        kind: ExprKind::Unary(UnOp::UnNeg, else_expr),\n-                        ..\n-                    }),\n-                ..\n-            },\n-            _,\n-        ) = else_body.kind\n-        {\n-            if let ExprKind::Block(\n-                Block {\n-                    stmts: [],\n-                    expr: Some(body),\n-                    ..\n-                },\n-                _,\n-            ) = &body.kind\n-            {\n+        if let ExprKind::Block( Block { stmts: [], expr: Some(Expr { kind: ExprKind::Unary(UnOp::UnNeg, else_expr), ..  }), ..  }, _,) = else_body.kind {\n+            if let ExprKind::Block( Block { stmts: [], expr: Some(body), ..  }, _,) = &body.kind {\n                 if are_exprs_equal(cx, else_expr, body) {\n-                    dbg!(\"if (cond) body else -body\\nbody: {:?}\", &body.kind);\n                     if is_testing_positive(cx, cond, body) {\n                         span_lint_and_sugg(\n                             cx,\n@@ -444,6 +435,44 @@ fn check_custom_abs(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                             format!(\"{}.abs()\", Sugg::hir(cx, body, \"..\")),\n                             Applicability::MachineApplicable,\n                         );\n+                    } else if is_testing_negative(cx, cond, body) {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            SUBOPTIMAL_FLOPS,\n+                            expr.span,\n+                            \"This looks like you've implemented your own negative absolute value function\",\n+                            \"try\",\n+                            format!(\"-{}.abs()\", Sugg::hir(cx, body, \"..\")),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+        if let ExprKind::Block( Block { stmts: [], expr: Some(Expr { kind: ExprKind::Unary(UnOp::UnNeg, else_expr), ..  }), ..  }, _,) = &body.kind\n+        {\n+            if let ExprKind::Block( Block { stmts: [], expr: Some(body), ..  }, _,) = &else_body.kind {\n+                if are_exprs_equal(cx, else_expr, body) {\n+                    if is_testing_negative(cx, cond, body) {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            SUBOPTIMAL_FLOPS,\n+                            expr.span,\n+                            \"This looks like you've implemented your own absolute value function\",\n+                            \"try\",\n+                            format!(\"{}.abs()\", Sugg::hir(cx, body, \"..\")),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else if is_testing_positive(cx, cond, body) {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            SUBOPTIMAL_FLOPS,\n+                            expr.span,\n+                            \"This looks like you've implemented your own negative absolute value function\",\n+                            \"try\",\n+                            format!(\"-{}.abs()\", Sugg::hir(cx, body, \"..\")),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                 }\n             }"}, {"sha": "40d2ff7e859623454a74d78472852d745044f4ea", "filename": "tests/ui/floating_point_abs.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/028cddb95628252180bf6146b445e146dcdef8b2/tests%2Fui%2Ffloating_point_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028cddb95628252180bf6146b445e146dcdef8b2/tests%2Fui%2Ffloating_point_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.rs?ref=028cddb95628252180bf6146b445e146dcdef8b2", "patch": "@@ -1,4 +1,5 @@\n-#[warn(clippy::suboptimal_flops)]\n+#![warn(clippy::suboptimal_flops)]\n+\n struct A {\n     a: f64,\n     b: f64\n@@ -28,6 +29,22 @@ fn fake_abs3(a: A) -> f64 {\n     }\n }\n \n+fn fake_abs4(num: f64) -> f64 {\n+    if 0.0 >= num {\n+        -num\n+    } else {\n+        num\n+    }\n+}\n+\n+fn fake_abs5(a: A) -> f64 {\n+    if a.a < 0.0 {\n+        -a.a\n+    } else {\n+        a.a\n+    }\n+}\n+\n fn fake_nabs1(num: f64) -> f64 {\n     if num < 0.0 {\n         num\n@@ -46,9 +63,9 @@ fn fake_nabs2(num: f64) -> f64 {\n \n fn fake_nabs3(a: A) -> A {\n     A { a: if a.a >= 0.0 {\n-            a.a\n-        } else {\n             -a.a\n+        } else {\n+            a.a\n         }, b: a.b }\n }\n "}, {"sha": "dd648a8a2726a39a00d21d5cece5a8a9dac5fbff", "filename": "tests/ui/floating_point_abs.stderr", "status": "modified", "additions": 73, "deletions": 2, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/028cddb95628252180bf6146b445e146dcdef8b2/tests%2Fui%2Ffloating_point_abs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/028cddb95628252180bf6146b445e146dcdef8b2/tests%2Fui%2Ffloating_point_abs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.stderr?ref=028cddb95628252180bf6146b445e146dcdef8b2", "patch": "@@ -1,5 +1,5 @@\n error: This looks like you've implemented your own absolute value function\n-  --> $DIR/floating_point_abs.rs:4:5\n+  --> $DIR/floating_point_abs.rs:9:5\n    |\n LL | /     if num >= 0.0 {\n LL | |         num\n@@ -10,5 +10,76 @@ LL | |     }\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: This looks like you've implemented your own absolute value function\n+  --> $DIR/floating_point_abs.rs:17:5\n+   |\n+LL | /     if 0.0 < num {\n+LL | |         num\n+LL | |     } else {\n+LL | |         -num\n+LL | |     }\n+   | |_____^ help: try: `num.abs()`\n+\n+error: This looks like you've implemented your own absolute value function\n+  --> $DIR/floating_point_abs.rs:25:5\n+   |\n+LL | /     if a.a > 0.0 {\n+LL | |         a.a\n+LL | |     } else {\n+LL | |         -a.a\n+LL | |     }\n+   | |_____^ help: try: `a.a.abs()`\n+\n+error: This looks like you've implemented your own absolute value function\n+  --> $DIR/floating_point_abs.rs:33:5\n+   |\n+LL | /     if 0.0 >= num {\n+LL | |         -num\n+LL | |     } else {\n+LL | |         num\n+LL | |     }\n+   | |_____^ help: try: `num.abs()`\n+\n+error: This looks like you've implemented your own absolute value function\n+  --> $DIR/floating_point_abs.rs:41:5\n+   |\n+LL | /     if a.a < 0.0 {\n+LL | |         -a.a\n+LL | |     } else {\n+LL | |         a.a\n+LL | |     }\n+   | |_____^ help: try: `a.a.abs()`\n+\n+error: This looks like you've implemented your own negative absolute value function\n+  --> $DIR/floating_point_abs.rs:49:5\n+   |\n+LL | /     if num < 0.0 {\n+LL | |         num\n+LL | |     } else {\n+LL | |         -num\n+LL | |     }\n+   | |_____^ help: try: `-num.abs()`\n+\n+error: This looks like you've implemented your own negative absolute value function\n+  --> $DIR/floating_point_abs.rs:57:5\n+   |\n+LL | /     if 0.0 >= num {\n+LL | |         num\n+LL | |     } else {\n+LL | |         -num\n+LL | |     }\n+   | |_____^ help: try: `-num.abs()`\n+\n+error: This looks like you've implemented your own negative absolute value function\n+  --> $DIR/floating_point_abs.rs:65:12\n+   |\n+LL |       A { a: if a.a >= 0.0 {\n+   |  ____________^\n+LL | |             -a.a\n+LL | |         } else {\n+LL | |             a.a\n+LL | |         }, b: a.b }\n+   | |_________^ help: try: `-a.a.abs()`\n+\n+error: aborting due to 8 previous errors\n "}]}