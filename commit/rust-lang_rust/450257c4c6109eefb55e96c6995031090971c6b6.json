{"sha": "450257c4c6109eefb55e96c6995031090971c6b6", "node_id": "C_kwDOAAsO6NoAKDQ1MDI1N2M0YzYxMDllZWZiNTVlOTZjNjk5NTAzMTA5MDk3MWM2YjY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T18:59:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-01T18:59:17Z"}, "message": "Merge pull request #1295 from bjorn3/update_cranelift\n\nUpdate Cranelift to 0.90.0", "tree": {"sha": "86026cdf03793dbc1c1a01279e8fd766b865fd6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86026cdf03793dbc1c1a01279e8fd766b865fd6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/450257c4c6109eefb55e96c6995031090971c6b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjiPmFCRBK7hj4Ov3rIwAAHakIAEoy69dd2/zBj6d9VtuSNJ0N\nw/ZPEeaiNhfbZcCbTGnRTPUmSp103YU/GwRRtTPkruTygr/lniGjfij97+eoUk0R\nG7hq4WIBQDxZs5cIS60Ri+2d6Elzt0O8XmV0IKFXPl1MK8kUy8FBHCxIZudFuj0P\nHvXKiqnOTzq/nyOiGASKgWHSz/qhb4CpszTf1pgwryzFYuLti81M19wyMcmrCZJu\nEZb3ku6q21Vbtmi8jnzYN29dwpMnmISy7WMiSyKlTcOz7bYJgekd77YZenufKaNz\n86zjCeYmXEsb2R40Z16uKysXxv96MgvS71uLNGU92gMfNBF2d1qAz3mFA1aVsrM=\n=TY0b\n-----END PGP SIGNATURE-----\n", "payload": "tree 86026cdf03793dbc1c1a01279e8fd766b865fd6e\nparent 3cf89947808758840dfe640eb927edd99e64b27b\nparent a54a3775c90f3f5f7a13e64809a01fb3364e8d4a\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1669921157 +0100\ncommitter GitHub <noreply@github.com> 1669921157 +0100\n\nMerge pull request #1295 from bjorn3/update_cranelift\n\nUpdate Cranelift to 0.90.0"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/450257c4c6109eefb55e96c6995031090971c6b6", "html_url": "https://github.com/rust-lang/rust/commit/450257c4c6109eefb55e96c6995031090971c6b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/450257c4c6109eefb55e96c6995031090971c6b6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf89947808758840dfe640eb927edd99e64b27b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf89947808758840dfe640eb927edd99e64b27b", "html_url": "https://github.com/rust-lang/rust/commit/3cf89947808758840dfe640eb927edd99e64b27b"}, {"sha": "a54a3775c90f3f5f7a13e64809a01fb3364e8d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a54a3775c90f3f5f7a13e64809a01fb3364e8d4a", "html_url": "https://github.com/rust-lang/rust/commit/a54a3775c90f3f5f7a13e64809a01fb3364e8d4a"}], "stats": {"total": 257, "additions": 95, "deletions": 162}, "files": [{"sha": "de5d166b8ef68eb46be0c8bfecb321b305be8108", "filename": "Cargo.lock", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -62,24 +62,25 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e4d6bb61f78cc312fbdebbb8a11b5aea6c16355ee682c57b89914691f3d57d0d\"\n+checksum = \"b62c772976416112fa4484cbd688cb6fb35fd430005c1c586224fc014018abad\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b4f8572ccd8b99df7a8244d64feaa37f37877e47eccc245aa5e27f15dd336d7e\"\n+checksum = \"9b40ed2dd13c2ac7e24f88a3090c68ad3414eb1d066a95f8f1f7b3b819cb4e46\"\n dependencies = [\n  \"arrayvec\",\n  \"bumpalo\",\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n  \"cranelift-codegen-shared\",\n+ \"cranelift-egraph\",\n  \"cranelift-entity\",\n  \"cranelift-isle\",\n  \"gimli\",\n@@ -91,30 +92,44 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"15f2f284f49249a9fda931332f3feed56492651f47c330ffe1aa5a51f2b9d6b6\"\n+checksum = \"bb927a8f1c27c34ee3759b6b0ffa528d2330405d5cc4511f0cab33fe2279f4b5\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8f6190411c55dfd88e68f506dfdbd028da0551dca40793d40811ea03cb6e0f4a\"\n+checksum = \"43dfa417b884a9ab488d95fd6b93b25e959321fe7bfd7a0a960ba5d7fb7ab927\"\n+\n+[[package]]\n+name = \"cranelift-egraph\"\n+version = \"0.90.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e0a66b39785efd8513d2cca967ede56d6cc57c8d7986a595c7c47d0c78de8dce\"\n+dependencies = [\n+ \"cranelift-entity\",\n+ \"fxhash\",\n+ \"hashbrown\",\n+ \"indexmap\",\n+ \"log\",\n+ \"smallvec\",\n+]\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ed8aa1104f54509dfb386520711cd8a6a0992ae42ce2df06fdebdfff4de2c2dd\"\n+checksum = \"0637ffde963cb5d759bc4d454cfa364b6509e6c74cdaa21298add0ed9276f346\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d48087600d6c055f625754b1d9cc9cab36a0d26a365cbcb388825e331e0041ff\"\n+checksum = \"fb72b8342685e850cb037350418f62cc4fc55d6c2eb9c7ca01b82f9f1a6f3d56\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -124,15 +139,15 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-isle\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eead4df80ce3c68b913d071683790692a0316a67e3518b32e273169238876f0a\"\n+checksum = \"850579cb9e4b448f7c301f1e6e6cbad99abe3f1f1d878a4994cb66e33c6db8cd\"\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f6d92ab547bf300966d5ef714e5575ae0437a2f8da6f92a30a3d35f9e7971ae9\"\n+checksum = \"9add822ad66dcbe152b5ab57de10240a2df4505099f2f6c27159acb711890bd4\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -143,24 +158,25 @@ dependencies = [\n  \"log\",\n  \"region\",\n  \"target-lexicon\",\n+ \"wasmtime-jit-icache-coherence\",\n  \"windows-sys\",\n ]\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9ecae6c04ac78161c9380e4953ff5d56e44fe78e1e32a3d7e816bf2e9246283f\"\n+checksum = \"406b772626fc2664864cf947f3895a23b619895c7fff635f3622e2d857f4492f\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3adde571ff9c6a77320b69ac03920c5ce70fed94f5f9ac53f5c0600a69fc142e\"\n+checksum = \"2d0a279e5bcba3e0466c734d8d8eb6bfc1ad29e95c37f3e4955b492b5616335e\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -169,9 +185,9 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.89.1\"\n+version = \"0.90.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"afb602999187ba96b81822fe48dbd544ecc36179741c0bc2dd6602e3ee0c5ead\"\n+checksum = \"39793c550f0c1d7db96c2fc1324583670c8143befe6edbfbaf1c68aba53be983\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -306,9 +322,9 @@ checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n \n [[package]]\n name = \"regalloc2\"\n-version = \"0.4.1\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"69025b4a161879ba90719837c06621c3d73cffa147a000aeacf458f6a9572485\"\n+checksum = \"91b2eab54204ea0117fe9a060537e0b07a4e72f7c7d182361ecc346cab2240e5\"\n dependencies = [\n  \"fxhash\",\n  \"log\",\n@@ -384,6 +400,17 @@ version = \"0.11.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n \n+[[package]]\n+name = \"wasmtime-jit-icache-coherence\"\n+version = \"2.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e6bbabb309c06cc238ee91b1455b748c45f0bdcab0dda2c2db85b0a1e69fcb66\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"libc\",\n+ \"windows-sys\",\n+]\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.9\""}, {"sha": "a9ad5a5d38387d92336aa476eb290ae3f9fef732", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -15,12 +15,12 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { version = \"0.89.1\", features = [\"unwind\", \"all-arch\"] }\n-cranelift-frontend = \"0.89.1\"\n-cranelift-module = \"0.89.1\"\n-cranelift-native = \"0.89.1\"\n-cranelift-jit = { version = \"0.89.1\", optional = true }\n-cranelift-object = \"0.89.1\"\n+cranelift-codegen = { version = \"0.90.1\", features = [\"unwind\", \"all-arch\"] }\n+cranelift-frontend = \"0.90.1\"\n+cranelift-module = \"0.90.1\"\n+cranelift-native = \"0.90.1\"\n+cranelift-jit = { version = \"0.90.1\", optional = true }\n+cranelift-object = \"0.90.1\"\n target-lexicon = \"0.12.0\"\n gimli = { version = \"0.26.0\", default-features = false, features = [\"write\"]}\n object = { version = \"0.29.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }"}, {"sha": "12a15fbaee6b3e05de98082d683f473eed7bbf06", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -388,11 +388,9 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                         _ => unreachable!(\"{:?}\", targets),\n                     };\n \n-                    let discr = crate::optimize::peephole::maybe_unwrap_bint(&mut fx.bcx, discr);\n                     let (discr, is_inverted) =\n                         crate::optimize::peephole::maybe_unwrap_bool_not(&mut fx.bcx, discr);\n                     let test_zero = if is_inverted { !test_zero } else { test_zero };\n-                    let discr = crate::optimize::peephole::maybe_unwrap_bint(&mut fx.bcx, discr);\n                     if let Some(taken) = crate::optimize::peephole::maybe_known_branch_taken(\n                         &fx.bcx, discr, test_zero,\n                     ) {\n@@ -569,20 +567,14 @@ fn codegen_stmt<'tcx>(\n                         UnOp::Not => match layout.ty.kind() {\n                             ty::Bool => {\n                                 let res = fx.bcx.ins().icmp_imm(IntCC::Equal, val, 0);\n-                                CValue::by_val(fx.bcx.ins().bint(types::I8, res), layout)\n+                                CValue::by_val(res, layout)\n                             }\n                             ty::Uint(_) | ty::Int(_) => {\n                                 CValue::by_val(fx.bcx.ins().bnot(val), layout)\n                             }\n                             _ => unreachable!(\"un op Not for {:?}\", layout.ty),\n                         },\n                         UnOp::Neg => match layout.ty.kind() {\n-                            ty::Int(IntTy::I128) => {\n-                                // FIXME remove this case once ineg.i128 works\n-                                let zero =\n-                                    CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n-                                crate::num::codegen_int_binop(fx, BinOp::Sub, zero, operand)\n-                            }\n                             ty::Int(_) => CValue::by_val(fx.bcx.ins().ineg(val), layout),\n                             ty::Float(_) => CValue::by_val(fx.bcx.ins().fneg(val), layout),\n                             _ => unreachable!(\"un op Neg for {:?}\", layout.ty),"}, {"sha": "5091c5a9fedacbb7f4dda7b4d5ab7f086f17d1d7", "filename": "src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -149,7 +149,7 @@ pub(crate) fn clif_int_or_float_cast(\n         }\n \n         let is_not_nan = fx.bcx.ins().fcmp(FloatCC::Equal, from, from);\n-        let zero = fx.bcx.ins().iconst(to_ty, 0);\n+        let zero = type_zero_value(&mut fx.bcx, to_ty);\n         fx.bcx.ins().select(is_not_nan, val, zero)\n     } else if from_ty.is_float() && to_ty.is_float() {\n         // float -> float"}, {"sha": "2dcd42fbd8f431833ac46b414c539e40c828f0e8", "filename": "src/common.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -167,6 +167,15 @@ pub(crate) fn codegen_icmp_imm(\n     }\n }\n \n+pub(crate) fn type_zero_value(bcx: &mut FunctionBuilder<'_>, ty: Type) -> Value {\n+    if ty == types::I128 {\n+        let zero = bcx.ins().iconst(types::I64, 0);\n+        bcx.ins().iconcat(zero, zero)\n+    } else {\n+        bcx.ins().iconst(ty, 0)\n+    }\n+}\n+\n pub(crate) fn type_min_max_value(\n     bcx: &mut FunctionBuilder<'_>,\n     ty: Type,"}, {"sha": "493359c743f119d6bcee87920e595c943a009642", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -39,7 +39,9 @@ impl UnwindContext {\n     }\n \n     pub(crate) fn add_function(&mut self, func_id: FuncId, context: &Context, isa: &dyn TargetIsa) {\n-        let unwind_info = if let Some(unwind_info) = context.create_unwind_info(isa).unwrap() {\n+        let unwind_info = if let Some(unwind_info) =\n+            context.compiled_code().unwrap().create_unwind_info(isa).unwrap()\n+        {\n             unwind_info\n         } else {\n             return;"}, {"sha": "3cbf313adf0df5a69887cdb1f0516245f2b23232", "filename": "src/discriminant.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -278,8 +278,14 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 fx.bcx.ins().iadd(tagged_discr, delta)\n             };\n \n-            let untagged_variant =\n-                fx.bcx.ins().iconst(cast_to, i64::from(untagged_variant.as_u32()));\n+            let untagged_variant = if cast_to == types::I128 {\n+                let zero = fx.bcx.ins().iconst(types::I64, 0);\n+                let untagged_variant =\n+                    fx.bcx.ins().iconst(types::I64, i64::from(untagged_variant.as_u32()));\n+                fx.bcx.ins().iconcat(untagged_variant, zero)\n+            } else {\n+                fx.bcx.ins().iconst(cast_to, i64::from(untagged_variant.as_u32()))\n+            };\n             let discr = fx.bcx.ins().select(is_niche, tagged_discr, untagged_variant);\n             let res = CValue::by_val(discr, dest_layout);\n             dest.write_cvalue(fx, res);"}, {"sha": "1dcb8025183c91a6d97c8b2522a6430985c440a0", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -159,7 +159,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n \n     tcx.sess.abort_if_errors();\n \n-    jit_module.finalize_definitions();\n+    jit_module.finalize_definitions().unwrap();\n     unsafe { cx.unwind_context.register_jit(&jit_module) };\n \n     println!(\n@@ -278,7 +278,7 @@ fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) ->\n             });\n \n             assert!(cx.global_asm.is_empty());\n-            jit_module.finalize_definitions();\n+            jit_module.finalize_definitions().unwrap();\n             unsafe { cx.unwind_context.register_jit(&jit_module) };\n             jit_module.get_finalized_function(func_id)\n         })"}, {"sha": "7a380acf798572a7606130959a7517cfecb2462b", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 10, "deletions": 84, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -197,8 +197,7 @@ fn bool_to_zero_or_max_uint<'tcx>(\n         ty => ty,\n     };\n \n-    let val = fx.bcx.ins().bint(int_ty, val);\n-    let mut res = fx.bcx.ins().ineg(val);\n+    let mut res = fx.bcx.ins().bmask(int_ty, val);\n \n     if ty.is_float() {\n         res = fx.bcx.ins().bitcast(ty, res);\n@@ -634,85 +633,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, res);\n         }\n         sym::bswap => {\n-            // FIXME(CraneStation/cranelift#794) add bswap instruction to cranelift\n-            fn swap(bcx: &mut FunctionBuilder<'_>, v: Value) -> Value {\n-                match bcx.func.dfg.value_type(v) {\n-                    types::I8 => v,\n-\n-                    // https://code.woboq.org/gcc/include/bits/byteswap.h.html\n-                    types::I16 => {\n-                        let tmp1 = bcx.ins().ishl_imm(v, 8);\n-                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00);\n-\n-                        let tmp2 = bcx.ins().ushr_imm(v, 8);\n-                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF);\n-\n-                        bcx.ins().bor(n1, n2)\n-                    }\n-                    types::I32 => {\n-                        let tmp1 = bcx.ins().ishl_imm(v, 24);\n-                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00_0000);\n-\n-                        let tmp2 = bcx.ins().ishl_imm(v, 8);\n-                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF_0000);\n-\n-                        let tmp3 = bcx.ins().ushr_imm(v, 8);\n-                        let n3 = bcx.ins().band_imm(tmp3, 0x0000_FF00);\n-\n-                        let tmp4 = bcx.ins().ushr_imm(v, 24);\n-                        let n4 = bcx.ins().band_imm(tmp4, 0x0000_00FF);\n-\n-                        let or_tmp1 = bcx.ins().bor(n1, n2);\n-                        let or_tmp2 = bcx.ins().bor(n3, n4);\n-                        bcx.ins().bor(or_tmp1, or_tmp2)\n-                    }\n-                    types::I64 => {\n-                        let tmp1 = bcx.ins().ishl_imm(v, 56);\n-                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00_0000_0000_0000u64 as i64);\n-\n-                        let tmp2 = bcx.ins().ishl_imm(v, 40);\n-                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF_0000_0000_0000u64 as i64);\n-\n-                        let tmp3 = bcx.ins().ishl_imm(v, 24);\n-                        let n3 = bcx.ins().band_imm(tmp3, 0x0000_FF00_0000_0000u64 as i64);\n-\n-                        let tmp4 = bcx.ins().ishl_imm(v, 8);\n-                        let n4 = bcx.ins().band_imm(tmp4, 0x0000_00FF_0000_0000u64 as i64);\n-\n-                        let tmp5 = bcx.ins().ushr_imm(v, 8);\n-                        let n5 = bcx.ins().band_imm(tmp5, 0x0000_0000_FF00_0000u64 as i64);\n-\n-                        let tmp6 = bcx.ins().ushr_imm(v, 24);\n-                        let n6 = bcx.ins().band_imm(tmp6, 0x0000_0000_00FF_0000u64 as i64);\n-\n-                        let tmp7 = bcx.ins().ushr_imm(v, 40);\n-                        let n7 = bcx.ins().band_imm(tmp7, 0x0000_0000_0000_FF00u64 as i64);\n-\n-                        let tmp8 = bcx.ins().ushr_imm(v, 56);\n-                        let n8 = bcx.ins().band_imm(tmp8, 0x0000_0000_0000_00FFu64 as i64);\n-\n-                        let or_tmp1 = bcx.ins().bor(n1, n2);\n-                        let or_tmp2 = bcx.ins().bor(n3, n4);\n-                        let or_tmp3 = bcx.ins().bor(n5, n6);\n-                        let or_tmp4 = bcx.ins().bor(n7, n8);\n-\n-                        let or_tmp5 = bcx.ins().bor(or_tmp1, or_tmp2);\n-                        let or_tmp6 = bcx.ins().bor(or_tmp3, or_tmp4);\n-                        bcx.ins().bor(or_tmp5, or_tmp6)\n-                    }\n-                    types::I128 => {\n-                        let (lo, hi) = bcx.ins().isplit(v);\n-                        let lo = swap(bcx, lo);\n-                        let hi = swap(bcx, hi);\n-                        bcx.ins().iconcat(hi, lo)\n-                    }\n-                    ty => unreachable!(\"bswap {}\", ty),\n-                }\n-            }\n             intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n \n-            let res = CValue::by_val(swap(&mut fx.bcx, val), arg.layout());\n+            let res = if fx.bcx.func.dfg.value_type(val) == types::I8 {\n+                val\n+            } else {\n+                fx.bcx.ins().bswap(val)\n+            };\n+            let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n         }\n         sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n@@ -938,8 +867,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let old = fx.bcx.ins().atomic_cas(MemFlags::trusted(), ptr, test_old, new);\n             let is_eq = fx.bcx.ins().icmp(IntCC::Equal, old, test_old);\n \n-            let ret_val =\n-                CValue::by_val_pair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n+            let ret_val = CValue::by_val_pair(old, is_eq, ret.layout());\n             ret.write_cvalue(fx, ret_val)\n         }\n \n@@ -1261,8 +1189,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 flags.set_notrap();\n                 let lhs_val = fx.bcx.ins().load(clty, flags, lhs_ref, 0);\n                 let rhs_val = fx.bcx.ins().load(clty, flags, rhs_ref, 0);\n-                let eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_val, rhs_val);\n-                fx.bcx.ins().bint(types::I8, eq)\n+                fx.bcx.ins().icmp(IntCC::Equal, lhs_val, rhs_val)\n             } else {\n                 // Just call `memcmp` (like slices do in core) when the\n                 // size is too large or it's not a power-of-two.\n@@ -1272,8 +1199,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 let returns = vec![AbiParam::new(types::I32)];\n                 let args = &[lhs_ref, rhs_ref, bytes_val];\n                 let cmp = fx.lib_call(\"memcmp\", params, returns, args)[0];\n-                let eq = fx.bcx.ins().icmp_imm(IntCC::Equal, cmp, 0);\n-                fx.bcx.ins().bint(types::I8, eq)\n+                fx.bcx.ins().icmp_imm(IntCC::Equal, cmp, 0)\n             };\n             ret.write_cvalue(fx, CValue::by_val(is_eq_value, ret.layout()));\n         }"}, {"sha": "14f5e9187399fac76f2a64d0147f2f647a904929", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -112,10 +112,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => unreachable!(),\n                 };\n \n-                let ty = fx.clif_type(res_lane_ty).unwrap();\n-\n-                let res_lane = fx.bcx.ins().bint(ty, res_lane);\n-                fx.bcx.ins().ineg(res_lane)\n+                bool_to_zero_or_max_uint(fx, res_lane_ty, res_lane)\n             });\n         }\n \n@@ -716,7 +713,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n             let res_type =\n                 Type::int_with_byte_size(u16::try_from(expected_bytes).unwrap()).unwrap();\n-            let mut res = fx.bcx.ins().iconst(res_type, 0);\n+            let mut res = type_zero_value(&mut fx.bcx, res_type);\n \n             let lanes = match fx.tcx.sess.target.endian {\n                 Endian::Big => Box::new(0..lane_count) as Box<dyn Iterator<Item = u64>>,"}, {"sha": "afacbec644582195440bcb8e3e9c58d6d99b3c74", "filename": "src/num.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -49,7 +49,6 @@ fn codegen_compare_bin_op<'tcx>(\n ) -> CValue<'tcx> {\n     let intcc = crate::num::bin_op_to_intcc(bin_op, signed).unwrap();\n     let val = fx.bcx.ins().icmp(intcc, lhs, rhs);\n-    let val = fx.bcx.ins().bint(types::I8, val);\n     CValue::by_val(val, fx.layout_of(fx.tcx.types.bool))\n }\n \n@@ -290,8 +289,6 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n \n-    let has_overflow = fx.bcx.ins().bint(types::I8, has_overflow);\n-\n     let out_layout = fx.layout_of(fx.tcx.mk_tup([in_lhs.layout().ty, fx.tcx.types.bool].iter()));\n     CValue::by_val_pair(res, has_overflow, out_layout)\n }\n@@ -368,7 +365,6 @@ pub(crate) fn codegen_float_binop<'tcx>(\n                 _ => unreachable!(),\n             };\n             let val = fx.bcx.ins().fcmp(fltcc, lhs, rhs);\n-            let val = fx.bcx.ins().bint(types::I8, val);\n             return CValue::by_val(val, fx.layout_of(fx.tcx.types.bool));\n         }\n         _ => unreachable!(\"{:?}({:?}, {:?})\", bin_op, in_lhs, in_rhs),\n@@ -440,7 +436,7 @@ pub(crate) fn codegen_ptr_binop<'tcx>(\n             _ => panic!(\"bin_op {:?} on ptr\", bin_op),\n         };\n \n-        CValue::by_val(fx.bcx.ins().bint(types::I8, res), fx.layout_of(fx.tcx.types.bool))\n+        CValue::by_val(res, fx.layout_of(fx.tcx.types.bool))\n     }\n }\n "}, {"sha": "7f45bbd8f28136a43b8271ba5f3e2755d19d522d", "filename": "src/optimize/peephole.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Foptimize%2Fpeephole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Foptimize%2Fpeephole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fpeephole.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -3,19 +3,6 @@\n use cranelift_codegen::ir::{condcodes::IntCC, InstructionData, Opcode, Value, ValueDef};\n use cranelift_frontend::FunctionBuilder;\n \n-/// If the given value was produced by a `bint` instruction, return it's input, otherwise return the\n-/// given value.\n-pub(crate) fn maybe_unwrap_bint(bcx: &mut FunctionBuilder<'_>, arg: Value) -> Value {\n-    if let ValueDef::Result(arg_inst, 0) = bcx.func.dfg.value_def(arg) {\n-        match bcx.func.dfg[arg_inst] {\n-            InstructionData::Unary { opcode: Opcode::Bint, arg } => arg,\n-            _ => arg,\n-        }\n-    } else {\n-        arg\n-    }\n-}\n-\n /// If the given value was produced by the lowering of `Rvalue::Not` return the input and true,\n /// otherwise return the given value and false.\n pub(crate) fn maybe_unwrap_bool_not(bcx: &mut FunctionBuilder<'_>, arg: Value) -> (Value, bool) {\n@@ -48,13 +35,6 @@ pub(crate) fn maybe_known_branch_taken(\n     };\n \n     match bcx.func.dfg[arg_inst] {\n-        InstructionData::UnaryBool { opcode: Opcode::Bconst, imm } => {\n-            if test_zero {\n-                Some(!imm)\n-            } else {\n-                Some(imm)\n-            }\n-        }\n         InstructionData::UnaryImm { opcode: Opcode::Iconst, imm } => {\n             if test_zero {\n                 Some(imm.bits() == 0)"}, {"sha": "da712808c9423a81bda2eafd5f27e4524a7f8cbf", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450257c4c6109eefb55e96c6995031090971c6b6/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=450257c4c6109eefb55e96c6995031090971c6b6", "patch": "@@ -515,9 +515,7 @@ impl<'tcx> CPlace<'tcx> {\n                 | (types::F32, types::I32)\n                 | (types::I64, types::F64)\n                 | (types::F64, types::I64) => fx.bcx.ins().bitcast(dst_ty, data),\n-                _ if src_ty.is_vector() && dst_ty.is_vector() => {\n-                    fx.bcx.ins().raw_bitcast(dst_ty, data)\n-                }\n+                _ if src_ty.is_vector() && dst_ty.is_vector() => fx.bcx.ins().bitcast(dst_ty, data),\n                 _ if src_ty.is_vector() || dst_ty.is_vector() => {\n                     // FIXME do something more efficient for transmutes between vectors and integers.\n                     let stack_slot = fx.bcx.create_sized_stack_slot(StackSlotData {"}]}