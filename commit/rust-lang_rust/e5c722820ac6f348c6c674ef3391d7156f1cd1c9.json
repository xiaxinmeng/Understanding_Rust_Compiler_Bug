{"sha": "e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "node_id": "C_kwDOAAsO6NoAKGU1YzcyMjgyMGFjNmYzNDhjNmM2NzRlZjMzOTFkNzE1NmYxY2QxYzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T19:55:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T19:55:14Z"}, "message": "Auto merge of #14808 - HKalbasi:metrics, r=HKalbasi\n\nAdd metrics for unevaluated constants, failed mir bodies, and failed data layouts\n\nfix #14803", "tree": {"sha": "6566a0661f320490d57ffe07ceae4948dd8dc983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6566a0661f320490d57ffe07ceae4948dd8dc983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "html_url": "https://github.com/rust-lang/rust/commit/e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd14e98403dc5e19f19fdf913808656d81a0516", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd14e98403dc5e19f19fdf913808656d81a0516", "html_url": "https://github.com/rust-lang/rust/commit/cbd14e98403dc5e19f19fdf913808656d81a0516"}, {"sha": "206a0b5bc69464bd85a905d6d195ad4355790960", "url": "https://api.github.com/repos/rust-lang/rust/commits/206a0b5bc69464bd85a905d6d195ad4355790960", "html_url": "https://github.com/rust-lang/rust/commit/206a0b5bc69464bd85a905d6d195ad4355790960"}], "stats": {"total": 132, "additions": 113, "deletions": 19}, "files": [{"sha": "2aac1cc057d3655eda42c322f1958334fa8b6e2c", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "patch": "@@ -2066,3 +2066,22 @@ fn type_error() {\n         |e| matches!(e, ConstEvalError::MirLowerError(MirLowerError::TypeMismatch(_))),\n     );\n }\n+\n+#[test]\n+fn unsized_local() {\n+    check_fail(\n+        r#\"\n+    //- minicore: coerce_unsized, index, slice\n+    const fn x() -> SomeUnknownTypeThatDereferenceToSlice {\n+        SomeUnknownTypeThatDereferenceToSlice\n+    }\n+\n+    const GOAL: u16 = {\n+        let y = x();\n+        let z: &[u16] = &y;\n+        z[1]\n+    };\n+    \"#,\n+        |e| matches!(e, ConstEvalError::MirLowerError(MirLowerError::UnsizedTemporary(_))),\n+    );\n+}"}, {"sha": "627c36dca92f0787ae0b67ab9a2091bb4929ec6f", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "patch": "@@ -75,6 +75,7 @@ pub enum MirLowerError {\n     RecordLiteralWithoutPath,\n     UnresolvedMethod(String),\n     UnresolvedField,\n+    UnsizedTemporary(Ty),\n     MissingFunctionDefinition,\n     TypeMismatch(TypeMismatch),\n     /// This should be never happen. Type mismatch should catch everything.\n@@ -108,6 +109,7 @@ impl MirLowerError {\n                 }\n             }\n             MirLowerError::LayoutError(_)\n+            | MirLowerError::UnsizedTemporary(_)\n             | MirLowerError::IncompleteExpr\n             | MirLowerError::UnaccessableLocal\n             | MirLowerError::TraitFunctionDefinition(_, _)\n@@ -199,7 +201,7 @@ impl<'ctx> MirLowerCtx<'ctx> {\n \n     fn temp(&mut self, ty: Ty) -> Result<LocalId> {\n         if matches!(ty.kind(Interner), TyKind::Slice(_) | TyKind::Dyn(_)) {\n-            implementation_error!(\"unsized temporaries\");\n+            return Err(MirLowerError::UnsizedTemporary(ty));\n         }\n         Ok(self.result.locals.alloc(Local { ty }))\n     }"}, {"sha": "b12568b0bd96374024ead6cf1cab9fffb1ec4b6f", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 88, "deletions": 15, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "patch": "@@ -2,7 +2,6 @@\n //! errors.\n \n use std::{\n-    collections::HashMap,\n     env,\n     time::{SystemTime, UNIX_EPOCH},\n };\n@@ -16,7 +15,7 @@ use hir_def::{\n     hir::{ExprId, PatId},\n     FunctionId,\n };\n-use hir_ty::{Interner, TyExt, TypeFlags};\n+use hir_ty::{Interner, Substitution, TyExt, TypeFlags};\n use ide::{Analysis, AnalysisHost, LineCol, RootDatabase};\n use ide_db::base_db::{\n     salsa::{self, debug::DebugQueryTable, ParallelDatabase},\n@@ -122,14 +121,19 @@ impl flags::AnalysisStats {\n         eprint!(\"  crates: {num_crates}\");\n         let mut num_decls = 0;\n         let mut funcs = Vec::new();\n+        let mut adts = Vec::new();\n+        let mut consts = Vec::new();\n         while let Some(module) = visit_queue.pop() {\n             if visited_modules.insert(module) {\n                 visit_queue.extend(module.children(db));\n \n                 for decl in module.declarations(db) {\n                     num_decls += 1;\n-                    if let ModuleDef::Function(f) = decl {\n-                        funcs.push(f);\n+                    match decl {\n+                        ModuleDef::Function(f) => funcs.push(f),\n+                        ModuleDef::Adt(a) => adts.push(a),\n+                        ModuleDef::Const(c) => consts.push(c),\n+                        _ => (),\n                     }\n                 }\n \n@@ -154,10 +158,13 @@ impl flags::AnalysisStats {\n             self.run_inference(&host, db, &vfs, &funcs, verbosity);\n         }\n \n-        if self.mir_stats {\n-            self.lower_mir(db, &funcs);\n+        if !self.skip_mir_stats {\n+            self.run_mir_lowering(db, &funcs, verbosity);\n         }\n \n+        self.run_data_layout(db, &adts, verbosity);\n+        self.run_const_eval(db, &consts, verbosity);\n+\n         let total_span = analysis_sw.elapsed();\n         eprintln!(\"{:<20} {total_span}\", \"Total:\");\n         report_metric(\"total time\", total_span.time.as_millis() as u64, \"ms\");\n@@ -193,22 +200,88 @@ impl flags::AnalysisStats {\n         Ok(())\n     }\n \n-    fn lower_mir(&self, db: &RootDatabase, funcs: &[Function]) {\n-        let all = funcs.len();\n+    fn run_data_layout(&self, db: &RootDatabase, adts: &[hir::Adt], verbosity: Verbosity) {\n+        let mut sw = self.stop_watch();\n+        let mut all = 0;\n+        let mut fail = 0;\n+        for &a in adts {\n+            if db.generic_params(a.into()).iter().next().is_some() {\n+                // Data types with generics don't have layout.\n+                continue;\n+            }\n+            all += 1;\n+            let Err(e) = db.layout_of_adt(hir_def::AdtId::from(a).into(), Substitution::empty(Interner)) else {\n+                continue;\n+            };\n+            if verbosity.is_spammy() {\n+                let full_name = a\n+                    .module(db)\n+                    .path_to_root(db)\n+                    .into_iter()\n+                    .rev()\n+                    .filter_map(|it| it.name(db))\n+                    .chain(Some(a.name(db)))\n+                    .join(\"::\");\n+                println!(\"Data layout for {full_name} failed due {e:?}\");\n+            }\n+            fail += 1;\n+        }\n+        eprintln!(\"{:<20} {}\", \"Data layouts:\", sw.elapsed());\n+        eprintln!(\"Failed data layouts: {fail} ({}%)\", fail * 100 / all);\n+        report_metric(\"failed data layouts\", fail, \"#\");\n+    }\n+\n+    fn run_const_eval(&self, db: &RootDatabase, consts: &[hir::Const], verbosity: Verbosity) {\n+        let mut sw = self.stop_watch();\n+        let mut all = 0;\n+        let mut fail = 0;\n+        for &c in consts {\n+            all += 1;\n+            let Err(e) = c.render_eval(db) else {\n+                continue;\n+            };\n+            if verbosity.is_spammy() {\n+                let full_name = c\n+                    .module(db)\n+                    .path_to_root(db)\n+                    .into_iter()\n+                    .rev()\n+                    .filter_map(|it| it.name(db))\n+                    .chain(c.name(db))\n+                    .join(\"::\");\n+                println!(\"Const eval for {full_name} failed due {e:?}\");\n+            }\n+            fail += 1;\n+        }\n+        eprintln!(\"{:<20} {}\", \"Const evaluation:\", sw.elapsed());\n+        eprintln!(\"Failed const evals: {fail} ({}%)\", fail * 100 / all);\n+        report_metric(\"failed const evals\", fail, \"#\");\n+    }\n+\n+    fn run_mir_lowering(&self, db: &RootDatabase, funcs: &[Function], verbosity: Verbosity) {\n+        let mut sw = self.stop_watch();\n+        let all = funcs.len() as u64;\n         let mut fail = 0;\n-        let mut h: HashMap<String, usize> = HashMap::new();\n         for f in funcs {\n-            let f = FunctionId::from(*f);\n-            let Err(e) = db.mir_body(f.into()) else {\n+            let Err(e) = db.mir_body(FunctionId::from(*f).into()) else {\n                 continue;\n             };\n-            let es = format!(\"{:?}\", e);\n-            *h.entry(es).or_default() += 1;\n+            if verbosity.is_spammy() {\n+                let full_name = f\n+                    .module(db)\n+                    .path_to_root(db)\n+                    .into_iter()\n+                    .rev()\n+                    .filter_map(|it| it.name(db))\n+                    .chain(Some(f.name(db)))\n+                    .join(\"::\");\n+                println!(\"Mir body for {full_name} failed due {e:?}\");\n+            }\n             fail += 1;\n         }\n-        let h = h.into_iter().sorted_by_key(|x| x.1).collect::<Vec<_>>();\n-        eprintln!(\"Mir failed reasons: {:#?}\", h);\n+        eprintln!(\"{:<20} {}\", \"MIR lowering:\", sw.elapsed());\n         eprintln!(\"Mir failed bodies: {fail} ({}%)\", fail * 100 / all);\n+        report_metric(\"mir failed bodies\", fail, \"#\");\n     }\n \n     fn run_inference("}, {"sha": "6b5a79b431f185831da03376e8df13b2862f5f73", "filename": "crates/rust-analyzer/src/cli/flags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5c722820ac6f348c6c674ef3391d7156f1cd1c9/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs?ref=e5c722820ac6f348c6c674ef3391d7156f1cd1c9", "patch": "@@ -66,8 +66,8 @@ xflags::xflags! {\n             optional --memory-usage\n             /// Print the total length of all source and macro files (whitespace is not counted).\n             optional --source-stats\n-            /// Print the number of bodies that fail to lower to mir, in addition to failed reasons.\n-            optional --mir-stats\n+            /// Only type check, skip lowering to mir\n+            optional --skip-mir-stats\n \n             /// Only analyze items matching this path.\n             optional -o, --only path: String\n@@ -171,7 +171,7 @@ pub struct AnalysisStats {\n     pub parallel: bool,\n     pub memory_usage: bool,\n     pub source_stats: bool,\n-    pub mir_stats: bool,\n+    pub skip_mir_stats: bool,\n     pub only: Option<String>,\n     pub with_deps: bool,\n     pub no_sysroot: bool,"}]}