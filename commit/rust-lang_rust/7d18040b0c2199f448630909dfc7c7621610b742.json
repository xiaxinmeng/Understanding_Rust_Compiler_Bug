{"sha": "7d18040b0c2199f448630909dfc7c7621610b742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMTgwNDBiMGMyMTk5ZjQ0ODYzMDkwOWRmYzdjNzYyMTYxMGI3NDI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-02T16:05:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-02T16:05:20Z"}, "message": "Rollup merge of #74974 - RalfJung:miri-tests, r=Mark-Simulacrum\n\nMake tests faster in Miri\n\nReduce some test iteration counts in Miri.", "tree": {"sha": "0c5214335b237498092104b9ca36605399f86a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5214335b237498092104b9ca36605399f86a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d18040b0c2199f448630909dfc7c7621610b742", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJuRACRBK7hj4Ov3rIwAAdHIIABZWSN9gxQjlEPIUgpl+Nw3v\nxHceUmqBkw4NI7VEbRjdaafjTWQeGjGsinSSNZ4GN7HHuTlvumZB34MNNgvMPE6a\naRgoOb3Rgfi4E9Osiju1H0n8sRtw56r0Y0LuS6co93FXHVIEbQCD25ZQHpE61fDH\n/bRcncF4OIMF6QJpFoF8pC7O47vphUsyarfLNGS1oW1IC+llVLcbHPbuLes7UfO1\nF+dAWDvnKdHvH+ShSbEjR4IDU3hbHiEHZ+tTtum3CkID3vezcSY9u1EVSjsTCNLD\nyObgJfM6Y4fLu+6WgOwz9Kcs0HsLYxgDWhnbFAJ98kXLH3QKiYsKsgAoWdkhJ98=\n=yhp4\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c5214335b237498092104b9ca36605399f86a76\nparent 1033c74665065eeef460c58381f06144ecd8ecab\nparent ff0c3a920996ae0b09a652c1c894329f7acdc28d\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596384320 +0900\ncommitter GitHub <noreply@github.com> 1596384320 +0900\n\nRollup merge of #74974 - RalfJung:miri-tests, r=Mark-Simulacrum\n\nMake tests faster in Miri\n\nReduce some test iteration counts in Miri.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d18040b0c2199f448630909dfc7c7621610b742", "html_url": "https://github.com/rust-lang/rust/commit/7d18040b0c2199f448630909dfc7c7621610b742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d18040b0c2199f448630909dfc7c7621610b742/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1033c74665065eeef460c58381f06144ecd8ecab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1033c74665065eeef460c58381f06144ecd8ecab", "html_url": "https://github.com/rust-lang/rust/commit/1033c74665065eeef460c58381f06144ecd8ecab"}, {"sha": "ff0c3a920996ae0b09a652c1c894329f7acdc28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0c3a920996ae0b09a652c1c894329f7acdc28d", "html_url": "https://github.com/rust-lang/rust/commit/ff0c3a920996ae0b09a652c1c894329f7acdc28d"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "d74f91c752c0407778b18520da2a7d335764df54", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7d18040b0c2199f448630909dfc7c7621610b742/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d18040b0c2199f448630909dfc7c7621610b742/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=7d18040b0c2199f448630909dfc7c7621610b742", "patch": "@@ -107,7 +107,8 @@ fn test_insert() {\n     let cap = tester.capacity();\n \n     // len is the length *after* insertion\n-    for len in 1..cap {\n+    let minlen = if cfg!(miri) { cap - 1 } else { 1 }; // Miri is too slow\n+    for len in minlen..cap {\n         // 0, 1, 2, .., len - 1\n         let expected = (0..).take(len).collect::<VecDeque<_>>();\n         for tail_pos in 0..cap {\n@@ -221,7 +222,8 @@ fn test_remove() {\n     let cap = tester.capacity();\n \n     // len is the length *after* removal\n-    for len in 0..cap - 1 {\n+    let minlen = if cfg!(miri) { cap - 2 } else { 0 }; // Miri is too slow\n+    for len in minlen..cap - 1 {\n         // 0, 1, 2, .., len - 1\n         let expected = (0..).take(len).collect::<VecDeque<_>>();\n         for tail_pos in 0..cap {\n@@ -251,7 +253,8 @@ fn test_range() {\n     let mut tester: VecDeque<usize> = VecDeque::with_capacity(7);\n \n     let cap = tester.capacity();\n-    for len in 0..=cap {\n+    let minlen = if cfg!(miri) { cap - 1 } else { 0 }; // Miri is too slow\n+    for len in minlen..=cap {\n         for tail in 0..=cap {\n             for start in 0..=len {\n                 for end in start..=len {\n@@ -384,7 +387,8 @@ fn test_split_off() {\n     let cap = tester.capacity();\n \n     // len is the length *before* splitting\n-    for len in 0..cap {\n+    let minlen = if cfg!(miri) { cap - 1 } else { 0 }; // Miri is too slow\n+    for len in minlen..cap {\n         // index to split at\n         for at in 0..=len {\n             // 0, 1, 2, .., at - 1 (may be empty)\n@@ -495,8 +499,9 @@ fn test_vec_from_vecdeque() {\n fn test_clone_from() {\n     let m = vec![1; 8];\n     let n = vec![2; 12];\n-    for pfv in 0..8 {\n-        for pfu in 0..8 {\n+    let limit = if cfg!(miri) { 4 } else { 8 }; // Miri is too slow\n+    for pfv in 0..limit {\n+        for pfu in 0..limit {\n             for longer in 0..2 {\n                 let (vr, ur) = if longer == 0 { (&m, &n) } else { (&n, &m) };\n                 let mut v = VecDeque::from(vr.clone());"}, {"sha": "147f7f7d0c72956156c39fbaea656556ddb62994", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d18040b0c2199f448630909dfc7c7621610b742/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d18040b0c2199f448630909dfc7c7621610b742/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=7d18040b0c2199f448630909dfc7c7621610b742", "patch": "@@ -1721,8 +1721,8 @@ fn panic_safe() {\n \n     let mut rng = thread_rng();\n \n-    // Miri is too slow\n-    let lens = if cfg!(miri) { (1..10).chain(20..21) } else { (1..20).chain(70..MAX_LEN) };\n+    // Miri is too slow (but still need to `chain` to make the types match)\n+    let lens = if cfg!(miri) { (1..10).chain(0..0) } else { (1..20).chain(70..MAX_LEN) };\n     let moduli: &[u32] = if cfg!(miri) { &[5] } else { &[5, 20, 50] };\n \n     for len in lens {"}, {"sha": "e5656eb204c733ab8933f0ddd21be3463e0b75d8", "filename": "library/core/tests/num/flt2dec/random.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d18040b0c2199f448630909dfc7c7621610b742/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d18040b0c2199f448630909dfc7c7621610b742/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=7d18040b0c2199f448630909dfc7c7621610b742", "patch": "@@ -188,7 +188,7 @@ fn exact_f32_random_equivalence_test() {\n fn exact_f64_random_equivalence_test() {\n     use core::num::flt2dec::strategy::dragon::format_exact as fallback;\n     // Miri is too slow\n-    let n = if cfg!(miri) { 3 } else { 1_000 };\n+    let n = if cfg!(miri) { 2 } else { 1_000 };\n \n     for k in 1..21 {\n         f64_random_equivalence_test("}, {"sha": "7e6c8add3339d2d0052fc800fbbb7ce5e2eeda61", "filename": "library/core/tests/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d18040b0c2199f448630909dfc7c7621610b742/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d18040b0c2199f448630909dfc7c7621610b742/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=7d18040b0c2199f448630909dfc7c7621610b742", "patch": "@@ -2,6 +2,7 @@ use super::super::*;\n use core::num::flt2dec::strategy::grisu::*;\n \n #[test]\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_cached_power() {\n     assert_eq!(CACHED_POW10.first().unwrap().1, CACHED_POW10_FIRST_E);\n     assert_eq!(CACHED_POW10.last().unwrap().1, CACHED_POW10_LAST_E);"}, {"sha": "42b483f33ba44a2dc1c123d5a070697589bcb8f1", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d18040b0c2199f448630909dfc7c7621610b742/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d18040b0c2199f448630909dfc7c7621610b742/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=7d18040b0c2199f448630909dfc7c7621610b742", "patch": "@@ -1358,15 +1358,15 @@ fn sort_unstable() {\n     use core::slice::heapsort;\n     use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n \n-    // Miri is too slow\n-    let large_range = if cfg!(miri) { 0..0 } else { 500..510 };\n+    // Miri is too slow (but still need to `chain` to make the types match)\n+    let lens = if cfg!(miri) { (2..20).chain(0..0) } else { (2..25).chain(500..510) };\n     let rounds = if cfg!(miri) { 1 } else { 100 };\n \n     let mut v = [0; 600];\n     let mut tmp = [0; 600];\n     let mut rng = StdRng::from_entropy();\n \n-    for len in (2..25).chain(large_range) {\n+    for len in lens {\n         let v = &mut v[0..len];\n         let tmp = &mut tmp[0..len];\n "}]}