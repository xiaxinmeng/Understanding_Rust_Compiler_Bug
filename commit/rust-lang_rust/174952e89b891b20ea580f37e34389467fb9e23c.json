{"sha": "174952e89b891b20ea580f37e34389467fb9e23c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDk1MmU4OWI4OTFiMjBlYTU4MGYzN2UzNDM4OTQ2N2ZiOWUyM2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:24:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:24:08Z"}, "message": "Refactor", "tree": {"sha": "0b8ee196b3a096e68be5eeedf510b4a2eaf4864c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8ee196b3a096e68be5eeedf510b4a2eaf4864c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/174952e89b891b20ea580f37e34389467fb9e23c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/174952e89b891b20ea580f37e34389467fb9e23c", "html_url": "https://github.com/rust-lang/rust/commit/174952e89b891b20ea580f37e34389467fb9e23c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/174952e89b891b20ea580f37e34389467fb9e23c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "953b5f23cc493d75288cec1347ab65dd3ed38fd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/953b5f23cc493d75288cec1347ab65dd3ed38fd7", "html_url": "https://github.com/rust-lang/rust/commit/953b5f23cc493d75288cec1347ab65dd3ed38fd7"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "ab43d2a0ab27c32103f318e11a529a1ec478a401", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/174952e89b891b20ea580f37e34389467fb9e23c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174952e89b891b20ea580f37e34389467fb9e23c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=174952e89b891b20ea580f37e34389467fb9e23c", "patch": "@@ -307,42 +307,36 @@ impl Completions {\n \n pub(crate) fn compute_score(\n     ctx: &CompletionContext,\n+    // FIXME: this definitely should be a `Type`\n     ty: &str,\n     name: &str,\n ) -> Option<CompletionScore> {\n     let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n-        if let Some((struct_field, _)) = ctx.sema.resolve_record_field(record_field) {\n-            (\n-                struct_field.name(ctx.db).to_string(),\n-                struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n-            )\n-        } else {\n-            return None;\n-        }\n+        let (struct_field, _local) = ctx.sema.resolve_record_field(record_field)?;\n+        (\n+            struct_field.name(ctx.db).to_string(),\n+            struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n+        )\n     } else if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n-        if call_info.active_parameter_type().is_some()\n-            && call_info.active_parameter_name().is_some()\n-        {\n-            (call_info.active_parameter_name().unwrap(), call_info.active_parameter_type().unwrap())\n-        } else {\n-            return None;\n-        }\n+        (call_info.active_parameter_name()?, call_info.active_parameter_type()?)\n     } else {\n         return None;\n     };\n \n     // Compute score\n     // For the same type\n-    if &active_type == ty {\n-        // If same type + same name then go top position\n-        let res = if active_name == name {\n-            CompletionScore::TypeAndNameMatch\n-        } else {\n-            CompletionScore::TypeMatch\n-        };\n-        return Some(res);\n+    if &active_type != ty {\n+        return None;\n+    }\n+\n+    let mut res = CompletionScore::TypeMatch;\n+\n+    // If same type + same name then go top position\n+    if active_name == name {\n+        res = CompletionScore::TypeAndNameMatch\n     }\n-    None\n+\n+    Some(res)\n }\n \n enum Params {"}]}