{"sha": "92af0db0a3919f5371de362cb6060ff87190aafe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYWYwZGIwYTM5MTlmNTM3MWRlMzYyY2I2MDYwZmY4NzE5MGFhZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-16T06:56:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-16T06:56:14Z"}, "message": "auto merge of #8518 : catamorphism/rust/issue-8498-workaround, r=brson\n\nr? @brson", "tree": {"sha": "e819447f3c4ce9faf88009a643ca0141fba57b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e819447f3c4ce9faf88009a643ca0141fba57b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92af0db0a3919f5371de362cb6060ff87190aafe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92af0db0a3919f5371de362cb6060ff87190aafe", "html_url": "https://github.com/rust-lang/rust/commit/92af0db0a3919f5371de362cb6060ff87190aafe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92af0db0a3919f5371de362cb6060ff87190aafe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "253337de825306a6080d65266eb2a5b101509e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/253337de825306a6080d65266eb2a5b101509e63", "html_url": "https://github.com/rust-lang/rust/commit/253337de825306a6080d65266eb2a5b101509e63"}, {"sha": "5be4408ef20af3f6852095b81249e81f81d344b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be4408ef20af3f6852095b81249e81f81d344b7", "html_url": "https://github.com/rust-lang/rust/commit/5be4408ef20af3f6852095b81249e81f81d344b7"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "45e4f756d7a15752a7e3d3e7ed672ac2547c8296", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92af0db0a3919f5371de362cb6060ff87190aafe/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92af0db0a3919f5371de362cb6060ff87190aafe/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=92af0db0a3919f5371de362cb6060ff87190aafe", "patch": "@@ -49,7 +49,7 @@ pub fn run(lib_path: &str,\n \n     let env = env + target_env(lib_path, prog);\n     let mut proc = run::Process::new(prog, args, run::ProcessOptions {\n-        env: Some(env.slice(0, env.len())),\n+        env: Some(env),\n         dir: None,\n         in_fd: None,\n         out_fd: None,"}, {"sha": "be3cb644edbaa3f3685ae978376ec3b42aac26de", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92af0db0a3919f5371de362cb6060ff87190aafe/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92af0db0a3919f5371de362cb6060ff87190aafe/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=92af0db0a3919f5371de362cb6060ff87190aafe", "patch": "@@ -114,7 +114,7 @@ fn mk_temp_workspace(short_name: &Path, version: &Version) -> Path {\n fn run_git(args: &[~str], env: Option<~[(~str, ~str)]>, cwd: &Path, err_msg: &str) {\n     let cwd = (*cwd).clone();\n     let mut prog = run::Process::new(\"git\", args, run::ProcessOptions {\n-        env: env.map(|v| v.slice(0, v.len())),\n+        env: env,\n         dir: Some(&cwd),\n         in_fd: None,\n         out_fd: None,\n@@ -222,7 +222,7 @@ fn command_line_test_with_env(args: &[~str], cwd: &Path, env: Option<~[(~str, ~s\n     assert!(os::path_is_dir(&*cwd));\n     let cwd = (*cwd).clone();\n     let mut prog = run::Process::new(cmd, args, run::ProcessOptions {\n-        env: env.map(|v| v.slice(0, v.len())),\n+        env: env,\n         dir: Some(&cwd),\n         in_fd: None,\n         out_fd: None,\n@@ -757,7 +757,9 @@ fn rust_path_test() {\n                                      // use command_line_test_with_env\n     let mut prog = run::Process::new(\"rustpkg\",\n                                      [~\"install\", ~\"foo\"],\n-                                     run::ProcessOptions { env: Some(&[(~\"RUST_LOG\",\n+// This should actually extend the environment; then we can probably\n+// un-ignore it\n+                                     run::ProcessOptions { env: Some(~[(~\"RUST_LOG\",\n                                                                         ~\"rustpkg\"),\n                                                                        (~\"RUST_PATH\",\n                                                                        dir_for_path.to_str())]),\n@@ -1039,7 +1041,7 @@ fn test_extern_mod() {\n                                                       ~\"--sysroot\", test_sysroot().to_str(),\n                                                ~\"-o\", exec_file.to_str()],\n                                      run::ProcessOptions {\n-        env: env.map(|v| v.slice(0, v.len())),\n+        env: env,\n         dir: Some(&dir),\n         in_fd: None,\n         out_fd: None,"}, {"sha": "4d751101d730d4c44316d188d5497f1f08eccaff", "filename": "src/libstd/run.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92af0db0a3919f5371de362cb6060ff87190aafe/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92af0db0a3919f5371de362cb6060ff87190aafe/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=92af0db0a3919f5371de362cb6060ff87190aafe", "patch": "@@ -68,7 +68,7 @@ pub struct ProcessOptions<'self> {\n      * If this is Some(vec-of-names-and-values) then the new process will\n      * have an environment containing the given named values only.\n      */\n-    env: Option<&'self [(~str, ~str)]>,\n+    env: Option<~[(~str, ~str)]>,\n \n     /**\n      * If this is None then the new process will use the same initial working\n@@ -171,7 +171,7 @@ impl Process {\n             Some(fd) => (None, fd)\n         };\n \n-        let res = spawn_process_os(prog, args, options.env, options.dir,\n+        let res = spawn_process_os(prog, args, options.env.clone(), options.dir,\n                                    in_fd, out_fd, err_fd);\n \n         unsafe {\n@@ -444,7 +444,7 @@ struct SpawnProcessResult {\n \n #[cfg(windows)]\n fn spawn_process_os(prog: &str, args: &[~str],\n-                    env: Option<&[(~str, ~str)]>,\n+                    env: Option<~[(~str, ~str)]>,\n                     dir: Option<&Path>,\n                     in_fd: c_int, out_fd: c_int, err_fd: c_int) -> SpawnProcessResult {\n \n@@ -627,7 +627,7 @@ pub fn make_command_line(prog: &str, args: &[~str]) -> ~str {\n \n #[cfg(unix)]\n fn spawn_process_os(prog: &str, args: &[~str],\n-                    env: Option<&[(~str, ~str)]>,\n+                    env: Option<~[(~str, ~str)]>,\n                     dir: Option<&Path>,\n                     in_fd: c_int, out_fd: c_int, err_fd: c_int) -> SpawnProcessResult {\n \n@@ -717,7 +717,7 @@ fn with_argv<T>(prog: &str, args: &[~str], cb: &fn(**libc::c_char) -> T) -> T {\n }\n \n #[cfg(unix)]\n-fn with_envp<T>(env: Option<&[(~str, ~str)]>, cb: &fn(*c_void) -> T) -> T {\n+fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: &fn(*c_void) -> T) -> T {\n     use vec;\n \n     // On posixy systems we can pass a char** for envp, which is a\n@@ -749,7 +749,7 @@ fn with_envp<T>(env: Option<&[(~str, ~str)]>, cb: &fn(*c_void) -> T) -> T {\n }\n \n #[cfg(windows)]\n-fn with_envp<T>(env: Option<&[(~str, ~str)]>, cb: &fn(*mut c_void) -> T) -> T {\n+fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: &fn(*mut c_void) -> T) -> T {\n     // On win32 we pass an \"environment block\" which is not a char**, but\n     // rather a concatenation of null-terminated k=v\\0 sequences, with a final\n     // \\0 to terminate.\n@@ -1284,22 +1284,22 @@ mod tests {\n     }\n \n     #[cfg(unix,not(target_os=\"android\"))]\n-    fn run_env(env: Option<&[(~str, ~str)]>) -> run::Process {\n+    fn run_env(env: Option<~[(~str, ~str)]>) -> run::Process {\n         run::Process::new(\"env\", [], run::ProcessOptions {\n             env: env,\n             .. run::ProcessOptions::new()\n         })\n     }\n     #[cfg(unix,target_os=\"android\")]\n-    fn run_env(env: Option<&[(~str, ~str)]>) -> run::Process {\n+    fn run_env(env: Option<~[(~str, ~str)]>) -> run::Process {\n         run::Process::new(\"/system/bin/sh\", [~\"-c\",~\"set\"], run::ProcessOptions {\n             env: env,\n             .. run::ProcessOptions::new()\n         })\n     }\n \n     #[cfg(windows)]\n-    fn run_env(env: Option<&[(~str, ~str)]>) -> run::Process {\n+    fn run_env(env: Option<~[(~str, ~str)]>) -> run::Process {\n         run::Process::new(\"cmd\", [~\"/c\", ~\"set\"], run::ProcessOptions {\n             env: env,\n             .. run::ProcessOptions::new()\n@@ -1344,7 +1344,7 @@ mod tests {\n         let mut new_env = os::env();\n         new_env.push((~\"RUN_TEST_NEW_ENV\", ~\"123\"));\n \n-        let mut prog = run_env(Some(new_env.slice(0, new_env.len())));\n+        let mut prog = run_env(Some(new_env));\n         let output = str::from_bytes(prog.finish_with_output().output);\n \n         assert!(output.contains(\"RUN_TEST_NEW_ENV=123\"));"}, {"sha": "40f98355f34e10bc7ce45ab044a0cc23b65b3fe1", "filename": "src/test/run-pass/issue-8498.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/92af0db0a3919f5371de362cb6060ff87190aafe/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92af0db0a3919f5371de362cb6060ff87190aafe/src%2Ftest%2Frun-pass%2Fissue-8498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8498.rs?ref=92af0db0a3919f5371de362cb6060ff87190aafe", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-test\n+use std::io;\n+\n+fn main() {\n+// This is ok\n+    match &[(~5,~7)] {\n+        ps => {\n+           let (ref y, _) = ps[0];\n+           io::println(fmt!(\"1. y = %d\", **y));\n+           assert!(**y == 5);\n+        }\n+    }\n+\n+// This is not entirely ok\n+    match Some(&[(~5,)]) {\n+        Some(ps) => {\n+           let (ref y,) = ps[0];\n+           io::println(fmt!(\"2. y = %d\", **y));\n+           if **y != 5 { io::println(\"sadness\"); }\n+        }\n+        None => ()\n+    }\n+\n+// This is not ok\n+    match Some(&[(~5,~7)]) {\n+        Some(ps) => {\n+           let (ref y, ref z) = ps[0];\n+           io::println(fmt!(\"3. y = %d z = %d\", **y, **z));\n+           assert!(**y == 5);\n+        }\n+        None => ()\n+    }\n+}\n+"}]}