{"sha": "98dcd5e10aba490286abcae81b971a0206a9fd47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZGNkNWUxMGFiYTQ5MDI4NmFiY2FlODFiOTcxYTAyMDZhOWZkNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-11T00:01:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-11T00:01:51Z"}, "message": "Auto merge of #26941 - fhartwig:osx-file-debug, r=alexcrichton\n\nThis makes `Debug` for `File` show the file path and access mode of the file on OS X, just like on Linux.\r\nI'd be happy about any feedback how to make this code better. In particular, I'm not sure how to handle the buffer passed to `fnctl`. This way works, but it feels a bit cumbersome. `fcntl` unfortunately doesn't return the length of the path.", "tree": {"sha": "6770cf9ba12e5c0b2d2ddb5cc08a1ecf26a9659d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6770cf9ba12e5c0b2d2ddb5cc08a1ecf26a9659d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98dcd5e10aba490286abcae81b971a0206a9fd47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98dcd5e10aba490286abcae81b971a0206a9fd47", "html_url": "https://github.com/rust-lang/rust/commit/98dcd5e10aba490286abcae81b971a0206a9fd47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98dcd5e10aba490286abcae81b971a0206a9fd47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072d07ce9fc85728a62664ce674e26c54a759da5", "url": "https://api.github.com/repos/rust-lang/rust/commits/072d07ce9fc85728a62664ce674e26c54a759da5", "html_url": "https://github.com/rust-lang/rust/commit/072d07ce9fc85728a62664ce674e26c54a759da5"}, {"sha": "f200ad85bd8ead749dea217bdd65dfe130c4db18", "url": "https://api.github.com/repos/rust-lang/rust/commits/f200ad85bd8ead749dea217bdd65dfe130c4db18", "html_url": "https://github.com/rust-lang/rust/commit/f200ad85bd8ead749dea217bdd65dfe130c4db18"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "c41a161c82c7675574f70a6edc1df74079364f56", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98dcd5e10aba490286abcae81b971a0206a9fd47/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dcd5e10aba490286abcae81b971a0206a9fd47/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=98dcd5e10aba490286abcae81b971a0206a9fd47", "patch": "@@ -4978,6 +4978,8 @@ pub mod consts {\n             pub const F_GETFL : c_int = 3;\n             pub const F_SETFL : c_int = 4;\n \n+            pub const O_ACCMODE : c_int = 3;\n+\n             pub const SIGTRAP : c_int = 5;\n             pub const SIG_IGN: size_t = 1;\n \n@@ -5130,6 +5132,7 @@ pub mod consts {\n             pub const O_DSYNC : c_int = 4194304;\n             pub const O_SYNC : c_int = 128;\n             pub const O_NONBLOCK : c_int = 4;\n+            pub const F_GETPATH : c_int = 50;\n             pub const F_FULLFSYNC : c_int = 51;\n \n             pub const MAP_COPY : c_int = 0x0002;\n@@ -5151,6 +5154,8 @@ pub mod consts {\n             pub const SO_DONTTRUNC: c_int = 0x2000;\n             pub const SO_WANTMORE: c_int = 0x4000;\n             pub const SO_WANTOOBFLAG: c_int = 0x8000;\n+\n+            pub const PATH_MAX: c_int = 1024;\n         }\n         pub mod sysconf {\n             use types::os::arch::c95::c_int;"}, {"sha": "867cdcbab94cb88750c0453ac1141a718ec3be42", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98dcd5e10aba490286abcae81b971a0206a9fd47/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dcd5e10aba490286abcae81b971a0206a9fd47/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=98dcd5e10aba490286abcae81b971a0206a9fd47", "patch": "@@ -370,13 +370,25 @@ impl fmt::Debug for File {\n             readlink(&p).ok()\n         }\n \n-        #[cfg(not(target_os = \"linux\"))]\n+        #[cfg(target_os = \"macos\")]\n+        fn get_path(fd: c_int) -> Option<PathBuf> {\n+            let mut buf = vec![0;libc::PATH_MAX as usize];\n+            let n = unsafe { libc::fcntl(fd, libc::F_GETPATH, buf.as_ptr()) };\n+            if n == -1 {\n+                return None;\n+            }\n+            let l = buf.iter().position(|&c| c == 0).unwrap();\n+            buf.truncate(l as usize);\n+            Some(PathBuf::from(OsString::from_vec(buf)))\n+        }\n+\n+        #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n         fn get_path(_fd: c_int) -> Option<PathBuf> {\n             // FIXME(#24570): implement this for other Unix platforms\n             None\n         }\n \n-        #[cfg(target_os = \"linux\")]\n+        #[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n         fn get_mode(fd: c_int) -> Option<(bool, bool)> {\n             let mode = unsafe { libc::fcntl(fd, libc::F_GETFL) };\n             if mode == -1 {\n@@ -390,7 +402,7 @@ impl fmt::Debug for File {\n             }\n         }\n \n-        #[cfg(not(target_os = \"linux\"))]\n+        #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n         fn get_mode(_fd: c_int) -> Option<(bool, bool)> {\n             // FIXME(#24570): implement this for other Unix platforms\n             None"}]}