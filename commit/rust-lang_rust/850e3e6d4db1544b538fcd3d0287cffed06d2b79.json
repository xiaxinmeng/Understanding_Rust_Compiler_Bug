{"sha": "850e3e6d4db1544b538fcd3d0287cffed06d2b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MGUzZTZkNGRiMTU0NGI1MzhmY2QzZDAyODdjZmZlZDA2ZDJiNzk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-11T20:01:53Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-24T19:37:24Z"}, "message": "bug!() on const inference variable in opaque type\n\nAdd some tests to verify that this case is never hit", "tree": {"sha": "8f6ae0fd0f348734abf0b3d84c3fd396dbda4b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f6ae0fd0f348734abf0b3d84c3fd396dbda4b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/850e3e6d4db1544b538fcd3d0287cffed06d2b79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3a2/QACgkQtAh+UQ6Y\nsWT98RAAr96yIj9cjeOJU48oFeTsPbn8GlNWeU/lWGsyRfkOmvIPI5WwYucDz/pE\n+RlQqqdjPW4iZ0wvpLZb1Jl4wbwT3TaPp8denqCCRQYdY+7k+s4jL6yp8Z3C/p4L\nGIVybBjosKswPhEMlpjsxAS6jr01GTOVMJR8BCicr5sd+R6llw/1iJZ2Sp4P0vO6\nCD8Nhq8EWUSxeq45UBmIRH20KdZE/T9/ZDQRixGypOKnT71FgWWI+bSFM7YsvDLq\n6G3l7nRNodw1tn6rg5RcUqDO4xQuQZ30tUtiG6zlkTkEkJ1VzCXKQJsKysjDO+xx\nMh6gi5o31f4Xgm4lfoPkxUuWGqVxGTpsqGe6/8k7Oc6lywmDZZOo1bTwuQ7nqSyT\nP6qWl3UPUEuWm5zs71nIPNXArry8wqXRna2cN6N1Wo5vSt69CadJvo06VHQsk9yg\nH6IEnycfLaWkrDp7QBGU5cm5IV2d55U7P2wPsX3afLmxk3Mh88PJVjBkbz/pAp0e\nSZHLdwZvNtF1luvC5vd+YMoe1STd5U4zC4oF+GnqKk/QWe3zleaPB3SXNUeFsrWg\nvfNJQRVKtbteuDizLxjP3x5X8rqaKLQkr7w5Xjr4qfHKAG9pxeNMtBpWW4jH0i1O\nQH4hCUKSVFUzXHfSNhQBqf3r4YV7UmkMuUHvFI9Ysym+VSQNh/o=\n=9z1x\n-----END PGP SIGNATURE-----", "payload": "tree 8f6ae0fd0f348734abf0b3d84c3fd396dbda4b89\nparent a59b7eabe691695c66a9d3b95735121af1ba0166\nauthor Aaron Hill <aa1ronham@gmail.com> 1573502513 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1574624244 -0500\n\nbug!() on const inference variable in opaque type\n\nAdd some tests to verify that this case is never hit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/850e3e6d4db1544b538fcd3d0287cffed06d2b79", "html_url": "https://github.com/rust-lang/rust/commit/850e3e6d4db1544b538fcd3d0287cffed06d2b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/850e3e6d4db1544b538fcd3d0287cffed06d2b79/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59b7eabe691695c66a9d3b95735121af1ba0166", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59b7eabe691695c66a9d3b95735121af1ba0166", "html_url": "https://github.com/rust-lang/rust/commit/a59b7eabe691695c66a9d3b95735121af1ba0166"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "a1f1ac3f2d38a49dd820b7b400b849905a5f6994", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/850e3e6d4db1544b538fcd3d0287cffed06d2b79/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850e3e6d4db1544b538fcd3d0287cffed06d2b79/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=850e3e6d4db1544b538fcd3d0287cffed06d2b79", "patch": "@@ -907,7 +907,15 @@ fn fixup_opaque_types<'tcx, T>(tcx: TyCtxt<'tcx>, val: &T) -> T where T: TypeFol\n                                 },\n                                 GenericArgKind::Const(old_const) => {\n                                     if let ConstValue::Infer(_) = old_const.val {\n-                                        self.tcx.mk_param_from_def(param)\n+                        // This should never happen - we currently do not support\n+                        // 'const projections', e.g.:\n+                        // `impl<T: SomeTrait> MyTrait for T where <T as SomeTrait>::MyConst == 25`\n+                        // which should be the only way for us to end up with a const inference\n+                        // variable after projection. If Rust ever gains support for this kind\n+                        // of projection, this should *probably* be changed to\n+                        // `self.tcx.mk_param_from_def(param)`\n+                                        bug!(\"Found infer const: `{:?}` in opaque type: {:?}\",\n+                                             old_const, ty);\n                                     } else {\n                                         old_param.fold_with(self)\n                                     }"}, {"sha": "5db677d82e2663ae97bb51764fe3bb5b8f2220f7", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/850e3e6d4db1544b538fcd3d0287cffed06d2b79/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850e3e6d4db1544b538fcd3d0287cffed06d2b79/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=850e3e6d4db1544b538fcd3d0287cffed06d2b79", "patch": "@@ -0,0 +1,36 @@\n+// Tests that we properly detect defining usages when using\n+// const generics in an associated opaque type\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+trait UnwrapItemsExt<const C: usize> {\n+    type Iter;\n+    fn unwrap_items(self) -> Self::Iter;\n+}\n+\n+struct MyStruct<const C: usize> {}\n+\n+trait MyTrait<'a, const C: usize> {\n+    type MyItem;\n+    const MY_CONST: usize;\n+}\n+\n+impl<'a, const C: usize> MyTrait<'a, {C}> for MyStruct<{C}> {\n+    type MyItem = u8;\n+    const MY_CONST: usize = C;\n+}\n+\n+impl<'a, I, const C: usize> UnwrapItemsExt<{C}> for I\n+where\n+{\n+    type Iter = impl MyTrait<'a, {C}>;\n+\n+    fn unwrap_items(self) -> Self::Iter {\n+        MyStruct::<{C}> {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0adbee2f24439474c489a9be9d6183aaca2c4020", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/850e3e6d4db1544b538fcd3d0287cffed06d2b79/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/850e3e6d4db1544b538fcd3d0287cffed06d2b79/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr?ref=850e3e6d4db1544b538fcd3d0287cffed06d2b79", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/assoc-type-const.rs:6:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "cff1d24494e8392a4163bbee65c7c436b213cd2c", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/850e3e6d4db1544b538fcd3d0287cffed06d2b79/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850e3e6d4db1544b538fcd3d0287cffed06d2b79/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs?ref=850e3e6d4db1544b538fcd3d0287cffed06d2b79", "patch": "@@ -0,0 +1,28 @@\n+// Tests that we still detect defining usages when\n+// lifetimes are used in an associated opaque type\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait UnwrapItemsExt {\n+    type Iter;\n+    fn unwrap_items(self) -> Self::Iter;\n+}\n+\n+struct MyStruct {}\n+\n+trait MyTrait<'a> {}\n+\n+impl<'a> MyTrait<'a> for MyStruct {}\n+\n+impl<'a, I> UnwrapItemsExt for I\n+where\n+{\n+    type Iter = impl MyTrait<'a>;\n+\n+    fn unwrap_items(self) -> Self::Iter {\n+        MyStruct {}\n+    }\n+}\n+\n+fn main() {}"}]}