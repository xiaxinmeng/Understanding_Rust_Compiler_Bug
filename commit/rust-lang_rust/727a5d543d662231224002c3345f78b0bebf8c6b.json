{"sha": "727a5d543d662231224002c3345f78b0bebf8c6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyN2E1ZDU0M2Q2NjIyMzEyMjQwMDJjMzM0NWY3OGIwYmViZjhjNmI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:29:24Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:37:01Z"}, "message": "Prefer alloc_ty() instead of alloca() where possible", "tree": {"sha": "e23f7714b76be24d39f7a886e2df4db2c10f6059", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23f7714b76be24d39f7a886e2df4db2c10f6059"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/727a5d543d662231224002c3345f78b0bebf8c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/727a5d543d662231224002c3345f78b0bebf8c6b", "html_url": "https://github.com/rust-lang/rust/commit/727a5d543d662231224002c3345f78b0bebf8c6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/727a5d543d662231224002c3345f78b0bebf8c6b/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95337a29789ee856367d52266dea876fb45bafcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/95337a29789ee856367d52266dea876fb45bafcf", "html_url": "https://github.com/rust-lang/rust/commit/95337a29789ee856367d52266dea876fb45bafcf"}], "stats": {"total": 29, "additions": 9, "deletions": 20}, "files": [{"sha": "e964afc7b699e76260b181ee4053beaf8a158766", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=727a5d543d662231224002c3345f78b0bebf8c6b", "patch": "@@ -1196,8 +1196,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 let unsized_ty = def.struct_variant().fields.last().map(|field| {\n                     monomorphize::field_ty(bcx.tcx(), substs, field)\n                 }).unwrap();\n-                let llty = type_of::type_of(bcx.ccx(), unsized_ty);\n-                let scratch = alloca(bcx, llty, \"__struct_field_fat_ptr\");\n+                let scratch = alloc_ty(bcx, unsized_ty, \"__struct_field_fat_ptr\");\n                 let data = adt::trans_field_ptr(bcx, &*repr, struct_val, 0, arg_count);\n                 let len = Load(bcx, expr::get_meta(bcx, val.val));\n                 Store(bcx, data, expr::get_dataptr(bcx, scratch));"}, {"sha": "28047ee5812e7b072ae9cff6f6bef6d7fe8cf6af", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=727a5d543d662231224002c3345f78b0bebf8c6b", "patch": "@@ -1020,8 +1020,7 @@ pub fn alloc_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, name: &str) ->\n     let ccx = bcx.ccx();\n     let ty = type_of::type_of(ccx, t);\n     assert!(!t.has_param_types());\n-    let val = alloca(bcx, ty, name);\n-    return val;\n+    alloca(bcx, ty, name)\n }\n \n pub fn alloca(cx: Block, ty: Type, name: &str) -> ValueRef {"}, {"sha": "e0a65c93669c4583c9f176d182ca9aa547b20372", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=727a5d543d662231224002c3345f78b0bebf8c6b", "patch": "@@ -101,7 +101,6 @@ use trans::cleanup;\n use trans::cleanup::{CleanupMethods, DropHintDatum, DropHintMethods};\n use trans::expr;\n use trans::tvec;\n-use trans::type_of;\n use middle::ty::Ty;\n \n use std::fmt;\n@@ -302,8 +301,7 @@ pub fn lvalue_scratch_datum<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n                                               -> DatumBlock<'blk, 'tcx, Lvalue> where\n     F: FnOnce(A, Block<'blk, 'tcx>, ValueRef) -> Block<'blk, 'tcx>,\n {\n-    let llty = type_of::type_of(bcx.ccx(), ty);\n-    let scratch = alloca(bcx, llty, name);\n+    let scratch = alloc_ty(bcx, ty, name);\n \n     // Subtle. Populate the scratch memory *before* scheduling cleanup.\n     call_lifetime_start(bcx, scratch);\n@@ -323,8 +321,7 @@ pub fn rvalue_scratch_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                         ty: Ty<'tcx>,\n                                         name: &str)\n                                         -> Datum<'tcx, Rvalue> {\n-    let llty = type_of::type_of(bcx.ccx(), ty);\n-    let scratch = alloca(bcx, llty, name);\n+    let scratch = alloc_ty(bcx, ty, name);\n     call_lifetime_start(bcx, scratch);\n     Datum::new(scratch, ty, Rvalue::new(ByRef))\n }"}, {"sha": "b17b3e1395aacd4514b3a1b4537d0aa46684ebc7", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=727a5d543d662231224002c3345f78b0bebf8c6b", "patch": "@@ -246,8 +246,7 @@ pub fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // Maybe just get the value directly, instead of loading it?\n             immediate_rvalue(load_ty(bcx, global, const_ty), const_ty)\n         } else {\n-            let llty = type_of::type_of(bcx.ccx(), const_ty);\n-            let scratch = alloca(bcx, llty, \"const\");\n+            let scratch = alloc_ty(bcx, const_ty, \"const\");\n             call_lifetime_start(bcx, scratch);\n             let lldest = if !const_ty.is_structural() {\n                 // Cast pointer to slot, because constants have different types.\n@@ -410,9 +409,8 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     datum.to_rvalue_datum(bcx, \"__coerce_source\"));\n \n                 let target = bcx.monomorphize(&target);\n-                let llty = type_of::type_of(bcx.ccx(), target);\n \n-                let scratch = alloca(bcx, llty, \"__coerce_target\");\n+                let scratch = alloc_ty(bcx, target, \"__coerce_target\");\n                 call_lifetime_start(bcx, scratch);\n                 let target_datum = Datum::new(scratch, target,\n                                               Rvalue::new(ByRef));"}, {"sha": "4949539c136d0cf62930b669ffc6298c24339d3a", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=727a5d543d662231224002c3345f78b0bebf8c6b", "patch": "@@ -296,10 +296,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         // Ensure that we always have the Rust value indirectly,\n         // because it makes bitcasting easier.\n         if !rust_indirect {\n-            let scratch =\n-                base::alloca(bcx,\n-                             type_of::type_of(ccx, passed_arg_tys[i]),\n-                             \"__arg\");\n+            let scratch = base::alloc_ty(bcx, passed_arg_tys[i], \"__arg\");\n             if type_is_fat_ptr(ccx.tcx(), passed_arg_tys[i]) {\n                 Store(bcx, llargs_rust[i + offset], expr::get_dataptr(bcx, scratch));\n                 Store(bcx, llargs_rust[i + offset + 1], expr::get_meta(bcx, scratch));"}, {"sha": "7a7e0436871538c4fde4d3e83c33ddc7bf058d93", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=727a5d543d662231224002c3345f78b0bebf8c6b", "patch": "@@ -187,7 +187,7 @@ pub fn drop_ty_immediate<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                      skip_dtor: bool)\n                                      -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"drop_ty_immediate\");\n-    let vp = alloca(bcx, type_of(bcx.ccx(), t), \"\");\n+    let vp = alloc_ty(bcx, t, \"\");\n     call_lifetime_start(bcx, vp);\n     store_ty(bcx, v, vp, t);\n     let bcx = drop_ty_core(bcx, vp, t, debug_loc, skip_dtor, None);"}, {"sha": "019c38869b27d9231886836779603d8a4ea3886f", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727a5d543d662231224002c3345f78b0bebf8c6b/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=727a5d543d662231224002c3345f78b0bebf8c6b", "patch": "@@ -106,11 +106,10 @@ pub fn trans_slice_vec<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debug!(\"    vt={}, count={}\", vt.to_string(ccx), count);\n \n     let fixed_ty = bcx.tcx().mk_array(vt.unit_ty, count);\n-    let llfixed_ty = type_of::type_of(bcx.ccx(), fixed_ty);\n \n     // Always create an alloca even if zero-sized, to preserve\n     // the non-null invariant of the inner slice ptr\n-    let llfixed = base::alloca(bcx, llfixed_ty, \"\");\n+    let llfixed = base::alloc_ty(bcx, fixed_ty, \"\");\n     call_lifetime_start(bcx, llfixed);\n \n     if count > 0 {"}]}