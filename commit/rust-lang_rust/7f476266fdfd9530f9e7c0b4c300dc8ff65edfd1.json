{"sha": "7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNDc2MjY2ZmRmZDk1MzBmOWU3YzBiNGMzMDBkYzhmZjY1ZWRmZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-21T17:09:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-21T17:09:57Z"}, "message": "Auto merge of #1248 - RalfJung:overflow, r=RalfJung\n\ndetect UB: overflow in copy/write_bytes\n\nFixes https://github.com/rust-lang/miri/issues/1234", "tree": {"sha": "dd68caa423a8305c76c90e1986099cf191f050d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd68caa423a8305c76c90e1986099cf191f050d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "html_url": "https://github.com/rust-lang/rust/commit/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ab91d08710b8db63ac2c518a507d84311c9c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ab91d08710b8db63ac2c518a507d84311c9c8d", "html_url": "https://github.com/rust-lang/rust/commit/70ab91d08710b8db63ac2c518a507d84311c9c8d"}, {"sha": "238ed49a07b94e0f34f39cb88198fc868b781f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/238ed49a07b94e0f34f39cb88198fc868b781f0c", "html_url": "https://github.com/rust-lang/rust/commit/238ed49a07b94e0f34f39cb88198fc868b781f0c"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "47ff5024fc63356b44da641c12aadfe4c6855771", "filename": "miri", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/miri", "raw_url": "https://github.com/rust-lang/rust/raw/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "patch": "@@ -11,6 +11,9 @@ working directory.\n ./miri build <flags>:\n Just build miri.  <flags> are passed to `cargo build`.\n \n+./miri check <flags>:\n+Just check miri.  <flags> are passed to `cargo check`.\n+\n ./miri test <flags>:\n Build miri, set up a sysroot and then run the test suite. <flags> are passed\n to the final `cargo test` invocation.\n@@ -99,6 +102,10 @@ install|install-debug)\n     # \"--offline\" to avoid querying the registry (for yanked packages).\n     exec cargo install $CARGO_INSTALL_FLAGS --path \"$(dirname \"$0\")\" --force --locked --offline \"$@\"\n     ;;\n+check|check-debug)\n+    # Check, and let caller control flags.\n+    exec cargo check $CARGO_BUILD_FLAGS \"$@\"\n+    ;;\n build|build-debug)\n     # Build, and let caller control flags.\n     exec cargo build $CARGO_BUILD_FLAGS \"$@\""}, {"sha": "9a6bd58ba42e1d9a8d3506582cfabfebfa4c5df3", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "patch": "@@ -4,7 +4,7 @@ use std::convert::TryFrom;\n use rustc::mir;\n use rustc::mir::interpret::{InterpResult, PointerArithmetic};\n use rustc::ty;\n-use rustc::ty::layout::{Align, LayoutOf, Size};\n+use rustc::ty::layout::{Align, LayoutOf};\n use rustc_apfloat::Float;\n use rustc_span::source_map::Span;\n \n@@ -226,11 +226,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             => {\n                 let elem_ty = substs.type_at(0);\n                 let elem_layout = this.layout_of(elem_ty)?;\n-                let elem_size = elem_layout.size.bytes();\n                 let count = this.read_scalar(args[2])?.to_machine_usize(this)?;\n                 let elem_align = elem_layout.align.abi;\n \n-                let size = Size::from_bytes(count) * elem_size;\n+                let size = elem_layout.size.checked_mul(count, this)\n+                    .ok_or_else(|| err_ub_format!(\"overflow computing total size of `{}`\", intrinsic_name))?;\n                 let src = this.read_scalar(args[0])?.not_undef()?;\n                 let src = this.memory.check_ptr_access(src, size, elem_align)?;\n                 let dest = this.read_scalar(args[1])?.not_undef()?;\n@@ -493,7 +493,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let val_byte = this.read_scalar(args[1])?.to_u8()?;\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let count = this.read_scalar(args[2])?.to_machine_usize(this)?;\n-                let byte_count = ty_layout.size * count;\n+                let byte_count = ty_layout.size.checked_mul(count, this)\n+                    .ok_or_else(|| err_ub_format!(\"overflow computing total size of `write_bytes`\"))?;\n                 this.memory\n                     .write_bytes(ptr, iter::repeat(val_byte).take(byte_count.bytes() as usize))?;\n             }"}, {"sha": "b14bdc4b3863273f4f38ff006ce6267e7875038d", "filename": "tests/compile-fail/copy_null.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/tests%2Fcompile-fail%2Fcopy_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/tests%2Fcompile-fail%2Fcopy_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_null.rs?ref=7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "patch": "@@ -1,4 +1,3 @@\n-//error-pattern: invalid use of NULL pointer\n #![feature(intrinsics)]\n \n // Directly call intrinsic to avoid debug assertions in libstd\n@@ -10,5 +9,5 @@ fn main() {\n     let mut data = [0u16; 4];\n     let ptr = &mut data[0] as *mut u16;\n     // Even copying 0 elements from NULL should error.\n-    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); }\n+    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); } //~ ERROR: invalid use of NULL pointer\n }"}, {"sha": "c75cf6917b108f7c23120816ff8d0db9e9b29221", "filename": "tests/compile-fail/copy_overflow.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/tests%2Fcompile-fail%2Fcopy_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/tests%2Fcompile-fail%2Fcopy_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_overflow.rs?ref=7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern: overflow computing total size of `copy`\n+use std::mem;\n+\n+fn main() {\n+    let x = 0;\n+    let mut y = 0;\n+    unsafe {\n+        (&mut y as *mut i32).copy_from(&x, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+    }\n+}"}, {"sha": "e80222162ee38f4a9b6c72a1423bb93fac13c3b5", "filename": "tests/compile-fail/write_bytes_null.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/tests%2Fcompile-fail%2Fwrite_bytes_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/tests%2Fcompile-fail%2Fwrite_bytes_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwrite_bytes_null.rs?ref=7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "patch": "@@ -0,0 +1,10 @@\n+#![feature(intrinsics)]\n+\n+// Directly call intrinsic to avoid debug assertions in libstd\n+extern \"rust-intrinsic\" {\n+    fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n+}\n+\n+fn main() {\n+    unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) }; //~ ERROR invalid use of NULL pointer\n+}"}, {"sha": "a6bf2acb16f30b224cc7653275c259f6c2d8c5e4", "filename": "tests/compile-fail/write_bytes_overflow.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/tests%2Fcompile-fail%2Fwrite_bytes_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1/tests%2Fcompile-fail%2Fwrite_bytes_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwrite_bytes_overflow.rs?ref=7f476266fdfd9530f9e7c0b4c300dc8ff65edfd1", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: overflow computing total size of `write_bytes`\n+use std::mem;\n+\n+fn main() {\n+    let mut y = 0;\n+    unsafe {\n+        (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+    }\n+}"}]}