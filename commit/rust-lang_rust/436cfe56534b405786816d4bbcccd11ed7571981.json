{"sha": "436cfe56534b405786816d4bbcccd11ed7571981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNmNmZTU2NTM0YjQwNTc4NjgxNmQ0YmJjY2NkMTFlZDc1NzE5ODE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-26T16:23:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:35Z"}, "message": "Fix type encoding/decoding for unions\n\nFix union debuginfo test on lldb", "tree": {"sha": "21c4e2972397731442e7753a991f69288fb9b3c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c4e2972397731442e7753a991f69288fb9b3c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/436cfe56534b405786816d4bbcccd11ed7571981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/436cfe56534b405786816d4bbcccd11ed7571981", "html_url": "https://github.com/rust-lang/rust/commit/436cfe56534b405786816d4bbcccd11ed7571981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/436cfe56534b405786816d4bbcccd11ed7571981/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93067ca089ea570e4e2bdfc456958c81a4d1e092", "url": "https://api.github.com/repos/rust-lang/rust/commits/93067ca089ea570e4e2bdfc456958c81a4d1e092", "html_url": "https://github.com/rust-lang/rust/commit/93067ca089ea570e4e2bdfc456958c81a4d1e092"}], "stats": {"total": 96, "additions": 46, "deletions": 50}, "files": [{"sha": "aeb95e5670d6a9e029f59d0136129bc1c6db7fa4", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436cfe56534b405786816d4bbcccd11ed7571981/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436cfe56534b405786816d4bbcccd11ed7571981/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=436cfe56534b405786816d4bbcccd11ed7571981", "patch": "@@ -291,7 +291,7 @@ fn maybe_item_name(item: rbml::Doc) -> Option<ast::Name> {\n \n fn family_to_variant_kind<'tcx>(family: Family) -> Option<ty::VariantKind> {\n     match family {\n-        Struct(VariantKind::Struct) | Variant(VariantKind::Struct) =>\n+        Struct(VariantKind::Struct) | Variant(VariantKind::Struct) | Union =>\n             Some(ty::VariantKind::Struct),\n         Struct(VariantKind::Tuple) | Variant(VariantKind::Tuple) =>\n             Some(ty::VariantKind::Tuple),"}, {"sha": "55ff4817683de523072f78987c21f87e44628649", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/436cfe56534b405786816d4bbcccd11ed7571981/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436cfe56534b405786816d4bbcccd11ed7571981/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=436cfe56534b405786816d4bbcccd11ed7571981", "patch": "@@ -472,6 +472,14 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 let def = self.tcx.lookup_adt_def(did);\n                 return self.tcx.mk_struct(def, substs);\n             }\n+            'U' => {\n+                assert_eq!(self.next(), '[');\n+                let did = self.parse_def();\n+                let substs = self.parse_substs();\n+                assert_eq!(self.next(), ']');\n+                let def = self.tcx.lookup_adt_def(did);\n+                return self.tcx.mk_union(def, substs);\n+            }\n             'k' => {\n                 assert_eq!(self.next(), '[');\n                 let did = self.parse_def();"}, {"sha": "bef3cf3a1940f965ec472504327f0c5ab1c5eee9", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436cfe56534b405786816d4bbcccd11ed7571981/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436cfe56534b405786816d4bbcccd11ed7571981/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=436cfe56534b405786816d4bbcccd11ed7571981", "patch": "@@ -171,7 +171,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n             write!(w, \"]\");\n         }\n         ty::TyUnion(def, substs) => {\n-            write!(w, \"u[{}|\", (cx.ds)(cx.tcx, def.did));\n+            write!(w, \"U[{}|\", (cx.ds)(cx.tcx, def.did));\n             enc_substs(w, cx, substs);\n             write!(w, \"]\");\n         }"}, {"sha": "319927c979bf89798efa68997926ca4989182b4d", "filename": "src/test/debuginfo/union-smoke.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/436cfe56534b405786816d4bbcccd11ed7571981/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436cfe56534b405786816d4bbcccd11ed7571981/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs?ref=436cfe56534b405786816d4bbcccd11ed7571981", "patch": "@@ -23,10 +23,10 @@\n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n-// lldb-command:print a\n-// lldb-check:[...]$0 = {a = {__0 = 2 '\\002', __1 = 2 '\\002'}, b = 514}\n+// lldb-command:print u\n+// lldb-check:[...]$0 = { a = ('\\x02', '\\x02') b = 514 }\n // lldb-command:print union_smoke::SU\n-// lldb-check:[...]$1 = {a = {__0 = 1 '\\001', __1 = 1 '\\001'}, b = 257}\n+// lldb-check:[...]$1 = 257\n \n #![allow(unused)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "0231e38a729b731827cf3e3f5d03ac7d3bb54cc6", "filename": "src/test/run-pass/union/auxiliary/union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/436cfe56534b405786816d4bbcccd11ed7571981/src%2Ftest%2Frun-pass%2Funion%2Fauxiliary%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436cfe56534b405786816d4bbcccd11ed7571981/src%2Ftest%2Frun-pass%2Funion%2Fauxiliary%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Fauxiliary%2Funion.rs?ref=436cfe56534b405786816d4bbcccd11ed7571981", "patch": "@@ -12,5 +12,5 @@\n \n pub union U {\n     pub a: u8,\n-    b: u16,\n+    pub b: u16,\n }"}, {"sha": "d23af4b41b73f71065834d9cede504dd3374a312", "filename": "src/test/run-pass/union/union-basic.rs", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/436cfe56534b405786816d4bbcccd11ed7571981/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/436cfe56534b405786816d4bbcccd11ed7571981/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs?ref=436cfe56534b405786816d4bbcccd11ed7571981", "patch": "@@ -8,47 +8,51 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:union.rs\n+\n #![feature(untagged_unions)]\n \n+extern crate union;\n use std::mem::{size_of, align_of, zeroed};\n \n union U {\n     a: u8,\n+    b: u16\n }\n \n-union U64 {\n-    a: u64,\n-}\n+fn local() {\n+    assert_eq!(size_of::<U>(), 2);\n+    assert_eq!(align_of::<U>(), 2);\n \n-union W {\n-    a: u8,\n-    b: u64,\n-}\n+    let u = U { a: 10 };\n+    unsafe {\n+        assert_eq!(u.a, 10);\n+        let U { a } = u;\n+        assert_eq!(a, 10);\n+    }\n \n-#[repr(C)]\n-union Y {\n-    f1: u16,\n-    f2: [u8; 4],\n+    let mut w = U { b: 0 };\n+    unsafe {\n+        assert_eq!(w.a, 0);\n+        assert_eq!(w.b, 0);\n+        w.a = 1;\n+        assert_eq!(w.a, 1);\n+        assert_eq!(w.b, 1);\n+    }\n }\n \n-fn main() {\n-    assert_eq!(size_of::<U>(), 1);\n-    assert_eq!(size_of::<U64>(), 8);\n-    assert_eq!(size_of::<W>(), 8);\n-    assert_eq!(align_of::<U>(), 1);\n-    assert_eq!(align_of::<U64>(), align_of::<u64>());\n-    assert_eq!(align_of::<W>(), align_of::<u64>());\n-    assert_eq!(size_of::<Y>(), 4);\n-    assert_eq!(align_of::<Y>(), 2);\n+fn xcrate() {\n+    assert_eq!(size_of::<union::U>(), 2);\n+    assert_eq!(align_of::<union::U>(), 2);\n \n-    let u = U { a: 10 };\n+    let u = union::U { a: 10 };\n     unsafe {\n         assert_eq!(u.a, 10);\n-        let U { a } = u;\n+        let union::U { a } = u;\n         assert_eq!(a, 10);\n     }\n \n-    let mut w = W { b: 0 };\n+    let mut w = union::U { b: 0 };\n     unsafe {\n         assert_eq!(w.a, 0);\n         assert_eq!(w.b, 0);\n@@ -57,3 +61,8 @@ fn main() {\n         assert_eq!(w.b, 1);\n     }\n }\n+\n+fn main() {\n+    local();\n+    xcrate();\n+}"}, {"sha": "2a76c96ef25f545b518bdb1a7f8c7a2a579015a1", "filename": "src/test/run-pass/union/union-xcrate.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-xcrate.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:union.rs\n-\n-// #![feature(untagged_unions)]\n-\n-extern crate union;\n-\n-type A = union::U;\n-\n-fn main() {\n-    assert_eq!(std::mem::size_of::<A>(), 8);\n-}"}]}