{"sha": "df3de7b4b3e91a4a8d2bbea60970d74d445c3da0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmM2RlN2I0YjNlOTFhNGE4ZDJiYmVhNjA5NzBkNzRkNDQ1YzNkYTA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-25T17:26:34Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-13T20:05:21Z"}, "message": "Add some more comments on how TestKind works", "tree": {"sha": "89e299a1d83e9b86dee98fac55bfb06dff9a53d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e299a1d83e9b86dee98fac55bfb06dff9a53d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0", "html_url": "https://github.com/rust-lang/rust/commit/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d0266878793bc8b2bf50958eb529005ed19da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d0266878793bc8b2bf50958eb529005ed19da0", "html_url": "https://github.com/rust-lang/rust/commit/a1d0266878793bc8b2bf50958eb529005ed19da0"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "6df43596673cf213cd02c22c194a8162da808d38", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=df3de7b4b3e91a4a8d2bbea60970d74d445c3da0", "patch": "@@ -1196,8 +1196,8 @@ pub enum TerminatorKind<'tcx> {\n     FalseEdges {\n         /// The target normal control flow will take\n         real_target: BasicBlock,\n-        /// A block control flow could conceptually take, but won't\n-        /// in practice\n+        /// A block control flow could conceptually jump to, but won't in\n+        /// practice\n         imaginary_target: BasicBlock,\n     },\n     /// A terminator for blocks that only take one path in reality, but where we"}, {"sha": "254f2a4e2a25c5ef1096dab037e8c0460862ee29", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=df3de7b4b3e91a4a8d2bbea60970d74d445c3da0", "patch": "@@ -715,29 +715,46 @@ pub struct MatchPair<'pat, 'tcx: 'pat> {\n \n #[derive(Clone, Debug, PartialEq)]\n enum TestKind<'tcx> {\n-    // test the branches of enum\n+    /// Test the branches of enum.\n     Switch {\n+        /// The enum being tested\n         adt_def: &'tcx ty::AdtDef,\n+        /// The set of variants that we should create a branch for. We also\n+        /// create an additional \"otherwise\" case.\n         variants: BitSet<VariantIdx>,\n     },\n \n-    // test the branches of enum\n+    /// Test what value an `integer`, `bool` or `char` has.\n     SwitchInt {\n+        /// The type of the value that we're testing.\n         switch_ty: Ty<'tcx>,\n+        /// The (ordered) set of values that we test for.\n+        ///\n+        /// For integers and `char`s we create a branch to each of the values in\n+        /// `options`, as well as an \"otherwise\" branch for all other values, even\n+        /// in the (rare) case that options is exhaustive.\n+        ///\n+        /// For `bool` we always generate two edges, one for `true` and one for\n+        /// `false`.\n         options: Vec<u128>,\n+        /// Reverse map used to ensure that the values in `options` are unique.\n         indices: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n     },\n \n-    // test for equality\n+    /// Test for equality with value, possibly after an unsizing coercion to\n+    /// `ty`,\n     Eq {\n         value: &'tcx ty::Const<'tcx>,\n+        // Integer types are handled by `SwitchInt`, and constants with ADT\n+        // types are converted back into patterns, so this can only be `&str`,\n+        // `&[T]`, `f32` or `f64`.\n         ty: Ty<'tcx>,\n     },\n \n-    // test whether the value falls within an inclusive or exclusive range\n+    /// Test whether the value falls within an inclusive or exclusive range\n     Range(PatternRange<'tcx>),\n \n-    // test length of the slice is equal to len\n+    /// Test length of the slice is equal to len\n     Len {\n         len: u64,\n         op: BinOp,"}, {"sha": "21ff16104dcfb971febda663b3550c4c474aea69", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3de7b4b3e91a4a8d2bbea60970d74d445c3da0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=df3de7b4b3e91a4a8d2bbea60970d74d445c3da0", "patch": "@@ -807,10 +807,16 @@ impl Test<'_> {\n                 2\n             }\n             TestKind::Switch { adt_def, .. } => {\n+                // While the switch that we generate doesn't test for all\n+                // variants, we have a target for each variant and the\n+                // otherwise case, and we make sure that all of the cases not\n+                // specified have the same block.\n                 adt_def.variants.len() + 1\n             }\n             TestKind::SwitchInt { switch_ty, ref options, .. } => {\n                 if switch_ty.is_bool() {\n+                    // `bool` is special cased in `perform_test` to always\n+                    // branch to two blocks.\n                     2\n                 } else {\n                     options.len() + 1"}]}