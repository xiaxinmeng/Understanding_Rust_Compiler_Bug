{"sha": "2534b287a6078688db25ee36ad084afc7378f6e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzRiMjg3YTYwNzg2ODhkYjI1ZWUzNmFkMDg0YWZjNzM3OGY2ZTQ=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-07-07T15:31:50Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-07-07T15:31:50Z"}, "message": "Add doc links to liballoc crate page", "tree": {"sha": "fdf7203b5a27ec192b267d452a52980218aafc14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf7203b5a27ec192b267d452a52980218aafc14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2534b287a6078688db25ee36ad084afc7378f6e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2534b287a6078688db25ee36ad084afc7378f6e4", "html_url": "https://github.com/rust-lang/rust/commit/2534b287a6078688db25ee36ad084afc7378f6e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2534b287a6078688db25ee36ad084afc7378f6e4/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481068a707679257e2a738b40987246e0420e787", "url": "https://api.github.com/repos/rust-lang/rust/commits/481068a707679257e2a738b40987246e0420e787", "html_url": "https://github.com/rust-lang/rust/commit/481068a707679257e2a738b40987246e0420e787"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "ca0c61c599e003605d3aed743456a5d569949f76", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2534b287a6078688db25ee36ad084afc7378f6e4/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2534b287a6078688db25ee36ad084afc7378f6e4/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=2534b287a6078688db25ee36ad084afc7378f6e4", "patch": "@@ -10,30 +10,30 @@\n //!\n //! ## Boxed values\n //!\n-//! The [`Box`](boxed/index.html) type is a smart pointer type. There can\n-//! only be one owner of a `Box`, and the owner can decide to mutate the\n-//! contents, which live on the heap.\n+//! The [`Box`] type is a smart pointer type. There can only be one owner of a\n+//! [`Box`], and the owner can decide to mutate the contents, which live on the\n+//! heap.\n //!\n //! This type can be sent among threads efficiently as the size of a `Box` value\n //! is the same as that of a pointer. Tree-like data structures are often built\n //! with boxes because each node often has only one owner, the parent.\n //!\n //! ## Reference counted pointers\n //!\n-//! The [`Rc`](rc/index.html) type is a non-threadsafe reference-counted pointer\n-//! type intended for sharing memory within a thread. An `Rc` pointer wraps a\n-//! type, `T`, and only allows access to `&T`, a shared reference.\n+//! The [`Rc`] type is a non-threadsafe reference-counted pointer type intended\n+//! for sharing memory within a thread. An [`Rc`] pointer wraps a type, `T`, and\n+//! only allows access to `&T`, a shared reference.\n //!\n-//! This type is useful when inherited mutability (such as using `Box`) is too\n-//! constraining for an application, and is often paired with the `Cell` or\n-//! `RefCell` types in order to allow mutation.\n+//! This type is useful when inherited mutability (such as using [`Box`]) is too\n+//! constraining for an application, and is often paired with the [`Cell`] or\n+//! [`RefCell`] types in order to allow mutation.\n //!\n //! ## Atomically reference counted pointers\n //!\n-//! The [`Arc`](sync/index.html) type is the threadsafe equivalent of the `Rc`\n-//! type. It provides all the same functionality of `Rc`, except it requires\n-//! that the contained type `T` is shareable. Additionally, `Arc<T>` is itself\n-//! sendable while `Rc<T>` is not.\n+//! The [`Arc`] type is the threadsafe equivalent of the [`Rc`] type. It\n+//! provides all the same functionality of [`Rc`], except it requires that the\n+//! contained type `T` is shareable. Additionally, [`Arc<T>`][`Arc`] is itself\n+//! sendable while [`Rc<T>`][`Rc`] is not.\n //!\n //! This type allows for shared access to the contained data, and is often\n //! paired with synchronization primitives such as mutexes to allow mutation of\n@@ -49,6 +49,12 @@\n //!\n //! The [`alloc`](alloc/index.html) module defines the low-level interface to the\n //! default global allocator. It is not compatible with the libc allocator API.\n+//!\n+//! [`Arc`]: sync/index.html\n+//! [`Box`]: boxed/index.html\n+//! [`Cell`]: ../core/cell/index.html\n+//! [`Rc`]: rc/index.html\n+//! [`RefCell`]: ../core/cell/index.html\n \n #![allow(unused_attributes)]\n #![stable(feature = \"alloc\", since = \"1.36.0\")]"}]}