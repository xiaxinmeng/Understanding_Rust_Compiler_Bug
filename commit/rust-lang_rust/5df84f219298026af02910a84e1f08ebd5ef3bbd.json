{"sha": "5df84f219298026af02910a84e1f08ebd5ef3bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZjg0ZjIxOTI5ODAyNmFmMDI5MTBhODRlMWYwOGViZDVlZjNiYmQ=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-08-18T14:37:31Z"}, "committer": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-08-18T14:37:31Z"}, "message": "Merge branch 'origin/master' into suspicious_map", "tree": {"sha": "3daa22fae27357083a1056a4323ccbd05c8092da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3daa22fae27357083a1056a4323ccbd05c8092da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5df84f219298026af02910a84e1f08ebd5ef3bbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENfZy0Nd1FLYaZCRY7vypMUgEJlUFAl1ZYrMACgkQ7vypMUgE\nJlXBMQ//ZcBMvSk7PCIRACp2eR4G3qP+sJTpQiJEd1rpxX4lhNG6UBFq+FeXIYvC\nu7yu8M4QCIflqolC0DW5aYjJqhyGzWxZ5eMABP0oxsYpIW4tsPue8LMIEpgBbnv6\naNTmncBB7hGIniFwAxg9t7I1Yznl/GZ6JM1Y9TFxJO87tG8KEg7mZALvDcQqKIAO\n09AGk4Tv4V6uMiv3JfEfPE2bIy/US7YcaBceexl0sgU7qIzzbcwMbOOUHf4aQ9X3\nZhasojVCuO0AfxVW+NIiXC/NWkg/oMOKZunRCoXetmI9DmWU6BwQMd69Q+Sh2HUk\n1m6IYdovtg6OqpvpcwenfCNc66oX1qlSi/MtKV9tP6tg5m+upGp0Wq6KpHaLqz+1\nnG8RNq/AV6WLzeroNmMr63tizMD1qOoMUGHTVmIy+OLZSsdlqbjBef6HKLXgm0ff\nitMUDZ7p3XT7pXskjty4dZBTb4UBc/BM0VvYJaadlemVsoHyZVBTaqKJySsl51qJ\nYwHHDd7+eCBFGZvKUz1UYTl8AiE2qfNrB+cnS2ehLkSWNk0ov1kykRSZCZT1YpOS\nSbQ7Ul5gF794KEyH/nj96R8M9N5wDmjeo9FJ4fAIFpykCIKQJlXC1jeUm2KqpN9f\nPIklqu8X3/FDLKGHGUZNzCkP3WL+TCy1Y8PS9vOYaHlFGQaV0A4=\n=CVN2\n-----END PGP SIGNATURE-----", "payload": "tree 3daa22fae27357083a1056a4323ccbd05c8092da\nparent 72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36\nparent e92c48989f1c8a3356cde3829c88408da9d8c983\nauthor Jeremy Stucki <jeremy@myelin.ch> 1566139051 +0200\ncommitter Jeremy Stucki <jeremy@myelin.ch> 1566139051 +0200\n\nMerge branch 'origin/master' into suspicious_map\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5df84f219298026af02910a84e1f08ebd5ef3bbd", "html_url": "https://github.com/rust-lang/rust/commit/5df84f219298026af02910a84e1f08ebd5ef3bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5df84f219298026af02910a84e1f08ebd5ef3bbd/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36", "html_url": "https://github.com/rust-lang/rust/commit/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36"}, {"sha": "e92c48989f1c8a3356cde3829c88408da9d8c983", "url": "https://api.github.com/repos/rust-lang/rust/commits/e92c48989f1c8a3356cde3829c88408da9d8c983", "html_url": "https://github.com/rust-lang/rust/commit/e92c48989f1c8a3356cde3829c88408da9d8c983"}], "stats": {"total": 327, "additions": 153, "deletions": 174}, "files": [{"sha": "b85605dc3b316f64d4f5ccd7eac6d0f909e98876", "filename": "PUBLISH.md", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/PUBLISH.md", "raw_url": "https://github.com/rust-lang/rust/raw/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/PUBLISH.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/PUBLISH.md?ref=72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36", "patch": "@@ -1,14 +0,0 @@\n-Steps to publish a new Clippy version\n-\n-- Bump `package.version` in `./Cargo.toml` (no need to manually bump `dependencies.clippy_lints.version`).\n-- Write a changelog entry.\n-- Run `./pre_publish.sh`\n-- Review and commit all changed files\n-- `git push`\n-- Wait for Travis's approval.\n-- Merge.\n-- `cargo publish` in `./clippy_lints`.\n-- `cargo publish` in the root directory.\n-- `git pull`.\n-- `git tag -s v0.0.X -m \"v0.0.X\"`.\n-- `git push --tags`."}, {"sha": "32ca1cc1bb99fea654cee0a0f7703a96c2e6b6f8", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -1,11 +1,9 @@\n-use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-use syntax_pos::Span;\n \n use crate::consts::{constant, Constant};\n-use crate::utils::{in_macro_or_desugar, is_direct_expn_of, span_help_and_lint};\n+use crate::utils::{in_macro_or_desugar, is_direct_expn_of, is_expn_of, span_help_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n@@ -33,42 +31,39 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        let mut is_debug_assert = false;\n-        let debug_assert_not_in_macro_or_desugar = |span: Span| {\n-            is_debug_assert = true;\n-            // Check that `debug_assert!` itself is not inside a macro\n-            !in_macro_or_desugar(span)\n-        };\n-        if_chain! {\n-            if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\");\n-            if !in_macro_or_desugar(assert_span)\n-                || is_direct_expn_of(assert_span, \"debug_assert\")\n-                    .map_or(false, debug_assert_not_in_macro_or_desugar);\n-            if let ExprKind::Unary(_, ref lit) = e.node;\n-            if let Some(bool_const) = constant(cx, cx.tables, lit);\n-            then {\n-                match bool_const.0 {\n-                    Constant::Bool(true) => {\n+        let lint_assert_cb = |is_debug_assert: bool| {\n+            if let ExprKind::Unary(_, ref lit) = e.node {\n+                if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.tables, lit) {\n+                    if is_true {\n                         span_help_and_lint(\n                             cx,\n                             ASSERTIONS_ON_CONSTANTS,\n                             e.span,\n                             \"`assert!(true)` will be optimized out by the compiler\",\n-                            \"remove it\"\n+                            \"remove it\",\n                         );\n-                    },\n-                    Constant::Bool(false) if !is_debug_assert => {\n+                    } else if !is_debug_assert {\n                         span_help_and_lint(\n                             cx,\n                             ASSERTIONS_ON_CONSTANTS,\n                             e.span,\n                             \"`assert!(false)` should probably be replaced\",\n-                            \"use `panic!()` or `unreachable!()`\"\n+                            \"use `panic!()` or `unreachable!()`\",\n                         );\n-                    },\n-                    _ => (),\n+                    }\n                 }\n             }\n+        };\n+        if let Some(debug_assert_span) = is_expn_of(e.span, \"debug_assert\") {\n+            if in_macro_or_desugar(debug_assert_span) {\n+                return;\n+            }\n+            lint_assert_cb(true);\n+        } else if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\") {\n+            if in_macro_or_desugar(assert_span) {\n+                return;\n+            }\n+            lint_assert_cb(false);\n         }\n     }\n }"}, {"sha": "01989625b45a9a15a0d4d57658faae09e11f9387", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -298,14 +298,14 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalI\n                     bindings_impl(cx, as_pat, map);\n                 }\n             },\n-            PatKind::Struct(_, ref fields, _) => {\n+            PatKind::Or(ref fields) | PatKind::Tuple(ref fields, _) => {\n                 for pat in fields {\n-                    bindings_impl(cx, &pat.node.pat, map);\n+                    bindings_impl(cx, pat, map);\n                 }\n             },\n-            PatKind::Tuple(ref fields, _) => {\n+            PatKind::Struct(_, ref fields, _) => {\n                 for pat in fields {\n-                    bindings_impl(cx, pat, map);\n+                    bindings_impl(cx, &pat.pat, map);\n                 }\n             },\n             PatKind::Slice(ref lhs, ref mid, ref rhs) => {"}, {"sha": "1dcdaac9b862a3ef82b97a01421a7eee0d3b7790", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -31,8 +31,8 @@ declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n \n impl EarlyLintPass for DbgMacro {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n-        if mac.node.path == sym!(dbg) {\n-            if let Some(sugg) = tts_span(mac.node.tts.clone()).and_then(|span| snippet_opt(cx, span)) {\n+        if mac.path == sym!(dbg) {\n+            if let Some(sugg) = tts_span(mac.tts.clone()).and_then(|span| snippet_opt(cx, span)) {\n                 span_lint_and_sugg(\n                     cx,\n                     DBG_MACRO,"}, {"sha": "308c3e918e85acb584679cd0cfa4d9bac1a5b87b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -445,7 +445,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_early_lint_pass(box utils::internal_lints::ClippyLintsInternal);\n     reg.register_late_lint_pass(box utils::internal_lints::CompilerLintFunctions::new());\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n-    reg.register_late_lint_pass(box utils::internal_lints::OuterExpnInfoPass);\n+    reg.register_late_lint_pass(box utils::internal_lints::OuterExpnDataPass);\n     reg.register_late_lint_pass(box utils::inspector::DeepCodeInspector);\n     reg.register_late_lint_pass(box utils::author::Author);\n     reg.register_late_lint_pass(box types::Types);\n@@ -682,7 +682,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        utils::internal_lints::OUTER_EXPN_EXPN_INFO,\n+        utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n     ]);\n \n     reg.register_lint_group(\"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "52265ae55bf11d1b4cf1842c436cafb6261377a3", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -41,7 +41,7 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for matches with a two arms where an `if let else` will\n+    /// **What it does:** Checks for matches with two arms where an `if let else` will\n     /// usually suffice.\n     ///\n     /// **Why is this bad?** Just readability \u2013 `if let` nests less than a `match`.\n@@ -76,7 +76,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SINGLE_MATCH_ELSE,\n     pedantic,\n-    \"a match statement with a two arms where the second arm's pattern is a placeholder instead of a specific match pattern\"\n+    \"a match statement with two arms where the second arm's pattern is a placeholder instead of a specific match pattern\"\n }\n \n declare_clippy_lint! {"}, {"sha": "a127431e2d53324a9448d46af8d3c286dec9785b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -625,13 +625,17 @@ fn is_used(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n /// generated by `#[derive(...)]` or the like).\n fn in_attributes_expansion(expr: &Expr) -> bool {\n     use syntax::ext::hygiene::MacroKind;\n-    expr.span.ctxt().outer_expn_info().map_or(false, |info| {\n-        if let ExpnKind::Macro(MacroKind::Attr, _) = info.kind {\n+    if expr.span.from_expansion() {\n+        let data = expr.span.ctxt().outer_expn_data();\n+\n+        if let ExpnKind::Macro(MacroKind::Attr, _) = data.kind {\n             true\n         } else {\n             false\n         }\n-    })\n+    } else {\n+        false\n+    }\n }\n \n /// Tests whether `res` is a variable defined outside a macro."}, {"sha": "b998d3f8a331acf01eeee09a40e7e3647f535854", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -234,7 +234,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                 .name;\n \n             for field in pfields {\n-                if let PatKind::Wild = field.node.pat.node {\n+                if let PatKind::Wild = field.pat.node {\n                     wilds += 1;\n                 }\n             }\n@@ -252,7 +252,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                 let mut normal = vec![];\n \n                 for field in pfields {\n-                    match field.node.pat.node {\n+                    match field.pat.node {\n                         PatKind::Wild => {},\n                         _ => {\n                             if let Ok(n) = cx.sess().source_map().span_to_snippet(field.span) {\n@@ -262,7 +262,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                     }\n                 }\n                 for field in pfields {\n-                    if let PatKind::Wild = field.node.pat.node {\n+                    if let PatKind::Wild = field.pat.node {\n                         wilds -= 1;\n                         if wilds > 0 {\n                             span_lint("}, {"sha": "fc614b08a1f5c001d2f216516ea1c1b363ed81e0", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -131,8 +131,8 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             PatKind::Ident(_, ident, _) => self.check_ident(ident),\n             PatKind::Struct(_, ref fields, _) => {\n                 for field in fields {\n-                    if !field.node.is_shorthand {\n-                        self.visit_pat(&field.node.pat);\n+                    if !field.is_shorthand {\n+                        self.visit_pat(&field.pat);\n                     }\n                 }\n             },"}, {"sha": "617ac2393d511aa7511ca9572b73b6816eba947a", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -69,8 +69,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PanicUnimplemented {\n \n fn get_outer_span(expr: &Expr) -> Span {\n     if_chain! {\n-        if let Some(first) = expr.span.ctxt().outer_expn_info();\n-        if let Some(second) = first.call_site.ctxt().outer_expn_info();\n+        if expr.span.from_expansion();\n+        let first = expr.span.ctxt().outer_expn_data();\n+        if first.call_site.from_expansion();\n+        let second = first.call_site.ctxt().outer_expn_data();\n         then {\n             second.call_site\n         } else {"}, {"sha": "a4ce129c95ea4dcb16036e427319a22d0b3f4292", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -147,10 +147,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n             }) = higher::range(cx, expr);\n             if let Some(y) = y_plus_one(end);\n             then {\n-                let span = expr.span\n-                    .ctxt()\n-                    .outer_expn_info()\n-                    .map_or(expr.span, |info| info.call_site);\n+                let span = if expr.span.from_expansion() {\n+                    expr.span\n+                        .ctxt()\n+                        .outer_expn_data()\n+                        .call_site\n+                } else {\n+                    expr.span\n+                };\n                 span_lint_and_then(\n                     cx,\n                     RANGE_PLUS_ONE,"}, {"sha": "8a8133bfa1ea86056cbbc03b9b47b23dfccd8667", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -317,7 +317,11 @@ fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n \n // get the def site\n fn get_def(span: Span) -> Option<Span> {\n-    span.ctxt().outer_expn_info().and_then(|info| Some(info.def_site))\n+    if span.from_expansion() {\n+        Some(span.ctxt().outer_expn_data().def_site)\n+    } else {\n+        None\n+    }\n }\n \n // is this expr a `()` unit?"}, {"sha": "b30f8d415b18f61642755e50e90dbac07e851db4", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -190,20 +190,20 @@ fn check_pat<'a, 'tcx>(\n             if let Some(init_struct) = init {\n                 if let ExprKind::Struct(_, ref efields, _) = init_struct.node {\n                     for field in pfields {\n-                        let name = field.node.ident.name;\n+                        let name = field.ident.name;\n                         let efield = efields\n                             .iter()\n                             .find_map(|f| if f.ident.name == name { Some(&*f.expr) } else { None });\n-                        check_pat(cx, &field.node.pat, efield, span, bindings);\n+                        check_pat(cx, &field.pat, efield, span, bindings);\n                     }\n                 } else {\n                     for field in pfields {\n-                        check_pat(cx, &field.node.pat, init, span, bindings);\n+                        check_pat(cx, &field.pat, init, span, bindings);\n                     }\n                 }\n             } else {\n                 for field in pfields {\n-                    check_pat(cx, &field.node.pat, None, span, bindings);\n+                    check_pat(cx, &field.pat, None, span, bindings);\n                 }\n             }\n         },"}, {"sha": "4cf52ddac92920cc72b454630cd4669873af343c", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -549,6 +549,12 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n                 println!(\"    // unimplemented: field checks\");\n             },\n+            PatKind::Or(ref fields) => {\n+                let fields_pat = self.next(\"fields\");\n+                println!(\"Or(ref {}) = {};\", fields_pat, current);\n+                println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n+                println!(\"    // unimplemented: field checks\");\n+            },\n             PatKind::TupleStruct(ref path, ref fields, skip_pos) => {\n                 let path_pat = self.next(\"path\");\n                 let fields_pat = self.next(\"fields\");"}, {"sha": "b48ef7d293b4d9be6285b874e33ff1f2966a3ed3", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -410,6 +410,12 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n                 print_pat(cx, inner, indent + 1);\n             }\n         },\n+        hir::PatKind::Or(ref fields) => {\n+            println!(\"{}Or\", ind);\n+            for field in fields {\n+                print_pat(cx, field, indent + 1);\n+            }\n+        },\n         hir::PatKind::Struct(ref path, ref fields, ignore) => {\n             println!(\"{}Struct\", ind);\n             println!(\n@@ -420,11 +426,11 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n             println!(\"{}ignore leftover fields: {}\", ind, ignore);\n             println!(\"{}fields:\", ind);\n             for field in fields {\n-                println!(\"{}  field name: {}\", ind, field.node.ident.name);\n-                if field.node.is_shorthand {\n+                println!(\"{}  field name: {}\", ind, field.ident.name);\n+                if field.is_shorthand {\n                     println!(\"{}  in shorthand notation\", ind);\n                 }\n-                print_pat(cx, &field.node.pat, indent + 1);\n+                print_pat(cx, &field.pat, indent + 1);\n             }\n         },\n         hir::PatKind::TupleStruct(ref path, ref fields, opt_dots_position) => {"}, {"sha": "855b1e6eff3dfc57f4f4da7f39bfb711bff06de1", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -76,26 +76,26 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `cx.outer().expn_info()` and suggests to use\n-    /// the `cx.outer_expn_info()`\n+    /// **What it does:** Checks for calls to `cx.outer().expn_data()` and suggests to use\n+    /// the `cx.outer_expn_data()`\n     ///\n-    /// **Why is this bad?** `cx.outer_expn_info()` is faster and more concise.\n+    /// **Why is this bad?** `cx.outer_expn_data()` is faster and more concise.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// Bad:\n     /// ```rust,ignore\n-    /// expr.span.ctxt().outer().expn_info()\n+    /// expr.span.ctxt().outer().expn_data()\n     /// ```\n     ///\n     /// Good:\n     /// ```rust,ignore\n-    /// expr.span.ctxt().outer_expn_info()\n+    /// expr.span.ctxt().outer_expn_data()\n     /// ```\n-    pub OUTER_EXPN_EXPN_INFO,\n+    pub OUTER_EXPN_EXPN_DATA,\n     internal,\n-    \"using `cx.outer_expn().expn_info()` instead of `cx.outer_expn_info()`\"\n+    \"using `cx.outer_expn().expn_data()` instead of `cx.outer_expn_data()`\"\n }\n \n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n@@ -180,11 +180,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n             // not able to capture the error.\n             // Therefore, we need to climb the macro expansion tree and find the\n             // actual span that invoked `declare_tool_lint!`:\n-            let lint_span = lint_span\n-                .ctxt()\n-                .outer_expn_info()\n-                .map(|ei| ei.call_site)\n-                .expect(\"unable to get call_site\");\n+            let lint_span = lint_span.ctxt().outer_expn_data().call_site;\n \n             if !self.registered_lints.contains(lint_name) {\n                 span_lint(\n@@ -278,17 +274,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n     }\n }\n \n-pub struct OuterExpnInfoPass;\n+pub struct OuterExpnDataPass;\n \n-impl_lint_pass!(OuterExpnInfoPass => [OUTER_EXPN_EXPN_INFO]);\n+impl_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         let (method_names, arg_lists) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n         if_chain! {\n-            if let [\"expn_info\", \"outer_expn\"] = method_names.as_slice();\n+            if let [\"expn_data\", \"outer_expn\"] = method_names.as_slice();\n             let args = arg_lists[1];\n             if args.len() == 1;\n             let self_arg = &args[0];\n@@ -297,11 +293,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n             then {\n                 span_lint_and_sugg(\n                     cx,\n-                    OUTER_EXPN_EXPN_INFO,\n+                    OUTER_EXPN_EXPN_DATA,\n                     expr.span.trim_start(self_arg.span).unwrap_or(expr.span),\n-                    \"usage of `outer_expn().expn_info()`\",\n+                    \"usage of `outer_expn().expn_data()`\",\n                     \"try\",\n-                    \".outer_expn_info()\".to_string(),\n+                    \".outer_expn_data()\".to_string(),\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "020068d4633a3878f3ea1c766a64d30e69b5d1c8", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -92,15 +92,15 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n     }\n }\n \n-/// Returns `true` if this `expn_info` was expanded by any macro or desugaring\n+/// Returns `true` if this `span` was expanded by any macro or desugaring\n pub fn in_macro_or_desugar(span: Span) -> bool {\n-    span.ctxt().outer_expn_info().is_some()\n+    span.from_expansion()\n }\n \n-/// Returns `true` if this `expn_info` was expanded by any macro.\n+/// Returns `true` if this `span` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n-    if let Some(info) = span.ctxt().outer_expn_info() {\n-        if let ExpnKind::Desugaring(..) = info.kind {\n+    if span.from_expansion() {\n+        if let ExpnKind::Desugaring(..) = span.ctxt().outer_expn_data().kind {\n             false\n         } else {\n             true\n@@ -686,12 +686,18 @@ pub fn is_adjusted(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n /// See also `is_direct_expn_of`.\n pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n-        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n+        if span.from_expansion() {\n+            let data = span.ctxt().outer_expn_data();\n+            let mac_name = data.kind.descr();\n+            let new_span = data.call_site;\n \n-        match span_name_span {\n-            Some((mac_name, new_span)) if mac_name.as_str() == name => return Some(new_span),\n-            None => return None,\n-            Some((_, new_span)) => span = new_span,\n+            if mac_name.as_str() == name {\n+                return Some(new_span);\n+            } else {\n+                span = new_span;\n+            }\n+        } else {\n+            return None;\n         }\n     }\n }\n@@ -706,11 +712,18 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// `bar!` by\n /// `is_direct_expn_of`.\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n-    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n+    if span.from_expansion() {\n+        let data = span.ctxt().outer_expn_data();\n+        let mac_name = data.kind.descr();\n+        let new_span = data.call_site;\n \n-    match span_name_span {\n-        Some((mac_name, new_span)) if mac_name.as_str() == name => Some(new_span),\n-        _ => None,\n+        if mac_name.as_str() == name {\n+            Some(new_span)\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n     }\n }\n \n@@ -778,12 +791,12 @@ pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat) -> bool {\n         PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => is_refutable(cx, pat),\n         PatKind::Lit(..) | PatKind::Range(..) => true,\n         PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n-        PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Or(ref pats) | PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n         PatKind::Struct(ref qpath, ref fields, _) => {\n             if is_enum_variant(cx, qpath, pat.hir_id) {\n                 true\n             } else {\n-                are_refutable(cx, fields.iter().map(|field| &*field.node.pat))\n+                are_refutable(cx, fields.iter().map(|field| &*field.pat))\n             }\n         },\n         PatKind::TupleStruct(ref qpath, ref pats, _) => {"}, {"sha": "d7709784a3eb4df0c92c50e6b522f982b5a2f338", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -49,13 +49,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessVec {\n                 // report the error around the `vec!` not inside `<std macros>:`\n                 let span = arg.span\n                     .ctxt()\n-                    .outer_expn_info()\n-                    .map(|info| info.call_site)\n-                    .expect(\"unable to get call_site\")\n+                    .outer_expn_data()\n+                    .call_site\n                     .ctxt()\n-                    .outer_expn_info()\n-                    .map(|info| info.call_site)\n-                    .expect(\"unable to get call_site\");\n+                    .outer_expn_data()\n+                    .call_site;\n                 check_vec_macro(cx, &vec_args, span);\n             }\n         }"}, {"sha": "bcf688c1914c39caaae627a6190ecc8cb04196c0", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -183,9 +183,9 @@ declare_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &Mac) {\n-        if mac.node.path == sym!(println) {\n+        if mac.path == sym!(println) {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `println!`\");\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.node.tts, false) {\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n                 if fmt_str.contents.is_empty() {\n                     span_lint_and_sugg(\n                         cx,\n@@ -198,9 +198,9 @@ impl EarlyLintPass for Write {\n                     );\n                 }\n             }\n-        } else if mac.node.path == sym!(print) {\n+        } else if mac.path == sym!(print) {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.node.tts, false) {\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n@@ -211,7 +211,7 @@ impl EarlyLintPass for Write {\n                             err.multipart_suggestion(\n                                 \"use `println!` instead\",\n                                 vec![\n-                                    (mac.node.path.span, String::from(\"println\")),\n+                                    (mac.path.span, String::from(\"println\")),\n                                     (fmt_str.newline_span(), String::new()),\n                                 ],\n                                 Applicability::MachineApplicable,\n@@ -220,8 +220,8 @@ impl EarlyLintPass for Write {\n                     );\n                 }\n             }\n-        } else if mac.node.path == sym!(write) {\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.node.tts, true) {\n+        } else if mac.path == sym!(write) {\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, true) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n@@ -232,7 +232,7 @@ impl EarlyLintPass for Write {\n                             err.multipart_suggestion(\n                                 \"use `writeln!()` instead\",\n                                 vec![\n-                                    (mac.node.path.span, String::from(\"writeln\")),\n+                                    (mac.path.span, String::from(\"writeln\")),\n                                     (fmt_str.newline_span(), String::new()),\n                                 ],\n                                 Applicability::MachineApplicable,\n@@ -241,8 +241,8 @@ impl EarlyLintPass for Write {\n                     )\n                 }\n             }\n-        } else if mac.node.path == sym!(writeln) {\n-            if let (Some(fmt_str), expr) = check_tts(cx, &mac.node.tts, true) {\n+        } else if mac.path == sym!(writeln) {\n+            if let (Some(fmt_str), expr) = check_tts(cx, &mac.tts, true) {\n                 if fmt_str.contents.is_empty() {\n                     let mut applicability = Applicability::MachineApplicable;\n                     let suggestion = expr.map_or_else("}, {"sha": "3602f671e3dec5de2039bc0e48e3ee2a47ba15d3", "filename": "pre_publish.sh", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/pre_publish.sh", "raw_url": "https://github.com/rust-lang/rust/raw/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/pre_publish.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/pre_publish.sh?ref=72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36", "patch": "@@ -1,22 +0,0 @@\n-#!/bin/bash\n-\n-set -e\n-\n-./util/update_lints.py\n-\n-# add all changed files\n-git add .\n-git commit -m \"Bump the version\"\n-\n-set +e\n-\n-echo \"Running \\`cargo fmt\\`..\"\n-\n-cd clippy_lints && cargo fmt -- --write-mode=overwrite && cd ..\n-cargo fmt -- --write-mode=overwrite\n-\n-echo \"Running tests to make sure \\`cargo fmt\\` did not break anything..\"\n-\n-cargo test\n-\n-echo \"If the tests passed, review and commit the formatting changes and remember to add a git tag.\""}, {"sha": "9ee50447f99e355657d4a26cf3b149a282413e8f", "filename": "publish.files", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/publish.files", "raw_url": "https://github.com/rust-lang/rust/raw/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/publish.files", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/publish.files?ref=72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36", "patch": "@@ -1,3 +0,0 @@\n- M Cargo.toml\n- M CHANGELOG.md\n- M clippy_lints/Cargo.toml"}, {"sha": "36a45f705e7801c35075ee808ceba47168d76885", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -1676,7 +1676,7 @@ pub const ALL_LINTS: [Lint; 310] = [\n     Lint {\n         name: \"single_match_else\",\n         group: \"pedantic\",\n-        desc: \"a match statement with a two arms where the second arm\\'s pattern is a placeholder instead of a specific match pattern\",\n+        desc: \"a match statement with two arms where the second arm\\'s pattern is a placeholder instead of a specific match pattern\",\n         deprecation: None,\n         module: \"matches\",\n     },"}, {"sha": "15ac315a586fd4b18dc37186df8277164bc2773c", "filename": "tests/ui/outer_expn_data.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/tests%2Fui%2Fouter_expn_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/tests%2Fui%2Fouter_expn_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_data.rs?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -16,7 +16,7 @@ declare_lint_pass!(Pass => [TEST_LINT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, _cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        let _ = expr.span.ctxt().outer_expn().expn_info();\n+        let _ = expr.span.ctxt().outer_expn().expn_data();\n     }\n }\n ", "previous_filename": "tests/ui/outer_expn_info.rs"}, {"sha": "cd12ad79dd12a46fbf8970ada7885cc4bdb8ca89", "filename": "tests/ui/outer_expn_data.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5df84f219298026af02910a84e1f08ebd5ef3bbd/tests%2Fui%2Fouter_expn_data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5df84f219298026af02910a84e1f08ebd5ef3bbd/tests%2Fui%2Fouter_expn_data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_data.stderr?ref=5df84f219298026af02910a84e1f08ebd5ef3bbd", "patch": "@@ -0,0 +1,15 @@\n+error: usage of `outer_expn().expn_data()`\n+  --> $DIR/outer_expn_data.rs:19:33\n+   |\n+LL |         let _ = expr.span.ctxt().outer_expn().expn_data();\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_data()`\n+   |\n+note: lint level defined here\n+  --> $DIR/outer_expn_data.rs:1:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::outer_expn_expn_data)]` implied by `#[deny(clippy::internal)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4bbd1493dc4f8bd82200f1076c20d4bb3b84f41b", "filename": "tests/ui/outer_expn_info.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/tests%2Fui%2Fouter_expn_info.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/tests%2Fui%2Fouter_expn_info.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.stderr?ref=72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36", "patch": "@@ -1,15 +0,0 @@\n-error: usage of `outer_expn().expn_info()`\n-  --> $DIR/outer_expn_info.rs:19:33\n-   |\n-LL |         let _ = expr.span.ctxt().outer_expn().expn_info();\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_info()`\n-   |\n-note: lint level defined here\n-  --> $DIR/outer_expn_info.rs:1:9\n-   |\n-LL | #![deny(clippy::internal)]\n-   |         ^^^^^^^^^^^^^^^^\n-   = note: `#[deny(clippy::outer_expn_expn_info)]` implied by `#[deny(clippy::internal)]`\n-\n-error: aborting due to previous error\n-"}, {"sha": "1800fa05c9075a912d56a042fdab6b74a99e5f66", "filename": "util/update_lints.py", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=72e4e4ac6cb18e4e15c789cc0e9786b1d1d54d36", "patch": "@@ -1,10 +0,0 @@\n-#!/usr/bin/env python\n-\n-import sys\n-\n-def main():\n-    print('Error: Please use `util/dev` to update lints')\n-    return 1\n-\n-if __name__ == '__main__':\n-    sys.exit(main())"}]}