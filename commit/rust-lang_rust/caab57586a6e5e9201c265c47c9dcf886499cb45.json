{"sha": "caab57586a6e5e9201c265c47c9dcf886499cb45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYWI1NzU4NmE2ZTVlOTIwMWMyNjVjNDdjOWRjZjg4NjQ5OWNiNDU=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-28T05:19:20Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-28T05:19:30Z"}, "message": "rt/std: whitespace cleanup + work on hl/global_loop docs", "tree": {"sha": "b5f2f401644602a1606130455e3cddb51750e29d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f2f401644602a1606130455e3cddb51750e29d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caab57586a6e5e9201c265c47c9dcf886499cb45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caab57586a6e5e9201c265c47c9dcf886499cb45", "html_url": "https://github.com/rust-lang/rust/commit/caab57586a6e5e9201c265c47c9dcf886499cb45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caab57586a6e5e9201c265c47c9dcf886499cb45/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92e88e4e2ce79868daee1ac3f77a6aaa193b5896", "url": "https://api.github.com/repos/rust-lang/rust/commits/92e88e4e2ce79868daee1ac3f77a6aaa193b5896", "html_url": "https://github.com/rust-lang/rust/commit/92e88e4e2ce79868daee1ac3f77a6aaa193b5896"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "c280a184cef860505a6f4d73d353a5b17a4c25b3", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caab57586a6e5e9201c265c47c9dcf886499cb45/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caab57586a6e5e9201c265c47c9dcf886499cb45/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=caab57586a6e5e9201c265c47c9dcf886499cb45", "patch": "@@ -28,7 +28,6 @@ fn get() -> hl::high_level_loop {\n     ret get_monitor_task_gl();\n }\n \n-// WARNING: USE ONLY ONE get_*_task_gl fn in the scope of a process lifetime.\n #[doc(hidden)]\n fn get_monitor_task_gl() -> hl::high_level_loop {\n     let monitor_loop_chan_ptr =\n@@ -100,7 +99,7 @@ unsafe fn spawn_libuv_weak_task() -> (*ll::uv_async_t,\n     let exit_po = comm::port::<(*ll::uv_async_t,\n                               comm::chan<hl::high_level_msg>)>();\n     let exit_ch = comm::chan(exit_po);\n-    \n+\n     task::spawn_sched(task::manual_threads(1u)) {||\n         log(debug, \"entering global libuv task\");\n         let loop_ptr = ll::loop_new();"}, {"sha": "83080348d0b91465b1655c1209a8cefefdf6448d", "filename": "src/libstd/uv_hl.rs", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/caab57586a6e5e9201c265c47c9dcf886499cb45/src%2Flibstd%2Fuv_hl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caab57586a6e5e9201c265c47c9dcf886499cb45/src%2Flibstd%2Fuv_hl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_hl.rs?ref=caab57586a6e5e9201c265c47c9dcf886499cb45", "patch": "@@ -13,16 +13,12 @@ import ll = uv_ll;\n \n #[doc = \"\n Used to abstract-away direct interaction with a libuv loop.\n-\n-# Arguments\n-\n-* async_handle - a pointer to a pointer to a uv_async_t struct used to 'poke'\n-the C uv loop to process any pending callbacks\n-\n-* op_chan - a channel used to send function callbacks to be processed\n-by the C uv loop\n \"]\n enum high_level_loop {\n+    #[doc=\"\n+    `high_level_loop` variant that carries a `comm::chan` and\n+    a `*ll::uv_async_t`.\n+    \"]\n     simple_task_loop({\n         async_handle: *ll::uv_async_t,\n         op_chan: comm::chan<high_level_msg>\n@@ -34,23 +30,36 @@ Represents the range of interactions with a `high_level_loop`\n \"]\n enum high_level_msg {\n     interaction (fn~(*libc::c_void)),\n+    #[doc=\"\n+For use in libraries that roll their own `high_level_loop` (like\n+`std::uv::global_loop`)\n+\n+Is used to signal to the loop that it should close the internally-held\n+async handle and do a sanity check to make sure that all other handles are\n+closed, causing a failure otherwise. This should not be sent/used from\n+'normal' user code.\n+    \"]\n     teardown_loop\n }\n \n #[doc = \"\n-Given a vanilla `uv_loop_t*`\n+Useful for anyone who wants to roll their own `high_level_loop`.\n \n # Arguments\n \n * loop_ptr - a pointer to a currently unused libuv loop. Its `data` field\n will be overwritten before the loop begins\n-must be a pointer to a clean rust `uv_async_t` record\n-* msg_po - an active port that receives `high_level_msg`s\n-* before_run - a unique closure that is invoked after `uv_async_init` is\n-called on the `async_handle` passed into this callback, just before `uv_run`\n-is called on the provided `loop_ptr`\n-* before_msg_drain - a unique closure that is invoked every time the loop is\n-awoken, but before the port pointed to in the `msg_po` argument is drained\n+* msg_po - an active port that receives `high_level_msg`s. You can distribute\n+a paired channel to users, along with the `async_handle` returned in the\n+following callback (combine them to make a `hl::simpler_task_loop` varient\n+of `hl::high_level_loop`)\n+* before_run - a unique closure that is invoked before `uv_run()` is called\n+on the provided `loop_ptr`. An `async_handle` is passed in which will be\n+live for the duration of the loop. You can distribute this to users so that\n+they can interact with the loop safely.\n+* before_msg_process - a unique closure that is invoked at least once when\n+the loop is woken up, and once more for every message that is drained from\n+the loop's msg port\n * before_tear_down - called just before the loop invokes `uv_close()` on the\n provided `async_handle`. `uv_run` should return shortly after\n \"]\n@@ -93,17 +102,25 @@ Provide a callback to be processed by `a_loop`\n The primary way to do operations again a running `high_level_loop` that\n doesn't involve creating a uv handle via `safe_handle`\n \n+# Warning\n+\n+This function is the only safe way to interact with _any_ `high_level_loop`.\n+Using functions in the `uv::ll` module outside of the `cb` passed into\n+this function is _very dangerous_.\n+\n # Arguments\n \n-* a_loop - a `high_level_loop` that you want to do operations against\n+* hl_loop - a `uv::hl::high_level_loop` that you want to do operations against\n * cb - a function callback to be processed on the running loop's\n-thread. The only parameter is an opaque pointer to the running\n-uv_loop_t. In the context of this callback, it is safe to use this pointer\n-to do various uv_* API calls. _DO NOT_ send this pointer out via ports/chans\n+thread. The only parameter passed in is an opaque pointer representing the\n+running `uv_loop_t*`. In the context of this callback, it is safe to use\n+this pointer to do various uv_* API calls contained within the `uv::ll`\n+module. It is not safe to send the `loop_ptr` param to this callback out\n+via ports/chans.\n \"]\n-unsafe fn interact(a_loop: high_level_loop,\n+unsafe fn interact(hl_loop: high_level_loop,\n                       -cb: fn~(*libc::c_void)) {\n-    send_high_level_msg(a_loop, interaction(cb));\n+    send_high_level_msg(hl_loop, interaction(cb));\n }\n \n // INTERNAL API"}, {"sha": "f3806aac6eb38a8f1efda078d0ee7e44b43359ac", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caab57586a6e5e9201c265c47c9dcf886499cb45/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/caab57586a6e5e9201c265c47c9dcf886499cb45/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=caab57586a6e5e9201c265c47c9dcf886499cb45", "patch": "@@ -113,7 +113,7 @@ rust_uv_loop_delete(uv_loop_t* loop) {\n \n extern \"C\" int\n rust_uv_loop_refcount(uv_loop_t* loop) {\n-\treturn uv_loop_refcount(loop);\n+    return uv_loop_refcount(loop);\n }\n \n extern \"C\" void"}]}