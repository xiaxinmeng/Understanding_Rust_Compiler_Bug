{"sha": "1ac1f24ddd54865f1719eb8c0e48c4858be1b744", "node_id": "C_kwDOAAsO6NoAKDFhYzFmMjRkZGQ1NDg2NWYxNzE5ZWI4YzBlNDhjNDg1OGJlMWI3NDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T13:49:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T13:49:45Z"}, "message": "Rollup merge of #92050 - r00ster91:patch-5, r=camelid\n\nAdd a space and 2 grave accents\n\nI only noticed this because I have this implementation copy pasted in some places in my code and I really can't wait for this to be stabilized...", "tree": {"sha": "a563ec00acbc5b567066b9bb23ff0ef5776988e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a563ec00acbc5b567066b9bb23ff0ef5776988e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac1f24ddd54865f1719eb8c0e48c4858be1b744", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhveb5CRBK7hj4Ov3rIwAAmXMIALL77jLDAIioFDkmWpuHQFEy\nURiIQxwvrRkWB/p3eIbkW2XNty9zIf7yDswmS1aFs9Cwhxm06Yh4MJNO8dycGaTa\n7l9cHSmShA0hY7iq5mXj/UOOlBJgeswR5w4EjmfQL+07AOwF4lxPPrYyZq4IzMbT\nndnz/d2vADth8pZ8BZiwooy/Ahe83lr4//N/X63prkHMQ8cb936wBGksR95bstqO\nTKLMcp9MQM025OGlnMXkIbyxdvBfejv9dSbaWrhcnwtKrYEgfwC26V9df+0fXt9k\nYrG8M08M4WeAfwunseVj/wyCQ4Vh3TKKkdBWcMnU1HZVtlE/bOYRvGhghienz+w=\n=WvYZ\n-----END PGP SIGNATURE-----\n", "payload": "tree a563ec00acbc5b567066b9bb23ff0ef5776988e2\nparent fd259040d9990ca695c2f3a65a81ac4d15c25436\nparent afdd3561dea97d34b75eea878a325f29ab4d80de\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639835385 +0100\ncommitter GitHub <noreply@github.com> 1639835385 +0100\n\nRollup merge of #92050 - r00ster91:patch-5, r=camelid\n\nAdd a space and 2 grave accents\n\nI only noticed this because I have this implementation copy pasted in some places in my code and I really can't wait for this to be stabilized...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac1f24ddd54865f1719eb8c0e48c4858be1b744", "html_url": "https://github.com/rust-lang/rust/commit/1ac1f24ddd54865f1719eb8c0e48c4858be1b744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac1f24ddd54865f1719eb8c0e48c4858be1b744/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd259040d9990ca695c2f3a65a81ac4d15c25436", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd259040d9990ca695c2f3a65a81ac4d15c25436", "html_url": "https://github.com/rust-lang/rust/commit/fd259040d9990ca695c2f3a65a81ac4d15c25436"}, {"sha": "afdd3561dea97d34b75eea878a325f29ab4d80de", "url": "https://api.github.com/repos/rust-lang/rust/commits/afdd3561dea97d34b75eea878a325f29ab4d80de", "html_url": "https://github.com/rust-lang/rust/commit/afdd3561dea97d34b75eea878a325f29ab4d80de"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "3b0e4a31db1c8ce894f05b0fb770915efc23dd0d", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ac1f24ddd54865f1719eb8c0e48c4858be1b744/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac1f24ddd54865f1719eb8c0e48c4858be1b744/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=1ac1f24ddd54865f1719eb8c0e48c4858be1b744", "patch": "@@ -972,8 +972,8 @@ impl<T> MaybeUninit<T> {\n     #[rustc_const_unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub const unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n-        // SAFETY: casting slice to a `*const [T]` is safe since the caller guarantees that\n-        // `slice` is initialized, and`MaybeUninit` is guaranteed to have the same layout as `T`.\n+        // SAFETY: casting `slice` to a `*const [T]` is safe since the caller guarantees that\n+        // `slice` is initialized, and `MaybeUninit` is guaranteed to have the same layout as `T`.\n         // The pointer obtained is valid since it refers to memory owned by `slice` which is a\n         // reference and thus guaranteed to be valid for reads.\n         unsafe { &*(slice as *const [Self] as *const [T]) }"}]}