{"sha": "fcf52c167f9280efe332557195998650a99bf437", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjUyYzE2N2Y5MjgwZWZlMzMyNTU3MTk1OTk4NjUwYTk5YmY0Mzc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T07:59:08Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T08:20:44Z"}, "message": "improve DiscriminantKind handling\n\nThis now reuses `fn discriminant_ty` in project, removing\nsome code duplication. Doing so made me realize that\nwe previously had a disagreement about the discriminant\ntype of generators, with MIR using `u32` and codegen and\ntrait selection using `i32`.\n\nWe now always use `u32`.", "tree": {"sha": "3b1aac0ac54c8fbf8be8484b4696d72efcfa08d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b1aac0ac54c8fbf8be8484b4696d72efcfa08d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf52c167f9280efe332557195998650a99bf437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf52c167f9280efe332557195998650a99bf437", "html_url": "https://github.com/rust-lang/rust/commit/fcf52c167f9280efe332557195998650a99bf437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf52c167f9280efe332557195998650a99bf437/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567ad7455d5f25f6b38d2fded1cb621e0c34a48b", "url": "https://api.github.com/repos/rust-lang/rust/commits/567ad7455d5f25f6b38d2fded1cb621e0c34a48b", "html_url": "https://github.com/rust-lang/rust/commit/567ad7455d5f25f6b38d2fded1cb621e0c34a48b"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "56dddee7b7799f00fd01a608f11b20a74f4f22f9", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcf52c167f9280efe332557195998650a99bf437/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf52c167f9280efe332557195998650a99bf437/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=fcf52c167f9280efe332557195998650a99bf437", "patch": "@@ -693,6 +693,7 @@ mod impls {\n pub trait DiscriminantKind {\n     /// The type of the discriminant, which must satisfy the trait\n     /// bounds required by `mem::Discriminant`.\n+    #[cfg_attr(not(bootstrap), lang = \"discriminant_type\")]\n     type Discriminant: Clone + Copy + Debug + Eq + PartialEq + Hash + Send + Sync + Unpin;\n }\n "}, {"sha": "88c97d874bed6f3c9a849b8f6cc309bddaef21ea", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcf52c167f9280efe332557195998650a99bf437/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf52c167f9280efe332557195998650a99bf437/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=fcf52c167f9280efe332557195998650a99bf437", "patch": "@@ -193,6 +193,9 @@ language_item_table! {\n     CloneTraitLangItem,            sym::clone,              clone_trait,             Target::Trait;\n     SyncTraitLangItem,             sym::sync,               sync_trait,              Target::Trait;\n     DiscriminantKindTraitLangItem, sym::discriminant_kind,  discriminant_kind_trait, Target::Trait;\n+    // The associated item of `trait DiscriminantKind`.\n+    DiscriminantTypeLangItem,      sym::discriminant_type,  discriminant_type,       Target::AssocTy;\n+\n     FreezeTraitLangItem,           sym::freeze,             freeze_trait,            Target::Trait;\n \n     DropTraitLangItem,             sym::drop,               drop_trait,              Target::Trait;"}, {"sha": "227cbbb4ca6acd14906a365023fbdd6b5a0f2e71", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcf52c167f9280efe332557195998650a99bf437/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf52c167f9280efe332557195998650a99bf437/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=fcf52c167f9280efe332557195998650a99bf437", "patch": "@@ -327,6 +327,7 @@ symbols! {\n         diagnostic,\n         direct,\n         discriminant_kind,\n+        discriminant_type,\n         discriminant_value,\n         dispatch_from_dyn,\n         div,"}, {"sha": "c08198ec373b8114c22702872fe81a1e70a2504d", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fcf52c167f9280efe332557195998650a99bf437/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf52c167f9280efe332557195998650a99bf437/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=fcf52c167f9280efe332557195998650a99bf437", "patch": "@@ -23,11 +23,12 @@ use crate::traits::error_reporting::InferCtxtExt;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{FnOnceOutputLangItem, FnOnceTraitLangItem, GeneratorTraitLangItem};\n+use rustc_hir::lang_items::{\n+    DiscriminantTypeLangItem, FnOnceOutputLangItem, FnOnceTraitLangItem, GeneratorTraitLangItem,\n+};\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n@@ -1324,22 +1325,11 @@ fn confirm_discriminant_kind_candidate<'cx, 'tcx>(\n     let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n     let substs = tcx.mk_substs([self_ty.into()].iter());\n \n-    let assoc_items = tcx.associated_items(tcx.lang_items().discriminant_kind_trait().unwrap());\n-    // FIXME: emit an error if the trait definition is wrong\n-    let discriminant_def_id = assoc_items.in_definition_order().next().unwrap().def_id;\n-\n-    let discriminant_ty = match self_ty.kind {\n-        // Use the discriminant type for enums.\n-        ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),\n-        // Default to `i32` for generators.\n-        ty::Generator(..) => tcx.types.i32,\n-        // Use `u8` for all other types.\n-        _ => tcx.types.u8,\n-    };\n+    let discriminant_def_id = tcx.require_lang_item(DiscriminantTypeLangItem, None);\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: discriminant_def_id },\n-        ty: discriminant_ty,\n+        ty: self_ty.discriminant_ty(tcx),\n     };\n \n     confirm_param_env_candidate(selcx, obligation, ty::Binder::bind(predicate))"}, {"sha": "195e77022992d567c856e58d58ac571405bf79c3", "filename": "src/test/ui/generator/discriminant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcf52c167f9280efe332557195998650a99bf437/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf52c167f9280efe332557195998650a99bf437/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdiscriminant.rs?ref=fcf52c167f9280efe332557195998650a99bf437", "patch": "@@ -66,8 +66,8 @@ macro_rules! yield250 {\n }\n \n fn cycle(\n-    gen: impl Generator<()> + Unpin + DiscriminantKind<Discriminant = i32>,\n-    expected_max_discr: i32\n+    gen: impl Generator<()> + Unpin + DiscriminantKind<Discriminant = u32>,\n+    expected_max_discr: u32\n ) {\n     let mut gen = Box::pin(gen);\n     let mut max_discr = 0;"}]}