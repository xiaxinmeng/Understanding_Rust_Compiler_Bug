{"sha": "62db39273088f216ba95e1853b982a489051c152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZGIzOTI3MzA4OGYyMTZiYTk1ZTE4NTNiOTgyYTQ4OTA1MWMxNTI=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-12-04T14:56:25Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-12-06T01:04:13Z"}, "message": "Make lifetimes lint work with type aliases and non-locally-defined structs", "tree": {"sha": "8a8c018910d15f61554c87d6e46a135344b75688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a8c018910d15f61554c87d6e46a135344b75688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62db39273088f216ba95e1853b982a489051c152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62db39273088f216ba95e1853b982a489051c152", "html_url": "https://github.com/rust-lang/rust/commit/62db39273088f216ba95e1853b982a489051c152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62db39273088f216ba95e1853b982a489051c152/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b45745e9052f46eece3c0f8688ff5849ffd3a464", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45745e9052f46eece3c0f8688ff5849ffd3a464", "html_url": "https://github.com/rust-lang/rust/commit/b45745e9052f46eece3c0f8688ff5849ffd3a464"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "0003c50d84385c1543f3d2b7e1ef80fc2b3257f3", "filename": "src/lifetimes.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/62db39273088f216ba95e1853b982a489051c152/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62db39273088f216ba95e1853b982a489051c152/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=62db39273088f216ba95e1853b982a489051c152", "patch": "@@ -3,7 +3,7 @@ use reexport::*;\n use rustc::lint::*;\n use syntax::codemap::Span;\n use rustc_front::intravisit::{Visitor, walk_ty, walk_ty_param_bound};\n-use rustc::middle::def::Def::{DefTy, DefTrait};\n+use rustc::middle::def::Def::{DefTy, DefTrait, DefStruct};\n use std::collections::HashSet;\n \n use utils::{in_external_macro, span_lint};\n@@ -187,23 +187,22 @@ impl <'v, 't> RefVisitor<'v, 't>  {\n         let last_path_segment = path.segments.last().map(|s| &s.parameters);\n         if let Some(&AngleBracketedParameters(ref params)) = last_path_segment {\n             if params.lifetimes.is_empty() {\n-                let def = self.cx.tcx.def_map.borrow().get(&ty.id).map(|r| r.full_def());\n-                match def {\n-                    Some(DefTy(def_id, _)) => {\n-                        if let Some(ty_def) = self.cx.tcx.adt_defs.borrow().get(&def_id) {\n-                            let scheme = ty_def.type_scheme(self.cx.tcx);\n-                            for _ in scheme.generics.regions.as_slice() {\n+                if let Some(def) = self.cx.tcx.def_map.borrow().get(&ty.id).map(|r| r.full_def()) {\n+                    match def {\n+                        DefTy(def_id, _) | DefStruct(def_id) => {\n+                            let type_scheme = self.cx.tcx.lookup_item_type(def_id);\n+                            for _ in type_scheme.generics.regions.as_slice() {\n                                 self.record(&None);\n                             }\n-                        }\n-                    }\n-                    Some(DefTrait(def_id)) => {\n-                        let trait_def = self.cx.tcx.trait_defs.borrow()[&def_id];\n-                        for _ in &trait_def.generics.regions {\n-                            self.record(&None);\n-                        }\n+                        },\n+                        DefTrait(def_id) => {\n+                            let trait_def = self.cx.tcx.trait_defs.borrow()[&def_id];\n+                            for _ in &trait_def.generics.regions {\n+                                self.record(&None);\n+                            }\n+                        },\n+                        _ => {}\n                     }\n-                    _ => {}\n                 }\n             }\n         }"}, {"sha": "040c3554e89907260bfbaaf22c54ca9aecb3760b", "filename": "tests/compile-fail/lifetimes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/62db39273088f216ba95e1853b982a489051c152/tests%2Fcompile-fail%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62db39273088f216ba95e1853b982a489051c152/tests%2Fcompile-fail%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flifetimes.rs?ref=62db39273088f216ba95e1853b982a489051c152", "patch": "@@ -106,5 +106,18 @@ fn trait_obj_elided<'a>(_arg: &'a WithLifetime) -> &'a str { unimplemented!() }\n // unambiguous if we elided the lifetime\n fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str { unimplemented!() } //~ERROR explicit lifetimes given\n \n+type FooAlias<'a> = Foo<'a>;\n+\n+fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str { unimplemented!() } //~ERROR explicit lifetimes given\n+\n+// no warning, two input lifetimes (named on the reference, anonymous on Foo)\n+fn alias_with_lt2<'a>(_foo: &'a FooAlias) -> &'a str { unimplemented!() }\n+\n+// no warning, two input lifetimes (anonymous on the reference, named on Foo)\n+fn alias_with_lt3<'a>(_foo: &FooAlias<'a> ) -> &'a str { unimplemented!() }\n+\n+// no warning, two input lifetimes\n+fn alias_with_lt4<'a, 'b>(_foo: &'a FooAlias<'b> ) -> &'a str { unimplemented!() }\n+\n fn main() {\n }"}]}