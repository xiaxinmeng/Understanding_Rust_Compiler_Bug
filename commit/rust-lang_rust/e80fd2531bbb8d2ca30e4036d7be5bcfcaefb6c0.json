{"sha": "e80fd2531bbb8d2ca30e4036d7be5bcfcaefb6c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MGZkMjUzMWJiYjhkMmNhMzBlNDAzNmQ3YmU1YmNmY2FlZmI2YzA=", "commit": {"author": {"name": "Stephen M. Coakley", "email": "me@stephencoakley.com", "date": "2016-10-05T23:11:28Z"}, "committer": {"name": "Stephen M. Coakley", "email": "me@stephencoakley.com", "date": "2016-10-05T23:11:28Z"}, "message": "Use mutex to guard thread ID counter", "tree": {"sha": "35fd75566b66664d43d166566c725c38840946a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35fd75566b66664d43d166566c725c38840946a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80fd2531bbb8d2ca30e4036d7be5bcfcaefb6c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJX9YihAAoJEJG1nBhJTE/Aj8QQAISZIFF5/U1dIP3rKMAkAi1u\nz3kWAo4pWMCO0k/7JF6zQ5X3+xLzlu0iFvhBv6N4tn2zrKpHaTOK5+DMr9zO9gf4\nmawPRYwoVYyQOKZPGvPL0bLMEFVvmiFR338Ggi8RcLHoqfGJoZlzAM+kXS33+19r\ncmv+n0AxadQoLjtrPn/V1s9d62jGtCKpD5JvqxlRyAT8E/NLr/4KkGkN0YLGIBYx\nEUcNvUTIcVE/sNo35L8M7AmDXnseCyhh7qkzOGSq8PmvvOnGLrSBCR01gtNXKMIU\npuCiXlekCf0gGBcjohyRD9GFVb3zW95IG391zOsvYAFpJgwZWQuhQite1EonwlXY\ngN/x9fVWFg0bZ2yAXYBk+SWmFcxv/iNCjvFtoHZbGUOgBMye6tWZikq8L5zXh5PV\n71ZefuGoh+G5/FbT4ZtHhS2HW/NGAnLfBYt7qNI9EykhoBoT/xDka13sKplnAC9D\n9STIP4s4jTVi7xIojFlqFELPu45RZDqIMiTGSvMtNkfQQ9HuktnVm63QFB9Ck/14\n1N9OBU73Pnz68g5r75zJxszug2RmrGLGxkb+HztVep+N0OQHmyXt7wiW7xOzHqKG\nx1CtPH4K95g0Ws8ziuPEugRqiQPFh3+m6+NlYLKGBngDrwtuqd/ZdZRLepA3PpsQ\n1ucdDSFfpuK0+ziSgYut\n=OG57\n-----END PGP SIGNATURE-----", "payload": "tree 35fd75566b66664d43d166566c725c38840946a8\nparent 894ef966c631facd13cd0d021acca43e37c8510e\nauthor Stephen M. Coakley <me@stephencoakley.com> 1475709088 -0500\ncommitter Stephen M. Coakley <me@stephencoakley.com> 1475709088 -0500\n\nUse mutex to guard thread ID counter\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80fd2531bbb8d2ca30e4036d7be5bcfcaefb6c0", "html_url": "https://github.com/rust-lang/rust/commit/e80fd2531bbb8d2ca30e4036d7be5bcfcaefb6c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80fd2531bbb8d2ca30e4036d7be5bcfcaefb6c0/comments", "author": {"login": "sagebind", "id": 2192863, "node_id": "MDQ6VXNlcjIxOTI4NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2192863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagebind", "html_url": "https://github.com/sagebind", "followers_url": "https://api.github.com/users/sagebind/followers", "following_url": "https://api.github.com/users/sagebind/following{/other_user}", "gists_url": "https://api.github.com/users/sagebind/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagebind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagebind/subscriptions", "organizations_url": "https://api.github.com/users/sagebind/orgs", "repos_url": "https://api.github.com/users/sagebind/repos", "events_url": "https://api.github.com/users/sagebind/events{/privacy}", "received_events_url": "https://api.github.com/users/sagebind/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sagebind", "id": 2192863, "node_id": "MDQ6VXNlcjIxOTI4NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2192863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagebind", "html_url": "https://github.com/sagebind", "followers_url": "https://api.github.com/users/sagebind/followers", "following_url": "https://api.github.com/users/sagebind/following{/other_user}", "gists_url": "https://api.github.com/users/sagebind/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagebind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagebind/subscriptions", "organizations_url": "https://api.github.com/users/sagebind/orgs", "repos_url": "https://api.github.com/users/sagebind/repos", "events_url": "https://api.github.com/users/sagebind/events{/privacy}", "received_events_url": "https://api.github.com/users/sagebind/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "894ef966c631facd13cd0d021acca43e37c8510e", "url": "https://api.github.com/repos/rust-lang/rust/commits/894ef966c631facd13cd0d021acca43e37c8510e", "html_url": "https://github.com/rust-lang/rust/commit/894ef966c631facd13cd0d021acca43e37c8510e"}], "stats": {"total": 38, "additions": 8, "deletions": 30}, "files": [{"sha": "c8b6046bb8d63255d4a31e19a18c20fb0fbd0021", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e80fd2531bbb8d2ca30e4036d7be5bcfcaefb6c0/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80fd2531bbb8d2ca30e4036d7be5bcfcaefb6c0/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=e80fd2531bbb8d2ca30e4036d7be5bcfcaefb6c0", "patch": "@@ -165,8 +165,8 @@ use panic;\n use panicking;\n use str;\n use sync::{Mutex, Condvar, Arc};\n-use sync::atomic::{AtomicBool, Ordering};\n use sys::thread as imp;\n+use sys_common::mutex;\n use sys_common::thread_info;\n use sys_common::util;\n use sys_common::{AsInner, IntoInner};\n@@ -539,34 +539,14 @@ pub fn park_timeout(dur: Duration) {\n pub struct ThreadId(u64);\n \n impl ThreadId {\n-    // Generate a new unique thread ID. Since this function is called every\n-    // time a thread is created, this is optimized to generate unique values\n-    // as quickly as possible.\n+    // Generate a new unique thread ID.\n     fn new() -> ThreadId {\n-        // 64-bit operations are not atomic on all systems, so use an atomic\n-        // flag as a guard around a 64-bit global counter. The window for\n-        // contention on the counter is rather narrow since the general case\n-        // should be compiled down to three instructions between locking and\n-        // unlocking the guard. Since contention on the guard is low, use a\n-        // spinlock that optimizes for the fast path of the guard being\n-        // unlocked.\n-        static GUARD: AtomicBool = AtomicBool::new(false);\n+        static GUARD: mutex::Mutex = mutex::Mutex::new();\n         static mut COUNTER: u64 = 0;\n \n-        // Get exclusive access to the counter.\n-        while GUARD.compare_exchange_weak(\n-            false,\n-            true,\n-            Ordering::Acquire,\n-            Ordering::Relaxed\n-        ).is_err() {\n-            // Give up the rest of our thread quantum if another thread is\n-            // using the counter. This is the slow_er_ path.\n-            yield_now();\n-        }\n+        unsafe {\n+            GUARD.lock();\n \n-        // We have exclusive access to the counter, so use it fast and get out.\n-        let id = unsafe {\n             // If we somehow use up all our bits, panic so that we're not\n             // covering up subtle bugs of IDs being reused.\n             if COUNTER == ::u64::MAX {\n@@ -575,13 +555,11 @@ impl ThreadId {\n \n             let id = COUNTER;\n             COUNTER += 1;\n-            id\n-        };\n \n-        // Unlock the guard.\n-        GUARD.store(false, Ordering::Release);\n+            GUARD.unlock();\n \n-        ThreadId(id)\n+            ThreadId(id)\n+        }\n     }\n }\n "}]}