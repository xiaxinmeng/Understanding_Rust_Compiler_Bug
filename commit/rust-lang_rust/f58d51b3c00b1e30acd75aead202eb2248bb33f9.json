{"sha": "f58d51b3c00b1e30acd75aead202eb2248bb33f9", "node_id": "C_kwDOAAsO6NoAKGY1OGQ1MWIzYzAwYjFlMzBhY2Q3NWFlYWQyMDJlYjIyNDhiYjMzZjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T06:47:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T06:47:49Z"}, "message": "Auto merge of #94304 - notriddle:notriddle/buffer-args, r=CraftSpider\n\nrustdoc: write directly to buffer in `inner_full_print`\n\nThis change avoids several temporary allocations for every argument.", "tree": {"sha": "aa1bab6c047598aea66bcbabacfab09b5ab8d15f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa1bab6c047598aea66bcbabacfab09b5ab8d15f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f58d51b3c00b1e30acd75aead202eb2248bb33f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f58d51b3c00b1e30acd75aead202eb2248bb33f9", "html_url": "https://github.com/rust-lang/rust/commit/f58d51b3c00b1e30acd75aead202eb2248bb33f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f58d51b3c00b1e30acd75aead202eb2248bb33f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8756ed20b28d87d63378f08790b82d69490e6eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8756ed20b28d87d63378f08790b82d69490e6eb6", "html_url": "https://github.com/rust-lang/rust/commit/8756ed20b28d87d63378f08790b82d69490e6eb6"}, {"sha": "41de68561c082f635bdc2ba8486beb4c87988642", "url": "https://api.github.com/repos/rust-lang/rust/commits/41de68561c082f635bdc2ba8486beb4c87988642", "html_url": "https://github.com/rust-lang/rust/commit/41de68561c082f635bdc2ba8486beb4c87988642"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "5c59609d5b8c600253fb5913c4d1bfe9eea4b646", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f58d51b3c00b1e30acd75aead202eb2248bb33f9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58d51b3c00b1e30acd75aead202eb2248bb33f9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f58d51b3c00b1e30acd75aead202eb2248bb33f9", "patch": "@@ -1185,8 +1185,8 @@ impl clean::FnDecl {\n         cx: &Context<'_>,\n     ) -> fmt::Result {\n         let amp = if f.alternate() { \"&\" } else { \"&amp;\" };\n-        let mut args = String::new();\n-        let mut args_plain = String::new();\n+        let mut args = Buffer::html();\n+        let mut args_plain = Buffer::new();\n         for (i, input) in self.inputs.values.iter().enumerate() {\n             if i == 0 {\n                 args.push_str(\"<br>\");\n@@ -1199,59 +1199,51 @@ impl clean::FnDecl {\n                         args_plain.push_str(\"self\");\n                     }\n                     clean::SelfBorrowed(Some(ref lt), mtbl) => {\n-                        args.push_str(&format!(\n-                            \"{}{} {}self\",\n-                            amp,\n-                            lt.print(),\n-                            mtbl.print_with_space()\n-                        ));\n-                        args_plain.push_str(&format!(\n-                            \"&{} {}self\",\n-                            lt.print(),\n-                            mtbl.print_with_space()\n-                        ));\n+                        write!(args, \"{}{} {}self\", amp, lt.print(), mtbl.print_with_space());\n+                        write!(args_plain, \"&{} {}self\", lt.print(), mtbl.print_with_space());\n                     }\n                     clean::SelfBorrowed(None, mtbl) => {\n-                        args.push_str(&format!(\"{}{}self\", amp, mtbl.print_with_space()));\n-                        args_plain.push_str(&format!(\"&{}self\", mtbl.print_with_space()));\n+                        write!(args, \"{}{}self\", amp, mtbl.print_with_space());\n+                        write!(args_plain, \"&{}self\", mtbl.print_with_space());\n                     }\n                     clean::SelfExplicit(ref typ) => {\n                         if f.alternate() {\n-                            args.push_str(&format!(\"self: {:#}\", typ.print(cx)));\n+                            write!(args, \"self: {:#}\", typ.print(cx));\n                         } else {\n-                            args.push_str(&format!(\"self: {}\", typ.print(cx)));\n+                            write!(args, \"self: {}\", typ.print(cx));\n                         }\n-                        args_plain.push_str(&format!(\"self: {:#}\", typ.print(cx)));\n+                        write!(args_plain, \"self: {:#}\", typ.print(cx));\n                     }\n                 }\n             } else {\n                 if i > 0 {\n                     args.push_str(\" <br>\");\n-                    args_plain.push(' ');\n+                    args_plain.push_str(\" \");\n                 }\n                 if input.is_const {\n                     args.push_str(\"const \");\n                     args_plain.push_str(\"const \");\n                 }\n                 if !input.name.is_empty() {\n-                    args.push_str(&format!(\"{}: \", input.name));\n-                    args_plain.push_str(&format!(\"{}: \", input.name));\n+                    write!(args, \"{}: \", input.name);\n+                    write!(args_plain, \"{}: \", input.name);\n                 }\n \n                 if f.alternate() {\n-                    args.push_str(&format!(\"{:#}\", input.type_.print(cx)));\n+                    write!(args, \"{:#}\", input.type_.print(cx));\n                 } else {\n-                    args.push_str(&input.type_.print(cx).to_string());\n+                    write!(args, \"{}\", input.type_.print(cx));\n                 }\n-                args_plain.push_str(&format!(\"{:#}\", input.type_.print(cx)));\n+                write!(args_plain, \"{:#}\", input.type_.print(cx));\n             }\n             if i + 1 < self.inputs.values.len() {\n-                args.push(',');\n-                args_plain.push(',');\n+                args.push_str(\",\");\n+                args_plain.push_str(\",\");\n             }\n         }\n \n-        let mut args_plain = format!(\"({})\", args_plain);\n+        let mut args_plain = format!(\"({})\", args_plain.into_inner());\n+        let mut args = args.into_inner();\n \n         if self.c_variadic {\n             args.push_str(\",<br> ...\");"}]}