{"sha": "4fecccbd2e9760cdc082b5030ebf82911b7e3632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZWNjY2JkMmU5NzYwY2RjMDgyYjUwMzBlYmY4MjkxMWI3ZTM2MzI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-10T09:01:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T08:51:54Z"}, "message": "Make RegionVid use newtype_index!\n\nCloses #45843", "tree": {"sha": "2dfa4252f927b3012e9a164bf29b8ca3c8704b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dfa4252f927b3012e9a164bf29b8ca3c8704b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fecccbd2e9760cdc082b5030ebf82911b7e3632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fecccbd2e9760cdc082b5030ebf82911b7e3632", "html_url": "https://github.com/rust-lang/rust/commit/4fecccbd2e9760cdc082b5030ebf82911b7e3632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fecccbd2e9760cdc082b5030ebf82911b7e3632/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d09e0b4dac93ae07dae6206bf95e7cea0124a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d09e0b4dac93ae07dae6206bf95e7cea0124a2", "html_url": "https://github.com/rust-lang/rust/commit/d6d09e0b4dac93ae07dae6206bf95e7cea0124a2"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "5a4f2157298b066715a3d92740f7ebb69b80a682", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=4fecccbd2e9760cdc082b5030ebf82911b7e3632", "patch": "@@ -171,7 +171,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n         for (r, vid) in seeds {\n             // While all things transitively reachable in the graph\n             // from the variable (`'0` in the example above).\n-            let seed_index = NodeIndex(vid.index as usize);\n+            let seed_index = NodeIndex(vid.index() as usize);\n             for succ_index in graph.depth_traverse(seed_index, OUTGOING) {\n                 let succ_index = succ_index.0;\n \n@@ -512,16 +512,16 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n             match *constraint {\n                 Constraint::VarSubVar(a_id, b_id) => {\n                     graph.add_edge(\n-                        NodeIndex(a_id.index as usize),\n-                        NodeIndex(b_id.index as usize),\n+                        NodeIndex(a_id.index() as usize),\n+                        NodeIndex(b_id.index() as usize),\n                         *constraint,\n                     );\n                 }\n                 Constraint::RegSubVar(_, b_id) => {\n-                    graph.add_edge(dummy_source, NodeIndex(b_id.index as usize), *constraint);\n+                    graph.add_edge(dummy_source, NodeIndex(b_id.index() as usize), *constraint);\n                 }\n                 Constraint::VarSubReg(a_id, _) => {\n-                    graph.add_edge(NodeIndex(a_id.index as usize), dummy_sink, *constraint);\n+                    graph.add_edge(NodeIndex(a_id.index() as usize), dummy_sink, *constraint);\n                 }\n                 Constraint::RegSubReg(..) => {\n                     // this would be an edge from `dummy_source` to\n@@ -630,9 +630,9 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n             let node_idx = state.stack.pop().unwrap();\n \n             // check whether we've visited this node on some previous walk\n-            if dup_vec[node_idx.index as usize] == u32::MAX {\n-                dup_vec[node_idx.index as usize] = orig_node_idx.index;\n-            } else if dup_vec[node_idx.index as usize] != orig_node_idx.index {\n+            if dup_vec[node_idx.index() as usize] == u32::MAX {\n+                dup_vec[node_idx.index() as usize] = orig_node_idx.index() as u32;\n+            } else if dup_vec[node_idx.index() as usize] != orig_node_idx.index() as u32 {\n                 state.dup_found = true;\n             }\n \n@@ -659,7 +659,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n         ) {\n             debug!(\"process_edges(source_vid={:?}, dir={:?})\", source_vid, dir);\n \n-            let source_node_index = NodeIndex(source_vid.index as usize);\n+            let source_node_index = NodeIndex(source_vid.index() as usize);\n             for (_, edge) in graph.adjacent_edges(source_node_index, dir) {\n                 match edge.data {\n                     Constraint::VarSubVar(from_vid, to_vid) => {"}, {"sha": "72740dd40be2932dab0c771d6c3b9d717be5157a", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=4fecccbd2e9760cdc082b5030ebf82911b7e3632", "patch": "@@ -16,7 +16,7 @@ use self::CombineMapType::*;\n use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n use super::unify_key;\n \n-use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::unify::{self, UnificationTable};\n use ty::{self, Ty, TyCtxt};\n@@ -404,7 +404,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             }\n             AddVar(vid) => {\n                 self.var_origins.pop().unwrap();\n-                assert_eq!(self.var_origins.len(), vid.index as usize);\n+                assert_eq!(self.var_origins.len(), vid.index() as usize);\n             }\n             AddConstraint(ref constraint) => {\n                 self.data.constraints.remove(constraint);"}, {"sha": "99b11794cc5b577632b83161652f11e356248260", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=4fecccbd2e9760cdc082b5030ebf82911b7e3632", "patch": "@@ -33,7 +33,7 @@ pub struct RegionVidKey {\n \n impl Combine for RegionVidKey {\n     fn combine(&self, other: &RegionVidKey) -> RegionVidKey {\n-        let min_vid = if self.min_vid.index < other.min_vid.index {\n+        let min_vid = if self.min_vid.index() < other.min_vid.index() {\n             self.min_vid\n         } else {\n             other.min_vid\n@@ -45,8 +45,8 @@ impl Combine for RegionVidKey {\n \n impl UnifyKey for ty::RegionVid {\n     type Value = RegionVidKey;\n-    fn index(&self) -> u32 { self.index }\n-    fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid { index: i } }\n+    fn index(&self) -> u32 { self.0 }\n+    fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid(i) }\n     fn tag(_: Option<ty::RegionVid>) -> &'static str { \"RegionVid\" }\n }\n "}, {"sha": "9d393296c5b22ff5dda7486ccd5b555a46f77841", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4fecccbd2e9760cdc082b5030ebf82911b7e3632", "patch": "@@ -998,22 +998,11 @@ pub struct FloatVid {\n     pub index: u32,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy, PartialOrd, Ord)]\n-pub struct RegionVid {\n-    pub index: u32,\n-}\n-\n-// FIXME: We could convert this to use `newtype_index!`\n-impl Idx for RegionVid {\n-    fn new(value: usize) -> Self {\n-        assert!(value < ::std::u32::MAX as usize);\n-        RegionVid { index: value as u32 }\n-    }\n-\n-    fn index(self) -> usize {\n-        self.index as usize\n-    }\n-}\n+newtype_index!(RegionVid\n+    {\n+        pub idx\n+        DEBUG_FORMAT = custom,\n+    });\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n pub struct SkolemizedRegionVid {"}, {"sha": "9ff3d73f5c40e95678b06e40bd1f042145e8f67c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fecccbd2e9760cdc082b5030ebf82911b7e3632/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=4fecccbd2e9760cdc082b5030ebf82911b7e3632", "patch": "@@ -726,7 +726,7 @@ define_print! {\n                     }\n                 }\n                 ty::ReVar(region_vid) if cx.identify_regions => {\n-                    write!(f, \"'{}rv\", region_vid.index)\n+                    write!(f, \"'{}rv\", region_vid.index())\n                 }\n                 ty::ReScope(_) |\n                 ty::ReVar(_) |\n@@ -850,7 +850,7 @@ impl fmt::Debug for ty::FloatVid {\n \n impl fmt::Debug for ty::RegionVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"'_#{}r\", self.index)\n+        write!(f, \"'_#{}r\", self.index())\n     }\n }\n "}]}