{"sha": "ea5138eba0110070a59754c6eb1b876dd031ca64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNTEzOGViYTAxMTAwNzBhNTk3NTRjNmViMWI4NzZkZDAzMWNhNjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-06T02:31:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T12:40:42Z"}, "message": "Remove the `Option<>` since when computing LUB since I believe that the\ncase where `None` was returned should never happen in practice; it\namounts to comparing regions from two unrelated hierarchies. (I was also\nnot able to make it happen.)", "tree": {"sha": "b8a125a3e3d3048db4216cdfcd3ad0a9907f0871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8a125a3e3d3048db4216cdfcd3ad0a9907f0871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5138eba0110070a59754c6eb1b876dd031ca64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5138eba0110070a59754c6eb1b876dd031ca64", "html_url": "https://github.com/rust-lang/rust/commit/ea5138eba0110070a59754c6eb1b876dd031ca64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5138eba0110070a59754c6eb1b876dd031ca64/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53a22eab94f31df31cb936755c9c47784771759", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53a22eab94f31df31cb936755c9c47784771759", "html_url": "https://github.com/rust-lang/rust/commit/a53a22eab94f31df31cb936755c9c47784771759"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "b539dded12e8a65b7e622346053901bfb9a33863", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ea5138eba0110070a59754c6eb1b876dd031ca64/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5138eba0110070a59754c6eb1b876dd031ca64/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=ea5138eba0110070a59754c6eb1b876dd031ca64", "patch": "@@ -760,26 +760,25 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             // at least as big as the block fr.scope_id\".  So, we can\n             // reasonably compare free regions and scopes:\n             let fr_scope = fr.scope.to_code_extent();\n-            match self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) {\n+            let r_id = self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id);\n+\n+            if r_id == fr_scope {\n               // if the free region's scope `fr.scope_id` is bigger than\n               // the scope region `s_id`, then the LUB is the free\n               // region itself:\n-              Some(r_id) if r_id == fr_scope => f,\n-\n+              f\n+            } else {\n               // otherwise, we don't know what the free region is,\n               // so we must conservatively say the LUB is static:\n-              _ => ReStatic\n+              ReStatic\n             }\n           }\n \n           (ReScope(a_id), ReScope(b_id)) => {\n             // The region corresponding to an outer block is a\n             // subtype of the region corresponding to an inner\n             // block.\n-            match self.tcx.region_maps.nearest_common_ancestor(a_id, b_id) {\n-              Some(r_id) => ReScope(r_id),\n-              _ => ReStatic\n-            }\n+            ReScope(self.tcx.region_maps.nearest_common_ancestor(a_id, b_id))\n           }\n \n           (ReFree(ref a_fr), ReFree(ref b_fr)) => {\n@@ -866,9 +865,10 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 // is the scope `s_id`.  Otherwise, as we do not know\n                 // big the free region is precisely, the GLB is undefined.\n                 let fr_scope = fr.scope.to_code_extent();\n-                match self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) {\n-                    Some(r_id) if r_id == fr_scope => Ok(s),\n-                    _ => Err(ty::terr_regions_no_overlap(b, a))\n+                if self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) == fr_scope {\n+                    Ok(s)\n+                } else {\n+                    Err(ty::terr_regions_no_overlap(b, a))\n                 }\n             }\n \n@@ -934,10 +934,13 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         // it. Otherwise fail.\n         debug!(\"intersect_scopes(scope_a={:?}, scope_b={:?}, region_a={:?}, region_b={:?})\",\n                scope_a, scope_b, region_a, region_b);\n-        match self.tcx.region_maps.nearest_common_ancestor(scope_a, scope_b) {\n-            Some(r_id) if scope_a == r_id => Ok(ReScope(scope_b)),\n-            Some(r_id) if scope_b == r_id => Ok(ReScope(scope_a)),\n-            _ => Err(ty::terr_regions_no_overlap(region_a, region_b))\n+        let r_id = self.tcx.region_maps.nearest_common_ancestor(scope_a, scope_b);\n+        if r_id == scope_a {\n+            Ok(ReScope(scope_b))\n+        } else if r_id == scope_b {\n+            Ok(ReScope(scope_a))\n+        } else {\n+            Err(ty::terr_regions_no_overlap(region_a, region_b))\n         }\n     }\n }"}, {"sha": "b68f8fa9b988d1663b381b34d09c45b641f8fde4", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ea5138eba0110070a59754c6eb1b876dd031ca64/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5138eba0110070a59754c6eb1b876dd031ca64/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=ea5138eba0110070a59754c6eb1b876dd031ca64", "patch": "@@ -607,8 +607,8 @@ impl RegionMaps {\n     pub fn nearest_common_ancestor(&self,\n                                    scope_a: CodeExtent,\n                                    scope_b: CodeExtent)\n-                                   -> Option<CodeExtent> {\n-        if scope_a == scope_b { return Some(scope_a); }\n+                                   -> CodeExtent {\n+        if scope_a == scope_b { return scope_a; }\n \n         let a_ancestors = ancestors_of(self, scope_a);\n         let b_ancestors = ancestors_of(self, scope_b);\n@@ -636,13 +636,13 @@ impl RegionMaps {\n                  CodeExtent::DestructionScope(b_root_id)) => {\n                     if self.fn_is_enclosed_by(a_root_id, b_root_id) {\n                         // `a` is enclosed by `b`, hence `b` is the ancestor of everything in `a`\n-                        Some(scope_b)\n+                        scope_b\n                     } else if self.fn_is_enclosed_by(b_root_id, a_root_id) {\n                         // `b` is enclosed by `a`, hence `a` is the ancestor of everything in `b`\n-                        Some(scope_a)\n+                        scope_a\n                     } else {\n                         // neither fn encloses the other\n-                        None\n+                        unreachable!()\n                     }\n                 }\n                 _ => {\n@@ -655,17 +655,16 @@ impl RegionMaps {\n         loop {\n             // Loop invariant: a_ancestors[a_index] == b_ancestors[b_index]\n             // for all indices between a_index and the end of the array\n-            if a_index == 0 { return Some(scope_a); }\n-            if b_index == 0 { return Some(scope_b); }\n+            if a_index == 0 { return scope_a; }\n+            if b_index == 0 { return scope_b; }\n             a_index -= 1;\n             b_index -= 1;\n             if a_ancestors[a_index] != b_ancestors[b_index] {\n-                return Some(a_ancestors[a_index + 1]);\n+                return a_ancestors[a_index + 1];\n             }\n         }\n \n-        fn ancestors_of(this: &RegionMaps, scope: CodeExtent)\n-            -> Vec<CodeExtent> {\n+        fn ancestors_of(this: &RegionMaps, scope: CodeExtent) -> Vec<CodeExtent> {\n             // debug!(\"ancestors_of(scope={:?})\", scope);\n             let mut result = vec!(scope);\n             let mut scope = scope;"}]}