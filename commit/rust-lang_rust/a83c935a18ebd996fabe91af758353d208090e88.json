{"sha": "a83c935a18ebd996fabe91af758353d208090e88", "node_id": "C_kwDOAAsO6NoAKGE4M2M5MzVhMThlYmQ5OTZmYWJlOTFhZjc1ODM1M2QyMDgwOTBlODg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T05:13:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T06:32:42Z"}, "message": "Remove unnecessary sigils around `Ident::as_str()` calls.", "tree": {"sha": "495cc5ca949924a8f9e7b2ab10695d9b5d7fccdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495cc5ca949924a8f9e7b2ab10695d9b5d7fccdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a83c935a18ebd996fabe91af758353d208090e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a83c935a18ebd996fabe91af758353d208090e88", "html_url": "https://github.com/rust-lang/rust/commit/a83c935a18ebd996fabe91af758353d208090e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a83c935a18ebd996fabe91af758353d208090e88/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd4919ebb650785b308a131f270597b9f1e9a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd4919ebb650785b308a131f270597b9f1e9a19", "html_url": "https://github.com/rust-lang/rust/commit/ecd4919ebb650785b308a131f270597b9f1e9a19"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "50dd0d84fda518f0d3d4663c694187f8e0d55128", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n             if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right);\n             then {\n-                let suggested_fn = match (method_path.ident.as_str().as_ref(), divisor) {\n+                let suggested_fn = match (method_path.ident.as_str(), divisor) {\n                     (\"subsec_micros\", 1_000) | (\"subsec_nanos\", 1_000_000) => \"subsec_millis\",\n                     (\"subsec_nanos\", 1_000) => \"subsec_micros\",\n                     _ => return,"}, {"sha": "f21ec9a876ff4be2ec455305ea44a0e2c5ef1f51", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -599,7 +599,7 @@ fn are_same_base_logs(cx: &LateContext<'_>, expr_a: &Expr<'_>, expr_b: &Expr<'_>\n             return method_name_a.as_str() == method_name_b.as_str() &&\n                 args_a.len() == args_b.len() &&\n                 (\n-                    [\"ln\", \"log2\", \"log10\"].contains(&&*method_name_a.as_str()) ||\n+                    [\"ln\", \"log2\", \"log10\"].contains(&method_name_a.as_str()) ||\n                     method_name_a.as_str() == \"log\" && args_a.len() == 2 && eq_expr_value(cx, &args_a[1], &args_b[1])\n                 );\n         }"}, {"sha": "b03445b8cd6b08df5008424ec994f9e15a46266f", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -659,7 +659,7 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n     if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n-        let method_name = &*method.ident.as_str();\n+        let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {\n             \"iter\" | \"iter_mut\" => explicit_iter_loop::check(cx, self_arg, arg, method_name),"}, {"sha": "dbf103143d93cc7dc3f4e76cd3e1712d44aa9844", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchExprVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n             ExprKind::MethodCall(segment, _, [receiver], _)\n-                if self.case_altered(&*segment.ident.as_str(), receiver) => {},\n+                if self.case_altered(segment.ident.as_str(), receiver) => {},\n             _ => walk_expr(self, ex),\n         }\n     }"}, {"sha": "4ca1b3f01671c9e6f51b32f30dc44e9b3028374a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -1127,7 +1127,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             if let CommonPrefixSearcher::Path(path_prefix) = path_prefix {\n                 let mut s = String::new();\n                 for seg in path_prefix {\n-                    s.push_str(&seg.ident.as_str());\n+                    s.push_str(seg.ident.as_str());\n                     s.push_str(\"::\");\n                 }\n                 s"}, {"sha": "4307cbf00507a1fcb130f83793770af35a4c334d", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -81,7 +81,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n         if args.is_empty();\n         if let hir::ExprKind::Path(hir::QPath::TypeRelative(_, segment)) = &func.kind;\n         then {\n-            match &*segment.ident.as_str() {\n+            match segment.ident.as_str() {\n                 \"max_value\" => return Some(MinMax::Max),\n                 \"min_value\" => return Some(MinMax::Min),\n                 _ => {}"}, {"sha": "f2d84381887999c75bf33e70c1169826c23e5ebb", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -1999,8 +1999,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 from_iter_instead_of_collect::check(cx, expr, args, func);\n             },\n             hir::ExprKind::MethodCall(method_call, ref method_span, args, _) => {\n-                or_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n-                expect_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n+                or_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n+                expect_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n                 clone_on_copy::check(cx, expr, method_call.ident.name, args);\n                 clone_on_ref_ptr::check(cx, expr, method_call.ident.name, args);\n                 inefficient_to_string::check(cx, expr, method_call.ident.name, args);"}, {"sha": "e57f5f6f6ed8af206ec0d7567449fdabe07f1837", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -140,7 +140,7 @@ fn parse_iter_usage(\n             let did = cx.typeck_results().type_dependent_def_id(e.hir_id)?;\n             let iter_id = cx.tcx.get_diagnostic_item(sym::Iterator)?;\n \n-            match (&*name.ident.as_str(), args) {\n+            match (name.ident.as_str(), args) {\n                 (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n                     if reverse {\n                         (IterUsageKind::Second, e.span)\n@@ -298,7 +298,7 @@ fn check_iter(\n                 if let Some(did) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n                 if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n                 then {\n-                    match (&*name.ident.as_str(), args) {\n+                    match (name.ident.as_str(), args) {\n                         (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n                             return true;\n                         },"}, {"sha": "22834cf61ee038224db9e08d897bd65d67a7e14d", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n-                check_arguments(cx, arguments, method_type, &path.ident.as_str(), \"method\");\n+                check_arguments(cx, arguments, method_type, path.ident.as_str(), \"method\");\n             },\n             _ => (),\n         }"}, {"sha": "0931fec149ebfe557ec6edef687b93671e981cc0", "filename": "clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n             if is_type_diagnostic_item(cx,outer_ty,sym::Option);\n             if let ExprKind::MethodCall(path, _, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n-            if symbol==\"as_deref\" || symbol==\"as_deref_mut\";\n+            if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n             if TyS::same_type( outer_ty, typeck.expr_ty(sub_expr) );\n             then{\n                 span_lint_and_sugg("}, {"sha": "1b9285c2298df7f48e5ae9f9fe1da0a942a1c7df", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -82,7 +82,7 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n                 _ => Argument::Unknown,\n             };\n \n-            match &*path.ident.as_str() {\n+            match path.ident.as_str() {\n                 \"create\" => {\n                     options.push((OpenOption::Create, argument_option));\n                 },"}, {"sha": "398e2c200de3ca777db90fcf9295a8c06217f6a8", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> LateLintPass<'tcx> for SerdeApi {\n                     let mut seen_str = None;\n                     let mut seen_string = None;\n                     for item in items {\n-                        match &*item.ident.as_str() {\n+                        match item.ident.as_str() {\n                             \"visit_str\" => seen_str = Some(item.span),\n                             \"visit_string\" => seen_string = Some(item.span),\n                             _ => {},"}, {"sha": "f930fc9c55ba248e6200abca60f9766d5895749d", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                     check_map_error(cx, res, expr);\n                 }\n             },\n-            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match &*path.ident.as_str() {\n+            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n                     check_map_error(cx, arg_0, expr);\n                 },\n@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     let mut call = call;\n     while let hir::ExprKind::MethodCall(path, _, args, _) = call.kind {\n-        if matches!(&*path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n+        if matches!(path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n             call = &args[0];\n         } else {\n             break;\n@@ -82,7 +82,7 @@ fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<\n \n fn check_method_call(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(path, _, _, _) = call.kind {\n-        let symbol = &*path.ident.as_str();\n+        let symbol = path.ident.as_str();\n         let read_trait = match_trait_method(cx, call, &paths::IO_READ);\n         let write_trait = match_trait_method(cx, call, &paths::IO_WRITE);\n "}, {"sha": "01a5691223bfc6ef4db924e6424432aa37970eb2", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -158,7 +158,7 @@ fn collect_unwrap_info<'tcx>(\n             if let Some(local_id) = path_to_local(&args[0]);\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let name = method_name.ident.as_str();\n-            if is_relevant_option_call(cx, ty, &name) || is_relevant_result_call(cx, ty, &name);\n+            if is_relevant_option_call(cx, ty, name) || is_relevant_result_call(cx, ty, name);\n             then {\n                 assert!(args.len() == 1);\n                 let unwrappable = match name.as_ref() {"}, {"sha": "0c62161e53d437372e120404b5862f8aa03f4d73", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -79,7 +79,7 @@ fn correct_ident(ident: &str) -> String {\n \n fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n     let span = ident.span;\n-    let ident = &ident.as_str();\n+    let ident = ident.as_str();\n     let corrected = correct_ident(ident);\n     // warn if we have pure-uppercase idents\n     // assume that two-letter words are some kind of valid abbreviation like FP for false positive"}, {"sha": "abd8a3623703b2f14ea8232a8e9eaa0fc69d128c", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83c935a18ebd996fabe91af758353d208090e88/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=a83c935a18ebd996fabe91af758353d208090e88", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n             },\n \n             ExprKind::MethodCall(name, .., args, _) => {\n-                if is_trait_method(cx, e, sym::Into) && &*name.ident.as_str() == \"into\" {\n+                if is_trait_method(cx, e, sym::Into) && name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if same_type_and_consts(a, b) {"}]}