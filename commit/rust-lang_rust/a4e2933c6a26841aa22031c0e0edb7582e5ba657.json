{"sha": "a4e2933c6a26841aa22031c0e0edb7582e5ba657", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTI5MzNjNmEyNjg0MWFhMjIwMzFjMGUwZWRiNzU4MmU1YmE2NTc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-03T23:07:41Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-03T23:07:41Z"}, "message": "rustdoc: factor out function for getting inner html of highlighted source", "tree": {"sha": "b2d1f2860344696318ee5584c52c530be9d184b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2d1f2860344696318ee5584c52c530be9d184b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e2933c6a26841aa22031c0e0edb7582e5ba657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e2933c6a26841aa22031c0e0edb7582e5ba657", "html_url": "https://github.com/rust-lang/rust/commit/a4e2933c6a26841aa22031c0e0edb7582e5ba657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e2933c6a26841aa22031c0e0edb7582e5ba657/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b8c438203ada8768f2f8ea7c750131744f97ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b8c438203ada8768f2f8ea7c750131744f97ef", "html_url": "https://github.com/rust-lang/rust/commit/c0b8c438203ada8768f2f8ea7c750131744f97ef"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "7ca4703a2e1859e298a9ba486156f196758526c6", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a4e2933c6a26841aa22031c0e0edb7582e5ba657/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e2933c6a26841aa22031c0e0edb7582e5ba657/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=a4e2933c6a26841aa22031c0e0edb7582e5ba657", "patch": "@@ -17,22 +17,36 @@ use html::escape::Escape;\n \n use std::io;\n use std::io::prelude::*;\n-use syntax::parse::lexer;\n+use syntax::parse::lexer::{self, Reader};\n use syntax::parse::token;\n use syntax::parse;\n \n-/// Highlights some source code, returning the HTML output.\n-pub fn highlight(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n+/// Highlights `src`, returning the HTML output.\n+pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::ParseSess::new();\n     let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), src.to_string());\n \n     let mut out = Vec::new();\n-    doit(&sess,\n-         lexer::StringReader::new(&sess.span_diagnostic, fm),\n-         class,\n-         id,\n-         &mut out).unwrap();\n+    write_header(class, id, &mut out).unwrap();\n+    write_source(&sess,\n+                 lexer::StringReader::new(&sess.span_diagnostic, fm),\n+                 &mut out).unwrap();\n+    write_footer(&mut out).unwrap();\n+    String::from_utf8_lossy(&out[..]).into_owned()\n+}\n+\n+/// Highlights `src`, returning the HTML output. Returns only the inner html to\n+/// be inserted into an element. C.f., `render_with_highlighting` which includes\n+/// an enclosing `<pre>` block.\n+pub fn render_inner_with_highlighting(src: &str) -> String {\n+    let sess = parse::ParseSess::new();\n+    let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), src.to_string());\n+\n+    let mut out = Vec::new();\n+    write_source(&sess,\n+                 lexer::StringReader::new(&sess.span_diagnostic, fm),\n+                 &mut out).unwrap();\n     String::from_utf8_lossy(&out[..]).into_owned()\n }\n \n@@ -43,17 +57,10 @@ pub fn highlight(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n /// it's used. All source code emission is done as slices from the source map,\n /// not from the tokens themselves, in order to stay true to the original\n /// source.\n-fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n-        class: Option<&str>, id: Option<&str>,\n-        out: &mut Write) -> io::Result<()> {\n-    use syntax::parse::lexer::Reader;\n-\n-    write!(out, \"<pre \")?;\n-    match id {\n-        Some(id) => write!(out, \"id='{}' \", id)?,\n-        None => {}\n-    }\n-    write!(out, \"class='rust {}'>\\n\", class.unwrap_or(\"\"))?;\n+fn write_source(sess: &parse::ParseSess,\n+                mut lexer: lexer::StringReader,\n+                out: &mut Write)\n+                -> io::Result<()> {\n     let mut is_attribute = false;\n     let mut is_macro = false;\n     let mut is_macro_nonterminal = false;\n@@ -184,5 +191,21 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n         }\n     }\n \n+    Ok(())\n+}\n+\n+fn write_header(class: Option<&str>,\n+                id: Option<&str>,\n+                out: &mut Write)\n+                -> io::Result<()> {\n+    write!(out, \"<pre \")?;\n+    match id {\n+        Some(id) => write!(out, \"id='{}' \", id)?,\n+        None => {}\n+    }\n+    write!(out, \"class='rust {}'>\\n\", class.unwrap_or(\"\"))\n+}\n+\n+fn write_footer(out: &mut Write) -> io::Result<()> {\n     write!(out, \"</pre>\\n\")\n }"}, {"sha": "3baf22b38ef6874b2fca3e4199c3c11c96fead9e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e2933c6a26841aa22031c0e0edb7582e5ba657/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e2933c6a26841aa22031c0e0edb7582e5ba657/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=a4e2933c6a26841aa22031c0e0edb7582e5ba657", "patch": "@@ -262,9 +262,9 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                                               &Default::default());\n                     s.push_str(&format!(\"<span class='rusttest'>{}</span>\", Escape(&test)));\n                 });\n-                s.push_str(&highlight::highlight(&text,\n-                                                 Some(\"rust-example-rendered\"),\n-                                                 None));\n+                s.push_str(&highlight::render_with_highlighting(&text,\n+                                                                Some(\"rust-example-rendered\"),\n+                                                                None));\n                 let output = CString::new(s).unwrap();\n                 hoedown_buffer_puts(ob, output.as_ptr());\n             })"}, {"sha": "84ccd4ac661d23737830fbb8abbb9c114662dd99", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4e2933c6a26841aa22031c0e0edb7582e5ba657/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e2933c6a26841aa22031c0e0edb7582e5ba657/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a4e2933c6a26841aa22031c0e0edb7582e5ba657", "patch": "@@ -2661,16 +2661,16 @@ impl<'a> fmt::Display for Source<'a> {\n             write!(fmt, \"<span id=\\\"{0}\\\">{0:1$}</span>\\n\", i, cols)?;\n         }\n         write!(fmt, \"</pre>\")?;\n-        write!(fmt, \"{}\", highlight::highlight(s, None, None))?;\n+        write!(fmt, \"{}\", highlight::render_with_highlighting(s, None, None))?;\n         Ok(())\n     }\n }\n \n fn item_macro(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n               t: &clean::Macro) -> fmt::Result {\n-    w.write_str(&highlight::highlight(&t.source,\n-                                      Some(\"macro\"),\n-                                      None))?;\n+    w.write_str(&highlight::render_with_highlighting(&t.source,\n+                                                     Some(\"macro\"),\n+                                                     None))?;\n     render_stability_since_raw(w, it.stable_since(), None)?;\n     document(w, cx, it)\n }"}]}