{"sha": "b2c1919a3d1f0e77a64168c079caaa9610316f02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzE5MTlhM2QxZjBlNzdhNjQxNjhjMDc5Y2FhYTk2MTAzMTZmMDI=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-29T15:59:59Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-06T10:39:23Z"}, "message": "Store the `DefId` of the currently typechecked item in `InferCtxt`\n\nThis allows opaque type inference to check for defining uses without having to pass down that def id via function arguments to every method that could possibly cause an opaque type to be compared with a concrete type", "tree": {"sha": "0de0e8949b3b7ae297c7c176e24120bbfa11214c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de0e8949b3b7ae297c7c176e24120bbfa11214c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c1919a3d1f0e77a64168c079caaa9610316f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c1919a3d1f0e77a64168c079caaa9610316f02", "html_url": "https://github.com/rust-lang/rust/commit/b2c1919a3d1f0e77a64168c079caaa9610316f02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c1919a3d1f0e77a64168c079caaa9610316f02/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20371b94f62daa33c876adafeea266f9e8b8f222", "url": "https://api.github.com/repos/rust-lang/rust/commits/20371b94f62daa33c876adafeea266f9e8b8f222", "html_url": "https://github.com/rust-lang/rust/commit/20371b94f62daa33c876adafeea266f9e8b8f222"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "e3836f667a9e93562cf8f1a528cd8edbb6334a84", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b2c1919a3d1f0e77a64168c079caaa9610316f02", "patch": "@@ -9,6 +9,7 @@ pub(crate) use self::undo_log::{InferCtxtUndoLogs, Snapshot, UndoLog};\n \n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n \n+use hir::def_id::CRATE_DEF_ID;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::Rollback;\n@@ -292,6 +293,10 @@ impl<'tcx> InferCtxtInner<'tcx> {\n pub struct InferCtxt<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n \n+    /// The `DefId` of the item in whose context we are performing inference or typeck.\n+    /// It is used to check whether an opaque type use is a defining use.\n+    pub defining_use_anchor: LocalDefId,\n+\n     /// During type-checking/inference of a body, `in_progress_typeck_results`\n     /// contains a reference to the typeck results being built up, which are\n     /// used for reading closure kinds/signatures as they are inferred,\n@@ -550,6 +555,7 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n pub struct InferCtxtBuilder<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     fresh_typeck_results: Option<RefCell<ty::TypeckResults<'tcx>>>,\n+    defining_use_anchor: LocalDefId,\n }\n \n pub trait TyCtxtInferExt<'tcx> {\n@@ -558,15 +564,27 @@ pub trait TyCtxtInferExt<'tcx> {\n \n impl TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n     fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {\n-        InferCtxtBuilder { tcx: self, fresh_typeck_results: None }\n+        InferCtxtBuilder {\n+            tcx: self,\n+            defining_use_anchor: CRATE_DEF_ID,\n+            fresh_typeck_results: None,\n+        }\n     }\n }\n \n impl<'tcx> InferCtxtBuilder<'tcx> {\n     /// Used only by `rustc_typeck` during body type-checking/inference,\n     /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.\n+    /// Will also change the scope for opaque type defining use checks to the given owner.\n     pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {\n         self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));\n+        self.with_opaque_type_inference(table_owner)\n+    }\n+\n+    /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,\n+    /// you need to call this function. Otherwise the opaque type will be treated opaquely.\n+    pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {\n+        self.defining_use_anchor = defining_use_anchor;\n         self\n     }\n \n@@ -594,10 +612,11 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n     }\n \n     pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {\n-        let InferCtxtBuilder { tcx, ref fresh_typeck_results } = *self;\n+        let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;\n         let in_progress_typeck_results = fresh_typeck_results.as_ref();\n         f(InferCtxt {\n             tcx,\n+            defining_use_anchor,\n             in_progress_typeck_results,\n             inner: RefCell::new(InferCtxtInner::new()),\n             lexical_region_resolutions: RefCell::new(None),"}, {"sha": "2bfa51f27bbb610ad932d222da084a989cc5ac7f", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=b2c1919a3d1f0e77a64168c079caaa9610316f02", "patch": "@@ -105,7 +105,7 @@ fn mir_borrowck<'tcx>(\n     let (input_body, promoted) = tcx.mir_promoted(def);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def.did.to_def_id()));\n \n-    let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n+    let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n         let promoted: &IndexVec<_, _> = &promoted.borrow();\n         do_mir_borrowck(&infcx, input_body, promoted)"}, {"sha": "f69d08a6d594231163296fac607a42bd41da390d", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=b2c1919a3d1f0e77a64168c079caaa9610316f02", "patch": "@@ -1305,7 +1305,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     // (Note that the key of the map is both the def-id of `Foo` along with\n                     // any generic parameters.)\n                     let output_ty = obligations.add(infcx.instantiate_opaque_types(\n-                        mir_def_id,\n                         dummy_body_id,\n                         param_env,\n                         anon_ty,"}, {"sha": "c24e738a7df030f8c832690c73cd2cb26f6cbc0c", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=b2c1919a3d1f0e77a64168c079caaa9610316f02", "patch": "@@ -32,7 +32,6 @@ pub enum GenerateMemberConstraints {\n pub trait InferCtxtExt<'tcx> {\n     fn instantiate_opaque_types<T: TypeFoldable<'tcx>>(\n         &self,\n-        parent_def_id: LocalDefId,\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n         value: T,\n@@ -94,25 +93,18 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// - `value_span` -- the span where the value came from, used in error reporting\n     fn instantiate_opaque_types<T: TypeFoldable<'tcx>>(\n         &self,\n-        parent_def_id: LocalDefId,\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n         value: T,\n         value_span: Span,\n     ) -> InferOk<'tcx, T> {\n         debug!(\n-            \"instantiate_opaque_types(value={:?}, parent_def_id={:?}, body_id={:?}, \\\n+            \"instantiate_opaque_types(value={:?}, body_id={:?}, \\\n              param_env={:?}, value_span={:?})\",\n-            value, parent_def_id, body_id, param_env, value_span,\n+            value, body_id, param_env, value_span,\n         );\n-        let mut instantiator = Instantiator {\n-            infcx: self,\n-            parent_def_id,\n-            body_id,\n-            param_env,\n-            value_span,\n-            obligations: vec![],\n-        };\n+        let mut instantiator =\n+            Instantiator { infcx: self, body_id, param_env, value_span, obligations: vec![] };\n         let value = instantiator.instantiate_opaque_types_in_map(value);\n         InferOk { value, obligations: instantiator.obligations }\n     }\n@@ -857,7 +849,6 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n \n struct Instantiator<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-    parent_def_id: LocalDefId,\n     body_id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n     value_span: Span,\n@@ -910,7 +901,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                     // ```\n                     if let Some(def_id) = def_id.as_local() {\n                         let opaque_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                        let parent_def_id = self.parent_def_id;\n+                        let parent_def_id = self.infcx.defining_use_anchor;\n                         let def_scope_default = || {\n                             let opaque_parent_hir_id = tcx.hir().get_parent_item(opaque_hir_id);\n                             parent_def_id == tcx.hir().local_def_id(opaque_parent_hir_id)\n@@ -922,14 +913,14 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                     impl_trait_fn: Some(parent),\n                                     origin,\n                                     ..\n-                                }) => (parent == self.parent_def_id.to_def_id(), origin),\n+                                }) => (parent == parent_def_id.to_def_id(), origin),\n                                 // Named `type Foo = impl Bar;`\n                                 hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                                     impl_trait_fn: None,\n                                     origin,\n                                     ..\n                                 }) => (\n-                                    may_define_opaque_type(tcx, self.parent_def_id, opaque_hir_id),\n+                                    may_define_opaque_type(tcx, parent_def_id, opaque_hir_id),\n                                     origin,\n                                 ),\n                                 _ => (def_scope_default(), hir::OpaqueTyOrigin::TyAlias),"}, {"sha": "10c3a97e73a5af46123d9446b320a1532007fdbc", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=b2c1919a3d1f0e77a64168c079caaa9610316f02", "patch": "@@ -593,11 +593,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         orig_expected: Expectation<'tcx>,\n     ) -> Option<Span> {\n         match (orig_expected, self.ret_coercion_impl_trait.map(|ty| (self.body_id.owner, ty))) {\n-            (Expectation::ExpectHasType(expected), Some((id, ty)))\n+            (Expectation::ExpectHasType(expected), Some((_id, ty)))\n                 if self.in_tail_expr && self.can_coerce(outer_ty, expected) =>\n             {\n                 let impl_trait_ret_ty =\n-                    self.infcx.instantiate_opaque_types(id, self.body_id, self.param_env, ty, span);\n+                    self.infcx.instantiate_opaque_types(self.body_id, self.param_env, ty, span);\n                 assert!(\n                     impl_trait_ret_ty.obligations.is_empty(),\n                     \"we should never get new obligations here\""}, {"sha": "8b5b7e3e52c80d0d9cd72a8c029ab4308e3ef4c3", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=b2c1919a3d1f0e77a64168c079caaa9610316f02", "patch": "@@ -95,7 +95,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     let declared_ret_ty = fn_sig.output();\n \n     let revealed_ret_ty =\n-        fcx.instantiate_opaque_types_from_value(fn_id, declared_ret_ty, decl.output.span());\n+        fcx.instantiate_opaque_types_from_value(declared_ret_ty, decl.output.span());\n     debug!(\"check_fn: declared_ret_ty: {}, revealed_ret_ty: {}\", declared_ret_ty, revealed_ret_ty);\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(revealed_ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());\n@@ -651,7 +651,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         let misc_cause = traits::ObligationCause::misc(span, hir_id);\n \n         let _ = inh.register_infer_ok_obligations(\n-            infcx.instantiate_opaque_types(def_id, hir_id, param_env, opaque_ty, span),\n+            infcx.instantiate_opaque_types(hir_id, param_env, opaque_ty, span),\n         );\n \n         let opaque_type_map = infcx.inner.borrow().opaque_types.clone();"}, {"sha": "b84a79b768c9a32223fa1c739685d54c372c83e8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1919a3d1f0e77a64168c079caaa9610316f02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=b2c1919a3d1f0e77a64168c079caaa9610316f02", "patch": "@@ -362,20 +362,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Replaces the opaque types from the given value with type variables,\n     /// and records the `OpaqueTypeMap` for later use during writeback. See\n     /// `InferCtxt::instantiate_opaque_types` for more details.\n+    #[instrument(skip(self, value_span), level = \"debug\")]\n     pub(in super::super) fn instantiate_opaque_types_from_value<T: TypeFoldable<'tcx>>(\n         &self,\n-        parent_id: hir::HirId,\n         value: T,\n         value_span: Span,\n     ) -> T {\n-        let parent_def_id = self.tcx.hir().local_def_id(parent_id);\n-        debug!(\n-            \"instantiate_opaque_types_from_value(parent_def_id={:?}, value={:?})\",\n-            parent_def_id, value\n-        );\n-\n         self.register_infer_ok_obligations(self.instantiate_opaque_types(\n-            parent_def_id,\n             self.body_id,\n             self.param_env,\n             value,"}]}