{"sha": "03af82afd162a7516796097710ab5dc4dd48acf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYWY4MmFmZDE2MmE3NTE2Nzk2MDk3NzEwYWI1ZGM0ZGQ0OGFjZjM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-11T13:59:19Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-11T13:59:19Z"}, "message": "removed expensive crate check from approx_const", "tree": {"sha": "aa9135cea29b1637625b835cccd0ce3a66432a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9135cea29b1637625b835cccd0ce3a66432a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03af82afd162a7516796097710ab5dc4dd48acf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03af82afd162a7516796097710ab5dc4dd48acf3", "html_url": "https://github.com/rust-lang/rust/commit/03af82afd162a7516796097710ab5dc4dd48acf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03af82afd162a7516796097710ab5dc4dd48acf3/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "681bce925f92eaebc5ae3fc40a6a4a8720e46790", "url": "https://api.github.com/repos/rust-lang/rust/commits/681bce925f92eaebc5ae3fc40a6a4a8720e46790", "html_url": "https://github.com/rust-lang/rust/commit/681bce925f92eaebc5ae3fc40a6a4a8720e46790"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "29631b6852f92346ae3019a205d23f95021a75d5", "filename": "src/approx_const.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/03af82afd162a7516796097710ab5dc4dd48acf3/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03af82afd162a7516796097710ab5dc4dd48acf3/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=03af82afd162a7516796097710ab5dc4dd48acf3", "patch": "@@ -1,8 +1,5 @@\n use rustc::lint::*;\n-use rustc::metadata::cstore::crate_metadata;\n use rustc_front::hir::*;\n-use syntax::codemap::Span;\n-use std::borrow::Borrow;\n use std::f64::consts as f64;\n use utils::span_lint;\n \n@@ -32,36 +29,28 @@ impl LintPass for ApproxConstant {\n \n     fn check_expr(&mut self, cx: &Context, e: &Expr) {\n         if let &ExprLit(ref lit) = &e.node {\n-            if let Some(res) = cx.tcx.def_map.borrow().get(&e.id) {\n-                let krate = res.def_id().krate;\n-                let cdata = &cx.sess().cstore.get_crate_data(krate);\n-                let crate_data : &crate_metadata = cdata.borrow();\n-                let name = &crate_data.name;\n-                if name == \"f32\" || name == \"f64\" { return; }\n-            }\n-            check_lit(cx, lit, e.span);\n+            check_lit(cx, lit, e);\n         }\n     }\n }\n \n-fn check_lit(cx: &Context, lit: &Lit, span: Span) {\n+fn check_lit(cx: &Context, lit: &Lit, e: &Expr) {\n     match lit.node {\n-        LitFloat(ref str, TyF32) => check_known_consts(cx, span, str, \"f32\"),\n-        LitFloat(ref str, TyF64) => check_known_consts(cx, span, str, \"f64\"),\n+        LitFloat(ref str, TyF32) => check_known_consts(cx, e, str, \"f32\"),\n+        LitFloat(ref str, TyF64) => check_known_consts(cx, e, str, \"f64\"),\n         LitFloatUnsuffixed(ref str) =>\n-            check_known_consts(cx, span, str, \"f{32, 64}\"),\n+            check_known_consts(cx, e, str, \"f{32, 64}\"),\n         _ => ()\n     }\n }\n \n-fn check_known_consts(cx: &Context, span: Span, str: &str, module: &str) {\n+fn check_known_consts(cx: &Context, e: &Expr, str: &str, module: &str) {\n     if let Ok(value) = str.parse::<f64>() {\n         for &(constant, name) in KNOWN_CONSTS {\n-            if within_epsilon(constant, value) {\n-                span_lint(cx, APPROX_CONSTANT, span, &format!(\n-                    \"approximate value of `{}::{}` found. \\\n-                    Consider using it directly\", module, &name));\n-            }\n+            if !within_epsilon(constant, value) { continue; }\n+            span_lint(cx, APPROX_CONSTANT, e.span, &format!(\n+                \"approximate value of `{}::{}` found. \\\n+                Consider using it directly\", module, &name));\n         }\n     }\n }"}]}