{"sha": "950efff5c6f1fdc803d7abda3adf4e60899dadb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MGVmZmY1YzZmMWZkYzgwM2Q3YWJkYTNhZGY0ZTYwODk5ZGFkYjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-04T18:12:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-04T18:12:37Z"}, "message": "Merge #9780\n\n9780: Support exclusive_range_pattern r=matklad a=lf-\n\nFix #9779\n\nCo-authored-by: Jade <software@lfcode.ca>", "tree": {"sha": "ea4b8320c8910e35b61172732bb2c97cce9a4bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea4b8320c8910e35b61172732bb2c97cce9a4bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/950efff5c6f1fdc803d7abda3adf4e60899dadb0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCtiVCRBK7hj4Ov3rIwAA3M8IAD7/eOjmKyoZU0Ghf6b355el\n2Yg51vYtP9bO6Wz0B57u+cAuG+A0ZZK/JY6PtH+oqSUMtDXluMhUU3o3muhRo8WB\nFKQdYjBEVUyYEaM/OS0VMvcXm5evQzl1fGXuLKYOxZmdRRZNcQh85seGj2g4bRd2\nZgi26UQWa1m7ZVIc2P1uqXvdYi0A+JHzMFKa8G2O7Hz28aA3+rnwvYXIuioAskt4\njWmQygYMNgZD4QoKQ0f4KzI0NCb3BYV3ffKlUlcCYFnGJAyTjvRRwTQjtwvyRYhn\nmQ4ORDD4ESrlcnyaimIErMIvs1E8J56mMpiGzDU6S0EMWeRSBF6yy2tV/Xz1B1E=\n=+wkt\n-----END PGP SIGNATURE-----\n", "payload": "tree ea4b8320c8910e35b61172732bb2c97cce9a4bea\nparent ec753847bd5a20806464a4c78813f96d8ff32a4e\nparent 775670e32c18f31c5bf334f7649abe6e65f45b3d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628100757 +0000\ncommitter GitHub <noreply@github.com> 1628100757 +0000\n\nMerge #9780\n\n9780: Support exclusive_range_pattern r=matklad a=lf-\n\nFix #9779\n\nCo-authored-by: Jade <software@lfcode.ca>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/950efff5c6f1fdc803d7abda3adf4e60899dadb0", "html_url": "https://github.com/rust-lang/rust/commit/950efff5c6f1fdc803d7abda3adf4e60899dadb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/950efff5c6f1fdc803d7abda3adf4e60899dadb0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec753847bd5a20806464a4c78813f96d8ff32a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec753847bd5a20806464a4c78813f96d8ff32a4e", "html_url": "https://github.com/rust-lang/rust/commit/ec753847bd5a20806464a4c78813f96d8ff32a4e"}, {"sha": "775670e32c18f31c5bf334f7649abe6e65f45b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/775670e32c18f31c5bf334f7649abe6e65f45b3d", "html_url": "https://github.com/rust-lang/rust/commit/775670e32c18f31c5bf334f7649abe6e65f45b3d"}], "stats": {"total": 146, "additions": 105, "deletions": 41}, "files": [{"sha": "6beb664ffbfa97f394e283e09a6b4d5669abcd1a", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -51,7 +51,7 @@\n //! The `GetDeclaredType` takes `Syntax` as input, and returns `Symbol` as\n //! output. First, it retrieves a `Symbol` for parent `Syntax`:\n //!\n-//! * https://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1423\n+//! * <https://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/Compilation/SyntaxTreeSemanticModel.cs,1423>\n //!\n //! Then, it iterates parent symbol's children, looking for one which has the\n //! same text span as the original node:"}, {"sha": "6dc6e12903fc99b772292ddeda6249be26e2a1a4", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -39,8 +39,7 @@\n //!\n //! Splitting is implemented in the [`Constructor::split`] function. We don't do splitting for\n //! or-patterns; instead we just try the alternatives one-by-one. For details on splitting\n-//! wildcards, see [`SplitWildcard`]; for integer ranges, see [`SplitIntRange`]; for slices, see\n-//! [`SplitVarLenSlice`].\n+//! wildcards, see [`SplitWildcard`]; for integer ranges, see [`SplitIntRange`].\n \n use std::{\n     cmp::{max, min},"}, {"sha": "06f03b03f1638d916651317cf8a9e694c51f8ba3", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -120,8 +120,8 @@ pub fn visit_file_defs(\n ///\n /// Note that, by default, rust-analyzer tests **do not** include core or std\n /// libraries. If you are writing tests for functionality using [`FamousDefs`],\n-/// you'd want to include [minicore](test_utils::MiniCore) declaration at the\n-/// start of your tests:\n+/// you'd want to include minicore (see `test_utils::MiniCore`) declaration at\n+/// the start of your tests:\n ///\n /// ```\n /// //- minicore: iterator, ord, derive"}, {"sha": "cef9b7df31fa166c3ef9c8ea8c2cce1e3bb4cf94", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -6,9 +6,9 @@\n //! each submodule starts with `use super::*` import and exports\n //! \"public\" productions via `pub(super)`.\n //!\n-//! See docs for `Parser` to learn about API, available to the grammar,\n-//! and see docs for `Event` to learn how this actually manages to\n-//! produce parse trees.\n+//! See docs for [`Parser`](super::parser::Parser) to learn about API,\n+//! available to the grammar, and see docs for [`Event`](super::event::Event)\n+//! to learn how this actually manages to produce parse trees.\n //!\n //! Code in this module also contains inline tests, which start with\n //! `// test name-of-the-test` comment and look like this:"}, {"sha": "fed5cca512d0e576671d04165ba17b98cdbfd0f3", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -65,14 +65,26 @@ fn pattern_single_r(p: &mut Parser, recovery_set: TokenSet) {\n         //     match 92 {\n         //         0 ... 100 => (),\n         //         101 ..= 200 => (),\n-        //         200 .. 301=> (),\n+        //         200 .. 301 => (),\n+        //         302 .. => (),\n         //     }\n         // }\n+\n+        // FIXME: support half_open_range_patterns (`..=2`),\n+        // exclusive_range_pattern (`..5`) with missing lhs\n         for &range_op in [T![...], T![..=], T![..]].iter() {\n             if p.at(range_op) {\n                 let m = lhs.precede(p);\n                 p.bump(range_op);\n-                atom_pat(p, recovery_set);\n+\n+                // `0 .. =>` or `let 0 .. =`\n+                //       ^                ^\n+                if p.at(T![=]) {\n+                    // test half_open_range_pat\n+                    // fn f() { let 0 .. = 1u32; }\n+                } else {\n+                    atom_pat(p, recovery_set);\n+                }\n                 m.complete(p, RANGE_PAT);\n                 return;\n             }\n@@ -84,7 +96,7 @@ const PAT_RECOVERY_SET: TokenSet =\n     TokenSet::new(&[T![let], T![if], T![while], T![loop], T![match], T![')'], T![,], T![=]]);\n \n fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n-    let m = match p.nth(0) {\n+    let m = match p.current() {\n         T![box] => box_pat(p),\n         T![ref] | T![mut] => ident_pat(p, true),\n         T![const] => const_block_pat(p),"}, {"sha": "44537e380ae77a73dc74d3da55c19b4ef34fe686", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -1,17 +1,20 @@\n //! The Rust parser.\n //!\n //! The parser doesn't know about concrete representation of tokens and syntax\n-//! trees. Abstract `TokenSource` and `TreeSink` traits are used instead. As a\n-//! consequence, this crates does not contain a lexer.\n+//! trees. Abstract [`TokenSource`] and [`TreeSink`] traits are used instead.\n+//! As a consequence, this crate does not contain a lexer.\n //!\n-//! The `Parser` struct from the `parser` module is a cursor into the sequence\n-//! of tokens. Parsing routines use `Parser` to inspect current state and\n-//! advance the parsing.\n+//! The [`Parser`] struct from the [`parser`] module is a cursor into the\n+//! sequence of tokens.  Parsing routines use [`Parser`] to inspect current\n+//! state and advance the parsing.\n //!\n-//! The actual parsing happens in the `grammar` module.\n+//! The actual parsing happens in the [`grammar`] module.\n //!\n-//! Tests for this crate live in `syntax` crate.\n+//! Tests for this crate live in the `syntax` crate.\n+//!\n+//! [`Parser`]: crate::parser::Parser\n \n+#![allow(rustdoc::private_intra_doc_links)]\n #[macro_use]\n mod token_set;\n #[macro_use]"}, {"sha": "5ed362ea638c0a3dbf202e547d06c24c6c1c9e53", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -14,7 +14,7 @@ use crate::{\n /// `Parser` struct provides the low-level API for\n /// navigating through the stream of tokens and\n /// constructing the parse tree. The actual parsing\n-/// happens in the `grammar` module.\n+/// happens in the [`grammar`](super::grammar) module.\n ///\n /// However, the result of this `Parser` is not a real\n /// tree, but rather a flat stream of events of the form\n@@ -262,7 +262,7 @@ impl<'t> Parser<'t> {\n     }\n }\n \n-/// See `Parser::start`.\n+/// See [`Parser::start`].\n pub(crate) struct Marker {\n     pos: u32,\n     bomb: DropBomb,\n@@ -320,7 +320,8 @@ impl CompletedMarker {\n     /// node `A`, then complete it, and then after parsing the\n     /// whole `A`, decide that it should have started some node\n     /// `B` before starting `A`. `precede` allows to do exactly\n-    /// that. See also docs about `forward_parent` in `Event::Start`.\n+    /// that. See also docs about\n+    /// [`Event::Start::forward_parent`](crate::event::Event::Start::forward_parent).\n     ///\n     /// Given completed events `[START, FINISH]` and its corresponding\n     /// `CompletedMarker(pos: 0, _)`."}, {"sha": "4a5a66d3fd35b8b18996d1c73c5d729ff4afc30b", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -197,12 +197,12 @@ pub enum AttrKind {\n }\n \n impl AttrKind {\n-    /// Returns `true` if the attr_kind is [`Inner`].\n+    /// Returns `true` if the attr_kind is [`Inner`](Self::Inner).\n     pub fn is_inner(&self) -> bool {\n         matches!(self, Self::Inner)\n     }\n \n-    /// Returns `true` if the attr_kind is [`Outer`].\n+    /// Returns `true` if the attr_kind is [`Outer`](Self::Outer).\n     pub fn is_outer(&self) -> bool {\n         matches!(self, Self::Outer)\n     }"}, {"sha": "75982c3dee98580597ea757cb0849d4c1579b94e", "filename": "crates/syntax/test_data/parser/inline/ok/0058_range_pat.rast", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rast?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@0..112\n-  FN@0..111\n+SOURCE_FILE@0..135\n+  FN@0..134\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..7\n@@ -8,16 +8,16 @@ SOURCE_FILE@0..112\n       L_PAREN@7..8 \"(\"\n       R_PAREN@8..9 \")\"\n     WHITESPACE@9..10 \" \"\n-    BLOCK_EXPR@10..111\n+    BLOCK_EXPR@10..134\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n-      MATCH_EXPR@16..109\n+      MATCH_EXPR@16..132\n         MATCH_KW@16..21 \"match\"\n         WHITESPACE@21..22 \" \"\n         LITERAL@22..24\n           INT_NUMBER@22..24 \"92\"\n         WHITESPACE@24..25 \" \"\n-        MATCH_ARM_LIST@25..109\n+        MATCH_ARM_LIST@25..132\n           L_CURLY@25..26 \"{\"\n           WHITESPACE@26..35 \"\\n        \"\n           MATCH_ARM@35..51\n@@ -58,7 +58,7 @@ SOURCE_FILE@0..112\n               R_PAREN@76..77 \")\"\n             COMMA@77..78 \",\"\n           WHITESPACE@78..87 \"\\n        \"\n-          MATCH_ARM@87..103\n+          MATCH_ARM@87..104\n             RANGE_PAT@87..97\n               LITERAL_PAT@87..90\n                 LITERAL@87..90\n@@ -69,14 +69,30 @@ SOURCE_FILE@0..112\n               LITERAL_PAT@94..97\n                 LITERAL@94..97\n                   INT_NUMBER@94..97 \"301\"\n-            FAT_ARROW@97..99 \"=>\"\n-            WHITESPACE@99..100 \" \"\n-            TUPLE_EXPR@100..102\n-              L_PAREN@100..101 \"(\"\n-              R_PAREN@101..102 \")\"\n-            COMMA@102..103 \",\"\n-          WHITESPACE@103..108 \"\\n    \"\n-          R_CURLY@108..109 \"}\"\n-      WHITESPACE@109..110 \"\\n\"\n-      R_CURLY@110..111 \"}\"\n-  WHITESPACE@111..112 \"\\n\"\n+            WHITESPACE@97..98 \" \"\n+            FAT_ARROW@98..100 \"=>\"\n+            WHITESPACE@100..101 \" \"\n+            TUPLE_EXPR@101..103\n+              L_PAREN@101..102 \"(\"\n+              R_PAREN@102..103 \")\"\n+            COMMA@103..104 \",\"\n+          WHITESPACE@104..113 \"\\n        \"\n+          MATCH_ARM@113..126\n+            RANGE_PAT@113..119\n+              LITERAL_PAT@113..116\n+                LITERAL@113..116\n+                  INT_NUMBER@113..116 \"302\"\n+              WHITESPACE@116..117 \" \"\n+              DOT2@117..119 \"..\"\n+            WHITESPACE@119..120 \" \"\n+            FAT_ARROW@120..122 \"=>\"\n+            WHITESPACE@122..123 \" \"\n+            TUPLE_EXPR@123..125\n+              L_PAREN@123..124 \"(\"\n+              R_PAREN@124..125 \")\"\n+            COMMA@125..126 \",\"\n+          WHITESPACE@126..131 \"\\n    \"\n+          R_CURLY@131..132 \"}\"\n+      WHITESPACE@132..133 \"\\n\"\n+      R_CURLY@133..134 \"}\"\n+  WHITESPACE@134..135 \"\\n\""}, {"sha": "3833fbd8d5a060ed01838967c57f9c0e23cb7c01", "filename": "crates/syntax/test_data/parser/inline/ok/0058_range_pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0058_range_pat.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -2,6 +2,7 @@ fn main() {\n     match 92 {\n         0 ... 100 => (),\n         101 ..= 200 => (),\n-        200 .. 301=> (),\n+        200 .. 301 => (),\n+        302 .. => (),\n     }\n }"}, {"sha": "67ac6a4633f596df5942c284db0a5d760b22d652", "filename": "crates/syntax/test_data/parser/inline/ok/0166_half_open_range_pat.rast", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0166_half_open_range_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0166_half_open_range_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0166_half_open_range_pat.rast?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -0,0 +1,31 @@\n+SOURCE_FILE@0..28\n+  FN@0..27\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    PARAM_LIST@4..6\n+      L_PAREN@4..5 \"(\"\n+      R_PAREN@5..6 \")\"\n+    WHITESPACE@6..7 \" \"\n+    BLOCK_EXPR@7..27\n+      L_CURLY@7..8 \"{\"\n+      WHITESPACE@8..9 \" \"\n+      LET_STMT@9..25\n+        LET_KW@9..12 \"let\"\n+        WHITESPACE@12..13 \" \"\n+        RANGE_PAT@13..17\n+          LITERAL_PAT@13..14\n+            LITERAL@13..14\n+              INT_NUMBER@13..14 \"0\"\n+          WHITESPACE@14..15 \" \"\n+          DOT2@15..17 \"..\"\n+        WHITESPACE@17..18 \" \"\n+        EQ@18..19 \"=\"\n+        WHITESPACE@19..20 \" \"\n+        LITERAL@20..24\n+          INT_NUMBER@20..24 \"1u32\"\n+        SEMICOLON@24..25 \";\"\n+      WHITESPACE@25..26 \" \"\n+      R_CURLY@26..27 \"}\"\n+  WHITESPACE@27..28 \"\\n\""}, {"sha": "1360eda056583f094bb55770aebe9202c98e4ada", "filename": "crates/syntax/test_data/parser/inline/ok/0166_half_open_range_pat.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0166_half_open_range_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950efff5c6f1fdc803d7abda3adf4e60899dadb0/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0166_half_open_range_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0166_half_open_range_pat.rs?ref=950efff5c6f1fdc803d7abda3adf4e60899dadb0", "patch": "@@ -0,0 +1 @@\n+fn f() { let 0 .. = 1u32; }"}]}