{"sha": "483656b606f81f0163b04fd05088813639b7f024", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MzY1NmI2MDZmODFmMDE2M2IwNGZkMDUwODg4MTM2MzliN2YwMjQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-11-21T22:07:58Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-11-29T00:23:24Z"}, "message": "Add E0492 error explanation", "tree": {"sha": "1d0882a8d7e8df773c6477a3cf3f934b6c5da21b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d0882a8d7e8df773c6477a3cf3f934b6c5da21b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/483656b606f81f0163b04fd05088813639b7f024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/483656b606f81f0163b04fd05088813639b7f024", "html_url": "https://github.com/rust-lang/rust/commit/483656b606f81f0163b04fd05088813639b7f024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/483656b606f81f0163b04fd05088813639b7f024/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1904b333eb49f9fd9c805e1e04bbaef998622312", "url": "https://api.github.com/repos/rust-lang/rust/commits/1904b333eb49f9fd9c805e1e04bbaef998622312", "html_url": "https://github.com/rust-lang/rust/commit/1904b333eb49f9fd9c805e1e04bbaef998622312"}], "stats": {"total": 98, "additions": 79, "deletions": 19}, "files": [{"sha": "bdfdc7f47860d699c3825a0bee17c46a01dd1bb6", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 79, "deletions": 19, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/483656b606f81f0163b04fd05088813639b7f024/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483656b606f81f0163b04fd05088813639b7f024/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=483656b606f81f0163b04fd05088813639b7f024", "patch": "@@ -1899,6 +1899,85 @@ contain references (with a maximum lifetime of `'a`).\n [1]: https://github.com/rust-lang/rfcs/pull/1156\n \"##,\n \n+E0492: r##\"\n+A borrow of a constant containing interior mutability was attempted. Erroneous\n+code example:\n+\n+```\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+const A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static B: &'static AtomicUsize = &A;\n+// error: cannot borrow a constant which contains interior mutability, create a\n+//        static instead\n+```\n+\n+A `const` represents a constant value that should never change. If one takes\n+a `&` reference to the constant, then one is taking a pointer to some memory\n+location containing the value. Normally this is perfectly fine: most values\n+can't be changed via a shared `&` pointer, but interior mutability would allow\n+it. That is, a constant value could be mutated. On the other hand, a `static` is\n+explicitly a single memory location, which can be mutated at will.\n+\n+So, in order to solve this error, either use statics which are `Sync`:\n+\n+```\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static B: &'static AtomicUsize = &A; // ok!\n+```\n+\n+You can also have this error while using a cell type:\n+\n+```\n+#![feature(const_fn)]\n+\n+use std::cell::Cell;\n+\n+const A: Cell<usize> = Cell::new(1);\n+const B: &'static Cell<usize> = &A;\n+// error: cannot borrow a constant which contains interior mutability, create\n+//        a static instead\n+\n+// or:\n+struct C { a: Cell<usize> }\n+\n+const D: C = C { a: Cell::new(1) };\n+const E: &'static Cell<usize> = &D.a; // error\n+\n+// or:\n+const F: &'static C = &D; // error\n+```\n+\n+This is because cell types internally use `UnsafeCell`, which isn't `Sync`.\n+These aren't thread safe, and thus can't be placed in statics. In this case,\n+`StaticMutex` would work just fine, but it isn't stable yet:\n+https://doc.rust-lang.org/nightly/std/sync/struct.StaticMutex.html\n+\n+However, if you still wish to use these types, you can achieve this by an unsafe\n+wrapper:\n+\n+```\n+#![feature(const_fn)]\n+\n+use std::cell::Cell;\n+use std::marker::Sync;\n+\n+struct NotThreadSafe<T> {\n+    value: Cell<T>,\n+}\n+\n+unsafe impl<T> Sync for NotThreadSafe<T> {}\n+\n+static A: NotThreadSafe<usize> = NotThreadSafe { value : Cell::new(1) };\n+static B: &'static NotThreadSafe<usize> = &A; // ok!\n+```\n+\n+Remember this solution is unsafe! You will have to ensure that accesses to the\n+cell are synchronized.\n+\"##,\n+\n E0493: r##\"\n A type with a destructor was assigned to an invalid type of variable. Erroneous\n code example:\n@@ -1967,7 +2046,6 @@ impl<'a> Foo<'a> {\n \n Please change the name of one of the lifetimes to remove this error. Example:\n \n-\n ```\n struct Foo<'a> {\n     a: &'a i32,\n@@ -1997,22 +2075,6 @@ It is not possible to use stability attributes outside of the standard library.\n Also, for now, it is not possible to write deprecation messages either.\n \"##,\n \n-E0498: r##\"\n-A plugin attribute was incorrectly used. Erroneous code example:\n-\n-```\n-#![feature(plugin)]\n-#![plugin=\"foo\")] // error: malformed plugin attribute\n-```\n-\n-The plugin name must be written without quotes and within parenthesis. Example:\n-\n-```\n-#![feature(plugin)]\n-#![plugin(foo)] // ok!\n-```\n-\"##,\n-\n E0517: r##\"\n This error indicates that a `#[repr(..)]` attribute was placed on an unsupported\n item.\n@@ -2137,7 +2199,5 @@ register_diagnostics! {\n     E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n-    E0492, // cannot borrow a constant which contains interior mutability\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n-    E0514, // metadata version mismatch\n }"}]}