{"sha": "eb55cdce4bc1c03e1ce805af633dac611a948d43", "node_id": "C_kwDOAAsO6NoAKGViNTVjZGNlNGJjMWMwM2UxY2U4MDVhZjYzM2RhYzYxMWE5NDhkNDM", "commit": {"author": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-04-25T20:53:09Z"}, "committer": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-04-25T20:54:16Z"}, "message": "use `ParseSess` instead of `Session` in `into_diagnostic`", "tree": {"sha": "698491ccbb08c4fa847876d37fe742369a8ca9c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/698491ccbb08c4fa847876d37fe742369a8ca9c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb55cdce4bc1c03e1ce805af633dac611a948d43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCYmcKeAAKCRAnUl7150IK\nUIAmAQDjbkQbudi1js/YquNEtUnQYvRLtUbUhmXWhi4TeMN62wD9Em9tYKOz07wB\n7e9hWbR/oE9iahmzvzlmezf7rbbVMAQ=\n=+KXW\n-----END PGP SIGNATURE-----", "payload": "tree 698491ccbb08c4fa847876d37fe742369a8ca9c7\nparent fedbe5dabc815bd710217221bfebad1ff9f37a43\nauthor Christian Poveda <git@pvdrz.com> 1650919989 +0200\ncommitter Christian Poveda <git@pvdrz.com> 1650920056 +0200\n\nuse `ParseSess` instead of `Session` in `into_diagnostic`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb55cdce4bc1c03e1ce805af633dac611a948d43", "html_url": "https://github.com/rust-lang/rust/commit/eb55cdce4bc1c03e1ce805af633dac611a948d43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb55cdce4bc1c03e1ce805af633dac611a948d43/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedbe5dabc815bd710217221bfebad1ff9f37a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedbe5dabc815bd710217221bfebad1ff9f37a43", "html_url": "https://github.com/rust-lang/rust/commit/fedbe5dabc815bd710217221bfebad1ff9f37a43"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "5661451f520717c27b5a502e2164676f6f47b2a5", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb55cdce4bc1c03e1ce805af633dac611a948d43/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb55cdce4bc1c03e1ce805af633dac611a948d43/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=eb55cdce4bc1c03e1ce805af633dac611a948d43", "patch": "@@ -119,7 +119,9 @@ fn span_err(span: impl proc_macro::MultiSpan, msg: &str) -> proc_macro::Diagnost\n /// Emit a diagnostic on span `$span` with msg `$msg` (optionally performing additional decoration\n /// using the `FnOnce` passed in `diag`) and return `Err(ErrorHandled)`.\n macro_rules! throw_span_err {\n-    ($span:expr, $msg:expr) => {{ throw_span_err!($span, $msg, |diag| diag) }};\n+    ($span:expr, $msg:expr) => {{\n+        throw_span_err!($span, $msg, |diag| diag)\n+    }};\n     ($span:expr, $msg:expr, $f:expr) => {{\n         return Err(_throw_span_err($span, $msg, $f));\n     }};\n@@ -308,7 +310,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n             {\n                 fn into_diagnostic(\n                     self,\n-                    #sess: &'__session_diagnostic_sess rustc_session::Session\n+                    #sess: &'__session_diagnostic_sess rustc_session::parse::ParseSess\n                 ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, #param_ty> {\n                     use rustc_errors::IntoDiagnosticArg;\n                     #implementation"}, {"sha": "dd7682ebacef569728eaa2a8c75121c77d07cada", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb55cdce4bc1c03e1ce805af633dac611a948d43/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb55cdce4bc1c03e1ce805af633dac611a948d43/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=eb55cdce4bc1c03e1ce805af633dac611a948d43", "patch": "@@ -3,13 +3,14 @@\n \n use crate::config::CheckCfg;\n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n+use crate::SessionDiagnostic;\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n     error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed, MultiSpan,\n+    DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -287,4 +288,19 @@ impl ParseSess {\n     pub fn proc_macro_quoted_spans(&self) -> Vec<Span> {\n         self.proc_macro_quoted_spans.lock().clone()\n     }\n+\n+    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+        err.into_diagnostic(self).emit()\n+    }\n+\n+    pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n+        warning.into_diagnostic(self).emit()\n+    }\n+\n+    pub fn struct_err(\n+        &self,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        self.span_diagnostic.struct_err(msg)\n+    }\n }"}, {"sha": "2bc0c5f1228e0e86751bb37f9bfb2c1add27de23", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb55cdce4bc1c03e1ce805af633dac611a948d43/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb55cdce4bc1c03e1ce805af633dac611a948d43/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=eb55cdce4bc1c03e1ce805af633dac611a948d43", "patch": "@@ -212,7 +212,7 @@ pub struct PerfStats {\n pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n     /// Write out as a diagnostic out of `sess`.\n     #[must_use]\n-    fn into_diagnostic(self, sess: &'a Session) -> DiagnosticBuilder<'a, T>;\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, T>;\n }\n \n impl Session {\n@@ -334,7 +334,7 @@ impl Session {\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        self.diagnostic().struct_err(msg)\n+        self.parse_sess.struct_err(msg)\n     }\n     pub fn struct_err_with_code(\n         &self,\n@@ -414,10 +414,10 @@ impl Session {\n         self.diagnostic().err(msg)\n     }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n-        err.into_diagnostic(self).emit()\n+        self.parse_sess.emit_err(err)\n     }\n     pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n-        warning.into_diagnostic(self).emit()\n+        self.parse_sess.emit_warning(warning)\n     }\n     #[inline]\n     pub fn err_count(&self) -> usize {\n@@ -783,7 +783,11 @@ impl Session {\n             Path::new(&rustlib_path),\n             Path::new(\"bin\"),\n         ]);\n-        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p] }\n+        if self_contained {\n+            vec![p.clone(), p.join(\"self-contained\")]\n+        } else {\n+            vec![p]\n+        }\n     }\n \n     pub fn init_incr_comp_session("}]}