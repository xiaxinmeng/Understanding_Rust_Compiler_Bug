{"sha": "88a12193365ae1a73d4840409cc7ef111b028eff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YTEyMTkzMzY1YWUxYTczZDQ4NDA0MDljYzdlZjExMWIwMjhlZmY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-23T16:39:48Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-24T00:57:08Z"}, "message": "cleanup warnings from compiletest", "tree": {"sha": "23cff94912a4358db67a8618b0f7d94fb96e3123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23cff94912a4358db67a8618b0f7d94fb96e3123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88a12193365ae1a73d4840409cc7ef111b028eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88a12193365ae1a73d4840409cc7ef111b028eff", "html_url": "https://github.com/rust-lang/rust/commit/88a12193365ae1a73d4840409cc7ef111b028eff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88a12193365ae1a73d4840409cc7ef111b028eff/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7e43aa779f3a82614766af41adb5828d9282b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e43aa779f3a82614766af41adb5828d9282b5a", "html_url": "https://github.com/rust-lang/rust/commit/d7e43aa779f3a82614766af41adb5828d9282b5a"}], "stats": {"total": 107, "additions": 53, "deletions": 54}, "files": [{"sha": "8147f8abb93da6ffafe6e3ebc1f24daca031a41d", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/88a12193365ae1a73d4840409cc7ef111b028eff/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/88a12193365ae1a73d4840409cc7ef111b028eff/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=88a12193365ae1a73d4840409cc7ef111b028eff", "patch": "@@ -50,20 +50,20 @@ pub fn main() {\n \n pub fn parse_config(args: ~[~str]) -> config {\n     let opts =\n-        ~[getopts::reqopt(~\"compile-lib-path\"),\n-          getopts::reqopt(~\"run-lib-path\"),\n-          getopts::reqopt(~\"rustc-path\"), getopts::reqopt(~\"src-base\"),\n-          getopts::reqopt(~\"build-base\"), getopts::reqopt(~\"aux-base\"),\n-          getopts::reqopt(~\"stage-id\"),\n-          getopts::reqopt(~\"mode\"), getopts::optflag(~\"ignored\"),\n-          getopts::optopt(~\"runtool\"), getopts::optopt(~\"rustcflags\"),\n-          getopts::optflag(~\"verbose\"),\n-          getopts::optopt(~\"logfile\"),\n-          getopts::optflag(~\"jit\"),\n-          getopts::optflag(~\"newrt\"),\n-          getopts::optopt(~\"target\"),\n-          getopts::optopt(~\"adb-path\"),\n-          getopts::optopt(~\"adb-test-dir\")\n+        ~[getopts::reqopt(\"compile-lib-path\"),\n+          getopts::reqopt(\"run-lib-path\"),\n+          getopts::reqopt(\"rustc-path\"), getopts::reqopt(\"src-base\"),\n+          getopts::reqopt(\"build-base\"), getopts::reqopt(\"aux-base\"),\n+          getopts::reqopt(\"stage-id\"),\n+          getopts::reqopt(\"mode\"), getopts::optflag(\"ignored\"),\n+          getopts::optopt(\"runtool\"), getopts::optopt(\"rustcflags\"),\n+          getopts::optflag(\"verbose\"),\n+          getopts::optopt(\"logfile\"),\n+          getopts::optflag(\"jit\"),\n+          getopts::optflag(\"newrt\"),\n+          getopts::optopt(\"target\"),\n+          getopts::optopt(\"adb-path\"),\n+          getopts::optopt(\"adb-test-dir\")\n          ];\n \n     assert!(!args.is_empty());\n@@ -74,43 +74,43 @@ pub fn parse_config(args: ~[~str]) -> config {\n           Err(f) => fail!(getopts::fail_str(f))\n         };\n \n-    fn opt_path(m: &getopts::Matches, nm: ~str) -> Path {\n+    fn opt_path(m: &getopts::Matches, nm: &str) -> Path {\n         Path(getopts::opt_str(m, nm))\n     }\n \n     config {\n-        compile_lib_path: getopts::opt_str(matches, ~\"compile-lib-path\"),\n-        run_lib_path: getopts::opt_str(matches, ~\"run-lib-path\"),\n-        rustc_path: opt_path(matches, ~\"rustc-path\"),\n-        src_base: opt_path(matches, ~\"src-base\"),\n-        build_base: opt_path(matches, ~\"build-base\"),\n-        aux_base: opt_path(matches, ~\"aux-base\"),\n-        stage_id: getopts::opt_str(matches, ~\"stage-id\"),\n-        mode: str_mode(getopts::opt_str(matches, ~\"mode\")),\n-        run_ignored: getopts::opt_present(matches, ~\"ignored\"),\n+        compile_lib_path: getopts::opt_str(matches, \"compile-lib-path\"),\n+        run_lib_path: getopts::opt_str(matches, \"run-lib-path\"),\n+        rustc_path: opt_path(matches, \"rustc-path\"),\n+        src_base: opt_path(matches, \"src-base\"),\n+        build_base: opt_path(matches, \"build-base\"),\n+        aux_base: opt_path(matches, \"aux-base\"),\n+        stage_id: getopts::opt_str(matches, \"stage-id\"),\n+        mode: str_mode(getopts::opt_str(matches, \"mode\")),\n+        run_ignored: getopts::opt_present(matches, \"ignored\"),\n         filter:\n              if vec::len(matches.free) > 0u {\n                  option::Some(copy matches.free[0])\n              } else { option::None },\n-        logfile: getopts::opt_maybe_str(matches, ~\"logfile\").map(|s| Path(*s)),\n-        runtool: getopts::opt_maybe_str(matches, ~\"runtool\"),\n-        rustcflags: getopts::opt_maybe_str(matches, ~\"rustcflags\"),\n-        jit: getopts::opt_present(matches, ~\"jit\"),\n-        newrt: getopts::opt_present(matches, ~\"newrt\"),\n-        target: opt_str2(getopts::opt_maybe_str(matches, ~\"target\")).to_str(),\n-        adb_path: opt_str2(getopts::opt_maybe_str(matches, ~\"adb-path\")).to_str(),\n+        logfile: getopts::opt_maybe_str(matches, \"logfile\").map(|s| Path(*s)),\n+        runtool: getopts::opt_maybe_str(matches, \"runtool\"),\n+        rustcflags: getopts::opt_maybe_str(matches, \"rustcflags\"),\n+        jit: getopts::opt_present(matches, \"jit\"),\n+        newrt: getopts::opt_present(matches, \"newrt\"),\n+        target: opt_str2(getopts::opt_maybe_str(matches, \"target\")).to_str(),\n+        adb_path: opt_str2(getopts::opt_maybe_str(matches, \"adb-path\")).to_str(),\n         adb_test_dir:\n-            opt_str2(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")).to_str(),\n+            opt_str2(getopts::opt_maybe_str(matches, \"adb-test-dir\")).to_str(),\n         adb_device_status:\n-            if (opt_str2(getopts::opt_maybe_str(matches, ~\"target\")) ==\n+            if (opt_str2(getopts::opt_maybe_str(matches, \"target\")) ==\n                 ~\"arm-linux-androideabi\") {\n-                if (opt_str2(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n+                if (opt_str2(getopts::opt_maybe_str(matches, \"adb-test-dir\")) !=\n                     ~\"(none)\" &&\n-                    opt_str2(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n+                    opt_str2(getopts::opt_maybe_str(matches, \"adb-test-dir\")) !=\n                     ~\"\") { true }\n                 else { false }\n             } else { false },\n-        verbose: getopts::opt_present(matches, ~\"verbose\")\n+        verbose: getopts::opt_present(matches, \"verbose\")\n     }\n }\n "}, {"sha": "cc4320248cdffa4af1eece10cb00182040d55c06", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88a12193365ae1a73d4840409cc7ef111b028eff/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a12193365ae1a73d4840409cc7ef111b028eff/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=88a12193365ae1a73d4840409cc7ef111b028eff", "patch": "@@ -87,10 +87,10 @@ pub fn load_props(testfile: &Path) -> TestProps {\n \n pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n     for iter_header(testfile) |ln| {\n-        if parse_name_directive(ln, ~\"xfail-test\") { return true; }\n+        if parse_name_directive(ln, \"xfail-test\") { return true; }\n         if parse_name_directive(ln, xfail_target()) { return true; }\n         if config.mode == common::mode_pretty &&\n-           parse_name_directive(ln, ~\"xfail-pretty\") { return true; }\n+           parse_name_directive(ln, \"xfail-pretty\") { return true; }\n     };\n     return false;\n \n@@ -107,8 +107,7 @@ fn iter_header(testfile: &Path, it: &fn(~str) -> bool) -> bool {\n         // Assume that any directives will be found before the first\n         // module or function. This doesn't seem to be an optimization\n         // with a warm page cache. Maybe with a cold one.\n-        if str::starts_with(ln, ~\"fn\")\n-            || str::starts_with(ln, ~\"mod\") {\n+        if str::starts_with(ln, \"fn\") || str::starts_with(ln, \"mod\") {\n             return false;\n         } else { if !(it(ln)) { return false; } }\n     }"}, {"sha": "c1586a1b350fa6e9bc1799dc1f9eea701af153a5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/88a12193365ae1a73d4840409cc7ef111b028eff/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a12193365ae1a73d4840409cc7ef111b028eff/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=88a12193365ae1a73d4840409cc7ef111b028eff", "patch": "@@ -25,7 +25,7 @@ use util::logv;\n pub fn run(config: config, testfile: ~str) {\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line.\n-        io::stdout().write_str(~\"\\n\\n\");\n+        io::stdout().write_str(\"\\n\\n\");\n     }\n     let testfile = Path(testfile);\n     debug!(\"running %s\", testfile.to_str());\n@@ -231,7 +231,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n     // do not optimize debuginfo tests\n     let mut config = match config.rustcflags {\n         Some(ref flags) => config {\n-            rustcflags: Some(str::replace(*flags, ~\"-O\", ~\"\")),\n+            rustcflags: Some(str::replace(*flags, \"-O\", \"\")),\n             .. copy *config\n         },\n         None => copy *config\n@@ -249,19 +249,19 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n     // write debugger script\n     let script_str = str::append(cmds, \"\\nquit\\n\");\n     debug!(\"script_str = %s\", script_str);\n-    dump_output_file(config, testfile, script_str, ~\"debugger.script\");\n+    dump_output_file(config, testfile, script_str, \"debugger.script\");\n \n     // run debugger script with gdb\n     #[cfg(windows)]\n     fn debugger() -> ~str { ~\"gdb.exe\" }\n     #[cfg(unix)]\n     fn debugger() -> ~str { ~\"gdb\" }\n-    let debugger_script = make_out_name(config, testfile, ~\"debugger.script\");\n+    let debugger_script = make_out_name(config, testfile, \"debugger.script\");\n     let debugger_opts = ~[~\"-quiet\", ~\"-batch\", ~\"-nx\",\n                           ~\"-command=\" + debugger_script.to_str(),\n                           make_exe_name(config, testfile).to_str()];\n     let ProcArgs = ProcArgs {prog: debugger(), args: debugger_opts};\n-    ProcRes = compose_and_run(config, testfile, ProcArgs, ~[], ~\"\", None);\n+    ProcRes = compose_and_run(config, testfile, ProcArgs, ~[], \"\", None);\n     if ProcRes.status != 0 {\n         fatal(~\"gdb failed to execute\");\n     }\n@@ -368,7 +368,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n         }\n \n         // ignore this msg which gets printed at the end\n-        if str::contains(line, ~\"aborting due to\") {\n+        if str::contains(line, \"aborting due to\") {\n             was_expected = true;\n         }\n \n@@ -643,7 +643,7 @@ fn program_output(config: &config, testfile: &Path, lib_path: &str, prog: ~str,\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n fn make_cmdline(_libpath: &str, prog: &str, args: &[~str]) -> ~str {\n-    fmt!(\"%s %s\", prog, str::connect(args, ~\" \"))\n+    fmt!(\"%s %s\", prog, str::connect(args, \" \"))\n }\n \n #[cfg(target_os = \"win32\")]\n@@ -668,7 +668,7 @@ fn dump_output_file(config: &config, testfile: &Path,\n                     out: &str, extension: &str) {\n     let outfile = make_out_name(config, testfile, extension);\n     let writer =\n-        io::file_writer(&outfile, ~[io::Create, io::Truncate]).get();\n+        io::file_writer(&outfile, [io::Create, io::Truncate]).get();\n     writer.write_str(out);\n }\n \n@@ -692,8 +692,8 @@ fn output_base_name(config: &config, testfile: &Path) -> Path {\n \n fn maybe_dump_to_stdout(config: &config, out: &str, err: &str) {\n     if config.verbose {\n-        let sep1 = fmt!(\"------%s------------------------------\", ~\"stdout\");\n-        let sep2 = fmt!(\"------%s------------------------------\", ~\"stderr\");\n+        let sep1 = fmt!(\"------%s------------------------------\", \"stdout\");\n+        let sep2 = fmt!(\"------%s------------------------------\", \"stderr\");\n         let sep3 = ~\"------------------------------------------\";\n         io::stdout().write_line(sep1);\n         io::stdout().write_line(out);\n@@ -781,10 +781,10 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     newargs_err.push(newcmd_err);\n \n     let procsrv::Result{ out: out_out, err: _out_err, status: out_status } =\n-            procsrv::run(~\"\", config.adb_path, newargs_out, ~[(~\"\",~\"\")],\n+            procsrv::run(\"\", config.adb_path, newargs_out, ~[(~\"\",~\"\")],\n                          Some(~\"\"));\n     let procsrv::Result{ out: err_out, err: _err_err, status: _err_status } =\n-            procsrv::run(~\"\", config.adb_path, newargs_err, ~[(~\"\",~\"\")],\n+            procsrv::run(\"\", config.adb_path, newargs_err, ~[(~\"\",~\"\")],\n                          Some(~\"\"));\n \n     dump_output(config, testfile, out_out, err_out);\n@@ -818,8 +818,8 @@ fn _arm_push_aux_shared_library(config: &config, testfile: &Path) {\n \n         if (file.filetype() == Some(~\".so\")) {\n \n-            let copy_result = procsrv::run(~\"\", config.adb_path,\n-                ~[~\"push\", file.to_str(), copy config.adb_test_dir],\n+            let copy_result = procsrv::run(\"\", config.adb_path,\n+                [~\"push\", file.to_str(), copy config.adb_test_dir],\n                 ~[(~\"\",~\"\")], Some(~\"\"));\n \n             if config.verbose {"}]}