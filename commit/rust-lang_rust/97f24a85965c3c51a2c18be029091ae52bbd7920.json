{"sha": "97f24a85965c3c51a2c18be029091ae52bbd7920", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZjI0YTg1OTY1YzNjNTFhMmMxOGJlMDI5MDkxYWU1MmJiZDc5MjA=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-04-06T15:43:50Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-04-07T22:26:35Z"}, "message": "Make `sum` and `product` inherent methods on `Iterator`\n\nIn addition to being nicer, this also allows you to use `sum` and `product` for\niterators yielding custom types aside from the standard integers.\n\nDue to removing the `AdditiveIterator` and `MultiplicativeIterator` trait, this\nis a breaking change.\n\n[breaking-change]", "tree": {"sha": "8e601d4b36ac0e3d1320482b959d42af6f8cb891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e601d4b36ac0e3d1320482b959d42af6f8cb891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97f24a85965c3c51a2c18be029091ae52bbd7920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97f24a85965c3c51a2c18be029091ae52bbd7920", "html_url": "https://github.com/rust-lang/rust/commit/97f24a85965c3c51a2c18be029091ae52bbd7920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97f24a85965c3c51a2c18be029091ae52bbd7920/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88427605bbd3271d52d064f339e344da2892b9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/88427605bbd3271d52d064f339e344da2892b9cb", "html_url": "https://github.com/rust-lang/rust/commit/88427605bbd3271d52d064f339e344da2892b9cb"}], "stats": {"total": 278, "additions": 89, "deletions": 189}, "files": [{"sha": "8622b8cd93568d8a42c3d909311002720852f9d0", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -85,7 +85,6 @@ use core::clone::Clone;\n use core::cmp::Ordering::{self, Greater, Less};\n use core::cmp::{self, Ord, PartialEq};\n use core::iter::Iterator;\n-use core::iter::MultiplicativeIterator;\n use core::marker::Sized;\n use core::mem::size_of;\n use core::mem;\n@@ -1182,7 +1181,7 @@ impl Iterator for ElementSwaps {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         // For a vector of size n, there are exactly n! permutations.\n-        let n = (2..self.sdir.len() + 1).product();\n+        let n: usize = (2..self.sdir.len() + 1).product();\n         (n - self.swaps_made, Some(n - self.swaps_made))\n     }\n }"}, {"sha": "c5de430ae8ce2a0726fc0eaf07812706fa76b323", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -53,7 +53,6 @@ use self::RecompositionState::*;\n use self::DecompositionType::*;\n \n use core::clone::Clone;\n-use core::iter::AdditiveIterator;\n use core::iter::{Iterator, Extend};\n use core::option::Option::{self, Some, None};\n use core::result::Result;\n@@ -112,7 +111,7 @@ impl<S: AsRef<str>> SliceConcatExt<str, String> for [S] {\n         // this is wrong without the guarantee that `self` is non-empty\n         // `len` calculation may overflow but push_str but will check boundaries\n         let len = sep.len() * (self.len() - 1)\n-            + self.iter().map(|s| s.as_ref().len()).sum();\n+            + self.iter().map(|s| s.as_ref().len()).sum::<usize>();\n         let mut result = String::with_capacity(len);\n         let mut first = true;\n "}, {"sha": "63e4005fadeba6a6b0a08321e7a110c374ed7892", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::iter::AdditiveIterator;\n use std::str::{Utf8Error, from_utf8};\n \n #[test]"}, {"sha": "84726df8fdbc55ff28d600412cb2139db76dd42d", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 48, "deletions": 153, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -65,7 +65,7 @@ use default::Default;\n use marker;\n use mem;\n use num::{Int, Zero, One};\n-use ops::{self, Add, Sub, FnMut, RangeFrom};\n+use ops::{self, Add, Sub, FnMut, Mul, RangeFrom};\n use option::Option::{self, Some, None};\n use marker::Sized;\n use usize;\n@@ -489,15 +489,14 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// # #![feature(core)]\n-    /// use std::iter::AdditiveIterator;\n     ///\n     /// let a = [1, 4, 2, 3, 8, 9, 6];\n-    /// let sum = a.iter()\n-    ///            .map(|x| *x)\n-    ///            .inspect(|&x| println!(\"filtering {}\", x))\n-    ///            .filter(|&x| x % 2 == 0)\n-    ///            .inspect(|&x| println!(\"{} made it through\", x))\n-    ///            .sum();\n+    /// let sum: i32 = a.iter()\n+    ///                 .map(|x| *x)\n+    ///                 .inspect(|&x| println!(\"filtering {}\", x))\n+    ///                 .filter(|&x| x % 2 == 0)\n+    ///                 .inspect(|&x| println!(\"{} made it through\", x))\n+    ///                 .sum();\n     /// println!(\"{}\", sum);\n     /// ```\n     #[inline]\n@@ -1022,6 +1021,47 @@ pub trait Iterator {\n             }\n         }\n     }\n+\n+    /// Iterates over the entire iterator, summing up all the elements\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(core)]\n+    ///\n+    /// let a = [1, 2, 3, 4, 5];\n+    /// let mut it = a.iter().cloned();\n+    /// assert!(it.sum::<i32>() == 15);\n+    /// ```\n+    #[unstable(feature=\"core\")]\n+    fn sum<S=<Self as Iterator>::Item>(self) -> S where\n+        S: Add<Self::Item, Output=S> + Zero,\n+        Self: Sized,\n+    {\n+        self.fold(Zero::zero(), |s, e| s + e)\n+    }\n+\n+    /// Iterates over the entire iterator, multiplying all the elements\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(core)]\n+    ///\n+    /// fn factorial(n: u32) -> u32 {\n+    ///     (1..).take_while(|&i| i <= n).product()\n+    /// }\n+    /// assert!(factorial(0) == 1);\n+    /// assert!(factorial(1) == 1);\n+    /// assert!(factorial(5) == 120);\n+    /// ```\n+    #[unstable(feature=\"core\")]\n+    fn product<P=<Self as Iterator>::Item>(self) -> P where\n+        P: Mul<Self::Item, Output=P> + One,\n+        Self: Sized,\n+    {\n+        self.fold(One::one(), |p, e| p * e)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1222,151 +1262,6 @@ impl<I> RandomAccessIterator for Rev<I>\n     }\n }\n \n-/// A trait for iterators over elements which can be added together\n-#[unstable(feature = \"core\",\n-           reason = \"needs to be re-evaluated as part of numerics reform\")]\n-pub trait AdditiveIterator {\n-    /// The result of summing over the iterator.\n-    type SumResult;\n-\n-    /// Iterates over the entire iterator, summing up all the elements\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// # #![feature(core)]\n-    /// use std::iter::AdditiveIterator;\n-    ///\n-    /// let a = [1, 2, 3, 4, 5];\n-    /// let mut it = a.iter().cloned();\n-    /// assert!(it.sum() == 15);\n-    /// ```\n-    fn sum(self) -> Self::SumResult;\n-}\n-\n-/// The sum operation of an iterator's item type. Implementing this allows\n-/// calling `.sum()` on the iterator.\n-#[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-pub trait AdditiveIteratorItem {\n-    /// The type of the intermediate sums.\n-    type SumResult;\n-    /// The start value of the sum, usually something like `0`.\n-    fn start() -> Self::SumResult;\n-    /// Adds another element of the iterator to the intermediate sum.\n-    fn combine(self, other: Self::SumResult) -> Self::SumResult;\n-}\n-\n-#[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-impl<I: Iterator> AdditiveIterator for I where\n-    <I as Iterator>::Item: AdditiveIteratorItem\n-{\n-    type SumResult = <<I as Iterator>::Item as AdditiveIteratorItem>::SumResult;\n-    fn sum(self) -> <I as AdditiveIterator>::SumResult {\n-        let mut sum = <<I as Iterator>::Item as AdditiveIteratorItem>::start();\n-        for x in self {\n-            sum = x.combine(sum);\n-        }\n-        sum\n-    }\n-}\n-\n-macro_rules! impl_additive {\n-    ($T:ty, $init:expr) => {\n-        #[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-        impl AdditiveIteratorItem for $T {\n-            type SumResult = $T;\n-            fn start() -> $T { $init }\n-            fn combine(self, other: $T) -> $T { self + other }\n-        }\n-    };\n-}\n-impl_additive! { i8,    0 }\n-impl_additive! { i16,   0 }\n-impl_additive! { i32,   0 }\n-impl_additive! { i64,   0 }\n-impl_additive! { isize, 0 }\n-impl_additive! { u8,    0 }\n-impl_additive! { u16,   0 }\n-impl_additive! { u32,   0 }\n-impl_additive! { u64,   0 }\n-impl_additive! { usize, 0 }\n-impl_additive! { f32,   0.0 }\n-impl_additive! { f64,   0.0 }\n-\n-/// A trait for iterators over elements which can be multiplied together.\n-#[unstable(feature = \"core\",\n-           reason = \"needs to be re-evaluated as part of numerics reform\")]\n-pub trait MultiplicativeIterator {\n-    /// The result of multiplying the elements of the iterator.\n-    type ProductResult;\n-\n-    /// Iterates over the entire iterator, multiplying all the elements\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// # #![feature(core)]\n-    /// use std::iter::MultiplicativeIterator;\n-    ///\n-    /// fn factorial(n: usize) -> usize {\n-    ///     (1..).take_while(|&i| i <= n).product()\n-    /// }\n-    /// assert!(factorial(0) == 1);\n-    /// assert!(factorial(1) == 1);\n-    /// assert!(factorial(5) == 120);\n-    /// ```\n-    fn product(self) -> Self::ProductResult;\n-}\n-\n-/// The product operation of an iterator's item type. Implementing this allows\n-/// calling `.product()` on the iterator.\n-#[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-pub trait MultiplicativeIteratorItem {\n-    /// The type of the intermediate products.\n-    type ProductResult;\n-    /// The start value of the product, usually something like `1`.\n-    fn start() -> Self::ProductResult;\n-    /// Multiplies another element of the iterator to the intermediate product.\n-    fn combine(self, other: Self::ProductResult) -> Self::ProductResult;\n-}\n-\n-#[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-impl<I: Iterator> MultiplicativeIterator for I where\n-    <I as Iterator>::Item: MultiplicativeIteratorItem\n-{\n-    type ProductResult = <<I as Iterator>::Item as MultiplicativeIteratorItem>::ProductResult;\n-    fn product(self) -> <I as MultiplicativeIterator>::ProductResult {\n-        let mut product = <<I as Iterator>::Item as MultiplicativeIteratorItem>::start();\n-        for x in self {\n-            product = x.combine(product);\n-        }\n-        product\n-    }\n-}\n-\n-macro_rules! impl_multiplicative  {\n-    ($T:ty, $init:expr) => {\n-        #[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-        impl MultiplicativeIteratorItem for $T {\n-            type ProductResult = $T;\n-            fn start() -> $T { $init }\n-            fn combine(self, other: $T) -> $T { self * other }\n-        }\n-    };\n-}\n-impl_multiplicative! { i8,    1 }\n-impl_multiplicative! { i16,   1 }\n-impl_multiplicative! { i32,   1 }\n-impl_multiplicative! { i64,   1 }\n-impl_multiplicative! { isize, 1 }\n-impl_multiplicative! { u8,    1 }\n-impl_multiplicative! { u16,   1 }\n-impl_multiplicative! { u32,   1 }\n-impl_multiplicative! { u64,   1 }\n-impl_multiplicative! { usize, 1 }\n-impl_multiplicative! { f32,  1.0 }\n-impl_multiplicative! { f64,  1.0 }\n-\n /// `MinMaxResult` is an enum returned by `min_max`. See `Iterator::min_max` for\n /// more detail.\n #[derive(Clone, PartialEq, Debug)]"}, {"sha": "7868e299cfcad4413c3f3c97e0995cee590e7a03", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -86,6 +86,20 @@ macro_rules! zero_one_impl {\n }\n zero_one_impl! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n+macro_rules! zero_one_impl_float {\n+    ($($t:ty)*) => ($(\n+        impl Zero for $t {\n+            #[inline]\n+            fn zero() -> $t { 0.0 }\n+        }\n+        impl One for $t {\n+            #[inline]\n+            fn one() -> $t { 1.0 }\n+        }\n+    )*)\n+}\n+zero_one_impl_float! { f32 f64 }\n+\n /// A built-in signed or unsigned integer.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\","}, {"sha": "bfa9c798d357951782e4ea973fb0ad467741dd51", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -329,17 +329,17 @@ fn test_iterator_len() {\n #[test]\n fn test_iterator_sum() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[..4].iter().cloned().sum(), 6);\n-    assert_eq!(v.iter().cloned().sum(), 55);\n-    assert_eq!(v[..0].iter().cloned().sum(), 0);\n+    assert_eq!(v[..4].iter().cloned().sum::<i32>(), 6);\n+    assert_eq!(v.iter().cloned().sum::<i32>(), 55);\n+    assert_eq!(v[..0].iter().cloned().sum::<i32>(), 0);\n }\n \n #[test]\n fn test_iterator_product() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[..4].iter().cloned().product(), 0);\n-    assert_eq!(v[1..5].iter().cloned().product(), 24);\n-    assert_eq!(v[..0].iter().cloned().product(), 1);\n+    assert_eq!(v[..4].iter().cloned().product::<i32>(), 0);\n+    assert_eq!(v[1..5].iter().cloned().product::<i32>(), 24);\n+    assert_eq!(v[..0].iter().cloned().product::<i32>(), 1);\n }\n \n #[test]"}, {"sha": "14df040fb79edc02c958da53eaf0d64cdbb44220", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -26,7 +26,7 @@ use middle::ty::*;\n use middle::ty;\n use std::cmp::Ordering;\n use std::fmt;\n-use std::iter::{range_inclusive, AdditiveIterator, FromIterator, IntoIterator, repeat};\n+use std::iter::{range_inclusive, FromIterator, IntoIterator, repeat};\n use std::slice;\n use syntax::ast::{self, DUMMY_NODE_ID, NodeId, Pat};\n use syntax::ast_util;\n@@ -76,7 +76,7 @@ impl<'a> fmt::Debug for Matrix<'a> {\n             pretty_printed_matrix.iter().map(|row| row[col].len()).max().unwrap_or(0)\n         }).collect();\n \n-        let total_width = column_widths.iter().cloned().sum() + column_count * 3 + 1;\n+        let total_width = column_widths.iter().cloned().sum::<usize>() + column_count * 3 + 1;\n         let br = repeat('+').take(total_width).collect::<String>();\n         try!(write!(f, \"{}\\n\", br));\n         for row in pretty_printed_matrix {"}, {"sha": "15d296f71bddc95bee2e62e72fa2e40071c6d717", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -220,7 +220,6 @@ use util::ppaux::{Repr, vec_map_to_string};\n \n use std;\n use std::cmp::Ordering;\n-use std::iter::AdditiveIterator;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::ast::{DUMMY_NODE_ID, Ident, NodeId};"}, {"sha": "7a93873af037843bedc26ddbe5545fb30160a737", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -61,7 +61,7 @@ use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n use util::ppaux::{self, Repr, UserString};\n \n-use std::iter::{repeat, AdditiveIterator};\n+use std::iter::repeat;\n use std::rc::Rc;\n use std::slice;\n use syntax::{abi, ast, ast_util};\n@@ -517,12 +517,13 @@ fn find_implied_output_region(input_tys: &[Ty], input_pats: Vec<String>)\n         lifetimes_for_params.push((input_pat, accumulator.len()));\n     }\n \n-    let implied_output_region = if lifetimes_for_params.iter().map(|&(_, n)| n).sum() == 1 {\n-        assert!(possible_implied_output_region.is_some());\n-        possible_implied_output_region\n-    } else {\n-        None\n-    };\n+    let implied_output_region =\n+        if lifetimes_for_params.iter().map(|&(_, n)| n).sum::<usize>() == 1 {\n+            assert!(possible_implied_output_region.is_some());\n+            possible_implied_output_region\n+        } else {\n+            None\n+        };\n     (implied_output_region, lifetimes_for_params)\n }\n "}, {"sha": "af63be2aa9e3f891d0ec2716f7a68cd8e4ddc6b6", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -15,8 +15,7 @@ use cmp::{Ordering, Eq, Ord, PartialEq, PartialOrd};\n use fmt;\n use hash;\n use old_io::Writer;\n-use iter::{AdditiveIterator, Extend};\n-use iter::{Iterator, Map};\n+use iter::{Extend, Iterator, Map};\n use marker::Sized;\n use option::Option::{self, Some, None};\n use result::Result::{self, Ok, Err};\n@@ -351,7 +350,7 @@ impl Path {\n                         Some(vec![SEP_BYTE])\n                     } else {\n                         let n = if is_abs { comps.len() } else { comps.len() - 1} +\n-                                comps.iter().map(|v| v.len()).sum();\n+                                comps.iter().map(|v| v.len()).sum::<usize>();\n                         let mut v = Vec::with_capacity(n);\n                         let mut it = comps.into_iter();\n                         if !is_abs {"}, {"sha": "65aad38a2b43d5e848edba99ae4d9174fae3d2fa", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -20,8 +20,7 @@ use cmp::{Ordering, Eq, Ord, PartialEq, PartialOrd};\n use fmt;\n use hash;\n use old_io::Writer;\n-use iter::{AdditiveIterator, Extend};\n-use iter::{Iterator, Map, repeat};\n+use iter::{Extend, Iterator, Map, repeat};\n use mem;\n use option::Option::{self, Some, None};\n use result::Result::{self, Ok, Err};\n@@ -785,7 +784,7 @@ impl Path {\n                         let prefix_ = &s[..prefix_len(prefix)];\n                         let n = prefix_.len() +\n                                 if is_abs { comps.len() } else { comps.len() - 1} +\n-                                comps.iter().map(|v| v.len()).sum();\n+                                comps.iter().map(|v| v.len()).sum::<usize>();\n                         let mut s = String::with_capacity(n);\n                         match prefix {\n                             Some(DiskPrefix) => {"}, {"sha": "2af94bf30b11dc2b6b64ae9fa80246b51a53fe9d", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -20,7 +20,7 @@ use core::prelude::*;\n \n use core::char;\n use core::cmp;\n-use core::iter::{Filter, AdditiveIterator};\n+use core::iter::Filter;\n use core::mem;\n use core::slice;\n use core::str::Split;"}, {"sha": "2d630d8fe8de7ebd4a03d17cfcd1502832a53efb", "filename": "src/rustbook/book.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbook.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -13,7 +13,6 @@\n use std::io::prelude::*;\n use std::io::BufReader;\n use std::iter;\n-use std::iter::AdditiveIterator;\n use std::path::{Path, PathBuf};\n \n pub struct BookItem {\n@@ -151,7 +150,7 @@ pub fn parse_summary(input: &mut Read, src: &Path) -> Result<Book, Vec<String>>\n                 '\\t' => 4,\n                 _ => unreachable!()\n             }\n-        }).sum() / 4 + 1;\n+        }).sum::<usize>() / 4 + 1;\n \n         if level > stack.len() + 1 {\n             errors.push(format!(\"section '{}' is indented too deeply; \\"}, {"sha": "5fcbe773299927148134d204ba48660644753a40", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -43,7 +43,7 @@\n #![allow(non_snake_case)]\n #![feature(unboxed_closures, core, os)]\n \n-use std::iter::{repeat, AdditiveIterator};\n+use std::iter::repeat;\n use std::thread;\n use std::mem;\n use std::num::Float;"}, {"sha": "c1ecd3eba48bd3f79962b69f19997d1f4495b827", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -12,8 +12,7 @@\n \n #![feature(core)]\n \n-use std::iter::AdditiveIterator;\n fn main() {\n     let x: [u64; 3] = [1, 2, 3];\n-    assert_eq!(6, (0..3).map(|i| x[i]).sum());\n+    assert_eq!(6, (0..3).map(|i| x[i]).sum::<u64>());\n }"}, {"sha": "d1f63564979c8ba74c1642bdbd3908c2fe0dbc89", "filename": "src/test/run-pass/iter-cloned-type-inference.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f24a85965c3c51a2c18be029091ae52bbd7920/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs?ref=97f24a85965c3c51a2c18be029091ae52bbd7920", "patch": "@@ -15,10 +15,8 @@\n \n #![feature(core)]\n \n-use std::iter::AdditiveIterator;\n-\n fn square_sum(v: &[i64]) -> i64 {\n-    let sum = v.iter().cloned().sum();\n+    let sum: i64 = v.iter().cloned().sum();\n     sum * sum\n }\n "}]}