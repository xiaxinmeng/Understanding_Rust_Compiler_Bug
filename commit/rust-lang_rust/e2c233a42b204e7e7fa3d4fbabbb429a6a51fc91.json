{"sha": "e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYzIzM2E0MmIyMDRlN2U3ZmEzZDRmYmFiYmI0MjlhNmE1MWZjOTE=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-21T07:22:07Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-21T07:22:07Z"}, "message": "simplify", "tree": {"sha": "e47b6a25ed77cd00753b50ded9ce5f9166aae49b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e47b6a25ed77cd00753b50ded9ce5f9166aae49b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91", "html_url": "https://github.com/rust-lang/rust/commit/e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13bbed7c16f91dbe8546325fe27311f94239f204", "url": "https://api.github.com/repos/rust-lang/rust/commits/13bbed7c16f91dbe8546325fe27311f94239f204", "html_url": "https://github.com/rust-lang/rust/commit/13bbed7c16f91dbe8546325fe27311f94239f204"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "e7cec8ac5b3f09b70fb4bd436b35a8f42a9d76ac", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91", "patch": "@@ -1,4 +1,4 @@\n-use hir::{HasSource, HirDisplay, Module, TypeInfo};\n+use hir::{HasSource, HirDisplay, InFile, Module, TypeInfo};\n use ide_db::{base_db::FileId, helpers::SnippetCap};\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::to_lower_snake_case;\n@@ -109,7 +109,7 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let fn_name = call.name_ref()?;\n     let adt = ctx.sema.type_of_expr(&call.receiver()?)?.original().strip_references().as_adt()?;\n \n-    let current_module = ctx.sema.scope(call.syntax()).module()?;\n+    let current_module = current_module(call.syntax(), ctx)?;\n     let target_module = adt.module(ctx.sema.db);\n \n     if current_module.krate() != target_module.krate() {\n@@ -152,6 +152,22 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     )\n }\n \n+fn get_impl(\n+    adt: InFile<&SyntaxNode>,\n+    fn_name: &ast::NameRef,\n+    ctx: &AssistContext,\n+) -> Option<(Option<ast::Impl>, FileId)> {\n+    let file = adt.file_id.original_file(ctx.sema.db);\n+    let adt = adt.value;\n+    let adt = ast::Adt::cast(adt.clone())?;\n+    let r = find_struct_impl(ctx, &adt, fn_name.text().as_str())?;\n+    Some((r, file))\n+}\n+\n+fn current_module(current_node: &SyntaxNode, ctx: &AssistContext) -> Option<Module> {\n+    ctx.sema.scope(current_node).module()\n+}\n+\n struct FunctionTemplate {\n     insert_offset: TextSize,\n     leading_ws: String,\n@@ -218,7 +234,7 @@ impl FunctionBuilder {\n             None => next_space_for_fn_after_call_site(FuncExpr::Func(call.clone()))?,\n         };\n         let needs_pub = target_module.is_some();\n-        let target_module = target_module.or_else(|| ctx.sema.scope(target.syntax()).module())?;\n+        let target_module = target_module.or_else(|| current_module(target.syntax(), ctx))?;\n         let fn_name = fn_name(path)?;\n         let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Func(call.clone()))?;\n \n@@ -250,8 +266,6 @@ impl FunctionBuilder {\n         target_module: Module,\n         current_module: Module,\n     ) -> Option<Self> {\n-        // let mut file = ctx.frange.file_id;\n-        // let target_module = ctx.sema.scope(call.syntax()).module()?;\n         let target = match impl_ {\n             Some(impl_) => next_space_for_fn_in_impl(&impl_)?,\n             None => {"}]}