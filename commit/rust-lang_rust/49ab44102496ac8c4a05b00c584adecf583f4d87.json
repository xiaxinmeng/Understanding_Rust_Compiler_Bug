{"sha": "49ab44102496ac8c4a05b00c584adecf583f4d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YWI0NDEwMjQ5NmFjOGM0YTA1YjAwYzU4NGFkZWNmNTgzZjRkODc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T20:54:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T20:54:00Z"}, "message": "Qualified paths", "tree": {"sha": "853718de93f4c713a084fe728ee5035e57be2a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/853718de93f4c713a084fe728ee5035e57be2a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ab44102496ac8c4a05b00c584adecf583f4d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ab44102496ac8c4a05b00c584adecf583f4d87", "html_url": "https://github.com/rust-lang/rust/commit/49ab44102496ac8c4a05b00c584adecf583f4d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ab44102496ac8c4a05b00c584adecf583f4d87/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd", "html_url": "https://github.com/rust-lang/rust/commit/d9e86e574ad936f03a64c38dc7b7f39ddcc4eebd"}], "stats": {"total": 131, "additions": 112, "deletions": 19}, "files": [{"sha": "4f03862b184e16aa7cac191921e746ca76c5bf37", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=49ab44102496ac8c4a05b00c584adecf583f4d87", "patch": "@@ -38,7 +38,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMark\n         Some(m) => return Some(m),\n         None => (),\n     }\n-    if paths::is_path_start(p) {\n+    if paths::is_path_start(p) || p.at(L_ANGLE) {\n         return Some(path_expr(p, r));\n     }\n     let la = p.nth(1);"}, {"sha": "e56f3d30e21850735d6761d8be7897d9246dc90a", "filename": "crates/libsyntax2/src/grammar/expressions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs?ref=49ab44102496ac8c4a05b00c584adecf583f4d87", "patch": "@@ -332,7 +332,7 @@ fn arg_list(p: &mut Parser) {\n //     let _ = format!();\n // }\n fn path_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n-    assert!(paths::is_path_start(p));\n+    assert!(paths::is_path_start(p) || p.at(L_ANGLE));\n     let m = p.start();\n     paths::expr_path(p);\n     match p.current() {"}, {"sha": "97ab1880bd103169ed936f5f7961cec923d36d57", "filename": "crates/libsyntax2/src/grammar/paths.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs?ref=49ab44102496ac8c4a05b00c584adecf583f4d87", "patch": "@@ -27,9 +27,6 @@ enum Mode {\n }\n \n fn path(p: &mut Parser, mode: Mode) {\n-    if !is_path_start(p) {\n-        return;\n-    }\n     let path = p.start();\n     path_segment(p, mode, true);\n     let mut qual = path.complete(p, PATH);\n@@ -51,21 +48,36 @@ fn path(p: &mut Parser, mode: Mode) {\n }\n \n fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n-    let segment = p.start();\n-    if first {\n-        p.eat(COLONCOLON);\n-    }\n-    match p.current() {\n-        IDENT => {\n-            name_ref(p);\n-            path_generic_args(p, mode);\n+    let m = p.start();\n+    // test qual_paths\n+    // type X = <A as B>::Output;\n+    // fn foo() { <usize as Default>::default(); }\n+    if first && p.eat(L_ANGLE) {\n+        types::type_(p);\n+        if p.eat(AS_KW) {\n+            if is_path_start(p) {\n+                types::path_type(p);\n+            } else {\n+                p.error(\"expected a trait\");\n+            }\n         }\n-        SELF_KW | SUPER_KW => p.bump(),\n-        _ => {\n-            p.err_and_bump(\"expected identifier\");\n+        p.expect(R_ANGLE);\n+    } else {\n+        if first {\n+            p.eat(COLONCOLON);\n         }\n-    };\n-    segment.complete(p, PATH_SEGMENT);\n+        match p.current() {\n+            IDENT => {\n+                name_ref(p);\n+                path_generic_args(p, mode);\n+            }\n+            SELF_KW | SUPER_KW => p.bump(),\n+            _ => {\n+                p.err_and_bump(\"expected identifier\");\n+            }\n+        };\n+    }\n+    m.complete(p, PATH_SEGMENT);\n }\n \n fn path_generic_args(p: &mut Parser, mode: Mode) {"}, {"sha": "f58b545c765d809743ecdaa0f790b2b521b3a3c5", "filename": "crates/libsyntax2/src/grammar/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs?ref=49ab44102496ac8c4a05b00c584adecf583f4d87", "patch": "@@ -12,6 +12,7 @@ pub(super) fn type_(p: &mut Parser) {\n         FOR_KW => for_type(p),\n         IMPL_KW => impl_trait_type(p),\n         DYN_KW => dyn_trait_type(p),\n+        L_ANGLE => path_type(p),\n         _ if paths::is_path_start(p) => path_type(p),\n         _ => {\n             p.err_and_bump(\"expected type\");\n@@ -214,7 +215,7 @@ fn dyn_trait_type(p: &mut Parser) {\n // type C = self::Foo;\n // type D = super::Foo;\n pub(super) fn path_type(p: &mut Parser) {\n-    assert!(paths::is_path_start(p));\n+    assert!(paths::is_path_start(p) || p.at(L_ANGLE));\n     let m = p.start();\n     paths::type_path(p);\n     // test path_type_with_bounds"}, {"sha": "d140692e210ba494a056396c73ecccb5cdf7da9a", "filename": "crates/libsyntax2/tests/data/parser/inline/0101_qual_paths.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0101_qual_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0101_qual_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0101_qual_paths.rs?ref=49ab44102496ac8c4a05b00c584adecf583f4d87", "patch": "@@ -0,0 +1,2 @@\n+type X = <A as B>::Output;\n+fn foo() { <usize as Default>::default(); }"}, {"sha": "58b545bdd1377ff5494961970921a779bd758d84", "filename": "crates/libsyntax2/tests/data/parser/inline/0101_qual_paths.txt", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0101_qual_paths.txt", "raw_url": "https://github.com/rust-lang/rust/raw/49ab44102496ac8c4a05b00c584adecf583f4d87/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0101_qual_paths.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0101_qual_paths.txt?ref=49ab44102496ac8c4a05b00c584adecf583f4d87", "patch": "@@ -0,0 +1,78 @@\n+FILE@[0; 71)\n+  TYPE_DEF@[0; 26)\n+    TYPE_KW@[0; 4)\n+    WHITESPACE@[4; 5)\n+    NAME@[5; 6)\n+      IDENT@[5; 6) \"X\"\n+    WHITESPACE@[6; 7)\n+    EQ@[7; 8)\n+    WHITESPACE@[8; 9)\n+    PATH_TYPE@[9; 25)\n+      PATH@[9; 25)\n+        PATH@[9; 17)\n+          PATH_SEGMENT@[9; 17)\n+            L_ANGLE@[9; 10)\n+            PATH_TYPE@[10; 11)\n+              PATH@[10; 11)\n+                PATH_SEGMENT@[10; 11)\n+                  NAME_REF@[10; 11)\n+                    IDENT@[10; 11) \"A\"\n+            WHITESPACE@[11; 12)\n+            AS_KW@[12; 14)\n+            WHITESPACE@[14; 15)\n+            PATH_TYPE@[15; 16)\n+              PATH@[15; 16)\n+                PATH_SEGMENT@[15; 16)\n+                  NAME_REF@[15; 16)\n+                    IDENT@[15; 16) \"B\"\n+            R_ANGLE@[16; 17)\n+        COLONCOLON@[17; 19)\n+        PATH_SEGMENT@[19; 25)\n+          NAME_REF@[19; 25)\n+            IDENT@[19; 25) \"Output\"\n+    SEMI@[25; 26)\n+  WHITESPACE@[26; 27)\n+  FN_DEF@[27; 70)\n+    FN_KW@[27; 29)\n+    WHITESPACE@[29; 30)\n+    NAME@[30; 33)\n+      IDENT@[30; 33) \"foo\"\n+    PARAM_LIST@[33; 35)\n+      L_PAREN@[33; 34)\n+      R_PAREN@[34; 35)\n+    WHITESPACE@[35; 36)\n+    BLOCK_EXPR@[36; 70)\n+      L_CURLY@[36; 37)\n+      WHITESPACE@[37; 38)\n+      EXPR_STMT@[38; 68)\n+        CALL_EXPR@[38; 67)\n+          PATH_EXPR@[38; 65)\n+            PATH@[38; 65)\n+              PATH@[38; 56)\n+                PATH_SEGMENT@[38; 56)\n+                  L_ANGLE@[38; 39)\n+                  PATH_TYPE@[39; 44)\n+                    PATH@[39; 44)\n+                      PATH_SEGMENT@[39; 44)\n+                        NAME_REF@[39; 44)\n+                          IDENT@[39; 44) \"usize\"\n+                  WHITESPACE@[44; 45)\n+                  AS_KW@[45; 47)\n+                  WHITESPACE@[47; 48)\n+                  PATH_TYPE@[48; 55)\n+                    PATH@[48; 55)\n+                      PATH_SEGMENT@[48; 55)\n+                        NAME_REF@[48; 55)\n+                          IDENT@[48; 55) \"Default\"\n+                  R_ANGLE@[55; 56)\n+              COLONCOLON@[56; 58)\n+              PATH_SEGMENT@[58; 65)\n+                NAME_REF@[58; 65)\n+                  IDENT@[58; 65) \"default\"\n+          ARG_LIST@[65; 67)\n+            L_PAREN@[65; 66)\n+            R_PAREN@[66; 67)\n+        SEMI@[67; 68)\n+      WHITESPACE@[68; 69)\n+      R_CURLY@[69; 70)\n+  WHITESPACE@[70; 71)"}]}