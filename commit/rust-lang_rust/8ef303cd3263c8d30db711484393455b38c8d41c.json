{"sha": "8ef303cd3263c8d30db711484393455b38c8d41c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjMwM2NkMzI2M2M4ZDMwZGI3MTE0ODQzOTM0NTViMzhjOGQ0MWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-23T21:32:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T08:03:08Z"}, "message": "port from find_foreign_static to canonical_alloc_id", "tree": {"sha": "897e71fa08c3c7b640897da63d720686ed0c8aa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/897e71fa08c3c7b640897da63d720686ed0c8aa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef303cd3263c8d30db711484393455b38c8d41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef303cd3263c8d30db711484393455b38c8d41c", "html_url": "https://github.com/rust-lang/rust/commit/8ef303cd3263c8d30db711484393455b38c8d41c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef303cd3263c8d30db711484393455b38c8d41c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda", "html_url": "https://github.com/rust-lang/rust/commit/5d8fbfcb5f0a9db6c55e1953e5f9680a7e65cbda"}], "stats": {"total": 78, "additions": 54, "deletions": 24}, "files": [{"sha": "267b79d0eba7ef7551e1d0cdcc9bb4a61b469129", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef303cd3263c8d30db711484393455b38c8d41c/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef303cd3263c8d30db711484393455b38c8d41c/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=8ef303cd3263c8d30db711484393455b38c8d41c", "patch": "@@ -58,6 +58,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         ),\n     );\n     // Complete initialization.\n+    MemoryExtra::init_extern_statics(&mut ecx)?;\n     EnvVars::init(&mut ecx, config.excluded_env_vars);\n \n     // Setup first stack-frame"}, {"sha": "e4e709f7e28770b1e96a69ccf0958b5d873eb9ff", "filename": "src/machine.rs", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8ef303cd3263c8d30db711484393455b38c8d41c/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef303cd3263c8d30db711484393455b38c8d41c/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8ef303cd3263c8d30db711484393455b38c8d41c", "patch": "@@ -3,6 +3,7 @@\n \n use std::borrow::Cow;\n use std::cell::RefCell;\n+use std::collections::HashMap;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n \n@@ -12,7 +13,7 @@ use rustc::mir;\n use rustc::ty::{\n     self,\n     layout::{LayoutOf, Size},\n-    Ty, TyCtxt,\n+    Ty,\n };\n use rustc_ast::attr;\n use rustc_hir::def_id::DefId;\n@@ -74,7 +75,11 @@ pub struct MemoryExtra {\n     pub stacked_borrows: Option<stacked_borrows::MemoryExtra>,\n     pub intptrcast: intptrcast::MemoryExtra,\n \n+    /// Mapping extern static names to their canonical allocation.\n+    pub(crate) extern_statics: HashMap<&'static str, AllocId>,\n+\n     /// The random number generator used for resolving non-determinism.\n+    /// Needs to be queried by ptr_to_int, hence needs interior mutability.\n     pub(crate) rng: RefCell<StdRng>,\n }\n \n@@ -85,7 +90,34 @@ impl MemoryExtra {\n         } else {\n             None\n         };\n-        MemoryExtra { stacked_borrows, intptrcast: Default::default(), rng: RefCell::new(rng) }\n+        MemoryExtra {\n+            stacked_borrows,\n+            intptrcast: Default::default(),\n+            extern_statics: HashMap::default(),\n+            rng: RefCell::new(rng),\n+        }\n+    }\n+\n+    /// Sets up the \"extern statics\" for this machine.\n+    pub fn init_extern_statics<'mir, 'tcx>(\n+        this: &mut MiriEvalContext<'mir, 'tcx>,\n+    ) -> InterpResult<'tcx> {\n+        match this.tcx.sess.target.target.target_os.as_str() {\n+            \"linux\" => {\n+                // \"__cxa_thread_atexit_impl\"\n+                // This should be all-zero, pointer-sized.\n+                let layout = this.layout_of(this.tcx.types.usize)?;\n+                let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+                this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n+                this.memory\n+                    .extra\n+                    .extern_statics\n+                    .insert(\"__cxa_thread_atexit_impl\", place.ptr.assert_ptr().alloc_id)\n+                    .unwrap_none();\n+            }\n+            _ => {} // No \"extern statics\" supported on this platform\n+        }\n+        Ok(())\n     }\n }\n \n@@ -267,32 +299,29 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         Ok(())\n     }\n \n-    fn find_foreign_static(\n-        tcx: TyCtxt<'tcx>,\n-        def_id: DefId,\n-    ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n+    fn canonical_alloc_id(mem: &Memory<'mir, 'tcx, Self>, id: AllocId) -> AllocId {\n+        let tcx = mem.tcx;\n+        // Figure out if this is an extern static, and if yes, which one.\n+        let def_id = match tcx.alloc_map.lock().get(id) {\n+            Some(GlobalAlloc::Static(def_id)) if tcx.is_foreign_item(def_id) => def_id,\n+            _ => {\n+                // No need to canonicalize anything.\n+                return id;\n+            }\n+        };\n         let attrs = tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n             Some(name) => name.as_str(),\n             None => tcx.item_name(def_id).as_str(),\n         };\n-\n-        let alloc = match &*link_name {\n-            \"__cxa_thread_atexit_impl\" => {\n-                // This should be all-zero, pointer-sized.\n-                let size = tcx.data_layout.pointer_size;\n-                let data = vec![0; size.bytes() as usize];\n-                Allocation::from_bytes(&data, tcx.data_layout.pointer_align.abi)\n-            }\n-            _ => throw_unsup_format!(\"can't access foreign static: {}\", link_name),\n-        };\n-        Ok(Cow::Owned(alloc))\n-    }\n-\n-    #[inline(always)]\n-    fn before_terminator(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        // We are not interested in detecting loops.\n-        Ok(())\n+        // Check if we know this one.\n+        if let Some(canonical_id) = mem.extra.extern_statics.get(&*link_name) {\n+            trace!(\"canonical_alloc_id: {:?} ({}) -> {:?}\", id, link_name, canonical_id);\n+            *canonical_id\n+        } else {\n+            // Return original id; `Memory::get_static_alloc` will throw an error.\n+            id\n+        }\n     }\n \n     fn init_allocation_extra<'b>("}, {"sha": "9a511aaed577fc03b58bd55020fdcb6e9517fcd0", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef303cd3263c8d30db711484393455b38c8d41c/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef303cd3263c8d30db711484393455b38c8d41c/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=8ef303cd3263c8d30db711484393455b38c8d41c", "patch": "@@ -453,7 +453,7 @@ impl Stacks {\n             // Thus we call `static_base_ptr` such that the global pointers get the same tag\n             // as what we use here.\n             // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n-            MemoryKind::Machine(MiriMemoryKind::Static) =>\n+            MemoryKind::Machine(MiriMemoryKind::Static) | MemoryKind::Machine(MiriMemoryKind::Machine) =>\n                 (extra.borrow_mut().static_base_ptr(id), Permission::SharedReadWrite),\n             // Everything else we handle entirely untagged for now.\n             // FIXME: experiment with more precise tracking."}]}