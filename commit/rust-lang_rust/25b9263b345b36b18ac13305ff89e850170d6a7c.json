{"sha": "25b9263b345b36b18ac13305ff89e850170d6a7c", "node_id": "C_kwDOAAsO6NoAKDI1YjkyNjNiMzQ1YjM2YjE4YWMxMzMwNWZmODllODUwMTcwZDZhN2M", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T17:59:30Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T17:59:30Z"}, "message": "Move `GenericArgKind::as_{type,const,region}` to `GenericArg`", "tree": {"sha": "4ccda72a5d52c8b1c43a8641f9ec2b1c9d6c1fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ccda72a5d52c8b1c43a8641f9ec2b1c9d6c1fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b9263b345b36b18ac13305ff89e850170d6a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b9263b345b36b18ac13305ff89e850170d6a7c", "html_url": "https://github.com/rust-lang/rust/commit/25b9263b345b36b18ac13305ff89e850170d6a7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b9263b345b36b18ac13305ff89e850170d6a7c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f15521396f684eaef2a8293a19fd6d109d79f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f15521396f684eaef2a8293a19fd6d109d79f7a", "html_url": "https://github.com/rust-lang/rust/commit/3f15521396f684eaef2a8293a19fd6d109d79f7a"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "25fe3cb265d7982080fd9851453fc507a5bf3743", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=25b9263b345b36b18ac13305ff89e850170d6a7c", "patch": "@@ -1181,7 +1181,7 @@ fn build_generic_type_param_di_nodes<'ll, 'tcx>(\n             let names = get_parameter_names(cx, generics);\n             let template_params: SmallVec<_> = iter::zip(substs, names)\n                 .filter_map(|(kind, name)| {\n-                    kind.unpack().as_type().map(|ty| {\n+                    kind.as_type().map(|ty| {\n                         let actual_type =\n                             cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                         let actual_type_di_node = type_di_node(cx, actual_type);"}, {"sha": "dfc226db57b4f10e847e6b06552977e77c293db1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=25b9263b345b36b18ac13305ff89e850170d6a7c", "patch": "@@ -461,7 +461,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 let names = get_parameter_names(cx, generics);\n                 iter::zip(substs, names)\n                     .filter_map(|(kind, name)| {\n-                        kind.unpack().as_type().map(|ty| {\n+                        kind.as_type().map(|ty| {\n                             let actual_type =\n                                 cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                             let actual_type_metadata = type_di_node(cx, actual_type);"}, {"sha": "3ba679df3ed09990d7bc07f866a6632a16fb7274", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=25b9263b345b36b18ac13305ff89e850170d6a7c", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n \n     fn ty_infer(&self, param: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n         match param {\n-            Some(param) => self.var_for_def(span, param).unpack().as_type().unwrap(),\n+            Some(param) => self.var_for_def(span, param).as_type().unwrap(),\n             None => self.next_ty_var(TypeVariableOrigin {\n                 kind: TypeVariableOriginKind::TypeInference,\n                 span,\n@@ -265,7 +265,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         span: Span,\n     ) -> Const<'tcx> {\n         match param {\n-            Some(param) => self.var_for_def(span, param).unpack().as_const().unwrap(),\n+            Some(param) => self.var_for_def(span, param).as_const().unwrap(),\n             None => self.next_const_var(\n                 ty,\n                 ConstVariableOrigin { kind: ConstVariableOriginKind::ConstInference, span },"}, {"sha": "863965c23e673aba5d59483b1971afef2a1a2d57", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 32, "deletions": 48, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=25b9263b345b36b18ac13305ff89e850170d6a7c", "patch": "@@ -103,30 +103,6 @@ impl<'tcx> GenericArgKind<'tcx> {\n \n         GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }\n     }\n-\n-    #[inline]\n-    pub fn as_type(self) -> Option<Ty<'tcx>> {\n-        match self {\n-            GenericArgKind::Type(ty) => Some(ty),\n-            _ => None,\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn as_region(self) -> Option<ty::Region<'tcx>> {\n-        match self {\n-            GenericArgKind::Lifetime(re) => Some(re),\n-            _ => None,\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn as_const(self) -> Option<ty::Const<'tcx>> {\n-        match self {\n-            GenericArgKind::Const(ct) => Some(ct),\n-            _ => None,\n-        }\n-    }\n }\n \n impl<'tcx> fmt::Debug for GenericArg<'tcx> {\n@@ -204,30 +180,45 @@ impl<'tcx> GenericArg<'tcx> {\n         }\n     }\n \n-    /// Unpack the `GenericArg` as a region when it is known certainly to be a region.\n-    pub fn expect_region(self) -> ty::Region<'tcx> {\n+    #[inline]\n+    pub fn as_type(self) -> Option<Ty<'tcx>> {\n         match self.unpack() {\n-            GenericArgKind::Lifetime(lt) => lt,\n-            _ => bug!(\"expected a region, but found another kind\"),\n+            GenericArgKind::Type(ty) => Some(ty),\n+            _ => None,\n         }\n     }\n \n+    #[inline]\n+    pub fn as_region(self) -> Option<ty::Region<'tcx>> {\n+        match self.unpack() {\n+            GenericArgKind::Lifetime(re) => Some(re),\n+            _ => None,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn as_const(self) -> Option<ty::Const<'tcx>> {\n+        match self.unpack() {\n+            GenericArgKind::Const(ct) => Some(ct),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Unpack the `GenericArg` as a region when it is known certainly to be a region.\n+    pub fn expect_region(self) -> ty::Region<'tcx> {\n+        self.as_region().unwrap_or_else(|| bug!(\"expected a region, but found another kind\"))\n+    }\n+\n     /// Unpack the `GenericArg` as a type when it is known certainly to be a type.\n     /// This is true in cases where `Substs` is used in places where the kinds are known\n     /// to be limited (e.g. in tuples, where the only parameters are type parameters).\n     pub fn expect_ty(self) -> Ty<'tcx> {\n-        match self.unpack() {\n-            GenericArgKind::Type(ty) => ty,\n-            _ => bug!(\"expected a type, but found another kind\"),\n-        }\n+        self.as_type().unwrap_or_else(|| bug!(\"expected a type, but found another kind\"))\n     }\n \n     /// Unpack the `GenericArg` as a const when it is known certainly to be a const.\n     pub fn expect_const(self) -> ty::Const<'tcx> {\n-        match self.unpack() {\n-            GenericArgKind::Const(c) => c,\n-            _ => bug!(\"expected a const, but found another kind\"),\n-        }\n+        self.as_const().unwrap_or_else(|| bug!(\"expected a const, but found another kind\"))\n     }\n \n     pub fn is_non_region_infer(self) -> bool {\n@@ -403,17 +394,17 @@ impl<'tcx> InternalSubsts<'tcx> {\n \n     #[inline]\n     pub fn types(&'tcx self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'tcx {\n-        self.iter().filter_map(|k| k.unpack().as_type())\n+        self.iter().filter_map(|k| k.as_type())\n     }\n \n     #[inline]\n     pub fn regions(&'tcx self) -> impl DoubleEndedIterator<Item = ty::Region<'tcx>> + 'tcx {\n-        self.iter().filter_map(|k| k.unpack().as_region())\n+        self.iter().filter_map(|k| k.as_region())\n     }\n \n     #[inline]\n     pub fn consts(&'tcx self) -> impl DoubleEndedIterator<Item = ty::Const<'tcx>> + 'tcx {\n-        self.iter().filter_map(|k| k.unpack().as_const())\n+        self.iter().filter_map(|k| k.as_const())\n     }\n \n     #[inline]\n@@ -429,28 +420,21 @@ impl<'tcx> InternalSubsts<'tcx> {\n     #[inline]\n     #[track_caller]\n     pub fn type_at(&self, i: usize) -> Ty<'tcx> {\n-        self[i]\n-            .unpack()\n-            .as_type()\n-            .unwrap_or_else(|| bug!(\"expected type for param #{} in {:?}\", i, self))\n+        self[i].as_type().unwrap_or_else(|| bug!(\"expected type for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]\n     #[track_caller]\n     pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {\n         self[i]\n-            .unpack()\n             .as_region()\n             .unwrap_or_else(|| bug!(\"expected region for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]\n     #[track_caller]\n     pub fn const_at(&self, i: usize) -> ty::Const<'tcx> {\n-        self[i]\n-            .unpack()\n-            .as_const()\n-            .unwrap_or_else(|| bug!(\"expected const for param #{} in {:?}\", i, self))\n+        self[i].as_const().unwrap_or_else(|| bug!(\"expected const for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]"}, {"sha": "f26c6de9648c080622d44a34bdbc328c7771dbd4", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b9263b345b36b18ac13305ff89e850170d6a7c/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=25b9263b345b36b18ac13305ff89e850170d6a7c", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n                 // Handle calls to `transmute`\n                 if self.tcx.is_diagnostic_item(sym::transmute, def_id) {\n                     let arg_ty = args[0].ty(self.body, self.tcx);\n-                    for inner_ty in arg_ty.walk().filter_map(|arg| arg.unpack().as_type()) {\n+                    for inner_ty in arg_ty.walk().filter_map(|arg| arg.as_type()) {\n                         if let Some((fn_id, fn_substs)) =\n                             FunctionItemRefChecker::is_fn_ref(inner_ty)\n                         {\n@@ -80,7 +80,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                 let arg_defs = self.tcx.fn_sig(def_id).subst_identity().skip_binder().inputs();\n                 for (arg_num, arg_def) in arg_defs.iter().enumerate() {\n                     // For all types reachable from the argument type in the fn sig\n-                    for inner_ty in arg_def.walk().filter_map(|arg| arg.unpack().as_type()) {\n+                    for inner_ty in arg_def.walk().filter_map(|arg| arg.as_type()) {\n                         // If the inner type matches the type bound by `Pointer`\n                         if inner_ty == bound_ty {\n                             // Do a substitution using the parameters from the callsite"}]}