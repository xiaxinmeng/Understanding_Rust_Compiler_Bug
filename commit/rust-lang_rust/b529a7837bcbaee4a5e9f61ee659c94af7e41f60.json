{"sha": "b529a7837bcbaee4a5e9f61ee659c94af7e41f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MjlhNzgzN2JjYmFlZTRhNWU5ZjYxZWU2NTljOTRhZjdlNDFmNjA=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-05-27T04:06:56Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-05-28T04:53:54Z"}, "message": "Add accessors for io::Error's inner error.\n\nerror::Error itself has downcasting methods, so there's no need to\nduplicate those here.", "tree": {"sha": "34f1dfe36ba26d7ab633c0ce1a0dacf366d97a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34f1dfe36ba26d7ab633c0ce1a0dacf366d97a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b529a7837bcbaee4a5e9f61ee659c94af7e41f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b529a7837bcbaee4a5e9f61ee659c94af7e41f60", "html_url": "https://github.com/rust-lang/rust/commit/b529a7837bcbaee4a5e9f61ee659c94af7e41f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b529a7837bcbaee4a5e9f61ee659c94af7e41f60/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4458b5a9d5f11af5cfeb2201a4065131baeeec36", "url": "https://api.github.com/repos/rust-lang/rust/commits/4458b5a9d5f11af5cfeb2201a4065131baeeec36", "html_url": "https://github.com/rust-lang/rust/commit/4458b5a9d5f11af5cfeb2201a4065131baeeec36"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "c3a773617e0e8ddd06545f56a79718dbb00bbbb6", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b529a7837bcbaee4a5e9f61ee659c94af7e41f60/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b529a7837bcbaee4a5e9f61ee659c94af7e41f60/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=b529a7837bcbaee4a5e9f61ee659c94af7e41f60", "patch": "@@ -129,9 +129,7 @@ impl Error {\n     ///\n     /// This function is used to generically create I/O errors which do not\n     /// originate from the OS itself. The `error` argument is an arbitrary\n-    /// payload which will be contained in this `Error`. Accessors as well as\n-    /// downcasting will soon be added to this type as well to access the custom\n-    /// information.\n+    /// payload which will be contained in this `Error`.\n     ///\n     /// # Examples\n     ///\n@@ -174,8 +172,9 @@ impl Error {\n \n     /// Returns the OS error that this error represents (if any).\n     ///\n-    /// If this `Error` was constructed via `last_os_error` then this function\n-    /// will return `Some`, otherwise it will return `None`.\n+    /// If this `Error` was constructed via `last_os_error` or\n+    /// `from_raw_os_error`, then this function will return `Some`, otherwise\n+    /// it will return `None`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn raw_os_error(&self) -> Option<i32> {\n         match self.repr {\n@@ -184,6 +183,43 @@ impl Error {\n         }\n     }\n \n+    /// Returns a reference to the inner error wrapped by this error (if any).\n+    ///\n+    /// If this `Error` was constructed via `new` then this function will\n+    /// return `Some`, otherwise it will return `None`.\n+    #[unstable(feature = \"io_error_inner\", reason = \"recently added\")]\n+    pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync)> {\n+        match self.repr {\n+            Repr::Os(..) => None,\n+            Repr::Custom(ref c) => Some(&*c.error),\n+        }\n+    }\n+\n+    /// Returns a mutable reference to the inner error wrapped by this error\n+    /// (if any).\n+    ///\n+    /// If this `Error` was constructed via `new` then this function will\n+    /// return `Some`, otherwise it will return `None`.\n+    #[unstable(feature = \"io_error_inner\", reason = \"recently added\")]\n+    pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync)> {\n+        match self.repr {\n+            Repr::Os(..) => None,\n+            Repr::Custom(ref mut c) => Some(&mut *c.error),\n+        }\n+    }\n+\n+    /// Consumes the `Error`, returning its inner error (if any).\n+    ///\n+    /// If this `Error` was constructed via `new` then this function will\n+    /// return `Some`, otherwise it will return `None`.\n+    #[unstable(feature = \"io_error_inner\", reason = \"recently added\")]\n+    pub fn into_inner(self) -> Option<Box<error::Error+Send+Sync>> {\n+        match self.repr {\n+            Repr::Os(..) => None,\n+            Repr::Custom(c) => Some(c.error)\n+        }\n+    }\n+\n     /// Returns the corresponding `ErrorKind` for this error.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn kind(&self) -> ErrorKind {\n@@ -216,7 +252,7 @@ impl error::Error for Error {\n         }\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&error::Error> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Custom(ref c) => c.error.cause(),"}]}