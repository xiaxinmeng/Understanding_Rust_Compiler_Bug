{"sha": "d69c66811184707dfdb293673e58ce6121e3714f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OWM2NjgxMTE4NDcwN2RmZGIyOTM2NzNlNThjZTYxMjFlMzcxNGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-09T09:32:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-09T09:54:45Z"}, "message": "tighten CTFE safety net for accesses to globals", "tree": {"sha": "b75dacef26829b44fa629c5e19eb195d7457f409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75dacef26829b44fa629c5e19eb195d7457f409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d69c66811184707dfdb293673e58ce6121e3714f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d69c66811184707dfdb293673e58ce6121e3714f", "html_url": "https://github.com/rust-lang/rust/commit/d69c66811184707dfdb293673e58ce6121e3714f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d69c66811184707dfdb293673e58ce6121e3714f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f6096a9ef6ad52de2956f4d2df200de7617077", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f6096a9ef6ad52de2956f4d2df200de7617077", "html_url": "https://github.com/rust-lang/rust/commit/11f6096a9ef6ad52de2956f4d2df200de7617077"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "3d0c5ffae5210bc162caa16919d1e429b933b23a", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d69c66811184707dfdb293673e58ce6121e3714f/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69c66811184707dfdb293673e58ce6121e3714f/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=d69c66811184707dfdb293673e58ce6121e3714f", "patch": "@@ -350,15 +350,30 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n         static_def_id: Option<DefId>,\n         is_write: bool,\n     ) -> InterpResult<'tcx> {\n-        if is_write && allocation.mutability == Mutability::Not {\n-            Err(err_ub!(WriteToReadOnly(alloc_id)).into())\n-        } else if is_write {\n-            Err(ConstEvalErrKind::ModifiedGlobal.into())\n-        } else if memory_extra.can_access_statics || static_def_id.is_none() {\n-            // `static_def_id.is_none()` indicates this is not a static, but a const or so.\n-            Ok(())\n+        if is_write {\n+            // Write access. These are never allowed, but we give a targeted error message.\n+            if allocation.mutability == Mutability::Not {\n+                Err(err_ub!(WriteToReadOnly(alloc_id)).into())\n+            } else {\n+                Err(ConstEvalErrKind::ModifiedGlobal.into())\n+            }\n         } else {\n-            Err(ConstEvalErrKind::ConstAccessesStatic.into())\n+            // Read access. These are usually allowed, with some exceptions.\n+            if memory_extra.can_access_statics {\n+                // This is allowed to read from anything.\n+                Ok(())\n+            } else if allocation.mutability == Mutability::Mut || static_def_id.is_some() {\n+                // This is a potentially dangerous read.\n+                // We *must* error on any access to a mutable global here, as the content of\n+                // this allocation may be different now and at run-time, so if we permit reading\n+                // now we might return the wrong value.\n+                // We conservatively also reject all statics here, but that could be relaxed\n+                // in the future.\n+                Err(ConstEvalErrKind::ConstAccessesStatic.into())\n+            } else {\n+                // Immutable global, this read is fine.\n+                Ok(())\n+            }\n         }\n     }\n }"}]}