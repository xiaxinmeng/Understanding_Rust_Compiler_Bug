{"sha": "4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "node_id": "C_kwDOAAsO6NoAKDQ1MjhhZWM3ZTlhNGZkY2U2NWE1ZGZlYzNhMDZhYWQ1ZWUxOTUwZGQ", "commit": {"author": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-11-23T08:26:25Z"}, "committer": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-11-29T07:00:51Z"}, "message": "update config and suggest", "tree": {"sha": "2c09f0795ef41796525e431bd52bc0b230822102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c09f0795ef41796525e431bd52bc0b230822102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "html_url": "https://github.com/rust-lang/rust/commit/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/comments", "author": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "committer": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed9497978ce0520147cf1cf100513bf049ddf50", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed9497978ce0520147cf1cf100513bf049ddf50", "html_url": "https://github.com/rust-lang/rust/commit/aed9497978ce0520147cf1cf100513bf049ddf50"}], "stats": {"total": 138, "additions": 63, "deletions": 75}, "files": [{"sha": "dfea0bf18d1060c46600d82aca23f5cb058cd6b4", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "patch": "@@ -1,9 +1,10 @@\n //! lint on indexing and slicing operations\n \n use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::higher;\n use rustc_ast::ast::RangeLimits;\n+use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -86,18 +87,20 @@ impl_lint_pass!(IndexingSlicing => [INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING]);\n \n #[derive(Copy, Clone)]\n pub struct IndexingSlicing {\n-    suppress_lint_in_const: bool,\n+    suppress_restriction_lint_in_const: bool,\n }\n \n impl IndexingSlicing {\n-    pub fn new(suppress_lint_in_const: bool) -> Self {\n-        Self { suppress_lint_in_const }\n+    pub fn new(suppress_restriction_lint_in_const: bool) -> Self {\n+        Self {\n+            suppress_restriction_lint_in_const,\n+        }\n     }\n }\n \n impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if self.suppress_lint_in_const && cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+        if self.suppress_restriction_lint_in_const && cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n             return;\n         }\n \n@@ -152,12 +155,19 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                     (None, None) => return, // [..] is ok.\n                 };\n \n-                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic\", None, help_msg);\n+                span_lint_and_then(cx, INDEXING_SLICING, expr.span, \"slicing may panic\", |diag| {\n+                    let note = if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                        \"the suggestion might not be applicable in constant blocks\"\n+                    } else {\n+                        \"\"\n+                    };\n+                    diag.span_suggestion(expr.span, help_msg, note, Applicability::MachineApplicable);\n+                });\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind() {\n                     // Index is a const block.\n-                    if self.suppress_lint_in_const && let ExprKind::ConstBlock(..) = index.kind {\n+                    if self.suppress_restriction_lint_in_const && let ExprKind::ConstBlock(..) = index.kind {\n                         return;\n                     }\n                     // Index is a constant uint.\n@@ -167,14 +177,19 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                     }\n                 }\n \n-                span_lint_and_help(\n-                    cx,\n-                    INDEXING_SLICING,\n-                    expr.span,\n-                    \"indexing may panic\",\n-                    None,\n-                    \"consider using `.get(n)` or `.get_mut(n)` instead\",\n-                );\n+                span_lint_and_then(cx, INDEXING_SLICING, expr.span, \"indexing may panic\", |diag| {\n+                    let note = if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                        \"the suggestion might not be applicable in constant blocks\"\n+                    } else {\n+                        \"\"\n+                    };\n+                    diag.span_suggestion(\n+                        expr.span,\n+                        \"consider using `.get(n)` or `.get_mut(n)` instead\",\n+                        note,\n+                        Applicability::MachineApplicable,\n+                    );\n+                });\n             }\n         }\n     }"}, {"sha": "2dc3a0822774e48bbdc1919a7c9cfa59f98e96a7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "patch": "@@ -562,7 +562,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n     let allow_expect_in_tests = conf.allow_expect_in_tests;\n     let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;\n-    let suppress_lint_in_const = conf.suppress_lint_in_const;\n+    let suppress_restriction_lint_in_const = conf.suppress_restriction_lint_in_const;\n     store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv())));\n     store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv)));\n     store.register_late_pass(move |_| {\n@@ -685,7 +685,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(inherent_impl::MultipleInherentImpl));\n     store.register_late_pass(|_| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n     store.register_late_pass(|_| Box::new(unwrap::Unwrap));\n-    store.register_late_pass(move |_| Box::new(indexing_slicing::IndexingSlicing::new(suppress_lint_in_const)));\n+    store.register_late_pass(move |_| {\n+        Box::new(indexing_slicing::IndexingSlicing::new(\n+            suppress_restriction_lint_in_const,\n+        ))\n+    });\n     store.register_late_pass(|_| Box::new(non_copy_const::NonCopyConst));\n     store.register_late_pass(|_| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n     store.register_late_pass(|_| Box::new(redundant_clone::RedundantClone));"}, {"sha": "0022044ea4179ac968c6724d531e707161e16ae8", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "patch": "@@ -408,8 +408,12 @@ define_Conf! {\n     (allow_mixed_uninlined_format_args: bool = true),\n     /// Lint: INDEXING_SLICING\n     ///\n-    /// Whether to suppress lint in const function\n-    (suppress_lint_in_const: bool = true),\n+    /// Whether to suppress a restriction lint in constant code. In same\n+    /// cases the restructured operation might not be unavoidable, as the\n+    /// suggested counterparts are unavailable in constant code. This\n+    /// configuration will cause restriction lints to trigger even\n+    /// if no suggestion can be made.\n+    (suppress_restriction_lint_in_const: bool = true),\n }\n \n /// Search for the configuration file."}, {"sha": "d458f53a73dd1b12b1a232bcdbcb0b74080d0dbf", "filename": "tests/ui-toml/suppress_lint_in_const/clippy.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml?ref=4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "patch": "@@ -1 +1 @@\n-suppress-lint-in-const = false\n\\ No newline at end of file\n+suppress-restriction-lint-in-const = false\n\\ No newline at end of file"}, {"sha": "4e4583ab33cf5a3c11585c699f2206bc6b925034", "filename": "tests/ui-toml/suppress_lint_in_const/test.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr?ref=4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "patch": "@@ -2,9 +2,8 @@ error: indexing may panic\n   --> $DIR/test.rs:11:9\n    |\n LL |         self.value[0] & 0b1000_0000 != 0\n-   |         ^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead: `the suggestion might not be applicable in constant blocks`\n    |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n    = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n \n error: aborting due to previous error"}, {"sha": "6ef2abb15b285366294714c9b81251ce9716971b", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "patch": "@@ -35,7 +35,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            pass-by-value-size-limit\n            single-char-binding-names-threshold\n            standard-macro-braces\n-           suppress-lint-in-const\n+           suppress-restriction-lint-in-const\n            third-party\n            too-large-for-stack\n            too-many-arguments-threshold"}, {"sha": "30fb6990795812c4287e41eae3b5ce416a44b000", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "patch": "@@ -14,50 +14,39 @@ error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:22:5\n    |\n LL |     x[index];\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n    |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n    = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:38:5\n    |\n LL |     v[0];\n-   |     ^^^^\n-   |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:39:5\n    |\n LL |     v[10];\n-   |     ^^^^^\n-   |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:40:5\n    |\n LL |     v[1 << 3];\n-   |     ^^^^^^^^^\n-   |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^^^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:46:5\n    |\n LL |     v[N];\n-   |     ^^^^\n-   |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:47:5\n    |\n LL |     v[M];\n-   |     ^^^^\n-   |\n-   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   |     ^^^^ help: consider using `.get(n)` or `.get_mut(n)` instead\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/indexing_slicing_index.rs:10:24"}, {"sha": "ac2cc009a22a8a1cf3edbb90ca219ca56bda0173", "filename": "tests/ui/indexing_slicing_slice.stderr", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui%2Findexing_slicing_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd/tests%2Fui%2Findexing_slicing_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_slice.stderr?ref=4528aec7e9a4fdce65a5dfec3a06aad5ee1950dd", "patch": "@@ -2,50 +2,39 @@ error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:12:6\n    |\n LL |     &x[index..];\n-   |      ^^^^^^^^^^\n+   |      ^^^^^^^^^^ help: consider using `.get(n..)` or .get_mut(n..)` instead\n    |\n-   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n    = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:13:6\n    |\n LL |     &x[..index];\n-   |      ^^^^^^^^^^\n-   |\n-   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:14:6\n    |\n LL |     &x[index_from..index_to];\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:15:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:15:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n-   |      ^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n+   |      ^^^^^^^^^^^^^^^ help: consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:16:6\n    |\n LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n-   |      ^^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:16:8\n@@ -59,17 +48,13 @@ error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:17:6\n    |\n LL |     &x[0..][..3];\n-   |      ^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:18:6\n    |\n LL |     &x[1..][..5];\n-   |      ^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:25:12\n@@ -87,17 +72,13 @@ error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:31:6\n    |\n LL |     &v[10..100];\n-   |      ^^^^^^^^^^\n-   |\n-   = help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+   |      ^^^^^^^^^^ help: consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:32:6\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n-   |      ^^^^^^^^^^^^^^\n-   |\n-   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing_slice.rs:32:8\n@@ -109,17 +90,13 @@ error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:33:6\n    |\n LL |     &v[10..];\n-   |      ^^^^^^^\n-   |\n-   = help: consider using `.get(n..)` or .get_mut(n..)` instead\n+   |      ^^^^^^^ help: consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic\n   --> $DIR/indexing_slicing_slice.rs:34:6\n    |\n LL |     &v[..100];\n-   |      ^^^^^^^^\n-   |\n-   = help: consider using `.get(..n)`or `.get_mut(..n)` instead\n+   |      ^^^^^^^^ help: consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: aborting due to 16 previous errors\n "}]}