{"sha": "85ecaf99df29b33405783acd0a85653ae4094ddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZWNhZjk5ZGYyOWIzMzQwNTc4M2FjZDBhODU2NTNhZTQwOTRkZGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-06-16T04:49:54Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-06-16T04:49:54Z"}, "message": "Config knows if an option was default or set", "tree": {"sha": "b82f2906ca61fe48712e72f9be4057fc6eb7eb44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b82f2906ca61fe48712e72f9be4057fc6eb7eb44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ecaf99df29b33405783acd0a85653ae4094ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ecaf99df29b33405783acd0a85653ae4094ddb", "html_url": "https://github.com/rust-lang/rust/commit/85ecaf99df29b33405783acd0a85653ae4094ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ecaf99df29b33405783acd0a85653ae4094ddb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "html_url": "https://github.com/rust-lang/rust/commit/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "153fad178cc1462a5c8c086f5b617f25b8627b34", "filename": "src/config.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/85ecaf99df29b33405783acd0a85653ae4094ddb/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ecaf99df29b33405783acd0a85653ae4094ddb/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=85ecaf99df29b33405783acd0a85653ae4094ddb", "patch": "@@ -220,8 +220,9 @@ macro_rules! create_config {\n         #[derive(Clone)]\n         pub struct Config {\n             // For each config item, we store a bool indicating whether it has\n-            // been accessed and the value.\n-            $($i: (Cell<bool>, $ty)),+\n+            // been accessed and the value, and a bool whether the option was\n+            // manually initialised, or taken from the default,\n+            $($i: (Cell<bool>, bool, $ty)),+\n         }\n \n         // Just like the Config struct but with each property wrapped\n@@ -255,7 +256,19 @@ macro_rules! create_config {\n         impl<'a> ConfigSetter<'a> {\n             $(\n             pub fn $i(&mut self, value: $ty) {\n-                (self.0).$i.1 = value;\n+                (self.0).$i.2 = value;\n+            }\n+            )+\n+        }\n+\n+        // Query each option, returns true if the user set the option, false if\n+        // a default was used.\n+        pub struct ConfigWasSet<'a>(&'a Config);\n+\n+        impl<'a> ConfigWasSet<'a> {\n+            $(\n+            pub fn $i(&self) -> bool {\n+                (self.0).$i.1\n             }\n             )+\n         }\n@@ -265,18 +278,23 @@ macro_rules! create_config {\n             $(\n             pub fn $i(&self) -> $ty {\n                 self.$i.0.set(true);\n-                self.$i.1.clone()\n+                self.$i.2.clone()\n             }\n             )+\n \n             pub fn set<'a>(&'a mut self) -> ConfigSetter<'a> {\n                 ConfigSetter(self)\n             }\n \n+            pub fn was_set<'a>(&'a self) -> ConfigWasSet<'a> {\n+                ConfigWasSet(self)\n+            }\n+\n             fn fill_from_parsed_config(mut self, parsed: PartialConfig) -> Config {\n             $(\n                 if let Some(val) = parsed.$i {\n-                    self.$i.1 = val;\n+                    self.$i.1 = true;\n+                    self.$i.2 = val;\n                 }\n             )+\n                 self\n@@ -320,7 +338,7 @@ macro_rules! create_config {\n                 PartialConfig {\n                     $(\n                         $i: if self.$i.0.get() {\n-                                Some(self.$i.1.clone())\n+                                Some(self.$i.2.clone())\n                             } else {\n                                 None\n                             },\n@@ -331,7 +349,7 @@ macro_rules! create_config {\n             pub fn all_options(&self) -> PartialConfig {\n                 PartialConfig {\n                     $(\n-                        $i: Some(self.$i.1.clone()),\n+                        $i: Some(self.$i.2.clone()),\n                     )+\n                 }\n             }\n@@ -341,7 +359,7 @@ macro_rules! create_config {\n                 match key {\n                     $(\n                         stringify!($i) => {\n-                            self.$i.1 = val.parse::<$ty>()\n+                            self.$i.2 = val.parse::<$ty>()\n                                 .expect(&format!(\"Failed to parse override for {} (\\\"{}\\\") as a {}\",\n                                                  stringify!($i),\n                                                  val,\n@@ -444,7 +462,7 @@ macro_rules! create_config {\n             fn default() -> Config {\n                 Config {\n                     $(\n-                        $i: (Cell::new(false), $def),\n+                        $i: (Cell::new(false), false, $def),\n                     )+\n                 }\n             }\n@@ -610,4 +628,12 @@ mod test {\n             format!(\"verbose = {}\\nskip_children = {}\\n\", verbose, skip_children)\n         );\n     }\n+\n+    #[test]\n+    fn test_was_set() {\n+        let config = Config::from_toml(\"hard_tabs = true\").unwrap();\n+\n+        assert_eq!(config.was_set().hard_tabs(), true);\n+        assert_eq!(config.was_set().verbose(), false);\n+    }\n }"}]}