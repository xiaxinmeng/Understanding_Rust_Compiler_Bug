{"sha": "0802b3a10802c328118431627f9e5fcbde31cfe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MDJiM2ExMDgwMmMzMjgxMTg0MzE2MjdmOWU1ZmNiZGUzMWNmZTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-08T18:21:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T19:00:40Z"}, "message": "implement passing arguments to the interpreted program", "tree": {"sha": "d8e5260eec583b07257558f21d7caf623ed187b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8e5260eec583b07257558f21d7caf623ed187b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0802b3a10802c328118431627f9e5fcbde31cfe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0802b3a10802c328118431627f9e5fcbde31cfe9", "html_url": "https://github.com/rust-lang/rust/commit/0802b3a10802c328118431627f9e5fcbde31cfe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0802b3a10802c328118431627f9e5fcbde31cfe9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df659d9ae6e023f75e7734e5ff913c2cae45271c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df659d9ae6e023f75e7734e5ff913c2cae45271c", "html_url": "https://github.com/rust-lang/rust/commit/df659d9ae6e023f75e7734e5ff913c2cae45271c"}], "stats": {"total": 125, "additions": 85, "deletions": 40}, "files": [{"sha": "31bd1deb10f57e6c3df135caa65f75dc39a13bc7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0802b3a10802c328118431627f9e5fcbde31cfe9/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0802b3a10802c328118431627f9e5fcbde31cfe9/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=0802b3a10802c328118431627f9e5fcbde31cfe9", "patch": "@@ -27,11 +27,11 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc::hir::def_id::LOCAL_CRATE;\n use syntax::ast;\n \n+use miri::MiriConfig;\n+\n struct MiriCompilerCalls {\n     default: Box<RustcDefaultCalls>,\n-\n-    /// Whether to enforce the validity invariant.\n-    validate: bool,\n+    miri_config: MiriConfig,\n }\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n@@ -79,6 +79,8 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n     ) -> Compilation {\n+        // Called *before* build_controller. Add filename to miri arguments.\n+        self.miri_config.args.insert(0, input.filestem().to_string());\n         self.default.late_callback(codegen_backend, matches, sess, cstore, input, odir, ofile)\n     }\n     fn build_controller(\n@@ -89,9 +91,9 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let this = *self;\n         let mut control = this.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n-        let validate = this.validate;\n+        let miri_config = this.miri_config;\n         control.after_analysis.callback =\n-            Box::new(move |state| after_analysis(state, validate));\n+            Box::new(move |state| after_analysis(state, miri_config.clone()));\n         control.after_analysis.stop = Compilation::Stop;\n         control\n     }\n@@ -107,7 +109,7 @@ fn after_hir_lowering(state: &mut CompileState) {\n \n fn after_analysis<'a, 'tcx>(\n     state: &mut CompileState<'a, 'tcx>,\n-    validate: bool,\n+    miri_config: MiriConfig,\n ) {\n     init_late_loggers();\n     state.session.abort_if_errors();\n@@ -117,7 +119,7 @@ fn after_analysis<'a, 'tcx>(\n \n     let (entry_def_id, _) = tcx.entry_fn(LOCAL_CRATE).expect(\"no main function found!\");\n \n-    miri::eval_main(tcx, entry_def_id, validate);\n+    miri::eval_main(tcx, entry_def_id, miri_config);\n \n     state.session.abort_if_errors();\n }\n@@ -188,34 +190,51 @@ fn find_sysroot() -> String {\n \n fn main() {\n     init_early_loggers();\n-    let mut args: Vec<String> = std::env::args().collect();\n \n-    // Parse our own -Z flags and remove them before rustc gets their hand on them.\n+    // Parse our arguments and split them across rustc and miri\n     let mut validate = true;\n-    args.retain(|arg| {\n-        match arg.as_str() {\n-            \"-Zmiri-disable-validation\" => {\n-                validate = false;\n-                false\n-            },\n-            _ => true\n+    let mut rustc_args = vec![];\n+    let mut miri_args = vec![];\n+    let mut after_dashdash = false;\n+    for arg in std::env::args() {\n+        if rustc_args.is_empty() {\n+            // Very first arg: for rustc\n+            rustc_args.push(arg);\n         }\n-    });\n+        else if after_dashdash {\n+            // Everything that comes is Miri args\n+            miri_args.push(arg);\n+        } else {\n+            match arg.as_str() {\n+                \"-Zmiri-disable-validation\" => {\n+                    validate = false;\n+                },\n+                \"--\" => {\n+                    after_dashdash = true;\n+                }\n+                _ => {\n+                    rustc_args.push(arg);\n+                }\n+            }\n+        }\n+    }\n \n     // Determine sysroot and let rustc know about it\n     let sysroot_flag = String::from(\"--sysroot\");\n-    if !args.contains(&sysroot_flag) {\n-        args.push(sysroot_flag);\n-        args.push(find_sysroot());\n+    if !rustc_args.contains(&sysroot_flag) {\n+        rustc_args.push(sysroot_flag);\n+        rustc_args.push(find_sysroot());\n     }\n     // Finally, add the default flags all the way in the beginning, but after the binary name.\n-    args.splice(1..1, miri::miri_default_args().iter().map(ToString::to_string));\n+    rustc_args.splice(1..1, miri::miri_default_args().iter().map(ToString::to_string));\n \n-    trace!(\"rustc arguments: {:?}\", args);\n+    debug!(\"rustc arguments: {:?}\", rustc_args);\n+    debug!(\"miri arguments: {:?}\", miri_args);\n+    let miri_config = MiriConfig { validate, args: miri_args };\n     let result = rustc_driver::run(move || {\n-        rustc_driver::run_compiler(&args, Box::new(MiriCompilerCalls {\n+        rustc_driver::run_compiler(&rustc_args, Box::new(MiriCompilerCalls {\n             default: Box::new(RustcDefaultCalls),\n-            validate,\n+            miri_config,\n         }), None, None)\n     });\n     std::process::exit(result as i32);"}, {"sha": "49c39201d006c9d22da9cc0ee3428a3acd76a75c", "filename": "src/lib.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0802b3a10802c328118431627f9e5fcbde31cfe9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0802b3a10802c328118431627f9e5fcbde31cfe9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0802b3a10802c328118431627f9e5fcbde31cfe9", "patch": "@@ -57,16 +57,23 @@ pub fn miri_default_args() -> &'static [&'static str] {\n     &[\"-Zalways-encode-mir\", \"-Zmir-emit-retag\", \"-Zmir-opt-level=0\", \"--cfg=miri\"]\n }\n \n+/// Configuration needed to spawn a Miri instance\n+#[derive(Clone)]\n+pub struct MiriConfig {\n+    pub validate: bool,\n+    pub args: Vec<String>,\n+}\n+\n // Used by priroda\n pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n-    validate: bool,\n+    config: MiriConfig,\n ) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n     let mut ecx = EvalContext::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Evaluator::new(validate),\n+        Evaluator::new(config.validate),\n     );\n \n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n@@ -120,7 +127,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n \n     // Second argument (argc): 1\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-    let argc = Scalar::from_int(1, dest.layout.size);\n+    let argc = Scalar::from_uint(config.args.len() as u128, dest.layout.size);\n     ecx.write_scalar(argc, dest)?;\n     // Store argc for macOS _NSGetArgc\n     {\n@@ -130,24 +137,35 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     }\n \n     // FIXME: extract main source file path\n-    // Third argument (argv): &[b\"foo\"]\n-    const CMD: &str = \"running-in-miri\\0\";\n+    // Third argument (argv): Created from config.args\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-    let cmd = ecx.memory_mut().allocate_static_bytes(CMD.as_bytes()).with_default_tag();\n-    let raw_str_layout = ecx.layout_of(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8))?;\n-    let cmd_place = ecx.allocate(raw_str_layout, MiriMemoryKind::Env.into());\n-    ecx.write_scalar(Scalar::Ptr(cmd), cmd_place.into())?;\n-    ecx.memory_mut().mark_immutable(cmd_place.to_ptr()?.alloc_id)?;\n+    // Collect the pointers to the individual strings.\n+    let mut argvs = Vec::<Pointer<Borrow>>::new();\n+    for arg in config.args {\n+        let mut arg = arg.into_bytes();\n+        arg.push(0);\n+        argvs.push(ecx.memory_mut().allocate_static_bytes(arg.as_slice()).with_default_tag());\n+    }\n+    // Make an array with all these pointers, in the Miri memory.\n+    let argvs_layout = ecx.layout_of(ecx.tcx.mk_array(ecx.tcx.mk_imm_ptr(ecx.tcx.types.u8), argvs.len() as u64))?;\n+    let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Env.into());\n+    for (idx, arg) in argvs.into_iter().enumerate() {\n+        let place = ecx.mplace_field(argvs_place, idx as u64)?;\n+        ecx.write_scalar(Scalar::Ptr(arg), place.into())?;\n+    }\n+    ecx.memory_mut().mark_immutable(argvs_place.to_ptr()?.alloc_id)?;\n+    // Write a pointe to that place as the argument.\n+    let argv = argvs_place.ptr;\n+    ecx.write_scalar(argv, dest)?;\n     // Store argv for macOS _NSGetArgv\n     {\n-        let argv = cmd_place.ptr;\n-        ecx.write_scalar(argv, dest)?;\n         let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into());\n         ecx.write_scalar(argv, argv_place.into())?;\n         ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n     }\n     // Store cmdline as UTF-16 for Windows GetCommandLineW\n     {\n+        const CMD: &str = \"running-in-miri\\0\";\n         let tcx = &{ecx.tcx.tcx};\n         let cmd_utf16: Vec<u16> = CMD.encode_utf16().collect();\n         let cmd_ptr = ecx.memory_mut().allocate(\n@@ -179,9 +197,9 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n-    validate: bool,\n+    config: MiriConfig,\n ) {\n-    let mut ecx = create_ecx(tcx, main_id, validate).expect(\"Couldn't create ecx\");\n+    let mut ecx = create_ecx(tcx, main_id, config).expect(\"Couldn't create ecx\");\n \n     // Run! The main execution.\n     let res: EvalResult = (|| {"}, {"sha": "32f1bac57d20ff4e5fe26a4a36c56567d33df613", "filename": "test-cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0802b3a10802c328118431627f9e5fcbde31cfe9/test-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0802b3a10802c328118431627f9e5fcbde31cfe9/test-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Fmain.rs?ref=0802b3a10802c328118431627f9e5fcbde31cfe9", "patch": "@@ -9,7 +9,9 @@ fn main() {\n     let n = <BigEndian as ByteOrder>::read_u32(buf);\n     assert_eq!(n, 0x01020304);\n     println!(\"{:#010x}\", n);\n-    eprintln!(\"standard error\");\n+    for arg in std::env::args() {\n+        eprintln!(\"{}\", arg);\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "ba2906d0666cf726c7eaadd2cd3db615dedfdf3a", "filename": "test-cargo-miri/stderr.ref", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0802b3a10802c328118431627f9e5fcbde31cfe9/test-cargo-miri%2Fstderr.ref", "raw_url": "https://github.com/rust-lang/rust/raw/0802b3a10802c328118431627f9e5fcbde31cfe9/test-cargo-miri%2Fstderr.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fstderr.ref?ref=0802b3a10802c328118431627f9e5fcbde31cfe9", "patch": "@@ -1 +1 @@\n-standard error\n+main"}, {"sha": "0116dce4992dcab2c92df739ed408773f601ee99", "filename": "tests/run-pass/args.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0802b3a10802c328118431627f9e5fcbde31cfe9/tests%2Frun-pass%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0802b3a10802c328118431627f9e5fcbde31cfe9/tests%2Frun-pass%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fargs.rs?ref=0802b3a10802c328118431627f9e5fcbde31cfe9", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    for arg in std::env::args() {\n+        println!(\"{}\", arg);\n+    }\n+}"}, {"sha": "9564f5a1aa056804e6b7f35d533c3a06afd76af9", "filename": "tests/run-pass/args.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0802b3a10802c328118431627f9e5fcbde31cfe9/tests%2Frun-pass%2Fargs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0802b3a10802c328118431627f9e5fcbde31cfe9/tests%2Frun-pass%2Fargs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fargs.stdout?ref=0802b3a10802c328118431627f9e5fcbde31cfe9", "patch": "@@ -0,0 +1 @@\n+args"}]}