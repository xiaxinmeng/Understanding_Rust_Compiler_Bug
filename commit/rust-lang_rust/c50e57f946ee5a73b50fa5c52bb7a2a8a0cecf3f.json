{"sha": "c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MGU1N2Y5NDZlZTVhNzNiNTBmYTVjNTJiYjdhMmE4YTBjZWNmM2Y=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-13T06:51:19Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-13T21:10:12Z"}, "message": "Log closure as well", "tree": {"sha": "f9be4d988f3f1b6b83a0d061e826ebe61b9a569d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9be4d988f3f1b6b83a0d061e826ebe61b9a569d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "html_url": "https://github.com/rust-lang/rust/commit/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0fac05d8f0920d0aaa81dc4832334a49e7dbff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8", "html_url": "https://github.com/rust-lang/rust/commit/d0fac05d8f0920d0aaa81dc4832334a49e7dbff8"}], "stats": {"total": 946, "additions": 727, "deletions": 219}, "files": [{"sha": "e0bbe3cb07917d8c1417bab418f0f946de194d8f", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             \"For closure={:?}, capture_information={:#?}\",\n             closure_def_id, delegate.capture_information\n         );\n-        self.log_closure_capture_info(closure_def_id, &delegate.capture_information, span);\n+        self.log_capture_analysis_first_pass(closure_def_id, &delegate.capture_information, span);\n \n         if let Some(closure_substs) = infer_kind {\n             // Unify the (as yet unbound) type variable in the closure\n@@ -499,20 +499,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.has_attr(closure_def_id, sym::rustc_capture_analysis)\n     }\n \n-    fn log_closure_capture_info(\n+    fn log_capture_analysis_first_pass(\n         &self,\n         closure_def_id: rustc_hir::def_id::DefId,\n         capture_information: &FxIndexMap<Place<'tcx>, ty::CaptureInfo<'tcx>>,\n         closure_span: Span,\n     ) {\n         if self.should_log_capture_analysis(closure_def_id) {\n+            let mut diag =\n+                self.tcx.sess.struct_span_err(closure_span, \"First Pass analysis includes:\");\n             for (place, capture_info) in capture_information {\n                 let capture_str = construct_capture_info_string(self.tcx, place, capture_info);\n                 let output_str = format!(\"Capturing {}\", capture_str);\n \n                 let span = capture_info.expr_id.map_or(closure_span, |e| self.tcx.hir().span(e));\n-                self.tcx.sess.span_err(span, &output_str);\n+                diag.span_note(span, &output_str);\n             }\n+            diag.emit();\n         }\n     }\n \n@@ -521,6 +524,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let Some(min_captures) =\n                 self.typeck_results.borrow().closure_min_captures.get(&closure_def_id)\n             {\n+                let mut diag =\n+                    self.tcx.sess.struct_span_err(closure_span, \"Min Capture analysis includes:\");\n+\n                 for (_, min_captures_for_var) in min_captures {\n                     for capture in min_captures_for_var {\n                         let place = &capture.place;\n@@ -532,9 +538,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                         let span =\n                             capture_info.expr_id.map_or(closure_span, |e| self.tcx.hir().span(e));\n-                        self.tcx.sess.span_err(span, &output_str);\n+                        diag.span_note(span, &output_str);\n                     }\n                 }\n+                diag.emit();\n             }\n         }\n     }"}, {"sha": "131af6a10c8985632c36ca15cebb5c6da39eca10", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,7 @@\n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| `#[warn(incomplete_features)]` on by default\n+//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n // Ensure that capture analysis results in arrays being completely captured.\n@@ -8,10 +10,13 @@ fn main() {\n \n     let mut c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         m[0] += 10;\n-        //~^ ERROR: Capturing m[] -> MutBorrow\n-        //~| ERROR: Min Capture m[] -> MutBorrow\n+        //~^ NOTE: Capturing m[] -> MutBorrow\n+        //~| NOTE: Min Capture m[] -> MutBorrow\n         m[1] += 40;\n     };\n "}, {"sha": "2a350f303319277bb4620c89e5fe432161f25374", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/arrays-completely-captured.rs:9:17\n+  --> $DIR/arrays-completely-captured.rs:11:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,14 +16,38 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing m[] -> MutBorrow\n-  --> $DIR/arrays-completely-captured.rs:12:9\n+error: First Pass analysis includes:\n+  --> $DIR/arrays-completely-captured.rs:14:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         m[0] += 10;\n+...  |\n+LL | |         m[1] += 40;\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing m[] -> MutBorrow\n+  --> $DIR/arrays-completely-captured.rs:17:9\n    |\n LL |         m[0] += 10;\n    |         ^\n \n-error: Min Capture m[] -> MutBorrow\n-  --> $DIR/arrays-completely-captured.rs:12:9\n+error: Min Capture analysis includes:\n+  --> $DIR/arrays-completely-captured.rs:14:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         m[0] += 10;\n+...  |\n+LL | |         m[1] += 40;\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture m[] -> MutBorrow\n+  --> $DIR/arrays-completely-captured.rs:17:9\n    |\n LL |         m[0] += 10;\n    |         ^"}, {"sha": "ba4955085372a20551dc900aef1362cbaeca4da4", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,7 +1,9 @@\n // FIXME(arora-aman) add run-pass once 2229 is implemented\n \n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n struct Point {\n@@ -14,10 +16,13 @@ fn main() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ First Pass analysis includes:\n+    //~| Min Capture analysis includes:\n         println!(\"{}\", p.x);\n-        //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n-        //~| ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n+        //~^ NOTE: Capturing p[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture p[(0, 0)] -> ImmBorrow\n     };\n \n     // `c` should only capture `p.x`, therefore mutating `p.y` is allowed."}, {"sha": "5fac6963afd32b49e352ec0b2809f851c0b805b0", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-disjoint-field-struct.rs:15:13\n+  --> $DIR/capture-disjoint-field-struct.rs:17:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,14 +16,38 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing p[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-disjoint-field-struct.rs:18:24\n+error: First Pass analysis includes:\n+  --> $DIR/capture-disjoint-field-struct.rs:20:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", p.x);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing p[(0, 0)] -> ImmBorrow\n+  --> $DIR/capture-disjoint-field-struct.rs:23:24\n    |\n LL |         println!(\"{}\", p.x);\n    |                        ^^^\n \n-error: Min Capture p[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-disjoint-field-struct.rs:18:24\n+error: Min Capture analysis includes:\n+  --> $DIR/capture-disjoint-field-struct.rs:20:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", p.x);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture p[(0, 0)] -> ImmBorrow\n+  --> $DIR/capture-disjoint-field-struct.rs:23:24\n    |\n LL |         println!(\"{}\", p.x);\n    |                        ^^^"}, {"sha": "c1693fbad7986b342e7372aa77651f4b68c03eaa", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,18 +1,23 @@\n // FIXME(arora-aman) add run-pass once 2229 is implemented\n \n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n fn main() {\n     let mut t = (10, 10);\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ First Pass analysis includes:\n+    //~| Min Capture analysis includes:\n         println!(\"{}\", t.0);\n-        //~^ ERROR: Capturing t[(0, 0)] -> ImmBorrow\n-        //~| ERROR: Min Capture t[(0, 0)] -> ImmBorrow\n+        //~^ NOTE: Capturing t[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture t[(0, 0)] -> ImmBorrow\n     };\n \n     // `c` only captures t.0, therefore mutating t.1 is allowed."}, {"sha": "1bfd63f2ace8c5e8ed8b33fc260a6dc52fefad45", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-disjoint-field-tuple.rs:10:13\n+  --> $DIR/capture-disjoint-field-tuple.rs:12:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,14 +16,38 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing t[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-disjoint-field-tuple.rs:13:24\n+error: First Pass analysis includes:\n+  --> $DIR/capture-disjoint-field-tuple.rs:15:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", t.0);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0)] -> ImmBorrow\n+  --> $DIR/capture-disjoint-field-tuple.rs:18:24\n    |\n LL |         println!(\"{}\", t.0);\n    |                        ^^^\n \n-error: Min Capture t[(0, 0)] -> ImmBorrow\n-  --> $DIR/capture-disjoint-field-tuple.rs:13:24\n+error: Min Capture analysis includes:\n+  --> $DIR/capture-disjoint-field-tuple.rs:15:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", t.0);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0)] -> ImmBorrow\n+  --> $DIR/capture-disjoint-field-tuple.rs:18:24\n    |\n LL |         println!(\"{}\", t.0);\n    |                        ^^^"}, {"sha": "8fb2f7f16d69c4e44841e7ed5c6bff9941d32ad6", "filename": "src/test/ui/closures/2229_closure_analysis/capture-enums.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,7 @@\n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n enum Info {\n@@ -15,18 +17,21 @@ fn multi_variant_enum() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ First Pass analysis includes:\n+    //~| Min Capture analysis includes:\n         if let Info::Point(_, _, str) = point {\n-            //~^ Capturing point[] -> ImmBorrow\n-            //~| Capturing point[(2, 0)] -> ByValue\n-            //~| Min Capture point[] -> ByValue\n+            //~^ NOTE: Capturing point[] -> ImmBorrow\n+            //~| NOTE: Capturing point[(2, 0)] -> ByValue\n+            //~| NOTE: Min Capture point[] -> ByValue\n             println!(\"{}\", str);\n         }\n \n         if let Info::Meta(_, v) = meta {\n-            //~^ Capturing meta[] -> ImmBorrow\n-            //~| Capturing meta[(1, 1)] -> ByValue\n-            //~| Min Capture meta[] -> ByValue\n+            //~^ NOTE: Capturing meta[] -> ImmBorrow\n+            //~| NOTE: Capturing meta[(1, 1)] -> ByValue\n+            //~| NOTE: Min Capture meta[] -> ByValue\n             println!(\"{:?}\", v);\n         }\n     };\n@@ -43,10 +48,13 @@ fn single_variant_enum() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n-    let SingleVariant::Point(_, _, str) = point;\n-        //~^ Capturing point[(2, 0)] -> ByValue\n-        //~| Min Capture point[(2, 0)] -> ByValue\n+    //~^ First Pass analysis includes:\n+    //~| Min Capture analysis includes:\n+        let SingleVariant::Point(_, _, str) = point;\n+        //~^ NOTE: Capturing point[(2, 0)] -> ByValue\n+        //~| NOTE: Min Capture point[(2, 0)] -> ByValue\n         println!(\"{}\", str);\n     };\n "}, {"sha": "ebe1dcb98848b8ef44b8f6201dd15f28488e7b5e", "filename": "src/test/ui/closures/2229_closure_analysis/capture-enums.stderr", "status": "modified", "additions": 71, "deletions": 27, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enums.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-enums.rs:16:13\n+  --> $DIR/capture-enums.rs:18:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/capture-enums.rs:44:13\n+  --> $DIR/capture-enums.rs:49:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -25,54 +25,98 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing point[] -> ImmBorrow\n-  --> $DIR/capture-enums.rs:19:41\n+error: First Pass analysis includes:\n+  --> $DIR/capture-enums.rs:21:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         if let Info::Point(_, _, str) = point {\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing point[] -> ImmBorrow\n+  --> $DIR/capture-enums.rs:24:41\n    |\n LL |         if let Info::Point(_, _, str) = point {\n    |                                         ^^^^^\n-\n-error: Capturing point[(2, 0)] -> ByValue\n-  --> $DIR/capture-enums.rs:19:41\n+note: Capturing point[(2, 0)] -> ByValue\n+  --> $DIR/capture-enums.rs:24:41\n    |\n LL |         if let Info::Point(_, _, str) = point {\n    |                                         ^^^^^\n-\n-error: Capturing meta[] -> ImmBorrow\n-  --> $DIR/capture-enums.rs:26:35\n+note: Capturing meta[] -> ImmBorrow\n+  --> $DIR/capture-enums.rs:31:35\n    |\n LL |         if let Info::Meta(_, v) = meta {\n    |                                   ^^^^\n-\n-error: Capturing meta[(1, 1)] -> ByValue\n-  --> $DIR/capture-enums.rs:26:35\n+note: Capturing meta[(1, 1)] -> ByValue\n+  --> $DIR/capture-enums.rs:31:35\n    |\n LL |         if let Info::Meta(_, v) = meta {\n    |                                   ^^^^\n \n-error: Min Capture point[] -> ByValue\n-  --> $DIR/capture-enums.rs:19:41\n+error: Min Capture analysis includes:\n+  --> $DIR/capture-enums.rs:21:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         if let Info::Point(_, _, str) = point {\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture point[] -> ByValue\n+  --> $DIR/capture-enums.rs:24:41\n    |\n LL |         if let Info::Point(_, _, str) = point {\n    |                                         ^^^^^\n-\n-error: Min Capture meta[] -> ByValue\n-  --> $DIR/capture-enums.rs:26:35\n+note: Min Capture meta[] -> ByValue\n+  --> $DIR/capture-enums.rs:31:35\n    |\n LL |         if let Info::Meta(_, v) = meta {\n    |                                   ^^^^\n \n-error: Capturing point[(2, 0)] -> ByValue\n-  --> $DIR/capture-enums.rs:47:43\n+error: First Pass analysis includes:\n+  --> $DIR/capture-enums.rs:52:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let SingleVariant::Point(_, _, str) = point;\n+...  |\n+LL | |         println!(\"{}\", str);\n+LL | |     };\n+   | |_____^\n    |\n-LL |     let SingleVariant::Point(_, _, str) = point;\n-   |                                           ^^^^^\n+note: Capturing point[(2, 0)] -> ByValue\n+  --> $DIR/capture-enums.rs:55:47\n+   |\n+LL |         let SingleVariant::Point(_, _, str) = point;\n+   |                                               ^^^^^\n \n-error: Min Capture point[(2, 0)] -> ByValue\n-  --> $DIR/capture-enums.rs:47:43\n+error: Min Capture analysis includes:\n+  --> $DIR/capture-enums.rs:52:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let SingleVariant::Point(_, _, str) = point;\n+...  |\n+LL | |         println!(\"{}\", str);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture point[(2, 0)] -> ByValue\n+  --> $DIR/capture-enums.rs:55:47\n    |\n-LL |     let SingleVariant::Point(_, _, str) = point;\n-   |                                           ^^^^^\n+LL |         let SingleVariant::Point(_, _, str) = point;\n+   |                                               ^^^^^\n \n-error: aborting due to 10 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "080ca0405b4776c42ac0a5bc87a79d3c743ec0d3", "filename": "src/test/ui/closures/2229_closure_analysis/destructure_patterns.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,7 @@\n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n // Test to ensure Index projections are handled properly during capture analysis\n@@ -9,10 +11,13 @@ fn arrays() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         let [a, b, .., e] = arr;\n-        //~^ ERROR: Capturing arr[Index] -> ByValue\n-        //~| ERROR: Min Capture arr[] -> ByValue\n+        //~^ NOTE: Capturing arr[Index] -> ByValue\n+        //~| NOTE: Min Capture arr[] -> ByValue\n         assert_eq!(a, \"A\");\n         assert_eq!(b, \"B\");\n         assert_eq!(e, \"E\");\n@@ -32,12 +37,15 @@ fn structs() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         let Point { x: ref mut x, y: _, id: moved_id } = p;\n-        //~^ ERROR: Capturing p[(0, 0)] -> MutBorrow\n-        //~| ERROR: Capturing p[(2, 0)] -> ByValue\n-        //~| ERROR: Min Capture p[(0, 0)] -> MutBorrow\n-        //~| ERROR: Min Capture p[(2, 0)] -> ByValue\n+        //~^ NOTE: Capturing p[(0, 0)] -> MutBorrow\n+        //~| NOTE: Capturing p[(2, 0)] -> ByValue\n+        //~| NOTE: Min Capture p[(0, 0)] -> MutBorrow\n+        //~| NOTE: Min Capture p[(2, 0)] -> ByValue\n \n         println!(\"{}, {}\", x, moved_id);\n     };\n@@ -49,14 +57,17 @@ fn tuples() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n-        //~^ ERROR: Capturing t[(0, 0)] -> MutBorrow\n-        //~| ERROR: Capturing t[(1, 0)] -> ImmBorrow\n-        //~| ERROR: Capturing t[(2, 0),(0, 0)] -> ByValue\n-        //~| ERROR: Min Capture t[(0, 0)] -> MutBorrow\n-        //~| ERROR: Min Capture t[(1, 0)] -> ImmBorrow\n-        //~| ERROR: Min Capture t[(2, 0),(0, 0)] -> ByValue\n+        //~^ NOTE: Capturing t[(0, 0)] -> MutBorrow\n+        //~| NOTE: Capturing t[(1, 0)] -> ImmBorrow\n+        //~| NOTE: Capturing t[(2, 0),(0, 0)] -> ByValue\n+        //~| NOTE: Min Capture t[(0, 0)] -> MutBorrow\n+        //~| NOTE: Min Capture t[(1, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture t[(2, 0),(0, 0)] -> ByValue\n \n         println!(\"{}, {} {}\", x, ref_str, moved_s);\n     };"}, {"sha": "06ccc2d7a88b49e5b39d58ea1f72e652b45d8f52", "filename": "src/test/ui/closures/2229_closure_analysis/destructure_patterns.stderr", "status": "modified", "additions": 100, "deletions": 34, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/destructure_patterns.rs:10:13\n+  --> $DIR/destructure_patterns.rs:12:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/destructure_patterns.rs:33:13\n+  --> $DIR/destructure_patterns.rs:38:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/destructure_patterns.rs:50:13\n+  --> $DIR/destructure_patterns.rs:58:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -34,78 +34,144 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing arr[Index] -> ByValue\n-  --> $DIR/destructure_patterns.rs:13:29\n+error: First Pass analysis includes:\n+  --> $DIR/destructure_patterns.rs:15:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let [a, b, .., e] = arr;\n+...  |\n+LL | |         assert_eq!(e, \"E\");\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing arr[Index] -> ByValue\n+  --> $DIR/destructure_patterns.rs:18:29\n    |\n LL |         let [a, b, .., e] = arr;\n    |                             ^^^\n \n-error: Min Capture arr[] -> ByValue\n-  --> $DIR/destructure_patterns.rs:13:29\n+error: Min Capture analysis includes:\n+  --> $DIR/destructure_patterns.rs:15:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let [a, b, .., e] = arr;\n+...  |\n+LL | |         assert_eq!(e, \"E\");\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture arr[] -> ByValue\n+  --> $DIR/destructure_patterns.rs:18:29\n    |\n LL |         let [a, b, .., e] = arr;\n    |                             ^^^\n \n-error: Capturing p[(0, 0)] -> MutBorrow\n-  --> $DIR/destructure_patterns.rs:36:58\n+error: First Pass analysis includes:\n+  --> $DIR/destructure_patterns.rs:41:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n+...  |\n+LL | |         println!(\"{}, {}\", x, moved_id);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing p[(0, 0)] -> MutBorrow\n+  --> $DIR/destructure_patterns.rs:44:58\n    |\n LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n    |                                                          ^\n-\n-error: Capturing p[(2, 0)] -> ByValue\n-  --> $DIR/destructure_patterns.rs:36:58\n+note: Capturing p[(2, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:44:58\n    |\n LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n    |                                                          ^\n \n-error: Min Capture p[(0, 0)] -> MutBorrow\n-  --> $DIR/destructure_patterns.rs:36:58\n+error: Min Capture analysis includes:\n+  --> $DIR/destructure_patterns.rs:41:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n+...  |\n+LL | |         println!(\"{}, {}\", x, moved_id);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture p[(0, 0)] -> MutBorrow\n+  --> $DIR/destructure_patterns.rs:44:58\n    |\n LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n    |                                                          ^\n-\n-error: Min Capture p[(2, 0)] -> ByValue\n-  --> $DIR/destructure_patterns.rs:36:58\n+note: Min Capture p[(2, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:44:58\n    |\n LL |         let Point { x: ref mut x, y: _, id: moved_id } = p;\n    |                                                          ^\n \n-error: Capturing t[(0, 0)] -> MutBorrow\n-  --> $DIR/destructure_patterns.rs:53:54\n+error: First Pass analysis includes:\n+  --> $DIR/destructure_patterns.rs:61:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+...  |\n+LL | |         println!(\"{}, {} {}\", x, ref_str, moved_s);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0)] -> MutBorrow\n+  --> $DIR/destructure_patterns.rs:64:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n-\n-error: Capturing t[(1, 0)] -> ImmBorrow\n-  --> $DIR/destructure_patterns.rs:53:54\n+note: Capturing t[(1, 0)] -> ImmBorrow\n+  --> $DIR/destructure_patterns.rs:64:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n-\n-error: Capturing t[(2, 0),(0, 0)] -> ByValue\n-  --> $DIR/destructure_patterns.rs:53:54\n+note: Capturing t[(2, 0),(0, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:64:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n \n-error: Min Capture t[(0, 0)] -> MutBorrow\n-  --> $DIR/destructure_patterns.rs:53:54\n+error: Min Capture analysis includes:\n+  --> $DIR/destructure_patterns.rs:61:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n+...  |\n+LL | |         println!(\"{}, {} {}\", x, ref_str, moved_s);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0)] -> MutBorrow\n+  --> $DIR/destructure_patterns.rs:64:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n-\n-error: Min Capture t[(1, 0)] -> ImmBorrow\n-  --> $DIR/destructure_patterns.rs:53:54\n+note: Min Capture t[(1, 0)] -> ImmBorrow\n+  --> $DIR/destructure_patterns.rs:64:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n-\n-error: Min Capture t[(2, 0),(0, 0)] -> ByValue\n-  --> $DIR/destructure_patterns.rs:53:54\n+note: Min Capture t[(2, 0),(0, 0)] -> ByValue\n+  --> $DIR/destructure_patterns.rs:64:54\n    |\n LL |         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n    |                                                      ^\n \n-error: aborting due to 15 previous errors; 1 warning emitted\n+error: aborting due to 9 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "a3222635b626c4953c709c1c8099dd84211e13d5", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,15 +1,20 @@\n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n fn main() {\n     let s = format!(\"s\");\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         println!(\"This uses new capture analyysis to capture s={}\", s);\n-        //~^ ERROR: Capturing s[] -> ImmBorrow\n-        //~| ERROR: Min Capture s[] -> ImmBorrow\n+        //~^ NOTE: Capturing s[] -> ImmBorrow\n+        //~| NOTE: Min Capture s[] -> ImmBorrow\n     };\n }"}, {"sha": "a031360ed34e1acd757979f5b197a76c356e6050", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:8:13\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:10:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,14 +16,38 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing s[] -> ImmBorrow\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:11:69\n+error: First Pass analysis includes:\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:13:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"This uses new capture analyysis to capture s={}\", s);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing s[] -> ImmBorrow\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:16:69\n    |\n LL |         println!(\"This uses new capture analyysis to capture s={}\", s);\n    |                                                                     ^\n \n-error: Min Capture s[] -> ImmBorrow\n-  --> $DIR/feature-gate-capture_disjoint_fields.rs:11:69\n+error: Min Capture analysis includes:\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:13:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"This uses new capture analyysis to capture s={}\", s);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture s[] -> ImmBorrow\n+  --> $DIR/feature-gate-capture_disjoint_fields.rs:16:69\n    |\n LL |         println!(\"This uses new capture analyysis to capture s={}\", s);\n    |                                                                     ^"}, {"sha": "9466e103897fb2c972449c4c9c01a7f6fa035a37", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,7 +1,9 @@\n // FIXME(arora-aman) add run-pass once 2229 is implemented\n \n #![feature(capture_disjoint_fields)]\n-//~^ warning the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n struct Filter {\n@@ -24,8 +26,10 @@ impl Data {\n         self.list.retain(\n             #[rustc_capture_analysis]\n             |v| self.filter.allowed(*v),\n-            //~^ ERROR: Capturing self[Deref,(0, 0)] -> ImmBorrow\n-            //~| ERROR: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n+            //~^ ERROR: First Pass analysis includes:\n+            //~| ERROR: Min Capture analysis includes:\n+            //~| NOTE: Capturing self[Deref,(0, 0)] -> ImmBorrow\n+            //~| NOTE: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n         );\n     }\n }"}, {"sha": "e9420fe5a0c3a814c13b977f5a7aa3ee881e242b", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -7,14 +7,26 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing self[Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/filter-on-struct-member.rs:26:17\n+error: First Pass analysis includes:\n+  --> $DIR/filter-on-struct-member.rs:28:13\n+   |\n+LL |             |v| self.filter.allowed(*v),\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: Capturing self[Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/filter-on-struct-member.rs:28:17\n    |\n LL |             |v| self.filter.allowed(*v),\n    |                 ^^^^^^^^^^^\n \n-error: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n-  --> $DIR/filter-on-struct-member.rs:26:17\n+error: Min Capture analysis includes:\n+  --> $DIR/filter-on-struct-member.rs:28:13\n+   |\n+LL |             |v| self.filter.allowed(*v),\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/filter-on-struct-member.rs:28:17\n    |\n LL |             |v| self.filter.allowed(*v),\n    |                 ^^^^^^^^^^^"}, {"sha": "7d2d4c104d489c8e22f30eb01324b5499cbc0e09", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,7 @@\n #![feature(capture_disjoint_fields)]\n-//~^ warning the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n@@ -21,10 +23,13 @@ fn main() {\n     // Note that `wp.x` doesn't start off a variable defined outside the closure.\n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         let wp = &w.p;\n-        //~^ ERROR: Capturing w[(0, 0)] -> ImmBorrow\n-        //~| ERROR: Min Capture w[(0, 0)] -> ImmBorrow\n+        //~^ NOTE: Capturing w[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture w[(0, 0)] -> ImmBorrow\n         println!(\"{}\", wp.x);\n     };\n "}, {"sha": "1c8db7952afe714f21a8e537771300171c6bc4cd", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/multilevel-path-1.rs:22:13\n+  --> $DIR/multilevel-path-1.rs:24:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,14 +16,38 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing w[(0, 0)] -> ImmBorrow\n-  --> $DIR/multilevel-path-1.rs:25:19\n+error: First Pass analysis includes:\n+  --> $DIR/multilevel-path-1.rs:27:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let wp = &w.p;\n+...  |\n+LL | |         println!(\"{}\", wp.x);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing w[(0, 0)] -> ImmBorrow\n+  --> $DIR/multilevel-path-1.rs:30:19\n    |\n LL |         let wp = &w.p;\n    |                   ^^^\n \n-error: Min Capture w[(0, 0)] -> ImmBorrow\n-  --> $DIR/multilevel-path-1.rs:25:19\n+error: Min Capture analysis includes:\n+  --> $DIR/multilevel-path-1.rs:27:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let wp = &w.p;\n+...  |\n+LL | |         println!(\"{}\", wp.x);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture w[(0, 0)] -> ImmBorrow\n+  --> $DIR/multilevel-path-1.rs:30:19\n    |\n LL |         let wp = &w.p;\n    |                   ^^^"}, {"sha": "540e70138e50ed546f89eb4d15d4e52bf56301e6", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,7 +1,9 @@\n // FIXME(arora-aman) add run-pass once 2229 is implemented\n \n #![feature(capture_disjoint_fields)]\n-//~^ warning the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n@@ -18,10 +20,13 @@ fn main() {\n \n     let c = #[rustc_capture_analysis]\n         //~^ ERROR: attributes on expressions are experimental\n+        //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         println!(\"{}\", w.p.x);\n-        //~^ ERROR: Capturing w[(0, 0),(0, 0)] -> ImmBorrow\n-        //~| ERROR: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n+        //~^ NOTE: Capturing w[(0, 0),(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n     };\n \n     // `c` only captures `w.p.x`, therefore it's safe to mutate `w.p.y`."}, {"sha": "37287f6b3bc745f1204effe2384037b5251b3fc1", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/multilevel-path-2.rs:19:13\n+  --> $DIR/multilevel-path-2.rs:21:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,14 +16,38 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing w[(0, 0),(0, 0)] -> ImmBorrow\n-  --> $DIR/multilevel-path-2.rs:22:24\n+error: First Pass analysis includes:\n+  --> $DIR/multilevel-path-2.rs:24:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", w.p.x);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing w[(0, 0),(0, 0)] -> ImmBorrow\n+  --> $DIR/multilevel-path-2.rs:27:24\n    |\n LL |         println!(\"{}\", w.p.x);\n    |                        ^^^^^\n \n-error: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n-  --> $DIR/multilevel-path-2.rs:22:24\n+error: Min Capture analysis includes:\n+  --> $DIR/multilevel-path-2.rs:24:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", w.p.x);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n+  --> $DIR/multilevel-path-2.rs:27:24\n    |\n LL |         println!(\"{}\", w.p.x);\n    |                        ^^^^^"}, {"sha": "88620550f2e7c97577ac0037c3a3a9dfd7573450", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,7 +1,9 @@\n // FIXME(arora-aman) add run-pass once 2229 is implemented\n \n #![feature(capture_disjoint_fields)]\n-//~^ warning the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n struct Point {\n@@ -20,20 +22,26 @@ fn main() {\n \n     let mut c1 = #[rustc_capture_analysis]\n         //~^ ERROR: attributes on expressions are experimental\n+        //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         println!(\"{}\", p.x);\n-        //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n-        //~| ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n+        //~^ NOTE: Capturing p[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture p[(0, 0)] -> ImmBorrow\n         let incr = 10;\n         let mut c2 = #[rustc_capture_analysis]\n         //~^ ERROR: attributes on expressions are experimental\n+        //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n         || p.y += incr;\n-        //~^ ERROR: Capturing p[(1, 0)] -> MutBorrow\n-        //~| ERROR: Capturing incr[] -> ImmBorrow\n-        //~| ERROR: Min Capture p[(1, 0)] -> MutBorrow\n-        //~| ERROR: Min Capture incr[] -> ImmBorrow\n-        //~| ERROR: Capturing p[(1, 0)] -> MutBorrow\n-        //~| ERROR: Min Capture p[(1, 0)] -> MutBorrow\n+        //~^ ERROR: First Pass analysis includes:\n+        //~| ERROR: Min Capture analysis includes:\n+        //~| NOTE: Capturing p[(1, 0)] -> MutBorrow\n+        //~| NOTE: Capturing incr[] -> ImmBorrow\n+        //~| NOTE: Min Capture p[(1, 0)] -> MutBorrow\n+        //~| NOTE: Min Capture incr[] -> ImmBorrow\n+        //~| NOTE: Capturing p[(1, 0)] -> MutBorrow\n+        //~| NOTE: Min Capture p[(1, 0)] -> MutBorrow\n         c2();\n         println!(\"{}\", p.y);\n     };"}, {"sha": "21147be3f1d0896d6527293e9f78f0b9a6bca112", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.stderr", "status": "modified", "additions": 55, "deletions": 23, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/nested-closure.rs:21:18\n+  --> $DIR/nested-closure.rs:23:18\n    |\n LL |     let mut c1 = #[rustc_capture_analysis]\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let mut c1 = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/nested-closure.rs:28:22\n+  --> $DIR/nested-closure.rs:33:22\n    |\n LL |         let mut c2 = #[rustc_capture_analysis]\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -25,54 +25,86 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing p[(1, 0)] -> MutBorrow\n-  --> $DIR/nested-closure.rs:30:12\n+error: First Pass analysis includes:\n+  --> $DIR/nested-closure.rs:36:9\n+   |\n+LL |         || p.y += incr;\n+   |         ^^^^^^^^^^^^^^\n+   |\n+note: Capturing p[(1, 0)] -> MutBorrow\n+  --> $DIR/nested-closure.rs:36:12\n    |\n LL |         || p.y += incr;\n    |            ^^^\n-\n-error: Capturing incr[] -> ImmBorrow\n-  --> $DIR/nested-closure.rs:30:19\n+note: Capturing incr[] -> ImmBorrow\n+  --> $DIR/nested-closure.rs:36:19\n    |\n LL |         || p.y += incr;\n    |                   ^^^^\n \n-error: Min Capture p[(1, 0)] -> MutBorrow\n-  --> $DIR/nested-closure.rs:30:12\n+error: Min Capture analysis includes:\n+  --> $DIR/nested-closure.rs:36:9\n+   |\n+LL |         || p.y += incr;\n+   |         ^^^^^^^^^^^^^^\n+   |\n+note: Min Capture p[(1, 0)] -> MutBorrow\n+  --> $DIR/nested-closure.rs:36:12\n    |\n LL |         || p.y += incr;\n    |            ^^^\n-\n-error: Min Capture incr[] -> ImmBorrow\n-  --> $DIR/nested-closure.rs:30:19\n+note: Min Capture incr[] -> ImmBorrow\n+  --> $DIR/nested-closure.rs:36:19\n    |\n LL |         || p.y += incr;\n    |                   ^^^^\n \n-error: Capturing p[(0, 0)] -> ImmBorrow\n-  --> $DIR/nested-closure.rs:24:24\n+error: First Pass analysis includes:\n+  --> $DIR/nested-closure.rs:26:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", p.x);\n+...  |\n+LL | |         println!(\"{}\", p.y);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing p[(0, 0)] -> ImmBorrow\n+  --> $DIR/nested-closure.rs:29:24\n    |\n LL |         println!(\"{}\", p.x);\n    |                        ^^^\n-\n-error: Capturing p[(1, 0)] -> MutBorrow\n-  --> $DIR/nested-closure.rs:30:12\n+note: Capturing p[(1, 0)] -> MutBorrow\n+  --> $DIR/nested-closure.rs:36:12\n    |\n LL |         || p.y += incr;\n    |            ^^^\n \n-error: Min Capture p[(0, 0)] -> ImmBorrow\n-  --> $DIR/nested-closure.rs:24:24\n+error: Min Capture analysis includes:\n+  --> $DIR/nested-closure.rs:26:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", p.x);\n+...  |\n+LL | |         println!(\"{}\", p.y);\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture p[(0, 0)] -> ImmBorrow\n+  --> $DIR/nested-closure.rs:29:24\n    |\n LL |         println!(\"{}\", p.x);\n    |                        ^^^\n-\n-error: Min Capture p[(1, 0)] -> MutBorrow\n-  --> $DIR/nested-closure.rs:30:12\n+note: Min Capture p[(1, 0)] -> MutBorrow\n+  --> $DIR/nested-closure.rs:36:12\n    |\n LL |         || p.y += incr;\n    |            ^^^\n \n-error: aborting due to 10 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "16acd2f3206c91ec7c29d7582f5b6312d4b128db", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,7 @@\n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n struct Point {\n@@ -22,9 +24,12 @@ fn main() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         println!(\"{}\", pent.points[5].x);\n-        //~^ ERROR: Capturing pent[(0, 0)] -> ImmBorrow\n-        //~| ERROR: Min Capture pent[(0, 0)] -> ImmBorrow\n+        //~^ NOTE: Capturing pent[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture pent[(0, 0)] -> ImmBorrow\n     };\n }"}, {"sha": "3c8d07ed9ba67b46bb2b667094e86fabfd3c2e5e", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.stderr", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/path-with-array-access.rs:23:13\n+  --> $DIR/path-with-array-access.rs:25:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,14 +16,38 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing pent[(0, 0)] -> ImmBorrow\n-  --> $DIR/path-with-array-access.rs:26:24\n+error: First Pass analysis includes:\n+  --> $DIR/path-with-array-access.rs:28:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", pent.points[5].x);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing pent[(0, 0)] -> ImmBorrow\n+  --> $DIR/path-with-array-access.rs:31:24\n    |\n LL |         println!(\"{}\", pent.points[5].x);\n    |                        ^^^^^^^^^^^\n \n-error: Min Capture pent[(0, 0)] -> ImmBorrow\n-  --> $DIR/path-with-array-access.rs:26:24\n+error: Min Capture analysis includes:\n+  --> $DIR/path-with-array-access.rs:28:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{}\", pent.points[5].x);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture pent[(0, 0)] -> ImmBorrow\n+  --> $DIR/path-with-array-access.rs:31:24\n    |\n LL |         println!(\"{}\", pent.points[5].x);\n    |                        ^^^^^^^^^^^"}, {"sha": "aaff3531e585046fc2ad73705cf8e162c253a4de", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,7 +1,9 @@\n // FIXME(arora-aman) add run-pass once 2229 is implemented\n \n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n // Test to ensure that min analysis meets capture kind for all paths captured.\n@@ -24,12 +26,15 @@ fn main() {\n     //\n     let mut c = #[rustc_capture_analysis]\n         //~^ ERROR: attributes on expressions are experimental\n+        //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         p.x += 10;\n-        //~^ ERROR: Capturing p[(0, 0)] -> MutBorrow\n-        //~| ERROR: Min Capture p[] -> MutBorrow\n+        //~^ NOTE: Capturing p[(0, 0)] -> MutBorrow\n+        //~| NOTE: Min Capture p[] -> MutBorrow\n         println!(\"{:?}\", p);\n-        //~^ ERROR: Capturing p[] -> ImmBorrow\n+        //~^ NOTE: Capturing p[] -> ImmBorrow\n     };\n \n     c();"}, {"sha": "30d3d5f504eb9b472be775dcc22dee3552eab039", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.stderr", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/simple-struct-min-capture.rs:25:17\n+  --> $DIR/simple-struct-min-capture.rs:27:17\n    |\n LL |     let mut c = #[rustc_capture_analysis]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,24 +16,47 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing p[(0, 0)] -> MutBorrow\n-  --> $DIR/simple-struct-min-capture.rs:28:9\n+error: First Pass analysis includes:\n+  --> $DIR/simple-struct-min-capture.rs:30:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         p.x += 10;\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing p[(0, 0)] -> MutBorrow\n+  --> $DIR/simple-struct-min-capture.rs:33:9\n    |\n LL |         p.x += 10;\n    |         ^^^\n-\n-error: Capturing p[] -> ImmBorrow\n-  --> $DIR/simple-struct-min-capture.rs:31:26\n+note: Capturing p[] -> ImmBorrow\n+  --> $DIR/simple-struct-min-capture.rs:36:26\n    |\n LL |         println!(\"{:?}\", p);\n    |                          ^\n \n-error: Min Capture p[] -> MutBorrow\n-  --> $DIR/simple-struct-min-capture.rs:28:9\n+error: Min Capture analysis includes:\n+  --> $DIR/simple-struct-min-capture.rs:30:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         p.x += 10;\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture p[] -> MutBorrow\n+  --> $DIR/simple-struct-min-capture.rs:33:9\n    |\n LL |         p.x += 10;\n    |         ^^^\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "90b8033d074a17357c042d712d1aa50daea37955", "filename": "src/test/ui/closures/2229_closure_analysis/wild_patterns.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,13 +1,17 @@\n #![feature(capture_disjoint_fields)]\n-//~^ WARNING the feature `capture_disjoint_fields` is incomplete\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n #![feature(rustc_attrs)]\n \n // Test to ensure that we can handle cases where\n // let statements create no bindings are intialized\n // using a Place expression\n //\n // Note: Currently when feature `capture_disjoint_fields` is enabled\n-// we can't handle such cases. So the test so the test\n+// we can't handle such cases. So the test current use `_x` instead of\n+// `_` until the issue is resolved.\n+// Check rust-lang/project-rfc-2229#24 for status.\n \n struct Point {\n     x: i32,\n@@ -19,11 +23,14 @@ fn wild_struct() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         // FIXME(arora-aman): Change `_x` to `_`\n         let Point { x: _x, y: _ } = p;\n-        //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n-        //~| ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n+        //~^ NOTE: Capturing p[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture p[(0, 0)] -> ImmBorrow\n     };\n \n     c();\n@@ -34,11 +41,14 @@ fn wild_tuple() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         // FIXME(arora-aman): Change `_x` to `_`\n         let (_x, _) = t;\n-        //~^ ERROR: Capturing t[(0, 0)] -> ByValue\n-        //~| ERROR: Min Capture t[(0, 0)] -> ByValue\n+        //~^ NOTE: Capturing t[(0, 0)] -> ByValue\n+        //~| NOTE: Min Capture t[(0, 0)] -> ByValue\n     };\n \n     c();\n@@ -49,11 +59,14 @@ fn wild_arr() {\n \n     let c = #[rustc_capture_analysis]\n     //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n     || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n         // FIXME(arora-aman): Change `_x` to `_`\n         let [_x, _] = arr;\n-        //~^ ERROR: Capturing arr[Index] -> ByValue\n-        //~| ERROR: Min Capture arr[] -> ByValue\n+        //~^ NOTE: Capturing arr[Index] -> ByValue\n+        //~| NOTE: Min Capture arr[] -> ByValue\n     };\n \n     c();"}, {"sha": "36be8431be508f5f9c7e9de8b683b95b86db6aa7", "filename": "src/test/ui/closures/2229_closure_analysis/wild_patterns.stderr", "status": "modified", "additions": 87, "deletions": 15, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.stderr?ref=c50e57f946ee5a73b50fa5c52bb7a2a8a0cecf3f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/wild_patterns.rs:20:13\n+  --> $DIR/wild_patterns.rs:24:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/wild_patterns.rs:35:13\n+  --> $DIR/wild_patterns.rs:42:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     let c = #[rustc_capture_analysis]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/wild_patterns.rs:50:13\n+  --> $DIR/wild_patterns.rs:60:13\n    |\n LL |     let c = #[rustc_capture_analysis]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -34,38 +34,110 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error: Capturing p[(0, 0)] -> ImmBorrow\n-  --> $DIR/wild_patterns.rs:24:37\n+error: First Pass analysis includes:\n+  --> $DIR/wild_patterns.rs:27:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         // FIXME(arora-aman): Change `_x` to `_`\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing p[(0, 0)] -> ImmBorrow\n+  --> $DIR/wild_patterns.rs:31:37\n    |\n LL |         let Point { x: _x, y: _ } = p;\n    |                                     ^\n \n-error: Min Capture p[(0, 0)] -> ImmBorrow\n-  --> $DIR/wild_patterns.rs:24:37\n+error: Min Capture analysis includes:\n+  --> $DIR/wild_patterns.rs:27:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         // FIXME(arora-aman): Change `_x` to `_`\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture p[(0, 0)] -> ImmBorrow\n+  --> $DIR/wild_patterns.rs:31:37\n    |\n LL |         let Point { x: _x, y: _ } = p;\n    |                                     ^\n \n-error: Capturing t[(0, 0)] -> ByValue\n-  --> $DIR/wild_patterns.rs:39:23\n+error: First Pass analysis includes:\n+  --> $DIR/wild_patterns.rs:45:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         // FIXME(arora-aman): Change `_x` to `_`\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0)] -> ByValue\n+  --> $DIR/wild_patterns.rs:49:23\n    |\n LL |         let (_x, _) = t;\n    |                       ^\n \n-error: Min Capture t[(0, 0)] -> ByValue\n-  --> $DIR/wild_patterns.rs:39:23\n+error: Min Capture analysis includes:\n+  --> $DIR/wild_patterns.rs:45:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         // FIXME(arora-aman): Change `_x` to `_`\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0)] -> ByValue\n+  --> $DIR/wild_patterns.rs:49:23\n    |\n LL |         let (_x, _) = t;\n    |                       ^\n \n-error: Capturing arr[Index] -> ByValue\n-  --> $DIR/wild_patterns.rs:54:23\n+error: First Pass analysis includes:\n+  --> $DIR/wild_patterns.rs:63:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         // FIXME(arora-aman): Change `_x` to `_`\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing arr[Index] -> ByValue\n+  --> $DIR/wild_patterns.rs:67:23\n    |\n LL |         let [_x, _] = arr;\n    |                       ^^^\n \n-error: Min Capture arr[] -> ByValue\n-  --> $DIR/wild_patterns.rs:54:23\n+error: Min Capture analysis includes:\n+  --> $DIR/wild_patterns.rs:63:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         // FIXME(arora-aman): Change `_x` to `_`\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture arr[] -> ByValue\n+  --> $DIR/wild_patterns.rs:67:23\n    |\n LL |         let [_x, _] = arr;\n    |                       ^^^"}]}