{"sha": "2ea86af1eaed20227a6176995aa6c082f245924c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYTg2YWYxZWFlZDIwMjI3YTYxNzY5OTVhYTZjMDgyZjI0NTkyNGM=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-25T13:52:41Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-25T14:19:45Z"}, "message": "Use same name as attr.\n\nCo-authored-by: Bastian Kauschke <bastian_kauschke@hotmail.de>", "tree": {"sha": "ac4e8b7efe73dd6afd5655dc160429296ed396c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4e8b7efe73dd6afd5655dc160429296ed396c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ea86af1eaed20227a6176995aa6c082f245924c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea86af1eaed20227a6176995aa6c082f245924c", "html_url": "https://github.com/rust-lang/rust/commit/2ea86af1eaed20227a6176995aa6c082f245924c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ea86af1eaed20227a6176995aa6c082f245924c/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "671770ed852daf803e6a49fc9b622a4a2e478efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/671770ed852daf803e6a49fc9b622a4a2e478efb", "html_url": "https://github.com/rust-lang/rust/commit/671770ed852daf803e6a49fc9b622a4a2e478efb"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "593d4802704065f384662abadcab6198f8c5503c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ea86af1eaed20227a6176995aa6c082f245924c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea86af1eaed20227a6176995aa6c082f245924c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2ea86af1eaed20227a6176995aa6c082f245924c", "patch": "@@ -2172,7 +2172,7 @@ impl ClashingExternDeclarations {\n                 loop {\n                     if let ty::Adt(def, substs) = ty.kind {\n                         let is_transparent = def.subst(tcx, substs).repr.transparent();\n-                        let is_non_null = crate::types::guaranteed_nonnull_optimization(tcx, &def);\n+                        let is_non_null = crate::types::nonnull_optimization_guaranteed(tcx, &def);\n                         debug!(\n                             \"non_transparent_ty({:?}) -- type is transparent? {}, type is non-null? {}\",\n                             ty, is_transparent, is_non_null"}, {"sha": "35c462c24c8e88a0b229e182e4c20a65e313dfac", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ea86af1eaed20227a6176995aa6c082f245924c/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea86af1eaed20227a6176995aa6c082f245924c/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=2ea86af1eaed20227a6176995aa6c082f245924c", "patch": "@@ -527,7 +527,7 @@ enum FfiResult<'tcx> {\n     FfiUnsafe { ty: Ty<'tcx>, reason: String, help: Option<String> },\n }\n \n-crate fn guaranteed_nonnull_optimization<'tcx>(tcx: TyCtxt<'tcx>, def: &ty::AdtDef) -> bool {\n+crate fn nonnull_optimization_guaranteed<'tcx>(tcx: TyCtxt<'tcx>, def: &ty::AdtDef) -> bool {\n     tcx.get_attrs(def.did)\n         .iter()\n         .any(|a| tcx.sess.check_name(a, sym::rustc_nonnull_optimization_guaranteed))\n@@ -541,7 +541,7 @@ crate fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: C\n         ty::Ref(..) => true,\n         ty::Adt(def, _) if def.is_box() && matches!(mode, CItemKind::Definition) => true,\n         ty::Adt(def, substs) if def.repr.transparent() && !def.is_union() => {\n-            let marked_non_null = guaranteed_nonnull_optimization(tcx, &def);\n+            let marked_non_null = nonnull_optimization_guaranteed(tcx, &def);\n \n             if marked_non_null {\n                 return true;"}]}