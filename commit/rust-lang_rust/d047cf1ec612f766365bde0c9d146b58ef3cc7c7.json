{"sha": "d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDdjZjFlYzYxMmY3NjYzNjViZGUwYzlkMTQ2YjU4ZWYzY2M3Yzc=", "commit": {"author": {"name": "Birunthan Mohanathas", "email": "birunthan@mohanathas.com", "date": "2013-07-22T16:03:39Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-24T13:45:20Z"}, "message": "Change 'print(fmt!(...))' to printf!/printfln! in src/lib*", "tree": {"sha": "1e78f76ac07c358321b3d32d2d943a47a8c1dc32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e78f76ac07c358321b3d32d2d943a47a8c1dc32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "html_url": "https://github.com/rust-lang/rust/commit/d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/comments", "author": {"login": "poiru", "id": 1319028, "node_id": "MDQ6VXNlcjEzMTkwMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1319028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poiru", "html_url": "https://github.com/poiru", "followers_url": "https://api.github.com/users/poiru/followers", "following_url": "https://api.github.com/users/poiru/following{/other_user}", "gists_url": "https://api.github.com/users/poiru/gists{/gist_id}", "starred_url": "https://api.github.com/users/poiru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poiru/subscriptions", "organizations_url": "https://api.github.com/users/poiru/orgs", "repos_url": "https://api.github.com/users/poiru/repos", "events_url": "https://api.github.com/users/poiru/events{/privacy}", "received_events_url": "https://api.github.com/users/poiru/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5a17b7d0788438bb6b39cccfc96a0b13e00250", "url": "https://api.github.com/repos/rust-lang/rust/commits/af5a17b7d0788438bb6b39cccfc96a0b13e00250", "html_url": "https://github.com/rust-lang/rust/commit/af5a17b7d0788438bb6b39cccfc96a0b13e00250"}], "stats": {"total": 215, "additions": 103, "deletions": 112}, "files": [{"sha": "37d95d622c0830094888d0f98be02478e4d648ff", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -75,7 +75,7 @@ impl<'self> ToBase64 for &'self [u8] {\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64(standard);\n-     *     println(fmt!(\"%s\", str));\n+     *     printfln!(\"%s\", str);\n      * }\n      * ~~~\n      */\n@@ -164,7 +164,7 @@ impl<'self> ToBase64 for &'self str {\n      *\n      * fn main () {\n      *     let str = \"Hello, World\".to_base64(standard);\n-     *     println(fmt!(\"%s\",str));\n+     *     printfln!(\"%s\", str);\n      * }\n      * ~~~\n      *\n@@ -194,9 +194,9 @@ impl<'self> FromBase64 for &'self [u8] {\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64(standard);\n-     *     println(fmt!(\"%s\", str));\n+     *     printfln!(\"%s\", str);\n      *     let bytes = str.from_base64();\n-     *     println(fmt!(\"%?\",bytes));\n+     *     printfln!(\"%?\", bytes);\n      * }\n      * ~~~\n      */\n@@ -271,11 +271,11 @@ impl<'self> FromBase64 for &'self str {\n      *\n      * fn main () {\n      *     let hello_str = \"Hello, World\".to_base64(standard);\n-     *     println(fmt!(\"%s\",hello_str));\n+     *     printfln!(\"%s\", hello_str);\n      *     let bytes = hello_str.from_base64();\n-     *     println(fmt!(\"%?\",bytes));\n+     *     printfln!(\"%?\", bytes);\n      *     let result_str = str::from_bytes(bytes);\n-     *     println(fmt!(\"%s\",result_str));\n+     *     printfln!(\"%s\", result_str);\n      * }\n      * ~~~\n      */"}, {"sha": "5e37efa647ad695225c7b8315fdc761879e208e1", "filename": "src/libextra/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -19,7 +19,7 @@\n  * # fn make_a_sandwich() {};\n  * let mut delayed_fib = extra::future::spawn (|| fib(5000) );\n  * make_a_sandwich();\n- * println(fmt!(\"fib(5000) = %?\", delayed_fib.get()))\n+ * printfln!(\"fib(5000) = %?\", delayed_fib.get())\n  * ~~~\n  */\n "}, {"sha": "ad452125239de6404b5e2c55a14c3c4f6a4d7d6a", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -44,7 +44,7 @@\n  *    }\n  *\n  *    fn print_usage(program: &str, _opts: &[Opt]) {\n- *        println(fmt!(\"Usage: %s [options]\", program));\n+ *        printfln!(\"Usage: %s [options]\", program);\n  *        println(\"-o\\t\\tOutput\");\n  *        println(\"-h --help\\tUsage\");\n  *    }"}, {"sha": "edd16fe88f425196b0ad96201caf98858d90ffc3", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -103,6 +103,6 @@ fn test_task_pool() {\n     };\n     let mut pool = TaskPool::new(4, Some(SingleThreaded), f);\n     for 8.times {\n-        pool.execute(|i| println(fmt!(\"Hello from thread %u!\", *i)));\n+        pool.execute(|i| printfln!(\"Hello from thread %u!\", *i));\n     }\n }"}, {"sha": "303ae6a6d1de147552c936844354f3ac8039e4c9", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -1263,7 +1263,7 @@ mod test_set {\n \n         let mut n = 0;\n         for m.iter().advance |x| {\n-            println(fmt!(\"%?\", x));\n+            printfln!(x);\n             assert_eq!(*x, n);\n             n += 1\n         }"}, {"sha": "c47c573d16fbe3bbae89eef2f3649f9b1a026554", "filename": "src/librust/rust.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -132,13 +132,13 @@ fn cmd_help(args: &[~str]) -> ValidUsage {\n         match find_cmd(command_string) {\n             Some(command) => {\n                 match command.action {\n-                    CallMain(prog, _) => io::println(fmt!(\n+                    CallMain(prog, _) => printfln!(\n                         \"The %s command is an alias for the %s program.\",\n-                        command.cmd, prog)),\n+                        command.cmd, prog),\n                     _       => ()\n                 }\n                 match command.usage_full {\n-                    UsgStr(msg) => io::println(fmt!(\"%s\\n\", msg)),\n+                    UsgStr(msg) => printfln!(\"%s\\n\", msg),\n                     UsgCall(f)  => f(),\n                 }\n                 Valid(0)\n@@ -211,8 +211,7 @@ fn usage() {\n \n     for COMMANDS.iter().advance |command| {\n         let padding = \" \".repeat(INDENT - command.cmd.len());\n-        io::println(fmt!(\"    %s%s%s\",\n-                         command.cmd, padding, command.usage_line));\n+        printfln!(\"    %s%s%s\", command.cmd, padding, command.usage_line);\n     }\n \n     io::print("}, {"sha": "48a685058bbd5ce96e2cce4fbffa725ad87a2770", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -191,15 +191,15 @@ pub fn list_passes() {\n \n     io::println(\"\\nAnalysis Passes:\");\n     for analysis_passes.iter().advance |&(name, desc)| {\n-        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+        printfln!(\"    %-30s -- %s\", name, desc);\n     }\n     io::println(\"\\nTransformation Passes:\");\n     for transform_passes.iter().advance |&(name, desc)| {\n-        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+        printfln!(\"    %-30s -- %s\", name, desc);\n     }\n     io::println(\"\\nUtility Passes:\");\n     for utility_passes.iter().advance |&(name, desc)| {\n-        io::println(fmt!(\"    %-30s -- %s\", name, desc));\n+        printfln!(\"    %-30s -- %s\", name, desc);\n     }\n }\n \n@@ -344,7 +344,7 @@ fn passes_exist() {\n     if failed.len() > 0 {\n         io::println(\"Some passes don't exist:\");\n         for failed.iter().advance |&n| {\n-            io::println(fmt!(\"    %s\", n));\n+            printfln!(\"    %s\", n);\n         }\n         fail!();\n     }"}, {"sha": "78e1a579d741b1cf28f2cbb0edbb6b763acc9e7e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -1624,16 +1624,16 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         }\n \n         io::println(\"metadata stats:\");\n-        io::println(fmt!(\"    inline bytes: %u\", ecx.stats.inline_bytes));\n-        io::println(fmt!(\" attribute bytes: %u\", ecx.stats.attr_bytes));\n-        io::println(fmt!(\"       dep bytes: %u\", ecx.stats.dep_bytes));\n-        io::println(fmt!(\" lang item bytes: %u\", ecx.stats.lang_item_bytes));\n-        io::println(fmt!(\" link args bytes: %u\", ecx.stats.link_args_bytes));\n-        io::println(fmt!(\"      misc bytes: %u\", ecx.stats.misc_bytes));\n-        io::println(fmt!(\"      item bytes: %u\", ecx.stats.item_bytes));\n-        io::println(fmt!(\"     index bytes: %u\", ecx.stats.index_bytes));\n-        io::println(fmt!(\"      zero bytes: %u\", ecx.stats.zero_bytes));\n-        io::println(fmt!(\"     total bytes: %u\", ecx.stats.total_bytes));\n+        printfln!(\"    inline bytes: %u\", ecx.stats.inline_bytes);\n+        printfln!(\" attribute bytes: %u\", ecx.stats.attr_bytes);\n+        printfln!(\"       dep bytes: %u\", ecx.stats.dep_bytes);\n+        printfln!(\" lang item bytes: %u\", ecx.stats.lang_item_bytes);\n+        printfln!(\" link args bytes: %u\", ecx.stats.link_args_bytes);\n+        printfln!(\"      misc bytes: %u\", ecx.stats.misc_bytes);\n+        printfln!(\"      item bytes: %u\", ecx.stats.item_bytes);\n+        printfln!(\"     index bytes: %u\", ecx.stats.index_bytes);\n+        printfln!(\"      zero bytes: %u\", ecx.stats.zero_bytes);\n+        printfln!(\"     total bytes: %u\", ecx.stats.total_bytes);\n     }\n \n     // Pad this, since something (LLVM, presumably) is cutting off the"}, {"sha": "bf9b4fcaedfa6665a5da2d94456a5b8438385578", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -93,16 +93,16 @@ pub fn check_crate(\n \n     if tcx.sess.borrowck_stats() {\n         io::println(\"--- borrowck stats ---\");\n-        io::println(fmt!(\"paths requiring guarantees: %u\",\n-                        bccx.stats.guaranteed_paths));\n-        io::println(fmt!(\"paths requiring loans     : %s\",\n-                         make_stat(bccx, bccx.stats.loaned_paths_same)));\n-        io::println(fmt!(\"paths requiring imm loans : %s\",\n-                         make_stat(bccx, bccx.stats.loaned_paths_imm)));\n-        io::println(fmt!(\"stable paths              : %s\",\n-                         make_stat(bccx, bccx.stats.stable_paths)));\n-        io::println(fmt!(\"paths requiring purity    : %s\",\n-                         make_stat(bccx, bccx.stats.req_pure_paths)));\n+        printfln!(\"paths requiring guarantees: %u\",\n+                  bccx.stats.guaranteed_paths);\n+        printfln!(\"paths requiring loans     : %s\",\n+                  make_stat(bccx, bccx.stats.loaned_paths_same));\n+        printfln!(\"paths requiring imm loans : %s\",\n+                  make_stat(bccx, bccx.stats.loaned_paths_imm));\n+        printfln!(\"stable paths              : %s\",\n+                  make_stat(bccx, bccx.stats.stable_paths));\n+        printfln!(\"paths requiring purity    : %s\",\n+                  make_stat(bccx, bccx.stats.req_pure_paths));\n     }\n \n     return (bccx.root_map, bccx.write_guard_map);"}, {"sha": "fba67d57994e4d1b5fae91976dbc3008ce428021", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -3011,32 +3011,30 @@ pub fn trans_crate(sess: session::Session,\n     write_metadata(ccx, crate);\n     if ccx.sess.trans_stats() {\n         io::println(\"--- trans stats ---\");\n-        io::println(fmt!(\"n_static_tydescs: %u\",\n-                         ccx.stats.n_static_tydescs));\n-        io::println(fmt!(\"n_glues_created: %u\",\n-                         ccx.stats.n_glues_created));\n-        io::println(fmt!(\"n_null_glues: %u\", ccx.stats.n_null_glues));\n-        io::println(fmt!(\"n_real_glues: %u\", ccx.stats.n_real_glues));\n-\n-        io::println(fmt!(\"n_fns: %u\", ccx.stats.n_fns));\n-        io::println(fmt!(\"n_monos: %u\", ccx.stats.n_monos));\n-        io::println(fmt!(\"n_inlines: %u\", ccx.stats.n_inlines));\n-        io::println(fmt!(\"n_closures: %u\", ccx.stats.n_closures));\n+        printfln!(\"n_static_tydescs: %u\", ccx.stats.n_static_tydescs);\n+        printfln!(\"n_glues_created: %u\", ccx.stats.n_glues_created);\n+        printfln!(\"n_null_glues: %u\", ccx.stats.n_null_glues);\n+        printfln!(\"n_real_glues: %u\", ccx.stats.n_real_glues);\n+\n+        printfln!(\"n_fns: %u\", ccx.stats.n_fns);\n+        printfln!(\"n_monos: %u\", ccx.stats.n_monos);\n+        printfln!(\"n_inlines: %u\", ccx.stats.n_inlines);\n+        printfln!(\"n_closures: %u\", ccx.stats.n_closures);\n         io::println(\"fn stats:\");\n         do sort::quick_sort(ccx.stats.fn_stats) |&(_, _, insns_a), &(_, _, insns_b)| {\n             insns_a > insns_b\n         }\n         for ccx.stats.fn_stats.iter().advance |tuple| {\n             match *tuple {\n                 (ref name, ms, insns) => {\n-                    io::println(fmt!(\"%u insns, %u ms, %s\", insns, ms, *name));\n+                    printfln!(\"%u insns, %u ms, %s\", insns, ms, *name);\n                 }\n             }\n         }\n     }\n     if ccx.sess.count_llvm_insns() {\n         for ccx.stats.llvm_insns.iter().advance |(k, v)| {\n-            io::println(fmt!(\"%-7u %s\", *v, *k));\n+            printfln!(\"%-7u %s\", *v, *k);\n         }\n     }\n "}, {"sha": "d64615e5dc7b3507909544804eb363dbc0abaa35", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -654,9 +654,9 @@ pub fn trans_call_inner(in_cx: @mut Block,\n \n         // Uncomment this to debug calls.\n         /*\n-        io::println(fmt!(\"calling: %s\", bcx.val_to_str(llfn)));\n+        printfln!(\"calling: %s\", bcx.val_to_str(llfn));\n         for llargs.iter().advance |llarg| {\n-            io::println(fmt!(\"arg: %s\", bcx.val_to_str(*llarg)));\n+            printfln!(\"arg: %s\", bcx.val_to_str(*llarg));\n         }\n         io::println(\"---\");\n         */"}, {"sha": "024ab7af0814def9ef0f708d7960026c88a904e8", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -37,7 +37,6 @@ use util::ppaux::ty_to_short_str;\n \n use middle::trans::type_::Type;\n \n-use std::io;\n use std::libc::c_uint;\n use std::str;\n use syntax::ast;\n@@ -649,8 +648,8 @@ pub fn declare_tydesc(ccx: &mut CrateContext, t: ty::t) -> @mut tydesc_info {\n     let llty = type_of(ccx, t);\n \n     if ccx.sess.count_type_sizes() {\n-        io::println(fmt!(\"%u\\t%s\", llsize_of_real(ccx, llty),\n-                         ppaux::ty_to_str(ccx.tcx, t)));\n+        printfln!(\"%u\\t%s\", llsize_of_real(ccx, llty),\n+                  ppaux::ty_to_str(ccx.tcx, t));\n     }\n \n     let llsize = llsize_of(ccx, llty);"}, {"sha": "7eea20175f9fc7e77e666849e76da5deb7cbcf6c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -2712,7 +2712,7 @@ pub fn node_id_to_trait_ref(cx: ctxt, id: ast::node_id) -> @ty::TraitRef {\n }\n \n pub fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n-    //io::println(fmt!(\"%?/%?\", id, cx.node_types.len()));\n+    //printfln!(\"%?/%?\", id, cx.node_types.len());\n     match cx.node_types.find(&(id as uint)) {\n        Some(&t) => t,\n        None => cx.sess.bug("}, {"sha": "39fbdb92a2feef7fef10a6a9eb87ffdffe2b2f78", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -128,28 +128,28 @@ pub fn version(argv0: &str) {\n     let mut vers = ~\"unknown version\";\n     let env_vers = env!(\"CFG_VERSION\");\n     if env_vers.len() != 0 { vers = env_vers.to_owned(); }\n-    io::println(fmt!(\"%s %s\", argv0, vers));\n-    io::println(fmt!(\"host: %s\", host_triple()));\n+    printfln!(\"%s %s\", argv0, vers);\n+    printfln!(\"host: %s\", host_triple());\n }\n \n pub fn usage(argv0: &str) {\n     let message = fmt!(\"Usage: %s [OPTIONS] INPUT\", argv0);\n-    io::println(fmt!(\"%s\\\n+    printfln!(\"%s\\\n Additional help:\n     -W help             Print 'lint' options and default settings\n     -Z help             Print internal options for debugging rustc\\n\",\n-                     groups::usage(message, optgroups())));\n+              groups::usage(message, optgroups()));\n }\n \n pub fn describe_warnings() {\n     use extra::sort::Sort;\n-    io::println(fmt!(\"\n+    printfln!(\"\n Available lint options:\n     -W <foo>           Warn about <foo>\n     -A <foo>           Allow <foo>\n     -D <foo>           Deny <foo>\n     -F <foo>           Forbid <foo> (deny, and deny all overrides)\n-\"));\n+\");\n \n     let lint_dict = lint::get_lint_dict();\n     let mut lint_dict = lint_dict.consume()\n@@ -164,28 +164,28 @@ Available lint options:\n     fn padded(max: uint, s: &str) -> ~str {\n         str::from_bytes(vec::from_elem(max - s.len(), ' ' as u8)) + s\n     }\n-    io::println(fmt!(\"\\nAvailable lint checks:\\n\"));\n-    io::println(fmt!(\"    %s  %7.7s  %s\",\n-                     padded(max_key, \"name\"), \"default\", \"meaning\"));\n-    io::println(fmt!(\"    %s  %7.7s  %s\\n\",\n-                     padded(max_key, \"----\"), \"-------\", \"-------\"));\n+    printfln!(\"\\nAvailable lint checks:\\n\");\n+    printfln!(\"    %s  %7.7s  %s\",\n+              padded(max_key, \"name\"), \"default\", \"meaning\");\n+    printfln!(\"    %s  %7.7s  %s\\n\",\n+              padded(max_key, \"----\"), \"-------\", \"-------\");\n     for lint_dict.consume_iter().advance |(spec, name)| {\n         let name = name.replace(\"_\", \"-\");\n-        io::println(fmt!(\"    %s  %7.7s  %s\",\n-                         padded(max_key, name),\n-                         lint::level_to_str(spec.default),\n-                         spec.desc));\n+        printfln!(\"    %s  %7.7s  %s\",\n+                  padded(max_key, name),\n+                  lint::level_to_str(spec.default),\n+                  spec.desc);\n     }\n     io::println(\"\");\n }\n \n pub fn describe_debug_flags() {\n-    io::println(fmt!(\"\\nAvailable debug options:\\n\"));\n+    printfln!(\"\\nAvailable debug options:\\n\");\n     let r = session::debugging_opts_map();\n     for r.iter().advance |tuple| {\n         match *tuple {\n             (ref name, ref desc, _) => {\n-                io::println(fmt!(\"    -Z %-20s -- %s\", *name, *desc));\n+                printfln!(\"    -Z %-20s -- %s\", *name, *desc);\n             }\n         }\n     }"}, {"sha": "6d5498898555d0bc96f465ded8522c89bac72373", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -14,15 +14,14 @@ use syntax::codemap::{span};\n use syntax::visit;\n \n use std::hashmap::HashSet;\n-use std::io;\n use extra;\n \n pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {\n     if !do_it { return thunk(); }\n     let start = extra::time::precise_time_s();\n     let rv = thunk();\n     let end = extra::time::precise_time_s();\n-    io::println(fmt!(\"time: %3.3f s\\t%s\", end - start, what));\n+    printfln!(\"time: %3.3f s\\t%s\", end - start, what);\n     rv\n }\n "}, {"sha": "de4815ab7a6ede4863e259bd3365c547366baf76", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -74,7 +74,7 @@ pub fn usage() {\n     println(\"Options:\\n\");\n     let r = opts();\n     for r.iter().advance |opt| {\n-        println(fmt!(\"    %s\", opt.second()));\n+        printfln!(\"    %s\", opt.second());\n     }\n     println(\"\");\n }"}, {"sha": "b738f4a958681c4c04140fd90df5e91029b95f87", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -23,7 +23,6 @@ extern mod extra;\n extern mod rustc;\n extern mod syntax;\n \n-use std::io;\n use std::os;\n \n use config::Config;\n@@ -69,7 +68,7 @@ pub fn main() {\n     let config = match config::parse_config(args) {\n       Ok(config) => config,\n       Err(err) => {\n-        io::println(fmt!(\"error: %s\", err));\n+        printfln!(\"error: %s\", err);\n         return;\n       }\n     };"}, {"sha": "38c70f8be0595b44ef67757328a2ac9d450e14dc", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -334,7 +334,7 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n             None => { },\n         }\n         if (should_compile) {\n-            println(fmt!(\"compiling %s...\", src_filename));\n+            printfln!(\"compiling %s...\", src_filename);\n             driver::compile_upto(sess, cfg, &input, driver::cu_everything,\n                                  Some(outputs));\n             true\n@@ -413,8 +413,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n             if loaded_crates.is_empty() {\n                 println(\"no crates loaded\");\n             } else {\n-                println(fmt!(\"crates loaded: %s\",\n-                                 loaded_crates.connect(\", \")));\n+                printfln!(\"crates loaded: %s\", loaded_crates.connect(\", \"));\n             }\n         }\n         ~\"{\" => {"}, {"sha": "37eb3aa5911ed3a96f27f86f119db6dfd03db7b8", "filename": "src/librustpkg/testsuite/pass/src/fancy-lib/pkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Ffancy-lib%2Fpkg.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     }\n \n     if args[2] != ~\"install\" {\n-        io::println(fmt!(\"Warning: I don't know how to %s\", args[2]));\n+        printfln!(\"Warning: I don't know how to %s\", args[2]);\n         return;\n     }\n "}, {"sha": "0c2a7bb7b400ca0a79f517a9c20ba0295f4f553a", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -326,7 +326,7 @@ pub trait IteratorUtil<A> {\n     /// use std::iterator::Counter;\n     ///\n     /// for Counter::new(0, 10).advance |i| {\n-    ///     io::println(fmt!(\"%d\", i));\n+    ///     printfln!(\"%d\", i);\n     /// }\n     /// ~~~\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;"}, {"sha": "acf7ea683fb544fd1f98506bffa70a3ad6e5e0e5", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -103,7 +103,7 @@ fn range_step_core(start: $T, stop: $T, step: $T_SIGNED, r: Range, it: &fn($T) -\n /// let nums = [1,2,3,4,5,6,7];\n ///\n /// for uint::range_step(0, nums.len() - 1, 2) |i| {\n-///     println(fmt!(\"%d & %d\", nums[i], nums[i+1]));\n+///     printfln!(\"%d & %d\", nums[i], nums[i+1]);\n /// }\n /// ~~~\n ///"}, {"sha": "6d0613b2e674fe40591080cfcb790b3f6aff792a", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -28,7 +28,7 @@ use std::rand::RngUtil;\n fn main() {\n     let mut rng = rand::rng();\n     if rng.gen() { // bool\n-        println(fmt!(\"int: %d, uint: %u\", rng.gen(), rng.gen()))\n+        printfln!(\"int: %d, uint: %u\", rng.gen(), rng.gen())\n     }\n }\n ~~~\n@@ -38,7 +38,7 @@ use std::rand;\n \n fn main () {\n     let tuple_ptr = rand::random::<~(f64, char)>();\n-    println(fmt!(\"%?\", tuple_ptr))\n+    printfln!(tuple_ptr)\n }\n ~~~\n */\n@@ -301,7 +301,7 @@ pub trait RngUtil {\n      *\n      * fn main() {\n      *     let mut rng = rand::rng();\n-     *     println(fmt!(\"%b\",rng.gen_weighted_bool(3)));\n+     *     printfln!(\"%b\", rng.gen_weighted_bool(3));\n      * }\n      * ~~~\n      */\n@@ -335,7 +335,7 @@ pub trait RngUtil {\n      *\n      * fn main() {\n      *     let mut rng = rand::rng();\n-     *     println(fmt!(\"%?\",rng.gen_bytes(8)));\n+     *     printfln!(rng.gen_bytes(8));\n      * }\n      * ~~~\n      */\n@@ -352,7 +352,7 @@ pub trait RngUtil {\n      *\n      * fn main() {\n      *     let mut rng = rand::rng();\n-     *     println(fmt!(\"%d\",rng.choose([1,2,4,8,16,32])));\n+     *     printfln!(\"%d\", rng.choose([1,2,4,8,16,32]));\n      * }\n      * ~~~\n      */\n@@ -375,7 +375,7 @@ pub trait RngUtil {\n      *     let x = [rand::Weighted {weight: 4, item: 'a'},\n      *              rand::Weighted {weight: 2, item: 'b'},\n      *              rand::Weighted {weight: 2, item: 'c'}];\n-     *     println(fmt!(\"%c\",rng.choose_weighted(x)));\n+     *     printfln!(\"%c\", rng.choose_weighted(x));\n      * }\n      * ~~~\n      */\n@@ -396,7 +396,7 @@ pub trait RngUtil {\n      *     let x = [rand::Weighted {weight: 4, item: 'a'},\n      *              rand::Weighted {weight: 2, item: 'b'},\n      *              rand::Weighted {weight: 2, item: 'c'}];\n-     *     println(fmt!(\"%?\",rng.choose_weighted_option(x)));\n+     *     printfln!(rng.choose_weighted_option(x));\n      * }\n      * ~~~\n      */\n@@ -418,7 +418,7 @@ pub trait RngUtil {\n      *     let x = [rand::Weighted {weight: 4, item: 'a'},\n      *              rand::Weighted {weight: 2, item: 'b'},\n      *              rand::Weighted {weight: 2, item: 'c'}];\n-     *     println(fmt!(\"%?\",rng.weighted_vec(x)));\n+     *     printfln!(rng.weighted_vec(x));\n      * }\n      * ~~~\n      */\n@@ -435,7 +435,7 @@ pub trait RngUtil {\n      *\n      * fn main() {\n      *     let mut rng = rand::rng();\n-     *     println(fmt!(\"%?\",rng.shuffle([1,2,3])));\n+     *     printfln!(rng.shuffle([1,2,3]));\n      * }\n      * ~~~\n      */\n@@ -454,9 +454,9 @@ pub trait RngUtil {\n      *     let mut rng = rand::rng();\n      *     let mut y = [1,2,3];\n      *     rng.shuffle_mut(y);\n-     *     println(fmt!(\"%?\",y));\n+     *     printfln!(y);\n      *     rng.shuffle_mut(y);\n-     *     println(fmt!(\"%?\",y));\n+     *     printfln!(y);\n      * }\n      * ~~~\n      */"}, {"sha": "56eae0428751eef99697c32e05b9d168dcd22ae4", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -70,7 +70,7 @@ fn ziggurat<R:Rng>(rng: &mut R,\n ///\n /// fn main() {\n ///     let normal = 2.0 + (*rand::random::<StandardNormal>()) * 3.0;\n-///     println(fmt!(\"%f is from a N(2, 9) distribution\", normal))\n+///     printfln!(\"%f is from a N(2, 9) distribution\", normal)\n /// }\n /// ~~~\n pub struct StandardNormal(f64);\n@@ -124,7 +124,7 @@ impl Rand for StandardNormal {\n ///\n /// fn main() {\n ///     let exp2 = (*rand::random::<Exp1>()) * 0.5;\n-///     println(fmt!(\"%f is from a Exp(2) distribution\", exp2));\n+///     printfln!(\"%f is from a Exp(2) distribution\", exp2);\n /// }\n /// ~~~\n pub struct Exp1(f64);"}, {"sha": "5b83112fe6bc048e72a58c6b801569e24f39146e", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -1727,7 +1727,7 @@ impl<'self> StrSlice<'self> for &'self str {\n      * let i = 0u;\n      * while i < s.len() {\n      *     let CharRange {ch, next} = s.char_range_at(i);\n-     *     std::io::println(fmt!(\"%u: %c\",i,ch));\n+     *     printfln!(\"%u: %c\", i, ch);\n      *     i = next;\n      * }\n      * ~~~"}, {"sha": "8432f28a969863b624a9abb1e73dc95a38bd0149", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -833,7 +833,7 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n      * ~~~ {.rust}\n      * let v = &[1,2,3,4];\n      * for v.window_iter().advance |win| {\n-     *     io::println(fmt!(\"%?\", win));\n+     *     printfln!(win);\n      * }\n      * ~~~\n      *\n@@ -862,7 +862,7 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n      * ~~~ {.rust}\n      * let v = &[1,2,3,4,5];\n      * for v.chunk_iter().advance |win| {\n-     *     io::println(fmt!(\"%?\", win));\n+     *     printfln!(win);\n      * }\n      * ~~~\n      *"}, {"sha": "4b3c8498380cc10f9412e37d697e5c4bffff05cd", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -23,8 +23,6 @@ use parse::token::{get_ident_interner, special_idents, gensym_ident, ident_to_st\n use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt};\n use print;\n \n-use std::io;\n-\n pub fn add_new_extension(cx: @ExtCtxt,\n                          sp: span,\n                          name: ident,\n@@ -82,11 +80,11 @@ pub fn add_new_extension(cx: @ExtCtxt,\n     -> MacResult {\n \n         if cx.trace_macros() {\n-            io::println(fmt!(\"%s! { %s }\",\n-                             cx.str_of(name),\n-                             print::pprust::tt_to_str(\n-                                 &ast::tt_delim(@mut arg.to_owned()),\n-                                 get_ident_interner())));\n+            printfln!(\"%s! { %s }\",\n+                      cx.str_of(name),\n+                      print::pprust::tt_to_str(\n+                          &ast::tt_delim(@mut arg.to_owned()),\n+                          get_ident_interner()));\n         }\n \n         // Which arm's failure should we report? (the one furthest along)"}, {"sha": "52b6d4459bf4854199964137b418e2f1162aac10", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d047cf1ec612f766365bde0c9d146b58ef3cc7c7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "patch": "@@ -686,7 +686,7 @@ mod test {\n     use std::io;\n     #[test] fn t1() {\n         let a = fresh_name(\"ghi\");\n-        io::println(fmt!(\"interned name: %u,\\ntextual name: %s\\n\",\n-                         a,interner_get(a)));\n+        printfln!(\"interned name: %u,\\ntextual name: %s\\n\",\n+                  a, interner_get(a));\n     }\n }"}]}