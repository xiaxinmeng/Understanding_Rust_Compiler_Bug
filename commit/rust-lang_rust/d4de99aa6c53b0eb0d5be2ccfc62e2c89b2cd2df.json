{"sha": "d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZGU5OWFhNmM1M2IwZWIwZDViZTJjY2ZjNjJlMmM4OWIyY2QyZGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-07T00:46:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-07T00:53:13Z"}, "message": "std::rt: Fix a race in the UvRemoteCallback dtor", "tree": {"sha": "2a482df80221611b7fc81c4709aa257624d8a95a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a482df80221611b7fc81c4709aa257624d8a95a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df", "html_url": "https://github.com/rust-lang/rust/commit/d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ccc6bc99386ae20ac03b68e7ec504a16068242", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ccc6bc99386ae20ac03b68e7ec504a16068242", "html_url": "https://github.com/rust-lang/rust/commit/d6ccc6bc99386ae20ac03b68e7ec504a16068242"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "0f98ab11513d66602e3c7f723f112e323aa2f81b", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=d4de99aa6c53b0eb0d5be2ccfc62e2c89b2cd2df", "patch": "@@ -24,7 +24,7 @@ use rt::sched::Scheduler;\n use rt::io::{standard_error, OtherIoError};\n use rt::tube::Tube;\n use rt::local::Local;\n-use unstable::sync::{UnsafeAtomicRcBox, AtomicInt};\n+use unstable::sync::{Exclusive, exclusive};\n \n #[cfg(test)] use container::Container;\n #[cfg(test)] use uint;\n@@ -105,21 +105,20 @@ fn test_callback_run_once() {\n pub struct UvRemoteCallback {\n     // The uv async handle for triggering the callback\n     async: AsyncWatcher,\n-    // An atomic flag to tell the callback to exit,\n-    // set from the dtor.\n-    exit_flag: UnsafeAtomicRcBox<AtomicInt>\n+    // A flag to tell the callback to exit, set from the dtor. This is\n+    // almost never contested - only in rare races with the dtor.\n+    exit_flag: Exclusive<bool>\n }\n \n impl UvRemoteCallback {\n     pub fn new(loop_: &mut Loop, f: ~fn()) -> UvRemoteCallback {\n-        let exit_flag = UnsafeAtomicRcBox::new(AtomicInt::new(0));\n+        let exit_flag = exclusive(false);\n         let exit_flag_clone = exit_flag.clone();\n         let async = do AsyncWatcher::new(loop_) |watcher, status| {\n             assert!(status.is_none());\n             f();\n-            let exit_flag_ptr = exit_flag_clone.get();\n-            unsafe {\n-                if (*exit_flag_ptr).load() == 1 {\n+            do exit_flag_clone.with_imm |&should_exit| {\n+                if should_exit {\n                     watcher.close(||());\n                 }\n             }\n@@ -139,9 +138,14 @@ impl Drop for UvRemoteCallback {\n     fn finalize(&self) {\n         unsafe {\n             let this: &mut UvRemoteCallback = cast::transmute_mut(self);\n-            let exit_flag_ptr = this.exit_flag.get();\n-            (*exit_flag_ptr).store(1);\n-            this.async.send();\n+            do this.exit_flag.with |should_exit| {\n+                // NB: These two things need to happen atomically. Otherwise\n+                // the event handler could wake up due to a *previous*\n+                // signal and see the exit flag, destroying the handle\n+                // before the final send.\n+                *should_exit = true;\n+                this.async.send();\n+            }\n         }\n     }\n }"}]}