{"sha": "3ba4b3c554ee94cf96d62c57f9bb80eaff19beed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYTRiM2M1NTRlZTk0Y2Y5NmQ2MmM1N2Y5YmI4MGVhZmYxOWJlZWQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-14T18:34:16Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-14T18:34:16Z"}, "message": "Use simpler logic on original_range", "tree": {"sha": "bea320110c3d97a69e4fb9b4ef1ea451f9b5894f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea320110c3d97a69e4fb9b4ef1ea451f9b5894f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed", "html_url": "https://github.com/rust-lang/rust/commit/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b53587c7bdd67c63bd33a745fdaeb22a847b6c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53587c7bdd67c63bd33a745fdaeb22a847b6c2f", "html_url": "https://github.com/rust-lang/rust/commit/b53587c7bdd67c63bd33a745fdaeb22a847b6c2f"}], "stats": {"total": 102, "additions": 46, "deletions": 56}, "files": [{"sha": "6a6b49afdf141a6fd4f3adf9cf8959028f80272e", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=3ba4b3c554ee94cf96d62c57f9bb80eaff19beed", "patch": "@@ -7,14 +7,10 @@ use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n     match_ast, AstNode, SmolStr,\n     SyntaxKind::{self, BIND_PAT, TYPE_PARAM},\n-    SyntaxNode, TextRange,\n+    TextRange,\n };\n \n-use crate::{\n-    db::RootDatabase,\n-    expand::{original_range_by_kind, OriginalRangeKind},\n-    FileRange, FileSymbol,\n-};\n+use crate::{db::RootDatabase, expand::original_range, FileSymbol};\n \n use super::short_label::ShortLabel;\n \n@@ -420,14 +416,3 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n         }\n     }\n }\n-\n-fn original_range(db: &RootDatabase, node: InFile<&SyntaxNode>) -> FileRange {\n-    if let Some(range) = original_range_by_kind(db, node, OriginalRangeKind::CallToken) {\n-        return range;\n-    }\n-    if let Some(range) = original_range_by_kind(db, node, OriginalRangeKind::WholeCall) {\n-        return range;\n-    }\n-\n-    FileRange { file_id: node.file_id.original_file(db), range: node.value.text_range() }\n-}"}, {"sha": "7a22bb0a4e232f257403ffb89598796ca47cb310", "filename": "crates/ra_ide/src/expand.rs", "status": "modified", "additions": 44, "deletions": 39, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba4b3c554ee94cf96d62c57f9bb80eaff19beed/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand.rs?ref=3ba4b3c554ee94cf96d62c57f9bb80eaff19beed", "patch": "@@ -7,55 +7,60 @@ use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxToken, TextRange};\n \n use crate::{db::RootDatabase, FileRange};\n \n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) enum OriginalRangeKind {\n-    /// Return range if any token is matched\n-    #[allow(dead_code)]\n-    Any,\n-    /// Return range if token is inside macro_call\n-    CallToken,\n-    /// Return whole macro call range if matched\n-    WholeCall,\n+pub(crate) fn original_range(db: &RootDatabase, node: InFile<&SyntaxNode>) -> FileRange {\n+    if let Some((range, Origin::Call)) = original_range_and_origin(db, node) {\n+        return range;\n+    }\n+\n+    if let Some(expansion) = node.file_id.expansion_info(db) {\n+        if let Some(call_node) = expansion.call_node() {\n+            return FileRange {\n+                file_id: call_node.file_id.original_file(db),\n+                range: call_node.value.text_range(),\n+            };\n+        }\n+    }\n+\n+    FileRange { file_id: node.file_id.original_file(db), range: node.value.text_range() }\n }\n \n-pub(crate) fn original_range_by_kind(\n+fn original_range_and_origin(\n     db: &RootDatabase,\n     node: InFile<&SyntaxNode>,\n-    kind: OriginalRangeKind,\n-) -> Option<FileRange> {\n+) -> Option<(FileRange, Origin)> {\n     let expansion = node.file_id.expansion_info(db)?;\n \n     // the input node has only one token ?\n     let single = node.value.first_token()? == node.value.last_token()?;\n \n     // FIXME: We should handle recurside macro expansions\n-    let range = match kind {\n-        OriginalRangeKind::WholeCall => expansion.call_node()?.map(|node| node.text_range()),\n-        _ => node.value.descendants().find_map(|it| {\n-            let first = it.first_token()?;\n-            let last = it.last_token()?;\n-\n-            if !single && first == last {\n-                return None;\n-            }\n-\n-            // Try to map first and last tokens of node, and, if success, return the union range of mapped tokens\n-            let (first, first_origin) = expansion.map_token_up(node.with_value(&first))?;\n-            let (last, last_origin) = expansion.map_token_up(node.with_value(&last))?;\n-\n-            if first.file_id != last.file_id\n-                || first_origin != last_origin\n-                || (kind == OriginalRangeKind::CallToken && first_origin != Origin::Call)\n-            {\n-                return None;\n-            }\n-\n-            // FIXME: Add union method in TextRange\n-            Some(first.with_value(union_range(first.value.text_range(), last.value.text_range())))\n-        })?,\n-    };\n-\n-    return Some(FileRange { file_id: range.file_id.original_file(db), range: range.value });\n+    let (range, origin) = node.value.descendants().find_map(|it| {\n+        let first = it.first_token()?;\n+        let last = it.last_token()?;\n+\n+        if !single && first == last {\n+            return None;\n+        }\n+\n+        // Try to map first and last tokens of node, and, if success, return the union range of mapped tokens\n+        let (first, first_origin) = expansion.map_token_up(node.with_value(&first))?;\n+        let (last, last_origin) = expansion.map_token_up(node.with_value(&last))?;\n+\n+        if first.file_id != last.file_id || first_origin != last_origin {\n+            return None;\n+        }\n+\n+        // FIXME: Add union method in TextRange\n+        Some((\n+            first.with_value(union_range(first.value.text_range(), last.value.text_range())),\n+            first_origin,\n+        ))\n+    })?;\n+\n+    return Some((\n+        FileRange { file_id: range.file_id.original_file(db), range: range.value },\n+        origin,\n+    ));\n \n     fn union_range(a: TextRange, b: TextRange) -> TextRange {\n         let start = a.start().min(b.start());"}]}