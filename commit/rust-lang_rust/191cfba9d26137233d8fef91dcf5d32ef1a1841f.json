{"sha": "191cfba9d26137233d8fef91dcf5d32ef1a1841f", "node_id": "C_kwDOAAsO6NoAKDE5MWNmYmE5ZDI2MTM3MjMzZDhmZWY5MWRjZjVkMzJlZjFhMTg0MWY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-16T16:13:46Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-20T12:58:57Z"}, "message": "Split inlay hints into modules", "tree": {"sha": "acd92093937db926f3c659c5e1cf7397aaf4d090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd92093937db926f3c659c5e1cf7397aaf4d090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/191cfba9d26137233d8fef91dcf5d32ef1a1841f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/191cfba9d26137233d8fef91dcf5d32ef1a1841f", "html_url": "https://github.com/rust-lang/rust/commit/191cfba9d26137233d8fef91dcf5d32ef1a1841f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/191cfba9d26137233d8fef91dcf5d32ef1a1841f/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccbf8fef9be09ba6aa3cfc90132623a18a65f493", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbf8fef9be09ba6aa3cfc90132623a18a65f493", "html_url": "https://github.com/rust-lang/rust/commit/ccbf8fef9be09ba6aa3cfc90132623a18a65f493"}], "stats": {"total": 2113, "additions": 1096, "deletions": 1017}, "files": [{"sha": "6387ec55a7fcbaa4a1901ee20262883c804c35ea", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 25, "deletions": 1017, "changes": 1042, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -1,24 +1,26 @@\n use std::fmt;\n \n use either::Either;\n-use hir::{\n-    known, Adjust, AutoBorrow, Callable, HasVisibility, HirDisplay, Mutability, OverloadedDeref,\n-    PointerCast, Safety, Semantics, TypeInfo,\n-};\n-use ide_db::{\n-    base_db::FileRange, famous_defs::FamousDefs, syntax_helpers::node_ext::walk_ty, FxHashMap,\n-    RootDatabase,\n-};\n+use hir::{known, HasVisibility, HirDisplay, Semantics};\n+use ide_db::{base_db::FileRange, famous_defs::FamousDefs, RootDatabase};\n use itertools::Itertools;\n-use stdx::to_lower_snake_case;\n use syntax::{\n-    ast::{self, AstNode, HasArgList, HasGenericParams, HasName, UnaryOp},\n-    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, SyntaxNode, SyntaxToken, TextRange,\n-    TextSize, T,\n+    ast::{self, AstNode},\n+    match_ast, NodeOrToken, SyntaxNode, TextRange, TextSize,\n };\n \n use crate::FileId;\n \n+mod closing_brace;\n+mod implicit_static;\n+mod fn_lifetime_fn;\n+mod closure_ret;\n+mod adjustment;\n+mod chaining;\n+mod param_name;\n+mod binding_mode;\n+mod bind_pat;\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n     pub render_colons: bool,\n@@ -227,38 +229,38 @@ fn hints(\n     file_id: FileId,\n     node: SyntaxNode,\n ) {\n-    closing_brace_hints(hints, sema, config, file_id, node.clone());\n+    closing_brace::hints(hints, sema, config, file_id, node.clone());\n     match_ast! {\n         match node {\n             ast::Expr(expr) => {\n-                chaining_hints(hints, sema, &famous_defs, config, file_id, &expr);\n-                adjustment_hints(hints, sema, config, &expr);\n+                chaining::hints(hints, sema, &famous_defs, config, file_id, &expr);\n+                adjustment::hints(hints, sema, config, &expr);\n                 match expr {\n-                    ast::Expr::CallExpr(it) => param_name_hints(hints, sema, config, ast::Expr::from(it)),\n+                    ast::Expr::CallExpr(it) => param_name::hints(hints, sema, config, ast::Expr::from(it)),\n                     ast::Expr::MethodCallExpr(it) => {\n-                        param_name_hints(hints, sema, config, ast::Expr::from(it))\n+                        param_name::hints(hints, sema, config, ast::Expr::from(it))\n                     }\n-                    ast::Expr::ClosureExpr(it) => closure_ret_hints(hints, sema, &famous_defs, config, file_id, it),\n+                    ast::Expr::ClosureExpr(it) => closure_ret::hints(hints, sema, &famous_defs, config, file_id, it),\n                     // We could show reborrows for all expressions, but usually that is just noise to the user\n                     // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n                     // ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n                     _ => None,\n                 }\n             },\n             ast::Pat(it) => {\n-                binding_mode_hints(hints, sema, config, &it);\n+                binding_mode::hints(hints, sema, config, &it);\n                 if let ast::Pat::IdentPat(it) = it {\n-                    bind_pat_hints(hints, sema, config, file_id, &it);\n+                    bind_pat::hints(hints, sema, config, file_id, &it);\n                 }\n                 Some(())\n             },\n             ast::Item(it) => match it {\n                 // FIXME: record impl lifetimes so they aren't being reused in assoc item lifetime inlay hints\n                 ast::Item::Impl(_) => None,\n-                ast::Item::Fn(it) => fn_lifetime_fn_hints(hints, config, it),\n+                ast::Item::Fn(it) => fn_lifetime_fn::hints(hints, config, it),\n                 // static type elisions\n-                ast::Item::Static(it) => implicit_static_hints(hints, config, Either::Left(it)),\n-                ast::Item::Const(it) => implicit_static_hints(hints, config, Either::Right(it)),\n+                ast::Item::Static(it) => implicit_static::hints(hints, config, Either::Left(it)),\n+                ast::Item::Const(it) => implicit_static::hints(hints, config, Either::Right(it)),\n                 _ => None,\n             },\n             // FIXME: fn-ptr type, dyn fn type, and trait object type elisions\n@@ -268,755 +270,6 @@ fn hints(\n     };\n }\n \n-fn closing_brace_hints(\n-    acc: &mut Vec<InlayHint>,\n-    sema: &Semantics<'_, RootDatabase>,\n-    config: &InlayHintsConfig,\n-    file_id: FileId,\n-    node: SyntaxNode,\n-) -> Option<()> {\n-    let min_lines = config.closing_brace_hints_min_lines?;\n-\n-    let name = |it: ast::Name| it.syntax().text_range();\n-\n-    let mut closing_token;\n-    let (label, name_range) = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n-        closing_token = item_list.r_curly_token()?;\n-\n-        let parent = item_list.syntax().parent()?;\n-        match_ast! {\n-            match parent {\n-                ast::Impl(imp) => {\n-                    let imp = sema.to_def(&imp)?;\n-                    let ty = imp.self_ty(sema.db);\n-                    let trait_ = imp.trait_(sema.db);\n-                    let hint_text = match trait_ {\n-                        Some(tr) => format!(\"impl {} for {}\", tr.name(sema.db), ty.display_truncated(sema.db, config.max_length)),\n-                        None => format!(\"impl {}\", ty.display_truncated(sema.db, config.max_length)),\n-                    };\n-                    (hint_text, None)\n-                },\n-                ast::Trait(tr) => {\n-                    (format!(\"trait {}\", tr.name()?), tr.name().map(name))\n-                },\n-                _ => return None,\n-            }\n-        }\n-    } else if let Some(list) = ast::ItemList::cast(node.clone()) {\n-        closing_token = list.r_curly_token()?;\n-\n-        let module = ast::Module::cast(list.syntax().parent()?)?;\n-        (format!(\"mod {}\", module.name()?), module.name().map(name))\n-    } else if let Some(block) = ast::BlockExpr::cast(node.clone()) {\n-        closing_token = block.stmt_list()?.r_curly_token()?;\n-\n-        let parent = block.syntax().parent()?;\n-        match_ast! {\n-            match parent {\n-                ast::Fn(it) => {\n-                    // FIXME: this could include parameters, but `HirDisplay` prints too much info\n-                    // and doesn't respect the max length either, so the hints end up way too long\n-                    (format!(\"fn {}\", it.name()?), it.name().map(name))\n-                },\n-                ast::Static(it) => (format!(\"static {}\", it.name()?), it.name().map(name)),\n-                ast::Const(it) => {\n-                    if it.underscore_token().is_some() {\n-                        (\"const _\".into(), None)\n-                    } else {\n-                        (format!(\"const {}\", it.name()?), it.name().map(name))\n-                    }\n-                },\n-                _ => return None,\n-            }\n-        }\n-    } else if let Some(mac) = ast::MacroCall::cast(node.clone()) {\n-        let last_token = mac.syntax().last_token()?;\n-        if last_token.kind() != T![;] && last_token.kind() != SyntaxKind::R_CURLY {\n-            return None;\n-        }\n-        closing_token = last_token;\n-\n-        (\n-            format!(\"{}!\", mac.path()?),\n-            mac.path().and_then(|it| it.segment()).map(|it| it.syntax().text_range()),\n-        )\n-    } else {\n-        return None;\n-    };\n-\n-    if let Some(mut next) = closing_token.next_token() {\n-        if next.kind() == T![;] {\n-            if let Some(tok) = next.next_token() {\n-                closing_token = next;\n-                next = tok;\n-            }\n-        }\n-        if !(next.kind() == SyntaxKind::WHITESPACE && next.text().contains('\\n')) {\n-            // Only display the hint if the `}` is the last token on the line\n-            return None;\n-        }\n-    }\n-\n-    let mut lines = 1;\n-    node.text().for_each_chunk(|s| lines += s.matches('\\n').count());\n-    if lines < min_lines {\n-        return None;\n-    }\n-\n-    let linked_location = name_range.map(|range| FileRange { file_id, range });\n-    acc.push(InlayHint {\n-        range: closing_token.text_range(),\n-        kind: InlayKind::ClosingBraceHint,\n-        label: InlayHintLabel { parts: vec![InlayHintLabelPart { text: label, linked_location }] },\n-        tooltip: None, // provided by label part location\n-    });\n-\n-    None\n-}\n-\n-fn implicit_static_hints(\n-    acc: &mut Vec<InlayHint>,\n-    config: &InlayHintsConfig,\n-    statik_or_const: Either<ast::Static, ast::Const>,\n-) -> Option<()> {\n-    if config.lifetime_elision_hints != LifetimeElisionHints::Always {\n-        return None;\n-    }\n-\n-    if let Either::Right(it) = &statik_or_const {\n-        if ast::AssocItemList::can_cast(\n-            it.syntax().parent().map_or(SyntaxKind::EOF, |it| it.kind()),\n-        ) {\n-            return None;\n-        }\n-    }\n-\n-    if let Some(ast::Type::RefType(ty)) = statik_or_const.either(|it| it.ty(), |it| it.ty()) {\n-        if ty.lifetime().is_none() {\n-            let t = ty.amp_token()?;\n-            acc.push(InlayHint {\n-                range: t.text_range(),\n-                kind: InlayKind::LifetimeHint,\n-                label: \"'static\".to_owned().into(),\n-                tooltip: Some(InlayTooltip::String(\"Elided static lifetime\".into())),\n-            });\n-        }\n-    }\n-\n-    Some(())\n-}\n-\n-fn fn_lifetime_fn_hints(\n-    acc: &mut Vec<InlayHint>,\n-    config: &InlayHintsConfig,\n-    func: ast::Fn,\n-) -> Option<()> {\n-    if config.lifetime_elision_hints == LifetimeElisionHints::Never {\n-        return None;\n-    }\n-\n-    let mk_lt_hint = |t: SyntaxToken, label: String| InlayHint {\n-        range: t.text_range(),\n-        kind: InlayKind::LifetimeHint,\n-        label: label.into(),\n-        tooltip: Some(InlayTooltip::String(\"Elided lifetime\".into())),\n-    };\n-\n-    let param_list = func.param_list()?;\n-    let generic_param_list = func.generic_param_list();\n-    let ret_type = func.ret_type();\n-    let self_param = param_list.self_param().filter(|it| it.amp_token().is_some());\n-\n-    let is_elided = |lt: &Option<ast::Lifetime>| match lt {\n-        Some(lt) => matches!(lt.text().as_str(), \"'_\"),\n-        None => true,\n-    };\n-\n-    let potential_lt_refs = {\n-        let mut acc: Vec<_> = vec![];\n-        if let Some(self_param) = &self_param {\n-            let lifetime = self_param.lifetime();\n-            let is_elided = is_elided(&lifetime);\n-            acc.push((None, self_param.amp_token(), lifetime, is_elided));\n-        }\n-        param_list.params().filter_map(|it| Some((it.pat(), it.ty()?))).for_each(|(pat, ty)| {\n-            // FIXME: check path types\n-            walk_ty(&ty, &mut |ty| match ty {\n-                ast::Type::RefType(r) => {\n-                    let lifetime = r.lifetime();\n-                    let is_elided = is_elided(&lifetime);\n-                    acc.push((\n-                        pat.as_ref().and_then(|it| match it {\n-                            ast::Pat::IdentPat(p) => p.name(),\n-                            _ => None,\n-                        }),\n-                        r.amp_token(),\n-                        lifetime,\n-                        is_elided,\n-                    ))\n-                }\n-                _ => (),\n-            })\n-        });\n-        acc\n-    };\n-\n-    // allocate names\n-    let mut gen_idx_name = {\n-        let mut gen = (0u8..).map(|idx| match idx {\n-            idx if idx < 10 => SmolStr::from_iter(['\\'', (idx + 48) as char]),\n-            idx => format!(\"'{idx}\").into(),\n-        });\n-        move || gen.next().unwrap_or_default()\n-    };\n-    let mut allocated_lifetimes = vec![];\n-\n-    let mut used_names: FxHashMap<SmolStr, usize> =\n-        match config.param_names_for_lifetime_elision_hints {\n-            true => generic_param_list\n-                .iter()\n-                .flat_map(|gpl| gpl.lifetime_params())\n-                .filter_map(|param| param.lifetime())\n-                .filter_map(|lt| Some((SmolStr::from(lt.text().as_str().get(1..)?), 0)))\n-                .collect(),\n-            false => Default::default(),\n-        };\n-    {\n-        let mut potential_lt_refs = potential_lt_refs.iter().filter(|&&(.., is_elided)| is_elided);\n-        if let Some(_) = &self_param {\n-            if let Some(_) = potential_lt_refs.next() {\n-                allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {\n-                    // self can't be used as a lifetime, so no need to check for collisions\n-                    \"'self\".into()\n-                } else {\n-                    gen_idx_name()\n-                });\n-            }\n-        }\n-        potential_lt_refs.for_each(|(name, ..)| {\n-            let name = match name {\n-                Some(it) if config.param_names_for_lifetime_elision_hints => {\n-                    if let Some(c) = used_names.get_mut(it.text().as_str()) {\n-                        *c += 1;\n-                        SmolStr::from(format!(\"'{text}{c}\", text = it.text().as_str()))\n-                    } else {\n-                        used_names.insert(it.text().as_str().into(), 0);\n-                        SmolStr::from_iter([\"\\'\", it.text().as_str()])\n-                    }\n-                }\n-                _ => gen_idx_name(),\n-            };\n-            allocated_lifetimes.push(name);\n-        });\n-    }\n-\n-    // fetch output lifetime if elision rule applies\n-    let output = match potential_lt_refs.as_slice() {\n-        [(_, _, lifetime, _), ..] if self_param.is_some() || potential_lt_refs.len() == 1 => {\n-            match lifetime {\n-                Some(lt) => match lt.text().as_str() {\n-                    \"'_\" => allocated_lifetimes.get(0).cloned(),\n-                    \"'static\" => None,\n-                    name => Some(name.into()),\n-                },\n-                None => allocated_lifetimes.get(0).cloned(),\n-            }\n-        }\n-        [..] => None,\n-    };\n-\n-    if allocated_lifetimes.is_empty() && output.is_none() {\n-        return None;\n-    }\n-\n-    // apply hints\n-    // apply output if required\n-    let mut is_trivial = true;\n-    if let (Some(output_lt), Some(r)) = (&output, ret_type) {\n-        if let Some(ty) = r.ty() {\n-            walk_ty(&ty, &mut |ty| match ty {\n-                ast::Type::RefType(ty) if ty.lifetime().is_none() => {\n-                    if let Some(amp) = ty.amp_token() {\n-                        is_trivial = false;\n-                        acc.push(mk_lt_hint(amp, output_lt.to_string()));\n-                    }\n-                }\n-                _ => (),\n-            })\n-        }\n-    }\n-\n-    if config.lifetime_elision_hints == LifetimeElisionHints::SkipTrivial && is_trivial {\n-        return None;\n-    }\n-\n-    let mut a = allocated_lifetimes.iter();\n-    for (_, amp_token, _, is_elided) in potential_lt_refs {\n-        if is_elided {\n-            let t = amp_token?;\n-            let lt = a.next()?;\n-            acc.push(mk_lt_hint(t, lt.to_string()));\n-        }\n-    }\n-\n-    // generate generic param list things\n-    match (generic_param_list, allocated_lifetimes.as_slice()) {\n-        (_, []) => (),\n-        (Some(gpl), allocated_lifetimes) => {\n-            let angle_tok = gpl.l_angle_token()?;\n-            let is_empty = gpl.generic_params().next().is_none();\n-            acc.push(InlayHint {\n-                range: angle_tok.text_range(),\n-                kind: InlayKind::LifetimeHint,\n-                label: format!(\n-                    \"{}{}\",\n-                    allocated_lifetimes.iter().format(\", \"),\n-                    if is_empty { \"\" } else { \", \" }\n-                )\n-                .into(),\n-                tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n-            });\n-        }\n-        (None, allocated_lifetimes) => acc.push(InlayHint {\n-            range: func.name()?.syntax().text_range(),\n-            kind: InlayKind::GenericParamListHint,\n-            label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n-            tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n-        }),\n-    }\n-    Some(())\n-}\n-\n-fn closure_ret_hints(\n-    acc: &mut Vec<InlayHint>,\n-    sema: &Semantics<'_, RootDatabase>,\n-    famous_defs: &FamousDefs<'_, '_>,\n-    config: &InlayHintsConfig,\n-    file_id: FileId,\n-    closure: ast::ClosureExpr,\n-) -> Option<()> {\n-    if config.closure_return_type_hints == ClosureReturnTypeHints::Never {\n-        return None;\n-    }\n-\n-    if closure.ret_type().is_some() {\n-        return None;\n-    }\n-\n-    if !closure_has_block_body(&closure)\n-        && config.closure_return_type_hints == ClosureReturnTypeHints::WithBlock\n-    {\n-        return None;\n-    }\n-\n-    let param_list = closure.param_list()?;\n-\n-    let closure = sema.descend_node_into_attributes(closure.clone()).pop()?;\n-    let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure))?.adjusted();\n-    let callable = ty.as_callable(sema.db)?;\n-    let ty = callable.return_type();\n-    if ty.is_unit() {\n-        return None;\n-    }\n-    acc.push(InlayHint {\n-        range: param_list.syntax().text_range(),\n-        kind: InlayKind::ClosureReturnTypeHint,\n-        label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n-            .into(),\n-        tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n-    });\n-    Some(())\n-}\n-\n-fn adjustment_hints(\n-    acc: &mut Vec<InlayHint>,\n-    sema: &Semantics<'_, RootDatabase>,\n-    config: &InlayHintsConfig,\n-    expr: &ast::Expr,\n-) -> Option<()> {\n-    if config.adjustment_hints == AdjustmentHints::Never {\n-        return None;\n-    }\n-\n-    // These inherit from the inner expression which would result in duplicate hints\n-    if let ast::Expr::ParenExpr(_)\n-    | ast::Expr::IfExpr(_)\n-    | ast::Expr::BlockExpr(_)\n-    | ast::Expr::MatchExpr(_) = expr\n-    {\n-        return None;\n-    }\n-\n-    let parent = expr.syntax().parent().and_then(ast::Expr::cast);\n-    let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n-    let desc_expr = descended.as_ref().unwrap_or(expr);\n-    let adjustments = sema.expr_adjustments(desc_expr).filter(|it| !it.is_empty())?;\n-    let needs_parens = match parent {\n-        Some(parent) => {\n-            match parent {\n-                ast::Expr::AwaitExpr(_)\n-                | ast::Expr::CallExpr(_)\n-                | ast::Expr::CastExpr(_)\n-                | ast::Expr::FieldExpr(_)\n-                | ast::Expr::MethodCallExpr(_)\n-                | ast::Expr::TryExpr(_) => true,\n-                // FIXME: shorthands need special casing, though not sure if adjustments are even valid there\n-                ast::Expr::RecordExpr(_) => false,\n-                ast::Expr::IndexExpr(index) => index.base().as_ref() == Some(expr),\n-                _ => false,\n-            }\n-        }\n-        None => false,\n-    };\n-    if needs_parens {\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::OpeningParenthesis,\n-            label: \"(\".into(),\n-            tooltip: None,\n-        });\n-    }\n-    for adjustment in adjustments.into_iter().rev() {\n-        // FIXME: Add some nicer tooltips to each of these\n-        let text = match adjustment {\n-            Adjust::NeverToAny if config.adjustment_hints == AdjustmentHints::Always => {\n-                \"<never-to-any>\"\n-            }\n-            Adjust::Deref(None) => \"*\",\n-            Adjust::Deref(Some(OverloadedDeref(Mutability::Mut))) => \"*\",\n-            Adjust::Deref(Some(OverloadedDeref(Mutability::Shared))) => \"*\",\n-            Adjust::Borrow(AutoBorrow::Ref(Mutability::Shared)) => \"&\",\n-            Adjust::Borrow(AutoBorrow::Ref(Mutability::Mut)) => \"&mut \",\n-            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Shared)) => \"&raw const \",\n-            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Mut)) => \"&raw mut \",\n-            // some of these could be represented via `as` casts, but that's not too nice and\n-            // handling everything as a prefix expr makes the `(` and `)` insertion easier\n-            Adjust::Pointer(cast) if config.adjustment_hints == AdjustmentHints::Always => {\n-                match cast {\n-                    PointerCast::ReifyFnPointer => \"<fn-item-to-fn-pointer>\",\n-                    PointerCast::UnsafeFnPointer => \"<safe-fn-pointer-to-unsafe-fn-pointer>\",\n-                    PointerCast::ClosureFnPointer(Safety::Unsafe) => {\n-                        \"<closure-to-unsafe-fn-pointer>\"\n-                    }\n-                    PointerCast::ClosureFnPointer(Safety::Safe) => \"<closure-to-fn-pointer>\",\n-                    PointerCast::MutToConstPointer => \"<mut-ptr-to-const-ptr>\",\n-                    PointerCast::ArrayToPointer => \"<array-ptr-to-element-ptr>\",\n-                    PointerCast::Unsize => \"<unsize>\",\n-                }\n-            }\n-            _ => continue,\n-        };\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::AdjustmentHint,\n-            label: text.into(),\n-            tooltip: None,\n-        });\n-    }\n-    if needs_parens {\n-        acc.push(InlayHint {\n-            range: expr.syntax().text_range(),\n-            kind: InlayKind::ClosingParenthesis,\n-            label: \")\".into(),\n-            tooltip: None,\n-        });\n-    }\n-    Some(())\n-}\n-\n-fn chaining_hints(\n-    acc: &mut Vec<InlayHint>,\n-    sema: &Semantics<'_, RootDatabase>,\n-    famous_defs: &FamousDefs<'_, '_>,\n-    config: &InlayHintsConfig,\n-    file_id: FileId,\n-    expr: &ast::Expr,\n-) -> Option<()> {\n-    if !config.chaining_hints {\n-        return None;\n-    }\n-\n-    if matches!(expr, ast::Expr::RecordExpr(_)) {\n-        return None;\n-    }\n-\n-    let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n-    let desc_expr = descended.as_ref().unwrap_or(expr);\n-\n-    let mut tokens = expr\n-        .syntax()\n-        .siblings_with_tokens(Direction::Next)\n-        .filter_map(NodeOrToken::into_token)\n-        .filter(|t| match t.kind() {\n-            SyntaxKind::WHITESPACE if !t.text().contains('\\n') => false,\n-            SyntaxKind::COMMENT => false,\n-            _ => true,\n-        });\n-\n-    // Chaining can be defined as an expression whose next sibling tokens are newline and dot\n-    // Ignoring extra whitespace and comments\n-    let next = tokens.next()?.kind();\n-    if next == SyntaxKind::WHITESPACE {\n-        let mut next_next = tokens.next()?.kind();\n-        while next_next == SyntaxKind::WHITESPACE {\n-            next_next = tokens.next()?.kind();\n-        }\n-        if next_next == T![.] {\n-            let ty = sema.type_of_expr(desc_expr)?.original;\n-            if ty.is_unknown() {\n-                return None;\n-            }\n-            if matches!(expr, ast::Expr::PathExpr(_)) {\n-                if let Some(hir::Adt::Struct(st)) = ty.as_adt() {\n-                    if st.fields(sema.db).is_empty() {\n-                        return None;\n-                    }\n-                }\n-            }\n-            acc.push(InlayHint {\n-                range: expr.syntax().text_range(),\n-                kind: InlayKind::ChainingHint,\n-                label: hint_iterator(sema, &famous_defs, config, &ty)\n-                    .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n-                    .into(),\n-                tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n-            });\n-        }\n-    }\n-    Some(())\n-}\n-\n-fn param_name_hints(\n-    acc: &mut Vec<InlayHint>,\n-    sema: &Semantics<'_, RootDatabase>,\n-    config: &InlayHintsConfig,\n-    expr: ast::Expr,\n-) -> Option<()> {\n-    if !config.parameter_hints {\n-        return None;\n-    }\n-\n-    let (callable, arg_list) = get_callable(sema, &expr)?;\n-    let hints = callable\n-        .params(sema.db)\n-        .into_iter()\n-        .zip(arg_list.args())\n-        .filter_map(|((param, _ty), arg)| {\n-            // Only annotate hints for expressions that exist in the original file\n-            let range = sema.original_range_opt(arg.syntax())?;\n-            let (param_name, name_syntax) = match param.as_ref()? {\n-                Either::Left(pat) => (\"self\".to_string(), pat.name()),\n-                Either::Right(pat) => match pat {\n-                    ast::Pat::IdentPat(it) => (it.name()?.to_string(), it.name()),\n-                    _ => return None,\n-                },\n-            };\n-            Some((name_syntax, param_name, arg, range))\n-        })\n-        .filter(|(_, param_name, arg, _)| {\n-            !should_hide_param_name_hint(sema, &callable, param_name, arg)\n-        })\n-        .map(|(param, param_name, _, FileRange { range, .. })| {\n-            let mut tooltip = None;\n-            if let Some(name) = param {\n-                if let hir::CallableKind::Function(f) = callable.kind() {\n-                    // assert the file is cached so we can map out of macros\n-                    if let Some(_) = sema.source(f) {\n-                        tooltip = sema.original_range_opt(name.syntax());\n-                    }\n-                }\n-            }\n-\n-            InlayHint {\n-                range,\n-                kind: InlayKind::ParameterHint,\n-                label: param_name.into(),\n-                tooltip: tooltip.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n-            }\n-        });\n-\n-    acc.extend(hints);\n-    Some(())\n-}\n-\n-fn binding_mode_hints(\n-    acc: &mut Vec<InlayHint>,\n-    sema: &Semantics<'_, RootDatabase>,\n-    config: &InlayHintsConfig,\n-    pat: &ast::Pat,\n-) -> Option<()> {\n-    if !config.binding_mode_hints {\n-        return None;\n-    }\n-\n-    let outer_paren_pat = pat\n-        .syntax()\n-        .ancestors()\n-        .skip(1)\n-        .map_while(ast::Pat::cast)\n-        .map_while(|pat| match pat {\n-            ast::Pat::ParenPat(pat) => Some(pat),\n-            _ => None,\n-        })\n-        .last();\n-    let range =\n-        outer_paren_pat.as_ref().map_or_else(|| pat.syntax(), |it| it.syntax()).text_range();\n-    sema.pattern_adjustments(&pat).iter().for_each(|ty| {\n-        let reference = ty.is_reference();\n-        let mut_reference = ty.is_mutable_reference();\n-        let r = match (reference, mut_reference) {\n-            (true, true) => \"&mut\",\n-            (true, false) => \"&\",\n-            _ => return,\n-        };\n-        acc.push(InlayHint {\n-            range,\n-            kind: InlayKind::BindingModeHint,\n-            label: r.to_string().into(),\n-            tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n-        });\n-    });\n-    match pat {\n-        ast::Pat::IdentPat(pat) if pat.ref_token().is_none() && pat.mut_token().is_none() => {\n-            let bm = sema.binding_mode_of_pat(pat)?;\n-            let bm = match bm {\n-                hir::BindingMode::Move => return None,\n-                hir::BindingMode::Ref(Mutability::Mut) => \"ref mut\",\n-                hir::BindingMode::Ref(Mutability::Shared) => \"ref\",\n-            };\n-            acc.push(InlayHint {\n-                range: pat.syntax().text_range(),\n-                kind: InlayKind::BindingModeHint,\n-                label: bm.to_string().into(),\n-                tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n-            });\n-        }\n-        ast::Pat::OrPat(pat) if outer_paren_pat.is_none() => {\n-            acc.push(InlayHint {\n-                range: pat.syntax().text_range(),\n-                kind: InlayKind::OpeningParenthesis,\n-                label: \"(\".into(),\n-                tooltip: None,\n-            });\n-            acc.push(InlayHint {\n-                range: pat.syntax().text_range(),\n-                kind: InlayKind::ClosingParenthesis,\n-                label: \")\".into(),\n-                tooltip: None,\n-            });\n-        }\n-        _ => (),\n-    }\n-\n-    Some(())\n-}\n-\n-fn bind_pat_hints(\n-    acc: &mut Vec<InlayHint>,\n-    sema: &Semantics<'_, RootDatabase>,\n-    config: &InlayHintsConfig,\n-    file_id: FileId,\n-    pat: &ast::IdentPat,\n-) -> Option<()> {\n-    if !config.type_hints {\n-        return None;\n-    }\n-\n-    let descended = sema.descend_node_into_attributes(pat.clone()).pop();\n-    let desc_pat = descended.as_ref().unwrap_or(pat);\n-    let ty = sema.type_of_pat(&desc_pat.clone().into())?.original;\n-\n-    if should_not_display_type_hint(sema, config, pat, &ty) {\n-        return None;\n-    }\n-\n-    let krate = sema.scope(desc_pat.syntax())?.krate();\n-    let famous_defs = FamousDefs(sema, krate);\n-    let label = hint_iterator(sema, &famous_defs, config, &ty);\n-\n-    let label = match label {\n-        Some(label) => label,\n-        None => {\n-            let ty_name = ty.display_truncated(sema.db, config.max_length).to_string();\n-            if config.hide_named_constructor_hints\n-                && is_named_constructor(sema, pat, &ty_name).is_some()\n-            {\n-                return None;\n-            }\n-            ty_name\n-        }\n-    };\n-\n-    acc.push(InlayHint {\n-        range: match pat.name() {\n-            Some(name) => name.syntax().text_range(),\n-            None => pat.syntax().text_range(),\n-        },\n-        kind: InlayKind::TypeHint,\n-        label: label.into(),\n-        tooltip: pat\n-            .name()\n-            .map(|it| it.syntax().text_range())\n-            .map(|it| InlayTooltip::HoverRanged(file_id, it)),\n-    });\n-\n-    Some(())\n-}\n-\n-fn is_named_constructor(\n-    sema: &Semantics<'_, RootDatabase>,\n-    pat: &ast::IdentPat,\n-    ty_name: &str,\n-) -> Option<()> {\n-    let let_node = pat.syntax().parent()?;\n-    let expr = match_ast! {\n-        match let_node {\n-            ast::LetStmt(it) => it.initializer(),\n-            ast::LetExpr(it) => it.expr(),\n-            _ => None,\n-        }\n-    }?;\n-\n-    let expr = sema.descend_node_into_attributes(expr.clone()).pop().unwrap_or(expr);\n-    // unwrap postfix expressions\n-    let expr = match expr {\n-        ast::Expr::TryExpr(it) => it.expr(),\n-        ast::Expr::AwaitExpr(it) => it.expr(),\n-        expr => Some(expr),\n-    }?;\n-    let expr = match expr {\n-        ast::Expr::CallExpr(call) => match call.expr()? {\n-            ast::Expr::PathExpr(path) => path,\n-            _ => return None,\n-        },\n-        ast::Expr::PathExpr(path) => path,\n-        _ => return None,\n-    };\n-    let path = expr.path()?;\n-\n-    let callable = sema.type_of_expr(&ast::Expr::PathExpr(expr))?.original.as_callable(sema.db);\n-    let callable_kind = callable.map(|it| it.kind());\n-    let qual_seg = match callable_kind {\n-        Some(hir::CallableKind::Function(_) | hir::CallableKind::TupleEnumVariant(_)) => {\n-            path.qualifier()?.segment()\n-        }\n-        _ => path.segment(),\n-    }?;\n-\n-    let ctor_name = match qual_seg.kind()? {\n-        ast::PathSegmentKind::Name(name_ref) => {\n-            match qual_seg.generic_arg_list().map(|it| it.generic_args()) {\n-                Some(generics) => format!(\"{}<{}>\", name_ref, generics.format(\", \")),\n-                None => name_ref.to_string(),\n-            }\n-        }\n-        ast::PathSegmentKind::Type { type_ref: Some(ty), trait_ref: None } => ty.to_string(),\n-        _ => return None,\n-    };\n-    (ctor_name == ty_name).then(|| ())\n-}\n-\n /// Checks if the type is an Iterator from std::iter and replaces its hint with an `impl Iterator<Item = Ty>`.\n fn hint_iterator(\n     sema: &Semantics<'_, RootDatabase>,\n@@ -1067,255 +320,10 @@ fn hint_iterator(\n     None\n }\n \n-fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir::Type) -> bool {\n-    if let Some(hir::Adt::Enum(enum_data)) = pat_ty.as_adt() {\n-        let pat_text = bind_pat.to_string();\n-        enum_data\n-            .variants(db)\n-            .into_iter()\n-            .map(|variant| variant.name(db).to_smol_str())\n-            .any(|enum_name| enum_name == pat_text)\n-    } else {\n-        false\n-    }\n-}\n-\n-fn should_not_display_type_hint(\n-    sema: &Semantics<'_, RootDatabase>,\n-    config: &InlayHintsConfig,\n-    bind_pat: &ast::IdentPat,\n-    pat_ty: &hir::Type,\n-) -> bool {\n-    let db = sema.db;\n-\n-    if pat_ty.is_unknown() {\n-        return true;\n-    }\n-\n-    if let Some(hir::Adt::Struct(s)) = pat_ty.as_adt() {\n-        if s.fields(db).is_empty() && s.name(db).to_smol_str() == bind_pat.to_string() {\n-            return true;\n-        }\n-    }\n-\n-    if config.hide_closure_initialization_hints {\n-        if let Some(parent) = bind_pat.syntax().parent() {\n-            if let Some(it) = ast::LetStmt::cast(parent.clone()) {\n-                if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n-                    if closure_has_block_body(&closure) {\n-                        return true;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    for node in bind_pat.syntax().ancestors() {\n-        match_ast! {\n-            match node {\n-                ast::LetStmt(it) => return it.ty().is_some(),\n-                // FIXME: We might wanna show type hints in parameters for non-top level patterns as well\n-                ast::Param(it) => return it.ty().is_some(),\n-                ast::MatchArm(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n-                ast::LetExpr(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n-                ast::IfExpr(_) => return false,\n-                ast::WhileExpr(_) => return false,\n-                ast::ForExpr(it) => {\n-                    // We *should* display hint only if user provided \"in {expr}\" and we know the type of expr (and it's not unit).\n-                    // Type of expr should be iterable.\n-                    return it.in_token().is_none() ||\n-                        it.iterable()\n-                            .and_then(|iterable_expr| sema.type_of_expr(&iterable_expr))\n-                            .map(TypeInfo::original)\n-                            .map_or(true, |iterable_ty| iterable_ty.is_unknown() || iterable_ty.is_unit())\n-                },\n-                _ => (),\n-            }\n-        }\n-    }\n-    false\n-}\n-\n fn closure_has_block_body(closure: &ast::ClosureExpr) -> bool {\n     matches!(closure.body(), Some(ast::Expr::BlockExpr(_)))\n }\n \n-fn should_hide_param_name_hint(\n-    sema: &Semantics<'_, RootDatabase>,\n-    callable: &hir::Callable,\n-    param_name: &str,\n-    argument: &ast::Expr,\n-) -> bool {\n-    // These are to be tested in the `parameter_hint_heuristics` test\n-    // hide when:\n-    // - the parameter name is a suffix of the function's name\n-    // - the argument is a qualified constructing or call expression where the qualifier is an ADT\n-    // - exact argument<->parameter match(ignoring leading underscore) or parameter is a prefix/suffix\n-    //   of argument with _ splitting it off\n-    // - param starts with `ra_fixture`\n-    // - param is a well known name in a unary function\n-\n-    let param_name = param_name.trim_start_matches('_');\n-    if param_name.is_empty() {\n-        return true;\n-    }\n-\n-    if matches!(argument, ast::Expr::PrefixExpr(prefix) if prefix.op_kind() == Some(UnaryOp::Not)) {\n-        return false;\n-    }\n-\n-    let fn_name = match callable.kind() {\n-        hir::CallableKind::Function(it) => Some(it.name(sema.db).to_smol_str()),\n-        _ => None,\n-    };\n-    let fn_name = fn_name.as_deref();\n-    is_param_name_suffix_of_fn_name(param_name, callable, fn_name)\n-        || is_argument_similar_to_param_name(argument, param_name)\n-        || param_name.starts_with(\"ra_fixture\")\n-        || (callable.n_params() == 1 && is_obvious_param(param_name))\n-        || is_adt_constructor_similar_to_param_name(sema, argument, param_name)\n-}\n-\n-fn is_argument_similar_to_param_name(argument: &ast::Expr, param_name: &str) -> bool {\n-    // check whether param_name and argument are the same or\n-    // whether param_name is a prefix/suffix of argument(split at `_`)\n-    let argument = match get_string_representation(argument) {\n-        Some(argument) => argument,\n-        None => return false,\n-    };\n-\n-    // std is honestly too panic happy...\n-    let str_split_at = |str: &str, at| str.is_char_boundary(at).then(|| argument.split_at(at));\n-\n-    let param_name = param_name.trim_start_matches('_');\n-    let argument = argument.trim_start_matches('_');\n-\n-    match str_split_at(argument, param_name.len()) {\n-        Some((prefix, rest)) if prefix.eq_ignore_ascii_case(param_name) => {\n-            return rest.is_empty() || rest.starts_with('_');\n-        }\n-        _ => (),\n-    }\n-    match argument.len().checked_sub(param_name.len()).and_then(|at| str_split_at(argument, at)) {\n-        Some((rest, suffix)) if param_name.eq_ignore_ascii_case(suffix) => {\n-            return rest.is_empty() || rest.ends_with('_');\n-        }\n-        _ => (),\n-    }\n-    false\n-}\n-\n-/// Hide the parameter name of a unary function if it is a `_` - prefixed suffix of the function's name, or equal.\n-///\n-/// `fn strip_suffix(suffix)` will be hidden.\n-/// `fn stripsuffix(suffix)` will not be hidden.\n-fn is_param_name_suffix_of_fn_name(\n-    param_name: &str,\n-    callable: &Callable,\n-    fn_name: Option<&str>,\n-) -> bool {\n-    match (callable.n_params(), fn_name) {\n-        (1, Some(function)) => {\n-            function == param_name\n-                || function\n-                    .len()\n-                    .checked_sub(param_name.len())\n-                    .and_then(|at| function.is_char_boundary(at).then(|| function.split_at(at)))\n-                    .map_or(false, |(prefix, suffix)| {\n-                        suffix.eq_ignore_ascii_case(param_name) && prefix.ends_with('_')\n-                    })\n-        }\n-        _ => false,\n-    }\n-}\n-\n-fn is_adt_constructor_similar_to_param_name(\n-    sema: &Semantics<'_, RootDatabase>,\n-    argument: &ast::Expr,\n-    param_name: &str,\n-) -> bool {\n-    let path = match argument {\n-        ast::Expr::CallExpr(c) => c.expr().and_then(|e| match e {\n-            ast::Expr::PathExpr(p) => p.path(),\n-            _ => None,\n-        }),\n-        ast::Expr::PathExpr(p) => p.path(),\n-        ast::Expr::RecordExpr(r) => r.path(),\n-        _ => return false,\n-    };\n-    let path = match path {\n-        Some(it) => it,\n-        None => return false,\n-    };\n-    (|| match sema.resolve_path(&path)? {\n-        hir::PathResolution::Def(hir::ModuleDef::Adt(_)) => {\n-            Some(to_lower_snake_case(&path.segment()?.name_ref()?.text()) == param_name)\n-        }\n-        hir::PathResolution::Def(hir::ModuleDef::Function(_) | hir::ModuleDef::Variant(_)) => {\n-            if to_lower_snake_case(&path.segment()?.name_ref()?.text()) == param_name {\n-                return Some(true);\n-            }\n-            let qual = path.qualifier()?;\n-            match sema.resolve_path(&qual)? {\n-                hir::PathResolution::Def(hir::ModuleDef::Adt(_)) => {\n-                    Some(to_lower_snake_case(&qual.segment()?.name_ref()?.text()) == param_name)\n-                }\n-                _ => None,\n-            }\n-        }\n-        _ => None,\n-    })()\n-    .unwrap_or(false)\n-}\n-\n-fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n-    match expr {\n-        ast::Expr::MethodCallExpr(method_call_expr) => {\n-            let name_ref = method_call_expr.name_ref()?;\n-            match name_ref.text().as_str() {\n-                \"clone\" | \"as_ref\" => method_call_expr.receiver().map(|rec| rec.to_string()),\n-                name_ref => Some(name_ref.to_owned()),\n-            }\n-        }\n-        ast::Expr::MacroExpr(macro_expr) => {\n-            Some(macro_expr.macro_call()?.path()?.segment()?.to_string())\n-        }\n-        ast::Expr::FieldExpr(field_expr) => Some(field_expr.name_ref()?.to_string()),\n-        ast::Expr::PathExpr(path_expr) => Some(path_expr.path()?.segment()?.to_string()),\n-        ast::Expr::PrefixExpr(prefix_expr) => get_string_representation(&prefix_expr.expr()?),\n-        ast::Expr::RefExpr(ref_expr) => get_string_representation(&ref_expr.expr()?),\n-        ast::Expr::CastExpr(cast_expr) => get_string_representation(&cast_expr.expr()?),\n-        _ => None,\n-    }\n-}\n-\n-fn is_obvious_param(param_name: &str) -> bool {\n-    // avoid displaying hints for common functions like map, filter, etc.\n-    // or other obvious words used in std\n-    let is_obvious_param_name =\n-        matches!(param_name, \"predicate\" | \"value\" | \"pat\" | \"rhs\" | \"other\");\n-    param_name.len() == 1 || is_obvious_param_name\n-}\n-\n-fn get_callable(\n-    sema: &Semantics<'_, RootDatabase>,\n-    expr: &ast::Expr,\n-) -> Option<(hir::Callable, ast::ArgList)> {\n-    match expr {\n-        ast::Expr::CallExpr(expr) => {\n-            let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n-            let expr = descended.as_ref().unwrap_or(expr);\n-            sema.type_of_expr(&expr.expr()?)?.original.as_callable(sema.db).zip(expr.arg_list())\n-        }\n-        ast::Expr::MethodCallExpr(expr) => {\n-            let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n-            let expr = descended.as_ref().unwrap_or(expr);\n-            sema.resolve_method_call_as_callable(expr).zip(expr.arg_list())\n-        }\n-        _ => None,\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}, {"sha": "3fa2ed3307d5c92367876f25049feba044b9b600", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,102 @@\n+use hir::{Adjust, AutoBorrow, Mutability, OverloadedDeref, PointerCast, Safety, Semantics};\n+use ide_db::RootDatabase;\n+\n+use syntax::ast::{self, AstNode};\n+\n+use crate::{AdjustmentHints, InlayHint, InlayHintsConfig, InlayKind};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &InlayHintsConfig,\n+    expr: &ast::Expr,\n+) -> Option<()> {\n+    if config.adjustment_hints == AdjustmentHints::Never {\n+        return None;\n+    }\n+\n+    // These inherit from the inner expression which would result in duplicate hints\n+    if let ast::Expr::ParenExpr(_)\n+    | ast::Expr::IfExpr(_)\n+    | ast::Expr::BlockExpr(_)\n+    | ast::Expr::MatchExpr(_) = expr\n+    {\n+        return None;\n+    }\n+\n+    let parent = expr.syntax().parent().and_then(ast::Expr::cast);\n+    let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n+    let desc_expr = descended.as_ref().unwrap_or(expr);\n+    let adjustments = sema.expr_adjustments(desc_expr).filter(|it| !it.is_empty())?;\n+    let needs_parens = match parent {\n+        Some(parent) => {\n+            match parent {\n+                ast::Expr::AwaitExpr(_)\n+                | ast::Expr::CallExpr(_)\n+                | ast::Expr::CastExpr(_)\n+                | ast::Expr::FieldExpr(_)\n+                | ast::Expr::MethodCallExpr(_)\n+                | ast::Expr::TryExpr(_) => true,\n+                // FIXME: shorthands need special casing, though not sure if adjustments are even valid there\n+                ast::Expr::RecordExpr(_) => false,\n+                ast::Expr::IndexExpr(index) => index.base().as_ref() == Some(expr),\n+                _ => false,\n+            }\n+        }\n+        None => false,\n+    };\n+    if needs_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::OpeningParenthesis,\n+            label: \"(\".into(),\n+            tooltip: None,\n+        });\n+    }\n+    for adjustment in adjustments.into_iter().rev() {\n+        // FIXME: Add some nicer tooltips to each of these\n+        let text = match adjustment {\n+            Adjust::NeverToAny if config.adjustment_hints == AdjustmentHints::Always => {\n+                \"<never-to-any>\"\n+            }\n+            Adjust::Deref(None) => \"*\",\n+            Adjust::Deref(Some(OverloadedDeref(Mutability::Mut))) => \"*\",\n+            Adjust::Deref(Some(OverloadedDeref(Mutability::Shared))) => \"*\",\n+            Adjust::Borrow(AutoBorrow::Ref(Mutability::Shared)) => \"&\",\n+            Adjust::Borrow(AutoBorrow::Ref(Mutability::Mut)) => \"&mut \",\n+            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Shared)) => \"&raw const \",\n+            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Mut)) => \"&raw mut \",\n+            // some of these could be represented via `as` casts, but that's not too nice and\n+            // handling everything as a prefix expr makes the `(` and `)` insertion easier\n+            Adjust::Pointer(cast) if config.adjustment_hints == AdjustmentHints::Always => {\n+                match cast {\n+                    PointerCast::ReifyFnPointer => \"<fn-item-to-fn-pointer>\",\n+                    PointerCast::UnsafeFnPointer => \"<safe-fn-pointer-to-unsafe-fn-pointer>\",\n+                    PointerCast::ClosureFnPointer(Safety::Unsafe) => {\n+                        \"<closure-to-unsafe-fn-pointer>\"\n+                    }\n+                    PointerCast::ClosureFnPointer(Safety::Safe) => \"<closure-to-fn-pointer>\",\n+                    PointerCast::MutToConstPointer => \"<mut-ptr-to-const-ptr>\",\n+                    PointerCast::ArrayToPointer => \"<array-ptr-to-element-ptr>\",\n+                    PointerCast::Unsize => \"<unsize>\",\n+                }\n+            }\n+            _ => continue,\n+        };\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::AdjustmentHint,\n+            label: text.into(),\n+            tooltip: None,\n+        });\n+    }\n+    if needs_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::ClosingParenthesis,\n+            label: \")\".into(),\n+            tooltip: None,\n+        });\n+    }\n+    Some(())\n+}"}, {"sha": "68beb8fc35cb42f7fe91e11132a51bec244b9d42", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,187 @@\n+use hir::{HirDisplay, Semantics, TypeInfo};\n+use ide_db::{base_db::FileId, famous_defs::FamousDefs, RootDatabase};\n+\n+use itertools::Itertools;\n+use syntax::{\n+    ast::{self, AstNode, HasName},\n+    match_ast,\n+};\n+\n+use crate::{\n+    inlay_hints::{closure_has_block_body, hint_iterator},\n+    InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n+};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &InlayHintsConfig,\n+    file_id: FileId,\n+    pat: &ast::IdentPat,\n+) -> Option<()> {\n+    if !config.type_hints {\n+        return None;\n+    }\n+\n+    let descended = sema.descend_node_into_attributes(pat.clone()).pop();\n+    let desc_pat = descended.as_ref().unwrap_or(pat);\n+    let ty = sema.type_of_pat(&desc_pat.clone().into())?.original;\n+\n+    if should_not_display_type_hint(sema, config, pat, &ty) {\n+        return None;\n+    }\n+\n+    let krate = sema.scope(desc_pat.syntax())?.krate();\n+    let famous_defs = FamousDefs(sema, krate);\n+    let label = hint_iterator(sema, &famous_defs, config, &ty);\n+\n+    let label = match label {\n+        Some(label) => label,\n+        None => {\n+            let ty_name = ty.display_truncated(sema.db, config.max_length).to_string();\n+            if config.hide_named_constructor_hints\n+                && is_named_constructor(sema, pat, &ty_name).is_some()\n+            {\n+                return None;\n+            }\n+            ty_name\n+        }\n+    };\n+\n+    acc.push(InlayHint {\n+        range: match pat.name() {\n+            Some(name) => name.syntax().text_range(),\n+            None => pat.syntax().text_range(),\n+        },\n+        kind: InlayKind::TypeHint,\n+        label: label.into(),\n+        tooltip: pat\n+            .name()\n+            .map(|it| it.syntax().text_range())\n+            .map(|it| InlayTooltip::HoverRanged(file_id, it)),\n+    });\n+\n+    Some(())\n+}\n+\n+fn should_not_display_type_hint(\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &InlayHintsConfig,\n+    bind_pat: &ast::IdentPat,\n+    pat_ty: &hir::Type,\n+) -> bool {\n+    let db = sema.db;\n+\n+    if pat_ty.is_unknown() {\n+        return true;\n+    }\n+\n+    if let Some(hir::Adt::Struct(s)) = pat_ty.as_adt() {\n+        if s.fields(db).is_empty() && s.name(db).to_smol_str() == bind_pat.to_string() {\n+            return true;\n+        }\n+    }\n+\n+    if config.hide_closure_initialization_hints {\n+        if let Some(parent) = bind_pat.syntax().parent() {\n+            if let Some(it) = ast::LetStmt::cast(parent.clone()) {\n+                if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n+                    if closure_has_block_body(&closure) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    for node in bind_pat.syntax().ancestors() {\n+        match_ast! {\n+            match node {\n+                ast::LetStmt(it) => return it.ty().is_some(),\n+                // FIXME: We might wanna show type hints in parameters for non-top level patterns as well\n+                ast::Param(it) => return it.ty().is_some(),\n+                ast::MatchArm(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n+                ast::LetExpr(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n+                ast::IfExpr(_) => return false,\n+                ast::WhileExpr(_) => return false,\n+                ast::ForExpr(it) => {\n+                    // We *should* display hint only if user provided \"in {expr}\" and we know the type of expr (and it's not unit).\n+                    // Type of expr should be iterable.\n+                    return it.in_token().is_none() ||\n+                        it.iterable()\n+                            .and_then(|iterable_expr| sema.type_of_expr(&iterable_expr))\n+                            .map(TypeInfo::original)\n+                            .map_or(true, |iterable_ty| iterable_ty.is_unknown() || iterable_ty.is_unit())\n+                },\n+                _ => (),\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+fn is_named_constructor(\n+    sema: &Semantics<'_, RootDatabase>,\n+    pat: &ast::IdentPat,\n+    ty_name: &str,\n+) -> Option<()> {\n+    let let_node = pat.syntax().parent()?;\n+    let expr = match_ast! {\n+        match let_node {\n+            ast::LetStmt(it) => it.initializer(),\n+            ast::LetExpr(it) => it.expr(),\n+            _ => None,\n+        }\n+    }?;\n+\n+    let expr = sema.descend_node_into_attributes(expr.clone()).pop().unwrap_or(expr);\n+    // unwrap postfix expressions\n+    let expr = match expr {\n+        ast::Expr::TryExpr(it) => it.expr(),\n+        ast::Expr::AwaitExpr(it) => it.expr(),\n+        expr => Some(expr),\n+    }?;\n+    let expr = match expr {\n+        ast::Expr::CallExpr(call) => match call.expr()? {\n+            ast::Expr::PathExpr(path) => path,\n+            _ => return None,\n+        },\n+        ast::Expr::PathExpr(path) => path,\n+        _ => return None,\n+    };\n+    let path = expr.path()?;\n+\n+    let callable = sema.type_of_expr(&ast::Expr::PathExpr(expr))?.original.as_callable(sema.db);\n+    let callable_kind = callable.map(|it| it.kind());\n+    let qual_seg = match callable_kind {\n+        Some(hir::CallableKind::Function(_) | hir::CallableKind::TupleEnumVariant(_)) => {\n+            path.qualifier()?.segment()\n+        }\n+        _ => path.segment(),\n+    }?;\n+\n+    let ctor_name = match qual_seg.kind()? {\n+        ast::PathSegmentKind::Name(name_ref) => {\n+            match qual_seg.generic_arg_list().map(|it| it.generic_args()) {\n+                Some(generics) => format!(\"{}<{}>\", name_ref, generics.format(\", \")),\n+                None => name_ref.to_string(),\n+            }\n+        }\n+        ast::PathSegmentKind::Type { type_ref: Some(ty), trait_ref: None } => ty.to_string(),\n+        _ => return None,\n+    };\n+    (ctor_name == ty_name).then(|| ())\n+}\n+\n+fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir::Type) -> bool {\n+    if let Some(hir::Adt::Enum(enum_data)) = pat_ty.as_adt() {\n+        let pat_text = bind_pat.to_string();\n+        enum_data\n+            .variants(db)\n+            .into_iter()\n+            .map(|variant| variant.name(db).to_smol_str())\n+            .any(|enum_name| enum_name == pat_text)\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "f8fe9f5819a58c84b25dc2ed75fd214a10aefb33", "filename": "crates/ide/src/inlay_hints/binding_mode.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,78 @@\n+use hir::{Mutability, Semantics};\n+use ide_db::RootDatabase;\n+\n+use syntax::ast::{self, AstNode};\n+\n+use crate::{InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &InlayHintsConfig,\n+    pat: &ast::Pat,\n+) -> Option<()> {\n+    if !config.binding_mode_hints {\n+        return None;\n+    }\n+\n+    let outer_paren_pat = pat\n+        .syntax()\n+        .ancestors()\n+        .skip(1)\n+        .map_while(ast::Pat::cast)\n+        .map_while(|pat| match pat {\n+            ast::Pat::ParenPat(pat) => Some(pat),\n+            _ => None,\n+        })\n+        .last();\n+    let range =\n+        outer_paren_pat.as_ref().map_or_else(|| pat.syntax(), |it| it.syntax()).text_range();\n+    sema.pattern_adjustments(&pat).iter().for_each(|ty| {\n+        let reference = ty.is_reference();\n+        let mut_reference = ty.is_mutable_reference();\n+        let r = match (reference, mut_reference) {\n+            (true, true) => \"&mut\",\n+            (true, false) => \"&\",\n+            _ => return,\n+        };\n+        acc.push(InlayHint {\n+            range,\n+            kind: InlayKind::BindingModeHint,\n+            label: r.to_string().into(),\n+            tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n+        });\n+    });\n+    match pat {\n+        ast::Pat::IdentPat(pat) if pat.ref_token().is_none() && pat.mut_token().is_none() => {\n+            let bm = sema.binding_mode_of_pat(pat)?;\n+            let bm = match bm {\n+                hir::BindingMode::Move => return None,\n+                hir::BindingMode::Ref(Mutability::Mut) => \"ref mut\",\n+                hir::BindingMode::Ref(Mutability::Shared) => \"ref\",\n+            };\n+            acc.push(InlayHint {\n+                range: pat.syntax().text_range(),\n+                kind: InlayKind::BindingModeHint,\n+                label: bm.to_string().into(),\n+                tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n+            });\n+        }\n+        ast::Pat::OrPat(pat) if outer_paren_pat.is_none() => {\n+            acc.push(InlayHint {\n+                range: pat.syntax().text_range(),\n+                kind: InlayKind::OpeningParenthesis,\n+                label: \"(\".into(),\n+                tooltip: None,\n+            });\n+            acc.push(InlayHint {\n+                range: pat.syntax().text_range(),\n+                kind: InlayKind::ClosingParenthesis,\n+                label: \")\".into(),\n+                tooltip: None,\n+            });\n+        }\n+        _ => (),\n+    }\n+\n+    Some(())\n+}"}, {"sha": "99b08a339b61278406077db89aeb05fbafb3669f", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,72 @@\n+use hir::{HirDisplay, Semantics};\n+use ide_db::{famous_defs::FamousDefs, RootDatabase};\n+use syntax::{\n+    ast::{self, AstNode},\n+    Direction, NodeOrToken, SyntaxKind, T,\n+};\n+\n+use crate::{\n+    inlay_hints::hint_iterator, FileId, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n+};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<'_, RootDatabase>,\n+    famous_defs: &FamousDefs<'_, '_>,\n+    config: &InlayHintsConfig,\n+    file_id: FileId,\n+    expr: &ast::Expr,\n+) -> Option<()> {\n+    if !config.chaining_hints {\n+        return None;\n+    }\n+\n+    if matches!(expr, ast::Expr::RecordExpr(_)) {\n+        return None;\n+    }\n+\n+    let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n+    let desc_expr = descended.as_ref().unwrap_or(expr);\n+\n+    let mut tokens = expr\n+        .syntax()\n+        .siblings_with_tokens(Direction::Next)\n+        .filter_map(NodeOrToken::into_token)\n+        .filter(|t| match t.kind() {\n+            SyntaxKind::WHITESPACE if !t.text().contains('\\n') => false,\n+            SyntaxKind::COMMENT => false,\n+            _ => true,\n+        });\n+\n+    // Chaining can be defined as an expression whose next sibling tokens are newline and dot\n+    // Ignoring extra whitespace and comments\n+    let next = tokens.next()?.kind();\n+    if next == SyntaxKind::WHITESPACE {\n+        let mut next_next = tokens.next()?.kind();\n+        while next_next == SyntaxKind::WHITESPACE {\n+            next_next = tokens.next()?.kind();\n+        }\n+        if next_next == T![.] {\n+            let ty = sema.type_of_expr(desc_expr)?.original;\n+            if ty.is_unknown() {\n+                return None;\n+            }\n+            if matches!(expr, ast::Expr::PathExpr(_)) {\n+                if let Some(hir::Adt::Struct(st)) = ty.as_adt() {\n+                    if st.fields(sema.db).is_empty() {\n+                        return None;\n+                    }\n+                }\n+            }\n+            acc.push(InlayHint {\n+                range: expr.syntax().text_range(),\n+                kind: InlayKind::ChainingHint,\n+                label: hint_iterator(sema, &famous_defs, config, &ty)\n+                    .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n+                    .into(),\n+                tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n+            });\n+        }\n+    }\n+    Some(())\n+}"}, {"sha": "a33b64b585467fc50c0c706b6b36377a4f9b8fc5", "filename": "crates/ide/src/inlay_hints/closing_brace.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,116 @@\n+use hir::{HirDisplay, Semantics};\n+use ide_db::{base_db::FileRange, RootDatabase};\n+use syntax::{\n+    ast::{self, AstNode, HasName},\n+    match_ast, SyntaxKind, SyntaxNode, T,\n+};\n+\n+use crate::{\n+    inlay_hints::InlayHintLabelPart, FileId, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind,\n+};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &InlayHintsConfig,\n+    file_id: FileId,\n+    node: SyntaxNode,\n+) -> Option<()> {\n+    let min_lines = config.closing_brace_hints_min_lines?;\n+\n+    let name = |it: ast::Name| it.syntax().text_range();\n+\n+    let mut closing_token;\n+    let (label, name_range) = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n+        closing_token = item_list.r_curly_token()?;\n+\n+        let parent = item_list.syntax().parent()?;\n+        match_ast! {\n+            match parent {\n+                ast::Impl(imp) => {\n+                    let imp = sema.to_def(&imp)?;\n+                    let ty = imp.self_ty(sema.db);\n+                    let trait_ = imp.trait_(sema.db);\n+                    let hint_text = match trait_ {\n+                        Some(tr) => format!(\"impl {} for {}\", tr.name(sema.db), ty.display_truncated(sema.db, config.max_length)),\n+                        None => format!(\"impl {}\", ty.display_truncated(sema.db, config.max_length)),\n+                    };\n+                    (hint_text, None)\n+                },\n+                ast::Trait(tr) => {\n+                    (format!(\"trait {}\", tr.name()?), tr.name().map(name))\n+                },\n+                _ => return None,\n+            }\n+        }\n+    } else if let Some(list) = ast::ItemList::cast(node.clone()) {\n+        closing_token = list.r_curly_token()?;\n+\n+        let module = ast::Module::cast(list.syntax().parent()?)?;\n+        (format!(\"mod {}\", module.name()?), module.name().map(name))\n+    } else if let Some(block) = ast::BlockExpr::cast(node.clone()) {\n+        closing_token = block.stmt_list()?.r_curly_token()?;\n+\n+        let parent = block.syntax().parent()?;\n+        match_ast! {\n+            match parent {\n+                ast::Fn(it) => {\n+                    // FIXME: this could include parameters, but `HirDisplay` prints too much info\n+                    // and doesn't respect the max length either, so the hints end up way too long\n+                    (format!(\"fn {}\", it.name()?), it.name().map(name))\n+                },\n+                ast::Static(it) => (format!(\"static {}\", it.name()?), it.name().map(name)),\n+                ast::Const(it) => {\n+                    if it.underscore_token().is_some() {\n+                        (\"const _\".into(), None)\n+                    } else {\n+                        (format!(\"const {}\", it.name()?), it.name().map(name))\n+                    }\n+                },\n+                _ => return None,\n+            }\n+        }\n+    } else if let Some(mac) = ast::MacroCall::cast(node.clone()) {\n+        let last_token = mac.syntax().last_token()?;\n+        if last_token.kind() != T![;] && last_token.kind() != SyntaxKind::R_CURLY {\n+            return None;\n+        }\n+        closing_token = last_token;\n+\n+        (\n+            format!(\"{}!\", mac.path()?),\n+            mac.path().and_then(|it| it.segment()).map(|it| it.syntax().text_range()),\n+        )\n+    } else {\n+        return None;\n+    };\n+\n+    if let Some(mut next) = closing_token.next_token() {\n+        if next.kind() == T![;] {\n+            if let Some(tok) = next.next_token() {\n+                closing_token = next;\n+                next = tok;\n+            }\n+        }\n+        if !(next.kind() == SyntaxKind::WHITESPACE && next.text().contains('\\n')) {\n+            // Only display the hint if the `}` is the last token on the line\n+            return None;\n+        }\n+    }\n+\n+    let mut lines = 1;\n+    node.text().for_each_chunk(|s| lines += s.matches('\\n').count());\n+    if lines < min_lines {\n+        return None;\n+    }\n+\n+    let linked_location = name_range.map(|range| FileRange { file_id, range });\n+    acc.push(InlayHint {\n+        range: closing_token.text_range(),\n+        kind: InlayKind::ClosingBraceHint,\n+        label: InlayHintLabel { parts: vec![InlayHintLabelPart { text: label, linked_location }] },\n+        tooltip: None, // provided by label part location\n+    });\n+\n+    None\n+}"}, {"sha": "1843c4a80fac2d82a0a1dbcb081a8568d8e0afa6", "filename": "crates/ide/src/inlay_hints/closure_ret.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,50 @@\n+use hir::{HirDisplay, Semantics};\n+use ide_db::{base_db::FileId, famous_defs::FamousDefs, RootDatabase};\n+use syntax::ast::{self, AstNode};\n+\n+use crate::{\n+    inlay_hints::{closure_has_block_body, hint_iterator},\n+    ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n+};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<'_, RootDatabase>,\n+    famous_defs: &FamousDefs<'_, '_>,\n+    config: &InlayHintsConfig,\n+    file_id: FileId,\n+    closure: ast::ClosureExpr,\n+) -> Option<()> {\n+    if config.closure_return_type_hints == ClosureReturnTypeHints::Never {\n+        return None;\n+    }\n+\n+    if closure.ret_type().is_some() {\n+        return None;\n+    }\n+\n+    if !closure_has_block_body(&closure)\n+        && config.closure_return_type_hints == ClosureReturnTypeHints::WithBlock\n+    {\n+        return None;\n+    }\n+\n+    let param_list = closure.param_list()?;\n+\n+    let closure = sema.descend_node_into_attributes(closure.clone()).pop()?;\n+    let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure))?.adjusted();\n+    let callable = ty.as_callable(sema.db)?;\n+    let ty = callable.return_type();\n+    if ty.is_unit() {\n+        return None;\n+    }\n+    acc.push(InlayHint {\n+        range: param_list.syntax().text_range(),\n+        kind: InlayKind::ClosureReturnTypeHint,\n+        label: hint_iterator(sema, &famous_defs, config, &ty)\n+            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n+            .into(),\n+        tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n+    });\n+    Some(())\n+}"}, {"sha": "ae8f4549ddc01a9de004faa5318089c0d360122e", "filename": "crates/ide/src/inlay_hints/fn_lifetime_fn.rs", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,190 @@\n+use ide_db::{syntax_helpers::node_ext::walk_ty, FxHashMap};\n+use itertools::Itertools;\n+use syntax::SmolStr;\n+use syntax::{\n+    ast::{self, AstNode, HasGenericParams, HasName},\n+    SyntaxToken,\n+};\n+\n+use crate::{InlayHint, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    config: &InlayHintsConfig,\n+    func: ast::Fn,\n+) -> Option<()> {\n+    if config.lifetime_elision_hints == LifetimeElisionHints::Never {\n+        return None;\n+    }\n+\n+    let mk_lt_hint = |t: SyntaxToken, label: String| InlayHint {\n+        range: t.text_range(),\n+        kind: InlayKind::LifetimeHint,\n+        label: label.into(),\n+        tooltip: Some(InlayTooltip::String(\"Elided lifetime\".into())),\n+    };\n+\n+    let param_list = func.param_list()?;\n+    let generic_param_list = func.generic_param_list();\n+    let ret_type = func.ret_type();\n+    let self_param = param_list.self_param().filter(|it| it.amp_token().is_some());\n+\n+    let is_elided = |lt: &Option<ast::Lifetime>| match lt {\n+        Some(lt) => matches!(lt.text().as_str(), \"'_\"),\n+        None => true,\n+    };\n+\n+    let potential_lt_refs = {\n+        let mut acc: Vec<_> = vec![];\n+        if let Some(self_param) = &self_param {\n+            let lifetime = self_param.lifetime();\n+            let is_elided = is_elided(&lifetime);\n+            acc.push((None, self_param.amp_token(), lifetime, is_elided));\n+        }\n+        param_list.params().filter_map(|it| Some((it.pat(), it.ty()?))).for_each(|(pat, ty)| {\n+            // FIXME: check path types\n+            walk_ty(&ty, &mut |ty| match ty {\n+                ast::Type::RefType(r) => {\n+                    let lifetime = r.lifetime();\n+                    let is_elided = is_elided(&lifetime);\n+                    acc.push((\n+                        pat.as_ref().and_then(|it| match it {\n+                            ast::Pat::IdentPat(p) => p.name(),\n+                            _ => None,\n+                        }),\n+                        r.amp_token(),\n+                        lifetime,\n+                        is_elided,\n+                    ))\n+                }\n+                _ => (),\n+            })\n+        });\n+        acc\n+    };\n+\n+    // allocate names\n+    let mut gen_idx_name = {\n+        let mut gen = (0u8..).map(|idx| match idx {\n+            idx if idx < 10 => SmolStr::from_iter(['\\'', (idx + 48) as char]),\n+            idx => format!(\"'{idx}\").into(),\n+        });\n+        move || gen.next().unwrap_or_default()\n+    };\n+    let mut allocated_lifetimes = vec![];\n+\n+    let mut used_names: FxHashMap<SmolStr, usize> =\n+        match config.param_names_for_lifetime_elision_hints {\n+            true => generic_param_list\n+                .iter()\n+                .flat_map(|gpl| gpl.lifetime_params())\n+                .filter_map(|param| param.lifetime())\n+                .filter_map(|lt| Some((SmolStr::from(lt.text().as_str().get(1..)?), 0)))\n+                .collect(),\n+            false => Default::default(),\n+        };\n+    {\n+        let mut potential_lt_refs = potential_lt_refs.iter().filter(|&&(.., is_elided)| is_elided);\n+        if let Some(_) = &self_param {\n+            if let Some(_) = potential_lt_refs.next() {\n+                allocated_lifetimes.push(if config.param_names_for_lifetime_elision_hints {\n+                    // self can't be used as a lifetime, so no need to check for collisions\n+                    \"'self\".into()\n+                } else {\n+                    gen_idx_name()\n+                });\n+            }\n+        }\n+        potential_lt_refs.for_each(|(name, ..)| {\n+            let name = match name {\n+                Some(it) if config.param_names_for_lifetime_elision_hints => {\n+                    if let Some(c) = used_names.get_mut(it.text().as_str()) {\n+                        *c += 1;\n+                        SmolStr::from(format!(\"'{text}{c}\", text = it.text().as_str()))\n+                    } else {\n+                        used_names.insert(it.text().as_str().into(), 0);\n+                        SmolStr::from_iter([\"\\'\", it.text().as_str()])\n+                    }\n+                }\n+                _ => gen_idx_name(),\n+            };\n+            allocated_lifetimes.push(name);\n+        });\n+    }\n+\n+    // fetch output lifetime if elision rule applies\n+    let output = match potential_lt_refs.as_slice() {\n+        [(_, _, lifetime, _), ..] if self_param.is_some() || potential_lt_refs.len() == 1 => {\n+            match lifetime {\n+                Some(lt) => match lt.text().as_str() {\n+                    \"'_\" => allocated_lifetimes.get(0).cloned(),\n+                    \"'static\" => None,\n+                    name => Some(name.into()),\n+                },\n+                None => allocated_lifetimes.get(0).cloned(),\n+            }\n+        }\n+        [..] => None,\n+    };\n+\n+    if allocated_lifetimes.is_empty() && output.is_none() {\n+        return None;\n+    }\n+\n+    // apply hints\n+    // apply output if required\n+    let mut is_trivial = true;\n+    if let (Some(output_lt), Some(r)) = (&output, ret_type) {\n+        if let Some(ty) = r.ty() {\n+            walk_ty(&ty, &mut |ty| match ty {\n+                ast::Type::RefType(ty) if ty.lifetime().is_none() => {\n+                    if let Some(amp) = ty.amp_token() {\n+                        is_trivial = false;\n+                        acc.push(mk_lt_hint(amp, output_lt.to_string()));\n+                    }\n+                }\n+                _ => (),\n+            })\n+        }\n+    }\n+\n+    if config.lifetime_elision_hints == LifetimeElisionHints::SkipTrivial && is_trivial {\n+        return None;\n+    }\n+\n+    let mut a = allocated_lifetimes.iter();\n+    for (_, amp_token, _, is_elided) in potential_lt_refs {\n+        if is_elided {\n+            let t = amp_token?;\n+            let lt = a.next()?;\n+            acc.push(mk_lt_hint(t, lt.to_string()));\n+        }\n+    }\n+\n+    // generate generic param list things\n+    match (generic_param_list, allocated_lifetimes.as_slice()) {\n+        (_, []) => (),\n+        (Some(gpl), allocated_lifetimes) => {\n+            let angle_tok = gpl.l_angle_token()?;\n+            let is_empty = gpl.generic_params().next().is_none();\n+            acc.push(InlayHint {\n+                range: angle_tok.text_range(),\n+                kind: InlayKind::LifetimeHint,\n+                label: format!(\n+                    \"{}{}\",\n+                    allocated_lifetimes.iter().format(\", \"),\n+                    if is_empty { \"\" } else { \", \" }\n+                )\n+                .into(),\n+                tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n+            });\n+        }\n+        (None, allocated_lifetimes) => acc.push(InlayHint {\n+            range: func.name()?.syntax().text_range(),\n+            kind: InlayKind::GenericParamListHint,\n+            label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n+            tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n+        }),\n+    }\n+    Some(())\n+}"}, {"sha": "8e0dbe88dfd4258c98be789cf4292770782ccbe0", "filename": "crates/ide/src/inlay_hints/implicit_static.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,39 @@\n+use either::Either;\n+use syntax::{\n+    ast::{self, AstNode},\n+    SyntaxKind,\n+};\n+\n+use crate::{InlayHint, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    config: &InlayHintsConfig,\n+    statik_or_const: Either<ast::Static, ast::Const>,\n+) -> Option<()> {\n+    if config.lifetime_elision_hints != LifetimeElisionHints::Always {\n+        return None;\n+    }\n+\n+    if let Either::Right(it) = &statik_or_const {\n+        if ast::AssocItemList::can_cast(\n+            it.syntax().parent().map_or(SyntaxKind::EOF, |it| it.kind()),\n+        ) {\n+            return None;\n+        }\n+    }\n+\n+    if let Some(ast::Type::RefType(ty)) = statik_or_const.either(|it| it.ty(), |it| it.ty()) {\n+        if ty.lifetime().is_none() {\n+            let t = ty.amp_token()?;\n+            acc.push(InlayHint {\n+                range: t.text_range(),\n+                kind: InlayKind::LifetimeHint,\n+                label: \"'static\".to_owned().into(),\n+                tooltip: Some(InlayTooltip::String(\"Elided static lifetime\".into())),\n+            });\n+        }\n+    }\n+\n+    Some(())\n+}"}, {"sha": "2675e7e80fced107c16dd001d6c514cd8765a824", "filename": "crates/ide/src/inlay_hints/param_name.rs", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/rust-lang/rust/blob/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191cfba9d26137233d8fef91dcf5d32ef1a1841f/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs?ref=191cfba9d26137233d8fef91dcf5d32ef1a1841f", "patch": "@@ -0,0 +1,237 @@\n+use either::Either;\n+use hir::{Callable, Semantics};\n+use ide_db::{base_db::FileRange, RootDatabase};\n+\n+use stdx::to_lower_snake_case;\n+use syntax::ast::{self, AstNode, HasArgList, HasName, UnaryOp};\n+\n+use crate::{InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &InlayHintsConfig,\n+    expr: ast::Expr,\n+) -> Option<()> {\n+    if !config.parameter_hints {\n+        return None;\n+    }\n+\n+    let (callable, arg_list) = get_callable(sema, &expr)?;\n+    let hints = callable\n+        .params(sema.db)\n+        .into_iter()\n+        .zip(arg_list.args())\n+        .filter_map(|((param, _ty), arg)| {\n+            // Only annotate hints for expressions that exist in the original file\n+            let range = sema.original_range_opt(arg.syntax())?;\n+            let (param_name, name_syntax) = match param.as_ref()? {\n+                Either::Left(pat) => (\"self\".to_string(), pat.name()),\n+                Either::Right(pat) => match pat {\n+                    ast::Pat::IdentPat(it) => (it.name()?.to_string(), it.name()),\n+                    _ => return None,\n+                },\n+            };\n+            Some((name_syntax, param_name, arg, range))\n+        })\n+        .filter(|(_, param_name, arg, _)| {\n+            !should_hide_param_name_hint(sema, &callable, param_name, arg)\n+        })\n+        .map(|(param, param_name, _, FileRange { range, .. })| {\n+            let mut tooltip = None;\n+            if let Some(name) = param {\n+                if let hir::CallableKind::Function(f) = callable.kind() {\n+                    // assert the file is cached so we can map out of macros\n+                    if let Some(_) = sema.source(f) {\n+                        tooltip = sema.original_range_opt(name.syntax());\n+                    }\n+                }\n+            }\n+\n+            InlayHint {\n+                range,\n+                kind: InlayKind::ParameterHint,\n+                label: param_name.into(),\n+                tooltip: tooltip.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n+            }\n+        });\n+\n+    acc.extend(hints);\n+    Some(())\n+}\n+\n+fn get_callable(\n+    sema: &Semantics<'_, RootDatabase>,\n+    expr: &ast::Expr,\n+) -> Option<(hir::Callable, ast::ArgList)> {\n+    match expr {\n+        ast::Expr::CallExpr(expr) => {\n+            let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n+            let expr = descended.as_ref().unwrap_or(expr);\n+            sema.type_of_expr(&expr.expr()?)?.original.as_callable(sema.db).zip(expr.arg_list())\n+        }\n+        ast::Expr::MethodCallExpr(expr) => {\n+            let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n+            let expr = descended.as_ref().unwrap_or(expr);\n+            sema.resolve_method_call_as_callable(expr).zip(expr.arg_list())\n+        }\n+        _ => None,\n+    }\n+}\n+\n+fn should_hide_param_name_hint(\n+    sema: &Semantics<'_, RootDatabase>,\n+    callable: &hir::Callable,\n+    param_name: &str,\n+    argument: &ast::Expr,\n+) -> bool {\n+    // These are to be tested in the `parameter_hint_heuristics` test\n+    // hide when:\n+    // - the parameter name is a suffix of the function's name\n+    // - the argument is a qualified constructing or call expression where the qualifier is an ADT\n+    // - exact argument<->parameter match(ignoring leading underscore) or parameter is a prefix/suffix\n+    //   of argument with _ splitting it off\n+    // - param starts with `ra_fixture`\n+    // - param is a well known name in a unary function\n+\n+    let param_name = param_name.trim_start_matches('_');\n+    if param_name.is_empty() {\n+        return true;\n+    }\n+\n+    if matches!(argument, ast::Expr::PrefixExpr(prefix) if prefix.op_kind() == Some(UnaryOp::Not)) {\n+        return false;\n+    }\n+\n+    let fn_name = match callable.kind() {\n+        hir::CallableKind::Function(it) => Some(it.name(sema.db).to_smol_str()),\n+        _ => None,\n+    };\n+    let fn_name = fn_name.as_deref();\n+    is_param_name_suffix_of_fn_name(param_name, callable, fn_name)\n+        || is_argument_similar_to_param_name(argument, param_name)\n+        || param_name.starts_with(\"ra_fixture\")\n+        || (callable.n_params() == 1 && is_obvious_param(param_name))\n+        || is_adt_constructor_similar_to_param_name(sema, argument, param_name)\n+}\n+\n+/// Hide the parameter name of a unary function if it is a `_` - prefixed suffix of the function's name, or equal.\n+///\n+/// `fn strip_suffix(suffix)` will be hidden.\n+/// `fn stripsuffix(suffix)` will not be hidden.\n+fn is_param_name_suffix_of_fn_name(\n+    param_name: &str,\n+    callable: &Callable,\n+    fn_name: Option<&str>,\n+) -> bool {\n+    match (callable.n_params(), fn_name) {\n+        (1, Some(function)) => {\n+            function == param_name\n+                || function\n+                    .len()\n+                    .checked_sub(param_name.len())\n+                    .and_then(|at| function.is_char_boundary(at).then(|| function.split_at(at)))\n+                    .map_or(false, |(prefix, suffix)| {\n+                        suffix.eq_ignore_ascii_case(param_name) && prefix.ends_with('_')\n+                    })\n+        }\n+        _ => false,\n+    }\n+}\n+\n+fn is_argument_similar_to_param_name(argument: &ast::Expr, param_name: &str) -> bool {\n+    // check whether param_name and argument are the same or\n+    // whether param_name is a prefix/suffix of argument(split at `_`)\n+    let argument = match get_string_representation(argument) {\n+        Some(argument) => argument,\n+        None => return false,\n+    };\n+\n+    // std is honestly too panic happy...\n+    let str_split_at = |str: &str, at| str.is_char_boundary(at).then(|| argument.split_at(at));\n+\n+    let param_name = param_name.trim_start_matches('_');\n+    let argument = argument.trim_start_matches('_');\n+\n+    match str_split_at(argument, param_name.len()) {\n+        Some((prefix, rest)) if prefix.eq_ignore_ascii_case(param_name) => {\n+            return rest.is_empty() || rest.starts_with('_');\n+        }\n+        _ => (),\n+    }\n+    match argument.len().checked_sub(param_name.len()).and_then(|at| str_split_at(argument, at)) {\n+        Some((rest, suffix)) if param_name.eq_ignore_ascii_case(suffix) => {\n+            return rest.is_empty() || rest.ends_with('_');\n+        }\n+        _ => (),\n+    }\n+    false\n+}\n+\n+fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n+    match expr {\n+        ast::Expr::MethodCallExpr(method_call_expr) => {\n+            let name_ref = method_call_expr.name_ref()?;\n+            match name_ref.text().as_str() {\n+                \"clone\" | \"as_ref\" => method_call_expr.receiver().map(|rec| rec.to_string()),\n+                name_ref => Some(name_ref.to_owned()),\n+            }\n+        }\n+        ast::Expr::MacroExpr(macro_expr) => {\n+            Some(macro_expr.macro_call()?.path()?.segment()?.to_string())\n+        }\n+        ast::Expr::FieldExpr(field_expr) => Some(field_expr.name_ref()?.to_string()),\n+        ast::Expr::PathExpr(path_expr) => Some(path_expr.path()?.segment()?.to_string()),\n+        ast::Expr::PrefixExpr(prefix_expr) => get_string_representation(&prefix_expr.expr()?),\n+        ast::Expr::RefExpr(ref_expr) => get_string_representation(&ref_expr.expr()?),\n+        ast::Expr::CastExpr(cast_expr) => get_string_representation(&cast_expr.expr()?),\n+        _ => None,\n+    }\n+}\n+\n+fn is_obvious_param(param_name: &str) -> bool {\n+    // avoid displaying hints for common functions like map, filter, etc.\n+    // or other obvious words used in std\n+    let is_obvious_param_name =\n+        matches!(param_name, \"predicate\" | \"value\" | \"pat\" | \"rhs\" | \"other\");\n+    param_name.len() == 1 || is_obvious_param_name\n+}\n+\n+fn is_adt_constructor_similar_to_param_name(\n+    sema: &Semantics<'_, RootDatabase>,\n+    argument: &ast::Expr,\n+    param_name: &str,\n+) -> bool {\n+    let path = match argument {\n+        ast::Expr::CallExpr(c) => c.expr().and_then(|e| match e {\n+            ast::Expr::PathExpr(p) => p.path(),\n+            _ => None,\n+        }),\n+        ast::Expr::PathExpr(p) => p.path(),\n+        ast::Expr::RecordExpr(r) => r.path(),\n+        _ => return false,\n+    };\n+    let path = match path {\n+        Some(it) => it,\n+        None => return false,\n+    };\n+    (|| match sema.resolve_path(&path)? {\n+        hir::PathResolution::Def(hir::ModuleDef::Adt(_)) => {\n+            Some(to_lower_snake_case(&path.segment()?.name_ref()?.text()) == param_name)\n+        }\n+        hir::PathResolution::Def(hir::ModuleDef::Function(_) | hir::ModuleDef::Variant(_)) => {\n+            if to_lower_snake_case(&path.segment()?.name_ref()?.text()) == param_name {\n+                return Some(true);\n+            }\n+            let qual = path.qualifier()?;\n+            match sema.resolve_path(&qual)? {\n+                hir::PathResolution::Def(hir::ModuleDef::Adt(_)) => {\n+                    Some(to_lower_snake_case(&qual.segment()?.name_ref()?.text()) == param_name)\n+                }\n+                _ => None,\n+            }\n+        }\n+        _ => None,\n+    })()\n+    .unwrap_or(false)\n+}"}]}