{"sha": "3c68f646e957065fe5fabd4af850abaa8c4ee0af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNjhmNjQ2ZTk1NzA2NWZlNWZhYmQ0YWY4NTBhYmFhOGM0ZWUwYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-18T18:06:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-18T18:06:30Z"}, "message": "Auto merge of #29886 - michaelwoerister:mir-erase-regions, r=nikomatsakis\n\nThis change adds a `MirPass` erasing all early-bound regions from MIR, right before storing it in the MIR map. I've added some assertions at neuralgic points in `trans::mir` doing cheap checks whether region have actually been erased.\n\nHere are some assumptions that I worked under:\n- AdtDef references stay untouched. It's the `Substs` accompanying them that need to be handled (e.g. in `AggregateKind::Adt`).\n- We can't really get rid of late-bound regions at this point because there is no version `BareFnTy` (for example) that comes without one. These still have to be handled on demand in trans.\n\nAre this assumptions right?\n\nr? @nikomatsakis", "tree": {"sha": "43913dee13ff252ec221ccc871849659872a720c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43913dee13ff252ec221ccc871849659872a720c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c68f646e957065fe5fabd4af850abaa8c4ee0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c68f646e957065fe5fabd4af850abaa8c4ee0af", "html_url": "https://github.com/rust-lang/rust/commit/3c68f646e957065fe5fabd4af850abaa8c4ee0af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c68f646e957065fe5fabd4af850abaa8c4ee0af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a65692a2cef74246dd0dab7f534b33936b748a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a65692a2cef74246dd0dab7f534b33936b748a", "html_url": "https://github.com/rust-lang/rust/commit/64a65692a2cef74246dd0dab7f534b33936b748a"}, {"sha": "c533902285787c3cd3abd911103d8d0280c3a011", "url": "https://api.github.com/repos/rust-lang/rust/commits/c533902285787c3cd3abd911103d8d0280c3a011", "html_url": "https://github.com/rust-lang/rust/commit/c533902285787c3cd3abd911103d8d0280c3a011"}], "stats": {"total": 268, "additions": 257, "deletions": 11}, "files": [{"sha": "c284ce5551a8cc78c8c720a318896ceab9b4c3c4", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3c68f646e957065fe5fabd4af850abaa8c4ee0af", "patch": "@@ -167,7 +167,7 @@ pub fn compile_input(sess: Session,\n                                             tcx.print_debug_stats();\n                                         }\n                                         let trans = phase_4_translate_to_llvm(tcx,\n-                                                                              &mir_map,\n+                                                                              mir_map,\n                                                                               analysis);\n \n                                         if log_enabled!(::log::INFO) {\n@@ -849,7 +849,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n pub fn phase_4_translate_to_llvm<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                       mir_map: &MirMap<'tcx>,\n+                                       mut mir_map: MirMap<'tcx>,\n                                        analysis: ty::CrateAnalysis)\n                                        -> trans::CrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n@@ -858,10 +858,14 @@ pub fn phase_4_translate_to_llvm<'tcx>(tcx: &ty::ctxt<'tcx>,\n          \"resolving dependency formats\",\n          || dependency_format::calculate(&tcx.sess));\n \n+    time(time_passes,\n+         \"erasing regions from MIR\",\n+         || mir::transform::erase_regions::erase_regions(tcx, &mut mir_map));\n+\n     // Option dance to work around the lack of stack once closures.\n     time(time_passes,\n          \"translation\",\n-         move || trans::trans_crate(tcx, mir_map, analysis))\n+         move || trans::trans_crate(tcx, &mir_map, analysis))\n }\n \n /// Run LLVM itself, producing a bitcode file, assembly file or object file"}, {"sha": "e156fbf004f177a7970411c97301ef7ada500ff4", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "added", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=3c68f646e957065fe5fabd4af850abaa8c4ee0af", "patch": "@@ -0,0 +1,234 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This pass erases all early-bound regions from the types occuring in the MIR.\n+//! We want to do this once just before trans, so trans does not have to take\n+//! care erasing regions all over the place.\n+\n+use repr::*;\n+use rustc::middle::ty;\n+use transform::MirPass;\n+use mir_map::MirMap;\n+\n+pub fn erase_regions<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &mut MirMap<'tcx>) {\n+    let mut eraser = EraseRegions::new(tcx);\n+\n+    for mir in mir_map.iter_mut().map(|(_, v)| v) {\n+        eraser.run_on_mir(mir);\n+    }\n+}\n+\n+pub struct EraseRegions<'a, 'tcx: 'a> {\n+    tcx: &'a ty::ctxt<'tcx>,\n+}\n+\n+impl<'a, 'tcx> MirPass<'tcx> for EraseRegions<'a, 'tcx> {\n+\n+    fn run_on_mir(&mut self, mir: &mut Mir<'tcx>) {\n+\n+        for basic_block in &mut mir.basic_blocks {\n+            self.erase_regions_basic_block(basic_block);\n+        }\n+\n+        self.erase_regions_return_ty(&mut mir.return_ty);\n+\n+        self.erase_regions_tys(mir.var_decls.iter_mut().map(|d| &mut d.ty));\n+        self.erase_regions_tys(mir.arg_decls.iter_mut().map(|d| &mut d.ty));\n+        self.erase_regions_tys(mir.temp_decls.iter_mut().map(|d| &mut d.ty));\n+    }\n+}\n+\n+impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n+\n+    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> EraseRegions<'a, 'tcx> {\n+        EraseRegions {\n+            tcx: tcx\n+        }\n+    }\n+\n+    fn erase_regions_basic_block(&mut self,\n+                                 basic_block: &mut BasicBlockData<'tcx>) {\n+        for statement in &mut basic_block.statements {\n+            self.erase_regions_statement(statement);\n+        }\n+\n+        self.erase_regions_terminator(&mut basic_block.terminator);\n+    }\n+\n+    fn erase_regions_statement(&mut self,\n+                               statement: &mut Statement<'tcx>) {\n+        match statement.kind {\n+            StatementKind::Assign(ref mut lvalue, ref mut rvalue) => {\n+                self.erase_regions_lvalue(lvalue);\n+                self.erase_regions_rvalue(rvalue);\n+            }\n+            StatementKind::Drop(_, ref mut lvalue) => {\n+                self.erase_regions_lvalue(lvalue);\n+            }\n+        }\n+    }\n+\n+    fn erase_regions_terminator(&mut self,\n+                                terminator: &mut Terminator<'tcx>) {\n+        match *terminator {\n+            Terminator::Goto { .. } |\n+            Terminator::Diverge |\n+            Terminator::Return |\n+            Terminator::Panic { .. } => {\n+                /* nothing to do */\n+            }\n+            Terminator::If { ref mut cond, .. } => {\n+                self.erase_regions_operand(cond);\n+            }\n+            Terminator::Switch { ref mut discr, .. } => {\n+                self.erase_regions_lvalue(discr);\n+            }\n+            Terminator::SwitchInt {\n+                ref mut discr,\n+                ref mut switch_ty,\n+                ..\n+            } => {\n+                self.erase_regions_lvalue(discr);\n+                *switch_ty = self.tcx.erase_regions(switch_ty);\n+            },\n+            Terminator::Call {\n+                data: CallData {\n+                    ref mut destination,\n+                    ref mut func,\n+                    ref mut args\n+                },\n+                ..\n+            } => {\n+                self.erase_regions_lvalue(destination);\n+                self.erase_regions_operand(func);\n+                for arg in &mut *args {\n+                    self.erase_regions_operand(arg);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn erase_regions_operand(&mut self, operand: &mut Operand<'tcx>) {\n+        match *operand {\n+            Operand::Consume(ref mut lvalue) => {\n+                self.erase_regions_lvalue(lvalue);\n+            }\n+            Operand::Constant(ref mut constant) => {\n+                self.erase_regions_constant(constant);\n+            }\n+        }\n+    }\n+\n+    fn erase_regions_lvalue(&mut self, lvalue: &mut Lvalue<'tcx>) {\n+        match *lvalue {\n+            Lvalue::Var(_)        |\n+            Lvalue::Temp(_)       |\n+            Lvalue::Arg(_)        |\n+            Lvalue::Static(_)     |\n+            Lvalue::ReturnPointer => {}\n+            Lvalue::Projection(ref mut lvalue_projection) => {\n+                self.erase_regions_lvalue(&mut lvalue_projection.base);\n+                match lvalue_projection.elem {\n+                    ProjectionElem::Deref              |\n+                    ProjectionElem::Field(_)           |\n+                    ProjectionElem::Downcast(..)       |\n+                    ProjectionElem::ConstantIndex {..} => { /* nothing to do */ }\n+                    ProjectionElem::Index(ref mut index) => {\n+                        self.erase_regions_operand(index);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn erase_regions_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>) {\n+        match *rvalue {\n+            Rvalue::Use(ref mut operand) => {\n+                self.erase_regions_operand(operand)\n+            }\n+            Rvalue::Repeat(ref mut operand, ref mut constant) => {\n+                self.erase_regions_operand(operand);\n+                self.erase_regions_constant(constant);\n+            }\n+            Rvalue::Ref(ref mut region, _, ref mut lvalue) => {\n+                *region = ty::ReStatic;\n+                self.erase_regions_lvalue(lvalue);\n+            }\n+            Rvalue::Len(ref mut lvalue) => self.erase_regions_lvalue(lvalue),\n+            Rvalue::Cast(_, ref mut operand, ref mut ty) => {\n+                self.erase_regions_operand(operand);\n+                *ty = self.tcx.erase_regions(ty);\n+            }\n+            Rvalue::BinaryOp(_, ref mut operand1, ref mut operand2) => {\n+                self.erase_regions_operand(operand1);\n+                self.erase_regions_operand(operand2);\n+            }\n+            Rvalue::UnaryOp(_, ref mut operand) => {\n+                self.erase_regions_operand(operand);\n+            }\n+            Rvalue::Box(ref mut ty) => *ty = self.tcx.erase_regions(ty),\n+            Rvalue::Aggregate(ref mut aggregate_kind, ref mut operands) => {\n+                match *aggregate_kind {\n+                    AggregateKind::Vec   |\n+                    AggregateKind::Tuple => {},\n+                    AggregateKind::Adt(_, _, ref mut substs) => {\n+                        let erased = self.tcx.erase_regions(*substs);\n+                        *substs = self.tcx.mk_substs(erased);\n+                    }\n+                    AggregateKind::Closure(def_id, ref mut closure_substs) => {\n+                        let cloned = Box::new(closure_substs.clone());\n+                        let ty = self.tcx.mk_closure_from_closure_substs(def_id,\n+                                                                         cloned);\n+                        let erased = self.tcx.erase_regions(&ty);\n+                        *closure_substs = match erased.sty {\n+                            ty::TyClosure(_, ref closure_substs) => &*closure_substs,\n+                            _ => unreachable!()\n+                        };\n+                    }\n+                }\n+                for operand in &mut *operands {\n+                    self.erase_regions_operand(operand);\n+                }\n+            }\n+            Rvalue::Slice { ref mut input, .. } => {\n+                self.erase_regions_lvalue(input);\n+            }\n+            Rvalue::InlineAsm(_) => {},\n+        }\n+    }\n+\n+    fn erase_regions_constant(&mut self, constant: &mut Constant<'tcx>) {\n+        constant.ty = self.tcx.erase_regions(&constant.ty);\n+        match constant.literal {\n+            Literal::Item { ref mut substs, .. } => {\n+                *substs = self.tcx.mk_substs(self.tcx.erase_regions(substs));\n+            }\n+            Literal::Value { .. } => { /* nothing to do */ }\n+        }\n+    }\n+\n+    fn erase_regions_return_ty(&mut self, fn_output: &mut ty::FnOutput<'tcx>) {\n+        match *fn_output {\n+            ty::FnConverging(ref mut ty) => {\n+                *ty = self.tcx.erase_regions(ty);\n+            },\n+            ty::FnDiverging => {}\n+        }\n+    }\n+\n+    fn erase_regions_tys<'b, T>(&mut self, tys: T)\n+        where T: Iterator<Item = &'b mut ty::Ty<'tcx>>,\n+              'tcx: 'b\n+    {\n+        for ty in tys {\n+            *ty = self.tcx.erase_regions(ty);\n+        }\n+    }\n+}"}, {"sha": "9bec934143fa5350749393890924bf8e25ccbdfe", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=3c68f646e957065fe5fabd4af850abaa8c4ee0af", "patch": "@@ -9,10 +9,11 @@\n // except according to those terms.\n \n pub mod simplify_cfg;\n+pub mod erase_regions;\n mod util;\n \n use repr::Mir;\n \n-pub trait MirPass {\n-    fn run_on_mir(&mut self, mir: &mut Mir);\n+pub trait MirPass<'tcx> {\n+    fn run_on_mir(&mut self, mir: &mut Mir<'tcx>);\n }"}, {"sha": "ee9dcbf12037ce7daf6b50135479050013640018", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=3c68f646e957065fe5fabd4af850abaa8c4ee0af", "patch": "@@ -120,8 +120,8 @@ impl SimplifyCfg {\n     }\n }\n \n-impl MirPass for SimplifyCfg {\n-    fn run_on_mir(&mut self, mir: &mut Mir) {\n+impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n+    fn run_on_mir(&mut self, mir: &mut Mir<'tcx>) {\n         let mut changed = true;\n         while changed {\n             changed = self.simplify_branches(mir);"}, {"sha": "9af5bb433185042ce86b315c0513fe8a748a33da", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=3c68f646e957065fe5fabd4af850abaa8c4ee0af", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::ty::Ty;\n+use middle::ty::{Ty, HasTypeFlags};\n use rustc::middle::const_eval::ConstVal;\n use rustc_mir::repr as mir;\n use trans::consts::{self, TrueConst};\n@@ -63,6 +63,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 unimplemented!()\n             }\n         };\n+\n+        assert!(!ty.has_erasable_regions());\n+\n         OperandRef {\n             ty: ty,\n             val: val"}, {"sha": "1f39a2aa04870db8be0382779f95d1378f085bd9", "filename": "src/librustc_trans/trans/mir/lvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs?ref=3c68f646e957065fe5fabd4af850abaa8c4ee0af", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty::{self, Ty, HasTypeFlags};\n use rustc_mir::repr as mir;\n use rustc_mir::tcx::LvalueTy;\n use trans::adt;\n@@ -45,6 +45,7 @@ impl<'tcx> LvalueRef<'tcx> {\n                         name: &str)\n                         -> LvalueRef<'tcx>\n     {\n+        assert!(!ty.has_erasable_regions());\n         let lltemp = base::alloc_ty(bcx, ty, name);\n         LvalueRef::new_sized(lltemp, LvalueTy::from_ty(ty))\n     }"}, {"sha": "75d7b574382b30c6b4ca9f8098a16546c19646d9", "filename": "src/librustc_trans/trans/mir/operand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Foperand.rs?ref=3c68f646e957065fe5fabd4af850abaa8c4ee0af", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::middle::ty::Ty;\n+use rustc::middle::ty::{Ty, HasTypeFlags};\n use rustc_mir::repr as mir;\n use trans::base;\n use trans::common::{self, Block};\n@@ -122,6 +122,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     }\n                     datum::ByRef => OperandValue::Ref(tr_lvalue.llval)\n                 };\n+\n+                assert!(!ty.has_erasable_regions());\n+\n                 OperandRef {\n                     val: val,\n                     ty: ty"}, {"sha": "8ca64e866a044e2018f0f0f095063bb76b9f014f", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c68f646e957065fe5fabd4af850abaa8c4ee0af/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=3c68f646e957065fe5fabd4af850abaa8c4ee0af", "patch": "@@ -231,7 +231,7 @@ fn compile_program(input: &str, sysroot: PathBuf)\n         driver::phase_3_run_analysis_passes(\n             &sess, ast_map, &arenas, &id, MakeGlobMap::No, |tcx, mir_map, analysis| {\n \n-            let trans = driver::phase_4_translate_to_llvm(tcx, &mir_map, analysis);\n+            let trans = driver::phase_4_translate_to_llvm(tcx, mir_map, analysis);\n \n             let crates = tcx.sess.cstore.get_used_crates(RequireDynamic);\n "}]}