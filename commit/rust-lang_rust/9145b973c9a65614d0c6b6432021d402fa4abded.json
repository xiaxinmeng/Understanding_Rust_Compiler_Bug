{"sha": "9145b973c9a65614d0c6b6432021d402fa4abded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNDViOTczYzlhNjU2MTRkMGM2YjY0MzIwMjFkNDAyZmE0YWJkZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-08T18:53:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-08T18:53:58Z"}, "message": "Merge #6766\n\n6766: Add client install support for `code-exploration` builds. r=lnicola a=derdaele\n\nVSCode has a feature to install the command to the PATH. \r\n<img width=\"640\" alt=\"Capture d\u2019e\u0301cran 2020-12-08 a\u0300 19 25 43\" src=\"https://user-images.githubusercontent.com/16373039/101525141-2e013300-398b-11eb-8d07-60a92ae9587c.png\">\r\n\r\n`code-exploration` is the command name for the ARM64 experimental build. As of today, this is the only build running natively on Apple Silicon.\r\n\r\nSee _ARM64_ Experimental in https://code.visualstudio.com/insiders/#osx.\r\n\r\nThe `-exploration` prefix seems pretty undocumented, my understanding of it is that it is an insider-like version that uses a different electron version (in this case, maybe the election version that was recently ported to Apple Silicon?).\n\nCo-authored-by: J\u00e9r\u00e9my <jeremy.derdaele@gmail.com>", "tree": {"sha": "bcf9bfd2ff5dc0b8fb8d2476e6d4a849c01269ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf9bfd2ff5dc0b8fb8d2476e6d4a849c01269ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9145b973c9a65614d0c6b6432021d402fa4abded", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfz8vGCRBK7hj4Ov3rIwAAdHIIAJ87yiFS+T9halTCcgLomccm\nDbnkd5mebgo5XsEfgY5bPpW1/kw5t1JsKaWjBpQEzp5Mlo4NG6O21A6o25n7NWif\n4Rvx2NckvFZJMtZ7zBz3ycSaXvoKfx8TbfGlmZcMQREzBSOcpghs+yx8L6t7SpS0\nEzSQimpZVHRy8fz+NfSeD/Ui/+GPZN5eLxBoeyTdgZIO1qIP5r3DL7Y8RXSX8otY\nfe2/GjDuwk/TMzsZuWfkdB6zfWuH9l/UIiEmFwa5SCa7vXNHaTt2n7pqpnwpz9mM\n7hcbd0IR7tSoscESXsGOdv/jrUoHQM/PR6CIfao5MpFgOGlDEa85ZIwm76hNDUc=\n=WaO6\n-----END PGP SIGNATURE-----\n", "payload": "tree bcf9bfd2ff5dc0b8fb8d2476e6d4a849c01269ee\nparent 70fa57f8d30c80927465de9a1b8501d7a2ee4925\nparent 7cf2c0d46ffc68ccc08e50866df0a0e92de4ff1c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607453638 +0000\ncommitter GitHub <noreply@github.com> 1607453638 +0000\n\nMerge #6766\n\n6766: Add client install support for `code-exploration` builds. r=lnicola a=derdaele\n\nVSCode has a feature to install the command to the PATH. \r\n<img width=\"640\" alt=\"Capture d\u2019e\u0301cran 2020-12-08 a\u0300 19 25 43\" src=\"https://user-images.githubusercontent.com/16373039/101525141-2e013300-398b-11eb-8d07-60a92ae9587c.png\">\r\n\r\n`code-exploration` is the command name for the ARM64 experimental build. As of today, this is the only build running natively on Apple Silicon.\r\n\r\nSee _ARM64_ Experimental in https://code.visualstudio.com/insiders/#osx.\r\n\r\nThe `-exploration` prefix seems pretty undocumented, my understanding of it is that it is an insider-like version that uses a different electron version (in this case, maybe the election version that was recently ported to Apple Silicon?).\n\nCo-authored-by: J\u00e9r\u00e9my <jeremy.derdaele@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9145b973c9a65614d0c6b6432021d402fa4abded", "html_url": "https://github.com/rust-lang/rust/commit/9145b973c9a65614d0c6b6432021d402fa4abded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9145b973c9a65614d0c6b6432021d402fa4abded/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70fa57f8d30c80927465de9a1b8501d7a2ee4925", "url": "https://api.github.com/repos/rust-lang/rust/commits/70fa57f8d30c80927465de9a1b8501d7a2ee4925", "html_url": "https://github.com/rust-lang/rust/commit/70fa57f8d30c80927465de9a1b8501d7a2ee4925"}, {"sha": "7cf2c0d46ffc68ccc08e50866df0a0e92de4ff1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf2c0d46ffc68ccc08e50866df0a0e92de4ff1c", "html_url": "https://github.com/rust-lang/rust/commit/7cf2c0d46ffc68ccc08e50866df0a0e92de4ff1c"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "12962bcfa1ff24408c7f54f11d148945573deafe", "filename": "xtask/src/install.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9145b973c9a65614d0c6b6432021d402fa4abded/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9145b973c9a65614d0c6b6432021d402fa4abded/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=9145b973c9a65614d0c6b6432021d402fa4abded", "patch": "@@ -16,6 +16,7 @@ pub struct InstallCmd {\n #[derive(Clone, Copy)]\n pub enum ClientOpt {\n     VsCode,\n+    VsCodeExploration,\n     VsCodeInsiders,\n     VsCodium,\n     VsCodeOss,\n@@ -26,10 +27,11 @@ impl ClientOpt {\n     pub const fn as_cmds(&self) -> &'static [&'static str] {\n         match self {\n             ClientOpt::VsCode => &[\"code\"],\n+            ClientOpt::VsCodeExploration => &[\"code-exploration\"],\n             ClientOpt::VsCodeInsiders => &[\"code-insiders\"],\n             ClientOpt::VsCodium => &[\"codium\"],\n             ClientOpt::VsCodeOss => &[\"code-oss\"],\n-            ClientOpt::Any => &[\"code\", \"code-insiders\", \"codium\", \"code-oss\"],\n+            ClientOpt::Any => &[\"code\", \"code-exploration\", \"code-insiders\", \"codium\", \"code-oss\"],\n         }\n     }\n }\n@@ -44,11 +46,17 @@ impl std::str::FromStr for ClientOpt {\n     type Err = anyhow::Error;\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        [ClientOpt::VsCode, ClientOpt::VsCodeInsiders, ClientOpt::VsCodium, ClientOpt::VsCodeOss]\n-            .iter()\n-            .copied()\n-            .find(|c| [s] == c.as_cmds())\n-            .ok_or_else(|| anyhow::format_err!(\"no such client\"))\n+        [\n+            ClientOpt::VsCode,\n+            ClientOpt::VsCodeExploration,\n+            ClientOpt::VsCodeInsiders,\n+            ClientOpt::VsCodium,\n+            ClientOpt::VsCodeOss,\n+        ]\n+        .iter()\n+        .copied()\n+        .find(|c| [s] == c.as_cmds())\n+        .ok_or_else(|| anyhow::format_err!(\"no such client\"))\n     }\n }\n "}]}