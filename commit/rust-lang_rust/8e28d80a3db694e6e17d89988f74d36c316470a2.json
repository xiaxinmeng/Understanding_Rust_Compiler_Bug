{"sha": "8e28d80a3db694e6e17d89988f74d36c316470a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMjhkODBhM2RiNjk0ZTZlMTdkODk5ODhmNzRkMzZjMzE2NDcwYTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-19T18:11:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-24T10:25:11Z"}, "message": "Better use of CodegenResults::modules", "tree": {"sha": "3fbb99fe6f9fdc8de4c84a9f870451f809404c26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fbb99fe6f9fdc8de4c84a9f870451f809404c26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e28d80a3db694e6e17d89988f74d36c316470a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e28d80a3db694e6e17d89988f74d36c316470a2", "html_url": "https://github.com/rust-lang/rust/commit/8e28d80a3db694e6e17d89988f74d36c316470a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e28d80a3db694e6e17d89988f74d36c316470a2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ae9a4dbb79758a2e3d16ff0854301ce5846ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ae9a4dbb79758a2e3d16ff0854301ce5846ae1", "html_url": "https://github.com/rust-lang/rust/commit/f4ae9a4dbb79758a2e3d16ff0854301ce5846ae1"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "625256b0f533f93191b0ec86c08047b36cb5846f", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e28d80a3db694e6e17d89988f74d36c316470a2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28d80a3db694e6e17d89988f74d36c316470a2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8e28d80a3db694e6e17d89988f74d36c316470a2", "patch": "@@ -120,7 +120,6 @@ impl<'tcx> Caches<'tcx> {\n struct CraneliftCodegenBackend;\n \n pub struct CodegenResults {\n-    artifact: faerie::Artifact,\n     modules: Vec<CompiledModule>,\n     allocator_module: Option<CompiledModule>,\n     metadata: Vec<u8>,\n@@ -281,19 +280,17 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             std::fs::write(&tmp_file, obj).unwrap();\n \n             return Box::new(CodegenResults {\n-                artifact,\n                 metadata: metadata.raw_data,\n                 crate_name: tcx.crate_name(LOCAL_CRATE),\n                 crate_info: CrateInfo::new(tcx),\n                 linker_info: LinkerInfo::new(tcx),\n                 modules: vec![CompiledModule {\n-                    name: \"dummy\".to_string(),\n+                    name: \"dummy_name\".to_string(),\n                     kind: ModuleKind::Regular,\n                     object: Some(tmp_file),\n                     bytecode: None,\n                     bytecode_compressed: None,\n                 }],\n-                //modules: vec![],\n                 allocator_module: None,\n             });\n         }"}, {"sha": "7a13d7094cc4ab908bedcb164a911b341dad8fd4", "filename": "src/link.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e28d80a3db694e6e17d89988f74d36c316470a2/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28d80a3db694e6e17d89988f74d36c316470a2/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=8e28d80a3db694e6e17d89988f74d36c316470a2", "patch": "@@ -23,13 +23,17 @@ pub(crate) fn link_rlib(sess: &Session, res: &CodegenResults, output_name: PathB\n     let mut builder = ar::Builder::new(file);\n \n     // Add main object file\n-    let obj = res.artifact.emit().unwrap();\n-    builder\n-        .append(\n-            &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n-            ::std::io::Cursor::new(obj),\n-        )\n-        .unwrap();\n+    for module in &res.modules {\n+        if let Some(ref object_path) = module.object {\n+            let object = File::open(object_path).expect(\"Someone deleted our object file\");\n+            let object_len = object.metadata().unwrap().len();\n+            builder.append(\n+                &ar::Header::new((module.name.to_string() +  RUST_CGU_EXT).into_bytes(), object_len),\n+                object,\n+            )\n+            .unwrap();\n+        }\n+    }\n \n     // Non object files need to be added after object files, because ranlib will\n     // try to read the native architecture from the first file, even if it isn't\n@@ -63,10 +67,6 @@ pub(crate) fn link_bin(sess: &Session, codegen_results: &CodegenResults, out_fil\n         Err(err) => sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)),\n     };\n \n-    // TODO: link executable\n-    let obj = codegen_results.artifact.emit().unwrap();\n-    std::fs::write(tmpdir.path().join(\"out\".to_string() + RUST_CGU_EXT), obj).unwrap();\n-\n     let (linker, flavor) = linker_and_flavor(sess);\n     let (pname, mut cmd) = get_linker(sess, &linker, flavor);\n "}]}