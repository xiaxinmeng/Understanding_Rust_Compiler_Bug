{"sha": "ee74f925f57c866669c69eecaa5579c327031674", "node_id": "C_kwDOAAsO6NoAKGVlNzRmOTI1ZjU3Yzg2NjY2OWM2OWVlY2FhNTU3OWMzMjcwMzE2NzQ", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-09-06T19:18:56Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-09-06T19:18:56Z"}, "message": "Replace manual impl with a derive macro as multipart suggestions are now supported by them", "tree": {"sha": "17a5a845062177e7e071969c252c0cfa3f22d495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a5a845062177e7e071969c252c0cfa3f22d495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee74f925f57c866669c69eecaa5579c327031674", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmMXnU4ACgkQspeR1Nh4\n40Wgxw//XBtQjYMxlZAP9iy0DvuPqkqDTm0dIcm0vufBxiD1KqaW8I39lk93cdOc\nBsl1lBiFIwqA9WAK/wvYx8osbvATJneLNN6tZ/iMN2wo4fjtGf3L2bweT7+fiy52\ntHp0HMSMMkQjPHOOZNuljkz4snXD057AW7RyWcy5/BXOoVk/UiGD0b0w58hydGwh\n6XBxZQuUO+zUF1O/bqJ1a9mmXuSKgfvVT9jQMA2tsynrxrJ2y6prYjfRyVYEi5fU\ne9hOG+3Nmsy5rATu50G8mUWdx4ZYC1mo0fohYce4TWbB/+dKFsOpkUnpwKVX9gB8\njuU8Wsld/cnY8JjJmfI36HDgZcKcwztiYePG58k6OFpbLo20rAaAgk7oF3iky4aq\nRbZD9yGBP77Z3f69vfwamJ86kRGYIyFtWXBeyrG5WBSknuVibAS9uZpS8Y/ejexm\nDdWd6/SwGZs4Z5RvSJx1X4PvjTdzxtB2/DXbmXVXJRhWLC/hVs5n6PqEs1qiNpbR\nZcwSNPMh8/4ph05hXZNtfiP2BQNJ+9qXQmUivRq5LNZalftlM26D4liaysNAHcbs\nFoUneO3paVGUewGCpBYiDR6/4gyswHiIbpZIJV7+Rgm6mrOh5RVDoFcAam7SQpws\nGKeyrRCq3Yb+qqen2mvoV4L2TkNTLY8Qj+edxSPiT5MqDEYZeI4=\n=qe6/\n-----END PGP SIGNATURE-----", "payload": "tree 17a5a845062177e7e071969c252c0cfa3f22d495\nparent cb7ad9e54853aa5bc217a147d74e3289f6c45489\nauthor Nikita Tomashevich <quant3234@gmail.com> 1662491936 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1662491936 +0300\n\nReplace manual impl with a derive macro as multipart suggestions are now supported by them\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee74f925f57c866669c69eecaa5579c327031674", "html_url": "https://github.com/rust-lang/rust/commit/ee74f925f57c866669c69eecaa5579c327031674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee74f925f57c866669c69eecaa5579c327031674/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb7ad9e54853aa5bc217a147d74e3289f6c45489", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7ad9e54853aa5bc217a147d74e3289f6c45489", "html_url": "https://github.com/rust-lang/rust/commit/cb7ad9e54853aa5bc217a147d74e3289f6c45489"}], "stats": {"total": 99, "additions": 55, "deletions": 44}, "files": [{"sha": "f5519b989b64b58ddfa41a39e6fbcd0faaf750f1", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 50, "deletions": 39, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ee74f925f57c866669c69eecaa5579c327031674/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee74f925f57c866669c69eecaa5579c327031674/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=ee74f925f57c866669c69eecaa5579c327031674", "patch": "@@ -147,56 +147,67 @@ pub enum SourceKindSubdiag<'a> {\n     },\n }\n \n-// Has to be implemented manually because multipart suggestions are not supported by the derive macro.\n-// Would be a part of `SourceKindSubdiag` otherwise.\n+#[derive(SessionSubdiagnostic)]\n pub enum SourceKindMultiSuggestion<'a> {\n+    #[multipart_suggestion_verbose(\n+        infer::source_kind_fully_qualified,\n+        applicability = \"has-placeholders\"\n+    )]\n     FullyQualified {\n-        span: Span,\n+        #[suggestion_part(code = \"{def_path}({adjustment}\")]\n+        span_lo: Span,\n+        #[suggestion_part(code = \"{successor_pos}\")]\n+        span_hi: Span,\n         def_path: String,\n         adjustment: &'a str,\n-        successor: (&'a str, BytePos),\n+        successor_pos: &'a str,\n     },\n+    #[multipart_suggestion_verbose(\n+        infer::source_kind_closure_return,\n+        applicability = \"has-placeholders\"\n+    )]\n     ClosureReturn {\n-        ty_info: String,\n-        data: &'a FnRetTy<'a>,\n-        should_wrap_expr: Option<Span>,\n+        #[suggestion_part(code = \"{start_span_code}\")]\n+        start_span: Span,\n+        start_span_code: String,\n+        #[suggestion_part(code = \"}}\")]\n+        end_span: Option<Span>,\n     },\n }\n \n-impl AddSubdiagnostic for SourceKindMultiSuggestion<'_> {\n-    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n-        match self {\n-            Self::FullyQualified { span, def_path, adjustment, successor } => {\n-                let suggestion = vec![\n-                    (span.shrink_to_lo(), format!(\"{def_path}({adjustment}\")),\n-                    (span.shrink_to_hi().with_hi(successor.1), successor.0.to_string()),\n-                ];\n-                diag.multipart_suggestion_verbose(\n-                    fluent::infer::source_kind_fully_qualified,\n-                    suggestion,\n-                    rustc_errors::Applicability::HasPlaceholders,\n-                );\n-            }\n-            Self::ClosureReturn { ty_info, data, should_wrap_expr } => {\n-                let (arrow, post) = match data {\n-                    FnRetTy::DefaultReturn(_) => (\"-> \", \" \"),\n-                    _ => (\"\", \"\"),\n-                };\n-                let suggestion = match should_wrap_expr {\n-                    Some(end_span) => vec![\n-                        (data.span(), format!(\"{}{}{}{{ \", arrow, ty_info, post)),\n-                        (end_span, \" }\".to_string()),\n-                    ],\n-                    None => vec![(data.span(), format!(\"{}{}{}\", arrow, ty_info, post))],\n-                };\n-                diag.multipart_suggestion_verbose(\n-                    fluent::infer::source_kind_closure_return,\n-                    suggestion,\n-                    rustc_errors::Applicability::HasPlaceholders,\n-                );\n-            }\n+impl<'a> SourceKindMultiSuggestion<'a> {\n+    pub fn new_fully_qualified(\n+        span: Span,\n+        def_path: String,\n+        adjustment: &'a str,\n+        successor: (&'a str, BytePos),\n+    ) -> Self {\n+        Self::FullyQualified {\n+            span_lo: span.shrink_to_lo(),\n+            span_hi: span.shrink_to_hi().with_hi(successor.1),\n+            def_path,\n+            adjustment,\n+            successor_pos: successor.0,\n         }\n     }\n+\n+    pub fn new_closure_return(\n+        ty_info: String,\n+        data: &'a FnRetTy<'a>,\n+        should_wrap_expr: Option<Span>,\n+    ) -> Self {\n+        let (arrow, post) = match data {\n+            FnRetTy::DefaultReturn(_) => (\"-> \", \" \"),\n+            _ => (\"\", \"\"),\n+        };\n+        let (start_span, start_span_code, end_span) = match should_wrap_expr {\n+            Some(end_span) => {\n+                (data.span(), format!(\"{}{}{}{{ \", arrow, ty_info, post), Some(end_span))\n+            }\n+            None => (data.span(), format!(\"{}{}{}\", arrow, ty_info, post), None),\n+        };\n+        Self::ClosureReturn { start_span, start_span_code, end_span }\n+    }\n }\n \n pub enum RegionOriginNote<'a> {"}, {"sha": "b0f5897e34b030e83244602f1b45d6e6b0d5d07b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee74f925f57c866669c69eecaa5579c327031674/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee74f925f57c866669c69eecaa5579c327031674/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=ee74f925f57c866669c69eecaa5579c327031674", "patch": "@@ -511,20 +511,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     _ => \"\",\n                 };\n \n-                multi_suggestions.push(SourceKindMultiSuggestion::FullyQualified {\n-                    span: receiver.span,\n+                multi_suggestions.push(SourceKindMultiSuggestion::new_fully_qualified(\n+                    receiver.span,\n                     def_path,\n                     adjustment,\n                     successor,\n-                });\n+                ));\n             }\n             InferSourceKind::ClosureReturn { ty, data, should_wrap_expr } => {\n                 let ty_info = ty_to_string(self, ty);\n-                multi_suggestions.push(SourceKindMultiSuggestion::ClosureReturn {\n+                multi_suggestions.push(SourceKindMultiSuggestion::new_closure_return(\n                     ty_info,\n                     data,\n                     should_wrap_expr,\n-                });\n+                ));\n             }\n         }\n         match error_code {"}]}