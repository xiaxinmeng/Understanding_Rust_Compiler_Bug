{"sha": "1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNmEwYjBjNzIwNjQ0OGQyMmIxN2EwZjgxNzBiMGQ4ZTdjMTI5ZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-29T06:18:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-29T06:18:12Z"}, "message": "Auto merge of #78486 - pietroalbini:manifest-artifacts, r=Mark-Simulacrum\n\nInclude non-rustup artifacts in the manifest\n\nThis PR fixes https://github.com/rust-lang/promote-release/issues/22 by including all the files we ship in the generated manifests, even the ones that are not installable through rustup. In practice this adds the following \"artifacts\":\n\n* `source-code`: the tarball containing the full source code used to build the release (`rustc-{channel}-src.tar.xz`)\n* `installer-msi`: the MSI installer for Windows systems (`rust-{channel}-{target}.msi`)\n* `installer-pkg`: the PKG installer for macOS systems (`rust-{channel}-{target}.pkg`)\n\nThese files are included in a new `artifacts` table of the manifest, like so:\n\n```toml\n[[artifacts.installer-msi.target.aarch64-pc-windows-msvc]]\nurl = \"https://example.com/2020-10-28/rust-nightly-aarch64-pc-windows-msvc.msi\"\nhash-sha256 = \"6b41d5b829d20834c5d93628d008ec618f8914ee79303363bd13a86fd5f305dd\"\n\n[[artifacts.installer-msi.target.i686-pc-windows-gnu]]\nurl = \"https://example.com/2020-10-28/rust-nightly-i686-pc-windows-gnu.msi\"\nhash-sha256 = \"83f020de6e180c155add9fce1cea2ac6e5f744edbd6dc1581e24de8f56b2ca7a\"\n\n[[artifacts.installer-msi.target.i686-pc-windows-msvc]]\nurl = \"https://example.com/2020-10-28/rust-nightly-i686-pc-windows-msvc.msi\"\nhash-sha256 = \"dbc80c24e9d5df01616c6f216114b4351f51a94218e2368b5cebe4165b270702\"\n\n[[artifacts.installer-msi.target.x86_64-pc-windows-gnu]]\nurl = \"https://example.com/2020-10-28/rust-nightly-x86_64-pc-windows-gnu.msi\"\nhash-sha256 = \"8196eca3f02d72d4c8776ad4fcc72897125e2cf6404ae933e31c07e197e3c9fa\"\n\n[[artifacts.installer-msi.target.x86_64-pc-windows-msvc]]\nurl = \"https://example.com/2020-10-28/rust-nightly-x86_64-pc-windows-msvc.msi\"\nhash-sha256 = \"b2e7fd6463790732fcf9c726b9448068712341943199cb40fc11d1138b8a207b\"\n\n[[artifacts.installer-pkg.target.aarch64-apple-darwin]]\nurl = \"https://example.com/2020-10-28/rust-nightly-aarch64-apple-darwin.pkg\"\nhash-sha256 = \"70421c191752fb33886f8033b029e634bcc993b72308cef52a38405840e91f5c\"\n\n[[artifacts.installer-pkg.target.x86_64-apple-darwin]]\nurl = \"https://example.com/2020-10-28/rust-nightly-x86_64-apple-darwin.pkg\"\nhash-sha256 = \"ebd7a5acb61e82d85e855146cc9bd856f32228ee7f40dd94c659b00614ed4f1f\"\n\n[[artifacts.source-code.target.\"*\"]]\nurl = \"https://example.com/2020-10-28/rustc-nightly-src.tar.gz\"\nhash-sha256 = \"5fcc487ee4c15c689de8ddf7daac7ff6a65c80498197b9aea58622dc2b3bca10\"\n\n[[artifacts.source-code.target.\"*\"]]\nurl = \"https://example.com/2020-10-28/rustc-nightly-src.tar.xz\"\nhash-sha256 = \"0c618ef0ec5f64da1801e9d0df6c755f6ed1a8780ec5c8ee75e55614be51d42c\"\n\n```\n\nEach artifact can be available for multiple targets, and each target can have multiple versions of the same file (for example, a `gz`-compressed one and a `xz`-compressed one). In the future rustup might add functionality to let users retrieve the artifacts, but that's not needed to land this PR, and whether to do the implementation is up to the rustup maintainers.\n\nr? `@kinnison`\ncc `@Mark-Simulacrum`", "tree": {"sha": "4ca3a92c4f2884d494c2cac4b85c83db65cbdfe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca3a92c4f2884d494c2cac4b85c83db65cbdfe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "html_url": "https://github.com/rust-lang/rust/commit/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49720d2b9a0e72772109542dd2d61db70fccc015", "url": "https://api.github.com/repos/rust-lang/rust/commits/49720d2b9a0e72772109542dd2d61db70fccc015", "html_url": "https://github.com/rust-lang/rust/commit/49720d2b9a0e72772109542dd2d61db70fccc015"}, {"sha": "92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc", "html_url": "https://github.com/rust-lang/rust/commit/92fc1f8f9e0b38e6d292514a6f3a6e8627ae0cdc"}], "stats": {"total": 147, "additions": 125, "deletions": 22}, "files": [{"sha": "8c337548526051e097074a66bf596a8c536888f8", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "patch": "@@ -168,6 +168,16 @@ static DOCS_TARGETS: &[&str] = &[\n     \"x86_64-unknown-linux-musl\",\n ];\n \n+static MSI_INSTALLERS: &[&str] = &[\n+    \"aarch64-pc-windows-msvc\",\n+    \"i686-pc-windows-gnu\",\n+    \"i686-pc-windows-msvc\",\n+    \"x86_64-pc-windows-gnu\",\n+    \"x86_64-pc-windows-msvc\",\n+];\n+\n+static PKG_INSTALLERS: &[&str] = &[\"x86_64-apple-darwin\", \"aarch64-apple-darwin\"];\n+\n static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];\n \n static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\", \"rust-analyzer-preview\"];\n@@ -314,10 +324,12 @@ impl Builder {\n             manifest_version: \"2\".to_string(),\n             date: self.date.to_string(),\n             pkg: BTreeMap::new(),\n+            artifacts: BTreeMap::new(),\n             renames: BTreeMap::new(),\n             profiles: BTreeMap::new(),\n         };\n         self.add_packages_to(&mut manifest);\n+        self.add_artifacts_to(&mut manifest);\n         self.add_profiles_to(&mut manifest);\n         self.add_renames_to(&mut manifest);\n         manifest.pkg.insert(\"rust\".to_string(), self.rust_package(&manifest));\n@@ -346,6 +358,27 @@ impl Builder {\n         package(\"llvm-tools-preview\", TARGETS);\n     }\n \n+    fn add_artifacts_to(&mut self, manifest: &mut Manifest) {\n+        manifest.add_artifact(\"source-code\", |artifact| {\n+            let tarball = self.versions.tarball_name(&PkgType::Rustc, \"src\").unwrap();\n+            artifact.add_tarball(self, \"*\", &tarball);\n+        });\n+\n+        manifest.add_artifact(\"installer-msi\", |artifact| {\n+            for target in MSI_INSTALLERS {\n+                let msi = self.versions.archive_name(&PkgType::Rust, target, \"msi\").unwrap();\n+                artifact.add_file(self, target, &msi);\n+            }\n+        });\n+\n+        manifest.add_artifact(\"installer-pkg\", |artifact| {\n+            for target in PKG_INSTALLERS {\n+                let pkg = self.versions.archive_name(&PkgType::Rust, target, \"pkg\").unwrap();\n+                artifact.add_file(self, target, &pkg);\n+            }\n+        });\n+    }\n+\n     fn add_profiles_to(&mut self, manifest: &mut Manifest) {\n         let mut profile = |name, pkgs| self.profile(name, &mut manifest.profiles, pkgs);\n         profile(\"minimal\", &[\"rustc\", \"cargo\", \"rust-std\", \"rust-mingw\"]);"}, {"sha": "547c270d89ab70465949cbd5477c567fdef867b5", "filename": "src/tools/build-manifest/src/manifest.rs", "status": "modified", "additions": 76, "deletions": 19, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs?ref=1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "patch": "@@ -9,10 +9,19 @@ pub(crate) struct Manifest {\n     pub(crate) manifest_version: String,\n     pub(crate) date: String,\n     pub(crate) pkg: BTreeMap<String, Package>,\n+    pub(crate) artifacts: BTreeMap<String, Artifact>,\n     pub(crate) renames: BTreeMap<String, Rename>,\n     pub(crate) profiles: BTreeMap<String, Vec<String>>,\n }\n \n+impl Manifest {\n+    pub(crate) fn add_artifact(&mut self, name: &str, f: impl FnOnce(&mut Artifact)) {\n+        let mut artifact = Artifact { target: BTreeMap::new() };\n+        f(&mut artifact);\n+        self.artifacts.insert(name.to_string(), artifact);\n+    }\n+}\n+\n #[derive(Serialize)]\n pub(crate) struct Package {\n     pub(crate) version: String,\n@@ -25,6 +34,42 @@ pub(crate) struct Rename {\n     pub(crate) to: String,\n }\n \n+#[derive(Serialize)]\n+pub(crate) struct Artifact {\n+    pub(crate) target: BTreeMap<String, Vec<ArtifactFile>>,\n+}\n+\n+impl Artifact {\n+    pub(crate) fn add_file(&mut self, builder: &mut Builder, target: &str, path: &str) {\n+        if let Some(path) = record_shipped_file(builder, builder.input.join(path)) {\n+            self.target.entry(target.into()).or_insert_with(Vec::new).push(ArtifactFile {\n+                url: builder.url(&path),\n+                hash_sha256: FileHash::Missing(path),\n+            });\n+        }\n+    }\n+\n+    pub(crate) fn add_tarball(&mut self, builder: &mut Builder, target: &str, base_path: &str) {\n+        let files = self.target.entry(target.into()).or_insert_with(Vec::new);\n+        let base_path = builder.input.join(base_path);\n+        for compression in &[\"gz\", \"xz\"] {\n+            if let Some(tarball) = tarball_variant(builder, &base_path, compression) {\n+                files.push(ArtifactFile {\n+                    url: builder.url(&tarball),\n+                    hash_sha256: FileHash::Missing(tarball),\n+                });\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Serialize)]\n+#[serde(rename_all = \"kebab-case\")]\n+pub(crate) struct ArtifactFile {\n+    pub(crate) url: String,\n+    pub(crate) hash_sha256: FileHash,\n+}\n+\n #[derive(Serialize, Default)]\n pub(crate) struct Target {\n     pub(crate) available: bool,\n@@ -39,8 +84,8 @@ pub(crate) struct Target {\n impl Target {\n     pub(crate) fn from_compressed_tar(builder: &mut Builder, base_path: &str) -> Self {\n         let base_path = builder.input.join(base_path);\n-        let gz = Self::tarball_variant(builder, &base_path, \"gz\");\n-        let xz = Self::tarball_variant(builder, &base_path, \"xz\");\n+        let gz = tarball_variant(builder, &base_path, \"gz\");\n+        let xz = tarball_variant(builder, &base_path, \"xz\");\n \n         if gz.is_none() {\n             return Self::unavailable();\n@@ -59,23 +104,6 @@ impl Target {\n         }\n     }\n \n-    fn tarball_variant(builder: &mut Builder, base: &Path, ext: &str) -> Option<PathBuf> {\n-        let mut path = base.to_path_buf();\n-        path.set_extension(ext);\n-        if path.is_file() {\n-            builder.shipped_files.insert(\n-                path.file_name()\n-                    .expect(\"missing filename\")\n-                    .to_str()\n-                    .expect(\"non-utf-8 filename\")\n-                    .to_string(),\n-            );\n-            Some(path)\n-        } else {\n-            None\n-        }\n-    }\n-\n     pub(crate) fn unavailable() -> Self {\n         Self::default()\n     }\n@@ -111,6 +139,27 @@ impl Serialize for FileHash {\n     }\n }\n \n+fn tarball_variant(builder: &mut Builder, base: &Path, ext: &str) -> Option<PathBuf> {\n+    let mut path = base.to_path_buf();\n+    path.set_extension(ext);\n+    record_shipped_file(builder, path)\n+}\n+\n+fn record_shipped_file(builder: &mut Builder, path: PathBuf) -> Option<PathBuf> {\n+    if path.is_file() {\n+        builder.shipped_files.insert(\n+            path.file_name()\n+                .expect(\"missing filename\")\n+                .to_str()\n+                .expect(\"non-utf-8 filename\")\n+                .to_string(),\n+        );\n+        Some(path)\n+    } else {\n+        None\n+    }\n+}\n+\n pub(crate) fn visit_file_hashes(manifest: &mut Manifest, mut f: impl FnMut(&mut FileHash)) {\n     for pkg in manifest.pkg.values_mut() {\n         for target in pkg.target.values_mut() {\n@@ -122,4 +171,12 @@ pub(crate) fn visit_file_hashes(manifest: &mut Manifest, mut f: impl FnMut(&mut\n             }\n         }\n     }\n+\n+    for artifact in manifest.artifacts.values_mut() {\n+        for target in artifact.target.values_mut() {\n+            for file in target {\n+                f(&mut file.hash_sha256);\n+            }\n+        }\n+    }\n }"}, {"sha": "f1a42e7145f907243992fbc532bd1473074ad028", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "patch": "@@ -13,6 +13,7 @@ const RUSTC_VERSION: &str = include_str!(\"../../../version\");\n pub(crate) enum PkgType {\n     Rust,\n     RustSrc,\n+    Rustc,\n     Cargo,\n     Rls,\n     RustAnalyzer,\n@@ -28,6 +29,7 @@ impl PkgType {\n         match component {\n             \"rust\" => PkgType::Rust,\n             \"rust-src\" => PkgType::RustSrc,\n+            \"rustc\" => PkgType::Rustc,\n             \"cargo\" => PkgType::Cargo,\n             \"rls\" | \"rls-preview\" => PkgType::Rls,\n             \"rust-analyzer\" | \"rust-analyzer-preview\" => PkgType::RustAnalyzer,\n@@ -44,6 +46,7 @@ impl PkgType {\n         match self {\n             PkgType::Rust => \"rust\",\n             PkgType::RustSrc => \"rust-src\",\n+            PkgType::Rustc => \"rustc\",\n             PkgType::Cargo => \"cargo\",\n             PkgType::Rls => \"rls\",\n             PkgType::RustAnalyzer => \"rust-analyzer\",\n@@ -69,6 +72,7 @@ impl PkgType {\n \n             PkgType::Rust => true,\n             PkgType::RustSrc => true,\n+            PkgType::Rustc => true,\n             PkgType::Other(_) => true,\n         }\n     }\n@@ -165,10 +169,11 @@ impl Versions {\n         }\n     }\n \n-    pub(crate) fn tarball_name(\n+    pub(crate) fn archive_name(\n         &mut self,\n         package: &PkgType,\n         target: &str,\n+        extension: &str,\n     ) -> Result<String, Error> {\n         let component_name = package.tarball_component_name();\n         let version = match self.channel.as_str() {\n@@ -179,12 +184,20 @@ impl Versions {\n         };\n \n         if package.target_independent() {\n-            Ok(format!(\"{}-{}.tar.gz\", component_name, version))\n+            Ok(format!(\"{}-{}.{}\", component_name, version, extension))\n         } else {\n-            Ok(format!(\"{}-{}-{}.tar.gz\", component_name, version, target))\n+            Ok(format!(\"{}-{}-{}.{}\", component_name, version, target, extension))\n         }\n     }\n \n+    pub(crate) fn tarball_name(\n+        &mut self,\n+        package: &PkgType,\n+        target: &str,\n+    ) -> Result<String, Error> {\n+        self.archive_name(package, target, \"tar.gz\")\n+    }\n+\n     pub(crate) fn rustc_version(&self) -> &str {\n         RUSTC_VERSION\n     }"}]}