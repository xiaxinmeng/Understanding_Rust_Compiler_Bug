{"sha": "451af791dadf5a38da2fe63d578c083b95d6c10a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MWFmNzkxZGFkZjVhMzhkYTJmZTYzZDU3OGMwODNiOTVkNmMxMGE=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-05T23:04:58Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-05T23:04:58Z"}, "message": "Fix links, change example to english", "tree": {"sha": "60d2729b827d9a444b1edcbb3e509433106d206e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d2729b827d9a444b1edcbb3e509433106d206e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451af791dadf5a38da2fe63d578c083b95d6c10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451af791dadf5a38da2fe63d578c083b95d6c10a", "html_url": "https://github.com/rust-lang/rust/commit/451af791dadf5a38da2fe63d578c083b95d6c10a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451af791dadf5a38da2fe63d578c083b95d6c10a/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a49fefcb29590554d69081a7e26fcf4bfa0f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a49fefcb29590554d69081a7e26fcf4bfa0f65", "html_url": "https://github.com/rust-lang/rust/commit/15a49fefcb29590554d69081a7e26fcf4bfa0f65"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "875fa08f78980a9d90338802b4da5c3eaa1726d8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/451af791dadf5a38da2fe63d578c083b95d6c10a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451af791dadf5a38da2fe63d578c083b95d6c10a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=451af791dadf5a38da2fe63d578c083b95d6c10a", "patch": "@@ -278,32 +278,21 @@ extern \"rust-intrinsic\" {\n     /// Moves a value out of scope without running drop glue.\n     pub fn forget<T>(_: T) -> ();\n \n-    /// Reinterprets the bits of a value of one type as another type. Both types\n+    /// Reinterprets the bits of a value of one type as another type; both types\n     /// must have the same size. Neither the original, nor the result, may be an\n-    /// [invalid value]\n-    /// (https://doc.rust-lang.org/nomicon/meet-safe-and-unsafe.html).\n+    /// [invalid value] (../../nomicon/meet-safe-and-unsafe.html).\n     ///\n-    /// `transmute` is semantically equivalent to the following:\n-    ///\n-    /// ```\n-    /// use std::{mem, ptr};\n-    /// // assuming that T and U are the same size\n-    /// unsafe fn transmute<T, U>(t: T) -> U {\n-    ///     let mut u: U = mem::uninitialized();\n-    ///     ptr::copy_nonoverlapping(&t as *const T as *const u8,\n-    ///                              &mut u as *mut U as *mut u8,\n-    ///                              mem::size_of::<T>());\n-    ///     mem::forget(t);\n-    ///     u\n-    /// }\n-    /// ```\n+    /// `transmute` is semantically equivalent to a bitwise move of one type\n+    /// into another. It copies the bits from the destination type into the\n+    /// source type, then forgets the original. If you know C or C++, it's like\n+    /// `memcpy` under the hood.\n     ///\n     /// `transmute` is incredibly unsafe. There are a vast number of ways to\n     /// cause undefined behavior with this function. `transmute` should be\n     /// the absolute last resort.\n     ///\n-    /// The [nomicon](https://doc.rust-lang.org/nomicon/transmutes.html) has\n-    /// additional documentation.\n+    /// The [nomicon](../../nomicon/transmutes.html) has additional\n+    /// documentation.\n     ///\n     /// # Alternatives\n     ///"}]}