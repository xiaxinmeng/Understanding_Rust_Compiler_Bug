{"sha": "974b69927b2ca665a414a477717d40320cc7fbbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NGI2OTkyN2IyY2E2NjVhNDE0YTQ3NzcxN2Q0MDMyMGNjN2ZiYmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-14T05:02:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-14T05:02:20Z"}, "message": "Rollup merge of #68036 - euclio:libterm-ncurses6-fix, r=KodrAus\n\nlibterm: parse extended terminfo format\n\nFixes #45728.\n\nModifies libterm to parse the extended terminfo format introduced in ncurses 6.1. This fixes the lack of color in test output for users with newer ncurses versions.\n\nThe ideal fix for this would be to migrate libtest to use `termcolor` (https://github.com/rust-lang/rust/issues/60349), but that's blocked for the foreseeable future.", "tree": {"sha": "b7e9f3b25e40a1d7270c732bec1ecd771c111caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e9f3b25e40a1d7270c732bec1ecd771c111caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/974b69927b2ca665a414a477717d40320cc7fbbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeHUtcCRBK7hj4Ov3rIwAAdHIIAK4PVCw47LLjUR0P4MSqsAAA\nRMtB1l/8xUYsD+6+F9bgpny9+d09bSZckjbwRKvk0Qhs6/WX5Utu8m4uswanFi3E\n2k1heuh1SvVKBug7aTs3acgrvA/L041r0i+Xfcjl2tSVYstpzpohQPzzkj4vr/12\nyCijp4taLkSClqmruvfQFEG1rvlzqoEQ+8kvYoF9dEtpjuG/QxWFv8YmIqTs8qTK\nCoWS6jtJUgtVSAD9+Vj6/Xjrf0jQMxzDmIF5Al6XtLu71QPwJlvRDu3XSGJHm9pK\nSRLvhYUFSrkCiFLYmdKYdMKFIpRsoSfb65nlU8IWN2Kq/+MwLq37ErMirT5txyc=\n=4nL1\n-----END PGP SIGNATURE-----\n", "payload": "tree b7e9f3b25e40a1d7270c732bec1ecd771c111caa\nparent 9e47ddd399fab91af5eb804727f9f1400a140753\nparent f9a57469612ba457fb7865aef944bf05d7664516\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578978140 +0900\ncommitter GitHub <noreply@github.com> 1578978140 +0900\n\nRollup merge of #68036 - euclio:libterm-ncurses6-fix, r=KodrAus\n\nlibterm: parse extended terminfo format\n\nFixes #45728.\n\nModifies libterm to parse the extended terminfo format introduced in ncurses 6.1. This fixes the lack of color in test output for users with newer ncurses versions.\n\nThe ideal fix for this would be to migrate libtest to use `termcolor` (https://github.com/rust-lang/rust/issues/60349), but that's blocked for the foreseeable future.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/974b69927b2ca665a414a477717d40320cc7fbbd", "html_url": "https://github.com/rust-lang/rust/commit/974b69927b2ca665a414a477717d40320cc7fbbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/974b69927b2ca665a414a477717d40320cc7fbbd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e47ddd399fab91af5eb804727f9f1400a140753", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e47ddd399fab91af5eb804727f9f1400a140753", "html_url": "https://github.com/rust-lang/rust/commit/9e47ddd399fab91af5eb804727f9f1400a140753"}, {"sha": "f9a57469612ba457fb7865aef944bf05d7664516", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a57469612ba457fb7865aef944bf05d7664516", "html_url": "https://github.com/rust-lang/rust/commit/f9a57469612ba457fb7865aef944bf05d7664516"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "2116b433fce3f8c50d44897bf74b2b9e7c675276", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/974b69927b2ca665a414a477717d40320cc7fbbd/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974b69927b2ca665a414a477717d40320cc7fbbd/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=974b69927b2ca665a414a477717d40320cc7fbbd", "patch": "@@ -91,7 +91,7 @@ pub fn stderr() -> Option<Box<StderrTerminal>> {\n #[allow(missing_docs)]\n pub mod color {\n     /// Number for a terminal color\n-    pub type Color = u16;\n+    pub type Color = u32;\n \n     pub const BLACK: Color = 0;\n     pub const RED: Color = 1;"}, {"sha": "918875e792a662aa46c0330a02f5d08a20d30590", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/974b69927b2ca665a414a477717d40320cc7fbbd/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974b69927b2ca665a414a477717d40320cc7fbbd/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=974b69927b2ca665a414a477717d40320cc7fbbd", "patch": "@@ -24,7 +24,7 @@ pub struct TermInfo {\n     /// Map of capability name to boolean value\n     pub bools: HashMap<String, bool>,\n     /// Map of capability name to numeric value\n-    pub numbers: HashMap<String, u16>,\n+    pub numbers: HashMap<String, u32>,\n     /// Map of capability name to raw (unexpanded) string\n     pub strings: HashMap<String, Vec<u8>>,\n }\n@@ -129,7 +129,7 @@ fn cap_for_attr(attr: Attr) -> &'static str {\n /// A Terminal that knows how many colors it supports, with a reference to its\n /// parsed Terminfo database record.\n pub struct TerminfoTerminal<T> {\n-    num_colors: u16,\n+    num_colors: u32,\n     out: T,\n     ti: TermInfo,\n }"}, {"sha": "fbc5aebdb2c6ca4c5b8d1585b2417e0e01b2909e", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/974b69927b2ca665a414a477717d40320cc7fbbd/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974b69927b2ca665a414a477717d40320cc7fbbd/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=974b69927b2ca665a414a477717d40320cc7fbbd", "patch": "@@ -159,16 +159,16 @@ pub static stringnames: &[&str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tbc\", \"clear\",\n \n fn read_le_u16(r: &mut dyn io::Read) -> io::Result<u16> {\n     let mut b = [0; 2];\n-    let mut amt = 0;\n-    while amt < b.len() {\n-        match r.read(&mut b[amt..])? {\n-            0 => return Err(io::Error::new(io::ErrorKind::Other, \"end of file\")),\n-            n => amt += n,\n-        }\n-    }\n+    r.read_exact(&mut b)?;\n     Ok((b[0] as u16) | ((b[1] as u16) << 8))\n }\n \n+fn read_le_u32(r: &mut dyn io::Read) -> io::Result<u32> {\n+    let mut b = [0; 4];\n+    r.read_exact(&mut b)?;\n+    Ok((b[0] as u32) | ((b[1] as u32) << 8) | ((b[2] as u32) << 16) | ((b[3] as u32) << 24))\n+}\n+\n fn read_byte(r: &mut dyn io::Read) -> io::Result<u8> {\n     match r.bytes().next() {\n         Some(s) => s,\n@@ -194,9 +194,12 @@ pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, Strin\n \n     // Check magic number\n     let magic = t!(read_le_u16(file));\n-    if magic != 0x011A {\n-        return Err(format!(\"invalid magic number: expected {:x}, found {:x}\", 0x011A, magic));\n-    }\n+\n+    let extended = match magic {\n+        0o0432 => false,\n+        0o01036 => true,\n+        _ => return Err(format!(\"invalid magic number, found {:o}\", magic)),\n+    };\n \n     // According to the spec, these fields must be >= -1 where -1 means that the feature is not\n     // supported. Using 0 instead of -1 works because we skip sections with length 0.\n@@ -258,11 +261,15 @@ pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, Strin\n         t!(read_byte(file)); // compensate for padding\n     }\n \n-    let numbers_map: HashMap<String, u16> = t! {\n-        (0..numbers_count).filter_map(|i| match read_le_u16(file) {\n-            Ok(0xFFFF) => None,\n-            Ok(n) => Some(Ok((nnames[i].to_string(), n))),\n-            Err(e) => Some(Err(e))\n+    let numbers_map: HashMap<String, u32> = t! {\n+        (0..numbers_count).filter_map(|i| {\n+            let number = if extended { read_le_u32(file) } else { read_le_u16(file).map(Into::into) };\n+\n+            match number {\n+                Ok(0xFFFF) => None,\n+                Ok(n) => Some(Ok((nnames[i].to_string(), n))),\n+                Err(e) => Some(Err(e))\n+            }\n         }).collect()\n     };\n \n@@ -318,7 +325,7 @@ pub fn msys_terminfo() -> TermInfo {\n     strings.insert(\"setab\".to_string(), b\"\\x1B[4%p1%dm\".to_vec());\n \n     let mut numbers = HashMap::new();\n-    numbers.insert(\"colors\".to_string(), 8u16);\n+    numbers.insert(\"colors\".to_string(), 8);\n \n     TermInfo {\n         names: vec![\"cygwin\".to_string()], // msys is a fork of an older cygwin version"}, {"sha": "c24cf9518aa2539e9e829d9c6e6e081f5942634e", "filename": "src/libterm/win.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/974b69927b2ca665a414a477717d40320cc7fbbd/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974b69927b2ca665a414a477717d40320cc7fbbd/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=974b69927b2ca665a414a477717d40320cc7fbbd", "patch": "@@ -89,7 +89,7 @@ fn bits_to_color(bits: u16) -> color::Color {\n         _ => unreachable!(),\n     };\n \n-    color | (bits & 0x8) // copy the hi-intensity bit\n+    color | (u32::from(bits) & 0x8) // copy the hi-intensity bit\n }\n \n impl<T: Write + Send + 'static> WinConsole<T> {"}]}