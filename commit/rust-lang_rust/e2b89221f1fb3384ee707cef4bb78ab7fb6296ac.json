{"sha": "e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYjg5MjIxZjFmYjMzODRlZTcwN2NlZjRiYjc4YWI3ZmI2Mjk2YWM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-24T17:26:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-24T17:26:34Z"}, "message": "Rollup merge of #49194 - Zoxc:unsafe-generator, r=cramertj\n\nMake resuming generators unsafe instead of the creation of immovable generators\n\ncc @withoutboats\n\nFixes #47787", "tree": {"sha": "42f50f0781c95afe4f1ee4d41c3a31c33828df01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42f50f0781c95afe4f1ee4d41c3a31c33828df01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJatopLCRBK7hj4Ov3rIwAAdHIIAFeo80tp7jfelF18j+id/Dz4\n9HypdMeOktQb7SD9Cw5DzOjVq2XEWIvJ6MQ2XdVebOiV6wTLC4DEJFmomG9n7uIp\nTcSFrE/ZPLauUUGBDa8mvUmREf0oesiNk0oS0Ju0SvK7uUgH8zXnqZbAKh2nIQbV\nb7/JYz6PQGlUv+FkVH3WqHRxjCvcVGxp/Bn6wh19pfSrBkWNDEBDRshXzo8g+4EK\nBoP2Rwlzlg0OQkzDEFmtdcIds0ESwGFwLnwZCa2A+0qUkuulmq27LCBz8q+mnr0U\n7Qd42gVEP5on8f7+KB4RehwzsmLj+EoIRz0rzhsoZYL5VkcUPuahOmlBndkQ3v0=\n=HAIx\n-----END PGP SIGNATURE-----\n", "payload": "tree 42f50f0781c95afe4f1ee4d41c3a31c33828df01\nparent 311814a1a963247df61a2725150a2f3fb37218df\nparent 57896abc38f56dce27ca9d4642c18f44be8db620\nauthor kennytm <kennytm@gmail.com> 1521912394 +0800\ncommitter GitHub <noreply@github.com> 1521912394 +0800\n\nRollup merge of #49194 - Zoxc:unsafe-generator, r=cramertj\n\nMake resuming generators unsafe instead of the creation of immovable generators\n\ncc @withoutboats\n\nFixes #47787\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "html_url": "https://github.com/rust-lang/rust/commit/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311814a1a963247df61a2725150a2f3fb37218df", "url": "https://api.github.com/repos/rust-lang/rust/commits/311814a1a963247df61a2725150a2f3fb37218df", "html_url": "https://github.com/rust-lang/rust/commit/311814a1a963247df61a2725150a2f3fb37218df"}, {"sha": "57896abc38f56dce27ca9d4642c18f44be8db620", "url": "https://api.github.com/repos/rust-lang/rust/commits/57896abc38f56dce27ca9d4642c18f44be8db620", "html_url": "https://github.com/rust-lang/rust/commit/57896abc38f56dce27ca9d4642c18f44be8db620"}], "stats": {"total": 220, "additions": 96, "deletions": 124}, "files": [{"sha": "8e888de90a95149ecf786f9b62e8588114623547", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -36,11 +36,11 @@ fn main() {\n         return \"foo\"\n     };\n \n-    match generator.resume() {\n+    match unsafe { generator.resume() } {\n         GeneratorState::Yielded(1) => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n-    match generator.resume() {\n+    match unsafe { generator.resume() } {\n         GeneratorState::Complete(\"foo\") => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n@@ -69,9 +69,9 @@ fn main() {\n     };\n \n     println!(\"1\");\n-    generator.resume();\n+    unsafe { generator.resume() };\n     println!(\"3\");\n-    generator.resume();\n+    unsafe { generator.resume() };\n     println!(\"5\");\n }\n ```\n@@ -92,7 +92,7 @@ The `Generator` trait in `std::ops` currently looks like:\n pub trait Generator {\n     type Yield;\n     type Return;\n-    fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>;\n+    unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>;\n }\n ```\n \n@@ -175,8 +175,8 @@ fn main() {\n         return ret\n     };\n \n-    generator.resume();\n-    generator.resume();\n+    unsafe { generator.resume() };\n+    unsafe { generator.resume() };\n }\n ```\n \n@@ -200,7 +200,7 @@ fn main() {\n             type Yield = i32;\n             type Return = &'static str;\n \n-            fn resume(&mut self) -> GeneratorState<i32, &'static str> {\n+            unsafe fn resume(&mut self) -> GeneratorState<i32, &'static str> {\n                 use std::mem;\n                 match mem::replace(self, __Generator::Done) {\n                     __Generator::Start(s) => {\n@@ -223,8 +223,8 @@ fn main() {\n         __Generator::Start(ret)\n     };\n \n-    generator.resume();\n-    generator.resume();\n+    unsafe { generator.resume() };\n+    unsafe { generator.resume() };\n }\n ```\n "}, {"sha": "bfd806f99e784ef38ab381caaee235b2b4227fd9", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -892,7 +892,7 @@ impl<T> Generator for Box<T>\n {\n     type Yield = T::Yield;\n     type Return = T::Return;\n-    fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return> {\n+    unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return> {\n         (**self).resume()\n     }\n }"}, {"sha": "4b70c5398be4f1e138cab935b7bc54cfed3d8b00", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -56,11 +56,11 @@ pub enum GeneratorState<Y, R> {\n ///         return \"foo\"\n ///     };\n ///\n-///     match generator.resume() {\n+///     match unsafe { generator.resume() } {\n ///         GeneratorState::Yielded(1) => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n-///     match generator.resume() {\n+///     match unsafe { generator.resume() } {\n ///         GeneratorState::Complete(\"foo\") => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n@@ -98,6 +98,10 @@ pub trait Generator {\n     /// generator will continue executing until it either yields or returns, at\n     /// which point this function will return.\n     ///\n+    /// The function is unsafe because it can be used on an immovable generator.\n+    /// After such a call, the immovable generator must not move again, but\n+    /// this is not enforced by the compiler.\n+    ///\n     /// # Return value\n     ///\n     /// The `GeneratorState` enum returned from this function indicates what\n@@ -116,7 +120,7 @@ pub trait Generator {\n     /// been returned previously. While generator literals in the language are\n     /// guaranteed to panic on resuming after `Complete`, this is not guaranteed\n     /// for all implementations of the `Generator` trait.\n-    fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>;\n+    unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>;\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n@@ -125,7 +129,7 @@ impl<'a, T> Generator for &'a mut T\n {\n     type Yield = T::Yield;\n     type Return = T::Return;\n-    fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return> {\n+    unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return> {\n         (**self).resume()\n     }\n }"}, {"sha": "4f36c3888b961fe75711a18696cc083645ee52b3", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -2247,7 +2247,7 @@ let mut b = || {\n     yield (); // ...is still in scope here, when the yield occurs.\n     println!(\"{}\", a);\n };\n-b.resume();\n+unsafe { b.resume() };\n ```\n \n At present, it is not permitted to have a yield that occurs while a\n@@ -2265,7 +2265,7 @@ let mut b = || {\n     yield ();\n     println!(\"{}\", a);\n };\n-b.resume();\n+unsafe { b.resume() };\n ```\n \n This is a very simple case, of course. In more complex cases, we may\n@@ -2283,7 +2283,7 @@ let mut b = || {\n     yield x; // ...when this yield occurs.\n   }\n };\n-b.resume();\n+unsafe { b.resume() };\n ```\n \n Such cases can sometimes be resolved by iterating \"by value\" (or using\n@@ -2298,7 +2298,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-b.resume();\n+unsafe { b.resume() };\n ```\n \n If taking ownership is not an option, using indices can work too:\n@@ -2314,7 +2314,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-b.resume();\n+unsafe { b.resume() };\n \n // (*) -- Unfortunately, these temporaries are currently required.\n // See <https://github.com/rust-lang/rust/issues/43122>."}, {"sha": "31af7c21857947853b7d7d8a0227c3572116c360", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -126,21 +126,13 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 &AggregateKind::Array(..) |\n                 &AggregateKind::Tuple |\n                 &AggregateKind::Adt(..) => {}\n-                &AggregateKind::Closure(def_id, _) => {\n+                &AggregateKind::Closure(def_id, _) |\n+                &AggregateKind::Generator(def_id, _, _) => {\n                     let UnsafetyCheckResult {\n                         violations, unsafe_blocks\n                     } = self.tcx.unsafety_check_result(def_id);\n                     self.register_violations(&violations, &unsafe_blocks);\n                 }\n-                &AggregateKind::Generator(def_id, _, interior) => {\n-                    let UnsafetyCheckResult {\n-                        violations, unsafe_blocks\n-                    } = self.tcx.unsafety_check_result(def_id);\n-                    self.register_violations(&violations, &unsafe_blocks);\n-                    if !interior.movable {\n-                        self.require_unsafe(\"construction of immovable generator\")\n-                    }\n-                }\n             }\n         }\n         self.super_rvalue(rvalue, location);"}, {"sha": "765fb06e5f3a4c713da5014788d33eb0fbb9666c", "filename": "src/test/run-pass/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -179,7 +179,7 @@ fn generator(a: &Allocator, run_count: usize) {\n          );\n     };\n     for _ in 0..run_count {\n-        gen.resume();\n+        unsafe { gen.resume(); }\n     }\n }\n "}, {"sha": "3d39c46186be32bf10f578639f372ee96ecc03de", "filename": "src/test/run-pass/generator/conditional-drop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -42,9 +42,9 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    a.resume();\n+    unsafe { a.resume() };\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n-    a.resume();\n+    unsafe { a.resume() };\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }\n \n@@ -58,8 +58,8 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    a.resume();\n+    unsafe { a.resume() };\n     assert_eq!(A.load(Ordering::SeqCst), n);\n-    a.resume();\n+    unsafe { a.resume() };\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }"}, {"sha": "09971410e556d051ffe7d4b93f2c7e719aa8bf5e", "filename": "src/test/run-pass/generator/control-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -16,7 +16,7 @@ fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n     where T: Generator<Yield = ()>\n {\n     loop {\n-        match t.resume() {\n+        match unsafe { t.resume() } {\n             GeneratorState::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n             GeneratorState::Complete(ret) => {\n                 assert_eq!(amt, 0);"}, {"sha": "ef4dc24472e61b08892f2668be1a06688b19b726", "filename": "src/test/run-pass/generator/drop-env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -37,7 +37,7 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(foo.resume());\n+    drop(unsafe { foo.resume() });\n     assert_eq!(A.load(Ordering::SeqCst), n);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n@@ -50,7 +50,7 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(foo.resume());\n+    drop(unsafe { foo.resume() });\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);"}, {"sha": "8ce4fc6affab38c3856e10d698fc3241935f9223", "filename": "src/test/run-pass/generator/issue-44197.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -35,6 +35,8 @@ fn bar2(baz: String) -> impl Generator<Yield = String, Return = ()> {\n }\n \n fn main() {\n-    assert_eq!(bar(String::new()).resume(), GeneratorState::Yielded(String::new()));\n-    assert_eq!(bar2(String::new()).resume(), GeneratorState::Complete(()));\n+    unsafe {\n+        assert_eq!(bar(String::new()).resume(), GeneratorState::Yielded(String::new()));\n+        assert_eq!(bar2(String::new()).resume(), GeneratorState::Complete(()));\n+    }\n }"}, {"sha": "654b18928c07796bf7ee42bfe4cd81169511b5c0", "filename": "src/test/run-pass/generator/iterator-count.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -14,11 +14,13 @@ use std::ops::{GeneratorState, Generator};\n \n struct W<T>(T);\n \n+// This impl isn't safe in general, but the generator used in this test is movable\n+// so it won't cause problems.\n impl<T: Generator<Return = ()>> Iterator for W<T> {\n     type Item = T::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        match self.0.resume() {\n+        match unsafe { self.0.resume() } {\n             GeneratorState::Complete(..) => None,\n             GeneratorState::Yielded(v) => Some(v),\n         }"}, {"sha": "28e7da232ce09d38fbbc84ec293b4ccdf6ec8203", "filename": "src/test/run-pass/generator/live-upvar-across-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Flive-upvar-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Flive-upvar-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Flive-upvar-across-yield.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     let mut a = || {\n         b(yield);\n     };\n-    a.resume();\n+    unsafe { a.resume() };\n }"}, {"sha": "29808da85a7a9064ee9648b0d0ddcd3d05ba8e9d", "filename": "src/test/run-pass/generator/nested_generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fnested_generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fnested_generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fnested_generators.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -20,7 +20,7 @@ fn main() {\n             yield 2;\n         };\n \n-        match sub_generator.resume() {\n+        match unsafe { sub_generator.resume() } {\n             GeneratorState::Yielded(x) => {\n                 yield x;\n             }"}, {"sha": "3d7b60ab6b90132ee3d5e17c0d04f05ec0cf6b67", "filename": "src/test/run-pass/generator/panic-drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -42,7 +42,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 0);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        foo.resume()\n+        unsafe { foo.resume() }\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);\n@@ -57,7 +57,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 1);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        foo.resume()\n+        unsafe { foo.resume() }\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);"}, {"sha": "ace5cdde51d85f726c2e17f65c46686d5b5074ba", "filename": "src/test/run-pass/generator/panic-safe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -24,13 +24,13 @@ fn main() {\n     };\n \n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        foo.resume()\n+        unsafe { foo.resume() }\n     }));\n     assert!(res.is_err());\n \n     for _ in 0..10 {\n         let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-            foo.resume()\n+            unsafe { foo.resume() }\n         }));\n         assert!(res.is_err());\n     }"}, {"sha": "06e7615d26191b3fe6aa403062af5c9f7ffd2d67", "filename": "src/test/run-pass/generator/resume-after-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -23,12 +23,12 @@ fn main() {\n         yield;\n     };\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n-    match panic::catch_unwind(move || foo.resume()) {\n+    match panic::catch_unwind(move || unsafe { foo.resume() }) {\n         Ok(_) => panic!(\"generator successfully resumed\"),\n         Err(_) => {}\n     }"}, {"sha": "7395c8484c169acd16d937e1ea81ff1748860aa5", "filename": "src/test/run-pass/generator/smoke.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -24,7 +24,7 @@ fn simple() {\n         }\n     };\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -40,7 +40,7 @@ fn return_capture() {\n         a\n     };\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -52,11 +52,11 @@ fn simple_yield() {\n         yield;\n     };\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -69,11 +69,11 @@ fn yield_capture() {\n         yield b;\n     };\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Yielded(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -86,11 +86,11 @@ fn simple_yield_value() {\n         return String::from(\"foo\")\n     };\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Yielded(ref s) if *s == \"bar\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -104,11 +104,11 @@ fn return_after_yield() {\n         return a\n     };\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -156,11 +156,11 @@ fn send_and_sync() {\n fn send_over_threads() {\n     let mut foo = || { yield };\n     thread::spawn(move || {\n-        match foo.resume() {\n+        match unsafe { foo.resume() } {\n             GeneratorState::Yielded(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match foo.resume() {\n+        match unsafe { foo.resume() } {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n@@ -169,11 +169,11 @@ fn send_over_threads() {\n     let a = String::from(\"a\");\n     let mut foo = || { yield a };\n     thread::spawn(move || {\n-        match foo.resume() {\n+        match unsafe { foo.resume() } {\n             GeneratorState::Yielded(ref s) if *s == \"a\" => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match foo.resume() {\n+        match unsafe { foo.resume() } {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }"}, {"sha": "ebc070eee09c1c7874d67c81fe414aa450e2d420", "filename": "src/test/run-pass/generator/static-generators.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fstatic-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fstatic-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fstatic-generators.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -13,14 +13,14 @@\n use std::ops::{Generator, GeneratorState};\n \n fn main() {\n-    let mut generator = unsafe {\n-        static || {\n-            let a = true;\n-            let b = &a;\n-            yield;\n-            assert_eq!(b as *const _, &a as *const _);\n-        }\n+    let mut generator = static || {\n+        let a = true;\n+        let b = &a;\n+        yield;\n+        assert_eq!(b as *const _, &a as *const _);\n     };\n-    assert_eq!(generator.resume(), GeneratorState::Yielded(()));\n-    assert_eq!(generator.resume(), GeneratorState::Complete(()));\n+    unsafe {\n+        assert_eq!(generator.resume(), GeneratorState::Yielded(()));\n+        assert_eq!(generator.resume(), GeneratorState::Complete(()));\n+    }\n }"}, {"sha": "8eeb013314499e882b2c75c94af79ab70d9216bb", "filename": "src/test/run-pass/generator/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -17,5 +17,5 @@ extern crate xcrate_reachable as foo;\n use std::ops::Generator;\n \n fn main() {\n-    foo::foo().resume();\n+    unsafe { foo::foo().resume(); }\n }"}, {"sha": "04791d51356772e52b93679abad2ce06f0717360", "filename": "src/test/run-pass/generator/xcrate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -19,18 +19,18 @@ use std::ops::{GeneratorState, Generator};\n fn main() {\n     let mut foo = xcrate::foo();\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n     let mut foo = xcrate::bar(3);\n \n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Yielded(3) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match foo.resume() {\n+    match unsafe { foo.resume() } {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }"}, {"sha": "e56927d81823131b1e38e66cbff0394b743489fe", "filename": "src/test/ui/generator/borrowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -15,7 +15,7 @@ use std::ops::Generator;\n fn main() {\n     let _b = {\n         let a = 3;\n-        (|| yield &a).resume()\n+        unsafe { (|| yield &a).resume() }\n         //~^ ERROR: `a` does not live long enough\n     };\n "}, {"sha": "45d950b5aef646f9c24710e3159aa1fc1061a8ad", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -1,10 +1,10 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:18:20\n+  --> $DIR/borrowing.rs:18:29\n    |\n-LL |         (|| yield &a).resume()\n-   |          --        ^ borrowed value does not live long enough\n-   |          |\n-   |          capture occurs here\n+LL |         unsafe { (|| yield &a).resume() }\n+   |                   --        ^ borrowed value does not live long enough\n+   |                   |\n+   |                   capture occurs here\n LL |         //~^ ERROR: `a` does not live long enough\n LL |     };\n    |     - borrowed value only lives until here"}, {"sha": "b2240fb225f58dd51045fd28580627e2d1bff70d", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -23,6 +23,6 @@ fn main() {\n         let _d = ref_.take(); //~ ERROR `ref_` does not live long enough\n         yield;\n     };\n-    gen.resume();\n+    unsafe { gen.resume(); }\n     // drops the RefCell and then the Ref, leading to use-after-free\n }"}, {"sha": "a1c8ca77e41e8bf34ff228ae6c5470f98be8167a", "filename": "src/test/ui/generator/sized-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -17,5 +17,5 @@ fn main() {\n    let mut gen = move || { //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n        yield s[..];\n    };\n-   gen.resume(); //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+   unsafe { gen.resume(); } //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n }"}, {"sha": "957fac172c2588dd071245ec89e53b1bd7b5e1cd", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -11,10 +11,10 @@ LL | |    };\n    = note: the yield type of a generator must have a statically known size\n \n error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n-  --> $DIR/sized-yield.rs:20:8\n+  --> $DIR/sized-yield.rs:20:17\n    |\n-LL |    gen.resume(); //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n-   |        ^^^^^^ `str` does not have a constant size known at compile-time\n+LL |    unsafe { gen.resume(); } //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+   |                 ^^^^^^ `str` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n "}, {"sha": "45acbf50931bc5234863f8bd59304072786d74eb", "filename": "src/test/ui/generator/unsafe-immovable.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/311814a1a963247df61a2725150a2f3fb37218df/src%2Ftest%2Fui%2Fgenerator%2Funsafe-immovable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311814a1a963247df61a2725150a2f3fb37218df/src%2Ftest%2Fui%2Fgenerator%2Funsafe-immovable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Funsafe-immovable.rs?ref=311814a1a963247df61a2725150a2f3fb37218df", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(generators)]\n-\n-fn main() {\n-    static || { //~ ERROR: construction of immovable generator requires unsafe\n-        yield;\n-    };\n-}"}, {"sha": "b2add55613d547d1bf7646f244452e18bf83ec2d", "filename": "src/test/ui/generator/unsafe-immovable.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/311814a1a963247df61a2725150a2f3fb37218df/src%2Ftest%2Fui%2Fgenerator%2Funsafe-immovable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/311814a1a963247df61a2725150a2f3fb37218df/src%2Ftest%2Fui%2Fgenerator%2Funsafe-immovable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Funsafe-immovable.stderr?ref=311814a1a963247df61a2725150a2f3fb37218df", "patch": "@@ -1,11 +0,0 @@\n-error[E0133]: construction of immovable generator requires unsafe function or block\n-  --> $DIR/unsafe-immovable.rs:14:5\n-   |\n-LL | /     static || { //~ ERROR: construction of immovable generator requires unsafe\n-LL | |         yield;\n-LL | |     };\n-   | |_____^ construction of immovable generator\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0133`."}, {"sha": "b8a67a0e7b65d7a788a9667e15cb48a6e8c22796", "filename": "src/test/ui/generator/yield-while-iterating.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -43,7 +43,7 @@ fn yield_during_iter_borrowed_slice_2() {\n     println!(\"{:?}\", x);\n }\n \n-fn yield_during_iter_borrowed_slice_3() {\n+unsafe fn yield_during_iter_borrowed_slice_3() {\n     // OK to take a mutable ref to `x` and yield\n     // up pointers from it:\n     let mut x = vec![22_i32];\n@@ -55,7 +55,7 @@ fn yield_during_iter_borrowed_slice_3() {\n     b.resume();\n }\n \n-fn yield_during_iter_borrowed_slice_4() {\n+unsafe fn yield_during_iter_borrowed_slice_4() {\n     // ...but not OK to do that while reading\n     // from `x` too\n     let mut x = vec![22_i32];\n@@ -68,7 +68,7 @@ fn yield_during_iter_borrowed_slice_4() {\n     b.resume();\n }\n \n-fn yield_during_range_iter() {\n+unsafe fn yield_during_range_iter() {\n     // Should be OK.\n     let mut b = || {\n         let v = vec![1,2,3];"}, {"sha": "3dc2650a2ecbf5e649f009af80cc347957e00cb2", "filename": "src/test/ui/generator/yield-while-local-borrowed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -15,7 +15,7 @@\n use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n \n-fn borrow_local_inline() {\n+unsafe fn borrow_local_inline() {\n     // Not OK to yield with a borrow of a temporary.\n     //\n     // (This error occurs because the region shows up in the type of\n@@ -30,7 +30,7 @@ fn borrow_local_inline() {\n     b.resume();\n }\n \n-fn borrow_local_inline_done() {\n+unsafe fn borrow_local_inline_done() {\n     // No error here -- `a` is not in scope at the point of `yield`.\n     let mut b = move || {\n         {\n@@ -41,7 +41,7 @@ fn borrow_local_inline_done() {\n     b.resume();\n }\n \n-fn borrow_local() {\n+unsafe fn borrow_local() {\n     // Not OK to yield with a borrow of a temporary.\n     //\n     // (This error occurs because the region shows up in the type of"}, {"sha": "573dd4377bb2c170629b05d169358f40e464aee3", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b89221f1fb3384ee707cef4bb78ab7fb6296ac/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs?ref=e2b89221f1fb3384ee707cef4bb78ab7fb6296ac", "patch": "@@ -13,7 +13,7 @@\n use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n \n-fn reborrow_shared_ref(x: &i32) {\n+unsafe fn reborrow_shared_ref(x: &i32) {\n     // This is OK -- we have a borrow live over the yield, but it's of\n     // data that outlives the generator.\n     let mut b = move || {\n@@ -24,7 +24,7 @@ fn reborrow_shared_ref(x: &i32) {\n     b.resume();\n }\n \n-fn reborrow_mutable_ref(x: &mut i32) {\n+unsafe fn reborrow_mutable_ref(x: &mut i32) {\n     // This is OK -- we have a borrow live over the yield, but it's of\n     // data that outlives the generator.\n     let mut b = move || {\n@@ -35,7 +35,7 @@ fn reborrow_mutable_ref(x: &mut i32) {\n     b.resume();\n }\n \n-fn reborrow_mutable_ref_2(x: &mut i32) {\n+unsafe fn reborrow_mutable_ref_2(x: &mut i32) {\n     // ...but not OK to go on using `x`.\n     let mut b = || {\n         let a = &mut *x;"}]}