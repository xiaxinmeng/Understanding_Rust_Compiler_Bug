{"sha": "0a193712431d61cd70dda517b88c564a411b3541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMTkzNzEyNDMxZDYxY2Q3MGRkYTUxN2I4OGM1NjRhNDExYjM1NDE=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-25T13:36:59Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:31:35Z"}, "message": "Add predecessors fn to ReadOnlyBodyCache, fix more Body -> (ReadOnly)BodyCache type errors", "tree": {"sha": "b255cf2b043398e10330c85c968996339679386f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b255cf2b043398e10330c85c968996339679386f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a193712431d61cd70dda517b88c564a411b3541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a193712431d61cd70dda517b88c564a411b3541", "html_url": "https://github.com/rust-lang/rust/commit/0a193712431d61cd70dda517b88c564a411b3541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a193712431d61cd70dda517b88c564a411b3541/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f1c01ff7d63415cabacefa301b6b4a6814f661", "url": "https://api.github.com/repos/rust-lang/rust/commits/26f1c01ff7d63415cabacefa301b6b4a6814f661", "html_url": "https://github.com/rust-lang/rust/commit/26f1c01ff7d63415cabacefa301b6b4a6814f661"}], "stats": {"total": 99, "additions": 52, "deletions": 47}, "files": [{"sha": "b668247060647d5b73b0d35790cf3f2166b90b3b", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -14,7 +14,6 @@ pub struct Cache {\n     predecessors: Option<IndexVec<BasicBlock, Vec<BasicBlock>>>,\n }\n \n-\n //impl<'tcx, T> rustc_serialize::Encodable for Cache<'tcx, T> {\n //    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n //        Encodable::encode(&(), s)\n@@ -261,6 +260,11 @@ pub struct ReadOnlyBodyCache<'a, 'tcx> {\n }\n \n impl ReadOnlyBodyCache<'a, 'tcx> {\n+    #[inline]\n+    pub fn predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+        self.cache.predecessors.as_ref().unwrap()\n+    }\n+\n     #[inline]\n     pub fn predecessors_for(&self, bb: BasicBlock) -> &[BasicBlock] {\n         self.cache.unwrap_predecessors_for(bb)"}, {"sha": "c464247c4b4c9790db2ae8327d9734e4ae377b75", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -812,7 +812,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_location(\n                 &mut self,\n-                body_cache: & $($mutability)? BodyCache<&'_ $($mutability)? Body<'tcx>>,\n+                body_cache: body_cache_type!($($mutability)? '_, 'tcx),\n                 location: Location\n             ) {\n                 let basic_block = & $($mutability)? body_cache[location.block];"}, {"sha": "44e139889c9380ff23cf29b398dbe9eacadb5e9c", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir;\n use rustc::hir::Node;\n-use rustc::mir::{self, Body, ClearCrossCrate, Local, LocalInfo, Location};\n+use rustc::mir::{self, ClearCrossCrate, Local, LocalInfo, Location, ReadOnlyBodyCache};\n use rustc::mir::{Mutability, Place, PlaceRef, PlaceBase, ProjectionElem};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_index::vec::Idx;\n@@ -529,14 +529,14 @@ fn suggest_ampmut_self<'tcx>(\n // by trying (3.), then (2.) and finally falling back on (1.).\n fn suggest_ampmut<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n+    body_cache: &ReadOnlyBodyCache<'_, 'tcx>,\n     local: Local,\n     local_decl: &mir::LocalDecl<'tcx>,\n     opt_ty_info: Option<Span>,\n ) -> (Span, String) {\n-    let locations = body.find_assignments(local);\n+    let locations = body_cache.find_assignments(local);\n     if !locations.is_empty() {\n-        let assignment_rhs_span = body.source_info(locations[0]).span;\n+        let assignment_rhs_span = body_cache.source_info(locations[0]).span;\n         if let Ok(src) = tcx.sess.source_map().span_to_snippet(assignment_rhs_span) {\n             if let (true, Some(ws_pos)) = (\n                 src.starts_with(\"&'\"),"}, {"sha": "181508a983a16744252e43a70d1e9f06533b55c6", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -1,7 +1,7 @@\n use crate::borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::{Body, Local, Location};\n+use rustc::mir::{Local, Location, ReadOnlyBodyCache};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_data_structures::vec_linked_list as vll;\n \n@@ -60,9 +60,9 @@ impl LocalUseMap {\n     crate fn build(\n         live_locals: &Vec<Local>,\n         elements: &RegionValueElements,\n-        body: &Body<'_>,\n+        body_cache: &ReadOnlyBodyCache<'_, '_>,\n     ) -> Self {\n-        let nones = IndexVec::from_elem_n(None, body.local_decls.len());\n+        let nones = IndexVec::from_elem_n(None, body_cache.local_decls.len());\n         let mut local_use_map = LocalUseMap {\n             first_def_at: nones.clone(),\n             first_use_at: nones.clone(),\n@@ -75,11 +75,11 @@ impl LocalUseMap {\n         }\n \n         let mut locals_with_use_data: IndexVec<Local, bool> =\n-            IndexVec::from_elem_n(false, body.local_decls.len());\n+            IndexVec::from_elem_n(false, body_cache.local_decls.len());\n         live_locals.iter().for_each(|&local| locals_with_use_data[local] = true);\n \n         LocalUseMapBuild { local_use_map: &mut local_use_map, elements, locals_with_use_data }\n-            .visit_body(body);\n+            .visit_body(body_cache);\n \n         local_use_map\n     }"}, {"sha": "3320815688f27b0fb970fe02106f9d4541c6d746", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -3,7 +3,7 @@ use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::{LookupResult, MoveData};\n use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n-use rustc::mir::{Body, Local, Location, Place};\n+use rustc::mir::{Local, Location, Place, ReadOnlyBodyCache};\n use rustc::ty::subst::GenericArg;\n use rustc::ty::Ty;\n \n@@ -97,7 +97,7 @@ fn add_var_uses_regions(typeck: &mut TypeChecker<'_, 'tcx>, local: Local, ty: Ty\n \n pub(super) fn populate_access_facts(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: &Body<'tcx>,\n+    body_cache: &ReadOnlyBodyCache<'_, 'tcx>,\n     location_table: &LocationTable,\n     move_data: &MoveData<'_>,\n     drop_used: &mut Vec<(Local, Location)>,\n@@ -113,14 +113,14 @@ pub(super) fn populate_access_facts(\n             location_table,\n             move_data,\n         }\n-        .visit_body(body);\n+        .visit_body(body_cache);\n \n         facts.var_drop_used.extend(drop_used.iter().map(|&(local, location)| {\n             (local, location_table.mid_index(location))\n         }));\n     }\n \n-    for (local, local_decl) in body.local_decls.iter_enumerated() {\n+    for (local, local_decl) in body_cache.local_decls.iter_enumerated() {\n         add_var_uses_regions(typeck, local, local_decl.ty);\n     }\n }"}, {"sha": "2e164765043d45ad2f2542bb320da562f1c901c3", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -75,46 +75,46 @@ impl<'a, 'tcx> BottomValue for MaybeStorageLive<'a, 'tcx> {\n /// Dataflow analysis that determines whether each local requires storage at a\n /// given location; i.e. whether its storage can go away without being observed.\n pub struct RequiresStorage<'mir, 'tcx> {\n-    body: &'mir Body<'tcx>,\n+    body_cache: &'mir ReadOnlyBodyCache<'mir, 'tcx>,\n     borrowed_locals:\n         RefCell<DataflowResultsRefCursor<'mir, 'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>>,\n }\n \n impl<'mir, 'tcx: 'mir> RequiresStorage<'mir, 'tcx> {\n     pub fn new(\n-        body: &'mir Body<'tcx>,\n+        body_cache: &'mir ReadOnlyBodyCache<'mir, 'tcx>,\n         borrowed_locals: &'mir DataflowResults<'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>,\n     ) -> Self {\n         RequiresStorage {\n-            body,\n-            borrowed_locals: RefCell::new(DataflowResultsCursor::new(borrowed_locals, body)),\n+            body_cache,\n+            borrowed_locals: RefCell::new(DataflowResultsCursor::new(borrowed_locals, body_cache)),\n         }\n     }\n \n     pub fn body(&self) -> &Body<'tcx> {\n-        self.body\n+        &self.body_cache\n     }\n }\n \n impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n     type Idx = Local;\n     fn name() -> &'static str { \"requires_storage\" }\n     fn bits_per_block(&self) -> usize {\n-        self.body.local_decls.len()\n+        self.body_cache.local_decls.len()\n     }\n \n     fn start_block_effect(&self, _sets: &mut BitSet<Local>) {\n         // Nothing is live on function entry (generators only have a self\n         // argument, and we don't care about that)\n-        assert_eq!(1, self.body.arg_count);\n+        assert_eq!(1, self.body_cache.arg_count);\n     }\n \n     fn before_statement_effect(&self, sets: &mut GenKillSet<Self::Idx>, loc: Location) {\n         // If we borrow or assign to a place then it needs storage for that\n         // statement.\n         self.check_for_borrow(sets, loc);\n \n-        let stmt = &self.body[loc.block].statements[loc.statement_index];\n+        let stmt = &self.body_cache[loc.block].statements[loc.statement_index];\n         match stmt.kind {\n             StatementKind::StorageDead(l) => sets.kill(l),\n             StatementKind::Assign(box(ref place, _))\n@@ -146,7 +146,7 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         if let TerminatorKind::Call {\n             destination: Some((Place { base: PlaceBase::Local(local), .. }, _)),\n             ..\n-        } = self.body[loc.block].terminator().kind {\n+        } = self.body_cache[loc.block].terminator().kind {\n             sets.gen(local);\n         }\n     }\n@@ -159,7 +159,7 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         if let TerminatorKind::Call {\n             destination: Some((ref place, _)),\n             ..\n-        } = self.body[loc.block].terminator().kind {\n+        } = self.body_cache[loc.block].terminator().kind {\n             if let Some(local) = place.as_local() {\n                 sets.kill(local);\n             }\n@@ -187,7 +187,7 @@ impl<'mir, 'tcx> RequiresStorage<'mir, 'tcx> {\n             sets,\n             borrowed_locals: &self.borrowed_locals,\n         };\n-        visitor.visit_location(self.body, loc);\n+        visitor.visit_location(&self.body_cache, loc);\n     }\n \n     /// Gen locals that are newly borrowed. This includes borrowing any part of"}, {"sha": "285bdf50d4a254a94233572892d1bf5f79191029", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -186,7 +186,7 @@ use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind, Instance};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n-use rustc::mir::{self, Location, PlaceBase, Static, StaticKind};\n+use rustc::mir::{self, BodyCache, Location, PlaceBase, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n@@ -1249,13 +1249,14 @@ fn collect_neighbours<'tcx>(\n ) {\n     debug!(\"collect_neighbours: {:?}\", instance.def_id());\n     let body = tcx.instance_mir(instance.def);\n+    let body_cache = BodyCache::new(body).read_only();\n \n     MirNeighborCollector {\n         tcx,\n         body: &body,\n         output,\n         param_substs: instance.substs,\n-    }.visit_body(&body);\n+    }.visit_body(&body_cache);\n }\n \n fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {"}, {"sha": "0092c3c86d713b40e630158d1d1cce1860b1a41f", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -1,5 +1,5 @@\n use rustc::mir::{Local, Location};\n-use rustc::mir::Body;\n+use rustc::mir::ReadOnlyBodyCache;\n use rustc::mir::visit::PlaceContext;\n use rustc::mir::visit::Visitor;\n \n@@ -9,7 +9,7 @@ crate trait FindAssignments {\n     fn find_assignments(&self, local: Local) -> Vec<Location>;\n }\n \n-impl<'tcx> FindAssignments for Body<'tcx>{\n+impl<'a, 'tcx> FindAssignments for ReadOnlyBodyCache<'a, 'tcx>{\n     fn find_assignments(&self, local: Local) -> Vec<Location>{\n             let mut visitor = FindLocalAssignmentVisitor{ needle: local, locations: vec![]};\n             visitor.visit_body(self);"}, {"sha": "87e6291a454863fb5f3e84a18935c63fa29ac340", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -57,17 +57,17 @@ pub struct LivenessResult {\n /// Computes which local variables are live within the given function\n /// `mir`, including drops.\n pub fn liveness_of_locals(\n-    body: &Body<'_>,\n+    body_cache: &ReadOnlyBodyCache<'_, '_>,\n ) -> LivenessResult {\n-    let num_live_vars = body.local_decls.len();\n+    let num_live_vars = body_cache.local_decls.len();\n \n-    let def_use: IndexVec<_, DefsUses> = body\n+    let def_use: IndexVec<_, DefsUses> = body_cache\n         .basic_blocks()\n         .iter()\n         .map(|b| block(b, num_live_vars))\n         .collect();\n \n-    let mut outs: IndexVec<_, LiveVarSet> = body\n+    let mut outs: IndexVec<_, LiveVarSet> = body_cache\n         .basic_blocks()\n         .indices()\n         .map(|_| LiveVarSet::new_empty(num_live_vars))\n@@ -83,18 +83,18 @@ pub fn liveness_of_locals(\n     // FIXME(ecstaticmorse): Reverse post-order on the reverse CFG may generate a better iteration\n     // order when cycles are present, but the overhead of computing the reverse CFG may outweigh\n     // any benefits. Benchmark this and find out.\n-    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body.basic_blocks().len());\n-    for (bb, _) in traversal::postorder(body) {\n+    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body_cache.basic_blocks().len());\n+    for (bb, _) in traversal::postorder(body_cache) {\n         dirty_queue.insert(bb);\n     }\n \n     // Add blocks which are not reachable from START_BLOCK to the work queue. These blocks will\n     // be processed after the ones added above.\n-    for bb in body.basic_blocks().indices() {\n+    for bb in body_cache.basic_blocks().indices() {\n         dirty_queue.insert(bb);\n     }\n \n-    let predecessors = body.unwrap_predecessors();\n+    let predecessors = body_cache.predecessors();\n \n     while let Some(bb) = dirty_queue.pop() {\n         // bits = use \u222a (bits - def)"}, {"sha": "01be0f598ed2125876a020c6cebcf509a489d4ac", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a193712431d61cd70dda517b88c564a411b3541/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=0a193712431d61cd70dda517b88c564a411b3541", "patch": "@@ -127,21 +127,21 @@ impl<'tcx> MirPatch<'tcx> {\n         self.make_nop.push(loc);\n     }\n \n-    pub fn apply(self, body: &mut Body<'tcx>) {\n+    pub fn apply(self, body_cache: &mut BodyCache<&'_ mut Body<'tcx>>) {\n         debug!(\"MirPatch: make nops at: {:?}\", self.make_nop);\n         for loc in self.make_nop {\n-            body.make_statement_nop(loc);\n+            body_cache.make_statement_nop(loc);\n         }\n         debug!(\"MirPatch: {:?} new temps, starting from index {}: {:?}\",\n-               self.new_locals.len(), body.local_decls.len(), self.new_locals);\n+               self.new_locals.len(), body_cache.local_decls.len(), self.new_locals);\n         debug!(\"MirPatch: {} new blocks, starting from index {}\",\n-               self.new_blocks.len(), body.basic_blocks().len());\n-        body.basic_blocks_mut().extend(self.new_blocks);\n-        body.local_decls.extend(self.new_locals);\n+               self.new_blocks.len(), body_cache.basic_blocks().len());\n+        body_cache.basic_blocks_mut().extend(self.new_blocks);\n+        body_cache.local_decls.extend(self.new_locals);\n         for (src, patch) in self.patch_map.into_iter_enumerated() {\n             if let Some(patch) = patch {\n                 debug!(\"MirPatch: patching block {:?}\", src);\n-                body[src].terminator_mut().kind = patch;\n+                body_cache[src].terminator_mut().kind = patch;\n             }\n         }\n \n@@ -159,9 +159,9 @@ impl<'tcx> MirPatch<'tcx> {\n                    stmt, loc, delta);\n             loc.statement_index += delta;\n             let source_info = Self::source_info_for_index(\n-                &body[loc.block], loc\n+                &body_cache[loc.block], loc\n             );\n-            body[loc.block].statements.insert(\n+            body_cache[loc.block].statements.insert(\n                 loc.statement_index, Statement {\n                     source_info,\n                     kind: stmt"}]}