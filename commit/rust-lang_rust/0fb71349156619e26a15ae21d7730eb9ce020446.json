{"sha": "0fb71349156619e26a15ae21d7730eb9ce020446", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYjcxMzQ5MTU2NjE5ZTI2YTE1YWUyMWQ3NzMwZWI5Y2UwMjA0NDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-22T15:08:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T15:08:19Z"}, "message": "Merge #4568\n\n4568: Update Chalk r=matklad a=flodiebold\n\nAs always, this just makes compilation work, we don't use the newly available\r\nfunctionality yet.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "653ef20d03cd291855df5ae50c4271cff8545537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653ef20d03cd291855df5ae50c4271cff8545537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fb71349156619e26a15ae21d7730eb9ce020446", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex+rjCRBK7hj4Ov3rIwAAdHIIAKXRV+q5mdfsE8IJJdBNJxPv\nEPsaRLYy49M2pRBhENM4mfsS9UD6CpNTQf7HjjA6O/hqyLJWzZtHqSpVL1LkPOC7\noTKY1hhSLt3IEgDC+juVeBYv2G5Yej5wGk4h/kYtw/uvbwR6RhIEXwaH1M4CE30x\ngbkdHq4I9i5KH9hFLIHB9DGdBiNLYaoCjfrjeNUkSXhEkgFjlFvQt++ZUYh3CYGK\ncW7MjC7ByD01jCpRnLM8vxi92nrI3aCmR6u6A0u7SjGRg7lXZ5OTA4/d9bqHBIg5\n1k2gGIgCA6RhZ4GAVwvoJMvhcFp18PdENouAVHIWkLoavDV8v6If9olh1f02yAk=\n=R7Ur\n-----END PGP SIGNATURE-----\n", "payload": "tree 653ef20d03cd291855df5ae50c4271cff8545537\nparent 5aa3a4c04fa69a44285f26646369dec8d010d063\nparent 06ed140fc7672466bc090fadd95bcf60ed6e82a4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590160099 +0000\ncommitter GitHub <noreply@github.com> 1590160099 +0000\n\nMerge #4568\n\n4568: Update Chalk r=matklad a=flodiebold\n\nAs always, this just makes compilation work, we don't use the newly available\r\nfunctionality yet.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb71349156619e26a15ae21d7730eb9ce020446", "html_url": "https://github.com/rust-lang/rust/commit/0fb71349156619e26a15ae21d7730eb9ce020446", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fb71349156619e26a15ae21d7730eb9ce020446/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa3a4c04fa69a44285f26646369dec8d010d063", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa3a4c04fa69a44285f26646369dec8d010d063", "html_url": "https://github.com/rust-lang/rust/commit/5aa3a4c04fa69a44285f26646369dec8d010d063"}, {"sha": "06ed140fc7672466bc090fadd95bcf60ed6e82a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ed140fc7672466bc090fadd95bcf60ed6e82a4", "html_url": "https://github.com/rust-lang/rust/commit/06ed140fc7672466bc090fadd95bcf60ed6e82a4"}], "stats": {"total": 174, "additions": 94, "deletions": 80}, "files": [{"sha": "007f05b4d03e8d62f036c88363e5b5434a8b1fa5", "filename": "Cargo.lock", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0fb71349156619e26a15ae21d7730eb9ce020446/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0fb71349156619e26a15ae21d7730eb9ce020446/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0fb71349156619e26a15ae21d7730eb9ce020446", "patch": "@@ -114,7 +114,7 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n [[package]]\n name = \"chalk-derive\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -125,7 +125,7 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n dependencies = [\n  \"chalk-macros\",\n  \"rustc-hash\",\n@@ -134,7 +134,7 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -144,15 +144,15 @@ dependencies = [\n [[package]]\n name = \"chalk-macros\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n dependencies = [\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -163,14 +163,14 @@ dependencies = [\n [[package]]\n name = \"chalk-solve\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=3e9c2503ae9c5277c2acb74624dc267876dd89b3#3e9c2503ae9c5277c2acb74624dc267876dd89b3\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n  \"chalk-ir\",\n  \"chalk-macros\",\n  \"chalk-rust-ir\",\n- \"ena 0.13.1\",\n+ \"ena\",\n  \"itertools\",\n  \"petgraph\",\n  \"rustc-hash\",\n@@ -307,15 +307,6 @@ version = \"1.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3\"\n \n-[[package]]\n-name = \"ena\"\n-version = \"0.13.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8944dc8fa28ce4a38f778bd46bf7d923fe73eed5a439398507246c8e017e6f36\"\n-dependencies = [\n- \"log\",\n-]\n-\n [[package]]\n name = \"ena\"\n version = \"0.14.0\"\n@@ -354,9 +345,9 @@ dependencies = [\n \n [[package]]\n name = \"fixedbitset\"\n-version = \"0.1.9\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"86d4de0081402f5e88cdac65c8dcdcc73118c1a7a465e2a05f0da05843a8ea33\"\n+checksum = \"37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d\"\n \n [[package]]\n name = \"fnv\"\n@@ -813,12 +804,6 @@ version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0b631f7e854af39a1739f401cf34a8a013dfe09eac4fa4dba91e9768bd28168d\"\n \n-[[package]]\n-name = \"ordermap\"\n-version = \"0.3.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063\"\n-\n [[package]]\n name = \"parking_lot\"\n version = \"0.10.2\"\n@@ -873,12 +858,12 @@ checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n [[package]]\n name = \"petgraph\"\n-version = \"0.4.13\"\n+version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c3659d1ee90221741f65dd128d9998311b0e40c5d3c23a62445938214abce4f\"\n+checksum = \"29c127eea4a29ec6c85d153c59dc1213f33ec74cead30fe4730aecc88cc1fd92\"\n dependencies = [\n  \"fixedbitset\",\n- \"ordermap\",\n+ \"indexmap\",\n ]\n \n [[package]]\n@@ -1053,7 +1038,7 @@ dependencies = [\n  \"chalk-ir\",\n  \"chalk-rust-ir\",\n  \"chalk-solve\",\n- \"ena 0.14.0\",\n+ \"ena\",\n  \"insta\",\n  \"itertools\",\n  \"log\","}, {"sha": "b2de7fa34cc15874c091b087e4b076435e7f8ac7", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fb71349156619e26a15ae21d7730eb9ce020446/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0fb71349156619e26a15ae21d7730eb9ce020446/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=0fb71349156619e26a15ae21d7730eb9ce020446", "patch": "@@ -27,9 +27,9 @@ test_utils = { path = \"../test_utils\" }\n \n scoped-tls = \"1\"\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"3e9c2503ae9c5277c2acb74624dc267876dd89b3\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"eaab84b394007d1bed15f5470409a6ea02900a96\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"eaab84b394007d1bed15f5470409a6ea02900a96\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"eaab84b394007d1bed15f5470409a6ea02900a96\" }\n \n [dev-dependencies]\n insta = \"0.16.0\""}, {"sha": "c2d7abd17defa25cfa4c549fa55937bfafca4693", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 74, "deletions": 45, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/0fb71349156619e26a15ae21d7730eb9ce020446/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb71349156619e26a15ae21d7730eb9ce020446/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=0fb71349156619e26a15ae21d7730eb9ce020446", "patch": "@@ -4,7 +4,7 @@ use std::{fmt, sync::Arc};\n use log::debug;\n \n use chalk_ir::{\n-    cast::Cast, fold::shift::Shift, interner::HasInterner, Goal, GoalData, Parameter,\n+    cast::Cast, fold::shift::Shift, interner::HasInterner, GenericArg, Goal, GoalData,\n     PlaceholderIndex, TypeName, UniverseIndex,\n };\n \n@@ -26,24 +26,24 @@ pub(super) mod tls;\n pub struct Interner;\n \n impl chalk_ir::interner::Interner for Interner {\n-    type InternedType = Box<chalk_ir::TyData<Self>>;\n+    type InternedType = Box<chalk_ir::TyData<Self>>; // FIXME use Arc?\n     type InternedLifetime = chalk_ir::LifetimeData<Self>;\n-    type InternedParameter = chalk_ir::ParameterData<Self>;\n+    type InternedConst = Arc<chalk_ir::ConstData<Self>>;\n+    type InternedConcreteConst = ();\n+    type InternedGenericArg = chalk_ir::GenericArgData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n     type InternedGoals = Vec<Goal<Self>>;\n-    type InternedSubstitution = Vec<Parameter<Self>>;\n+    type InternedSubstitution = Vec<GenericArg<Self>>;\n     type InternedProgramClause = chalk_ir::ProgramClauseData<Self>;\n     type InternedProgramClauses = Arc<[chalk_ir::ProgramClause<Self>]>;\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n-    type InternedParameterKinds = Vec<chalk_ir::ParameterKind<()>>;\n-    type InternedCanonicalVarKinds = Vec<chalk_ir::ParameterKind<UniverseIndex>>;\n-    type Identifier = TypeAliasId;\n+    type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n+    type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n     type DefId = InternId;\n+    type InternedAdtId = InternId;\n+    type Identifier = TypeAliasId;\n \n-    fn debug_struct_id(\n-        type_kind_id: StructId,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Option<fmt::Result> {\n+    fn debug_adt_id(type_kind_id: StructId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_struct_id(type_kind_id, fmt)))\n     }\n \n@@ -94,11 +94,11 @@ impl chalk_ir::interner::Interner for Interner {\n         tls::with_current_program(|prog| Some(prog?.debug_lifetime(lifetime, fmt)))\n     }\n \n-    fn debug_parameter(\n-        parameter: &Parameter<Interner>,\n+    fn debug_generic_arg(\n+        parameter: &GenericArg<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_parameter(parameter, fmt)))\n+        tls::with_current_program(|prog| Some(prog?.debug_generic_arg(parameter, fmt)))\n     }\n \n     fn debug_goal(goal: &Goal<Interner>, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n@@ -164,17 +164,32 @@ impl chalk_ir::interner::Interner for Interner {\n         lifetime\n     }\n \n-    fn intern_parameter(\n+    fn intern_const(&self, constant: chalk_ir::ConstData<Self>) -> Arc<chalk_ir::ConstData<Self>> {\n+        Arc::new(constant)\n+    }\n+\n+    fn const_data<'a>(\n+        &self,\n+        constant: &'a Arc<chalk_ir::ConstData<Self>>,\n+    ) -> &'a chalk_ir::ConstData<Self> {\n+        constant\n+    }\n+\n+    fn const_eq(&self, _ty: &Box<chalk_ir::TyData<Self>>, _c1: &(), _c2: &()) -> bool {\n+        true\n+    }\n+\n+    fn intern_generic_arg(\n         &self,\n-        parameter: chalk_ir::ParameterData<Self>,\n-    ) -> chalk_ir::ParameterData<Self> {\n+        parameter: chalk_ir::GenericArgData<Self>,\n+    ) -> chalk_ir::GenericArgData<Self> {\n         parameter\n     }\n \n-    fn parameter_data<'a>(\n+    fn generic_arg_data<'a>(\n         &self,\n-        parameter: &'a chalk_ir::ParameterData<Self>,\n-    ) -> &'a chalk_ir::ParameterData<Self> {\n+        parameter: &'a chalk_ir::GenericArgData<Self>,\n+    ) -> &'a chalk_ir::GenericArgData<Self> {\n         parameter\n     }\n \n@@ -199,15 +214,15 @@ impl chalk_ir::interner::Interner for Interner {\n \n     fn intern_substitution<E>(\n         &self,\n-        data: impl IntoIterator<Item = Result<Parameter<Self>, E>>,\n-    ) -> Result<Vec<Parameter<Self>>, E> {\n+        data: impl IntoIterator<Item = Result<GenericArg<Self>, E>>,\n+    ) -> Result<Vec<GenericArg<Self>>, E> {\n         data.into_iter().collect()\n     }\n \n     fn substitution_data<'a>(\n         &self,\n-        substitution: &'a Vec<Parameter<Self>>,\n-    ) -> &'a [Parameter<Self>] {\n+        substitution: &'a Vec<GenericArg<Self>>,\n+    ) -> &'a [GenericArg<Self>] {\n         substitution\n     }\n \n@@ -253,31 +268,31 @@ impl chalk_ir::interner::Interner for Interner {\n         clauses\n     }\n \n-    fn intern_parameter_kinds<E>(\n+    fn intern_generic_arg_kinds<E>(\n         &self,\n-        data: impl IntoIterator<Item = Result<chalk_ir::ParameterKind<()>, E>>,\n-    ) -> Result<Self::InternedParameterKinds, E> {\n+        data: impl IntoIterator<Item = Result<chalk_ir::VariableKind<Self>, E>>,\n+    ) -> Result<Self::InternedVariableKinds, E> {\n         data.into_iter().collect()\n     }\n \n-    fn parameter_kinds_data<'a>(\n+    fn variable_kinds_data<'a>(\n         &self,\n-        parameter_kinds: &'a Self::InternedParameterKinds,\n-    ) -> &'a [chalk_ir::ParameterKind<()>] {\n+        parameter_kinds: &'a Self::InternedVariableKinds,\n+    ) -> &'a [chalk_ir::VariableKind<Self>] {\n         &parameter_kinds\n     }\n \n     fn intern_canonical_var_kinds<E>(\n         &self,\n-        data: impl IntoIterator<Item = Result<chalk_ir::ParameterKind<UniverseIndex>, E>>,\n+        data: impl IntoIterator<Item = Result<chalk_ir::CanonicalVarKind<Self>, E>>,\n     ) -> Result<Self::InternedCanonicalVarKinds, E> {\n         data.into_iter().collect()\n     }\n \n     fn canonical_var_kinds_data<'a>(\n         &self,\n         canonical_var_kinds: &'a Self::InternedCanonicalVarKinds,\n-    ) -> &'a [chalk_ir::ParameterKind<UniverseIndex>] {\n+    ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n         &canonical_var_kinds\n     }\n }\n@@ -290,8 +305,8 @@ pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub type AssociatedTyDatum = chalk_rust_ir::AssociatedTyDatum<Interner>;\n pub type TraitId = chalk_ir::TraitId<Interner>;\n pub type TraitDatum = chalk_rust_ir::TraitDatum<Interner>;\n-pub type StructId = chalk_ir::StructId<Interner>;\n-pub type StructDatum = chalk_rust_ir::StructDatum<Interner>;\n+pub type StructId = chalk_ir::AdtId<Interner>;\n+pub type StructDatum = chalk_rust_ir::AdtDatum<Interner>;\n pub type ImplId = chalk_ir::ImplId<Interner>;\n pub type ImplDatum = chalk_rust_ir::ImplDatum<Interner>;\n pub type AssociatedTyValueId = chalk_rust_ir::AssociatedTyValueId<Interner>;\n@@ -453,14 +468,14 @@ impl ToChalk for TypeCtor {\n             _ => {\n                 // other TypeCtors get interned and turned into a chalk StructId\n                 let struct_id = db.intern_type_ctor(self).into();\n-                TypeName::Struct(struct_id)\n+                TypeName::Adt(struct_id)\n             }\n         }\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, type_name: TypeName<Interner>) -> TypeCtor {\n         match type_name {\n-            TypeName::Struct(struct_id) => db.lookup_intern_type_ctor(struct_id.into()),\n+            TypeName::Adt(struct_id) => db.lookup_intern_type_ctor(struct_id.into()),\n             TypeName::AssociatedType(type_id) => TypeCtor::AssociatedType(from_chalk(db, type_id)),\n             TypeName::OpaqueType(_) => unreachable!(),\n \n@@ -471,6 +486,8 @@ impl ToChalk for TypeCtor {\n             TypeName::Ref(_) => unreachable!(),\n             TypeName::Str => unreachable!(),\n \n+            TypeName::FnDef(_) => unreachable!(),\n+\n             TypeName::Error => {\n                 // this should not be reached, since we don't represent TypeName::Error with TypeCtor\n                 unreachable!()\n@@ -622,7 +639,10 @@ where\n     type Chalk = chalk_ir::Canonical<T::Chalk>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Canonical<T::Chalk> {\n-        let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n+        let parameter = chalk_ir::CanonicalVarKind::new(\n+            chalk_ir::VariableKind::Ty,\n+            chalk_ir::UniverseIndex::ROOT,\n+        );\n         let value = self.value.to_chalk(db);\n         chalk_ir::Canonical {\n             value,\n@@ -738,9 +758,9 @@ where\n     T: HasInterner<Interner = Interner>,\n {\n     chalk_ir::Binders::new(\n-        chalk_ir::ParameterKinds::from(\n+        chalk_ir::VariableKinds::from(\n             &Interner,\n-            std::iter::repeat(chalk_ir::ParameterKind::Ty(())).take(num_vars),\n+            std::iter::repeat(chalk_ir::VariableKind::Ty).take(num_vars),\n         ),\n         value,\n     )\n@@ -819,16 +839,25 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn trait_datum(&self, trait_id: TraitId) -> Arc<TraitDatum> {\n         self.db.trait_datum(self.krate, trait_id)\n     }\n-    fn struct_datum(&self, struct_id: StructId) -> Arc<StructDatum> {\n+    fn adt_datum(&self, struct_id: StructId) -> Arc<StructDatum> {\n         self.db.struct_datum(self.krate, struct_id)\n     }\n     fn impl_datum(&self, impl_id: ImplId) -> Arc<ImplDatum> {\n         self.db.impl_datum(self.krate, impl_id)\n     }\n+\n+    fn fn_def_datum(\n+        &self,\n+        _fn_def_id: chalk_ir::FnDefId<Interner>,\n+    ) -> Arc<chalk_rust_ir::FnDefDatum<Interner>> {\n+        // We don't yet provide any FnDefs to Chalk\n+        unimplemented!()\n+    }\n+\n     fn impls_for_trait(\n         &self,\n         trait_id: TraitId,\n-        parameters: &[Parameter<Interner>],\n+        parameters: &[GenericArg<Interner>],\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n@@ -1000,7 +1029,7 @@ pub(crate) fn struct_datum_query(\n     struct_id: StructId,\n ) -> Arc<StructDatum> {\n     debug!(\"struct_datum {:?}\", struct_id);\n-    let type_ctor: TypeCtor = from_chalk(db, TypeName::Struct(struct_id));\n+    let type_ctor: TypeCtor = from_chalk(db, TypeName::Adt(struct_id));\n     debug!(\"struct {:?} = {:?}\", struct_id, type_ctor);\n     let num_params = type_ctor.num_ty_params(db);\n     let upstream = type_ctor.krate(db) != Some(krate);\n@@ -1012,12 +1041,12 @@ pub(crate) fn struct_datum_query(\n             convert_where_clauses(db, generic_def, &bound_vars)\n         })\n         .unwrap_or_else(Vec::new);\n-    let flags = chalk_rust_ir::StructFlags {\n+    let flags = chalk_rust_ir::AdtFlags {\n         upstream,\n         // FIXME set fundamental flag correctly\n         fundamental: false,\n     };\n-    let struct_datum_bound = chalk_rust_ir::StructDatumBound {\n+    let struct_datum_bound = chalk_rust_ir::AdtDatumBound {\n         fields: Vec::new(), // FIXME add fields (only relevant for auto traits)\n         where_clauses,\n     };\n@@ -1153,7 +1182,7 @@ impl From<StructId> for crate::TypeCtorId {\n \n impl From<crate::TypeCtorId> for StructId {\n     fn from(type_ctor_id: crate::TypeCtorId) -> Self {\n-        chalk_ir::StructId(type_ctor_id.as_intern_id())\n+        chalk_ir::AdtId(type_ctor_id.as_intern_id())\n     }\n }\n "}, {"sha": "b7eb49d7b64aa485640f5bf8b894a9b4ee53bd73", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fb71349156619e26a15ae21d7730eb9ce020446/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb71349156619e26a15ae21d7730eb9ce020446/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=0fb71349156619e26a15ae21d7730eb9ce020446", "patch": "@@ -1,7 +1,7 @@\n //! Implementation of Chalk debug helper functions using TLS.\n use std::fmt;\n \n-use chalk_ir::{AliasTy, Goal, Goals, Lifetime, Parameter, ProgramClauseImplication, TypeName};\n+use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplication, TypeName};\n use itertools::Itertools;\n \n use super::{from_chalk, Interner};\n@@ -18,7 +18,7 @@ impl DebugContext<'_> {\n         id: super::StructId,\n         f: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let type_ctor: TypeCtor = from_chalk(self.0, TypeName::Struct(id));\n+        let type_ctor: TypeCtor = from_chalk(self.0, TypeName::Adt(id));\n         match type_ctor {\n             TypeCtor::Bool => write!(f, \"bool\")?,\n             TypeCtor::Char => write!(f, \"char\")?,\n@@ -188,9 +188,9 @@ impl DebugContext<'_> {\n         write!(fmt, \"{:?}\", lifetime.data(&Interner))\n     }\n \n-    pub fn debug_parameter(\n+    pub fn debug_generic_arg(\n         &self,\n-        parameter: &Parameter<Interner>,\n+        parameter: &GenericArg<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", parameter.data(&Interner).inner_debug())"}]}