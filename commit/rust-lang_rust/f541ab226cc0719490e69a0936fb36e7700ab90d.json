{"sha": "f541ab226cc0719490e69a0936fb36e7700ab90d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NDFhYjIyNmNjMDcxOTQ5MGU2OWEwOTM2ZmIzNmU3NzAwYWI5MGQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-15T15:58:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-15T16:16:48Z"}, "message": "Make cloudapi enums #[non_exhaustive]", "tree": {"sha": "8fef3163e4f97db7490812719dc0ac9765132a80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fef3163e4f97db7490812719dc0ac9765132a80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f541ab226cc0719490e69a0936fb36e7700ab90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f541ab226cc0719490e69a0936fb36e7700ab90d", "html_url": "https://github.com/rust-lang/rust/commit/f541ab226cc0719490e69a0936fb36e7700ab90d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f541ab226cc0719490e69a0936fb36e7700ab90d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea505fd60b09bbfb127c874a27abac52d44bfe00", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea505fd60b09bbfb127c874a27abac52d44bfe00", "html_url": "https://github.com/rust-lang/rust/commit/ea505fd60b09bbfb127c874a27abac52d44bfe00"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "cd9a5ad448f58c31b099818351b39f600b4c9f21", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f541ab226cc0719490e69a0936fb36e7700ab90d/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f541ab226cc0719490e69a0936fb36e7700ab90d/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=f541ab226cc0719490e69a0936fb36e7700ab90d", "patch": "@@ -121,6 +121,7 @@ include!(\"bitflags.rs\");\n /// File or memory access pattern advisory information.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum advice {\n   /// The application expects that it will not access the\n   /// specified data in the near future.\n@@ -140,12 +141,12 @@ pub enum advice {\n   /// The application expects to access the specified data\n   /// in the near future.\n   WILLNEED   = 6,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Enumeration describing the kind of value stored in [`auxv`](struct.auxv.html).\n #[repr(u32)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum auxtype {\n   /// Base address of the binary argument data provided to\n   /// [`proc_exec()`](fn.proc_exec.html).\n@@ -210,12 +211,12 @@ pub enum auxtype {\n   SYSINFO_EHDR = 262,\n   /// Thread ID of the initial thread of the process.\n   TID          = 261,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u32,\n }\n \n /// Identifiers for clocks.\n #[repr(u32)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum clockid {\n   /// The system-wide monotonic clock, which is defined as a\n   /// clock measuring real time, whose value cannot be\n@@ -232,7 +233,6 @@ pub enum clockid {\n   REALTIME           = 3,\n   /// The CPU-time clock associated with the current thread.\n   THREAD_CPUTIME_ID  = 4,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u32,\n }\n \n /// A userspace condition variable.\n@@ -267,6 +267,7 @@ pub const DIRCOOKIE_START: dircookie = dircookie(0);\n /// exclusively or merely provided for alignment with POSIX.\n #[repr(u16)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum errno {\n   /// No error occurred. System call completed successfully.\n   SUCCESS        =  0,\n@@ -422,7 +423,6 @@ pub enum errno {\n   XDEV           = 75,\n   /// Extension: Capabilities insufficient.\n   NOTCAPABLE     = 76,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u16,\n }\n \n bitflags! {\n@@ -438,6 +438,7 @@ bitflags! {\n /// Type of a subscription to an event or its occurrence.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum eventtype {\n   /// The time value of clock [`subscription.union.clock.clock_id`](struct.subscription_clock.html#structfield.clock_id)\n   /// has reached timestamp [`subscription.union.clock.timeout`](struct.subscription_clock.html#structfield.timeout).\n@@ -463,7 +464,6 @@ pub enum eventtype {\n   /// The process associated with process descriptor\n   /// [`subscription.union.proc_terminate.fd`](struct.subscription_proc_terminate.html#structfield.fd) has terminated.\n   PROC_TERMINATE = 7,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Exit code generated by a process when exiting.\n@@ -530,6 +530,7 @@ pub type filesize = u64;\n /// The type of a file descriptor or file.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum filetype {\n   /// The type of the file descriptor or file is unknown or\n   /// is different from any of the other types specified.\n@@ -558,7 +559,6 @@ pub enum filetype {\n   SOCKET_STREAM    = 130,\n   /// The file refers to a symbolic link inode.\n   SYMBOLIC_LINK    = 144,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -847,12 +847,12 @@ bitflags! {\n /// memory.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum scope {\n   /// The object is stored in private memory.\n   PRIVATE = 4,\n   /// The object is stored in shared memory.\n   SHARED  = 8,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -878,6 +878,7 @@ bitflags! {\n /// Signal condition.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum signal {\n   /// Process abort signal.\n   ///\n@@ -983,7 +984,6 @@ pub enum signal {\n   ///\n   /// Action: Terminates the process.\n   XFSZ   = 26,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n bitflags! {\n@@ -1049,14 +1049,14 @@ pub type userdata = u64;\n /// should be set.\n #[repr(u8)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+#[non_exhaustive]\n pub enum whence {\n   /// Seek relative to current position.\n   CUR = 1,\n   /// Seek relative to end-of-file.\n   END = 2,\n   /// Seek relative to start-of-file.\n   SET = 3,\n-  #[doc(hidden)] _NonExhaustive = -1 as isize as u8,\n }\n \n /// Auxiliary vector entry."}]}