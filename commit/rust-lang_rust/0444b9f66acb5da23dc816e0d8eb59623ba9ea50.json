{"sha": "0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NDRiOWY2NmFjYjVkYTIzZGM4MTZlMGQ4ZWI1OTYyM2JhOWVhNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-27T00:07:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-27T00:07:38Z"}, "message": "Auto merge of #63926 - Centril:rollup-6kckn9n, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #63317 (Do not complain about unused code when used in `impl` `Self` type)\n - #63693 (Fully implement or-pattern parsing)\n - #63836 (VxWorks does not provide a way to set the task name except at creation time)\n - #63845 (Removed a confusing FnOnce example)\n - #63855 (Refactor feature gates)\n - #63921 (add link to FileCheck docs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3121696aba5740b9bb02879924f6997b51b6785e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3121696aba5740b9bb02879924f6997b51b6785e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "html_url": "https://github.com/rust-lang/rust/commit/0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "html_url": "https://github.com/rust-lang/rust/commit/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06"}, {"sha": "9c5c124d788962a65198e1e45987b094fd356914", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5c124d788962a65198e1e45987b094fd356914", "html_url": "https://github.com/rust-lang/rust/commit/9c5c124d788962a65198e1e45987b094fd356914"}], "stats": {"total": 2239, "additions": 1675, "deletions": 564}, "files": [{"sha": "4a0a2720fe44161116254e719ffc8403423606bf", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -185,14 +185,6 @@ pub trait FnMut<Args> : FnOnce<Args> {\n ///\n /// # Examples\n ///\n-/// ## Calling a by-value closure\n-///\n-/// ```\n-/// let x = 5;\n-/// let square_x = move || x * x;\n-/// assert_eq!(square_x(), 25);\n-/// ```\n-///\n /// ## Using a `FnOnce` parameter\n ///\n /// ```"}, {"sha": "d4805a7c7832252731a46186446e7c35298d4a43", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -30,10 +30,11 @@ fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n         Some(Node::Item(..)) |\n         Some(Node::ImplItem(..)) |\n         Some(Node::ForeignItem(..)) |\n-        Some(Node::TraitItem(..)) =>\n-            true,\n-        _ =>\n-            false\n+        Some(Node::TraitItem(..)) |\n+        Some(Node::Variant(..)) |\n+        Some(Node::AnonConst(..)) |\n+        Some(Node::Pat(..)) => true,\n+        _ => false\n     }\n }\n \n@@ -75,7 +76,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 self.check_def_id(res.def_id());\n             }\n             _ if self.in_pat => {},\n-            Res::PrimTy(..) | Res::SelfTy(..) | Res::SelfCtor(..) |\n+            Res::PrimTy(..) | Res::SelfCtor(..) |\n             Res::Local(..) => {}\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), ctor_def_id) => {\n                 let variant_id = self.tcx.parent(ctor_def_id).unwrap();\n@@ -92,6 +93,14 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     self.check_def_id(variant_id);\n                 }\n             }\n+            Res::SelfTy(t, i) => {\n+                if let Some(t) = t {\n+                    self.check_def_id(t);\n+                }\n+                if let Some(i) = i {\n+                    self.check_def_id(i);\n+                }\n+            }\n             Res::ToolMod | Res::NonMacroAttr(..) | Res::Err => {}\n             _ => {\n                 self.check_def_id(res.def_id());\n@@ -271,7 +280,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n                 let res = self.tables.qpath_res(path, pat.hir_id);\n                 self.handle_field_pattern_match(pat, res, fields);\n             }\n-            PatKind::Path(ref qpath @ hir::QPath::TypeRelative(..)) => {\n+            PatKind::Path(ref qpath) => {\n                 let res = self.tables.qpath_res(qpath, pat.hir_id);\n                 self.handle_res(res);\n             }\n@@ -298,6 +307,11 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         }\n         intravisit::walk_ty(self, ty);\n     }\n+\n+    fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n+        self.live_symbols.insert(c.hir_id);\n+        intravisit::walk_anon_const(self, c);\n+    }\n }\n \n fn has_allow_dead_code_or_lang_attr("}, {"sha": "ef896f6a6e8cfa176ef735fac60e026fb8589680", "filename": "src/libstd/sys/vxworks/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fthread.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -77,7 +77,7 @@ impl Thread {\n     }\n \n     pub fn set_name(_name: &CStr) {\n-        assert!(false, \"FIXME: set_name\");\n+        // VxWorks does not provide a way to set the task name except at creation time\n     }\n \n     pub fn sleep(dur: Duration) {"}, {"sha": "6c0b271c6c5e909dec9d18bcdef3796c6fd27d17", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 123, "deletions": 111, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,12 +1,24 @@\n //! List of the accepted feature gates.\n \n-use crate::symbol::{Symbol, sym};\n+use crate::symbol::sym;\n+use super::{State, Feature};\n \n macro_rules! declare_features {\n-    ($((accepted, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n+    ($(\n+        $(#[doc = $doc:tt])* (accepted, $feature:ident, $ver:expr, $issue:expr, None),\n+    )+) => {\n         /// Those language feature has since been Accepted (it was once Active)\n-        pub const ACCEPTED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, None)),+\n+        pub const ACCEPTED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Accepted,\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     }\n }\n@@ -16,11 +28,11 @@ declare_features! (\n     // feature-group-start: for testing purposes\n     // -------------------------------------------------------------------------\n \n-    // A temporary feature gate used to enable parser extensions needed\n-    // to bootstrap fix for #5723.\n+    /// A temporary feature gate used to enable parser extensions needed\n+    /// to bootstrap fix for #5723.\n     (accepted, issue_5723_bootstrap, \"1.0.0\", None, None),\n-    // These are used to test this portion of the compiler,\n-    // they don't actually mean anything.\n+    /// These are used to test this portion of the compiler,\n+    /// they don't actually mean anything.\n     (accepted, test_accepted_feature, \"1.0.0\", None, None),\n \n     // -------------------------------------------------------------------------\n@@ -31,203 +43,203 @@ declare_features! (\n     // feature-group-start: accepted features\n     // -------------------------------------------------------------------------\n \n-    // Allows using associated `type`s in `trait`s.\n+    /// Allows using associated `type`s in `trait`s.\n     (accepted, associated_types, \"1.0.0\", None, None),\n-    // Allows using assigning a default type to type parameters in algebraic data type definitions.\n+    /// Allows using assigning a default type to type parameters in algebraic data type definitions.\n     (accepted, default_type_params, \"1.0.0\", None, None),\n     // FIXME: explain `globs`.\n     (accepted, globs, \"1.0.0\", None, None),\n-    // Allows `macro_rules!` items.\n+    /// Allows `macro_rules!` items.\n     (accepted, macro_rules, \"1.0.0\", None, None),\n-    // Allows use of `&foo[a..b]` as a slicing syntax.\n+    /// Allows use of `&foo[a..b]` as a slicing syntax.\n     (accepted, slicing_syntax, \"1.0.0\", None, None),\n-    // Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n+    /// Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n     (accepted, struct_variant, \"1.0.0\", None, None),\n-    // Allows indexing tuples.\n+    /// Allows indexing tuples.\n     (accepted, tuple_indexing, \"1.0.0\", None, None),\n-    // Allows the use of `if let` expressions.\n+    /// Allows the use of `if let` expressions.\n     (accepted, if_let, \"1.0.0\", None, None),\n-    // Allows the use of `while let` expressions.\n+    /// Allows the use of `while let` expressions.\n     (accepted, while_let, \"1.0.0\", None, None),\n-    // Allows using `#![no_std]`.\n+    /// Allows using `#![no_std]`.\n     (accepted, no_std, \"1.6.0\", None, None),\n-    // Allows overloading augmented assignment operations like `a += b`.\n+    /// Allows overloading augmented assignment operations like `a += b`.\n     (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n-    // Allows empty structs and enum variants with braces.\n+    /// Allows empty structs and enum variants with braces.\n     (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n-    // Allows `#[deprecated]` attribute.\n+    /// Allows `#[deprecated]` attribute.\n     (accepted, deprecated, \"1.9.0\", Some(29935), None),\n-    // Allows macros to appear in the type position.\n+    /// Allows macros to appear in the type position.\n     (accepted, type_macros, \"1.13.0\", Some(27245), None),\n-    // Allows use of the postfix `?` operator in expressions.\n+    /// Allows use of the postfix `?` operator in expressions.\n     (accepted, question_mark, \"1.13.0\", Some(31436), None),\n-    // Allows `..` in tuple (struct) patterns.\n+    /// Allows `..` in tuple (struct) patterns.\n     (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n-    // Allows some increased flexibility in the name resolution rules,\n-    // especially around globs and shadowing (RFC 1560).\n+    /// Allows some increased flexibility in the name resolution rules,\n+    /// especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n-    // Allows using `Self` and associated types in struct expressions and patterns.\n+    /// Allows using `Self` and associated types in struct expressions and patterns.\n     (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n-    // Allows elision of `'static` lifetimes in `static`s and `const`s.\n+    /// Allows elision of `'static` lifetimes in `static`s and `const`s.\n     (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n-    // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n+    /// Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n     (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n-    // Allows the definition recursive static items.\n+    /// Allows the definition recursive static items.\n     (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n-    // Allows `pub(restricted)` visibilities (RFC 1422).\n+    /// Allows `pub(restricted)` visibilities (RFC 1422).\n     (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n-    // Allows `#![windows_subsystem]`.\n+    /// Allows `#![windows_subsystem]`.\n     (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n-    // Allows `break {expr}` with a value inside `loop`s.\n+    /// Allows `break {expr}` with a value inside `loop`s.\n     (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n-    // Allows numeric fields in struct expressions and patterns.\n+    /// Allows numeric fields in struct expressions and patterns.\n     (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n-    // Allows coercing non capturing closures to function pointers.\n+    /// Allows coercing non capturing closures to function pointers.\n     (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n-    // Allows attributes on struct literal fields.\n+    /// Allows attributes on struct literal fields.\n     (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n-    // Allows the definition of associated constants in `trait` or `impl` blocks.\n+    /// Allows the definition of associated constants in `trait` or `impl` blocks.\n     (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n-    // Allows usage of the `compile_error!` macro.\n+    /// Allows usage of the `compile_error!` macro.\n     (accepted, compile_error, \"1.20.0\", Some(40872), None),\n-    // Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n+    /// Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n     (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n-    // Allows `Drop` types in constants (RFC 1440).\n+    /// Allows `Drop` types in constants (RFC 1440).\n     (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n-    // Allows the sysV64 ABI to be specified on all platforms\n-    // instead of just the platforms on which it is the C ABI.\n+    /// Allows the sysV64 ABI to be specified on all platforms\n+    /// instead of just the platforms on which it is the C ABI.\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n-    // Allows `repr(align(16))` struct attribute (RFC 1358).\n+    /// Allows `repr(align(16))` struct attribute (RFC 1358).\n     (accepted, repr_align, \"1.25.0\", Some(33626), None),\n-    // Allows '|' at beginning of match arms (RFC 1925).\n+    /// Allows '|' at beginning of match arms (RFC 1925).\n     (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n-    // Allows nested groups in `use` items (RFC 2128).\n+    /// Allows nested groups in `use` items (RFC 2128).\n     (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n-    // Allows indexing into constant arrays.\n+    /// Allows indexing into constant arrays.\n     (accepted, const_indexing, \"1.26.0\", Some(29947), None),\n-    // Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n+    /// Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n     (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n-    // Allows `..=` in patterns (RFC 1192).\n+    /// Allows `..=` in patterns (RFC 1192).\n     (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n-    // Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n+    /// Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n     (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n-    // Allows implementing `Clone` for closures where possible (RFC 2132).\n+    /// Allows implementing `Clone` for closures where possible (RFC 2132).\n     (accepted, clone_closures, \"1.26.0\", Some(44490), None),\n-    // Allows implementing `Copy` for closures where possible (RFC 2132).\n+    /// Allows implementing `Copy` for closures where possible (RFC 2132).\n     (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n-    // Allows `impl Trait` in function arguments.\n+    /// Allows `impl Trait` in function arguments.\n     (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n-    // Allows `impl Trait` in function return types.\n+    /// Allows `impl Trait` in function return types.\n     (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n-    // Allows using the `u128` and `i128` types.\n+    /// Allows using the `u128` and `i128` types.\n     (accepted, i128_type, \"1.26.0\", Some(35118), None),\n-    // Allows default match binding modes (RFC 2005).\n+    /// Allows default match binding modes (RFC 2005).\n     (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n-    // Allows `'_` placeholder lifetimes.\n+    /// Allows `'_` placeholder lifetimes.\n     (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n-    // Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n+    /// Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n     (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n-    // Allows `cfg(target_feature = \"...\")`.\n+    /// Allows `cfg(target_feature = \"...\")`.\n     (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n-    // Allows `#[target_feature(...)]`.\n+    /// Allows `#[target_feature(...)]`.\n     (accepted, target_feature, \"1.27.0\", None, None),\n-    // Allows using `dyn Trait` as a syntax for trait objects.\n+    /// Allows using `dyn Trait` as a syntax for trait objects.\n     (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n-    // Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n+    /// Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n     (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n-    // Allows use of the `:lifetime` macro fragment specifier.\n+    /// Allows use of the `:lifetime` macro fragment specifier.\n     (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n-    // Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n+    /// Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n     (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n-    // Allows the `#[global_allocator]` attribute.\n+    /// Allows the `#[global_allocator]` attribute.\n     (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n-    // Allows `#[repr(transparent)]` attribute on newtype structs.\n+    /// Allows `#[repr(transparent)]` attribute on newtype structs.\n     (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n-    // Allows procedural macros in `proc-macro` crates.\n+    /// Allows procedural macros in `proc-macro` crates.\n     (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n-    // Allows `foo.rs` as an alternative to `foo/mod.rs`.\n+    /// Allows `foo.rs` as an alternative to `foo/mod.rs`.\n     (accepted, non_modrs_mods, \"1.30.0\", Some(44660), None),\n-    // Allows use of the `:vis` macro fragment specifier\n+    /// Allows use of the `:vis` macro fragment specifier\n     (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n-    // Allows importing and reexporting macros with `use`,\n-    // enables macro modularization in general.\n+    /// Allows importing and reexporting macros with `use`,\n+    /// enables macro modularization in general.\n     (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),\n-    // Allows keywords to be escaped for use as identifiers.\n+    /// Allows keywords to be escaped for use as identifiers.\n     (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n-    // Allows attributes scoped to tools.\n+    /// Allows attributes scoped to tools.\n     (accepted, tool_attributes, \"1.30.0\", Some(44690), None),\n-    // Allows multi-segment paths in attributes and derives.\n+    /// Allows multi-segment paths in attributes and derives.\n     (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n-    // Allows all literals in attribute lists and values of key-value pairs.\n+    /// Allows all literals in attribute lists and values of key-value pairs.\n     (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n-    // Allows inferring outlives requirements (RFC 2093).\n+    /// Allows inferring outlives requirements (RFC 2093).\n     (accepted, infer_outlives_requirements, \"1.30.0\", Some(44493), None),\n-    // Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n-    // This defines the behavior of panics.\n+    /// Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n+    /// This defines the behavior of panics.\n     (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n-    // Allows `#[used]` to preserve symbols (see llvm.used).\n+    /// Allows `#[used]` to preserve symbols (see llvm.used).\n     (accepted, used, \"1.30.0\", Some(40289), None),\n-    // Allows `crate` in paths.\n+    /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n-    // Allows resolving absolute paths as paths from other crates.\n+    /// Allows resolving absolute paths as paths from other crates.\n     (accepted, extern_absolute_paths, \"1.30.0\", Some(44660), None),\n-    // Allows access to crate names passed via `--extern` through prelude.\n+    /// Allows access to crate names passed via `--extern` through prelude.\n     (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n-    // Allows parentheses in patterns.\n+    /// Allows parentheses in patterns.\n     (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n-    // Allows the definition of `const fn` functions.\n+    /// Allows the definition of `const fn` functions.\n     (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n-    // Allows scoped lints.\n+    /// Allows scoped lints.\n     (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n-    // Allows lifetime elision in `impl` headers. For example:\n-    // + `impl<I:Iterator> Iterator for &mut Iterator`\n-    // + `impl Debug for Foo<'_>`\n+    /// Allows lifetime elision in `impl` headers. For example:\n+    /// + `impl<I:Iterator> Iterator for &mut Iterator`\n+    /// + `impl Debug for Foo<'_>`\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n-    // Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n+    /// Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n-    // Allows use of the `:literal` macro fragment specifier (RFC 1576).\n+    /// Allows use of the `:literal` macro fragment specifier (RFC 1576).\n     (accepted, macro_literal_matcher, \"1.32.0\", Some(35625), None),\n-    // Allows use of `?` as the Kleene \"at most one\" operator in macros.\n+    /// Allows use of `?` as the Kleene \"at most one\" operator in macros.\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n-    // Allows `Self` struct constructor (RFC 2302).\n+    /// Allows `Self` struct constructor (RFC 2302).\n     (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n-    // Allows `Self` in type definitions (RFC 2300).\n+    /// Allows `Self` in type definitions (RFC 2300).\n     (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n-    // Allows `use x::y;` to search `x` in the current scope.\n+    /// Allows `use x::y;` to search `x` in the current scope.\n     (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n-    // Allows integer match exhaustiveness checking (RFC 2591).\n+    /// Allows integer match exhaustiveness checking (RFC 2591).\n     (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n-    // Allows `use path as _;` and `extern crate c as _;`.\n+    /// Allows `use path as _;` and `extern crate c as _;`.\n     (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n-    // Allows `#[repr(packed(N))]` attribute on structs.\n+    /// Allows `#[repr(packed(N))]` attribute on structs.\n     (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n-    // Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n+    /// Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n     (accepted, irrefutable_let_patterns, \"1.33.0\", Some(44495), None),\n-    // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n+    /// Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n     (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n-    // Allows let bindings, assignments and destructuring in `const` functions and constants.\n-    // As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n-    // at the same time as let bindings.\n+    /// Allows let bindings, assignments and destructuring in `const` functions and constants.\n+    /// As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n+    /// at the same time as let bindings.\n     (accepted, const_let, \"1.33.0\", Some(48821), None),\n-    // Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n+    /// Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n     (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n-    // Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n+    /// Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n     (accepted, if_while_or_patterns, \"1.33.0\", Some(48215), None),\n-    // Allows `cfg(target_vendor = \"...\")`.\n+    /// Allows `cfg(target_vendor = \"...\")`.\n     (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n-    // Allows `extern crate self as foo;`.\n-    // This puts local crate root into extern prelude under name `foo`.\n+    /// Allows `extern crate self as foo;`.\n+    /// This puts local crate root into extern prelude under name `foo`.\n     (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n-    // Allows arbitrary delimited token streams in non-macro attributes.\n+    /// Allows arbitrary delimited token streams in non-macro attributes.\n     (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n-    // Allows paths to enum variants on type aliases including `Self`.\n+    /// Allows paths to enum variants on type aliases including `Self`.\n     (accepted, type_alias_enum_variants, \"1.37.0\", Some(49683), None),\n-    // Allows using `#[repr(align(X))]` on enums with equivalent semantics\n-    // to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n+    /// Allows using `#[repr(align(X))]` on enums with equivalent semantics\n+    /// to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n     (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n-    // Allows `const _: TYPE = VALUE`.\n+    /// Allows `const _: TYPE = VALUE`.\n     (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n-    // Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n+    /// Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n     (accepted, async_await, \"1.39.0\", Some(50547), None),\n \n     // -------------------------------------------------------------------------"}, {"sha": "c947b09fdcb57822b6363976ff90bc6567202c7d", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 171, "deletions": 144, "changes": 315, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -3,6 +3,7 @@\n use crate::edition::Edition;\n use crate::symbol::{Symbol, sym};\n use syntax_pos::Span;\n+use super::{State, Feature};\n \n macro_rules! set {\n     ($field: ident) => {{\n@@ -14,12 +15,24 @@ macro_rules! set {\n }\n \n macro_rules! declare_features {\n-    ($((active, $feature: ident, $ver: expr, $issue: expr, $edition: expr),)+) => {\n+    ($(\n+        $(#[doc = $doc:tt])* (active, $feature:ident, $ver:expr, $issue:expr, $edition:expr),\n+    )+) => {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         pub const ACTIVE_FEATURES:\n-            &[(Symbol, &str, Option<u32>, Option<Edition>, fn(&mut Features, Span))] =\n-            &[$((sym::$feature, $ver, $issue, $edition, set!($feature))),+];\n+            &[Feature] =\n+            &[$(\n+                // (sym::$feature, $ver, $issue, $edition, set!($feature))\n+                Feature {\n+                    state: State::Active { set: set!($feature) },\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: $edition,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+];\n \n         /// A set of features to be used by later passes.\n         #[derive(Clone)]\n@@ -28,7 +41,10 @@ macro_rules! declare_features {\n             pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n             /// `#![feature]` attrs for non-language (library) features\n             pub declared_lib_features: Vec<(Symbol, Span)>,\n-            $(pub $feature: bool),+\n+            $(\n+                $(#[doc = $doc])*\n+                pub $feature: bool\n+            ),+\n         }\n \n         impl Features {\n@@ -49,6 +65,16 @@ macro_rules! declare_features {\n     };\n }\n \n+impl Feature {\n+    /// Set this feature in `Features`. Panics if called on a non-active feature.\n+    pub fn set(&self, features: &mut Features, span: Span) {\n+        match self.state {\n+            State::Active { set } => set(features, span),\n+            _ => panic!(\"Called `set` on feature `{}` which is not `active`\", self.name)\n+        }\n+    }\n+}\n+\n // If you change this, please modify `src/doc/unstable-book` as well.\n //\n // Don't ever remove anything from this list; move them to `removed.rs`.\n@@ -58,7 +84,7 @@ macro_rules! declare_features {\n // stable (active).\n //\n // Note that the features are grouped into internal/user-facing and then\n-// sorted by version inside those groups. This is inforced with tidy.\n+// sorted by version inside those groups. This is enforced with tidy.\n //\n // N.B., `tools/tidy/src/features.rs` parses this information directly out of the\n // source, so take care when modifying it.\n@@ -70,127 +96,127 @@ declare_features! (\n \n     // no-tracking-issue-start\n \n-    // Allows using compiler's own crates.\n+    /// Allows using compiler's own crates.\n     (active, rustc_private, \"1.0.0\", Some(27812), None),\n \n-    // Allows using the `rust-intrinsic`'s \"ABI\".\n+    /// Allows using the `rust-intrinsic`'s \"ABI\".\n     (active, intrinsics, \"1.0.0\", None, None),\n \n-    // Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n+    /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n \n-    // Allows using the `#[stable]` and `#[unstable]` attributes.\n+    /// Allows using the `#[stable]` and `#[unstable]` attributes.\n     (active, staged_api, \"1.0.0\", None, None),\n \n-    // Allows using `#[allow_internal_unstable]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n+    /// Allows using `#[allow_internal_unstable]`. This is an\n+    /// attribute on `macro_rules!` and can't use the attribute handling\n+    /// below (it has to be checked before expansion possibly makes\n+    /// macros disappear).\n     (active, allow_internal_unstable, \"1.0.0\", None, None),\n \n-    // Allows using `#[allow_internal_unsafe]`. This is an\n-    // attribute on `macro_rules!` and can't use the attribute handling\n-    // below (it has to be checked before expansion possibly makes\n-    // macros disappear).\n+    /// Allows using `#[allow_internal_unsafe]`. This is an\n+    /// attribute on `macro_rules!` and can't use the attribute handling\n+    /// below (it has to be checked before expansion possibly makes\n+    /// macros disappear).\n     (active, allow_internal_unsafe, \"1.0.0\", None, None),\n \n-    // Allows using the macros:\n-    // + `__diagnostic_used`\n-    // + `__register_diagnostic`\n-    // +`__build_diagnostic_array`\n+    /// Allows using the macros:\n+    /// + `__diagnostic_used`\n+    /// + `__register_diagnostic`\n+    /// +`__build_diagnostic_array`\n     (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n \n-    // Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n-    // lets a function to be `const` when opted into with `#![feature(foo)]`.\n+    /// Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n+    /// lets a function to be `const` when opted into with `#![feature(foo)]`.\n     (active, rustc_const_unstable, \"1.0.0\", None, None),\n \n-    // no-tracking-issue-end\n+    /// no-tracking-issue-end\n \n-    // Allows using `#[link_name=\"llvm.*\"]`.\n+    /// Allows using `#[link_name=\"llvm.*\"]`.\n     (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n \n-    // Allows using `rustc_*` attributes (RFC 572).\n+    /// Allows using `rustc_*` attributes (RFC 572).\n     (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n \n-    // Allows using `#[on_unimplemented(..)]` on traits.\n+    /// Allows using `#[on_unimplemented(..)]` on traits.\n     (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n \n-    // Allows using the `box $expr` syntax.\n+    /// Allows using the `box $expr` syntax.\n     (active, box_syntax, \"1.0.0\", Some(49733), None),\n \n-    // Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n+    /// Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n     (active, main, \"1.0.0\", Some(29634), None),\n \n-    // Allows using `#[start]` on a function indicating that it is the program entrypoint.\n+    /// Allows using `#[start]` on a function indicating that it is the program entrypoint.\n     (active, start, \"1.0.0\", Some(29633), None),\n \n-    // Allows using the `#[fundamental]` attribute.\n+    /// Allows using the `#[fundamental]` attribute.\n     (active, fundamental, \"1.0.0\", Some(29635), None),\n \n-    // Allows using the `rust-call` ABI.\n+    /// Allows using the `rust-call` ABI.\n     (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n \n-    // Allows using the `#[linkage = \"..\"]` attribute.\n+    /// Allows using the `#[linkage = \"..\"]` attribute.\n     (active, linkage, \"1.0.0\", Some(29603), None),\n \n-    // Allows features specific to OIBIT (auto traits).\n+    /// Allows features specific to OIBIT (auto traits).\n     (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n-    // Allows using `box` in patterns (RFC 469).\n+    /// Allows using `box` in patterns (RFC 469).\n     (active, box_patterns, \"1.0.0\", Some(29641), None),\n \n     // no-tracking-issue-start\n \n-    // Allows using `#[prelude_import]` on glob `use` items.\n+    /// Allows using `#[prelude_import]` on glob `use` items.\n     (active, prelude_import, \"1.2.0\", None, None),\n \n     // no-tracking-issue-end\n \n     // no-tracking-issue-start\n \n-    // Allows using `#[omit_gdb_pretty_printer_section]`.\n+    /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n \n-    // Allows using the `vectorcall` ABI.\n+    /// Allows using the `vectorcall` ABI.\n     (active, abi_vectorcall, \"1.7.0\", None, None),\n \n     // no-tracking-issue-end\n \n-    // Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n+    /// Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n     (active, structural_match, \"1.8.0\", Some(31434), None),\n \n-    // Allows using the `may_dangle` attribute (RFC 1327).\n+    /// Allows using the `may_dangle` attribute (RFC 1327).\n     (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n \n-    // Allows using the `#![panic_runtime]` attribute.\n+    /// Allows using the `#![panic_runtime]` attribute.\n     (active, panic_runtime, \"1.10.0\", Some(32837), None),\n \n-    // Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n+    /// Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n     (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n     // no-tracking-issue-start\n \n-    // Allows identifying the `compiler_builtins` crate.\n+    /// Allows identifying the `compiler_builtins` crate.\n     (active, compiler_builtins, \"1.13.0\", None, None),\n \n-    // Allows using the `unadjusted` ABI; perma-unstable.\n+    /// Allows using the `unadjusted` ABI; perma-unstable.\n     (active, abi_unadjusted, \"1.16.0\", None, None),\n \n-    // Allows identifying crates that contain sanitizer runtimes.\n+    /// Allows identifying crates that contain sanitizer runtimes.\n     (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n-    // Used to identify crates that contain the profiler runtime.\n+    /// Used to identify crates that contain the profiler runtime.\n     (active, profiler_runtime, \"1.18.0\", None, None),\n \n-    // Allows using the `thiscall` ABI.\n+    /// Allows using the `thiscall` ABI.\n     (active, abi_thiscall, \"1.19.0\", None, None),\n \n-    // Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n+    /// Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n     (active, allocator_internals, \"1.20.0\", None, None),\n \n     // no-tracking-issue-end\n \n-    // Added for testing E0705; perma-unstable.\n+    /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", Some(0), Some(Edition::Edition2018)),\n \n     // -------------------------------------------------------------------------\n@@ -228,281 +254,282 @@ declare_features! (\n     // feature-group-start: actual feature gates\n     // -------------------------------------------------------------------------\n \n-    // Allows using the `#[link_args]` attribute.\n+    /// Allows using the `#[link_args]` attribute.\n     (active, link_args, \"1.0.0\", Some(29596), None),\n \n-    // Allows defining identifiers beyond ASCII.\n+    /// Allows defining identifiers beyond ASCII.\n     (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n \n-    // Allows using `#[plugin_registrar]` on functions.\n+    /// Allows using `#[plugin_registrar]` on functions.\n     (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n \n-    // Allows using `#![plugin(myplugin)]`.\n+    /// Allows using `#![plugin(myplugin)]`.\n     (active, plugin, \"1.0.0\", Some(29597), None),\n \n-    // Allows using `#[thread_local]` on `static` items.\n+    /// Allows using `#[thread_local]` on `static` items.\n     (active, thread_local, \"1.0.0\", Some(29594), None),\n \n-    // Allows the use of SIMD types in functions declared in `extern` blocks.\n+    /// Allows the use of SIMD types in functions declared in `extern` blocks.\n     (active, simd_ffi, \"1.0.0\", Some(27731), None),\n \n-    // Allows using custom attributes (RFC 572).\n+    /// Allows using custom attributes (RFC 572).\n     (active, custom_attribute, \"1.0.0\", Some(29642), None),\n \n-    // Allows using non lexical lifetimes (RFC 2094).\n+    /// Allows using non lexical lifetimes (RFC 2094).\n     (active, nll, \"1.0.0\", Some(43234), None),\n \n-    // Allows using slice patterns.\n+    /// Allows using slice patterns.\n     (active, slice_patterns, \"1.0.0\", Some(62254), None),\n \n-    // Allows the definition of `const` functions with some advanced features.\n+    /// Allows the definition of `const` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(57563), None),\n \n-    // Allows associated type defaults.\n+    /// Allows associated type defaults.\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n-    // Allows `#![no_core]`.\n+    /// Allows `#![no_core]`.\n     (active, no_core, \"1.3.0\", Some(29639), None),\n \n-    // Allows default type parameters to influence type inference.\n+    /// Allows default type parameters to influence type inference.\n     (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n \n-    // Allows `repr(simd)` and importing the various simd intrinsics.\n+    /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n-    // Allows `extern \"platform-intrinsic\" { ... }`.\n+    /// Allows `extern \"platform-intrinsic\" { ... }`.\n     (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n-    // Allows `#[unwind(..)]`.\n-    //\n-    // Permits specifying whether a function should permit unwinding or abort on unwind.\n+    /// Allows `#[unwind(..)]`.\n+    ///\n+    /// Permits specifying whether a function should permit unwinding or abort on unwind.\n     (active, unwind_attributes, \"1.4.0\", Some(58760), None),\n \n-    // Allows `#[no_debug]`.\n+    /// Allows `#[no_debug]`.\n     (active, no_debug, \"1.5.0\", Some(29721), None),\n \n-    // Allows attributes on expressions and non-item statements.\n+    /// Allows attributes on expressions and non-item statements.\n     (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n \n-    // Allows the use of type ascription in expressions.\n+    /// Allows the use of type ascription in expressions.\n     (active, type_ascription, \"1.6.0\", Some(23416), None),\n \n-    // Allows `cfg(target_thread_local)`.\n+    /// Allows `cfg(target_thread_local)`.\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n \n-    // Allows specialization of implementations (RFC 1210).\n+    /// Allows specialization of implementations (RFC 1210).\n     (active, specialization, \"1.7.0\", Some(31844), None),\n \n-    // Allows using `#[naked]` on functions.\n+    /// Allows using `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n-    // Allows `cfg(target_has_atomic = \"...\")`.\n+    /// Allows `cfg(target_has_atomic = \"...\")`.\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n-    // Allows `X..Y` patterns.\n+    /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n-    // Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n+    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n     (active, never_type, \"1.13.0\", Some(35121), None),\n \n-    // Allows exhaustive pattern matching on types that contain uninhabited types.\n+    /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n \n-    // Allows untagged unions `union U { ... }`.\n+    /// Allows untagged unions `union U { ... }`.\n     (active, untagged_unions, \"1.13.0\", Some(32836), None),\n \n-    // Allows `#[link(..., cfg(..))]`.\n+    /// Allows `#[link(..., cfg(..))]`.\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n-    // Allows `extern \"ptx-*\" fn()`.\n+    /// Allows `extern \"ptx-*\" fn()`.\n     (active, abi_ptx, \"1.15.0\", Some(38788), None),\n \n-    // Allows the `#[repr(i128)]` attribute for enums.\n+    /// Allows the `#[repr(i128)]` attribute for enums.\n     (active, repr128, \"1.16.0\", Some(35118), None),\n \n-    // Allows `#[link(kind=\"static-nobundle\"...)]`.\n+    /// Allows `#[link(kind=\"static-nobundle\"...)]`.\n     (active, static_nobundle, \"1.16.0\", Some(37403), None),\n \n-    // Allows `extern \"msp430-interrupt\" fn()`.\n+    /// Allows `extern \"msp430-interrupt\" fn()`.\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n \n-    // Allows declarative macros 2.0 (`macro`).\n+    /// Allows declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n \n-    // Allows `extern \"x86-interrupt\" fn()`.\n+    /// Allows `extern \"x86-interrupt\" fn()`.\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n-    // Allows overlapping impls of marker traits.\n+    /// Allows overlapping impls of marker traits.\n     (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n-    // Allows a test to fail without failing the whole suite.\n+    /// Allows a test to fail without failing the whole suite.\n     (active, allow_fail, \"1.19.0\", Some(46488), None),\n \n-    // Allows unsized tuple coercion.\n+    /// Allows unsized tuple coercion.\n     (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n \n-    // Allows defining generators.\n+    /// Allows defining generators.\n     (active, generators, \"1.21.0\", Some(43122), None),\n \n-    // Allows `#[doc(cfg(...))]`.\n+    /// Allows `#[doc(cfg(...))]`.\n     (active, doc_cfg, \"1.21.0\", Some(43781), None),\n \n-    // Allows `#[doc(masked)]`.\n+    /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n \n-    // Allows `#[doc(spotlight)]`.\n+    /// Allows `#[doc(spotlight)]`.\n     (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n \n-    // Allows `#[doc(include = \"some-file\")]`.\n+    /// Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n \n-    // Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n+    /// Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n-    // Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n+    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n     (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n \n-    // Allows defining `extern type`s.\n+    /// Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n \n-    // Allows trait methods with arbitrary self types.\n+    /// Allows trait methods with arbitrary self types.\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n-    // Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n+    /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n-    // Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n+    /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n-    // Allows defining `trait X = A + B;` alias items.\n+    /// Allows defining `trait X = A + B;` alias items.\n     (active, trait_alias, \"1.24.0\", Some(41517), None),\n \n-    // Allows infering `'static` outlives requirements (RFC 2093).\n+    /// Allows infering `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n-    // Allows macro invocations in `extern {}` blocks.\n+    /// Allows macro invocations in `extern {}` blocks.\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n \n-    // Allows accessing fields of unions inside `const` functions.\n+    /// Allows accessing fields of unions inside `const` functions.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n \n-    // Allows casting raw pointers to `usize` during const eval.\n+    /// Allows casting raw pointers to `usize` during const eval.\n     (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n \n-    // Allows dereferencing raw pointers during const eval.\n+    /// Allows dereferencing raw pointers during const eval.\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n \n-    // Allows comparing raw pointers during const eval.\n+    /// Allows comparing raw pointers during const eval.\n     (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n \n-    // Allows `#[doc(alias = \"...\")]`.\n+    /// Allows `#[doc(alias = \"...\")]`.\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // Allows inconsistent bounds in where clauses.\n+    /// Allows inconsistent bounds in where clauses.\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n \n-    // Allows `'a: { break 'a; }`.\n+    /// Allows `'a: { break 'a; }`.\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n-    // Allows using `#[doc(keyword = \"...\")]`.\n+    /// Allows using `#[doc(keyword = \"...\")]`.\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n \n-    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n+    /// Allows reinterpretation of the bits of a value of one type as another\n+    /// type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n-    // Allows using `try {...}` expressions.\n+    /// Allows using `try {...}` expressions.\n     (active, try_blocks, \"1.29.0\", Some(31436), None),\n \n-    // Allows defining an `#[alloc_error_handler]`.\n+    /// Allows defining an `#[alloc_error_handler]`.\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n \n-    // Allows using the `amdgpu-kernel` ABI.\n+    /// Allows using the `amdgpu-kernel` ABI.\n     (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n \n-    // Allows panicking during const eval (producing compile-time errors).\n+    /// Allows panicking during const eval (producing compile-time errors).\n     (active, const_panic, \"1.30.0\", Some(51999), None),\n \n-    // Allows `#[marker]` on certain traits allowing overlapping implementations.\n+    /// Allows `#[marker]` on certain traits allowing overlapping implementations.\n     (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n \n-    // Allows macro invocations on modules expressions and statements and\n-    // procedural macros to expand to non-items.\n+    /// Allows macro invocations on modules expressions and statements and\n+    /// procedural macros to expand to non-items.\n     (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n \n-    // Allows unsized rvalues at arguments and parameters.\n+    /// Allows unsized rvalues at arguments and parameters.\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n-    // Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n+    /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n \n-    // Allows non-builtin attributes in inner attribute position.\n+    /// Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    // Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n+    /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n     (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n \n-    // Allows `impl Trait` in bindings (`let`, `const`, `static`).\n+    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n     (active, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n \n-    // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n+    /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n-    // Allows exhaustive integer pattern matching on `usize` and `isize`.\n+    /// Allows exhaustive integer pattern matching on `usize` and `isize`.\n     (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n \n-    // Allows relaxing the coherence rules such that\n-    // `impl<T> ForeignTrait<LocalType> for ForeignType<T> is permitted.\n+    /// Allows relaxing the coherence rules such that\n+    /// `impl<T> ForeignTrait<LocalType> for ForeignType<T> is permitted.\n     (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n \n-    // Allows using `#[ffi_returns_twice]` on foreign functions.\n+    /// Allows using `#[ffi_returns_twice]` on foreign functions.\n     (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n \n-    // Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n+    /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n     (active, const_generics, \"1.34.0\", Some(44580), None),\n \n-    // Allows using `#[optimize(X)]`.\n+    /// Allows using `#[optimize(X)]`.\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n \n-    // Allows using C-variadics.\n+    /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),\n \n-    // Allows the user of associated type bounds.\n+    /// Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n-    // Attributes on formal function params.\n+    /// Attributes on formal function params.\n     (active, param_attrs, \"1.36.0\", Some(60406), None),\n \n-    // Allows calling constructor functions in `const fn`.\n+    /// Allows calling constructor functions in `const fn`.\n     (active, const_constructor, \"1.37.0\", Some(61456), None),\n \n-    // Allows `if/while p && let q = r && ...` chains.\n+    /// Allows `if/while p && let q = r && ...` chains.\n     (active, let_chains, \"1.37.0\", Some(53667), None),\n \n-    // Allows #[repr(transparent)] on enums (RFC 2645).\n+    /// Allows #[repr(transparent)] on enums (RFC 2645).\n     (active, transparent_enums, \"1.37.0\", Some(60405), None),\n \n-    // Allows #[repr(transparent)] on unions (RFC 2645).\n+    /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n \n-    // Allows explicit discriminants on non-unit enum variants.\n+    /// Allows explicit discriminants on non-unit enum variants.\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n \n-    // Allows `impl Trait` with multiple unrelated lifetimes.\n+    /// Allows `impl Trait` with multiple unrelated lifetimes.\n     (active, member_constraints, \"1.37.0\", Some(61977), None),\n \n-    // Allows `async || body` closures.\n+    /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n \n-    // Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests\n+    /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests\n     (active, cfg_doctest, \"1.37.0\", Some(62210), None),\n \n-    // Allows `[x; N]` where `x` is a constant (RFC 2203).\n+    /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n     (active, const_in_array_repeat_expressions, \"1.37.0\", Some(49147), None),\n \n-    // Allows `impl Trait` to be used inside type aliases (RFC 2515).\n+    /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n     (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n-    // Allows the use of or-patterns, e.g. `0 | 1`.\n+    /// Allows the use of or-patterns, e.g. `0 | 1`.\n     (active, or_patterns, \"1.38.0\", Some(54883), None),\n \n     // -------------------------------------------------------------------------"}, {"sha": "f3a9d135125aee6abe08c123b0753080edb57452", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,4 +1,4 @@\n-use super::active::{ACTIVE_FEATURES, Features};\n+use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n@@ -127,17 +127,16 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n }\n \n fn find_lang_feature_issue(feature: Symbol) -> Option<u32> {\n-    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.0 == feature) {\n-        let issue = info.2;\n+    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n         // FIXME (#28244): enforce that active features have issue numbers\n-        // assert!(issue.is_some())\n-        issue\n+        // assert!(info.issue.is_some())\n+        info.issue\n     } else {\n         // search in Accepted, Removed, or Stable Removed features\n         let found = ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES).chain(STABLE_REMOVED_FEATURES)\n-            .find(|t| t.0 == feature);\n+            .find(|t| t.name == feature);\n         match found {\n-            Some(&(_, _, issue, _)) => issue,\n+            Some(&Feature { issue, .. }) => issue,\n             None => panic!(\"Feature `{}` is not declared anywhere\", feature),\n         }\n     }\n@@ -733,13 +732,9 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         }\n     }\n \n-    for &(name, .., f_edition, set) in ACTIVE_FEATURES {\n-        if let Some(f_edition) = f_edition {\n-            if f_edition <= crate_edition {\n-                set(&mut features, DUMMY_SP);\n-                edition_enabled_features.insert(name, crate_edition);\n-            }\n-        }\n+    for feature in active_features_up_to(crate_edition) {\n+        feature.set(&mut features, DUMMY_SP);\n+        edition_enabled_features.insert(feature.name, crate_edition);\n     }\n \n     // Process the edition umbrella feature-gates first, to ensure\n@@ -761,20 +756,17 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n \n             let name = mi.name_or_empty();\n \n-            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n-                if *edition <= crate_edition {\n+            let edition = ALL_EDITIONS.iter().find(|e| name == e.feature_name()).copied();\n+            if let Some(edition) = edition {\n+                if edition <= crate_edition {\n                     continue;\n                 }\n \n-                for &(name, .., f_edition, set) in ACTIVE_FEATURES {\n-                    if let Some(f_edition) = f_edition {\n-                        if f_edition <= *edition {\n-                            // FIXME(Manishearth) there is currently no way to set\n-                            // lib features by edition\n-                            set(&mut features, DUMMY_SP);\n-                            edition_enabled_features.insert(name, *edition);\n-                        }\n-                    }\n+                for feature in active_features_up_to(edition) {\n+                    // FIXME(Manishearth) there is currently no way to set\n+                    // lib features by edition\n+                    feature.set(&mut features, DUMMY_SP);\n+                    edition_enabled_features.insert(feature.name, edition);\n                 }\n             }\n         }\n@@ -829,14 +821,18 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 continue;\n             }\n \n-            let removed = REMOVED_FEATURES.iter().find(|f| name == f.0);\n-            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.0);\n-            if let Some((.., reason)) = removed.or(stable_removed) {\n-                feature_removed(span_handler, mi.span(), *reason);\n-                continue;\n+            let removed = REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            if let Some(Feature { state, .. }) = removed.or(stable_removed) {\n+                if let FeatureState::Removed { reason }\n+                | FeatureState::Stabilized { reason } = state\n+                {\n+                    feature_removed(span_handler, mi.span(), *reason);\n+                    continue;\n+                }\n             }\n \n-            if let Some((_, since, ..)) = ACCEPTED_FEATURES.iter().find(|f| name == f.0) {\n+            if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n                 let since = Some(Symbol::intern(since));\n                 features.declared_lang_features.push((name, mi.span(), since));\n                 continue;\n@@ -851,8 +847,8 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 }\n             }\n \n-            if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n-                set(&mut features, mi.span());\n+            if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n+                f.set(&mut features, mi.span());\n                 features.declared_lang_features.push((name, mi.span(), None));\n                 continue;\n             }\n@@ -864,6 +860,17 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     features\n }\n \n+fn active_features_up_to(edition: Edition) -> impl Iterator<Item=&'static Feature> {\n+    ACTIVE_FEATURES.iter()\n+    .filter(move |feature| {\n+        if let Some(feature_edition) = feature.edition {\n+            feature_edition <= edition\n+        } else {\n+            false\n+        }\n+    })\n+}\n+\n pub fn check_crate(krate: &ast::Crate,\n                    sess: &ParseSess,\n                    features: &Features,"}, {"sha": "1e41667ea411ec9f495459c440516a6820debcd8", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -18,6 +18,39 @@ mod active;\n mod builtin_attrs;\n mod check;\n \n+use std::fmt;\n+use crate::{edition::Edition, symbol::Symbol};\n+use syntax_pos::Span;\n+\n+#[derive(Clone, Copy)]\n+pub enum State {\n+    Accepted,\n+    Active { set: fn(&mut Features, Span) },\n+    Removed { reason: Option<&'static str> },\n+    Stabilized { reason: Option<&'static str> },\n+}\n+\n+impl fmt::Debug for State {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            State::Accepted { .. } => write!(f, \"accepted\"),\n+            State::Active { .. } => write!(f, \"active\"),\n+            State::Removed { .. } => write!(f, \"removed\"),\n+            State::Stabilized { .. } => write!(f, \"stabilized\"),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct Feature {\n+    state: State,\n+    name: Symbol,\n+    since: &'static str,\n+    issue: Option<u32>,\n+    edition: Option<Edition>,\n+    description: &'static str,\n+}\n+\n pub use active::{Features, INCOMPLETE_FEATURES};\n pub use builtin_attrs::{\n     AttributeGate, AttributeType, GatedCfg,"}, {"sha": "ad7d69b3e7372e61441e6c8cc5f159c064cfdc4d", "filename": "src/libsyntax/feature_gate/removed.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,19 +1,42 @@\n //! List of the removed feature gates.\n \n-use crate::symbol::{Symbol, sym};\n+use crate::symbol::sym;\n+use super::{State, Feature};\n \n macro_rules! declare_features {\n-    ($((removed, $feature: ident, $ver: expr, $issue: expr, None, $reason: expr),)+) => {\n+    ($(\n+        $(#[doc = $doc:tt])* (removed, $feature:ident, $ver:expr, $issue:expr, None, $reason:expr),\n+    )+) => {\n         /// Represents unstable features which have since been removed (it was once Active)\n-        pub const REMOVED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, $reason)),+\n+        pub const REMOVED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Removed { reason: $reason },\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     };\n \n-    ($((stable_removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n+    ($(\n+        $(#[doc = $doc:tt])* (stable_removed, $feature:ident, $ver:expr, $issue:expr, None),\n+    )+) => {\n         /// Represents stable features which have since been removed (it was once Accepted)\n-        pub const STABLE_REMOVED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, None)),+\n+        pub const STABLE_REMOVED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Stabilized { reason: None },\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     };\n }\n@@ -25,17 +48,17 @@ declare_features! (\n \n     (removed, import_shadowing, \"1.0.0\", None, None, None),\n     (removed, managed_boxes, \"1.0.0\", None, None, None),\n-    // Allows use of unary negate on unsigned integers, e.g., -e for e: u8\n+    /// Allows use of unary negate on unsigned integers, e.g., -e for e: u8\n     (removed, negate_unsigned, \"1.0.0\", Some(29645), None, None),\n     (removed, reflect, \"1.0.0\", Some(27749), None, None),\n-    // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n+    /// A way to temporarily opt out of opt in copy. This will *never* be accepted.\n     (removed, opt_out_copy, \"1.0.0\", None, None, None),\n     (removed, quad_precision_float, \"1.0.0\", None, None, None),\n     (removed, struct_inherit, \"1.0.0\", None, None, None),\n     (removed, test_removed_feature, \"1.0.0\", None, None, None),\n     (removed, visible_private_types, \"1.0.0\", None, None, None),\n     (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n-    // Allows using items which are missing stability attributes\n+    /// Allows using items which are missing stability attributes\n     (removed, unmarked_api, \"1.0.0\", None, None, None),\n     (removed, allocator, \"1.0.0\", None, None, None),\n     (removed, simd, \"1.0.0\", Some(27731), None,\n@@ -57,18 +80,18 @@ declare_features! (\n      Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n     (removed, panic_implementation, \"1.28.0\", Some(44489), None,\n      Some(\"subsumed by `#[panic_handler]`\")),\n-    // Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n+    /// Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n     (removed, custom_derive, \"1.32.0\", Some(29644), None,\n      Some(\"subsumed by `#[proc_macro_derive]`\")),\n-    // Paths of the form: `extern::foo::bar`\n+    /// Paths of the form: `extern::foo::bar`\n     (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n      Some(\"subsumed by `::foo::bar` paths\")),\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n-    // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n+    /// Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n-    // Allows defining `existential type`s.\n+    /// Allows defining `existential type`s.\n     (removed, existential_type, \"1.38.0\", Some(63063), None,\n      Some(\"removed in favor of `#![feature(type_alias_impl_trait)]`\")),\n "}, {"sha": "25ad2d4404cacd8912fc86a1b543253ec55e4a71", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -971,15 +971,12 @@ impl<'a> Parser<'a> {\n     /// Skips unexpected attributes and doc comments in this position and emits an appropriate\n     /// error.\n     /// This version of parse arg doesn't necessarily require identifier names.\n-    fn parse_arg_general<F>(\n+    fn parse_arg_general(\n         &mut self,\n         is_trait_item: bool,\n         allow_c_variadic: bool,\n-        is_name_required: F,\n-    ) -> PResult<'a, Arg>\n-    where\n-        F: Fn(&token::Token) -> bool\n-    {\n+        is_name_required: impl Fn(&token::Token) -> bool,\n+    ) -> PResult<'a, Arg> {\n         let lo = self.token.span;\n         let attrs = self.parse_arg_attributes()?;\n         if let Some(mut arg) = self.parse_self_arg()? {\n@@ -991,7 +988,7 @@ impl<'a> Parser<'a> {\n         let (pat, ty) = if is_name_required || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (is_name_required:{})\", is_name_required);\n \n-            let pat = self.parse_pat(Some(\"argument name\"))?;\n+            let pat = self.parse_fn_param_pat()?;\n             if let Err(mut err) = self.expect(&token::Colon) {\n                 if let Some(ident) = self.argument_without_type(\n                     &mut err,"}, {"sha": "f7c090b5135e9b5354a12386ac8344b36c96af3d", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,6 +1,7 @@\n use super::{Parser, PResult, Restrictions, PrevTokenKind, TokenType, PathStyle};\n use super::{BlockMode, SemiColonMode};\n use super::{SeqSep, TokenExpectType};\n+use super::pat::{GateOr, PARAM_EXPECTED};\n \n use crate::maybe_recover_from_interpolated_ty_qpath;\n use crate::ptr::P;\n@@ -1175,7 +1176,7 @@ impl<'a> Parser<'a> {\n     fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> {\n         let lo = self.token.span;\n         let attrs = self.parse_arg_attributes()?;\n-        let pat = self.parse_pat(Some(\"argument name\"))?;\n+        let pat = self.parse_pat(PARAM_EXPECTED)?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?\n         } else {\n@@ -1241,19 +1242,20 @@ impl<'a> Parser<'a> {\n         Ok(cond)\n     }\n \n-    /// Parses a `let $pats = $expr` pseudo-expression.\n+    /// Parses a `let $pat = $expr` pseudo-expression.\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;\n-        let pats = self.parse_pats()?;\n+        // FIXME(or_patterns, Centril | dlrobertson): use `parse_top_pat` instead.\n+        let pat = self.parse_top_pat_unpack(GateOr::No)?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(\n             Restrictions::NO_STRUCT_LITERAL,\n             |this| this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n         )?;\n         let span = lo.to(expr.span);\n         self.sess.gated_spans.let_chains.borrow_mut().push(span);\n-        Ok(self.mk_expr(span, ExprKind::Let(pats, expr), attrs))\n+        Ok(self.mk_expr(span, ExprKind::Let(pat, expr), attrs))\n     }\n \n     /// `else` token already eaten\n@@ -1283,7 +1285,7 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let pat = self.parse_top_level_pat()?;\n+        let pat = self.parse_top_pat(GateOr::Yes)?;\n         if !self.eat_keyword(kw::In) {\n             let in_span = self.prev_span.between(self.token.span);\n             self.struct_span_err(in_span, \"missing `in` in `for` loop\")\n@@ -1387,7 +1389,8 @@ impl<'a> Parser<'a> {\n     crate fn parse_arm(&mut self) -> PResult<'a, Arm> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n-        let pats = self.parse_pats()?;\n+        // FIXME(or_patterns, Centril | dlrobertson): use `parse_top_pat` instead.\n+        let pat = self.parse_top_pat_unpack(GateOr::No)?;\n         let guard = if self.eat_keyword(kw::If) {\n             Some(self.parse_expr()?)\n         } else {\n@@ -1448,7 +1451,7 @@ impl<'a> Parser<'a> {\n \n         Ok(ast::Arm {\n             attrs,\n-            pats,\n+            pats: pat, // FIXME(or_patterns, Centril | dlrobertson): this should just be `pat,`.\n             guard,\n             body: expr,\n             span: lo.to(hi),"}, {"sha": "78c9a289b37023dd7649e143e58145752a1d287f", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 194, "deletions": 94, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -12,80 +12,184 @@ use crate::ThinVec;\n \n use errors::{Applicability, DiagnosticBuilder};\n \n+type Expected = Option<&'static str>;\n+\n+/// `Expected` for function and lambda parameter patterns.\n+pub(super) const PARAM_EXPECTED: Expected = Some(\"parameter name\");\n+\n+/// Whether or not an or-pattern should be gated when occurring in the current context.\n+#[derive(PartialEq)]\n+pub enum GateOr { Yes, No }\n+\n+/// Whether or not to recover a `,` when parsing or-patterns.\n+#[derive(PartialEq, Copy, Clone)]\n+enum RecoverComma { Yes, No }\n+\n impl<'a> Parser<'a> {\n     /// Parses a pattern.\n-    pub fn parse_pat(\n+    ///\n+    /// Corresponds to `pat<no_top_alt>` in RFC 2535 and does not admit or-patterns\n+    /// at the top level. Used when parsing the parameters of lambda expressions,\n+    /// functions, function pointers, and `pat` macro fragments.\n+    pub fn parse_pat(&mut self, expected: Expected) -> PResult<'a, P<Pat>> {\n+        self.parse_pat_with_range_pat(true, expected)\n+    }\n+\n+    // FIXME(or_patterns, Centril | dlrobertson):\n+    // remove this and use `parse_top_pat` everywhere it is used instead.\n+    pub(super) fn parse_top_pat_unpack(&mut self, gate_or: GateOr) -> PResult<'a, Vec<P<Pat>>> {\n+        self.parse_top_pat(gate_or)\n+            .map(|pat| pat.and_then(|pat| match pat.node {\n+                PatKind::Or(pats) => pats,\n+                node => vec![self.mk_pat(pat.span, node)],\n+            }))\n+    }\n+\n+    /// Entry point to the main pattern parser.\n+    /// Corresponds to `top_pat` in RFC 2535 and allows or-pattern at the top level.\n+    pub(super) fn parse_top_pat(&mut self, gate_or: GateOr) -> PResult<'a, P<Pat>> {\n+        // Allow a '|' before the pats (RFCs 1925, 2530, and 2535).\n+        let gated_leading_vert = self.eat_or_separator() && gate_or == GateOr::Yes;\n+        let leading_vert_span = self.prev_span;\n+\n+        // Parse the possibly-or-pattern.\n+        let pat = self.parse_pat_with_or(None, gate_or, RecoverComma::Yes)?;\n+\n+        // If we parsed a leading `|` which should be gated,\n+        // and no other gated or-pattern has been parsed thus far,\n+        // then we should really gate the leading `|`.\n+        // This complicated procedure is done purely for diagnostics UX.\n+        if gated_leading_vert {\n+            let mut or_pattern_spans = self.sess.gated_spans.or_patterns.borrow_mut();\n+            if or_pattern_spans.is_empty() {\n+                or_pattern_spans.push(leading_vert_span);\n+            }\n+        }\n+\n+        Ok(pat)\n+    }\n+\n+    /// Parse the pattern for a function or function pointer parameter.\n+    /// Special recovery is provided for or-patterns and leading `|`.\n+    pub(super) fn parse_fn_param_pat(&mut self) -> PResult<'a, P<Pat>> {\n+        self.recover_leading_vert(\"not allowed in a parameter pattern\");\n+        let pat = self.parse_pat_with_or(PARAM_EXPECTED, GateOr::No, RecoverComma::No)?;\n+\n+        if let PatKind::Or(..) = &pat.node {\n+            self.ban_illegal_fn_param_or_pat(&pat);\n+        }\n+\n+        Ok(pat)\n+    }\n+\n+    /// Ban `A | B` immediately in a parameter pattern and suggest wrapping in parens.\n+    fn ban_illegal_fn_param_or_pat(&self, pat: &Pat) {\n+        let msg = \"wrap the pattern in parenthesis\";\n+        let fix = format!(\"({})\", pprust::pat_to_string(pat));\n+        self.struct_span_err(pat.span, \"an or-pattern parameter must be wrapped in parenthesis\")\n+            .span_suggestion(pat.span, msg, fix, Applicability::MachineApplicable)\n+            .emit();\n+    }\n+\n+    /// Parses a pattern, that may be a or-pattern (e.g. `Foo | Bar` in `Some(Foo | Bar)`).\n+    /// Corresponds to `pat<allow_top_alt>` in RFC 2535.\n+    fn parse_pat_with_or(\n         &mut self,\n-        expected: Option<&'static str>\n+        expected: Expected,\n+        gate_or: GateOr,\n+        rc: RecoverComma,\n     ) -> PResult<'a, P<Pat>> {\n-        self.parse_pat_with_range_pat(true, expected)\n+        // Parse the first pattern.\n+        let first_pat = self.parse_pat(expected)?;\n+        self.maybe_recover_unexpected_comma(first_pat.span, rc)?;\n+\n+        // If the next token is not a `|`,\n+        // this is not an or-pattern and we should exit here.\n+        if !self.check(&token::BinOp(token::Or)) && self.token != token::OrOr {\n+            return Ok(first_pat)\n+        }\n+\n+        let lo = first_pat.span;\n+        let mut pats = vec![first_pat];\n+        while self.eat_or_separator() {\n+            let pat = self.parse_pat(expected).map_err(|mut err| {\n+                err.span_label(lo, \"while parsing this or-pattern staring here\");\n+                err\n+            })?;\n+            self.maybe_recover_unexpected_comma(pat.span, rc)?;\n+            pats.push(pat);\n+        }\n+        let or_pattern_span = lo.to(self.prev_span);\n+\n+        // Feature gate the or-pattern if instructed:\n+        if gate_or == GateOr::Yes {\n+            self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n+        }\n+\n+        Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }\n \n-    /// Parses patterns, separated by '|' s.\n-    pub(super) fn parse_pats(&mut self) -> PResult<'a, Vec<P<Pat>>> {\n-        // Allow a '|' before the pats (RFC 1925 + RFC 2530)\n-        self.eat(&token::BinOp(token::Or));\n-\n-        let mut pats = Vec::new();\n-        loop {\n-            pats.push(self.parse_top_level_pat()?);\n-\n-            if self.token == token::OrOr {\n-                self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\")\n-                    .span_suggestion(\n-                        self.token.span,\n-                        \"use a single `|` to specify multiple patterns\",\n-                        \"|\".to_owned(),\n-                        Applicability::MachineApplicable\n-                    )\n-                    .emit();\n+    /// Eat the or-pattern `|` separator.\n+    /// If instead a `||` token is encountered, recover and pretend we parsed `|`.\n+    fn eat_or_separator(&mut self) -> bool {\n+        match self.token.kind {\n+            token::OrOr => {\n+                // Found `||`; Recover and pretend we parsed `|`.\n+                self.ban_unexpected_or_or();\n                 self.bump();\n-            } else if self.eat(&token::BinOp(token::Or)) {\n-                // This is a No-op. Continue the loop to parse the next\n-                // pattern.\n-            } else {\n-                return Ok(pats);\n+                true\n             }\n-        };\n+            _ => self.eat(&token::BinOp(token::Or)),\n+        }\n     }\n \n-    /// A wrapper around `parse_pat` with some special error handling for the\n-    /// \"top-level\" patterns in a match arm, `for` loop, `let`, &c. (in contrast\n-    /// to subpatterns within such).\n-    pub(super) fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n-        let pat = self.parse_pat(None)?;\n-        if self.token == token::Comma {\n-            // An unexpected comma after a top-level pattern is a clue that the\n-            // user (perhaps more accustomed to some other language) forgot the\n-            // parentheses in what should have been a tuple pattern; return a\n-            // suggestion-enhanced error here rather than choking on the comma\n-            // later.\n-            let comma_span = self.token.span;\n-            self.bump();\n-            if let Err(mut err) = self.skip_pat_list() {\n-                // We didn't expect this to work anyway; we just wanted\n-                // to advance to the end of the comma-sequence so we know\n-                // the span to suggest parenthesizing\n-                err.cancel();\n-            }\n-            let seq_span = pat.span.to(self.prev_span);\n-            let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n-            if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n-                err.span_suggestion(\n-                    seq_span,\n-                    \"try adding parentheses to match on a tuple..\",\n-                    format!(\"({})\", seq_snippet),\n-                    Applicability::MachineApplicable\n-                ).span_suggestion(\n-                    seq_span,\n-                    \"..or a vertical bar to match on multiple alternatives\",\n-                    format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n-                    Applicability::MachineApplicable\n-                );\n-            }\n-            return Err(err);\n+    /// We have parsed `||` instead of `|`. Error and suggest `|` instead.\n+    fn ban_unexpected_or_or(&mut self) {\n+        self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\")\n+            .span_suggestion(\n+                self.token.span,\n+                \"use a single `|` to separate multiple alternative patterns\",\n+                \"|\".to_owned(),\n+                Applicability::MachineApplicable\n+            )\n+            .emit();\n+    }\n+\n+    /// Some special error handling for the \"top-level\" patterns in a match arm,\n+    /// `for` loop, `let`, &c. (in contrast to subpatterns within such).\n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span, rc: RecoverComma) -> PResult<'a, ()> {\n+        if rc == RecoverComma::No || self.token != token::Comma {\n+            return Ok(());\n         }\n-        Ok(pat)\n+\n+        // An unexpected comma after a top-level pattern is a clue that the\n+        // user (perhaps more accustomed to some other language) forgot the\n+        // parentheses in what should have been a tuple pattern; return a\n+        // suggestion-enhanced error here rather than choking on the comma later.\n+        let comma_span = self.token.span;\n+        self.bump();\n+        if let Err(mut err) = self.skip_pat_list() {\n+            // We didn't expect this to work anyway; we just wanted to advance to the\n+            // end of the comma-sequence so we know the span to suggest parenthesizing.\n+            err.cancel();\n+        }\n+        let seq_span = lo.to(self.prev_span);\n+        let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n+        if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n+            err.span_suggestion(\n+                seq_span,\n+                \"try adding parentheses to match on a tuple..\",\n+                format!(\"({})\", seq_snippet),\n+                Applicability::MachineApplicable\n+            )\n+            .span_suggestion(\n+                seq_span,\n+                \"..or a vertical bar to match on multiple alternatives\",\n+                format!(\"{}\", seq_snippet.replace(\",\", \" |\")),\n+                Applicability::MachineApplicable\n+            );\n+        }\n+        Err(err)\n     }\n \n     /// Parse and throw away a parentesized comma separated\n@@ -100,40 +204,34 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    /// Parses a pattern, that may be a or-pattern (e.g. `Some(Foo | Bar)`).\n-    fn parse_pat_with_or(&mut self, expected: Option<&'static str>) -> PResult<'a, P<Pat>> {\n-        // Parse the first pattern.\n-        let first_pat = self.parse_pat(expected)?;\n-\n-        // If the next token is not a `|`, this is not an or-pattern and\n-        // we should exit here.\n-        if !self.check(&token::BinOp(token::Or)) {\n-            return Ok(first_pat)\n-        }\n+    /// Recursive possibly-or-pattern parser with recovery for an erroneous leading `|`.\n+    /// See `parse_pat_with_or` for details on parsing or-patterns.\n+    fn parse_pat_with_or_inner(&mut self) -> PResult<'a, P<Pat>> {\n+        self.recover_leading_vert(\"only allowed in a top-level pattern\");\n+        self.parse_pat_with_or(None, GateOr::Yes, RecoverComma::No)\n+    }\n \n-        let lo = first_pat.span;\n+    /// Recover if `|` or `||` is here.\n+    /// The user is thinking that a leading `|` is allowed in this position.\n+    fn recover_leading_vert(&mut self, ctx: &str) {\n+        if let token::BinOp(token::Or) | token::OrOr = self.token.kind {\n+            let span = self.token.span;\n+            let rm_msg = format!(\"remove the `{}`\", pprust::token_to_string(&self.token));\n \n-        let mut pats = vec![first_pat];\n+            self.struct_span_err(span, &format!(\"a leading `|` is {}\", ctx))\n+                .span_suggestion(span, &rm_msg, String::new(), Applicability::MachineApplicable)\n+                .emit();\n \n-        while self.eat(&token::BinOp(token::Or)) {\n-            pats.push(self.parse_pat_with_range_pat(\n-                true, expected\n-            )?);\n+            self.bump();\n         }\n-\n-        let or_pattern_span = lo.to(self.prev_span);\n-\n-        self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n-\n-        Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }\n \n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are\n     /// allowed).\n     fn parse_pat_with_range_pat(\n         &mut self,\n         allow_range_pat: bool,\n-        expected: Option<&'static str>,\n+        expected: Expected,\n     ) -> PResult<'a, P<Pat>> {\n         maybe_recover_from_interpolated_ty_qpath!(self, true);\n         maybe_whole!(self, NtPat, |x| x);\n@@ -144,7 +242,11 @@ impl<'a> Parser<'a> {\n             token::OpenDelim(token::Paren) => self.parse_pat_tuple_or_parens()?,\n             token::OpenDelim(token::Bracket) => {\n                 // Parse `[pat, pat,...]` as a slice pattern.\n-                PatKind::Slice(self.parse_delim_comma_seq(token::Bracket, |p| p.parse_pat(None))?.0)\n+                let (pats, _) = self.parse_delim_comma_seq(\n+                    token::Bracket,\n+                    |p| p.parse_pat_with_or_inner(),\n+                )?;\n+                PatKind::Slice(pats)\n             }\n             token::DotDot => {\n                 self.bump();\n@@ -255,7 +357,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse `&pat` / `&mut pat`.\n-    fn parse_pat_deref(&mut self, expected: Option<&'static str>) -> PResult<'a, PatKind> {\n+    fn parse_pat_deref(&mut self, expected: Expected) -> PResult<'a, PatKind> {\n         self.expect_and()?;\n         let mutbl = self.parse_mutability();\n \n@@ -271,9 +373,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n-        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_with_or(None)\n-        })?;\n+        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or_inner())?;\n \n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n@@ -361,7 +461,7 @@ impl<'a> Parser<'a> {\n     fn fatal_unexpected_non_pat(\n         &mut self,\n         mut err: DiagnosticBuilder<'a>,\n-        expected: Option<&'static str>,\n+        expected: Expected,\n     ) -> PResult<'a, P<Pat>> {\n         self.cancel(&mut err);\n \n@@ -516,7 +616,7 @@ impl<'a> Parser<'a> {\n             err.span_label(self.token.span, msg);\n             return Err(err);\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None))?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or_inner())?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -660,7 +760,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_with_or(None)?;\n+            let pat = self.parse_pat_with_or_inner()?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "651ebf6342e715ac136738c9b474d4f483bc7651", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,6 +1,7 @@\n use super::{Parser, PResult, Restrictions, PrevTokenKind, SemiColonMode, BlockMode};\n use super::expr::LhsExpr;\n use super::path::PathStyle;\n+use super::pat::GateOr;\n \n use crate::ptr::P;\n use crate::{maybe_whole, ThinVec};\n@@ -207,7 +208,7 @@ impl<'a> Parser<'a> {\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Local>> {\n         let lo = self.prev_span;\n-        let pat = self.parse_top_level_pat()?;\n+        let pat = self.parse_top_pat(GateOr::Yes)?;\n \n         let (err, ty) = if self.eat(&token::Colon) {\n             // Save the state of the parser before parsing type normally, in case there is a `:`"}, {"sha": "00de55eeab1f4a7d50419d7252668c2b4f0ef337", "filename": "src/test/codegen/README.md", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fcodegen%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fcodegen%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2FREADME.md?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,2 @@\n+The files here use the LLVM FileCheck framework, documented at\n+<https://llvm.org/docs/CommandGuide/FileCheck.html>."}, {"sha": "5721f5d235783d61102784888bdea8a261bc0cd2", "filename": "src/test/ui/anon-params-denied-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -3,7 +3,7 @@\n // edition:2018\n \n trait T {\n-    fn foo(i32); //~ expected one of `:` or `@`, found `)`\n+    fn foo(i32); //~ expected one of `:`, `@`, or `|`, found `)`\n \n     fn bar_with_default_impl(String, String) {}\n     //~^ ERROR expected one of `:`"}, {"sha": "a58998e4891e09e38f5abc6c4d04277f454e4ff2", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:6:15\n    |\n LL |     fn foo(i32);\n-   |               ^ expected one of `:` or `@` here\n+   |               ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -14,11 +14,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn foo(_: i32);\n    |            ^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:8:36\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                    ^ expected one of `:` or `@` here\n+   |                                    ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -30,11 +30,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn bar_with_default_impl(_: String, String) {}\n    |                              ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:8:44\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                            ^ expected one of `:` or `@` here\n+   |                                            ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -46,11 +46,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn bar_with_default_impl(String, _: String) {}\n    |                                      ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:13:22\n    |\n LL |     fn baz(a:usize, b, c: usize) -> usize {\n-   |                      ^ expected one of `:` or `@` here\n+   |                      ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "010464adf5bce7c441462453bb5301eab4b0209c", "filename": "src/test/ui/derive-uninhabited-enum-38885.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -5,12 +5,15 @@\n // when deriving Debug on an empty enum\n \n #[derive(Debug)]\n-enum Void {} //~ WARN never used\n+enum Void {}\n \n #[derive(Debug)]\n-enum Foo { //~ WARN never used\n+enum Foo {\n     Bar(u8),\n-    Void(Void),\n+    Void(Void), //~ WARN never used\n }\n \n-fn main() {}\n+fn main() {\n+    let x = Foo::Bar(42);\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "a3ed6798a7039cf00974a8f724c5bbba079fb95c", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,14 +1,8 @@\n-warning: enum is never used: `Void`\n-  --> $DIR/derive-uninhabited-enum-38885.rs:8:1\n+warning: variant is never constructed: `Void`\n+  --> $DIR/derive-uninhabited-enum-38885.rs:13:5\n    |\n-LL | enum Void {}\n-   | ^^^^^^^^^\n+LL |     Void(Void),\n+   |     ^^^^^^^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n \n-warning: enum is never used: `Foo`\n-  --> $DIR/derive-uninhabited-enum-38885.rs:11:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-"}, {"sha": "14ad33d53b08c80979724a6e68ff73c3f715f9f5", "filename": "src/test/ui/did_you_mean/multiple-pattern-typo.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.rs?ref=9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    let x = 3;\n-    match x {\n-        1 | 2 || 3 => (), //~ ERROR unexpected token `||` after pattern\n-        _ => (),\n-    }\n-}"}, {"sha": "a29fa584b29241187a8cd0d1421b148fb05fc7c2", "filename": "src/test/ui/did_you_mean/multiple-pattern-typo.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fmultiple-pattern-typo.stderr?ref=9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "patch": "@@ -1,8 +0,0 @@\n-error: unexpected token `||` after pattern\n-  --> $DIR/multiple-pattern-typo.rs:4:15\n-   |\n-LL |         1 | 2 || 3 => (),\n-   |               ^^ help: use a single `|` to specify multiple patterns: `|`\n-\n-error: aborting due to previous error\n-"}, {"sha": "036a6095965bdd0c6689284b0db25d832d60d375", "filename": "src/test/ui/feature-gate/feature-gate-or_patterns.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs?ref=9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "patch": "@@ -1,9 +0,0 @@\n-#![crate_type=\"lib\"]\n-\n-pub fn example(x: Option<usize>) {\n-    match x {\n-        Some(0 | 1 | 2) => {}\n-        //~^ ERROR: or-patterns syntax is experimental\n-        _ => {}\n-    }\n-}"}, {"sha": "1a7b3f43cda145ef9e6941f7860138479b9605a8", "filename": "src/test/ui/lint/lint-dead-code-const-and-self.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+\n+#![deny(dead_code)]\n+\n+const TLC: usize = 4;\n+\n+trait Tr { fn doit(&self); }\n+\n+impl Tr for [usize; TLC] {\n+    fn doit(&self) {\n+        println!(\"called 4\");\n+    }\n+}\n+\n+struct X;\n+struct Y;\n+struct Z;\n+\n+trait Foo<T> {\n+    type Ty;\n+    fn foo() -> Self::Ty;\n+}\n+\n+impl Foo<Y> for X {\n+    type Ty = Z;\n+    fn foo() -> Self::Ty {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    let s = [0,1,2,3];\n+    s.doit();\n+    X::foo();\n+}"}, {"sha": "15b04496ba7b1568ee4144f8b70eb9658c2a182c", "filename": "src/test/ui/lint/lint-dead-code-empty-unused-enum-pub.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum-pub.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,6 @@\n+// build-pass\n+#![deny(unused)]\n+\n+pub enum E {}\n+\n+fn main() {}"}, {"sha": "834681d77e613a9309ae1c510556e86b57ddac02", "filename": "src/test/ui/lint/lint-dead-code-empty-unused-enum.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,5 @@\n+#![deny(unused)]\n+\n+enum E {} //~ ERROR enum is never used\n+\n+fn main() {}"}, {"sha": "4e3bebfc48bde95448bd9e3045cecae36e914828", "filename": "src/test/ui/lint/lint-dead-code-empty-unused-enum.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,15 @@\n+error: enum is never used: `E`\n+  --> $DIR/lint-dead-code-empty-unused-enum.rs:3:1\n+   |\n+LL | enum E {}\n+   | ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-dead-code-empty-unused-enum.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e57fac259c5d55f2f86fd7520bebb0cff35fb46b", "filename": "src/test/ui/lint/lint-dead-code-unused-enum.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,11 @@\n+#![deny(unused)]\n+\n+struct F; //~ ERROR struct is never constructed\n+struct B; //~ ERROR struct is never constructed\n+\n+enum E { //~ ERROR enum is never used\n+    Foo(F),\n+    Bar(B),\n+}\n+\n+fn main() {}"}, {"sha": "ea711e7b05ee69e384952822a057dd7f5393af81", "filename": "src/test/ui/lint/lint-dead-code-unused-enum.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,27 @@\n+error: struct is never constructed: `F`\n+  --> $DIR/lint-dead-code-unused-enum.rs:3:1\n+   |\n+LL | struct F;\n+   | ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-dead-code-unused-enum.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n+\n+error: struct is never constructed: `B`\n+  --> $DIR/lint-dead-code-unused-enum.rs:4:1\n+   |\n+LL | struct B;\n+   | ^^^^^^^^^\n+\n+error: enum is never used: `E`\n+  --> $DIR/lint-dead-code-unused-enum.rs:6:1\n+   |\n+LL | enum E {\n+   | ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3a9061340eb812a66844cf2a198d334780d9afa6", "filename": "src/test/ui/lint/lint-dead-code-unused-variant-pub.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant-pub.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,14 @@\n+// build-pass\n+#![deny(unused)]\n+\n+pub struct F;\n+pub struct B;\n+\n+pub enum E {\n+    Foo(F),\n+    Bar(B),\n+}\n+\n+fn main() {\n+    let _ = E::Foo(F);\n+}"}, {"sha": "69ab29042e5a4594af22ae47c115a02abff112d1", "filename": "src/test/ui/lint/lint-dead-code-unused-variant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,13 @@\n+#![deny(unused)]\n+\n+struct F;\n+struct B;\n+\n+enum E {\n+    Foo(F),\n+    Bar(B), //~ ERROR variant is never constructed\n+}\n+\n+fn main() {\n+    let _ = E::Foo(F);\n+}"}, {"sha": "919996ec3002094d5df4e3fef59c8a2a42e32d3d", "filename": "src/test/ui/lint/lint-dead-code-unused-variant.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,15 @@\n+error: variant is never constructed: `Bar`\n+  --> $DIR/lint-dead-code-unused-variant.rs:8:5\n+   |\n+LL |     Bar(B),\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-dead-code-unused-variant.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "de8e1bba5576cbbf14fbcd1fe2ff4d810513ea6b", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-for.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,8 @@\n+// Test feature gating for a sole leading `|` in `let`.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn gated_leading_vert_in_let() {\n+    for | A in 0 {} //~ ERROR or-patterns syntax is experimental\n+}"}, {"sha": "f520409e8bad62abefd08ec058fdc7b134f7d303", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-for.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-for.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:5:14\n+  --> $DIR/feature-gate-or_patterns-leading-for.rs:7:9\n    |\n-LL |         Some(0 | 1 | 2) => {}\n-   |              ^^^^^^^^^\n+LL |     for | A in 0 {}\n+   |         ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable", "previous_filename": "src/test/ui/feature-gate/feature-gate-or_patterns.stderr"}, {"sha": "a4ea4e25d861e56fe7bdd68a458284e9375089a9", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-let.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,8 @@\n+// Test feature gating for a sole leading `|` in `let`.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn gated_leading_vert_in_let() {\n+    let | A; //~ ERROR or-patterns syntax is experimental\n+}"}, {"sha": "30fd6a1a95effbb910931b4d25d9be0d110e4e50", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading-let.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading-let.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns-leading-let.rs:7:9\n+   |\n+LL |     let | A;\n+   |         ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e638838147a4dd9137d7f2f501cdb67405ee7e3b", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,52 @@\n+fn main() {}\n+\n+pub fn example(x: Option<usize>) {\n+    match x {\n+        Some(0 | 1 | 2) => {}\n+        //~^ ERROR: or-patterns syntax is experimental\n+        _ => {}\n+    }\n+}\n+\n+// Test the `pat` macro fragment parser:\n+macro_rules! accept_pat {\n+    ($p:pat) => {}\n+}\n+\n+accept_pat!((p | q)); //~ ERROR or-patterns syntax is experimental\n+accept_pat!((p | q,)); //~ ERROR or-patterns syntax is experimental\n+accept_pat!(TS(p | q)); //~ ERROR or-patterns syntax is experimental\n+accept_pat!(NS { f: p | q }); //~ ERROR or-patterns syntax is experimental\n+accept_pat!([p | q]); //~ ERROR or-patterns syntax is experimental\n+\n+// Non-macro tests:\n+\n+#[cfg(FALSE)]\n+fn or_patterns() {\n+    // Gated:\n+\n+    let | A | B; //~ ERROR or-patterns syntax is experimental\n+    let A | B; //~ ERROR or-patterns syntax is experimental\n+    for | A | B in 0 {} //~ ERROR or-patterns syntax is experimental\n+    for A | B in 0 {} //~ ERROR or-patterns syntax is experimental\n+    fn fun((A | B): _) {} //~ ERROR or-patterns syntax is experimental\n+    let _ = |(A | B): u8| (); //~ ERROR or-patterns syntax is experimental\n+    let (A | B); //~ ERROR or-patterns syntax is experimental\n+    let (A | B,); //~ ERROR or-patterns syntax is experimental\n+    let A(B | C); //~ ERROR or-patterns syntax is experimental\n+    let E::V(B | C); //~ ERROR or-patterns syntax is experimental\n+    let S { f1: B | C, f2 }; //~ ERROR or-patterns syntax is experimental\n+    let E::V { f1: B | C, f2 }; //~ ERROR or-patterns syntax is experimental\n+    let [A | B]; //~ ERROR or-patterns syntax is experimental\n+\n+    // Top level of `while`, `if`, and `match` arms are allowed:\n+\n+    while let | A = 0 {}\n+    while let A | B = 0 {}\n+    if let | A = 0 {}\n+    if let A | B = 0 {}\n+    match 0 {\n+        | A => {},\n+        A | B => {},\n+    }\n+}"}, {"sha": "aae6644dac2e076ee01242ea526a921add8b1f52", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns.stderr", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,174 @@\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:5:14\n+   |\n+LL |         Some(0 | 1 | 2) => {}\n+   |              ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:28:11\n+   |\n+LL |     let | A | B;\n+   |           ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:29:9\n+   |\n+LL |     let A | B;\n+   |         ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:30:11\n+   |\n+LL |     for | A | B in 0 {}\n+   |           ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:31:9\n+   |\n+LL |     for A | B in 0 {}\n+   |         ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:32:13\n+   |\n+LL |     fn fun((A | B): _) {}\n+   |             ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:33:15\n+   |\n+LL |     let _ = |(A | B): u8| ();\n+   |               ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:34:10\n+   |\n+LL |     let (A | B);\n+   |          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:35:10\n+   |\n+LL |     let (A | B,);\n+   |          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:36:11\n+   |\n+LL |     let A(B | C);\n+   |           ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:37:14\n+   |\n+LL |     let E::V(B | C);\n+   |              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:38:17\n+   |\n+LL |     let S { f1: B | C, f2 };\n+   |                 ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:39:20\n+   |\n+LL |     let E::V { f1: B | C, f2 };\n+   |                    ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:40:10\n+   |\n+LL |     let [A | B];\n+   |          ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:16:14\n+   |\n+LL | accept_pat!((p | q));\n+   |              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:17:14\n+   |\n+LL | accept_pat!((p | q,));\n+   |              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:18:16\n+   |\n+LL | accept_pat!(TS(p | q));\n+   |                ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:19:21\n+   |\n+LL | accept_pat!(NS { f: p | q });\n+   |                     ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:20:14\n+   |\n+LL | accept_pat!([p | q]);\n+   |              ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error: aborting due to 19 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "08730fe8b07b74f030fc217025bc18734fc6498b", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,14 @@\n+// Test the suggestion to wrap an or-pattern as a function parameter in parens.\n+\n+// run-rustfix\n+\n+#![feature(or_patterns)]\n+#![allow(warnings)]\n+\n+fn main() {}\n+\n+enum E { A, B }\n+use E::*;\n+\n+#[cfg(FALSE)]\n+fn fun1((A | B): E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis"}, {"sha": "ed667e0e66067b778255d8ac87952018250ba7b5", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,14 @@\n+// Test the suggestion to wrap an or-pattern as a function parameter in parens.\n+\n+// run-rustfix\n+\n+#![feature(or_patterns)]\n+#![allow(warnings)]\n+\n+fn main() {}\n+\n+enum E { A, B }\n+use E::*;\n+\n+#[cfg(FALSE)]\n+fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis"}, {"sha": "2c6e4d9838ddcf9387a9971ddb6cee44e10031e5", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,8 @@\n+error: an or-pattern parameter must be wrapped in parenthesis\n+  --> $DIR/fn-param-wrap-parens.rs:14:9\n+   |\n+LL | fn fun1(A | B: E) {}\n+   |         ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e308c0adb4eb82b7f47790f73d6e348127d3f930", "filename": "src/test/ui/or-patterns/multiple-pattern-typo.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,45 @@\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    let x = 3;\n+\n+    match x {\n+        1 | 2 || 3 => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    match x {\n+        (1 | 2 || 3) => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    match (x,) {\n+        (1 | 2 || 3,) => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    struct TS(u8);\n+\n+    match TS(x) {\n+        TS(1 | 2 || 3) => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    struct NS { f: u8 }\n+\n+    match (NS { f: x }) {\n+        NS { f: 1 | 2 || 3 } => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    match [x] {\n+        [1 | 2 || 3] => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+\n+    match x {\n+        || 1 | 2 | 3 => (), //~ ERROR unexpected token `||` after pattern\n+        _ => (),\n+    }\n+}"}, {"sha": "c61b5cb2082510d26e700dc26060e3adacd4b486", "filename": "src/test/ui/or-patterns/multiple-pattern-typo.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,52 @@\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:8:15\n+   |\n+LL |         1 | 2 || 3 => (),\n+   |               ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:13:16\n+   |\n+LL |         (1 | 2 || 3) => (),\n+   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:18:16\n+   |\n+LL |         (1 | 2 || 3,) => (),\n+   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:25:18\n+   |\n+LL |         TS(1 | 2 || 3) => (),\n+   |                  ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:32:23\n+   |\n+LL |         NS { f: 1 | 2 || 3 } => (),\n+   |                       ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:37:16\n+   |\n+LL |         [1 | 2 || 3] => (),\n+   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/multiple-pattern-typo.rs:42:9\n+   |\n+LL |         || 1 | 2 | 3 => (),\n+   |         ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/multiple-pattern-typo.rs:1:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "973954bca5a5e823877180da26ca2ddf6a82cc87", "filename": "src/test/ui/or-patterns/or-pattern-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "previous_filename": "src/test/ui/or-pattern-mismatch.rs"}, {"sha": "731b2090a7ba04bc140d7c825bf96c74575b7133", "filename": "src/test/ui/or-patterns/or-pattern-mismatch.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-pattern-mismatch.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "previous_filename": "src/test/ui/or-pattern-mismatch.stderr"}, {"sha": "b676ea851a3ba6b514148defbe5a317705445843", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,53 @@\n+// Test some cases where or-patterns may ostensibly be allowed but are in fact not.\n+// This is not a semantic test. We only test parsing.\n+\n+#![feature(or_patterns)]\n+//~^ WARN the feature `or_patterns` is incomplete and may cause the compiler to crash\n+\n+fn main() {}\n+\n+// Test the `pat` macro fragment parser:\n+macro_rules! accept_pat {\n+    ($p:pat) => {}\n+}\n+\n+accept_pat!(p | q); //~ ERROR no rules expected the token `|`\n+accept_pat!(| p | q); //~ ERROR no rules expected the token `|`\n+\n+// Non-macro tests:\n+\n+enum E { A, B }\n+use E::*;\n+\n+fn no_top_level_or_patterns() {\n+    // We do *not* allow or-patterns at the top level of lambdas...\n+    let _ = |A | B: E| (); //~ ERROR binary operation `|` cannot be applied to type `E`\n+    //           -------- This looks like an or-pattern but is in fact `|A| (B: E | ())`.\n+\n+    // ...and for now neither do we allow or-patterns at the top level of functions.\n+    fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis\n+\n+    fn fun2(| A | B: E) {}\n+    //~^ ERROR a leading `|` is not allowed in a parameter pattern\n+    //~| ERROR an or-pattern parameter must be wrapped in parenthesis\n+}\n+\n+// We also do not allow a leading `|` when not in a top level position:\n+\n+fn no_leading_inner() {\n+    struct TS(E);\n+    struct NS { f: E }\n+\n+    let ( | A | B) = E::A; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let ( | A | B,) = (E::B,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ | A | B ] = [E::A]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( | A | B ); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: | A | B }; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+\n+    let ( || A | B) = E::A; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ || A | B ] = [E::A]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( || A | B ); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: || A | B }; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+\n+    let recovery_witness: String = 0; //~ ERROR mismatched types\n+}"}, {"sha": "2a3a6abfb7b624035d189b0ee55e286d86ddd9b1", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,124 @@\n+error: an or-pattern parameter must be wrapped in parenthesis\n+  --> $DIR/or-patterns-syntactic-fail.rs:28:13\n+   |\n+LL |     fn fun1(A | B: E) {}\n+   |             ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+\n+error: a leading `|` is not allowed in a parameter pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:30:13\n+   |\n+LL |     fn fun2(| A | B: E) {}\n+   |             ^ help: remove the `|`\n+\n+error: an or-pattern parameter must be wrapped in parenthesis\n+  --> $DIR/or-patterns-syntactic-fail.rs:30:15\n+   |\n+LL |     fn fun2(| A | B: E) {}\n+   |               ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:41:11\n+   |\n+LL |     let ( | A | B) = E::A;\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:42:11\n+   |\n+LL |     let ( | A | B,) = (E::B,);\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:43:11\n+   |\n+LL |     let [ | A | B ] = [E::A];\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:44:13\n+   |\n+LL |     let TS( | A | B );\n+   |             ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:45:17\n+   |\n+LL |     let NS { f: | A | B };\n+   |                 ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:47:11\n+   |\n+LL |     let ( || A | B) = E::A;\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:48:11\n+   |\n+LL |     let [ || A | B ] = [E::A];\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:49:13\n+   |\n+LL |     let TS( || A | B );\n+   |             ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:50:17\n+   |\n+LL |     let NS { f: || A | B };\n+   |                 ^^ help: remove the `||`\n+\n+error: no rules expected the token `|`\n+  --> $DIR/or-patterns-syntactic-fail.rs:14:15\n+   |\n+LL | macro_rules! accept_pat {\n+   | ----------------------- when calling this macro\n+...\n+LL | accept_pat!(p | q);\n+   |               ^ no rules expected this token in macro call\n+\n+error: no rules expected the token `|`\n+  --> $DIR/or-patterns-syntactic-fail.rs:15:13\n+   |\n+LL | macro_rules! accept_pat {\n+   | ----------------------- when calling this macro\n+...\n+LL | accept_pat!(| p | q);\n+   |             ^ no rules expected this token in macro call\n+\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/or-patterns-syntactic-fail.rs:4:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0369]: binary operation `|` cannot be applied to type `E`\n+  --> $DIR/or-patterns-syntactic-fail.rs:24:22\n+   |\n+LL |     let _ = |A | B: E| ();\n+   |                  ----^ -- ()\n+   |                  |\n+   |                  E\n+   |\n+   = note: an implementation of `std::ops::BitOr` might be missing for `E`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/or-patterns-syntactic-fail.rs:52:36\n+   |\n+LL |     let recovery_witness: String = 0;\n+   |                                    ^\n+   |                                    |\n+   |                                    expected struct `std::string::String`, found integer\n+   |                                    help: try using a conversion method: `0.to_string()`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `{integer}`\n+\n+error: aborting due to 16 previous errors\n+\n+Some errors have detailed explanations: E0308, E0369.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "5fe72caf9c1ff7a9c3ee401a76dd4f6ab8e86761", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,78 @@\n+// Here we test all the places `|` is *syntactically* allowed.\n+// This is not a semantic test. We only test parsing.\n+\n+// check-pass\n+\n+#![feature(or_patterns)]\n+\n+fn main() {}\n+\n+// Test the `pat` macro fragment parser:\n+macro_rules! accept_pat {\n+    ($p:pat) => {}\n+}\n+\n+accept_pat!((p | q));\n+accept_pat!((p | q,));\n+accept_pat!(TS(p | q));\n+accept_pat!(NS { f: p | q });\n+accept_pat!([p | q]);\n+\n+// Non-macro tests:\n+\n+#[cfg(FALSE)]\n+fn or_patterns() {\n+    // Top level of `let`:\n+    let | A | B;\n+    let A | B;\n+    let A | B: u8;\n+    let A | B = 0;\n+    let A | B: u8 = 0;\n+\n+    // Top level of `for`:\n+    for | A | B in 0 {}\n+    for A | B in 0 {}\n+\n+    // Top level of `while`:\n+    while let | A | B = 0 {}\n+    while let A | B = 0 {}\n+\n+    // Top level of `if`:\n+    if let | A | B = 0 {}\n+    if let A | B = 0 {}\n+\n+    // Top level of `match` arms:\n+    match 0 {\n+        | A | B => {},\n+        A | B => {},\n+    }\n+\n+    // Functions:\n+    fn fun((A | B): _) {}\n+\n+    // Lambdas:\n+    let _ = |(A | B): u8| ();\n+\n+    // Parenthesis and tuple patterns:\n+    let (A | B);\n+    let (A | B,);\n+\n+    // Tuple struct patterns:\n+    let A(B | C);\n+    let E::V(B | C);\n+\n+    // Struct patterns:\n+    let S { f1: B | C, f2 };\n+    let E::V { f1: B | C, f2 };\n+\n+    // Slice patterns:\n+    let [A | B, .. | ..];\n+\n+    // These bind as `(prefix p) | q` as opposed to `prefix (p | q)`:\n+    let box 0 | 1; // Unstable; we *can* the precedence if we want.\n+    let &0 | 1;\n+    let &mut 0 | 1;\n+    let x @ 0 | 1;\n+    let ref x @ 0 | 1;\n+    let ref mut x @ 0 | 1;\n+}"}, {"sha": "3145a2e9f2a6edef9a25352ee7645a346a5c1e84", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `or_patterns` is incomplete and may cause the compiler to crash\n+  --> $DIR/or-patterns-syntactic-pass.rs:6:12\n+   |\n+LL | #![feature(or_patterns)]\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "e96d76061ac28913978862002714b2cee1aa53b2", "filename": "src/test/ui/or-patterns/remove-leading-vert.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,23 @@\n+// Test the suggestion to remove a leading `|`.\n+\n+// run-rustfix\n+\n+#![feature(or_patterns)]\n+#![allow(warnings)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn leading_vert() {\n+    fn fun1(  A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n+    fn fun2(  A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n+    let (  A): E; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let (  A): (E); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let (  A,): (E,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [  A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [  A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS(  A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS(  A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f:  A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f:  A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+}"}, {"sha": "3790b17553fe38b8860b18acaa182fd96e408e87", "filename": "src/test/ui/or-patterns/remove-leading-vert.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,23 @@\n+// Test the suggestion to remove a leading `|`.\n+\n+// run-rustfix\n+\n+#![feature(or_patterns)]\n+#![allow(warnings)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn leading_vert() {\n+    fn fun1( | A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n+    fn fun2( || A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n+    let ( | A): E; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let ( || A): (E); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let ( | A,): (E,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ | A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ || A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( | A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( || A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: | A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: || A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+}"}, {"sha": "cbe06f997296a476aa2240a095f4530fc442d53b", "filename": "src/test/ui/or-patterns/remove-leading-vert.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,68 @@\n+error: a leading `|` is not allowed in a parameter pattern\n+  --> $DIR/remove-leading-vert.rs:12:14\n+   |\n+LL |     fn fun1( | A: E) {}\n+   |              ^ help: remove the `|`\n+\n+error: a leading `|` is not allowed in a parameter pattern\n+  --> $DIR/remove-leading-vert.rs:13:14\n+   |\n+LL |     fn fun2( || A: E) {}\n+   |              ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:14:11\n+   |\n+LL |     let ( | A): E;\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:15:11\n+   |\n+LL |     let ( || A): (E);\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:16:11\n+   |\n+LL |     let ( | A,): (E,);\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:17:11\n+   |\n+LL |     let [ | A ]: [E; 1];\n+   |           ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:18:11\n+   |\n+LL |     let [ || A ]: [E; 1];\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:19:13\n+   |\n+LL |     let TS( | A ): TS;\n+   |             ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:20:13\n+   |\n+LL |     let TS( || A ): TS;\n+   |             ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:21:17\n+   |\n+LL |     let NS { f: | A }: NS;\n+   |                 ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/remove-leading-vert.rs:22:17\n+   |\n+LL |     let NS { f: || A }: NS;\n+   |                 ^^ help: remove the `||`\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "4a9fae1406af7f378b584d394df1570e4cff2703", "filename": "src/test/ui/or-patterns/while-parsing-this-or-pattern.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,9 @@\n+// Test the parser for the \"while parsing this or-pattern...\" label here.\n+\n+fn main() {\n+    match Some(42) {\n+        Some(42) | .=. => {} //~ ERROR expected pattern, found `.`\n+        //~^ while parsing this or-pattern staring here\n+        //~| NOTE expected pattern\n+    }\n+}"}, {"sha": "21fece6c64fe5000071803e526349a92bda8ec50", "filename": "src/test/ui/or-patterns/while-parsing-this-or-pattern.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fwhile-parsing-this-or-pattern.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -0,0 +1,10 @@\n+error: expected pattern, found `.`\n+  --> $DIR/while-parsing-this-or-pattern.rs:5:20\n+   |\n+LL |         Some(42) | .=. => {}\n+   |         --------   ^ expected pattern\n+   |         |\n+   |         while parsing this or-pattern staring here\n+\n+error: aborting due to previous error\n+"}, {"sha": "04100d1701ddb8f94854115c4a67f32e1daf10ca", "filename": "src/test/ui/parser/bad-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fbad-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fbad-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-match.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-  let isize x = 5; //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `x`\n+  let isize x = 5; //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `x`\n   match x;\n }"}, {"sha": "d5baaf5e93b355fd8ac55cd7cffbb82468e6cdcb", "filename": "src/test/ui/parser/bad-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-match.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `x`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `x`\n   --> $DIR/bad-match.rs:2:13\n    |\n LL |   let isize x = 5;\n-   |             ^ expected one of `:`, `;`, `=`, or `@` here\n+   |             ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "dce4dabedf5c87fb3418a3785fe858aaed9559d5", "filename": "src/test/ui/parser/bad-name.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-name.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `.`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `.`\n   --> $DIR/bad-name.rs:4:8\n    |\n LL |   let x.y::<isize>.z foo;\n-   |        ^ expected one of `:`, `;`, `=`, or `@` here\n+   |        ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "d6efc8be072bd2fba38ed99dabb4a44054568d72", "filename": "src/test/ui/parser/inverted-parameters.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -2,29 +2,29 @@ struct S;\n \n impl S {\n     fn foo(&self, &str bar) {}\n-    //~^ ERROR expected one of `:` or `@`\n+    //~^ ERROR expected one of `:`, `@`\n     //~| HELP declare the type after the parameter binding\n     //~| SUGGESTION <identifier>: <type>\n }\n \n fn baz(S quux, xyzzy: i32) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP declare the type after the parameter binding\n //~| SUGGESTION <identifier>: <type>\n \n fn one(i32 a b) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n \n fn pattern((i32, i32) (a, b)) {}\n-//~^ ERROR expected `:`\n+//~^ ERROR expected one of `:`\n \n fn fizz(i32) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP if this was a parameter name, give it a type\n //~| HELP if this is a type, explicitly ignore the parameter name\n \n fn missing_colon(quux S) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP declare the type after the parameter binding\n //~| SUGGESTION <identifier>: <type>\n "}, {"sha": "2bda4460031a068032c1377dce9bcd159b77e651", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,38 +1,38 @@\n-error: expected one of `:` or `@`, found `bar`\n+error: expected one of `:`, `@`, or `|`, found `bar`\n   --> $DIR/inverted-parameters.rs:4:24\n    |\n LL |     fn foo(&self, &str bar) {}\n    |                   -----^^^\n    |                   |    |\n-   |                   |    expected one of `:` or `@` here\n+   |                   |    expected one of `:`, `@`, or `|` here\n    |                   help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-error: expected one of `:` or `@`, found `quux`\n+error: expected one of `:`, `@`, or `|`, found `quux`\n   --> $DIR/inverted-parameters.rs:10:10\n    |\n LL | fn baz(S quux, xyzzy: i32) {}\n    |        --^^^^\n    |        | |\n-   |        | expected one of `:` or `@` here\n+   |        | expected one of `:`, `@`, or `|` here\n    |        help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-error: expected one of `:` or `@`, found `a`\n+error: expected one of `:`, `@`, or `|`, found `a`\n   --> $DIR/inverted-parameters.rs:15:12\n    |\n LL | fn one(i32 a b) {}\n-   |            ^ expected one of `:` or `@` here\n+   |            ^ expected one of `:`, `@`, or `|` here\n \n-error: expected `:`, found `(`\n+error: expected one of `:` or `|`, found `(`\n   --> $DIR/inverted-parameters.rs:18:23\n    |\n LL | fn pattern((i32, i32) (a, b)) {}\n-   |                       ^ expected `:`\n+   |                       ^ expected one of `:` or `|` here\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/inverted-parameters.rs:21:12\n    |\n LL | fn fizz(i32) {}\n-   |            ^ expected one of `:` or `@` here\n+   |            ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -44,13 +44,13 @@ help: if this is a type, explicitly ignore the parameter name\n LL | fn fizz(_: i32) {}\n    |         ^^^^^^\n \n-error: expected one of `:` or `@`, found `S`\n+error: expected one of `:`, `@`, or `|`, found `S`\n   --> $DIR/inverted-parameters.rs:26:23\n    |\n LL | fn missing_colon(quux S) {}\n    |                  -----^\n    |                  |    |\n-   |                  |    expected one of `:` or `@` here\n+   |                  |    expected one of `:`, `@`, or `|` here\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n error: aborting due to 6 previous errors"}, {"sha": "a6861410682cbeaa4223900cf51b1b6006498b93", "filename": "src/test/ui/parser/issue-22647.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-22647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-22647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22647.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let caller<F> = |f: F|  //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `<`\n+    let caller<F> = |f: F|  //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n     where F: Fn() -> i32\n     {\n         let x = f();"}, {"sha": "4b1ef4f3dfc7849b36829f97d06d548616468698", "filename": "src/test/ui/parser/issue-22647.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22647.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `<`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n   --> $DIR/issue-22647.rs:2:15\n    |\n LL |     let caller<F> = |f: F|\n-   |               ^ expected one of `:`, `;`, `=`, or `@` here\n+   |               ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "774de9c7e64485165e695fbc6c8f69813d7ef552", "filename": "src/test/ui/parser/issue-22712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-22712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-22712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22712.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -3,7 +3,7 @@ struct Foo<B> {\n }\n \n fn bar() {\n-    let Foo<Vec<u8>>  //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `<`\n+    let Foo<Vec<u8>>  //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n }\n \n fn main() {}"}, {"sha": "d9e83144b367a1fc13546f1319824106675b55f4", "filename": "src/test/ui/parser/issue-22712.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-22712.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `<`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `<`\n   --> $DIR/issue-22712.rs:6:12\n    |\n LL |     let Foo<Vec<u8>>\n-   |            ^ expected one of `:`, `;`, `=`, or `@` here\n+   |            ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "aaf5137461fa639e0385c57b5d3b337868356250", "filename": "src/test/ui/parser/issue-24197.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-24197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-24197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24197.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let buf[0] = 0; //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `[`\n+    let buf[0] = 0; //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n }"}, {"sha": "24818db622ad45fcc4557d12652e0d5f832ca6a6", "filename": "src/test/ui/parser/issue-24197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24197.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `[`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n   --> $DIR/issue-24197.rs:2:12\n    |\n LL |     let buf[0] = 0;\n-   |            ^ expected one of `:`, `;`, `=`, or `@` here\n+   |            ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "22f80a8aae866f254a8623a196f7c08ab0a85851", "filename": "src/test/ui/parser/issue-33413.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -2,7 +2,7 @@ struct S;\n \n impl S {\n     fn f(*, a: u8) -> u8 {}\n-    //~^ ERROR expected argument name, found `*`\n+    //~^ ERROR expected parameter name, found `*`\n }\n \n fn main() {}"}, {"sha": "9e1178e8ac1f352d3f4fc53d8dc1f401f7cfbeeb", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected argument name, found `*`\n+error: expected parameter name, found `*`\n   --> $DIR/issue-33413.rs:4:10\n    |\n LL |     fn f(*, a: u8) -> u8 {}\n-   |          ^ expected argument name\n+   |          ^ expected parameter name\n \n error: aborting due to previous error\n "}, {"sha": "a5a8de85466bbccf5c549f3d538f82bf69ccc854", "filename": "src/test/ui/parser/issue-63135.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern: aborting due to 6 previous errors\n+// error-pattern: aborting due to 5 previous errors\n \n fn i(n{...,f #"}, {"sha": "a077ad454a9df419eb721c5359ccdfe9cbd0721a", "filename": "src/test/ui/parser/issue-63135.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -28,17 +28,11 @@ error: expected `[`, found `}`\n LL | fn i(n{...,f #\n    |               ^ expected `[`\n \n-error: expected `:`, found `)`\n+error: expected one of `:` or `|`, found `)`\n   --> $DIR/issue-63135.rs:3:15\n    |\n LL | fn i(n{...,f #\n-   |               ^ expected `:`\n+   |               ^ expected one of `:` or `|` here\n \n-error: expected one of `->`, `where`, or `{`, found `<eof>`\n-  --> $DIR/issue-63135.rs:3:15\n-   |\n-LL | fn i(n{...,f #\n-   |               ^ expected one of `->`, `where`, or `{` here\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "bffeb1e2e7c40a79eb27e8aceb37056fc84f1fa2", "filename": "src/test/ui/parser/mut-patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -2,5 +2,6 @@\n \n pub fn main() {\n     struct Foo { x: isize }\n-    let mut Foo { x: x } = Foo { x: 3 }; //~ ERROR: expected one of `:`, `;`, `=`, or `@`, found `{`\n+    let mut Foo { x: x } = Foo { x: 3 };\n+    //~^ ERROR: expected one of `:`, `;`, `=`, `@`, or `|`, found `{`\n }"}, {"sha": "b39209afd42958364df00e6c61dc47316ec26adc", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `{`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `{`\n   --> $DIR/mut-patterns.rs:5:17\n    |\n LL |     let mut Foo { x: x } = Foo { x: 3 };\n-   |                 ^ expected one of `:`, `;`, `=`, or `@` here\n+   |                 ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "49cbc4d6bf40f0c091f8ad6a232585e678ef51e0", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,4 +1,4 @@\n-fn foo(x) { //~ ERROR expected one of `:` or `@`, found `)`\n+fn foo(x) { //~ ERROR expected one of `:`, `@`, or `|`, found `)`\n }\n \n fn main() {}"}, {"sha": "7feb15592c54f7793560863e9279ee3c7967b3b0", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/omitted-arg-in-item-fn.rs:1:9\n    |\n LL | fn foo(x) {\n-   |         ^ expected one of `:` or `@` here\n+   |         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "3a778ed14f637a2f90e64277b104443525eb5e72", "filename": "src/test/ui/parser/pat-lt-bracket-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,4 +1,4 @@\n fn a(B<) {}\n-   //~^ error: expected one of `:` or `@`, found `<`\n+   //~^ error: expected one of `:`, `@`, or `|`, found `<`\n \n fn main() {}"}, {"sha": "dbc8d0f5865c6c7d352826f0919280bff2770b41", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `<`\n+error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/pat-lt-bracket-2.rs:1:7\n    |\n LL | fn a(B<) {}\n-   |       ^ expected one of `:` or `@` here\n+   |       ^ expected one of `:`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "aaece1f6bd9cb8e4d8a28fd3ca993205e321dacd", "filename": "src/test/ui/parser/pat-lt-bracket-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let v[0] = v[1]; //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `[`\n+    let v[0] = v[1]; //~ ERROR expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n }"}, {"sha": "167314dde06501dca040854dc6b911b426a58e7d", "filename": "src/test/ui/parser/pat-lt-bracket-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-5.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, `=`, or `@`, found `[`\n+error: expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-5.rs:2:10\n    |\n LL |     let v[0] = v[1];\n-   |          ^ expected one of `:`, `;`, `=`, or `@` here\n+   |          ^ expected one of `:`, `;`, `=`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "1dafb5a07bb5a4c7cf7f419f9475f1f27e1a8064", "filename": "src/test/ui/parser/pat-ranges-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,5 +1,5 @@\n // Parsing of range patterns\n \n fn main() {\n-    let macropus!() ..= 11 = 12; //~ error: expected one of `:`, `;`, or `=`, found `..=`\n+    let macropus!() ..= 11 = 12; //~ error: expected one of `:`, `;`, `=`, or `|`, found `..=`\n }"}, {"sha": "4e2c5d28381d8a76d40bad97f9fb118729e0ad01", "filename": "src/test/ui/parser/pat-ranges-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-1.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, or `=`, found `..=`\n+error: expected one of `:`, `;`, `=`, or `|`, found `..=`\n   --> $DIR/pat-ranges-1.rs:4:21\n    |\n LL |     let macropus!() ..= 11 = 12;\n-   |                     ^^^ expected one of `:`, `;`, or `=` here\n+   |                     ^^^ expected one of `:`, `;`, `=`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "1593222acca1be442f74c57f87c1f2efcfdc4dc3", "filename": "src/test/ui/parser/pat-ranges-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,5 +1,5 @@\n // Parsing of range patterns\n \n fn main() {\n-    let 10 ..= makropulos!() = 12; //~ error: expected one of `::`, `:`, `;`, or `=`, found `!`\n+    let 10 ..= makropulos!() = 12; //~ error: expected one of `::`, `:`, `;`, `=`, or `|`, found `!`\n }"}, {"sha": "64df56f5a61b1847eb040582c0c051b8f87d4d1e", "filename": "src/test/ui/parser/pat-ranges-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-2.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `::`, `:`, `;`, or `=`, found `!`\n+error: expected one of `::`, `:`, `;`, `=`, or `|`, found `!`\n   --> $DIR/pat-ranges-2.rs:4:26\n    |\n LL |     let 10 ..= makropulos!() = 12;\n-   |                          ^ expected one of `::`, `:`, `;`, or `=` here\n+   |                          ^ expected one of `::`, `:`, `;`, `=`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "8976dcf0d90f931466973cef05cc984a014fe9fe", "filename": "src/test/ui/parser/pat-ranges-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,5 +1,5 @@\n // Parsing of range patterns\n \n fn main() {\n-    let 10 ..= 10 + 3 = 12; //~ expected one of `:`, `;`, or `=`, found `+`\n+    let 10 ..= 10 + 3 = 12; //~ expected one of `:`, `;`, `=`, or `|`, found `+`\n }"}, {"sha": "c32c18d98dce7c1da31851ffdb4466a3655b5283", "filename": "src/test/ui/parser/pat-ranges-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-3.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:`, `;`, or `=`, found `+`\n+error: expected one of `:`, `;`, `=`, or `|`, found `+`\n   --> $DIR/pat-ranges-3.rs:4:19\n    |\n LL |     let 10 ..= 10 + 3 = 12;\n-   |                   ^ expected one of `:`, `;`, or `=` here\n+   |                   ^ expected one of `:`, `;`, `=`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "61188976b028cce46b9cd175b3a1abde7ffed87d", "filename": "src/test/ui/parser/pat-ranges-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let 10 - 3 ..= 10 = 8;\n-    //~^ error: expected one of `...`, `..=`, `..`, `:`, `;`, or `=`, found `-`\n+    //~^ error: expected one of `...`, `..=`, `..`, `:`, `;`, `=`, or `|`, found `-`\n }"}, {"sha": "53e38bc670beb0c1b27fba9b96d052b1f6c7aa45", "filename": "src/test/ui/parser/pat-ranges-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-ranges-4.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `...`, `..=`, `..`, `:`, `;`, or `=`, found `-`\n+error: expected one of `...`, `..=`, `..`, `:`, `;`, `=`, or `|`, found `-`\n   --> $DIR/pat-ranges-4.rs:4:12\n    |\n LL |     let 10 - 3 ..= 10 = 8;\n-   |            ^ expected one of `...`, `..=`, `..`, `:`, `;`, or `=` here\n+   |            ^ expected one of 7 possible tokens here\n \n error: aborting due to previous error\n "}, {"sha": "a438db3b0c18b8ee34eb8f6840cde137dd242698", "filename": "src/test/ui/parser/removed-syntax-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,4 +1,4 @@\n fn f(+x: isize) {}\n-//~^ ERROR expected argument name, found `+`\n+//~^ ERROR expected parameter name, found `+`\n \n fn main() {}"}, {"sha": "d0393b379f06d03a4cef67dbede819a6cd2a7bfc", "filename": "src/test/ui/parser/removed-syntax-mode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected argument name, found `+`\n+error: expected parameter name, found `+`\n   --> $DIR/removed-syntax-mode.rs:1:6\n    |\n LL | fn f(+x: isize) {}\n-   |      ^ expected argument name\n+   |      ^ expected parameter name\n \n error: aborting due to previous error\n "}, {"sha": "d71711336b06e41a8ac5f9705c672d1fe55169be", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -3,6 +3,6 @@\n #![feature(param_attrs)]\n \n trait Trait2015 { fn foo(#[allow(C)] i32); }\n-//~^ ERROR expected one of `:` or `@`, found `)`\n+//~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n \n fn main() {}"}, {"sha": "26b414e4268059c0e242404ca85b917e90335860", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/param-attrs-2018.rs:5:41\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n-   |                                         ^ expected one of `:` or `@` here\n+   |                                         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "cc0eccd37a26f6eda14f756cbfb5b7eb7390ea6c", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -1,14 +1,14 @@\n-error: expected one of `:` or `@`, found `<`\n+error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/issue-34264.rs:1:14\n    |\n LL | fn foo(Option<i32>, String) {}\n-   |              ^ expected one of `:` or `@` here\n+   |              ^ expected one of `:`, `@`, or `|` here\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/issue-34264.rs:1:27\n    |\n LL | fn foo(Option<i32>, String) {}\n-   |                           ^ expected one of `:` or `@` here\n+   |                           ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -20,11 +20,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL | fn foo(Option<i32>, _: String) {}\n    |                     ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/issue-34264.rs:3:9\n    |\n LL | fn bar(x, y: usize) {}\n-   |         ^ expected one of `:` or `@` here\n+   |         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "50e9116c778eac9f2dfd2e8a5924bf2de91f857b", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0444b9f66acb5da23dc816e0d8eb59623ba9ea50/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=0444b9f66acb5da23dc816e0d8eb59623ba9ea50", "patch": "@@ -176,7 +176,10 @@ pub fn check(path: &Path, bad: &mut bool, verbose: bool) -> CollectedFeatures {\n     CollectedFeatures { lib: lib_features, lang: features }\n }\n \n-fn format_features<'a>(features: &'a Features, family: &'a str) -> impl Iterator<Item = String> + 'a {\n+fn format_features<'a>(\n+    features: &'a Features,\n+    family: &'a str,\n+) -> impl Iterator<Item = String> + 'a {\n     features.iter().map(move |(name, feature)| {\n         format!(\"{:<32} {:<8} {:<12} {:<8}\",\n                 name,\n@@ -228,7 +231,8 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n }\n \n fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features {\n-    let contents = t!(fs::read_to_string(base.join(\"libsyntax/feature_gate\").join(file)));\n+    let path = base.join(\"libsyntax/feature_gate\").join(file);\n+    let contents = t!(fs::read_to_string(&path));\n \n     // We allow rustc-internal features to omit a tracking issue.\n     // To make tidy accept omitting a tracking issue, group the list of features\n@@ -259,8 +263,9 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 if in_feature_group {\n                     tidy_error!(\n                         bad,\n-                        // ignore-tidy-linelength\n-                        \"libsyntax/feature_gate.rs:{}: new feature group is started without ending the previous one\",\n+                        \"{}:{}: \\\n+                        new feature group is started without ending the previous one\",\n+                        path.display(),\n                         line_number,\n                     );\n                 }\n@@ -289,7 +294,8 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 Err(err) => {\n                     tidy_error!(\n                         bad,\n-                        \"libsyntax/feature_gate.rs:{}: failed to parse since: {} ({:?})\",\n+                        \"{}:{}: failed to parse since: {} ({:?})\",\n+                        path.display(),\n                         line_number,\n                         since_str,\n                         err,\n@@ -301,7 +307,8 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 if prev_since > since {\n                     tidy_error!(\n                         bad,\n-                        \"libsyntax/feature_gate.rs:{}: feature {} is not sorted by since\",\n+                        \"{}:{}: feature {} is not sorted by since\",\n+                        path.display(),\n                         line_number,\n                         name,\n                     );\n@@ -315,7 +322,8 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                     *bad = true;\n                     tidy_error!(\n                         bad,\n-                        \"libsyntax/feature_gate.rs:{}: no tracking issue for feature {}\",\n+                        \"{}:{}: no tracking issue for feature {}\",\n+                        path.display(),\n                         line_number,\n                         name,\n                     );"}]}