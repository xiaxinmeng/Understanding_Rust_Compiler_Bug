{"sha": "bdace29de04af4fe9e4317b73c3f7d6418a33de1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYWNlMjlkZTA0YWY0ZmU5ZTQzMTdiNzNjM2Y3ZDY0MThhMzNkZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-19T07:42:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-19T07:42:03Z"}, "message": "Auto merge of #50744 - nikic:mutable-noalias, r=alexcrichton\n\nEmit noalias on &mut parameters by default\n\nThis used to be disabled due to LLVM bugs in the handling of\nnoalias information in conjunction with unwinding. However,\naccording to #31681 all known LLVM bugs have been fixed by\nLLVM 6.0, so it's probably time to reenable this optimization.\n\n-Z no-mutable-noalias is left as an escape-hatch to debug problems\nsuspected to stem from this change.", "tree": {"sha": "0ef01deb994b33e4338c109ded1cc7cf2b9357da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef01deb994b33e4338c109ded1cc7cf2b9357da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdace29de04af4fe9e4317b73c3f7d6418a33de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdace29de04af4fe9e4317b73c3f7d6418a33de1", "html_url": "https://github.com/rust-lang/rust/commit/bdace29de04af4fe9e4317b73c3f7d6418a33de1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdace29de04af4fe9e4317b73c3f7d6418a33de1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1", "html_url": "https://github.com/rust-lang/rust/commit/8319ef5b78a10b3a8de4109bb8b0e6d23fbe4de1"}, {"sha": "12308139ec76dfa050ed012606495250391aaf74", "url": "https://api.github.com/repos/rust-lang/rust/commits/12308139ec76dfa050ed012606495250391aaf74", "html_url": "https://github.com/rust-lang/rust/commit/12308139ec76dfa050ed012606495250391aaf74"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "bcad3fbc84134047b62816901cfe8022f457bb72", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdace29de04af4fe9e4317b73c3f7d6418a33de1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdace29de04af4fe9e4317b73c3f7d6418a33de1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=bdace29de04af4fe9e4317b73c3f7d6418a33de1", "patch": "@@ -1239,8 +1239,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"print the result of the monomorphization collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n           \"set the MIR optimization level (0-3, default: 1)\"),\n-    mutable_noalias: bool = (false, parse_bool, [TRACKED],\n-          \"emit noalias metadata for mutable references\"),\n+    mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+          \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n     arg_align_attributes: bool = (false, parse_bool, [TRACKED],\n           \"emit align metadata for reference arguments\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],"}, {"sha": "21436b74731f2827eefb5889419a7e92fa1eac59", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdace29de04af4fe9e4317b73c3f7d6418a33de1/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdace29de04af4fe9e4317b73c3f7d6418a33de1/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=bdace29de04af4fe9e4317b73c3f7d6418a33de1", "patch": "@@ -10,6 +10,7 @@\n \n use abi::{FnType, FnTypeExt};\n use common::*;\n+use llvm;\n use rustc::hir;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n@@ -428,8 +429,13 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                         PointerKind::Shared\n                     },\n                     hir::MutMutable => {\n-                        if cx.tcx.sess.opts.debugging_opts.mutable_noalias ||\n-                           cx.tcx.sess.panic_strategy() == PanicStrategy::Abort {\n+                        // Only emit noalias annotations for LLVM >= 6 or in panic=abort\n+                        // mode, as prior versions had many bugs in conjunction with\n+                        // unwinding. See also issue #31681.\n+                        let mutable_noalias = cx.tcx.sess.opts.debugging_opts.mutable_noalias\n+                            .unwrap_or(unsafe { llvm::LLVMRustVersionMajor() >= 6 }\n+                                || cx.tcx.sess.panic_strategy() == PanicStrategy::Abort);\n+                        if mutable_noalias {\n                             PointerKind::UniqueBorrowed\n                         } else {\n                             PointerKind::Shared"}, {"sha": "e3fa7a7db39a254bd2736fdd8ced347ad4a0157c", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdace29de04af4fe9e4317b73c3f7d6418a33de1/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdace29de04af4fe9e4317b73c3f7d6418a33de1/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=bdace29de04af4fe9e4317b73c3f7d6418a33de1", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n+// min-llvm-version 6.0\n \n #![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n@@ -52,16 +53,14 @@ pub fn named_borrow<'r>(_: &'r i32) {\n pub fn unsafe_borrow(_: &UnsafeInner) {\n }\n \n-// CHECK: @mutable_unsafe_borrow(i16* dereferenceable(2) %arg0)\n+// CHECK: @mutable_unsafe_borrow(i16* noalias dereferenceable(2) %arg0)\n // ... unless this is a mutable borrow, those never alias\n-// ... except that there's this LLVM bug that forces us to not use noalias, see #29485\n #[no_mangle]\n pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n }\n \n-// CHECK: @mutable_borrow(i32* dereferenceable(4) %arg0)\n+// CHECK: @mutable_borrow(i32* noalias dereferenceable(4) %arg0)\n // FIXME #25759 This should also have `nocapture`\n-// ... there's this LLVM bug that forces us to not use noalias, see #29485\n #[no_mangle]\n pub fn mutable_borrow(_: &mut i32) {\n }\n@@ -103,9 +102,8 @@ pub fn helper(_: usize) {\n pub fn slice(_: &[u8]) {\n }\n \n-// CHECK: @mutable_slice([0 x i8]* nonnull %arg0.0, [[USIZE]] %arg0.1)\n+// CHECK: @mutable_slice([0 x i8]* noalias nonnull %arg0.0, [[USIZE]] %arg0.1)\n // FIXME #25759 This should also have `nocapture`\n-// ... there's this LLVM bug that forces us to not use noalias, see #29485\n #[no_mangle]\n pub fn mutable_slice(_: &mut [u8]) {\n }"}]}