{"sha": "5bf3e949e8470a138a61c806769e1a329761cab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjNlOTQ5ZTg0NzBhMTM4YTYxYzgwNjc2OWUxYTMyOTc2MWNhYjY=", "commit": {"author": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-05-23T17:42:42Z"}, "committer": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-05-27T09:26:33Z"}, "message": "Semantic highlighting spike\n\nVery simple approach: For each identifier, set the hash of the range\nwhere it's defined as its 'id' and use it in the VSCode extension to\ngenerate unique colors.\n\nThus, the generated colors are per-file. They are also quite fragile,\nand I'm not entirely sure why. Looks like we need to make sure the\nsame ranges aren't overwritten by a later request?", "tree": {"sha": "9885346944b4aa82804514580944673a53605ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9885346944b4aa82804514580944673a53605ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf3e949e8470a138a61c806769e1a329761cab6", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niF0EABECAB0WIQQ4AX3IqIzUAd4RqS7tuxqNIEegdAUCXOutSQAKCRDtuxqNIEeg\ndN63AJ0Z1Br7RR2B4mYK3Zra+hLkqQ2U8wCfcXcl7sHNUnQB3G5SwWHp+s2iD98=\n=hIJA\n-----END PGP SIGNATURE-----", "payload": "tree 9885346944b4aa82804514580944673a53605ee2\nparent 4b48cff022a1606bde596f01fbf44361640b10d8\nauthor Pascal Hertleif <pascal@technocreatives.com> 1558633362 +0200\ncommitter Pascal Hertleif <pascal@technocreatives.com> 1558949193 +0200\n\nSemantic highlighting spike\n\nVery simple approach: For each identifier, set the hash of the range\nwhere it's defined as its 'id' and use it in the VSCode extension to\ngenerate unique colors.\n\nThus, the generated colors are per-file. They are also quite fragile,\nand I'm not entirely sure why. Looks like we need to make sure the\nsame ranges aren't overwritten by a later request?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf3e949e8470a138a61c806769e1a329761cab6", "html_url": "https://github.com/rust-lang/rust/commit/5bf3e949e8470a138a61c806769e1a329761cab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf3e949e8470a138a61c806769e1a329761cab6/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b48cff022a1606bde596f01fbf44361640b10d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b48cff022a1606bde596f01fbf44361640b10d8", "html_url": "https://github.com/rust-lang/rust/commit/4b48cff022a1606bde596f01fbf44361640b10d8"}], "stats": {"total": 448, "additions": 409, "deletions": 39}, "files": [{"sha": "208681f1031834d168d67d99b09833e8dde2f627", "filename": "crates/ra_ide_api/src/snapshots/tests__highlighting.snap", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -0,0 +1,192 @@\n+---\n+created: \"2019-05-25T10:53:54.439877Z\"\n+creator: insta@0.8.1\n+source: crates/ra_ide_api/src/syntax_highlighting.rs\n+expression: result\n+---\n+Ok(\n+    [\n+        HighlightedRange {\n+            range: [1; 24),\n+            tag: \"attribute\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [25; 31),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [32; 35),\n+            tag: \"variable\",\n+            id: Some(\n+                461893210254723387,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [42; 45),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [46; 47),\n+            tag: \"variable\",\n+            id: Some(\n+                8312289520117458465,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [49; 52),\n+            tag: \"text\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [58; 61),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [62; 63),\n+            tag: \"variable\",\n+            id: Some(\n+                4497542318236667727,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [65; 68),\n+            tag: \"text\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [73; 75),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [76; 79),\n+            tag: \"variable\",\n+            id: Some(\n+                4506850079084802999,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [80; 81),\n+            tag: \"type\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [80; 81),\n+            tag: \"variable\",\n+            id: Some(\n+                16968185728268100018,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [88; 89),\n+            tag: \"type\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [96; 110),\n+            tag: \"macro\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [117; 127),\n+            tag: \"comment\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [128; 130),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [131; 135),\n+            tag: \"variable\",\n+            id: Some(\n+                14467718814232352107,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [145; 153),\n+            tag: \"macro\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [154; 166),\n+            tag: \"string\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [168; 170),\n+            tag: \"literal\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [178; 181),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [182; 185),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [186; 189),\n+            tag: \"macro\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [197; 200),\n+            tag: \"macro\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [192; 195),\n+            tag: \"text\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [208; 211),\n+            tag: \"macro\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [212; 216),\n+            tag: \"macro\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [226; 227),\n+            tag: \"literal\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [232; 233),\n+            tag: \"literal\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [242; 248),\n+            tag: \"keyword.unsafe\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [251; 254),\n+            tag: \"text\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [255; 262),\n+            tag: \"text\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [263; 264),\n+            tag: \"literal\",\n+            id: None,\n+        },\n+    ],\n+)"}, {"sha": "3b3fe32e9739225784c4dba1cc2bc2575484dd6e", "filename": "crates/ra_ide_api/src/snapshots/tests__sematic_highlighting.snap", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__sematic_highlighting.snap", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__sematic_highlighting.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__sematic_highlighting.snap?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -0,0 +1,87 @@\n+---\n+created: \"2019-05-25T10:25:13.898113Z\"\n+creator: insta@0.8.1\n+source: crates/ra_ide_api/src/syntax_highlighting.rs\n+expression: result\n+---\n+Ok(\n+    [\n+        HighlightedRange {\n+            range: [1; 3),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [4; 8),\n+            tag: \"variable\",\n+            id: Some(\n+                17119830160611610240,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [17; 20),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [21; 26),\n+            tag: \"variable\",\n+            id: Some(\n+                2744494144922727377,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [29; 36),\n+            tag: \"string\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [42; 45),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [46; 47),\n+            tag: \"variable\",\n+            id: Some(\n+                10375904121795371996,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [50; 55),\n+            tag: \"variable\",\n+            id: Some(\n+                2744494144922727377,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [56; 65),\n+            tag: \"text\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [73; 76),\n+            tag: \"keyword\",\n+            id: None,\n+        },\n+        HighlightedRange {\n+            range: [77; 78),\n+            tag: \"variable\",\n+            id: Some(\n+                8228548264153724449,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [81; 86),\n+            tag: \"variable\",\n+            id: Some(\n+                2744494144922727377,\n+            ),\n+        },\n+        HighlightedRange {\n+            range: [87; 96),\n+            tag: \"text\",\n+            id: None,\n+        },\n+    ],\n+)"}, {"sha": "da000c0c30dbd5b40389392708232556dfb5267b", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 66, "deletions": 35, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -10,6 +10,7 @@ use crate::{FileId, db::RootDatabase};\n pub struct HighlightedRange {\n     pub range: TextRange,\n     pub tag: &'static str,\n+    pub id: Option<u64>,\n }\n \n fn is_control_keyword(kind: SyntaxKind) -> bool {\n@@ -32,59 +33,74 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n \n     let source_file = db.parse(file_id);\n \n+    fn hash<T: std::hash::Hash + std::fmt::Debug>(x: T) -> u64 {\n+        use std::{collections::hash_map::DefaultHasher, hash::Hasher};\n+\n+        let mut hasher = DefaultHasher::new();\n+        x.hash(&mut hasher);\n+        hasher.finish()\n+    }\n+\n     // Visited nodes to handle highlighting priorities\n     let mut highlighted: FxHashSet<SyntaxElement> = FxHashSet::default();\n     let mut res = Vec::new();\n     for node in source_file.syntax().descendants_with_tokens() {\n         if highlighted.contains(&node) {\n             continue;\n         }\n-        let tag = match node.kind() {\n-            COMMENT => \"comment\",\n-            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n-            ATTR => \"attribute\",\n+        let (tag, id) = match node.kind() {\n+            COMMENT => (\"comment\", None),\n+            STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => (\"string\", None),\n+            ATTR => (\"attribute\", None),\n             NAME_REF => {\n-                if let Some(name_ref) = node.as_node().and_then(|n| ast::NameRef::cast(n)) {\n+                if let Some(name_ref) = node.as_ast_node::<ast::NameRef>() {\n                     use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n                     use hir::{ModuleDef, ImplItem};\n \n                     // FIXME: try to reuse the SourceAnalyzers\n                     let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n                     match classify_name_ref(db, &analyzer, name_ref) {\n-                        Some(Method(_)) => \"function\",\n-                        Some(Macro(_)) => \"macro\",\n-                        Some(FieldAccess(_)) => \"field\",\n-                        Some(AssocItem(ImplItem::Method(_))) => \"function\",\n-                        Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n-                        Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n-                        Some(Def(ModuleDef::Module(_))) => \"module\",\n-                        Some(Def(ModuleDef::Function(_))) => \"function\",\n-                        Some(Def(ModuleDef::Struct(_))) => \"type\",\n-                        Some(Def(ModuleDef::Union(_))) => \"type\",\n-                        Some(Def(ModuleDef::Enum(_))) => \"type\",\n-                        Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Const(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Static(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Trait(_))) => \"type\",\n-                        Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n-                        Some(SelfType(_)) => \"type\",\n-                        Some(Pat(_)) => \"text\",\n-                        Some(SelfParam(_)) => \"type\",\n-                        Some(GenericParam(_)) => \"type\",\n-                        None => \"text\",\n+                        Some(Method(_)) => (\"function\", None),\n+                        Some(Macro(_)) => (\"macro\", None),\n+                        Some(FieldAccess(_)) => (\"field\", None),\n+                        Some(AssocItem(ImplItem::Method(_))) => (\"function\", None),\n+                        Some(AssocItem(ImplItem::Const(_))) => (\"constant\", None),\n+                        Some(AssocItem(ImplItem::TypeAlias(_))) => (\"type\", None),\n+                        Some(Def(ModuleDef::Module(_))) => (\"module\", None),\n+                        Some(Def(ModuleDef::Function(_))) => (\"function\", None),\n+                        Some(Def(ModuleDef::Struct(_))) => (\"type\", None),\n+                        Some(Def(ModuleDef::Union(_))) => (\"type\", None),\n+                        Some(Def(ModuleDef::Enum(_))) => (\"type\", None),\n+                        Some(Def(ModuleDef::EnumVariant(_))) => (\"constant\", None),\n+                        Some(Def(ModuleDef::Const(_))) => (\"constant\", None),\n+                        Some(Def(ModuleDef::Static(_))) => (\"constant\", None),\n+                        Some(Def(ModuleDef::Trait(_))) => (\"type\", None),\n+                        Some(Def(ModuleDef::TypeAlias(_))) => (\"type\", None),\n+                        Some(SelfType(_)) => (\"type\", None),\n+                        Some(Pat(ptr)) => (\"variable\", Some(hash(ptr.syntax_node_ptr().range()))),\n+                        Some(SelfParam(_)) => (\"type\", None),\n+                        Some(GenericParam(_)) => (\"type\", None),\n+                        None => (\"text\", None),\n                     }\n                 } else {\n-                    \"text\"\n+                    (\"text\", None)\n                 }\n             }\n-            NAME => \"function\",\n-            TYPE_ALIAS_DEF | TYPE_ARG | TYPE_PARAM => \"type\",\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n-            LIFETIME => \"parameter\",\n-            T![unsafe] => \"keyword.unsafe\",\n-            k if is_control_keyword(k) => \"keyword.control\",\n-            k if k.is_keyword() => \"keyword\",\n+            NAME => {\n+                if let Some(name) = node.as_ast_node::<ast::Name>() {\n+                    (\"variable\", Some(hash(name.syntax().range())))\n+                } else {\n+                    (\"text\", None)\n+                }\n+            }\n+            TYPE_ALIAS_DEF | TYPE_ARG | TYPE_PARAM => (\"type\", None),\n+            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => (\"literal\", None),\n+            LIFETIME => (\"parameter\", None),\n+            T![unsafe] => (\"keyword.unsafe\", None),\n+            k if is_control_keyword(k) => (\"keyword.control\", None),\n+            k if k.is_keyword() => (\"keyword\", None),\n             _ => {\n+                // let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n                 if let Some(macro_call) = node.as_node().and_then(ast::MacroCall::cast) {\n                     if let Some(path) = macro_call.path() {\n                         if let Some(segment) = path.segment() {\n@@ -101,6 +117,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                                 res.push(HighlightedRange {\n                                     range: TextRange::from_to(range_start, range_end),\n                                     tag: \"macro\",\n+                                    id: None,\n                                 })\n                             }\n                         }\n@@ -109,7 +126,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 continue;\n             }\n         };\n-        res.push(HighlightedRange { range: node.range(), tag })\n+        res.push(HighlightedRange { range: node.range(), tag, id })\n     }\n     res\n }\n@@ -221,4 +238,18 @@ fn main() {\n         // std::fs::write(dst_file, &actual_html).unwrap();\n         assert_eq_text!(expected_html, actual_html);\n     }\n+\n+    #[test]\n+    fn test_sematic_highlighting() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+fn main() {\n+    let hello = \"hello\";\n+    let x = hello.to_string();\n+    let y = hello.to_string();\n+}\"#,\n+        );\n+        let result = analysis.highlight(file_id);\n+        assert_debug_snapshot_matches!(\"sematic_highlighting\", result);\n+    }\n }"}, {"sha": "5dfd64ed419ea876c8771e3169fd9c81cabd88fb", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -872,7 +872,11 @@ fn highlight(world: &ServerWorld, file_id: FileId) -> Result<Vec<Decoration>> {\n         .analysis()\n         .highlight(file_id)?\n         .into_iter()\n-        .map(|h| Decoration { range: h.range.conv_with(&line_index), tag: h.tag })\n+        .map(|h| Decoration {\n+            range: h.range.conv_with(&line_index),\n+            tag: h.tag,\n+            id: h.id.map(|x| x.to_string()),\n+        })\n         .collect();\n     Ok(res)\n }"}, {"sha": "cea0e6ce74ae9483e5b0f8d4745fd3afc12e9792", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -129,6 +129,7 @@ pub struct PublishDecorationsParams {\n pub struct Decoration {\n     pub range: Range,\n     pub tag: &'static str,\n+    pub id: Option<String>,\n }\n \n pub enum ParentModule {}"}, {"sha": "89f92e0b7b8b7316224a12fc58affda4da911bf4", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -523,6 +523,10 @@ impl<'a> SyntaxElement<'a> {\n         }\n     }\n \n+    pub fn as_ast_node<T: AstNode>(&self) -> Option<&T> {\n+        self.as_node().and_then(|x| <T as AstNode>::cast(x))\n+    }\n+\n     pub fn as_token(&self) -> Option<SyntaxToken<'a>> {\n         match self {\n             SyntaxElement::Node(_) => None,"}, {"sha": "6b3a12f91a5add5d15c64a4e802bffce38d4ffec", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -36,6 +36,11 @@\n             \"integrity\": \"sha512-Ja7d4s0qyGFxjGeDq5S7Si25OFibSAHUi6i17UWnwNnpitADN7hah9q0Tl25gxuV5R1u2Bx+np6w4LHXfHyj/g==\",\n             \"dev\": true\n         },\n+        \"@types/seedrandom\": {\n+            \"version\": \"2.4.28\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/seedrandom/-/seedrandom-2.4.28.tgz\",\n+            \"integrity\": \"sha512-SMA+fUwULwK7sd/ZJicUztiPs8F1yCPwF3O23Z9uQ32ME5Ha0NmDK9+QTsYE4O2tHXChzXomSWWeIhCnoN1LqA==\"\n+        },\n         \"agent-base\": {\n             \"version\": \"4.2.1\",\n             \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-4.2.1.tgz\",\n@@ -984,6 +989,11 @@\n             \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\n             \"dev\": true\n         },\n+        \"seedrandom\": {\n+            \"version\": \"3.0.1\",\n+            \"resolved\": \"https://registry.npmjs.org/seedrandom/-/seedrandom-3.0.1.tgz\",\n+            \"integrity\": \"sha512-1/02Y/rUeU1CJBAGLebiC5Lbo5FnB22gQbIFFYTLkwvp1xdABZJH1sn4ZT1MzXmPpzv+Rf/Lu2NcsLJiK4rcDg==\"\n+        },\n         \"semver\": {\n             \"version\": \"5.7.0\",\n             \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.0.tgz\","}, {"sha": "d8ba914f56f2da1e12d312d4ee580a04db70efdd", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -31,11 +31,13 @@\n         \"singleQuote\": true\n     },\n     \"dependencies\": {\n+        \"seedrandom\": \"^3.0.1\",\n         \"vscode-languageclient\": \"^5.3.0-next.4\"\n     },\n     \"devDependencies\": {\n         \"@types/mocha\": \"^5.2.6\",\n         \"@types/node\": \"^10.14.5\",\n+        \"@types/seedrandom\": \"^2.4.28\",\n         \"prettier\": \"^1.17.0\",\n         \"shx\": \"^0.3.1\",\n         \"tslint\": \"^5.16.0\","}, {"sha": "4597db08feaf3689aa44a1d1d48bc36744a51286", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5bf3e949e8470a138a61c806769e1a329761cab6/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5bf3e949e8470a138a61c806769e1a329761cab6/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=5bf3e949e8470a138a61c806769e1a329761cab6", "patch": "@@ -1,3 +1,4 @@\n+import seedrandom = require('seedrandom');\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n@@ -6,6 +7,20 @@ import { Server } from './server';\n export interface Decoration {\n     range: lc.Range;\n     tag: string;\n+    id?: string;\n+}\n+\n+// Based on this HSL-based color generator: https://gist.github.com/bendc/76c48ce53299e6078a76\n+function fancify(seed: string, shade: 'light' | 'dark') {\n+    const random = seedrandom(seed);\n+    const randomInt = (min: number, max: number) => {\n+        return Math.floor(random() * (max - min + 1)) + min;\n+    };\n+\n+    const h = randomInt(0, 360);\n+    const s = randomInt(42, 98);\n+    const l = shade === 'light' ? randomInt(15, 40) : randomInt(40, 90);\n+    return `hsl(${h},${s}%,${l}%)`;\n }\n \n export class Highlighter {\n@@ -76,6 +91,8 @@ export class Highlighter {\n         }\n \n         const byTag: Map<string, vscode.Range[]> = new Map();\n+        const colorfulIdents: Map<string, vscode.Range[]> = new Map();\n+\n         for (const tag of this.decorations.keys()) {\n             byTag.set(tag, []);\n         }\n@@ -84,9 +101,23 @@ export class Highlighter {\n             if (!byTag.get(d.tag)) {\n                 continue;\n             }\n-            byTag\n-                .get(d.tag)!\n-                .push(Server.client.protocol2CodeConverter.asRange(d.range));\n+\n+            if (d.id) {\n+                if (!colorfulIdents.has(d.id)) {\n+                    colorfulIdents.set(d.id, []);\n+                }\n+                colorfulIdents\n+                    .get(d.id)!\n+                    .push(\n+                        Server.client.protocol2CodeConverter.asRange(d.range)\n+                    );\n+            } else {\n+                byTag\n+                    .get(d.tag)!\n+                    .push(\n+                        Server.client.protocol2CodeConverter.asRange(d.range)\n+                    );\n+            }\n         }\n \n         for (const tag of byTag.keys()) {\n@@ -96,5 +127,13 @@ export class Highlighter {\n             const ranges = byTag.get(tag)!;\n             editor.setDecorations(dec, ranges);\n         }\n+\n+        for (const [hash, ranges] of colorfulIdents.entries()) {\n+            const dec = vscode.window.createTextEditorDecorationType({\n+                light: { color: fancify(hash, 'light') },\n+                dark: { color: fancify(hash, 'dark') }\n+            });\n+            editor.setDecorations(dec, ranges);\n+        }\n     }\n }"}]}