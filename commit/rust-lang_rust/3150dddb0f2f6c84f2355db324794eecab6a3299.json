{"sha": "3150dddb0f2f6c84f2355db324794eecab6a3299", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTBkZGRiMGYyZjZjODRmMjM1NWRiMzI0Nzk0ZWVjYWI2YTMyOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-25T22:32:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-25T22:32:08Z"}, "message": "Auto merge of #30558 - jonas-schievink:delete-ast, r=nrc\n\nOr more specifically, after running early lints.\n\nCloses #28142", "tree": {"sha": "1c412b5eae1f7f4dab2d65312983448933abbc6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c412b5eae1f7f4dab2d65312983448933abbc6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3150dddb0f2f6c84f2355db324794eecab6a3299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3150dddb0f2f6c84f2355db324794eecab6a3299", "html_url": "https://github.com/rust-lang/rust/commit/3150dddb0f2f6c84f2355db324794eecab6a3299", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3150dddb0f2f6c84f2355db324794eecab6a3299/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b838c586c4da31395d614d9f076430314fa05ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b838c586c4da31395d614d9f076430314fa05ff", "html_url": "https://github.com/rust-lang/rust/commit/5b838c586c4da31395d614d9f076430314fa05ff"}, {"sha": "389e8e3b8172f1d878eb1358e047573a7e76e853", "url": "https://api.github.com/repos/rust-lang/rust/commits/389e8e3b8172f1d878eb1358e047573a7e76e853", "html_url": "https://github.com/rust-lang/rust/commit/389e8e3b8172f1d878eb1358e047573a7e76e853"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "d1c7da1d1075fcb1d6672e1d058400be9d402444", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3150dddb0f2f6c84f2355db324794eecab6a3299/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3150dddb0f2f6c84f2355db324794eecab6a3299/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3150dddb0f2f6c84f2355db324794eecab6a3299", "patch": "@@ -622,6 +622,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"force nonzeroing move optimization on\"),\n     keep_mtwt_tables: bool = (false, parse_bool,\n           \"don't clear the resolution tables after analysis\"),\n+    keep_ast: bool = (false, parse_bool,\n+          \"keep the AST after lowering it to HIR\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "1ac1b5978cfb609cacc6bd9ccf055e9e635ab35b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3150dddb0f2f6c84f2355db324794eecab6a3299/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3150dddb0f2f6c84f2355db324794eecab6a3299/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3150dddb0f2f6c84f2355db324794eecab6a3299", "patch": "@@ -121,7 +121,7 @@ pub fn compile_input(sess: Session,\n         }\n \n         let arenas = ty::CtxtArenas::new();\n-        let ast_map = make_map(&sess, &mut hir_forest);\n+        let hir_map = make_map(&sess, &mut hir_forest);\n \n         write_out_deps(&sess, &outputs, &id);\n \n@@ -130,9 +130,9 @@ pub fn compile_input(sess: Session,\n                                 CompileState::state_after_write_deps(input,\n                                                                      &sess,\n                                                                      outdir,\n-                                                                     &ast_map,\n+                                                                     &hir_map,\n                                                                      &expanded_crate,\n-                                                                     &ast_map.krate(),\n+                                                                     &hir_map.krate(),\n                                                                      &id[..],\n                                                                      &lcx));\n \n@@ -144,9 +144,17 @@ pub fn compile_input(sess: Session,\n              \"early lint checks\",\n              || lint::check_ast_crate(&sess, &expanded_crate));\n \n+        let opt_crate = if sess.opts.debugging_opts.keep_ast ||\n+                           sess.opts.debugging_opts.save_analysis {\n+            Some(&expanded_crate)\n+        } else {\n+            drop(expanded_crate);\n+            None\n+        };\n+\n         phase_3_run_analysis_passes(&sess,\n                                     &cstore,\n-                                    ast_map,\n+                                    hir_map,\n                                     &arenas,\n                                     &id,\n                                     control.make_glob_map,\n@@ -157,7 +165,7 @@ pub fn compile_input(sess: Session,\n                                                 CompileState::state_after_analysis(input,\n                                                                                    &tcx.sess,\n                                                                                    outdir,\n-                                                                                   &expanded_crate,\n+                                                                                   opt_crate,\n                                                                                    tcx.map.krate(),\n                                                                                    &analysis,\n                                                                                    &mir_map,\n@@ -341,15 +349,15 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n     fn state_after_write_deps(input: &'a Input,\n                               session: &'a Session,\n                               out_dir: &'a Option<PathBuf>,\n-                              ast_map: &'a hir_map::Map<'ast>,\n+                              hir_map: &'a hir_map::Map<'ast>,\n                               krate: &'a ast::Crate,\n                               hir_crate: &'a hir::Crate,\n                               crate_name: &'a str,\n                               lcx: &'a LoweringContext<'a>)\n                               -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n             crate_name: Some(crate_name),\n-            ast_map: Some(ast_map),\n+            ast_map: Some(hir_map),\n             krate: Some(krate),\n             hir_crate: Some(hir_crate),\n             lcx: Some(lcx),\n@@ -360,7 +368,7 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n     fn state_after_analysis(input: &'a Input,\n                             session: &'a Session,\n                             out_dir: &'a Option<PathBuf>,\n-                            krate: &'a ast::Crate,\n+                            krate: Option<&'a ast::Crate>,\n                             hir_crate: &'a hir::Crate,\n                             analysis: &'a ty::CrateAnalysis,\n                             mir_map: &'a MirMap<'tcx>,\n@@ -372,7 +380,7 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n             analysis: Some(analysis),\n             mir_map: Some(mir_map),\n             tcx: Some(tcx),\n-            krate: Some(krate),\n+            krate: krate,\n             hir_crate: Some(hir_crate),\n             lcx: Some(lcx),\n             crate_name: Some(crate_name),\n@@ -670,22 +678,20 @@ pub fn assign_node_ids(sess: &Session, krate: ast::Crate) -> ast::Crate {\n }\n \n pub fn make_map<'ast>(sess: &Session,\n-                      forest: &'ast mut front::map::Forest)\n-                      -> front::map::Map<'ast> {\n-    // Construct the 'ast'-map\n-    let map = time(sess.time_passes(),\n-                   \"indexing hir\",\n-                   move || front::map::map_crate(forest));\n-\n-    map\n+                      forest: &'ast mut hir_map::Forest)\n+                      -> hir_map::Map<'ast> {\n+    // Construct the HIR map\n+    time(sess.time_passes(),\n+         \"indexing hir\",\n+         move || hir_map::map_crate(forest))\n }\n \n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                                cstore: &CStore,\n-                                               ast_map: front::map::Map<'tcx>,\n+                                               hir_map: hir_map::Map<'tcx>,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                                name: &str,\n                                                make_glob_map: resolve::MakeGlobMap,\n@@ -694,15 +700,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     where F: for<'a> FnOnce(&'a ty::ctxt<'tcx>, MirMap<'tcx>, ty::CrateAnalysis) -> R\n {\n     let time_passes = sess.time_passes();\n-    let krate = ast_map.krate();\n+    let krate = hir_map.krate();\n \n     time(time_passes,\n          \"external crate/lib resolution\",\n-         || LocalCrateReader::new(sess, cstore, &ast_map).read_crates(krate));\n+         || LocalCrateReader::new(sess, cstore, &hir_map).read_crates(krate));\n \n     let lang_items = time(time_passes,\n                           \"language item collection\",\n-                          || middle::lang_items::collect_language_items(&sess, &ast_map));\n+                          || middle::lang_items::collect_language_items(&sess, &hir_map));\n \n     let resolve::CrateMap {\n         def_map,\n@@ -713,15 +719,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         glob_map,\n     } = time(time_passes,\n              \"resolution\",\n-             || resolve::resolve_crate(sess, &ast_map, make_glob_map));\n+             || resolve::resolve_crate(sess, &hir_map, make_glob_map));\n \n     let named_region_map = time(time_passes,\n                                 \"lifetime resolution\",\n                                 || middle::resolve_lifetime::krate(sess, krate, &def_map.borrow()));\n \n     time(time_passes,\n          \"looking for entry point\",\n-         || middle::entry::find_entry_point(sess, &ast_map));\n+         || middle::entry::find_entry_point(sess, &hir_map));\n \n     sess.plugin_registrar_fn.set(time(time_passes, \"looking for plugin registrar\", || {\n         plugin::build::find_plugin_registrar(sess.diagnostic(), krate)\n@@ -737,13 +743,13 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     time(time_passes,\n          \"static item recursion checking\",\n-         || middle::check_static_recursion::check_crate(sess, krate, &def_map.borrow(), &ast_map));\n+         || middle::check_static_recursion::check_crate(sess, krate, &def_map.borrow(), &hir_map));\n \n     ty::ctxt::create_and_enter(sess,\n                                arenas,\n                                def_map,\n                                named_region_map,\n-                               ast_map,\n+                               hir_map,\n                                freevars,\n                                region_map,\n                                lang_items,"}]}