{"sha": "d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NzliNTdhM2EyMzRhNzU5MjZmMWZmYzVmZTA4OGM3YWQ5N2RhZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-15T17:03:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-15T17:03:39Z"}, "message": "Auto merge of #53164 - davidtwco:issue-52663-span-decl-captured-variables, r=nikomatsakis\n\nProvide span for declaration of captured variables\n\nPart of #52663.\n\nr? @nikomatsakis", "tree": {"sha": "772b726d0709d636f2a31a306f8a6e00c16d93ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/772b726d0709d636f2a31a306f8a6e00c16d93ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "html_url": "https://github.com/rust-lang/rust/commit/d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4b4987cd6dea5406dec0634770839fb31ce72c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4b4987cd6dea5406dec0634770839fb31ce72c", "html_url": "https://github.com/rust-lang/rust/commit/0f4b4987cd6dea5406dec0634770839fb31ce72c"}, {"sha": "5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "html_url": "https://github.com/rust-lang/rust/commit/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e"}], "stats": {"total": 216, "additions": 153, "deletions": 63}, "files": [{"sha": "5991845d265b24a8ce86842d5f10d6d0e34a7dab", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -127,29 +127,31 @@ impl<'tcx> Place<'tcx> {\n     /// of a closure type.\n     pub fn is_upvar_field_projection<'cx, 'gcx>(&self, mir: &'cx Mir<'tcx>,\n                                                 tcx: &TyCtxt<'cx, 'gcx, 'tcx>) -> Option<Field> {\n-        let place = if let Place::Projection(ref proj) = self {\n+        let (place, by_ref) = if let Place::Projection(ref proj) = self {\n             if let ProjectionElem::Deref = proj.elem {\n-                &proj.base\n+                (&proj.base, true)\n             } else {\n-                self\n+                (self, false)\n             }\n         } else {\n-            self\n+            (self, false)\n         };\n \n         match place {\n             Place::Projection(ref proj) => match proj.elem {\n                 ProjectionElem::Field(field, _ty) => {\n                     let base_ty = proj.base.ty(mir, *tcx).to_ty(*tcx);\n \n-                    if  base_ty.is_closure() || base_ty.is_generator() {\n+                    if (base_ty.is_closure() || base_ty.is_generator()) &&\n+                        (!by_ref || mir.upvar_decls[field.index()].by_ref)\n+                    {\n                         Some(field)\n                     } else {\n                         None\n                     }\n                 },\n                 _ => None,\n-            },\n+            }\f\n             _ => None,\n         }\n     }"}, {"sha": "f96b9b8082fa799d2aee174bd92565d7b2cf0c1b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -151,7 +151,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let location_table = &LocationTable::new(mir);\n \n     let mut errors_buffer = Vec::new();\n-    let (move_data, move_errors): (MoveData<'tcx>, Option<Vec<MoveError<'tcx>>>) =\n+    let (move_data, move_errors): (MoveData<'tcx>, Option<Vec<(Place<'tcx>, MoveError<'tcx>)>>) =\n         match MoveData::gather_moves(mir, tcx) {\n             Ok(move_data) => (move_data, None),\n             Err((move_data, move_errors)) => (move_data, Some(move_errors)),"}, {"sha": "d3524e841b223d93d3b927a149ce006a84d5efdb", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 62, "deletions": 22, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -11,11 +11,12 @@\n use rustc::hir;\n use rustc::mir::*;\n use rustc::ty;\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_errors::DiagnosticBuilder;\n+use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;\n+use borrow_check::prefixes::PrefixSet;\n use dataflow::move_paths::{IllegalMoveOrigin, IllegalMoveOriginKind};\n use dataflow::move_paths::{LookupResult, MoveError, MovePathIndex};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n@@ -38,6 +39,7 @@ enum GroupedMoveError<'tcx> {\n     // Match place can't be moved from\n     // e.g. match x[0] { s => (), } where x: &[String]\n     MovesFromMatchPlace {\n+        original_path: Place<'tcx>,\n         span: Span,\n         move_from: Place<'tcx>,\n         kind: IllegalMoveOriginKind<'tcx>,\n@@ -46,37 +48,43 @@ enum GroupedMoveError<'tcx> {\n     // Part of a pattern can't be moved from,\n     // e.g. match &String::new() { &x => (), }\n     MovesFromPattern {\n+        original_path: Place<'tcx>,\n         span: Span,\n         move_from: MovePathIndex,\n         kind: IllegalMoveOriginKind<'tcx>,\n         binds_to: Vec<Local>,\n     },\n     // Everything that isn't from pattern matching.\n     OtherIllegalMove {\n+        original_path: Place<'tcx>,\n         span: Span,\n         kind: IllegalMoveOriginKind<'tcx>,\n     },\n }\n \n impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n-    pub(crate) fn report_move_errors(&mut self, move_errors: Vec<MoveError<'tcx>>) {\n+    pub(crate) fn report_move_errors(&mut self, move_errors: Vec<(Place<'tcx>, MoveError<'tcx>)>) {\n         let grouped_errors = self.group_move_errors(move_errors);\n         for error in grouped_errors {\n             self.report(error);\n         }\n     }\n \n-    fn group_move_errors(&self, errors: Vec<MoveError<'tcx>>) -> Vec<GroupedMoveError<'tcx>> {\n+    fn group_move_errors(\n+        &self,\n+        errors: Vec<(Place<'tcx>, MoveError<'tcx>)>\n+    ) -> Vec<GroupedMoveError<'tcx>> {\n         let mut grouped_errors = Vec::new();\n-        for error in errors {\n-            self.append_to_grouped_errors(&mut grouped_errors, error);\n+        for (original_path, error) in errors {\n+            self.append_to_grouped_errors(&mut grouped_errors, original_path, error);\n         }\n         grouped_errors\n     }\n \n     fn append_to_grouped_errors(\n         &self,\n         grouped_errors: &mut Vec<GroupedMoveError<'tcx>>,\n+        original_path: Place<'tcx>,\n         error: MoveError<'tcx>,\n     ) {\n         match error {\n@@ -116,6 +124,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         self.append_binding_error(\n                             grouped_errors,\n                             kind,\n+                            original_path,\n                             move_from,\n                             *local,\n                             opt_match_place,\n@@ -127,6 +136,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {\n                     span: stmt_source_info.span,\n+                    original_path,\n                     kind,\n                 });\n             }\n@@ -137,6 +147,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         grouped_errors: &mut Vec<GroupedMoveError<'tcx>>,\n         kind: IllegalMoveOriginKind<'tcx>,\n+        original_path: Place<'tcx>,\n         move_from: &Place<'tcx>,\n         bind_to: Local,\n         match_place: &Option<Place<'tcx>>,\n@@ -176,6 +187,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 grouped_errors.push(GroupedMoveError::MovesFromMatchPlace {\n                     span,\n                     move_from: match_place.clone(),\n+                    original_path,\n                     kind,\n                     binds_to,\n                 });\n@@ -206,6 +218,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 grouped_errors.push(GroupedMoveError::MovesFromPattern {\n                     span: match_span,\n                     move_from: mpi,\n+                    original_path,\n                     kind,\n                     binds_to: vec![bind_to],\n                 });\n@@ -215,12 +228,23 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n     fn report(&mut self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n-            let (span, kind): (Span, &IllegalMoveOriginKind) = match error {\n-                GroupedMoveError::MovesFromMatchPlace { span, ref kind, .. }\n-                | GroupedMoveError::MovesFromPattern { span, ref kind, .. }\n-                | GroupedMoveError::OtherIllegalMove { span, ref kind } => (span, kind),\n-            };\n+            let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind) =\n+                match error {\n+                    GroupedMoveError::MovesFromMatchPlace {\n+                        span,\n+                        ref original_path,\n+                        ref kind,\n+                        ..\n+                    } |\n+                    GroupedMoveError::MovesFromPattern { span, ref original_path, ref kind, .. } |\n+                    GroupedMoveError::OtherIllegalMove { span, ref original_path, ref kind } => {\n+                        (span, original_path, kind)\n+                    },\n+                };\n             let origin = Origin::Mir;\n+            debug!(\"report: original_path={:?} span={:?}, kind={:?} \\\n+                   original_path.is_upvar_field_projection={:?}\", original_path, span, kind,\n+                   original_path.is_upvar_field_projection(self.mir, &self.tcx));\n             (\n                 match kind {\n                     IllegalMoveOriginKind::Static => {\n@@ -231,22 +255,17 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         // borrow to provide feedback about why this\n                         // was a move rather than a copy.\n                         let ty = place.ty(self.mir, self.tcx).to_ty(self.tcx);\n+                        let is_upvar_field_projection =\n+                            self.prefixes(&original_path, PrefixSet::All)\n+                            .any(|p| p.is_upvar_field_projection(self.mir, &self.tcx)\n+                                 .is_some());\n                         match ty.sty {\n                             ty::TyArray(..) | ty::TySlice(..) => self\n                                 .tcx\n                                 .cannot_move_out_of_interior_noncopy(span, ty, None, origin),\n                             ty::TyClosure(def_id, closure_substs)\n-                                if !self.mir.upvar_decls.is_empty()\n-                                    && {\n-                                        match place {\n-                                            Place::Projection(ref proj) => {\n-                                                proj.base == Place::Local(Local::new(1))\n-                                            }\n-                                            Place::Promoted(_) |\n-                                            Place::Local(_) | Place::Static(_) => unreachable!(),\n-                                        }\n-                                    } =>\n-                            {\n+                                if !self.mir.upvar_decls.is_empty() && is_upvar_field_projection\n+                            => {\n                                 let closure_kind_ty =\n                                     closure_substs.closure_kind_ty(def_id, self.tcx);\n                                 let closure_kind = closure_kind_ty.to_opt_closure_kind();\n@@ -262,7 +281,28 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                     }\n                                     None => bug!(\"closure kind not inferred by borrowck\"),\n                                 };\n-                                self.tcx.cannot_move_out_of(span, place_description, origin)\n+                                debug!(\"report: closure_kind_ty={:?} closure_kind={:?} \\\n+                                       place_description={:?}\", closure_kind_ty, closure_kind,\n+                                       place_description);\n+\n+                                let mut diag = self.tcx.cannot_move_out_of(\n+                                    span, place_description, origin);\n+\n+                                for prefix in self.prefixes(&original_path, PrefixSet::All) {\n+                                    if let Some(field) = prefix.is_upvar_field_projection(\n+                                            self.mir, &self.tcx) {\n+                                        let upvar_decl = &self.mir.upvar_decls[field.index()];\n+                                        let upvar_hir_id =\n+                                            upvar_decl.var_hir_id.assert_crate_local();\n+                                        let upvar_node_id =\n+                                            self.tcx.hir.hir_to_node_id(upvar_hir_id);\n+                                        let upvar_span = self.tcx.hir.span(upvar_node_id);\n+                                        diag.span_label(upvar_span, \"captured outer variable\");\n+                                        break;\n+                                    }\n+                                }\n+\n+                                diag\n                             }\n                             _ => self\n                                 .tcx"}, {"sha": "283cccd51174a1bbe81e32f8c8def62fb5f3805f", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -36,10 +36,18 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         error_access: AccessKind,\n         location: Location,\n     ) {\n+        debug!(\n+            \"report_mutability_error(\\\n+                access_place={:?}, span={:?}, the_place_err={:?}, error_access={:?}, location={:?},\\\n+            )\",\n+            access_place, span, the_place_err, error_access, location,\n+        );\n+\n         let mut err;\n         let item_msg;\n         let reason;\n         let access_place_desc = self.describe_place(access_place);\n+        debug!(\"report_mutability_error: access_place_desc={:?}\", access_place_desc);\n \n         match the_place_err {\n             Place::Local(local) => {\n@@ -63,7 +71,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 ));\n \n                 item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n-                if self.is_upvar(access_place) {\n+                if access_place.is_upvar_field_projection(self.mir, &self.tcx).is_some() {\n                     reason = \", as it is not declared as mutable\".to_string();\n                 } else {\n                     let name = self.mir.upvar_decls[upvar_index.index()].debug_name;\n@@ -82,7 +90,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         the_place_err.ty(self.mir, self.tcx).to_ty(self.tcx)\n                     ));\n \n-                    reason = if self.is_upvar(access_place) {\n+                    reason = if access_place.is_upvar_field_projection(self.mir,\n+                                                                       &self.tcx).is_some() {\n                         \", as it is a captured variable in a `Fn` closure\".to_string()\n                     } else {\n                         \", as `Fn` closures cannot mutate their captured variables\".to_string()\n@@ -155,6 +164,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             }) => bug!(\"Unexpected immutable place.\"),\n         }\n \n+        debug!(\"report_mutability_error: item_msg={:?}, reason={:?}\", item_msg, reason);\n+\n         // `act` and `acted_on` are strings that let us abstract over\n         // the verbs used in some diagnostic messages.\n         let act;\n@@ -199,6 +210,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n+        debug!(\"report_mutability_error: act={:?}, acted_on={:?}\", act, acted_on);\n+\n         match the_place_err {\n             // We want to suggest users use `let mut` for local (user\n             // variable) mutations...\n@@ -382,31 +395,6 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n         err.buffer(&mut self.errors_buffer);\n     }\n-\n-    // Does this place refer to what the user sees as an upvar\n-    fn is_upvar(&self, place: &Place<'tcx>) -> bool {\n-        match *place {\n-            Place::Projection(box Projection {\n-                ref base,\n-                elem: ProjectionElem::Field(_, _),\n-            }) => {\n-                let base_ty = base.ty(self.mir, self.tcx).to_ty(self.tcx);\n-                is_closure_or_generator(base_ty)\n-            }\n-            Place::Projection(box Projection {\n-                base:\n-                    Place::Projection(box Projection {\n-                        ref base,\n-                        elem: ProjectionElem::Field(upvar_index, _),\n-                    }),\n-                elem: ProjectionElem::Deref,\n-            }) => {\n-                let base_ty = base.ty(self.mir, self.tcx).to_ty(self.tcx);\n-                is_closure_or_generator(base_ty) && self.mir.upvar_decls[upvar_index.index()].by_ref\n-            }\n-            _ => false,\n-        }\n-    }\n }\n \n fn suggest_ampmut_self<'cx, 'gcx, 'tcx>("}, {"sha": "60030f270205523937958bbb7f78ab341002015c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -27,7 +27,7 @@ struct MoveDataBuilder<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     data: MoveData<'tcx>,\n-    errors: Vec<MoveError<'tcx>>,\n+    errors: Vec<(Place<'tcx>, MoveError<'tcx>)>,\n }\n \n impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n@@ -186,7 +186,9 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n-    fn finalize(self) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<MoveError<'tcx>>)> {\n+    fn finalize(\n+        self\n+    ) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         debug!(\"{}\", {\n             debug!(\"moves for {:?}:\", self.mir.span);\n             for (j, mo) in self.data.moves.iter_enumerated() {\n@@ -207,9 +209,10 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub(super) fn gather_moves<'a, 'gcx, 'tcx>(mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                                           -> Result<MoveData<'tcx>,\n-                                                     (MoveData<'tcx>, Vec<MoveError<'tcx>>)> {\n+pub(super) fn gather_moves<'a, 'gcx, 'tcx>(\n+    mir: &Mir<'tcx>,\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>\n+) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n     let mut builder = MoveDataBuilder::new(mir, tcx);\n \n     builder.gather_args();\n@@ -407,7 +410,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n         let path = match self.move_path_for(place) {\n             Ok(path) | Err(MoveError::UnionMove { path }) => path,\n             Err(error @ MoveError::IllegalMove { .. }) => {\n-                self.builder.errors.push(error);\n+                self.builder.errors.push((place.clone(), error));\n                 return;\n             }\n         };"}, {"sha": "7b4cbdf7131b0e67b2c3b78b5c2a3a29210be39a", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -313,7 +313,7 @@ impl<'tcx> MoveError<'tcx> {\n \n impl<'a, 'gcx, 'tcx> MoveData<'tcx> {\n     pub fn gather_moves(mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                        -> Result<Self, (Self, Vec<MoveError<'tcx>>)> {\n+                        -> Result<Self, (Self, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         builder::gather_moves(mir, tcx)\n     }\n }"}, {"sha": "45fa1764f7027230af918979f7648d00e8a418cb", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -1,6 +1,8 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:15:17\n    |\n+LL |     let x = Box::new(0);\n+   |         - captured outer variable\n LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n    |                 ^ cannot move out of captured variable in an `Fn` closure\n "}, {"sha": "9f56b26648b2ac9de625c77df93d3b03f0610ff5", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -1,6 +1,9 @@\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/borrowck-move-by-capture.rs:19:29\n    |\n+LL |     let bar: Box<_> = box 3;\n+   |         --- captured outer variable\n+LL |     let _g = to_fn_mut(|| {\n LL |         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of captured variable in an `FnMut` closure\n "}, {"sha": "0eb5fc8c324356ad358fa2438ac9bb1c992834a0", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -1,6 +1,9 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n    |\n+LL |     let y = vec![format!(\"World\")];\n+   |         - captured outer variable\n+LL |     call(|| {\n LL |         y.into_iter();\n    |         ^ cannot move out of captured variable in an `Fn` closure\n "}, {"sha": "a9345e86f724817652892986419e26b313268195", "filename": "src/test/ui/issues/issue-4335.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -1,6 +1,8 @@\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/issue-4335.rs:16:20\n    |\n+LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n+   |             - captured outer variable\n LL |     id(Box::new(|| *v))\n    |                    ^^ cannot move out of captured variable in an `FnMut` closure\n "}, {"sha": "13a6fc15ce3185b7ebbbd5093d018c515fad9293", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -1,6 +1,8 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:21:28\n    |\n+LL |     let i = box 3;\n+   |         - captured outer variable\n LL |     let _f = to_fn(|| test(i)); //~ ERROR cannot move out\n    |                            ^ cannot move out of captured variable in an `Fn` closure\n "}, {"sha": "dc40b0c44fd02b34b164916cf4031dcd70d06630", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn expect_fn<F>(f: F) where F : Fn() {\n+    f();\n+}\n+\n+fn main() {\n+   {\n+       let x = (vec![22], vec![44]);\n+       expect_fn(|| drop(x.0));\n+       //~^ ERROR cannot move out of captured variable in an `Fn` closure [E0507]\n+   }\n+}"}, {"sha": "51f19565855a7364022bdbad5e659faa15d4fd33", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -0,0 +1,11 @@\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/issue-52663-span-decl-captured-variable.rs:20:26\n+   |\n+LL |        let x = (vec![22], vec![44]);\n+   |            - captured outer variable\n+LL |        expect_fn(|| drop(x.0));\n+   |                          ^^^ cannot move out of captured variable in an `Fn` closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "a05a3911aa771144eb177e4b291e274e5b49bc29", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -31,6 +31,9 @@ LL |     f.f.call_mut(())\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13\n    |\n+LL |     let mut f = move |g: Box<FnMut(isize)>, b: isize| {\n+   |         ----- captured outer variable\n+...\n LL |         foo(f);\n    |             ^ cannot move out of captured variable in an `FnMut` closure\n "}, {"sha": "4baa54e34c75532750ffba07c939ae627e9639c8", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.nll.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d679b57a3a234a75926f1ffc5fe088c7ad97daf0/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr?ref=d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "patch": "@@ -1,24 +1,32 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:25:31\n    |\n+LL |         let x = Box::new(0);\n+   |             - captured outer variable\n LL |         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n    |                               ^ cannot move out of captured variable in an `Fn` closure\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:29:35\n    |\n+LL |         let x = Box::new(0);\n+   |             - captured outer variable\n LL |         let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n    |                                   ^ cannot move out of captured variable in an `FnMut` closure\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:38:36\n    |\n+LL |         let x = Box::new(0);\n+   |             - captured outer variable\n LL |         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n    |                                    ^ cannot move out of captured variable in an `Fn` closure\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:42:40\n    |\n+LL |         let x = Box::new(0);\n+   |             - captured outer variable\n LL |         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n    |                                        ^ cannot move out of captured variable in an `FnMut` closure\n "}]}