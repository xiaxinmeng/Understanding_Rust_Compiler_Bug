{"sha": "60e8413a4e5b7c67001176783893b12411ce355e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZTg0MTNhNGU1YjdjNjcwMDExNzY3ODM4OTNiMTI0MTFjZTM1NWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-23T15:54:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-23T15:54:33Z"}, "message": "Auto merge of #4825 - Manishearth:rustup, r=flip1995\n\nRustup to rustc 1.41.0-nightly (35ef33a8 2019-11-21)\n\nI don't have the right fix for the fmtstr tests, and I'm also hitting problems caused by https://github.com/messense/rustc-test/issues/3\n\nList of rustups:\n- rust-lang/rust#66271 (syntax: Keep string literals in ABIs and `asm!` more precisely)\n- rust-lang/rust#65355 (Stabilize `!` in Rust 1.41.0)\n- rust-lang/rust#66515 (Reduce size of `hir::Expr` by boxing more of `hir::InlineAsm`)\n- rust-lang/rust#66389 (Specific labels when referring to \"expected\" and \"found\" types)\n- rust-lang/rust#66074 ([mir-opt] Turn on the `ConstProp` pass by default)\n\nchangelog: none", "tree": {"sha": "56d4459acd79780ab17ce454425e351ca26f5fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d4459acd79780ab17ce454425e351ca26f5fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60e8413a4e5b7c67001176783893b12411ce355e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60e8413a4e5b7c67001176783893b12411ce355e", "html_url": "https://github.com/rust-lang/rust/commit/60e8413a4e5b7c67001176783893b12411ce355e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60e8413a4e5b7c67001176783893b12411ce355e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f1769734b6204fc6bece8556b7b80a7683271e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f1769734b6204fc6bece8556b7b80a7683271e", "html_url": "https://github.com/rust-lang/rust/commit/b4f1769734b6204fc6bece8556b7b80a7683271e"}, {"sha": "553db874d7183d33040807142b1f4f79441c1d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/553db874d7183d33040807142b1f4f79441c1d4c", "html_url": "https://github.com/rust-lang/rust/commit/553db874d7183d33040807142b1f4f79441c1d4c"}], "stats": {"total": 314, "additions": 132, "deletions": 182}, "files": [{"sha": "4d4ed4cc55b73bafae2fa02c707370f8a2b99135", "filename": ".travis.yml", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -61,8 +61,9 @@ matrix:\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang/cargo\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-    - env: INTEGRATION=rust-lang-nursery/chalk\n-      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n+    # FIXME: Output too large\n+    # - env: INTEGRATION=rust-lang-nursery/chalk\n+    #   if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=Geal/nom\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     # FIXME blocked on https://github.com/rust-lang/rust-clippy/issues/4727\n@@ -72,8 +73,9 @@ matrix:\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=bluss/rust-itertools\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-    - env: INTEGRATION=serde-rs/serde\n-      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n+    # FIXME: rustc ICE on `serde_test_suite`\n+    # - env: INTEGRATION=serde-rs/serde\n+    #   if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang-nursery/stdsimd\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-random/rand"}, {"sha": "82a2e71bb2b9eeaa9a22fe91fc168ad349d3d11d", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -41,7 +41,8 @@ rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n \n [dev-dependencies]\n cargo_metadata = \"0.9.0\"\n-compiletest_rs = { version = \"0.3.24\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.4.0\", features = [\"tmp\"] }\n+tester = \"0.7\"\n lazy_static = \"1.0\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }\n serde = { version = \"1.0\", features = [\"derive\"] }"}, {"sha": "52aca5000c1c3814d232d1d1e101627a913c2b16", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(box_syntax)]\n #![feature(box_patterns)]\n-#![feature(never_type)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "31d97d790cba9539ca6b076220ab77dc110f5898", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -720,7 +720,7 @@ fn never_loop_expr(expr: &Expr, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n         | ExprKind::Closure(_, _, _, _, _)\n-        | ExprKind::InlineAsm(_, _, _)\n+        | ExprKind::InlineAsm(_)\n         | ExprKind::Path(_)\n         | ExprKind::Lit(_)\n         | ExprKind::Err => NeverLoopResult::Otherwise,"}, {"sha": "81a05e50d33bb1d8a948a43a6a28430ee755a373", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -458,8 +458,8 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     println!(\"Ret(None) = {};\", current);\n                 }\n             },\n-            ExprKind::InlineAsm(_, ref _input, ref _output) => {\n-                println!(\"InlineAsm(_, ref input, ref output) = {};\", current);\n+            ExprKind::InlineAsm(_) => {\n+                println!(\"InlineAsm(_) = {};\", current);\n                 println!(\"    // unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n             },\n             ExprKind::Struct(ref path, ref fields, ref opt_base) => {"}, {"sha": "9376b923bd47b8c44744b33ba387863e01abb51c", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -282,14 +282,16 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n                 print_expr(cx, e, indent + 1);\n             }\n         },\n-        hir::ExprKind::InlineAsm(_, ref input, ref output) => {\n+        hir::ExprKind::InlineAsm(ref asm) => {\n+            let inputs = &asm.inputs_exprs;\n+            let outputs = &asm.outputs_exprs;\n             println!(\"{}InlineAsm\", ind);\n             println!(\"{}inputs:\", ind);\n-            for e in input {\n+            for e in inputs.iter() {\n                 print_expr(cx, e, indent + 1);\n             }\n             println!(\"{}outputs:\", ind);\n-            for e in output {\n+            for e in outputs.iter() {\n                 print_expr(cx, e, indent + 1);\n             }\n         },"}, {"sha": "07e8fb34c72f0ac8fceec23534c8315d8b7e16e0", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 35, "deletions": 57, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::Applicability;\n use rustc_lexer::unescape::{self, EscapeError};\n use rustc_parse::parser;\n use syntax::ast::*;\n+use syntax::symbol::Symbol;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n use syntax_pos::{BytePos, Span};\n@@ -190,7 +191,7 @@ impl EarlyLintPass for Write {\n         if mac.path == sym!(println) {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `println!`\");\n             if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n-                if fmt_str.contents.is_empty() {\n+                if fmt_str.symbol == Symbol::intern(\"\") {\n                     span_lint_and_sugg(\n                         cx,\n                         PRINTLN_EMPTY_STRING,\n@@ -205,7 +206,7 @@ impl EarlyLintPass for Write {\n         } else if mac.path == sym!(print) {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n             if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n-                if check_newlines(&fmt_str.contents, fmt_str.style) {\n+                if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n                         PRINT_WITH_NEWLINE,\n@@ -216,7 +217,7 @@ impl EarlyLintPass for Write {\n                                 \"use `println!` instead\",\n                                 vec![\n                                     (mac.path.span, String::from(\"println\")),\n-                                    (fmt_str.newline_span(), String::new()),\n+                                    (newline_span(&fmt_str), String::new()),\n                                 ],\n                                 Applicability::MachineApplicable,\n                             );\n@@ -226,7 +227,7 @@ impl EarlyLintPass for Write {\n             }\n         } else if mac.path == sym!(write) {\n             if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, true) {\n-                if check_newlines(&fmt_str.contents, fmt_str.style) {\n+                if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n                         WRITE_WITH_NEWLINE,\n@@ -237,7 +238,7 @@ impl EarlyLintPass for Write {\n                                 \"use `writeln!()` instead\",\n                                 vec![\n                                     (mac.path.span, String::from(\"writeln\")),\n-                                    (fmt_str.newline_span(), String::new()),\n+                                    (newline_span(&fmt_str), String::new()),\n                                 ],\n                                 Applicability::MachineApplicable,\n                             );\n@@ -247,7 +248,7 @@ impl EarlyLintPass for Write {\n             }\n         } else if mac.path == sym!(writeln) {\n             if let (Some(fmt_str), expr) = check_tts(cx, &mac.tts, true) {\n-                if fmt_str.contents.is_empty() {\n+                if fmt_str.symbol == Symbol::intern(\"\") {\n                     let mut applicability = Applicability::MachineApplicable;\n                     let suggestion = expr.map_or_else(\n                         move || {\n@@ -272,37 +273,27 @@ impl EarlyLintPass for Write {\n     }\n }\n \n-/// The arguments of a `print[ln]!` or `write[ln]!` invocation.\n-struct FmtStr {\n-    /// The contents of the format string (inside the quotes).\n-    contents: String,\n-    style: StrStyle,\n-    /// The span of the format string, including quotes, the raw marker, and any raw hashes.\n-    span: Span,\n-}\n-\n-impl FmtStr {\n-    /// Given a format string that ends in a newline and its span, calculates the span of the\n-    /// newline.\n-    fn newline_span(&self) -> Span {\n-        let sp = self.span;\n+/// Given a format string that ends in a newline and its span, calculates the span of the\n+/// newline.\n+fn newline_span(fmtstr: &StrLit) -> Span {\n+    let sp = fmtstr.span;\n+    let contents = &fmtstr.symbol.as_str();\n \n-        let newline_sp_hi = sp.hi()\n-            - match self.style {\n-                StrStyle::Cooked => BytePos(1),\n-                StrStyle::Raw(hashes) => BytePos((1 + hashes).into()),\n-            };\n-\n-        let newline_sp_len = if self.contents.ends_with('\\n') {\n-            BytePos(1)\n-        } else if self.contents.ends_with(r\"\\n\") {\n-            BytePos(2)\n-        } else {\n-            panic!(\"expected format string to contain a newline\");\n+    let newline_sp_hi = sp.hi()\n+        - match fmtstr.style {\n+            StrStyle::Cooked => BytePos(1),\n+            StrStyle::Raw(hashes) => BytePos((1 + hashes).into()),\n         };\n \n-        sp.with_lo(newline_sp_hi - newline_sp_len).with_hi(newline_sp_hi)\n-    }\n+    let newline_sp_len = if contents.ends_with('\\n') {\n+        BytePos(1)\n+    } else if contents.ends_with(r\"\\n\") {\n+        BytePos(2)\n+    } else {\n+        panic!(\"expected format string to contain a newline\");\n+    };\n+\n+    sp.with_lo(newline_sp_hi - newline_sp_len).with_hi(newline_sp_hi)\n }\n \n /// Checks the arguments of `print[ln]!` and `write[ln]!` calls. It will return a tuple of two\n@@ -325,7 +316,7 @@ impl FmtStr {\n /// (Some(\"string to write: {}\"), Some(buf))\n /// ```\n #[allow(clippy::too_many_lines)]\n-fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (Option<FmtStr>, Option<Expr>) {\n+fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n     use fmt_macros::*;\n     let tts = tts.clone();\n \n@@ -342,12 +333,11 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (O\n         }\n     }\n \n-    let (fmtstr, fmtstyle) = match parser.parse_str().map_err(|mut err| err.cancel()) {\n-        Ok((fmtstr, fmtstyle)) => (fmtstr.to_string(), fmtstyle),\n+    let fmtstr = match parser.parse_str_lit() {\n+        Ok(fmtstr) => fmtstr,\n         Err(_) => return (None, expr),\n     };\n-    let fmtspan = parser.prev_span;\n-    let tmp = fmtstr.clone();\n+    let tmp = fmtstr.symbol.as_str();\n     let mut args = vec![];\n     let mut fmt_parser = Parser::new(&tmp, None, Vec::new(), false);\n     while let Some(piece) = fmt_parser.next() {\n@@ -377,26 +367,12 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (O\n             ty_span: None,\n         };\n         if !parser.eat(&token::Comma) {\n-            return (\n-                Some(FmtStr {\n-                    contents: fmtstr,\n-                    style: fmtstyle,\n-                    span: fmtspan,\n-                }),\n-                expr,\n-            );\n+            return (Some(fmtstr), expr);\n         }\n         let token_expr = if let Ok(expr) = parser.parse_expr().map_err(|mut err| err.cancel()) {\n             expr\n         } else {\n-            return (\n-                Some(FmtStr {\n-                    contents: fmtstr,\n-                    style: fmtstyle,\n-                    span: fmtspan,\n-                }),\n-                None,\n-            );\n+            return (Some(fmtstr), None);\n         };\n         match &token_expr.kind {\n             ExprKind::Lit(_) => {\n@@ -448,11 +424,13 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (O\n /// Checks if the format string contains a single newline that terminates it.\n ///\n /// Literal and escaped newlines are both checked (only literal for raw strings).\n-fn check_newlines(contents: &str, style: StrStyle) -> bool {\n+fn check_newlines(fmtstr: &StrLit) -> bool {\n     let mut has_internal_newline = false;\n     let mut last_was_cr = false;\n     let mut should_lint = false;\n \n+    let contents = &fmtstr.symbol.as_str();\n+\n     let mut cb = |r: Range<usize>, c: Result<char, EscapeError>| {\n         let c = c.unwrap();\n \n@@ -466,7 +444,7 @@ fn check_newlines(contents: &str, style: StrStyle) -> bool {\n         }\n     };\n \n-    match style {\n+    match fmtstr.style {\n         StrStyle::Cooked => unescape::unescape_str(contents, &mut cb),\n         StrStyle::Raw(_) => unescape::unescape_raw_str(contents, &mut cb),\n     }"}, {"sha": "2a4448cc0ec4134d0a3e7bc801b24091a656dfe1", "filename": "src/driver.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -75,6 +75,12 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n             clippy_lints::register_pre_expansion_lints(&mut lint_store, &conf);\n             clippy_lints::register_renamed(&mut lint_store);\n         }));\n+\n+        // FIXME: #4825; This is required, because Clippy lints that are based on MIR have to be\n+        // run on the unoptimized MIR. On the other hand this results in some false negatives. If\n+        // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n+        // use for Clippy.\n+        config.opts.debugging_opts.mir_opt_level = 0;\n     }\n }\n "}, {"sha": "43139e95666e3fc4ec3c21cd225c4eec6ba5ec50", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,7 +1,7 @@\n #![feature(test)]\n \n use compiletest_rs as compiletest;\n-extern crate test;\n+extern crate tester as test;\n \n use std::env::{set_var, var};\n use std::ffi::OsStr;"}, {"sha": "b6a4adde8488403c24eebbaa81681463ad59f14f", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -16,8 +16,8 @@ LL | fn foo<u32>(a: u32) -> u32 {\n LL |     42\n    |     ^^ expected type parameter `u32`, found integer\n    |\n-   = note: expected type `u32`\n-              found type `{integer}`\n+   = note: expected type parameter `u32`\n+                        found type `{integer}`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "4df241c9fc39be35b1fe3a00ac017e637ad69e82", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![warn(clippy::diverging_sub_expression)]\n #![allow(clippy::match_same_arms, clippy::logic_bug)]\n "}, {"sha": "170e7d92de4acff6b643a1ead8d762e2d61e2d8b", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,37 +1,37 @@\n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:21:10\n+  --> $DIR/diverging_sub_expression.rs:20:10\n    |\n LL |     b || diverge();\n    |          ^^^^^^^^^\n    |\n    = note: `-D clippy::diverging-sub-expression` implied by `-D warnings`\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:22:10\n+  --> $DIR/diverging_sub_expression.rs:21:10\n    |\n LL |     b || A.foo();\n    |          ^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:31:26\n+  --> $DIR/diverging_sub_expression.rs:30:26\n    |\n LL |             6 => true || return,\n    |                          ^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:32:26\n+  --> $DIR/diverging_sub_expression.rs:31:26\n    |\n LL |             7 => true || continue,\n    |                          ^^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:35:26\n+  --> $DIR/diverging_sub_expression.rs:34:26\n    |\n LL |             3 => true || diverge(),\n    |                          ^^^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:40:26\n+  --> $DIR/diverging_sub_expression.rs:39:26\n    |\n LL |             _ => true || break,\n    |                          ^^^^^"}, {"sha": "0744676d1399ab9ad58c281f5c90d26b7dae67e2", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,23 +1,3 @@\n-error: index out of bounds: the len is 4 but the index is 4\n-  --> $DIR/indexing_slicing.rs:18:5\n-   |\n-LL |     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error: index out of bounds: the len is 4 but the index is 8\n-  --> $DIR/indexing_slicing.rs:19:5\n-   |\n-LL |     x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^^^^^^\n-\n-error: index out of bounds: the len is 4 but the index is 15\n-  --> $DIR/indexing_slicing.rs:54:5\n-   |\n-LL |     x[N]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^\n-\n error: indexing may panic.\n   --> $DIR/indexing_slicing.rs:13:5\n    |\n@@ -209,5 +189,5 @@ LL |     v[M];\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "a92063bf80714b92943c8f0771d8840fb63660ed", "filename": "tests/ui/infallible_destructuring_match.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Finfallible_destructuring_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Finfallible_destructuring_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.fixed?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(exhaustive_patterns, never_type)]\n+#![feature(exhaustive_patterns)]\n #![allow(dead_code, unreachable_code, unused_variables)]\n #![allow(clippy::let_and_return)]\n "}, {"sha": "4dd9e837b6d837cfec4f7f6f5dbe1c9020f0fff4", "filename": "tests/ui/infallible_destructuring_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(exhaustive_patterns, never_type)]\n+#![feature(exhaustive_patterns)]\n #![allow(dead_code, unreachable_code, unused_variables)]\n #![allow(clippy::let_and_return)]\n "}, {"sha": "bac05c0931c1563fe6ab350693f1046f1f053cb3", "filename": "tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.fixed?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(never_type)]\n #![allow(unused_mut)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;"}, {"sha": "df265b6eac9f1fa766d2c28df31949b6dc87e942", "filename": "tests/ui/must_use_candidates.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(never_type)]\n #![allow(unused_mut)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;"}, {"sha": "2f33f5df5f407432b74ca7109b234aa10a12c60c", "filename": "tests/ui/must_use_candidates.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fmust_use_candidates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fmust_use_candidates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.stderr?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,31 +1,31 @@\n error: this function could have a `#[must_use]` attribute\n-  --> $DIR/must_use_candidates.rs:12:1\n+  --> $DIR/must_use_candidates.rs:11:1\n    |\n LL | pub fn pure(i: u8) -> u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn pure(i: u8) -> u8`\n    |\n    = note: `-D clippy::must-use-candidate` implied by `-D warnings`\n \n error: this method could have a `#[must_use]` attribute\n-  --> $DIR/must_use_candidates.rs:17:5\n+  --> $DIR/must_use_candidates.rs:16:5\n    |\n LL |     pub fn inherent_pure(&self) -> u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn inherent_pure(&self) -> u8`\n \n error: this function could have a `#[must_use]` attribute\n-  --> $DIR/must_use_candidates.rs:48:1\n+  --> $DIR/must_use_candidates.rs:47:1\n    |\n LL | pub fn with_marker(_d: std::marker::PhantomData<&mut u32>) -> bool {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn with_marker(_d: std::marker::PhantomData<&mut u32>) -> bool`\n \n error: this function could have a `#[must_use]` attribute\n-  --> $DIR/must_use_candidates.rs:60:1\n+  --> $DIR/must_use_candidates.rs:59:1\n    |\n LL | pub fn rcd(_x: Rc<u32>) -> bool {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn rcd(_x: Rc<u32>) -> bool`\n \n error: this function could have a `#[must_use]` attribute\n-  --> $DIR/must_use_candidates.rs:68:1\n+  --> $DIR/must_use_candidates.rs:67:1\n    |\n LL | pub fn arcd(_x: Arc<u32>) -> bool {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn arcd(_x: Arc<u32>) -> bool`"}, {"sha": "e5e706e8483e6c43c459921b2427cf1651bd81f9", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n+\n use std::ffi::OsString;\n use std::path::Path;\n \n@@ -17,11 +18,11 @@ fn main() {\n \n     let _s = Path::new(\"/a/b/\").join(\"c\");\n \n-    let _s = Path::new(\"/a/b/\").join(\"c\");\n+    let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n \n     let _s = OsString::new();\n \n-    let _s = OsString::new();\n+    let _s = OsString::new().to_os_string();\n \n     // Check that lint level works\n     #[allow(clippy::redundant_clone)]\n@@ -46,6 +47,7 @@ fn main() {\n     let _ = Some(String::new()).unwrap_or_else(|| x.0.clone()); // ok; closure borrows `x`\n \n     with_branch(Alpha, true);\n+    cannot_double_move(Alpha);\n     cannot_move_from_type_with_drop();\n     borrower_propagation();\n }\n@@ -60,6 +62,10 @@ fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {\n     }\n }\n \n+fn cannot_double_move(a: Alpha) -> (Alpha, Alpha) {\n+    (a.clone(), a)\n+}\n+\n struct TypeWithDrop {\n     x: String,\n }"}, {"sha": "9ea2de9a3daac9fa5308b09c615a2abc853c6d05", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n+\n use std::ffi::OsString;\n use std::path::Path;\n \n@@ -46,6 +47,7 @@ fn main() {\n     let _ = Some(String::new()).unwrap_or_else(|| x.0.clone()); // ok; closure borrows `x`\n \n     with_branch(Alpha, true);\n+    cannot_double_move(Alpha);\n     cannot_move_from_type_with_drop();\n     borrower_propagation();\n }\n@@ -60,6 +62,10 @@ fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {\n     }\n }\n \n+fn cannot_double_move(a: Alpha) -> (Alpha, Alpha) {\n+    (a.clone(), a)\n+}\n+\n struct TypeWithDrop {\n     x: String,\n }"}, {"sha": "62f4ce7645edaf7cfccc1e4cc8eee2df748427f4", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 23, "deletions": 47, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,159 +1,135 @@\n error: redundant clone\n-  --> $DIR/redundant_clone.rs:7:42\n+  --> $DIR/redundant_clone.rs:8:42\n    |\n LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n    |                                          ^^^^^^^^^^^^ help: remove this\n    |\n    = note: `-D clippy::redundant-clone` implied by `-D warnings`\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:7:14\n+  --> $DIR/redundant_clone.rs:8:14\n    |\n LL |     let _s = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:10:15\n+  --> $DIR/redundant_clone.rs:11:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:10:14\n+  --> $DIR/redundant_clone.rs:11:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:13:15\n+  --> $DIR/redundant_clone.rs:14:15\n    |\n LL |     let _s = s.to_string();\n    |               ^^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:13:14\n+  --> $DIR/redundant_clone.rs:14:14\n    |\n LL |     let _s = s.to_string();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:16:15\n+  --> $DIR/redundant_clone.rs:17:15\n    |\n LL |     let _s = s.to_owned();\n    |               ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:16:14\n+  --> $DIR/redundant_clone.rs:17:14\n    |\n LL |     let _s = s.to_owned();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:18:42\n+  --> $DIR/redundant_clone.rs:19:42\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n    |                                          ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:18:14\n+  --> $DIR/redundant_clone.rs:19:14\n    |\n LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_owned();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:20:42\n-   |\n-LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n-   |                                          ^^^^^^^^^^^^^^ help: remove this\n-   |\n-note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:20:14\n-   |\n-LL |     let _s = Path::new(\"/a/b/\").join(\"c\").to_path_buf();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: redundant clone\n-  --> $DIR/redundant_clone.rs:22:29\n+  --> $DIR/redundant_clone.rs:23:29\n    |\n LL |     let _s = OsString::new().to_owned();\n    |                             ^^^^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:22:14\n+  --> $DIR/redundant_clone.rs:23:14\n    |\n LL |     let _s = OsString::new().to_owned();\n    |              ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:24:29\n-   |\n-LL |     let _s = OsString::new().to_os_string();\n-   |                             ^^^^^^^^^^^^^^^ help: remove this\n-   |\n-note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:24:14\n-   |\n-LL |     let _s = OsString::new().to_os_string();\n-   |              ^^^^^^^^^^^^^^^\n-\n-error: redundant clone\n-  --> $DIR/redundant_clone.rs:31:19\n+  --> $DIR/redundant_clone.rs:32:19\n    |\n LL |     let _t = tup.0.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:31:14\n+  --> $DIR/redundant_clone.rs:32:14\n    |\n LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:57:22\n+  --> $DIR/redundant_clone.rs:59:22\n    |\n LL |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:57:21\n+  --> $DIR/redundant_clone.rs:59:21\n    |\n LL |         (a.clone(), a.clone())\n    |                     ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:113:15\n+  --> $DIR/redundant_clone.rs:119:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:113:14\n+  --> $DIR/redundant_clone.rs:119:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:114:15\n+  --> $DIR/redundant_clone.rs:120:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:114:14\n+  --> $DIR/redundant_clone.rs:120:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:124:19\n+  --> $DIR/redundant_clone.rs:130:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:124:18\n+  --> $DIR/redundant_clone.rs:130:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "1d0a3ecd0ff8df69cee72d525dd6e60646d910b3", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n #![allow(unused)]\n "}, {"sha": "2fe18f923f08fa1143195d968f01d8cc2bf5590d", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n \n-#![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n #![allow(unused)]\n "}, {"sha": "5f9bf2020b6efc7861f9932dfb5fc2f9ca9c8d8a", "filename": "tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,5 +1,5 @@\n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn_fixable.rs:36:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:35:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n@@ -9,127 +9,127 @@ LL |     x.field.map(do_nothing);\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn_fixable.rs:38:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:37:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn_fixable.rs:40:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:39:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:46:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:45:5\n    |\n LL |     x.field.map(|value| x.do_result_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:48:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:47:5\n    |\n LL |     x.field.map(|value| { x.do_result_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:51:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:50:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:53:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:52:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:55:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:54:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:57:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:56:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:60:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:59:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:62:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:61:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:64:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:63:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:66:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:65:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:71:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:70:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:73:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:72:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:75:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:74:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:78:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:77:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-"}, {"sha": "cc01976df9954bee6dcd6710f2af58ecc0ef3cad", "filename": "tests/ui/result_map_unit_fn_unfixable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,4 +1,3 @@\n-#![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n #![allow(unused)]\n "}, {"sha": "16caac5828afe6ba3b2f5e6ecafd65e2f40ac1b2", "filename": "tests/ui/result_map_unit_fn_unfixable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e8413a4e5b7c67001176783893b12411ce355e/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr?ref=60e8413a4e5b7c67001176783893b12411ce355e", "patch": "@@ -1,23 +1,23 @@\n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/result_map_unit_fn_unfixable.rs:17:5\n+  --> $DIR/result_map_unit_fn_unfixable.rs:16:5\n    |\n LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n    |     ^ not found in this scope\n \n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/result_map_unit_fn_unfixable.rs:19:5\n+  --> $DIR/result_map_unit_fn_unfixable.rs:18:5\n    |\n LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n    |     ^ not found in this scope\n \n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/result_map_unit_fn_unfixable.rs:23:5\n+  --> $DIR/result_map_unit_fn_unfixable.rs:22:5\n    |\n LL |     x.field.map(|value| {\n    |     ^ not found in this scope\n \n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/result_map_unit_fn_unfixable.rs:27:5\n+  --> $DIR/result_map_unit_fn_unfixable.rs:26:5\n    |\n LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n    |     ^ not found in this scope"}]}