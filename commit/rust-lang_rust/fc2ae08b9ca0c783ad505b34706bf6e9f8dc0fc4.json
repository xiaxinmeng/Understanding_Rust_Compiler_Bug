{"sha": "fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmFlMDhiOWNhMGM3ODNhZDUwNWIzNDcwNmJmNmU5ZjhkYzBmYzQ=", "commit": {"author": {"name": "Graham Fawcett", "email": "fawcett@uwindsor.ca", "date": "2012-01-18T21:11:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-21T21:33:16Z"}, "message": "issue #1352: change param order on {std,core}::extfmt::str_init_elt to mirror vec::init_elt.", "tree": {"sha": "5cf5d59045a3ffc40d85c10c4c9eb3b9b937206c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf5d59045a3ffc40d85c10c4c9eb3b9b937206c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4", "html_url": "https://github.com/rust-lang/rust/commit/fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4/comments", "author": {"login": "gmfawcett", "id": 49970, "node_id": "MDQ6VXNlcjQ5OTcw", "avatar_url": "https://avatars.githubusercontent.com/u/49970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmfawcett", "html_url": "https://github.com/gmfawcett", "followers_url": "https://api.github.com/users/gmfawcett/followers", "following_url": "https://api.github.com/users/gmfawcett/following{/other_user}", "gists_url": "https://api.github.com/users/gmfawcett/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmfawcett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmfawcett/subscriptions", "organizations_url": "https://api.github.com/users/gmfawcett/orgs", "repos_url": "https://api.github.com/users/gmfawcett/repos", "events_url": "https://api.github.com/users/gmfawcett/events{/privacy}", "received_events_url": "https://api.github.com/users/gmfawcett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7763b40c71372c6be7a65673a968f6174bab4209", "url": "https://api.github.com/repos/rust-lang/rust/commits/7763b40c71372c6be7a65673a968f6174bab4209", "html_url": "https://github.com/rust-lang/rust/commit/7763b40c71372c6be7a65673a968f6174bab4209"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "38b36f59d323d85fb04ff793956df9d8d7ffa099", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4", "patch": "@@ -374,7 +374,7 @@ mod rt {\n                 let len = str::char_len(s);\n                 if len < prec {\n                     let diff = prec - len;\n-                    let pad = str_init_elt('0', diff);\n+                    let pad = str_init_elt(diff, '0');\n                     pad + s\n                 } else { s }\n             };\n@@ -387,7 +387,7 @@ mod rt {\n     }\n \n     // FIXME: This might be useful in str: but needs to be utf8 safe first\n-    fn str_init_elt(c: char, n_elts: uint) -> str {\n+    fn str_init_elt(n_elts: uint, c: char) -> str {\n         let svec = vec::init_elt::<u8>(n_elts, c as u8);\n \n         ret str::unsafe_from_bytes(svec);\n@@ -408,7 +408,7 @@ mod rt {\n         let padchar = ' ';\n         let diff = uwidth - strlen;\n         if have_flag(cv.flags, flag_left_justify) {\n-            let padstr = str_init_elt(padchar, diff);\n+            let padstr = str_init_elt(diff, padchar);\n             ret s + padstr;\n         }\n         let might_zero_pad = false;\n@@ -430,7 +430,7 @@ mod rt {\n             padchar = '0';\n             zero_padding = true;\n         }\n-        let padstr = str_init_elt(padchar, diff);\n+        let padstr = str_init_elt(diff, padchar);\n         // This is completely heinous. If we have a signed value then\n         // potentially rip apart the intermediate result and insert some\n         // zeros. It may make sense to convert zero padding to a precision"}, {"sha": "16a5cca4c94bc27613d3c7bf6afa59c6657414e7", "filename": "src/libstd/extfmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4/src%2Flibstd%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4/src%2Flibstd%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fextfmt.rs?ref=fc2ae08b9ca0c783ad505b34706bf6e9f8dc0fc4", "patch": "@@ -366,7 +366,7 @@ mod rt {\n                 let len = str::char_len(s);\n                 if len < prec {\n                     let diff = prec - len;\n-                    let pad = str_init_elt('0', diff);\n+                    let pad = str_init_elt(diff, '0');\n                     pad + s\n                 } else { s }\n             };\n@@ -379,7 +379,7 @@ mod rt {\n     }\n \n     // FIXME: This might be useful in str: but needs to be utf8 safe first\n-    fn str_init_elt(c: char, n_elts: uint) -> str {\n+    fn str_init_elt(n_elts: uint, c: char) -> str {\n         let svec = vec::init_elt::<u8>(n_elts, c as u8);\n \n         ret str::unsafe_from_bytes(svec);\n@@ -400,7 +400,7 @@ mod rt {\n         let padchar = ' ';\n         let diff = uwidth - strlen;\n         if have_flag(cv.flags, flag_left_justify) {\n-            let padstr = str_init_elt(padchar, diff);\n+            let padstr = str_init_elt(diff, padchar);\n             ret s + padstr;\n         }\n         let might_zero_pad = false;\n@@ -422,7 +422,7 @@ mod rt {\n             padchar = '0';\n             zero_padding = true;\n         }\n-        let padstr = str_init_elt(padchar, diff);\n+        let padstr = str_init_elt(diff, padchar);\n         // This is completely heinous. If we have a signed value then\n         // potentially rip apart the intermediate result and insert some\n         // zeros. It may make sense to convert zero padding to a precision"}]}