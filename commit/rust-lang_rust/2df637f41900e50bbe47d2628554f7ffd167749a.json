{"sha": "2df637f41900e50bbe47d2628554f7ffd167749a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZjYzN2Y0MTkwMGU1MGJiZTQ3ZDI2Mjg1NTRmN2ZmZDE2Nzc0OWE=", "commit": {"author": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-03-14T05:28:10Z"}, "committer": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-03-14T05:28:10Z"}, "message": "Fix incorrect diagnositics for failing built in eager macros", "tree": {"sha": "0210f11dbff67587608a1d14c46b9b9987972ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0210f11dbff67587608a1d14c46b9b9987972ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df637f41900e50bbe47d2628554f7ffd167749a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df637f41900e50bbe47d2628554f7ffd167749a", "html_url": "https://github.com/rust-lang/rust/commit/2df637f41900e50bbe47d2628554f7ffd167749a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df637f41900e50bbe47d2628554f7ffd167749a/comments", "author": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4245973e246d634fb58bdf0e570b59d0f7340f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/4245973e246d634fb58bdf0e570b59d0f7340f86", "html_url": "https://github.com/rust-lang/rust/commit/4245973e246d634fb58bdf0e570b59d0f7340f86"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "9590b8ce3068fd919825ce6e33c215f6f5c15726", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2df637f41900e50bbe47d2628554f7ffd167749a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df637f41900e50bbe47d2628554f7ffd167749a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=2df637f41900e50bbe47d2628554f7ffd167749a", "patch": "@@ -13,7 +13,7 @@ use hir_expand::{\n     builtin_macro::find_builtin_macro,\n     name::{AsName, Name},\n     proc_macro::ProcMacroExpander,\n-    HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n+    HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n use hir_expand::{InFile, MacroCallLoc};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -1455,7 +1455,8 @@ impl ModCollector<'_, '_> {\n         let mut ast_id = AstIdWithPath::new(self.file_id, mac.ast_id, mac.path.clone());\n \n         // Case 1: try to resolve in legacy scope and expand macro_rules\n-        if let Ok(Ok(macro_call_id)) = macro_call_as_call_id(\n+        let mut error = None;\n+        match macro_call_as_call_id(\n             &ast_id,\n             self.def_collector.db,\n             self.def_collector.def_map.krate,\n@@ -1468,16 +1469,28 @@ impl ModCollector<'_, '_> {\n                     )\n                 })\n             },\n-            &mut |_err| (),\n+            &mut |err| error = Some(err),\n         ) {\n-            self.def_collector.unexpanded_macros.push(MacroDirective {\n-                module_id: self.module_id,\n-                ast_id,\n-                legacy: Some(macro_call_id),\n-                depth: self.macro_depth + 1,\n-            });\n+            Ok(Ok(macro_call_id)) => {\n+                self.def_collector.unexpanded_macros.push(MacroDirective {\n+                    module_id: self.module_id,\n+                    ast_id,\n+                    legacy: Some(macro_call_id),\n+                    depth: self.macro_depth + 1,\n+                });\n \n-            return;\n+                return;\n+            }\n+            Ok(Err(_)) => {\n+                // Built-in macro failed eager expansion.\n+                self.def_collector.def_map.diagnostics.push(DefDiagnostic::macro_error(\n+                    self.module_id,\n+                    MacroCallKind::FnLike(ast_id.ast_id),\n+                    error.map(|e| e.to_string()).unwrap_or_else(|| String::from(\"macro error\")),\n+                ));\n+                return;\n+            }\n+            Err(UnresolvedMacro) => (),\n         }\n \n         // Case 2: resolve in module scope, expand during name resolution."}, {"sha": "bfc1ab13f013a64b18c818053163007936ce9568", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2df637f41900e50bbe47d2628554f7ffd167749a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df637f41900e50bbe47d2628554f7ffd167749a/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=2df637f41900e50bbe47d2628554f7ffd167749a", "patch": "@@ -152,3 +152,48 @@ fn inactive_via_cfg_attr() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn unresolved_legacy_scope_macro() {\n+    check_diagnostics(\n+        r#\"\n+        //- /lib.rs\n+          macro_rules! m { () => {} }\n+\n+          m!();\n+          m2!();\n+        //^^^^^^ unresolved macro call\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn unresolved_module_scope_macro() {\n+    check_diagnostics(\n+        r#\"\n+        //- /lib.rs\n+          mod mac {\n+            #[macro_export]\n+            macro_rules! m { () => {} }\n+          }\n+\n+          self::m!();\n+          self::m2!();\n+        //^^^^^^^^^^^^ unresolved macro call\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn builtin_macro_fails_expansion() {\n+    check_diagnostics(\n+        r#\"\n+        //- /lib.rs\n+          #[rustc_builtin_macro]\n+          macro_rules! include { () => {} }\n+\n+          include!(\"doesntexist\");\n+        //^^^^^^^^^^^^^^^^^^^^^^^^ could not convert tokens\n+        \"#,\n+    );\n+}"}]}