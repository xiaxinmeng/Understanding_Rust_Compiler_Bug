{"sha": "19e0d7d596015599fd705eecfe6f695aabc8632d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZTBkN2Q1OTYwMTU1OTlmZDcwNWVlY2ZlNmY2OTVhYWJjODYzMmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-14T15:10:31Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-14T15:10:31Z"}, "message": "Merge #1676\n\n1676: Fix for<'lifetime> for types specified by path r=matklad a=eupn\n\nFixes #1467.\n\nCo-authored-by: Evgenii P <eupn@protonmail.com>", "tree": {"sha": "531ca24c725da983739477a146db7c823dae073b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/531ca24c725da983739477a146db7c823dae073b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e0d7d596015599fd705eecfe6f695aabc8632d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e0d7d596015599fd705eecfe6f695aabc8632d", "html_url": "https://github.com/rust-lang/rust/commit/19e0d7d596015599fd705eecfe6f695aabc8632d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e0d7d596015599fd705eecfe6f695aabc8632d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "978e3e384b045ea72ba952e7f94a2a4c82297e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/978e3e384b045ea72ba952e7f94a2a4c82297e66", "html_url": "https://github.com/rust-lang/rust/commit/978e3e384b045ea72ba952e7f94a2a4c82297e66"}, {"sha": "8222a1fddfe73dab5e00437efeffa7d95db0b6be", "url": "https://api.github.com/repos/rust-lang/rust/commits/8222a1fddfe73dab5e00437efeffa7d95db0b6be", "html_url": "https://github.com/rust-lang/rust/commit/8222a1fddfe73dab5e00437efeffa7d95db0b6be"}], "stats": {"total": 113, "additions": 100, "deletions": 13}, "files": [{"sha": "0495f34aeb003ac19e9dacee98031586b43c065e", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -554,7 +554,7 @@ fn arg_list(p: &mut Parser) {\n //     let _ = format!();\n // }\n fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n-    assert!(paths::is_path_start(p) || p.at(T![<]));\n+    assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n     match p.current() {"}, {"sha": "401c738a3f55da2a8a7d0d674c8342a1e89eaee9", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -62,7 +62,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n     if let Some(m) = literal(p) {\n         return Some((m, BlockLike::NotBlock));\n     }\n-    if paths::is_path_start(p) || p.at(T![<]) {\n+    if paths::is_path_start(p) {\n         return Some(path_expr(p, r));\n     }\n     let la = p.nth(1);"}, {"sha": "b7da44758d90a3a2056d3330ecd5231a74d6418a", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -49,7 +49,7 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemF\n         }\n         Err(m) => m,\n     };\n-    if paths::is_path_start(p) {\n+    if paths::is_use_path_start(p) {\n         match macro_call(p) {\n             BlockLike::Block => (),\n             BlockLike::NotBlock => {\n@@ -378,7 +378,7 @@ pub(crate) fn mod_item_list(p: &mut Parser) {\n }\n \n fn macro_call(p: &mut Parser) -> BlockLike {\n-    assert!(paths::is_path_start(p));\n+    assert!(paths::is_use_path_start(p));\n     paths::use_path(p);\n     macro_call_after_excl(p)\n }"}, {"sha": "c0c7d0ec6faa6c7ade2d134aeb99b460e8071a86", "filename": "crates/ra_parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -65,7 +65,7 @@ fn use_tree(p: &mut Parser) {\n         // use crate::Item;\n         // use self::some::Struct;\n         // use crate_name::some_item;\n-        _ if paths::is_path_start(p) => {\n+        _ if paths::is_use_path_start(p) => {\n             paths::use_path(p);\n             match p.current() {\n                 T![as] => {"}, {"sha": "07eb53b0c701a63f2014cfb5786db49c106f1a26", "filename": "crates/ra_parser/src/grammar/paths.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -4,6 +4,10 @@ pub(super) const PATH_FIRST: TokenSet =\n     token_set![IDENT, SELF_KW, SUPER_KW, CRATE_KW, COLONCOLON, L_ANGLE];\n \n pub(super) fn is_path_start(p: &Parser) -> bool {\n+    is_use_path_start(p) || p.at(T![<])\n+}\n+\n+pub(super) fn is_use_path_start(p: &Parser) -> bool {\n     match p.current() {\n         IDENT | T![self] | T![super] | T![crate] | T![::] => true,\n         _ => false,\n@@ -58,7 +62,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n     if first && p.eat(T![<]) {\n         types::type_(p);\n         if p.eat(T![as]) {\n-            if is_path_start(p) {\n+            if is_use_path_start(p) {\n                 types::path_type(p);\n             } else {\n                 p.error(\"expected a trait\");"}, {"sha": "df60007070ce104b1c122471a697ae2a554cb78c", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -65,7 +65,7 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     {\n         return Some(bind_pat(p, true));\n     }\n-    if paths::is_path_start(p) {\n+    if paths::is_use_path_start(p) {\n         return Some(path_pat(p));\n     }\n \n@@ -118,7 +118,7 @@ fn literal_pat(p: &mut Parser) -> CompletedMarker {\n //     let Bar(..) = ();\n // }\n fn path_pat(p: &mut Parser) -> CompletedMarker {\n-    assert!(paths::is_path_start(p));\n+    assert!(paths::is_use_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n     let kind = match p.current() {"}, {"sha": "d739df72773b3ecec4a89995cf51864f8724ec71", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -101,7 +101,7 @@ fn type_bound(p: &mut Parser) -> bool {\n     match p.current() {\n         LIFETIME => p.bump(),\n         T![for] => types::for_type(p),\n-        _ if paths::is_path_start(p) => types::path_type_(p, false),\n+        _ if paths::is_use_path_start(p) => types::path_type_(p, false),\n         _ => {\n             m.abandon(p);\n             return false;"}, {"sha": "29d173305cf5ab410db6f1f5a4d31a88f44234c3", "filename": "crates/ra_parser/src/grammar/types.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -29,7 +29,7 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n         T![dyn ] => dyn_trait_type(p),\n         // Some path types are not allowed to have bounds (no plus)\n         T![<] => path_type_(p, allow_bounds),\n-        _ if paths::is_path_start(p) => path_or_macro_type_(p, allow_bounds),\n+        _ if paths::is_use_path_start(p) => path_or_macro_type_(p, allow_bounds),\n         _ => {\n             p.err_recover(\"expected type\", TYPE_RECOVERY_SET);\n         }\n@@ -205,6 +205,7 @@ pub(super) fn for_binder(p: &mut Parser) {\n // type A = for<'a> fn() -> ();\n // fn foo<T>(_t: &T) where for<'a> &'a T: Iterator {}\n // fn bar<T>(_t: &T) where for<'a> &'a mut T: Iterator {}\n+// fn baz<T>(_t: &T) where for<'a> <&'a T as Baz>::Foo: Iterator {}\n pub(super) fn for_type(p: &mut Parser) {\n     assert!(p.at(T![for]));\n     let m = p.start();\n@@ -251,7 +252,7 @@ pub(super) fn path_type(p: &mut Parser) {\n // type A = foo!();\n // type B = crate::foo!();\n fn path_or_macro_type_(p: &mut Parser, allow_bounds: bool) {\n-    assert!(paths::is_path_start(p) || p.at(T![<]));\n+    assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::type_path(p);\n \n@@ -270,7 +271,7 @@ fn path_or_macro_type_(p: &mut Parser, allow_bounds: bool) {\n }\n \n pub(super) fn path_type_(p: &mut Parser, allow_bounds: bool) {\n-    assert!(paths::is_path_start(p) || p.at(T![<]));\n+    assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::type_path(p);\n "}, {"sha": "d6774d438bc6b7db29752023fe0847d80a3bbba4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0081_for_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rs?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -1,3 +1,4 @@\n type A = for<'a> fn() -> ();\n fn foo<T>(_t: &T) where for<'a> &'a T: Iterator {}\n fn bar<T>(_t: &T) where for<'a> &'a mut T: Iterator {}\n+fn baz<T>(_t: &T) where for<'a> <&'a T as Baz>::Foo: Iterator {}"}, {"sha": "c12ce4ddb8bcde027f7c807d18ddf37a7dbeeb52", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0081_for_type.txt", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/19e0d7d596015599fd705eecfe6f695aabc8632d/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.txt?ref=19e0d7d596015599fd705eecfe6f695aabc8632d", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@[0; 135)\n+SOURCE_FILE@[0; 200)\n   TYPE_ALIAS_DEF@[0; 28)\n     TYPE_KW@[0; 4) \"type\"\n     WHITESPACE@[4; 5) \" \"\n@@ -157,3 +157,84 @@ SOURCE_FILE@[0; 135)\n       L_CURLY@[132; 133) \"{\"\n       R_CURLY@[133; 134) \"}\"\n   WHITESPACE@[134; 135) \"\\n\"\n+  FN_DEF@[135; 199)\n+    FN_KW@[135; 137) \"fn\"\n+    WHITESPACE@[137; 138) \" \"\n+    NAME@[138; 141)\n+      IDENT@[138; 141) \"baz\"\n+    TYPE_PARAM_LIST@[141; 144)\n+      L_ANGLE@[141; 142) \"<\"\n+      TYPE_PARAM@[142; 143)\n+        NAME@[142; 143)\n+          IDENT@[142; 143) \"T\"\n+      R_ANGLE@[143; 144) \">\"\n+    PARAM_LIST@[144; 152)\n+      L_PAREN@[144; 145) \"(\"\n+      PARAM@[145; 151)\n+        BIND_PAT@[145; 147)\n+          NAME@[145; 147)\n+            IDENT@[145; 147) \"_t\"\n+        COLON@[147; 148) \":\"\n+        WHITESPACE@[148; 149) \" \"\n+        REFERENCE_TYPE@[149; 151)\n+          AMP@[149; 150) \"&\"\n+          PATH_TYPE@[150; 151)\n+            PATH@[150; 151)\n+              PATH_SEGMENT@[150; 151)\n+                NAME_REF@[150; 151)\n+                  IDENT@[150; 151) \"T\"\n+      R_PAREN@[151; 152) \")\"\n+    WHITESPACE@[152; 153) \" \"\n+    WHERE_CLAUSE@[153; 196)\n+      WHERE_KW@[153; 158) \"where\"\n+      WHITESPACE@[158; 159) \" \"\n+      WHERE_PRED@[159; 196)\n+        FOR_TYPE@[159; 186)\n+          FOR_KW@[159; 162) \"for\"\n+          TYPE_PARAM_LIST@[162; 166)\n+            L_ANGLE@[162; 163) \"<\"\n+            LIFETIME_PARAM@[163; 165)\n+              LIFETIME@[163; 165) \"\\'a\"\n+            R_ANGLE@[165; 166) \">\"\n+          WHITESPACE@[166; 167) \" \"\n+          PATH_TYPE@[167; 186)\n+            PATH@[167; 186)\n+              PATH@[167; 181)\n+                PATH_SEGMENT@[167; 181)\n+                  L_ANGLE@[167; 168) \"<\"\n+                  REFERENCE_TYPE@[168; 173)\n+                    AMP@[168; 169) \"&\"\n+                    LIFETIME@[169; 171) \"\\'a\"\n+                    WHITESPACE@[171; 172) \" \"\n+                    PATH_TYPE@[172; 173)\n+                      PATH@[172; 173)\n+                        PATH_SEGMENT@[172; 173)\n+                          NAME_REF@[172; 173)\n+                            IDENT@[172; 173) \"T\"\n+                  WHITESPACE@[173; 174) \" \"\n+                  AS_KW@[174; 176) \"as\"\n+                  WHITESPACE@[176; 177) \" \"\n+                  PATH_TYPE@[177; 180)\n+                    PATH@[177; 180)\n+                      PATH_SEGMENT@[177; 180)\n+                        NAME_REF@[177; 180)\n+                          IDENT@[177; 180) \"Baz\"\n+                  R_ANGLE@[180; 181) \">\"\n+              COLONCOLON@[181; 183) \"::\"\n+              PATH_SEGMENT@[183; 186)\n+                NAME_REF@[183; 186)\n+                  IDENT@[183; 186) \"Foo\"\n+        COLON@[186; 187) \":\"\n+        WHITESPACE@[187; 188) \" \"\n+        TYPE_BOUND_LIST@[188; 196)\n+          TYPE_BOUND@[188; 196)\n+            PATH_TYPE@[188; 196)\n+              PATH@[188; 196)\n+                PATH_SEGMENT@[188; 196)\n+                  NAME_REF@[188; 196)\n+                    IDENT@[188; 196) \"Iterator\"\n+    WHITESPACE@[196; 197) \" \"\n+    BLOCK@[197; 199)\n+      L_CURLY@[197; 198) \"{\"\n+      R_CURLY@[198; 199) \"}\"\n+  WHITESPACE@[199; 200) \"\\n\""}]}