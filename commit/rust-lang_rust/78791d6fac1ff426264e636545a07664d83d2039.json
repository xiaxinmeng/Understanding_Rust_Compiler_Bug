{"sha": "78791d6fac1ff426264e636545a07664d83d2039", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NzkxZDZmYWMxZmY0MjYyNjRlNjM2NTQ1YTA3NjY0ZDgzZDIwMzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T13:26:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T13:26:52Z"}, "message": "Use ids for Callable", "tree": {"sha": "bd0825246d6f26f7831f50dad8e39a131848a513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0825246d6f26f7831f50dad8e39a131848a513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78791d6fac1ff426264e636545a07664d83d2039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78791d6fac1ff426264e636545a07664d83d2039", "html_url": "https://github.com/rust-lang/rust/commit/78791d6fac1ff426264e636545a07664d83d2039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78791d6fac1ff426264e636545a07664d83d2039/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1", "html_url": "https://github.com/rust-lang/rust/commit/9047a4ad4620d3b37d17a11e6dee0ea4ffbd7af1"}], "stats": {"total": 84, "additions": 50, "deletions": 34}, "files": [{"sha": "8c045aaef297542ca42094d04e881b2c50aa2ccb", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78791d6fac1ff426264e636545a07664d83d2039/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78791d6fac1ff426264e636545a07664d83d2039/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=78791d6fac1ff426264e636545a07664d83d2039", "patch": "@@ -171,7 +171,7 @@ impl TypeCtor {\n             | TypeCtor::Tuple { .. } => None,\n             TypeCtor::Closure { def, .. } => def.krate(db),\n             TypeCtor::Adt(adt) => adt.krate(db),\n-            TypeCtor::FnDef(callable) => callable.krate(db),\n+            TypeCtor::FnDef(callable) => Some(callable.krate(db).into()),\n             TypeCtor::AssociatedType(type_alias) => type_alias.krate(db),\n         }\n     }\n@@ -856,13 +856,20 @@ impl HirDisplay for ApplicationTy {\n             TypeCtor::FnDef(def) => {\n                 let sig = f.db.callable_item_signature(def);\n                 let name = match def {\n-                    CallableDef::Function(ff) => ff.name(f.db),\n-                    CallableDef::Struct(s) => s.name(f.db).unwrap_or_else(Name::missing),\n-                    CallableDef::EnumVariant(e) => e.name(f.db).unwrap_or_else(Name::missing),\n+                    CallableDef::FunctionId(ff) => f.db.function_data(ff).name.clone(),\n+                    CallableDef::StructId(s) => {\n+                        f.db.struct_data(s.0).name.clone().unwrap_or_else(Name::missing)\n+                    }\n+                    CallableDef::EnumVariantId(e) => {\n+                        let enum_data = f.db.enum_data(e.parent);\n+                        enum_data.variants[e.local_id].name.clone().unwrap_or_else(Name::missing)\n+                    }\n                 };\n                 match def {\n-                    CallableDef::Function(_) => write!(f, \"fn {}\", name)?,\n-                    CallableDef::Struct(_) | CallableDef::EnumVariant(_) => write!(f, \"{}\", name)?,\n+                    CallableDef::FunctionId(_) => write!(f, \"fn {}\", name)?,\n+                    CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {\n+                        write!(f, \"{}\", name)?\n+                    }\n                 }\n                 if self.parameters.len() > 0 {\n                     write!(f, \"<\")?;"}, {"sha": "1d6df2b7ad5eb5ecdf404f987244f99777b0f6a8", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/78791d6fac1ff426264e636545a07664d83d2039/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78791d6fac1ff426264e636545a07664d83d2039/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=78791d6fac1ff426264e636545a07664d83d2039", "patch": "@@ -8,6 +8,7 @@ use hir_def::{\n     generics::GenericParams,\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n+    ContainerId, Lookup,\n };\n use hir_expand::name;\n \n@@ -660,18 +661,21 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n                 // add obligation for trait implementation, if this is a trait method\n                 match def {\n-                    CallableDef::Function(f) => {\n-                        if let Some(trait_) = f.parent_trait(self.db) {\n+                    CallableDef::FunctionId(f) => {\n+                        if let ContainerId::TraitId(trait_) = f.lookup(self.db).container {\n                             // construct a TraitDef\n                             let substs = a_ty.parameters.prefix(\n                                 self.db\n-                                    .generic_params(trait_.id.into())\n+                                    .generic_params(trait_.into())\n                                     .count_params_including_parent(),\n                             );\n-                            self.obligations.push(Obligation::Trait(TraitRef { trait_, substs }));\n+                            self.obligations.push(Obligation::Trait(TraitRef {\n+                                trait_: trait_.into(),\n+                                substs,\n+                            }));\n                         }\n                     }\n-                    CallableDef::Struct(_) | CallableDef::EnumVariant(_) => {}\n+                    CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {}\n                 }\n             }\n         }"}, {"sha": "27cfe00c11a9e81cc7ce49d2b3a8b0c7ab228628", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/78791d6fac1ff426264e636545a07664d83d2039/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78791d6fac1ff426264e636545a07664d83d2039/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=78791d6fac1ff426264e636545a07664d83d2039", "patch": "@@ -14,9 +14,11 @@ use hir_def::{\n     path::{GenericArg, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, EnumVariantId, FunctionId, GenericDefId, LocalStructFieldId, StructId, VariantId,\n+    AdtId, AstItemDef, EnumVariantId, FunctionId, GenericDefId, HasModule, LocalStructFieldId,\n+    Lookup, StructId, VariantId,\n };\n use ra_arena::map::ArenaMap;\n+use ra_db::CrateId;\n \n use super::{\n     FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, TraitRef,\n@@ -546,9 +548,9 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n /// Build the signature of a callable item (function, struct or enum variant).\n pub(crate) fn callable_item_sig(db: &impl HirDatabase, def: CallableDef) -> FnSig {\n     match def {\n-        CallableDef::Function(f) => fn_sig_for_fn(db, f.id),\n-        CallableDef::Struct(s) => fn_sig_for_struct_constructor(db, s.id),\n-        CallableDef::EnumVariant(e) => fn_sig_for_enum_variant_constructor(db, e.into()),\n+        CallableDef::FunctionId(f) => fn_sig_for_fn(db, f),\n+        CallableDef::StructId(s) => fn_sig_for_struct_constructor(db, s),\n+        CallableDef::EnumVariantId(e) => fn_sig_for_enum_variant_constructor(db, e),\n     }\n }\n \n@@ -643,7 +645,7 @@ fn fn_sig_for_fn(db: &impl HirDatabase, def: FunctionId) -> FnSig {\n fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n     let generics = db.generic_params(def.id.into());\n     let substs = Substs::identity(&generics);\n-    Ty::apply(TypeCtor::FnDef(def.into()), substs)\n+    Ty::apply(TypeCtor::FnDef(def.id.into()), substs)\n }\n \n /// Build the declared type of a const.\n@@ -723,7 +725,7 @@ fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n     }\n     let generics = db.generic_params(def.id.into());\n     let substs = Substs::identity(&generics);\n-    Ty::apply(TypeCtor::FnDef(def.into()), substs)\n+    Ty::apply(TypeCtor::FnDef(def.id.into()), substs)\n }\n \n fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId) -> FnSig {\n@@ -749,7 +751,7 @@ fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) ->\n     }\n     let generics = db.generic_params(def.parent_enum(db).id.into());\n     let substs = Substs::identity(&generics);\n-    Ty::apply(TypeCtor::FnDef(def.into()), substs)\n+    Ty::apply(TypeCtor::FnDef(EnumVariantId::from(def).into()), substs)\n }\n \n fn type_for_adt(db: &impl HirDatabase, adt: impl Into<Adt>) -> Ty {\n@@ -806,28 +808,28 @@ impl From<ModuleDef> for Option<TypableDef> {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum CallableDef {\n-    Function(Function),\n-    Struct(Struct),\n-    EnumVariant(EnumVariant),\n+    FunctionId(FunctionId),\n+    StructId(StructId),\n+    EnumVariantId(EnumVariantId),\n }\n-impl_froms!(CallableDef: Function, Struct, EnumVariant);\n+impl_froms!(CallableDef: FunctionId, StructId, EnumVariantId);\n \n impl CallableDef {\n-    pub fn krate(self, db: &impl HirDatabase) -> Option<crate::Crate> {\n+    pub fn krate(self, db: &impl HirDatabase) -> CrateId {\n         match self {\n-            CallableDef::Function(f) => f.krate(db),\n-            CallableDef::Struct(s) => s.krate(db),\n-            CallableDef::EnumVariant(e) => e.parent_enum(db).krate(db),\n+            CallableDef::FunctionId(f) => f.lookup(db).module(db).krate,\n+            CallableDef::StructId(s) => s.0.module(db).krate,\n+            CallableDef::EnumVariantId(e) => e.parent.module(db).krate,\n         }\n     }\n }\n \n impl From<CallableDef> for GenericDefId {\n     fn from(def: CallableDef) -> GenericDefId {\n         match def {\n-            CallableDef::Function(f) => f.id.into(),\n-            CallableDef::Struct(s) => s.id.into(),\n-            CallableDef::EnumVariant(e) => EnumVariantId::from(e).into(),\n+            CallableDef::FunctionId(f) => f.into(),\n+            CallableDef::StructId(s) => s.into(),\n+            CallableDef::EnumVariantId(e) => e.into(),\n         }\n     }\n }"}, {"sha": "9beceb29cf9e91da3a240143bf97024e94712ee8", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78791d6fac1ff426264e636545a07664d83d2039/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78791d6fac1ff426264e636545a07664d83d2039/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=78791d6fac1ff426264e636545a07664d83d2039", "patch": "@@ -26,14 +26,17 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     );\n     let (mut call_info, has_self) = match &calling_node {\n         FnCallNode::CallExpr(expr) => {\n-            //FIXME: apply subst\n+            //FIXME: don't poke into Ty\n             let (callable_def, _subst) = analyzer.type_of(db, &expr.expr()?)?.as_callable()?;\n             match callable_def {\n-                hir::CallableDef::Function(it) => {\n-                    (CallInfo::with_fn(db, it), it.has_self_param(db))\n+                hir::CallableDef::FunctionId(it) => {\n+                    let fn_def = it.into();\n+                    (CallInfo::with_fn(db, fn_def), fn_def.has_self_param(db))\n+                }\n+                hir::CallableDef::StructId(it) => (CallInfo::with_struct(db, it.into())?, false),\n+                hir::CallableDef::EnumVariantId(it) => {\n+                    (CallInfo::with_enum_variant(db, it.into())?, false)\n                 }\n-                hir::CallableDef::Struct(it) => (CallInfo::with_struct(db, it)?, false),\n-                hir::CallableDef::EnumVariant(it) => (CallInfo::with_enum_variant(db, it)?, false),\n             }\n         }\n         FnCallNode::MethodCallExpr(expr) => {"}]}