{"sha": "889c9272cb670891ed3b2dca4aef4f333110fee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OWM5MjcyY2I2NzA4OTFlZDNiMmRjYTRhZWY0ZjMzMzExMGZlZTc=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-09-22T20:21:27Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:13Z"}, "message": "Remove `SocketCred` for `emscripten`", "tree": {"sha": "022111d675bfcb904bd4abc96cbcf7c0c6289105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022111d675bfcb904bd4abc96cbcf7c0c6289105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/889c9272cb670891ed3b2dca4aef4f333110fee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/889c9272cb670891ed3b2dca4aef4f333110fee7", "html_url": "https://github.com/rust-lang/rust/commit/889c9272cb670891ed3b2dca4aef4f333110fee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/889c9272cb670891ed3b2dca4aef4f333110fee7/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fcb83483240a274016aa2552952a42a97168c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcb83483240a274016aa2552952a42a97168c31", "html_url": "https://github.com/rust-lang/rust/commit/0fcb83483240a274016aa2552952a42a97168c31"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "112d72dc29bc705bf635a1f5bbd586d677422064", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/889c9272cb670891ed3b2dca4aef4f333110fee7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889c9272cb670891ed3b2dca4aef4f333110fee7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=889c9272cb670891ed3b2dca4aef4f333110fee7", "patch": "@@ -9,7 +9,7 @@ use crate::slice::from_raw_parts;\n use crate::sys::unix::ext::net::addr::{sockaddr_un, SocketAddr};\n use crate::sys::unix::net::Socket;\n \n-#[cfg(any(target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n use libc::{gid_t, pid_t, uid_t};\n \n pub(super) fn recv_vectored_with_ancillary_from(\n@@ -167,12 +167,12 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n }\n \n /// Unix credential.\n-#[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n     ///\n@@ -237,11 +237,11 @@ impl<'a> Iterator for ScmRights<'a> {\n /// This control message contains unix credentials.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_CREDENTIALS` or `SCM_CREDS`.\n-#[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -263,7 +263,7 @@ pub enum AncillaryError {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     ScmCredentials(ScmCredentials<'a>),\n }\n \n@@ -286,7 +286,7 @@ impl<'a> AncillaryData<'a> {\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n     /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n         let scm_credentials = ScmCredentials(ancillary_data_iter);\n@@ -303,11 +303,7 @@ impl<'a> AncillaryData<'a> {\n             match (*cmsg).cmsg_level {\n                 libc::SOL_SOCKET => match (*cmsg).cmsg_type {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n-                    #[cfg(any(\n-                        target_os = \"android\",\n-                        target_os = \"emscripten\",\n-                        target_os = \"linux\",\n-                    ))]\n+                    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n@@ -505,7 +501,7 @@ impl<'a> SocketAncillary<'a> {\n     /// Technically, that means this operation adds a control message with the level `SOL_SOCKET`\n     /// and type `SCM_CREDENTIALS` or `SCM_CREDS`.\n     ///\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n         self.truncated = false;"}]}