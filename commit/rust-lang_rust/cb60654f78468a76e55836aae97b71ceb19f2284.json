{"sha": "cb60654f78468a76e55836aae97b71ceb19f2284", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjA2NTRmNzg0NjhhNzZlNTU4MzZhYWU5N2I3MWNlYjE5ZjIyODQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-10-27T14:05:38Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-11-05T12:44:09Z"}, "message": "improper ctypes: adjust lint msg for extern fns\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "56fbd6781215194ed211acd076386aa95d0486ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56fbd6781215194ed211acd076386aa95d0486ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb60654f78468a76e55836aae97b71ceb19f2284", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl3BbpkACgkQJZLnbIc4\nH9nyQhAAlezY5Tj0s1J1M+PmMarnN/zRdyN/UjbKlprKBIJ486Y6FtvafrKVnib0\n57YRugq/i0+c1wwTm80Gf83QdArfuWB8j8TTEcT6FIuExUUAuJ5SO1NqYSFwb2la\nwLCbw+ENt8V6bCVJZ6m/4zNy6W3qf4bB5rvOTX5+TDPdWvSXQmnGZz1T3aKwpkjE\nj/44IcBjH/tnUxQSNMx6biaPJmaPkPsE/nQ0dnCIn+JW4RSYh1M0ZaQNTyU5Haj0\ncU/hQiaIsTHbK07Zv5H5+gkLh/8lmbL6GXdhO8/A5HcWqGaQg736PCD/Ir6QRwds\nDyVQXaaifN2Z8ancHIbgvOS2qRAIYFD+zmFNJxwcHGjV28LRQYeifL2aVu/S5PSI\nFP1a0RirjW+pgyJ9UE6GYdpY2ejc0k4AvH6sve2oWQ/6OQM7BMRK1eAkbJ6IiFjy\nE4iNMAMd74qmssKI7xMo+nVbvxVVCC13PB7cuY7MGSnEuCmhHXs2xAUGK5LO3OrI\npNvinbJhsbsmyDbik5grO2fKDWnRnV2Xp/8axbVmuHcVJuJ0y+wO6TMvLDlujkiW\nHiE1lfPAMZIDwvlryCZ6K3+ZJzSAbwj2PtWWebjkrAO2OYbwXCMnazgjeedG2Ckq\nTmw5DJHSAOhY1ep39NGiuGdRS9GR483ao7X+cb1PXvLEMTMW54A=\n=krWk\n-----END PGP SIGNATURE-----", "payload": "tree 56fbd6781215194ed211acd076386aa95d0486ed\nparent 0128f8ee11c31c905205ff6019dcd240b6331d84\nauthor David Wood <david@davidtw.co> 1572185138 +0000\ncommitter David Wood <david@davidtw.co> 1572957849 +0000\n\nimproper ctypes: adjust lint msg for extern fns\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb60654f78468a76e55836aae97b71ceb19f2284", "html_url": "https://github.com/rust-lang/rust/commit/cb60654f78468a76e55836aae97b71ceb19f2284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb60654f78468a76e55836aae97b71ceb19f2284/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0128f8ee11c31c905205ff6019dcd240b6331d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/0128f8ee11c31c905205ff6019dcd240b6331d84", "html_url": "https://github.com/rust-lang/rust/commit/0128f8ee11c31c905205ff6019dcd240b6331d84"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "f2ad400d5dd377f0b96368a3b8be96f7c0ef020c", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cb60654f78468a76e55836aae97b71ceb19f2284/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb60654f78468a76e55836aae97b71ceb19f2284/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=cb60654f78468a76e55836aae97b71ceb19f2284", "patch": "@@ -891,11 +891,16 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         sp: Span,\n         note: &str,\n         help: Option<&str>,\n+        is_foreign_item: bool,\n     ) {\n         let mut diag = self.cx.struct_span_lint(\n             IMPROPER_CTYPES,\n             sp,\n-            &format!(\"`extern` block uses type `{}`, which is not FFI-safe\", ty),\n+            &format!(\n+                \"`extern` {} uses type `{}`, which is not FFI-safe\",\n+                if is_foreign_item { \"block\" } else { \"fn\" },\n+                ty,\n+            ),\n         );\n         diag.span_label(sp, \"not FFI-safe\");\n         if let Some(help) = help {\n@@ -910,7 +915,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         diag.emit();\n     }\n \n-    fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n+    fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>, is_foreign_item: bool) -> bool {\n         struct ProhibitOpaqueTypes<'tcx> {\n             ty: Option<Ty<'tcx>>,\n         };\n@@ -934,17 +939,23 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 sp,\n                 \"opaque types have no C equivalent\",\n                 None,\n+                is_foreign_item,\n             );\n             true\n         } else {\n             false\n         }\n     }\n \n-    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n+    fn check_type_for_ffi_and_report_errors(\n+        &mut self,\n+        sp: Span,\n+        ty: Ty<'tcx>,\n+        is_foreign_item: bool,\n+    ) {\n         // We have to check for opaque types before `normalize_erasing_regions`,\n         // which will replace opaque types with their underlying concrete type.\n-        if self.check_for_opaque_ty(sp, ty) {\n+        if self.check_for_opaque_ty(sp, ty, is_foreign_item) {\n             // We've already emitted an error due to an opaque type.\n             return;\n         }\n@@ -953,35 +964,37 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match self.check_type_for_ffi(&mut FxHashSet::default(), ty) {\n             FfiResult::FfiSafe => {}\n             FfiResult::FfiPhantom(ty) => {\n-                self.emit_ffi_unsafe_type_lint(ty, sp, \"composed only of `PhantomData`\", None);\n+                self.emit_ffi_unsafe_type_lint(\n+                    ty, sp, \"composed only of `PhantomData`\", None, is_foreign_item);\n             }\n             FfiResult::FfiUnsafe { ty, reason, help } => {\n-                self.emit_ffi_unsafe_type_lint(ty, sp, reason, help);\n+                self.emit_ffi_unsafe_type_lint(\n+                    ty, sp, reason, help, is_foreign_item);\n             }\n         }\n     }\n \n-    fn check_foreign_fn(&mut self, id: hir::HirId, decl: &hir::FnDecl) {\n+    fn check_foreign_fn(&mut self, id: hir::HirId, decl: &hir::FnDecl, is_foreign_item: bool) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let sig = self.cx.tcx.fn_sig(def_id);\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n \n         for (input_ty, input_hir) in sig.inputs().iter().zip(&decl.inputs) {\n-            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty);\n+            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, is_foreign_item);\n         }\n \n         if let hir::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n             if !ret_ty.is_unit() {\n-                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty);\n+                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, is_foreign_item);\n             }\n         }\n     }\n \n     fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let ty = self.cx.tcx.type_of(def_id);\n-        self.check_type_for_ffi_and_report_errors(span, ty);\n+        self.check_type_for_ffi_and_report_errors(span, ty, true);\n     }\n \n     fn is_internal_abi(&self, abi: Abi) -> bool {\n@@ -1000,7 +1013,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n         if !vis.is_internal_abi(abi) {\n             match it.kind {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n-                    vis.check_foreign_fn(it.hir_id, decl);\n+                    vis.check_foreign_fn(it.hir_id, decl, true);\n                 }\n                 hir::ForeignItemKind::Static(ref ty, _) => {\n                     vis.check_foreign_static(it.hir_id, ty.span);\n@@ -1029,7 +1042,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n \n         let mut vis = ImproperCTypesVisitor { cx };\n         if !vis.is_internal_abi(abi) {\n-            vis.check_foreign_fn(hir_id, decl);\n+            vis.check_foreign_fn(hir_id, decl, false);\n         }\n     }\n }"}, {"sha": "59bd6bfc5afd2930da217ae07a016b7471e3dd1a", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cb60654f78468a76e55836aae97b71ceb19f2284/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb60654f78468a76e55836aae97b71ceb19f2284/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=cb60654f78468a76e55836aae97b71ceb19f2284", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `Foo`, which is not FFI-safe\n+error: `extern` fn uses type `Foo`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:63:35\n    |\n LL | pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n@@ -17,7 +17,7 @@ note: type defined here\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `Foo`, which is not FFI-safe\n+error: `extern` fn uses type `Foo`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:66:35\n    |\n LL | pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n@@ -31,7 +31,7 @@ note: type defined here\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `[u32]`, which is not FFI-safe\n+error: `extern` fn uses type `[u32]`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:69:33\n    |\n LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n@@ -40,7 +40,7 @@ LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n    = help: consider using a raw pointer instead\n    = note: slices have no C equivalent\n \n-error: `extern` block uses type `str`, which is not FFI-safe\n+error: `extern` fn uses type `str`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:72:31\n    |\n LL | pub extern \"C\" fn str_type(p: &str) { }\n@@ -49,7 +49,7 @@ LL | pub extern \"C\" fn str_type(p: &str) { }\n    = help: consider using `*const u8` and a length instead\n    = note: string slices have no C equivalent\n \n-error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:75:31\n    |\n LL | pub extern \"C\" fn box_type(p: Box<u32>) { }\n@@ -58,7 +58,7 @@ LL | pub extern \"C\" fn box_type(p: Box<u32>) { }\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: `extern` block uses type `char`, which is not FFI-safe\n+error: `extern` fn uses type `char`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:78:32\n    |\n LL | pub extern \"C\" fn char_type(p: char) { }\n@@ -67,23 +67,23 @@ LL | pub extern \"C\" fn char_type(p: char) { }\n    = help: consider using `u32` or `libc::wchar_t` instead\n    = note: the `char` type has no C equivalent\n \n-error: `extern` block uses type `i128`, which is not FFI-safe\n+error: `extern` fn uses type `i128`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:81:32\n    |\n LL | pub extern \"C\" fn i128_type(p: i128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `u128`, which is not FFI-safe\n+error: `extern` fn uses type `u128`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:84:32\n    |\n LL | pub extern \"C\" fn u128_type(p: u128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n+error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:87:33\n    |\n LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n@@ -92,7 +92,7 @@ LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    = help: consider using a struct instead\n    = note: tuples have unspecified layout\n \n-error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n+error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:90:34\n    |\n LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n@@ -101,7 +101,7 @@ LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    = help: consider using a struct instead\n    = note: tuples have unspecified layout\n \n-error: `extern` block uses type `ZeroSize`, which is not FFI-safe\n+error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:93:32\n    |\n LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n@@ -115,7 +115,7 @@ note: type defined here\n LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n+error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:96:40\n    |\n LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n@@ -128,15 +128,15 @@ note: type defined here\n LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n+error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:99:51\n    |\n LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n    |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n-error: `extern` block uses type `fn()`, which is not FFI-safe\n+error: `extern` fn uses type `fn()`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:104:30\n    |\n LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n@@ -145,7 +145,7 @@ LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    = help: consider using an `extern fn(...) -> ...` function pointer instead\n    = note: this function pointer has Rust-specific calling convention\n \n-error: `extern` block uses type `fn()`, which is not FFI-safe\n+error: `extern` fn uses type `fn()`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:107:31\n    |\n LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n@@ -154,7 +154,7 @@ LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    = help: consider using an `extern fn(...) -> ...` function pointer instead\n    = note: this function pointer has Rust-specific calling convention\n \n-error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:110:35\n    |\n LL | pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n@@ -163,15 +163,15 @@ LL | pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: `extern` block uses type `i128`, which is not FFI-safe\n+error: `extern` fn uses type `i128`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:113:39\n    |\n LL | pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n    |                                       ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `str`, which is not FFI-safe\n+error: `extern` fn uses type `str`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:116:38\n    |\n LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n@@ -180,7 +180,7 @@ LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    = help: consider using `*const u8` and a length instead\n    = note: string slices have no C equivalent\n \n-error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:119:37\n    |\n LL | pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n@@ -189,7 +189,7 @@ LL | pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: `extern` block uses type `Foo`, which is not FFI-safe\n+error: `extern` fn uses type `Foo`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:161:44\n    |\n LL | pub extern \"C\" fn unused_generic1<T>(size: *const Foo) { }\n@@ -203,15 +203,15 @@ note: type defined here\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n+error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:164:43\n    |\n LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n    |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n-error: `extern` block uses type `Foo`, which is not FFI-safe\n+error: `extern` fn uses type `Foo`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:171:48\n    |\n LL | pub extern \"C\" fn used_generic2<T>(x: T, size: *const Foo) { }\n@@ -225,7 +225,7 @@ note: type defined here\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `std::vec::Vec<T>`, which is not FFI-safe\n+error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:178:39\n    |\n LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n@@ -234,7 +234,7 @@ LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: `extern` block uses type `std::vec::Vec<T>`, which is not FFI-safe\n+error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:181:41\n    |\n LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {"}]}