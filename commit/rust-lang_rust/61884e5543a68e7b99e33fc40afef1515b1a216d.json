{"sha": "61884e5543a68e7b99e33fc40afef1515b1a216d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxODg0ZTU1NDNhNjhlN2I5OWUzM2ZjNDBhZmVmMTUxNWIxYTIxNmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-10T10:24:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-11T03:18:06Z"}, "message": "Clone the candidates and match-pairs lazilly, instead of eagerly.", "tree": {"sha": "51c49ffd252082ae1437243f08003476b9e0d3c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51c49ffd252082ae1437243f08003476b9e0d3c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61884e5543a68e7b99e33fc40afef1515b1a216d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61884e5543a68e7b99e33fc40afef1515b1a216d", "html_url": "https://github.com/rust-lang/rust/commit/61884e5543a68e7b99e33fc40afef1515b1a216d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61884e5543a68e7b99e33fc40afef1515b1a216d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87358728a49034f34ec44c93306c396145d6e77d", "url": "https://api.github.com/repos/rust-lang/rust/commits/87358728a49034f34ec44c93306c396145d6e77d", "html_url": "https://github.com/rust-lang/rust/commit/87358728a49034f34ec44c93306c396145d6e77d"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "79c2cbf69c463b9d0ee4da76f93b3a7ce4b6763e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/61884e5543a68e7b99e33fc40afef1515b1a216d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61884e5543a68e7b99e33fc40afef1515b1a216d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=61884e5543a68e7b99e33fc40afef1515b1a216d", "patch": "@@ -288,14 +288,15 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                                             test_outcome: usize,\n                                             candidate: &Candidate<'pat, 'tcx>)\n                                             -> Option<Candidate<'pat, 'tcx>> {\n-        let candidate = candidate.clone();\n-        let match_pairs = candidate.match_pairs;\n         let result = self.match_pairs_under_assumption(test_lvalue,\n                                                        test_kind,\n                                                        test_outcome,\n-                                                       match_pairs);\n+                                                       &candidate.match_pairs);\n         match result {\n-            Some(match_pairs) => Some(Candidate { match_pairs: match_pairs, ..candidate }),\n+            Some(match_pairs) => Some(Candidate { match_pairs: match_pairs,\n+                                                  bindings: candidate.bindings.clone(),\n+                                                  guard: candidate.guard.clone(),\n+                                                  arm_index: candidate.arm_index }),\n             None => None,\n         }\n     }\n@@ -306,21 +307,20 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                                           test_lvalue: &Lvalue<'tcx>,\n                                           test_kind: &TestKind<'tcx>,\n                                           test_outcome: usize,\n-                                          match_pairs: Vec<MatchPair<'pat, 'tcx>>)\n+                                          match_pairs: &[MatchPair<'pat, 'tcx>])\n                                           -> Option<Vec<MatchPair<'pat, 'tcx>>> {\n         let mut result = vec![];\n \n         for match_pair in match_pairs {\n-            // if the match pair is testing a different lvalue, it\n-            // is unaffected by this test.\n-            if match_pair.lvalue != *test_lvalue {\n-                result.push(match_pair);\n-                continue;\n-            }\n-\n-            // if this test doesn't tell us anything about this match-pair, then hang onto it.\n-            if !self.test_informs_match_pair(&match_pair, test_kind, test_outcome) {\n-                result.push(match_pair);\n+            // If the match pair is either:\n+            // (1) testing a different lvalue; or,\n+            // (2) the test doesn't tell us anything about this match-pair,\n+            // then we have to retain it as for after the test is complete.\n+            if\n+                match_pair.lvalue != *test_lvalue || // (1)\n+                !self.test_informs_match_pair(match_pair, test_kind, test_outcome) // (2)\n+            {\n+                result.push(match_pair.clone());\n                 continue;\n             }\n \n@@ -445,7 +445,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n     /// observed that `option` has the discriminant `Ok`, then the\n     /// second arm cannot apply.\n     pub fn consequent_match_pairs_under_assumption<'pat>(&mut self,\n-                                                         match_pair: MatchPair<'pat, 'tcx>,\n+                                                         match_pair: &MatchPair<'pat, 'tcx>,\n                                                          test_kind: &TestKind<'tcx>,\n                                                          test_outcome: usize)\n                                                          -> Option<Vec<MatchPair<'pat, 'tcx>>> {\n@@ -511,7 +511,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             PatternKind::Binding { .. } |\n             PatternKind::Leaf { .. } |\n             PatternKind::Deref { .. } => {\n-                self.error_simplifyable(&match_pair)\n+                self.error_simplifyable(match_pair)\n             }\n         }\n     }"}]}