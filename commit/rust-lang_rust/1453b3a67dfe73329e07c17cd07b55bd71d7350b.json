{"sha": "1453b3a67dfe73329e07c17cd07b55bd71d7350b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NTNiM2E2N2RmZTczMzI5ZTA3YzE3Y2QwN2I1NWJkNzFkNzM1MGI=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-05-22T15:09:35Z"}, "committer": {"name": "Leonardo Yvens Schwarzstein", "email": "leoyvens@gmail.com", "date": "2018-06-25T09:56:06Z"}, "message": "`Self` in where clauses may not be object safe\n\nThis is virtually certain to cause regressions, needs crater.\n\nIn #50781 it was discovered that our object safety rules are not sound because we allow `Self` in where clauses without restrain. This PR is a direct fix to the rules so that we disallow methods with unsound where clauses.\n\nThis currently uses hard error to measure impact, but we will want to downgrade it to a future compat error.\n\nFixes #50781.\n\nr? @nikomatsakis", "tree": {"sha": "dce085a2168fd11868090576a044d9177a82a45d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dce085a2168fd11868090576a044d9177a82a45d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1453b3a67dfe73329e07c17cd07b55bd71d7350b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1453b3a67dfe73329e07c17cd07b55bd71d7350b", "html_url": "https://github.com/rust-lang/rust/commit/1453b3a67dfe73329e07c17cd07b55bd71d7350b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1453b3a67dfe73329e07c17cd07b55bd71d7350b/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9c7f9e6d069e62027e168da557625d0b518f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9c7f9e6d069e62027e168da557625d0b518f3e", "html_url": "https://github.com/rust-lang/rust/commit/5f9c7f9e6d069e62027e168da557625d0b518f3e"}], "stats": {"total": 100, "additions": 63, "deletions": 37}, "files": [{"sha": "9dc1f06fc1133fbf231467e99a0fb96f14fa915b", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1453b3a67dfe73329e07c17cd07b55bd71d7350b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1453b3a67dfe73329e07c17cd07b55bd71d7350b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=1453b3a67dfe73329e07c17cd07b55bd71d7350b", "patch": "@@ -288,6 +288,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return Some(MethodViolationCode::Generic);\n         }\n \n+        if self.predicates_of(method.def_id).predicates.into_iter()\n+                // A trait object can't claim to live more than the concrete type,\n+                // so outlives predicates will always hold.\n+                .filter(|p| p.to_opt_type_outlives().is_none())\n+                .collect::<Vec<_>>()\n+                // Do a shallow visit so that `contains_illegal_self_type_reference`\n+                // may apply it's custom visiting.\n+                .visit_tys_shallow(|t| self.contains_illegal_self_type_reference(trait_def_id, t)) {\n+            return Some(MethodViolationCode::ReferencesSelf);\n+        }\n+\n         None\n     }\n "}, {"sha": "307e1b238386c0e912675295010249613e24e73a", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1453b3a67dfe73329e07c17cd07b55bd71d7350b/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1453b3a67dfe73329e07c17cd07b55bd71d7350b/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=1453b3a67dfe73329e07c17cd07b55bd71d7350b", "patch": "@@ -136,6 +136,20 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_late_bound_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)\n     }\n+\n+    /// A visitor that does not recurse into types, works like `fn walk_shallow` in `Ty`.\n+    fn visit_tys_shallow(&self, visit: impl FnMut(Ty<'tcx>) -> bool) -> bool {\n+\n+        pub struct Visitor<F>(F);\n+\n+        impl<'tcx, F: FnMut(Ty<'tcx>) -> bool> TypeVisitor<'tcx> for Visitor<F> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+                self.0(ty)\n+            }\n+        }\n+\n+        self.visit_with(&mut Visitor(visit))\n+    }\n }\n \n /// The TypeFolder trait defines the actual *folding*. There is a"}, {"sha": "9b727826e6dc76b3e43df8b5cdbb42d85a773612", "filename": "src/test/run-pass/issue-23435.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5f9c7f9e6d069e62027e168da557625d0b518f3e/src%2Ftest%2Frun-pass%2Fissue-23435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9c7f9e6d069e62027e168da557625d0b518f3e/src%2Ftest%2Frun-pass%2Fissue-23435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23435.rs?ref=5f9c7f9e6d069e62027e168da557625d0b518f3e", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we do not ICE when a default method implementation has\n-// requirements (in this case, `Self : Baz`) that do not hold for some\n-// specific impl (in this case, `Foo : Bar`). This causes problems\n-// only when building a vtable, because that goes along and\n-// instantiates all the methods, even those that could not otherwise\n-// be called.\n-\n-// pretty-expanded FIXME #23616\n-\n-struct Foo {\n-    x: i32\n-}\n-\n-trait Bar {\n-    fn bar(&self) where Self : Baz { self.baz(); }\n-}\n-\n-trait Baz {\n-    fn baz(&self);\n-}\n-\n-impl Bar for Foo {\n-}\n-\n-fn main() {\n-    let x: &Bar = &Foo { x: 22 };\n-}"}, {"sha": "3974fd54cf62bcca98d304548b8e7323445e1e38", "filename": "src/test/ui/issue-50781.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1453b3a67dfe73329e07c17cd07b55bd71d7350b/src%2Ftest%2Fui%2Fissue-50781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1453b3a67dfe73329e07c17cd07b55bd71d7350b/src%2Ftest%2Fui%2Fissue-50781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50781.rs?ref=1453b3a67dfe73329e07c17cd07b55bd71d7350b", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {}\n+\n+trait X {\n+    fn foo(&self) where Self: Trait;\n+}\n+\n+impl X for () {\n+    fn foo(&self) {}\n+}\n+\n+impl Trait for dyn X {}\n+//~^ ERROR the trait `X` cannot be made into an object\n+\n+pub fn main() {\n+    // Check that this does not segfault.\n+    <X as X>::foo(&());\n+}"}, {"sha": "34d7303a9a54403647fac5408a414b2dc5935a1c", "filename": "src/test/ui/issue-50781.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1453b3a67dfe73329e07c17cd07b55bd71d7350b/src%2Ftest%2Fui%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1453b3a67dfe73329e07c17cd07b55bd71d7350b/src%2Ftest%2Fui%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50781.stderr?ref=1453b3a67dfe73329e07c17cd07b55bd71d7350b", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait `X` cannot be made into an object\n+  --> $DIR/issue-50781.rs:21:6\n+   |\n+LL | impl Trait for dyn X {}\n+   |      ^^^^^ the trait `X` cannot be made into an object\n+   |\n+   = note: method `foo` references the `Self` type in its arguments or return type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}]}