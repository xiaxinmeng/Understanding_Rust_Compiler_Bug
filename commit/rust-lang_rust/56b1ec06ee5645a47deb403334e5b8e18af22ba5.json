{"sha": "56b1ec06ee5645a47deb403334e5b8e18af22ba5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YjFlYzA2ZWU1NjQ1YTQ3ZGViNDAzMzM0ZTViOGUxOGFmMjJiYTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-19T21:53:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-22T20:11:53Z"}, "message": "Fix ICE related to #53708", "tree": {"sha": "a2d286d6c58607145e0089a37fd6202f8c7b64e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2d286d6c58607145e0089a37fd6202f8c7b64e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56b1ec06ee5645a47deb403334e5b8e18af22ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56b1ec06ee5645a47deb403334e5b8e18af22ba5", "html_url": "https://github.com/rust-lang/rust/commit/56b1ec06ee5645a47deb403334e5b8e18af22ba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56b1ec06ee5645a47deb403334e5b8e18af22ba5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e723c24a83cc89d723df6c0eda17a95deb5fb41", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e723c24a83cc89d723df6c0eda17a95deb5fb41", "html_url": "https://github.com/rust-lang/rust/commit/6e723c24a83cc89d723df6c0eda17a95deb5fb41"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "7e3d6d752ccdcf83c96c0eb750f27e4ebba26eee", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=56b1ec06ee5645a47deb403334e5b8e18af22ba5", "patch": "@@ -5,9 +5,7 @@\n \n use crate::dep_graph::{DepKind, DepTrackingMapConfig};\n use std::marker::PhantomData;\n-use syntax_pos::DUMMY_SP;\n use crate::infer::InferCtxt;\n-use syntax_pos::Span;\n use crate::traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext,\n              TraitEngine, Vtable};\n use crate::ty::{self, Ty, TyCtxt};\n@@ -69,7 +67,7 @@ pub fn codegen_fulfill_obligation<'a, 'tcx>(ty: TyCtxt<'a, 'tcx, 'tcx>,\n             debug!(\"fulfill_obligation: register_predicate_obligation {:?}\", predicate);\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n         });\n-        let vtable = infcx.drain_fulfillment_cx_or_panic(DUMMY_SP, &mut fulfill_cx, &vtable);\n+        let vtable = infcx.drain_fulfillment_cx_or_panic(&mut fulfill_cx, &vtable);\n \n         info!(\"Cache miss: {:?} => {:?}\", trait_ref, vtable);\n         vtable\n@@ -141,7 +139,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// unified, and hence we need to process those obligations to get\n     /// the complete picture of the type.\n     fn drain_fulfillment_cx_or_panic<T>(&self,\n-                                        span: Span,\n                                         fulfill_cx: &mut FulfillmentContext<'tcx>,\n                                         result: &T)\n                                         -> T::Lifted\n@@ -153,15 +150,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // contains unbound type parameters. It could be a slight\n         // optimization to stop iterating early.\n         if let Err(errors) = fulfill_cx.select_all_or_error(self) {\n-            span_bug!(span, \"Encountered errors `{:?}` resolving bounds after type-checking\",\n-                      errors);\n+            bug!(\"Encountered errors `{:?}` resolving bounds after type-checking\", errors);\n         }\n \n         let result = self.resolve_type_vars_if_possible(result);\n         let result = self.tcx.erase_regions(&result);\n \n         self.tcx.lift_to_global(&result).unwrap_or_else(||\n-            span_bug!(span, \"Uninferred types/regions in `{:?}`\", result)\n+            bug!(\"Uninferred types/regions in `{:?}`\", result)\n         )\n     }\n }"}, {"sha": "9a90ccda9140ca9bca1b3e7cea46f4a092124986", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=56b1ec06ee5645a47deb403334e5b8e18af22ba5", "patch": "@@ -85,7 +85,7 @@ impl BoundRegion {\n /// N.B., if you change this, you'll probably want to change the corresponding\n /// AST structure in `libsyntax/ast.rs` as well.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, HashStable)]\n+         RustcEncodable, RustcDecodable, HashStable, Debug)]\n pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n     Bool,"}, {"sha": "c41a09aecaad6d35fb8ec6d6f27188d1f5c08a8b", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=56b1ec06ee5645a47deb403334e5b8e18af22ba5", "patch": "@@ -211,6 +211,7 @@ impl<'a, 'tcx> LiteralExpander<'a, 'tcx> {\n         // the constant's pointee type\n         crty: Ty<'tcx>,\n     ) -> ConstValue<'tcx> {\n+        debug!(\"fold_const_value_deref {:?} {:?} {:?}\", val, rty, crty);\n         match (val, &crty.sty, &rty.sty) {\n             // the easy case, deref a reference\n             (ConstValue::Scalar(Scalar::Ptr(p)), x, y) if x == y => ConstValue::ByRef(\n@@ -238,6 +239,7 @@ impl<'a, 'tcx> LiteralExpander<'a, 'tcx> {\n \n impl<'a, 'tcx> PatternFolder<'tcx> for LiteralExpander<'a, 'tcx> {\n     fn fold_pattern(&mut self, pat: &Pattern<'tcx>) -> Pattern<'tcx> {\n+        debug!(\"fold_pattern {:?} {:?} {:?}\", pat, pat.ty.sty, pat.kind);\n         match (&pat.ty.sty, &*pat.kind) {\n             (\n                 &ty::Ref(_, rty, _),"}, {"sha": "aff9d7b8eb0dbf14d0be36af47fcdac769330a78", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=56b1ec06ee5645a47deb403334e5b8e18af22ba5", "patch": "@@ -974,10 +974,25 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 PatternKind::Wild\n             }\n             ty::Adt(adt_def, _) if !self.tcx.has_attr(adt_def.did, \"structural_match\") => {\n-                let msg = format!(\"to use a constant of type `{}` in a pattern, \\\n-                                    `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                                    self.tcx.def_path_str(adt_def.did),\n-                                    self.tcx.def_path_str(adt_def.did));\n+                let path = self.tcx.def_path_str(adt_def.did);\n+                let msg = format!(\n+                    \"to use a constant of type `{}` in a pattern, \\\n+                     `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                    path,\n+                    path,\n+                );\n+                self.tcx.sess.span_err(span, &msg);\n+                PatternKind::Wild\n+            }\n+            ty::Ref(_, ty::TyS { sty: ty::Adt(adt_def, _), .. }, _)\n+            if !self.tcx.has_attr(adt_def.did, \"structural_match\") => {\n+                let path = self.tcx.def_path_str(adt_def.did);\n+                let msg = format!(\n+                    \"to use a constant of type `{}` in a pattern, \\\n+                     `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                    path,\n+                    path,\n+                );\n                 self.tcx.sess.span_err(span, &msg);\n                 PatternKind::Wild\n             }"}, {"sha": "1c13bfceb6cc28c56793b830707baca6ba60d682", "filename": "src/test/ui/consts/match_ice.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs?ref=56b1ec06ee5645a47deb403334e5b8e18af22ba5", "patch": "@@ -2,9 +2,17 @@\n \n struct S;\n \n+#[derive(PartialEq, Eq)]\n+struct T;\n+\n fn main() {\n     const C: &S = &S;\n-    match C { //~ ERROR non-exhaustive\n-        C => {} // this is a common bug around constants and references in patterns\n+    match C {\n+        C => {}\n+        //~^ ERROR to use a constant of type `S` in a pattern, `S` must be annotated with\n+    }\n+    const K: &T = &T;\n+    match K { //~ ERROR non-exhaustive patterns: `&T` not covered\n+        K => {}\n     }\n }"}, {"sha": "158581fcb1599c460f70b677ab78f086c17d8ea4", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=56b1ec06ee5645a47deb403334e5b8e18af22ba5", "patch": "@@ -1,17 +1,17 @@\n-error[E0004]: non-exhaustive patterns: `&S` not covered\n-  --> $DIR/match_ice.rs:8:11\n+error: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match_ice.rs:11:9\n    |\n-LL |     match C {\n-   |           ^ pattern `&S` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+LL |         C => {}\n+   |         ^\n \n-error[E0277]: can't compare `S` with `S`\n+error[E0004]: non-exhaustive patterns: `&T` not covered\n+  --> $DIR/match_ice.rs:15:11\n    |\n-   = help: the trait `std::cmp::PartialEq` is not implemented for `S`\n-   = note: required because of the requirements on the impl of `std::cmp::PartialEq` for `&S`\n+LL |     match K {\n+   |           ^ pattern `&T` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: aborting due to 2 previous errors\n \n-Some errors occurred: E0004, E0277.\n-For more information about an error, try `rustc --explain E0004`.\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "261e95229a76e5895022f0a82f524b69bae3658d", "filename": "src/test/ui/pattern/const-pat-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56b1ec06ee5645a47deb403334e5b8e18af22ba5/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr?ref=56b1ec06ee5645a47deb403334e5b8e18af22ba5", "patch": "@@ -1,4 +1,4 @@\n-thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir/hair/pattern/_match.rs:1069:5\n+thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir/hair/pattern/_match.rs:1071:5\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}]}