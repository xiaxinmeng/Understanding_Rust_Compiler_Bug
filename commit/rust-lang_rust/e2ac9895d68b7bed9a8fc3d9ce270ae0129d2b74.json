{"sha": "e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYWM5ODk1ZDY4YjdiZWQ5YThmYzNkOWNlMjcwYWUwMTI5ZDJiNzQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-14T14:17:37Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-16T18:51:30Z"}, "message": "mir: place match pattern bindings in their respective arms.", "tree": {"sha": "56b7f2c794cc946d1e005c4d42b0143a129aa323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b7f2c794cc946d1e005c4d42b0143a129aa323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74", "html_url": "https://github.com/rust-lang/rust/commit/e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f06bab77586e377a24393b9e2e49d1bb7003dc0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f06bab77586e377a24393b9e2e49d1bb7003dc0b", "html_url": "https://github.com/rust-lang/rust/commit/f06bab77586e377a24393b9e2e49d1bb7003dc0b"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "080183ae1da66ad491a172246c272f1356d8a67c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74", "patch": "@@ -37,25 +37,28 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                       -> BlockAnd<()> {\n         let discriminant_lvalue = unpack!(block = self.as_lvalue(block, discriminant));\n \n-        // Before we do anything, create uninitialized variables with\n-        // suitable extent for all of the bindings in this match. It's\n-        // easiest to do this up front because some of these arms may\n-        // be unreachable or reachable multiple times.\n-        let var_scope_id = self.innermost_scope_id();\n-        for arm in &arms {\n-            self.declare_bindings(var_scope_id, &arm.patterns[0]);\n-        }\n-\n         let mut arm_blocks = ArmBlocks {\n             blocks: arms.iter()\n                         .map(|_| self.cfg.start_new_block())\n                         .collect(),\n         };\n \n-        let arm_bodies: Vec<ExprRef<'tcx>> =\n-            arms.iter()\n-                .map(|arm| arm.body.clone())\n-                .collect();\n+        // Get the body expressions and their scopes, while declaring bindings.\n+        let arm_bodies: Vec<_> = arms.iter().enumerate().map(|(i, arm)| {\n+            // Assume that all expressions are wrapped in Scope.\n+            let body = self.hir.mirror(arm.body.clone());\n+            match body.kind {\n+                ExprKind::Scope { extent, value } => {\n+                    let scope_id = self.push_scope(extent, arm_blocks.blocks[i]);\n+                    self.declare_bindings(scope_id, &arm.patterns[0]);\n+                    (extent, self.scopes.pop().unwrap(), value)\n+                }\n+                _ => {\n+                    span_bug!(body.span, \"arm body is not wrapped in Scope {:?}\",\n+                              body.kind);\n+                }\n+            }\n+        }).collect();\n \n         // assemble a list of candidates: there is one candidate per\n         // pattern, which means there may be more than one candidate\n@@ -95,11 +98,15 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         // all the arm blocks will rejoin here\n         let end_block = self.cfg.start_new_block();\n \n-        for (arm_index, arm_body) in arm_bodies.into_iter().enumerate() {\n+        let scope_id = self.innermost_scope_id();\n+        for (arm_index, (extent, scope, body)) in arm_bodies.into_iter().enumerate() {\n             let mut arm_block = arm_blocks.blocks[arm_index];\n-            unpack!(arm_block = self.into(destination, arm_block, arm_body));\n+            // Re-enter the scope we created the bindings in.\n+            self.scopes.push(scope);\n+            unpack!(arm_block = self.into(destination, arm_block, body));\n+            unpack!(arm_block = self.pop_scope(extent, arm_block));\n             self.cfg.terminate(arm_block,\n-                               var_scope_id,\n+                               scope_id,\n                                span,\n                                TerminatorKind::Goto { target: end_block });\n         }"}, {"sha": "ebaad663bb4e74488f4c2f635a9bc0c0efd178b1", "filename": "src/test/debuginfo/associated-types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs?ref=e2ac9895d68b7bed9a8fc3d9ce270ae0129d2b74", "patch": "@@ -80,7 +80,7 @@\n \n #![allow(unused_variables)]\n #![allow(dead_code)]\n-#![feature(omit_gdb_pretty_printer_section, rustc_attrs)]\n+#![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n \n trait TraitWithAssocType {\n@@ -127,7 +127,6 @@ fn assoc_tuple<T: TraitWithAssocType>(arg: (T, T::Type)) {\n     zzz(); // #break\n }\n \n-#[rustc_no_mir] // FIXME(#32790) MIR reuses scopes for match arms.\n fn assoc_enum<T: TraitWithAssocType>(arg: Enum<T>) {\n \n     match arg {"}]}