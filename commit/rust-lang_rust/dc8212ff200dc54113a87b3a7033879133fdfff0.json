{"sha": "dc8212ff200dc54113a87b3a7033879133fdfff0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjODIxMmZmMjAwZGM1NDExM2E4N2IzYTcwMzM4NzkxMzNmZGZmZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-16T08:19:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-16T08:19:16Z"}, "message": "Auto merge of #34779 - infinity0:master, r=alexcrichton\n\nIf local-rust is the same as the current version, then force a local-rebuild\n\nIn Debian, we would like the option to build/rebuild the current release from\n*either* the current or previous stable release. So we use enable-local-rust\ninstead of enable-local-rebuild, and read the bootstrap key dynamically from\nwhatever is installed locally.\n\nIn general, it does not make much sense to allow enable-local-rust without also\nsetting the bootstrap key, since the build would fail otherwise.\n\n(The way I detect \"the bootstrap key of [the local] rustc installation\" is a bit hacky, suggestions welcome.)", "tree": {"sha": "05ea4ae3016c2732d32c827462705c2358f46566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ea4ae3016c2732d32c827462705c2358f46566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc8212ff200dc54113a87b3a7033879133fdfff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8212ff200dc54113a87b3a7033879133fdfff0", "html_url": "https://github.com/rust-lang/rust/commit/dc8212ff200dc54113a87b3a7033879133fdfff0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc8212ff200dc54113a87b3a7033879133fdfff0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4788c26ad7dc65244a9efc50526609c4c71cfb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4788c26ad7dc65244a9efc50526609c4c71cfb9", "html_url": "https://github.com/rust-lang/rust/commit/c4788c26ad7dc65244a9efc50526609c4c71cfb9"}, {"sha": "bbff3367fe0355dbdee466bd7d3e0ea241799a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbff3367fe0355dbdee466bd7d3e0ea241799a9f", "html_url": "https://github.com/rust-lang/rust/commit/bbff3367fe0355dbdee466bd7d3e0ea241799a9f"}], "stats": {"total": 84, "additions": 58, "deletions": 26}, "files": [{"sha": "fd009a757a4b70dee62e84b4d8d391ec503d6344", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc8212ff200dc54113a87b3a7033879133fdfff0/configure", "raw_url": "https://github.com/rust-lang/rust/raw/dc8212ff200dc54113a87b3a7033879133fdfff0/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=dc8212ff200dc54113a87b3a7033879133fdfff0", "patch": "@@ -600,7 +600,7 @@ opt debug-assertions 0 \"build with debugging assertions\"\n opt fast-make 0 \"use .gitmodules as timestamp for submodule deps\"\n opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n-opt local-rebuild 0 \"use an installed rustc matching the current version, for rebuilds\"\n+opt local-rebuild 0 \"assume local-rust matches the current version, for rebuilds; implies local-rust, and is implied if local-rust already matches the current version\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n opt rpath 1 \"build rpaths into rustc itself\"\n opt stage0-landing-pads 1 \"enable landing pads during bootstrap with stage0\""}, {"sha": "fd12bf26dfc72fdca793e5efa4ae459c24320819", "filename": "mk/main.mk", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dc8212ff200dc54113a87b3a7033879133fdfff0/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/dc8212ff200dc54113a87b3a7033879133fdfff0/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=dc8212ff200dc54113a87b3a7033879133fdfff0", "patch": "@@ -20,29 +20,6 @@ CFG_RELEASE_NUM=1.12.0\n # versions (section 9)\n CFG_PRERELEASE_VERSION=.1\n \n-# Append a version-dependent hash to each library, so we can install different\n-# versions in the same place\n-CFG_FILENAME_EXTRA=$(shell printf '%s' $(CFG_RELEASE)$(CFG_EXTRA_FILENAME) | $(CFG_HASH_COMMAND))\n-\n-# A magic value that allows the compiler to use unstable features during the\n-# bootstrap even when doing so would normally be an error because of feature\n-# staging or because the build turns on warnings-as-errors and unstable features\n-# default to warnings. The build has to match this key in an env var.\n-#\n-# This value is keyed off the release to ensure that all compilers for one\n-# particular release have the same bootstrap key. Note that this is\n-# intentionally not \"secure\" by any definition, this is largely just a deterrent\n-# from users enabling unstable features on the stable compiler.\n-CFG_BOOTSTRAP_KEY=$(CFG_FILENAME_EXTRA)\n-\n-# The stage0 compiler needs to use the previous key recorded in src/stage0.txt,\n-# except for local-rebuild when it just uses the same current key.\n-ifdef CFG_ENABLE_LOCAL_REBUILD\n-CFG_BOOTSTRAP_KEY_STAGE0=$(CFG_BOOTSTRAP_KEY)\n-else\n-CFG_BOOTSTRAP_KEY_STAGE0=$(shell grep 'rustc_key' $(S)src/stage0.txt | sed 's/rustc_key: '//)\n-endif\n-\n ifeq ($(CFG_RELEASE_CHANNEL),stable)\n # This is the normal semver version string, e.g. \"0.12.0\", \"0.12.0-nightly\"\n CFG_RELEASE=$(CFG_RELEASE_NUM)\n@@ -72,6 +49,38 @@ CFG_RELEASE=$(CFG_RELEASE_NUM)-dev\n CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-dev\n endif\n \n+# Append a version-dependent hash to each library, so we can install different\n+# versions in the same place\n+CFG_FILENAME_EXTRA=$(shell printf '%s' $(CFG_RELEASE)$(CFG_EXTRA_FILENAME) | $(CFG_HASH_COMMAND))\n+\n+# A magic value that allows the compiler to use unstable features during the\n+# bootstrap even when doing so would normally be an error because of feature\n+# staging or because the build turns on warnings-as-errors and unstable features\n+# default to warnings. The build has to match this key in an env var.\n+#\n+# This value is keyed off the release to ensure that all compilers for one\n+# particular release have the same bootstrap key. Note that this is\n+# intentionally not \"secure\" by any definition, this is largely just a deterrent\n+# from users enabling unstable features on the stable compiler.\n+CFG_BOOTSTRAP_KEY=$(CFG_FILENAME_EXTRA)\n+\n+# If local-rust is the same as the current version, then force a local-rebuild\n+ifdef CFG_ENABLE_LOCAL_RUST\n+ifeq ($(CFG_RELEASE),\\\n+      $(shell $(S)src/etc/local_stage0.sh --print-rustc-release $(CFG_LOCAL_RUST_ROOT)))\n+    CFG_INFO := $(info cfg: auto-detected local-rebuild $(CFG_RELEASE))\n+    CFG_ENABLE_LOCAL_REBUILD = 1\n+endif\n+endif\n+\n+# The stage0 compiler needs to use the previous key recorded in src/stage0.txt,\n+# except for local-rebuild when it just uses the same current key.\n+ifdef CFG_ENABLE_LOCAL_REBUILD\n+CFG_BOOTSTRAP_KEY_STAGE0=$(CFG_BOOTSTRAP_KEY)\n+else\n+CFG_BOOTSTRAP_KEY_STAGE0=$(shell sed -ne 's/^rustc_key: //p' $(S)src/stage0.txt)\n+endif\n+\n # The name of the package to use for creating tarballs, installers etc.\n CFG_PACKAGE_NAME=rustc-$(CFG_PACKAGE_VERS)\n "}, {"sha": "8a2bf2ebbde649817af12b2eb753fa2559939a3a", "filename": "mk/stage0.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc8212ff200dc54113a87b3a7033879133fdfff0/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/dc8212ff200dc54113a87b3a7033879133fdfff0/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=dc8212ff200dc54113a87b3a7033879133fdfff0", "patch": "@@ -11,6 +11,7 @@ endif\n \n $(SNAPSHOT_RUSTC_POST_CLEANUP): \\\n \t\t$(S)src/stage0.txt \\\n+\t\t$(S)src/etc/local_stage0.sh \\\n \t\t$(S)src/etc/get-stage0.py $(MKFILE_DEPS) \\\n \t\t| $(HBIN0_H_$(CFG_BUILD))/\n \t@$(call E, fetch: $@)"}, {"sha": "caa6ea17ea0544d6f6a5c263239e4548ad469db4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc8212ff200dc54113a87b3a7033879133fdfff0/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8212ff200dc54113a87b3a7033879133fdfff0/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dc8212ff200dc54113a87b3a7033879133fdfff0", "patch": "@@ -118,6 +118,7 @@ pub struct Build {\n     ver_date: Option<String>,\n     version: String,\n     package_vers: String,\n+    local_rebuild: bool,\n     bootstrap_key: String,\n     bootstrap_key_stage0: String,\n \n@@ -174,6 +175,7 @@ impl Build {\n             Some(ref s) => PathBuf::from(s),\n             None => stage0_root.join(exe(\"cargo\", &config.build)),\n         };\n+        let local_rebuild = config.local_rebuild;\n \n         Build {\n             flags: flags,\n@@ -189,6 +191,7 @@ impl Build {\n             short_ver_hash: None,\n             ver_date: None,\n             version: String::new(),\n+            local_rebuild: local_rebuild,\n             bootstrap_key: String::new(),\n             bootstrap_key_stage0: String::new(),\n             package_vers: String::new(),\n@@ -219,6 +222,16 @@ impl Build {\n         sanity::check(self);\n         self.verbose(\"collecting channel variables\");\n         channel::collect(self);\n+        // If local-rust is the same as the current version, then force a local-rebuild\n+        let local_version_verbose = output(\n+            Command::new(&self.rustc).arg(\"--version\").arg(\"--verbose\"));\n+        let local_release = local_version_verbose\n+            .lines().filter(|x| x.starts_with(\"release:\"))\n+            .next().unwrap().trim_left_matches(\"release:\").trim();\n+        if local_release == self.release {\n+            self.verbose(&format!(\"auto-detected local-rebuild {}\", self.release));\n+            self.local_rebuild = true;\n+        }\n         self.verbose(\"updating submodules\");\n         self.update_submodules();\n \n@@ -525,7 +538,7 @@ impl Build {\n              .arg(\"--target\").arg(target);\n \n         let stage;\n-        if compiler.stage == 0 && self.config.local_rebuild {\n+        if compiler.stage == 0 && self.local_rebuild {\n             // Assume the local-rebuild rustc already has stage1 features.\n             stage = 1;\n         } else {\n@@ -766,7 +779,7 @@ impl Build {\n         // In stage0 we're using a previously released stable compiler, so we\n         // use the stage0 bootstrap key. Otherwise we use our own build's\n         // bootstrap key.\n-        let bootstrap_key = if compiler.is_snapshot(self) && !self.config.local_rebuild {\n+        let bootstrap_key = if compiler.is_snapshot(self) && !self.local_rebuild {\n             &self.bootstrap_key_stage0\n         } else {\n             &self.bootstrap_key"}, {"sha": "354be34b6a2950efe920bd2e44e57efe77e2bf74", "filename": "src/etc/local_stage0.sh", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc8212ff200dc54113a87b3a7033879133fdfff0/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dc8212ff200dc54113a87b3a7033879133fdfff0/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=dc8212ff200dc54113a87b3a7033879133fdfff0", "patch": "@@ -49,6 +49,13 @@ if [ -z $TARG_DIR ]; then\n     exit 1\n fi\n \n+case \"$TARG_DIR\" in\n+--print-rustc-release)\n+  # not actually copying to TARG_DIR, just print the local rustc version and exit\n+  ${PREFIX}/bin/rustc${BIN_SUF} --version --verbose | sed -ne 's/^release: //p'\n+;;\n+*)\n+\n cp ${PREFIX}/bin/rustc${BIN_SUF} ${TARG_DIR}/stage0/bin/\n cp ${PREFIX}/${LIB_DIR}/${RUSTLIBDIR}/${TARG_DIR}/${LIB_DIR}/* ${TARG_DIR}/stage0/${LIB_DIR}/\n cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}extra*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n@@ -66,3 +73,5 @@ cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}term*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DI\n \n # do not fail if one of the above fails, as all we need is a working rustc!\n exit 0\n+\n+esac"}]}