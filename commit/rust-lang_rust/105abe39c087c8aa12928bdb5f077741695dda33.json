{"sha": "105abe39c087c8aa12928bdb5f077741695dda33", "node_id": "C_kwDOAAsO6NoAKDEwNWFiZTM5YzA4N2M4YWExMjkyOGJkYjVmMDc3NzQxNjk1ZGRhMzM", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-11-18T00:55:06Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-11-18T01:01:05Z"}, "message": "Replace into_place with to_place", "tree": {"sha": "9621cfbbecae64806ed68b1d9c705a51dfffc8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9621cfbbecae64806ed68b1d9c705a51dfffc8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/105abe39c087c8aa12928bdb5f077741695dda33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/105abe39c087c8aa12928bdb5f077741695dda33", "html_url": "https://github.com/rust-lang/rust/commit/105abe39c087c8aa12928bdb5f077741695dda33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/105abe39c087c8aa12928bdb5f077741695dda33/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5b7778c80303bcb9b8e8251f9bf5be8ed3c57f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5b7778c80303bcb9b8e8251f9bf5be8ed3c57f", "html_url": "https://github.com/rust-lang/rust/commit/be5b7778c80303bcb9b8e8251f9bf5be8ed3c57f"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "d6fbaf42ecaa582edf740dbb27cbcc86abe0fdd3", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/105abe39c087c8aa12928bdb5f077741695dda33/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105abe39c087c8aa12928bdb5f077741695dda33/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=105abe39c087c8aa12928bdb5f077741695dda33", "patch": "@@ -65,7 +65,7 @@ pub(crate) enum PlaceBase {\n \n /// `PlaceBuilder` is used to create places during MIR construction. It allows you to \"build up\" a\n /// place by pushing more and more projections onto the end, and then convert the final set into a\n-/// place using the `into_place` method.\n+/// place using the `to_place` method.\n ///\n /// This is used internally when building a place for an expression like `a.b.c`. The fields `b`\n /// and `c` can be progressively pushed onto the place builder that is created when converting `a`.\n@@ -254,17 +254,8 @@ fn strip_prefix<'a, 'tcx>(\n }\n \n impl<'tcx> PlaceBuilder<'tcx> {\n-    pub(in crate::build) fn into_place(mut self, cx: &Builder<'_, 'tcx>) -> Place<'tcx> {\n-        self = self.resolve_upvar(cx).unwrap_or(self);\n-        let PlaceBase::Local(local) = self.base else { panic!(\"expected local\") };\n-        Place { local, projection: cx.tcx.intern_place_elems(&self.projection) }\n-    }\n-\n-    fn expect_upvars_resolved(self, cx: &Builder<'_, 'tcx>) -> PlaceBuilder<'tcx> {\n-        match self.base {\n-            PlaceBase::Local(_) => self,\n-            PlaceBase::Upvar {..} => self.resolve_upvar(cx).unwrap(),\n-        }\n+    pub(in crate::build) fn to_place(&self, cx: &Builder<'_, 'tcx>) -> Place<'tcx> {\n+        self.try_to_place(cx).unwrap()\n     }\n \n     /// Creates a `Place` or returns `None` if an upvar cannot be resolved\n@@ -363,7 +354,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<Place<'tcx>> {\n         let place_builder = unpack!(block = self.as_place_builder(block, expr));\n-        block.and(place_builder.into_place(self))\n+        block.and(place_builder.to_place(self))\n     }\n \n     /// This is used when constructing a compound `Place`, so that we can avoid creating\n@@ -387,7 +378,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<Place<'tcx>> {\n         let place_builder = unpack!(block = self.as_read_only_place_builder(block, expr));\n-        block.and(place_builder.into_place(self))\n+        block.and(place_builder.to_place(self))\n     }\n \n     /// This is used when constructing a compound `Place`, so that we can avoid creating\n@@ -482,7 +473,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             inferred_ty: expr.ty,\n                         });\n \n-                    let place = place_builder.clone().into_place(this);\n+                    let place = place_builder.to_place(this);\n                     this.cfg.push(\n                         block,\n                         Statement {\n@@ -607,22 +598,21 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let is_outermost_index = fake_borrow_temps.is_none();\n         let fake_borrow_temps = fake_borrow_temps.unwrap_or(base_fake_borrow_temps);\n \n-        let mut base_place =\n+        let base_place =\n             unpack!(block = self.expr_as_place(block, base, mutability, Some(fake_borrow_temps),));\n \n         // Making this a *fresh* temporary means we do not have to worry about\n         // the index changing later: Nothing will ever change this temporary.\n         // The \"retagging\" transformation (for Stacked Borrows) relies on this.\n         let idx = unpack!(block = self.as_temp(block, temp_lifetime, index, Mutability::Not,));\n \n-        block = self.bounds_check(block, base_place.clone(), idx, expr_span, source_info);\n+        block = self.bounds_check(block, &base_place, idx, expr_span, source_info);\n \n         if is_outermost_index {\n             self.read_fake_borrows(block, fake_borrow_temps, source_info)\n         } else {\n-            base_place = base_place.expect_upvars_resolved(self);\n             self.add_fake_borrows_of_base(\n-                &base_place,\n+                base_place.to_place(self),\n                 block,\n                 fake_borrow_temps,\n                 expr_span,\n@@ -636,7 +626,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn bounds_check(\n         &mut self,\n         block: BasicBlock,\n-        slice: PlaceBuilder<'tcx>,\n+        slice: &PlaceBuilder<'tcx>,\n         index: Local,\n         expr_span: Span,\n         source_info: SourceInfo,\n@@ -648,7 +638,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let lt = self.temp(bool_ty, expr_span);\n \n         // len = len(slice)\n-        self.cfg.push_assign(block, source_info, len, Rvalue::Len(slice.into_place(self)));\n+        self.cfg.push_assign(block, source_info, len, Rvalue::Len(slice.to_place(self)));\n         // lt = idx < len\n         self.cfg.push_assign(\n             block,\n@@ -666,19 +656,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn add_fake_borrows_of_base(\n         &mut self,\n-        base_place: &PlaceBuilder<'tcx>,\n+        base_place: Place<'tcx>,\n         block: BasicBlock,\n         fake_borrow_temps: &mut Vec<Local>,\n         expr_span: Span,\n         source_info: SourceInfo,\n     ) {\n         let tcx = self.tcx;\n-        let local = match base_place.base {\n-            PlaceBase::Local(local) => local,\n-            PlaceBase::Upvar { .. } => bug!(\"Expected PlacseBase::Local found Upvar\"),\n-        };\n \n-        let place_ty = Place::ty_from(local, &base_place.projection, &self.local_decls, tcx);\n+        let place_ty = base_place.ty(&self.local_decls, tcx);\n         if let ty::Slice(_) = place_ty.ty.kind() {\n             // We need to create fake borrows to ensure that the bounds\n             // check that we just did stays valid. Since we can't assign to\n@@ -688,7 +674,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 match elem {\n                     ProjectionElem::Deref => {\n                         let fake_borrow_deref_ty = Place::ty_from(\n-                            local,\n+                            base_place.local,\n                             &base_place.projection[..idx],\n                             &self.local_decls,\n                             tcx,\n@@ -706,14 +692,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             Rvalue::Ref(\n                                 tcx.lifetimes.re_erased,\n                                 BorrowKind::Shallow,\n-                                Place { local, projection },\n+                                Place { local: base_place.local, projection },\n                             ),\n                         );\n                         fake_borrow_temps.push(fake_borrow_temp);\n                     }\n                     ProjectionElem::Index(_) => {\n                         let index_ty = Place::ty_from(\n-                            local,\n+                            base_place.local,\n                             &base_place.projection[..idx],\n                             &self.local_decls,\n                             tcx,"}, {"sha": "0814793f27790159dd3aa6400fe3a6e28b6b3b4f", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/105abe39c087c8aa12928bdb5f077741695dda33/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105abe39c087c8aa12928bdb5f077741695dda33/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=105abe39c087c8aa12928bdb5f077741695dda33", "patch": "@@ -660,7 +660,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // by the parent itself. The mutability of the current capture\n             // is same as that of the capture in the parent closure.\n             PlaceBase::Upvar { .. } => {\n-                let enclosing_upvars_resolved = arg_place_builder.clone().into_place(this);\n+                let enclosing_upvars_resolved = arg_place_builder.to_place(this);\n \n                 match enclosing_upvars_resolved.as_ref() {\n                     PlaceRef {\n@@ -697,7 +697,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },\n         };\n \n-        let arg_place = arg_place_builder.into_place(this);\n+        let arg_place = arg_place_builder.to_place(this);\n \n         this.cfg.push_assign(\n             block,"}, {"sha": "1f325a870aa3cd0bde71078e3578e4bb2e587222", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/105abe39c087c8aa12928bdb5f077741695dda33/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105abe39c087c8aa12928bdb5f077741695dda33/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=105abe39c087c8aa12928bdb5f077741695dda33", "patch": "@@ -365,7 +365,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             None => {\n                                 let place_builder = place_builder.clone();\n                                 this.consume_by_copy_or_move(\n-                                    place_builder.field(n, *ty).into_place(this),\n+                                    place_builder.field(n, *ty).to_place(this),\n                                 )\n                             }\n                         })"}, {"sha": "74f07c7431fce7bf3169a2bb199519063bd6a1e0", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/105abe39c087c8aa12928bdb5f077741695dda33/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105abe39c087c8aa12928bdb5f077741695dda33/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=105abe39c087c8aa12928bdb5f077741695dda33", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         test: &Test<'tcx>,\n         make_target_blocks: impl FnOnce(&mut Self) -> Vec<BasicBlock>,\n     ) {\n-        let place = place_builder.into_place(self);\n+        let place = place_builder.to_place(self);\n         let place_ty = place.ty(&self.local_decls, self.tcx);\n         debug!(?place, ?place_ty,);\n "}]}