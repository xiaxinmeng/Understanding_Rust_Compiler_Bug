{"sha": "8ada1a2689eb33b78402ba739a5fb1e7c011def8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZGExYTI2ODllYjMzYjc4NDAyYmE3MzlhNWZiMWU3YzAxMWRlZjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-24T13:36:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-24T13:36:28Z"}, "message": "Simplify", "tree": {"sha": "5ebfe03226d64208773b286707418b26d3cf19bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ebfe03226d64208773b286707418b26d3cf19bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ada1a2689eb33b78402ba739a5fb1e7c011def8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ada1a2689eb33b78402ba739a5fb1e7c011def8", "html_url": "https://github.com/rust-lang/rust/commit/8ada1a2689eb33b78402ba739a5fb1e7c011def8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ada1a2689eb33b78402ba739a5fb1e7c011def8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44c8ddf885daaecfa4785e100ac1b065126c05b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c8ddf885daaecfa4785e100ac1b065126c05b7", "html_url": "https://github.com/rust-lang/rust/commit/44c8ddf885daaecfa4785e100ac1b065126c05b7"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "83a0dc44591b8acd12f77d7cac63d5095cd2d8fd", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ada1a2689eb33b78402ba739a5fb1e7c011def8/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ada1a2689eb33b78402ba739a5fb1e7c011def8/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=8ada1a2689eb33b78402ba739a5fb1e7c011def8", "patch": "@@ -207,7 +207,7 @@ impl AnalysisImpl {\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n             // First try to resolve the symbol locally\n-            return if let Some((name, range)) = resolve_local_name(&file, offset, name_ref) {\n+            return if let Some((name, range)) = resolve_local_name(name_ref) {\n                 let mut vec = vec![];\n                 vec.push((\n                     file_id,\n@@ -262,15 +262,15 @@ impl AnalysisImpl {\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n \n             // We are only handing local references for now\n-            if let Some(resolved) = resolve_local_name(&file, offset, name_ref) {\n+            if let Some(resolved) = resolve_local_name(name_ref) {\n \n                 ret.push((file_id, resolved.1));\n \n                 if let Some(fn_def) = find_node_at_offset::<ast::FnDef>(syntax, offset) {\n \n                     let refs : Vec<_> = fn_def.syntax().descendants()\n                         .filter_map(ast::NameRef::cast)\n-                        .filter(|n: &ast::NameRef| resolve_local_name(&file, n.syntax().range().start(), *n) == Some(resolved.clone()))\n+                        .filter(|&n: &ast::NameRef| resolve_local_name(n) == Some(resolved.clone()))\n                         .collect();\n \n                     for r in refs {"}, {"sha": "94e9a18e481bcee1fae466b6c7c3092a0713cb83", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ada1a2689eb33b78402ba739a5fb1e7c011def8/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ada1a2689eb33b78402ba739a5fb1e7c011def8/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=8ada1a2689eb33b78402ba739a5fb1e7c011def8", "patch": "@@ -152,11 +152,9 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n }\n \n pub fn resolve_local_name(\n-    file: &File,\n-    offset: TextUnit,\n     name_ref: ast::NameRef,\n ) -> Option<(SmolStr, TextRange)> {\n-    let fn_def = find_node_at_offset::<ast::FnDef>(file.syntax(), offset)?;\n+    let fn_def = name_ref.syntax().ancestors().find_map(ast::FnDef::cast)?;\n     let scopes = scope::FnScopes::new(fn_def);\n     let scope_entry = scope::resolve_local_name(name_ref, &scopes)?;\n     let name = scope_entry.ast().name()?;"}]}