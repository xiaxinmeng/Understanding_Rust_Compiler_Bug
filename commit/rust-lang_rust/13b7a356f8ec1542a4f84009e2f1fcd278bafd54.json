{"sha": "13b7a356f8ec1542a4f84009e2f1fcd278bafd54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYjdhMzU2ZjhlYzE1NDJhNGY4NDAwOWUyZjFmY2QyNzhiYWZkNTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-28T01:07:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-28T01:07:52Z"}, "message": "Add helper function for derived type descriptors.", "tree": {"sha": "349e39d9c811200399eca233067c5ecc5e297f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/349e39d9c811200399eca233067c5ecc5e297f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13b7a356f8ec1542a4f84009e2f1fcd278bafd54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13b7a356f8ec1542a4f84009e2f1fcd278bafd54", "html_url": "https://github.com/rust-lang/rust/commit/13b7a356f8ec1542a4f84009e2f1fcd278bafd54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13b7a356f8ec1542a4f84009e2f1fcd278bafd54/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf", "html_url": "https://github.com/rust-lang/rust/commit/8640f1991793e1c1ec0c45891bbcc5d3a7b05ebf"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "249cb73ec489b7a7362f4fcd3a80c8835535f484", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/13b7a356f8ec1542a4f84009e2f1fcd278bafd54/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13b7a356f8ec1542a4f84009e2f1fcd278bafd54/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=13b7a356f8ec1542a4f84009e2f1fcd278bafd54", "patch": "@@ -889,6 +889,48 @@ fn field_of_tydesc(@block_ctxt cx, @ty.t t, int field) -> ValueRef {\n     ret cx.build.GEP(tydesc, vec(C_int(0), C_int(field)));\n }\n \n+// Given a type containing ty params, build a vector containing a ValueRef for\n+// each of the ty params it uses (from the current frame), as well as a vec\n+// containing a def_id for each such param. This is used solely for\n+// constructing derived tydescs.\n+fn linearize_ty_params(@block_ctxt cx, @ty.t t)\n+    -> tup(vec[ast.def_id], vec[ValueRef]) {\n+    let vec[ValueRef] param_vals = vec();\n+    let vec[ast.def_id] param_defs = vec();\n+    type rr = rec(@block_ctxt cx,\n+                 mutable vec[ValueRef] vals,\n+                 mutable vec[ast.def_id] defs);\n+\n+    state obj folder(@rr r) {\n+        fn fold_simple_ty(@ty.t t) -> @ty.t {\n+            alt(t.struct) {\n+                case (ty.ty_param(?pid)) {\n+                    let bool seen = false;\n+                    for (ast.def_id d in r.defs) {\n+                        if (d == pid) {\n+                            seen = true;\n+                        }\n+                    }\n+                    if (!seen) {\n+                        r.vals += cx.fcx.lltydescs.get(pid);\n+                        r.defs += pid;\n+                    }\n+                }\n+            }\n+            ret t;\n+        }\n+    }\n+\n+\n+    auto x = @rec(cx = cx,\n+                  mutable vals = param_vals,\n+                  mutable defs = param_defs);\n+\n+    ty.fold_ty(folder(x), t);\n+\n+    ret tup(x.defs, x.vals);\n+}\n+\n fn get_tydesc(&@block_ctxt cx, @ty.t t) -> ValueRef {\n     // Is the supplied type a type param? If so, return the passed-in tydesc.\n     alt (ty.type_param(t)) {\n@@ -897,9 +939,10 @@ fn get_tydesc(&@block_ctxt cx, @ty.t t) -> ValueRef {\n     }\n \n     // Does it contain a type param? If so, generate a derived tydesc.\n+    let uint n_params = ty.count_ty_params(t);\n     if (ty.count_ty_params(t) > 0u) {\n-        log \"TODO: trans.get_tydesc(): generate a derived type descriptor\";\n-        fail;\n+        auto tys = linearize_ty_params(cx, t);\n+        cx.fcx.ccx.sess.unimpl(\"derived type descriptors\");\n     }\n \n     // Otherwise, generate a tydesc if necessary, and return it."}]}