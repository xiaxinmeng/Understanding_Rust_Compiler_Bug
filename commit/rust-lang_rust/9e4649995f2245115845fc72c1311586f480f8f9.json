{"sha": "9e4649995f2245115845fc72c1311586f480f8f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNDY0OTk5NWYyMjQ1MTE1ODQ1ZmM3MmMxMzExNTg2ZjQ4MGY4Zjk=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-25T15:42:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-25T15:42:12Z"}, "message": "Rollup merge of #86592 - jhpratt:non_exhaustive, r=JohnTitor\n\nUse `#[non_exhaustive]` where appropriate\n\nDue to the std/alloc split, it is not possible to make `alloc::collections::TryReserveError::AllocError` non-exhaustive without having an unstable, doc-hidden method to construct (which negates the benefits from `#[non_exhaustive]`).\n\n`@rustbot` label +C-cleanup +T-libs +S-waiting-on-review", "tree": {"sha": "b228d354c8468754da4285ee387056a4d9dec829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b228d354c8468754da4285ee387056a4d9dec829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4649995f2245115845fc72c1311586f480f8f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg1flUCRBK7hj4Ov3rIwAAcXsIAHZ8t4ppP68HaLrzl0899i2B\nWfz2mer0+RSH4gZu4pKfFvzZDjS9a64had/wvx+GRwEc6qHdDpHDgCC2b6V7pJOz\nQjz62dx8LXb3xVzHAopcuKvDJFWaD2R/YqJG0/BgGP6n/crmS0WXRPvrDKeZOINK\nxrsLqOfxwRNEbp5eVHi8Ve0ndK8jfk3PLVba5Z3mvSKJUpFuiVRBylGW1jpW6+bp\n9fgl8sYPZWcACN2U9uWG305kJlysWs1hFIeDDja5SPBuXuArGnh3+UQxYPpwR2IG\nFWfhpHAsspx5xio1HGSuypxM9BzOA/WBk46oMh8pTR2mmgSq3hfdTnZaNjaP7xg=\n=anD9\n-----END PGP SIGNATURE-----\n", "payload": "tree b228d354c8468754da4285ee387056a4d9dec829\nparent 6be1732e69c2bf4706f0b745941a49b5a328c2f8\nparent 3f14f4b3cec811017079564e16a92a1dc9870f41\nauthor Yuki Okushi <jtitor@2k36.org> 1624635732 +0900\ncommitter GitHub <noreply@github.com> 1624635732 +0900\n\nRollup merge of #86592 - jhpratt:non_exhaustive, r=JohnTitor\n\nUse `#[non_exhaustive]` where appropriate\n\nDue to the std/alloc split, it is not possible to make `alloc::collections::TryReserveError::AllocError` non-exhaustive without having an unstable, doc-hidden method to construct (which negates the benefits from `#[non_exhaustive]`).\n\n`@rustbot` label +C-cleanup +T-libs +S-waiting-on-review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4649995f2245115845fc72c1311586f480f8f9", "html_url": "https://github.com/rust-lang/rust/commit/9e4649995f2245115845fc72c1311586f480f8f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4649995f2245115845fc72c1311586f480f8f9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6be1732e69c2bf4706f0b745941a49b5a328c2f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be1732e69c2bf4706f0b745941a49b5a328c2f8", "html_url": "https://github.com/rust-lang/rust/commit/6be1732e69c2bf4706f0b745941a49b5a328c2f8"}, {"sha": "3f14f4b3cec811017079564e16a92a1dc9870f41", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f14f4b3cec811017079564e16a92a1dc9870f41", "html_url": "https://github.com/rust-lang/rust/commit/3f14f4b3cec811017079564e16a92a1dc9870f41"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "e8929cd5c0237b91eff421c617c40c3683e5d363", "filename": "compiler/rustc_metadata/src/dynamic_lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e4649995f2245115845fc72c1311586f480f8f9/compiler%2Frustc_metadata%2Fsrc%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4649995f2245115845fc72c1311586f480f8f9/compiler%2Frustc_metadata%2Fsrc%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdynamic_lib.rs?ref=9e4649995f2245115845fc72c1311586f480f8f9", "patch": "@@ -70,13 +70,12 @@ mod dl {\n         use std::sync::{Mutex, MutexGuard};\n \n         pub fn lock() -> MutexGuard<'static, Guard> {\n-            static LOCK: SyncLazy<Mutex<Guard>> = SyncLazy::new(|| Mutex::new(Guard { _priv: () }));\n+            static LOCK: SyncLazy<Mutex<Guard>> = SyncLazy::new(|| Mutex::new(Guard));\n             LOCK.lock().unwrap()\n         }\n \n-        pub struct Guard {\n-            _priv: (),\n-        }\n+        #[non_exhaustive]\n+        pub struct Guard;\n \n         impl Guard {\n             pub fn get(&mut self) -> Result<(), String> {"}, {"sha": "ccf6e420de7a99579862433df772a8f72e138e5e", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=9e4649995f2245115845fc72c1311586f480f8f9", "patch": "@@ -60,7 +60,7 @@ impl Layout {\n     #[inline]\n     pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {\n         if !align.is_power_of_two() {\n-            return Err(LayoutError { private: () });\n+            return Err(LayoutError);\n         }\n \n         // (power-of-two implies align != 0.)\n@@ -78,7 +78,7 @@ impl Layout {\n         // Above implies that checking for summation overflow is both\n         // necessary and sufficient.\n         if size > usize::MAX - (align - 1) {\n-            return Err(LayoutError { private: () });\n+            return Err(LayoutError);\n         }\n \n         // SAFETY: the conditions for `from_size_align_unchecked` have been\n@@ -288,7 +288,7 @@ impl Layout {\n         // > must not overflow (i.e., the rounded value must be less than\n         // > `usize::MAX`)\n         let padded_size = self.size() + self.padding_needed_for(self.align());\n-        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError { private: () })?;\n+        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;\n \n         // SAFETY: self.align is already known to be valid and alloc_size has been\n         // padded already.\n@@ -346,8 +346,8 @@ impl Layout {\n         let new_align = cmp::max(self.align(), next.align());\n         let pad = self.padding_needed_for(next.align());\n \n-        let offset = self.size().checked_add(pad).ok_or(LayoutError { private: () })?;\n-        let new_size = offset.checked_add(next.size()).ok_or(LayoutError { private: () })?;\n+        let offset = self.size().checked_add(pad).ok_or(LayoutError)?;\n+        let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;\n \n         let layout = Layout::from_size_align(new_size, new_align)?;\n         Ok((layout, offset))\n@@ -368,7 +368,7 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n-        let size = self.size().checked_mul(n).ok_or(LayoutError { private: () })?;\n+        let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n         Layout::from_size_align(size, self.align())\n     }\n \n@@ -381,7 +381,7 @@ impl Layout {\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n-        let new_size = self.size().checked_add(next.size()).ok_or(LayoutError { private: () })?;\n+        let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n         Layout::from_size_align(new_size, self.align())\n     }\n \n@@ -409,10 +409,9 @@ pub type LayoutErr = LayoutError;\n /// or some other `Layout` constructor\n /// do not satisfy its documented constraints.\n #[stable(feature = \"alloc_layout_error\", since = \"1.50.0\")]\n+#[non_exhaustive]\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct LayoutError {\n-    private: (),\n-}\n+pub struct LayoutError;\n \n // (we need this for downstream impl of trait Error)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]"}, {"sha": "24b0797f93a50ecb84ed7eac87d32c6591004ffa", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=9e4649995f2245115845fc72c1311586f480f8f9", "patch": "@@ -593,8 +593,8 @@ pub struct RefCell<T: ?Sized> {\n \n /// An error returned by [`RefCell::try_borrow`].\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+#[non_exhaustive]\n pub struct BorrowError {\n-    _private: (),\n     #[cfg(feature = \"debug_refcell\")]\n     location: &'static crate::panic::Location<'static>,\n }\n@@ -620,8 +620,8 @@ impl Display for BorrowError {\n \n /// An error returned by [`RefCell::try_borrow_mut`].\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n+#[non_exhaustive]\n pub struct BorrowMutError {\n-    _private: (),\n     #[cfg(feature = \"debug_refcell\")]\n     location: &'static crate::panic::Location<'static>,\n }\n@@ -872,7 +872,6 @@ impl<T: ?Sized> RefCell<T> {\n                 Ok(Ref { value: unsafe { &*self.value.get() }, borrow: b })\n             }\n             None => Err(BorrowError {\n-                _private: (),\n                 // If a borrow occured, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n@@ -958,7 +957,6 @@ impl<T: ?Sized> RefCell<T> {\n                 Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })\n             }\n             None => Err(BorrowMutError {\n-                _private: (),\n                 // If a borrow occured, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n@@ -1080,7 +1078,6 @@ impl<T: ?Sized> RefCell<T> {\n             Ok(unsafe { &*self.value.get() })\n         } else {\n             Err(BorrowError {\n-                _private: (),\n                 // If a borrow occured, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]"}, {"sha": "aa735a14cbd8fff3cab848c8a9340a0ee8243f3a", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=9e4649995f2245115845fc72c1311586f480f8f9", "patch": "@@ -118,10 +118,9 @@ impl fmt::Display for Utf8Error {\n ///\n /// [`from_str`]: super::FromStr::from_str\n #[derive(Debug, Clone, PartialEq, Eq)]\n+#[non_exhaustive]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct ParseBoolError {\n-    pub(super) _priv: (),\n-}\n+pub struct ParseBoolError;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseBoolError {"}, {"sha": "12d79a56a527c02765f228a7de187f07865454c5", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=9e4649995f2245115845fc72c1311586f480f8f9", "patch": "@@ -585,7 +585,7 @@ impl FromStr for bool {\n         match s {\n             \"true\" => Ok(true),\n             \"false\" => Ok(false),\n-            _ => Err(ParseBoolError { _priv: () }),\n+            _ => Err(ParseBoolError),\n         }\n     }\n }"}, {"sha": "7586229504c221242bfe3ab613f753790b586376", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=9e4649995f2245115845fc72c1311586f480f8f9", "patch": "@@ -85,14 +85,13 @@ impl !Sync for TokenStream {}\n \n /// Error returned from `TokenStream::from_str`.\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+#[non_exhaustive]\n #[derive(Debug)]\n-pub struct LexError {\n-    _inner: (),\n-}\n+pub struct LexError;\n \n impl LexError {\n     fn new() -> Self {\n-        LexError { _inner: () }\n+        LexError\n     }\n }\n "}, {"sha": "fd52de7430a203af9bf247211756b528af5da5e5", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=9e4649995f2245115845fc72c1311586f480f8f9", "patch": "@@ -13,9 +13,8 @@ use crate::io::{\n /// This struct is generally created by calling [`empty()`]. Please see\n /// the documentation of [`empty()`] for more details.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Empty {\n-    _priv: (),\n-}\n+#[non_exhaustive]\n+pub struct Empty;\n \n /// Constructs a new handle to an empty reader.\n ///\n@@ -35,7 +34,7 @@ pub struct Empty {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn empty() -> Empty {\n-    Empty { _priv: () }\n+    Empty\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -172,9 +171,8 @@ impl fmt::Debug for Repeat {\n /// This struct is generally created by calling [`sink`]. Please\n /// see the documentation of [`sink()`] for more details.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Sink {\n-    _priv: (),\n-}\n+#[non_exhaustive]\n+pub struct Sink;\n \n /// Creates an instance of a writer which will successfully consume all data.\n ///\n@@ -195,7 +193,7 @@ pub struct Sink {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn sink() -> Sink {\n-    Sink { _priv: () }\n+    Sink\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c53290ec0c7d0c117df53b147f34b0796dc93959", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4649995f2245115845fc72c1311586f480f8f9/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=9e4649995f2245115845fc72c1311586f480f8f9", "patch": "@@ -324,10 +324,9 @@ macro_rules! __thread_local_inner {\n \n /// An error returned by [`LocalKey::try_with`](struct.LocalKey.html#method.try_with).\n #[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n+#[non_exhaustive]\n #[derive(Clone, Copy, Eq, PartialEq)]\n-pub struct AccessError {\n-    _private: (),\n-}\n+pub struct AccessError;\n \n #[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n impl fmt::Debug for AccessError {\n@@ -396,7 +395,7 @@ impl<T: 'static> LocalKey<T> {\n         F: FnOnce(&T) -> R,\n     {\n         unsafe {\n-            let thread_local = (self.inner)().ok_or(AccessError { _private: () })?;\n+            let thread_local = (self.inner)().ok_or(AccessError)?;\n             Ok(f(thread_local))\n         }\n     }"}]}