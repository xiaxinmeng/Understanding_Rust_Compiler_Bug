{"sha": "cb32e269dfcffe7006d172cde494472e7de183ae", "node_id": "C_kwDOAAsO6NoAKGNiMzJlMjY5ZGZjZmZlNzAwNmQxNzJjZGU0OTQ0NzJlN2RlMTgzYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-27T11:48:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-27T11:48:55Z"}, "message": "Auto merge of #12887 - Veykril:compl-pref-fix, r=Veykril\n\nfix: Honor ref expressions for compute_ref_match completions\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/8357", "tree": {"sha": "5032fc44d74269a1f9f51769c788e932ffba054c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5032fc44d74269a1f9f51769c788e932ffba054c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb32e269dfcffe7006d172cde494472e7de183ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb32e269dfcffe7006d172cde494472e7de183ae", "html_url": "https://github.com/rust-lang/rust/commit/cb32e269dfcffe7006d172cde494472e7de183ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb32e269dfcffe7006d172cde494472e7de183ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e4d9b84fe5255f74ed64851aaf5bb5144af0ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4d9b84fe5255f74ed64851aaf5bb5144af0ad8", "html_url": "https://github.com/rust-lang/rust/commit/8e4d9b84fe5255f74ed64851aaf5bb5144af0ad8"}, {"sha": "1f8daa180fdfb847f5f82b8ac9870aebb17c9494", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8daa180fdfb847f5f82b8ac9870aebb17c9494", "html_url": "https://github.com/rust-lang/rust/commit/1f8daa180fdfb847f5f82b8ac9870aebb17c9494"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "a9c124b42dc2c112b3a04718f4c0d161fcb00afc", "filename": "crates/hir-ty/src/chalk_ext.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb32e269dfcffe7006d172cde494472e7de183ae/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb32e269dfcffe7006d172cde494472e7de183ae/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs?ref=cb32e269dfcffe7006d172cde494472e7de183ae", "patch": "@@ -34,6 +34,7 @@ pub trait TyExt {\n     fn callable_sig(&self, db: &dyn HirDatabase) -> Option<CallableSig>;\n \n     fn strip_references(&self) -> &Ty;\n+    fn strip_reference(&self) -> &Ty;\n \n     /// If this is a `dyn Trait`, returns that trait.\n     fn dyn_trait(&self) -> Option<TraitId>;\n@@ -182,6 +183,10 @@ impl TyExt for Ty {\n         t\n     }\n \n+    fn strip_reference(&self) -> &Ty {\n+        self.as_reference().map_or(self, |(ty, _, _)| ty)\n+    }\n+\n     fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<QuantifiedWhereClause>> {\n         match self.kind(Interner) {\n             TyKind::OpaqueType(opaque_ty_id, subst) => {"}, {"sha": "8f984210e1176702c1ce23c865ed8aca631a4c82", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb32e269dfcffe7006d172cde494472e7de183ae/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb32e269dfcffe7006d172cde494472e7de183ae/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=cb32e269dfcffe7006d172cde494472e7de183ae", "patch": "@@ -2769,6 +2769,10 @@ impl Type {\n         self.derived(self.ty.strip_references().clone())\n     }\n \n+    pub fn strip_reference(&self) -> Type {\n+        self.derived(self.ty.strip_reference().clone())\n+    }\n+\n     pub fn is_unknown(&self) -> bool {\n         self.ty.is_unknown()\n     }"}, {"sha": "09a1a99eb64ca201e14462e8e8fbacd054636d86", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cb32e269dfcffe7006d172cde494472e7de183ae/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb32e269dfcffe7006d172cde494472e7de183ae/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=cb32e269dfcffe7006d172cde494472e7de183ae", "patch": "@@ -162,11 +162,52 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     /// Calculate the expected type and name of the cursor position.\n-    fn expected_type_and_name(&self) -> (Option<Type>, Option<NameOrNameRef>) {\n+    fn expected_type_and_name(\n+        &self,\n+        name_like: &ast::NameLike,\n+    ) -> (Option<Type>, Option<NameOrNameRef>) {\n         let mut node = match self.token.parent() {\n             Some(it) => it,\n             None => return (None, None),\n         };\n+\n+        let strip_refs = |mut ty: Type| match name_like {\n+            ast::NameLike::NameRef(n) => {\n+                let p = match n.syntax().parent() {\n+                    Some(it) => it,\n+                    None => return ty,\n+                };\n+                let top_syn = match_ast! {\n+                    match p {\n+                        ast::FieldExpr(e) => e\n+                            .syntax()\n+                            .ancestors()\n+                            .map_while(ast::FieldExpr::cast)\n+                            .last()\n+                            .map(|it| it.syntax().clone()),\n+                        ast::PathSegment(e) => e\n+                            .syntax()\n+                            .ancestors()\n+                            .skip(1)\n+                            .take_while(|it| ast::Path::can_cast(it.kind()) || ast::PathExpr::can_cast(it.kind()))\n+                            .find_map(ast::PathExpr::cast)\n+                            .map(|it| it.syntax().clone()),\n+                        _ => None\n+                    }\n+                };\n+                let top_syn = match top_syn {\n+                    Some(it) => it,\n+                    None => return ty,\n+                };\n+                for _ in top_syn.ancestors().skip(1).map_while(ast::RefExpr::cast) {\n+                    cov_mark::hit!(expected_type_fn_param_ref);\n+                    ty = ty.strip_reference();\n+                }\n+                ty\n+            }\n+            _ => ty,\n+        };\n+\n         loop {\n             break match_ast! {\n                 match node {\n@@ -199,13 +240,9 @@ impl<'a> CompletionContext<'a> {\n                             self.token.clone(),\n                         ).map(|ap| {\n                             let name = ap.ident().map(NameOrNameRef::Name);\n-                            let ty = if has_ref(&self.token) {\n-                                cov_mark::hit!(expected_type_fn_param_ref);\n-                                ap.ty.remove_ref()\n-                            } else {\n-                                Some(ap.ty)\n-                            };\n-                            (ty, name)\n+\n+                            let ty = strip_refs(ap.ty);\n+                            (Some(ty), name)\n                         })\n                         .unwrap_or((None, None))\n                     },\n@@ -330,8 +367,6 @@ impl<'a> CompletionContext<'a> {\n             return None;\n         }\n \n-        (self.expected_type, self.expected_name) = self.expected_type_and_name();\n-\n         // Overwrite the path kind for derives\n         if let Some((original_file, file_with_fake_ident, offset, origin_attr)) = derive_ctx {\n             if let Some(ast::NameLike::NameRef(name_ref)) =\n@@ -389,6 +424,7 @@ impl<'a> CompletionContext<'a> {\n                 return Some(analysis);\n             }\n         };\n+        (self.expected_type, self.expected_name) = self.expected_type_and_name(&name_like);\n         let analysis = match name_like {\n             ast::NameLike::Lifetime(lifetime) => CompletionAnalysis::Lifetime(\n                 Self::classify_lifetime(&self.sema, original_file, lifetime)?,\n@@ -1141,19 +1177,6 @@ fn path_or_use_tree_qualifier(path: &ast::Path) -> Option<(ast::Path, bool)> {\n     Some((use_tree.path()?, true))\n }\n \n-fn has_ref(token: &SyntaxToken) -> bool {\n-    let mut token = token.clone();\n-    for skip in [SyntaxKind::IDENT, SyntaxKind::WHITESPACE, T![mut]] {\n-        if token.kind() == skip {\n-            token = match token.prev_token() {\n-                Some(it) => it,\n-                None => return false,\n-            }\n-        }\n-    }\n-    token.kind() == T![&]\n-}\n-\n pub(crate) fn is_in_token_of_for_loop(element: SyntaxElement) -> bool {\n     // oh my ...\n     (|| {"}, {"sha": "50845b3881f433953014dfa47d3ec00261806bf7", "filename": "crates/ide-completion/src/context/tests.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb32e269dfcffe7006d172cde494472e7de183ae/crates%2Fide-completion%2Fsrc%2Fcontext%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb32e269dfcffe7006d172cde494472e7de183ae/crates%2Fide-completion%2Fsrc%2Fcontext%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Ftests.rs?ref=cb32e269dfcffe7006d172cde494472e7de183ae", "patch": "@@ -391,3 +391,23 @@ fn foo($0: Foo) {}\n         expect![[r#\"ty: ?, name: ?\"#]],\n     );\n }\n+\n+#[test]\n+fn expected_type_ref_prefix_on_field() {\n+    check_expected_type_and_name(\n+        r#\"\n+fn foo(_: &mut i32) {}\n+struct S {\n+    field: i32,\n+}\n+\n+fn main() {\n+    let s = S {\n+        field: 100,\n+    };\n+    foo(&mut s.f$0);\n+}\n+\"#,\n+        expect![\"ty: i32, name: ?\"],\n+    );\n+}"}]}