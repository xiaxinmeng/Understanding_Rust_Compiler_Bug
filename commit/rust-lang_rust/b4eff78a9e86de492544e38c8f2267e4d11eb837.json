{"sha": "b4eff78a9e86de492544e38c8f2267e4d11eb837", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZWZmNzhhOWU4NmRlNDkyNTQ0ZTM4YzhmMjI2N2U0ZDExZWI4Mzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-18T17:53:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-18T17:53:18Z"}, "message": "Pass command-line arguments to JITed function\n\nCherry-picked from f1f35405e15ca1b77425514b04b96b2749231899 by\n@milkey-mouse", "tree": {"sha": "40c9ec391fed58c418150685dafd1d3c6e2659b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40c9ec391fed58c418150685dafd1d3c6e2659b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4eff78a9e86de492544e38c8f2267e4d11eb837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4eff78a9e86de492544e38c8f2267e4d11eb837", "html_url": "https://github.com/rust-lang/rust/commit/b4eff78a9e86de492544e38c8f2267e4d11eb837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4eff78a9e86de492544e38c8f2267e4d11eb837/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f2a722c92d92902eaa4d136e35500d797f10a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f2a722c92d92902eaa4d136e35500d797f10a7", "html_url": "https://github.com/rust-lang/rust/commit/b7f2a722c92d92902eaa4d136e35500d797f10a7"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "b7277f5ee9f489867bedf15f32be363c47ccbd5a", "filename": "example/mini_core.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b4eff78a9e86de492544e38c8f2267e4d11eb837/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4eff78a9e86de492544e38c8f2267e4d11eb837/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=b4eff78a9e86de492544e38c8f2267e4d11eb837", "patch": "@@ -104,6 +104,14 @@ impl Mul for u8 {\n     }\n }\n \n+impl Mul for usize {\n+    type Output = Self;\n+\n+    fn mul(self, rhs: Self) -> Self::Output {\n+        self * rhs\n+    }\n+}\n+\n #[lang = \"add\"]\n pub trait Add<RHS = Self> {\n     type Output;\n@@ -208,6 +216,15 @@ impl PartialEq for usize {\n     }\n }\n \n+impl PartialEq for isize {\n+    fn eq(&self, other: &isize) -> bool {\n+        (*self) == (*other)\n+    }\n+    fn ne(&self, other: &isize) -> bool {\n+        (*self) != (*other)\n+    }\n+}\n+\n impl PartialEq for char {\n     fn eq(&self, other: &char) -> bool {\n         (*self) == (*other)"}, {"sha": "5ab7575252b077f424e82d9242daa519cebc9109", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4eff78a9e86de492544e38c8f2267e4d11eb837/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4eff78a9e86de492544e38c8f2267e4d11eb837/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=b4eff78a9e86de492544e38c8f2267e4d11eb837", "patch": "@@ -75,9 +75,15 @@ enum Ordering {\n #[lang = \"start\"]\n fn start<T: Termination + 'static>(\n     main: fn() -> T,\n-    _argc: isize,\n-    _argv: *const *const u8,\n+    argc: isize,\n+    argv: *const *const u8,\n ) -> isize {\n+    if argc == 3 {\n+        unsafe { puts(*argv); }\n+        unsafe { puts(*((argv as usize + intrinsics::size_of::<*const u8>()) as *const *const u8)); }\n+        unsafe { puts(*((argv as usize + 2 * intrinsics::size_of::<*const u8>()) as *const *const u8)); }\n+    }\n+\n     main().report();\n     0\n }"}, {"sha": "ead24921652d3d7686c41ae8aa9ad78a63d8d6ec", "filename": "src/lib.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b4eff78a9e86de492544e38c8f2267e4d11eb837/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4eff78a9e86de492544e38c8f2267e4d11eb837/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b4eff78a9e86de492544e38c8f2267e4d11eb837", "patch": "@@ -16,6 +16,8 @@ extern crate syntax;\n use std::any::Any;\n use std::fs::File;\n use std::sync::mpsc;\n+use std::os::raw::{c_char, c_int};\n+use std::ffi::CString;\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::MetadataLoader;\n@@ -241,19 +243,26 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             jit_module.finalize_definitions();\n \n             tcx.sess.abort_if_errors();\n-            println!(\"Compiled everything\");\n-            println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n \n             let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n-            println!(\"\ud83c\udf89 Finalized everything\");\n \n-            let f: extern \"C\" fn(isize, *const *const u8) -> isize =\n+            println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n+\n+            let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n                 unsafe { ::std::mem::transmute(finalized_main) };\n-            let res = f(0, 0 as *const _);\n-            tcx.sess.warn(&format!(\"\ud83d\ude80 main returned {}\", res));\n+\n+            let args = ::std::env::var(\"JIT_ARGS\").unwrap_or_else(|_|String::new());\n+            let args = args\n+                .split(\" \")\n+                .chain(Some(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string()))\n+                .map(|arg| CString::new(arg).unwrap()).collect::<Vec<_>>();\n+            let argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n+            // TODO: Rust doesn't care, but POSIX argv has a NULL sentinel at the end\n+\n+            let ret = f(args.len() as c_int, argv.as_ptr());\n \n             jit_module.finish();\n-            ::std::process::exit(0);\n+            std::process::exit(ret);\n         } else {\n             let new_module = |name: String| {\n                 let module: Module<FaerieBackend> = Module::new("}, {"sha": "0ea592778181a7888973b9396523e4a5086ebc0a", "filename": "test.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4eff78a9e86de492544e38c8f2267e4d11eb837/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b4eff78a9e86de492544e38c8f2267e4d11eb837/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=b4eff78a9e86de492544e38c8f2267e4d11eb837", "patch": "@@ -11,11 +11,11 @@ echo \"[BUILD] example\"\n $RUSTC example/example.rs --crate-type lib\n \n echo \"[JIT] mini_core_hello_world\"\n-SHOULD_RUN=1 $RUSTC --crate-type bin example/mini_core_hello_world.rs --cfg jit\n+SHOULD_RUN=1 JIT_ARGS=\"abc bcd\" $RUSTC --crate-type bin example/mini_core_hello_world.rs --cfg jit\n \n echo \"[AOT] mini_core_hello_world\"\n $RUSTC example/mini_core_hello_world.rs --crate-name mini_core_hello_world --crate-type bin\n-sh -c ./target/out/mini_core_hello_world\n+./target/out/mini_core_hello_world abc bcd\n \n echo \"[BUILD] sysroot\"\n time ./build_sysroot/build_sysroot.sh"}]}