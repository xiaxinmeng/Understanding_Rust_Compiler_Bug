{"sha": "1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiY2MxZjhkZjVkM2IyMWY0ZjQxYzFmZTRmMjZlN2Y5OWZlZThjNmI=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-02-23T04:07:50Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-04-22T02:27:50Z"}, "message": "refactor: apply heuristic config changes in lib", "tree": {"sha": "5b26b07aca9db3a910f4ddcda9ad6bf8c6c307ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b26b07aca9db3a910f4ddcda9ad6bf8c6c307ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "html_url": "https://github.com/rust-lang/rust/commit/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea1611c06eabb6c77d002a6ddc06697604e5077f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1611c06eabb6c77d002a6ddc06697604e5077f", "html_url": "https://github.com/rust-lang/rust/commit/ea1611c06eabb6c77d002a6ddc06697604e5077f"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "c5ffb074ba554cfaa6f919d40fd2f579bf643129", "filename": "src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "patch": "@@ -300,7 +300,7 @@ impl Rewrite for ast::MetaItem {\n                     // 1 = \"]\"\n                     shape.sub_width(1)?,\n                     self.span,\n-                    context.config.width_heuristics().attr_fn_like_width,\n+                    context.config.attr_fn_like_width(),\n                     Some(if has_trailing_comma {\n                         SeparatorTactic::Always\n                     } else {"}, {"sha": "8053f0e8fecc10f14d2f88e7ea68ca2a6a56a287", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "patch": "@@ -577,7 +577,7 @@ impl<'a> ChainFormatterShared<'a> {\n         let one_line_budget = if self.child_count == 1 {\n             shape.width\n         } else {\n-            min(shape.width, context.config.width_heuristics().chain_width)\n+            min(shape.width, context.config.chain_width())\n         }\n         .saturating_sub(almost_total);\n "}, {"sha": "ced382c4915a1b056e6a43d7a559ba6f4f40d4e6", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "patch": "@@ -899,22 +899,11 @@ impl<'a> ControlFlow<'a> {\n                 || last_line_offsetted(shape.used_width(), &pat_expr_string));\n \n         // Try to format if-else on single line.\n-        if self.allow_single_line\n-            && context\n-                .config\n-                .width_heuristics()\n-                .single_line_if_else_max_width\n-                > 0\n-        {\n+        if self.allow_single_line && context.config.single_line_if_else_max_width() > 0 {\n             let trial = self.rewrite_single_line(&pat_expr_string, context, shape.width);\n \n             if let Some(cond_str) = trial {\n-                if cond_str.len()\n-                    <= context\n-                        .config\n-                        .width_heuristics()\n-                        .single_line_if_else_max_width\n-                {\n+                if cond_str.len() <= context.config.single_line_if_else_max_width() {\n                     return Some((cond_str, 0));\n                 }\n             }\n@@ -1246,7 +1235,7 @@ pub(crate) fn rewrite_call(\n         args.iter(),\n         shape,\n         span,\n-        context.config.width_heuristics().fn_call_width,\n+        context.config.fn_call_width(),\n         choose_separator_tactic(context, span),\n     )\n }\n@@ -1785,7 +1774,7 @@ pub(crate) fn rewrite_tuple<'a, T: 'a + IntoOverflowableItem<'a>>(\n             items,\n             shape,\n             span,\n-            context.config.width_heuristics().fn_call_width,\n+            context.config.fn_call_width(),\n             force_tactic,\n         )\n     } else {"}, {"sha": "ecbd0bd12ec6efd7c05c98e7defca1c2270672c2", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "patch": "@@ -505,8 +505,8 @@ impl<'a> FmtVisitor<'a> {\n             )\n             .collect()\n         };\n-        let mut items: Vec<_> =\n-            itemize_list_with(self.config.width_heuristics().struct_variant_width);\n+        let mut items: Vec<_> = itemize_list_with(self.config.struct_variant_width());\n+\n         // If one of the variants use multiple lines, use multi-lined formatting for all variants.\n         let has_multiline_variant = items.iter().any(|item| item.inner_as_ref().contains('\\n'));\n         let has_single_line_variant = items.iter().any(|item| !item.inner_as_ref().contains('\\n'));\n@@ -1479,7 +1479,7 @@ fn format_tuple_struct(\n             fields.iter(),\n             shape,\n             span,\n-            context.config.width_heuristics().fn_call_width,\n+            context.config.fn_call_width(),\n             None,\n         )?;\n     }"}, {"sha": "ccf8f784c04545c90e6d35ffe55d89453685c6cf", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "patch": "@@ -863,7 +863,7 @@ pub(crate) fn struct_lit_shape(\n     };\n     let shape_width = shape.width.checked_sub(prefix_width + suffix_width);\n     if let Some(w) = shape_width {\n-        let shape_width = cmp::min(w, context.config.width_heuristics().struct_lit_width);\n+        let shape_width = cmp::min(w, context.config.struct_lit_width());\n         Some((Some(Shape::legacy(shape_width, shape.indent)), v_shape))\n     } else {\n         Some((None, v_shape))"}, {"sha": "52534b216a65e2e12b12618e32cab89a5873e5f2", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "patch": "@@ -382,7 +382,7 @@ fn rewrite_macro_inner(\n                     arg_vec.iter(),\n                     shape,\n                     mac.span(),\n-                    context.config.width_heuristics().fn_call_width,\n+                    context.config.fn_call_width(),\n                     if trailing_comma {\n                         Some(SeparatorTactic::Always)\n                     } else {"}, {"sha": "d670b0a41e8186ac40abb7a322bf38acfd81ae64", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "patch": "@@ -318,7 +318,7 @@ pub(crate) fn rewrite_with_square_brackets<'a, T: 'a + IntoOverflowableItem<'a>>\n         span,\n         lhs,\n         rhs,\n-        context.config.width_heuristics().array_width,\n+        context.config.array_width(),\n         force_separator_tactic,\n         Some((\"[\", \"]\")),\n     )"}, {"sha": "fe025a0f64946e1a062bbd3cd871ecc6829bed56", "filename": "tests/target/issue_4049.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/tests%2Ftarget%2Fissue_4049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b/tests%2Ftarget%2Fissue_4049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4049.rs?ref=1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "patch": "@@ -0,0 +1,26 @@\n+// rustfmt-max_width: 110\n+// rustfmt-use_small_heuristics: Max\n+// rustfmt-hard_tabs: true\n+// rustfmt-use_field_init_shorthand: true\n+// rustfmt-overflow_delimited_expr: true\n+\n+// https://github.com/rust-lang/rustfmt/issues/4049\n+fn foo() {\n+\t{\n+\t\t{\n+\t\t\tif let Some(MpcEv::PlayDrum(pitch, vel)) =\n+\t\t\t\t// self.mpc.handle_input(e, /*btn_ctrl_down,*/ tx_launch_to_daw, state_view)\n+\t\t\t\tself.mpc.handle_input(e, &mut MyBorrowedState { tx_launch_to_daw, state_view })\n+\t\t\t{\n+\t\t\t\tprintln!(\"bar\");\n+\t\t\t}\n+\n+\t\t\tif let Some(e) =\n+\t\t\t\t// self.note_input.handle_input(e, /*btn_ctrl_down,*/ tx_launch_to_daw, state_view)\n+\t\t\t\tself.note_input.handle_input(e, &mut MyBorrowedState { tx_launch_to_daw, state_view })\n+\t\t\t{\n+\t\t\t\tprintln!(\"baz\");\n+\t\t\t}\n+\t\t}\n+\t}\n+}"}]}