{"sha": "52f77110d455b6b946ae0ca36a4671bdd9b7e145", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZjc3MTEwZDQ1NWI2Yjk0NmFlMGNhMzZhNDY3MWJkZDliN2UxNDU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-06T23:52:35Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-08T13:37:40Z"}, "message": "Add a fast path to inherent impl overlap check\n\nQuickly skip impls that do not define any items with the same name", "tree": {"sha": "c4b9fda8584d3613ef5f83b5fea862f3f292aa0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b9fda8584d3613ef5f83b5fea862f3f292aa0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52f77110d455b6b946ae0ca36a4671bdd9b7e145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52f77110d455b6b946ae0ca36a4671bdd9b7e145", "html_url": "https://github.com/rust-lang/rust/commit/52f77110d455b6b946ae0ca36a4671bdd9b7e145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52f77110d455b6b946ae0ca36a4671bdd9b7e145/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4165731ad0445dc801b43b6b125c7178d5c70ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4165731ad0445dc801b43b6b125c7178d5c70ff", "html_url": "https://github.com/rust-lang/rust/commit/f4165731ad0445dc801b43b6b125c7178d5c70ff"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "97aa77c6516f35e662e6cd1f499f77a75ac53d8a", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 49, "deletions": 23, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/52f77110d455b6b946ae0ca36a4671bdd9b7e145/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f77110d455b6b946ae0ca36a4671bdd9b7e145/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=52f77110d455b6b946ae0ca36a4671bdd9b7e145", "patch": "@@ -17,6 +17,30 @@ struct InherentOverlapChecker<'tcx> {\n }\n \n impl InherentOverlapChecker<'tcx> {\n+    /// Checks whether any associated items in impls 1 and 2 share the same identifier and\n+    /// namespace.\n+    fn impls_have_common_items(&self, impl1: DefId, impl2: DefId) -> bool {\n+        let impl_items1 = self.tcx.associated_items(impl1);\n+        let impl_items2 = self.tcx.associated_items(impl2);\n+\n+        for item1 in &impl_items1[..] {\n+            for item2 in &impl_items2[..] {\n+                // Avoid costly `.modern()` calls as much as possible by doing them as late as we\n+                // can. Compare raw symbols first.\n+                if item1.ident.name == item2.ident.name\n+                    && Namespace::from(item1.kind) == Namespace::from(item2.kind)\n+                {\n+                    // Symbols and namespace match, compare hygienically.\n+                    if item1.ident.modern() == item2.ident.modern() {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        false\n+    }\n+\n     fn check_for_common_items_in_impls(\n         &self,\n         impl1: DefId,\n@@ -64,27 +88,21 @@ impl InherentOverlapChecker<'tcx> {\n         }\n     }\n \n-    fn check_for_overlapping_inherent_impls(&self, ty_def_id: DefId) {\n-        let impls = self.tcx.inherent_impls(ty_def_id);\n-\n-        for (i, &impl1_def_id) in impls.iter().enumerate() {\n-            for &impl2_def_id in &impls[(i + 1)..] {\n-                traits::overlapping_impls(\n-                    self.tcx,\n-                    impl1_def_id,\n-                    impl2_def_id,\n-                    IntercrateMode::Issue43355,\n-                    // We go ahead and just skip the leak check for\n-                    // inherent impls without warning.\n-                    SkipLeakCheck::Yes,\n-                    |overlap| {\n-                        self.check_for_common_items_in_impls(impl1_def_id, impl2_def_id, overlap);\n-                        false\n-                    },\n-                    || true,\n-                );\n-            }\n-        }\n+    fn check_for_overlapping_inherent_impls(&self, impl1_def_id: DefId, impl2_def_id: DefId) {\n+        traits::overlapping_impls(\n+            self.tcx,\n+            impl1_def_id,\n+            impl2_def_id,\n+            IntercrateMode::Issue43355,\n+            // We go ahead and just skip the leak check for\n+            // inherent impls without warning.\n+            SkipLeakCheck::Yes,\n+            |overlap| {\n+                self.check_for_common_items_in_impls(impl1_def_id, impl2_def_id, overlap);\n+                false\n+            },\n+            || true,\n+        );\n     }\n }\n \n@@ -95,8 +113,16 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n             | hir::ItemKind::Struct(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::Union(..) => {\n-                let type_def_id = self.tcx.hir().local_def_id(item.hir_id);\n-                self.check_for_overlapping_inherent_impls(type_def_id);\n+                let ty_def_id = self.tcx.hir().local_def_id(item.hir_id);\n+                let impls = self.tcx.inherent_impls(ty_def_id);\n+\n+                for (i, &impl1_def_id) in impls.iter().enumerate() {\n+                    for &impl2_def_id in &impls[(i + 1)..] {\n+                        if self.impls_have_common_items(impl1_def_id, impl2_def_id) {\n+                            self.check_for_overlapping_inherent_impls(impl1_def_id, impl2_def_id);\n+                        }\n+                    }\n+                }\n             }\n             _ => {}\n         }"}]}