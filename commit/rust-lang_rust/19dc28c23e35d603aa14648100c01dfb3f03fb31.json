{"sha": "19dc28c23e35d603aa14648100c01dfb3f03fb31", "node_id": "C_kwDOAAsO6NoAKDE5ZGMyOGMyM2UzNWQ2MDNhYTE0NjQ4MTAwYzAxZGZiM2YwM2ZiMzE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-02T09:13:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-02T09:13:24Z"}, "message": "Rollup merge of #97587 - pvdrz:maybe-recover-from-bad-qpath-stage-2, r=davidtwco\n\nMigrate more diagnostics to use the `#[derive(SessionDiagnostic)]`\n\nr? ``@davidtwco``", "tree": {"sha": "eb8922e454ced71019d88f2ab88148b3b45cf0b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb8922e454ced71019d88f2ab88148b3b45cf0b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19dc28c23e35d603aa14648100c01dfb3f03fb31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimH80CRBK7hj4Ov3rIwAA/j0IAEPi7UW4ku2cZ8ANBR1gF1gj\ng/FWvqCTTlsQf6U7k+QJMVuJ/HRBrBUiIylFZhLFlYoDQBbHBjGjmPf/uil2Dz7r\njquQ1Wg+WC0DHSYrws/6gzshCZdcg2GqKMeThy4u+X+x6jMfk6xSdCF+BUXIHlpP\nZErRK5T2s+6NeUJSV0q/VxzdsImm56T2wvyk+bIqgxb6vckIRRS7Kc6pCmQn2g0l\nBPwPnyKeuvo2kC8dKc1syjMJ1STFujuN8iQGgFhNsXN/MESrAo0Oj6oGhdAvWnmz\ne5GaDIoGxzyWOB1kUmurHTzRcyqCA5I7QxAXNRKqFeNFxxeUHL5RtHexQzJ9LGw=\n=/uP+\n-----END PGP SIGNATURE-----\n", "payload": "tree eb8922e454ced71019d88f2ab88148b3b45cf0b3\nparent 9225f78b7403f3bc0a7fa10f24e7af415b33bea7\nparent 0fa70a8e2a95f0e33c4598ced446cfe3e7df1ae6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654161204 +0200\ncommitter GitHub <noreply@github.com> 1654161204 +0200\n\nRollup merge of #97587 - pvdrz:maybe-recover-from-bad-qpath-stage-2, r=davidtwco\n\nMigrate more diagnostics to use the `#[derive(SessionDiagnostic)]`\n\nr? ``@davidtwco``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19dc28c23e35d603aa14648100c01dfb3f03fb31", "html_url": "https://github.com/rust-lang/rust/commit/19dc28c23e35d603aa14648100c01dfb3f03fb31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19dc28c23e35d603aa14648100c01dfb3f03fb31/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9225f78b7403f3bc0a7fa10f24e7af415b33bea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9225f78b7403f3bc0a7fa10f24e7af415b33bea7", "html_url": "https://github.com/rust-lang/rust/commit/9225f78b7403f3bc0a7fa10f24e7af415b33bea7"}, {"sha": "0fa70a8e2a95f0e33c4598ced446cfe3e7df1ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa70a8e2a95f0e33c4598ced446cfe3e7df1ae6", "html_url": "https://github.com/rust-lang/rust/commit/0fa70a8e2a95f0e33c4598ced446cfe3e7df1ae6"}], "stats": {"total": 139, "additions": 95, "deletions": 44}, "files": [{"sha": "076b1b1caed7278645fbe808cf3510cac370c2a5", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19dc28c23e35d603aa14648100c01dfb3f03fb31/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/19dc28c23e35d603aa14648100c01dfb3f03fb31/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=19dc28c23e35d603aa14648100c01dfb3f03fb31", "patch": "@@ -14,3 +14,21 @@ parser-add-paren = try adding parentheses\n parser-forgot-paren = perhaps you forgot parentheses?\n \n parser-expect-path = expected a path\n+\n+parser-maybe-recover-from-bad-qpath-stage-2 =\n+    missing angle brackets in associated item path\n+    .suggestion = try: `{$ty}`\n+\n+parser-incorrect-semicolon =\n+    expected item, found `;`\n+    .suggestion = remove this semicolon\n+    .help = {$name} declarations are not followed by a semicolon\n+\n+parser-incorrect-use-of-await =\n+    incorrect use of `await`\n+    .parentheses-suggestion = `await` is not a method call, remove the parentheses\n+    .postfix-suggestion = `await` is a postfix operation\n+\n+parser-in-in-typo =\n+    expected iterable, found keyword `in`\n+    .suggestion = remove the duplicated `in`"}, {"sha": "a4cdfdf55f9df393c64df2b6ac3dca9449ec6c0b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 77, "deletions": 44, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/19dc28c23e35d603aa14648100c01dfb3f03fb31/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dc28c23e35d603aa14648100c01dfb3f03fb31/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=19dc28c23e35d603aa14648100c01dfb3f03fb31", "patch": "@@ -285,6 +285,54 @@ pub enum BadTypePlusSub {\n     },\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-maybe-recover-from-bad-qpath-stage-2\")]\n+struct BadQPathStage2 {\n+    #[primary_span]\n+    #[suggestion(applicability = \"maybe-incorrect\")]\n+    span: Span,\n+    ty: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-incorrect-semicolon\")]\n+struct IncorrectSemicolon<'a> {\n+    #[primary_span]\n+    #[suggestion_short(applicability = \"machine-applicable\")]\n+    span: Span,\n+    #[help]\n+    opt_help: Option<()>,\n+    name: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-incorrect-use-of-await\")]\n+struct IncorrectUseOfAwait {\n+    #[primary_span]\n+    #[suggestion(message = \"parentheses-suggestion\", applicability = \"machine-applicable\")]\n+    span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-incorrect-use-of-await\")]\n+struct IncorrectAwait {\n+    #[primary_span]\n+    span: Span,\n+    #[suggestion(message = \"postfix-suggestion\", code = \"{expr}.await{question_mark}\")]\n+    sugg_span: (Span, Applicability),\n+    expr: String,\n+    question_mark: &'static str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-in-in-typo\")]\n+struct InInTypo {\n+    #[primary_span]\n+    span: Span,\n+    #[suggestion(applicability = \"machine-applicable\")]\n+    sugg_span: Span,\n+}\n+\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped.\n@@ -1451,15 +1499,10 @@ impl<'a> Parser<'a> {\n         path.span = ty_span.to(self.prev_token.span);\n \n         let ty_str = self.span_to_snippet(ty_span).unwrap_or_else(|_| pprust::ty_to_string(&ty));\n-        self.struct_span_err(path.span, \"missing angle brackets in associated item path\")\n-            .span_suggestion(\n-                // This is a best-effort recovery.\n-                path.span,\n-                \"try\",\n-                format!(\"<{}>::{}\", ty_str, pprust::path_to_string(&path)),\n-                Applicability::MaybeIncorrect,\n-            )\n-            .emit();\n+        self.sess.emit_err(BadQPathStage2 {\n+            span: path.span,\n+            ty: format!(\"<{}>::{}\", ty_str, pprust::path_to_string(&path)),\n+        });\n \n         let path_span = ty_span.shrink_to_hi(); // Use an empty path since `position == 0`.\n         Ok(P(T::recovered(Some(QSelf { ty, path_span, position: 0 }), path)))\n@@ -1468,13 +1511,10 @@ impl<'a> Parser<'a> {\n     pub fn maybe_consume_incorrect_semicolon(&mut self, items: &[P<Item>]) -> bool {\n         if self.token.kind == TokenKind::Semi {\n             self.bump();\n-            let mut err = self.struct_span_err(self.prev_token.span, \"expected item, found `;`\");\n-            err.span_suggestion_short(\n-                self.prev_token.span,\n-                \"remove this semicolon\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            );\n+\n+            let mut err =\n+                IncorrectSemicolon { span: self.prev_token.span, opt_help: None, name: \"\" };\n+\n             if !items.is_empty() {\n                 let previous_item = &items[items.len() - 1];\n                 let previous_item_kind_name = match previous_item.kind {\n@@ -1487,10 +1527,11 @@ impl<'a> Parser<'a> {\n                     _ => None,\n                 };\n                 if let Some(name) = previous_item_kind_name {\n-                    err.help(&format!(\"{name} declarations are not followed by a semicolon\"));\n+                    err.opt_help = Some(());\n+                    err.name = name;\n                 }\n             }\n-            err.emit();\n+            self.sess.emit_err(err);\n             true\n         } else {\n             false\n@@ -1604,18 +1645,20 @@ impl<'a> Parser<'a> {\n     }\n \n     fn error_on_incorrect_await(&self, lo: Span, hi: Span, expr: &Expr, is_question: bool) -> Span {\n-        let expr_str =\n-            self.span_to_snippet(expr.span).unwrap_or_else(|_| pprust::expr_to_string(&expr));\n-        let suggestion = format!(\"{}.await{}\", expr_str, if is_question { \"?\" } else { \"\" });\n-        let sp = lo.to(hi);\n-        let app = match expr.kind {\n+        let span = lo.to(hi);\n+        let applicability = match expr.kind {\n             ExprKind::Try(_) => Applicability::MaybeIncorrect, // `await <expr>?`\n             _ => Applicability::MachineApplicable,\n         };\n-        self.struct_span_err(sp, \"incorrect use of `await`\")\n-            .span_suggestion(sp, \"`await` is a postfix operation\", suggestion, app)\n-            .emit();\n-        sp\n+\n+        self.sess.emit_err(IncorrectAwait {\n+            span,\n+            sugg_span: (span, applicability),\n+            expr: self.span_to_snippet(expr.span).unwrap_or_else(|_| pprust::expr_to_string(&expr)),\n+            question_mark: if is_question { \"?\" } else { \"\" },\n+        });\n+\n+        span\n     }\n \n     /// If encountering `future.await()`, consumes and emits an error.\n@@ -1626,16 +1669,10 @@ impl<'a> Parser<'a> {\n             // future.await()\n             let lo = self.token.span;\n             self.bump(); // (\n-            let sp = lo.to(self.token.span);\n+            let span = lo.to(self.token.span);\n             self.bump(); // )\n-            self.struct_span_err(sp, \"incorrect use of `await`\")\n-                .span_suggestion(\n-                    sp,\n-                    \"`await` is not a method call, remove the parentheses\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+\n+            self.sess.emit_err(IncorrectUseOfAwait { span });\n         }\n     }\n \n@@ -1907,14 +1944,10 @@ impl<'a> Parser<'a> {\n     pub(super) fn check_for_for_in_in_typo(&mut self, in_span: Span) {\n         if self.eat_keyword(kw::In) {\n             // a common typo: `for _ in in bar {}`\n-            self.struct_span_err(self.prev_token.span, \"expected iterable, found keyword `in`\")\n-                .span_suggestion_short(\n-                    in_span.until(self.prev_token.span),\n-                    \"remove the duplicated `in`\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+            self.sess.emit_err(InInTypo {\n+                span: self.prev_token.span,\n+                sugg_span: in_span.until(self.prev_token.span),\n+            });\n         }\n     }\n "}]}