{"sha": "5d90e89c36468350b9636614b0f9dbf64a4aef80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOTBlODljMzY0NjgzNTBiOTYzNjYxNGIwZjlkYmY2NGE0YWVmODA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T01:51:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T01:51:46Z"}, "message": "Rollup merge of #81769 - estebank:tail-expr-as-potential-return, r=lcnr\n\nSuggest `return`ing tail expressions that match return type\n\nSome newcomers are confused by the behavior of tail expressions,\ninterpreting that \"leaving out the `;` makes it the return value\".\nTo help them go in the right direction, suggest using `return` instead\nwhen applicable.", "tree": {"sha": "8cf0503de639110d321cfc9a71e998be99afda90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf0503de639110d321cfc9a71e998be99afda90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d90e89c36468350b9636614b0f9dbf64a4aef80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNF+yCRBK7hj4Ov3rIwAAdHIIAJgBgkCV8L2sUP1+jANRgUQJ\nom8qTs/qNiIU+CHoGTQ+sSKhG7/ZT9dN1Pry2ybNGsvY+7biusMmJEGxHSdcU/Ve\nKrTwObcAvclNyuAZ3Djbd50NF7lnB0GXGLCz/zHEwIqRF2kQZ4U6FDtSJQ3N/s8n\nOyzUD76hj4TxZrnAjSsNVWNFu+sLuTk5bIZxoV9Q7H4gca9Bu3dX5I9MqrXdfJ4i\ne8jiC45z4HgO9Dw5vjLbyar5yfE9LcLdSoLf/zm3R9uyeQXunKhWrj923Q4+iXsq\njSmdXZr6AsNrF0V4GfI12QaLIJmTPLLrsxo0JCeQn3U78yxnaXANrBk3h81FRsU=\n=HjBq\n-----END PGP SIGNATURE-----\n", "payload": "tree 8cf0503de639110d321cfc9a71e998be99afda90\nparent 8e51bd4315bad8456c6cabbfc338be97c17f3700\nparent fc6c19e2dcbb3039a380755699669d317a6a3fb2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614045106 +0100\ncommitter GitHub <noreply@github.com> 1614045106 +0100\n\nRollup merge of #81769 - estebank:tail-expr-as-potential-return, r=lcnr\n\nSuggest `return`ing tail expressions that match return type\n\nSome newcomers are confused by the behavior of tail expressions,\ninterpreting that \"leaving out the `;` makes it the return value\".\nTo help them go in the right direction, suggest using `return` instead\nwhen applicable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d90e89c36468350b9636614b0f9dbf64a4aef80", "html_url": "https://github.com/rust-lang/rust/commit/5d90e89c36468350b9636614b0f9dbf64a4aef80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d90e89c36468350b9636614b0f9dbf64a4aef80/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e51bd4315bad8456c6cabbfc338be97c17f3700", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e51bd4315bad8456c6cabbfc338be97c17f3700", "html_url": "https://github.com/rust-lang/rust/commit/8e51bd4315bad8456c6cabbfc338be97c17f3700"}, {"sha": "fc6c19e2dcbb3039a380755699669d317a6a3fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6c19e2dcbb3039a380755699669d317a6a3fb2", "html_url": "https://github.com/rust-lang/rust/commit/fc6c19e2dcbb3039a380755699669d317a6a3fb2"}], "stats": {"total": 254, "additions": 206, "deletions": 48}, "files": [{"sha": "2fef7c2cc087d4097e1d388ace6a2db18dec53f0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-filelength\n-use crate::def::{DefKind, Namespace, Res};\n+use crate::def::{CtorKind, DefKind, Namespace, Res};\n use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n use crate::{itemlikevisit, LangItem};\n@@ -1576,6 +1576,63 @@ impl Expr<'_> {\n         }\n         expr\n     }\n+\n+    pub fn can_have_side_effects(&self) -> bool {\n+        match self.peel_drop_temps().kind {\n+            ExprKind::Path(_) | ExprKind::Lit(_) => false,\n+            ExprKind::Type(base, _)\n+            | ExprKind::Unary(_, base)\n+            | ExprKind::Field(base, _)\n+            | ExprKind::Index(base, _)\n+            | ExprKind::AddrOf(.., base)\n+            | ExprKind::Cast(base, _) => {\n+                // This isn't exactly true for `Index` and all `Unnary`, but we are using this\n+                // method exclusively for diagnostics and there's a *cultural* pressure against\n+                // them being used only for its side-effects.\n+                base.can_have_side_effects()\n+            }\n+            ExprKind::Struct(_, fields, init) => fields\n+                .iter()\n+                .map(|field| field.expr)\n+                .chain(init.into_iter())\n+                .all(|e| e.can_have_side_effects()),\n+\n+            ExprKind::Array(args)\n+            | ExprKind::Tup(args)\n+            | ExprKind::Call(\n+                Expr {\n+                    kind:\n+                        ExprKind::Path(QPath::Resolved(\n+                            None,\n+                            Path { res: Res::Def(DefKind::Ctor(_, CtorKind::Fn), _), .. },\n+                        )),\n+                    ..\n+                },\n+                args,\n+            ) => args.iter().all(|arg| arg.can_have_side_effects()),\n+            ExprKind::If(..)\n+            | ExprKind::Match(..)\n+            | ExprKind::MethodCall(..)\n+            | ExprKind::Call(..)\n+            | ExprKind::Closure(..)\n+            | ExprKind::Block(..)\n+            | ExprKind::Repeat(..)\n+            | ExprKind::Break(..)\n+            | ExprKind::Continue(..)\n+            | ExprKind::Ret(..)\n+            | ExprKind::Loop(..)\n+            | ExprKind::Assign(..)\n+            | ExprKind::InlineAsm(..)\n+            | ExprKind::LlvmInlineAsm(..)\n+            | ExprKind::AssignOp(..)\n+            | ExprKind::ConstBlock(..)\n+            | ExprKind::Box(..)\n+            | ExprKind::Binary(..)\n+            | ExprKind::Yield(..)\n+            | ExprKind::DropTemps(..)\n+            | ExprKind::Err => true,\n+        }\n+    }\n }\n \n /// Checks if the specified expression is a built-in range literal."}, {"sha": "f2fbb95fc021cf5477605163465a4f4a72d4e0d0", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -346,7 +346,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if call_is_multiline {\n                                 err.span_suggestion(\n                                     callee.span.shrink_to_hi(),\n-                                    \"try adding a semicolon\",\n+                                    \"consider using a semicolon here\",\n                                     \";\".to_owned(),\n                                     Applicability::MaybeIncorrect,\n                                 );"}, {"sha": "159c97d8bfaa917d3a937300a80e0babe6beda42", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -1450,15 +1450,17 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             ) {\n                 if cond_expr.span.desugaring_kind().is_none() {\n                     err.span_label(cond_expr.span, \"expected this to be `()`\");\n-                    fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n+                    if expr.can_have_side_effects() {\n+                        fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n+                    }\n                 }\n             }\n             fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n         } else {\n             fcx.get_fn_decl(parent_id)\n         };\n \n-        if let (Some((fn_decl, can_suggest)), _) = (fn_decl, pointing_at_return_type) {\n+        if let Some((fn_decl, can_suggest)) = fn_decl {\n             if expression.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n                     &mut err,\n@@ -1472,6 +1474,16 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 fn_output = Some(&fn_decl.output); // `impl Trait` return type\n             }\n         }\n+\n+        let parent_id = fcx.tcx.hir().get_parent_item(id);\n+        let parent_item = fcx.tcx.hir().get(parent_id);\n+\n+        if let (Some((expr, _)), Some((fn_decl, _, _))) =\n+            (expression, fcx.get_node_fn_decl(parent_item))\n+        {\n+            fcx.suggest_missing_return_expr(&mut err, expr, fn_decl, expected, found);\n+        }\n+\n         if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {\n             self.add_impl_trait_explanation(&mut err, cause, fcx, expected, sp, fn_output);\n         }"}, {"sha": "155c10e891652f1b9cf75f8f5c401bdce8091e55", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -561,7 +561,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             hir::StmtKind::Expr(ref expr) => {\n                 // Check with expected type of `()`.\n                 self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit(), |err| {\n-                    self.suggest_semicolon_at_end(expr.span, err);\n+                    if expr.can_have_side_effects() {\n+                        self.suggest_semicolon_at_end(expr.span, err);\n+                    }\n                 });\n             }\n             hir::StmtKind::Semi(ref expr) => {"}, {"sha": "416b75d9e2e0c0c51bbfae4c2c1753272c1dcf92", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -44,11 +44,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         blk_id: hir::HirId,\n     ) -> bool {\n         let expr = expr.peel_drop_temps();\n-        self.suggest_missing_semicolon(err, expr, expected, cause_span);\n+        if expr.can_have_side_effects() {\n+            self.suggest_missing_semicolon(err, expr, expected, cause_span);\n+        }\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             pointing_at_return_type =\n                 self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n+            self.suggest_missing_return_expr(err, expr, &fn_decl, expected, found);\n         }\n         pointing_at_return_type\n     }\n@@ -392,10 +395,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::Loop(..)\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n-                | ExprKind::Block(..) => {\n+                | ExprKind::Block(..)\n+                    if expression.can_have_side_effects() =>\n+                {\n                     err.span_suggestion(\n                         cause_span.shrink_to_hi(),\n-                        \"try adding a semicolon\",\n+                        \"consider using a semicolon here\",\n                         \";\".to_string(),\n                         Applicability::MachineApplicable,\n                     );\n@@ -464,6 +469,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(in super::super) fn suggest_missing_return_expr(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &'tcx hir::Expr<'tcx>,\n+        fn_decl: &hir::FnDecl<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        if !expected.is_unit() {\n+            return;\n+        }\n+        let found = self.resolve_vars_with_obligations(found);\n+        if let hir::FnRetTy::Return(ty) = fn_decl.output {\n+            let ty = AstConv::ast_ty_to_ty(self, ty);\n+            let ty = self.normalize_associated_types_in(expr.span, ty);\n+            if self.can_coerce(found, ty) {\n+                err.multipart_suggestion(\n+                    \"you might have meant to return this value\",\n+                    vec![\n+                        (expr.span.shrink_to_lo(), \"return \".to_string()),\n+                        (expr.span.shrink_to_hi(), \";\".to_string()),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+\n     pub(in super::super) fn suggest_missing_parentheses(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "352a88ac10cd500589548e0ead0537d08fe12a7b", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -21,7 +21,7 @@ async fn dummy() {}\n async fn suggest_await_in_async_fn_return() {\n     dummy()\n     //~^ ERROR mismatched types [E0308]\n-    //~| HELP try adding a semicolon\n+    //~| HELP consider using a semicolon here\n     //~| HELP consider `await`ing on the `Future`\n     //~| SUGGESTION .await\n }"}, {"sha": "26e81a52c2141388cc98bcb05e15345f6a15bfeb", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -29,7 +29,7 @@ help: consider `await`ing on the `Future`\n    |\n LL |     dummy().await\n    |            ^^^^^^\n-help: try adding a semicolon\n+help: consider using a semicolon here\n    |\n LL |     dummy();\n    |            ^"}, {"sha": "7f96aa289d0abc565b87aa2ef6ae47f0abdf4c7e", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -14,9 +14,7 @@ LL | |         true\n    | |         ^^^^ expected `()`, found `bool`\n LL | |\n LL | |     }\n-   | |     -- help: consider using a semicolon here\n-   | |_____|\n-   |       expected this to be `()`\n+   | |_____- expected this to be `()`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "4fcd0ee2c48e28e0e89eab3ee9db0d9859f950bf", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo()\n    |     ^^^^^ expected `()`, found `usize`\n    |\n-help: try adding a semicolon\n+help: consider using a semicolon here\n    |\n LL |     foo();\n    |          ^"}, {"sha": "1db759a2181d596537863384e8c9de6e9c713649", "filename": "src/test/ui/macros/empty-trailing-stmt.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fempty-trailing-stmt.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -3,6 +3,11 @@ error[E0308]: mismatched types\n    |\n LL |     { true }\n    |       ^^^^ expected `()`, found `bool`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return true; }\n+   |       ^^^^^^     ^\n \n error[E0308]: mismatched types\n   --> $DIR/empty-trailing-stmt.rs:5:13"}, {"sha": "2a70127485785783128b9bd5c905fc9d6fa4b004", "filename": "src/test/ui/parser/expr-as-stmt-2.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -2,19 +2,29 @@ error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:3:26\n    |\n LL |     if let Some(x) = a { true } else { false }\n-   |     ---------------------^^^^------------------ help: consider using a semicolon here\n+   |     ---------------------^^^^-----------------\n    |     |                    |\n    |     |                    expected `()`, found `bool`\n    |     expected this to be `()`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     if let Some(x) = a { return true; } else { false }\n+   |                          ^^^^^^     ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:3:40\n    |\n LL |     if let Some(x) = a { true } else { false }\n-   |     -----------------------------------^^^^^--- help: consider using a semicolon here\n+   |     -----------------------------------^^^^^--\n    |     |                                  |\n    |     |                                  expected `()`, found `bool`\n    |     expected this to be `()`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     if let Some(x) = a { true } else { return false; }\n+   |                                        ^^^^^^      ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt-2.rs:6:5"}, {"sha": "09a6d7cbeb17673514c4f02a500806d3cb107849", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -40,24 +40,44 @@ error[E0308]: mismatched types\n    |\n LL |     {2} + {2}\n    |      ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     {return 2;} + {2}\n+   |      ^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:12:6\n    |\n LL |     {2} + 2\n    |      ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     {return 2;} + 2\n+   |      ^^^^^^  ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:18:7\n    |\n LL |     { 42 } + foo;\n    |       ^^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return 42; } + foo;\n+   |       ^^^^^^   ^\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:24:7\n    |\n LL |     { 3 } * 3\n    |       ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     { return 3; } * 3\n+   |       ^^^^^^  ^\n \n error[E0614]: type `{integer}` cannot be dereferenced\n   --> $DIR/expr-as-stmt.rs:24:11"}, {"sha": "3ea5ca565c5e530e9cd4525cc6dffafd6863dfab", "filename": "src/test/ui/parser/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n    |\n LL |     if x == E::V { field } {}\n-   |     ---------------^^^^^--- help: consider using a semicolon here\n+   |     ---------------^^^^^--\n    |     |              |\n    |     |              expected `()`, found `bool`\n    |     expected this to be `()`"}, {"sha": "345520d4852ae4604519da5438385d82a533e1c2", "filename": "src/test/ui/proc-macro/issue-37788.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -5,7 +5,7 @@ LL | fn main() {\n    |           - expected `()` because of default return type\n LL |     // Test that constructing the `visible_parent_map` (in `cstore_impl.rs`) does not ICE.\n LL |     std::cell::Cell::new(0)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n    |     |\n    |     expected `()`, found struct `Cell`\n    |"}, {"sha": "6ef921bef3d7a9cbfb640aec4d8d7c4ce26df81d", "filename": "src/test/ui/return/return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -6,7 +6,7 @@ LL |     foo(4 as usize)\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`\n-help: try adding a semicolon\n+help: consider using a semicolon here\n    |\n LL |     foo(4 as usize);\n    |                    ^"}, {"sha": "83266abfa06e67dd7ea6a028f78779a05e4a1bf5", "filename": "src/test/ui/return/tail-expr-as-potential-return.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let _ = foo(true);\n+}\n+\n+fn foo(x: bool) -> Result<f64, i32> {\n+    if x {\n+        Err(42) //~ ERROR mismatched types\n+    }\n+    Ok(42.0)\n+}"}, {"sha": "f8527961374ddb79958150dada7af654eb701e4c", "filename": "src/test/ui/return/tail-expr-as-potential-return.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/tail-expr-as-potential-return.rs:7:9\n+   |\n+LL | /     if x {\n+LL | |         Err(42)\n+   | |         ^^^^^^^ expected `()`, found enum `Result`\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `Result<_, {integer}>`\n+help: you might have meant to return this value\n+   |\n+LL |         return Err(42);\n+   |         ^^^^^^        ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7a2b75a1c1f0ac007b44b66b557aa397104ddecd", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -29,7 +29,7 @@ LL | fn monomorphic() -> () {\n    |                     -- expected `()` because of return type\n ...\n LL |     generic::<()>()\n-   |     ^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n+   |     ^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n    |     |\n    |     expected `()`, found associated type\n    |"}, {"sha": "438075083d37071416a5a23ad42545b759052ca3", "filename": "src/test/ui/suggestions/issue-51055-missing-semicolon-between-call-and-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -5,7 +5,7 @@ LL |   fn vindictive() -> bool { true }\n    |   ----------------------- `vindictive` defined here returns `bool`\n ...\n LL |       vindictive()\n-   |       -^^^^^^^^^^^- help: try adding a semicolon: `;`\n+   |       -^^^^^^^^^^^- help: consider using a semicolon here: `;`\n    |  _____|\n    | |\n LL | |     (1, 2)"}, {"sha": "03cbed1376ea3ed21c8513d2d7a35d5ef419c539", "filename": "src/test/ui/suggestions/match-needing-semi.fixed", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -1,18 +0,0 @@\n-// check-only\n-// run-rustfix\n-\n-fn main() {\n-    match 3 {\n-        4 => 1,\n-        3 => {\n-            2 //~ ERROR mismatched types\n-        }\n-        _ => 2\n-    };\n-    match 3 { //~ ERROR mismatched types\n-        4 => 1,\n-        3 => 2,\n-        _ => 2\n-    };\n-    let _ = ();\n-}"}, {"sha": "833555d0e406e95e8b36f1a832223ba1ad43057d", "filename": "src/test/ui/suggestions/match-needing-semi.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -1,11 +1,10 @@\n // check-only\n-// run-rustfix\n \n fn main() {\n     match 3 {\n         4 => 1,\n         3 => {\n-            2 //~ ERROR mismatched types\n+            foo() //~ ERROR mismatched types\n         }\n         _ => 2\n     }\n@@ -16,3 +15,7 @@ fn main() {\n     }\n     let _ = ();\n }\n+\n+fn foo() -> i32 {\n+    42\n+}"}, {"sha": "3739c9940f0cc268c13938e49aaecd05c6752367", "filename": "src/test/ui/suggestions/match-needing-semi.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d90e89c36468350b9636614b0f9dbf64a4aef80/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr?ref=5d90e89c36468350b9636614b0f9dbf64a4aef80", "patch": "@@ -1,20 +1,27 @@\n error[E0308]: mismatched types\n-  --> $DIR/match-needing-semi.rs:8:13\n+  --> $DIR/match-needing-semi.rs:7:13\n    |\n LL | /     match 3 {\n LL | |         4 => 1,\n LL | |         3 => {\n-LL | |             2\n-   | |             ^ expected `()`, found integer\n+LL | |             foo()\n+   | |             ^^^^^ expected `()`, found `i32`\n LL | |         }\n LL | |         _ => 2\n LL | |     }\n-   | |     -- help: consider using a semicolon here\n-   | |_____|\n-   |       expected this to be `()`\n+   | |_____- expected this to be `()`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |             foo();\n+   |                  ^\n+help: consider using a semicolon here\n+   |\n+LL |     };\n+   |      ^\n \n error[E0308]: mismatched types\n-  --> $DIR/match-needing-semi.rs:12:5\n+  --> $DIR/match-needing-semi.rs:11:5\n    |\n LL | /     match 3 {\n LL | |         4 => 1,"}]}