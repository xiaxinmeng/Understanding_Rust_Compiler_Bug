{"sha": "a07c2715594b17fca900c6c4a497c8fb6abde609", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwN2MyNzE1NTk0YjE3ZmNhOTAwYzZjNGE0OTdjOGZiNmFiZGU2MDk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-03T19:11:35Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-03T19:11:35Z"}, "message": "Merge #3399\n\n3399: RIIR update lints: Generate modules section and lint group sections r=flip1995 a=phansch\n\nThis adds the last missing parts of the generating code.\r\n\r\ncc #2882\n\nCo-authored-by: Philipp Hansch <dev@phansch.net>", "tree": {"sha": "65c7fa15b2bef00e027baef9379e22c8568b04c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c7fa15b2bef00e027baef9379e22c8568b04c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a07c2715594b17fca900c6c4a497c8fb6abde609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a07c2715594b17fca900c6c4a497c8fb6abde609", "html_url": "https://github.com/rust-lang/rust/commit/a07c2715594b17fca900c6c4a497c8fb6abde609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a07c2715594b17fca900c6c4a497c8fb6abde609/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "71ec4ff636b9315cfaadd30e45338a077ed98a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ec4ff636b9315cfaadd30e45338a077ed98a9b", "html_url": "https://github.com/rust-lang/rust/commit/71ec4ff636b9315cfaadd30e45338a077ed98a9b"}, {"sha": "facfb5a7a979054c26fdb3adf11b1c6c762fde13", "url": "https://api.github.com/repos/rust-lang/rust/commits/facfb5a7a979054c26fdb3adf11b1c6c762fde13", "html_url": "https://github.com/rust-lang/rust/commit/facfb5a7a979054c26fdb3adf11b1c6c762fde13"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "0ed1494be8219029f8fdf1738307736c6bf00bc5", "filename": "ci/base-tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a07c2715594b17fca900c6c4a497c8fb6abde609/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a07c2715594b17fca900c6c4a497c8fb6abde609/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=a07c2715594b17fca900c6c4a497c8fb6abde609", "patch": "@@ -22,6 +22,7 @@ cargo build --features debugging\n cargo test --features debugging\n cd clippy_lints && cargo test && cd ..\n cd rustc_tools_util && cargo test && cd ..\n+cd clippy_dev && cargo test && cd ..\n # check that the lint lists are up-to-date\n ./util/update_lints.py -c\n "}, {"sha": "2ae8423381dbf1d8eaa322e7747a7c870def79f4", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a07c2715594b17fca900c6c4a497c8fb6abde609/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07c2715594b17fca900c6c4a497c8fb6abde609/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=a07c2715594b17fca900c6c4a497c8fb6abde609", "patch": "@@ -71,6 +71,32 @@ impl Lint {\n     }\n }\n \n+/// Generates the Vec items for `register_lint_group` calls in `clippy_lints/src/lib.rs`.\n+pub fn gen_lint_group_list(lints: Vec<Lint>) -> Vec<String> {\n+    lints.into_iter()\n+        .filter_map(|l| {\n+            if l.is_internal() || l.deprecation.is_some() {\n+                None\n+            } else {\n+                Some(format!(\"        {}::{},\", l.module, l.name.to_uppercase()))\n+            }\n+        })\n+        .sorted()\n+}\n+\n+/// Generates the `pub mod module_name` list in `clippy_lints/src/lib.rs`.\n+pub fn gen_modules_list(lints: Vec<Lint>) -> Vec<String> {\n+    lints.into_iter()\n+        .filter_map(|l| {\n+            if l.is_internal() || l.deprecation.is_some() { None } else { Some(l.module) }\n+        })\n+        .unique()\n+        .map(|module| {\n+            format!(\"pub mod {};\", module)\n+        })\n+        .sorted()\n+}\n+\n /// Generates the list of lint links at the bottom of the README\n pub fn gen_changelog_lint_list(lints: Vec<Lint>) -> Vec<String> {\n     let mut lint_list_sorted: Vec<Lint> = lints;\n@@ -112,7 +138,13 @@ fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item=Lint> {\n     let mut file = fs::File::open(dir_entry.path()).unwrap();\n     let mut content = String::new();\n     file.read_to_string(&mut content).unwrap();\n-    parse_contents(&content, dir_entry.path().file_stem().unwrap().to_str().unwrap())\n+    let mut filename = dir_entry.path().file_stem().unwrap().to_str().unwrap();\n+    // If the lints are stored in mod.rs, we get the module name from\n+    // the containing directory:\n+    if filename == \"mod\" {\n+        filename = dir_entry.path().parent().unwrap().file_stem().unwrap().to_str().unwrap()\n+    }\n+    parse_contents(&content, filename)\n }\n \n fn parse_contents(content: &str, filename: &str) -> impl Iterator<Item=Lint> {\n@@ -214,7 +246,7 @@ pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_sta\n         // This happens if the provided regex in `clippy_dev/src/main.rs` is not found in the\n         // given text or file. Most likely this is an error on the programmer's side and the Regex\n         // is incorrect.\n-        println!(\"regex {:?} not found. You may have to update it.\", start);\n+        eprintln!(\"error: regex `{:?}` not found. You may have to update it.\", start);\n     }\n     new_lines.join(\"\\n\")\n }\n@@ -355,3 +387,33 @@ fn test_gen_deprecated() {\n     ];\n     assert_eq!(expected, gen_deprecated(&lints));\n }\n+\n+#[test]\n+fn test_gen_modules_list() {\n+    let lints = vec![\n+        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n+        Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n+        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n+    ];\n+    let expected = vec![\n+        \"pub mod another_module;\".to_string(),\n+        \"pub mod module_name;\".to_string(),\n+    ];\n+    assert_eq!(expected, gen_modules_list(lints));\n+}\n+\n+#[test]\n+fn test_gen_lint_group_list() {\n+    let lints = vec![\n+        Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n+        Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n+        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n+        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n+    ];\n+    let expected = vec![\n+        \"        module_name::ABC,\".to_string(),\n+        \"        module_name::SHOULD_ASSERT_EQ,\".to_string(),\n+    ];\n+    assert_eq!(expected, gen_lint_group_list(lints));\n+}"}, {"sha": "288fb7c58b4c058c0cc4474684bfdf43b784e3aa", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a07c2715594b17fca900c6c4a497c8fb6abde609/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07c2715594b17fca900c6c4a497c8fb6abde609/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=a07c2715594b17fca900c6c4a497c8fb6abde609", "patch": "@@ -19,12 +19,17 @@ fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n         .subcommand(\n             SubCommand::with_name(\"update_lints\")\n-                .about(\"Update the lint list\")\n+                .about(\"Makes sure that:\\n \\\n+                       * the lint count in README.md is correct\\n \\\n+                       * the changelog contains markdown link references at the bottom\\n \\\n+                       * all lint groups include the correct lints\\n \\\n+                       * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n+                       * all lints are registered in the lint store\")\n                 .arg(\n                     Arg::with_name(\"print-only\")\n                         .long(\"print-only\")\n                         .short(\"p\")\n-                        .help(\"Print a table of lints to STDOUT. Does not modify any files.\"),\n+                        .help(\"Print a table of lints to STDOUT. This does not include deprecated and internal lints. (Does not modify any files)\"),\n                 )\n         )\n         .get_matches();\n@@ -90,4 +95,42 @@ fn update_lints() {\n         false,\n         || { gen_deprecated(&lint_list) }\n     );\n+\n+    replace_region_in_file(\n+        \"../clippy_lints/src/lib.rs\",\n+        \"begin lints modules\",\n+        \"end lints modules\",\n+        false,\n+        || { gen_modules_list(lint_list.clone()) }\n+    );\n+\n+    // Generate lists of lints in the clippy::all lint group\n+    replace_region_in_file(\n+        \"../clippy_lints/src/lib.rs\",\n+        r#\"reg.register_lint_group\\(\"clippy::all\"\"#,\n+        r#\"\\]\\);\"#,\n+        false,\n+        || {\n+            // clippy::all should only include the following lint groups:\n+            let all_group_lints = usable_lints.clone().into_iter().filter(|l| {\n+                l.group == \"correctness\" ||\n+                  l.group == \"style\" ||\n+                  l.group == \"complexity\" ||\n+                  l.group == \"perf\"\n+            }).collect();\n+\n+            gen_lint_group_list(all_group_lints)\n+        }\n+    );\n+\n+    // Generate the list of lints for all other lint groups\n+    for (lint_group, lints) in Lint::by_lint_group(&usable_lints) {\n+        replace_region_in_file(\n+            \"../clippy_lints/src/lib.rs\",\n+            &format!(\"reg.register_lint_group\\\\(\\\"clippy::{}\\\"\", lint_group),\n+            r#\"\\]\\);\"#,\n+            false,\n+            || { gen_lint_group_list(lints.clone()) }\n+        );\n+    }\n }"}]}