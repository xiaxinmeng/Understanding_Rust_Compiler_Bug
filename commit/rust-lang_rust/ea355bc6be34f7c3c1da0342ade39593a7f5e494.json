{"sha": "ea355bc6be34f7c3c1da0342ade39593a7f5e494", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMzU1YmM2YmUzNGY3YzNjMWRhMDM0MmFkZTM5NTkzYTdmNWU0OTQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-04T19:19:15Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-16T22:45:19Z"}, "message": "Fix bad diagnostics for anon params with ref", "tree": {"sha": "a81bb7467053a9270977d2ac4e2bb7c2c89c28ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a81bb7467053a9270977d2ac4e2bb7c2c89c28ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea355bc6be34f7c3c1da0342ade39593a7f5e494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea355bc6be34f7c3c1da0342ade39593a7f5e494", "html_url": "https://github.com/rust-lang/rust/commit/ea355bc6be34f7c3c1da0342ade39593a7f5e494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea355bc6be34f7c3c1da0342ade39593a7f5e494/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5d8117c338a788bd24abec733fd143dfceb25a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d8117c338a788bd24abec733fd143dfceb25a0", "html_url": "https://github.com/rust-lang/rust/commit/f5d8117c338a788bd24abec733fd143dfceb25a0"}], "stats": {"total": 131, "additions": 96, "deletions": 35}, "files": [{"sha": "f214b11d5f05250a617c24e5b922c7c23ffc0b30", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 31, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ea355bc6be34f7c3c1da0342ade39593a7f5e494/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea355bc6be34f7c3c1da0342ade39593a7f5e494/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=ea355bc6be34f7c3c1da0342ade39593a7f5e494", "patch": "@@ -1613,42 +1613,65 @@ impl<'a> Parser<'a> {\n                 Applicability::HasPlaceholders,\n             );\n             return Some(ident);\n-        } else if let PatKind::Ident(_, ident, _) = pat.kind {\n-            if require_name\n-                && (self.token == token::Comma\n-                    || self.token == token::Lt\n-                    || self.token == token::CloseDelim(token::Paren))\n-            {\n-                // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n-                if first_param {\n-                    err.span_suggestion(\n-                        pat.span,\n-                        \"if this is a `self` type, give it a parameter name\",\n-                        format!(\"self: {}\", ident),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                // Avoid suggesting that `fn foo(HashMap<u32>)` is fixed with a change to\n-                // `fn foo(HashMap: TypeName<u32>)`.\n-                if self.token != token::Lt {\n-                    err.span_suggestion(\n-                        pat.span,\n-                        \"if this is a parameter name, give it a type\",\n-                        format!(\"{}: TypeName\", ident),\n-                        Applicability::HasPlaceholders,\n-                    );\n+        } else if require_name\n+            && (self.token == token::Comma\n+                || self.token == token::Lt\n+                || self.token == token::CloseDelim(token::Paren))\n+        {\n+            let (ident, self_sugg, param_sugg, type_sugg) = match pat.kind {\n+                PatKind::Ident(_, ident, _) => (\n+                    ident,\n+                    format!(\"self: {}\", ident),\n+                    format!(\"{}: TypeName\", ident),\n+                    format!(\"_: {}\", ident),\n+                ),\n+                // Also catches `fn foo(&a)`.\n+                PatKind::Ref(ref pat, mutab) => {\n+                    if let PatKind::Ident(_, ident, _) = pat.clone().into_inner().kind {\n+                        let mutab = mutab.prefix_str();\n+                        (\n+                            ident,\n+                            format!(\"self: &{}{}\", mutab, ident),\n+                            format!(\"{}: &{}TypeName\", ident, mutab),\n+                            format!(\"_: &{}{}\", mutab, ident),\n+                        )\n+                    } else {\n+                        return None;\n+                    }\n                 }\n+                // Ignore other `PatKind`.\n+                _ => return None,\n+            };\n+\n+            // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n+            if first_param {\n                 err.span_suggestion(\n                     pat.span,\n-                    \"if this is a type, explicitly ignore the parameter name\",\n-                    format!(\"_: {}\", ident),\n-                    Applicability::MachineApplicable,\n+                    \"if this is a `self` type, give it a parameter name\",\n+                    self_sugg,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            // Avoid suggesting that `fn foo(HashMap<u32>)` is fixed with a change to\n+            // `fn foo(HashMap: TypeName<u32>)`.\n+            if self.token != token::Lt {\n+                err.span_suggestion(\n+                    pat.span,\n+                    \"if this is a parameter name, give it a type\",\n+                    param_sugg,\n+                    Applicability::HasPlaceholders,\n                 );\n-                err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n-\n-                // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n-                return if self.token == token::Lt { None } else { Some(ident) };\n             }\n+            err.span_suggestion(\n+                pat.span,\n+                \"if this is a type, explicitly ignore the parameter name\",\n+                type_sugg,\n+                Applicability::MachineApplicable,\n+            );\n+            err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n+\n+            // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n+            return if self.token == token::Lt { None } else { Some(ident) };\n         }\n         None\n     }"}, {"sha": "a7dfdc8373279c4e7ab80cc79fc21fa9fb75d67e", "filename": "src/test/ui/anon-params/anon-params-denied-2018.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea355bc6be34f7c3c1da0342ade39593a7f5e494/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea355bc6be34f7c3c1da0342ade39593a7f5e494/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs?ref=ea355bc6be34f7c3c1da0342ade39593a7f5e494", "patch": "@@ -5,6 +5,10 @@\n trait T {\n     fn foo(i32); //~ expected one of `:`, `@`, or `|`, found `)`\n \n+    // Also checks with `&`\n+    fn foo_with_ref(&mut i32);\n+    //~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n+\n     fn bar_with_default_impl(String, String) {}\n     //~^ ERROR expected one of `:`\n     //~| ERROR expected one of `:`"}, {"sha": "0efb7d424e6756de48b8e5f708b6840770d4f05b", "filename": "src/test/ui/anon-params/anon-params-denied-2018.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ea355bc6be34f7c3c1da0342ade39593a7f5e494/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea355bc6be34f7c3c1da0342ade39593a7f5e494/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr?ref=ea355bc6be34f7c3c1da0342ade39593a7f5e494", "patch": "@@ -18,8 +18,28 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn foo(_: i32);\n    |            ^^^^^^\n \n+error: expected one of `:`, `@`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:9:29\n+   |\n+LL |     fn foo_with_ref(&mut i32);\n+   |                             ^ expected one of `:`, `@`, or `|`\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn foo_with_ref(self: &mut i32);\n+   |                     ^^^^^^^^^^^^^^\n+help: if this is a parameter name, give it a type\n+   |\n+LL |     fn foo_with_ref(i32: &mut TypeName);\n+   |                     ^^^^^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_ref(_: &mut i32);\n+   |                     ^^^^^^^^^^^\n+\n error: expected one of `:`, `@`, or `|`, found `,`\n-  --> $DIR/anon-params-denied-2018.rs:8:36\n+  --> $DIR/anon-params-denied-2018.rs:12:36\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                    ^ expected one of `:`, `@`, or `|`\n@@ -39,7 +59,7 @@ LL |     fn bar_with_default_impl(_: String, String) {}\n    |                              ^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `)`\n-  --> $DIR/anon-params-denied-2018.rs:8:44\n+  --> $DIR/anon-params-denied-2018.rs:12:44\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                            ^ expected one of `:`, `@`, or `|`\n@@ -55,7 +75,7 @@ LL |     fn bar_with_default_impl(String, _: String) {}\n    |                                      ^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `,`\n-  --> $DIR/anon-params-denied-2018.rs:13:22\n+  --> $DIR/anon-params-denied-2018.rs:17:22\n    |\n LL |     fn baz(a:usize, b, c: usize) -> usize {\n    |                      ^ expected one of `:`, `@`, or `|`\n@@ -70,5 +90,5 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn baz(a:usize, _: b, c: usize) -> usize {\n    |                     ^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "4ffee657cabbeb64ad5252c647cc2ecf5ac42f50", "filename": "src/test/ui/parser/lifetime-in-pattern.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea355bc6be34f7c3c1da0342ade39593a7f5e494/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea355bc6be34f7c3c1da0342ade39593a7f5e494/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr?ref=ea355bc6be34f7c3c1da0342ade39593a7f5e494", "patch": "@@ -9,6 +9,20 @@ error: expected one of `:`, `@`, or `|`, found `)`\n    |\n LL | fn test(&'a str) {\n    |                ^ expected one of `:`, `@`, or `|`\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn test(self: &str) {\n+   |         ^^^^^^^^^^\n+help: if this is a parameter name, give it a type\n+   |\n+LL | fn test(str: &TypeName) {\n+   |         ^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn test(_: &str) {\n+   |         ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}