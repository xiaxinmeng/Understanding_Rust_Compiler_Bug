{"sha": "bf3bf8c235af8a9f0267782cddfa0ac99f4895bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmM2JmOGMyMzVhZjhhOWYwMjY3NzgyY2RkZmEwYWM5OWY0ODk1YmY=", "commit": {"author": {"name": "rleungx", "email": "rleungx@gmail.com", "date": "2018-03-26T12:45:39Z"}, "committer": {"name": "rleungx", "email": "rleungx@gmail.com", "date": "2018-03-27T16:31:44Z"}, "message": "allow underscore", "tree": {"sha": "17e896d04f201c769041ecfb9a1ed6d8d975adc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e896d04f201c769041ecfb9a1ed6d8d975adc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf", "html_url": "https://github.com/rust-lang/rust/commit/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf/comments", "author": {"login": "rleungx", "id": 35896542, "node_id": "MDQ6VXNlcjM1ODk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/35896542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rleungx", "html_url": "https://github.com/rleungx", "followers_url": "https://api.github.com/users/rleungx/followers", "following_url": "https://api.github.com/users/rleungx/following{/other_user}", "gists_url": "https://api.github.com/users/rleungx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rleungx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rleungx/subscriptions", "organizations_url": "https://api.github.com/users/rleungx/orgs", "repos_url": "https://api.github.com/users/rleungx/repos", "events_url": "https://api.github.com/users/rleungx/events{/privacy}", "received_events_url": "https://api.github.com/users/rleungx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rleungx", "id": 35896542, "node_id": "MDQ6VXNlcjM1ODk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/35896542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rleungx", "html_url": "https://github.com/rleungx", "followers_url": "https://api.github.com/users/rleungx/followers", "following_url": "https://api.github.com/users/rleungx/following{/other_user}", "gists_url": "https://api.github.com/users/rleungx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rleungx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rleungx/subscriptions", "organizations_url": "https://api.github.com/users/rleungx/orgs", "repos_url": "https://api.github.com/users/rleungx/repos", "events_url": "https://api.github.com/users/rleungx/events{/privacy}", "received_events_url": "https://api.github.com/users/rleungx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ecabad044cdbd5d062570f42849f374a7da4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ecabad044cdbd5d062570f42849f374a7da4a8", "html_url": "https://github.com/rust-lang/rust/commit/53ecabad044cdbd5d062570f42849f374a7da4a8"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "bd8b86a49d4c404ad2cbc37a2e99b4e6dd7d5681", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=bf3bf8c235af8a9f0267782cddfa0ac99f4895bf", "patch": "@@ -460,7 +460,7 @@ fn replace_names(input: &str) -> Option<(String, HashMap<String, String>)> {\n         } else if c == '(' && cur_name.is_empty() {\n             // FIXME: Support macro def with repeat.\n             return None;\n-        } else if c.is_alphanumeric() {\n+        } else if c.is_alphanumeric() || c == '_' {\n             cur_name.push(c);\n         }\n     }"}, {"sha": "3f7f5d621c32843810bf2919081013d9b042fe00", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=bf3bf8c235af8a9f0267782cddfa0ac99f4895bf", "patch": "@@ -168,3 +168,23 @@ macro_rules! add_message_to_notes {\n         }\n     }}\n }\n+\n+// #2560\n+macro_rules! binary {\n+    ($_self:ident,$expr:expr, $lhs:expr,$func:ident) => {\n+        while $_self.matched($expr) {\n+            let op = $_self.get_binary_op()?;\n+\n+            let rhs = Box::new($_self.$func()?);\n+\n+           $lhs = Spanned {\n+                span: $lhs.get_span().to(rhs.get_span()),\n+                value: Expression::Binary {\n+                    lhs: Box::new($lhs),\n+                    op,\n+                    rhs,\n+                },\n+            }\n+        }\n+    };\n+}"}, {"sha": "7d527b0c3fdac475b38378174001d597e0bbc511", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3bf8c235af8a9f0267782cddfa0ac99f4895bf/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=bf3bf8c235af8a9f0267782cddfa0ac99f4895bf", "patch": "@@ -200,3 +200,23 @@ macro_rules! add_message_to_notes {\n         }\n     }};\n }\n+\n+// #2560\n+macro_rules! binary {\n+    ($_self:ident, $expr:expr, $lhs:expr, $func:ident) => {\n+        while $_self.matched($expr) {\n+            let op = $_self.get_binary_op()?;\n+\n+            let rhs = Box::new($_self.$func()?);\n+\n+            $lhs = Spanned {\n+                span: $lhs.get_span().to(rhs.get_span()),\n+                value: Expression::Binary {\n+                    lhs: Box::new($lhs),\n+                    op,\n+                    rhs,\n+                },\n+            }\n+        }\n+    };\n+}"}]}