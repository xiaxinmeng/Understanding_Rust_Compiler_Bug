{"sha": "12d50b2da02166582326833efa6ba59e55cd18cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZDUwYjJkYTAyMTY2NTgyMzI2ODMzZWZhNmJhNTllNTVjZDE4Y2Y=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-10T23:25:10Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-11T01:41:54Z"}, "message": "docs: Fixes in Reference Chapter 6.1", "tree": {"sha": "e80bfb0135e9b6083ad2b1b29663341413e87318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80bfb0135e9b6083ad2b1b29663341413e87318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d50b2da02166582326833efa6ba59e55cd18cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d50b2da02166582326833efa6ba59e55cd18cf", "html_url": "https://github.com/rust-lang/rust/commit/12d50b2da02166582326833efa6ba59e55cd18cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d50b2da02166582326833efa6ba59e55cd18cf/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098040f8fc8a0928bec25382066b5318c63e2a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/098040f8fc8a0928bec25382066b5318c63e2a31", "html_url": "https://github.com/rust-lang/rust/commit/098040f8fc8a0928bec25382066b5318c63e2a31"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "0c70f442231a2eb8f42017fc935353fe6655c643", "filename": "src/doc/reference.md", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/12d50b2da02166582326833efa6ba59e55cd18cf/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/12d50b2da02166582326833efa6ba59e55cd18cf/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=12d50b2da02166582326833efa6ba59e55cd18cf", "patch": "@@ -653,9 +653,10 @@ There are several kinds of item:\n * [`use` declarations](#use-declarations)\n * [modules](#modules)\n * [functions](#functions)\n-* [type definitions](#type-definitions)\n+* [type aliases](#type-aliases)\n * [structures](#structures)\n * [enumerations](#enumerations)\n+* [constant items](#constant-items)\n * [static items](#static-items)\n * [traits](#traits)\n * [implementations](#implementations)\n@@ -672,16 +673,16 @@ which sub-item declarations may appear.\n \n ### Type Parameters\n \n-All items except modules may be *parameterized* by type. Type parameters are\n-given as a comma-separated list of identifiers enclosed in angle brackets\n-(`<...>`), after the name of the item and before its definition. The type\n-parameters of an item are considered \"part of the name\", not part of the type\n-of the item. A referencing [path](#paths) must (in principle) provide type\n-arguments as a list of comma-separated types enclosed within angle brackets, in\n-order to refer to the type-parameterized item. In practice, the type-inference\n-system can usually infer such argument types from context. There are no\n-general type-parametric types, only type-parametric items. That is, Rust has\n-no notion of type abstraction: there are no first-class \"forall\" types.\n+All items except modules, constants and statics may be *parameterized* by type.\n+Type parameters are given as a comma-separated list of identifiers enclosed in\n+angle brackets (`<...>`), after the name of the item and before its definition.\n+The type parameters of an item are considered \"part of the name\", not part of\n+the type of the item. A referencing [path](#paths) must (in principle) provide\n+type arguments as a list of comma-separated types enclosed within angle\n+brackets, in order to refer to the type-parameterized item. In practice, the\n+type-inference system can usually infer such argument types from context. There\n+are no general type-parametric types, only type-parametric items. That is, Rust\n+has no notion of type abstraction: there are no first-class \"forall\" types.\n \n ### Modules\n \n@@ -743,7 +744,7 @@ mod thread {\n }\n ```\n \n-##### Extern crate declarations\n+#### Extern crate declarations\n \n An _`extern crate` declaration_ specifies a dependency on an external crate.\n The external crate is then bound into the declaring scope as the `ident`\n@@ -767,7 +768,7 @@ extern crate std; // equivalent to: extern crate std as std;\n extern crate std as ruststd; // linking to 'std' under another name\n ```\n \n-##### Use declarations\n+#### Use declarations\n \n A _use declaration_ creates one or more local name bindings synonymous with\n some other [path](#paths). Usually a `use` declaration is used to shorten the"}]}