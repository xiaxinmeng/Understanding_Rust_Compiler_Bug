{"sha": "4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZTBlYWViNDhhMGI5YWViODQ3Y2U3ZmYyZjI1NWZhMDFjMWE1MGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-14T23:44:11Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-15T04:53:42Z"}, "message": "Rollup merge of #23362 - dotdash:llvm_req, r=alexcrichton\n\n LLVM older that 3.6 has a bug that cause assertions when compiling certain\nconstructs. For 3.5 there's still a chance that the bug might get fixed\nin 3.5.2, so let's keep allowing to compile with it for it for now.", "tree": {"sha": "8de83b7b8eb0591b38f2cde1d36be41c073e573e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8de83b7b8eb0591b38f2cde1d36be41c073e573e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d", "html_url": "https://github.com/rust-lang/rust/commit/4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af2721466018be0fcff43b56730073332eac160", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af2721466018be0fcff43b56730073332eac160", "html_url": "https://github.com/rust-lang/rust/commit/6af2721466018be0fcff43b56730073332eac160"}, {"sha": "bb18a3cfe7554143622af4911028605e89c80104", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb18a3cfe7554143622af4911028605e89c80104", "html_url": "https://github.com/rust-lang/rust/commit/bb18a3cfe7554143622af4911028605e89c80104"}], "stats": {"total": 124, "additions": 14, "deletions": 110}, "files": [{"sha": "760203ae5cf4e275f0c2905f504aa69a0182d56b", "filename": "configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d", "patch": "@@ -823,11 +823,11 @@ then\n     LLVM_VERSION=$($LLVM_CONFIG --version)\n \n     case $LLVM_VERSION in\n-        (3.[2-6]*)\n+        (3.[5-6]*)\n             msg \"found ok version of LLVM: $LLVM_VERSION\"\n             ;;\n         (*)\n-            err \"bad LLVM version: $LLVM_VERSION, need >=3.0svn\"\n+            err \"bad LLVM version: $LLVM_VERSION, need >=3.5\"\n             ;;\n     esac\n fi"}, {"sha": "9a87c03f1c407dfd01262f630486b9b9cf2b2de6", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 12, "deletions": 108, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=4be0eaeb48a0b9aeb847ce7ff2f255fa01c1a50d", "patch": "@@ -14,11 +14,7 @@\n #include \"llvm/IR/DiagnosticInfo.h\"\n #include \"llvm/IR/DiagnosticPrinter.h\"\n \n-#if LLVM_VERSION_MINOR >= 5\n #include \"llvm/IR/CallSite.h\"\n-#else\n-#include \"llvm/Support/CallSite.h\"\n-#endif\n \n //===----------------------------------------------------------------------===\n //\n@@ -33,7 +29,6 @@ using namespace llvm::object;\n \n static char *LastError;\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" LLVMMemoryBufferRef\n LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n   ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(Path,\n@@ -45,18 +40,6 @@ LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n   }\n   return wrap(buf_or.get().release());\n }\n-#else\n-extern \"C\" LLVMMemoryBufferRef\n-LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n-  OwningPtr<MemoryBuffer> buf;\n-  error_code err = MemoryBuffer::getFile(Path, buf, -1, false);\n-  if (err) {\n-      LLVMRustSetLastError(err.message().c_str());\n-      return NULL;\n-  }\n-  return wrap(buf.take());\n-}\n-#endif\n \n extern \"C\" char *LLVMRustGetLastError(void) {\n   char *ret = LastError;\n@@ -116,7 +99,6 @@ extern \"C\" void LLVMAddCallSiteAttribute(LLVMValueRef Instr, unsigned index, uin\n }\n \n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void LLVMAddDereferenceableCallSiteAttr(LLVMValueRef Instr, unsigned idx, uint64_t b) {\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   AttrBuilder B;\n@@ -126,9 +108,6 @@ extern \"C\" void LLVMAddDereferenceableCallSiteAttr(LLVMValueRef Instr, unsigned\n                                        AttributeSet::get(Call->getContext(),\n                                                          idx, B)));\n }\n-#else\n-extern \"C\" void LLVMAddDereferenceableCallSiteAttr(LLVMValueRef, unsigned, uint64_t) {}\n-#endif\n \n extern \"C\" void LLVMAddFunctionAttribute(LLVMValueRef Fn, unsigned index, uint64_t Val) {\n   Function *A = unwrap<Function>(Fn);\n@@ -137,16 +116,12 @@ extern \"C\" void LLVMAddFunctionAttribute(LLVMValueRef Fn, unsigned index, uint64\n   A->addAttributes(index, AttributeSet::get(A->getContext(), index, B));\n }\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void LLVMAddDereferenceableAttr(LLVMValueRef Fn, unsigned index, uint64_t bytes) {\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addDereferenceableAttr(bytes);\n   A->addAttributes(index, AttributeSet::get(A->getContext(), index, B));\n }\n-#else\n-extern \"C\" void LLVMAddDereferenceableAttr(LLVMValueRef, unsigned, uint64_t) {}\n-#endif\n \n extern \"C\" void LLVMAddFunctionAttrString(LLVMValueRef Fn, unsigned index, const char *Name) {\n   Function *F = unwrap<Function>(Fn);\n@@ -199,10 +174,8 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n                                                AtomicOrdering order,\n                                                AtomicOrdering failure_order) {\n     return wrap(unwrap(B)->CreateAtomicCmpXchg(unwrap(target), unwrap(old),\n-                                               unwrap(source), order\n-#if LLVM_VERSION_MINOR >= 5\n-                                               , failure_order\n-#endif\n+                                               unwrap(source), order,\n+                                               failure_order\n                                                ));\n }\n extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B, AtomicOrdering order) {\n@@ -247,11 +220,7 @@ DIT unwrapDI(LLVMMetadataRef ref) {\n     return DIT(ref ? unwrap<MDNode>(ref) : NULL);\n }\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" const uint32_t LLVMRustDebugMetadataVersion = DEBUG_METADATA_VERSION;\n-#else\n-extern \"C\" const uint32_t LLVMRustDebugMetadataVersion = 1;\n-#endif\n \n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M,\n                                       const char *name,\n@@ -383,10 +352,8 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStructType(\n         unwrapDI<DIType>(DerivedFrom),\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang,\n-        unwrapDI<DIType>(VTableHolder)\n-#if LLVM_VERSION_MINOR >= 4\n-        ,UniqueId\n-#endif\n+        unwrapDI<DIType>(VTableHolder),\n+        UniqueId\n         ));\n }\n \n@@ -465,8 +432,8 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVariable(\n #if LLVM_VERSION_MINOR < 6\n     if (AddrOpsCount > 0) {\n         SmallVector<llvm::Value *, 16> addr_ops;\n-        llvm::Type *Int64Ty = Type::getInt64Ty(VMContext);\n-        for (int i = 0; i < AddrOpsCount; ++i)\n+        llvm::Type *Int64Ty = Type::getInt64Ty(unwrap<MDNode>(Scope)->getContext());\n+        for (unsigned i = 0; i < AddrOpsCount; ++i)\n             addr_ops.push_back(ConstantInt::get(Int64Ty, AddrOps[i]));\n \n         return wrap(Builder->createComplexVariable(\n@@ -522,7 +489,11 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderGetOrCreateArray(\n     LLVMMetadataRef* Ptr,\n     unsigned Count) {\n     return wrap(Builder->getOrCreateArray(\n+#if LLVM_VERSION_MINOR >= 6\n         ArrayRef<Metadata*>(unwrap(Ptr), Count)));\n+#else\n+        ArrayRef<Value*>(reinterpret_cast<Value**>(Ptr), Count)));\n+#endif\n }\n \n extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(\n@@ -627,19 +598,11 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateUnionType(\n         AlignInBits,\n         Flags,\n         unwrapDI<DIArray>(Elements),\n-        RunTimeLang\n-#if LLVM_VERSION_MINOR >= 4\n-        ,UniqueId\n-#endif\n+        RunTimeLang,\n+        UniqueId\n         ));\n }\n \n-#if LLVM_VERSION_MINOR < 5\n-extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n-    unwrap<GlobalValue>(Value)->setUnnamedAddr(Unnamed);\n-}\n-#endif\n-\n extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateTemplateTypeParameter(\n     DIBuilderRef Builder,\n     LLVMMetadataRef Scope,\n@@ -730,7 +693,6 @@ extern \"C\" void LLVMWriteValueToString(LLVMValueRef Value, RustStringRef str) {\n     os << \")\";\n }\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" bool\n LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     Module *Dst = unwrap(dst);\n@@ -763,28 +725,7 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     }\n     return true;\n }\n-#else\n-extern \"C\" bool\n-LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n-    Module *Dst = unwrap(dst);\n-    MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n-    std::string Err;\n-    Module *Src = llvm::getLazyBitcodeModule(buf, Dst->getContext(), &Err);\n-    if (!Src) {\n-        LLVMRustSetLastError(Err.c_str());\n-        delete buf;\n-        return false;\n-    }\n-\n-    if (Linker::LinkModules(Dst, Src, Linker::DestroySource, &Err)) {\n-        LLVMRustSetLastError(Err.c_str());\n-        return false;\n-    }\n-    return true;\n-}\n-#endif\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void*\n LLVMRustOpenArchive(char *path) {\n     ErrorOr<std::unique_ptr<MemoryBuffer>> buf_or = MemoryBuffer::getFile(path,\n@@ -817,23 +758,6 @@ LLVMRustOpenArchive(char *path) {\n \n     return ret;\n }\n-#else\n-extern \"C\" void*\n-LLVMRustOpenArchive(char *path) {\n-    OwningPtr<MemoryBuffer> buf;\n-    error_code err = MemoryBuffer::getFile(path, buf, -1, false);\n-    if (err) {\n-        LLVMRustSetLastError(err.message().c_str());\n-        return NULL;\n-    }\n-    Archive *ret = new Archive(buf.take(), err);\n-    if (err) {\n-        LLVMRustSetLastError(err.message().c_str());\n-        return NULL;\n-    }\n-    return ret;\n-}\n-#endif\n \n extern \"C\" const char*\n #if LLVM_VERSION_MINOR >= 6\n@@ -844,21 +768,12 @@ LLVMRustArchiveReadSection(OwningBinary<Archive> *ob, char *name, size_t *size)\n LLVMRustArchiveReadSection(Archive *ar, char *name, size_t *size) {\n #endif\n \n-#if LLVM_VERSION_MINOR >= 5\n     Archive::child_iterator child = ar->child_begin(),\n                               end = ar->child_end();\n     for (; child != end; ++child) {\n         ErrorOr<StringRef> name_or_err = child->getName();\n         if (name_or_err.getError()) continue;\n         StringRef sect_name = name_or_err.get();\n-#else\n-    Archive::child_iterator child = ar->begin_children(),\n-                              end = ar->end_children();\n-    for (; child != end; ++child) {\n-        StringRef sect_name;\n-        error_code err = child->getName(sect_name);\n-        if (err) continue;\n-#endif\n         if (sect_name.trim(\" \") == name) {\n             StringRef buf = child->getBuffer();\n             *size = buf.size();\n@@ -877,18 +792,11 @@ LLVMRustDestroyArchive(Archive *ar) {\n     delete ar;\n }\n \n-#if LLVM_VERSION_MINOR >= 5\n extern \"C\" void\n LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n     GlobalValue *V = unwrap<GlobalValue>(Value);\n     V->setDLLStorageClass(GlobalValue::DLLExportStorageClass);\n }\n-#else\n-extern \"C\" void\n-LLVMRustSetDLLExportStorageClass(LLVMValueRef Value) {\n-    LLVMSetLinkage(Value, LLVMDLLExportLinkage);\n-}\n-#endif\n \n extern \"C\" int\n LLVMVersionMinor() {\n@@ -918,11 +826,7 @@ inline section_iterator *unwrap(LLVMSectionIteratorRef SI) {\n extern \"C\" int\n LLVMRustGetSectionName(LLVMSectionIteratorRef SI, const char **ptr) {\n     StringRef ret;\n-#if LLVM_VERSION_MINOR >= 5\n     if (std::error_code ec = (*unwrap(SI))->getName(ret))\n-#else\n-    if (error_code ec = (*unwrap(SI))->getName(ret))\n-#endif\n       report_fatal_error(ec.message());\n     *ptr = ret.data();\n     return ret.size();"}]}