{"sha": "57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzVkYThmMWMxZDM2ZGEzYjY5ZTk4YTc1ZWQ1NGVmYjRiNDUzMjk=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-14T07:53:23Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-08-08T10:38:46Z"}, "message": "Gate to if-let guard feature", "tree": {"sha": "5cd29b1eb94f0a16d3eacc04cbb45892f24471e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd29b1eb94f0a16d3eacc04cbb45892f24471e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "html_url": "https://github.com/rust-lang/rust/commit/57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19d7e27552b8da17932384b8db53927a1f4e00e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19d7e27552b8da17932384b8db53927a1f4e00e", "html_url": "https://github.com/rust-lang/rust/commit/d19d7e27552b8da17932384b8db53927a1f4e00e"}], "stats": {"total": 470, "additions": 440, "deletions": 30}, "files": [{"sha": "95257f29a87813694e01d4209c86abe0d03a73c5", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "patch": "@@ -612,11 +612,14 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     let spans = sess.parse_sess.gated_spans.spans.borrow();\n     macro_rules! gate_all {\n         ($gate:ident, $msg:literal) => {\n-            for span in spans.get(&sym::$gate).unwrap_or(&vec![]) {\n-                gate_feature_post!(&visitor, $gate, *span, $msg);\n+            if let Some(spans) = spans.get(&sym::$gate) {\n+                for span in spans {\n+                    gate_feature_post!(&visitor, $gate, *span, $msg);\n+                }\n             }\n         };\n     }\n+    gate_all!(if_let_guard, \"`if let` guard is not implemented\");\n     gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n     gate_all!(async_closure, \"async closures are unstable\");\n     gate_all!(generators, \"yield syntax is experimental\");"}, {"sha": "ced25961177e4fe78f6dfd4727c190f92c883799", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "patch": "@@ -582,6 +582,9 @@ declare_features! (\n     /// The smallest useful subset of `const_generics`.\n     (active, min_const_generics, \"1.46.0\", Some(74878), None),\n \n+    /// Allows `if let` guard in match arms.\n+    (active, if_let_guard, \"1.47.0\", Some(51114), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -591,6 +594,7 @@ declare_features! (\n /// unanticipated results, such as compiler crashes. We warn the user about these\n /// to alert them.\n pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n+    sym::if_let_guard,\n     sym::impl_trait_in_bindings,\n     sym::generic_associated_types,\n     sym::const_generics,"}, {"sha": "564b017aab828f8c2e263596b16a153b1bfa732c", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "patch": "@@ -1821,7 +1821,19 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n         let pat = self.parse_top_pat(GateOr::No)?;\n-        let guard = if self.eat_keyword(kw::If) { Some(self.parse_expr()?) } else { None };\n+        let guard = if self.eat_keyword(kw::If) {\n+            let if_span = self.prev_token.span;\n+            let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+            if let ExprKind::Let(..) = cond.kind {\n+                // Remove the last feature gating of a `let` expression since it's stable.\n+                self.sess.gated_spans.ungate_last(sym::let_chains, cond.span);\n+                let span = if_span.to(cond.span);\n+                self.sess.gated_spans.gate(sym::if_let_guard, span);\n+            }\n+            Some(cond)\n+        } else {\n+            None\n+        };\n         let arrow_span = self.token.span;\n         self.expect(&token::FatArrow)?;\n         let arm_start_span = self.token.span;"}, {"sha": "026f051f002a28da96724641f241904862490cd2", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "patch": "@@ -572,6 +572,7 @@ symbols! {\n         i8,\n         ident,\n         if_let,\n+        if_let_guard,\n         if_while_or_patterns,\n         ignore,\n         impl_header_lifetime_elision,"}, {"sha": "5392f87388c537ef6402d4ffbb5225517b1dd5d7", "filename": "src/test/ui/parser/issue-15980.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.rs?ref=57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "patch": "@@ -4,14 +4,9 @@ fn main(){\n     let x: io::Result<()> = Ok(());\n     match x {\n         Err(ref e) if e.kind == io::EndOfFile {\n-            //~^ NOTE while parsing this struct\n+        //~^ ERROR expected one of `!`, `.`, `::`, `=>`, `?`, or an operator, found `{`\n             return\n-            //~^ ERROR expected identifier, found keyword `return`\n-            //~| NOTE expected identifier, found keyword\n         }\n-        //~^ NOTE expected one of `.`, `=>`, `?`, or an operator\n         _ => {}\n-        //~^ ERROR expected one of `.`, `=>`, `?`, or an operator, found reserved identifier `_`\n-        //~| NOTE unexpected token\n     }\n }"}, {"sha": "3f6f015fd27dbb2f531dcd538e9d8e7e9d840e46", "filename": "src/test/ui/parser/issue-15980.stderr", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr?ref=57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "patch": "@@ -1,25 +1,8 @@\n-error: expected identifier, found keyword `return`\n-  --> $DIR/issue-15980.rs:8:13\n+error: expected one of `!`, `.`, `::`, `=>`, `?`, or an operator, found `{`\n+  --> $DIR/issue-15980.rs:6:47\n    |\n LL |         Err(ref e) if e.kind == io::EndOfFile {\n-   |                                 ------------- while parsing this struct\n-LL |\n-LL |             return\n-   |             ^^^^^^ expected identifier, found keyword\n-   |\n-help: you can escape reserved keywords to use them as identifiers\n-   |\n-LL |             r#return\n-   |\n-\n-error: expected one of `.`, `=>`, `?`, or an operator, found reserved identifier `_`\n-  --> $DIR/issue-15980.rs:13:9\n-   |\n-LL |         }\n-   |          - expected one of `.`, `=>`, `?`, or an operator\n-LL |\n-LL |         _ => {}\n-   |         ^ unexpected token\n+   |                                               ^ expected one of `!`, `.`, `::`, `=>`, `?`, or an operator\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "c0a9bbc36b24b34c9bcde48b8fa194398e23fa08", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "patch": "@@ -0,0 +1,85 @@\n+// gate-test-if_let_guard\n+\n+use std::ops::Range;\n+\n+fn _if_let_guard() {\n+    match () {\n+        () if let 0 = 1 => {}\n+        //~^ ERROR `if let` guard is not implemented\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if (let 0 = 1) => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if (((let 0 = 1))) => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if true && let 0 = 1 => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if let 0 = 1 && true => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if (let 0 = 1) && true => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if true && (let 0 = 1) => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if (let 0 = 1) && (let 0 = 1) => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+        //~| ERROR `let` expressions are not supported here\n+        //~| ERROR `let` expressions are not supported here\n+        //~| ERROR `let` expressions are not supported here\n+        //~| ERROR `let` expressions are not supported here\n+\n+        () if let Range { start: _, end: _ } = (true..true) && false => {}\n+        //~^ ERROR `let` expressions in this position are experimental\n+        //~| ERROR `let` expressions are not supported here\n+        _ => {}\n+    }\n+}\n+\n+fn _macros() {\n+    macro_rules! use_expr {\n+        ($e:expr) => {\n+            match () {\n+                () if $e => {}\n+                _ => {}\n+            }\n+        }\n+    }\n+    use_expr!((let 0 = 1 && 0 == 0));\n+    //~^ ERROR `let` expressions in this position are experimental\n+    //~| ERROR `let` expressions are not supported here\n+    use_expr!((let 0 = 1));\n+    //~^ ERROR `let` expressions in this position are experimental\n+    //~| ERROR `let` expressions are not supported here\n+    match () {\n+        #[cfg(FALSE)]\n+        () if let 0 = 1 => {}\n+        //~^ ERROR `if let` guard is not implemented\n+        _ => {}\n+    }\n+    use_expr!(let 0 = 1);\n+    //~^ ERROR no rules expected the token `let`\n+}\n+\n+fn main() {}"}, {"sha": "5c7f8190dd6ece334f0dcd631b2b4994b38122cf", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "added", "additions": 327, "deletions": 0, "changes": 327, "blob_url": "https://github.com/rust-lang/rust/blob/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57c5da8f1c1d36da3b69e98a75ed54efb4b45329/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=57c5da8f1c1d36da3b69e98a75ed54efb4b45329", "patch": "@@ -0,0 +1,327 @@\n+error: no rules expected the token `let`\n+  --> $DIR/feature-gate.rs:81:15\n+   |\n+LL |     macro_rules! use_expr {\n+   |     --------------------- when calling this macro\n+...\n+LL |     use_expr!(let 0 = 1);\n+   |               ^^^ no rules expected this token in macro call\n+\n+error[E0658]: `if let` guard is not implemented\n+  --> $DIR/feature-gate.rs:7:12\n+   |\n+LL |         () if let 0 = 1 => {}\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: see issue #51114 <https://github.com/rust-lang/rust/issues/51114> for more information\n+   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n+\n+error[E0658]: `if let` guard is not implemented\n+  --> $DIR/feature-gate.rs:77:12\n+   |\n+LL |         () if let 0 = 1 => {}\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: see issue #51114 <https://github.com/rust-lang/rust/issues/51114> for more information\n+   = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:11:16\n+   |\n+LL |         () if (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:15:18\n+   |\n+LL |         () if (((let 0 = 1))) => {}\n+   |                  ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:19:23\n+   |\n+LL |         () if true && let 0 = 1 => {}\n+   |                       ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:23:15\n+   |\n+LL |         () if let 0 = 1 && true => {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:27:16\n+   |\n+LL |         () if (let 0 = 1) && true => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:31:24\n+   |\n+LL |         () if true && (let 0 = 1) => {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:35:16\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:35:31\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                               ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:41:15\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:41:28\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                            ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:41:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:41:55\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                       ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:41:68\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                                    ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:53:15\n+   |\n+LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:69:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are experimental\n+  --> $DIR/feature-gate.rs:72:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:7:15\n+   |\n+LL |         () if let 0 = 1 => {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:11:16\n+   |\n+LL |         () if (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:15:18\n+   |\n+LL |         () if (((let 0 = 1))) => {}\n+   |                  ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:19:23\n+   |\n+LL |         () if true && let 0 = 1 => {}\n+   |                       ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:23:15\n+   |\n+LL |         () if let 0 = 1 && true => {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:27:16\n+   |\n+LL |         () if (let 0 = 1) && true => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:31:24\n+   |\n+LL |         () if true && (let 0 = 1) => {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:35:16\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:35:31\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                               ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:41:15\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:41:28\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                            ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:41:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:41:55\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                       ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:41:68\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                                    ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:53:15\n+   |\n+LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:69:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/feature-gate.rs:72:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if`- and `while`-expressions\n+   = note: as well as when nested within `&&` and parenthesis in those conditions\n+\n+error: aborting due to 36 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}