{"sha": "5f5ef052b15391edf47922d8b798a2558a63764b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNWVmMDUyYjE1MzkxZWRmNDc5MjJkOGI3OThhMjU1OGE2Mzc2NGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-14T22:32:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-14T22:32:31Z"}, "message": "Rollup merge of #77753 - GuillaumeGomez:check-html-comments, r=jyn514\n\nCheck html comments\n\nPart of #67799.\n\ncc @ollie27\nr? @jyn514", "tree": {"sha": "e11b446bf564dd450ce421d99b8601f966f3f38d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e11b446bf564dd450ce421d99b8601f966f3f38d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f5ef052b15391edf47922d8b798a2558a63764b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfh3x/CRBK7hj4Ov3rIwAAdHIIAGSZx3mnwG8/Iwc0nOWWGP6l\n6IUlNC0KoAq2ZxPIM69gg8jEhcE0zgzcDvmLU7J06FHoy49d4NF6CMGW3ylB7Vp+\ncWu8nFWIrbn2M0OQLsFV55oawd5/RbtZX1G3MXqcXgvJaYjaMRblV76NsOV5FZ/d\n4QssEkGdoFP0leQaf+v72SyNGtWzTF01VGL40u13V64AL246WH+jV3Yrl9Dy7eO7\nTG/cd65ZEL5O7QkcFkzD60QegjvJZsOA0vmMC7POaSkc7ItiA1txqIUkU0dztwgY\nCNq6uiKuhpDqMKdtfQdjcCPobBxZ1/eovq7kuvDmLlphYpu6dL3PnNb4n/Jw8Dw=\n=ZVRe\n-----END PGP SIGNATURE-----\n", "payload": "tree e11b446bf564dd450ce421d99b8601f966f3f38d\nparent 022d20759baa6ebc9dcbe803aec1f19216c47d7f\nparent dd3be7823722503df0496b606f258e14e04e9607\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602714751 +0900\ncommitter GitHub <noreply@github.com> 1602714751 +0900\n\nRollup merge of #77753 - GuillaumeGomez:check-html-comments, r=jyn514\n\nCheck html comments\n\nPart of #67799.\n\ncc @ollie27\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ef052b15391edf47922d8b798a2558a63764b", "html_url": "https://github.com/rust-lang/rust/commit/5f5ef052b15391edf47922d8b798a2558a63764b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ef052b15391edf47922d8b798a2558a63764b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022d20759baa6ebc9dcbe803aec1f19216c47d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/022d20759baa6ebc9dcbe803aec1f19216c47d7f", "html_url": "https://github.com/rust-lang/rust/commit/022d20759baa6ebc9dcbe803aec1f19216c47d7f"}, {"sha": "dd3be7823722503df0496b606f258e14e04e9607", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3be7823722503df0496b606f258e14e04e9607", "html_url": "https://github.com/rust-lang/rust/commit/dd3be7823722503df0496b606f258e14e04e9607"}], "stats": {"total": 164, "additions": 110, "deletions": 54}, "files": [{"sha": "1d9be619ec91af2e110fec0fa1ab632ff06fb2a2", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 89, "deletions": 53, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/5f5ef052b15391edf47922d8b798a2558a63764b/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5ef052b15391edf47922d8b798a2558a63764b/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=5f5ef052b15391edf47922d8b798a2558a63764b", "patch": "@@ -7,6 +7,8 @@ use core::ops::Range;\n use pulldown_cmark::{Event, Parser};\n use rustc_feature::UnstableFeatures;\n use rustc_session::lint;\n+use std::iter::Peekable;\n+use std::str::CharIndices;\n \n pub const CHECK_INVALID_HTML_TAGS: Pass = Pass {\n     name: \"check-invalid-html-tags\",\n@@ -75,70 +77,97 @@ fn drop_tag(\n     }\n }\n \n-fn extract_tag(\n+fn extract_html_tag(\n     tags: &mut Vec<(String, Range<usize>)>,\n     text: &str,\n-    range: Range<usize>,\n+    range: &Range<usize>,\n+    start_pos: usize,\n+    iter: &mut Peekable<CharIndices<'_>>,\n     f: &impl Fn(&str, &Range<usize>),\n ) {\n-    let mut iter = text.char_indices().peekable();\n+    let mut tag_name = String::new();\n+    let mut is_closing = false;\n+    let mut prev_pos = start_pos;\n \n-    while let Some((start_pos, c)) = iter.next() {\n-        if c == '<' {\n-            let mut tag_name = String::new();\n-            let mut is_closing = false;\n-            let mut prev_pos = start_pos;\n-            loop {\n-                let (pos, c) = match iter.peek() {\n-                    Some((pos, c)) => (*pos, *c),\n-                    // In case we reached the of the doc comment, we want to check that it's an\n-                    // unclosed HTML tag. For example \"/// <h3\".\n-                    None => (prev_pos, '\\0'),\n-                };\n-                prev_pos = pos;\n-                // Checking if this is a closing tag (like `</a>` for `<a>`).\n-                if c == '/' && tag_name.is_empty() {\n-                    is_closing = true;\n-                } else if c.is_ascii_alphanumeric() {\n-                    tag_name.push(c);\n-                } else {\n-                    if !tag_name.is_empty() {\n-                        let mut r =\n-                            Range { start: range.start + start_pos, end: range.start + pos };\n-                        if c == '>' {\n-                            // In case we have a tag without attribute, we can consider the span to\n-                            // refer to it fully.\n-                            r.end += 1;\n+    loop {\n+        let (pos, c) = match iter.peek() {\n+            Some((pos, c)) => (*pos, *c),\n+            // In case we reached the of the doc comment, we want to check that it's an\n+            // unclosed HTML tag. For example \"/// <h3\".\n+            None => (prev_pos, '\\0'),\n+        };\n+        prev_pos = pos;\n+        // Checking if this is a closing tag (like `</a>` for `<a>`).\n+        if c == '/' && tag_name.is_empty() {\n+            is_closing = true;\n+        } else if c.is_ascii_alphanumeric() {\n+            tag_name.push(c);\n+        } else {\n+            if !tag_name.is_empty() {\n+                let mut r = Range { start: range.start + start_pos, end: range.start + pos };\n+                if c == '>' {\n+                    // In case we have a tag without attribute, we can consider the span to\n+                    // refer to it fully.\n+                    r.end += 1;\n+                }\n+                if is_closing {\n+                    // In case we have \"</div >\" or even \"</div         >\".\n+                    if c != '>' {\n+                        if !c.is_whitespace() {\n+                            // It seems like it's not a valid HTML tag.\n+                            break;\n                         }\n-                        if is_closing {\n-                            // In case we have \"</div >\" or even \"</div         >\".\n-                            if c != '>' {\n-                                if !c.is_whitespace() {\n-                                    // It seems like it's not a valid HTML tag.\n-                                    break;\n-                                }\n-                                let mut found = false;\n-                                for (new_pos, c) in text[pos..].char_indices() {\n-                                    if !c.is_whitespace() {\n-                                        if c == '>' {\n-                                            r.end = range.start + new_pos + 1;\n-                                            found = true;\n-                                        }\n-                                        break;\n-                                    }\n-                                }\n-                                if !found {\n-                                    break;\n+                        let mut found = false;\n+                        for (new_pos, c) in text[pos..].char_indices() {\n+                            if !c.is_whitespace() {\n+                                if c == '>' {\n+                                    r.end = range.start + new_pos + 1;\n+                                    found = true;\n                                 }\n+                                break;\n                             }\n-                            drop_tag(tags, tag_name, r, f);\n-                        } else {\n-                            tags.push((tag_name, r));\n+                        }\n+                        if !found {\n+                            break;\n                         }\n                     }\n-                    break;\n+                    drop_tag(tags, tag_name, r, f);\n+                } else {\n+                    tags.push((tag_name, r));\n                 }\n+            }\n+            break;\n+        }\n+        iter.next();\n+    }\n+}\n+\n+fn extract_tags(\n+    tags: &mut Vec<(String, Range<usize>)>,\n+    text: &str,\n+    range: Range<usize>,\n+    is_in_comment: &mut Option<Range<usize>>,\n+    f: &impl Fn(&str, &Range<usize>),\n+) {\n+    let mut iter = text.char_indices().peekable();\n+\n+    while let Some((start_pos, c)) = iter.next() {\n+        if is_in_comment.is_some() {\n+            if text[start_pos..].starts_with(\"-->\") {\n+                *is_in_comment = None;\n+            }\n+        } else if c == '<' {\n+            if text[start_pos..].starts_with(\"<!--\") {\n+                // We skip the \"!--\" part. (Once `advance_by` is stable, might be nice to use it!)\n+                iter.next();\n                 iter.next();\n+                iter.next();\n+                *is_in_comment = Some(Range {\n+                    start: range.start + start_pos,\n+                    end: range.start + start_pos + 3,\n+                });\n+            } else {\n+                extract_html_tag(tags, text, &range, start_pos, &mut iter, f);\n             }\n         }\n     }\n@@ -167,12 +196,15 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n             };\n \n             let mut tags = Vec::new();\n+            let mut is_in_comment = None;\n \n             let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n \n             for (event, range) in p {\n                 match event {\n-                    Event::Html(text) => extract_tag(&mut tags, &text, range, &report_diag),\n+                    Event::Html(text) | Event::Text(text) => {\n+                        extract_tags(&mut tags, &text, range, &mut is_in_comment, &report_diag)\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -183,6 +215,10 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n             }) {\n                 report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range);\n             }\n+\n+            if let Some(range) = is_in_comment {\n+                report_diag(\"Unclosed HTML comment\", &range);\n+            }\n         }\n \n         self.fold_item_recur(item)"}, {"sha": "56ca7e79d435838c0bd655b5386e5fb54650bb79", "filename": "src/test/rustdoc-ui/invalid-html-tags.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f5ef052b15391edf47922d8b798a2558a63764b/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5ef052b15391edf47922d8b798a2558a63764b/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs?ref=5f5ef052b15391edf47922d8b798a2558a63764b", "patch": "@@ -73,3 +73,17 @@ pub fn e() {}\n /// <div></div\n //~^ ERROR unclosed HTML tag `div`\n pub fn f() {}\n+\n+/// <!---->\n+/// <!-- -->\n+/// <!-- <div> -->\n+/// <!-- <!-- -->\n+pub fn g() {}\n+\n+/// <!--\n+/// -->\n+pub fn h() {}\n+\n+/// <!--\n+//~^ ERROR Unclosed HTML comment\n+pub fn i() {}"}, {"sha": "aa9ace006bd1ad8dfb6bc1e76ef686687c34f6bd", "filename": "src/test/rustdoc-ui/invalid-html-tags.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f5ef052b15391edf47922d8b798a2558a63764b/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f5ef052b15391edf47922d8b798a2558a63764b/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr?ref=5f5ef052b15391edf47922d8b798a2558a63764b", "patch": "@@ -76,5 +76,11 @@ error: unclosed HTML tag `div`\n LL | /// <div></div\n    |     ^^^^^\n \n-error: aborting due to 12 previous errors\n+error: Unclosed HTML comment\n+  --> $DIR/invalid-html-tags.rs:87:5\n+   |\n+LL | /// <!--\n+   |     ^^^\n+\n+error: aborting due to 13 previous errors\n "}]}