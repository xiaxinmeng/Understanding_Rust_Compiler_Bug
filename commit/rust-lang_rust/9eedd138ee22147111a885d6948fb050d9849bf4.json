{"sha": "9eedd138ee22147111a885d6948fb050d9849bf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZWRkMTM4ZWUyMjE0NzExMWE4ODVkNjk0OGZiMDUwZDk4NDliZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T01:43:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T01:43:40Z"}, "message": "Auto merge of #71487 - rcoh:71471-shebang, r=petrochenkov\n\nFix bug in shebang handling\n\nShebang handling was too agressive in stripping out the first line in cases where it is actually _not_ a shebang, but instead, valid rust (#70528). This is a second attempt at resolving this issue (the first attempt was reverted, for, among other reasons, causing an ICE in certain cases (#71372, #71471).\n\nThe behavior is now codified by a number of UI tests, but simply:\nFor the first line to be a shebang, the following must all be true:\n1. The line must start with `#!`\n2. The line must contain a non-whitespace character after `#!`\n3. The next character in the file, ignoring comments & whitespace must not be `[`\n\nI believe this is a strict superset of what we used to allow, so perhaps a crater run is unnecessary, but probably not a terrible idea.\n\nFixes #70528", "tree": {"sha": "632e765c1e9e7cfa86312316324e318c9eddad9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632e765c1e9e7cfa86312316324e318c9eddad9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eedd138ee22147111a885d6948fb050d9849bf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eedd138ee22147111a885d6948fb050d9849bf4", "html_url": "https://github.com/rust-lang/rust/commit/9eedd138ee22147111a885d6948fb050d9849bf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eedd138ee22147111a885d6948fb050d9849bf4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698c5c6d95218735afebdada8a518ab66e0e9213", "url": "https://api.github.com/repos/rust-lang/rust/commits/698c5c6d95218735afebdada8a518ab66e0e9213", "html_url": "https://github.com/rust-lang/rust/commit/698c5c6d95218735afebdada8a518ab66e0e9213"}, {"sha": "a93d31603f80e16a185cda3377c328ae85273325", "url": "https://api.github.com/repos/rust-lang/rust/commits/a93d31603f80e16a185cda3377c328ae85273325", "html_url": "https://github.com/rust-lang/rust/commit/a93d31603f80e16a185cda3377c328ae85273325"}], "stats": {"total": 161, "additions": 154, "deletions": 7}, "files": [{"sha": "fe6785de009a19e28c4aec838aaa115fc6087914", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -236,16 +236,28 @@ pub enum Base {\n }\n \n /// `rustc` allows files to have a shebang, e.g. \"#!/usr/bin/rustrun\",\n-/// but shebang isn't a part of rust syntax, so this function\n-/// skips the line if it starts with a shebang (\"#!\").\n-/// Line won't be skipped if it represents a valid Rust syntax\n-/// (e.g. \"#![deny(missing_docs)]\").\n+/// but shebang isn't a part of rust syntax.\n pub fn strip_shebang(input: &str) -> Option<usize> {\n-    debug_assert!(!input.is_empty());\n-    if !input.starts_with(\"#!\") || input.starts_with(\"#![\") {\n+    let first_line = input.lines().next()?;\n+    // A shebang is intentionally loosely defined as `#! [non whitespace]` on the first line.\n+    let could_be_shebang =\n+        first_line.starts_with(\"#!\") && first_line[2..].contains(|c| !is_whitespace(c));\n+    if !could_be_shebang {\n         return None;\n     }\n-    Some(input.find('\\n').unwrap_or(input.len()))\n+    let non_whitespace_tokens = tokenize(input).map(|tok| tok.kind).filter(|tok|\n+        !matches!(tok, TokenKind::LineComment | TokenKind::BlockComment { .. } | TokenKind::Whitespace)\n+    );\n+    let prefix = [TokenKind::Pound, TokenKind::Not, TokenKind::OpenBracket];\n+    let starts_with_attribute = non_whitespace_tokens.take(3).eq(prefix.iter().copied());\n+    if starts_with_attribute {\n+        // If the file starts with #![ then it's definitely not a shebang -- it couldn't be\n+        // a rust program since a Rust program can't start with `[`\n+        None\n+    } else {\n+        // It's a #!... and there isn't a `[` in sight, must be a shebang\n+        Some(first_line.len())\n+    }\n }\n \n /// Parses the first token from the provided input string."}, {"sha": "725799374fc64c3989c6846b389440407c9ab4f8", "filename": "src/librustc_lexer/src/tests.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -145,4 +145,61 @@ mod tests {\n             }),\n         );\n     }\n+\n+    #[test]\n+    fn test_valid_shebang() {\n+        // https://github.com/rust-lang/rust/issues/70528\n+        let input = \"#!/usr/bin/rustrun\\nlet x = 5;\";\n+        assert_eq!(strip_shebang(input), Some(18));\n+    }\n+\n+    #[test]\n+    fn test_invalid_shebang_valid_rust_syntax() {\n+        // https://github.com/rust-lang/rust/issues/70528\n+        let input = \"#!    [bad_attribute]\";\n+        assert_eq!(strip_shebang(input), None);\n+    }\n+\n+    #[test]\n+    fn test_shebang_second_line() {\n+        // Because shebangs are interpreted by the kernel, they must be on the first line\n+        let input = \"\\n#!/bin/bash\";\n+        assert_eq!(strip_shebang(input), None);\n+    }\n+\n+    #[test]\n+    fn test_shebang_space() {\n+        let input = \"#!    /bin/bash\";\n+        assert_eq!(strip_shebang(input), Some(input.len()));\n+    }\n+\n+    #[test]\n+    fn test_shebang_empty_shebang() {\n+        let input = \"#!    \\n[attribute(foo)]\";\n+        assert_eq!(strip_shebang(input), None);\n+    }\n+\n+    #[test]\n+    fn test_invalid_shebang_comment() {\n+        let input = \"#!//bin/ami/a/comment\\n[\";\n+        assert_eq!(strip_shebang(input), None)\n+    }\n+\n+    #[test]\n+    fn test_invalid_shebang_another_comment() {\n+        let input = \"#!/*bin/ami/a/comment*/\\n[attribute\";\n+        assert_eq!(strip_shebang(input), None)\n+    }\n+\n+    #[test]\n+    fn test_shebang_valid_rust_after() {\n+        let input = \"#!/*bin/ami/a/comment*/\\npub fn main() {}\";\n+        assert_eq!(strip_shebang(input), Some(23))\n+    }\n+\n+    #[test]\n+    fn test_shebang_followed_by_attrib() {\n+        let input = \"#!/bin/rust-scripts\\n#![allow_unused(true)]\";\n+        assert_eq!(strip_shebang(input), Some(19));\n+    }\n }"}, {"sha": "a2505180884aa32b549612ad6adfd423ca0ab544", "filename": "src/test/ui/parser/shebang/issue-71471-ignore-tidy.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fissue-71471-ignore-tidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fissue-71471-ignore-tidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fissue-71471-ignore-tidy.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,2 @@\n+\n+#!B //~ expected `[`, found `B`"}, {"sha": "896a9dc83d8b9c70eabfd6be51bc1b0a51f4a155", "filename": "src/test/ui/parser/shebang/issue-71471-ignore-tidy.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fissue-71471-ignore-tidy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fissue-71471-ignore-tidy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fissue-71471-ignore-tidy.stderr?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,8 @@\n+error: expected `[`, found `B`\n+  --> $DIR/issue-71471-ignore-tidy.rs:2:3\n+   |\n+LL | #!B\n+   |   ^ expected `[`\n+\n+error: aborting due to previous error\n+"}, {"sha": "931c94c7fba03830322a1d34152384a33c47d31d", "filename": "src/test/ui/parser/shebang/multiline-attrib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fmultiline-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fmultiline-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fmultiline-attrib.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,7 @@\n+#!\n+[allow(unused_variables)]\n+// check-pass\n+\n+fn main() {\n+    let x = 5;\n+}"}, {"sha": "ca8fb0830ffb142e8b102e6b88c26674383116d4", "filename": "src/test/ui/parser/shebang/regular-attrib.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fregular-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fregular-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fregular-attrib.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,5 @@\n+#![allow(unused_variables)]\n+// check-pass\n+fn main() {\n+    let x = 5;\n+}"}, {"sha": "61b89c655a3fc71b8db95f91c78800fdc3e30c44", "filename": "src/test/ui/parser/shebang/shebang-and-attrib.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-and-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-and-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-and-attrib.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,9 @@\n+#!/usr/bin/env run-cargo-script\n+\n+// check-pass\n+#![allow(unused_variables)]\n+\n+\n+fn main() {\n+    let x = 5;\n+}"}, {"sha": "2b1ab0c574d26e9e3f5b2384ffaaccfc9edf6912", "filename": "src/test/ui/parser/shebang/shebang-comment.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-comment.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,6 @@\n+#!//bin/bash\n+\n+// check-pass\n+fn main() {\n+    println!(\"a valid shebang (that is also a rust comment)\")\n+}"}, {"sha": "e0392572dc81d9134173abfb10692228b5a620e0", "filename": "src/test/ui/parser/shebang/shebang-must-start-file.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-must-start-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-must-start-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-must-start-file.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,6 @@\n+// something on the first line for tidy\n+#!/bin/bash  //~ expected `[`, found `/`\n+\n+fn main() {\n+    println!(\"ok!\");\n+}"}, {"sha": "50543e8bdb816727a1d423d1cc1b5cbc64ecb63d", "filename": "src/test/ui/parser/shebang/shebang-must-start-file.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-must-start-file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-must-start-file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fshebang-must-start-file.stderr?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,8 @@\n+error: expected `[`, found `/`\n+  --> $DIR/shebang-must-start-file.rs:2:3\n+   |\n+LL | #!/bin/bash\n+   |   ^ expected `[`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b406cc3aa13c7f887f839d24c8769b78d451c2dd", "filename": "src/test/ui/parser/shebang/sneaky-attrib.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fsneaky-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fsneaky-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fsneaky-attrib.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,16 @@\n+#!//bin/bash\n+\n+\n+// This could not possibly be a shebang & also a valid rust file, since a Rust file\n+// can't start with `[`\n+/*\n+    [ (mixing comments to also test that we ignore both types of comments)\n+\n+ */\n+\n+[allow(unused_variables)]\n+\n+// check-pass\n+fn main() {\n+    let x = 5;\n+}"}, {"sha": "e480d3da3fc8db41a92d3703f28f46c600173a3d", "filename": "src/test/ui/parser/shebang/valid-shebang.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fvalid-shebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fvalid-shebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fshebang%2Fvalid-shebang.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -0,0 +1,6 @@\n+#!/usr/bin/env run-cargo-script\n+\n+// check-pass\n+fn main() {\n+    println!(\"Hello World!\");\n+}"}, {"sha": "396d6c0cfcdeff81e0235650780c7b418df721d5", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eedd138ee22147111a885d6948fb050d9849bf4/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=9eedd138ee22147111a885d6948fb050d9849bf4", "patch": "@@ -174,6 +174,11 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n         let can_contain =\n             contents.contains(\"// ignore-tidy-\") || contents.contains(\"# ignore-tidy-\");\n+        // Enable testing ICE's that require specific (untidy)\n+        // file formats easily eg. `issue-1234-ignore-tidy.rs`\n+        if filename.contains(\"ignore-tidy\") {\n+            return;\n+        }\n         let mut skip_cr = contains_ignore_directive(can_contain, &contents, \"cr\");\n         let mut skip_undocumented_unsafe =\n             contains_ignore_directive(can_contain, &contents, \"undocumented-unsafe\");"}]}