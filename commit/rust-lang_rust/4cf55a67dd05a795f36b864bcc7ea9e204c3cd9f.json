{"sha": "4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZjU1YTY3ZGQwNWE3OTVmMzZiODY0YmNjN2VhOWUyMDRjM2NkOWY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-13T02:05:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-13T02:05:44Z"}, "message": "Rollup merge of #75457 - Mark-Simulacrum:llvm-clean, r=cuviper\n\nRemove some dead variants in LLVM FFI\n\nr? @nikic or @cuviper", "tree": {"sha": "84102e4c04a7f629d023816ffa90fb02a6a66b40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84102e4c04a7f629d023816ffa90fb02a6a66b40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNJ/4CRBK7hj4Ov3rIwAAdHIIAAmaudgrYouxFDKuVMAYt23f\n3d1m9WGRqDdGlVnLj9mjK7wLNrbGSYVRkURSPwP8Xy4/YySRhCFU1Nt/m781Jasm\ndh1wZs9gM8Fg5QqDnk1CtToenJ6VEddjDO52PcM4Czm8Nzje1Nr4HF4QB1+eY2Iu\nYuj4udi2QRe9cvDna8hx444xyrT/DbNz/adCun7MWlV+P2Ew4YyAvF8x84h1sGim\nUbSK33e6qmH86/dj45+zPpGU72kGPrqXuPj14XfIbFZ2nAd+Wo9qqFLExkQVvIEk\ntorQKk76WifvSYPovoJgswW1lg9MaK0QLsNdGzqzU7o6JJpF/9a7HyFZtwZHpgY=\n=hmQY\n-----END PGP SIGNATURE-----\n", "payload": "tree 84102e4c04a7f629d023816ffa90fb02a6a66b40\nparent 9ea03ddd0b189fda850ae646057349c49f4ce7e4\nparent 486c48b570fd6235c8f8ce8820b54ea25b3510a9\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597284344 +0900\ncommitter GitHub <noreply@github.com> 1597284344 +0900\n\nRollup merge of #75457 - Mark-Simulacrum:llvm-clean, r=cuviper\n\nRemove some dead variants in LLVM FFI\n\nr? @nikic or @cuviper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "html_url": "https://github.com/rust-lang/rust/commit/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea03ddd0b189fda850ae646057349c49f4ce7e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea03ddd0b189fda850ae646057349c49f4ce7e4", "html_url": "https://github.com/rust-lang/rust/commit/9ea03ddd0b189fda850ae646057349c49f4ce7e4"}, {"sha": "486c48b570fd6235c8f8ce8820b54ea25b3510a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/486c48b570fd6235c8f8ce8820b54ea25b3510a9", "html_url": "https://github.com/rust-lang/rust/commit/486c48b570fd6235c8f8ce8820b54ea25b3510a9"}], "stats": {"total": 25, "additions": 0, "deletions": 25}, "files": [{"sha": "1a5794d1133660a574c083af83c211ea1ab46b14", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "patch": "@@ -975,7 +975,6 @@ pub unsafe fn with_llvm_pmb(\n         (llvm::CodeGenOptLevel::Default, ..) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n         }\n-        (llvm::CodeGenOptLevel::Other, ..) => bug!(\"CodeGenOptLevel::Other selected\"),\n     }\n \n     f(builder);"}, {"sha": "f094ad868947fa32242c0a699ca98d73f31b7231", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "patch": "@@ -337,17 +337,13 @@ impl AtomicOrdering {\n #[derive(Copy, Clone)]\n #[repr(C)]\n pub enum SynchronizationScope {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n     SingleThread,\n     CrossThread,\n }\n \n impl SynchronizationScope {\n     pub fn from_generic(sc: rustc_codegen_ssa::common::SynchronizationScope) -> Self {\n         match sc {\n-            rustc_codegen_ssa::common::SynchronizationScope::Other => SynchronizationScope::Other,\n             rustc_codegen_ssa::common::SynchronizationScope::SingleThread => {\n                 SynchronizationScope::SingleThread\n             }\n@@ -362,9 +358,6 @@ impl SynchronizationScope {\n #[derive(Copy, Clone)]\n #[repr(C)]\n pub enum FileType {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n     AssemblyFile,\n     ObjectFile,\n }\n@@ -391,9 +384,6 @@ pub enum MetadataType {\n #[derive(Copy, Clone)]\n #[repr(C)]\n pub enum AsmDialect {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n     Att,\n     Intel,\n }\n@@ -411,9 +401,6 @@ impl AsmDialect {\n #[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum CodeGenOptLevel {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n     None,\n     Less,\n     Default,\n@@ -513,9 +500,6 @@ pub enum DiagnosticLevel {\n #[derive(Copy, Clone)]\n #[repr(C)]\n pub enum ArchiveKind {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n     K_GNU,\n     K_BSD,\n     K_DARWIN,"}, {"sha": "e04ed531bbff282912f14f7ad59116103d77be4c", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "patch": "@@ -72,9 +72,6 @@ pub enum AtomicOrdering {\n }\n \n pub enum SynchronizationScope {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n     SingleThread,\n     CrossThread,\n }"}, {"sha": "9ce614fda575248063ae8d636921c102fd067754", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "patch": "@@ -35,7 +35,6 @@ struct RustArchiveIterator {\n };\n \n enum class LLVMRustArchiveKind {\n-  Other,\n   GNU,\n   BSD,\n   DARWIN,"}, {"sha": "76fe5e7f769f77066b59e23e47021b1937623531", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "patch": "@@ -311,7 +311,6 @@ static Optional<CodeModel::Model> fromRust(LLVMRustCodeModel Model) {\n }\n \n enum class LLVMRustCodeGenOptLevel {\n-  Other,\n   None,\n   Less,\n   Default,\n@@ -597,7 +596,6 @@ extern \"C\" void LLVMRustSetLLVMOptions(int Argc, char **Argv) {\n }\n \n enum class LLVMRustFileType {\n-  Other,\n   AssemblyFile,\n   ObjectFile,\n };"}, {"sha": "9d90b0dfe07024235a511e5fd77b0c47aa78e53e", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=4cf55a67dd05a795f36b864bcc7ea9e204c3cd9f", "patch": "@@ -366,7 +366,6 @@ LLVMRustBuildAtomicCmpXchg(LLVMBuilderRef B, LLVMValueRef Target,\n }\n \n enum class LLVMRustSynchronizationScope {\n-  Other,\n   SingleThread,\n   CrossThread,\n };\n@@ -389,7 +388,6 @@ LLVMRustBuildAtomicFence(LLVMBuilderRef B, LLVMAtomicOrdering Order,\n }\n \n enum class LLVMRustAsmDialect {\n-  Other,\n   Att,\n   Intel,\n };"}]}