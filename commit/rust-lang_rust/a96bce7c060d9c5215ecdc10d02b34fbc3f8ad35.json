{"sha": "a96bce7c060d9c5215ecdc10d02b34fbc3f8ad35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NmJjZTdjMDYwZDljNTIxNWVjZGMxMGQwMmIzNGZiYzNmOGFkMzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-10-02T19:07:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-10-02T19:07:38Z"}, "message": "avoid using `skip_binder` and instead look for bound vars properly", "tree": {"sha": "f1fa0a809f085f759a9b47949644bab53a255428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1fa0a809f085f759a9b47949644bab53a255428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96bce7c060d9c5215ecdc10d02b34fbc3f8ad35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96bce7c060d9c5215ecdc10d02b34fbc3f8ad35", "html_url": "https://github.com/rust-lang/rust/commit/a96bce7c060d9c5215ecdc10d02b34fbc3f8ad35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96bce7c060d9c5215ecdc10d02b34fbc3f8ad35/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f277e1a66f0e8de9cc46c9a886b4ad0f4582944", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f277e1a66f0e8de9cc46c9a886b4ad0f4582944", "html_url": "https://github.com/rust-lang/rust/commit/3f277e1a66f0e8de9cc46c9a886b4ad0f4582944"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "162555cd3ce4ca62841b21b285488e5708db3858", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a96bce7c060d9c5215ecdc10d02b34fbc3f8ad35/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96bce7c060d9c5215ecdc10d02b34fbc3f8ad35/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=a96bce7c060d9c5215ecdc10d02b34fbc3f8ad35", "patch": "@@ -698,39 +698,52 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Given a projection like\n     ///\n-    /// `<_ as Future>::Output = T`\n+    /// `<X as Future>::Output = T`\n     ///\n-    /// returns `Some(T)`. If the projection is for some other trait,\n-    /// returns `None`.\n+    /// where `X` is some type that has no late-bound regions, returns\n+    /// `Some(T)`. If the projection is for some other trait, returns\n+    /// `None`.\n     fn deduce_future_output_from_projection(\n         &self,\n         cause_span: Span,\n-        projection: &ty::PolyProjectionPredicate<'tcx>,\n+        predicate: &ty::PolyProjectionPredicate<'tcx>,\n     ) -> Option<Ty<'tcx>> {\n-        debug!(\"deduce_future_output_from_projection(projection={:?})\", projection);\n+        debug!(\"deduce_future_output_from_projection(predicate={:?})\", predicate);\n+\n+        // We do not expect any bound regions in our predicate, so\n+        // skip past the bound vars.\n+        let predicate = match predicate.no_bound_vars() {\n+            Some(p) => p,\n+            None => {\n+                debug!(\"deduce_future_output_from_projection: has late-bound regions\");\n+                return None;\n+            }\n+        };\n \n-        let trait_ref = projection.to_poly_trait_ref(self.tcx);\n+        // Check that this is a projection from the `Future` trait.\n+        let trait_ref = predicate.projection_ty.trait_ref(self.tcx);\n         let future_trait = self.tcx.lang_items().future_trait().unwrap();\n-        if trait_ref.def_id() != future_trait {\n+        if trait_ref.def_id != future_trait {\n             debug!(\"deduce_future_output_from_projection: not a future\");\n             return None;\n         }\n \n         // The `Future` trait has only one associted item, `Output`,\n         // so check that this is what we see.\n         let output_assoc_item = self.tcx.associated_items(future_trait).nth(0).unwrap().def_id;\n-        if output_assoc_item != projection.projection_def_id() {\n+        if output_assoc_item != predicate.projection_ty.item_def_id {\n             span_bug!(\n                 cause_span,\n                 \"projecting associated item `{:?}` from future, which is not Output `{:?}`\",\n-                projection.projection_def_id(),\n+                predicate.projection_ty.item_def_id,\n                 output_assoc_item,\n             );\n         }\n \n-        // Extract the type from the projection.\n-        let output_ty = projection.skip_binder().ty;\n-        let output_ty = self.resolve_vars_if_possible(&output_ty);\n+        // Extract the type from the projection. Note that there can\n+        // be no bound variables in this type because the \"self type\"\n+        // does not have any regions in it.\n+        let output_ty = self.resolve_vars_if_possible(&predicate.ty);\n         debug!(\"deduce_future_output_from_projection: output_ty={:?}\", output_ty);\n         Some(output_ty)\n     }"}]}