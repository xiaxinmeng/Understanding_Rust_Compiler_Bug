{"sha": "47f4975cd751a03c941431b35cd7a6cba6201730", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZjQ5NzVjZDc1MWEwM2M5NDE0MzFiMzVjZDdhNmNiYTYyMDE3MzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-05T15:40:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-05T15:40:16Z"}, "message": "Auto merge of #61498 - TankhouseAle:const-fn-type-name, r=oli-obk\n\nAdd \"type_name\" support in emulate_intrinsic()\n\nI did some dumb Git things and deleted my original fork repo semi-accidentally (but probably for the best as I'd messed up the history.)\n\nThis is the same issue as #61399, which was obviously auto-closed, to be clear.", "tree": {"sha": "df56f193447992e2bead44504d520afc368f4303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df56f193447992e2bead44504d520afc368f4303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f4975cd751a03c941431b35cd7a6cba6201730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f4975cd751a03c941431b35cd7a6cba6201730", "html_url": "https://github.com/rust-lang/rust/commit/47f4975cd751a03c941431b35cd7a6cba6201730", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f4975cd751a03c941431b35cd7a6cba6201730/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1d6c83d3158861ee028b26c531e5e2c7c68140", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1d6c83d3158861ee028b26c531e5e2c7c68140", "html_url": "https://github.com/rust-lang/rust/commit/2a1d6c83d3158861ee028b26c531e5e2c7c68140"}, {"sha": "70aeb2233fb43a4bb87795e97ea55032ce1164be", "url": "https://api.github.com/repos/rust-lang/rust/commits/70aeb2233fb43a4bb87795e97ea55032ce1164be", "html_url": "https://github.com/rust-lang/rust/commit/70aeb2233fb43a4bb87795e97ea55032ce1164be"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "4de2bd48eeb7eb8c5766b2a3a948203476c033c9", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47f4975cd751a03c941431b35cd7a6cba6201730/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f4975cd751a03c941431b35cd7a6cba6201730/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=47f4975cd751a03c941431b35cd7a6cba6201730", "patch": "@@ -11,7 +11,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    Machine, PlaceTy, OpTy, InterpretCx,\n+    Machine, PlaceTy, OpTy, InterpretCx, Immediate,\n };\n \n mod type_name;\n@@ -78,6 +78,16 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 let id_val = Scalar::from_uint(type_id, dest.layout.size);\n                 self.write_scalar(id_val, dest)?;\n             }\n+\n+            \"type_name\" => {\n+                let alloc = alloc_type_name(self.tcx.tcx, substs.type_at(0));\n+                let name_id = self.tcx.alloc_map.lock().create_memory_alloc(alloc);\n+                let id_ptr = self.memory.tag_static_base_pointer(name_id.into());\n+                let alloc_len = alloc.bytes.len() as u64;\n+                let name_val = Immediate::new_slice(Scalar::Ptr(id_ptr), alloc_len, self);\n+                self.write_immediate(name_val, dest)?;\n+            }\n+\n             | \"ctpop\"\n             | \"cttz\"\n             | \"cttz_nonzero\""}, {"sha": "1270b35ebb9555a97a36a4c328740a25f892d863", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/47f4975cd751a03c941431b35cd7a6cba6201730/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f4975cd751a03c941431b35cd7a6cba6201730/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=47f4975cd751a03c941431b35cd7a6cba6201730", "patch": "@@ -213,16 +213,23 @@ impl Write for AbsolutePathPrinter<'_, '_> {\n /// Produces an absolute path representation of the given type. See also the documentation on\n /// `std::any::type_name`\n pub fn type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n-    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n-    let len = path.len();\n-    let alloc = Allocation::from_byte_aligned_bytes(path.into_bytes());\n-    let alloc = tcx.intern_const_alloc(alloc);\n+    let alloc = alloc_type_name(tcx, ty);\n     tcx.mk_const(ty::Const {\n         val: ConstValue::Slice {\n             data: alloc,\n             start: 0,\n-            end: len,\n+            end: alloc.bytes.len(),\n         },\n         ty: tcx.mk_static_str(),\n     })\n }\n+\n+/// Directly returns an `Allocation` containing an absolute path representation of the given type.\n+pub(super) fn alloc_type_name<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    ty: Ty<'tcx>\n+) -> &'tcx Allocation {\n+    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n+    let alloc = Allocation::from_byte_aligned_bytes(path.into_bytes());\n+    tcx.intern_const_alloc(alloc)\n+}"}, {"sha": "2ee6415aa68b75e042bff1be0ce2c40b823e438a", "filename": "src/test/run-pass/ctfe/const-fn-type-name.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/47f4975cd751a03c941431b35cd7a6cba6201730/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f4975cd751a03c941431b35cd7a6cba6201730/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-type-name.rs?ref=47f4975cd751a03c941431b35cd7a6cba6201730", "patch": "@@ -0,0 +1,37 @@\n+// run-pass\n+\n+#![feature(core_intrinsics)]\n+#![feature(const_fn)]\n+#![allow(dead_code)]\n+\n+const fn type_name_wrapper<T>(_: &T) -> &'static str {\n+    unsafe { core::intrinsics::type_name::<T>() }\n+}\n+\n+struct Struct<TA, TB, TC> {\n+    a: TA,\n+    b: TB,\n+    c: TC,\n+}\n+\n+type StructInstantiation = Struct<i8, f64, bool>;\n+\n+const CONST_STRUCT: StructInstantiation = StructInstantiation {\n+    a: 12,\n+    b: 13.7,\n+    c: false,\n+};\n+\n+const CONST_STRUCT_NAME: &'static str = type_name_wrapper(&CONST_STRUCT);\n+\n+fn main() {\n+    let non_const_struct = StructInstantiation {\n+        a: 87,\n+        b: 65.99,\n+        c: true,\n+    };\n+\n+    let non_const_struct_name = type_name_wrapper(&non_const_struct);\n+\n+    assert_eq!(CONST_STRUCT_NAME, non_const_struct_name);\n+}"}]}