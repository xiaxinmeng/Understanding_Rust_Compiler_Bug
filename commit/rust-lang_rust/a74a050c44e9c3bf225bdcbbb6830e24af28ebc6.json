{"sha": "a74a050c44e9c3bf225bdcbbb6830e24af28ebc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NGEwNTBjNDRlOWMzYmYyMjViZGNiYmI2ODMwZTI0YWYyOGViYzY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-18T22:26:54Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-20T05:28:47Z"}, "message": "rustc: middle: move some types from resolve to privacy.", "tree": {"sha": "1937ecfe4a1e8cd7324d0a8fb2f07c6558d50638", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1937ecfe4a1e8cd7324d0a8fb2f07c6558d50638"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6", "html_url": "https://github.com/rust-lang/rust/commit/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d1257a760ada3f3336392d5a6b116cdedccc477", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1257a760ada3f3336392d5a6b116cdedccc477", "html_url": "https://github.com/rust-lang/rust/commit/5d1257a760ada3f3336392d5a6b116cdedccc477"}], "stats": {"total": 139, "additions": 70, "deletions": 69}, "files": [{"sha": "8c566dd288ef87b5394a4b9f3a9cb9d670453253", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 69, "deletions": 23, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=a74a050c44e9c3bf225bdcbbb6830e24af28ebc6", "patch": "@@ -11,17 +11,20 @@\n //! A pass that checks to make sure private fields and methods aren't used\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n+pub use self::PrivateDep::*;\n+pub use self::ImportUse::*;\n+pub use self::LastPrivate::*;\n use self::PrivacyResult::*;\n use self::FieldName::*;\n \n use std::mem::replace;\n \n use metadata::csearch;\n-use middle::{def, resolve};\n+use middle::def;\n use middle::ty::{mod, Ty};\n use middle::ty::{MethodCall, MethodMap, MethodOrigin, MethodParam, MethodTypeParam};\n use middle::ty::{MethodStatic, MethodStaticUnboxedClosure, MethodObject, MethodTraitObject};\n-use util::nodemap::{NodeMap, NodeSet};\n+use util::nodemap::{DefIdSet, NodeMap, NodeSet};\n \n use syntax::{ast, ast_map};\n use syntax::ast_util::{is_local, local_def, PostExpansionMethod};\n@@ -34,11 +37,54 @@ type Context<'a, 'tcx> = (&'a MethodMap<'tcx>, &'a def::ExportMap);\n /// A set of AST nodes exported by the crate.\n pub type ExportedItems = NodeSet;\n \n+/// A set containing all exported definitions from external crates.\n+/// The set does not contain any entries from local crates.\n+pub type ExternalExports = DefIdSet;\n+\n /// A set of AST nodes that are fully public in the crate. This map is used for\n /// documentation purposes (reexporting a private struct inlines the doc,\n /// reexporting a public struct doesn't inline the doc).\n pub type PublicItems = NodeSet;\n \n+// FIXME: dox\n+pub type LastPrivateMap = NodeMap<LastPrivate>;\n+\n+#[deriving(Copy, Show)]\n+pub enum LastPrivate {\n+    LastMod(PrivateDep),\n+    // `use` directives (imports) can refer to two separate definitions in the\n+    // type and value namespaces. We record here the last private node for each\n+    // and whether the import is in fact used for each.\n+    // If the Option<PrivateDep> fields are None, it means there is no definition\n+    // in that namespace.\n+    LastImport{value_priv: Option<PrivateDep>,\n+               value_used: ImportUse,\n+               type_priv: Option<PrivateDep>,\n+               type_used: ImportUse},\n+}\n+\n+#[deriving(Copy, Show)]\n+pub enum PrivateDep {\n+    AllPublic,\n+    DependsOn(ast::DefId),\n+}\n+\n+// How an import is used.\n+#[deriving(Copy, PartialEq, Show)]\n+pub enum ImportUse {\n+    Unused,       // The import is not used.\n+    Used,         // The import is used.\n+}\n+\n+impl LastPrivate {\n+    pub fn or(self, other: LastPrivate) -> LastPrivate {\n+        match (self, other) {\n+            (me, LastMod(AllPublic)) => me,\n+            (_, other) => other,\n+        }\n+    }\n+}\n+\n /// Result of a checking operation - None => no errors were found. Some => an\n /// error and contains the span and message for reporting that error and\n /// optionally the same for a note about the error.\n@@ -362,8 +408,8 @@ struct PrivacyVisitor<'a, 'tcx: 'a> {\n     curitem: ast::NodeId,\n     in_foreign: bool,\n     parents: NodeMap<ast::NodeId>,\n-    external_exports: resolve::ExternalExports,\n-    last_private_map: resolve::LastPrivateMap,\n+    external_exports: ExternalExports,\n+    last_private_map: LastPrivateMap,\n }\n \n enum PrivacyResult {\n@@ -719,25 +765,25 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             };\n \n             match self.last_private_map[path_id] {\n-                resolve::LastMod(resolve::AllPublic) => {},\n-                resolve::LastMod(resolve::DependsOn(def)) => {\n+                LastMod(AllPublic) => {},\n+                LastMod(DependsOn(def)) => {\n                     self.report_error(ck_public(def));\n                 },\n-                resolve::LastImport{value_priv,\n-                                    value_used: check_value,\n-                                    type_priv,\n-                                    type_used: check_type} => {\n+                LastImport { value_priv,\n+                             value_used: check_value,\n+                             type_priv,\n+                             type_used: check_type } => {\n                     // This dance with found_error is because we don't want to report\n                     // a privacy error twice for the same directive.\n                     let found_error = match (type_priv, check_type) {\n-                        (Some(resolve::DependsOn(def)), resolve::Used) => {\n+                        (Some(DependsOn(def)), Used) => {\n                             !self.report_error(ck_public(def))\n                         },\n                         _ => false,\n                     };\n                     if !found_error {\n                         match (value_priv, check_value) {\n-                            (Some(resolve::DependsOn(def)), resolve::Used) => {\n+                            (Some(DependsOn(def)), Used) => {\n                                 self.report_error(ck_public(def));\n                             },\n                             _ => {},\n@@ -749,24 +795,24 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                     // be illegal. We only report one error, even if it is\n                     // illegal to import from both namespaces.\n                     match (value_priv, check_value, type_priv, check_type) {\n-                        (Some(p), resolve::Unused, None, _) |\n-                        (None, _, Some(p), resolve::Unused) => {\n+                        (Some(p), Unused, None, _) |\n+                        (None, _, Some(p), Unused) => {\n                             let p = match p {\n-                                resolve::AllPublic => None,\n-                                resolve::DependsOn(def) => ck_public(def),\n+                                AllPublic => None,\n+                                DependsOn(def) => ck_public(def),\n                             };\n                             if p.is_some() {\n                                 self.report_error(p);\n                             }\n                         },\n-                        (Some(v), resolve::Unused, Some(t), resolve::Unused) => {\n+                        (Some(v), Unused, Some(t), Unused) => {\n                             let v = match v {\n-                                resolve::AllPublic => None,\n-                                resolve::DependsOn(def) => ck_public(def),\n+                                AllPublic => None,\n+                                DependsOn(def) => ck_public(def),\n                             };\n                             let t = match t {\n-                                resolve::AllPublic => None,\n-                                resolve::DependsOn(def) => ck_public(def),\n+                                AllPublic => None,\n+                                DependsOn(def) => ck_public(def),\n                             };\n                             if let (Some(_), Some(t)) = (v, t) {\n                                 self.report_error(Some(t));\n@@ -1521,8 +1567,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n pub fn check_crate(tcx: &ty::ctxt,\n                    export_map: &def::ExportMap,\n-                   external_exports: resolve::ExternalExports,\n-                   last_private_map: resolve::LastPrivateMap)\n+                   external_exports: ExternalExports,\n+                   last_private_map: LastPrivateMap)\n                    -> (ExportedItems, PublicItems) {\n     let krate = tcx.map.krate();\n "}, {"sha": "323ea26879b19dacaf9cdd89c5b4f906a30a2ff9", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74a050c44e9c3bf225bdcbbb6830e24af28ebc6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=a74a050c44e9c3bf225bdcbbb6830e24af28ebc6", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::PrivateDep::*;\n-pub use self::ImportUse::*;\n-pub use self::LastPrivate::*;\n use self::PatternBindingMode::*;\n use self::Namespace::*;\n use self::NamespaceError::*;\n@@ -40,6 +37,7 @@ use metadata::decoder::{DefLike, DlDef, DlField, DlImpl};\n use middle::def::*;\n use middle::lang_items::LanguageItems;\n use middle::pat_util::pat_bindings;\n+use middle::privacy::*;\n use middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use middle::ty::{CaptureModeMap, Freevar, FreevarMap, TraitMap};\n use util::nodemap::{NodeMap, NodeSet, DefIdSet, FnvHashMap};\n@@ -91,49 +89,6 @@ struct BindingInfo {\n // Map from the name in a pattern to its binding mode.\n type BindingMap = HashMap<Name, BindingInfo>;\n \n-// This set contains all exported definitions from external crates. The set does\n-// not contain any entries from local crates.\n-pub type ExternalExports = DefIdSet;\n-\n-// FIXME: dox\n-pub type LastPrivateMap = NodeMap<LastPrivate>;\n-\n-#[deriving(Copy, Show)]\n-pub enum LastPrivate {\n-    LastMod(PrivateDep),\n-    // `use` directives (imports) can refer to two separate definitions in the\n-    // type and value namespaces. We record here the last private node for each\n-    // and whether the import is in fact used for each.\n-    // If the Option<PrivateDep> fields are None, it means there is no definition\n-    // in that namespace.\n-    LastImport{value_priv: Option<PrivateDep>,\n-               value_used: ImportUse,\n-               type_priv: Option<PrivateDep>,\n-               type_used: ImportUse},\n-}\n-\n-#[deriving(Copy, Show)]\n-pub enum PrivateDep {\n-    AllPublic,\n-    DependsOn(DefId),\n-}\n-\n-// How an import is used.\n-#[deriving(Copy, PartialEq, Show)]\n-pub enum ImportUse {\n-    Unused,       // The import is not used.\n-    Used,         // The import is used.\n-}\n-\n-impl LastPrivate {\n-    fn or(self, other: LastPrivate) -> LastPrivate {\n-        match (self, other) {\n-            (me, LastMod(AllPublic)) => me,\n-            (_, other) => other,\n-        }\n-    }\n-}\n-\n #[deriving(Copy, PartialEq)]\n enum PatternBindingMode {\n     RefutableMode,"}]}