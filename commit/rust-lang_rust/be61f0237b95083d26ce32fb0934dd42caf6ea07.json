{"sha": "be61f0237b95083d26ce32fb0934dd42caf6ea07", "node_id": "C_kwDOAAsO6NoAKGJlNjFmMDIzN2I5NTA4M2QyNmNlMzJmYjA5MzRkZDQyY2FmNmVhMDc", "commit": {"author": {"name": "Byron Zhong", "email": "byronzhong@cs.uchicago.edu", "date": "2022-10-25T06:14:39Z"}, "committer": {"name": "Byron Zhong", "email": "byronzhong@cs.uchicago.edu", "date": "2022-10-26T03:08:41Z"}, "message": "Add Span in TypoSuggestion and TypoCandidate", "tree": {"sha": "febdcd22c4d78e62263bf2af6c4ba54e19d41f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/febdcd22c4d78e62263bf2af6c4ba54e19d41f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be61f0237b95083d26ce32fb0934dd42caf6ea07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be61f0237b95083d26ce32fb0934dd42caf6ea07", "html_url": "https://github.com/rust-lang/rust/commit/be61f0237b95083d26ce32fb0934dd42caf6ea07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be61f0237b95083d26ce32fb0934dd42caf6ea07/comments", "author": {"login": "zbyrn", "id": 34432561, "node_id": "MDQ6VXNlcjM0NDMyNTYx", "avatar_url": "https://avatars.githubusercontent.com/u/34432561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbyrn", "html_url": "https://github.com/zbyrn", "followers_url": "https://api.github.com/users/zbyrn/followers", "following_url": "https://api.github.com/users/zbyrn/following{/other_user}", "gists_url": "https://api.github.com/users/zbyrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbyrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbyrn/subscriptions", "organizations_url": "https://api.github.com/users/zbyrn/orgs", "repos_url": "https://api.github.com/users/zbyrn/repos", "events_url": "https://api.github.com/users/zbyrn/events{/privacy}", "received_events_url": "https://api.github.com/users/zbyrn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zbyrn", "id": 34432561, "node_id": "MDQ6VXNlcjM0NDMyNTYx", "avatar_url": "https://avatars.githubusercontent.com/u/34432561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbyrn", "html_url": "https://github.com/zbyrn", "followers_url": "https://api.github.com/users/zbyrn/followers", "following_url": "https://api.github.com/users/zbyrn/following{/other_user}", "gists_url": "https://api.github.com/users/zbyrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbyrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbyrn/subscriptions", "organizations_url": "https://api.github.com/users/zbyrn/orgs", "repos_url": "https://api.github.com/users/zbyrn/repos", "events_url": "https://api.github.com/users/zbyrn/events{/privacy}", "received_events_url": "https://api.github.com/users/zbyrn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6365e5ad9fa9e2ec867a67aeeae414e7c62d8354", "url": "https://api.github.com/repos/rust-lang/rust/commits/6365e5ad9fa9e2ec867a67aeeae414e7c62d8354", "html_url": "https://github.com/rust-lang/rust/commit/6365e5ad9fa9e2ec867a67aeeae414e7c62d8354"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "5029c33996329eb00fbfa6c888a1828413619405", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/be61f0237b95083d26ce32fb0934dd42caf6ea07/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be61f0237b95083d26ce32fb0934dd42caf6ea07/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=be61f0237b95083d26ce32fb0934dd42caf6ea07", "patch": "@@ -58,16 +58,32 @@ pub(crate) enum SuggestionTarget {\n #[derive(Debug)]\n pub(crate) struct TypoSuggestion {\n     pub candidate: Symbol,\n+    /// The source location where the name is defined; None if the name is not defined\n+    /// in source e.g. primitives\n+    pub span: Option<Span>,\n     pub res: Res,\n     pub target: SuggestionTarget,\n }\n \n impl TypoSuggestion {\n-    pub(crate) fn typo_from_res(candidate: Symbol, res: Res) -> TypoSuggestion {\n-        Self { candidate, res, target: SuggestionTarget::SimilarlyNamed }\n+    pub(crate) fn typo_from_ident(ident: Ident, res: Res) -> TypoSuggestion {\n+        Self {\n+            candidate: ident.name,\n+            span: Some(ident.span),\n+            res,\n+            target: SuggestionTarget::SimilarlyNamed,\n+        }\n+    }\n+    pub(crate) fn typo_from_name(candidate: Symbol, res: Res) -> TypoSuggestion {\n+        Self { candidate, span: None, res, target: SuggestionTarget::SimilarlyNamed }\n     }\n-    pub(crate) fn single_item_from_res(candidate: Symbol, res: Res) -> TypoSuggestion {\n-        Self { candidate, res, target: SuggestionTarget::SingleItem }\n+    pub(crate) fn single_item_from_ident(ident: Ident, res: Res) -> TypoSuggestion {\n+        Self {\n+            candidate: ident.name,\n+            span: Some(ident.span),\n+            res,\n+            target: SuggestionTarget::SingleItem,\n+        }\n     }\n }\n \n@@ -490,7 +506,7 @@ impl<'a> Resolver<'a> {\n             if let Some(binding) = resolution.borrow().binding {\n                 let res = binding.res();\n                 if filter_fn(res) && ctxt.map_or(true, |ctxt| ctxt == key.ident.span.ctxt()) {\n-                    names.push(TypoSuggestion::typo_from_res(key.ident.name, res));\n+                    names.push(TypoSuggestion::typo_from_ident(key.ident, res));\n                 }\n             }\n         }\n@@ -1145,7 +1161,7 @@ impl<'a> Resolver<'a> {\n                                 .get(&expn_id)\n                                 .into_iter()\n                                 .flatten()\n-                                .map(|ident| TypoSuggestion::typo_from_res(ident.name, res)),\n+                                .map(|ident| TypoSuggestion::typo_from_ident(*ident, res)),\n                         );\n                     }\n                 }\n@@ -1164,7 +1180,7 @@ impl<'a> Resolver<'a> {\n                                 suggestions.extend(\n                                     ext.helper_attrs\n                                         .iter()\n-                                        .map(|name| TypoSuggestion::typo_from_res(*name, res)),\n+                                        .map(|name| TypoSuggestion::typo_from_name(*name, res)),\n                                 );\n                             }\n                         }\n@@ -1174,8 +1190,8 @@ impl<'a> Resolver<'a> {\n                     if let MacroRulesScope::Binding(macro_rules_binding) = macro_rules_scope.get() {\n                         let res = macro_rules_binding.binding.res();\n                         if filter_fn(res) {\n-                            suggestions.push(TypoSuggestion::typo_from_res(\n-                                macro_rules_binding.ident.name,\n+                            suggestions.push(TypoSuggestion::typo_from_ident(\n+                                macro_rules_binding.ident,\n                                 res,\n                             ))\n                         }\n@@ -1193,7 +1209,7 @@ impl<'a> Resolver<'a> {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(\n                         |(name, binding)| {\n                             let res = binding.res();\n-                            filter_fn(res).then_some(TypoSuggestion::typo_from_res(*name, res))\n+                            filter_fn(res).then_some(TypoSuggestion::typo_from_name(*name, res))\n                         },\n                     ));\n                 }\n@@ -1203,22 +1219,22 @@ impl<'a> Resolver<'a> {\n                         suggestions.extend(\n                             BUILTIN_ATTRIBUTES\n                                 .iter()\n-                                .map(|attr| TypoSuggestion::typo_from_res(attr.name, res)),\n+                                .map(|attr| TypoSuggestion::typo_from_name(attr.name, res)),\n                         );\n                     }\n                 }\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n                         let res = Res::Def(DefKind::Mod, CRATE_DEF_ID.to_def_id());\n-                        filter_fn(res).then_some(TypoSuggestion::typo_from_res(ident.name, res))\n+                        filter_fn(res).then_some(TypoSuggestion::typo_from_ident(*ident, res))\n                     }));\n                 }\n                 Scope::ToolPrelude => {\n                     let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);\n                     suggestions.extend(\n                         this.registered_tools\n                             .iter()\n-                            .map(|ident| TypoSuggestion::typo_from_res(ident.name, res)),\n+                            .map(|ident| TypoSuggestion::typo_from_ident(*ident, res)),\n                     );\n                 }\n                 Scope::StdLibPrelude => {\n@@ -1235,7 +1251,8 @@ impl<'a> Resolver<'a> {\n                 Scope::BuiltinTypes => {\n                     suggestions.extend(PrimTy::ALL.iter().filter_map(|prim_ty| {\n                         let res = Res::PrimTy(*prim_ty);\n-                        filter_fn(res).then_some(TypoSuggestion::typo_from_res(prim_ty.name(), res))\n+                        filter_fn(res)\n+                            .then_some(TypoSuggestion::typo_from_name(prim_ty.name(), res))\n                     }))\n                 }\n             }"}, {"sha": "8da09489b1f1861ad297214351815aeb7e293fed", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be61f0237b95083d26ce32fb0934dd42caf6ea07/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be61f0237b95083d26ce32fb0934dd42caf6ea07/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=be61f0237b95083d26ce32fb0934dd42caf6ea07", "patch": "@@ -150,15 +150,15 @@ struct BaseError {\n #[derive(Debug)]\n enum TypoCandidate {\n     Typo(TypoSuggestion),\n-    Shadowed(Res),\n+    Shadowed(Res, Option<Span>),\n     None,\n }\n \n impl TypoCandidate {\n     fn to_opt_suggestion(self) -> Option<TypoSuggestion> {\n         match self {\n             TypoCandidate::Typo(sugg) => Some(sugg),\n-            TypoCandidate::Shadowed(_) | TypoCandidate::None => None,\n+            TypoCandidate::Shadowed(_, _) | TypoCandidate::None => None,\n         }\n     }\n }\n@@ -691,10 +691,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n-        if let TypoCandidate::Shadowed(res) = typo_sugg\n-            && let Some(id) = res.opt_def_id()\n-            && let Some(sugg_span) = self.r.opt_span(id)\n-        {\n+        if let TypoCandidate::Shadowed(res, Some(sugg_span)) = typo_sugg {\n             err.span_label(\n                 sugg_span,\n                 format!(\"you might have meant to refer to this {}\", res.descr()),\n@@ -973,10 +970,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .collect();\n                 if targets.len() == 1 {\n                     let target = targets[0];\n-                    return Some(TypoSuggestion::single_item_from_res(\n-                        target.0.ident.name,\n-                        target.1,\n-                    ));\n+                    return Some(TypoSuggestion::single_item_from_ident(target.0.ident, target.1));\n                 }\n             }\n         }\n@@ -1618,7 +1612,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 // Locals and type parameters\n                 for (ident, &res) in &rib.bindings {\n                     if filter_fn(res) && ident.span.ctxt() == rib_ctxt {\n-                        names.push(TypoSuggestion::typo_from_res(ident.name, res));\n+                        names.push(TypoSuggestion::typo_from_ident(*ident, res));\n                     }\n                 }\n \n@@ -1647,9 +1641,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                             Res::Def(DefKind::Mod, crate_id.as_def_id());\n \n                                         if filter_fn(crate_mod) {\n-                                            Some(TypoSuggestion::typo_from_res(\n-                                                ident.name, crate_mod,\n-                                            ))\n+                                            Some(TypoSuggestion::typo_from_ident(*ident, crate_mod))\n                                         } else {\n                                             None\n                                         }\n@@ -1668,7 +1660,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             // Add primitive types to the mix\n             if filter_fn(Res::PrimTy(PrimTy::Bool)) {\n                 names.extend(PrimTy::ALL.iter().map(|prim_ty| {\n-                    TypoSuggestion::typo_from_res(prim_ty.name(), Res::PrimTy(*prim_ty))\n+                    TypoSuggestion::typo_from_name(prim_ty.name(), Res::PrimTy(*prim_ty))\n                 }))\n             }\n         } else {\n@@ -1695,7 +1687,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     return TypoCandidate::None;\n                 };\n                 if found == name {\n-                    TypoCandidate::Shadowed(sugg.res)\n+                    TypoCandidate::Shadowed(sugg.res, sugg.span)\n                 } else {\n                     TypoCandidate::Typo(sugg)\n                 }"}]}