{"sha": "40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "node_id": "C_kwDOAAsO6NoAKDQwOTEyZTEyZjFlYjM1NDM0ZmM1NDg5YWRiNmRkY2I5Yjk3NmE3ZTQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-15T10:37:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-15T10:37:13Z"}, "message": "Rollup merge of #95118 - sunfishcode:sunfishcode/stabilize-io-safety, r=joshtriplett\n\nImplement stabilization of `#[feature(io_safety)]`.\n\nImplement stabilization of [I/O safety], aka `#[feature(io_safety)]`.\n\nFixes #87074.\n\n[I/O safety]: https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md", "tree": {"sha": "8f53e6192d1274047d768de58c3a40c634c14a9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f53e6192d1274047d768de58c3a40c634c14a9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqbZZCRBK7hj4Ov3rIwAASPoIACkOdKAihazP2YhBY4m+OXFn\nslQgKM++XkoMwtBWgjQjoFiTNFuMoBUG6aWAA7ts7nvRm5jAQ1llsVUN08+kr1Uu\n8y2YI36pJA0+UEtEKK2y4gCOvm9RxxCX7TltmWOB8C74zEH+Snlumw9dUCkrCfcW\nYFW+Se5Vv/JhcZmc9gdDF2hrUWNjHapeZW8E7r5hFooJWsa4RN+QaScmBFP3xvCg\nB4+IJfvzTYIPaov61r3k3BUfb5UfUhLX2PkfCYf9Seos7WPgXoAAiSlYzfjhTucY\nNnDd6iEd1NcuCqk7qwlUtKbktS/BdGTesEBtfLEZoOZwXlBfdWL84onebrGM5WI=\n=S5Ip\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f53e6192d1274047d768de58c3a40c634c14a9c\nparent 389352c4bbd56024eefd1566e06dcba04d223f92\nparent 1237232aba9d765a469ac5a28fefd2ebfb158e9a\nauthor Yuki Okushi <jtitor@2k36.org> 1655289433 +0900\ncommitter GitHub <noreply@github.com> 1655289433 +0900\n\nRollup merge of #95118 - sunfishcode:sunfishcode/stabilize-io-safety, r=joshtriplett\n\nImplement stabilization of `#[feature(io_safety)]`.\n\nImplement stabilization of [I/O safety], aka `#[feature(io_safety)]`.\n\nFixes #87074.\n\n[I/O safety]: https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "html_url": "https://github.com/rust-lang/rust/commit/40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389352c4bbd56024eefd1566e06dcba04d223f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/389352c4bbd56024eefd1566e06dcba04d223f92", "html_url": "https://github.com/rust-lang/rust/commit/389352c4bbd56024eefd1566e06dcba04d223f92"}, {"sha": "1237232aba9d765a469ac5a28fefd2ebfb158e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1237232aba9d765a469ac5a28fefd2ebfb158e9a", "html_url": "https://github.com/rust-lang/rust/commit/1237232aba9d765a469ac5a28fefd2ebfb158e9a"}], "stats": {"total": 230, "additions": 146, "deletions": 84}, "files": [{"sha": "a456947534a45791ca94b57e47b616f5ffd20f50", "filename": "library/std/src/os/fd/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -1,6 +1,6 @@\n //! Owned and borrowed Unix-like file descriptors.\n \n-#![unstable(feature = \"io_safety\", issue = \"87074\")]\n+#![stable(feature = \"io_safety\", since = \"1.63.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n // `RawFd`, `AsRawFd`, etc."}, {"sha": "45b792039efb78e13f97a0d7450814741ac52344", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -1,6 +1,6 @@\n //! Owned and borrowed Unix-like file descriptors.\n \n-#![unstable(feature = \"io_safety\", issue = \"87074\")]\n+#![stable(feature = \"io_safety\", since = \"1.63.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n use super::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n@@ -33,7 +33,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n // because c_int is 32 bits.\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n #[rustc_nonnull_optimization_guaranteed]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub struct BorrowedFd<'fd> {\n     fd: RawFd,\n     _phantom: PhantomData<&'fd OwnedFd>,\n@@ -54,7 +54,7 @@ pub struct BorrowedFd<'fd> {\n // because c_int is 32 bits.\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n #[rustc_nonnull_optimization_guaranteed]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub struct OwnedFd {\n     fd: RawFd,\n }\n@@ -67,7 +67,8 @@ impl BorrowedFd<'_> {\n     /// The resource pointed to by `fd` must remain open for the duration of\n     /// the returned `BorrowedFd`, and it must not have the value `-1`.\n     #[inline]\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n+    #[rustc_const_stable(feature = \"io_safety\", since = \"1.63.0\")]\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub const unsafe fn borrow_raw(fd: RawFd) -> Self {\n         assert!(fd != u32::MAX as RawFd);\n         // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n@@ -79,6 +80,7 @@ impl OwnedFd {\n     /// Creates a new `OwnedFd` instance that shares the same underlying file handle\n     /// as the existing `OwnedFd` instance.\n     #[cfg(not(target_arch = \"wasm32\"))]\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n         // We want to atomically duplicate this file descriptor and set the\n         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This\n@@ -98,6 +100,7 @@ impl OwnedFd {\n     }\n \n     #[cfg(target_arch = \"wasm32\")]\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n         Err(crate::io::const_io_error!(\n             crate::io::ErrorKind::Unsupported,\n@@ -106,23 +109,23 @@ impl OwnedFd {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsRawFd for BorrowedFd<'_> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.fd\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsRawFd for OwnedFd {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.fd\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl IntoRawFd for OwnedFd {\n     #[inline]\n     fn into_raw_fd(self) -> RawFd {\n@@ -132,7 +135,7 @@ impl IntoRawFd for OwnedFd {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl FromRawFd for OwnedFd {\n     /// Constructs a new instance of `Self` from the given raw file descriptor.\n     ///\n@@ -148,7 +151,7 @@ impl FromRawFd for OwnedFd {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl Drop for OwnedFd {\n     #[inline]\n     fn drop(&mut self) {\n@@ -163,14 +166,14 @@ impl Drop for OwnedFd {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl fmt::Debug for BorrowedFd<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BorrowedFd\").field(\"fd\", &self.fd).finish()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl fmt::Debug for OwnedFd {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"OwnedFd\").field(\"fd\", &self.fd).finish()\n@@ -182,14 +185,13 @@ impl fmt::Debug for OwnedFd {\n /// This is only available on unix platforms and must be imported in order to\n /// call the method. Windows platforms have a corresponding `AsHandle` and\n /// `AsSocket` set of traits.\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub trait AsFd {\n     /// Borrows the file descriptor.\n     ///\n     /// # Example\n     ///\n     /// ```rust,no_run\n-    /// # #![feature(io_safety)]\n     /// use std::fs::File;\n     /// # use std::io;\n     /// # #[cfg(target_os = \"wasi\")]\n@@ -202,35 +204,35 @@ pub trait AsFd {\n     /// let borrowed_fd: BorrowedFd<'_> = f.as_fd();\n     /// # Ok::<(), io::Error>(())\n     /// ```\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     fn as_fd(&self) -> BorrowedFd<'_>;\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<T: AsFd> AsFd for &T {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         T::as_fd(self)\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<T: AsFd> AsFd for &mut T {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         T::as_fd(self)\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for BorrowedFd<'_> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         *self\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for OwnedFd {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n@@ -241,47 +243,47 @@ impl AsFd for OwnedFd {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for fs::File {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.as_inner().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<fs::File> for OwnedFd {\n     #[inline]\n     fn from(file: fs::File) -> OwnedFd {\n         file.into_inner().into_inner().into_inner()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedFd> for fs::File {\n     #[inline]\n     fn from(owned_fd: OwnedFd) -> Self {\n         Self::from_inner(FromInner::from_inner(FromInner::from_inner(owned_fd)))\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for crate::net::TcpStream {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.as_inner().socket().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::TcpStream> for OwnedFd {\n     #[inline]\n     fn from(tcp_stream: crate::net::TcpStream) -> OwnedFd {\n         tcp_stream.into_inner().into_socket().into_inner().into_inner().into()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedFd> for crate::net::TcpStream {\n     #[inline]\n     fn from(owned_fd: OwnedFd) -> Self {\n@@ -291,23 +293,23 @@ impl From<OwnedFd> for crate::net::TcpStream {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for crate::net::TcpListener {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.as_inner().socket().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::TcpListener> for OwnedFd {\n     #[inline]\n     fn from(tcp_listener: crate::net::TcpListener) -> OwnedFd {\n         tcp_listener.into_inner().into_socket().into_inner().into_inner().into()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedFd> for crate::net::TcpListener {\n     #[inline]\n     fn from(owned_fd: OwnedFd) -> Self {\n@@ -317,23 +319,23 @@ impl From<OwnedFd> for crate::net::TcpListener {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for crate::net::UdpSocket {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.as_inner().socket().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::UdpSocket> for OwnedFd {\n     #[inline]\n     fn from(udp_socket: crate::net::UdpSocket) -> OwnedFd {\n         udp_socket.into_inner().into_socket().into_inner().into_inner().into()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedFd> for crate::net::UdpSocket {\n     #[inline]\n     fn from(owned_fd: OwnedFd) -> Self {"}, {"sha": "d4cb696459b7e6c3f0f91ddc93fe2d729a8bea08", "filename": "library/std/src/os/unix/io/fd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -1,9 +1,8 @@\n //! Owned and borrowed file descriptors.\n \n-#![unstable(feature = \"io_safety\", issue = \"87074\")]\n-\n // Tests for this module\n #[cfg(test)]\n mod tests;\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub use crate::os::fd::owned::*;"}, {"sha": "e3a7cfc8d2ab8511c238e23575282cde399c90c8", "filename": "library/std/src/os/unix/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fmod.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -51,7 +51,7 @@\n mod fd;\n mod raw;\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub use fd::*;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use raw::*;"}, {"sha": "8008acfd1c96fdd3f85e70200110337e4ab16c2b", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -962,23 +962,23 @@ impl IntoRawFd for UnixDatagram {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for UnixDatagram {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.0.as_inner().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<UnixDatagram> for OwnedFd {\n     #[inline]\n     fn from(unix_datagram: UnixDatagram) -> OwnedFd {\n         unsafe { OwnedFd::from_raw_fd(unix_datagram.into_raw_fd()) }\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedFd> for UnixDatagram {\n     #[inline]\n     fn from(owned: OwnedFd) -> Self {"}, {"sha": "7c0d539504dbbd1f9460c702abcdb8f90e3993b5", "filename": "library/std/src/os/unix/net/listener.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -300,23 +300,23 @@ impl IntoRawFd for UnixListener {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for UnixListener {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.0.as_inner().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedFd> for UnixListener {\n     #[inline]\n     fn from(fd: OwnedFd) -> UnixListener {\n         UnixListener(Socket::from_inner(FromInner::from_inner(fd)))\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<UnixListener> for OwnedFd {\n     #[inline]\n     fn from(listener: UnixListener) -> OwnedFd {"}, {"sha": "1d6083e66e172e2b5d712c1627525f9e583d2dce", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -683,23 +683,23 @@ impl IntoRawFd for UnixStream {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for UnixStream {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.0.as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<UnixStream> for OwnedFd {\n     #[inline]\n     fn from(unix_stream: UnixStream) -> OwnedFd {\n         unsafe { OwnedFd::from_raw_fd(unix_stream.into_raw_fd()) }\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedFd> for UnixStream {\n     #[inline]\n     fn from(owned: OwnedFd) -> Self {"}, {"sha": "3e989c85db97d3554c7ed5f00ea38dc106bac69b", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -339,7 +339,7 @@ impl FromRawFd for process::Stdio {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedFd> for process::Stdio {\n     #[inline]\n     fn from(fd: OwnedFd) -> process::Stdio {\n@@ -397,47 +397,47 @@ impl IntoRawFd for process::ChildStderr {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for crate::process::ChildStdin {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.as_inner().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::process::ChildStdin> for OwnedFd {\n     #[inline]\n     fn from(child_stdin: crate::process::ChildStdin) -> OwnedFd {\n         child_stdin.into_inner().into_inner().into_inner()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for crate::process::ChildStdout {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.as_inner().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::process::ChildStdout> for OwnedFd {\n     #[inline]\n     fn from(child_stdout: crate::process::ChildStdout) -> OwnedFd {\n         child_stdout.into_inner().into_inner().into_inner()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for crate::process::ChildStderr {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         self.as_inner().as_fd()\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::process::ChildStderr> for OwnedFd {\n     #[inline]\n     fn from(child_stderr: crate::process::ChildStderr) -> OwnedFd {"}, {"sha": "2f7c07c7910517db7fc264a46e632753234ce0ac", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 56, "deletions": 16, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -1,6 +1,6 @@\n //! Owned and borrowed OS handles.\n \n-#![unstable(feature = \"io_safety\", issue = \"87074\")]\n+#![stable(feature = \"io_safety\", since = \"1.63.0\")]\n \n use super::raw::{AsRawHandle, FromRawHandle, IntoRawHandle, RawHandle};\n use crate::fmt;\n@@ -38,7 +38,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[derive(Copy, Clone)]\n #[repr(transparent)]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub struct BorrowedHandle<'handle> {\n     handle: RawHandle,\n     _phantom: PhantomData<&'handle OwnedHandle>,\n@@ -66,7 +66,7 @@ pub struct BorrowedHandle<'handle> {\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n /// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[repr(transparent)]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub struct OwnedHandle {\n     handle: RawHandle,\n }\n@@ -89,7 +89,7 @@ pub struct OwnedHandle {\n ///\n /// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[repr(transparent)]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n #[derive(Debug)]\n pub struct HandleOrNull(OwnedHandle);\n \n@@ -108,7 +108,7 @@ pub struct HandleOrNull(OwnedHandle);\n ///\n /// If holds a handle other than `INVALID_HANDLE_VALUE`, it will close the handle on drop.\n #[repr(transparent)]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n #[derive(Debug)]\n pub struct HandleOrInvalid(OwnedHandle);\n \n@@ -117,13 +117,21 @@ pub struct HandleOrInvalid(OwnedHandle);\n // `Send` or `Sync`).\n //\n // [`HANDLE`]: std::os::windows::raw::HANDLE\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n unsafe impl Send for OwnedHandle {}\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n unsafe impl Send for HandleOrNull {}\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n unsafe impl Send for HandleOrInvalid {}\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n unsafe impl Send for BorrowedHandle<'_> {}\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n unsafe impl Sync for OwnedHandle {}\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n unsafe impl Sync for HandleOrNull {}\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n unsafe impl Sync for HandleOrInvalid {}\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n unsafe impl Sync for BorrowedHandle<'_> {}\n \n impl BorrowedHandle<'_> {\n@@ -142,12 +150,14 @@ impl BorrowedHandle<'_> {\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n+    #[rustc_const_stable(feature = \"io_safety\", since = \"1.63.0\")]\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub const unsafe fn borrow_raw(handle: RawHandle) -> Self {\n         Self { handle, _phantom: PhantomData }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl TryFrom<HandleOrNull> for OwnedHandle {\n     type Error = NullHandleError;\n \n@@ -169,6 +179,7 @@ impl TryFrom<HandleOrNull> for OwnedHandle {\n impl OwnedHandle {\n     /// Creates a new `OwnedHandle` instance that shares the same underlying file handle\n     /// as the existing `OwnedHandle` instance.\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n         self.duplicate(0, false, c::DUPLICATE_SAME_ACCESS)\n     }\n@@ -206,6 +217,7 @@ impl OwnedHandle {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl TryFrom<HandleOrInvalid> for OwnedHandle {\n     type Error = InvalidHandleError;\n \n@@ -227,53 +239,56 @@ impl TryFrom<HandleOrInvalid> for OwnedHandle {\n /// This is the error type used by [`HandleOrNull`] when attempting to convert\n /// into a handle, to indicate that the value is null.\n // The empty field prevents constructing this, and allows extending it in the future.\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct NullHandleError(());\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl fmt::Display for NullHandleError {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"A HandleOrNull could not be converted to a handle because it was null\".fmt(fmt)\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl crate::error::Error for NullHandleError {}\n \n /// This is the error type used by [`HandleOrInvalid`] when attempting to\n /// convert into a handle, to indicate that the value is\n /// `INVALID_HANDLE_VALUE`.\n // The empty field prevents constructing this, and allows extending it in the future.\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct InvalidHandleError(());\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl fmt::Display for InvalidHandleError {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"A HandleOrInvalid could not be converted to a handle because it was INVALID_HANDLE_VALUE\"\n             .fmt(fmt)\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl crate::error::Error for InvalidHandleError {}\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsRawHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.handle\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsRawHandle for OwnedHandle {\n     #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.handle\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl IntoRawHandle for OwnedHandle {\n     #[inline]\n     fn into_raw_handle(self) -> RawHandle {\n@@ -283,6 +298,7 @@ impl IntoRawHandle for OwnedHandle {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl FromRawHandle for OwnedHandle {\n     #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n@@ -305,6 +321,7 @@ impl HandleOrNull {\n     /// Windows APIs use null for errors; see [here] for the full story.\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     #[inline]\n     pub unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n         Self(OwnedHandle::from_raw_handle(handle))\n@@ -327,12 +344,14 @@ impl HandleOrInvalid {\n     /// `INVALID_HANDLE_VALUE` for errors; see [here] for the full story.\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     #[inline]\n     pub unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n         Self(OwnedHandle::from_raw_handle(handle))\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl Drop for OwnedHandle {\n     #[inline]\n     fn drop(&mut self) {\n@@ -342,27 +361,28 @@ impl Drop for OwnedHandle {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl fmt::Debug for BorrowedHandle<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BorrowedHandle\").field(\"handle\", &self.handle).finish()\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl fmt::Debug for OwnedHandle {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"OwnedHandle\").field(\"handle\", &self.handle).finish()\n     }\n }\n \n /// A trait to borrow the handle from an underlying object.\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub trait AsHandle {\n     /// Borrows the handle.\n     ///\n     /// # Example\n     ///\n     /// ```rust,no_run\n-    /// # #![feature(io_safety)]\n     /// use std::fs::File;\n     /// # use std::io;\n     /// use std::os::windows::io::{AsHandle, BorrowedHandle};\n@@ -371,32 +391,35 @@ pub trait AsHandle {\n     /// let borrowed_handle: BorrowedHandle<'_> = f.as_handle();\n     /// # Ok::<(), io::Error>(())\n     /// ```\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     fn as_handle(&self) -> BorrowedHandle<'_>;\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<T: AsHandle> AsHandle for &T {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         T::as_handle(self)\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<T: AsHandle> AsHandle for &mut T {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         T::as_handle(self)\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         *self\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for OwnedHandle {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n@@ -407,118 +430,135 @@ impl AsHandle for OwnedHandle {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for fs::File {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         self.as_inner().as_handle()\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<fs::File> for OwnedHandle {\n     #[inline]\n     fn from(file: fs::File) -> OwnedHandle {\n         file.into_inner().into_inner().into_inner().into()\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedHandle> for fs::File {\n     #[inline]\n     fn from(owned: OwnedHandle) -> Self {\n         Self::from_inner(FromInner::from_inner(FromInner::from_inner(owned)))\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for crate::io::Stdin {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<'a> AsHandle for crate::io::StdinLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for crate::io::Stdout {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<'a> AsHandle for crate::io::StdoutLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for crate::io::Stderr {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<'a> AsHandle for crate::io::StderrLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for crate::process::ChildStdin {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::process::ChildStdin> for OwnedHandle {\n     #[inline]\n     fn from(child_stdin: crate::process::ChildStdin) -> OwnedHandle {\n         unsafe { OwnedHandle::from_raw_handle(child_stdin.into_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for crate::process::ChildStdout {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::process::ChildStdout> for OwnedHandle {\n     #[inline]\n     fn from(child_stdout: crate::process::ChildStdout) -> OwnedHandle {\n         unsafe { OwnedHandle::from_raw_handle(child_stdout.into_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for crate::process::ChildStderr {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::process::ChildStderr> for OwnedHandle {\n     #[inline]\n     fn from(child_stderr: crate::process::ChildStderr) -> OwnedHandle {\n         unsafe { OwnedHandle::from_raw_handle(child_stderr.into_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<T> AsHandle for crate::thread::JoinHandle<T> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n         unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<T> From<crate::thread::JoinHandle<T>> for OwnedHandle {\n     #[inline]\n     fn from(join_handle: crate::thread::JoinHandle<T>) -> OwnedHandle {"}, {"sha": "315450597076f270a1abf4864a70c786d46b7c2d", "filename": "library/std/src/os/windows/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -48,11 +48,11 @@ mod handle;\n mod raw;\n mod socket;\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub use handle::*;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use raw::*;\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub use socket::*;\n \n #[cfg(test)]"}, {"sha": "c5a381c40d243f056aa5ef7082051fa902a61729", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -1,6 +1,6 @@\n //! Owned and borrowed OS sockets.\n \n-#![unstable(feature = \"io_safety\", issue = \"87074\")]\n+#![stable(feature = \"io_safety\", since = \"1.63.0\")]\n \n use super::raw::{AsRawSocket, FromRawSocket, IntoRawSocket, RawSocket};\n use crate::fmt;\n@@ -36,7 +36,7 @@ use crate::sys::cvt;\n     rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FF_FF_FF_FF_FE)\n )]\n #[rustc_nonnull_optimization_guaranteed]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub struct BorrowedSocket<'socket> {\n     socket: RawSocket,\n     _phantom: PhantomData<&'socket OwnedSocket>,\n@@ -59,7 +59,7 @@ pub struct BorrowedSocket<'socket> {\n     rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FF_FF_FF_FF_FE)\n )]\n #[rustc_nonnull_optimization_guaranteed]\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub struct OwnedSocket {\n     socket: RawSocket,\n }\n@@ -73,7 +73,8 @@ impl BorrowedSocket<'_> {\n     /// the returned `BorrowedSocket`, and it must not have the value\n     /// `INVALID_SOCKET`.\n     #[inline]\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n+    #[rustc_const_stable(feature = \"io_safety\", since = \"1.63.0\")]\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub const unsafe fn borrow_raw(socket: RawSocket) -> Self {\n         assert!(socket != c::INVALID_SOCKET as RawSocket);\n         Self { socket, _phantom: PhantomData }\n@@ -83,6 +84,7 @@ impl BorrowedSocket<'_> {\n impl OwnedSocket {\n     /// Creates a new `OwnedSocket` instance that shares the same underlying socket\n     /// as the existing `OwnedSocket` instance.\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone(&self) -> io::Result<Self> {\n         let mut info = unsafe { mem::zeroed::<c::WSAPROTOCOL_INFO>() };\n         let result = unsafe {\n@@ -152,20 +154,23 @@ fn last_error() -> io::Error {\n     io::Error::from_raw_os_error(unsafe { c::WSAGetLastError() })\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsRawSocket for BorrowedSocket<'_> {\n     #[inline]\n     fn as_raw_socket(&self) -> RawSocket {\n         self.socket\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsRawSocket for OwnedSocket {\n     #[inline]\n     fn as_raw_socket(&self) -> RawSocket {\n         self.socket\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl IntoRawSocket for OwnedSocket {\n     #[inline]\n     fn into_raw_socket(self) -> RawSocket {\n@@ -175,6 +180,7 @@ impl IntoRawSocket for OwnedSocket {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl FromRawSocket for OwnedSocket {\n     #[inline]\n     unsafe fn from_raw_socket(socket: RawSocket) -> Self {\n@@ -183,6 +189,7 @@ impl FromRawSocket for OwnedSocket {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl Drop for OwnedSocket {\n     #[inline]\n     fn drop(&mut self) {\n@@ -192,48 +199,53 @@ impl Drop for OwnedSocket {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl fmt::Debug for BorrowedSocket<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BorrowedSocket\").field(\"socket\", &self.socket).finish()\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl fmt::Debug for OwnedSocket {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"OwnedSocket\").field(\"socket\", &self.socket).finish()\n     }\n }\n \n /// A trait to borrow the socket from an underlying object.\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub trait AsSocket {\n     /// Borrows the socket.\n+    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     fn as_socket(&self) -> BorrowedSocket<'_>;\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<T: AsSocket> AsSocket for &T {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         T::as_socket(self)\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<T: AsSocket> AsSocket for &mut T {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         T::as_socket(self)\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsSocket for BorrowedSocket<'_> {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         *self\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsSocket for OwnedSocket {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n@@ -244,62 +256,71 @@ impl AsSocket for OwnedSocket {\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsSocket for crate::net::TcpStream {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::TcpStream> for OwnedSocket {\n     #[inline]\n     fn from(tcp_stream: crate::net::TcpStream) -> OwnedSocket {\n         unsafe { OwnedSocket::from_raw_socket(tcp_stream.into_raw_socket()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedSocket> for crate::net::TcpStream {\n     #[inline]\n     fn from(owned: OwnedSocket) -> Self {\n         unsafe { Self::from_raw_socket(owned.into_raw_socket()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsSocket for crate::net::TcpListener {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::TcpListener> for OwnedSocket {\n     #[inline]\n     fn from(tcp_listener: crate::net::TcpListener) -> OwnedSocket {\n         unsafe { OwnedSocket::from_raw_socket(tcp_listener.into_raw_socket()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedSocket> for crate::net::TcpListener {\n     #[inline]\n     fn from(owned: OwnedSocket) -> Self {\n         unsafe { Self::from_raw_socket(owned.into_raw_socket()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsSocket for crate::net::UdpSocket {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n         unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<crate::net::UdpSocket> for OwnedSocket {\n     #[inline]\n     fn from(udp_socket: crate::net::UdpSocket) -> OwnedSocket {\n         unsafe { OwnedSocket::from_raw_socket(udp_socket.into_raw_socket()) }\n     }\n }\n \n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedSocket> for crate::net::UdpSocket {\n     #[inline]\n     fn from(owned: OwnedSocket) -> Self {"}, {"sha": "24b0888b11256269d3b338bc7aa47c8f942f3ae8", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -22,7 +22,7 @@ impl FromRawHandle for process::Stdio {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<OwnedHandle> for process::Stdio {\n     fn from(handle: OwnedHandle) -> process::Stdio {\n         let handle = sys::handle::Handle::from_inner(handle);\n@@ -39,7 +39,7 @@ impl AsRawHandle for process::Child {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for process::Child {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n@@ -54,7 +54,7 @@ impl IntoRawHandle for process::Child {\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl From<process::Child> for OwnedHandle {\n     fn from(child: process::Child) -> OwnedHandle {\n         child.into_inner().into_handle().into_inner()"}, {"sha": "329f9433dba0e5c2d5c49dd6ddb249d5cca17d77", "filename": "library/std/src/sys/unix/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40912e12f1eb35434fc5489adb6ddcb9b976a7e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs?ref=40912e12f1eb35434fc5489adb6ddcb9b976a7e4", "patch": "@@ -92,47 +92,47 @@ pub fn panic_output() -> Option<impl io::Write> {\n     Some(Stderr::new())\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for io::Stdin {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<'a> AsFd for io::StdinLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for io::Stdout {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<'a> AsFd for io::StdoutLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsFd for io::Stderr {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n     }\n }\n \n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl<'a> AsFd for io::StderrLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {"}]}