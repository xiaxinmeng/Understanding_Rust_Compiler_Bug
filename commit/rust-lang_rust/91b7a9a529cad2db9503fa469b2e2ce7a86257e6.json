{"sha": "91b7a9a529cad2db9503fa469b2e2ce7a86257e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjdhOWE1MjljYWQyZGI5NTAzZmE0NjliMmUyY2U3YTg2MjU3ZTY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-10-07T23:01:01Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-10-08T00:20:19Z"}, "message": "libcore: add first_ref and second_ref to tuples", "tree": {"sha": "953db0c34d69dfc5bc4bd7a1f114aa2710b978de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/953db0c34d69dfc5bc4bd7a1f114aa2710b978de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b7a9a529cad2db9503fa469b2e2ce7a86257e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b7a9a529cad2db9503fa469b2e2ce7a86257e6", "html_url": "https://github.com/rust-lang/rust/commit/91b7a9a529cad2db9503fa469b2e2ce7a86257e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b7a9a529cad2db9503fa469b2e2ce7a86257e6/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d301dd3686ddd04845c1e9f5b9254aa3498a8a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d301dd3686ddd04845c1e9f5b9254aa3498a8a7b", "html_url": "https://github.com/rust-lang/rust/commit/d301dd3686ddd04845c1e9f5b9254aa3498a8a7b"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "603f19362ee4865a8a012115ebeb641c0a22c7ee", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b7a9a529cad2db9503fa469b2e2ce7a86257e6/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b7a9a529cad2db9503fa469b2e2ce7a86257e6/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=91b7a9a529cad2db9503fa469b2e2ce7a86257e6", "patch": "@@ -11,7 +11,7 @@ pub use GenericPath = path::GenericPath;\n pub use WindowsPath = path::WindowsPath;\n pub use PosixPath = path::PosixPath;\n \n-pub use tuple::{TupleOps, ExtendedTupleOps};\n+pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use str::{StrSlice, UniqueStr};\n pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};"}, {"sha": "899b16eb1320263d57f08e925a259dc7f4e7250e", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/91b7a9a529cad2db9503fa469b2e2ce7a86257e6/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b7a9a529cad2db9503fa469b2e2ce7a86257e6/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=91b7a9a529cad2db9503fa469b2e2ce7a86257e6", "patch": "@@ -6,13 +6,13 @@\n \n use cmp::{Eq, Ord};\n \n-pub trait TupleOps<T,U> {\n+pub trait CopyableTuple<T, U> {\n     pure fn first() -> T;\n     pure fn second() -> U;\n     pure fn swap() -> (U, T);\n }\n \n-impl<T: Copy, U: Copy> (T, U): TupleOps<T,U> {\n+impl<T: Copy, U: Copy> (T, U): CopyableTuple<T, U> {\n \n     /// Return the first element of self\n     pure fn first() -> T {\n@@ -34,6 +34,24 @@ impl<T: Copy, U: Copy> (T, U): TupleOps<T,U> {\n \n }\n \n+pub trait ImmutableTuple<T, U> {\n+    pure fn first_ref(&self) -> &self/T;\n+    pure fn second_ref(&self) -> &self/U;\n+}\n+\n+impl<T, U> (T, U): ImmutableTuple<T, U> {\n+    pure fn first_ref(&self) -> &self/T {\n+        match *self {\n+            (ref t, _) => t,\n+        }\n+    }\n+    pure fn second_ref(&self) -> &self/U {\n+        match *self {\n+            (_, ref u) => u,\n+        }\n+    }\n+}\n+\n pub trait ExtendedTupleOps<A,B> {\n     fn zip(&self) -> ~[(A, B)];\n     fn map<C>(&self, f: &fn(a: &A, b: &B) -> C) -> ~[C];\n@@ -145,6 +163,13 @@ impl<A: Ord, B: Ord, C: Ord> (A, B, C) : Ord {\n     pure fn gt(other: &(A, B, C)) -> bool { (*other).lt(&self)  }\n }\n \n+#[test]\n+fn test_tuple_ref() {\n+    let (~\"foo\", ~\"bar\");\n+    assert x.first_ref() == &~\"foo\";\n+    assert x.second_ref() == &~\"bar\";\n+}\n+\n #[test]\n #[allow(non_implicitly_copyable_typarams)]\n fn test_tuple() {"}]}