{"sha": "578016b8b55004f34292bc75373ee5be35654f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ODAxNmI4YjU1MDA0ZjM0MjkyYmM3NTM3M2VlNWJlMzU2NTRmN2Y=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-18T17:59:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-18T17:59:47Z"}, "message": "Rollup merge of #45098 - sunjay:breakingrustfmtrls, r=alexcrichton\n\nDocumenting the process for when rustfmt/rls break\n\n**DO NOT MERGE YET**\n\nI'm documenting what to do when rustfmt or rls break because of your changes. I'm currently going through this and will keep adding more as I figure out what all the steps are. This first commit is based on @alexcrichton's [comment on my original PR](https://github.com/rust-lang/rust/pull/44766#issuecomment-332653525).\n\n[Rendered](https://github.com/sunjay/rust/blob/breakingrustfmtrls/CONTRIBUTING.md#breaking-tools-built-with-the-compiler)\n\nReviews are welcome, but as I mentioned, I will be revising this as I go.", "tree": {"sha": "b20149028fc32bccdcca8151208e8890a5bc003a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20149028fc32bccdcca8151208e8890a5bc003a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/578016b8b55004f34292bc75373ee5be35654f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/578016b8b55004f34292bc75373ee5be35654f7f", "html_url": "https://github.com/rust-lang/rust/commit/578016b8b55004f34292bc75373ee5be35654f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/578016b8b55004f34292bc75373ee5be35654f7f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dfb2107615c3e1159e213c2c18dcbfd5e831d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dfb2107615c3e1159e213c2c18dcbfd5e831d10", "html_url": "https://github.com/rust-lang/rust/commit/9dfb2107615c3e1159e213c2c18dcbfd5e831d10"}, {"sha": "790604adad9fd02b92c59d1f937edb902a58b036", "url": "https://api.github.com/repos/rust-lang/rust/commits/790604adad9fd02b92c59d1f937edb902a58b036", "html_url": "https://github.com/rust-lang/rust/commit/790604adad9fd02b92c59d1f937edb902a58b036"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "4c296a28e90b4a2f8e19b8e6bfefe5a61040feef", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/578016b8b55004f34292bc75373ee5be35654f7f/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/578016b8b55004f34292bc75373ee5be35654f7f/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=578016b8b55004f34292bc75373ee5be35654f7f", "patch": "@@ -365,6 +365,116 @@ In order to prepare your PR, you can run the build locally by doing\n there, you may wish to set `submodules = false` in the `config.toml`\n to prevent `x.py` from resetting to the original branch.\n \n+#### Breaking Tools Built With The Compiler\n+[breaking-tools-built-with-the-compiler]: #breaking-tools-built-with-the-compiler\n+\n+Rust's build system builds a number of tools that make use of the\n+internals of the compiler. This includes clippy,\n+[RLS](https://github.com/rust-lang-nursery/rls) and\n+[rustfmt](https://github.com/rust-lang-nursery/rustfmt). If these tools\n+break because of your changes, you may run into a sort of \"chicken and egg\"\n+problem. These tools rely on the latest compiler to be built so you can't update\n+them to reflect your changes to the compiler until those changes are merged into\n+the compiler. At the same time, you can't get your changes merged into the compiler\n+because the rust-lang/rust build won't pass until those tools build and pass their\n+tests.\n+\n+That means that, in the default state, you can't update the compiler without first\n+fixing rustfmt, rls and the other tools that the compiler builds.\n+\n+Luckily, a feature was [added to Rust's build](https://github.com/rust-lang/rust/pull/45243)\n+to make all of this easy to handle. The idea is that you mark the tools as \"broken\",\n+so that the rust-lang/rust build passes without trying to build them, then land the change\n+in the compiler, wait for a nightly, and go update the tools that you broke. Once you're done\n+and the tools are working again, you go back in the compiler and change the tools back\n+from \"broken\".\n+\n+This should avoid a bunch of synchronization dances and is also much easier on contributors as\n+there's no need to block on rls/rustfmt/other tools changes going upstream.\n+\n+Here are those same steps in detail:\n+\n+1. (optional) First, if it doesn't exist already, create a `config.toml` by copying\n+   `config.toml.example` in the root directory of the Rust repository.\n+   Set `submodules = false` in the `[build]` section. This will prevent `x.py`\n+   from resetting to the original branch after you make your changes. If you\n+   need to [update any submodules to their latest versions][updating-submodules],\n+   see the section of this file about that for more information.\n+2. (optional) Run `./x.py test src/tools/rustfmt` (substituting the submodule\n+   that broke for `rustfmt`). Fix any errors in the submodule (and possibly others).\n+3. (optional) Make commits for your changes and send them to upstream repositories as a PR.\n+4. (optional) Maintainers of these submodules will **not** merge the PR. The PR can't be\n+   merged because CI will be broken. You'll want to write a message on the PR referencing\n+   your change, and how the PR should be merged once your change makes it into a nightly.\n+5. Update `src/tools/toolstate.toml` to indicate that the tool in question is \"broken\",\n+   that will disable building it on CI. See the documentation in that file for the exact\n+   configuration values you can use.\n+6. Commit the changes to `src/tools/toolstate.toml`, **do not update submodules in your commit**,\n+   and then update the PR you have for rust-lang/rust.\n+7. Wait for your PR to merge.\n+8. Wait for a nightly\n+9. (optional) Help land your PR on the upstream repository now that your changes are in nightly.\n+10. (optional) Send a PR to rust-lang/rust updating the submodule, reverting `src/tools/toolstate.toml` back to a \"building\" or \"testing\" state.\n+\n+#### Updating submodules\n+[updating-submodules]: #updating-submodules\n+\n+These instructions are specific to updating `rustfmt`, however they may apply\n+to the other submodules as well. Please help by improving these instructions\n+if you find any discrepencies or special cases that need to be addressed.\n+\n+To update the `rustfmt` submodule, start by running the appropriate\n+[`git submodule` command](https://git-scm.com/book/en/v2/Git-Tools-Submodules).\n+For example, to update to the latest commit on the remote master branch,\n+you may want to run:\n+```\n+git submodule update --remote src/tools/rustfmt\n+```\n+If you run `./x.py build` now, and you are lucky, it may just work. If you see\n+an error message about patches that did not resolve to any crates, you will need\n+to complete a few more steps which are outlined with their rationale below.\n+\n+*(This error may change in the future to include more information.)*\n+```\n+error: failed to resolve patches for `https://github.com/rust-lang-nursery/rustfmt`\n+\n+Caused by:\n+  patch for `rustfmt-nightly` in `https://github.com/rust-lang-nursery/rustfmt` did not resolve to any crates\n+failed to run: ~/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo build --manifest-path ~/rust/src/bootstrap/Cargo.toml\n+```\n+\n+If you haven't used the `[patch]`\n+section of `Cargo.toml` before, there is [some relevant documentation about it\n+in the cargo docs](http://doc.crates.io/manifest.html#the-patch-section). In\n+addition to that, you should read the \n+[Overriding dependencies](http://doc.crates.io/specifying-dependencies.html#overriding-dependencies)\n+section of the documentation as well.\n+\n+Specifically, the following [section in Overriding dependencies](http://doc.crates.io/specifying-dependencies.html#testing-a-bugfix) reveals what the problem is:\n+\n+> Next up we need to ensure that our lock file is updated to use this new version of uuid so our project uses the locally checked out copy instead of one from crates.io. The way [patch] works is that it'll load the dependency at ../path/to/uuid and then whenever crates.io is queried for versions of uuid it'll also return the local version.\n+> \n+> This means that the version number of the local checkout is significant and will affect whether the patch is used. Our manifest declared uuid = \"1.0\" which means we'll only resolve to >= 1.0.0, < 2.0.0, and Cargo's greedy resolution algorithm also means that we'll resolve to the maximum version within that range. Typically this doesn't matter as the version of the git repository will already be greater or match the maximum version published on crates.io, but it's important to keep this in mind!\n+\n+This says that when we updated the submodule, the version number in our\n+`src/tools/rustfmt/Cargo.toml` changed. The new version is different from\n+the version in `Cargo.lock`, so the build can no longer continue.\n+\n+To resolve this, we need to update `Cargo.lock`. Luckily, cargo provides a\n+command to do this easily.\n+\n+First, go into the `src/` directory since that is where `Cargo.toml` is in\n+the rust repository. Then run, `cargo update -p rustfmt-nightly` to solve\n+the problem.\n+\n+```\n+$ cd src\n+$ cargo update -p rustfmt-nightly\n+```\n+\n+This should change the version listed in `src/Cargo.lock` to the new version you updated\n+the submodule to. Running `./x.py build` should work now.\n+\n ## Writing Documentation\n [writing-documentation]: #writing-documentation\n "}]}