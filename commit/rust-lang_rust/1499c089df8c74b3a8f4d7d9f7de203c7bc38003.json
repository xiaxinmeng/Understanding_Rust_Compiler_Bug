{"sha": "1499c089df8c74b3a8f4d7d9f7de203c7bc38003", "node_id": "C_kwDOAAsO6NoAKDE0OTljMDg5ZGY4Yzc0YjNhOGY0ZDdkOWY3ZGUyMDNjN2JjMzgwMDM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-08T21:41:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-08T21:41:08Z"}, "message": "Rollup merge of #101499 - spastorino:add-lowering-arena, r=oli-obk\n\nIntroduce lowering_arena to avoid creating AST nodes on the fly\n\n`@oli-obk` requested this and other changes as a way of simplifying https://github.com/rust-lang/rust/pull/101345. This is just going to make the diff of https://github.com/rust-lang/rust/pull/101345 smaller.\n\nr? `@oli-obk` `@cjgillot`", "tree": {"sha": "99c7f1d2430cf3f2e714e068b212066513d2ed89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c7f1d2430cf3f2e714e068b212066513d2ed89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1499c089df8c74b3a8f4d7d9f7de203c7bc38003", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGmF0CRBK7hj4Ov3rIwAAsgIIADX96fa4rSDO9BoS25m/N8EK\nn0jspvGQxmdhhnXo2DO0/Lm/jVSoWd/7K1PqypyDBsg/ytPK2GqIY8YxHlEaqLTT\nhojsBJj8qtPdm+UrhuRANhYWR43i6ImDsJ3LumKn7b5TIKBj/sljgxb9VHncRqQA\nF9U97IyQ5eo38RZMBH/t5FgmWqvfiEn9Pco3wyOZ8BymST4tgr1mMTzqAFlWqCwY\n9uegPAA7COCjbTxTJ/bIgpDVdKXJaLE/kszGTFegD0gFv5gOdNnGMbCqFnQsww+D\nSxyhBn/FA67/3eNnM8NXjh3wkDB4XiyCila7qh9SuFY2EpgRav/DCdjcsSWtuFk=\n=ywWM\n-----END PGP SIGNATURE-----\n", "payload": "tree 99c7f1d2430cf3f2e714e068b212066513d2ed89\nparent 2c4dc4f494d26bf7df40895e594de3f0aeb24337\nparent d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231\nauthor Michael Goulet <michael@errs.io> 1662673268 -0700\ncommitter GitHub <noreply@github.com> 1662673268 -0700\n\nRollup merge of #101499 - spastorino:add-lowering-arena, r=oli-obk\n\nIntroduce lowering_arena to avoid creating AST nodes on the fly\n\n`@oli-obk` requested this and other changes as a way of simplifying https://github.com/rust-lang/rust/pull/101345. This is just going to make the diff of https://github.com/rust-lang/rust/pull/101345 smaller.\n\nr? `@oli-obk` `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1499c089df8c74b3a8f4d7d9f7de203c7bc38003", "html_url": "https://github.com/rust-lang/rust/commit/1499c089df8c74b3a8f4d7d9f7de203c7bc38003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1499c089df8c74b3a8f4d7d9f7de203c7bc38003/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4dc4f494d26bf7df40895e594de3f0aeb24337", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4dc4f494d26bf7df40895e594de3f0aeb24337", "html_url": "https://github.com/rust-lang/rust/commit/2c4dc4f494d26bf7df40895e594de3f0aeb24337"}, {"sha": "d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231", "html_url": "https://github.com/rust-lang/rust/commit/d9a1faaa9cff6eab069ea8e5cd7862d0ae48e231"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "9e05fbbdc1976836472bebdae162365aee2354ee", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1499c089df8c74b3a8f4d7d9f7de203c7bc38003/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1499c089df8c74b3a8f4d7d9f7de203c7bc38003/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=1499c089df8c74b3a8f4d7d9f7de203c7bc38003", "patch": "@@ -1,6 +1,6 @@\n use super::errors::{InvalidAbi, MisplacedRelaxTraitBound};\n use super::ResolverAstLoweringExt;\n-use super::{AstOwner, ImplTraitContext, ImplTraitPosition};\n+use super::{Arena, AstOwner, ImplTraitContext, ImplTraitPosition};\n use super::{FnDeclKind, LoweringContext, ParamMode};\n \n use rustc_ast::ptr::P;\n@@ -25,6 +25,7 @@ use std::iter;\n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n     pub(super) resolver: &'a mut ResolverAstLowering,\n+    pub(super) ast_arena: &'a Arena<'static>,\n     pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,\n     pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n }\n@@ -60,6 +61,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             tcx: self.tcx,\n             resolver: self.resolver,\n             arena: self.tcx.hir_arena,\n+            ast_arena: self.ast_arena,\n \n             // HirId handling.\n             bodies: Vec::new(),"}, {"sha": "f57c92fd70c274434ff5673dedd31d07ba934c9f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1499c089df8c74b3a8f4d7d9f7de203c7bc38003/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1499c089df8c74b3a8f4d7d9f7de203c7bc38003/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1499c089df8c74b3a8f4d7d9f7de203c7bc38003", "patch": "@@ -44,6 +44,7 @@ extern crate tracing;\n \n use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait};\n \n+use rustc_arena::declare_arena;\n use rustc_ast::ptr::P;\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n@@ -95,6 +96,13 @@ struct LoweringContext<'a, 'hir> {\n     /// Used to allocate HIR nodes.\n     arena: &'hir hir::Arena<'hir>,\n \n+    /// Used to allocate temporary AST nodes for use during lowering.\n+    /// This allows us to create \"fake\" AST -- these nodes can sometimes\n+    /// be allocated on the stack, but other times we need them to live longer\n+    /// than the current stack frame, so they can be collected into vectors\n+    /// and things like that.\n+    ast_arena: &'a Arena<'static>,\n+\n     /// Bodies inside the owner being lowered.\n     bodies: Vec<(hir::ItemLocalId, &'hir hir::Body<'hir>)>,\n     /// Attributes inside the owner being lowered.\n@@ -140,6 +148,15 @@ struct LoweringContext<'a, 'hir> {\n     generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,\n }\n \n+declare_arena!([\n+    [] tys: rustc_ast::Ty,\n+    [] aba: rustc_ast::AngleBracketedArgs,\n+    [] ptr: rustc_ast::PolyTraitRef,\n+    // This _marker field is needed because `declare_arena` creates `Arena<'tcx>` and we need to\n+    // use `'tcx`. If we don't have this we get a compile error.\n+    [] _marker: std::marker::PhantomData<&'tcx ()>,\n+]);\n+\n trait ResolverAstLoweringExt {\n     fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;\n     fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;\n@@ -401,10 +418,13 @@ pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n         tcx.definitions_untracked().def_index_count(),\n     );\n \n+    let ast_arena = Arena::default();\n+\n     for def_id in ast_index.indices() {\n         item::ItemLowerer {\n             tcx,\n             resolver: &mut resolver,\n+            ast_arena: &ast_arena,\n             ast_index: &ast_index,\n             owners: &mut owners,\n         }\n@@ -974,12 +994,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 GenericArgs::Parenthesized(ref data) => {\n                     self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n-                    self.lower_angle_bracketed_parameter_data(\n-                        &data.as_angle_bracketed_args(),\n-                        ParamMode::Explicit,\n-                        itctx,\n-                    )\n-                    .0\n+                    let aba = self.ast_arena.aba.alloc(data.as_angle_bracketed_args());\n+                    self.lower_angle_bracketed_parameter_data(aba, ParamMode::Explicit, itctx).0\n                 }\n             };\n             gen_args_ctor.into_generic_args(self)\n@@ -1048,15 +1064,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let node_id = this.next_node_id();\n-                        let ty = this.lower_ty(\n-                            &Ty {\n-                                id: node_id,\n-                                kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: this.lower_span(constraint.span),\n-                                tokens: None,\n-                            },\n-                            itctx,\n-                        );\n+                        let ty = this.ast_arena.tys.alloc(Ty {\n+                            id: node_id,\n+                            kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n+                            span: this.lower_span(constraint.span),\n+                            tokens: None,\n+                        });\n+                        let ty = this.lower_ty(ty, itctx);\n \n                         hir::TypeBindingKind::Equality { term: ty.into() }\n                     })\n@@ -1192,12 +1206,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             && let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = partial_res.base_res()\n         {\n             let (bounds, lifetime_bound) = self.with_dyn_type_scope(true, |this| {\n+                let poly_trait_ref = this.ast_arena.ptr.alloc(PolyTraitRef {\n+                    bound_generic_params: vec![],\n+                    trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n+                    span: t.span\n+                });\n                 let bound = this.lower_poly_trait_ref(\n-                    &PolyTraitRef {\n-                        bound_generic_params: vec![],\n-                        trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n-                        span: t.span\n-                    },\n+                    poly_trait_ref,\n                     itctx,\n                 );\n                 let bounds = this.arena.alloc_from_iter([bound]);"}]}