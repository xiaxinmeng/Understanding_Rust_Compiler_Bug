{"sha": "30477a8dec0a0c750300581aa4e57fd829198a4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNDc3YThkZWMwYTBjNzUwMzAwNTgxYWE0ZTU3ZmQ4MjkxOThhNGM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-06T18:55:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-06T18:55:06Z"}, "message": "Rollup merge of #41108 - arielb1:tuple-blame, r=estebank\n\ndon't try to blame tuple fields for immutability\n\nTuple fields don't have an `&T` in their declaration that can be changed\nto `&mut T` - skip them..\n\nFixes #41104.\n\nr? @nikomatsakis", "tree": {"sha": "24ed43f27bff30e40cc7fa34e419c37d5f00ec8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ed43f27bff30e40cc7fa34e419c37d5f00ec8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30477a8dec0a0c750300581aa4e57fd829198a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30477a8dec0a0c750300581aa4e57fd829198a4c", "html_url": "https://github.com/rust-lang/rust/commit/30477a8dec0a0c750300581aa4e57fd829198a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30477a8dec0a0c750300581aa4e57fd829198a4c/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7502761ff251748c146cbd7680b02a6337b11f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7502761ff251748c146cbd7680b02a6337b11f6", "html_url": "https://github.com/rust-lang/rust/commit/a7502761ff251748c146cbd7680b02a6337b11f6"}, {"sha": "95bd41e339ad07a2d7fb347de0a71fcdf155f2d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/95bd41e339ad07a2d7fb347de0a71fcdf155f2d5", "html_url": "https://github.com/rust-lang/rust/commit/95bd41e339ad07a2d7fb347de0a71fcdf155f2d5"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "7d3c17a048917adf85f0477eae8ce3e0bf29d801", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30477a8dec0a0c750300581aa4e57fd829198a4c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30477a8dec0a0c750300581aa4e57fd829198a4c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=30477a8dec0a0c750300581aa4e57fd829198a4c", "patch": "@@ -202,11 +202,14 @@ pub enum ImmutabilityBlame<'tcx> {\n }\n \n impl<'tcx> cmt_<'tcx> {\n-    fn resolve_field(&self, field_name: FieldName) -> (&'tcx ty::AdtDef, &'tcx ty::FieldDef)\n+    fn resolve_field(&self, field_name: FieldName) -> Option<(&'tcx ty::AdtDef, &'tcx ty::FieldDef)>\n     {\n-        let adt_def = self.ty.ty_adt_def().unwrap_or_else(|| {\n-            bug!(\"interior cmt {:?} is not an ADT\", self)\n-        });\n+        let adt_def = match self.ty.sty {\n+            ty::TyAdt(def, _) => def,\n+            ty::TyTuple(..) => return None,\n+            // closures get `Categorization::Upvar` rather than `Categorization::Interior`\n+            _ =>  bug!(\"interior cmt {:?} is not an ADT\", self)\n+        };\n         let variant_def = match self.cat {\n             Categorization::Downcast(_, variant_did) => {\n                 adt_def.variant_with_id(variant_did)\n@@ -220,7 +223,7 @@ impl<'tcx> cmt_<'tcx> {\n             NamedField(name) => variant_def.field_named(name),\n             PositionalField(idx) => &variant_def.fields[idx]\n         };\n-        (adt_def, field_def)\n+        Some((adt_def, field_def))\n     }\n \n     pub fn immutability_blame(&self) -> Option<ImmutabilityBlame<'tcx>> {\n@@ -232,8 +235,9 @@ impl<'tcx> cmt_<'tcx> {\n                     Categorization::Local(node_id) =>\n                         Some(ImmutabilityBlame::LocalDeref(node_id)),\n                     Categorization::Interior(ref base_cmt, InteriorField(field_name)) => {\n-                        let (adt_def, field_def) = base_cmt.resolve_field(field_name);\n-                        Some(ImmutabilityBlame::AdtFieldDeref(adt_def, field_def))\n+                        base_cmt.resolve_field(field_name).map(|(adt_def, field_def)| {\n+                            ImmutabilityBlame::AdtFieldDeref(adt_def, field_def)\n+                        })\n                     }\n                     Categorization::Upvar(Upvar { id, .. }) => {\n                         if let NoteClosureEnv(..) = self.note {"}, {"sha": "d7c8935560623118722a329e82234d7b59a97332", "filename": "src/test/ui/did_you_mean/issue-39544.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30477a8dec0a0c750300581aa4e57fd829198a4c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30477a8dec0a0c750300581aa4e57fd829198a4c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.rs?ref=30477a8dec0a0c750300581aa4e57fd829198a4c", "patch": "@@ -51,3 +51,9 @@ pub fn with_arg(z: Z, w: &Z) {\n     let _ = &mut z.x;\n     let _ = &mut w.x;\n }\n+\n+pub fn with_tuple() {\n+    let mut y = 0;\n+    let x = (&y,);\n+    *x.0 = 1;\n+}"}, {"sha": "2e98bc65e9e9f0c268e3badf0b5e61bdc11f914a", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30477a8dec0a0c750300581aa4e57fd829198a4c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30477a8dec0a0c750300581aa4e57fd829198a4c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=30477a8dec0a0c750300581aa4e57fd829198a4c", "patch": "@@ -90,5 +90,11 @@ error: cannot borrow immutable field `w.x` as mutable\n 52 |     let _ = &mut w.x;\n    |                  ^^^ cannot mutably borrow immutable field\n \n-error: aborting due to 11 previous errors\n+error: cannot assign to immutable borrowed content `*x.0`\n+  --> $DIR/issue-39544.rs:58:5\n+   |\n+58 |     *x.0 = 1;\n+   |     ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 12 previous errors\n "}]}