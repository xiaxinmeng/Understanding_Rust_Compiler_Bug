{"sha": "18ad86fddac4c4315df168d84b714cc07b096e0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YWQ4NmZkZGFjNGM0MzE1ZGYxNjhkODRiNzE0Y2MwN2IwOTZlMGM=", "commit": {"author": {"name": "nathanwhit", "email": "nathan.whitaker01@gmail.com", "date": "2020-04-20T19:29:53Z"}, "committer": {"name": "nathanwhit", "email": "nathan.whitaker01@gmail.com", "date": "2020-04-22T16:21:22Z"}, "message": "Add tests for enum completion\n\nAdds tests for completion of enum variants in match arms, if-let statements, and basic expressions.", "tree": {"sha": "f782b0be8d4be96d96e05d597d60cc800e5050ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f782b0be8d4be96d96e05d597d60cc800e5050ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18ad86fddac4c4315df168d84b714cc07b096e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18ad86fddac4c4315df168d84b714cc07b096e0c", "html_url": "https://github.com/rust-lang/rust/commit/18ad86fddac4c4315df168d84b714cc07b096e0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18ad86fddac4c4315df168d84b714cc07b096e0c/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86645097456c6f017e7a85acd638345aab51e35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/86645097456c6f017e7a85acd638345aab51e35b", "html_url": "https://github.com/rust-lang/rust/commit/86645097456c6f017e7a85acd638345aab51e35b"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "b4da342b5e044a9ded40a93bf24a25fb069bb208", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/18ad86fddac4c4315df168d84b714cc07b096e0c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ad86fddac4c4315df168d84b714cc07b096e0c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=18ad86fddac4c4315df168d84b714cc07b096e0c", "patch": "@@ -1130,4 +1130,182 @@ mod tests {\n         \"###\n         );\n     }\n+    #[test]\n+    fn completes_enum_variant_matcharm() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum Foo {\n+                    Bar,\n+                    Baz,\n+                    Quux\n+                }\n+\n+                fn main() {\n+                    let foo = Foo::Quux;\n+\n+                    match foo {\n+                        Qu<|>\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [248; 250),\n+                delete: [248; 250),\n+                insert: \"Foo\",\n+                kind: Enum,\n+            },\n+            CompletionItem {\n+                label: \"Foo::Bar\",\n+                source_range: [248; 250),\n+                delete: [248; 250),\n+                insert: \"Foo::Bar\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+            CompletionItem {\n+                label: \"Foo::Baz\",\n+                source_range: [248; 250),\n+                delete: [248; 250),\n+                insert: \"Foo::Baz\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+            CompletionItem {\n+                label: \"Foo::Quux\",\n+                source_range: [248; 250),\n+                delete: [248; 250),\n+                insert: \"Foo::Quux\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+        ]\n+        \"###\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_enum_variant_iflet() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum Foo {\n+                    Bar,\n+                    Baz,\n+                    Quux\n+                }\n+\n+                fn main() {\n+                    let foo = Foo::Quux;\n+\n+                    if let Qu<|> = foo {\n+\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [219; 221),\n+                delete: [219; 221),\n+                insert: \"Foo\",\n+                kind: Enum,\n+            },\n+            CompletionItem {\n+                label: \"Foo::Bar\",\n+                source_range: [219; 221),\n+                delete: [219; 221),\n+                insert: \"Foo::Bar\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+            CompletionItem {\n+                label: \"Foo::Baz\",\n+                source_range: [219; 221),\n+                delete: [219; 221),\n+                insert: \"Foo::Baz\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+            CompletionItem {\n+                label: \"Foo::Quux\",\n+                source_range: [219; 221),\n+                delete: [219; 221),\n+                insert: \"Foo::Quux\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+        ]\n+        \"###\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_enum_variant_basic_expr() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum Foo {\n+                    Bar,\n+                    Baz,\n+                    Quux\n+                }\n+\n+                fn main() {\n+                    let foo: Foo = Q<|>\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [185; 186),\n+                delete: [185; 186),\n+                insert: \"Foo\",\n+                kind: Enum,\n+            },\n+            CompletionItem {\n+                label: \"Foo::Bar\",\n+                source_range: [185; 186),\n+                delete: [185; 186),\n+                insert: \"Foo::Bar\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+            CompletionItem {\n+                label: \"Foo::Baz\",\n+                source_range: [185; 186),\n+                delete: [185; 186),\n+                insert: \"Foo::Baz\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+            CompletionItem {\n+                label: \"Foo::Quux\",\n+                source_range: [185; 186),\n+                delete: [185; 186),\n+                insert: \"Foo::Quux\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+            CompletionItem {\n+                label: \"main()\",\n+                source_range: [185; 186),\n+                delete: [185; 186),\n+                insert: \"main()$0\",\n+                kind: Function,\n+                lookup: \"main\",\n+                detail: \"fn main()\",\n+            },\n+        ]\n+        \"###\n+        )\n+    }\n }"}]}