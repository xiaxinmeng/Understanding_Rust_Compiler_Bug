{"sha": "0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYjdjNGQxYjlhMGI0MzJkYjAyOTJiMmM0MmU4OGMyZmEyMWNiMDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-14T17:49:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-14T17:49:33Z"}, "message": "Implement some intrinsics and fix a codegen error\n\n* intrinsic size_of_val for sized types\n* intrinsic needs_drop\n* incorrect codegen for UnOp::Not for bools", "tree": {"sha": "9af31da40457bff8320b3245317bf39cf3ef60c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9af31da40457bff8320b3245317bf39cf3ef60c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02", "html_url": "https://github.com/rust-lang/rust/commit/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c17aba921a92dd20c46e32ccfbc8181b7f3235", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c17aba921a92dd20c46e32ccfbc8181b7f3235", "html_url": "https://github.com/rust-lang/rust/commit/87c17aba921a92dd20c46e32ccfbc8181b7f3235"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "6e2e9dd37f63e9e63a77bde384a80108694c29b1", "filename": "examples/mini_core.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02", "patch": "@@ -50,6 +50,21 @@ unsafe impl Sync for [u8; 16] {}\n #[lang = \"freeze\"]\n trait Freeze {}\n \n+#[lang = \"not\"]\n+pub trait Not {\n+    type Output;\n+\n+    fn not(self) -> Self::Output;\n+}\n+\n+impl Not for bool {\n+    type Output = bool;\n+\n+    fn not(self) -> bool {\n+        !self\n+    }\n+}\n+\n #[lang = \"mul\"]\n pub trait Mul<RHS = Self> {\n     type Output;\n@@ -211,6 +226,7 @@ pub mod intrinsics {\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn uninit<T>() -> T;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n+        pub fn needs_drop<T>() -> bool;\n     }\n }\n "}, {"sha": "5948415c92913aa3ea01c02cad2cf7b3421acdbd", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02", "patch": "@@ -20,7 +20,9 @@ unsafe extern \"C\" fn my_puts(s: *const u8) {\n // TODO remove when jit supports linking rlibs\n #[cfg(jit)]\n fn panic<T>(_: T) {\n-    loop {}\n+    unsafe {\n+        intrinsics::abort();\n+    }\n }\n \n #[lang = \"termination\"]\n@@ -113,6 +115,18 @@ fn main() {\n         if intrinsics::size_of_val(a) as u8 != 16 {\n             panic(&(\"\", \"\", 0, 0));\n         }\n+\n+        if intrinsics::size_of_val(&0u32) as u8 != 4 {\n+            panic(&(\"\", \"\", 0, 0));\n+        }\n+\n+        if intrinsics::needs_drop::<u8>() {\n+            panic(&(\"\", \"\", 0, 0));\n+        }\n+\n+        if !intrinsics::needs_drop::<NoisyDrop>() {\n+            panic(&(\"\", \"\", 0, 0));\n+        }\n     }\n \n     let _ = NoisyDrop {"}, {"sha": "8ae0136d00c529aa3dd0371cc4431876946fc441", "filename": "src/abi.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02", "patch": "@@ -660,7 +660,11 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 }\n                 \"size_of_val\" => {\n                     assert_eq!(args.len(), 1);\n-                    let size = match &substs.type_at(0).sty {\n+                    let layout = fx.layout_of(substs.type_at(0));\n+                    let size = match &layout.ty.sty {\n+                        _ if !layout.is_unsized() => {\n+                            fx.bcx.ins().iconst(fx.module.pointer_type(), layout.size.bytes() as i64)\n+                        }\n                         ty::Slice(elem) => {\n                             let len = args[0].load_value_pair(fx).1;\n                             let elem_size = fx.layout_of(elem).size.bytes();\n@@ -821,6 +825,17 @@ fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n                     ret.write_cvalue(fx, res);\n                 }\n+                \"needs_drop\" => {\n+                    assert_eq!(args.len(), 0);\n+                    let ty = substs.type_at(0);\n+                    let needs_drop = if ty.needs_drop(fx.tcx, ParamEnv::reveal_all()) {\n+                        1\n+                    } else {\n+                        0\n+                    };\n+                    let needs_drop = CValue::const_val(fx, fx.tcx.types.bool, needs_drop);\n+                    ret.write_cvalue(fx, needs_drop);\n+                }\n                 _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n             }\n "}, {"sha": "8f2ab83ceeddca0bbf6d9f7f05c8cd15bff72ed0", "filename": "src/base.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0fb7c4d1b9a0b432db0292b2c42e88c2fa21cb02", "patch": "@@ -432,19 +432,31 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::UnaryOp(un_op, operand) => {\n-                    let ty = fx.monomorphize(&operand.ty(&fx.mir.local_decls, fx.tcx));\n-                    let layout = fx.layout_of(ty);\n-                    let val = trans_operand(fx, operand).load_value(fx);\n+                    let operand = trans_operand(fx, operand);\n+                    let layout = operand.layout();\n+                    let val = operand.load_value(fx);\n                     let res = match un_op {\n-                        UnOp::Not => fx.bcx.ins().bnot(val),\n-                        UnOp::Neg => match ty.sty {\n+                        UnOp::Not => {\n+                            match layout.ty.sty {\n+                                ty::Bool => {\n+                                    let val = fx.bcx.ins().uextend(types::I32, val); // WORKAROUND for CraneStation/cranelift#466\n+                                    let res = fx.bcx.ins().icmp_imm(IntCC::Equal, val, 0);\n+                                    fx.bcx.ins().bint(types::I8, res)\n+                                }\n+                                ty::Uint(_) | ty::Int(_) => {\n+                                    fx.bcx.ins().bnot(val)\n+                                }\n+                                _ => unimplemented!(\"un op Not for {:?}\", layout.ty),\n+                            }\n+                        },\n+                        UnOp::Neg => match layout.ty.sty {\n                             ty::Int(_) => {\n-                                let clif_ty = fx.cton_type(ty).unwrap();\n+                                let clif_ty = fx.cton_type(layout.ty).unwrap();\n                                 let zero = fx.bcx.ins().iconst(clif_ty, 0);\n                                 fx.bcx.ins().isub(zero, val)\n                             }\n                             ty::Float(_) => fx.bcx.ins().fneg(val),\n-                            _ => unimplemented!(\"un op Neg for {:?}\", ty),\n+                            _ => unimplemented!(\"un op Neg for {:?}\", layout.ty),\n                         },\n                     };\n                     lval.write_cvalue(fx, CValue::ByVal(res, layout));"}]}