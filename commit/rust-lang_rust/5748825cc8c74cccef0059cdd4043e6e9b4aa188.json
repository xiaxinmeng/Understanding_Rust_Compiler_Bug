{"sha": "5748825cc8c74cccef0059cdd4043e6e9b4aa188", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NDg4MjVjYzhjNzRjY2NlZjAwNTljZGQ0MDQzZTZlOWI0YWExODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-01T03:11:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-01T03:11:19Z"}, "message": "Auto merge of #61682 - Centril:stabilize-type_alias_enum_variants, r=petrochenkov\n\nStabilize `type_alias_enum_variants` in Rust 1.37.0\n\nStabilize `#![feature(type_alias_enum_variants)]` which allows type-relative resolution with highest priority to `enum` variants in both expression and pattern contexts. For example, you may now write:\n\n```rust\nenum Option<T> {\n    None,\n    Some(T),\n}\n\ntype OptAlias<T> = Option<T>;\n\nfn work_on_alias(x: Option<u8>) -> u8 {\n    match x {\n        OptAlias::Some(y) => y + 1,\n        OptAlias::None => 0,\n    }\n}\n```\n\nCloses https://github.com/rust-lang/rfcs/issues/2218\nCloses https://github.com/rust-lang/rust/issues/52118\n\nr? @petrochenkov", "tree": {"sha": "0b989373bea2f277c413b84b9ab236141a83885d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b989373bea2f277c413b84b9ab236141a83885d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5748825cc8c74cccef0059cdd4043e6e9b4aa188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5748825cc8c74cccef0059cdd4043e6e9b4aa188", "html_url": "https://github.com/rust-lang/rust/commit/5748825cc8c74cccef0059cdd4043e6e9b4aa188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5748825cc8c74cccef0059cdd4043e6e9b4aa188/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "html_url": "https://github.com/rust-lang/rust/commit/0af8e872ea5ac77effa59f8d3f8794f12cb8865c"}, {"sha": "57e6869a6be56cd75e382deb313fb5f4d1bb1fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e6869a6be56cd75e382deb313fb5f4d1bb1fda", "html_url": "https://github.com/rust-lang/rust/commit/57e6869a6be56cd75e382deb313fb5f4d1bb1fda"}], "stats": {"total": 722, "additions": 399, "deletions": 323}, "files": [{"sha": "bcdeafc4b113717c431d8f833ae20a6a5c54e441", "filename": "src/doc/unstable-book/src/language-features/type-alias-enum-variants.md", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-alias-enum-variants.md", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-alias-enum-variants.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftype-alias-enum-variants.md?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,36 +0,0 @@\n-# `type_alias_enum_variants`\n-\n-The tracking issue for this feature is: [#49683]\n-\n-[#49683]: https://github.com/rust-lang/rust/issues/49683\n-\n-------------------------\n-\n-The `type_alias_enum_variants` feature enables the use of variants on type\n-aliases that refer to enums, as both a constructor and a pattern. That is,\n-it allows for the syntax `EnumAlias::Variant`, which behaves exactly the same\n-as `Enum::Variant` (assuming that `EnumAlias` is an alias for some enum type\n-`Enum`).\n-\n-Note that since `Self` exists as a type alias, this feature also enables the\n-use of the syntax `Self::Variant` within an impl block for an enum type.\n-\n-```rust\n-#![feature(type_alias_enum_variants)]\n-\n-enum Foo {\n-    Bar(i32),\n-    Baz { i: i32 },\n-}\n-\n-type Alias = Foo;\n-\n-fn main() {\n-    let t = Alias::Bar(0);\n-    let t = Alias::Baz { i: 0 };\n-    match t {\n-        Alias::Bar(_i) => {}\n-        Alias::Baz { i: _i } => {}\n-    }\n-}\n-```"}, {"sha": "f4c23a023b104d12ae076c3bb3d8c6799846ef1c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -6,7 +6,7 @@\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(type_alias_enum_variants)]\n+#![cfg_attr(bootstrap, feature(type_alias_enum_variants))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "9b8f6a556bf882b6371c85fa10fae89734f53472", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -34,7 +34,6 @@ use std::collections::BTreeSet;\n use std::iter;\n use std::slice;\n \n-use super::{check_type_alias_enum_variants_enabled};\n use rustc_data_structures::fx::FxHashSet;\n \n #[derive(Debug)]\n@@ -1595,7 +1594,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 });\n                 if let Some(variant_def) = variant_def {\n                     if permit_variants {\n-                        check_type_alias_enum_variants_enabled(tcx, span);\n                         tcx.check_stability(variant_def.def_id, Some(hir_ref_id), span);\n                         return Ok((qself_ty, DefKind::Variant, variant_def.def_id));\n                     } else {"}, {"sha": "b8b65279fe7670c58e3d84a5c55687e41840737d", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -26,7 +26,6 @@ use rustc::infer::{self, InferOk};\n use syntax::ast;\n use syntax_pos::Span;\n \n-use crate::{check_type_alias_enum_variants_enabled};\n use self::probe::{IsSuggestion, ProbeScope};\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n@@ -417,8 +416,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     tcx.hygienic_eq(method_name, vd.ident, adt_def.did)\n                 });\n                 if let Some(variant_def) = variant_def {\n-                    check_type_alias_enum_variants_enabled(tcx, span);\n-\n                     // Braced variants generate unusable names in value namespace (reserved for\n                     // possible future use), so variants resolved as associated items may refer to\n                     // them as well. It's ok to use the variant's id as a ctor id since an"}, {"sha": "85ae55b2dd94692baec6f7fc9737b9e42e3c4ad2", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -105,7 +105,7 @@ use rustc::lint;\n use rustc::middle;\n use rustc::session;\n use rustc::util::common::ErrorReported;\n-use rustc::session::config::{EntryFnType, nightly_options};\n+use rustc::session::config::EntryFnType;\n use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -124,21 +124,6 @@ pub struct TypeAndSubsts<'tcx> {\n     ty: Ty<'tcx>,\n }\n \n-fn check_type_alias_enum_variants_enabled<'tcx>(tcx: TyCtxt<'tcx>, span: Span) {\n-    if !tcx.features().type_alias_enum_variants {\n-        let mut err = tcx.sess.struct_span_err(\n-            span,\n-            \"enum variants on type aliases are experimental\"\n-        );\n-        if nightly_options::is_nightly_build() {\n-            help!(&mut err,\n-                \"add `#![feature(type_alias_enum_variants)]` to the \\\n-                crate attributes to enable\");\n-        }\n-        err.emit();\n-    }\n-}\n-\n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl, abi: Abi, span: Span) {\n     if decl.c_variadic && !(abi == Abi::C || abi == Abi::Cdecl) {\n         let mut err = struct_span_err!(tcx.sess, span, E0045,"}, {"sha": "f97e9d43854fcc56a4ac23dce7add9c1949c5968", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -530,9 +530,6 @@ declare_features! (\n     // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n-    // Allows paths to enum variants on type aliases.\n-    (active, type_alias_enum_variants, \"1.31.0\", Some(49683), None),\n-\n     // Allows exhaustive integer pattern matching on `usize` and `isize`.\n     (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n \n@@ -853,6 +850,8 @@ declare_features! (\n     (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n     // Allows arbitrary delimited token streams in non-macro attributes.\n     (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n+    // Allows paths to enum variants on type aliases including `Self`.\n+    (accepted, type_alias_enum_variants, \"1.37.0\", Some(49683), None),\n     // Allows using `#[repr(align(X))]` on enums with equivalent semantics\n     // to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n     (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),"}, {"sha": "0cf413babcbf658f38ba1975fa0093d3eedafcac", "filename": "src/test/run-pass/type-alias-enum-variants-2.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants-2.rs?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,30 +0,0 @@\n-#![feature(type_alias_enum_variants)]\n-\n-#[derive(Debug, PartialEq, Eq)]\n-enum Foo {\n-    Bar(i32),\n-    Baz { i: i32 },\n-}\n-\n-type FooAlias = Foo;\n-type OptionAlias = Option<i32>;\n-\n-impl Foo {\n-    fn foo() -> Self {\n-        Self::Bar(3)\n-    }\n-}\n-\n-fn main() {\n-    let t = FooAlias::Bar(1);\n-    assert_eq!(t, Foo::Bar(1));\n-    let t = FooAlias::Baz { i: 2 };\n-    assert_eq!(t, Foo::Baz { i: 2 });\n-    match t {\n-        FooAlias::Bar(_i) => {}\n-        FooAlias::Baz { i } => { assert_eq!(i, 2); }\n-    }\n-    assert_eq!(Foo::foo(), Foo::Bar(3));\n-\n-    assert_eq!(OptionAlias::Some(4), Option::Some(4));\n-}"}, {"sha": "0cf413babcbf658f38ba1975fa0093d3eedafcac", "filename": "src/test/run-pass/type-alias-enum-variants.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-alias-enum-variants.rs?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,30 +0,0 @@\n-#![feature(type_alias_enum_variants)]\n-\n-#[derive(Debug, PartialEq, Eq)]\n-enum Foo {\n-    Bar(i32),\n-    Baz { i: i32 },\n-}\n-\n-type FooAlias = Foo;\n-type OptionAlias = Option<i32>;\n-\n-impl Foo {\n-    fn foo() -> Self {\n-        Self::Bar(3)\n-    }\n-}\n-\n-fn main() {\n-    let t = FooAlias::Bar(1);\n-    assert_eq!(t, Foo::Bar(1));\n-    let t = FooAlias::Baz { i: 2 };\n-    assert_eq!(t, Foo::Baz { i: 2 });\n-    match t {\n-        FooAlias::Bar(_i) => {}\n-        FooAlias::Baz { i } => { assert_eq!(i, 2); }\n-    }\n-    assert_eq!(Foo::foo(), Foo::Bar(3));\n-\n-    assert_eq!(OptionAlias::Some(4), Option::Some(4));\n-}"}, {"sha": "c7d3304a128ddcff548f9a6f60b42d70dce98560", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_enum_variants.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.rs?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,19 +0,0 @@\n-enum Foo {\n-    Bar(i32),\n-    Baz { i: i32 },\n-}\n-\n-type Alias = Foo;\n-\n-fn main() {\n-    let t = Alias::Bar(0);\n-    //~^ ERROR enum variants on type aliases are experimental\n-    let t = Alias::Baz { i: 0 };\n-    //~^ ERROR enum variants on type aliases are experimental\n-    match t {\n-        Alias::Bar(_i) => {}\n-        //~^ ERROR enum variants on type aliases are experimental\n-        Alias::Baz { i: _i } => {}\n-        //~^ ERROR enum variants on type aliases are experimental\n-    }\n-}"}, {"sha": "43535af7c69d8aef897234e0a255ac0bcc7552c3", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_enum_variants.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_enum_variants.stderr?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,34 +0,0 @@\n-error: enum variants on type aliases are experimental\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:9:13\n-   |\n-LL |     let t = Alias::Bar(0);\n-   |             ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(type_alias_enum_variants)]` to the crate attributes to enable\n-\n-error: enum variants on type aliases are experimental\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:11:13\n-   |\n-LL |     let t = Alias::Baz { i: 0 };\n-   |             ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(type_alias_enum_variants)]` to the crate attributes to enable\n-\n-error: enum variants on type aliases are experimental\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:14:9\n-   |\n-LL |         Alias::Bar(_i) => {}\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(type_alias_enum_variants)]` to the crate attributes to enable\n-\n-error: enum variants on type aliases are experimental\n-  --> $DIR/feature-gate-type_alias_enum_variants.rs:16:9\n-   |\n-LL |         Alias::Baz { i: _i } => {}\n-   |         ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(type_alias_enum_variants)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "f97592f5d3b150ce55182fede7a4b6f648c96cd1", "filename": "src/test/ui/type-alias-enum-variants-panic.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.rs?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,17 +0,0 @@\n-// ignore-tidy-linelength\n-\n-#![feature(type_alias_enum_variants)]\n-\n-#![allow(unreachable_code)]\n-\n-enum Enum { Variant {} }\n-type Alias = Enum;\n-\n-fn main() {\n-    Alias::Variant;\n-    //~^ ERROR expected unit struct/variant or constant, found struct variant `<Alias>::Variant` [E0533]\n-    let Alias::Variant = panic!();\n-    //~^ ERROR expected unit struct/variant or constant, found struct variant `<Alias>::Variant` [E0533]\n-    let Alias::Variant(..) = panic!();\n-    //~^ ERROR expected tuple struct/variant, found struct variant `<Alias>::Variant` [E0164]\n-}"}, {"sha": "24cf85f52783f7bce4b98c165a2705c2bbba695b", "filename": "src/test/ui/type-alias-enum-variants-panic.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-panic.stderr?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,21 +0,0 @@\n-error[E0533]: expected unit struct/variant or constant, found struct variant `<Alias>::Variant`\n-  --> $DIR/type-alias-enum-variants-panic.rs:11:5\n-   |\n-LL |     Alias::Variant;\n-   |     ^^^^^^^^^^^^^^\n-\n-error[E0533]: expected unit struct/variant or constant, found struct variant `<Alias>::Variant`\n-  --> $DIR/type-alias-enum-variants-panic.rs:13:9\n-   |\n-LL |     let Alias::Variant = panic!();\n-   |         ^^^^^^^^^^^^^^\n-\n-error[E0164]: expected tuple struct/variant, found struct variant `<Alias>::Variant`\n-  --> $DIR/type-alias-enum-variants-panic.rs:15:9\n-   |\n-LL |     let Alias::Variant(..) = panic!();\n-   |         ^^^^^^^^^^^^^^^^^^ not a tuple variant or struct\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0164`."}, {"sha": "295f8acf62f8539c6f134391c233f07502a00ad7", "filename": "src/test/ui/type-alias-enum-variants-priority-2.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.rs?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,13 +0,0 @@\n-#![feature(type_alias_enum_variants)]\n-\n-enum E {\n-    V(u8)\n-}\n-\n-impl E {\n-    fn V() {}\n-}\n-\n-fn main() {\n-    <E>::V(); //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n-}"}, {"sha": "10a4b44084a48859cd1edab9bce8c4951a8eaa94", "filename": "src/test/ui/type-alias-enum-variants-priority-2.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-2.stderr?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,12 +0,0 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n-  --> $DIR/type-alias-enum-variants-priority-2.rs:12:5\n-   |\n-LL |     V(u8)\n-   |     ----- defined here\n-...\n-LL |     <E>::V();\n-   |     ^^^^^^^^ expected 1 parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0061`."}, {"sha": "33f96553b57f03a79b9d16c39edec315bb61710f", "filename": "src/test/ui/type-alias-enum-variants-priority-3.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority-3.rs?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,10 +0,0 @@\n-#![feature(type_alias_enum_variants)]\n-\n-enum E {\n-    V\n-}\n-\n-fn check() -> <E>::V {}\n-//~^ ERROR expected type, found variant `V`\n-\n-fn main() {}"}, {"sha": "82cd21b09d3e7de0717d80df8876d3d58a128f17", "filename": "src/test/ui/type-alias-enum-variants-priority.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants-priority.rs?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,19 +0,0 @@\n-#![feature(type_alias_enum_variants)]\n-\n-enum E {\n-    V\n-}\n-\n-trait Tr {\n-    type V;\n-    fn f() -> Self::V;\n-}\n-\n-impl Tr for E {\n-    type V = u8;\n-    fn f() -> Self::V { 0 }\n-    //~^ ERROR ambiguous associated item\n-    //~| WARN this was previously accepted\n-}\n-\n-fn main() {}"}, {"sha": "c5974e55692232da734abd7244782a89eb7538a6", "filename": "src/test/ui/type-alias-enum-variants.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af8e872ea5ac77effa59f8d3f8794f12cb8865c/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants.rs?ref=0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "patch": "@@ -1,11 +0,0 @@\n-#![feature(type_alias_enum_variants)]\n-\n-type Alias<T> = Option<T>;\n-\n-fn main() {\n-    let _ = Option::<u8>::None; // OK\n-    let _ = Option::None::<u8>; // OK (Lint in future!)\n-    let _ = Alias::<u8>::None; // OK\n-    let _ = Alias::None::<u8>; // Error\n-    //~^ type arguments are not allowed for this type\n-}"}, {"sha": "0c212096f92347f20f4bcdf70a022751316e0e19", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args-pass.rs", "status": "renamed", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args-pass.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,17 +1,22 @@\n // run-pass\n \n-#![feature(type_alias_enum_variants)]\n+// Check that resolving, in the value namespace, to an `enum` variant\n+// through a type alias is well behaved in the presence of generics.\n+// We check for situations with:\n+// 1. a generic type `Alias<T>`, we can type-apply `Alias` when referring to a variant.\n+// 2. a monotype `AliasFixed` of generic `Enum<T>`, we can refer to variants\n+//    and the type-application of `T` in `AliasFixed` is kept.\n \n #![allow(irrefutable_let_patterns)]\n \n-#[allow(dead_code)]\n-enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n type Alias<T> = Enum<T>;\n type AliasFixed = Enum<()>;\n \n macro_rules! is_variant {\n     (TSVariant, $expr:expr) => (is_variant!(@check TSVariant, (_), $expr));\n     (SVariant, $expr:expr) => (is_variant!(@check SVariant, { v: _ }, $expr));\n+    (UVariant, $expr:expr) => (is_variant!(@check UVariant, {}, $expr));\n     (@check $variant:ident, $matcher:tt, $expr:expr) => (\n         assert!(if let Enum::$variant::<()> $matcher = $expr { true } else { false },\n                 \"expr does not have correct type\");\n@@ -40,4 +45,15 @@ fn main() {\n     is_variant!(SVariant, Alias::<()>::SVariant { v: () });\n \n     is_variant!(SVariant, AliasFixed::SVariant { v: () });\n+\n+    // Unit variant\n+\n+    is_variant!(UVariant, Enum::UVariant);\n+    is_variant!(UVariant, Enum::UVariant::<()>);\n+    is_variant!(UVariant, Enum::<()>::UVariant);\n+\n+    is_variant!(UVariant, Alias::UVariant);\n+    is_variant!(UVariant, Alias::<()>::UVariant);\n+\n+    is_variant!(UVariant, AliasFixed::UVariant);\n }", "previous_filename": "src/test/ui/pattern/enum-variant-generic-args.rs"}, {"sha": "f182c3ba8c798ae86016659728efc0bc1c9aa088", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.rs", "status": "renamed", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,6 +1,10 @@\n-#![feature(type_alias_enum_variants)]\n+// Checks that applied type arguments of enums, and aliases to them, are respected.\n+// For example, `Self` is never a type constructor. Therefore, no types can be applied to it.\n+//\n+// We also check that the variant to an type-aliased enum cannot be type applied whether\n+// that alias is generic or monomorphic.\n \n-enum Enum<T> { TSVariant(T), SVariant { v: T } }\n+enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n type Alias<T> = Enum<T>;\n type AliasFixed = Enum<()>;\n \n@@ -32,6 +36,16 @@ impl<T> Enum<T> {\n         //~^^ ERROR type arguments are not allowed for this type [E0109]\n         //~^^^ ERROR mismatched types [E0308]\n     }\n+\n+    fn u_variant() {\n+        Self::UVariant::<()>;\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        Self::<()>::UVariant;\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        Self::<()>::UVariant::<()>;\n+        //~^ ERROR type arguments are not allowed for this type [E0109]\n+        //~^^ ERROR type arguments are not allowed for this type [E0109]\n+    }\n }\n \n fn main() {\n@@ -70,4 +84,22 @@ fn main() {\n     AliasFixed::<()>::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n     //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+\n+    // Unit variant\n+\n+    Enum::<()>::UVariant::<()>;\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+\n+    Alias::UVariant::<()>;\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    Alias::<()>::UVariant::<()>;\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+\n+    AliasFixed::UVariant::<()>;\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    AliasFixed::<()>::UVariant;\n+    //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    AliasFixed::<()>::UVariant::<()>;\n+    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n }", "previous_filename": "src/test/ui/enum-variant-generic-args.rs"}, {"sha": "ee73622cb7bd1f9b260041a4b733dc1b60d510bb", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "renamed", "additions": 95, "deletions": 29, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:9:25\n+  --> $DIR/enum-variant-generic-args.rs:13:25\n    |\n LL |         Self::TSVariant(());\n    |                         ^^ expected type parameter, found ()\n@@ -8,19 +8,19 @@ LL |         Self::TSVariant(());\n               found type `()`\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:11:27\n+  --> $DIR/enum-variant-generic-args.rs:15:27\n    |\n LL |         Self::TSVariant::<()>(());\n    |                           ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:13:16\n+  --> $DIR/enum-variant-generic-args.rs:17:16\n    |\n LL |         Self::<()>::TSVariant(());\n    |                ^^ type argument not allowed\n \n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:13:31\n+  --> $DIR/enum-variant-generic-args.rs:17:31\n    |\n LL |         Self::<()>::TSVariant(());\n    |                               ^^ expected type parameter, found ()\n@@ -29,19 +29,19 @@ LL |         Self::<()>::TSVariant(());\n               found type `()`\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:16:16\n+  --> $DIR/enum-variant-generic-args.rs:20:16\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n    |                ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:16:33\n+  --> $DIR/enum-variant-generic-args.rs:20:33\n    |\n LL |         Self::<()>::TSVariant::<()>(());\n    |                                 ^^ type argument not allowed\n \n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:22:29\n+  --> $DIR/enum-variant-generic-args.rs:26:29\n    |\n LL |         Self::SVariant { v: () };\n    |                             ^^ expected type parameter, found ()\n@@ -50,13 +50,13 @@ LL |         Self::SVariant { v: () };\n               found type `()`\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:24:26\n+  --> $DIR/enum-variant-generic-args.rs:28:26\n    |\n LL |         Self::SVariant::<()> { v: () };\n    |                          ^^ type argument not allowed\n \n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:24:35\n+  --> $DIR/enum-variant-generic-args.rs:28:35\n    |\n LL |         Self::SVariant::<()> { v: () };\n    |                                   ^^ expected type parameter, found ()\n@@ -65,13 +65,13 @@ LL |         Self::SVariant::<()> { v: () };\n               found type `()`\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:27:16\n+  --> $DIR/enum-variant-generic-args.rs:31:16\n    |\n LL |         Self::<()>::SVariant { v: () };\n    |                ^^ type argument not allowed\n \n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:27:35\n+  --> $DIR/enum-variant-generic-args.rs:31:35\n    |\n LL |         Self::<()>::SVariant { v: () };\n    |                                   ^^ expected type parameter, found ()\n@@ -80,19 +80,19 @@ LL |         Self::<()>::SVariant { v: () };\n               found type `()`\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:30:16\n+  --> $DIR/enum-variant-generic-args.rs:34:16\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:30:32\n+  --> $DIR/enum-variant-generic-args.rs:34:32\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                                ^^ type argument not allowed\n \n error[E0308]: mismatched types\n-  --> $DIR/enum-variant-generic-args.rs:30:41\n+  --> $DIR/enum-variant-generic-args.rs:34:41\n    |\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                                         ^^ expected type parameter, found ()\n@@ -101,90 +101,156 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n               found type `()`\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:40:29\n+  --> $DIR/enum-variant-generic-args.rs:41:26\n+   |\n+LL |         Self::UVariant::<()>;\n+   |                          ^^ type argument not allowed\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:43:16\n+   |\n+LL |         Self::<()>::UVariant;\n+   |                ^^ type argument not allowed\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:45:16\n+   |\n+LL |         Self::<()>::UVariant::<()>;\n+   |                ^^ type argument not allowed\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:45:32\n+   |\n+LL |         Self::<()>::UVariant::<()>;\n+   |                                ^^ type argument not allowed\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:54:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n    |                             ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:43:24\n+  --> $DIR/enum-variant-generic-args.rs:57:24\n    |\n LL |     Alias::TSVariant::<()>(());\n    |                        ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:45:30\n+  --> $DIR/enum-variant-generic-args.rs:59:30\n    |\n LL |     Alias::<()>::TSVariant::<()>(());\n    |                              ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:48:29\n+  --> $DIR/enum-variant-generic-args.rs:62:29\n    |\n LL |     AliasFixed::TSVariant::<()>(());\n    |                             ^^ type argument not allowed\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:50:18\n+  --> $DIR/enum-variant-generic-args.rs:64:18\n    |\n LL |     AliasFixed::<()>::TSVariant(());\n    |                  ^^ unexpected type argument\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:52:18\n+  --> $DIR/enum-variant-generic-args.rs:66:18\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                  ^^ unexpected type argument\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:52:35\n+  --> $DIR/enum-variant-generic-args.rs:66:35\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                                   ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:58:28\n+  --> $DIR/enum-variant-generic-args.rs:72:28\n    |\n LL |     Enum::<()>::SVariant::<()> { v: () };\n    |                            ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:61:23\n+  --> $DIR/enum-variant-generic-args.rs:75:23\n    |\n LL |     Alias::SVariant::<()> { v: () };\n    |                       ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:63:29\n+  --> $DIR/enum-variant-generic-args.rs:77:29\n    |\n LL |     Alias::<()>::SVariant::<()> { v: () };\n    |                             ^^ type argument not allowed\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:66:28\n+  --> $DIR/enum-variant-generic-args.rs:80:28\n    |\n LL |     AliasFixed::SVariant::<()> { v: () };\n    |                            ^^ type argument not allowed\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:68:18\n+  --> $DIR/enum-variant-generic-args.rs:82:18\n    |\n LL |     AliasFixed::<()>::SVariant { v: () };\n    |                  ^^ unexpected type argument\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:70:18\n+  --> $DIR/enum-variant-generic-args.rs:84:18\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |                  ^^ unexpected type argument\n \n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/enum-variant-generic-args.rs:70:34\n+  --> $DIR/enum-variant-generic-args.rs:84:34\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |                                  ^^ type argument not allowed\n \n-error: aborting due to 28 previous errors\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:90:28\n+   |\n+LL |     Enum::<()>::UVariant::<()>;\n+   |                            ^^ type argument not allowed\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:93:23\n+   |\n+LL |     Alias::UVariant::<()>;\n+   |                       ^^ type argument not allowed\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:95:29\n+   |\n+LL |     Alias::<()>::UVariant::<()>;\n+   |                             ^^ type argument not allowed\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:98:28\n+   |\n+LL |     AliasFixed::UVariant::<()>;\n+   |                            ^^ type argument not allowed\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/enum-variant-generic-args.rs:100:18\n+   |\n+LL |     AliasFixed::<()>::UVariant;\n+   |                  ^^ unexpected type argument\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/enum-variant-generic-args.rs:102:18\n+   |\n+LL |     AliasFixed::<()>::UVariant::<()>;\n+   |                  ^^ unexpected type argument\n+\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/enum-variant-generic-args.rs:102:34\n+   |\n+LL |     AliasFixed::<()>::UVariant::<()>;\n+   |                                  ^^ type argument not allowed\n+\n+error: aborting due to 39 previous errors\n \n Some errors have detailed explanations: E0107, E0109, E0308.\n For more information about an error, try `rustc --explain E0107`.", "previous_filename": "src/test/ui/enum-variant-generic-args.stderr"}, {"sha": "fa3e1a35fc27ac45e96e89c481c9b19b440f0fed", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -0,0 +1,23 @@\n+// Check that an `enum` variant is resolved, in the value namespace,\n+// with higher priority than other inherent items when there is a conflict.\n+\n+enum E {\n+    V(u8)\n+}\n+\n+impl E {\n+    fn V() {}\n+}\n+\n+enum E2 {\n+    V,\n+}\n+\n+impl E2 {\n+    const V: u8 = 0;\n+}\n+\n+fn main() {\n+    <E>::V(); //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+    let _: u8 = <E2>::V; //~ ERROR mismatched types\n+}"}, {"sha": "0394ddab46cdab93ae6c0bbd96534e05c911dc52", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -0,0 +1,22 @@\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:21:5\n+   |\n+LL |     V(u8)\n+   |     ----- defined here\n+...\n+LL |     <E>::V();\n+   |     ^^^^^^^^ expected 1 parameter\n+\n+error[E0308]: mismatched types\n+  --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:22:17\n+   |\n+LL |     let _: u8 = <E2>::V;\n+   |                 ^^^^^^^ expected u8, found enum `E2`\n+   |\n+   = note: expected type `u8`\n+              found type `E2`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "7f69590400b3c96efd1a9776323d40625af8cacf", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-lint-ambiguous_associated_items.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -0,0 +1,37 @@\n+// Check that a projection `Self::V` in a trait implementation,\n+// with an associated type named `V`, for an `enum` with a variant named `V`,\n+// results in triggering the deny-by-default lint `ambiguous_associated_items`.\n+// The lint suggests that qualified syntax should be used instead.\n+// That is, the user would write `<Self as Tr>::V`.\n+//\n+// The rationale for this is that while `enum` variants do currently\n+// not exist in the type namespace but solely in the value namespace,\n+// RFC #2593 \"Enum variant types\", would add enum variants to the type namespace.\n+// However, currently `enum` variants are resolved with high priority as\n+// they are resolved as inherent associated items.\n+// Should #2953 therefore be implemented, `Self::V` would suddenly switch\n+// from referring to the associated type `V` instead of the variant `V`.\n+// The lint exists to keep us forward compatible with #2593.\n+//\n+// As a closing note, provided that #2933 was implemented and\n+// if `enum` variants were given lower priority than associated types,\n+// it would be impossible to refer to the `enum` variant `V` whereas\n+// the associated type could be referred to with qualified syntax as seen above.\n+\n+enum E {\n+    V\n+}\n+\n+trait Tr {\n+    type V;\n+    fn f() -> Self::V;\n+}\n+\n+impl Tr for E {\n+    type V = u8;\n+    fn f() -> Self::V { 0 }\n+    //~^ ERROR ambiguous associated item\n+    //~| WARN this was previously accepted\n+}\n+\n+fn main() {}"}, {"sha": "f0dd689934f8320d34806d0315dd3ddc8b807acd", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-lint-ambiguous_associated_items.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,5 +1,5 @@\n error: ambiguous associated item\n-  --> $DIR/type-alias-enum-variants-priority.rs:14:15\n+  --> $DIR/enum-variant-priority-lint-ambiguous_associated_items.rs:32:15\n    |\n LL |     fn f() -> Self::V { 0 }\n    |               ^^^^^^^ help: use fully-qualified syntax: `<E as Trait>::V`\n@@ -8,12 +8,12 @@ LL |     fn f() -> Self::V { 0 }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57644 <https://github.com/rust-lang/rust/issues/57644>\n note: `V` could refer to variant defined here\n-  --> $DIR/type-alias-enum-variants-priority.rs:4:5\n+  --> $DIR/enum-variant-priority-lint-ambiguous_associated_items.rs:22:5\n    |\n LL |     V\n    |     ^\n note: `V` could also refer to associated type defined here\n-  --> $DIR/type-alias-enum-variants-priority.rs:8:5\n+  --> $DIR/enum-variant-priority-lint-ambiguous_associated_items.rs:26:5\n    |\n LL |     type V;\n    |     ^^^^^^^", "previous_filename": "src/test/ui/type-alias-enum-variants-priority.stderr"}, {"sha": "c1e56fc4caa9f9a5e3154866c9363e02132ff627", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-Self-issue-58006.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,4 +1,3 @@\n-#![feature(type_alias_enum_variants)]\n pub enum Enum {\n     A(usize),\n }", "previous_filename": "src/test/ui/issues/issue-58006.rs"}, {"sha": "128a85e15634cd44c5985cb9ea887e7eae5c05cc", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-Self-issue-58006.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,5 +1,5 @@\n error[E0533]: expected unit struct/variant or constant, found tuple variant `<Self>::A`\n-  --> $DIR/issue-58006.rs:9:13\n+  --> $DIR/incorrect-variant-form-through-Self-issue-58006.rs:8:13\n    |\n LL |             Self::A => (),\n    |             ^^^^^^^", "previous_filename": "src/test/ui/issues/issue-58006.stderr"}, {"sha": "ce45d59198af86e347e771afa41a1777e287e164", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+// Check that creating/matching on an enum variant through an alias with\n+// the wrong braced/unit form is caught as an error.\n+\n+enum Enum { Braced {}, Unit, Tuple() }\n+type Alias = Enum;\n+\n+fn main() {\n+    Alias::Braced;\n+    //~^ ERROR expected unit struct/variant or constant, found struct variant `<Alias>::Braced` [E0533]\n+    let Alias::Braced = panic!();\n+    //~^ ERROR expected unit struct/variant or constant, found struct variant `<Alias>::Braced` [E0533]\n+    let Alias::Braced(..) = panic!();\n+    //~^ ERROR expected tuple struct/variant, found struct variant `<Alias>::Braced` [E0164]\n+\n+    Alias::Unit();\n+    //~^ ERROR expected function, found enum variant `<Alias>::Unit`\n+    let Alias::Unit() = panic!();\n+    //~^ ERROR expected tuple struct/variant, found unit variant `<Alias>::Unit` [E0164]\n+}"}, {"sha": "c1ea816b7facf7bca12a0e0146323a924890a273", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -0,0 +1,43 @@\n+error[E0533]: expected unit struct/variant or constant, found struct variant `<Alias>::Braced`\n+  --> $DIR/incorrect-variant-form-through-alias-caught.rs:10:5\n+   |\n+LL |     Alias::Braced;\n+   |     ^^^^^^^^^^^^^\n+\n+error[E0533]: expected unit struct/variant or constant, found struct variant `<Alias>::Braced`\n+  --> $DIR/incorrect-variant-form-through-alias-caught.rs:12:9\n+   |\n+LL |     let Alias::Braced = panic!();\n+   |         ^^^^^^^^^^^^^\n+\n+error[E0164]: expected tuple struct/variant, found struct variant `<Alias>::Braced`\n+  --> $DIR/incorrect-variant-form-through-alias-caught.rs:14:9\n+   |\n+LL |     let Alias::Braced(..) = panic!();\n+   |         ^^^^^^^^^^^^^^^^^ not a tuple variant or struct\n+\n+error[E0618]: expected function, found enum variant `<Alias>::Unit`\n+  --> $DIR/incorrect-variant-form-through-alias-caught.rs:17:5\n+   |\n+LL | enum Enum { Braced {}, Unit, Tuple() }\n+   |                        ---- `<Alias>::Unit` defined here\n+...\n+LL |     Alias::Unit();\n+   |     ^^^^^^^^^^^--\n+   |     |\n+   |     call expression requires function\n+help: `<Alias>::Unit` is a unit variant, you need to write it without the parenthesis\n+   |\n+LL |     <Alias>::Unit;\n+   |     ^^^^^^^^^^^^^\n+\n+error[E0164]: expected tuple struct/variant, found unit variant `<Alias>::Unit`\n+  --> $DIR/incorrect-variant-form-through-alias-caught.rs:19:9\n+   |\n+LL |     let Alias::Unit() = panic!();\n+   |         ^^^^^^^^^^^^^ not a tuple variant or struct\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0164, E0618.\n+For more information about an error, try `rustc --explain E0164`."}, {"sha": "fa351ed51dd468961e169379df84e10ac729a9a7", "filename": "src/test/ui/type-alias-enum-variants/issue-57866.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fissue-57866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fissue-57866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fissue-57866.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,7 +1,5 @@\n // compile-pass\n \n-#![feature(type_alias_enum_variants)]\n-\n enum Outer<T> {\n     A(T)\n }", "previous_filename": "src/test/ui/issues/issue-57866.rs"}, {"sha": "dfc618b164902c35befd4c646cf1a75788231add", "filename": "src/test/ui/type-alias-enum-variants/issue-61801-path-pattern-can-infer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fissue-61801-path-pattern-can-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fissue-61801-path-pattern-can-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fissue-61801-path-pattern-can-infer.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -3,8 +3,6 @@\n \n // compile-pass\n \n-#![feature(type_alias_enum_variants)]\n-\n enum Opt<T> {\n     N,\n     S(T),"}, {"sha": "c1153fa4dc7b4f315b770792992e398ee4bc7d7b", "filename": "src/test/ui/type-alias-enum-variants/no-type-application-on-aliased-enum-variant.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -0,0 +1,14 @@\n+// Check that a generic type for an `enum` admits type application\n+// on both the type constructor and the generic type's variant.\n+//\n+// Also check that a type alias to said generic type admits type application\n+// on the type constructor but *NOT* the variant.\n+\n+type Alias<T> = Option<T>;\n+\n+fn main() {\n+    let _ = Option::<u8>::None; // OK\n+    let _ = Option::None::<u8>; // OK (Lint in future!)\n+    let _ = Alias::<u8>::None; // OK\n+    let _ = Alias::None::<u8>; //~ ERROR type arguments are not allowed for this type\n+}"}, {"sha": "a1064d6925111e726f0adfab0225cf89e64be96d", "filename": "src/test/ui/type-alias-enum-variants/no-type-application-on-aliased-enum-variant.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,7 +1,7 @@\n error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/type-alias-enum-variants.rs:9:27\n+  --> $DIR/no-type-application-on-aliased-enum-variant.rs:13:27\n    |\n-LL |     let _ = Alias::None::<u8>; // Error\n+LL |     let _ = Alias::None::<u8>;\n    |                           ^^ type argument not allowed\n \n error: aborting due to previous error", "previous_filename": "src/test/ui/type-alias-enum-variants.stderr"}, {"sha": "11f4b05d0bf5d08de92d4b0725cb055cd81d0bcb", "filename": "src/test/ui/type-alias-enum-variants/resolve-to-enum-variant-in-type-namespace-and-error.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fresolve-to-enum-variant-in-type-namespace-and-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fresolve-to-enum-variant-in-type-namespace-and-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fresolve-to-enum-variant-in-type-namespace-and-error.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -0,0 +1,11 @@\n+// Check that the compiler will resolve `<E>::V` to the variant `V` in the type namespace\n+// but will reject this because `enum` variants do not exist in the type namespace.\n+\n+enum E {\n+    V\n+}\n+\n+fn check() -> <E>::V {}\n+//~^ ERROR expected type, found variant `V`\n+\n+fn main() {}"}, {"sha": "f190bfb69839ea4dd39eeb653180e8e5fcd0e56e", "filename": "src/test/ui/type-alias-enum-variants/resolve-to-enum-variant-in-type-namespace-and-error.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fresolve-to-enum-variant-in-type-namespace-and-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fresolve-to-enum-variant-in-type-namespace-and-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fresolve-to-enum-variant-in-type-namespace-and-error.stderr?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -1,5 +1,5 @@\n error: expected type, found variant `V`\n-  --> $DIR/type-alias-enum-variants-priority-3.rs:7:15\n+  --> $DIR/resolve-to-enum-variant-in-type-namespace-and-error.rs:8:15\n    |\n LL | fn check() -> <E>::V {}\n    |               ^^^^^^", "previous_filename": "src/test/ui/type-alias-enum-variants-priority-3.stderr"}, {"sha": "39677733d524db1b424d513da136ad5bc90cd691", "filename": "src/test/ui/type-alias-enum-variants/type-alias-enum-variants-pass.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Ftype-alias-enum-variants-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5748825cc8c74cccef0059cdd4043e6e9b4aa188/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Ftype-alias-enum-variants-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Ftype-alias-enum-variants-pass.rs?ref=5748825cc8c74cccef0059cdd4043e6e9b4aa188", "patch": "@@ -0,0 +1,69 @@\n+// run-pass\n+\n+// Check that it is possible to resolve, in the value namespace,\n+// to an `enum` variant through a type alias. This includes `Self`.\n+// Type qualified syntax `<Type>::Variant` also works when syntactically valid.\n+\n+#[derive(Debug, PartialEq, Eq)]\n+enum Foo {\n+    Bar(i32),\n+    Baz { i: i32 },\n+    Qux,\n+}\n+\n+type FooAlias = Foo;\n+type OptionAlias = Option<i32>;\n+\n+macro_rules! check_pat {\n+    ($x:expr, $p:pat) => {\n+        assert!(if let $p = $x { true } else { false });\n+    };\n+}\n+\n+impl Foo {\n+    fn bar() -> Self {\n+        let x = Self::Bar(3);\n+        assert_eq!(x, <Self>::Bar(3));\n+        check_pat!(x, Self::Bar(3));\n+        x\n+    }\n+\n+    fn baz() -> Self {\n+        let x = Self::Baz { i: 42 };\n+        check_pat!(x, Self::Baz { i: 42 });\n+        x\n+    }\n+\n+    fn qux() -> Self {\n+        let x = Self::Qux;\n+        assert_eq!(x, <Self>::Qux);\n+        check_pat!(x, Self::Qux);\n+        check_pat!(x, <Self>::Qux);\n+        x\n+    }\n+}\n+\n+fn main() {\n+    let bar = Foo::Bar(1);\n+    assert_eq!(bar, FooAlias::Bar(1));\n+    assert_eq!(bar, <FooAlias>::Bar(1));\n+    check_pat!(bar, FooAlias::Bar(1));\n+\n+    let baz = FooAlias::Baz { i: 2 };\n+    assert_eq!(baz, Foo::Baz { i: 2 });\n+    check_pat!(baz, FooAlias::Baz { i: 2 });\n+\n+    let qux = Foo::Qux;\n+    assert_eq!(qux, FooAlias::Qux);\n+    assert_eq!(qux, <FooAlias>::Qux);\n+    check_pat!(qux, FooAlias::Qux);\n+    check_pat!(qux, <FooAlias>::Qux);\n+\n+    assert_eq!(Foo::bar(), Foo::Bar(3));\n+    assert_eq!(Foo::baz(), Foo::Baz { i: 42 });\n+    assert_eq!(Foo::qux(), Foo::Qux);\n+\n+    let some = Option::Some(4);\n+    assert_eq!(some, OptionAlias::Some(4));\n+    check_pat!(some, OptionAlias::Some(4));\n+}"}]}