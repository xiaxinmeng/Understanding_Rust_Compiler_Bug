{"sha": "20edb366e7d16da946c2484a8542dffb07b79837", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZWRiMzY2ZTdkMTZkYTk0NmMyNDg0YTg1NDJkZmZiMDdiNzk4Mzc=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-23T23:52:43Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-26T09:32:58Z"}, "message": "Set span for interpolated tokens correctly", "tree": {"sha": "ede4391538651a8ed93d5635f0aa6323437f57dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ede4391538651a8ed93d5635f0aa6323437f57dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20edb366e7d16da946c2484a8542dffb07b79837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20edb366e7d16da946c2484a8542dffb07b79837", "html_url": "https://github.com/rust-lang/rust/commit/20edb366e7d16da946c2484a8542dffb07b79837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20edb366e7d16da946c2484a8542dffb07b79837/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877ed0d0683b7ec0d217f6b00e520dc79e515ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/877ed0d0683b7ec0d217f6b00e520dc79e515ebd", "html_url": "https://github.com/rust-lang/rust/commit/877ed0d0683b7ec0d217f6b00e520dc79e515ebd"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "6cf05558adb55dde27fd4eebd4620ce995cfc3f4", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20edb366e7d16da946c2484a8542dffb07b79837/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20edb366e7d16da946c2484a8542dffb07b79837/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=20edb366e7d16da946c2484a8542dffb07b79837", "patch": "@@ -300,13 +300,13 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                             // (a) idents can be in lots of places, so it'd be a pain\n                             // (b) we actually can, since it's a token.\n                             MatchedNonterminal(NtIdent(ref sn, b)) => {\n-                                r.cur_span = sp;\n+                                r.cur_span = sn.span;\n                                 r.cur_tok = token::Ident(sn.node, b);\n                                 return ret_val;\n                             }\n                             MatchedNonterminal(NtExpr(ref expr)) => {\n                                 let mut expr = (**expr).clone();\n-                                update_span(sp, &mut expr);\n+                                //update_span(sp, &mut expr);\n                                 // FIXME(pcwalton): Bad copy.\n                                 r.cur_span = sp;\n                                 r.cur_tok = token::Interpolated(NtExpr(ptr::P(expr)));"}, {"sha": "f5ebe842577c611f24432398abe58246a716cc50", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/20edb366e7d16da946c2484a8542dffb07b79837/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20edb366e7d16da946c2484a8542dffb07b79837/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=20edb366e7d16da946c2484a8542dffb07b79837", "patch": "@@ -2322,18 +2322,29 @@ impl<'a> Parser<'a> {\n                                   -> PResult<'a, P<Expr>> {\n         let attrs = try!(self.parse_or_use_outer_attributes(already_parsed_attrs));\n \n+        let interp = if let token::Interpolated(..) = self.token {\n+            true\n+        } else {\n+            false\n+        };\n         let b = try!(self.parse_bottom_expr());\n-        self.parse_dot_or_call_expr_with(b, attrs)\n+        let lo = if interp {\n+            self.last_span.lo\n+        } else {\n+            b.span.lo\n+        };\n+        self.parse_dot_or_call_expr_with(b, lo, attrs)\n     }\n \n     pub fn parse_dot_or_call_expr_with(&mut self,\n                                        e0: P<Expr>,\n+                                       lo: BytePos,\n                                        attrs: ThinAttributes)\n                                        -> PResult<'a, P<Expr>> {\n         // Stitch the list of outer attributes onto the return value.\n         // A little bit ugly, but the best way given the current code\n         // structure\n-        self.parse_dot_or_call_expr_with_(e0)\n+        self.parse_dot_or_call_expr_with_(e0, lo)\n         .map(|expr|\n             expr.map(|mut expr| {\n                 expr.attrs.update(|a| a.prepend(attrs));\n@@ -2408,9 +2419,8 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn parse_dot_or_call_expr_with_(&mut self, e0: P<Expr>) -> PResult<'a, P<Expr>> {\n+    fn parse_dot_or_call_expr_with_(&mut self, e0: P<Expr>, lo: BytePos) -> PResult<'a, P<Expr>> {\n         let mut e = e0;\n-        let lo = e.span.lo;\n         let mut hi;\n         loop {\n             // expr.f\n@@ -3828,7 +3838,8 @@ impl<'a> Parser<'a> {\n                             let e = self.mk_mac_expr(span.lo, span.hi,\n                                                      mac.and_then(|m| m.node),\n                                                      None);\n-                            let e = try!(self.parse_dot_or_call_expr_with(e, attrs));\n+                            let lo = e.span.lo;\n+                            let e = try!(self.parse_dot_or_call_expr_with(e, lo, attrs));\n                             let e = try!(self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e)));\n                             try!(self.handle_expression_like_statement(\n                                 e,"}]}