{"sha": "478f2581b1383b24500dc9a3edaef7b247dd793c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OGYyNTgxYjEzODNiMjQ1MDBkYzlhM2VkYWVmN2IyNDdkZDc5M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-20T17:20:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-20T17:20:34Z"}, "message": "Auto merge of #6939 - ThibsG:suggNewWithoutDefault, r=llogiq\n\nFix bad suggestion for generics in `new_without_default` lint\n\nFixes bad suggestion where a type parameter was missing for `new_without_default` lint.\n\nFixes #6933\n\nchangelog: none", "tree": {"sha": "15fd05b2942fd138526d8b70368b441560cfcb57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15fd05b2942fd138526d8b70368b441560cfcb57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/478f2581b1383b24500dc9a3edaef7b247dd793c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/478f2581b1383b24500dc9a3edaef7b247dd793c", "html_url": "https://github.com/rust-lang/rust/commit/478f2581b1383b24500dc9a3edaef7b247dd793c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/478f2581b1383b24500dc9a3edaef7b247dd793c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e", "html_url": "https://github.com/rust-lang/rust/commit/1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e"}, {"sha": "296751f643952f02f6fa721c90bbb81f4183e3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/296751f643952f02f6fa721c90bbb81f4183e3f6", "html_url": "https://github.com/rust-lang/rust/commit/296751f643952f02f6fa721c90bbb81f4183e3f6"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "3789572ad439ea1929776238ac201d56a52634d7", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/478f2581b1383b24500dc9a3edaef7b247dd793c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/478f2581b1383b24500dc9a3edaef7b247dd793c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=478f2581b1383b24500dc9a3edaef7b247dd793c", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::paths;\n+use clippy_utils::source::snippet;\n use clippy_utils::sugg::DiagnosticBuilderExt;\n use clippy_utils::{get_trait_def_id, return_ty};\n use if_chain::if_chain;\n@@ -62,7 +63,10 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n     #[allow(clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         if let hir::ItemKind::Impl(hir::Impl {\n-            of_trait: None, items, ..\n+            of_trait: None,\n+            ref generics,\n+            items,\n+            ..\n         }) = item.kind\n         {\n             for assoc_item in items {\n@@ -126,6 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                         }\n                                     }\n \n+                                    let generics_sugg = snippet(cx, generics.span, \"\");\n                                     span_lint_hir_and_then(\n                                         cx,\n                                         NEW_WITHOUT_DEFAULT,\n@@ -140,7 +145,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                                 cx,\n                                                 item.span,\n                                                 \"try this\",\n-                                                &create_new_without_default_suggest_msg(self_ty),\n+                                                &create_new_without_default_suggest_msg(self_ty, &generics_sugg),\n                                                 Applicability::MaybeIncorrect,\n                                             );\n                                         },\n@@ -155,12 +160,12 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n     }\n }\n \n-fn create_new_without_default_suggest_msg(ty: Ty<'_>) -> String {\n+fn create_new_without_default_suggest_msg(ty: Ty<'_>, generics_sugg: &str) -> String {\n     #[rustfmt::skip]\n     format!(\n-\"impl Default for {} {{\n+\"impl{} Default for {} {{\n     fn default() -> Self {{\n         Self::new()\n     }}\n-}}\", ty)\n+}}\", generics_sugg, ty)\n }"}, {"sha": "64659b63f469934e3f0aecc5e8359fbaeb557b78", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/478f2581b1383b24500dc9a3edaef7b247dd793c/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/478f2581b1383b24500dc9a3edaef7b247dd793c/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=478f2581b1383b24500dc9a3edaef7b247dd793c", "patch": "@@ -159,4 +159,19 @@ impl NewNotEqualToDerive {\n     }\n }\n \n+// see #6933\n+pub struct FooGenerics<T>(std::marker::PhantomData<T>);\n+impl<T> FooGenerics<T> {\n+    pub fn new() -> Self {\n+        Self(Default::default())\n+    }\n+}\n+\n+pub struct BarGenerics<T>(std::marker::PhantomData<T>);\n+impl<T: Copy> BarGenerics<T> {\n+    pub fn new() -> Self {\n+        Self(Default::default())\n+    }\n+}\n+\n fn main() {}"}, {"sha": "973836f75a905d02165931646bef411e422ff52b", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/478f2581b1383b24500dc9a3edaef7b247dd793c/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/478f2581b1383b24500dc9a3edaef7b247dd793c/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=478f2581b1383b24500dc9a3edaef7b247dd793c", "patch": "@@ -43,7 +43,7 @@ LL | |     }\n    |\n help: try this\n    |\n-LL | impl Default for LtKo<'c> {\n+LL | impl<'c> Default for LtKo<'c> {\n LL |     fn default() -> Self {\n LL |         Self::new()\n LL |     }\n@@ -67,5 +67,39 @@ LL |     }\n LL | }\n    |\n \n-error: aborting due to 4 previous errors\n+error: you should consider adding a `Default` implementation for `FooGenerics<T>`\n+  --> $DIR/new_without_default.rs:165:5\n+   |\n+LL | /     pub fn new() -> Self {\n+LL | |         Self(Default::default())\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL | impl<T> Default for FooGenerics<T> {\n+LL |     fn default() -> Self {\n+LL |         Self::new()\n+LL |     }\n+LL | }\n+   |\n+\n+error: you should consider adding a `Default` implementation for `BarGenerics<T>`\n+  --> $DIR/new_without_default.rs:172:5\n+   |\n+LL | /     pub fn new() -> Self {\n+LL | |         Self(Default::default())\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL | impl<T: Copy> Default for BarGenerics<T> {\n+LL |     fn default() -> Self {\n+LL |         Self::new()\n+LL |     }\n+LL | }\n+   |\n+\n+error: aborting due to 6 previous errors\n "}]}