{"sha": "dd40277d0f646c700d22dab4c929733a37cbb822", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNDAyNzdkMGY2NDZjNzAwZDIyZGFiNGM5Mjk3MzNhMzdjYmI4MjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-10T16:35:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-10T16:35:28Z"}, "message": "Rollup merge of #50569 - michaelwoerister:cross-lang-lto-2, r=alexcrichton\n\nAllow for specifying a linker plugin for cross-language LTO\n\nThis PR makes the `-Zcross-lang-lto` flag optionally take the path to the `LLVMgold.so` linker plugin. If this path is specified, `rustc` will invoke the linker with the correct arguments (i.e. `-plugin` and various `-plugin-opt`s).\n\nThis can be used to ergonomically enable cross-language LTO for Rust programs with C/C++ dependencies:\n```\nclang -O2 test.c -otest.o -c -flto=thin\nllvm-ar -rv libxxx.a test.o\nrustc -L. main.rs -Zcross-lang-lto=/usr/lib64/LLVMgold.so -O -Clink-arg=-fuse-ld=gold\n```\n\n- Note that in theory this should work with Gold, LLD, and newer versions of binutils' LD but on my current system I could only get it to work with Gold.\n- Also note that this will work best if the Clang version and Rust's LLVM version are close enough. Clang 6.0 works well with the current nightly.\n\nr? @alexcrichton", "tree": {"sha": "14d8efbcddf3ab65889aa1766ca366b121b5fabb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14d8efbcddf3ab65889aa1766ca366b121b5fabb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd40277d0f646c700d22dab4c929733a37cbb822", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9HTQCRBK7hj4Ov3rIwAAdHIIAAfDakuMRv5CFpzBgNRP8m4s\nub6LHhkGo3cPfEi1LZof2jux/+tQEQ9HbxU5L8syGxOhTKAztozx1/XpRI0dzEc8\nqL34VpTQcpq+Mtcu9QwATr0Ts5RXJTK4bnApVySo8rDJLSd/Jlk2xl0+kfijwEQ5\nKiEde0Y6VYrHEa5UDHt3NTNwTJfnGIkKKMiP/QpWZ6xGnoe8FRV/tYgFwHMI6cli\n+EhSeVqR9KBemCwNr0qEOQoEGamd0fxYlpZQngASDyeShsBHyYxBkcZGsGpHKwaB\nOL7u/hxP3sPSk2AAdT/w4PTNHBDmkjeEv1xk2x19PpLogRFEHAjG5CxH48q5Cg8=\n=h/C5\n-----END PGP SIGNATURE-----\n", "payload": "tree 14d8efbcddf3ab65889aa1766ca366b121b5fabb\nparent e23ec4b6f08828dbced71779eb9b390d85f1898b\nparent a9810899a290a7746e88382558454e31bb8f85b7\nauthor Alex Crichton <alex@alexcrichton.com> 1525970128 -0500\ncommitter GitHub <noreply@github.com> 1525970128 -0500\n\nRollup merge of #50569 - michaelwoerister:cross-lang-lto-2, r=alexcrichton\n\nAllow for specifying a linker plugin for cross-language LTO\n\nThis PR makes the `-Zcross-lang-lto` flag optionally take the path to the `LLVMgold.so` linker plugin. If this path is specified, `rustc` will invoke the linker with the correct arguments (i.e. `-plugin` and various `-plugin-opt`s).\n\nThis can be used to ergonomically enable cross-language LTO for Rust programs with C/C++ dependencies:\n```\nclang -O2 test.c -otest.o -c -flto=thin\nllvm-ar -rv libxxx.a test.o\nrustc -L. main.rs -Zcross-lang-lto=/usr/lib64/LLVMgold.so -O -Clink-arg=-fuse-ld=gold\n```\n\n- Note that in theory this should work with Gold, LLD, and newer versions of binutils' LD but on my current system I could only get it to work with Gold.\n- Also note that this will work best if the Clang version and Rust's LLVM version are close enough. Clang 6.0 works well with the current nightly.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd40277d0f646c700d22dab4c929733a37cbb822", "html_url": "https://github.com/rust-lang/rust/commit/dd40277d0f646c700d22dab4c929733a37cbb822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd40277d0f646c700d22dab4c929733a37cbb822/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23ec4b6f08828dbced71779eb9b390d85f1898b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e23ec4b6f08828dbced71779eb9b390d85f1898b", "html_url": "https://github.com/rust-lang/rust/commit/e23ec4b6f08828dbced71779eb9b390d85f1898b"}, {"sha": "a9810899a290a7746e88382558454e31bb8f85b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9810899a290a7746e88382558454e31bb8f85b7", "html_url": "https://github.com/rust-lang/rust/commit/a9810899a290a7746e88382558454e31bb8f85b7"}], "stats": {"total": 131, "additions": 118, "deletions": 13}, "files": [{"sha": "245663494ddef1f7ae2c3b8f600e109b0b3da3ec", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dd40277d0f646c700d22dab4c929733a37cbb822", "patch": "@@ -95,6 +95,23 @@ pub enum Lto {\n     Fat,\n }\n \n+#[derive(Clone, PartialEq, Hash)]\n+pub enum CrossLangLto {\n+    LinkerPlugin(PathBuf),\n+    NoLink,\n+    Disabled\n+}\n+\n+impl CrossLangLto {\n+    pub fn embed_bitcode(&self) -> bool {\n+        match *self {\n+            CrossLangLto::LinkerPlugin(_) |\n+            CrossLangLto::NoLink => true,\n+            CrossLangLto::Disabled => false,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Hash)]\n pub enum DebugInfoLevel {\n     NoDebugInfo,\n@@ -412,6 +429,7 @@ top_level_options!(\n \n         // Remap source path prefixes in all output (messages, object files, debug, etc)\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [UNTRACKED],\n+\n         edition: Edition [TRACKED],\n     }\n );\n@@ -777,11 +795,15 @@ macro_rules! options {\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n+        pub const parse_cross_lang_lto: Option<&'static str> =\n+            Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `no-link`, \\\n+                  or the path to the linker plugin\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto,\n+                    CrossLangLto};\n         use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n \n@@ -986,6 +1008,26 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_cross_lang_lto(slot: &mut CrossLangLto, v: Option<&str>) -> bool {\n+            if v.is_some() {\n+                let mut bool_arg = None;\n+                if parse_opt_bool(&mut bool_arg, v) {\n+                    *slot = if bool_arg.unwrap() {\n+                        CrossLangLto::NoLink\n+                    } else {\n+                        CrossLangLto::Disabled\n+                    };\n+                    return true\n+                }\n+            }\n+\n+            *slot = match v {\n+                None |\n+                Some(\"no-link\") => CrossLangLto::NoLink,\n+                Some(path) => CrossLangLto::LinkerPlugin(PathBuf::from(path)),\n+            };\n+            true\n+        }\n     }\n ) }\n \n@@ -1295,7 +1337,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"make the current crate share its generic instantiations\"),\n     chalk: bool = (false, parse_bool, [TRACKED],\n           \"enable the experimental Chalk-based trait solving engine\"),\n-    cross_lang_lto: bool = (false, parse_bool, [TRACKED],\n+    cross_lang_lto: CrossLangLto = (CrossLangLto::Disabled, parse_cross_lang_lto, [TRACKED],\n           \"generate build artifacts that are compatible with linker-based LTO.\"),\n }\n \n@@ -2327,7 +2369,7 @@ mod dep_tracking {\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{CrateType, DebugInfoLevel, ErrorOutputType, Lto, OptLevel, OutputTypes,\n-                Passes, Sanitizer};\n+                Passes, Sanitizer, CrossLangLto};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_target::spec::{PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n@@ -2391,6 +2433,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n     impl_dep_tracking_hash_via_hash!(Edition);\n+    impl_dep_tracking_hash_via_hash!(CrossLangLto);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n@@ -2455,7 +2498,7 @@ mod tests {\n     use lint;\n     use middle::cstore;\n     use session::config::{build_configuration, build_session_options_and_crate_config};\n-    use session::config::Lto;\n+    use session::config::{Lto, CrossLangLto};\n     use session::build_session;\n     use std::collections::{BTreeMap, BTreeSet};\n     use std::iter::FromIterator;\n@@ -3111,6 +3154,10 @@ mod tests {\n         opts = reference.clone();\n         opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.debugging_opts.cross_lang_lto = CrossLangLto::NoLink;\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n \n     #[test]"}, {"sha": "23f84881c798098355513316001a1cb34bee001c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=dd40277d0f646c700d22dab4c929733a37cbb822", "patch": "@@ -657,6 +657,13 @@ impl Session {\n         }\n     }\n \n+    pub fn target_cpu(&self) -> &str {\n+        match self.opts.cg.target_cpu {\n+            Some(ref s) => &**s,\n+            None => &*self.target.target.options.cpu\n+        }\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         if let Some(x) = self.opts.cg.force_frame_pointers {\n             x"}, {"sha": "d39556e9bb197e6ff91aaef9fad166ee04bd3268", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=dd40277d0f646c700d22dab4c929733a37cbb822", "patch": "@@ -970,6 +970,9 @@ fn link_args(cmd: &mut Linker,\n              out_filename: &Path,\n              trans: &CrateTranslation) {\n \n+    // Linker plugins should be specified early in the list of arguments\n+    cmd.cross_lang_lto();\n+\n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n     let lib_path = sess.target_filesearch(PathKind::All).get_lib_path();"}, {"sha": "2a84ffe79b285f033711473fb3d5794e60a6ade0", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=dd40277d0f646c700d22dab4c929733a37cbb822", "patch": "@@ -21,7 +21,8 @@ use back::symbol_export;\n use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n-use rustc::session::config::{self, CrateType, OptLevel, DebugInfoLevel};\n+use rustc::session::config::{self, CrateType, OptLevel, DebugInfoLevel,\n+                             CrossLangLto};\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use serialize::{json, Encoder};\n@@ -127,6 +128,7 @@ pub trait Linker {\n     fn subsystem(&mut self, subsystem: &str);\n     fn group_start(&mut self);\n     fn group_end(&mut self);\n+    fn cross_lang_lto(&mut self);\n     // Should have been finalize(self), but we don't support self-by-value on trait objects (yet?).\n     fn finalize(&mut self) -> Command;\n }\n@@ -434,6 +436,42 @@ impl<'a> Linker for GccLinker<'a> {\n             self.linker_arg(\"--end-group\");\n         }\n     }\n+\n+    fn cross_lang_lto(&mut self) {\n+        match self.sess.opts.debugging_opts.cross_lang_lto {\n+            CrossLangLto::Disabled |\n+            CrossLangLto::NoLink => {\n+                // Nothing to do\n+            }\n+            CrossLangLto::LinkerPlugin(ref path) => {\n+                self.linker_arg(&format!(\"-plugin={}\", path.display()));\n+\n+                let opt_level = match self.sess.opts.optimize {\n+                    config::OptLevel::No => \"O0\",\n+                    config::OptLevel::Less => \"O1\",\n+                    config::OptLevel::Default => \"O2\",\n+                    config::OptLevel::Aggressive => \"O3\",\n+                    config::OptLevel::Size => \"Os\",\n+                    config::OptLevel::SizeMin => \"Oz\",\n+                };\n+\n+                self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n+                self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.sess.target_cpu()));\n+\n+                match self.sess.opts.cg.lto {\n+                    config::Lto::Thin |\n+                    config::Lto::ThinLocal => {\n+                        self.linker_arg(&format!(\"-plugin-opt=thin\"));\n+                    }\n+                    config::Lto::Fat |\n+                    config::Lto::Yes |\n+                    config::Lto::No => {\n+                        // default to regular LTO\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n pub struct MsvcLinker<'a> {\n@@ -666,6 +704,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n     // MSVC doesn't need group indicators\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n+\n+    fn cross_lang_lto(&mut self) {\n+        // Do nothing\n+    }\n }\n \n pub struct EmLinker<'a> {\n@@ -832,6 +874,10 @@ impl<'a> Linker for EmLinker<'a> {\n     // Appears not necessary on Emscripten\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n+\n+    fn cross_lang_lto(&mut self) {\n+        // Do nothing\n+    }\n }\n \n fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n@@ -984,4 +1030,8 @@ impl Linker for WasmLd {\n     // Not needed for now with LLD\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n+\n+    fn cross_lang_lto(&mut self) {\n+        // Do nothing for now\n+    }\n }"}, {"sha": "64876e82309f05182f6fba788b23b39b39047540", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=dd40277d0f646c700d22dab4c929733a37cbb822", "patch": "@@ -174,10 +174,7 @@ pub fn target_machine_factory(sess: &Session, find_features: bool)\n     let triple = &sess.target.target.llvm_target;\n \n     let triple = CString::new(triple.as_bytes()).unwrap();\n-    let cpu = match sess.opts.cg.target_cpu {\n-        Some(ref s) => &**s,\n-        None => &*sess.target.target.options.cpu\n-    };\n+    let cpu = sess.target_cpu();\n     let cpu = CString::new(cpu.as_bytes()).unwrap();\n     let features = attributes::llvm_target_features(sess)\n         .collect::<Vec<_>>()\n@@ -294,7 +291,7 @@ impl ModuleConfig {\n         self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode;\n         let embed_bitcode = sess.target.target.options.embed_bitcode ||\n                             sess.opts.debugging_opts.embed_bitcode ||\n-                            sess.opts.debugging_opts.cross_lang_lto;\n+                            sess.opts.debugging_opts.cross_lang_lto.embed_bitcode();\n         if embed_bitcode {\n             match sess.opts.optimize {\n                 config::OptLevel::No |\n@@ -1358,7 +1355,8 @@ fn execute_work_item(cgcx: &CodegenContext,\n \n             // Don't run LTO passes when cross-lang LTO is enabled. The linker\n             // will do that for us in this case.\n-            let needs_lto = needs_lto && !cgcx.opts.debugging_opts.cross_lang_lto;\n+            let needs_lto = needs_lto &&\n+                !cgcx.opts.debugging_opts.cross_lang_lto.embed_bitcode();\n \n             if needs_lto {\n                 Ok(WorkItemResult::NeedsLTO(mtrans))"}, {"sha": "925f686fe1161bb4b036d59ee257a2d30124e697", "filename": "src/test/run-make/cross-lang-lto/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Ftest%2Frun-make%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/dd40277d0f646c700d22dab4c929733a37cbb822/src%2Ftest%2Frun-make%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcross-lang-lto%2FMakefile?ref=dd40277d0f646c700d22dab4c929733a37cbb822", "patch": "@@ -18,9 +18,9 @@ endif\n OBJDUMP=llvm-objdump\n SECTION_HEADERS=$(OBJDUMP) -section-headers\n \n-BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto -Ccodegen-units=1\n+BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto=no-link -Ccodegen-units=1\n \n-BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto -Ccodegen-units=1 --emit=obj\n+BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto=no-link -Ccodegen-units=1 --emit=obj\n \n all: staticlib staticlib-fat-lto staticlib-thin-lto rlib exe cdylib rdylib\n "}]}