{"sha": "b562565b09a2d13596c03635e5485c4c4814b33e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NjI1NjViMDlhMmQxMzU5NmMwMzYzNWU1NDg1YzRjNDgxNGIzM2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-14T17:57:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-15T21:52:05Z"}, "message": "Same change to point at borrow for mir errors", "tree": {"sha": "59a113d51f133b7f32bcbd5ab33e427e55b0091d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59a113d51f133b7f32bcbd5ab33e427e55b0091d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b562565b09a2d13596c03635e5485c4c4814b33e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b562565b09a2d13596c03635e5485c4c4814b33e", "html_url": "https://github.com/rust-lang/rust/commit/b562565b09a2d13596c03635e5485c4c4814b33e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b562565b09a2d13596c03635e5485c4c4814b33e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02079e44dd81754de064de1c6153f6b55e4ec06e", "url": "https://api.github.com/repos/rust-lang/rust/commits/02079e44dd81754de064de1c6153f6b55e4ec06e", "html_url": "https://github.com/rust-lang/rust/commit/02079e44dd81754de064de1c6153f6b55e4ec06e"}], "stats": {"total": 139, "additions": 71, "deletions": 68}, "files": [{"sha": "679e9059c4eba7051f2099527ddaff3b9bc571ff", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -394,10 +394,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &mut self, name: &String, _scope_tree: &Rc<ScopeTree>, _borrow: &BorrowData<'tcx>,\n         drop_span: Span, borrow_span: Span, _proper_span: Span, end_span: Option<Span>\n     ) {\n-        let mut err = self.tcx.path_does_not_live_long_enough(drop_span,\n+        let mut err = self.tcx.path_does_not_live_long_enough(borrow_span,\n                                                               &format!(\"`{}`\", name),\n                                                               Origin::Mir);\n-        err.span_label(borrow_span, \"borrow occurs here\");\n+        err.span_label(borrow_span, \"borrowed value does not live long enough\");\n         err.span_label(drop_span, format!(\"`{}` dropped here while still borrowed\", name));\n         if let Some(end) = end_span {\n             err.span_label(end, \"borrowed value needs to live until here\");\n@@ -407,12 +407,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     fn report_scoped_temporary_value_does_not_live_long_enough(\n         &mut self, _scope_tree: &Rc<ScopeTree>, _borrow: &BorrowData<'tcx>,\n-        drop_span: Span, borrow_span: Span, proper_span: Span, end_span: Option<Span>\n+        drop_span: Span, _borrow_span: Span, proper_span: Span, end_span: Option<Span>\n     ) {\n-        let mut err = self.tcx.path_does_not_live_long_enough(borrow_span,\n+        let mut err = self.tcx.path_does_not_live_long_enough(proper_span,\n                                                               \"borrowed value\",\n                                                               Origin::Mir);\n-        err.span_label(proper_span, \"temporary value created here\");\n+        err.span_label(proper_span, \"temporary value does not live long enough\");\n         err.span_label(drop_span, \"temporary value dropped here while still borrowed\");\n         err.note(\"consider using a `let` binding to increase its lifetime\");\n         if let Some(end) = end_span {\n@@ -428,7 +428,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let mut err = self.tcx.path_does_not_live_long_enough(borrow_span,\n                                                               &format!(\"`{}`\", name),\n                                                               Origin::Mir);\n-        err.span_label(borrow_span, \"does not live long enough\");\n+        err.span_label(borrow_span, \"borrowed value does not live long enough\");\n         err.span_label(drop_span, \"borrowed value only lives until here\");\n         self.tcx.note_and_explain_region(scope_tree, &mut err,\n                                          \"borrowed value must be valid for \",\n@@ -443,7 +443,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let mut err = self.tcx.path_does_not_live_long_enough(proper_span,\n                                                               \"borrowed value\",\n                                                               Origin::Mir);\n-        err.span_label(proper_span, \"does not live long enough\");\n+        err.span_label(proper_span, \"temporary value does not live long enough\");\n         err.span_label(drop_span, \"temporary value only lives until here\");\n         self.tcx.note_and_explain_region(scope_tree, &mut err,\n                                          \"borrowed value must be valid for \","}, {"sha": "f368788af55de50cb2f4830b18fb050f1420c6bd", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -124,4 +124,4 @@ fn f<'a>(arena: &'a TypedArena<C<'a>>) {\n fn main() {\n     let arena = TypedArena::new();\n     f(&arena);\n-} //~ ERROR `arena` does not live long enough\n+} //~^ ERROR `arena` does not live long enough"}, {"sha": "531e1ada44b3fd3f076d05f1d4726af9f78f9ba0", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_unsound_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -49,5 +49,5 @@ fn f<'a>(_arena: &'a TypedArena<C<'a>>) {}\n fn main() {\n     let arena: TypedArena<C> = TypedArena::new();\n     f(&arena);\n-} //~ ERROR `arena` does not live long enough\n+} //~^ ERROR `arena` does not live long enough\n "}, {"sha": "2f4a1da91d88f77a16d80bf3c8491f109ec4c511", "filename": "src/test/compile-fail/E0597.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail%2FE0597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail%2FE0597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0597.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -16,4 +16,5 @@ fn main() {\n     let mut x = Foo { x: None };\n     let y = 0;\n     x.x = Some(&y);\n-} //~ `y` does not live long enough [E0597]\n+    //~^ `y` does not live long enough [E0597]\n+}"}, {"sha": "f24561b8887b98022c7d5b040ab2748a44508401", "filename": "src/test/compile-fail/catch-bad-lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -18,10 +18,11 @@ pub fn main() {\n         let _result: Result<(), &str> = do catch {\n             let my_string = String::from(\"\");\n             let my_str: & str = & my_string;\n+            //~^ ERROR `my_string` does not live long enough\n             Err(my_str) ?;\n             Err(\"\") ?;\n             Ok(())\n-        }; //~ ERROR `my_string` does not live long enough\n+        };\n     }\n \n     {"}, {"sha": "fc3e0633750d8c29ddd7c86092fca49fccbed399", "filename": "src/test/compile-fail/issue-36082.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -21,11 +21,11 @@ fn main() {\n     let val: &_ = x.borrow().0;\n     //[ast]~^ ERROR borrowed value does not live long enough [E0597]\n     //[ast]~| NOTE temporary value dropped here while still borrowed\n-    //[ast]~| NOTE temporary value created here\n+    //[ast]~| NOTE temporary value does not live long enough\n     //[ast]~| NOTE consider using a `let` binding to increase its lifetime\n     //[mir]~^^^^^ ERROR borrowed value does not live long enough [E0597]\n     //[mir]~| NOTE temporary value dropped here while still borrowed\n-    //[mir]~| NOTE temporary value created here\n+    //[mir]~| NOTE temporary value does not live long enough\n     //[mir]~| NOTE consider using a `let` binding to increase its lifetime\n     println!(\"{}\", val);\n }"}, {"sha": "642e90f6de8e622f92f3e1df039bfdb2d0980a31", "filename": "src/test/compile-fail/region-borrow-params-issue-29793-big.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -81,9 +81,9 @@ fn main() {\n         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n             //[ast]~^ ERROR `x` does not live long enough\n             //[ast]~| ERROR `y` does not live long enough\n+            //[mir]~^^^ ERROR `x` does not live long enough\n+            //[mir]~| ERROR `y` does not live long enough\n     });\n-    //[mir]~^ ERROR `x` does not live long enough\n-    //[mir]~| ERROR `y` does not live long enough\n \n     w.handle(); // This works\n     // w.handle_ref(); // This doesn't"}, {"sha": "0dbcdea89f94091b27340b9331b9afbc9f736990", "filename": "src/test/ui/issue-46471-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fissue-46471-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fissue-46471-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -15,7 +15,7 @@ fn main() {\n         let mut z = 0;\n         &mut z\n     };\n-    //~^ ERROR `z` does not live long enough (Ast) [E0597]\n+    //~^^ ERROR `z` does not live long enough (Ast) [E0597]\n     //~| ERROR `z` does not live long enough (Mir) [E0597]\n     println!(\"{}\", y);\n }"}, {"sha": "9f12092f99cc04bef8a999a43ca2bf24d42bbdb5", "filename": "src/test/ui/issue-46471-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471-1.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -10,12 +10,12 @@ error[E0597]: `z` does not live long enough (Ast)\n    | - borrowed value needs to live until here\n \n error[E0597]: `z` does not live long enough (Mir)\n-  --> $DIR/issue-46471-1.rs:17:6\n+  --> $DIR/issue-46471-1.rs:16:9\n    |\n 16 |         &mut z\n-   |         ------ borrow occurs here\n+   |         ^^^^^^ borrowed value does not live long enough\n 17 |     };\n-   |      ^ `z` dropped here while still borrowed\n+   |      - `z` dropped here while still borrowed\n ...\n 21 | }\n    | - borrowed value needs to live until here"}, {"sha": "19fc579d198ff6d3be172c1c3b47d50c5eaa3ece", "filename": "src/test/ui/issue-46471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46471.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -13,7 +13,7 @@ error[E0597]: `x` does not live long enough (Mir)\n   --> $DIR/issue-46471.rs:15:5\n    |\n 15 |     &x\n-   |     ^^ does not live long enough\n+   |     ^^ borrowed value does not live long enough\n ...\n 18 | }\n    |  - borrowed value only lives until here"}, {"sha": "50df72fc2a0201326b2b674109c1563c2a39ba8e", "filename": "src/test/ui/issue-46472.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46472.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -21,7 +21,7 @@ error[E0597]: borrowed value does not live long enough (Mir)\n   --> $DIR/issue-46472.rs:14:10\n    |\n 14 |     &mut 4\n-   |          ^ does not live long enough\n+   |          ^ temporary value does not live long enough\n ...\n 17 | }\n    |  - temporary value only lives until here"}, {"sha": "ed57d89802cd131194e5375a033a3368c4b34de9", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/capture-ref-in-struct.rs:32:16\n    |\n 32 |             y: &y,\n-   |                ^^ does not live long enough\n+   |                ^^ borrowed value does not live long enough\n ...\n 37 |     }\n    |      - borrowed value only lives until here"}, {"sha": "4e9a25e28927383e74a3557e521c3b94be9164a4", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -28,7 +28,7 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/escape-argument.rs:37:25\n    |\n 37 |         closure(&mut p, &y);\n-   |                         ^^ does not live long enough\n+   |                         ^^ borrowed value does not live long enough\n 38 |         //~^ ERROR `y` does not live long enough [E0597]\n 39 |     }\n    |      - borrowed value only lives until here"}, {"sha": "60bd7a569a0c7b3db45f0b84135aac96dbf467ab", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -54,7 +54,7 @@ error[E0597]: `y` does not live long enough\n 31 | |             let mut closure1 = || p = &y;\n 32 | |             closure1();\n 33 | |         };\n-   | |_________^ does not live long enough\n+   | |_________^ borrowed value does not live long enough\n ...\n 36 |       }\n    |        - borrowed value only lives until here"}, {"sha": "dc86f4cff08d3830da985277176970c9a591d45e", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -31,7 +31,7 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-ref.rs:33:27\n    |\n 33 |         let mut closure = || p = &y;\n-   |                           ^^^^^^^^^ does not live long enough\n+   |                           ^^^^^^^^^ borrowed value does not live long enough\n ...\n 36 |     }\n    |      - borrowed value only lives until here"}, {"sha": "9b23c48e249401661fd3ced4f7986c4625f362c0", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -75,7 +75,7 @@ error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:41:26\n    |\n 41 |     let cell = Cell::new(&a);\n-   |                          ^^ does not live long enough\n+   |                          ^^ borrowed value does not live long enough\n ...\n 49 | }\n    | - borrowed value only lives until here"}, {"sha": "7cdea5b0bd2645d9e9a2b30ec2517f49f4319425", "filename": "src/test/ui/region-borrow-params-issue-29793-small.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:19:34\n    |\n 19 |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------        ^ does not live long enough\n+   |                 ---------        ^ borrowed value does not live long enough\n    |                 |\n    |                 capture occurs here\n ...\n@@ -15,7 +15,7 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:19:45\n    |\n 19 |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------                   ^ does not live long enough\n+   |                 ---------                   ^ borrowed value does not live long enough\n    |                 |\n    |                 capture occurs here\n ...\n@@ -28,7 +28,7 @@ error[E0597]: `x` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:34:34\n    |\n 34 |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------        ^ does not live long enough\n+   |                 ---------        ^ borrowed value does not live long enough\n    |                 |\n    |                 capture occurs here\n ...\n@@ -41,7 +41,7 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/region-borrow-params-issue-29793-small.rs:34:45\n    |\n 34 |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n-   |                 ---------                   ^ does not live long enough\n+   |                 ---------                   ^ borrowed value does not live long enough\n    |                 |\n    |                 capture occurs here\n ..."}, {"sha": "8a27af0119aaaa54fe775ad465839c4748ea3eec", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -42,6 +42,7 @@ fn f() {\n         //~| NOTE consider using a `let` binding to increase its lifetime\n \n     }                       // (statement 7)\n+    //~^ NOTE temporary value needs to live until here\n \n     let mut v5 = Vec::new(); // statement 8\n "}, {"sha": "e65fd723e5f585019bf59d92db2b702ee16714d4", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -1,49 +1,49 @@\n error[E0597]: `young[..]` does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:43:1\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:21:14\n    |\n 21 |     v2.push(&young[0]);      // statement 4\n-   |              -------- borrow occurs here\n+   |              ^^^^^^^^ borrowed value does not live long enough\n ...\n-43 | }\n-   | ^ `young[..]` dropped here while still borrowed\n+56 | }\n+   | - `young[..]` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:25:22\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:28:14\n    |\n-25 |     v3.push(&id('x'));           // statement 6\n-   |              ------- ^ temporary value dropped here while still borrowed\n+28 |     v3.push(&id('x'));           // statement 6\n+   |              ^^^^^^^ - temporary value dropped here while still borrowed\n    |              |\n-   |              temporary value created here\n+   |              temporary value does not live long enough\n ...\n-43 | }\n+56 | }\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:32:26\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:38:18\n    |\n-32 |         v4.push(&id('y'));\n-   |                  ------- ^ temporary value dropped here while still borrowed\n+38 |         v4.push(&id('y'));\n+   |                  ^^^^^^^ - temporary value dropped here while still borrowed\n    |                  |\n-   |                  temporary value created here\n+   |                  temporary value does not live long enough\n ...\n-35 |     }                       // (statement 7)\n+44 |     }                       // (statement 7)\n    |     - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:39:22\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:49:14\n    |\n-39 |     v5.push(&id('z'));\n-   |              ------- ^ temporary value dropped here while still borrowed\n+49 |     v5.push(&id('z'));\n+   |              ^^^^^^^ - temporary value dropped here while still borrowed\n    |              |\n-   |              temporary value created here\n+   |              temporary value does not live long enough\n ...\n-43 | }\n+56 | }\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime"}, {"sha": "b2871342e887c60c846b31b122b19a45d4164de0", "filename": "src/test/ui/span/dropck-object-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -35,6 +35,7 @@ impl<'t> MakerTrait for Box<Trait<'t>+'static> {\n pub fn main() {\n     let m : Box<Trait+'static> = make_val();\n     assert_eq!(object_invoke1(&*m), (4,5));\n+    //~^ ERROR `*m` does not live long enough\n \n     // the problem here is that the full type of `m` is\n     //\n@@ -54,5 +55,4 @@ pub fn main() {\n     // the type of `m` *strictly outlives* `'m`. Hence we get an\n     // error.\n }\n-//~^ ERROR `*m` does not live long enough\n "}, {"sha": "2b760415a1aa2e5e6c23e6ca66444e41668f0c27", "filename": "src/test/ui/span/dropck-object-cycle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -1,11 +1,11 @@\n error[E0597]: `*m` does not live long enough\n-  --> $DIR/dropck-object-cycle.rs:56:1\n+  --> $DIR/dropck-object-cycle.rs:37:32\n    |\n 37 |     assert_eq!(object_invoke1(&*m), (4,5));\n-   |                                -- borrow occurs here\n+   |                                ^^ borrowed value does not live long enough\n ...\n-56 | }\n-   | ^ `*m` dropped here while still borrowed\n+57 | }\n+   | - `*m` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "3eac0106b18c25c3e912dd7654185db71fd1d95e", "filename": "src/test/ui/span/issue-36537.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let p;\n     let a = 42;\n     p = &a;\n+    //~^ ERROR `a` does not live long enough\n }\n-//~^ ERROR `a` does not live long enough"}, {"sha": "255700a55f33540fa73090b76dc497cac8cd4508", "filename": "src/test/ui/span/issue-36537.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -1,10 +1,11 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/issue-36537.rs:15:1\n+  --> $DIR/issue-36537.rs:14:10\n    |\n 14 |     p = &a;\n-   |          - borrow occurs here\n-15 | }\n-   | ^ `a` dropped here while still borrowed\n+   |          ^ borrowed value does not live long enough\n+15 |     //~^ ERROR `a` does not live long enough\n+16 | }\n+   | - `a` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n "}, {"sha": "8e85ca5bceaaa942e1a4e1d5efc3339c26f3e764", "filename": "src/test/ui/span/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.rs?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -15,9 +15,9 @@ fn broken() {\n     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n         _y.push(&mut z);\n+        //~^ ERROR `z` does not live long enough\n         x += 1; //~ ERROR cannot assign\n     }\n-    //~^ ERROR `z` does not live long enough\n }\n \n fn main() { }"}, {"sha": "73ff449b2b532b4e296cf7cc5817ff8bd4b7088f", "filename": "src/test/ui/span/regions-escape-loop-via-vec.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b562565b09a2d13596c03635e5485c4c4814b33e/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr?ref=b562565b09a2d13596c03635e5485c4c4814b33e", "patch": "@@ -1,12 +1,11 @@\n error[E0597]: `z` does not live long enough\n-  --> $DIR/regions-escape-loop-via-vec.rs:19:5\n+  --> $DIR/regions-escape-loop-via-vec.rs:17:22\n    |\n 17 |         _y.push(&mut z);\n-   |                      - borrow occurs here\n-18 |         x += 1; //~ ERROR cannot assign\n-19 |     }\n-   |     ^ `z` dropped here while still borrowed\n-20 |     //~^ ERROR `z` does not live long enough\n+   |                      ^ borrowed value does not live long enough\n+...\n+20 |     }\n+   |     - `z` dropped here while still borrowed\n 21 | }\n    | - borrowed value needs to live until here\n \n@@ -28,12 +27,12 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |             ^^^^^ use of borrowed `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/regions-escape-loop-via-vec.rs:18:9\n+  --> $DIR/regions-escape-loop-via-vec.rs:19:9\n    |\n 14 |     let mut _y = vec![&mut x];\n    |                            - borrow of `x` occurs here\n ...\n-18 |         x += 1; //~ ERROR cannot assign\n+19 |         x += 1; //~ ERROR cannot assign\n    |         ^^^^^^ assignment to borrowed `x` occurs here\n \n error: aborting due to 4 previous errors"}]}