{"sha": "3191a93185b34c6deebca2aad0584d2840ad6d43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOTFhOTMxODViMzRjNmRlZWJjYTJhYWQwNTg0ZDI4NDBhZDZkNDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-07T18:51:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-07T18:51:36Z"}, "message": "Merge #8409\n\n8409: Various remaining fixes for Chalk IR move r=flodiebold a=flodiebold\n\nCC #8313\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "1fad465381a5b9a9d0b77dbf68a246db1835f511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fad465381a5b9a9d0b77dbf68a246db1835f511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3191a93185b34c6deebca2aad0584d2840ad6d43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbf84CRBK7hj4Ov3rIwAAdHIIAHj40oNPQk+STQxz0tvZcaVE\nPccbuK76Dhnl5RTKAMevun3rpWB3N77kWQy4bCe7XnUo1QjjthAtNZuLe8y0Izlt\nHPkWli0rNqKYXx+h3ij8VPOSnI93tMdoneAdsf582dvh5Ll7tSu1pJcjS776Pv5T\nuriGHyV6N7LLnUgu3N2hx4utkjH+0Dkb6m6lI3maVTTXqdVTQNRIezdwzz7c6NnW\no0DjGb1Aj23i9Ubnh1HTSXxosMQC2YPRJZSBEiQRip9K+3R58ptXKB/g8bAV3n54\nVcXj8otfbw/WwLw6opjVUxdRLsPbpwqsza7nOYIqDTWXmExybhivMZ3dOb/vLNg=\n=GmW4\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fad465381a5b9a9d0b77dbf68a246db1835f511\nparent 6379839c8203b6fbc9af947997a7f73a36ef15a2\nparent dc116f7ce2192433c9491441a11d294e7d294fbf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617821496 +0000\ncommitter GitHub <noreply@github.com> 1617821496 +0000\n\nMerge #8409\n\n8409: Various remaining fixes for Chalk IR move r=flodiebold a=flodiebold\n\nCC #8313\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3191a93185b34c6deebca2aad0584d2840ad6d43", "html_url": "https://github.com/rust-lang/rust/commit/3191a93185b34c6deebca2aad0584d2840ad6d43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3191a93185b34c6deebca2aad0584d2840ad6d43/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6379839c8203b6fbc9af947997a7f73a36ef15a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6379839c8203b6fbc9af947997a7f73a36ef15a2", "html_url": "https://github.com/rust-lang/rust/commit/6379839c8203b6fbc9af947997a7f73a36ef15a2"}, {"sha": "dc116f7ce2192433c9491441a11d294e7d294fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc116f7ce2192433c9491441a11d294e7d294fbf", "html_url": "https://github.com/rust-lang/rust/commit/dc116f7ce2192433c9491441a11d294e7d294fbf"}], "stats": {"total": 148, "additions": 78, "deletions": 70}, "files": [{"sha": "0afc069061b3e4422698818fb35e3407ecd83ed4", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -59,7 +59,8 @@ use hir_ty::{\n     traits::FnTrait,\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n     DebruijnIndex, InEnvironment, Interner, QuantifiedWhereClause, Scalar, Solution, Substitution,\n-    TraitEnvironment, Ty, TyBuilder, TyDefId, TyExt, TyKind, TyVariableKind, WhereClause,\n+    TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyDefId, TyExt, TyKind, TyVariableKind,\n+    WhereClause,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -1790,7 +1791,7 @@ impl Type {\n             .build();\n \n         let goal = Canonical {\n-            value: hir_ty::InEnvironment::new(self.env.env.clone(), trait_ref.cast(&Interner)),\n+            value: hir_ty::InEnvironment::new(&self.env.env, trait_ref.cast(&Interner)),\n             binders: CanonicalVarKinds::empty(&Interner),\n         };\n \n@@ -1807,9 +1808,9 @@ impl Type {\n             .push(self.ty.clone())\n             .fill(args.iter().map(|t| t.ty.clone()))\n             .build();\n-        let goal = Canonical::new(\n+        let goal = hir_ty::make_canonical(\n             InEnvironment::new(\n-                self.env.env.clone(),\n+                &self.env.env,\n                 AliasEq {\n                     alias: AliasTy::Projection(projection),\n                     ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))"}, {"sha": "28ed3aac6d49a4035d72e5b10879e58476b540c2", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -202,12 +202,12 @@ impl TyExt for Ty {\n                             .map(|pred| pred.clone().substitute(&Interner, &substs))\n                             .filter(|wc| match &wc.skip_binders() {\n                                 WhereClause::Implemented(tr) => {\n-                                    tr.self_type_parameter(&Interner) == self\n+                                    &tr.self_type_parameter(&Interner) == self\n                                 }\n                                 WhereClause::AliasEq(AliasEq {\n                                     alias: AliasTy::Projection(proj),\n                                     ty: _,\n-                                }) => proj.self_type_parameter(&Interner) == self,\n+                                }) => &proj.self_type_parameter(&Interner) == self,\n                                 _ => false,\n                             })\n                             .collect::<Vec<_>>();\n@@ -293,3 +293,13 @@ impl ProjectionTyExt for ProjectionTy {\n         }\n     }\n }\n+\n+pub trait TraitRefExt {\n+    fn hir_trait_id(&self) -> TraitId;\n+}\n+\n+impl TraitRefExt for TraitRef {\n+    fn hir_trait_id(&self) -> TraitId {\n+        from_chalk_trait_id(self.trait_id)\n+    }\n+}"}, {"sha": "e0ca96c6d20600c60de221e422715f66e73d92c8", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId,\n     CallableSig, Const, ConstValue, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime,\n     LifetimeData, LifetimeOutlives, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt,\n-    QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind, WhereClause,\n+    QuantifiedWhereClause, Scalar, TraitRef, TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n };\n \n pub struct HirFormatter<'a> {\n@@ -616,12 +616,12 @@ impl HirDisplay for Ty {\n                                 .map(|pred| pred.clone().substitute(&Interner, &substs))\n                                 .filter(|wc| match &wc.skip_binders() {\n                                     WhereClause::Implemented(tr) => {\n-                                        tr.self_type_parameter(&Interner) == self\n+                                        &tr.self_type_parameter(&Interner) == self\n                                     }\n                                     WhereClause::AliasEq(AliasEq {\n                                         alias: AliasTy::Projection(proj),\n                                         ty: _,\n-                                    }) => proj.self_type_parameter(&Interner) == self,\n+                                    }) => &proj.self_type_parameter(&Interner) == self,\n                                     _ => false,\n                                 })\n                                 .collect::<Vec<_>>();\n@@ -745,7 +745,7 @@ fn write_bounds_like_dyn_trait(\n                 // existential) here, which is the only thing that's\n                 // possible in actual Rust, and hence don't print it\n                 write!(f, \"{}\", f.db.trait_data(trait_).name)?;\n-                if let [_, params @ ..] = &*trait_ref.substitution.interned() {\n+                if let [_, params @ ..] = &*trait_ref.substitution.interned().as_slice() {\n                     if is_fn_trait {\n                         if let Some(args) =\n                             params.first().and_then(|it| it.assert_ty_ref(&Interner).as_tuple())\n@@ -792,31 +792,29 @@ fn write_bounds_like_dyn_trait(\n     Ok(())\n }\n \n-impl TraitRef {\n-    fn hir_fmt_ext(&self, f: &mut HirFormatter, use_as: bool) -> Result<(), HirDisplayError> {\n-        if f.should_truncate() {\n-            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n-        }\n+fn fmt_trait_ref(tr: &TraitRef, f: &mut HirFormatter, use_as: bool) -> Result<(), HirDisplayError> {\n+    if f.should_truncate() {\n+        return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n+    }\n \n-        self.self_type_parameter(&Interner).hir_fmt(f)?;\n-        if use_as {\n-            write!(f, \" as \")?;\n-        } else {\n-            write!(f, \": \")?;\n-        }\n-        write!(f, \"{}\", f.db.trait_data(self.hir_trait_id()).name)?;\n-        if self.substitution.len(&Interner) > 1 {\n-            write!(f, \"<\")?;\n-            f.write_joined(&self.substitution.interned()[1..], \", \")?;\n-            write!(f, \">\")?;\n-        }\n-        Ok(())\n+    tr.self_type_parameter(&Interner).hir_fmt(f)?;\n+    if use_as {\n+        write!(f, \" as \")?;\n+    } else {\n+        write!(f, \": \")?;\n     }\n+    write!(f, \"{}\", f.db.trait_data(tr.hir_trait_id()).name)?;\n+    if tr.substitution.len(&Interner) > 1 {\n+        write!(f, \"<\")?;\n+        f.write_joined(&tr.substitution.interned()[1..], \", \")?;\n+        write!(f, \">\")?;\n+    }\n+    Ok(())\n }\n \n impl HirDisplay for TraitRef {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n-        self.hir_fmt_ext(f, false)\n+        fmt_trait_ref(self, f, false)\n     }\n }\n \n@@ -830,7 +828,7 @@ impl HirDisplay for WhereClause {\n             WhereClause::Implemented(trait_ref) => trait_ref.hir_fmt(f)?,\n             WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n                 write!(f, \"<\")?;\n-                projection_ty.trait_ref(f.db).hir_fmt_ext(f, true)?;\n+                fmt_trait_ref(&projection_ty.trait_ref(f.db), f, true)?;\n                 write!(\n                     f,\n                     \">::{} = \","}, {"sha": "531159e54273948b5513e4dbe22311ddff3f35a4", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -336,7 +336,7 @@ impl<'a> InferenceContext<'a> {\n         self.last_obligations_check = Some(self.table.revision);\n         let obligations = mem::replace(&mut self.obligations, Vec::new());\n         for obligation in obligations {\n-            let in_env = InEnvironment::new(self.trait_env.env.clone(), obligation.clone());\n+            let in_env = InEnvironment::new(&self.trait_env.env, obligation.clone());\n             let canonicalized = self.canonicalizer().canonicalize_obligation(in_env);\n             let solution =\n                 self.db.trait_solve(self.resolver.krate().unwrap(), canonicalized.value.clone());"}, {"sha": "fd679f444642af04be7b9de3e7efa3b27c0eaabe", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -139,7 +139,7 @@ impl<'a> InferenceContext<'a> {\n             b.push(from_ty.clone()).push(to_ty.clone()).build()\n         };\n \n-        let goal = InEnvironment::new(self.trait_env.env.clone(), trait_ref.cast(&Interner));\n+        let goal = InEnvironment::new(&self.trait_env.env, trait_ref.cast(&Interner));\n \n         let canonicalizer = self.canonicalizer();\n         let canonicalized = canonicalizer.canonicalize_obligation(goal);"}, {"sha": "a41e8e116691b244d08ab304b35a9749388873fd", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -122,7 +122,7 @@ impl<'a> InferenceContext<'a> {\n         let ty = match &body[pat] {\n             &Pat::Tuple { ref args, ellipsis } => {\n                 let expectations = match expected.as_tuple() {\n-                    Some(parameters) => &*parameters.interned(),\n+                    Some(parameters) => &*parameters.interned().as_slice(),\n                     _ => &[],\n                 };\n "}, {"sha": "f8955aa32494f8892c9641fdc0a477f77c25ffae", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -11,7 +11,8 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    method_resolution, Interner, Substitution, Ty, TyBuilder, TyExt, TyKind, ValueTyDefId,\n+    method_resolution, Interner, Substitution, TraitRefExt, Ty, TyBuilder, TyExt, TyKind,\n+    ValueTyDefId,\n };\n \n use super::{ExprOrPatId, InferenceContext, TraitRef};"}, {"sha": "87f10e9d5a7b074631b01fad723c9e8f644370d6", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -41,7 +41,7 @@ use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n \n pub use autoderef::autoderef;\n pub use builder::TyBuilder;\n-pub use chalk_ext::{ProjectionTyExt, TyExt};\n+pub use chalk_ext::*;\n pub use infer::{could_unify, InferenceResult};\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n@@ -107,22 +107,18 @@ pub fn make_only_type_binders<T>(num_vars: usize, value: T) -> Binders<T> {\n     )\n }\n \n-impl TraitRef {\n-    pub fn hir_trait_id(&self) -> TraitId {\n-        from_chalk_trait_id(self.trait_id)\n-    }\n-}\n-\n-impl<T> Canonical<T> {\n-    pub fn new(value: T, kinds: impl IntoIterator<Item = TyVariableKind>) -> Self {\n-        let kinds = kinds.into_iter().map(|tk| {\n-            chalk_ir::CanonicalVarKind::new(\n-                chalk_ir::VariableKind::Ty(tk),\n-                chalk_ir::UniverseIndex::ROOT,\n-            )\n-        });\n-        Self { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n-    }\n+// FIXME: get rid of this\n+pub fn make_canonical<T>(\n+    value: T,\n+    kinds: impl IntoIterator<Item = TyVariableKind>,\n+) -> Canonical<T> {\n+    let kinds = kinds.into_iter().map(|tk| {\n+        chalk_ir::CanonicalVarKind::new(\n+            chalk_ir::VariableKind::Ty(tk),\n+            chalk_ir::UniverseIndex::ROOT,\n+        )\n+    });\n+    Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n }\n \n /// A function signature as seen by type inference: Several parameter types and"}, {"sha": "e6903e189e083189c2bedd098ca702fa1f1bfce4", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -35,7 +35,7 @@ use crate::{\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n     FnSubst, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n     QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n-    TraitEnvironment, TraitRef, Ty, TyBuilder, TyKind, TypeWalk, WhereClause,\n+    TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, TypeWalk, WhereClause,\n };\n \n #[derive(Debug)]"}, {"sha": "7e09a1539d41f2b81d9d0a1d47d0e07f5eeafb9e", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -22,8 +22,8 @@ use crate::{\n     static_lifetime,\n     utils::all_super_traits,\n     AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n-    InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, Ty, TyBuilder, TyExt, TyKind,\n-    TypeWalk,\n+    InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, TraitRefExt, Ty, TyBuilder,\n+    TyExt, TyKind, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -845,7 +845,7 @@ fn generic_implements_goal(\n     let obligation = trait_ref.cast(&Interner);\n     Canonical {\n         binders: CanonicalVarKinds::from_iter(&Interner, kinds),\n-        value: InEnvironment::new(env.env.clone(), obligation),\n+        value: InEnvironment::new(&env.env, obligation),\n     }\n }\n "}, {"sha": "7d87741b8e862ebaea5f78a8555a0922e65fc997", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -9,7 +9,7 @@ use stdx::panic_context;\n \n use crate::{\n     db::HirDatabase, AliasEq, AliasTy, Canonical, DomainGoal, Guidance, HirDisplay, InEnvironment,\n-    Solution, Ty, TyKind, WhereClause,\n+    Solution, TraitRefExt, Ty, TyKind, WhereClause,\n };\n \n use self::chalk::{from_chalk, Interner, ToChalk};"}, {"sha": "090f6492b438b72f0e03885df6f031c17a9d87a0", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     to_assoc_type_id, to_chalk_trait_id,\n     utils::generics,\n     AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, ProjectionTy, Substitution,\n-    TraitRef, Ty, TyBuilder, TyExt, TyKind, WhereClause,\n+    TraitRef, TraitRefExt, Ty, TyBuilder, TyExt, TyKind, WhereClause,\n };\n use mapping::{\n     convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,"}, {"sha": "701359e6f50003a03ce27e4882ecf4ba77f4ebc3", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -10,9 +10,9 @@ use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n-    chalk_ext::ProjectionTyExt, db::HirDatabase, static_lifetime, AliasTy, CallableDefId,\n-    Canonical, ConstrainedSubst, DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy,\n-    ProjectionTy, QuantifiedWhereClause, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n+    db::HirDatabase, static_lifetime, AliasTy, CallableDefId, Canonical, ConstrainedSubst,\n+    DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy, ProjectionTy, ProjectionTyExt,\n+    QuantifiedWhereClause, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n };\n \n use super::interner::*;\n@@ -509,7 +509,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n     let (pred, binders) = pred.as_ref().into_value_and_skipped_binders();\n     match pred {\n         WhereClause::Implemented(trait_ref) => {\n-            if trait_ref.self_type_parameter(&Interner) != &self_ty_shifted_in {\n+            if trait_ref.self_type_parameter(&Interner) != self_ty_shifted_in {\n                 // we can only convert predicates back to type bounds if they\n                 // have the expected self type\n                 return None;\n@@ -522,7 +522,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n             Some(chalk_ir::Binders::new(binders, rust_ir::InlineBound::TraitBound(trait_bound)))\n         }\n         WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n-            if projection_ty.self_type_parameter(&Interner) != &self_ty_shifted_in {\n+            if projection_ty.self_type_parameter(&Interner) != self_ty_shifted_in {\n                 return None;\n             }\n             let trait_ = projection_ty.trait_(db);"}, {"sha": "89adad10848a0458da1ca7802df1db78a83bcb4e", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -30,8 +30,8 @@ pub struct ProjectionTy {\n }\n \n impl ProjectionTy {\n-    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n-        &self.substitution.interned()[0].assert_ty_ref(interner)\n+    pub fn self_type_parameter(&self, interner: &Interner) -> Ty {\n+        self.substitution.interned()[0].assert_ty_ref(interner).clone()\n     }\n }\n \n@@ -282,7 +282,7 @@ impl GenericArg {\n pub struct Substitution(SmallVec<[GenericArg; 2]>);\n \n impl Substitution {\n-    pub fn interned(&self) -> &[GenericArg] {\n+    pub fn interned(&self) -> &SmallVec<[GenericArg; 2]> {\n         &self.0\n     }\n \n@@ -413,8 +413,8 @@ pub struct TraitRef {\n }\n \n impl TraitRef {\n-    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n-        &self.substitution.at(interner, 0).assert_ty_ref(interner)\n+    pub fn self_type_parameter(&self, interner: &Interner) -> Ty {\n+        self.substitution.at(interner, 0).assert_ty_ref(interner).clone()\n     }\n }\n \n@@ -470,8 +470,8 @@ pub struct InEnvironment<T> {\n }\n \n impl<T> InEnvironment<T> {\n-    pub fn new(environment: chalk_ir::Environment<Interner>, value: T) -> InEnvironment<T> {\n-        InEnvironment { environment, goal: value }\n+    pub fn new(environment: &chalk_ir::Environment<Interner>, value: T) -> InEnvironment<T> {\n+        InEnvironment { environment: environment.clone(), goal: value }\n     }\n }\n "}, {"sha": "8d5d5cd73396f5406fa177cc0638f0b635d4f9d6", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191a93185b34c6deebca2aad0584d2840ad6d43/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=3191a93185b34c6deebca2aad0584d2840ad6d43", "patch": "@@ -16,7 +16,9 @@ use hir_def::{\n };\n use hir_expand::name::{name, Name};\n \n-use crate::{db::HirDatabase, Interner, Substitution, TraitRef, TyKind, TypeWalk, WhereClause};\n+use crate::{\n+    db::HirDatabase, Interner, Substitution, TraitRef, TraitRefExt, TyKind, TypeWalk, WhereClause,\n+};\n \n fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     let resolver = trait_.resolver(db);"}]}