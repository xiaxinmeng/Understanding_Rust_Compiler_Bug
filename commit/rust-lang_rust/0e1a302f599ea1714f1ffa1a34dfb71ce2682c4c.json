{"sha": "0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWEzMDJmNTk5ZWExNzE0ZjFmZmExYTM0ZGZiNzFjZTI2ODJjNGM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-14T23:27:06Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-17T20:16:05Z"}, "message": "Remove dead code in rustdoc::doctree\n\nIt was completely unused.", "tree": {"sha": "ece8318a8316c924b23b0e64494cea0fce8424ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece8318a8316c924b23b0e64494cea0fce8424ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c", "html_url": "https://github.com/rust-lang/rust/commit/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc4ca552916d4f6b0952f9352a1cc7e1f68d6248", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc4ca552916d4f6b0952f9352a1cc7e1f68d6248", "html_url": "https://github.com/rust-lang/rust/commit/fc4ca552916d4f6b0952f9352a1cc7e1f68d6248"}], "stats": {"total": 165, "additions": 18, "deletions": 147}, "files": [{"sha": "9d84089eb405c46633a543e8458c463ee0ee2416", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c", "patch": "@@ -2280,7 +2280,7 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n     }\n }\n \n-impl Clean<Item> for doctree::Macro<'_> {\n+impl Clean<Item> for doctree::Macro {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         Item::from_def_id_and_parts(\n             self.def_id,\n@@ -2301,7 +2301,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n     }\n }\n \n-impl Clean<Item> for doctree::ProcMacro<'_> {\n+impl Clean<Item> for doctree::ProcMacro {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         Item::from_hir_id_and_parts(\n             self.id,"}, {"sha": "bd9262191356f5e577fda51d1c59ffa1cbe5de21", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c", "patch": "@@ -28,25 +28,19 @@ crate struct Module<'hir> {\n     crate statics: Vec<Static<'hir>>,\n     crate constants: Vec<Constant<'hir>>,\n     crate traits: Vec<Trait<'hir>>,\n-    crate vis: &'hir hir::Visibility<'hir>,\n     crate impls: Vec<Impl<'hir>>,\n     crate foreigns: Vec<ForeignItem<'hir>>,\n-    crate macros: Vec<Macro<'hir>>,\n-    crate proc_macros: Vec<ProcMacro<'hir>>,\n+    crate macros: Vec<Macro>,\n+    crate proc_macros: Vec<ProcMacro>,\n     crate trait_aliases: Vec<TraitAlias<'hir>>,\n     crate is_crate: bool,\n }\n \n impl Module<'hir> {\n-    crate fn new(\n-        name: Option<Symbol>,\n-        attrs: &'hir [ast::Attribute],\n-        vis: &'hir hir::Visibility<'hir>,\n-    ) -> Module<'hir> {\n+    crate fn new(name: Option<Symbol>, attrs: &'hir [ast::Attribute]) -> Module<'hir> {\n         Module {\n             name,\n             id: hir::CRATE_HIR_ID,\n-            vis,\n             where_outer: rustc_span::DUMMY_SP,\n             where_inner: rustc_span::DUMMY_SP,\n             attrs,\n@@ -83,53 +77,39 @@ crate enum StructType {\n }\n \n crate struct Struct<'hir> {\n-    crate vis: &'hir hir::Visibility<'hir>,\n     crate id: hir::HirId,\n     crate struct_type: StructType,\n     crate name: Symbol,\n     crate generics: &'hir hir::Generics<'hir>,\n-    crate attrs: &'hir [ast::Attribute],\n     crate fields: &'hir [hir::StructField<'hir>],\n-    crate span: Span,\n }\n \n crate struct Union<'hir> {\n-    crate vis: &'hir hir::Visibility<'hir>,\n     crate id: hir::HirId,\n     crate struct_type: StructType,\n     crate name: Symbol,\n     crate generics: &'hir hir::Generics<'hir>,\n-    crate attrs: &'hir [ast::Attribute],\n     crate fields: &'hir [hir::StructField<'hir>],\n-    crate span: Span,\n }\n \n crate struct Enum<'hir> {\n-    crate vis: &'hir hir::Visibility<'hir>,\n     crate variants: Vec<Variant<'hir>>,\n     crate generics: &'hir hir::Generics<'hir>,\n-    crate attrs: &'hir [ast::Attribute],\n     crate id: hir::HirId,\n-    crate span: Span,\n     crate name: Symbol,\n }\n \n crate struct Variant<'hir> {\n     crate name: Symbol,\n     crate id: hir::HirId,\n-    crate attrs: &'hir [ast::Attribute],\n     crate def: &'hir hir::VariantData<'hir>,\n-    crate span: Span,\n }\n \n crate struct Function<'hir> {\n     crate decl: &'hir hir::FnDecl<'hir>,\n-    crate attrs: &'hir [ast::Attribute],\n     crate id: hir::HirId,\n     crate name: Symbol,\n-    crate vis: &'hir hir::Visibility<'hir>,\n     crate header: hir::FnHeader,\n-    crate span: Span,\n     crate generics: &'hir hir::Generics<'hir>,\n     crate body: hir::BodyId,\n }\n@@ -139,18 +119,12 @@ crate struct Typedef<'hir> {\n     crate gen: &'hir hir::Generics<'hir>,\n     crate name: Symbol,\n     crate id: hir::HirId,\n-    crate attrs: &'hir [ast::Attribute],\n-    crate span: Span,\n-    crate vis: &'hir hir::Visibility<'hir>,\n }\n \n crate struct OpaqueTy<'hir> {\n     crate opaque_ty: &'hir hir::OpaqueTy<'hir>,\n     crate name: Symbol,\n     crate id: hir::HirId,\n-    crate attrs: &'hir [ast::Attribute],\n-    crate span: Span,\n-    crate vis: &'hir hir::Visibility<'hir>,\n }\n \n #[derive(Debug)]\n@@ -169,10 +143,7 @@ crate struct Constant<'hir> {\n     crate type_: &'hir hir::Ty<'hir>,\n     crate expr: hir::BodyId,\n     crate name: Symbol,\n-    crate attrs: &'hir [ast::Attribute],\n-    crate vis: &'hir hir::Visibility<'hir>,\n     crate id: hir::HirId,\n-    crate span: Span,\n }\n \n crate struct Trait<'hir> {\n@@ -184,18 +155,13 @@ crate struct Trait<'hir> {\n     crate bounds: &'hir [hir::GenericBound<'hir>],\n     crate attrs: &'hir [ast::Attribute],\n     crate id: hir::HirId,\n-    crate span: Span,\n-    crate vis: &'hir hir::Visibility<'hir>,\n }\n \n crate struct TraitAlias<'hir> {\n     crate name: Symbol,\n     crate generics: &'hir hir::Generics<'hir>,\n     crate bounds: &'hir [hir::GenericBound<'hir>],\n-    crate attrs: &'hir [ast::Attribute],\n     crate id: hir::HirId,\n-    crate span: Span,\n-    crate vis: &'hir hir::Visibility<'hir>,\n }\n \n #[derive(Debug)]\n@@ -215,22 +181,16 @@ crate struct Impl<'hir> {\n }\n \n crate struct ForeignItem<'hir> {\n-    crate vis: &'hir hir::Visibility<'hir>,\n     crate id: hir::HirId,\n     crate name: Symbol,\n     crate kind: &'hir hir::ForeignItemKind<'hir>,\n-    crate attrs: &'hir [ast::Attribute],\n-    crate span: Span,\n }\n \n // For Macro we store the DefId instead of the NodeId, since we also create\n // these imported macro_rules (which only have a DUMMY_NODE_ID).\n-crate struct Macro<'hir> {\n+crate struct Macro {\n     crate name: Symbol,\n-    crate hid: hir::HirId,\n     crate def_id: hir::def_id::DefId,\n-    crate attrs: &'hir [ast::Attribute],\n-    crate span: Span,\n     crate matchers: Vec<Span>,\n     crate imported_from: Option<Symbol>,\n }\n@@ -256,13 +216,11 @@ crate struct Import<'hir> {\n     crate span: Span,\n }\n \n-crate struct ProcMacro<'hir> {\n+crate struct ProcMacro {\n     crate name: Symbol,\n     crate id: hir::HirId,\n     crate kind: MacroKind,\n     crate helpers: Vec<Symbol>,\n-    crate attrs: &'hir [ast::Attribute],\n-    crate span: Span,\n }\n \n crate fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {"}, {"sha": "76fae11291805604cb88cc0ccd6adbd2b42ad74e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 11, "deletions": 98, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0e1a302f599ea1714f1ffa1a34dfb71ce2682c4c", "patch": "@@ -91,16 +91,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     ) -> Struct<'tcx> {\n         debug!(\"visiting struct\");\n         let struct_type = struct_type_from_def(&*sd);\n-        Struct {\n-            id: item.hir_id,\n-            struct_type,\n-            name,\n-            vis: &item.vis,\n-            attrs: &item.attrs,\n-            generics,\n-            fields: sd.fields(),\n-            span: item.span,\n-        }\n+        Struct { id: item.hir_id, struct_type, name, generics, fields: sd.fields() }\n     }\n \n     fn visit_union_data(\n@@ -112,16 +103,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     ) -> Union<'tcx> {\n         debug!(\"visiting union\");\n         let struct_type = struct_type_from_def(&*sd);\n-        Union {\n-            id: item.hir_id,\n-            struct_type,\n-            name,\n-            vis: &item.vis,\n-            attrs: &item.attrs,\n-            generics,\n-            fields: sd.fields(),\n-            span: item.span,\n-        }\n+        Union { id: item.hir_id, struct_type, name, generics, fields: sd.fields() }\n     }\n \n     fn visit_enum_def(\n@@ -137,19 +119,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             variants: def\n                 .variants\n                 .iter()\n-                .map(|v| Variant {\n-                    name: v.ident.name,\n-                    id: v.id,\n-                    attrs: &v.attrs,\n-                    def: &v.data,\n-                    span: v.span,\n-                })\n+                .map(|v| Variant { name: v.ident.name, id: v.id, def: &v.data })\n                 .collect(),\n-            vis: &it.vis,\n             generics,\n-            attrs: &it.attrs,\n             id: it.hir_id,\n-            span: it.span,\n         }\n     }\n \n@@ -202,27 +175,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     }\n                 }\n \n-                om.proc_macros.push(ProcMacro {\n-                    name,\n-                    id: item.hir_id,\n-                    kind,\n-                    helpers,\n-                    attrs: &item.attrs,\n-                    span: item.span,\n-                });\n+                om.proc_macros.push(ProcMacro { name, id: item.hir_id, kind, helpers });\n             }\n             None => {\n-                om.fns.push(Function {\n-                    id: item.hir_id,\n-                    vis: &item.vis,\n-                    attrs: &item.attrs,\n-                    decl,\n-                    name,\n-                    span: item.span,\n-                    generics,\n-                    header,\n-                    body,\n-                });\n+                om.fns.push(Function { id: item.hir_id, decl, name, generics, header, body });\n             }\n         }\n     }\n@@ -236,7 +192,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         m: &'tcx hir::Mod<'tcx>,\n         name: Option<Symbol>,\n     ) -> Module<'tcx> {\n-        let mut om = Module::new(name, attrs, vis);\n+        let mut om = Module::new(name, attrs);\n         om.where_outer = span;\n         om.where_inner = m.inner;\n         om.id = id;\n@@ -471,26 +427,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 self.visit_fn(om, item, ident.name, &sig.decl, sig.header, gen, body)\n             }\n             hir::ItemKind::TyAlias(ty, ref gen) => {\n-                let t = Typedef {\n-                    ty,\n-                    gen,\n-                    name: ident.name,\n-                    id: item.hir_id,\n-                    attrs: &item.attrs,\n-                    span: item.span,\n-                    vis: &item.vis,\n-                };\n+                let t = Typedef { ty, gen, name: ident.name, id: item.hir_id };\n                 om.typedefs.push(t);\n             }\n             hir::ItemKind::OpaqueTy(ref opaque_ty) => {\n-                let t = OpaqueTy {\n-                    opaque_ty,\n-                    name: ident.name,\n-                    id: item.hir_id,\n-                    attrs: &item.attrs,\n-                    span: item.span,\n-                    vis: &item.vis,\n-                };\n+                let t = OpaqueTy { opaque_ty, name: ident.name, id: item.hir_id };\n                 om.opaque_tys.push(t);\n             }\n             hir::ItemKind::Static(type_, mutability, expr) => {\n@@ -510,15 +451,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n                 if ident.name != kw::Underscore {\n-                    let s = Constant {\n-                        type_,\n-                        expr,\n-                        id: item.hir_id,\n-                        name: ident.name,\n-                        attrs: &item.attrs,\n-                        span: item.span,\n-                        vis: &item.vis,\n-                    };\n+                    let s = Constant { type_, expr, id: item.hir_id, name: ident.name };\n                     om.constants.push(s);\n                 }\n             }\n@@ -533,21 +466,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     bounds,\n                     id: item.hir_id,\n                     attrs: &item.attrs,\n-                    span: item.span,\n-                    vis: &item.vis,\n                 };\n                 om.traits.push(t);\n             }\n             hir::ItemKind::TraitAlias(ref generics, ref bounds) => {\n-                let t = TraitAlias {\n-                    name: ident.name,\n-                    generics,\n-                    bounds,\n-                    id: item.hir_id,\n-                    attrs: &item.attrs,\n-                    span: item.span,\n-                    vis: &item.vis,\n-                };\n+                let t = TraitAlias { name: ident.name, generics, bounds, id: item.hir_id };\n                 om.trait_aliases.push(t);\n             }\n \n@@ -602,29 +525,19 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             id: item.hir_id,\n             name: renamed.unwrap_or(item.ident).name,\n             kind: &item.kind,\n-            vis: &item.vis,\n-            attrs: &item.attrs,\n-            span: item.span,\n         });\n     }\n \n     // Convert each `exported_macro` into a doc item.\n-    fn visit_local_macro(\n-        &self,\n-        def: &'tcx hir::MacroDef<'_>,\n-        renamed: Option<Symbol>,\n-    ) -> Macro<'tcx> {\n+    fn visit_local_macro(&self, def: &'tcx hir::MacroDef<'_>, renamed: Option<Symbol>) -> Macro {\n         debug!(\"visit_local_macro: {}\", def.ident);\n         let tts = def.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();\n \n         Macro {\n-            hid: def.hir_id,\n             def_id: self.cx.tcx.hir().local_def_id(def.hir_id).to_def_id(),\n-            attrs: &def.attrs,\n             name: renamed.unwrap_or(def.ident.name),\n-            span: def.span,\n             matchers,\n             imported_from: None,\n         }"}]}