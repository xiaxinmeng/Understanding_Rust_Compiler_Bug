{"sha": "ca6798ab073c4f2358f2577e7258108099f29144", "node_id": "C_kwDOAAsO6NoAKGNhNjc5OGFiMDczYzRmMjM1OGYyNTc3ZTcyNTgxMDgwOTlmMjkxNDQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-19T19:35:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-19T19:35:10Z"}, "message": "Rollup merge of #86479 - exphp-forks:float-debug-exponential, r=yaahc\n\nAutomatic exponential formatting in Debug\n\nContext: See [this comment from the libs team](https://github.com/rust-lang/rfcs/pull/2729#issuecomment-853454204)\n\n---\n\nMakes `\"{:?}\"` switch to exponential for floats based on magnitude. The libs team suggested exploring this idea in the discussion thread for RFC rust-lang/rfcs#2729. (**note:** this is **not** an implementation of the RFC; it is an implementation of one of the alternatives)\n\nThresholds chosen were 1e-4 and 1e16.  Justification described [here](https://github.com/rust-lang/rfcs/pull/2729#issuecomment-864482954).\n\n**This will require a crater run.**\n\n---\n\nAs mentioned in the commit message of 8731d4dfb47, this behavior will not apply when a precision is supplied, because I wanted to preserve the following existing and useful behavior of `{:.PREC?}` (which recursively applies `{:.PREC}` to floats in a struct):\n\n```rust\nassert_eq!(\n    format!(\"{:.2?}\", [100.0, 0.000004]),\n    \"[100.00, 0.00]\",\n)\n```\n\nI looked around and am not sure where there are any tests that actually use this in the test suite, though?\n\nAll things considered, I'm surprised that this change did not seem to break even a single existing test in `x.py test --stage 2`.  (even when I tried a smaller threshold of 1e6)", "tree": {"sha": "32f4e71f7579abd2cc56f7b991f3a8c80e966336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f4e71f7579abd2cc56f7b991f3a8c80e966336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca6798ab073c4f2358f2577e7258108099f29144", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbx3uCRBK7hj4Ov3rIwAAPvoIAFMmAJTK4BUe37c/G4+Y8ujo\nZdtCrnDWXZTjOCCv5qI+ZxCXeE0c7kXZG77b462VGx1FwXmPGgnJmAXO93Zy65T8\njAP/9cF7yxwhIRU/+rJ4306cV58cEVUzXM9f8qBGKFy2ReDssp0u4tDpyTM/1VWu\nNPLuKeg7MrIIKWb4M7oxnnjBVMbUGi6BiovY7pFotRHRJejddX9/n8GR5mY4ru0y\n2bwcAcbthczy6nsptbeh3FqC9FwPmwQ3uIFO7X4PGQXs3MNYXMGOOfAIdFYMBM3D\nA8jYSS6MDi6bQ79AZKrOMd5epBgBRjHvwTEqyf2To6UuQ+zGZzK9RiiPsfnDmHY=\n=gHzM\n-----END PGP SIGNATURE-----\n", "payload": "tree 32f4e71f7579abd2cc56f7b991f3a8c80e966336\nparent 1af55d19c7a9189374d89472f97dc119659bb67e\nparent 8731d4dfb479914a91f650f4f124528e332e8128\nauthor Yuki Okushi <jtitor@2k36.org> 1634672110 +0900\ncommitter GitHub <noreply@github.com> 1634672110 +0900\n\nRollup merge of #86479 - exphp-forks:float-debug-exponential, r=yaahc\n\nAutomatic exponential formatting in Debug\n\nContext: See [this comment from the libs team](https://github.com/rust-lang/rfcs/pull/2729#issuecomment-853454204)\n\n---\n\nMakes `\"{:?}\"` switch to exponential for floats based on magnitude. The libs team suggested exploring this idea in the discussion thread for RFC rust-lang/rfcs#2729. (**note:** this is **not** an implementation of the RFC; it is an implementation of one of the alternatives)\n\nThresholds chosen were 1e-4 and 1e16.  Justification described [here](https://github.com/rust-lang/rfcs/pull/2729#issuecomment-864482954).\n\n**This will require a crater run.**\n\n---\n\nAs mentioned in the commit message of 8731d4dfb47, this behavior will not apply when a precision is supplied, because I wanted to preserve the following existing and useful behavior of `{:.PREC?}` (which recursively applies `{:.PREC}` to floats in a struct):\n\n```rust\nassert_eq!(\n    format!(\"{:.2?}\", [100.0, 0.000004]),\n    \"[100.00, 0.00]\",\n)\n```\n\nI looked around and am not sure where there are any tests that actually use this in the test suite, though?\n\nAll things considered, I'm surprised that this change did not seem to break even a single existing test in `x.py test --stage 2`.  (even when I tried a smaller threshold of 1e6)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6798ab073c4f2358f2577e7258108099f29144", "html_url": "https://github.com/rust-lang/rust/commit/ca6798ab073c4f2358f2577e7258108099f29144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca6798ab073c4f2358f2577e7258108099f29144/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af55d19c7a9189374d89472f97dc119659bb67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af55d19c7a9189374d89472f97dc119659bb67e", "html_url": "https://github.com/rust-lang/rust/commit/1af55d19c7a9189374d89472f97dc119659bb67e"}, {"sha": "8731d4dfb479914a91f650f4f124528e332e8128", "url": "https://api.github.com/repos/rust-lang/rust/commits/8731d4dfb479914a91f650f4f124528e332e8128", "html_url": "https://github.com/rust-lang/rust/commit/8731d4dfb479914a91f650f4f124528e332e8128"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "89d5fac30d3576bc347c25a2e73f2a578b54aec1", "filename": "library/core/src/fmt/float.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ca6798ab073c4f2358f2577e7258108099f29144/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6798ab073c4f2358f2577e7258108099f29144/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs?ref=ca6798ab073c4f2358f2577e7258108099f29144", "patch": "@@ -3,6 +3,26 @@ use crate::mem::MaybeUninit;\n use crate::num::flt2dec;\n use crate::num::fmt as numfmt;\n \n+#[doc(hidden)]\n+trait GeneralFormat: PartialOrd {\n+    /// Determines if a value should use exponential based on its magnitude, given the precondition\n+    /// that it will not be rounded any further before it is displayed.\n+    fn already_rounded_value_should_use_exponential(&self) -> bool;\n+}\n+\n+macro_rules! impl_general_format {\n+    ($($t:ident)*) => {\n+        $(impl GeneralFormat for $t {\n+            fn already_rounded_value_should_use_exponential(&self) -> bool {\n+                let abs = $t::abs_private(*self);\n+                (abs != 0.0 && abs < 1e-4) || abs >= 1e+16\n+            }\n+        })*\n+    }\n+}\n+\n+impl_general_format! { f32 f64 }\n+\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]\n@@ -54,8 +74,7 @@ where\n     fmt.pad_formatted_parts(&formatted)\n }\n \n-// Common code of floating point Debug and Display.\n-fn float_to_decimal_common<T>(fmt: &mut Formatter<'_>, num: &T, min_precision: usize) -> Result\n+fn float_to_decimal_display<T>(fmt: &mut Formatter<'_>, num: &T) -> Result\n where\n     T: flt2dec::DecodableFloat,\n {\n@@ -68,6 +87,7 @@ where\n     if let Some(precision) = fmt.precision {\n         float_to_decimal_common_exact(fmt, num, sign, precision)\n     } else {\n+        let min_precision = 0;\n         float_to_decimal_common_shortest(fmt, num, sign, min_precision)\n     }\n }\n@@ -145,19 +165,44 @@ where\n     }\n }\n \n+fn float_to_general_debug<T>(fmt: &mut Formatter<'_>, num: &T) -> Result\n+where\n+    T: flt2dec::DecodableFloat + GeneralFormat,\n+{\n+    let force_sign = fmt.sign_plus();\n+    let sign = match force_sign {\n+        false => flt2dec::Sign::Minus,\n+        true => flt2dec::Sign::MinusPlus,\n+    };\n+\n+    if let Some(precision) = fmt.precision {\n+        // this behavior of {:.PREC?} predates exponential formatting for {:?}\n+        float_to_decimal_common_exact(fmt, num, sign, precision)\n+    } else {\n+        // since there is no precision, there will be no rounding\n+        if num.already_rounded_value_should_use_exponential() {\n+            let upper = false;\n+            float_to_exponential_common_shortest(fmt, num, sign, upper)\n+        } else {\n+            let min_precision = 1;\n+            float_to_decimal_common_shortest(fmt, num, sign, min_precision)\n+        }\n+    }\n+}\n+\n macro_rules! floating {\n     ($ty:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Debug for $ty {\n             fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n-                float_to_decimal_common(fmt, self, 1)\n+                float_to_general_debug(fmt, self)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Display for $ty {\n             fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n-                float_to_decimal_common(fmt, self, 0)\n+                float_to_decimal_display(fmt, self)\n             }\n         }\n "}, {"sha": "83a922ae34891b969d5616ce1ed20d30e60bae2a", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca6798ab073c4f2358f2577e7258108099f29144/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6798ab073c4f2358f2577e7258108099f29144/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=ca6798ab073c4f2358f2577e7258108099f29144", "patch": "@@ -449,7 +449,7 @@ impl f32 {\n     // private use internally.\n     #[inline]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n-    const fn abs_private(self) -> f32 {\n+    pub(crate) const fn abs_private(self) -> f32 {\n         f32::from_bits(self.to_bits() & 0x7fff_ffff)\n     }\n "}, {"sha": "4267260eea38cbbb6cc294da4fd7692ffc68344f", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca6798ab073c4f2358f2577e7258108099f29144/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6798ab073c4f2358f2577e7258108099f29144/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=ca6798ab073c4f2358f2577e7258108099f29144", "patch": "@@ -448,7 +448,7 @@ impl f64 {\n     // private use internally.\n     #[inline]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n-    const fn abs_private(self) -> f64 {\n+    pub(crate) const fn abs_private(self) -> f64 {\n         f64::from_bits(self.to_bits() & 0x7fff_ffff_ffff_ffff)\n     }\n "}, {"sha": "47a7400f76ef95ecfb73146e2f295aa649ac3907", "filename": "library/core/tests/fmt/float.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca6798ab073c4f2358f2577e7258108099f29144/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca6798ab073c4f2358f2577e7258108099f29144/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs?ref=ca6798ab073c4f2358f2577e7258108099f29144", "patch": "@@ -12,6 +12,16 @@ fn test_format_f64() {\n     assert_eq!(\"1.23456789E3\", format!(\"{:E}\", 1234.56789f64));\n     assert_eq!(\"0.0\", format!(\"{:?}\", 0.0f64));\n     assert_eq!(\"1.01\", format!(\"{:?}\", 1.01f64));\n+\n+    let high_cutoff = 1e16_f64;\n+    assert_eq!(\"1e16\", format!(\"{:?}\", high_cutoff));\n+    assert_eq!(\"-1e16\", format!(\"{:?}\", -high_cutoff));\n+    assert!(!is_exponential(&format!(\"{:?}\", high_cutoff * (1.0 - 2.0 * f64::EPSILON))));\n+    assert_eq!(\"-3.0\", format!(\"{:?}\", -3f64));\n+    assert_eq!(\"0.0001\", format!(\"{:?}\", 0.0001f64));\n+    assert_eq!(\"9e-5\", format!(\"{:?}\", 0.00009f64));\n+    assert_eq!(\"1234567.9\", format!(\"{:.1?}\", 1234567.89f64));\n+    assert_eq!(\"1234.6\", format!(\"{:.1?}\", 1234.56789f64));\n }\n \n #[test]\n@@ -28,4 +38,18 @@ fn test_format_f32() {\n     assert_eq!(\"1.2345679E3\", format!(\"{:E}\", 1234.56789f32));\n     assert_eq!(\"0.0\", format!(\"{:?}\", 0.0f32));\n     assert_eq!(\"1.01\", format!(\"{:?}\", 1.01f32));\n+\n+    let high_cutoff = 1e16_f32;\n+    assert_eq!(\"1e16\", format!(\"{:?}\", high_cutoff));\n+    assert_eq!(\"-1e16\", format!(\"{:?}\", -high_cutoff));\n+    assert!(!is_exponential(&format!(\"{:?}\", high_cutoff * (1.0 - 2.0 * f32::EPSILON))));\n+    assert_eq!(\"-3.0\", format!(\"{:?}\", -3f32));\n+    assert_eq!(\"0.0001\", format!(\"{:?}\", 0.0001f32));\n+    assert_eq!(\"9e-5\", format!(\"{:?}\", 0.00009f32));\n+    assert_eq!(\"1234567.9\", format!(\"{:.1?}\", 1234567.89f32));\n+    assert_eq!(\"1234.6\", format!(\"{:.1?}\", 1234.56789f32));\n+}\n+\n+fn is_exponential(s: &str) -> bool {\n+    s.contains(\"e\") || s.contains(\"E\")\n }"}]}