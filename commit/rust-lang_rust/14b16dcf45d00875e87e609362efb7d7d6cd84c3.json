{"sha": "14b16dcf45d00875e87e609362efb7d7d6cd84c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjE2ZGNmNDVkMDA4NzVlODdlNjA5MzYyZWZiN2Q3ZDZjZDg0YzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-26T17:19:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-30T17:41:38Z"}, "message": "use proper span for TLS dtors; fix some nits", "tree": {"sha": "4acbabbf15062c40266bf9429c6d878fe2fefc11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4acbabbf15062c40266bf9429c6d878fe2fefc11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b16dcf45d00875e87e609362efb7d7d6cd84c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b16dcf45d00875e87e609362efb7d7d6cd84c3", "html_url": "https://github.com/rust-lang/rust/commit/14b16dcf45d00875e87e609362efb7d7d6cd84c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b16dcf45d00875e87e609362efb7d7d6cd84c3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66f359d91d2baf2d4224832456b1f9fa7ed0740", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66f359d91d2baf2d4224832456b1f9fa7ed0740", "html_url": "https://github.com/rust-lang/rust/commit/a66f359d91d2baf2d4224832456b1f9fa7ed0740"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "bfdc45c921d133e6b7c9a784070c957368149ce3", "filename": "src/memory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14b16dcf45d00875e87e609362efb7d7d6cd84c3/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b16dcf45d00875e87e609362efb7d7d6cd84c3/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=14b16dcf45d00875e87e609362efb7d7d6cd84c3", "patch": "@@ -100,7 +100,6 @@ impl Pointer {\n     }\n     \n     pub fn is_null_ptr(&self) -> bool {\n-        // FIXME: Is this the right way?\n         return *self == Pointer::from_int(0)\n     }\n }"}, {"sha": "84f849c6122554d02bde0f3c893f173bbb7e60a0", "filename": "src/step.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14b16dcf45d00875e87e609362efb7d7d6cd84c3/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b16dcf45d00875e87e609362efb7d7d6cd84c3/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=14b16dcf45d00875e87e609362efb7d7d6cd84c3", "patch": "@@ -14,7 +14,7 @@ use eval_context::{EvalContext, StackPopCleanup};\n use lvalue::{Global, GlobalId, Lvalue};\n use value::{Value, PrimVal};\n use memory::Pointer;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax::codemap::Span;\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub fn inc_step_counter_and_check_limit(&mut self, n: u64) -> EvalResult<'tcx> {\n@@ -36,10 +36,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 trace!(\"Running TLS dtor {:?} on {:?}\", instance, ptr);\n                 // TODO: Potientiually, this has to support all the other possible instances? See eval_fn_call in terminator/mod.rs\n                 let mir = self.load_mir(instance.def)?;\n-                // FIXME: Are these the right dummy values?\n                 self.push_stack_frame(\n                     instance,\n-                    DUMMY_SP,\n+                    mir.span,\n                     mir,\n                     Lvalue::from_ptr(Pointer::zst_ptr()),\n                     StackPopCleanup::None,\n@@ -51,7 +50,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 } else {\n                     return Err(EvalError::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()));\n                 }\n-                \n+\n                 return Ok(true);\n             }\n             return Ok(false);"}, {"sha": "9d55b9720bb594666747568c956acc85ffad6eb4", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14b16dcf45d00875e87e609362efb7d7d6cd84c3/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b16dcf45d00875e87e609362efb7d7d6cd84c3/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=14b16dcf45d00875e87e609362efb7d7d6cd84c3", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n-use rustc::ty::{self, TypeVariants, Ty, TyS, TypeAndMut};\n+use rustc::ty::{self, TypeVariants, Ty, TypeAndMut};\n use rustc::ty::layout::Layout;\n use syntax::codemap::Span;\n use syntax::attr;\n@@ -600,19 +600,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let key_ptr = args[0].read_ptr(&self.memory)?;\n                 \n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves...)\n-                // FIXME: Or should we instead construct the type we expect it to have?\n-                let dtor_fn_ty = match self.operand_ty(&arg_operands[1]) {\n-                    &TyS { sty: TypeVariants::TyAdt(_, ref substs), .. } => {\n+                let dtor_fn_ty = match self.operand_ty(&arg_operands[1]).sty {\n+                    TypeVariants::TyAdt(_, ref substs) => {\n                         substs.type_at(0)\n                     }\n                     _ => return Err(EvalError::AbiViolation(\"Wrong signature used for pthread_key_create: Second argument must be option of a function pointer.\".to_owned()))\n                 };\n                 let dtor_ptr = self.value_to_primval(args[1], dtor_fn_ty)?.to_ptr()?;\n+                // TODO: The null-pointer case here is entirely untested\n                 let dtor = if dtor_ptr.is_null_ptr() { None } else { Some(self.memory.get_fn(dtor_ptr.alloc_id)?) };\n                 \n                 // Figure out how large a pthread TLS key actually is. This is libc::pthread_key_t.\n-                let key_size = match self.operand_ty(&arg_operands[0]) {\n-                    &TyS { sty: TypeVariants::TyRawPtr(TypeAndMut { ty, .. }), .. } => {\n+                let key_size = match self.operand_ty(&arg_operands[0]).sty {\n+                    TypeVariants::TyRawPtr(TypeAndMut { ty, .. }) => {\n                         let layout = self.type_layout(ty)?;\n                         layout.size(&self.tcx.data_layout)\n                     }"}]}