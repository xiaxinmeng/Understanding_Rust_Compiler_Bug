{"sha": "383a80199351c6b9f9f4834242231c8586fb2ab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4M2E4MDE5OTM1MWM2YjlmOWY0ODM0MjQyMjMxYzg1ODZmYjJhYjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-15T01:16:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-15T01:17:40Z"}, "message": "rustc: Universally quantify regions when looking up typeclass implementations", "tree": {"sha": "b7bc689c1e53b0eec91f0330ff785f32f80f3781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7bc689c1e53b0eec91f0330ff785f32f80f3781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/383a80199351c6b9f9f4834242231c8586fb2ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/383a80199351c6b9f9f4834242231c8586fb2ab6", "html_url": "https://github.com/rust-lang/rust/commit/383a80199351c6b9f9f4834242231c8586fb2ab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/383a80199351c6b9f9f4834242231c8586fb2ab6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3d2882ffd694caeb274e53c8b8bb4ca03c493b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d2882ffd694caeb274e53c8b8bb4ca03c493b3", "html_url": "https://github.com/rust-lang/rust/commit/a3d2882ffd694caeb274e53c8b8bb4ca03c493b3"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "db6b6acc40ca46e9aef7bbe8f49de430c3ea4ce1", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/383a80199351c6b9f9f4834242231c8586fb2ab6/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383a80199351c6b9f9f4834242231c8586fb2ab6/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=383a80199351c6b9f9f4834242231c8586fb2ab6", "patch": "@@ -1466,6 +1466,17 @@ fn instantiate_self_regions(pcx: pat_ctxt, args: [ty::t]) -> [ty::t] {\n     })\n }\n \n+// Replaces all region variables in the given type with \"inferred regions\".\n+// This is used during method lookup to allow typeclass implementations to\n+// refer to inferred regions.\n+fn universally_quantify_regions(tcx: ty::ctxt, ty: ty::t) -> ty::t {\n+    if ty::type_has_rptrs(ty) {\n+        ty::fold_ty(tcx, ty::fm_rptr({|_r| ty::re_inferred}), ty)\n+    } else {\n+        ty\n+    }\n+}\n+\n fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n                      subpats: [@ast::pat], expected: ty::t) {\n     // Typecheck the path.\n@@ -1877,7 +1888,12 @@ fn lookup_method_inner(fcx: @fn_ctxt, expr: @ast::expr,\n                 let {n_tps, ty: self_ty} = impl_self_ty(tcx, did);\n                 let {vars, ty: self_ty} = if n_tps > 0u {\n                     bind_params(fcx, self_ty, n_tps)\n-                } else { {vars: [], ty: self_ty} };\n+                } else {\n+                    {vars: [], ty: self_ty}\n+                };\n+\n+                let ty = universally_quantify_regions(tcx, ty);\n+\n                 alt unify::unify(fcx, ty, self_ty) {\n                   result::ok(_) {\n                     if option::is_some(result) {"}]}