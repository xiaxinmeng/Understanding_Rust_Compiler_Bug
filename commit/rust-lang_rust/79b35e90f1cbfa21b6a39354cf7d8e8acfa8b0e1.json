{"sha": "79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YjM1ZTkwZjFjYmZhMjFiNmEzOTM1NGNmN2Q4ZThhY2ZhOGIwZTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-03T15:42:17Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T10:08:23Z"}, "message": "legacy_directory_ownership -> error", "tree": {"sha": "18845b20988b8c6e7f22982a404d439742f40a96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18845b20988b8c6e7f22982a404d439742f40a96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "html_url": "https://github.com/rust-lang/rust/commit/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0056c04f61a051e26dae2631c59637da815abbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0056c04f61a051e26dae2631c59637da815abbb", "html_url": "https://github.com/rust-lang/rust/commit/c0056c04f61a051e26dae2631c59637da815abbb"}], "stats": {"total": 62, "additions": 9, "deletions": 53}, "files": [{"sha": "f175a881fefc103588ef27fab73091225783644e", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "patch": "@@ -45,18 +45,6 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n ```\n \n-## legacy-directory-ownership\n-\n-The legacy_directory_ownership warning is issued when\n-\n-* There is a non-inline module with a `#[path]` attribute (e.g. `#[path = \"foo.rs\"] mod bar;`),\n-* The module's file (\"foo.rs\" in the above example) is not named \"mod.rs\", and\n-* The module's file contains a non-inline child module without a `#[path]` attribute.\n-\n-The warning can be fixed by renaming the parent module to \"mod.rs\" and moving\n-it into its own directory if appropriate.\n-\n-\n ## missing-fragment-specifier\n \n The missing_fragment_specifier warning is issued when an unused pattern in a"}, {"sha": "9301dac32cd2e6a9b3ab3693e36c1783140fa0a6", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "patch": "@@ -207,17 +207,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    pub LEGACY_DIRECTORY_OWNERSHIP,\n-    Deny,\n-    \"non-inline, non-`#[path]` modules (e.g., `mod foo;`) were erroneously allowed in some files \\\n-     not named `mod.rs`\",\n-     @future_incompatible = FutureIncompatibleInfo {\n-         reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n-         edition: None,\n-     };\n-}\n-\n declare_lint! {\n     pub MISSING_FRAGMENT_SPECIFIER,\n     Deny,\n@@ -549,7 +538,6 @@ declare_lint_pass! {\n         SAFE_EXTERN_STATICS,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n-        LEGACY_DIRECTORY_OWNERSHIP,\n         MISSING_FRAGMENT_SPECIFIER,\n         PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n         LATE_BOUND_LIFETIME_ARGUMENTS,"}, {"sha": "1dcd61896c38d422fc73d954955652ae9615137e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "patch": "@@ -336,6 +336,8 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/46205\");\n     store.register_removed(\"legacy_constructor_visibility\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/39207\");\n+    store.register_removed(\"legacy_disrectory_ownership\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/37872\");\n }\n \n fn register_internals(store: &mut lint::LintStore) {"}, {"sha": "e046f6c2a07b8c780657be41303bad2bb08a5d6e", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "patch": "@@ -654,11 +654,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (cf. issue #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, sym::path);\n-                if attr::contains_name(&item.attrs, sym::warn_directory_ownership) {\n-                    let lint = lint::builtin::LEGACY_DIRECTORY_OWNERSHIP;\n-                    let msg = \"cannot declare a new module at this location\";\n-                    self.lint_buffer.buffer_lint(lint, item.id, item.span, msg);\n-                }\n             }\n             ItemKind::Union(ref vdata, _) => {\n                 if let VariantData::Tuple(..) | VariantData::Unit(..) = vdata {"}, {"sha": "59f4a4d22d6716c7c796cb025334fa44ae386ade", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "patch": "@@ -51,7 +51,7 @@ pub enum DirectoryOwnership {\n         relative: Option<ast::Ident>,\n     },\n     UnownedViaBlock,\n-    UnownedViaMod(bool /* legacy warnings? */),\n+    UnownedViaMod,\n }\n \n // A bunch of utility functions of the form `parse_<thing>_from_<source>`"}, {"sha": "958cdae9492f3827e25c52cf469903be38fc80c2", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "patch": "@@ -21,7 +21,6 @@ pub(super) struct ModulePath {\n pub(super) struct ModulePathSuccess {\n     pub path: PathBuf,\n     pub directory_ownership: DirectoryOwnership,\n-    warn: bool,\n }\n \n impl<'a> Parser<'a> {\n@@ -55,17 +54,10 @@ impl<'a> Parser<'a> {\n         if self.eat(&token::Semi) {\n             if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n-                let ModulePathSuccess { path, directory_ownership, warn } =\n+                let ModulePathSuccess { path, directory_ownership } =\n                     self.submod_path(id, &outer_attrs, id_span)?;\n-                let (module, mut attrs) =\n+                let (module, attrs) =\n                     self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?;\n-                // Record that we fetched the mod from an external file.\n-                if warn {\n-                    let attr = attr::mk_attr_outer(\n-                        attr::mk_word_item(Ident::with_dummy_span(sym::warn_directory_ownership)));\n-                    attr::mark_known(&attr);\n-                    attrs.push(attr);\n-                }\n                 Ok((id, ItemKind::Mod(module), Some(attrs)))\n             } else {\n                 let placeholder = ast::Mod {\n@@ -136,17 +128,16 @@ impl<'a> Parser<'a> {\n                     // `#[path]` included and contains a `mod foo;` declaration.\n                     // If you encounter this, it's your own darn fault :P\n                     Some(_) => DirectoryOwnership::Owned { relative: None },\n-                    _ => DirectoryOwnership::UnownedViaMod(true),\n+                    _ => DirectoryOwnership::UnownedViaMod,\n                 },\n                 path,\n-                warn: false,\n             });\n         }\n \n         let relative = match self.directory.ownership {\n             DirectoryOwnership::Owned { relative } => relative,\n             DirectoryOwnership::UnownedViaBlock |\n-            DirectoryOwnership::UnownedViaMod(_) => None,\n+            DirectoryOwnership::UnownedViaMod => None,\n         };\n         let paths = Parser::default_submod_path(\n                         id, relative, &self.directory.path, self.sess.source_map());\n@@ -167,12 +158,7 @@ impl<'a> Parser<'a> {\n                 }\n                 Err(err)\n             }\n-            DirectoryOwnership::UnownedViaMod(warn) => {\n-                if warn {\n-                    if let Ok(result) = paths.result {\n-                        return Ok(ModulePathSuccess { warn: true, ..result });\n-                    }\n-                }\n+            DirectoryOwnership::UnownedViaMod => {\n                 let mut err = self.diagnostic().struct_span_err(id_sp,\n                     \"cannot declare a new module at this location\");\n                 if !id_sp.is_dummy() {\n@@ -250,14 +236,12 @@ impl<'a> Parser<'a> {\n                 directory_ownership: DirectoryOwnership::Owned {\n                     relative: Some(id),\n                 },\n-                warn: false,\n             }),\n             (false, true) => Ok(ModulePathSuccess {\n                 path: secondary_path,\n                 directory_ownership: DirectoryOwnership::Owned {\n                     relative: None,\n                 },\n-                warn: false,\n             }),\n             (false, false) => Err(Error::FileNotFoundForModule {\n                 mod_name: mod_name.clone(),"}, {"sha": "8c82e59e528e5fa8816919a0b0b9616c8b9bbd85", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "patch": "@@ -1300,7 +1300,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         Some(_) => DirectoryOwnership::Owned {\n                             relative: Some(item.ident),\n                         },\n-                        None => DirectoryOwnership::UnownedViaMod(false),\n+                        None => DirectoryOwnership::UnownedViaMod,\n                     };\n                     path.pop();\n                     module.directory = path;"}, {"sha": "d834a59b4868247195cf3a22ef37cbbd6b99d866", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "patch": "@@ -734,7 +734,6 @@ symbols! {\n         visible_private_types,\n         volatile,\n         warn,\n-        warn_directory_ownership,\n         wasm_import_module,\n         wasm_target_feature,\n         while_let,"}]}