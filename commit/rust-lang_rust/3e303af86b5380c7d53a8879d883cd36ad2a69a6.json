{"sha": "3e303af86b5380c7d53a8879d883cd36ad2a69a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzAzYWY4NmI1MzgwYzdkNTNhODg3OWQ4ODNjZDM2YWQyYTY5YTY=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-22T04:31:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-24T23:31:18Z"}, "message": "rustc: Add a path attribute for crate directives\n\nThe path information was an optional \"filename\" component of crate\ndirective AST. It is now replaced by an attribute with metadata named\n\"path\".\n\nWith this commit, a directive\n\n  mod foo = \"foo.rs\";\n\nshould be written as:\n\n  #[path = \"foo.rs\"]\n  mod foo;\n\nCloses issue #906.", "tree": {"sha": "342981fb73a0039355f343a2210dbedb95e7c970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342981fb73a0039355f343a2210dbedb95e7c970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e303af86b5380c7d53a8879d883cd36ad2a69a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e303af86b5380c7d53a8879d883cd36ad2a69a6", "html_url": "https://github.com/rust-lang/rust/commit/3e303af86b5380c7d53a8879d883cd36ad2a69a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e303af86b5380c7d53a8879d883cd36ad2a69a6/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547ec241bd50e86752e4c39047b417550f655349", "url": "https://api.github.com/repos/rust-lang/rust/commits/547ec241bd50e86752e4c39047b417550f655349", "html_url": "https://github.com/rust-lang/rust/commit/547ec241bd50e86752e4c39047b417550f655349"}], "stats": {"total": 101, "additions": 57, "deletions": 44}, "files": [{"sha": "09524a8055de1b2afc5ddd61bd79b6d4e1411c7e", "filename": "doc/rust.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -1030,9 +1030,11 @@ An example of a crate:\n use std (ver = \"1.0\");\n \n // Define some modules.\n-mod foo = \"foo.rs\";\n+#[path = \"foo.rs\"]\n+mod foo;\n mod bar @{\n-    mod quux = \"quux.rs\";\n+    #[path =  \"quux.rs\"]\n+    mod quux;\n @}\n @end example\n "}, {"sha": "782faab69a2854933254b0fa057241012def33a5", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -40,7 +40,8 @@ mod middle {\n     mod tstate {\n         mod ck;\n         mod annotate;\n-        mod aux = \"auxiliary.rs\";\n+        #[path = \"auxiliary.rs\"]\n+        mod aux;\n         mod bitvectors;\n         mod collect_locals;\n         mod pre_post_conditions;"}, {"sha": "47e254aa01108cbb3188746f91c49be6f144dec6", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -58,8 +58,8 @@ type crate_ =\n      config: crate_cfg};\n \n tag crate_directive_ {\n-    cdir_src_mod(ident, option::t<filename>, [attribute]);\n-    cdir_dir_mod(ident, option::t<filename>, [@crate_directive], [attribute]);\n+    cdir_src_mod(ident, [attribute]);\n+    cdir_dir_mod(ident, [@crate_directive], [attribute]);\n     cdir_view_item(@view_item);\n     cdir_syntax(path);\n }"}, {"sha": "78340593f687c104140cc63e86276acb7b51c8d3", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -159,11 +159,11 @@ fn noop_fold_crate(c: crate_, fld: ast_fold) -> crate_ {\n fn noop_fold_crate_directive(cd: crate_directive_, fld: ast_fold) ->\n    crate_directive_ {\n     ret alt cd {\n-          cdir_src_mod(id, fname, attrs) {\n-            cdir_src_mod(fld.fold_ident(id), fname, attrs)\n+          cdir_src_mod(id, attrs) {\n+            cdir_src_mod(fld.fold_ident(id), attrs)\n           }\n-          cdir_dir_mod(id, fname, cds, attrs) {\n-            cdir_dir_mod(fld.fold_ident(id), fname,\n+          cdir_dir_mod(id, cds, attrs) {\n+            cdir_dir_mod(fld.fold_ident(id),\n                          vec::map(fld.fold_crate_directive, cds), attrs)\n           }\n           cdir_view_item(vi) { cdir_view_item(fld.fold_view_item(vi)) }"}, {"sha": "bc8a51e1f3436ffe2510361b5ecdda40d9e70335", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -1,4 +1,5 @@\n \n+import front::attr;\n import std::{option, result, io, fs};\n import std::option::{some, none};\n import syntax::ast;\n@@ -86,13 +87,21 @@ fn parse_companion_mod(cx: ctx, prefix: str, suffix: option::t<str>)\n     }\n }\n \n+fn cdir_path_opt(id: str, attrs: [ast::attribute]) -> str {\n+    alt attr::get_meta_item_value_str_by_name(attrs, \"path\") {\n+      some(d) {\n+        ret d;\n+      }\n+      none. { ret id; }\n+    }\n+}\n+\n fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n                         &view_items: [@ast::view_item],\n                         &items: [@ast::item]) {\n     alt cdir.node {\n-      ast::cdir_src_mod(id, file_opt, attrs) {\n-        let file_path = id + \".rs\";\n-        alt file_opt { some(f) { file_path = f; } none. { } }\n+      ast::cdir_src_mod(id, attrs) {\n+        let file_path = cdir_path_opt(id + \".rs\", attrs);\n         let full_path =\n             if std::fs::path_is_absolute(file_path) {\n                 file_path\n@@ -113,9 +122,8 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n         cx.byte_pos = p0.get_byte_pos();\n         items += [i];\n       }\n-      ast::cdir_dir_mod(id, dir_opt, cdirs, attrs) {\n-        let path = id;\n-        alt dir_opt { some(d) { path = d; } none. { } }\n+      ast::cdir_dir_mod(id, cdirs, attrs) {\n+        let path = cdir_path_opt(id, attrs);\n         let full_path =\n             if std::fs::path_is_absolute(path) {\n                 path"}, {"sha": "82c477a7d968c0485db57a9cb481f99a9d62784c", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -2475,19 +2475,12 @@ fn parse_crate_directive(p: parser, first_outer_attr: [ast::attribute]) ->\n     if expect_mod || is_word(p, \"mod\") {\n         expect_word(p, \"mod\");\n         let id = parse_ident(p);\n-        let file_opt =\n-            alt p.peek() {\n-              token::EQ. { p.bump(); some(parse_str(p)) }\n-              _ {\n-                attr::get_meta_item_value_str_by_name(outer_attrs, \"path\")\n-              }\n-            };\n         alt p.peek() {\n           // mod x = \"foo.rs\";\n           token::SEMI. {\n             let hi = p.get_hi_pos();\n             p.bump();\n-            ret spanned(lo, hi, ast::cdir_src_mod(id, file_opt, outer_attrs));\n+            ret spanned(lo, hi, ast::cdir_src_mod(id, outer_attrs));\n           }\n           // mod x = \"foo_dir\" { ...directives... }\n           token::LBRACE. {\n@@ -2500,7 +2493,7 @@ fn parse_crate_directive(p: parser, first_outer_attr: [ast::attribute]) ->\n             let hi = p.get_hi_pos();\n             expect(p, token::RBRACE);\n             ret spanned(lo, hi,\n-                        ast::cdir_dir_mod(id, file_opt, cdirs, mod_attrs));\n+                        ast::cdir_dir_mod(id, cdirs, mod_attrs));\n           }\n           t { unexpected(p, t); }\n         }"}, {"sha": "45249be23a6ea53518635890606cd1e502ad9f76", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -56,8 +56,8 @@ fn visit_crate<E>(c: crate, e: E, v: vt<E>) {\n \n fn visit_crate_directive<E>(cd: @crate_directive, e: E, v: vt<E>) {\n     alt cd.node {\n-      cdir_src_mod(_, _, _) { }\n-      cdir_dir_mod(_, _, cdirs, _) {\n+      cdir_src_mod(_, _) { }\n+      cdir_dir_mod(_, cdirs, _) {\n         for cdir: @crate_directive in cdirs {\n             visit_crate_directive(cdir, e, v);\n         }"}, {"sha": "fdee46a8ffd16fc8e5150831a331cb9e42ac087b", "filename": "src/lib/std.rc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -40,7 +40,8 @@ mod comm;\n mod fs;\n mod io;\n mod net;\n-mod run = \"run_program.rs\";\n+#[path =  \"run_program.rs\"]\n+mod run;\n mod sys;\n mod task;\n \n@@ -100,19 +101,25 @@ mod test;\n mod generic_os;\n \n #[cfg(target_os = \"win32\")]\n-mod os = \"win32_os.rs\";\n+#[path = \"win32_os.rs\"]\n+mod os;\n #[cfg(target_os = \"win32\")]\n-mod os_fs = \"win32_fs.rs\";\n+#[path = \"win32_fs.rs\"]\n+mod os_fs;\n \n #[cfg(target_os = \"macos\")]\n-mod os = \"macos_os.rs\";\n+#[path = \"macos_os.rs\"]\n+mod os;\n #[cfg(target_os = \"macos\")]\n-mod os_fs = \"posix_fs.rs\";\n+#[path = \"posix_fs.rs\"]\n+mod os_fs;\n \n #[cfg(target_os = \"linux\")]\n-mod os = \"linux_os.rs\";\n+#[path = \"linux_os.rs\"]\n+mod os;\n #[cfg(target_os = \"linux\")]\n-mod os_fs = \"posix_fs.rs\";\n+#[path = \"posix_fs.rs\"]\n+mod os_fs;\n \n // Local Variables:\n // mode: rust;"}, {"sha": "cf2efcea47c2953c77c28645270cbf6fd8951fbd", "filename": "src/test/compile-fail/mod-name-non-str.rc", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/547ec241bd50e86752e4c39047b417550f655349/src%2Ftest%2Fcompile-fail%2Fmod-name-non-str.rc", "raw_url": "https://github.com/rust-lang/rust/raw/547ec241bd50e86752e4c39047b417550f655349/src%2Ftest%2Fcompile-fail%2Fmod-name-non-str.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod-name-non-str.rc?ref=547ec241bd50e86752e4c39047b417550f655349", "patch": "@@ -1,3 +0,0 @@\n-// error-pattern: expected string literal\n-// Issue #1028\n-mod ncurses = x;\n\\ No newline at end of file"}, {"sha": "f097954db1ab91c7a5fad81b1c4f6c3ce978ee53", "filename": "src/test/run-pass/companionmod.rc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Ftest%2Frun-pass%2Fcompanionmod.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Ftest%2Frun-pass%2Fcompanionmod.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompanionmod.rc?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -1,10 +1,12 @@\n // Test that crates and directory modules can contain code\n \n-mod a = \"companionmod-src\" {\n+#[path = \"companionmod-src\"]\n+mod a {\n     mod b {\n         mod x;\n     }\n-    mod c = \"d\" {\n+    #[path = \"d\"]\n+    mod c {\n         mod x;\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "36304011a8c21b53809501aacc3a19451a3c882d", "filename": "src/test/run-pass/crate-attributes.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-attributes.rc?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -2,7 +2,8 @@\n #[vers = \"1.0\"];\n \n #[attr1]\n-mod m = \"crate-attributes-src\" {\n+#[path = \"crate-attributes-src\"]\n+mod m {\n   #[attr_inner];\n \n   #[attr2]"}, {"sha": "7a89ac915ce10ed2b356b24b7a4bf82eb56be9ce", "filename": "src/test/run-pass/multi.rc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Ftest%2Frun-pass%2Fmulti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3e303af86b5380c7d53a8879d883cd36ad2a69a6/src%2Ftest%2Frun-pass%2Fmulti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti.rc?ref=3e303af86b5380c7d53a8879d883cd36ad2a69a6", "patch": "@@ -1,6 +1,8 @@\n-mod multi = \"multi-src\" {\n+#[path = \"multi-src\"]\n+mod multi {\n+  // implicitly #[path = \"foo.rs\"]\n+  mod foo;\n \n-  mod foo; // implicitly = \"foo.rs\"\n-\n-  mod bar = \"bar.rs\";\n+  #[path  = \"bar.rs\"]\n+  mod bar;\n }"}]}