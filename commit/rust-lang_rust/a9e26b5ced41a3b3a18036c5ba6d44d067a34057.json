{"sha": "a9e26b5ced41a3b3a18036c5ba6d44d067a34057", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZTI2YjVjZWQ0MWEzYjNhMTgwMzZjNWJhNmQ0NGQwNjdhMzQwNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-01T08:49:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-01T08:49:17Z"}, "message": "Auto merge of #26540 - oli-obk:issue11715, r=nrc\n\ncloses #25037\r\ncloses #11715\r\n\r\nr? @nrc", "tree": {"sha": "7c623e93380d01724da628c2c97018a7df91a11a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c623e93380d01724da628c2c97018a7df91a11a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9e26b5ced41a3b3a18036c5ba6d44d067a34057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e26b5ced41a3b3a18036c5ba6d44d067a34057", "html_url": "https://github.com/rust-lang/rust/commit/a9e26b5ced41a3b3a18036c5ba6d44d067a34057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9e26b5ced41a3b3a18036c5ba6d44d067a34057/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5dec988026bbb2290c49e183f0d40d65ed15406", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dec988026bbb2290c49e183f0d40d65ed15406", "html_url": "https://github.com/rust-lang/rust/commit/a5dec988026bbb2290c49e183f0d40d65ed15406"}, {"sha": "c5dfd34c615b0586a101e9e66770a5c4fd31c852", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5dfd34c615b0586a101e9e66770a5c4fd31c852", "html_url": "https://github.com/rust-lang/rust/commit/c5dfd34c615b0586a101e9e66770a5c4fd31c852"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "ec93d2c55362762ef3a004dd260fb0470e2be298", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 73, "deletions": 2, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a9e26b5ced41a3b3a18036c5ba6d44d067a34057/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e26b5ced41a3b3a18036c5ba6d44d067a34057/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=a9e26b5ced41a3b3a18036c5ba6d44d067a34057", "patch": "@@ -594,12 +594,22 @@ fn highlight_lines(err: &mut EmitterWriter,\n     let display_line_infos = &lines.lines[..display_lines];\n     let display_line_strings = &line_strings[..display_lines];\n \n+    // Calculate the widest number to format evenly and fix #11715\n+    assert!(display_line_infos.len() > 0);\n+    let mut max_line_num = display_line_infos[display_line_infos.len() - 1].line_index + 1;\n+    let mut digits = 0;\n+    while max_line_num > 0 {\n+        max_line_num /= 10;\n+        digits += 1;\n+    }\n+\n     // Print the offending lines\n     for (line_info, line) in display_line_infos.iter().zip(display_line_strings) {\n-        try!(write!(&mut err.dst, \"{}:{} {}\\n\",\n+        try!(write!(&mut err.dst, \"{}:{:>width$} {}\\n\",\n                     fm.name,\n                     line_info.line_index + 1,\n-                    line));\n+                    line,\n+                    width=digits));\n     }\n \n     // If we elided something, put an ellipsis.\n@@ -795,3 +805,64 @@ pub fn expect<T, M>(diag: &SpanHandler, opt: Option<T>, msg: M) -> T where\n         None => diag.handler().bug(&msg()),\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::{EmitterWriter, highlight_lines, Level};\n+    use codemap::{mk_sp, CodeMap, BytePos};\n+    use std::sync::{Arc, Mutex};\n+    use std::io::{self, Write};\n+    use std::str::from_utf8;\n+\n+    // Diagnostic doesn't align properly in span where line number increases by one digit\n+    #[test]\n+    fn test_hilight_suggestion_issue_11715() {\n+        struct Sink(Arc<Mutex<Vec<u8>>>);\n+        impl Write for Sink {\n+            fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n+                Write::write(&mut *self.0.lock().unwrap(), data)\n+            }\n+            fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+        }\n+        let data = Arc::new(Mutex::new(Vec::new()));\n+        let mut ew = EmitterWriter::new(Box::new(Sink(data.clone())), None);\n+        let cm = CodeMap::new();\n+        let content = \"abcdefg\n+        koksi\n+        line3\n+        line4\n+        cinq\n+        line6\n+        line7\n+        line8\n+        line9\n+        line10\n+        e-l\u00e4-v\u00e4n\n+        tolv\n+        dreizehn\n+        \";\n+        let file = cm.new_filemap(\"dummy.txt\".to_string(), content.to_string());\n+        for (i, b) in content.bytes().enumerate() {\n+            if b == b'\\n' {\n+                file.next_line(BytePos(i as u32));\n+            }\n+        }\n+        let start = file.lines.borrow()[7];\n+        let end = file.lines.borrow()[11];\n+        let sp = mk_sp(start, end);\n+        let lvl = Level::Error;\n+        println!(\"span_to_lines\");\n+        let lines = cm.span_to_lines(sp);\n+        println!(\"highlight_lines\");\n+        highlight_lines(&mut ew, &cm, sp, lvl, lines).unwrap();\n+        println!(\"done\");\n+        let vec = data.lock().unwrap().clone();\n+        let vec: &[u8] = &vec;\n+        println!(\"{}\", from_utf8(vec).unwrap());\n+        assert_eq!(vec, \"dummy.txt: 8 \\n\\\n+                         dummy.txt: 9 \\n\\\n+                         dummy.txt:10 \\n\\\n+                         dummy.txt:11 \\n\\\n+                         dummy.txt:12 \\n\".as_bytes());\n+    }\n+}"}]}