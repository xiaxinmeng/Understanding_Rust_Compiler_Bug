{"sha": "a16eae6ffd923df5b349f55b75caf5af2aa5378d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNmVhZTZmZmQ5MjNkZjViMzQ5ZjU1Yjc1Y2FmNWFmMmFhNTM3OGQ=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-04-12T02:18:02Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-04-12T02:23:16Z"}, "message": "libstd: Add unwrap_or and unwrap_or_handle to Result", "tree": {"sha": "dab5752facebf4596fed44110e95f3064c888fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dab5752facebf4596fed44110e95f3064c888fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a16eae6ffd923df5b349f55b75caf5af2aa5378d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a16eae6ffd923df5b349f55b75caf5af2aa5378d", "html_url": "https://github.com/rust-lang/rust/commit/a16eae6ffd923df5b349f55b75caf5af2aa5378d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a16eae6ffd923df5b349f55b75caf5af2aa5378d/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "html_url": "https://github.com/rust-lang/rust/commit/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "8bd36127db2d2f2913724af485a773fe7f26088e", "filename": "src/libstd/result.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a16eae6ffd923df5b349f55b75caf5af2aa5378d/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16eae6ffd923df5b349f55b75caf5af2aa5378d/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=a16eae6ffd923df5b349f55b75caf5af2aa5378d", "patch": "@@ -188,6 +188,26 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// Else it returns `optb`.\n+    #[inline]\n+    pub fn unwrap_or(self, optb: T) -> T {\n+        match self {\n+            Ok(t) => t,\n+            Err(_) => optb\n+        }\n+    }\n+\n+    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// If the value is an `Err` then it calls `op` with its value.\n+    #[inline]\n+    pub fn unwrap_or_handle(self, op: |E| -> T) -> T {\n+        match self {\n+            Ok(t) => t,\n+            Err(e) => op(e)\n+        }\n+    }\n+\n     /// Unwraps a result, yielding the content of an `Err`.\n     /// Fails if the value is an `Ok`.\n     #[inline]\n@@ -389,4 +409,45 @@ mod tests {\n         assert_eq!(format!(\"{}\", ok), ~\"Ok(100)\");\n         assert_eq!(format!(\"{}\", err), ~\"Err(Err)\");\n     }\n+\n+    #[test]\n+    pub fn test_unwrap_or() {\n+        let ok: Result<int, ~str> = Ok(100);\n+        let ok_err: Result<int, ~str> = Err(~\"Err\");\n+\n+        assert_eq!(ok.unwrap_or(50), 100);\n+        assert_eq!(ok_err.unwrap_or(50), 50);\n+    }\n+\n+    #[test]\n+    pub fn test_unwrap_or_else() {\n+        fn handler(msg: ~str) -> int {\n+            if msg == ~\"I got this.\" {\n+                50\n+            } else {\n+                fail!(\"BadBad\")\n+            }\n+        }\n+\n+        let ok: Result<int, ~str> = Ok(100);\n+        let ok_err: Result<int, ~str> = Err(~\"I got this.\");\n+\n+        assert_eq!(ok.unwrap_or_handle(handler), 100);\n+        assert_eq!(ok_err.unwrap_or_handle(handler), 50);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    pub fn test_unwrap_or_else_failure() {\n+        fn handler(msg: ~str) -> int {\n+            if msg == ~\"I got this.\" {\n+                50\n+            } else {\n+                fail!(\"BadBad\")\n+            }\n+        }\n+\n+        let bad_err: Result<int, ~str> = Err(~\"Unrecoverable mess.\");\n+        let _ : int = bad_err.unwrap_or_handle(handler);\n+    }\n }"}]}