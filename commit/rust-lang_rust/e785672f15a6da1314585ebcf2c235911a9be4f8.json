{"sha": "e785672f15a6da1314585ebcf2c235911a9be4f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ODU2NzJmMTVhNmRhMTMxNDU4NWViY2YyYzIzNTkxMWE5YmU0Zjg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-04-06T18:42:09Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-04-06T18:42:27Z"}, "message": "Adjust fixture docs a bit", "tree": {"sha": "d19d52be3bb304128579ab27a753b941437f56f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d19d52be3bb304128579ab27a753b941437f56f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e785672f15a6da1314585ebcf2c235911a9be4f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e785672f15a6da1314585ebcf2c235911a9be4f8", "html_url": "https://github.com/rust-lang/rust/commit/e785672f15a6da1314585ebcf2c235911a9be4f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e785672f15a6da1314585ebcf2c235911a9be4f8/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b", "html_url": "https://github.com/rust-lang/rust/commit/b5f3815aee89ee3ec9c4b84765fdcb50adaf9f1b"}], "stats": {"total": 124, "additions": 63, "deletions": 61}, "files": [{"sha": "04e2be390695c75caa7c5f0373ef91f2fe746080", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e785672f15a6da1314585ebcf2c235911a9be4f8/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e785672f15a6da1314585ebcf2c235911a9be4f8/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=e785672f15a6da1314585ebcf2c235911a9be4f8", "patch": "@@ -1,62 +1,4 @@\n-//! Fixtures are strings containing rust source code with optional metadata.\n-//! A fixture without metadata is parsed into a single source file.\n-//! Use this to test functionality local to one file.\n-//!\n-//! Simple Example:\n-//! ```\n-//! r#\"\n-//! fn main() {\n-//!     println!(\"Hello World\")\n-//! }\n-//! \"#\n-//! ```\n-//!\n-//! Metadata can be added to a fixture after a `//-` comment.\n-//! The basic form is specifying filenames,\n-//! which is also how to define multiple files in a single test fixture\n-//!\n-//! Example using two files in the same crate:\n-//! ```\n-//! \"\n-//! //- /main.rs\n-//! mod foo;\n-//! fn main() {\n-//!     foo::bar();\n-//! }\n-//!\n-//! //- /foo.rs\n-//! pub fn bar() {}\n-//! \"\n-//! ```\n-//!\n-//! Example using two crates with one file each, with one crate depending on the other:\n-//! ```\n-//! r#\"\n-//! //- /main.rs crate:a deps:b\n-//! fn main() {\n-//!     b::foo();\n-//! }\n-//! //- /lib.rs crate:b\n-//! pub fn b() {\n-//!     println!(\"Hello World\")\n-//! }\n-//! \"#\n-//! ```\n-//!\n-//! Metadata allows specifying all settings and variables\n-//! that are available in a real rust project:\n-//! - crate names via `crate:cratename`\n-//! - dependencies via `deps:dep1,dep2`\n-//! - configuration settings via `cfg:dbg=false,opt_level=2`\n-//! - environment variables via `env:PATH=/bin,RUST_LOG=debug`\n-//!\n-//! Example using all available metadata:\n-//! ```\n-//! \"\n-//! //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n-//! fn insert_source_code_here() {}\n-//! \"\n-//! ```\n+//! A set of high-level utility fixture methods to use in tests.\n use std::{mem, str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;"}, {"sha": "099baeca2fcdb26dac7df3418051030c9b6ad848", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e785672f15a6da1314585ebcf2c235911a9be4f8/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e785672f15a6da1314585ebcf2c235911a9be4f8/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=e785672f15a6da1314585ebcf2c235911a9be4f8", "patch": "@@ -1,5 +1,65 @@\n //! Defines `Fixture` -- a convenient way to describe the initial state of\n //! rust-analyzer database from a single string.\n+//!\n+//! Fixtures are strings containing rust source code with optional metadata.\n+//! A fixture without metadata is parsed into a single source file.\n+//! Use this to test functionality local to one file.\n+//!\n+//! Simple Example:\n+//! ```\n+//! r#\"\n+//! fn main() {\n+//!     println!(\"Hello World\")\n+//! }\n+//! \"#\n+//! ```\n+//!\n+//! Metadata can be added to a fixture after a `//-` comment.\n+//! The basic form is specifying filenames,\n+//! which is also how to define multiple files in a single test fixture\n+//!\n+//! Example using two files in the same crate:\n+//! ```\n+//! \"\n+//! //- /main.rs\n+//! mod foo;\n+//! fn main() {\n+//!     foo::bar();\n+//! }\n+//!\n+//! //- /foo.rs\n+//! pub fn bar() {}\n+//! \"\n+//! ```\n+//!\n+//! Example using two crates with one file each, with one crate depending on the other:\n+//! ```\n+//! r#\"\n+//! //- /main.rs crate:a deps:b\n+//! fn main() {\n+//!     b::foo();\n+//! }\n+//! //- /lib.rs crate:b\n+//! pub fn b() {\n+//!     println!(\"Hello World\")\n+//! }\n+//! \"#\n+//! ```\n+//!\n+//! Metadata allows specifying all settings and variables\n+//! that are available in a real rust project:\n+//! - crate names via `crate:cratename`\n+//! - dependencies via `deps:dep1,dep2`\n+//! - configuration settings via `cfg:dbg=false,opt_level=2`\n+//! - environment variables via `env:PATH=/bin,RUST_LOG=debug`\n+//!\n+//! Example using all available metadata:\n+//! ```\n+//! \"\n+//! //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n+//! fn insert_source_code_here() {}\n+//! \"\n+//! ```\n \n use rustc_hash::FxHashMap;\n use stdx::{lines_with_ends, split_once, trim_indent};\n@@ -24,7 +84,7 @@ impl Fixture {\n     ///  //- some meta\n     ///  line 1\n     ///  line 2\n-    ///  // - other meta\n+    ///  //- other meta\n     ///  ```\n     pub fn parse(ra_fixture: &str) -> Vec<Fixture> {\n         let fixture = trim_indent(ra_fixture);"}, {"sha": "3ffd9e8cbb29fef5b05f9e28a630b2ebdfc0f53a", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e785672f15a6da1314585ebcf2c235911a9be4f8/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/e785672f15a6da1314585ebcf2c235911a9be4f8/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=e785672f15a6da1314585ebcf2c235911a9be4f8", "patch": "@@ -390,7 +390,7 @@ fn spam() {\n ```\n \n To specify input data, we use a single string literal in a special format, which can describe a set of rust files.\n-See the `Fixture` type.\n+See the `Fixture` its module for fixture examples and documentation.\n \n **Architecture Invariant:** all code invariants are tested by `#[test]` tests.\n There's no additional checks in CI, formatting and tidy tests are run with `cargo test`."}]}