{"sha": "ad2b4f44412391ff14d96d71d7b6a212f1d94755", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMmI0ZjQ0NDEyMzkxZmYxNGQ5NmQ3MWQ3YjZhMjEyZjFkOTQ3NTU=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2021-06-24T11:34:17Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2021-07-22T19:57:42Z"}, "message": "Enable compiler consumers to obtain Body with Polonius facts.", "tree": {"sha": "380f19e41a3fe598792faeff145339bdeef1343b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380f19e41a3fe598792faeff145339bdeef1343b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad2b4f44412391ff14d96d71d7b6a212f1d94755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2b4f44412391ff14d96d71d7b6a212f1d94755", "html_url": "https://github.com/rust-lang/rust/commit/ad2b4f44412391ff14d96d71d7b6a212f1d94755", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad2b4f44412391ff14d96d71d7b6a212f1d94755/comments", "author": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e742158ef5483b9cd756b193402329af3d4ba177", "url": "https://api.github.com/repos/rust-lang/rust/commits/e742158ef5483b9cd756b193402329af3d4ba177", "html_url": "https://github.com/rust-lang/rust/commit/e742158ef5483b9cd756b193402329af3d4ba177"}], "stats": {"total": 111, "additions": 94, "deletions": 17}, "files": [{"sha": "28c2c750136ca21c0c721d1dbca55c4b37d19efb", "filename": "compiler/rustc_mir/src/borrow_check/consumers.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs?ref=ad2b4f44412391ff14d96d71d7b6a212f1d94755", "patch": "@@ -0,0 +1,28 @@\n+//! This file provides API for compiler consumers.\n+\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_index::vec::IndexVec;\n+use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::mir::Body;\n+use rustc_middle::ty::{self, TyCtxt};\n+\n+pub use super::{\n+    facts::{AllFacts as PoloniusInput, RustcFacts},\n+    location::{LocationTable, RichLocation},\n+    nll::PoloniusOutput,\n+    BodyWithBorrowckFacts,\n+};\n+\n+/// This function computes Polonius facts for the given body. It makes a copy of\n+/// the body because it needs to regenerate the region identifiers.\n+pub fn get_body_with_borrowck_facts<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> BodyWithBorrowckFacts<'tcx> {\n+    let (input_body, promoted) = tcx.mir_promoted(def);\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let input_body: &Body<'_> = &input_body.borrow();\n+        let promoted: &IndexVec<_, _> = &promoted.borrow();\n+        *super::do_mir_borrowck(&infcx, input_body, promoted, true).1.unwrap()\n+    })\n+}"}, {"sha": "daea5e538ed512b2417953e7734e02c1ddc020ed", "filename": "compiler/rustc_mir/src/borrow_check/facts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs?ref=ad2b4f44412391ff14d96d71d7b6a212f1d94755", "patch": "@@ -12,7 +12,7 @@ use std::io::{BufWriter, Write};\n use std::path::Path;\n \n #[derive(Copy, Clone, Debug)]\n-crate struct RustcFacts;\n+pub struct RustcFacts;\n \n impl polonius_engine::FactTypes for RustcFacts {\n     type Origin = RegionVid;\n@@ -22,7 +22,7 @@ impl polonius_engine::FactTypes for RustcFacts {\n     type Path = MovePathIndex;\n }\n \n-crate type AllFacts = PoloniusFacts<RustcFacts>;\n+pub type AllFacts = PoloniusFacts<RustcFacts>;\n \n crate trait AllFactsExt {\n     /// Returns `true` if there is a need to gather `AllFacts` given the"}, {"sha": "d378a2cbea3e19dedeb5c1aead21582dab987dd5", "filename": "compiler/rustc_mir/src/borrow_check/location.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Flocation.rs?ref=ad2b4f44412391ff14d96d71d7b6a212f1d94755", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::{BasicBlock, Body, Location};\n /// granularity through outlives relations; however, the rich location\n /// table serves another purpose: it compresses locations from\n /// multiple words into a single u32.\n-crate struct LocationTable {\n+pub struct LocationTable {\n     num_points: usize,\n     statements_before_block: IndexVec<BasicBlock, usize>,\n }\n@@ -24,7 +24,7 @@ rustc_index::newtype_index! {\n }\n \n #[derive(Copy, Clone, Debug)]\n-crate enum RichLocation {\n+pub enum RichLocation {\n     Start(Location),\n     Mid(Location),\n }\n@@ -48,23 +48,23 @@ impl LocationTable {\n         Self { num_points, statements_before_block }\n     }\n \n-    crate fn all_points(&self) -> impl Iterator<Item = LocationIndex> {\n+    pub fn all_points(&self) -> impl Iterator<Item = LocationIndex> {\n         (0..self.num_points).map(LocationIndex::new)\n     }\n \n-    crate fn start_index(&self, location: Location) -> LocationIndex {\n+    pub fn start_index(&self, location: Location) -> LocationIndex {\n         let Location { block, statement_index } = location;\n         let start_index = self.statements_before_block[block];\n         LocationIndex::new(start_index + statement_index * 2)\n     }\n \n-    crate fn mid_index(&self, location: Location) -> LocationIndex {\n+    pub fn mid_index(&self, location: Location) -> LocationIndex {\n         let Location { block, statement_index } = location;\n         let start_index = self.statements_before_block[block];\n         LocationIndex::new(start_index + statement_index * 2 + 1)\n     }\n \n-    crate fn to_location(&self, index: LocationIndex) -> RichLocation {\n+    pub fn to_location(&self, index: LocationIndex) -> RichLocation {\n         let point_index = index.index();\n \n         // Find the basic block. We have a vector with the"}, {"sha": "bda1c48e7658f9b704074d7c6a63422d9571523b", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=ad2b4f44412391ff14d96d71d7b6a212f1d94755", "patch": "@@ -42,12 +42,14 @@ use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n use self::MutateMode::{JustWrite, WriteAndRead};\n+use facts::AllFacts;\n \n use self::path_utils::*;\n \n mod borrow_set;\n mod constraint_generation;\n mod constraints;\n+pub mod consumers;\n mod def_use;\n mod diagnostics;\n mod facts;\n@@ -108,22 +110,33 @@ fn mir_borrowck<'tcx>(\n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n         let promoted: &IndexVec<_, _> = &promoted.borrow();\n-        do_mir_borrowck(&infcx, input_body, promoted)\n+        do_mir_borrowck(&infcx, input_body, promoted, false).0\n     });\n     debug!(\"mir_borrowck done\");\n \n     tcx.arena.alloc(opt_closure_req)\n }\n \n+/// Perform the actual borrow checking.\n+///\n+/// If `return_body_with_facts` is true, then return the body with non-erased\n+/// region ids on which the borrow checking was performed together with Polonius\n+/// facts.\n fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n     input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n-) -> BorrowCheckResult<'tcx> {\n+    return_body_with_facts: bool,\n+) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {\n     let def = input_body.source.with_opt_param().as_local().unwrap();\n \n     debug!(\"do_mir_borrowck(def = {:?})\", def);\n \n+    assert!(\n+        !return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius,\n+        \"borrowck facts can be requested only when Polonius is enabled\"\n+    );\n+\n     let tcx = infcx.tcx;\n     let param_env = tcx.param_env(def.did);\n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n@@ -169,12 +182,14 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // requires first making our own copy of the MIR. This copy will\n     // be modified (in place) to contain non-lexical lifetimes. It\n     // will have a lifetime tied to the inference context.\n-    let mut body = input_body.clone();\n+    let mut body_owned = input_body.clone();\n     let mut promoted = input_promoted.clone();\n-    let free_regions = nll::replace_regions_in_mir(infcx, param_env, &mut body, &mut promoted);\n-    let body = &body; // no further changes\n+    let free_regions =\n+        nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);\n+    let body = &body_owned; // no further changes\n \n-    let location_table = &LocationTable::new(&body);\n+    let location_table_owned = LocationTable::new(body);\n+    let location_table = &location_table_owned;\n \n     let mut errors_buffer = Vec::new();\n     let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =\n@@ -202,6 +217,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let nll::NllOutput {\n         regioncx,\n         opaque_type_values,\n+        polonius_input,\n         polonius_output,\n         opt_closure_req,\n         nll_errors,\n@@ -446,9 +462,37 @@ fn do_mir_borrowck<'a, 'tcx>(\n         used_mut_upvars: mbcx.used_mut_upvars,\n     };\n \n+    let body_with_facts = if return_body_with_facts {\n+        let output_facts = mbcx.polonius_output.expect(\"Polonius output was not computed\");\n+        Some(box BodyWithBorrowckFacts {\n+            body: body_owned,\n+            input_facts: *polonius_input.expect(\"Polonius input facts were not generated\"),\n+            output_facts,\n+            location_table: location_table_owned,\n+        })\n+    } else {\n+        None\n+    };\n+\n     debug!(\"do_mir_borrowck: result = {:#?}\", result);\n \n-    result\n+    (result, body_with_facts)\n+}\n+\n+/// A `Body` with information computed by the borrow checker. This struct is\n+/// intended to be consumed by compiler consumers.\n+///\n+/// We need to include the MIR body here because the region identifiers must\n+/// match the ones in the Polonius facts.\n+pub struct BodyWithBorrowckFacts<'tcx> {\n+    /// A mir body that contains region identifiers.\n+    pub body: Body<'tcx>,\n+    /// Polonius input facts.\n+    pub input_facts: AllFacts,\n+    /// Polonius output facts.\n+    pub output_facts: Rc<self::nll::PoloniusOutput>,\n+    /// The table that maps Polonius points to locations in the table.\n+    pub location_table: LocationTable,\n }\n \n crate struct MirBorrowckCtxt<'cx, 'tcx> {"}, {"sha": "7742b76d9a48b018a07a225684d040caffe496c2", "filename": "compiler/rustc_mir/src/borrow_check/nll.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs?ref=ad2b4f44412391ff14d96d71d7b6a212f1d94755", "patch": "@@ -40,13 +40,14 @@ use crate::borrow_check::{\n     Upvar,\n };\n \n-crate type PoloniusOutput = Output<RustcFacts>;\n+pub type PoloniusOutput = Output<RustcFacts>;\n \n /// The output of `nll::compute_regions`. This includes the computed `RegionInferenceContext`, any\n /// closure requirements to propagate, and any generated errors.\n crate struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n     pub opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n+    pub polonius_input: Option<Box<AllFacts>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n     pub nll_errors: RegionErrors<'tcx>,\n@@ -271,7 +272,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     let def_id = body.source.def_id();\n \n     // Dump facts if requested.\n-    let polonius_output = all_facts.and_then(|all_facts| {\n+    let polonius_output = all_facts.as_ref().and_then(|all_facts| {\n         if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n             let def_path = infcx.tcx.def_path(def_id);\n             let dir_path = PathBuf::from(&infcx.tcx.sess.opts.debugging_opts.nll_facts_dir)\n@@ -305,6 +306,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     NllOutput {\n         regioncx,\n         opaque_type_values: remapped_opaque_tys,\n+        polonius_input: all_facts.map(Box::new),\n         polonius_output,\n         opt_closure_req: closure_region_requirements,\n         nll_errors,"}, {"sha": "5fb37b1b372ca5cf4b0b9600f5f064f5ddea975a", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2b4f44412391ff14d96d71d7b6a212f1d94755/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=ad2b4f44412391ff14d96d71d7b6a212f1d94755", "patch": "@@ -46,6 +46,9 @@ mod shim;\n pub mod transform;\n pub mod util;\n \n+// A public API provided for the Rust compiler consumers.\n+pub use self::borrow_check::consumers;\n+\n use rustc_middle::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers) {"}]}