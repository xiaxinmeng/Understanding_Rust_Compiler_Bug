{"sha": "991a296ce7617443c021c164644e2791890849bc", "node_id": "C_kwDOAAsO6NoAKDk5MWEyOTZjZTc2MTc0NDNjMDIxYzE2NDY0NGUyNzkxODkwODQ5YmM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-10-28T14:15:25Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-10-28T14:15:25Z"}, "message": "Make `core::slice::from_raw_parts[_mut]` const", "tree": {"sha": "512a059fe2e23ec2280f5641928eec5569423cc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512a059fe2e23ec2280f5641928eec5569423cc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/991a296ce7617443c021c164644e2791890849bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/991a296ce7617443c021c164644e2791890849bc", "html_url": "https://github.com/rust-lang/rust/commit/991a296ce7617443c021c164644e2791890849bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/991a296ce7617443c021c164644e2791890849bc/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "html_url": "https://github.com/rust-lang/rust/commit/4e0d3973fafdfb1c51011bc74e44257b5e3863f1"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "da537262f6bd56d2615b5be8dc6e92bd07895d3d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/991a296ce7617443c021c164644e2791890849bc/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991a296ce7617443c021c164644e2791890849bc/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=991a296ce7617443c021c164644e2791890849bc", "patch": "@@ -105,6 +105,7 @@\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n #![feature(const_discriminant)]\n+#![cfg_attr(not(bootstrap), feature(const_eval_select))]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_fmt_arguments_new)]"}, {"sha": "6653c998fa2ba5f913278493c071f8395d162f09", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/991a296ce7617443c021c164644e2791890849bc/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991a296ce7617443c021c164644e2791890849bc/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=991a296ce7617443c021c164644e2791890849bc", "patch": "@@ -1,8 +1,6 @@\n //! Free functions to create `&[T]` and `&mut [T]`.\n \n use crate::array;\n-use crate::intrinsics::is_aligned_and_not_null;\n-use crate::mem;\n use crate::ptr;\n \n /// Forms a slice from a pointer and a length.\n@@ -85,12 +83,10 @@ use crate::ptr;\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n-    debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n-    debug_assert!(\n-        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-        \"attempt to create slice covering at least half the address space\"\n-    );\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"none\")]\n+pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n+    debug_check_data_len(data, len);\n+\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.\n     unsafe { &*ptr::slice_from_raw_parts(data, len) }\n }\n@@ -126,16 +122,47 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n-    debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n-    debug_assert!(\n-        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-        \"attempt to create slice covering at least half the address space\"\n-    );\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"none\")]\n+pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n+    debug_check_data_len(data as _, len);\n+\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.\n     unsafe { &mut *ptr::slice_from_raw_parts_mut(data, len) }\n }\n \n+// In debug builds checks that `data` pointer is aligned and non-null and that slice with given `len` would cover less than half the address space\n+#[cfg(all(not(bootstrap), debug_assertions))]\n+#[unstable(feature = \"const_slice_from_raw_parts\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"none\")]\n+const fn debug_check_data_len<T>(data: *const T, len: usize) {\n+    fn rt_check<T>(data: *const T) {\n+        use crate::intrinsics::is_aligned_and_not_null;\n+\n+        assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n+    }\n+\n+    const fn ctfe_check<T>(_data: *const T) {\n+        // It's impossible to check alignment in const fn.\n+        //\n+        // CTFE engine checks that the pointer is aligned and not null.\n+    }\n+\n+    // SAFETY:\n+    // - `calling from_raw_parts[_mut]` with arguments that fail to fulfil checks made here is UB, so unless UB is already triggered this is noop\n+    // - CTFE makes the same checks as `rt_check`, so behavior change is not observable due to compilation error\n+    unsafe {\n+        crate::intrinsics::const_eval_select((data,), ctfe_check, rt_check);\n+    }\n+\n+    assert!(\n+        crate::mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n+        \"attempt to create slice covering at least half the address space\"\n+    );\n+}\n+\n+#[cfg(not(all(not(bootstrap), debug_assertions)))]\n+const fn debug_check_data_len<T>(_data: *const T, _len: usize) {}\n+\n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]"}]}