{"sha": "9c37c801ad737006c494f6b3bd97ff59764573ae", "node_id": "C_kwDOAAsO6NoAKDljMzdjODAxYWQ3MzcwMDZjNDk0ZjZiM2JkOTdmZjU5NzY0NTczYWU", "commit": {"author": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-10-09T20:32:23Z"}, "committer": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-10-09T20:32:23Z"}, "message": "expand documentation on type conversion w.r.t. `UnsafeCell`", "tree": {"sha": "db50a759506461c636084d5c5be8459e86f579fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db50a759506461c636084d5c5be8459e86f579fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c37c801ad737006c494f6b3bd97ff59764573ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c37c801ad737006c494f6b3bd97ff59764573ae", "html_url": "https://github.com/rust-lang/rust/commit/9c37c801ad737006c494f6b3bd97ff59764573ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c37c801ad737006c494f6b3bd97ff59764573ae/comments", "author": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13bc0996ddb64919feefb256ad9468087333121d", "url": "https://api.github.com/repos/rust-lang/rust/commits/13bc0996ddb64919feefb256ad9468087333121d", "html_url": "https://github.com/rust-lang/rust/commit/13bc0996ddb64919feefb256ad9468087333121d"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "be1017e5842864ba67761cecf11fff5b09704007", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c37c801ad737006c494f6b3bd97ff59764573ae/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c37c801ad737006c494f6b3bd97ff59764573ae/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=9c37c801ad737006c494f6b3bd97ff59764573ae", "patch": "@@ -1811,35 +1811,43 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// [`.get_mut()`]: `UnsafeCell::get_mut`\n ///\n-/// `UnsafeCell<T>` has the same in-memory representation as its inner type `T`. A consequence\n-/// of this guarantee is that it is possible to convert between `T` and `UnsafeCell<T>`.\n-/// However, it is only valid to obtain a `*mut T` pointer or `&mut T` reference to the\n-/// contents of an `UnsafeCell<T>` through [`.get()`], [`.raw_get()`] or [`.get_mut()`], e.g.:\n+/// `UnsafeCell<T>` has the same in-memory representation as its inner type `T` if and only if\n+/// the type `T` does not contain a [niche] (e.g. the type `Option<NonNull<u8>>` is typically\n+/// 8 bytes large on 64-bit platforms, but the type `Option<UnsafeCell<NonNull<u8>>>` takes\n+/// up 16 bytes of space). A consequence of this guarantee is that it is possible to convert\n+/// between `T` and `UnsafeCell<T>` when `T` has no niches. However, it is only valid to obtain\n+/// a `*mut T` pointer to the contents of a _shared_ `UnsafeCell<T>` through [`.get()`] or\n+/// [`.raw_get()`]. A `&mut T` reference can be obtained by either dereferencing this pointer\n+/// or by calling [`.get_mut()`] on an _exclusive_ `UnsafeCell<T>`, e.g.:\n ///\n /// ```rust\n /// use std::cell::UnsafeCell;\n ///\n /// let mut x: UnsafeCell<u32> = UnsafeCell::new(5);\n-/// let p1: &UnsafeCell<u32> = &x;\n+/// let shared: &UnsafeCell<u32> = &x;\n /// // using `.get()` is okay:\n /// unsafe {\n ///     // SAFETY: there exist no other references to the contents of `x`\n-///     let p2: &mut u32 = &mut *p1.get();\n+///     let exclusive: &mut u32 = &mut *shared.get();\n /// };\n /// // using `.raw_get()` is also okay:\n /// unsafe {\n ///     // SAFETY: there exist no other references to the contents of `x` in this scope\n-///     let p2: &mut u32 = &mut *UnsafeCell::raw_get(p1 as *const _);\n+///     let exclusive: &mut u32 = &mut *UnsafeCell::raw_get(shared as *const _);\n /// };\n /// // using `.get_mut()` is always safe:\n-/// let p2: &mut u32 = x.get_mut();\n-/// // but the following is not allowed!\n-/// // let p2: &mut u32 = unsafe {\n-/// //     let t: *mut u32 = &x as *const _ as *mut u32;\n-/// //     &mut *t\n-/// // };\n+/// let exclusive: &mut u32 = x.get_mut();\n+///\n+/// // when we have exclusive access, we can convert it to a shared `&UnsafeCell`:\n+/// unsafe {\n+///     // SAFETY: `u32` has no niche, therefore it has the same layout as `UnsafeCell<u32>`\n+///     let shared: &UnsafeCell<u32> = &*(exclusive as *mut _ as *const UnsafeCell<u32>);\n+///     // SAFETY: there exist no other *active* references to the contents of `x` in this scope\n+///     let exclusive: &mut u32 = &mut *shared.get();\n+/// }\n /// ```\n ///\n+/// [niche]: https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#niche\n /// [`.raw_get()`]: `UnsafeCell::raw_get`\n ///\n /// # Examples"}]}