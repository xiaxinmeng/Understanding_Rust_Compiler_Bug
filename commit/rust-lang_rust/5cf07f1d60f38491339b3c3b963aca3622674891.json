{"sha": "5cf07f1d60f38491339b3c3b963aca3622674891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZjA3ZjFkNjBmMzg0OTEzMzliM2MzYjk2M2FjYTM2MjI2NzQ4OTE=", "commit": {"author": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2016-11-04T09:50:58Z"}, "committer": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2016-11-11T17:21:39Z"}, "message": "Update patch with example.", "tree": {"sha": "72f912ecc02d95178c911f69d2f328c2a04e12e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f912ecc02d95178c911f69d2f328c2a04e12e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf07f1d60f38491339b3c3b963aca3622674891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf07f1d60f38491339b3c3b963aca3622674891", "html_url": "https://github.com/rust-lang/rust/commit/5cf07f1d60f38491339b3c3b963aca3622674891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf07f1d60f38491339b3c3b963aca3622674891/comments", "author": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b39c0a602ad316b8eebd2dd50ae14e45d47dd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b39c0a602ad316b8eebd2dd50ae14e45d47dd13", "html_url": "https://github.com/rust-lang/rust/commit/1b39c0a602ad316b8eebd2dd50ae14e45d47dd13"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "d1166e686c7b647bf9d5a12bb646b14e6f84f240", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5cf07f1d60f38491339b3c3b963aca3622674891/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/5cf07f1d60f38491339b3c3b963aca3622674891/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=5cf07f1d60f38491339b3c3b963aca3622674891", "patch": "@@ -243,7 +243,21 @@ to know more about [operator traits][operators-and-overloading].\n # Rules for implementing traits\n \n So far, we\u2019ve only added trait implementations to structs, but you can\n-implement a trait for any type such as `i32`.\n+implement a trait for any type such as `f32`:\n+\n+```rust\n+trait ApproxEqual {\n+    fn approx_equal(&self, other: &Self) -> bool;\n+}\n+impl ApproxEqual for f32 {\n+    fn approx_equal(&self, other: &Self) -> bool {\n+        // Appropriate for `self` and `other` being close to 1.0.\n+        (self - other).abs() <= ::std::f32::EPSILON\n+    }\n+}\n+\n+println!(\"{}\", 1.0.approx_equal(&1.00000001));\n+```\n \n This may seem like the Wild West, but there are two restrictions around\n implementing traits that prevent this from getting out of hand. The first is"}]}