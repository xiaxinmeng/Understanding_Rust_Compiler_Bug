{"sha": "0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNjg3MjhmYjM3MmZmNmIwYjU0M2Y4N2FjNjc3NmY5ZDEyYTRiMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-16T20:42:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-16T20:42:52Z"}, "message": "Auto merge of #42038 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 8 pull requests\n\n- Successful merges: #41489, #41982, #41994, #41995, #42001, #42005, #42011, #42028\n- Failed merges:", "tree": {"sha": "bd2b86d88d2d636da68dd07e3c654472eaa2dd1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2b86d88d2d636da68dd07e3c654472eaa2dd1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "html_url": "https://github.com/rust-lang/rust/commit/0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28cf7564a1e7ed45855c2dbee744f76a191b052", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28cf7564a1e7ed45855c2dbee744f76a191b052", "html_url": "https://github.com/rust-lang/rust/commit/b28cf7564a1e7ed45855c2dbee744f76a191b052"}, {"sha": "9678ad2b0da8999b55786a1159280266c7ca7e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/9678ad2b0da8999b55786a1159280266c7ca7e64", "html_url": "https://github.com/rust-lang/rust/commit/9678ad2b0da8999b55786a1159280266c7ca7e64"}], "stats": {"total": 203, "additions": 158, "deletions": 45}, "files": [{"sha": "8f121f8d6ed9b54434c5f1bb4e23a149a42381d6", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -177,7 +177,7 @@ python x.py test src/test/rustdoc\n python x.py build src/libcore --stage 0\n ```\n \n-You can explore the build system throught the various `--help` pages for each\n+You can explore the build system through the various `--help` pages for each\n subcommand. For example to learn more about a command you can run:\n \n ```"}, {"sha": "7e70bb92cd6e0f011b57c3baf236412490b09641", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -251,9 +251,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let bound_list = unsatisfied_predicates.iter()\n                         .map(|p| format!(\"`{} : {}`\", p.self_ty(), p))\n                         .collect::<Vec<_>>()\n-                        .join(\", \");\n+                        .join(\"\\n\");\n                     err.note(&format!(\"the method `{}` exists but the following trait bounds \\\n-                                       were not satisfied: {}\",\n+                                       were not satisfied:\\n{}\",\n                                       item_name,\n                                       bound_list));\n                 }"}, {"sha": "612793e2567f1c35dbf5bd47684578559e0d8fde", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -1177,7 +1177,6 @@ impl fmt::Display for AbiSpace {\n         let quot = if f.alternate() { \"\\\"\" } else { \"&quot;\" };\n         match self.0 {\n             Abi::Rust => Ok(()),\n-            Abi::C => write!(f, \"extern \"),\n             abi => write!(f, \"extern {0}{1}{0} \", quot, abi.name()),\n         }\n     }"}, {"sha": "570a1980782131131ff3c05dbe52e6ad0fa621a1", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -617,6 +617,11 @@ a.test-arrow:hover{\n \ttop: 0;\n }\n \n+h3 > .collapse-toggle, h4 > .collapse-toggle {\n+\tfont-size: 0.8em;\n+\ttop: 5px;\n+}\n+\n .toggle-wrapper > .collapse-toggle {\n \tleft: -24px;\n \tmargin-top: 0px;"}, {"sha": "c2c6e6cf87dff4ad71fcde7e8f721f342ef3d37c", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -19,16 +19,16 @@ use mem;\n /// A thread local storage key which owns its contents.\n ///\n /// This key uses the fastest possible implementation available to it for the\n-/// target platform. It is instantiated with the `thread_local!` macro and the\n-/// primary method is the `with` method.\n+/// target platform. It is instantiated with the [`thread_local!`] macro and the\n+/// primary method is the [`with`] method.\n ///\n-/// The `with` method yields a reference to the contained value which cannot be\n+/// The [`with`] method yields a reference to the contained value which cannot be\n /// sent across threads or escape the given closure.\n ///\n /// # Initialization and Destruction\n ///\n-/// Initialization is dynamically performed on the first call to `with()`\n-/// within a thread, and values that implement `Drop` get destructed when a\n+/// Initialization is dynamically performed on the first call to [`with`]\n+/// within a thread, and values that implement [`Drop`] get destructed when a\n /// thread exits. Some caveats apply, which are explained below.\n ///\n /// # Examples\n@@ -77,6 +77,10 @@ use mem;\n /// 3. On macOS, initializing TLS during destruction of other TLS slots can\n ///    sometimes cancel *all* destructors for the current thread, whether or not\n ///    the slots have already had their destructors run or not.\n+///\n+/// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n+/// [`thread_local!`]: ../../std/macro.thread_local.html\n+/// [`Drop`]: ../../std/ops/trait.Drop.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LocalKey<T: 'static> {\n     // This outer `LocalKey<T>` type is what's going to be stored in statics,\n@@ -106,7 +110,7 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n     }\n }\n \n-/// Declare a new thread local storage key of type `std::thread::LocalKey`.\n+/// Declare a new thread local storage key of type [`std::thread::LocalKey`].\n ///\n /// # Syntax\n ///\n@@ -124,8 +128,10 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// # fn main() {}\n /// ```\n ///\n-/// See [LocalKey documentation](thread/struct.LocalKey.html) for more\n+/// See [LocalKey documentation][`std::thread::LocalKey`] for more\n /// information.\n+///\n+/// [`std::thread::LocalKey`]: ../std/thread/struct.LocalKey.html\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n@@ -195,11 +201,13 @@ macro_rules! __thread_local_inner {\n #[derive(Debug, Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n     /// All keys are in this state whenever a thread starts. Keys will\n-    /// transition to the `Valid` state once the first call to `with` happens\n+    /// transition to the `Valid` state once the first call to [`with`] happens\n     /// and the initialization expression succeeds.\n     ///\n     /// Keys in the `Uninitialized` state will yield a reference to the closure\n-    /// passed to `with` so long as the initialization routine does not panic.\n+    /// passed to [`with`] so long as the initialization routine does not panic.\n+    ///\n+    /// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n     Uninitialized,\n \n     /// Once a key has been accessed successfully, it will enter the `Valid`\n@@ -208,15 +216,19 @@ pub enum LocalKeyState {\n     /// `Destroyed` state.\n     ///\n     /// Keys in the `Valid` state will be guaranteed to yield a reference to the\n-    /// closure passed to `with`.\n+    /// closure passed to [`with`].\n+    ///\n+    /// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n     Valid,\n \n     /// When a thread exits, the destructors for keys will be run (if\n     /// necessary). While a destructor is running, and possibly after a\n     /// destructor has run, a key is in the `Destroyed` state.\n     ///\n     /// Keys in the `Destroyed` states will trigger a panic when accessed via\n-    /// `with`.\n+    /// [`with`].\n+    ///\n+    /// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n     Destroyed,\n }\n \n@@ -283,23 +295,26 @@ impl<T: 'static> LocalKey<T> {\n     /// Query the current state of this key.\n     ///\n     /// A key is initially in the `Uninitialized` state whenever a thread\n-    /// starts. It will remain in this state up until the first call to `with`\n+    /// starts. It will remain in this state up until the first call to [`with`]\n     /// within a thread has run the initialization expression successfully.\n     ///\n     /// Once the initialization expression succeeds, the key transitions to the\n-    /// `Valid` state which will guarantee that future calls to `with` will\n+    /// `Valid` state which will guarantee that future calls to [`with`] will\n     /// succeed within the thread.\n     ///\n     /// When a thread exits, each key will be destroyed in turn, and as keys are\n     /// destroyed they will enter the `Destroyed` state just before the\n     /// destructor starts to run. Keys may remain in the `Destroyed` state after\n     /// destruction has completed. Keys without destructors (e.g. with types\n-    /// that are `Copy`), may never enter the `Destroyed` state.\n+    /// that are [`Copy`]), may never enter the `Destroyed` state.\n     ///\n     /// Keys in the `Uninitialized` state can be accessed so long as the\n     /// initialization does not panic. Keys in the `Valid` state are guaranteed\n     /// to be able to be accessed. Keys in the `Destroyed` state will panic on\n-    /// any call to `with`.\n+    /// any call to [`with`].\n+    ///\n+    /// [`with`]: ../../std/thread/struct.LocalKey.html#method.with\n+    /// [`Copy`]: ../../std/marker/trait.Copy.html\n     #[unstable(feature = \"thread_local_state\",\n                reason = \"state querying was recently added\",\n                issue = \"27716\")]"}, {"sha": "154406a1d8bd78ca29965e9f54f49f4af51fc896", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -180,8 +180,33 @@ pub use self::local::{LocalKey, LocalKeyState};\n // Builder\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Thread configuration. Provides detailed control over the properties\n-/// and behavior of new threads.\n+/// Thread factory, which can be used in order to configure the properties of\n+/// a new thread.\n+///\n+/// Methods can be chained on it in order to configure it.\n+///\n+/// The two configurations available are:\n+///\n+/// - [`name`]: allows to give a name to the thread which is currently\n+///   only used in `panic` messages.\n+/// - [`stack_size`]: specifies the desired stack size. Note that this can\n+///   be overriden by the OS.\n+///\n+/// If the [`stack_size`] field is not specified, the stack size\n+/// will be the `RUST_MIN_STACK` environment variable. If it is\n+/// not specified either, a sensible default will be set.\n+///\n+/// If the [`name`] field is not specified, the thread will not be named.\n+///\n+/// The [`spawn`] method will take ownership of the builder and create an\n+/// [`io::Result`] to the thread handle with the given configuration.\n+///\n+/// The [`thread::spawn`] free function uses a `Builder` with default\n+/// configuration and [`unwrap`]s its return value.\n+///\n+/// You may want to use [`spawn`] instead of [`thread::spawn`], when you want\n+/// to recover from a failure to launch a thread, indeed the free function will\n+/// panick where the `Builder` method will return a [`io::Result`].\n ///\n /// # Examples\n ///\n@@ -196,6 +221,13 @@ pub use self::local::{LocalKey, LocalKeyState};\n ///\n /// handler.join().unwrap();\n /// ```\n+///\n+/// [`thread::spawn`]: ../../std/thread/fn.spawn.html\n+/// [`stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n+/// [`name`]: ../../std/thread/struct.Builder.html#method.name\n+/// [`spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n+/// [`io::Result`]: ../../std/io/type.Result.html\n+/// [`unwrap`]: ../../std/result/enum.Result.html#method.unwrap\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Builder {\n@@ -209,11 +241,6 @@ impl Builder {\n     /// Generates the base configuration for spawning a thread, from which\n     /// configuration methods can be chained.\n     ///\n-    /// If the [`stack_size`] field is not specified, the stack size\n-    /// will be the `RUST_MIN_STACK` environment variable.  If it is\n-    /// not specified either, a sensible default will be set (2MB as\n-    /// of the writting of this doc).\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -229,8 +256,6 @@ impl Builder {\n     ///\n     /// handler.join().unwrap();\n     /// ```\n-    ///\n-    /// [`stack_size`]: ../../std/thread/struct.Builder.html#method.stack_size\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> Builder {\n         Builder {\n@@ -280,9 +305,10 @@ impl Builder {\n         self\n     }\n \n-    /// Spawns a new thread, and returns a join handle for it.\n+    /// Spawns a new thread by taking ownership of the `Builder`, and returns an\n+    /// [`io::Result`] to its [`JoinHandle`].\n     ///\n-    /// The child thread may outlive the parent (unless the parent thread\n+    /// The spawned thread may outlive the caller (unless the caller thread\n     /// is the main thread; the whole process is terminated when the main\n     /// thread finishes). The join handle can be used to block on\n     /// termination of the child thread, including recovering its panics.\n@@ -297,6 +323,7 @@ impl Builder {\n     ///\n     /// [`spawn`]: ../../std/thread/fn.spawn.html\n     /// [`io::Result`]: ../../std/io/type.Result.html\n+    /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n     ///\n     /// # Examples\n     ///\n@@ -468,13 +495,36 @@ pub fn current() -> Thread {\n \n /// Cooperatively gives up a timeslice to the OS scheduler.\n ///\n+/// This is used when the programmer knows that the thread will have nothing\n+/// to do for some time, and thus avoid wasting computing time.\n+///\n+/// For example when polling on a resource, it is common to check that it is\n+/// available, and if not to yield in order to avoid busy waiting.\n+///\n+/// Thus the pattern of `yield`ing after a failed poll is rather common when\n+/// implementing low-level shared resources or synchronization primitives.\n+///\n+/// However programmers will usualy prefer to use, [`channel`]s, [`Condvar`]s,\n+/// [`Mutex`]es or [`join`] for their synchronisation routines, as they avoid\n+/// thinking about thread schedulling.\n+///\n+/// Note that [`channel`]s for example are implemented using this primitive.\n+/// Indeed when you call `send` or `recv`, which are blocking, they will yield\n+/// if the channel is not available.\n+///\n /// # Examples\n ///\n /// ```\n /// use std::thread;\n ///\n /// thread::yield_now();\n /// ```\n+///\n+/// [`channel`]: ../../std/sync/mpsc/index.html\n+/// [`spawn`]: ../../std/thread/fn.spawn.html\n+/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n+/// [`Mutex`]: ../../std/sync/struct.Mutex.html\n+/// [`Condvar`]: ../../std/sync/struct.Condvar.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn yield_now() {\n     imp::Thread::yield_now()"}, {"sha": "780b7ec8c2a16ab7f7d6e6230be9d6d6319ae667", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -267,11 +267,12 @@ pub fn parse_failure_msg(tok: Token) -> String {\n \n /// Perform a token equality check, ignoring syntax context (that is, an unhygienic comparison)\n fn token_name_eq(t1 : &Token, t2 : &Token) -> bool {\n-    match (t1,t2) {\n-        (&token::Ident(id1),&token::Ident(id2))\n-        | (&token::Lifetime(id1),&token::Lifetime(id2)) =>\n-            id1.name == id2.name,\n-        _ => *t1 == *t2\n+    if let (Some(id1), Some(id2)) = (t1.ident(), t2.ident()) {\n+        id1.name == id2.name\n+    } else if let (&token::Lifetime(id1), &token::Lifetime(id2)) = (t1, t2) {\n+        id1.name == id2.name\n+    } else {\n+        *t1 == *t2\n     }\n }\n "}, {"sha": "e18b4204584e386c590720dc15ced0169a874355", "filename": "src/test/run-pass/issue-41803.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frun-pass%2Fissue-41803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frun-pass%2Fissue-41803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41803.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// A compile-time map from identifiers to arbitrary (heterogeneous) expressions\n+macro_rules! ident_map {\n+    ( $name:ident = { $($key:ident => $e:expr,)* } ) => {\n+        macro_rules! $name {\n+            $(\n+                ( $key ) => { $e };\n+            )*\n+            // Empty invocation expands to nothing. Needed when the map is empty.\n+            () => {};\n+        }\n+    };\n+}\n+\n+ident_map!(my_map = {\n+    main => 0,\n+});\n+\n+fn main() {\n+    my_map!(main);\n+}"}, {"sha": "5c64b4118c3ab1a748e2175b3f74c82baa123efc", "filename": "src/test/rustdoc/extern-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frustdoc%2Fextern-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frustdoc%2Fextern-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-impl.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -18,9 +18,9 @@ impl Foo {\n     pub fn rust0() {}\n     // @has - '//code' 'fn rust1()'\n     pub extern \"Rust\" fn rust1() {}\n-    // @has - '//code' 'extern fn c0()'\n+    // @has - '//code' 'extern \"C\" fn c0()'\n     pub extern fn c0() {}\n-    // @has - '//code' 'extern fn c1()'\n+    // @has - '//code' 'extern \"C\" fn c1()'\n     pub extern \"C\" fn c1() {}\n     // @has - '//code' 'extern \"system\" fn system0()'\n     pub extern \"system\" fn system0() {}\n@@ -31,7 +31,7 @@ pub trait Bar {}\n \n // @has - '//code' 'impl Bar for fn()'\n impl Bar for fn() {}\n-// @has - '//code' 'impl Bar for extern fn()'\n+// @has - '//code' 'impl Bar for extern \"C\" fn()'\n impl Bar for extern fn() {}\n // @has - '//code' 'impl Bar for extern \"system\" fn()'\n impl Bar for extern \"system\" fn() {}"}, {"sha": "8511d461703de58dfc9cf656656f0ec2b1839e53", "filename": "src/test/rustdoc/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frustdoc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frustdoc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fffi.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -13,10 +13,10 @@\n \n extern crate rustdoc_ffi as lib;\n \n-// @has ffi/fn.foreigner.html //pre 'pub unsafe extern fn foreigner(cold_as_ice: u32)'\n+// @has ffi/fn.foreigner.html //pre 'pub unsafe extern \"C\" fn foreigner(cold_as_ice: u32)'\n pub use lib::foreigner;\n \n extern \"C\" {\n-    // @has ffi/fn.another.html //pre 'pub unsafe extern fn another(cold_as_ice: u32)'\n+    // @has ffi/fn.another.html //pre 'pub unsafe extern \"C\" fn another(cold_as_ice: u32)'\n     pub fn another(cold_as_ice: u32);\n }"}, {"sha": "75df53589454f6d3927e8d8fc382d9f3b4f7fc9d", "filename": "src/test/rustdoc/issue-22038.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frustdoc%2Fissue-22038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frustdoc%2Fissue-22038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-22038.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -10,7 +10,7 @@\n \n extern {\n     // @has issue_22038/fn.foo1.html \\\n-    //      '//*[@class=\"rust fn\"]' 'pub unsafe extern fn foo1()'\n+    //      '//*[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn foo1()'\n     pub fn foo1();\n }\n \n@@ -21,7 +21,7 @@ extern \"system\" {\n }\n \n // @has issue_22038/fn.bar.html \\\n-//      '//*[@class=\"rust fn\"]' 'pub extern fn bar()'\n+//      '//*[@class=\"rust fn\"]' 'pub extern \"C\" fn bar()'\n pub extern fn bar() {}\n \n // @has issue_22038/fn.baz.html \\"}, {"sha": "6ba776ba4679f845c2dd9f3f880e586f7d056b34", "filename": "src/test/rustdoc/variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frustdoc%2Fvariadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Frustdoc%2Fvariadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fvariadic.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n extern \"C\" {\n-    // @has variadic/fn.foo.html //pre 'pub unsafe extern fn foo(x: i32, ...)'\n+    // @has variadic/fn.foo.html //pre 'pub unsafe extern \"C\" fn foo(x: i32, ...)'\n     pub fn foo(x: i32, ...);\n }"}, {"sha": "78e0f7e619b12791e7f52b917eb205959da36f9f", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -4,7 +4,9 @@ error: no method named `count` found for type `std::iter::Filter<std::iter::Fuse\n 17 |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                                       ^^^^^\n    |\n-   = note: the method `count` exists but the following trait bounds were not satisfied: `[closure@$DIR/issue-36053-2.rs:17:39: 17:53] : std::ops::FnMut<(&_,)>`, `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]> : std::iter::Iterator`\n+   = note: the method `count` exists but the following trait bounds were not satisfied:\n+           `[closure@$DIR/issue-36053-2.rs:17:39: 17:53] : std::ops::FnMut<(&_,)>`\n+           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]> : std::iter::Iterator`\n \n error[E0281]: type mismatch: `[closure@$DIR/issue-36053-2.rs:17:39: 17:53]` implements the trait `for<'r> std::ops::FnMut<(&'r str,)>`, but the trait `for<'r> std::ops::FnMut<(&'r &str,)>` is required\n   --> $DIR/issue-36053-2.rs:17:32"}, {"sha": "a4eb4455551129a8d6c7e589acdedf8c0e8168e6", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     let a: Result<(), Foo> = Ok(());\n     a.unwrap();\n     //~^ ERROR no method named `unwrap` found for type `std::result::Result<(), Foo>`\n-    //~| NOTE the following trait bounds were not satisfied: `Foo : std::fmt::Debug`\n+    //~| NOTE the method `unwrap` exists but the following trait bounds were not satisfied\n }", "previous_filename": "src/test/compile-fail/method-help-unsatisfied-bound.rs"}, {"sha": "2bd786c20fef0285d8050e44ab0eec7f1c1969d7", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f68728fb372ff6b0b543f87ac6776f9d12a4b05/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "patch": "@@ -0,0 +1,11 @@\n+error: no method named `unwrap` found for type `std::result::Result<(), Foo>` in the current scope\n+  --> $DIR/method-help-unsatisfied-bound.rs:15:7\n+   |\n+15 |     a.unwrap();\n+   |       ^^^^^^\n+   |\n+   = note: the method `unwrap` exists but the following trait bounds were not satisfied:\n+           `Foo : std::fmt::Debug`\n+\n+error: aborting due to previous error\n+"}]}