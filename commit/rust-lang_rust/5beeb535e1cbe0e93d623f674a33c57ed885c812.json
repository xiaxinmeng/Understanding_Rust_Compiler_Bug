{"sha": "5beeb535e1cbe0e93d623f674a33c57ed885c812", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZWViNTM1ZTFjYmUwZTkzZDYyM2Y2NzRhMzNjNTdlZDg4NWM4MTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-11T20:25:28Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-11T20:44:07Z"}, "message": "Reword Range*/[Range*]: Iterator E0277 messages", "tree": {"sha": "7c43bda6e679486d31289aa2f193ba46b72a392f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c43bda6e679486d31289aa2f193ba46b72a392f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5beeb535e1cbe0e93d623f674a33c57ed885c812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5beeb535e1cbe0e93d623f674a33c57ed885c812", "html_url": "https://github.com/rust-lang/rust/commit/5beeb535e1cbe0e93d623f674a33c57ed885c812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5beeb535e1cbe0e93d623f674a33c57ed885c812/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71228e2f4d6ea82c9538391454801baa7946bff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c71228e2f4d6ea82c9538391454801baa7946bff", "html_url": "https://github.com/rust-lang/rust/commit/c71228e2f4d6ea82c9538391454801baa7946bff"}], "stats": {"total": 123, "additions": 113, "deletions": 10}, "files": [{"sha": "5b6d9e2033caa74078f804e2dbdf70d24414fb37", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=5beeb535e1cbe0e93d623f674a33c57ed885c812", "patch": "@@ -40,13 +40,16 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n         _Self=\"[std::ops::RangeFrom<Idx>; 1]\",\n         label=\"if you meant to iterate from a value onwards, remove the square brackets\",\n         note=\"`[start..]` is an array of one `RangeFrom`; you might have meant to have a \\\n-              `RangeFrom` without the brackets: `start..`\"\n+              `RangeFrom` without the brackets: `start..`, keeping in mind that iterating over an \\\n+              unbounded iterator will run forever unless you `break` or `return` from within the \\\n+              loop\"\n     ),\n     on(\n         _Self=\"[std::ops::RangeTo<Idx>; 1]\",\n-        label=\"if you meant to iterate until a value, remove the square brackets\",\n-        note=\"`[..end]` is an array of one `RangeTo`; you might have meant to have a \\\n-              `RangeTo` without the brackets: `..end`\"\n+        label=\"if you meant to iterate until a value, remove the square brackets and add a \\\n+               starting value\",\n+        note=\"`[..end]` is an array of one `RangeTo`; you might have meant to have a bounded \\\n+              `Range` without the brackets: `0..end`\"\n     ),\n     on(\n         _Self=\"[std::ops::RangeInclusive<Idx>; 1]\",\n@@ -56,9 +59,22 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     ),\n     on(\n         _Self=\"[std::ops::RangeToInclusive<Idx>; 1]\",\n-        label=\"if you meant to iterate until a value, remove the square brackets\",\n+        label=\"if you meant to iterate until a value (including it), remove the square brackets \\\n+               and add a starting value\",\n         note=\"`[..=end]` is an array of one `RangeToInclusive`; you might have meant to have a \\\n-              `RangeToInclusive` without the brackets: `..=end`\"\n+              bounded `RangeInclusive` without the brackets: `0..=end`\"\n+    ),\n+    on(\n+        _Self=\"std::ops::RangeTo<Idx>\",\n+        label=\"if you meant to iterate until a value, add a starting value\",\n+        note=\"`..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a \\\n+              bounded `Range`: `0..end`\"\n+    ),\n+    on(\n+        _Self=\"std::ops::RangeToInclusive<Idx>\",\n+        label=\"if you meant to iterate until a value (including it), add a starting value\",\n+        note=\"`..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant \\\n+              to have a bounded `RangeInclusive`: `0..=end`\"\n     ),\n     on(\n         _Self=\"&str\","}, {"sha": "a7d6e80bae5f766e34f3bfed429a73a39a7da341", "filename": "src/test/ui/iterators/array-of-ranges.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs?ref=5beeb535e1cbe0e93d623f674a33c57ed885c812", "patch": "@@ -1,9 +1,14 @@\n fn main() {\n     for _ in [0..1] {}\n+    for _ in [0..=1] {}\n+    for _ in [0..] {}\n+    for _ in [..1] {}\n+    for _ in [..=1] {}\n     let start = 0;\n     let end = 0;\n     for _ in [start..end] {}\n     let array_of_range = [start..end];\n     for _ in array_of_range {}\n     for _ in [0..1, 2..3] {}\n+    for _ in [0..=1] {}\n }"}, {"sha": "fbe7e0ee74889aa6f9d3a22ee548cc4903680122", "filename": "src/test/ui/iterators/array-of-ranges.stderr", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr?ref=5beeb535e1cbe0e93d623f674a33c57ed885c812", "patch": "@@ -8,9 +8,49 @@ LL |     for _ in [0..1] {}\n    = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n-error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n+error[E0277]: `[std::ops::RangeInclusive<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:3:14\n+   |\n+LL |     for _ in [0..=1] {}\n+   |              ^^^^^^^ if you meant to iterate between two values, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeInclusive<{integer}>; 1]`\n+   = note: `[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a `RangeInclusive` without the brackets: `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::RangeFrom<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:4:14\n+   |\n+LL |     for _ in [0..] {}\n+   |              ^^^^^ if you meant to iterate from a value onwards, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeFrom<{integer}>; 1]`\n+   = note: `[start..]` is an array of one `RangeFrom`; you might have meant to have a `RangeFrom` without the brackets: `start..`, keeping in mind that iterating over an unbounded iterator will run forever unless you `break` or `return` from within the loop\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::RangeTo<{integer}>; 1]` is not an iterator\n   --> $DIR/array-of-ranges.rs:5:14\n    |\n+LL |     for _ in [..1] {}\n+   |              ^^^^^ if you meant to iterate until a value, remove the square brackets and add a starting value\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeTo<{integer}>; 1]`\n+   = note: `[..end]` is an array of one `RangeTo`; you might have meant to have a bounded `Range` without the brackets: `0..end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::RangeToInclusive<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:6:14\n+   |\n+LL |     for _ in [..=1] {}\n+   |              ^^^^^^ if you meant to iterate until a value (including it), remove the square brackets and add a starting value\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeToInclusive<{integer}>; 1]`\n+   = note: `[..=end]` is an array of one `RangeToInclusive`; you might have meant to have a bounded `RangeInclusive` without the brackets: `0..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:9:14\n+   |\n LL |     for _ in [start..end] {}\n    |              ^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n    |\n@@ -19,7 +59,7 @@ LL |     for _ in [start..end] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:7:14\n+  --> $DIR/array-of-ranges.rs:11:14\n    |\n LL |     for _ in array_of_range {}\n    |              ^^^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n@@ -29,7 +69,7 @@ LL |     for _ in array_of_range {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 2]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:8:14\n+  --> $DIR/array-of-ranges.rs:12:14\n    |\n LL |     for _ in [0..1, 2..3] {}\n    |              ^^^^^^^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it\n@@ -38,6 +78,16 @@ LL |     for _ in [0..1, 2..3] {}\n    = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n-error: aborting due to 4 previous errors\n+error[E0277]: `[std::ops::RangeInclusive<{integer}>; 1]` is not an iterator\n+  --> $DIR/array-of-ranges.rs:13:14\n+   |\n+LL |     for _ in [0..=1] {}\n+   |              ^^^^^^^ if you meant to iterate between two values, remove the square brackets\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::RangeInclusive<{integer}>; 1]`\n+   = note: `[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a `RangeInclusive` without the brackets: `start..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "925d2d61a124744f076fbed6ffd6a5bd1a0cfef2", "filename": "src/test/ui/iterators/ranges.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Ftest%2Fui%2Fiterators%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Ftest%2Fui%2Fiterators%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.rs?ref=5beeb535e1cbe0e93d623f674a33c57ed885c812", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    for _ in ..10 {}\n+    //~^ ERROR E0277\n+    for _ in ..=10 {}\n+    //~^ ERROR E0277\n+    for _ in 0..10 {}\n+    for _ in 0..=10 {}\n+    for _ in 0.. {}\n+}"}, {"sha": "e5e2d87879d2350981a201a608c9be5405719a00", "filename": "src/test/ui/iterators/ranges.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5beeb535e1cbe0e93d623f674a33c57ed885c812/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.stderr?ref=5beeb535e1cbe0e93d623f674a33c57ed885c812", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: `std::ops::RangeTo<{integer}>` is not an iterator\n+  --> $DIR/ranges.rs:2:14\n+   |\n+LL |     for _ in ..10 {}\n+   |              ^^^^ if you meant to iterate until a value, add a starting value\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `std::ops::RangeTo<{integer}>`\n+   = note: `..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a bounded `Range`: `0..end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `std::ops::RangeToInclusive<{integer}>` is not an iterator\n+  --> $DIR/ranges.rs:4:14\n+   |\n+LL |     for _ in ..=10 {}\n+   |              ^^^^^ if you meant to iterate until a value (including it), add a starting value\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `std::ops::RangeToInclusive<{integer}>`\n+   = note: `..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant to have a bounded `RangeInclusive`: `0..=end`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}