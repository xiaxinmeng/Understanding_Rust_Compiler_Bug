{"sha": "ff3a761f79cc43f5465215ad1301ac1789d6e4df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmM2E3NjFmNzljYzQzZjU0NjUyMTVhZDEzMDFhYzE3ODlkNmU0ZGY=", "commit": {"author": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-20T19:42:16Z"}, "committer": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-23T21:32:42Z"}, "message": "add more-evocative examples for `Shl` and `Shr`\n\nr? @steveklabnik\n\nadd examples that lift `<<` and `>>` to a trivial struct\n\nreplace `Scalar` structs with struct tuples\n\nadd `fn main` wrappers to enable Rust Playground \"Run\" button", "tree": {"sha": "c68cdcb1e2126dd516f9439068037b07972b3cf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68cdcb1e2126dd516f9439068037b07972b3cf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff3a761f79cc43f5465215ad1301ac1789d6e4df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3a761f79cc43f5465215ad1301ac1789d6e4df", "html_url": "https://github.com/rust-lang/rust/commit/ff3a761f79cc43f5465215ad1301ac1789d6e4df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff3a761f79cc43f5465215ad1301ac1789d6e4df/comments", "author": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490189634b656dcca9e41e6b52093569c03bd4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/490189634b656dcca9e41e6b52093569c03bd4df", "html_url": "https://github.com/rust-lang/rust/commit/490189634b656dcca9e41e6b52093569c03bd4df"}], "stats": {"total": 94, "additions": 76, "deletions": 18}, "files": [{"sha": "3bf76539356611ee061e8a14cef163ca0e171907", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 76, "deletions": 18, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/ff3a761f79cc43f5465215ad1301ac1789d6e4df/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3a761f79cc43f5465215ad1301ac1789d6e4df/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=ff3a761f79cc43f5465215ad1301ac1789d6e4df", "patch": "@@ -852,25 +852,54 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Shl`. When `Foo << Foo` happens, it ends up\n-/// calling `shl`, and therefore, `main` prints `Shifting left!`.\n+/// An implementation of `Shl` that lifts the `<<` operation on integers to a\n+/// `Scalar` struct.\n ///\n /// ```\n /// use std::ops::Shl;\n ///\n-/// struct Foo;\n+/// #[derive(PartialEq, Debug)]\n+/// struct Scalar(usize);\n ///\n-/// impl Shl<Foo> for Foo {\n-///     type Output = Foo;\n+/// impl Shl<Scalar> for Scalar {\n+///     type Output = Self;\n ///\n-///     fn shl(self, _rhs: Foo) -> Foo {\n-///         println!(\"Shifting left!\");\n-///         self\n+///     fn shl(self, Scalar(rhs): Self) -> Scalar {\n+///         let Scalar(lhs) = self;\n+///         Scalar(lhs << rhs)\n+///     }\n+/// }\n+/// fn main() {\n+///     assert_eq!(Scalar(4) << Scalar(2), Scalar(16));\n+/// }\n+/// ```\n+///\n+/// An implementation of `Shl` that spins a vector leftward by a given amount.\n+///\n+/// ```\n+/// use std::ops::Shl;\n+///\n+/// #[derive(PartialEq, Debug)]\n+/// struct SpinVector<T: Clone> {\n+///     vec: Vec<T>,\n+/// }\n+///\n+/// impl<T: Clone> Shl<usize> for SpinVector<T> {\n+///     type Output = Self;\n+///\n+///     fn shl(self, rhs: usize) -> SpinVector<T> {\n+///         // rotate the vector by `rhs` places\n+///         let (a, b) = self.vec.split_at(rhs);\n+///         let mut spun_vector: Vec<T> = vec![];\n+///         spun_vector.extend_from_slice(b);\n+///         spun_vector.extend_from_slice(a);\n+///         SpinVector { vec: spun_vector }\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo << Foo;\n+///     assert_eq!(SpinVector { vec: vec![0, 1, 2, 3, 4] } << 2,\n+///                SpinVector { vec: vec![2, 3, 4, 0, 1] });\n /// }\n /// ```\n #[lang = \"shl\"]\n@@ -924,25 +953,54 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Shr`. When `Foo >> Foo` happens, it ends up\n-/// calling `shr`, and therefore, `main` prints `Shifting right!`.\n+/// An implementation of `Shr` that lifts the `>>` operation on integers to a\n+/// `Scalar` struct.\n ///\n /// ```\n /// use std::ops::Shr;\n ///\n-/// struct Foo;\n+/// #[derive(PartialEq, Debug)]\n+/// struct Scalar(usize);\n ///\n-/// impl Shr<Foo> for Foo {\n-///     type Output = Foo;\n+/// impl Shr<Scalar> for Scalar {\n+///     type Output = Self;\n ///\n-///     fn shr(self, _rhs: Foo) -> Foo {\n-///         println!(\"Shifting right!\");\n-///         self\n+///     fn shr(self, Scalar(rhs): Self) -> Scalar {\n+///         let Scalar(lhs) = self;\n+///         Scalar(lhs >> rhs)\n+///     }\n+/// }\n+/// fn main() {\n+///     assert_eq!(Scalar(16) >> Scalar(2), Scalar(4));\n+/// }\n+/// ```\n+///\n+/// An implementation of `Shr` that spins a vector rightward by a given amount.\n+///\n+/// ```\n+/// use std::ops::Shr;\n+///\n+/// #[derive(PartialEq, Debug)]\n+/// struct SpinVector<T: Clone> {\n+///     vec: Vec<T>,\n+/// }\n+///\n+/// impl<T: Clone> Shr<usize> for SpinVector<T> {\n+///     type Output = Self;\n+///\n+///     fn shr(self, rhs: usize) -> SpinVector<T> {\n+///         // rotate the vector by `rhs` places\n+///         let (a, b) = self.vec.split_at(self.vec.len() - rhs);\n+///         let mut spun_vector: Vec<T> = vec![];\n+///         spun_vector.extend_from_slice(b);\n+///         spun_vector.extend_from_slice(a);\n+///         SpinVector { vec: spun_vector }\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo >> Foo;\n+///     assert_eq!(SpinVector { vec: vec![0, 1, 2, 3, 4] } >> 2,\n+///                SpinVector { vec: vec![3, 4, 0, 1, 2] });\n /// }\n /// ```\n #[lang = \"shr\"]"}]}