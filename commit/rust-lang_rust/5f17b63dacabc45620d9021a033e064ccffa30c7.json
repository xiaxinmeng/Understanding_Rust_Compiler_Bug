{"sha": "5f17b63dacabc45620d9021a033e064ccffa30c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMTdiNjNkYWNhYmM0NTYyMGQ5MDIxYTAzM2UwNjRjY2ZmYTMwYzc=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-11-04T16:28:40Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-22T01:23:39Z"}, "message": "Format src/librustc_fs_util.\n\nIn total it's about 100 lines of code and has received less than 5 commits in 2019 -- a good starting point.", "tree": {"sha": "44a58ef3952da8402fadea54046ff25999476242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44a58ef3952da8402fadea54046ff25999476242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f17b63dacabc45620d9021a033e064ccffa30c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f17b63dacabc45620d9021a033e064ccffa30c7", "html_url": "https://github.com/rust-lang/rust/commit/5f17b63dacabc45620d9021a033e064ccffa30c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f17b63dacabc45620d9021a033e064ccffa30c7/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08c56295ad132c8f2153f19439462b726452e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08c56295ad132c8f2153f19439462b726452e22", "html_url": "https://github.com/rust-lang/rust/commit/a08c56295ad132c8f2153f19439462b726452e22"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "bb656891446a23b0b4e3d6b45f25b43d3e924da8", "filename": "rustfmt.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f17b63dacabc45620d9021a033e064ccffa30c7/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5f17b63dacabc45620d9021a033e064ccffa30c7/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=5f17b63dacabc45620d9021a033e064ccffa30c7", "patch": "@@ -29,7 +29,6 @@ ignore = [\n     \"src/librustc_data_structures/\",\n     \"src/librustc_driver/\",\n     \"src/librustc_errors/\",\n-    \"src/librustc_fs_util/\",\n     \"src/librustc_feature/\",\n     \"src/librustc_incremental/\",\n     \"src/librustc_index/\","}, {"sha": "289b9f30c3bbb631c67d8741f1f112104c8e0401", "filename": "src/librustc_fs_util/lib.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5f17b63dacabc45620d9021a033e064ccffa30c7/src%2Flibrustc_fs_util%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f17b63dacabc45620d9021a033e064ccffa30c7/src%2Flibrustc_fs_util%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_fs_util%2Flib.rs?ref=5f17b63dacabc45620d9021a033e064ccffa30c7", "patch": "@@ -1,7 +1,7 @@\n-use std::path::{Path, PathBuf};\n use std::ffi::CString;\n use std::fs;\n use std::io;\n+use std::path::{Path, PathBuf};\n \n // Unfortunately, on windows, it looks like msvcrt.dll is silently translating\n // verbatim paths under the hood to non-verbatim paths! This manifests itself as\n@@ -21,8 +21,8 @@ use std::io;\n //   https://github.com/rust-lang/rust/issues/25505#issuecomment-102876737\n #[cfg(windows)]\n pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n-    use std::path;\n     use std::ffi::OsString;\n+    use std::path;\n     let mut components = p.components();\n     let prefix = match components.next() {\n         Some(path::Component::Prefix(p)) => p,\n@@ -68,12 +68,10 @@ pub fn link_or_copy<P: AsRef<Path>, Q: AsRef<Path>>(p: P, q: Q) -> io::Result<Li\n \n     match fs::hard_link(p, q) {\n         Ok(()) => Ok(LinkOrCopy::Link),\n-        Err(_) => {\n-            match fs::copy(p, q) {\n-                Ok(_) => Ok(LinkOrCopy::Copy),\n-                Err(e) => Err(e),\n-            }\n-        }\n+        Err(_) => match fs::copy(p, q) {\n+            Ok(_) => Ok(LinkOrCopy::Copy),\n+            Err(e) => Err(e),\n+        },\n     }\n }\n \n@@ -86,29 +84,28 @@ pub enum RenameOrCopyRemove {\n /// Rename `p` into `q`, preferring to use `rename` if possible.\n /// If `rename` fails (rename may fail for reasons such as crossing\n /// filesystem), fallback to copy & remove\n-pub fn rename_or_copy_remove<P: AsRef<Path>, Q: AsRef<Path>>(p: P,\n-                                                             q: Q)\n-                                                             -> io::Result<RenameOrCopyRemove> {\n+pub fn rename_or_copy_remove<P: AsRef<Path>, Q: AsRef<Path>>(\n+    p: P,\n+    q: Q,\n+) -> io::Result<RenameOrCopyRemove> {\n     let p = p.as_ref();\n     let q = q.as_ref();\n     match fs::rename(p, q) {\n         Ok(()) => Ok(RenameOrCopyRemove::Rename),\n-        Err(_) => {\n-            match fs::copy(p, q) {\n-                Ok(_) => {\n-                    fs::remove_file(p)?;\n-                    Ok(RenameOrCopyRemove::CopyRemove)\n-                }\n-                Err(e) => Err(e),\n+        Err(_) => match fs::copy(p, q) {\n+            Ok(_) => {\n+                fs::remove_file(p)?;\n+                Ok(RenameOrCopyRemove::CopyRemove)\n             }\n-        }\n+            Err(e) => Err(e),\n+        },\n     }\n }\n \n #[cfg(unix)]\n pub fn path_to_c_string(p: &Path) -> CString {\n-    use std::os::unix::ffi::OsStrExt;\n     use std::ffi::OsStr;\n+    use std::os::unix::ffi::OsStrExt;\n     let p: &OsStr = p.as_ref();\n     CString::new(p.as_bytes()).unwrap()\n }"}]}