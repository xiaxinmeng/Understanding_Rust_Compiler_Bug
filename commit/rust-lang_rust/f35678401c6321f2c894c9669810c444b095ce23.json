{"sha": "f35678401c6321f2c894c9669810c444b095ce23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNTY3ODQwMWM2MzIxZjJjODk0Yzk2Njk4MTBjNDQ0YjA5NWNlMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T08:14:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T08:14:17Z"}, "message": "Auto merge of #7607 - dswij:mut-range-bound-break, r=flip1995\n\n`mut_range_bound` check for immediate break after mutation\n\ncloses #7532\n\n`mut_range_bound` ignores mutation on range bounds that is placed immediately before break. Still warns if the break is not always reachable.\n\nchangelog: [`mut_range_bound`] ignore range bound mutations before immediate break", "tree": {"sha": "dd4bf8a2d7a6d3883840bac54faaf3565090a648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4bf8a2d7a6d3883840bac54faaf3565090a648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f35678401c6321f2c894c9669810c444b095ce23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f35678401c6321f2c894c9669810c444b095ce23", "html_url": "https://github.com/rust-lang/rust/commit/f35678401c6321f2c894c9669810c444b095ce23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f35678401c6321f2c894c9669810c444b095ce23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7c25e1679e8741ec52294765bb943c298ecefd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c25e1679e8741ec52294765bb943c298ecefd7", "html_url": "https://github.com/rust-lang/rust/commit/b7c25e1679e8741ec52294765bb943c298ecefd7"}, {"sha": "dc6f7dc6bf13295d5249c7f2a9aa71024b6555ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6f7dc6bf13295d5249c7f2a9aa71024b6555ad", "html_url": "https://github.com/rust-lang/rust/commit/dc6f7dc6bf13295d5249c7f2a9aa71024b6555ad"}], "stats": {"total": 199, "additions": 158, "deletions": 41}, "files": [{"sha": "2860cb68f42f2c5bc74a371aa2a68ef2fb78209d", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f35678401c6321f2c894c9669810c444b095ce23/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35678401c6321f2c894c9669810c444b095ce23/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=f35678401c6321f2c894c9669810c444b095ce23", "patch": "@@ -397,6 +397,21 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// One might think that modifying the mutable variable changes the loop bounds\n     ///\n+    /// ### Known problems\n+    /// False positive when mutation is followed by a `break`, but the `break` is not immediately\n+    /// after the mutation:\n+    ///\n+    /// ```rust\n+    /// let mut x = 5;\n+    /// for _ in 0..x {\n+    ///     x += 1; // x is a range bound that is mutated\n+    ///     ..; // some other expression\n+    ///     break; // leaves the loop, so mutation is not an issue\n+    /// }\n+    /// ```\n+    ///\n+    /// False positive on nested loops ([#6072](https://github.com/rust-lang/rust-clippy/issues/6072))\n+    ///\n     /// ### Example\n     /// ```rust\n     /// let mut foo = 42;"}, {"sha": "358d53e8859d08d06a7b72ff565da1f0f5608118", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 77, "deletions": 21, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f35678401c6321f2c894c9669810c444b095ce23/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35678401c6321f2c894c9669810c444b095ce23/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=f35678401c6321f2c894c9669810c444b095ce23", "patch": "@@ -1,24 +1,27 @@\n use super::MUT_RANGE_BOUND;\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{higher, path_to_local};\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::{get_enclosing_block, higher, path_to_local};\n use if_chain::if_chain;\n-use rustc_hir::{BindingAnnotation, Expr, HirId, Node, PatKind};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, Node, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::hir::map::Map;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n-    if let Some(higher::Range {\n-        start: Some(start),\n-        end: Some(end),\n-        ..\n-    }) = higher::Range::hir(arg)\n-    {\n-        let mut_ids = vec![check_for_mutability(cx, start), check_for_mutability(cx, end)];\n-        if mut_ids[0].is_some() || mut_ids[1].is_some() {\n-            let (span_low, span_high) = check_for_mutation(cx, body, &mut_ids);\n+    if_chain! {\n+        if let Some(higher::Range {\n+            start: Some(start),\n+            end: Some(end),\n+            ..\n+        }) = higher::Range::hir(arg);\n+        let (mut_id_start, mut_id_end) = (check_for_mutability(cx, start), check_for_mutability(cx, end));\n+        if mut_id_start.is_some() || mut_id_end.is_some();\n+        then {\n+            let (span_low, span_high) = check_for_mutation(cx, body, mut_id_start, mut_id_end);\n             mut_warn_with_span(cx, span_low);\n             mut_warn_with_span(cx, span_high);\n         }\n@@ -27,11 +30,13 @@ pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n \n fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n     if let Some(sp) = span {\n-        span_lint(\n+        span_lint_and_note(\n             cx,\n             MUT_RANGE_BOUND,\n             sp,\n-            \"attempt to mutate range bound within loop; note that the range of the loop is unchanged\",\n+            \"attempt to mutate range bound within loop\",\n+            None,\n+            \"the range of the loop is unchanged\",\n         );\n     }\n }\n@@ -51,12 +56,13 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n fn check_for_mutation<'tcx>(\n     cx: &LateContext<'tcx>,\n     body: &Expr<'_>,\n-    bound_ids: &[Option<HirId>],\n+    bound_id_start: Option<HirId>,\n+    bound_id_end: Option<HirId>,\n ) -> (Option<Span>, Option<Span>) {\n     let mut delegate = MutatePairDelegate {\n         cx,\n-        hir_id_low: bound_ids[0],\n-        hir_id_high: bound_ids[1],\n+        hir_id_low: bound_id_start,\n+        hir_id_high: bound_id_end,\n         span_low: None,\n         span_high: None,\n     };\n@@ -70,6 +76,7 @@ fn check_for_mutation<'tcx>(\n         )\n         .walk_expr(body);\n     });\n+\n     delegate.mutation_span()\n }\n \n@@ -87,10 +94,10 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             if let PlaceBase::Local(id) = cmt.place.base {\n-                if Some(id) == self.hir_id_low {\n+                if Some(id) == self.hir_id_low && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                     self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));\n                 }\n-                if Some(id) == self.hir_id_high {\n+                if Some(id) == self.hir_id_high && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                     self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id));\n                 }\n             }\n@@ -99,10 +106,10 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n \n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n-            if Some(id) == self.hir_id_low {\n+            if Some(id) == self.hir_id_low && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                 self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));\n             }\n-            if Some(id) == self.hir_id_high {\n+            if Some(id) == self.hir_id_high && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                 self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id));\n             }\n         }\n@@ -116,3 +123,52 @@ impl MutatePairDelegate<'_, '_> {\n         (self.span_low, self.span_high)\n     }\n }\n+\n+struct BreakAfterExprVisitor {\n+    hir_id: HirId,\n+    past_expr: bool,\n+    past_candidate: bool,\n+    break_after_expr: bool,\n+}\n+\n+impl BreakAfterExprVisitor {\n+    pub fn is_found(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n+        let mut visitor = BreakAfterExprVisitor {\n+            hir_id,\n+            past_expr: false,\n+            past_candidate: false,\n+            break_after_expr: false,\n+        };\n+\n+        get_enclosing_block(cx, hir_id).map_or(false, |block| {\n+            visitor.visit_block(block);\n+            visitor.break_after_expr\n+        })\n+    }\n+}\n+\n+impl intravisit::Visitor<'tcx> for BreakAfterExprVisitor {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+        if self.past_candidate {\n+            return;\n+        }\n+\n+        if expr.hir_id == self.hir_id {\n+            self.past_expr = true;\n+        } else if self.past_expr {\n+            if matches!(&expr.kind, ExprKind::Break(..)) {\n+                self.break_after_expr = true;\n+            }\n+\n+            self.past_candidate = true;\n+        } else {\n+            intravisit::walk_expr(self, expr);\n+        }\n+    }\n+}"}, {"sha": "e1ae1ef928223bf748cd6c21c5bf2af27d962a43", "filename": "tests/ui/mut_range_bound.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f35678401c6321f2c894c9669810c444b095ce23/tests%2Fui%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35678401c6321f2c894c9669810c444b095ce23/tests%2Fui%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.rs?ref=f35678401c6321f2c894c9669810c444b095ce23", "patch": "@@ -1,14 +1,6 @@\n #![allow(unused)]\n \n-fn main() {\n-    mut_range_bound_upper();\n-    mut_range_bound_lower();\n-    mut_range_bound_both();\n-    mut_range_bound_no_mutation();\n-    immut_range_bound();\n-    mut_borrow_range_bound();\n-    immut_borrow_range_bound();\n-}\n+fn main() {}\n \n fn mut_range_bound_upper() {\n     let mut m = 4;\n@@ -61,3 +53,32 @@ fn immut_range_bound() {\n         continue;\n     } // no warning\n }\n+\n+fn mut_range_bound_break() {\n+    let mut m = 4;\n+    for i in 0..m {\n+        if m == 4 {\n+            m = 5; // no warning because of immediate break\n+            break;\n+        }\n+    }\n+}\n+\n+fn mut_range_bound_no_immediate_break() {\n+    let mut m = 4;\n+    for i in 0..m {\n+        m = 2; // warning because it is not immediately followed by break\n+        if m == 4 {\n+            break;\n+        }\n+    }\n+\n+    let mut n = 3;\n+    for i in n..10 {\n+        if n == 4 {\n+            n = 1; // FIXME: warning because is is not immediately followed by break\n+            let _ = 2;\n+            break;\n+        }\n+    }\n+}"}, {"sha": "4b5a3fc1e418cded8f6b05a5b5c80ffb162ca4e5", "filename": "tests/ui/mut_range_bound.stderr", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f35678401c6321f2c894c9669810c444b095ce23/tests%2Fui%2Fmut_range_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f35678401c6321f2c894c9669810c444b095ce23/tests%2Fui%2Fmut_range_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.stderr?ref=f35678401c6321f2c894c9669810c444b095ce23", "patch": "@@ -1,34 +1,59 @@\n-error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n-  --> $DIR/mut_range_bound.rs:16:9\n+error: attempt to mutate range bound within loop\n+  --> $DIR/mut_range_bound.rs:8:9\n    |\n LL |         m = 5;\n    |         ^\n    |\n    = note: `-D clippy::mut-range-bound` implied by `-D warnings`\n+   = note: the range of the loop is unchanged\n \n-error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n-  --> $DIR/mut_range_bound.rs:23:9\n+error: attempt to mutate range bound within loop\n+  --> $DIR/mut_range_bound.rs:15:9\n    |\n LL |         m *= 2;\n    |         ^\n+   |\n+   = note: the range of the loop is unchanged\n \n-error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n-  --> $DIR/mut_range_bound.rs:31:9\n+error: attempt to mutate range bound within loop\n+  --> $DIR/mut_range_bound.rs:23:9\n    |\n LL |         m = 5;\n    |         ^\n+   |\n+   = note: the range of the loop is unchanged\n \n-error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n-  --> $DIR/mut_range_bound.rs:32:9\n+error: attempt to mutate range bound within loop\n+  --> $DIR/mut_range_bound.rs:24:9\n    |\n LL |         n = 7;\n    |         ^\n+   |\n+   = note: the range of the loop is unchanged\n \n-error: attempt to mutate range bound within loop; note that the range of the loop is unchanged\n-  --> $DIR/mut_range_bound.rs:46:22\n+error: attempt to mutate range bound within loop\n+  --> $DIR/mut_range_bound.rs:38:22\n    |\n LL |         let n = &mut m; // warning\n    |                      ^\n+   |\n+   = note: the range of the loop is unchanged\n+\n+error: attempt to mutate range bound within loop\n+  --> $DIR/mut_range_bound.rs:70:9\n+   |\n+LL |         m = 2; // warning because it is not immediately followed by break\n+   |         ^\n+   |\n+   = note: the range of the loop is unchanged\n+\n+error: attempt to mutate range bound within loop\n+  --> $DIR/mut_range_bound.rs:79:13\n+   |\n+LL |             n = 1; // FIXME: warning because is is not immediately followed by break\n+   |             ^\n+   |\n+   = note: the range of the loop is unchanged\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}]}