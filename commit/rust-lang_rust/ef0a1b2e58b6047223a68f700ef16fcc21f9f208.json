{"sha": "ef0a1b2e58b6047223a68f700ef16fcc21f9f208", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMGExYjJlNThiNjA0NzIyM2E2OGY3MDBlZjE2ZmNjMjFmOWYyMDg=", "commit": {"author": {"name": "Aleksei Sidorov", "email": "gorthauer87@yandex.ru", "date": "2020-09-04T14:55:27Z"}, "committer": {"name": "Aleksei Sidorov", "email": "gorthauer87@yandex.ru", "date": "2020-09-04T14:55:27Z"}, "message": "Fix tests", "tree": {"sha": "da9021b468a1d7d2607c1e74556a2f4b409aaff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da9021b468a1d7d2607c1e74556a2f4b409aaff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef0a1b2e58b6047223a68f700ef16fcc21f9f208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0a1b2e58b6047223a68f700ef16fcc21f9f208", "html_url": "https://github.com/rust-lang/rust/commit/ef0a1b2e58b6047223a68f700ef16fcc21f9f208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef0a1b2e58b6047223a68f700ef16fcc21f9f208/comments", "author": {"login": "alekseysidorov", "id": 83360, "node_id": "MDQ6VXNlcjgzMzYw", "avatar_url": "https://avatars.githubusercontent.com/u/83360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekseysidorov", "html_url": "https://github.com/alekseysidorov", "followers_url": "https://api.github.com/users/alekseysidorov/followers", "following_url": "https://api.github.com/users/alekseysidorov/following{/other_user}", "gists_url": "https://api.github.com/users/alekseysidorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekseysidorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekseysidorov/subscriptions", "organizations_url": "https://api.github.com/users/alekseysidorov/orgs", "repos_url": "https://api.github.com/users/alekseysidorov/repos", "events_url": "https://api.github.com/users/alekseysidorov/events{/privacy}", "received_events_url": "https://api.github.com/users/alekseysidorov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alekseysidorov", "id": 83360, "node_id": "MDQ6VXNlcjgzMzYw", "avatar_url": "https://avatars.githubusercontent.com/u/83360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekseysidorov", "html_url": "https://github.com/alekseysidorov", "followers_url": "https://api.github.com/users/alekseysidorov/followers", "following_url": "https://api.github.com/users/alekseysidorov/following{/other_user}", "gists_url": "https://api.github.com/users/alekseysidorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekseysidorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekseysidorov/subscriptions", "organizations_url": "https://api.github.com/users/alekseysidorov/orgs", "repos_url": "https://api.github.com/users/alekseysidorov/repos", "events_url": "https://api.github.com/users/alekseysidorov/events{/privacy}", "received_events_url": "https://api.github.com/users/alekseysidorov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c060c8d0fa3d7f7ad27f56be8298e5f9759c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c060c8d0fa3d7f7ad27f56be8298e5f9759c95", "html_url": "https://github.com/rust-lang/rust/commit/a1c060c8d0fa3d7f7ad27f56be8298e5f9759c95"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "748c528d45acb263c73b28391b818d866ba8c2f9", "filename": "crates/assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ef0a1b2e58b6047223a68f700ef16fcc21f9f208/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0a1b2e58b6047223a68f700ef16fcc21f9f208/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=ef0a1b2e58b6047223a68f700ef16fcc21f9f208", "patch": "@@ -7,11 +7,11 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Replaces `impl Trait` function argument with the named generic.\n //\n // ```\n-// fn foo<G>(bar: <|>impl Bar) {}\n+// fn foo(bar: <|>impl Bar) {}\n // ```\n // ->\n // ```\n-// fn foo<B: Bar>(bar: B) {}\n+// fn foo<B: Bar,>(bar: B) {}\n // ```\n pub(crate) fn replace_impl_trait_with_generic(\n     acc: &mut Assists,\n@@ -21,21 +21,15 @@ pub(crate) fn replace_impl_trait_with_generic(\n     let type_param = type_impl_trait.syntax().parent().and_then(ast::Param::cast)?;\n     let type_fn = type_param.syntax().ancestors().find_map(ast::Fn::cast)?;\n \n-    let impl_trait_ty = type_impl_trait\n-        .syntax()\n-        .descendants()\n-        .last()\n-        .and_then(ast::NameRef::cast)?\n-        .text()\n-        .to_string();\n+    let impl_trait_ty = type_impl_trait.type_bound_list()?;\n \n     let target = type_fn.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_impl_trait_with_generic\", AssistKind::RefactorRewrite),\n         \"Replace impl trait with generic\",\n         target,\n         |edit| {\n-            let generic_letter = impl_trait_ty.chars().next().unwrap().to_string();\n+            let generic_letter = impl_trait_ty.to_string().chars().next().unwrap().to_string();\n \n             let generic_param_list = type_fn\n                 .generic_param_list()\n@@ -65,7 +59,7 @@ mod tests {\n             fn foo<G>(bar: <|>impl Bar) {}\n             \"#,\n             r#\"\n-            fn foo<G, B: Bar>(bar: B) {}\n+            fn foo<G, B: Bar,>(bar: B) {}\n             \"#,\n         );\n     }\n@@ -78,7 +72,7 @@ mod tests {\n             fn foo(bar: <|>impl Bar) {}\n             \"#,\n             r#\"\n-            fn foo<B: Bar>(bar: B) {}\n+            fn foo<B: Bar,>(bar: B) {}\n             \"#,\n         );\n     }\n@@ -91,7 +85,7 @@ mod tests {\n             fn foo<G>(foo: impl Foo, bar: <|>impl Bar) {}\n             \"#,\n             r#\"\n-            fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\n+            fn foo<G, B: Bar,>(foo: impl Foo, bar: B) {}\n             \"#,\n         );\n     }\n@@ -104,7 +98,7 @@ mod tests {\n             fn foo<>(bar: <|>impl Bar) {}\n             \"#,\n             r#\"\n-            fn foo<B: Bar>(bar: B) {}\n+            fn foo<B: Bar,>(bar: B) {}\n             \"#,\n         );\n     }\n@@ -133,7 +127,7 @@ mod tests {\n             fn foo<B>(bar: <|>impl Bar) {}\n             \"#,\n             r#\"\n-            fn foo<B, C: Bar>(bar: C) {}\n+            fn foo<B, C: Bar,>(bar: C) {}\n             \"#,\n         );\n     }\n@@ -158,4 +152,17 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn replace_impl_trait_multiple() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo(bar: <|>impl Foo + Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<F: Foo + Bar,>(bar: F) {}\n+            \"#,\n+        );\n+    }\n }"}, {"sha": "4e5ca38251b5ed25907728ca02ee1ddb461304f3", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef0a1b2e58b6047223a68f700ef16fcc21f9f208/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0a1b2e58b6047223a68f700ef16fcc21f9f208/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ef0a1b2e58b6047223a68f700ef16fcc21f9f208", "patch": "@@ -819,10 +819,10 @@ fn doctest_replace_impl_trait_with_generic() {\n     check_doc_test(\n         \"replace_impl_trait_with_generic\",\n         r#####\"\n-fn foo<G>(bar: <|>impl Bar) {}\n+fn foo(bar: <|>impl Bar) {}\n \"#####,\n         r#####\"\n-fn foo<B: Bar>(bar: B) {}\n+fn foo<B: Bar,>(bar: B) {}\n \"#####,\n     )\n }"}, {"sha": "dac4174cd96a23b03fd42ea0b1084a5f590879a3", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0a1b2e58b6047223a68f700ef16fcc21f9f208/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0a1b2e58b6047223a68f700ef16fcc21f9f208/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=ef0a1b2e58b6047223a68f700ef16fcc21f9f208", "patch": "@@ -294,7 +294,7 @@ pub fn param_list(pats: impl IntoIterator<Item = ast::Param>) -> ast::ParamList\n     ast_from_text(&format!(\"fn f({}) {{ }}\", args))\n }\n \n-pub fn generic_param(name: String, ty: Option<String>) -> ast::GenericParam {\n+pub fn generic_param(name: String, ty: Option<ast::TypeBoundList>) -> ast::GenericParam {\n     let bound = match ty {\n         Some(it) => format!(\": {}\", it),\n         None => String::new(),"}]}