{"sha": "19f08c200e25ac7c9029594476a382b2bf82e00a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZjA4YzIwMGUyNWFjN2M5MDI5NTk0NDc2YTM4MmIyYmY4MmUwMGE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-04T15:08:15Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-06T18:13:46Z"}, "message": "Make block_in_if_condition auto applicable", "tree": {"sha": "c9debc964f95f93e27e64d9747c3cf68bb3c4deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9debc964f95f93e27e64d9747c3cf68bb3c4deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19f08c200e25ac7c9029594476a382b2bf82e00a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl48V1oACgkQaTCGhp1Q\nZjekXw/+LapVmw4X8Nxer2T3Ef7+8dRplXUKhmrFRTPeui1fLBVeS2Xa0tYu7DHp\nMydwazooG1vjm1M7gxXaxrsq35dhWW3HIsdl8RULe3qLzgnClit6kIov3gS8OuZa\nNZua+R5VySFmZYRw0+trtyk8kNzOd4iOTImJPz09jyu0HGBJ5SRM7ezlfUOaKpXV\n51wMa1uq8lnUH/KpsexEQDRKa7GWA2Nw9h6ayJWbywzDVReEmg9dJsbgcngtmos3\n0I+CjXL/QiDcJYOVkTuwpTuaOU/18FG0w8TpcSuV9pk68mMi8mjnqkjWw3wm6Dtq\nQC3Q8MG6QWUAoLrJVuTGOpB6FaG2jh0uym7lT4HBtYPsTFdznWDuKZLFmDJ15NTE\nfKKw5qzxugBQQrQa5oQvTRQerGUO4uausjxh2A+0/UhA24YWVtoVlm4PT8wLceYO\nkb6C2s6H7gHWZgKCTVRafRdv95dEPgjYniB6SpRq21glQ1l5ApzAi4bhDdZsVozD\nabsxy6TQmXdP3hiFQhrgVj5/t/C+hB1LG6bxl+CdHPB4ejlmFa3me8UJU9J6/hva\n1NUbJhrO8Ad1uUEy0d5lxXhe61nF0qO9ZEHMLb7zFJS96V+6yl/Hc2aneSklu0g/\n66J4OjX0BK3GmDQAepJdZ1kUx8v6ALOsr9WpKhDAPN9hjUbiQ8I=\n=qxGD\n-----END PGP SIGNATURE-----", "payload": "tree c9debc964f95f93e27e64d9747c3cf68bb3c4deb\nparent 5fd22b3f93f6a23ff70024e27f4a13a41b610dfa\nauthor flip1995 <hello@philkrones.com> 1580828895 +0100\ncommitter flip1995 <hello@philkrones.com> 1581012826 +0100\n\nMake block_in_if_condition auto applicable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19f08c200e25ac7c9029594476a382b2bf82e00a", "html_url": "https://github.com/rust-lang/rust/commit/19f08c200e25ac7c9029594476a382b2bf82e00a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19f08c200e25ac7c9029594476a382b2bf82e00a/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd22b3f93f6a23ff70024e27f4a13a41b610dfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd22b3f93f6a23ff70024e27f4a13a41b610dfa", "html_url": "https://github.com/rust-lang/rust/commit/5fd22b3f93f6a23ff70024e27f4a13a41b610dfa"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "325e12617142c7e76e1cd2631edfe2a20cab88f4", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/19f08c200e25ac7c9029594476a382b2bf82e00a/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f08c200e25ac7c9029594476a382b2bf82e00a/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=19f08c200e25ac7c9029594476a382b2bf82e00a", "patch": "@@ -2,6 +2,7 @@ use crate::utils::*;\n use matches::matches;\n use rustc::hir::map::Map;\n use rustc::lint::in_external_macro;\n+use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -79,8 +80,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n-        if let Some((check, then, _)) = higher::if_block(&expr) {\n-            if let ExprKind::Block(block, _) = &check.kind {\n+        if let Some((cond, _, _)) = higher::if_block(&expr) {\n+            if let ExprKind::Block(block, _) = &cond.kind {\n                 if block.rules == BlockCheckMode::DefaultBlock {\n                     if block.stmts.is_empty() {\n                         if let Some(ex) = &block.expr {\n@@ -89,16 +90,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                             if expr.span.from_expansion() || differing_macro_contexts(expr.span, ex.span) {\n                                 return;\n                             }\n-                            span_lint_and_help(\n+                            let mut applicability = Applicability::MachineApplicable;\n+                            span_lint_and_sugg(\n                                 cx,\n                                 BLOCK_IN_IF_CONDITION_EXPR,\n-                                check.span,\n+                                cond.span,\n                                 BRACED_EXPR_MESSAGE,\n-                                &format!(\n-                                    \"try\\nif {} {} ... \",\n-                                    snippet_block(cx, ex.span, \"..\"),\n-                                    snippet_block(cx, then.span, \"..\")\n+                                \"try\",\n+                                format!(\n+                                    \"{}\",\n+                                    snippet_block_with_applicability(\n+                                        cx,\n+                                        ex.span,\n+                                        \"..\",\n+                                        Some(expr.span),\n+                                        &mut applicability\n+                                    )\n                                 ),\n+                                applicability,\n                             );\n                         }\n                     } else {\n@@ -107,22 +116,30 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                             return;\n                         }\n                         // move block higher\n-                        span_lint_and_help(\n+                        let mut applicability = Applicability::MachineApplicable;\n+                        span_lint_and_sugg(\n                             cx,\n                             BLOCK_IN_IF_CONDITION_STMT,\n-                            check.span,\n+                            expr.span.with_hi(cond.span.hi()),\n                             COMPLEX_BLOCK_MESSAGE,\n-                            &format!(\n-                                \"try\\nlet res = {};\\nif res {} ... \",\n-                                snippet_block(cx, block.span, \"..\"),\n-                                snippet_block(cx, then.span, \"..\")\n+                            \"try\",\n+                            format!(\n+                                \"let res = {}; if res\",\n+                                snippet_block_with_applicability(\n+                                    cx,\n+                                    block.span,\n+                                    \"..\",\n+                                    Some(expr.span),\n+                                    &mut applicability\n+                                ),\n                             ),\n+                            applicability,\n                         );\n                     }\n                 }\n             } else {\n                 let mut visitor = ExVisitor { found_block: None, cx };\n-                walk_expr(&mut visitor, check);\n+                walk_expr(&mut visitor, cond);\n                 if let Some(block) = visitor.found_block {\n                     span_lint(cx, BLOCK_IN_IF_CONDITION_STMT, block.span, COMPLEX_BLOCK_MESSAGE);\n                 }"}]}