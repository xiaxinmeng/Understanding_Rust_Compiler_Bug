{"sha": "f49f38871389041671cc710a044e8360091840a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OWYzODg3MTM4OTA0MTY3MWNjNzEwYTA0NGU4MzYwMDkxODQwYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-04T02:30:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-04T02:30:45Z"}, "message": "Auto merge of #65838 - estebank:resilient-recovery, r=Centril\n\nReduce amount of errors given unclosed delimiter\n\nWhen in a file with a non-terminated item, catch the error and consume\nthe block instead of trying to recover it on a more granular way in order to\nreduce the amount of unrelated errors that would be fixed after adding\nthe missing closing brace. Also point out the possible location of the\nmissing closing brace.\n\nFix #63690.", "tree": {"sha": "ad7ea355839acdbf19ec6cc9f3af8b1cb12e864e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad7ea355839acdbf19ec6cc9f3af8b1cb12e864e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f49f38871389041671cc710a044e8360091840a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f49f38871389041671cc710a044e8360091840a3", "html_url": "https://github.com/rust-lang/rust/commit/f49f38871389041671cc710a044e8360091840a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f49f38871389041671cc710a044e8360091840a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5264a03c2d873d9e23a22def748b9c6937c537", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5264a03c2d873d9e23a22def748b9c6937c537", "html_url": "https://github.com/rust-lang/rust/commit/0d5264a03c2d873d9e23a22def748b9c6937c537"}, {"sha": "454e2aa8c99850c9393fb2314e1a71da08120063", "url": "https://api.github.com/repos/rust-lang/rust/commits/454e2aa8c99850c9393fb2314e1a71da08120063", "html_url": "https://github.com/rust-lang/rust/commit/454e2aa8c99850c9393fb2314e1a71da08120063"}], "stats": {"total": 446, "additions": 293, "deletions": 153}, "files": [{"sha": "c5f830c0d042054d04a4d8769bf9f429d2bb887a", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -424,7 +424,7 @@ impl cstore::CStore {\n         let source_file = sess.parse_sess.source_map().new_source_file(source_name, def.body);\n         let local_span = Span::with_root_ctxt(source_file.start_pos, source_file.end_pos);\n         let (body, mut errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n-        emit_unclosed_delims(&mut errors, &sess.diagnostic());\n+        emit_unclosed_delims(&mut errors, &sess.parse_sess);\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index, sess);"}, {"sha": "660047190608de5cf8813816f310a15966e72af2", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -154,6 +154,14 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n }\n \n fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n+    let sp = tcx.hir().krate().span;\n+    if *tcx.sess.parse_sess.reached_eof.borrow() {\n+        // There's an unclosed brace that made the parser reach `Eof`, we shouldn't complain about\n+        // the missing `fn main()` then as it might have been hidden inside an unclosed block.\n+        tcx.sess.delay_span_bug(sp, \"`main` not found, but expected unclosed brace error\");\n+        return;\n+    }\n+\n     // There is no main function.\n     let mut err = struct_err!(tcx.sess, E0601,\n         \"`main` function not found in crate `{}`\", tcx.crate_name(LOCAL_CRATE));\n@@ -173,7 +181,6 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     } else {\n         String::from(\"consider adding a `main` function at the crate level\")\n     };\n-    let sp = tcx.hir().krate().span;\n     // The file may be empty, which leads to the diagnostic machinery not emitting this\n     // note. This is a relatively simple way to detect that case and emit a span-less\n     // note instead."}, {"sha": "48cf117f65ae63c98be22738051c4e3793fe5100", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -23,7 +23,7 @@ mod unicode_chars;\n #[derive(Clone, Debug)]\n pub struct UnmatchedBrace {\n     pub expected_delim: token::DelimToken,\n-    pub found_delim: token::DelimToken,\n+    pub found_delim: Option<token::DelimToken>,\n     pub found_span: Span,\n     pub unclosed_span: Option<Span>,\n     pub candidate_span: Option<Span>,"}, {"sha": "de8ac2c71e818a5f0af1579fc1d8ac1627913fa1", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -80,6 +80,13 @@ impl<'a> TokenTreesReader<'a> {\n                     .struct_span_err(self.token.span, msg);\n                 for &(_, sp) in &self.open_braces {\n                     err.span_label(sp, \"un-closed delimiter\");\n+                    self.unmatched_braces.push(UnmatchedBrace {\n+                        expected_delim: token::DelimToken::Brace,\n+                        found_delim: None,\n+                        found_span: self.token.span,\n+                        unclosed_span: Some(sp),\n+                        candidate_span: None,\n+                    });\n                 }\n \n                 if let Some((delim, _)) = self.open_braces.last() {\n@@ -170,7 +177,7 @@ impl<'a> TokenTreesReader<'a> {\n                             let (tok, _) = self.open_braces.pop().unwrap();\n                             self.unmatched_braces.push(UnmatchedBrace {\n                                 expected_delim: tok,\n-                                found_delim: other,\n+                                found_delim: Some(other),\n                                 found_span: self.token.span,\n                                 unclosed_span: unclosed_delimiter,\n                                 candidate_span: candidate,"}, {"sha": "6d8ecdf805b01a15e8a8a31252f9e244d3268301", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -1,7 +1,7 @@\n //! The main parser interface.\n \n use crate::ast;\n-use crate::parse::parser::{Parser, emit_unclosed_delims};\n+use crate::parse::parser::{Parser, emit_unclosed_delims, make_unclosed_delims_error};\n use crate::parse::token::Nonterminal;\n use crate::tokenstream::{self, TokenStream, TokenTree};\n use crate::print::pprust;\n@@ -108,7 +108,7 @@ pub fn parse_stream_from_source_str(\n         sess.source_map().new_source_file(name, source),\n         override_span,\n     );\n-    emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n+    emit_unclosed_delims(&mut errors, &sess);\n     stream\n }\n \n@@ -242,18 +242,9 @@ pub fn maybe_file_to_stream(\n             err.buffer(&mut buffer);\n             // Not using `emit_unclosed_delims` to use `db.buffer`\n             for unmatched in unmatched_braces {\n-                let mut db = sess.span_diagnostic.struct_span_err(unmatched.found_span, &format!(\n-                    \"incorrect close delimiter: `{}`\",\n-                    pprust::token_kind_to_string(&token::CloseDelim(unmatched.found_delim)),\n-                ));\n-                db.span_label(unmatched.found_span, \"incorrect close delimiter\");\n-                if let Some(sp) = unmatched.candidate_span {\n-                    db.span_label(sp, \"close delimiter possibly meant for this\");\n+                if let Some(err) = make_unclosed_delims_error(unmatched, &sess) {\n+                    err.buffer(&mut buffer);\n                 }\n-                if let Some(sp) = unmatched.unclosed_span {\n-                    db.span_label(sp, \"un-closed delimiter\");\n-                }\n-                db.buffer(&mut buffer);\n             }\n             Err(buffer)\n         }"}, {"sha": "e81d4573b73e5b253c6b1931b6185c7321dc2062", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -27,7 +27,7 @@ use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::ThinVec;\n \n-use errors::{Applicability, DiagnosticId, FatalError};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n use log::debug;\n@@ -148,8 +148,7 @@ pub struct Parser<'a> {\n \n impl<'a> Drop for Parser<'a> {\n     fn drop(&mut self) {\n-        let diag = self.diagnostic();\n-        emit_unclosed_delims(&mut self.unclosed_delims, diag);\n+        emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);\n     }\n }\n \n@@ -1370,20 +1369,31 @@ impl<'a> Parser<'a> {\n     }\n }\n \n-pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, handler: &errors::Handler) {\n-    for unmatched in unclosed_delims.iter() {\n-        let mut err = handler.struct_span_err(unmatched.found_span, &format!(\n-            \"incorrect close delimiter: `{}`\",\n-            pprust::token_kind_to_string(&token::CloseDelim(unmatched.found_delim)),\n-        ));\n-        err.span_label(unmatched.found_span, \"incorrect close delimiter\");\n-        if let Some(sp) = unmatched.candidate_span {\n-            err.span_label(sp, \"close delimiter possibly meant for this\");\n-        }\n-        if let Some(sp) = unmatched.unclosed_span {\n-            err.span_label(sp, \"un-closed delimiter\");\n-        }\n-        err.emit();\n+crate fn make_unclosed_delims_error(\n+    unmatched: UnmatchedBrace,\n+    sess: &ParseSess,\n+) -> Option<DiagnosticBuilder<'_>> {\n+    // `None` here means an `Eof` was found. We already emit those errors elsewhere, we add them to\n+    // `unmatched_braces` only for error recovery in the `Parser`.\n+    let found_delim = unmatched.found_delim?;\n+    let mut err = sess.span_diagnostic.struct_span_err(unmatched.found_span, &format!(\n+        \"incorrect close delimiter: `{}`\",\n+        pprust::token_kind_to_string(&token::CloseDelim(found_delim)),\n+    ));\n+    err.span_label(unmatched.found_span, \"incorrect close delimiter\");\n+    if let Some(sp) = unmatched.candidate_span {\n+        err.span_label(sp, \"close delimiter possibly meant for this\");\n+    }\n+    if let Some(sp) = unmatched.unclosed_span {\n+        err.span_label(sp, \"un-closed delimiter\");\n+    }\n+    Some(err)\n+}\n+\n+pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {\n+    *sess.reached_eof.borrow_mut() |= unclosed_delims.iter()\n+        .any(|unmatched_delim| unmatched_delim.found_delim.is_none());\n+    for unmatched in unclosed_delims.drain(..) {\n+        make_unclosed_delims_error(unmatched, sess).map(|mut e| e.emit());\n     }\n-    unclosed_delims.clear();\n }"}, {"sha": "fcf3b4c0aa891a30def8b3043951369d25539db5", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -171,6 +171,12 @@ impl RecoverQPath for Expr {\n     }\n }\n \n+/// Control whether the closing delimiter should be consumed when calling `Parser::consume_block`.\n+crate enum ConsumeClosingDelim {\n+    Yes,\n+    No,\n+}\n+\n impl<'a> Parser<'a> {\n     pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n         self.span_fatal(self.token.span, m)\n@@ -1105,8 +1111,8 @@ impl<'a> Parser<'a> {\n             Ok(x) => x,\n             Err(mut err) => {\n                 err.emit();\n-                // Recover from parse error.\n-                self.consume_block(delim);\n+                // Recover from parse error, callers expect the closing delim to be consumed.\n+                self.consume_block(delim, ConsumeClosingDelim::Yes);\n                 self.mk_expr(lo.to(self.prev_span), ExprKind::Err, ThinVec::new())\n             }\n         }\n@@ -1135,6 +1141,11 @@ impl<'a> Parser<'a> {\n                  // Don't attempt to recover from this unclosed delimiter more than once.\n                 let unmatched = self.unclosed_delims.remove(pos);\n                 let delim = TokenType::Token(token::CloseDelim(unmatched.expected_delim));\n+                if unmatched.found_delim.is_none() {\n+                    // We encountered `Eof`, set this fact here to avoid complaining about missing\n+                    // `fn main()` when we found place to suggest the closing brace.\n+                    *self.sess.reached_eof.borrow_mut() = true;\n+                }\n \n                 // We want to suggest the inclusion of the closing delimiter where it makes\n                 // the most sense, which is immediately after the last token:\n@@ -1154,17 +1165,29 @@ impl<'a> Parser<'a> {\n                     delim.to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n-                err.emit();\n-                self.expected_tokens.clear();  // reduce errors\n-                Ok(true)\n+                if unmatched.found_delim.is_none() {\n+                    // Encountered `Eof` when lexing blocks. Do not recover here to avoid knockdown\n+                    // errors which would be emitted elsewhere in the parser and let other error\n+                    // recovery consume the rest of the file.\n+                    Err(err)\n+                } else {\n+                    err.emit();\n+                    self.expected_tokens.clear();  // Reduce the number of errors.\n+                    Ok(true)\n+                }\n             }\n             _ => Err(err),\n         }\n     }\n \n     /// Recovers from `pub` keyword in places where it seems _reasonable_ but isn't valid.\n     pub(super) fn eat_bad_pub(&mut self) {\n-        if self.token.is_keyword(kw::Pub) {\n+        // When `unclosed_delims` is populated, it means that the code being parsed is already\n+        // quite malformed, which might mean that, for example, a pub struct definition could be\n+        // parsed as being a trait item, which is invalid and this error would trigger\n+        // unconditionally, resulting in misleading diagnostics. Because of this, we only attempt\n+        // this nice to have recovery for code that is otherwise well formed.\n+        if self.token.is_keyword(kw::Pub) && self.unclosed_delims.is_empty() {\n             match self.parse_visibility(false) {\n                 Ok(vis) => {\n                     self.diagnostic()\n@@ -1422,15 +1445,26 @@ impl<'a> Parser<'a> {\n         Ok(param)\n     }\n \n-    pub(super) fn consume_block(&mut self, delim: token::DelimToken) {\n+    pub(super) fn consume_block(\n+        &mut self,\n+        delim: token::DelimToken,\n+        consume_close: ConsumeClosingDelim,\n+    ) {\n         let mut brace_depth = 0;\n         loop {\n             if self.eat(&token::OpenDelim(delim)) {\n                 brace_depth += 1;\n-            } else if self.eat(&token::CloseDelim(delim)) {\n+            } else if self.check(&token::CloseDelim(delim)) {\n                 if brace_depth == 0 {\n+                    if let ConsumeClosingDelim::Yes = consume_close {\n+                        // Some of the callers of this method expect to be able to parse the\n+                        // closing delimiter themselves, so we leave it alone. Otherwise we advance\n+                        // the parser.\n+                        self.bump();\n+                    }\n                     return;\n                 } else {\n+                    self.bump();\n                     brace_depth -= 1;\n                     continue;\n                 }"}, {"sha": "5b60e7e6dba055cae6f82a4e75f89a7a90cc0d1f", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -1,5 +1,5 @@\n-use super::{Parser, PResult, PathStyle, SemiColonMode, BlockMode};\n-use super::diagnostics::{Error, dummy_arg};\n+use super::{Parser, PResult, PathStyle};\n+use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n use crate::ptr::P;\n@@ -339,7 +339,7 @@ impl<'a> Parser<'a> {\n                 let ident = self.parse_ident().unwrap();\n                 self.bump();  // `(`\n                 let kw_name = self.recover_first_param();\n-                self.consume_block(token::Paren);\n+                self.consume_block(token::Paren, ConsumeClosingDelim::Yes);\n                 let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) {\n                     self.eat_to_tokens(&[&token::OpenDelim(token::Brace)]);\n                     self.bump();  // `{`\n@@ -357,7 +357,7 @@ impl<'a> Parser<'a> {\n                 let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n                 let mut err = self.diagnostic().struct_span_err(sp, &msg);\n                 if !ambiguous {\n-                    self.consume_block(token::Brace);\n+                    self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n                     let suggestion = format!(\"add `{}` here to parse `{}` as a public {}\",\n                                              kw,\n                                              ident,\n@@ -672,7 +672,8 @@ impl<'a> Parser<'a> {\n                 Err(mut err) => {\n                     err.emit();\n                     if !at_end {\n-                        self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n+                        self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n+                        break;\n                     }\n                 }\n             }\n@@ -861,7 +862,8 @@ impl<'a> Parser<'a> {\n                     Err(mut e) => {\n                         e.emit();\n                         if !at_end {\n-                            self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n+                            self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n+                            break;\n                         }\n                     }\n                 }\n@@ -1520,14 +1522,15 @@ impl<'a> Parser<'a> {\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n                 let field = self.parse_struct_decl_field().map_err(|e| {\n-                    self.recover_stmt();\n+                    self.consume_block(token::Brace, ConsumeClosingDelim::No);\n                     recovered = true;\n                     e\n                 });\n                 match field {\n                     Ok(field) => fields.push(field),\n                     Err(mut err) => {\n                         err.emit();\n+                        break;\n                     }\n                 }\n             }"}, {"sha": "323fe01f067efbf35b7a4e22ba801318f4d5e497", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -73,6 +73,8 @@ pub struct ParseSess {\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n     pub injected_crate_name: Once<Symbol>,\n     crate gated_spans: GatedSpans,\n+    /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n+    pub reached_eof: Lock<bool>,\n }\n \n impl ParseSess {\n@@ -101,6 +103,7 @@ impl ParseSess {\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             injected_crate_name: Once::new(),\n             gated_spans: GatedSpans::default(),\n+            reached_eof: Lock::new(false),\n         }\n     }\n "}, {"sha": "b3c1f60b7ebf6f0704f261208667aa3bbaf91c7e", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -1,16 +1,30 @@\n-impl dyn X { //~ ERROR cannot be made into an object\n-//~^ ERROR missing\n+impl dyn A { //~ ERROR missing\n     Y\n }\n \n struct S;\n \n trait X { //~ ERROR missing\n     X() {}\n-    fn xxx() { ### } //~ ERROR missing\n-    //~^ ERROR expected\n-    L = M; //~ ERROR missing\n-    Z = { 2 + 3 }; //~ ERROR expected one of\n+    fn xxx() { ### }\n+    L = M;\n+    Z = { 2 + 3 };\n+    ::Y ();\n+}\n+\n+trait A { //~ ERROR missing\n+    X() {}\n+}\n+trait B {\n+    fn xxx() { ### } //~ ERROR expected\n+}\n+trait C { //~ ERROR missing `fn`, `type`, or `const` for trait-item declaration\n+    L = M;\n+}\n+trait D { //~ ERROR missing `fn`, `type`, or `const` for trait-item declaration\n+    Z = { 2 + 3 };\n+}\n+trait E {\n     ::Y (); //~ ERROR expected one of\n }\n \n@@ -21,5 +35,5 @@ impl S {\n }\n \n fn main() {\n-    S.hello_method();\n+    S.hello_method(); //~ no method named `hello_method` found for type `S` in the current scope\n }"}, {"sha": "f0baa175d63b7d5bd1a35512de386f0ed284fdba", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -1,70 +1,70 @@\n error: missing `fn`, `type`, or `const` for impl-item declaration\n   --> $DIR/issue-40006.rs:1:13\n    |\n-LL |   impl dyn X {\n+LL |   impl dyn A {\n    |  _____________^\n-LL | |\n LL | |     Y\n    | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:8:10\n+  --> $DIR/issue-40006.rs:7:10\n    |\n LL |   trait X {\n    |  __________^\n LL | |     X() {}\n    | |____^ missing `fn`, `type`, or `const`\n \n+error: missing `fn`, `type`, or `const` for trait-item declaration\n+  --> $DIR/issue-40006.rs:15:10\n+   |\n+LL |   trait A {\n+   |  __________^\n+LL | |     X() {}\n+   | |____^ missing `fn`, `type`, or `const`\n+\n error: expected `[`, found `#`\n-  --> $DIR/issue-40006.rs:10:17\n+  --> $DIR/issue-40006.rs:19:17\n    |\n LL |     fn xxx() { ### }\n    |                 ^ expected `[`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:10:21\n+  --> $DIR/issue-40006.rs:21:10\n    |\n-LL |       fn xxx() { ### }\n-   |  _____________________^\n-LL | |\n+LL |   trait C {\n+   |  __________^\n LL | |     L = M;\n    | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:12:11\n+  --> $DIR/issue-40006.rs:24:10\n    |\n-LL |       L = M;\n-   |  ___________^\n+LL |   trait D {\n+   |  __________^\n LL | |     Z = { 2 + 3 };\n    | |____^ missing `fn`, `type`, or `const`\n \n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n-  --> $DIR/issue-40006.rs:13:18\n-   |\n-LL |     Z = { 2 + 3 };\n-   |                  ^ expected one of 7 possible tokens here\n-\n error: expected one of `!` or `::`, found `(`\n-  --> $DIR/issue-40006.rs:14:9\n+  --> $DIR/issue-40006.rs:28:9\n    |\n LL |     ::Y ();\n    |         ^ expected one of `!` or `::` here\n \n error: missing `fn`, `type`, or `const` for impl-item declaration\n-  --> $DIR/issue-40006.rs:18:8\n+  --> $DIR/issue-40006.rs:32:8\n    |\n LL |     pub hello_method(&self) {\n    |        ^ missing `fn`, `type`, or `const`\n \n-error[E0038]: the trait `X` cannot be made into an object\n-  --> $DIR/issue-40006.rs:1:6\n+error[E0599]: no method named `hello_method` found for type `S` in the current scope\n+  --> $DIR/issue-40006.rs:38:7\n    |\n-LL | impl dyn X {\n-   |      ^^^^^ the trait `X` cannot be made into an object\n+LL | struct S;\n+   | --------- method `hello_method` not found for this\n ...\n-LL |     fn xxx() { ### }\n-   |        --- associated function `xxx` has no `self` parameter\n+LL |     S.hello_method();\n+   |       ^^^^^^^^^^^^ method not found in `S`\n \n error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0038`.\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "1f53a92793236f82808a1b9bcba3cf2c32cb8fcd", "filename": "src/test/ui/issues/issue-60075.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -5,8 +5,7 @@ trait T {\n         let _ = if true {\n         });\n //~^ ERROR expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n-//~^^ ERROR expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n-//~^^^ ERROR 6:11: 6:12: expected identifier, found `;`\n-//~^^^^ ERROR missing `fn`, `type`, or `const` for trait-item declaration\n+//~| ERROR expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n+//~| ERROR expected identifier, found `;`\n         Some(4)\n     }"}, {"sha": "961a546d8d6204aa53a9886ad6aa0015fead95b5", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -19,17 +19,5 @@ error: expected identifier, found `;`\n LL |         });\n    |           ^ expected identifier\n \n-error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-60075.rs:6:12\n-   |\n-LL |           });\n-   |  ____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         Some(4)\n-   | |________^ missing `fn`, `type`, or `const`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "21d36048e6703f0b62e4d0a86402f5a487e275c9", "filename": "src/test/ui/parser-recovery-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -3,7 +3,6 @@\n // Test that we can recover from missing braces in the parser.\n \n trait Foo {\n-//~^ ERROR `main` function not found\n     fn bar() {\n         let x = foo();\n         //~^ ERROR cannot find function `foo` in this scope"}, {"sha": "83f8ef63c99548219b3e09cc66d4fb36056f78bc", "filename": "src/test/ui/parser-recovery-1.stderr", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.stderr?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -1,9 +1,8 @@\n error: this file contains an un-closed delimiter\n-  --> $DIR/parser-recovery-1.rs:16:55\n+  --> $DIR/parser-recovery-1.rs:15:55\n    |\n LL | trait Foo {\n    |           - un-closed delimiter\n-LL |\n LL |     fn bar() {\n    |              - this delimiter might not be properly closed...\n ...\n@@ -14,36 +13,23 @@ LL | }\n    |                                                       ^\n \n error: unexpected token: `;`\n-  --> $DIR/parser-recovery-1.rs:13:15\n+  --> $DIR/parser-recovery-1.rs:12:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-1.rs:8:17\n+  --> $DIR/parser-recovery-1.rs:7:17\n    |\n LL |         let x = foo();\n    |                 ^^^ not found in this scope\n \n error[E0425]: cannot find value `y` in this scope\n-  --> $DIR/parser-recovery-1.rs:13:13\n+  --> $DIR/parser-recovery-1.rs:12:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope\n \n-error[E0601]: `main` function not found in crate `parser_recovery_1`\n-  --> $DIR/parser-recovery-1.rs:5:1\n-   |\n-LL | / trait Foo {\n-LL | |\n-LL | |     fn bar() {\n-LL | |         let x = foo();\n-...  |\n-LL | |\n-LL | | }\n-   | |______________________________________________________^ consider adding a `main` function to `$DIR/parser-recovery-1.rs`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0425, E0601.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "c4fc471618283a0087cad9d763a623ec084dda8f", "filename": "src/test/ui/parser/issue-2354.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -1,7 +1,4 @@\n fn foo() { //~ NOTE un-closed delimiter\n-//~^ ERROR `main` function not found\n-//~^^ NOTE main function must be defined\n-//~^^^ NOTE you have one or more functions\n   match Some(10) {\n   //~^ NOTE this delimiter might not be properly closed...\n       Some(y) => { panic!(); }\n@@ -14,5 +11,5 @@ fn bar() {\n     while (i < 1000) {}\n }\n \n-fn main() {} //~ NOTE here is a function named `main`\n-             //~ ERROR this file contains an un-closed delimiter\n+fn main() {}\n+//~ ERROR this file contains an un-closed delimiter"}, {"sha": "45199b02cb8d4f88a8f35bf2a53ae7058712344f", "filename": "src/test/ui/parser/issue-2354.stderr", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -1,38 +1,16 @@\n error: this file contains an un-closed delimiter\n-  --> $DIR/issue-2354.rs:18:66\n+  --> $DIR/issue-2354.rs:15:53\n    |\n LL | fn foo() {\n    |          - un-closed delimiter\n-...\n LL |   match Some(10) {\n    |                  - this delimiter might not be properly closed...\n ...\n LL | }\n    | - ...as it matches this but it has different indentation\n ...\n LL |\n-   |                                                                  ^\n-\n-error[E0601]: `main` function not found in crate `issue_2354`\n-  --> $DIR/issue-2354.rs:1:1\n-   |\n-LL | / fn foo() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | | fn main() {}\n-LL | |\n-   | |_________________________________________________________________^ the main function must be defined at the crate level (in `$DIR/issue-2354.rs`)\n-   |\n-note: here is a function named `main`\n-  --> $DIR/issue-2354.rs:17:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^^^^\n-   = note: you have one or more functions named `main` not defined at the crate level\n-   = help: either move the `main` function definitions or attach the `#[main]` attribute to one of them\n+   |                                                     ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "82122ef0b6fd05e8a5027585fde5a13d06d4733d", "filename": "src/test/ui/parser/issue-62973.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -13,9 +13,11 @@ error: expected one of `,` or `}`, found `{`\n   --> $DIR/issue-62973.rs:6:25\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |                -        ^ expected one of `,` or `}` here\n-   |                |\n-   |                while parsing this struct\n+   |        -       -       -^ expected one of `,` or `}` here\n+   |        |       |       |\n+   |        |       |       help: `}` may belong here\n+   |        |       while parsing this struct\n+   |        unclosed delimiter\n \n error: struct literals are not allowed here\n   --> $DIR/issue-62973.rs:6:16"}, {"sha": "8d89905909e94f99743e992cf9e66d3e775f8035", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -0,0 +1,12 @@\n+impl T for () { //~ ERROR cannot find trait `T` in this scope\n+\n+fn foo(&self) {}\n+\n+trait T { //~ ERROR expected one of\n+    fn foo(&self);\n+}\n+\n+pub(crate) struct Bar<T>();\n+\n+fn main() {}\n+//~ ERROR this file contains an un-closed delimiter"}, {"sha": "9bf54181a079c13ec924d4bbc6a9cf5d94cc7559", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -0,0 +1,33 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:12:53\n+   |\n+LL | impl T for () {\n+   |               - un-closed delimiter\n+...\n+LL |\n+   |                                                     ^\n+\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found keyword `trait`\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:5:1\n+   |\n+LL | impl T for () {\n+   |               - unclosed delimiter\n+LL | \n+LL | fn foo(&self) {}\n+   |                 -\n+   |                 |\n+   |                 expected one of 10 possible tokens here\n+   |                 help: `}` may belong here\n+LL | \n+LL | trait T {\n+   | ^^^^^ unexpected token\n+\n+error[E0405]: cannot find trait `T` in this scope\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:1:6\n+   |\n+LL | impl T for () {\n+   |      ^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0405`."}, {"sha": "5b716b1467cb158ad5898fe97558a7d9848db3d6", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-struct.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -0,0 +1,14 @@\n+pub(crate) struct Bar<T> {\n+  foo: T,\n+\n+trait T { //~ ERROR expected identifier, found keyword `trait`\n+//~^ ERROR expected `:`, found `T`\n+    fn foo(&self);\n+}\n+\n+\n+impl T for Bar<usize> {\n+fn foo(&self) {}\n+}\n+\n+fn main() {} //~ ERROR this file contains an un-closed delimiter"}, {"sha": "ce399dbbf456dc266224bc6f4b45eab58b47de9f", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-struct.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -0,0 +1,28 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/missing-close-brace-in-struct.rs:14:66\n+   |\n+LL | pub(crate) struct Bar<T> {\n+   |                          - un-closed delimiter\n+...\n+LL | fn main() {}\n+   |                                                                  ^\n+\n+error: expected identifier, found keyword `trait`\n+  --> $DIR/missing-close-brace-in-struct.rs:4:1\n+   |\n+LL | trait T {\n+   | ^^^^^ expected identifier, found keyword\n+   |\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL | r#trait T {\n+   | ^^^^^^^\n+\n+error: expected `:`, found `T`\n+  --> $DIR/missing-close-brace-in-struct.rs:4:7\n+   |\n+LL | trait T {\n+   |       ^ expected `:`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "795471954112704884a869090c29477d75bcb7f6", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -0,0 +1,10 @@\n+trait T {\n+    fn foo(&self);\n+\n+pub(crate) struct Bar<T>(); //~ ERROR expected one of\n+\n+impl T for Bar<usize> {\n+fn foo(&self) {}\n+}\n+\n+fn main() {} //~ ERROR this file contains an un-closed delimiter"}, {"sha": "4bfb4c1cb3a523489113f84c4e4b90b9d03548fb", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49f38871389041671cc710a044e8360091840a3/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=f49f38871389041671cc710a044e8360091840a3", "patch": "@@ -0,0 +1,25 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/missing-close-brace-in-trait.rs:10:66\n+   |\n+LL | trait T {\n+   |         - un-closed delimiter\n+...\n+LL | fn main() {}\n+   |                                                                  ^\n+\n+error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found keyword `pub`\n+  --> $DIR/missing-close-brace-in-trait.rs:4:1\n+   |\n+LL | trait T {\n+   |         - unclosed delimiter\n+LL |     fn foo(&self);\n+   |                   -\n+   |                   |\n+   |                   expected one of 7 possible tokens here\n+   |                   help: `}` may belong here\n+LL | \n+LL | pub(crate) struct Bar<T>();\n+   | ^^^ unexpected token\n+\n+error: aborting due to 2 previous errors\n+"}]}