{"sha": "89df915a13454fbc9f51832394c7032716f70935", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZGY5MTVhMTM0NTRmYmM5ZjUxODMyMzk0YzcwMzI3MTZmNzA5MzU=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-16T18:22:24Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-16T18:22:24Z"}, "message": "Removing task, chan and port upcalls.", "tree": {"sha": "7df7872075890a37fc6ef25d1f7a4a5c17c874ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7df7872075890a37fc6ef25d1f7a4a5c17c874ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89df915a13454fbc9f51832394c7032716f70935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89df915a13454fbc9f51832394c7032716f70935", "html_url": "https://github.com/rust-lang/rust/commit/89df915a13454fbc9f51832394c7032716f70935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89df915a13454fbc9f51832394c7032716f70935/comments", "author": null, "committer": null, "parents": [{"sha": "862bc521a16ac764bee4446f60858459c6e04860", "url": "https://api.github.com/repos/rust-lang/rust/commits/862bc521a16ac764bee4446f60858459c6e04860", "html_url": "https://github.com/rust-lang/rust/commit/862bc521a16ac764bee4446f60858459c6e04860"}], "stats": {"total": 231, "additions": 0, "deletions": 231}, "files": [{"sha": "7a8e779cd26a9cfe0163cf18446eb2213867f5e3", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/89df915a13454fbc9f51832394c7032716f70935/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89df915a13454fbc9f51832394c7032716f70935/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=89df915a13454fbc9f51832394c7032716f70935", "patch": "@@ -26,19 +26,8 @@ import lib::llvm::llvm::TypeRef;\n \n type upcalls =\n     {grow_task: ValueRef,\n-     new_port: ValueRef,\n-     del_port: ValueRef,\n-     new_chan: ValueRef,\n-     flush_chan: ValueRef,\n-     drop_chan: ValueRef,\n-     take_chan: ValueRef,\n-     del_chan: ValueRef,\n-     clone_chan: ValueRef,\n-     chan_target_task: ValueRef,\n      _yield: ValueRef,\n      sleep: ValueRef,\n-     send: ValueRef,\n-     recv: ValueRef,\n      _fail: ValueRef,\n      kill: ValueRef,\n      exit: ValueRef,\n@@ -48,14 +37,9 @@ type upcalls =\n      shared_free: ValueRef,\n      mark: ValueRef,\n      new_str: ValueRef,\n-     dup_str: ValueRef,\n      new_vec: ValueRef,\n      vec_append: ValueRef,\n      get_type_desc: ValueRef,\n-     new_task: ValueRef,\n-     take_task: ValueRef,\n-     drop_task: ValueRef,\n-     start_task: ValueRef,\n      ivec_resize: ValueRef,\n      ivec_spill: ValueRef,\n      ivec_resize_shared: ValueRef,\n@@ -83,23 +67,8 @@ fn declare_upcalls(tn: type_names, tydesc_type: TypeRef,\n \n     let empty_vec: [TypeRef] = ~[];\n     ret @{grow_task: dv(\"grow_task\", ~[T_size_t()]),\n-          new_port: d(\"new_port\", ~[T_size_t()], T_opaque_port_ptr()),\n-          del_port: dv(\"del_port\", ~[T_opaque_port_ptr()]),\n-          new_chan:\n-              d(\"new_chan\", ~[T_opaque_port_ptr()], T_opaque_chan_ptr()),\n-          flush_chan: dv(\"flush_chan\", ~[T_opaque_chan_ptr()]),\n-          drop_chan: dv(\"drop_chan\", ~[T_opaque_chan_ptr()]),\n-          take_chan: dv(\"take_chan\", ~[T_opaque_chan_ptr()]),\n-          del_chan: dv(\"del_chan\", ~[T_opaque_chan_ptr()]),\n-          clone_chan:\n-              d(\"clone_chan\", ~[taskptr_type, T_opaque_chan_ptr()],\n-                T_opaque_chan_ptr()),\n-          chan_target_task:\n-              d(\"chan_target_task\", ~[T_opaque_chan_ptr()], taskptr_type),\n           _yield: dv(\"yield\", empty_vec),\n           sleep: dv(\"sleep\", ~[T_size_t()]),\n-          send: dv(\"send\", ~[T_opaque_chan_ptr(), T_ptr(T_i8())]),\n-          recv: dv(\"recv\", ~[T_ptr(T_ptr(T_i8())), T_opaque_port_ptr()]),\n           _fail: dv(\"fail\", ~[T_ptr(T_i8()), T_ptr(T_i8()), T_size_t()]),\n           kill: dv(\"kill\", ~[taskptr_type]),\n           exit: dv(\"exit\", empty_vec),\n@@ -112,8 +81,6 @@ fn declare_upcalls(tn: type_names, tydesc_type: TypeRef,\n           shared_free: dv(\"shared_free\", ~[T_ptr(T_i8())]),\n           mark: d(\"mark\", ~[T_ptr(T_i8())], T_int()),\n           new_str: d(\"new_str\", ~[T_ptr(T_i8()), T_size_t()], T_ptr(T_str())),\n-          dup_str:\n-              d(\"dup_str\", ~[taskptr_type, T_ptr(T_str())], T_ptr(T_str())),\n           new_vec:\n               d(\"new_vec\", ~[T_size_t(), T_ptr(tydesc_type)],\n                 T_opaque_vec_ptr()),\n@@ -126,12 +93,6 @@ fn declare_upcalls(tn: type_names, tydesc_type: TypeRef,\n               d(\"get_type_desc\",\n                 ~[T_ptr(T_nil()), T_size_t(), T_size_t(), T_size_t(),\n                   T_ptr(T_ptr(tydesc_type))], T_ptr(tydesc_type)),\n-          new_task: d(\"new_task\", ~[T_ptr(T_str())], taskptr_type),\n-          take_task: dv(\"take_task\", ~[taskptr_type]),\n-          drop_task: dv(\"drop_task\", ~[taskptr_type]),\n-          start_task:\n-              d(\"start_task\", ~[taskptr_type, T_int(), T_int(), T_size_t()],\n-                taskptr_type),\n           ivec_resize:\n               d(\"ivec_resize\", ~[T_ptr(T_opaque_ivec()), T_int()], T_void()),\n           ivec_spill:"}, {"sha": "5fd0127c7e7cd7e5a0cee2faa5756ec974937fef", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 175, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/89df915a13454fbc9f51832394c7032716f70935/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/89df915a13454fbc9f51832394c7032716f70935/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=89df915a13454fbc9f51832394c7032716f70935", "patch": "@@ -70,80 +70,6 @@ upcall_log_istr(rust_task *task, uint32_t level, rust_ivec *str) {\n     task->sched->log(task, level, \"rust: %s\", buf);\n }\n \n-extern \"C\" CDECL rust_port*\n-new_port(rust_task *task, size_t unit_sz);\n-extern \"C\" CDECL rust_port*\n-upcall_new_port(rust_task *task, size_t unit_sz) {\n-    LOG_UPCALL_ENTRY(task);\n-    LOG(task, comm, \"upcall_new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n-        (uintptr_t) task, task->name, unit_sz);\n-    return new_port(task, unit_sz);\n-}\n-\n-extern \"C\" CDECL void\n-del_port(rust_task *task, rust_port *port);\n-extern \"C\" CDECL void\n-upcall_del_port(rust_task *task, rust_port *port) {\n-    LOG_UPCALL_ENTRY(task);\n-    return del_port(task, port);\n-}\n-\n-/**\n- * Creates a new channel pointing to a given port.\n- */\n-extern \"C\" CDECL rust_chan*\n-new_chan(rust_task *task, rust_port *port);\n-extern \"C\" CDECL rust_chan*\n-upcall_new_chan(rust_task *task, rust_port *port) {\n-    LOG_UPCALL_ENTRY(task);\n-    return new_chan(task, port);\n-}\n-\n-/**\n- * Called whenever this channel needs to be flushed. This can happen due to a\n- * flush statement, or automatically whenever a channel's ref count is\n- * about to drop to zero.\n- */\n-extern \"C\" CDECL void\n-upcall_flush_chan(rust_task *task, rust_chan *chan) {\n-    LOG_UPCALL_ENTRY(task);\n-}\n-\n-/**\n- * Called whenever the channel's ref count drops to zero.\n- *\n- * Cannot Yield: If the task were to unwind, the dropped ref would still\n- * appear to be live, causing modify-after-free errors.\n- */\n-extern \"C\" CDECL\n-void del_chan(rust_task *task, rust_chan *chan);\n-extern \"C\" CDECL\n-void upcall_del_chan(rust_task *task, rust_chan *chan) {\n-    LOG_UPCALL_ENTRY(task);\n-    del_chan(task, chan);\n-}\n-\n-/**\n- * Clones a channel and stores it in the spawnee's domain. Each spawned task\n- * has its own copy of the channel.\n- */\n-extern \"C\" CDECL rust_chan *\n-upcall_clone_chan(rust_task *task, rust_task_id tid,\n-                  rust_chan *chan) {\n-    // FIXME: This should be removed.\n-    LOG_UPCALL_ENTRY(task);\n-    rust_task *target = task->kernel->get_task_by_id(tid);\n-    rust_chan *c = chan->clone(target);\n-    target->deref();\n-    return c;\n-}\n-\n-extern \"C\" CDECL rust_task *\n-upcall_chan_target_task(rust_task *task, rust_chan *chan) {\n-    LOG_UPCALL_ENTRY(task);\n-    return chan->port->task;\n-}\n-\n extern \"C\" CDECL void\n upcall_yield(rust_task *task) {\n     LOG_UPCALL_ENTRY(task);\n@@ -160,24 +86,6 @@ upcall_sleep(rust_task *task, size_t time_in_us) {\n     task->yield(time_in_us);\n }\n \n-/**\n- * Buffers a chunk of data in the specified channel.\n- *\n- * sptr: pointer to a chunk of data to buffer\n- */\n-extern \"C\" CDECL void\n-upcall_send(rust_task *task, rust_chan *chan, void *sptr) {\n-    LOG_UPCALL_ENTRY(task);\n-    chan->send(sptr);\n-    LOG(task, comm, \"=== sent data ===>\");\n-}\n-\n-extern \"C\" CDECL void\n-upcall_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n-    LOG_UPCALL_ENTRY(task);\n-    port_recv(task, dptr, port);\n-}\n-\n extern \"C\" CDECL void\n upcall_fail(rust_task *task,\n             char const *expr,\n@@ -314,15 +222,6 @@ upcall_new_str(rust_task *task, char const *s, size_t fill) {\n     return make_str(task, s, fill);\n }\n \n-extern \"C\" CDECL rust_str *\n-upcall_dup_str(rust_task *task, rust_task_id tid, rust_str *str) {\n-    LOG_UPCALL_ENTRY(task);\n-    rust_task *target = task->kernel->get_task_by_id(tid);\n-    rust_str *s = make_str(target, (char const *)str->data, str->fill);\n-    target->deref();\n-    return s;\n-}\n-\n extern \"C\" CDECL rust_vec *\n upcall_new_vec(rust_task *task, size_t fill, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);\n@@ -477,80 +376,6 @@ upcall_get_type_desc(rust_task *task,\n     return td;\n }\n \n-extern \"C\" CDECL rust_task_id\n-upcall_new_task(rust_task *spawner, rust_vec *name) {\n-    // name is a rust string structure.\n-    LOG_UPCALL_ENTRY(spawner);\n-    rust_task_id tid =\n-        spawner->kernel->create_task(spawner, (const char *)name->data);\n-    // let the kernel bump the ref count.\n-    spawner->kernel->get_task_by_id(tid);\n-    // no deref because we're letting the caller take ownership.\n-    return tid;\n-}\n-\n-extern \"C\" CDECL void\n-upcall_take_task(rust_task *task, rust_task_id tid) {\n-    LOG_UPCALL_ENTRY(task);\n-    // get_task_by_id increments the refcount.\n-    task->kernel->get_task_by_id(tid);\n-}\n-\n-extern \"C\" CDECL void\n-drop_task(rust_task *task, rust_task_id tid);\n-extern \"C\" CDECL void\n-upcall_drop_task(rust_task *task, rust_task_id tid) {\n-    LOG_UPCALL_ENTRY(task);\n-    drop_task(task, tid);\n-}\n-\n-extern \"C\" CDECL void\n-upcall_take_chan(rust_task *task, rust_chan *target) {\n-    LOG_UPCALL_ENTRY(task);\n-    if(target) {\n-        target->ref();\n-    }\n-}\n-\n-extern \"C\" CDECL void\n-upcall_drop_chan(rust_task *task, rust_chan *target) {\n-    LOG_UPCALL_ENTRY(task);\n-    if(target) {\n-        target->deref();\n-    }\n-}\n-\n-extern \"C\" CDECL rust_task *\n-upcall_start_task(rust_task *spawner,\n-                  rust_task_id tid,\n-                  uintptr_t spawnee_fn,\n-                  uintptr_t args,\n-                  size_t args_sz) {\n-    LOG_UPCALL_ENTRY(spawner);\n-\n-    rust_scheduler *sched = spawner->sched;\n-    rust_task *task = spawner->kernel->get_task_by_id(tid);\n-    DLOG(sched, task,\n-         \"upcall start_task(task %s @0x%\" PRIxPTR\n-         \", spawnee 0x%\" PRIxPTR \")\",\n-         task->name, task,\n-         spawnee_fn);\n-\n-    // we used to be generating this tuple in rustc, but it's easier to do it\n-    // here.\n-    //\n-    // The args tuple is stack-allocated. We need to move it over to the new\n-    // stack.\n-    task->rust_sp -= args_sz;\n-    uintptr_t child_arg = (uintptr_t)task->rust_sp;\n-\n-    memcpy((void*)task->rust_sp, (void*)args, args_sz);\n-\n-    task->start(spawnee_fn, child_arg);\n-    task->deref();\n-    return task;\n-}\n-\n /**\n  * Resizes an interior vector that has been spilled to the heap.\n  */"}, {"sha": "c200fc9d3cb184470610235b5596900278ae3839", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89df915a13454fbc9f51832394c7032716f70935/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/89df915a13454fbc9f51832394c7032716f70935/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=89df915a13454fbc9f51832394c7032716f70935", "patch": "@@ -82,17 +82,9 @@ task_sleep\n task_yield\n task_join\n unsupervise\n-upcall_chan_target_task\n-upcall_clone_chan\n upcall_cmp_type\n-upcall_del_chan\n-upcall_del_port\n-upcall_drop_chan\n-upcall_drop_task\n-upcall_dup_str\n upcall_exit\n upcall_fail\n-upcall_flush_chan\n upcall_free\n upcall_get_type_desc\n upcall_grow_task\n@@ -107,19 +99,10 @@ upcall_log_str\n upcall_log_type\n upcall_malloc\n upcall_mark\n-upcall_new_chan\n-upcall_new_port\n upcall_new_str\n-upcall_new_task\n upcall_new_vec\n-upcall_recv\n-upcall_send\n upcall_shared_malloc\n upcall_shared_free\n upcall_sleep\n-upcall_start_task\n-upcall_take_task\n-upcall_take_chan\n upcall_vec_append\n upcall_yield\n-"}]}