{"sha": "56b96a3bfcbb37856c333a0042c365c314a54e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2Yjk2YTNiZmNiYjM3ODU2YzMzM2EwMDQyYzM2NWMzMTRhNTRlNmE=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-09-26T21:24:06Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:10:11Z"}, "message": "path2: Implement stat support", "tree": {"sha": "7a3023041ff3ed6f825bcbb11a0af78320db7f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3023041ff3ed6f825bcbb11a0af78320db7f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56b96a3bfcbb37856c333a0042c365c314a54e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56b96a3bfcbb37856c333a0042c365c314a54e6a", "html_url": "https://github.com/rust-lang/rust/commit/56b96a3bfcbb37856c333a0042c365c314a54e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56b96a3bfcbb37856c333a0042c365c314a54e6a/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fcdcaeda7c264cde63df79ce5d189d91567f70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fcdcaeda7c264cde63df79ce5d189d91567f70b", "html_url": "https://github.com/rust-lang/rust/commit/7fcdcaeda7c264cde63df79ce5d189d91567f70b"}], "stats": {"total": 393, "additions": 393, "deletions": 0}, "files": [{"sha": "5831b200e09888238806bdda77aa17c9d1dc8294", "filename": "src/libstd/path2/mod.rs", "status": "modified", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/56b96a3bfcbb37856c333a0042c365c314a54e6a/src%2Flibstd%2Fpath2%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b96a3bfcbb37856c333a0042c365c314a54e6a/src%2Flibstd%2Fpath2%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fmod.rs?ref=56b96a3bfcbb37856c333a0042c365c314a54e6a", "patch": "@@ -650,3 +650,224 @@ pub trait GenericPathUnsafe {\n fn contains_nul(v: &[u8]) -> bool {\n     v.iter().any(|&x| x == 0)\n }\n+\n+// FIXME (#9537): libc::stat should derive Default\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"android\")]\n+mod stat {\n+    #[allow(missing_doc)];\n+\n+    #[cfg(target_arch = \"x86\")]\n+    pub mod arch {\n+        use libc;\n+\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                __pad1: 0,\n+                st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                __pad2: 0,\n+                st_size: 0,\n+                st_blksize: 0,\n+                st_blocks: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                __unused4: 0,\n+                __unused5: 0,\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_arch = \"arm\")]\n+    pub mod arch {\n+        use libc;\n+\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                __pad0: [0, ..4],\n+                __st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                __pad3: [0, ..4],\n+                st_size: 0,\n+                st_blksize: 0,\n+                st_blocks: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                st_ino: 0\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_arch = \"mips\")]\n+    pub mod arch {\n+        use libc;\n+\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_pad1: [0, ..3],\n+                st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                st_pad2: [0, ..2],\n+                st_size: 0,\n+                st_pad3: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                st_blksize: 0,\n+                st_blocks: 0,\n+                st_pad5: [0, ..14],\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    pub mod arch {\n+        use libc;\n+\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_ino: 0,\n+                st_nlink: 0,\n+                st_mode: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                __pad0: 0,\n+                st_rdev: 0,\n+                st_size: 0,\n+                st_blksize: 0,\n+                st_blocks: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                __unused: [0, 0, 0],\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+mod stat {\n+    #[allow(missing_doc)];\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    pub mod arch {\n+        use libc;\n+\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                st_size: 0,\n+                st_blocks: 0,\n+                st_blksize: 0,\n+                st_flags: 0,\n+                st_gen: 0,\n+                st_lspare: 0,\n+                st_birthtime: 0,\n+                st_birthtime_nsec: 0,\n+                __unused: [0, 0],\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+mod stat {\n+    #[allow(missing_doc)];\n+\n+    pub mod arch {\n+        use libc;\n+\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_ino: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                st_birthtime: 0,\n+                st_birthtime_nsec: 0,\n+                st_size: 0,\n+                st_blocks: 0,\n+                st_blksize: 0,\n+                st_flags: 0,\n+                st_gen: 0,\n+                st_lspare: 0,\n+                st_qspare: [0, 0],\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"win32\")]\n+mod stat {\n+    #[allow(missing_doc)];\n+\n+    pub mod arch {\n+        use libc;\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                st_size: 0,\n+                st_atime: 0,\n+                st_mtime: 0,\n+                st_ctime: 0,\n+            }\n+        }\n+    }\n+}"}, {"sha": "8e928f1df78cb255d401dfeed0319e64d5b92922", "filename": "src/libstd/path2/posix.rs", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/56b96a3bfcbb37856c333a0042c365c314a54e6a/src%2Flibstd%2Fpath2%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b96a3bfcbb37856c333a0042c365c314a54e6a/src%2Flibstd%2Fpath2%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fposix.rs?ref=56b96a3bfcbb37856c333a0042c365c314a54e6a", "patch": "@@ -26,6 +26,9 @@ use vec::CopyableVector;\n use vec::{Vector, VectorVector};\n use super::{GenericPath, GenericPathUnsafe};\n \n+#[cfg(not(target_os = \"win32\"))]\n+use libc;\n+\n /// Iterator that yields successive components of a Path\n pub type ComponentIter<'self> = vec::SplitIterator<'self, u8>;\n \n@@ -422,6 +425,102 @@ fn contains_nul(v: &[u8]) -> bool {\n static dot_static: &'static [u8] = &'static ['.' as u8];\n static dot_dot_static: &'static [u8] = &'static ['.' as u8, '.' as u8];\n \n+// Stat support\n+#[cfg(not(target_os = \"win32\"))]\n+impl Path {\n+    /// Calls stat() on the represented file and returns the resulting libc::stat\n+    pub fn stat(&self) -> Option<libc::stat> {\n+        #[fixed_stack_segment]; #[inline(never)];\n+        do self.with_c_str |buf| {\n+            let mut st = super::stat::arch::default_stat();\n+            match unsafe { libc::stat(buf as *libc::c_char, &mut st) } {\n+                0 => Some(st),\n+                _ => None\n+            }\n+        }\n+    }\n+\n+    /// Returns whether the represented file exists\n+    pub fn exists(&self) -> bool {\n+        match self.stat() {\n+            None => false,\n+            Some(_) => true\n+        }\n+    }\n+\n+    /// Returns the filesize of the represented file\n+    pub fn get_size(&self) -> Option<i64> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some(st.st_size as i64)\n+        }\n+    }\n+\n+    /// Returns the mode of the represented file\n+    pub fn get_mode(&self) -> Option<uint> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some(st.st_mode as uint)\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+impl Path {\n+    /// Returns the atime of the represented file, as (secs, nsecs)\n+    pub fn get_atime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some((st.st_atime as i64, st.st_atime_nsec as int))\n+        }\n+    }\n+\n+    /// Returns the mtime of the represented file, as (secs, nsecs)\n+    pub fn get_mtime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some((st.st_mtime as i64, st.st_mtime_nsec as int))\n+        }\n+    }\n+\n+    /// Returns the ctime of the represented file, as (secs, nsecs)\n+    pub fn get_ctime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some((st.st_ctime as i64, st.st_ctime_nsec as int))\n+        }\n+    }\n+}\n+\n+#[cfg(unix)]\n+impl Path {\n+    /// Calls lstat() on the represented file and returns the resulting libc::stat\n+    pub fn lstat(&self) -> Option<libc::stat> {\n+        #[fixed_stack_segment]; #[inline(never)];\n+        do self.with_c_str |buf| {\n+            let mut st = super::stat::arch::default_stat();\n+            match unsafe { libc::lstat(buf, &mut st) } {\n+                0 => Some(st),\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"macos\")]\n+impl Path {\n+    /// Returns the birthtime of the represented file\n+    pub fn get_birthtime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some((st.st_birthtime as i64, st.st_birthtime_nsec as int))\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "728adf25ae137a645c9c78b42ffb75e175400a6c", "filename": "src/libstd/path2/windows.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/56b96a3bfcbb37856c333a0042c365c314a54e6a/src%2Flibstd%2Fpath2%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56b96a3bfcbb37856c333a0042c365c314a54e6a/src%2Flibstd%2Fpath2%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fwindows.rs?ref=56b96a3bfcbb37856c333a0042c365c314a54e6a", "patch": "@@ -24,6 +24,9 @@ use util;\n use vec::Vector;\n use super::{GenericPath, GenericPathUnsafe};\n \n+#[cfg(target_os = \"win32\")]\n+use libc;\n+\n /// Iterator that yields successive components of a Path\n pub type ComponentIter<'self> = str::CharSplitIterator<'self, char>;\n \n@@ -1060,6 +1063,76 @@ fn prefix_is_sep(p: Option<PathPrefix>, c: u8) -> bool {\n                     else { is_sep(c as char) }\n }\n \n+// Stat support\n+#[cfg(target_os = \"win32\")]\n+impl Path {\n+    /// Calls stat() on the represented file and returns the resulting libc::stat\n+    pub fn stat(&self) -> Option<libc::stat> {\n+        #[fixed_stack_segment]; #[inline(never)];\n+        do self.with_c_str |buf| {\n+            let mut st = super::stat::arch::default_stat();\n+            match unsafe { libc::stat(buf, &mut st) } {\n+                0 => Some(st),\n+                _ => None\n+            }\n+        }\n+    }\n+\n+    /// Returns whether the represented file exists\n+    pub fn exists(&self) -> bool {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some(st.st_size as i64)\n+        }\n+    }\n+\n+    /// Returns the filesize of the represented file\n+    pub fn get_size(&self) -> Option<i64> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some(st.st_size as i64)\n+        }\n+    }\n+\n+    /// Returns the mode of the represented file\n+    pub fn get_mode(&self) -> Option<uint> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some(st.st_mode as uint)\n+        }\n+    }\n+\n+    /// Returns the atime of the represented file, as (secs, nsecs)\n+    ///\n+    /// nsecs is always 0\n+    pub fn get_atime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some((st.st_atime as i64, 0))\n+        }\n+    }\n+\n+    /// Returns the mtime of the represented file, as (secs, nsecs)\n+    ///\n+    /// nsecs is always 0\n+    pub fn get_mtime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some((st.st_mtime as i64, 0))\n+        }\n+    }\n+\n+    /// Returns the ctime of the represented file, as (secs, nsecs)\n+    ///\n+    /// nsecs is always 0\n+    pub fn get_ctime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(st) => Some((st.st_ctime as i64, 0))\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}