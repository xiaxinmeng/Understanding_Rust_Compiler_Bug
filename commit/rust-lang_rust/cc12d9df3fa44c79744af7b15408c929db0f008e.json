{"sha": "cc12d9df3fa44c79744af7b15408c929db0f008e", "node_id": "C_kwDOAAsO6NoAKGNjMTJkOWRmM2ZhNDRjNzk3NDRhZjdiMTU0MDhjOTI5ZGIwZjAwOGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-02T12:13:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-02T12:13:16Z"}, "message": "Auto merge of #12120 - iDawer:ide.sig_help, r=Veykril\n\nfix: Don't show signature help after closing bracket\n\nStop showing signature help after closing angle/round brackets.\n\nFixes #11624", "tree": {"sha": "24b19f44e31ce0b2e0ca641967a10243e508cb1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b19f44e31ce0b2e0ca641967a10243e508cb1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc12d9df3fa44c79744af7b15408c929db0f008e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc12d9df3fa44c79744af7b15408c929db0f008e", "html_url": "https://github.com/rust-lang/rust/commit/cc12d9df3fa44c79744af7b15408c929db0f008e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc12d9df3fa44c79744af7b15408c929db0f008e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0d092bcee02864437984180b77cd39bc11a586e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d092bcee02864437984180b77cd39bc11a586e", "html_url": "https://github.com/rust-lang/rust/commit/b0d092bcee02864437984180b77cd39bc11a586e"}, {"sha": "dffbab45f4c57868e914ea9eafa0d847220e2330", "url": "https://api.github.com/repos/rust-lang/rust/commits/dffbab45f4c57868e914ea9eafa0d847220e2330", "html_url": "https://github.com/rust-lang/rust/commit/dffbab45f4c57868e914ea9eafa0d847220e2330"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "57b0305fb352d0503baa05a7814e03760871edf1", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cc12d9df3fa44c79744af7b15408c929db0f008e/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc12d9df3fa44c79744af7b15408c929db0f008e/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=cc12d9df3fa44c79744af7b15408c929db0f008e", "patch": "@@ -8,7 +8,7 @@ use stdx::format_to;\n use syntax::{\n     algo,\n     ast::{self, HasArgList},\n-    AstNode, Direction, SyntaxToken, TextRange, TextSize,\n+    match_ast, AstNode, Direction, SyntaxToken, TextRange, TextSize,\n };\n \n use crate::RootDatabase;\n@@ -66,20 +66,34 @@ pub(crate) fn signature_help(db: &RootDatabase, position: FilePosition) -> Optio\n         .and_then(|tok| algo::skip_trivia_token(tok, Direction::Prev))?;\n     let token = sema.descend_into_macros_single(token);\n \n-    if let Some(help) = signature_help_for_call(&sema, &token) {\n-        return Some(help);\n-    }\n-\n-    if let Some(help) = signature_help_for_generics(&sema, &token) {\n-        return Some(help);\n+    for node in token.ancestors() {\n+        match_ast! {\n+            match node {\n+                ast::ArgList(arg_list) => {\n+                    let cursor_outside = arg_list.r_paren_token().as_ref() == Some(&token);\n+                    if cursor_outside {\n+                        return None;\n+                    }\n+                    return signature_help_for_call(&sema, token);\n+                },\n+                ast::GenericArgList(garg_list) => {\n+                    let cursor_outside = garg_list.r_angle_token().as_ref() == Some(&token);\n+                    if cursor_outside {\n+                        return None;\n+                    }\n+                    return signature_help_for_generics(&sema, token);\n+                },\n+                _ => (),\n+            }\n+        }\n     }\n \n     None\n }\n \n fn signature_help_for_call(\n     sema: &Semantics<RootDatabase>,\n-    token: &SyntaxToken,\n+    token: SyntaxToken,\n ) -> Option<SignatureHelp> {\n     // Find the calling expression and its NameRef\n     let mut node = token.parent()?;\n@@ -104,7 +118,7 @@ fn signature_help_for_call(\n         node = node.parent()?;\n     };\n \n-    let (callable, active_parameter) = callable_for_node(sema, &calling_node, token)?;\n+    let (callable, active_parameter) = callable_for_node(sema, &calling_node, &token)?;\n \n     let mut res =\n         SignatureHelp { doc: None, signature: String::new(), parameters: vec![], active_parameter };\n@@ -183,7 +197,7 @@ fn signature_help_for_call(\n \n fn signature_help_for_generics(\n     sema: &Semantics<RootDatabase>,\n-    token: &SyntaxToken,\n+    token: SyntaxToken,\n ) -> Option<SignatureHelp> {\n     let parent = token.parent()?;\n     let arg_list = parent\n@@ -691,6 +705,28 @@ fn bar() { foo $0 (3, ); }\n         );\n     }\n \n+    #[test]\n+    fn outside_of_arg_list() {\n+        check(\n+            r#\"\n+fn foo(a: u8) {}\n+fn f() {\n+    foo(123)$0\n+}\n+\"#,\n+            expect![[]],\n+        );\n+        check(\n+            r#\"\n+fn foo<T>(a: u8) {}\n+fn f() {\n+    foo::<u32>$0()\n+}\n+\"#,\n+            expect![[]],\n+        );\n+    }\n+\n     #[test]\n     fn test_nested_method_in_lambda() {\n         check("}]}