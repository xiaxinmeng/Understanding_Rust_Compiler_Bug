{"sha": "e137c2ad0a4436693a21637edb89424fc7546377", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMzdjMmFkMGE0NDM2NjkzYTIxNjM3ZWRiODk0MjRmYzc1NDYzNzc=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-28T19:18:24Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-28T19:27:10Z"}, "message": "[MIR] Translate ConstVal::Function\n\nThis moves back (essentially reverts #30265) into MIR-specific translation code, but keeps the\nfuncition split out, since it is expected to eventually become recursive.", "tree": {"sha": "ac008a5efdb43398dcae4858853f77a0a31cf17f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac008a5efdb43398dcae4858853f77a0a31cf17f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e137c2ad0a4436693a21637edb89424fc7546377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e137c2ad0a4436693a21637edb89424fc7546377", "html_url": "https://github.com/rust-lang/rust/commit/e137c2ad0a4436693a21637edb89424fc7546377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e137c2ad0a4436693a21637edb89424fc7546377/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a1834ce522e3ec7fe4726b1661de16ee30c503", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a1834ce522e3ec7fe4726b1661de16ee30c503", "html_url": "https://github.com/rust-lang/rust/commit/27a1834ce522e3ec7fe4726b1661de16ee30c503"}], "stats": {"total": 82, "additions": 46, "deletions": 36}, "files": [{"sha": "fe7d29297a9608574f42e54babfc43fbdcf2ff37", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e137c2ad0a4436693a21637edb89424fc7546377/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e137c2ad0a4436693a21637edb89424fc7546377/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=e137c2ad0a4436693a21637edb89424fc7546377", "patch": "@@ -31,7 +31,6 @@ use trans::{adt, closure, debuginfo, expr, inline, machine};\n use trans::base::{self, push_ctxt};\n use trans::common::{self, type_is_sized, ExprOrMethodCall, node_id_substs, C_nil, const_get_elt};\n use trans::common::{CrateContext, C_integral, C_floating, C_bool, C_str_slice, C_bytes, val_ty};\n-use trans::common::C_floating_f64;\n use trans::common::{C_struct, C_undef, const_to_opt_int, const_to_opt_uint, VariantInfo, C_uint};\n use trans::common::{type_is_fat_ptr, Field, C_vector, C_array, C_null, ExprId, MethodCallKey};\n use trans::declare;\n@@ -108,38 +107,6 @@ pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)\n     }\n }\n \n-pub fn trans_constval<'blk, 'tcx>(bcx: common::Block<'blk, 'tcx>,\n-                                cv: &ConstVal,\n-                                ty: Ty<'tcx>,\n-                                param_substs: &'tcx Substs<'tcx>)\n-                                -> ValueRef\n-{\n-    let ccx = bcx.ccx();\n-    let llty = type_of::type_of(ccx, ty);\n-    match *cv {\n-        ConstVal::Float(v) => C_floating_f64(v, llty),\n-        ConstVal::Bool(v) => C_bool(ccx, v),\n-        ConstVal::Int(v) => C_integral(llty, v as u64, true),\n-        ConstVal::Uint(v) => C_integral(llty, v, false),\n-        ConstVal::Str(ref v) => C_str_slice(ccx, v.clone()),\n-        ConstVal::ByteStr(ref v) => addr_of(ccx, C_bytes(ccx, v), 1, \"byte_str\"),\n-        ConstVal::Struct(id) | ConstVal::Tuple(id) => {\n-            let expr = bcx.tcx().map.expect_expr(id);\n-            match const_expr(ccx, expr, param_substs, None, TrueConst::Yes) {\n-                Ok((val, _)) => val,\n-                Err(e) => panic!(\"const eval failure: {}\", e.description()),\n-            }\n-        },\n-        ConstVal::Array(id, _) | ConstVal::Repeat(id, _) => {\n-            let expr = bcx.tcx().map.expect_expr(id);\n-            expr::trans(bcx, expr).datum.val\n-        },\n-        ConstVal::Function(_) => {\n-            unimplemented!()\n-        },\n-    }\n-}\n-\n pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef {\n     unsafe {\n         llvm::LLVMConstPointerCast(val, ty.to_ref())"}, {"sha": "12839df87b159d4ce86e55535ada1679986caa67", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e137c2ad0a4436693a21637edb89424fc7546377/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e137c2ad0a4436693a21637edb89424fc7546377/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=e137c2ad0a4436693a21637edb89424fc7546377", "patch": "@@ -9,11 +9,14 @@\n // except according to those terms.\n \n use back::abi;\n+use llvm::ValueRef;\n+use middle::subst::Substs;\n use middle::ty::{Ty, HasTypeFlags};\n use rustc::middle::const_eval::ConstVal;\n use rustc::mir::repr as mir;\n-use trans::consts;\n-use trans::common::{self, Block};\n+use trans::common::{self, Block, C_bool, C_bytes, C_floating_f64, C_integral, C_str_slice};\n+use trans::consts::{self, TrueConst};\n+use trans::{type_of, expr};\n \n \n use super::operand::{OperandRef, OperandValue};\n@@ -27,7 +30,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                           -> OperandRef<'tcx>\n     {\n         let ccx = bcx.ccx();\n-        let val = consts::trans_constval(bcx, cv, ty, bcx.fcx.param_substs);\n+        let val = self.trans_constval_inner(bcx, cv, ty, bcx.fcx.param_substs);\n         let val = if common::type_is_immediate(ccx, ty) {\n             OperandValue::Immediate(val)\n         } else if common::type_is_fat_ptr(bcx.tcx(), ty) {\n@@ -46,6 +49,39 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         }\n     }\n \n+    /// Translate ConstVal into a bare LLVM ValueRef.\n+    fn trans_constval_inner(&mut self,\n+                            bcx: common::Block<'bcx, 'tcx>,\n+                            cv: &ConstVal,\n+                            ty: Ty<'tcx>,\n+                            param_substs: &'tcx Substs<'tcx>)\n+                            -> ValueRef\n+    {\n+        let ccx = bcx.ccx();\n+        let llty = type_of::type_of(ccx, ty);\n+        match *cv {\n+            ConstVal::Float(v) => C_floating_f64(v, llty),\n+            ConstVal::Bool(v) => C_bool(ccx, v),\n+            ConstVal::Int(v) => C_integral(llty, v as u64, true),\n+            ConstVal::Uint(v) => C_integral(llty, v, false),\n+            ConstVal::Str(ref v) => C_str_slice(ccx, v.clone()),\n+            ConstVal::ByteStr(ref v) => consts::addr_of(ccx, C_bytes(ccx, v), 1, \"byte_str\"),\n+            ConstVal::Struct(id) | ConstVal::Tuple(id) => {\n+                let expr = bcx.tcx().map.expect_expr(id);\n+                match consts::const_expr(ccx, expr, param_substs, None, TrueConst::Yes) {\n+                    Ok((val, _)) => val,\n+                    Err(e) => panic!(\"const eval failure: {}\", e.description()),\n+                }\n+            },\n+            ConstVal::Array(id, _) | ConstVal::Repeat(id, _) => {\n+                let expr = bcx.tcx().map.expect_expr(id);\n+                expr::trans(bcx, expr).datum.val\n+            },\n+            ConstVal::Function(did) =>\n+                self.trans_fn_ref(bcx, ty, param_substs, did).immediate()\n+        }\n+    }\n+\n     pub fn trans_constant(&mut self,\n                           bcx: Block<'bcx, 'tcx>,\n                           constant: &mir::Constant<'tcx>)"}, {"sha": "93953e3f58ae0f2f4d477f4948bf64d5f931afd2", "filename": "src/test/run-pass/mir_refs_correct.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e137c2ad0a4436693a21637edb89424fc7546377/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e137c2ad0a4436693a21637edb89424fc7546377/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs?ref=e137c2ad0a4436693a21637edb89424fc7546377", "patch": "@@ -68,6 +68,7 @@ enum CEnum {\n const C: u8 = 84;\n const C2: [u8; 5] = [42; 5];\n const C3: [u8; 3] = [42, 41, 40];\n+const C4: fn(u8) -> S = S;\n \n fn regular() -> u8 {\n     21\n@@ -198,6 +199,11 @@ fn t23() -> (CEnum, CEnum) {\n     (CEnum::A, CEnum::B)\n }\n \n+#[rustc_mir]\n+fn t24() -> fn(u8) -> S {\n+    C4\n+}\n+\n fn main(){\n     unsafe {\n         assert_eq!(t1()(), regular());\n@@ -240,5 +246,6 @@ fn main(){\n         assert_eq!(t21(), Unit);\n         assert_eq!(t22(), None);\n         assert_eq!(t23(), (CEnum::A, CEnum::B));\n+        assert_eq!(t24(), C4);\n     }\n }"}]}