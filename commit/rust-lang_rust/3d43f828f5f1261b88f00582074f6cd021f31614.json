{"sha": "3d43f828f5f1261b88f00582074f6cd021f31614", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNDNmODI4ZjVmMTI2MWI4OGYwMDU4MjA3NGY2Y2QwMjFmMzE2MTQ=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-30T15:26:38Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-07-02T11:59:39Z"}, "message": "Make custom trait object for `Future` generic", "tree": {"sha": "baff884a7b3e9f15880ac44867bb1016eea7f56f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baff884a7b3e9f15880ac44867bb1016eea7f56f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d43f828f5f1261b88f00582074f6cd021f31614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d43f828f5f1261b88f00582074f6cd021f31614", "html_url": "https://github.com/rust-lang/rust/commit/3d43f828f5f1261b88f00582074f6cd021f31614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d43f828f5f1261b88f00582074f6cd021f31614/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96c88e80fce9d1950aa4700bdeacee35cb9ac02", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96c88e80fce9d1950aa4700bdeacee35cb9ac02", "html_url": "https://github.com/rust-lang/rust/commit/a96c88e80fce9d1950aa4700bdeacee35cb9ac02"}], "stats": {"total": 149, "additions": 77, "deletions": 72}, "files": [{"sha": "c1778ef101ac6098131d994f9d174a7adf03c6b2", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=3d43f828f5f1261b88f00582074f6cd021f31614", "patch": "@@ -66,7 +66,7 @@ use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::task::{Context, Poll, UnsafeTask, TaskObj, LocalTaskObj};\n+use core::task::{Context, Poll, UnsafeFutureObj, FutureObj, LocalFutureObj};\n use core::convert::From;\n \n use raw_vec::RawVec;\n@@ -933,12 +933,12 @@ impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-unsafe impl<F: Future<Output = ()> + 'static> UnsafeTask for PinBox<F> {\n+unsafe impl<T, F: Future<Output = T> + 'static> UnsafeFutureObj<T> for PinBox<F> {\n     fn into_raw(self) -> *mut () {\n         PinBox::into_raw(self) as *mut ()\n     }\n \n-    unsafe fn poll(task: *mut (), cx: &mut Context) -> Poll<()> {\n+    unsafe fn poll(task: *mut (), cx: &mut Context) -> Poll<T> {\n         let ptr = task as *mut F;\n         let pin: PinMut<F> = PinMut::new_unchecked(&mut *ptr);\n         pin.poll(cx)\n@@ -950,29 +950,29 @@ unsafe impl<F: Future<Output = ()> + 'static> UnsafeTask for PinBox<F> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + Send + 'static> From<PinBox<F>> for TaskObj {\n-    fn from(boxed: PinBox<F>) -> Self {\n-        TaskObj::new(boxed)\n+impl<T, F: Future<Output = T> + Send + 'static> Into<FutureObj<T>> for PinBox<F> {\n+    fn into(self) -> FutureObj<T> {\n+        FutureObj::new(self)\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + Send + 'static> From<Box<F>> for TaskObj {\n-    fn from(boxed: Box<F>) -> Self {\n-        TaskObj::new(PinBox::from(boxed))\n+impl<T, F: Future<Output = T> + Send + 'static> Into<FutureObj<T>> for Box<F> {\n+    fn into(self) -> FutureObj<T> {\n+        FutureObj::new(PinBox::from(self))\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + 'static> From<PinBox<F>> for LocalTaskObj {\n-    fn from(boxed: PinBox<F>) -> Self {\n-        LocalTaskObj::new(boxed)\n+impl<T, F: Future<Output = T> + 'static> Into<LocalFutureObj<T>> for PinBox<F> {\n+    fn into(self) -> LocalFutureObj<T> {\n+        LocalFutureObj::new(self)\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + 'static> From<Box<F>> for LocalTaskObj {\n-    fn from(boxed: Box<F>) -> Self {\n-        LocalTaskObj::new(PinBox::from(boxed))\n+impl<T, F: Future<Output = T> + 'static> Into<LocalFutureObj<T>> for Box<F> {\n+    fn into(self) -> LocalFutureObj<T> {\n+        LocalFutureObj::new(PinBox::from(self))\n     }\n }"}, {"sha": "55ea5e724c1cc883d94df78f1a0ffde332b8d8bb", "filename": "src/libcore/task/executor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Flibcore%2Ftask%2Fexecutor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Flibcore%2Ftask%2Fexecutor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fexecutor.rs?ref=3d43f828f5f1261b88f00582074f6cd021f31614", "patch": "@@ -13,7 +13,7 @@\n             issue = \"50547\")]\n \n use fmt;\n-use super::{TaskObj, LocalTaskObj};\n+use super::{FutureObj, LocalFutureObj};\n \n /// A task executor.\n ///\n@@ -29,7 +29,7 @@ pub trait Executor {\n     ///\n     /// The executor may be unable to spawn tasks, either because it has\n     /// been shut down or is resource-constrained.\n-    fn spawn_obj(&mut self, task: TaskObj) -> Result<(), SpawnObjError>;\n+    fn spawn_obj(&mut self, task: FutureObj<()>) -> Result<(), SpawnObjError>;\n \n     /// Determine whether the executor is able to spawn new tasks.\n     ///\n@@ -76,7 +76,7 @@ pub struct SpawnObjError {\n     pub kind: SpawnErrorKind,\n \n     /// The task for which spawning was attempted\n-    pub task: TaskObj,\n+    pub task: FutureObj<()>,\n }\n \n /// The result of a failed spawn\n@@ -86,5 +86,5 @@ pub struct SpawnLocalObjError {\n     pub kind: SpawnErrorKind,\n \n     /// The task for which spawning was attempted\n-    pub task: LocalTaskObj,\n+    pub task: LocalFutureObj<()>,\n }"}, {"sha": "3ed3bd51cf644ea757c5ca0b18c3f3a4f71c6371", "filename": "src/libcore/task/future_obj.rs", "status": "renamed", "additions": 52, "deletions": 47, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Flibcore%2Ftask%2Ffuture_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Flibcore%2Ftask%2Ffuture_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Ffuture_obj.rs?ref=3d43f828f5f1261b88f00582074f6cd021f31614", "patch": "@@ -14,102 +14,107 @@\n \n use fmt;\n use future::Future;\n+use marker::PhantomData;\n use mem::PinMut;\n-use super::{Context, Poll};\n+use task::{Context, Poll};\n \n-/// A custom trait object for polling tasks, roughly akin to\n-/// `Box<Future<Output = ()>>`.\n-/// Contrary to `TaskObj`, `LocalTaskObj` does not have a `Send` bound.\n-pub struct LocalTaskObj {\n+/// A custom trait object for polling futures, roughly akin to\n+/// `Box<dyn Future<Output = T>>`.\n+/// Contrary to `FutureObj`, `LocalFutureObj` does not have a `Send` bound.\n+pub struct LocalFutureObj<T> {\n     ptr: *mut (),\n-    poll_fn: unsafe fn(*mut (), &mut Context) -> Poll<()>,\n+    poll_fn: unsafe fn(*mut (), &mut Context) -> Poll<T>,\n     drop_fn: unsafe fn(*mut ()),\n+    _marker: PhantomData<T>,\n }\n \n-impl LocalTaskObj {\n-    /// Create a `LocalTaskObj` from a custom trait object representation.\n+impl<T> LocalFutureObj<T> {\n+    /// Create a `LocalFutureObj` from a custom trait object representation.\n     #[inline]\n-    pub fn new<T: UnsafeTask>(t: T) -> LocalTaskObj {\n-        LocalTaskObj {\n-            ptr: t.into_raw(),\n-            poll_fn: T::poll,\n-            drop_fn: T::drop,\n+    pub fn new<F: UnsafeFutureObj<T>>(f: F) -> LocalFutureObj<T> {\n+        LocalFutureObj {\n+            ptr: f.into_raw(),\n+            poll_fn: F::poll,\n+            drop_fn: F::drop,\n+            _marker: PhantomData,\n         }\n     }\n \n-    /// Converts the `LocalTaskObj` into a `TaskObj`\n-    /// To make this operation safe one has to ensure that the `UnsafeTask`\n-    /// instance from which this `LocalTaskObj` was created actually implements\n-    /// `Send`.\n-    pub unsafe fn as_task_obj(self) -> TaskObj {\n-        TaskObj(self)\n+    /// Converts the `LocalFutureObj` into a `FutureObj`\n+    /// To make this operation safe one has to ensure that the `UnsafeFutureObj`\n+    /// instance from which this `LocalFutureObj` was created actually\n+    /// implements `Send`.\n+    #[inline]\n+    pub unsafe fn as_future_obj(self) -> FutureObj<T> {\n+        FutureObj(self)\n     }\n }\n \n-impl fmt::Debug for LocalTaskObj {\n+impl<T> fmt::Debug for LocalFutureObj<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"LocalTaskObj\")\n+        f.debug_struct(\"LocalFutureObj\")\n             .finish()\n     }\n }\n \n-impl From<TaskObj> for LocalTaskObj {\n-    fn from(task: TaskObj) -> LocalTaskObj {\n-        task.0\n+impl<T> From<FutureObj<T>> for LocalFutureObj<T> {\n+    #[inline]\n+    fn from(f: FutureObj<T>) -> LocalFutureObj<T> {\n+        f.0\n     }\n }\n \n-impl Future for LocalTaskObj {\n-    type Output = ();\n+impl<T> Future for LocalFutureObj<T> {\n+    type Output = T;\n \n     #[inline]\n-    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<()> {\n+    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<T> {\n         unsafe {\n             (self.poll_fn)(self.ptr, cx)\n         }\n     }\n }\n \n-impl Drop for LocalTaskObj {\n+impl<T> Drop for LocalFutureObj<T> {\n     fn drop(&mut self) {\n         unsafe {\n             (self.drop_fn)(self.ptr)\n         }\n     }\n }\n \n-/// A custom trait object for polling tasks, roughly akin to\n-/// `Box<Future<Output = ()> + Send>`.\n-pub struct TaskObj(LocalTaskObj);\n+/// A custom trait object for polling futures, roughly akin to\n+/// `Box<dyn Future<Output = T>> + Send`.\n+pub struct FutureObj<T>(LocalFutureObj<T>);\n \n-unsafe impl Send for TaskObj {}\n+unsafe impl<T> Send for FutureObj<T> {}\n \n-impl TaskObj {\n-    /// Create a `TaskObj` from a custom trait object representation.\n+impl<T> FutureObj<T> {\n+    /// Create a `FutureObj` from a custom trait object representation.\n     #[inline]\n-    pub fn new<T: UnsafeTask + Send>(t: T) -> TaskObj {\n-        TaskObj(LocalTaskObj::new(t))\n+    pub fn new<F: UnsafeFutureObj<T> + Send>(f: F) -> FutureObj<T> {\n+        FutureObj(LocalFutureObj::new(f))\n     }\n }\n \n-impl fmt::Debug for TaskObj {\n+impl<T> fmt::Debug for FutureObj<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"TaskObj\")\n+        f.debug_struct(\"FutureObj\")\n             .finish()\n     }\n }\n \n-impl Future for TaskObj {\n-    type Output = ();\n+impl<T> Future for FutureObj<T> {\n+    type Output = T;\n \n     #[inline]\n-    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<()> {\n+    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<T> {\n         let pinned_field = unsafe { PinMut::map_unchecked(self, |x| &mut x.0) };\n         pinned_field.poll(cx)\n     }\n }\n \n-/// A custom implementation of a task trait object for `TaskObj`, providing\n+/// A custom implementation of a future trait object for `FutureObj`, providing\n /// a hand-rolled vtable.\n ///\n /// This custom representation is typically used only in `no_std` contexts,\n@@ -118,25 +123,25 @@ impl Future for TaskObj {\n /// The implementor must guarantee that it is safe to call `poll` repeatedly (in\n /// a non-concurrent fashion) with the result of `into_raw` until `drop` is\n /// called.\n-pub unsafe trait UnsafeTask: 'static {\n+pub unsafe trait UnsafeFutureObj<T>: 'static {\n     /// Convert a owned instance into a (conceptually owned) void pointer.\n     fn into_raw(self) -> *mut ();\n \n-    /// Poll the task represented by the given void pointer.\n+    /// Poll the future represented by the given void pointer.\n     ///\n     /// # Safety\n     ///\n     /// The trait implementor must guarantee that it is safe to repeatedly call\n     /// `poll` with the result of `into_raw` until `drop` is called; such calls\n     /// are not, however, allowed to race with each other or with calls to `drop`.\n-    unsafe fn poll(task: *mut (), cx: &mut Context) -> Poll<()>;\n+    unsafe fn poll(future: *mut (), cx: &mut Context) -> Poll<T>;\n \n-    /// Drops the task represented by the given void pointer.\n+    /// Drops the future represented by the given void pointer.\n     ///\n     /// # Safety\n     ///\n     /// The trait implementor must guarantee that it is safe to call this\n     /// function once per `into_raw` invocation; that call cannot race with\n     /// other calls to `drop` or `poll`.\n-    unsafe fn drop(task: *mut ());\n+    unsafe fn drop(future: *mut ());\n }", "previous_filename": "src/libcore/task/task.rs"}, {"sha": "06cd7a9dd773ed648c06aca972008b685605f178", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=3d43f828f5f1261b88f00582074f6cd021f31614", "patch": "@@ -25,8 +25,8 @@ pub use self::executor::{\n mod poll;\n pub use self::poll::Poll;\n \n-mod task;\n-pub use self::task::{TaskObj, LocalTaskObj, UnsafeTask};\n+mod future_obj;\n+pub use self::future_obj::{FutureObj, LocalFutureObj, UnsafeFutureObj};\n \n mod wake;\n pub use self::wake::{Waker, LocalWaker, UnsafeWake};"}, {"sha": "3a67750e77e6bc91e458098b3d29dd4339491cf0", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=3d43f828f5f1261b88f00582074f6cd021f31614", "patch": "@@ -21,7 +21,7 @@ use std::sync::{\n };\n use std::task::{\n     Context, Poll, Wake,\n-    Executor, TaskObj, SpawnObjError,\n+    Executor, FutureObj, SpawnObjError,\n     local_waker_from_nonlocal,\n };\n \n@@ -37,7 +37,7 @@ impl Wake for Counter {\n \n struct NoopExecutor;\n impl Executor for NoopExecutor {\n-    fn spawn_obj(&mut self, _: TaskObj) -> Result<(), SpawnObjError> {\n+    fn spawn_obj(&mut self, _: FutureObj<T>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n }"}, {"sha": "a427b82af6a6b625cb2060aca346acb924e0b5b9", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43f828f5f1261b88f00582074f6cd021f31614/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=3d43f828f5f1261b88f00582074f6cd021f31614", "patch": "@@ -22,7 +22,7 @@ use std::sync::{\n use std::task::{\n     Context, Poll,\n     Wake, Waker, LocalWaker,\n-    Executor, TaskObj, SpawnObjError,\n+    Executor, FutureObj, SpawnObjError,\n     local_waker, local_waker_from_nonlocal,\n };\n \n@@ -44,7 +44,7 @@ impl Wake for Counter {\n struct NoopExecutor;\n \n impl Executor for NoopExecutor {\n-    fn spawn_obj(&mut self, _: TaskObj) -> Result<(), SpawnObjError> {\n+    fn spawn_obj(&mut self, _: FutureObj<()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n }"}]}