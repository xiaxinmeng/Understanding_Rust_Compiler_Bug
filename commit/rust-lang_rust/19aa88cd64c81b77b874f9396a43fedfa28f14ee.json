{"sha": "19aa88cd64c81b77b874f9396a43fedfa28f14ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YWE4OGNkNjRjODFiNzdiODc0ZjkzOTZhNDNmZWRmYTI4ZjE0ZWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-25T07:53:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-25T07:55:11Z"}, "message": "Stop using oldcomm in uv_global_loop tests", "tree": {"sha": "999412ca6a090c8bd291cc5675e7bfb449709b9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/999412ca6a090c8bd291cc5675e7bfb449709b9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19aa88cd64c81b77b874f9396a43fedfa28f14ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19aa88cd64c81b77b874f9396a43fedfa28f14ee", "html_url": "https://github.com/rust-lang/rust/commit/19aa88cd64c81b77b874f9396a43fedfa28f14ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19aa88cd64c81b77b874f9396a43fedfa28f14ee/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc0c5bb447ac8eba0a80599305c23db6c8a1ed6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0c5bb447ac8eba0a80599305c23db6c8a1ed6a", "html_url": "https://github.com/rust-lang/rust/commit/bc0c5bb447ac8eba0a80599305c23db6c8a1ed6a"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "8637470dd5407b0b9c79387ae503780f4acc4a75", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/19aa88cd64c81b77b874f9396a43fedfa28f14ee/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19aa88cd64c81b77b874f9396a43fedfa28f14ee/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=19aa88cd64c81b77b874f9396a43fedfa28f14ee", "patch": "@@ -126,15 +126,17 @@ mod test {\n \n     use core::iter;\n     use core::libc;\n-    use core::oldcomm;\n     use core::ptr;\n     use core::task;\n+    use core::cast::transmute;\n+    use core::libc::c_void;\n+    use core::pipes::{stream, SharedChan, Chan};\n \n     extern fn simple_timer_close_cb(timer_ptr: *ll::uv_timer_t) unsafe {\n         let exit_ch_ptr = ll::get_data_for_uv_handle(\n-            timer_ptr as *libc::c_void) as *oldcomm::Chan<bool>;\n-        let exit_ch = *exit_ch_ptr;\n-        oldcomm::send(exit_ch, true);\n+            timer_ptr as *libc::c_void);\n+        let exit_ch = transmute::<*c_void, ~Chan<bool>>(exit_ch_ptr);\n+        exit_ch.send(true);\n         log(debug, fmt!(\"EXIT_CH_PTR simple_timer_close_cb exit_ch_ptr: %?\",\n                        exit_ch_ptr));\n     }\n@@ -153,9 +155,8 @@ mod test {\n     }\n \n     fn impl_uv_hl_simple_timer(iotask: &IoTask) unsafe {\n-        let exit_po = oldcomm::Port::<bool>();\n-        let exit_ch = oldcomm::Chan(&exit_po);\n-        let exit_ch_ptr = ptr::addr_of(&exit_ch);\n+        let (exit_po, exit_ch) = stream::<bool>();\n+        let exit_ch_ptr: *libc::c_void = transmute(~exit_ch);\n         log(debug, fmt!(\"EXIT_CH_PTR newly created exit_ch_ptr: %?\",\n                        exit_ch_ptr));\n         let timer_handle = ll::timer_t();\n@@ -166,7 +167,7 @@ mod test {\n             if(init_status == 0i32) {\n                 ll::set_data_for_uv_handle(\n                     timer_ptr as *libc::c_void,\n-                    exit_ch_ptr as *libc::c_void);\n+                    exit_ch_ptr);\n                 let start_status = ll::timer_start(timer_ptr, simple_timer_cb,\n                                                    1u, 0u);\n                 if(start_status == 0i32) {\n@@ -179,41 +180,41 @@ mod test {\n                 fail ~\"failure on ll::timer_init()\";\n             }\n         };\n-        oldcomm::recv(exit_po);\n+        exit_po.recv();\n         log(debug, ~\"global_loop timer test: msg recv on exit_po, done..\");\n     }\n \n     #[test]\n     fn test_gl_uv_global_loop_high_level_global_timer() unsafe {\n         let hl_loop = &get_gl();\n-        let exit_po = oldcomm::Port::<()>();\n-        let exit_ch = oldcomm::Chan(&exit_po);\n+        let (exit_po, exit_ch) = stream::<()>();\n         task::spawn_sched(task::ManualThreads(1u), || {\n             let hl_loop = &get_gl();\n             impl_uv_hl_simple_timer(hl_loop);\n-            oldcomm::send(exit_ch, ());\n+            exit_ch.send(());\n         });\n         impl_uv_hl_simple_timer(hl_loop);\n-        oldcomm::recv(exit_po);\n+        exit_po.recv();\n     }\n \n     // keeping this test ignored until some kind of stress-test-harness\n     // is set up for the build bots\n     #[test]\n     #[ignore]\n     fn test_stress_gl_uv_global_loop_high_level_global_timer() unsafe {\n-        let exit_po = oldcomm::Port::<()>();\n-        let exit_ch = oldcomm::Chan(&exit_po);\n+        let (exit_po, exit_ch) = stream::<()>();\n+        let exit_ch = SharedChan(exit_ch);\n         let cycles = 5000u;\n         for iter::repeat(cycles) {\n+            let exit_ch_clone = exit_ch.clone();\n             task::spawn_sched(task::ManualThreads(1u), || {\n                 let hl_loop = &get_gl();\n                 impl_uv_hl_simple_timer(hl_loop);\n-                oldcomm::send(exit_ch, ());\n+                exit_ch_clone.send(());\n             });\n         };\n         for iter::repeat(cycles) {\n-            oldcomm::recv(exit_po);\n+            exit_po.recv();\n         };\n         log(debug, ~\"test_stress_gl_uv_global_loop_high_level_global_timer\"+\n             ~\" exiting sucessfully!\");"}]}