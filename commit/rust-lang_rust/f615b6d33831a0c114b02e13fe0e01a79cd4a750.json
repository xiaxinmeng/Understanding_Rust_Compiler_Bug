{"sha": "f615b6d33831a0c114b02e13fe0e01a79cd4a750", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MTViNmQzMzgzMWEwYzExNGIwMmUxM2ZlMGUwMWE3OWNkNGE3NTA=", "commit": {"author": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-15T16:23:02Z"}, "committer": {"name": "Prabakaran Kumaresshan", "email": "4676330+nixphix@users.noreply.github.com", "date": "2020-08-15T16:23:02Z"}, "message": "remove empty lines", "tree": {"sha": "a1d487d7f22022aa88aa8ea4737ea5453ac572a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1d487d7f22022aa88aa8ea4737ea5453ac572a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f615b6d33831a0c114b02e13fe0e01a79cd4a750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f615b6d33831a0c114b02e13fe0e01a79cd4a750", "html_url": "https://github.com/rust-lang/rust/commit/f615b6d33831a0c114b02e13fe0e01a79cd4a750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f615b6d33831a0c114b02e13fe0e01a79cd4a750/comments", "author": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nixphix", "id": 4676330, "node_id": "MDQ6VXNlcjQ2NzYzMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4676330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixphix", "html_url": "https://github.com/nixphix", "followers_url": "https://api.github.com/users/nixphix/followers", "following_url": "https://api.github.com/users/nixphix/following{/other_user}", "gists_url": "https://api.github.com/users/nixphix/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixphix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixphix/subscriptions", "organizations_url": "https://api.github.com/users/nixphix/orgs", "repos_url": "https://api.github.com/users/nixphix/repos", "events_url": "https://api.github.com/users/nixphix/events{/privacy}", "received_events_url": "https://api.github.com/users/nixphix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b54341a9d7fea71b1aabcebbcea70462904fd57d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b54341a9d7fea71b1aabcebbcea70462904fd57d", "html_url": "https://github.com/rust-lang/rust/commit/b54341a9d7fea71b1aabcebbcea70462904fd57d"}], "stats": {"total": 7, "additions": 0, "deletions": 7}, "files": [{"sha": "340b8fd2fe12c14954a26d0f94f2da7b637ddf0a", "filename": "library/std/src/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f615b6d33831a0c114b02e13fe0e01a79cd4a750/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615b6d33831a0c114b02e13fe0e01a79cd4a750/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=f615b6d33831a0c114b02e13fe0e01a79cd4a750", "patch": "@@ -223,7 +223,6 @@ impl FileExt for fs::File {\n }\n \n /// Unix-specific extensions to [`fs::Permissions`].\n-///\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `st_mode` bits that contain the standard\n@@ -299,7 +298,6 @@ impl PermissionsExt for Permissions {\n }\n \n /// Unix-specific extensions to [`fs::OpenOptions`].\n-///\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -367,7 +365,6 @@ impl OpenOptionsExt for OpenOptions {\n */\n \n /// Unix-specific extensions to [`fs::Metadata`].\n-///\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the ID of the device containing the file.\n@@ -746,7 +743,6 @@ impl FileTypeExt for fs::FileType {\n }\n \n /// Unix-specific extension methods for [`fs::DirEntry`].\n-///\n #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n@@ -807,7 +803,6 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n }\n \n /// Unix-specific extensions to [`fs::DirBuilder`].\n-///\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to"}, {"sha": "3ffa5be1b3bf1c64eafd74e09694cb4723822ae5", "filename": "library/std/src/sys/vxworks/ext/process.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f615b6d33831a0c114b02e13fe0e01a79cd4a750/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615b6d33831a0c114b02e13fe0e01a79cd4a750/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs?ref=f615b6d33831a0c114b02e13fe0e01a79cd4a750", "patch": "@@ -10,7 +10,6 @@ use crate::sys::vxworks::ext::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n /// Unix-specific extensions to the [`process::Command`] builder.\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user ID. This translates to a\n@@ -149,7 +148,6 @@ impl CommandExt for process::Command {\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}]}