{"sha": "8affef2ccba424f37445f6df6592426600d00a31", "node_id": "C_kwDOAAsO6NoAKDhhZmZlZjJjY2JhNDI0ZjM3NDQ1ZjZkZjY1OTI0MjY2MDBkMDBhMzE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T13:48:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:12:07Z"}, "message": "add intrinsic to access vtable size and align", "tree": {"sha": "bf7eaa8bff6f56ebce2e23eea36f5997e78340cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf7eaa8bff6f56ebce2e23eea36f5997e78340cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8affef2ccba424f37445f6df6592426600d00a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8affef2ccba424f37445f6df6592426600d00a31", "html_url": "https://github.com/rust-lang/rust/commit/8affef2ccba424f37445f6df6592426600d00a31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8affef2ccba424f37445f6df6592426600d00a31/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a32d01f4cbc032efa093ff672f1e33087f0efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a32d01f4cbc032efa093ff672f1e33087f0efb", "html_url": "https://github.com/rust-lang/rust/commit/b5a32d01f4cbc032efa093ff672f1e33087f0efb"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "01e276ac9028543091b48263aae4b9c2389ed5bb", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8affef2ccba424f37445f6df6592426600d00a31/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8affef2ccba424f37445f6df6592426600d00a31/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=8affef2ccba424f37445f6df6592426600d00a31", "patch": "@@ -363,6 +363,20 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                 return;\n             }\n \n+            sym::vtable_size | sym::vtable_align => {\n+                let ptr = args[0].immediate();\n+                let layout = self.layout_of(self.tcx.types.usize);\n+                let type_ = self.backend_type(layout);\n+                let offset = match name {\n+                    sym::vtable_size => 1,\n+                    sym::vtable_align => 2,\n+                    _ => bug!(),\n+                };\n+                let offset = self.const_int(type_, offset);\n+                let vtable_field_ptr = self.inbounds_gep(type_, ptr, &[offset]);\n+                self.load(type_, vtable_field_ptr, layout.align.abi)\n+            }\n+\n             _ if name.as_str().starts_with(\"simd_\") => {\n                 match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                     Ok(llval) => llval,"}, {"sha": "025f8647c95b554438155445e7b9fd55cb63ef05", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8affef2ccba424f37445f6df6592426600d00a31/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8affef2ccba424f37445f6df6592426600d00a31/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=8affef2ccba424f37445f6df6592426600d00a31", "patch": "@@ -492,6 +492,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = self.raw_eq_intrinsic(&args[0], &args[1])?;\n                 self.write_scalar(result, dest)?;\n             }\n+\n+            sym::vtable_size => {\n+                let ptr = self.read_pointer(&args[0])?;\n+                let (size, _align) = self.get_vtable_size_and_align(ptr)?;\n+                self.write_scalar(Scalar::from_machine_usize(size.bytes(), self), dest)?;\n+            }\n+            sym::vtable_align => {\n+                let ptr = self.read_pointer(&args[0])?;\n+                let (_size, align) = self.get_vtable_size_and_align(ptr)?;\n+                self.write_scalar(Scalar::from_machine_usize(align.bytes(), self), dest)?;\n+            }\n+\n             _ => return Ok(false),\n         }\n "}, {"sha": "a207927c9d299e1a4c35e8241a62554ce41e9027", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8affef2ccba424f37445f6df6592426600d00a31/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8affef2ccba424f37445f6df6592426600d00a31/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8affef2ccba424f37445f6df6592426600d00a31", "patch": "@@ -1564,6 +1564,8 @@ symbols! {\n         volatile_store,\n         vreg,\n         vreg_low16,\n+        vtable_align,\n+        vtable_size,\n         warn,\n         wasm_abi,\n         wasm_import_module,"}, {"sha": "3f2a0da8d65156b2f20f3ad24b1b1944de54b30b", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8affef2ccba424f37445f6df6592426600d00a31/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8affef2ccba424f37445f6df6592426600d00a31/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=8affef2ccba424f37445f6df6592426600d00a31", "patch": "@@ -400,6 +400,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n \n             sym::const_eval_select => (4, vec![param(0), param(1), param(2)], param(3)),\n \n+            sym::vtable_size | sym::vtable_align => {\n+                (0, vec![tcx.mk_imm_ptr(tcx.mk_unit())], tcx.types.usize)\n+            }\n+\n             other => {\n                 tcx.sess.emit_err(UnrecognizedIntrinsicFunction { span: it.span, name: other });\n                 return;"}, {"sha": "dc82b32214c37d05b7fa4ea728a31768c42ed3da", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8affef2ccba424f37445f6df6592426600d00a31/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8affef2ccba424f37445f6df6592426600d00a31/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=8affef2ccba424f37445f6df6592426600d00a31", "patch": "@@ -2291,6 +2291,16 @@ extern \"rust-intrinsic\" {\n     /// [`std::hint::black_box`]: crate::hint::black_box\n     #[rustc_const_unstable(feature = \"const_black_box\", issue = \"none\")]\n     pub fn black_box<T>(dummy: T) -> T;\n+\n+    /// `ptr` must point to a vtable.\n+    /// The intrinsic will return the size stored in that vtable.\n+    #[cfg(not(bootstrap))]\n+    pub fn vtable_size(ptr: *const ()) -> usize;\n+\n+    /// `ptr` must point to a vtable.\n+    /// The intrinsic will return the alignment stored in that vtable.\n+    #[cfg(not(bootstrap))]\n+    pub fn vtable_align(ptr: *const ()) -> usize;\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "fc0fd221b4022c306148e62572139aa7cc209bdf", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8affef2ccba424f37445f6df6592426600d00a31/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8affef2ccba424f37445f6df6592426600d00a31/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=8affef2ccba424f37445f6df6592426600d00a31", "patch": "@@ -180,10 +180,20 @@ pub struct DynMetadata<Dyn: ?Sized> {\n     phantom: crate::marker::PhantomData<Dyn>,\n }\n \n+/// Opaque type for accessing vtables.\n+///\n+/// Private implementation detail of `DynMetadata::size_of` etc.\n+/// Must be zero-sized since there is conceptually not actually any Abstract Machine memory behind this pointer.\n+/// However, we can require pointer alignment.\n+#[repr(C)]\n+#[cfg(not(bootstrap))]\n+struct VTable([usize; 0]);\n+\n /// The common prefix of all vtables. It is followed by function pointers for trait methods.\n ///\n /// Private implementation detail of `DynMetadata::size_of` etc.\n #[repr(C)]\n+#[cfg(bootstrap)]\n struct VTable {\n     drop_in_place: fn(*mut ()),\n     size_of: usize,\n@@ -194,13 +204,25 @@ impl<Dyn: ?Sized> DynMetadata<Dyn> {\n     /// Returns the size of the type associated with this vtable.\n     #[inline]\n     pub fn size_of(self) -> usize {\n-        self.vtable_ptr.size_of\n+        #[cfg(bootstrap)]\n+        return self.vtable_ptr.size_of;\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: DynMetadata always contains a valid vtable pointer\n+        return unsafe {\n+            crate::intrinsics::vtable_size(self.vtable_ptr as *const VTable as *const ())\n+        };\n     }\n \n     /// Returns the alignment of the type associated with this vtable.\n     #[inline]\n     pub fn align_of(self) -> usize {\n-        self.vtable_ptr.align_of\n+        #[cfg(bootstrap)]\n+        return self.vtable_ptr.align_of;\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: DynMetadata always contains a valid vtable pointer\n+        return unsafe {\n+            crate::intrinsics::vtable_align(self.vtable_ptr as *const VTable as *const ())\n+        };\n     }\n \n     /// Returns the size and alignment together as a `Layout`"}]}