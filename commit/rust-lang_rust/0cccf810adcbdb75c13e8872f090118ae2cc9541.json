{"sha": "0cccf810adcbdb75c13e8872f090118ae2cc9541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjY2NmODEwYWRjYmRiNzVjMTNlODg3MmYwOTAxMThhZTJjYzk1NDE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-04T09:07:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-04T09:07:18Z"}, "message": "Rollup merge of #49559 - djc:resize-with, r=TimNN\n\nIntroduce Vec::resize_with method (see #41758)\n\nIn #41758, the libs team decided they preferred `Vec::resize_with` over `Vec::resize_default()`. Here is an implementation to get this moving forward.\n\nI don't know what the removal process for `Vec::resize_default()` should be, so I've left it in place for now. Would be happy to follow up with its removal.", "tree": {"sha": "104af964930e40e9428e73f62d4154dc7a30a0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104af964930e40e9428e73f62d4154dc7a30a0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cccf810adcbdb75c13e8872f090118ae2cc9541", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxJXGCRBK7hj4Ov3rIwAAdHIIAD05/YjztZA/P0YfDrZFXUYm\n318ewCbwvN5rTIeIdaKp1krRJOqyuqOMEKmfKkqyEo3KlV6doFRE8FvlVIcAMYsB\n8oq4B1XMA5MJ9mDAhIJb6s9Z9yCMBJKo+/+nkWu41a76lH5QMr68sdiVsSC9E8BU\n49HasgCHbIcGV4CIo30PYarQV4gcsn4uC8VAfeoLVOjZHve6Duz2AlyZ6zOz7O//\noxoFLu7HZGykKIGZzaLUOuD8cbMikpCOs6uT6rMabJ9drtZik0yrgN+O8z5arNl+\nnBNpMjAoNmsokTsoMcdIz/K6wNjAUmAD3l9AEZH0xZlc8/YpBgYOyM04va3oUx8=\n=2D77\n-----END PGP SIGNATURE-----\n", "payload": "tree 104af964930e40e9428e73f62d4154dc7a30a0de\nparent b5ceda86aa4a374810a214cfd5366c24f6048342\nparent da0ceeff5a7839427c751cf056e16e67217b12ea\nauthor kennytm <kennytm@gmail.com> 1522832838 +0200\ncommitter GitHub <noreply@github.com> 1522832838 +0200\n\nRollup merge of #49559 - djc:resize-with, r=TimNN\n\nIntroduce Vec::resize_with method (see #41758)\n\nIn #41758, the libs team decided they preferred `Vec::resize_with` over `Vec::resize_default()`. Here is an implementation to get this moving forward.\n\nI don't know what the removal process for `Vec::resize_default()` should be, so I've left it in place for now. Would be happy to follow up with its removal.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cccf810adcbdb75c13e8872f090118ae2cc9541", "html_url": "https://github.com/rust-lang/rust/commit/0cccf810adcbdb75c13e8872f090118ae2cc9541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cccf810adcbdb75c13e8872f090118ae2cc9541/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ceda86aa4a374810a214cfd5366c24f6048342", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ceda86aa4a374810a214cfd5366c24f6048342", "html_url": "https://github.com/rust-lang/rust/commit/b5ceda86aa4a374810a214cfd5366c24f6048342"}, {"sha": "da0ceeff5a7839427c751cf056e16e67217b12ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0ceeff5a7839427c751cf056e16e67217b12ea", "html_url": "https://github.com/rust-lang/rust/commit/da0ceeff5a7839427c751cf056e16e67217b12ea"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "02008310b81613fe0b6e00c29d139e25f1d17315", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 57, "deletions": 7, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0cccf810adcbdb75c13e8872f090118ae2cc9541/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cccf810adcbdb75c13e8872f090118ae2cc9541/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=0cccf810adcbdb75c13e8872f090118ae2cc9541", "patch": "@@ -1283,6 +1283,49 @@ impl<T> Vec<T> {\n         }\n         other\n     }\n+\n+    /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n+    ///\n+    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n+    /// difference, with each additional slot filled with the result of\n+    /// calling the closure `f`. The return values from `f` will end up\n+    /// in the `Vec` in the order they have been generated.\n+    ///\n+    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n+    ///\n+    /// This method uses a closure to create new values on every push. If\n+    /// you'd rather [`Clone`] a given value, use [`resize`]. If you want\n+    /// to use the [`Default`] trait to generate values, you can pass\n+    /// [`Default::default()`] as the second argument..\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_resize_with)]\n+    ///\n+    /// let mut vec = vec![1, 2, 3];\n+    /// vec.resize_with(5, Default::default);\n+    /// assert_eq!(vec, [1, 2, 3, 0, 0]);\n+    ///\n+    /// let mut vec = vec![];\n+    /// let mut p = 1;\n+    /// vec.resize_with(4, || { p *= 2; p });\n+    /// assert_eq!(vec, [2, 4, 8, 16]);\n+    /// ```\n+    ///\n+    /// [`resize`]: #method.resize\n+    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    #[unstable(feature = \"vec_resize_with\", issue = \"41758\")]\n+    pub fn resize_with<F>(&mut self, new_len: usize, f: F)\n+        where F: FnMut() -> T\n+    {\n+        let len = self.len();\n+        if new_len > len {\n+            self.extend_with(new_len - len, ExtendFunc(f));\n+        } else {\n+            self.truncate(new_len);\n+        }\n+    }\n }\n \n impl<T: Clone> Vec<T> {\n@@ -1293,8 +1336,8 @@ impl<T: Clone> Vec<T> {\n     /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n     ///\n     /// This method requires [`Clone`] to be able clone the passed value. If\n-    /// you'd rather create a value with [`Default`] instead, see\n-    /// [`resize_default`].\n+    /// you need more flexibility (or want to rely on [`Default`] instead of\n+    /// [`Clone`]), use [`resize_with`].\n     ///\n     /// # Examples\n     ///\n@@ -1310,7 +1353,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// [`Clone`]: ../../std/clone/trait.Clone.html\n     /// [`Default`]: ../../std/default/trait.Default.html\n-    /// [`resize_default`]: #method.resize_default\n+    /// [`resize_with`]: #method.resize_with\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n@@ -1389,24 +1432,31 @@ impl<T: Default> Vec<T> {\n \n // This code generalises `extend_with_{element,default}`.\n trait ExtendWith<T> {\n-    fn next(&self) -> T;\n+    fn next(&mut self) -> T;\n     fn last(self) -> T;\n }\n \n struct ExtendElement<T>(T);\n impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n-    fn next(&self) -> T { self.0.clone() }\n+    fn next(&mut self) -> T { self.0.clone() }\n     fn last(self) -> T { self.0 }\n }\n \n struct ExtendDefault;\n impl<T: Default> ExtendWith<T> for ExtendDefault {\n-    fn next(&self) -> T { Default::default() }\n+    fn next(&mut self) -> T { Default::default() }\n     fn last(self) -> T { Default::default() }\n }\n+\n+struct ExtendFunc<F>(F);\n+impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {\n+    fn next(&mut self) -> T { (self.0)() }\n+    fn last(mut self) -> T { (self.0)() }\n+}\n+\n impl<T> Vec<T> {\n     /// Extend the vector by `n` values, using the given generator.\n-    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, value: E) {\n+    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {\n         self.reserve(n);\n \n         unsafe {"}]}