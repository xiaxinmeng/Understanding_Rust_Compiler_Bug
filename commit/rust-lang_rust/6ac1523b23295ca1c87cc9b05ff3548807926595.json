{"sha": "6ac1523b23295ca1c87cc9b05ff3548807926595", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzE1MjNiMjMyOTVjYTFjODdjYzliMDVmZjM1NDg4MDc5MjY1OTU=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2020-08-20T17:07:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-20T17:07:32Z"}, "message": "Rollup merge of #75733 - pickfire:patch-3, r=matklad\n\nRemove duplicated alloc vec bench push_all_move\n\npush_all_move is the same as extend", "tree": {"sha": "ae3f65397f7189c11f2ec6678f4d976f24567beb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae3f65397f7189c11f2ec6678f4d976f24567beb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac1523b23295ca1c87cc9b05ff3548807926595", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPq3UCRBK7hj4Ov3rIwAAdHIIAENyj3BgDeD/NHvG+a8eDyR6\ngkLQLMGlNpMrN9GLvyeEbkrpkZDtyrGyVKirAYlPWf/xvqRkg4VwHc4MFKeT5OFj\ncFTHC4a5OVn5Aqb01+vnlo6Gi7eObOrTSCvgUAHjU3QS66gvRFB90YtrzaZxzDog\nKGqhTZh1ndHzFbCgmAN5c5tlWbkMTScAmSQAydoTr3qkodpP2CefzVFE72mZ5hZ0\nSNRAcIoC/OdkQN02TJeyJaUAtRrzhAAKHQGN4d3jMdREWGOmFySKjGO+xwejFYd/\n+RRbJ9ulPA1s+Sj6VXpXKMON8J7gYLK7UkyV5uL5Qzz/THcJjtisSB/GmylbC18=\n=i1o+\n-----END PGP SIGNATURE-----\n", "payload": "tree ae3f65397f7189c11f2ec6678f4d976f24567beb\nparent 16b9b9017a30006de624935a44a1df8c02673592\nparent 4f2e182c5f12811689541eaed2d68014aab29eb1\nauthor Josh Stone <cuviper@gmail.com> 1597943252 -0700\ncommitter GitHub <noreply@github.com> 1597943252 -0700\n\nRollup merge of #75733 - pickfire:patch-3, r=matklad\n\nRemove duplicated alloc vec bench push_all_move\n\npush_all_move is the same as extend\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac1523b23295ca1c87cc9b05ff3548807926595", "html_url": "https://github.com/rust-lang/rust/commit/6ac1523b23295ca1c87cc9b05ff3548807926595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac1523b23295ca1c87cc9b05ff3548807926595/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b9b9017a30006de624935a44a1df8c02673592", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b9b9017a30006de624935a44a1df8c02673592", "html_url": "https://github.com/rust-lang/rust/commit/16b9b9017a30006de624935a44a1df8c02673592"}, {"sha": "4f2e182c5f12811689541eaed2d68014aab29eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2e182c5f12811689541eaed2d68014aab29eb1", "html_url": "https://github.com/rust-lang/rust/commit/4f2e182c5f12811689541eaed2d68014aab29eb1"}], "stats": {"total": 79, "additions": 15, "deletions": 64}, "files": [{"sha": "4e71eec03e5bff622aa9c9ee26ae7643f386ff2b", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 15, "deletions": 64, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/6ac1523b23295ca1c87cc9b05ff3548807926595/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac1523b23295ca1c87cc9b05ff3548807926595/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=6ac1523b23295ca1c87cc9b05ff3548807926595", "patch": "@@ -213,7 +213,7 @@ fn bench_extend_1000_1000(b: &mut Bencher) {\n     do_bench_extend(b, 1000, 1000)\n }\n \n-fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) {\n+fn do_bench_extend_from_slice(b: &mut Bencher, dst_len: usize, src_len: usize) {\n     let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n     let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n \n@@ -228,87 +228,38 @@ fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) {\n }\n \n #[bench]\n-fn bench_push_all_0000_0000(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 0)\n+fn bench_extend_from_slice_0000_0000(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 0, 0)\n }\n \n #[bench]\n-fn bench_push_all_0000_0010(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 10)\n+fn bench_extend_from_slice_0000_0010(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 0, 10)\n }\n \n #[bench]\n-fn bench_push_all_0000_0100(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 100)\n+fn bench_extend_from_slice_0000_0100(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 0, 100)\n }\n \n #[bench]\n-fn bench_push_all_0000_1000(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 1000)\n+fn bench_extend_from_slice_0000_1000(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 0, 1000)\n }\n \n #[bench]\n-fn bench_push_all_0010_0010(b: &mut Bencher) {\n-    do_bench_push_all(b, 10, 10)\n+fn bench_extend_from_slice_0010_0010(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 10, 10)\n }\n \n #[bench]\n-fn bench_push_all_0100_0100(b: &mut Bencher) {\n-    do_bench_push_all(b, 100, 100)\n+fn bench_extend_from_slice_0100_0100(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 100, 100)\n }\n \n #[bench]\n-fn bench_push_all_1000_1000(b: &mut Bencher) {\n-    do_bench_push_all(b, 1000, 1000)\n-}\n-\n-fn do_bench_push_all_move(b: &mut Bencher, dst_len: usize, src_len: usize) {\n-    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n-    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let mut dst = dst.clone();\n-        dst.extend(src.clone());\n-        assert_eq!(dst.len(), dst_len + src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 0)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0010(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0100(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_1000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 1000)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0010_0010(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 10, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0100_0100(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 100, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_1000_1000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 1000, 1000)\n+fn bench_extend_from_slice_1000_1000(b: &mut Bencher) {\n+    do_bench_extend_from_slice(b, 1000, 1000)\n }\n \n fn do_bench_clone(b: &mut Bencher, src_len: usize) {"}]}