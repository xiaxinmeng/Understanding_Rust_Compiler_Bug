{"sha": "5af8f1d8d7e78722eb7c89e3f0459ab81c3aebbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjhmMWQ4ZDdlNzg3MjJlYjdjODllM2YwNDU5YWI4MWMzYWViYmM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-04T20:35:09Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-21T18:46:11Z"}, "message": "Fixes primitive sidebar link generation", "tree": {"sha": "f6fd731e4f1d6a986e6d53a729476e19aa4a8999", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6fd731e4f1d6a986e6d53a729476e19aa4a8999"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af8f1d8d7e78722eb7c89e3f0459ab81c3aebbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af8f1d8d7e78722eb7c89e3f0459ab81c3aebbc", "html_url": "https://github.com/rust-lang/rust/commit/5af8f1d8d7e78722eb7c89e3f0459ab81c3aebbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af8f1d8d7e78722eb7c89e3f0459ab81c3aebbc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76ee83254ec0398da554f25c2168d917ba60f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76ee83254ec0398da554f25c2168d917ba60f1c", "html_url": "https://github.com/rust-lang/rust/commit/b76ee83254ec0398da554f25c2168d917ba60f1c"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "1ce7c9cfc8ac135ea1c9cc1d3a201b35a0bb292f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5af8f1d8d7e78722eb7c89e3f0459ab81c3aebbc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af8f1d8d7e78722eb7c89e3f0459ab81c3aebbc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5af8f1d8d7e78722eb7c89e3f0459ab81c3aebbc", "patch": "@@ -4234,13 +4234,30 @@ impl<'a> fmt::Display for Sidebar<'a> {\n     }\n }\n \n-fn get_methods(i: &clean::Impl, for_deref: bool) -> Vec<String> {\n+fn get_next_url(used_links: &mut FxHashSet<String>, url: String) -> String {\n+    if used_links.insert(url.clone()) {\n+        return url;\n+    }\n+    let mut add = 1;\n+    while used_links.insert(format!(\"{}-{}\", url, add)) == false {\n+        add += 1;\n+    }\n+    format!(\"{}-{}\", url, add)\n+}\n+\n+fn get_methods(\n+    i: &clean::Impl,\n+    for_deref: bool,\n+    used_links: &mut FxHashSet<String>,\n+) -> Vec<String> {\n     i.items.iter().filter_map(|item| {\n         match item.name {\n             // Maybe check with clean::Visibility::Public as well?\n             Some(ref name) if !name.is_empty() && item.visibility.is_some() && item.is_method() => {\n                 if !for_deref || should_render_item(item, false) {\n-                    Some(format!(\"<a href=\\\"#method.{name}\\\">{name}</a>\", name = name))\n+                    Some(format!(\"<a href=\\\"#{}\\\">{}</a>\",\n+                                 get_next_url(used_links, format!(\"method.{}\", name)),\n+                                 name))\n                 } else {\n                     None\n                 }\n@@ -4270,13 +4287,20 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n     let mut out = String::new();\n     let c = cache();\n     if let Some(v) = c.impls.get(&it.def_id) {\n-        let ret = v.iter()\n-                   .filter(|i| i.inner_impl().trait_.is_none())\n-                   .flat_map(|i| get_methods(i.inner_impl(), false))\n-                   .collect::<String>();\n-        if !ret.is_empty() {\n-            out.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#methods\\\">Methods\\\n-                                   </a><div class=\\\"sidebar-links\\\">{}</div>\", ret));\n+        let mut used_links = FxHashSet::default();\n+\n+        {\n+            let used_links_bor = Rc::new(RefCell::new(&mut used_links));\n+            let ret = v.iter()\n+                       .filter(|i| i.inner_impl().trait_.is_none())\n+                       .flat_map(move |i| get_methods(i.inner_impl(),\n+                                                      false,\n+                                                      &mut used_links_bor.borrow_mut()))\n+                       .collect::<String>();\n+            if !ret.is_empty() {\n+                out.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#methods\\\">Methods\\\n+                                       </a><div class=\\\"sidebar-links\\\">{}</div>\", ret));\n+            }\n         }\n \n         if v.iter().any(|i| i.inner_impl().trait_.is_some()) {\n@@ -4301,35 +4325,38 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         out.push_str(\"</a>\");\n                         let ret = impls.iter()\n                                        .filter(|i| i.inner_impl().trait_.is_none())\n-                                       .flat_map(|i| get_methods(i.inner_impl(), true))\n+                                       .flat_map(|i| get_methods(i.inner_impl(),\n+                                                                 true,\n+                                                                 &mut used_links))\n                                        .collect::<String>();\n                         out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", ret));\n                     }\n                 }\n             }\n             let format_impls = |impls: Vec<&Impl>| {\n                 let mut links = FxHashSet::default();\n+\n                 impls.iter()\n-                           .filter_map(|i| {\n-                               let is_negative_impl = is_negative_impl(i.inner_impl());\n-                               if let Some(ref i) = i.inner_impl().trait_ {\n-                                   let i_display = format!(\"{:#}\", i);\n-                                   let out = Escape(&i_display);\n-                                   let encoded = small_url_encode(&format!(\"{:#}\", i));\n-                                   let generated = format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n-                                                           encoded,\n-                                                           if is_negative_impl { \"!\" } else { \"\" },\n-                                                           out);\n-                                   if links.insert(generated.clone()) {\n-                                       Some(generated)\n-                                   } else {\n-                                       None\n-                                   }\n-                               } else {\n-                                   None\n-                               }\n-                           })\n-                           .collect::<String>()\n+                     .filter_map(|i| {\n+                         let is_negative_impl = is_negative_impl(i.inner_impl());\n+                         if let Some(ref i) = i.inner_impl().trait_ {\n+                             let i_display = format!(\"{:#}\", i);\n+                             let out = Escape(&i_display);\n+                             let encoded = small_url_encode(&format!(\"{:#}\", i));\n+                             let generated = format!(\"<a href=\\\"#impl-{}\\\">{}{}</a>\",\n+                                                     encoded,\n+                                                     if is_negative_impl { \"!\" } else { \"\" },\n+                                                     out);\n+                             if links.insert(generated.clone()) {\n+                                 Some(generated)\n+                             } else {\n+                                 None\n+                             }\n+                         } else {\n+                             None\n+                         }\n+                     })\n+                     .collect::<String>()\n             };\n \n             let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) = v"}]}