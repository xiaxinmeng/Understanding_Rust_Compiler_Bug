{"sha": "3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNWIxYjdkNjNmNTVhYzk2ZmM3Y2QwNmRmMDFlMGYwZTRmNDlkNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-03T16:38:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-03T16:38:02Z"}, "message": "Auto merge of #69371 - tmiasko:weak-lang-cycle, r=alexcrichton\n\nImprove linking of crates with circular dependencies\n\nPreviously, the code responsible for handling the cycles between crates\nintroduces through weak lang items, would keep a set of missing language\nitems:\n\n* extending it with items missing from the current crate,\n* removing items provided by the current crate,\n* grouping the crates when the set changed from non-empty back to empty.\n\nThis could produce incorrect results, if a lang item was missing from a\ncrate that comes after the crate that provides it (in the loop iteration\norder). In that case the grouping would not take place.\n\nThe changes here address this specific failure scenario by keeping track\nof two separate sets of crates. Those that are required to link successfully,\nand those that are available for linking.\n\nVerified using test case from #69368.", "tree": {"sha": "e65b06d3793a85cf652ee6886c54f08e98ada822", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e65b06d3793a85cf652ee6886c54f08e98ada822"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "html_url": "https://github.com/rust-lang/rust/commit/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b135c739fb542d2c78e30f3e945ff3e528942190", "url": "https://api.github.com/repos/rust-lang/rust/commits/b135c739fb542d2c78e30f3e945ff3e528942190", "html_url": "https://github.com/rust-lang/rust/commit/b135c739fb542d2c78e30f3e945ff3e528942190"}, {"sha": "44dba79124c73585812fa781e425c8a0644c01ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/44dba79124c73585812fa781e425c8a0644c01ad", "html_url": "https://github.com/rust-lang/rust/commit/44dba79124c73585812fa781e425c8a0644c01ad"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "847b5b81d5adce4a140eb18cbfb909bc4d64fe42", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "patch": "@@ -1519,17 +1519,25 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n     // for the current implementation of the standard library.\n     let mut group_end = None;\n     let mut group_start = None;\n-    let mut end_with = FxHashSet::default();\n+    // Crates available for linking thus far.\n+    let mut available = FxHashSet::default();\n+    // Crates required to satisfy dependencies discovered so far.\n+    let mut required = FxHashSet::default();\n+\n     let info = &codegen_results.crate_info;\n     for &(cnum, _) in deps.iter().rev() {\n         if let Some(missing) = info.missing_lang_items.get(&cnum) {\n-            end_with.extend(missing.iter().cloned());\n-            if !end_with.is_empty() && group_end.is_none() {\n-                group_end = Some(cnum);\n-            }\n+            let missing_crates = missing.iter().map(|i| info.lang_item_to_crate.get(i).copied());\n+            required.extend(missing_crates);\n+        }\n+\n+        required.insert(Some(cnum));\n+        available.insert(Some(cnum));\n+\n+        if required.len() > available.len() && group_end.is_none() {\n+            group_end = Some(cnum);\n         }\n-        end_with.retain(|item| info.lang_item_to_crate.get(item) != Some(&cnum));\n-        if end_with.is_empty() && group_end.is_some() {\n+        if required.len() == available.len() && group_end.is_some() {\n             group_start = Some(cnum);\n             break;\n         }"}, {"sha": "dbb044d8f5d46d92338f44acc7b999491d2dc0e2", "filename": "src/test/run-make-fulldeps/issue-69368/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2FMakefile?ref=3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "patch": "@@ -0,0 +1,18 @@\n+-include ../tools.mk\n+\n+# Test that previously triggered a linker failure with root cause\n+# similar to one found in the issue #69368.\n+#\n+# The crate that provides oom lang item is missing some other lang\n+# items. Necessary to prevent the use of start-group / end-group.\n+#\n+# The weak lang items are defined in a separate compilation units,\n+# so that linker could omit them if not used.\n+#\n+# The crates that need those weak lang items are dependencies of\n+# crates that provide them.\n+\n+all:\n+\t$(RUSTC) a.rs\n+\t$(RUSTC) b.rs\n+\t$(RUSTC) c.rs"}, {"sha": "726db8746371e65c0bdc69f0cd49789fe08389e3", "filename": "src/test/run-make-fulldeps/issue-69368/a.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fa.rs?ref=3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "patch": "@@ -0,0 +1,16 @@\n+#![crate_type = \"rlib\"]\n+#![feature(lang_items)]\n+#![feature(panic_unwind)]\n+#![no_std]\n+\n+extern crate panic_unwind;\n+\n+#[panic_handler]\n+pub fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[no_mangle]\n+extern \"C\" fn __rust_drop_panic() -> ! {\n+    loop {}\n+}"}, {"sha": "4d6af0266563bddc124cb1e5710bd744ce027e4d", "filename": "src/test/run-make-fulldeps/issue-69368/b.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fb.rs?ref=3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"rlib\"]\n+#![feature(alloc_error_handler)]\n+#![no_std]\n+\n+#[alloc_error_handler]\n+pub fn error_handler(_: core::alloc::Layout) -> ! {\n+    panic!();\n+}"}, {"sha": "729c4249a053a8324b3688223b882284af798e16", "filename": "src/test/run-make-fulldeps/issue-69368/c.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-69368%2Fc.rs?ref=3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "patch": "@@ -0,0 +1,34 @@\n+#![crate_type = \"bin\"]\n+#![feature(start)]\n+#![no_std]\n+\n+extern crate alloc;\n+extern crate a;\n+extern crate b;\n+\n+use alloc::vec::Vec;\n+use core::alloc::*;\n+\n+struct Allocator;\n+\n+unsafe impl GlobalAlloc for Allocator {\n+    unsafe fn alloc(&self, _: Layout) -> *mut u8 {\n+        loop {}\n+    }\n+\n+    unsafe fn dealloc(&self, _: *mut u8, _: Layout) {\n+        loop {}\n+    }\n+}\n+\n+#[global_allocator]\n+static ALLOCATOR: Allocator = Allocator;\n+\n+#[start]\n+fn main(argc: isize, _argv: *const *const u8) -> isize {\n+    let mut v = Vec::new();\n+    for i in 0..argc {\n+        v.push(i);\n+    }\n+    v.iter().sum()\n+}"}]}