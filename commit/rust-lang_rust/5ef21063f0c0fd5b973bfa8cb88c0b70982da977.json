{"sha": "5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZjIxMDYzZjBjMGZkNWI5NzNiZmE4Y2I4OGMwYjcwOTgyZGE5Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-17T16:47:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-17T16:47:18Z"}, "message": "Auto merge of #82116 - tmiasko:box-error, r=oli-obk\n\nReduce size of InterpErrorInfo to 8 bytes\n\nr? `@ghost`", "tree": {"sha": "a4b52a5976636f9421e712d4774dffae41863796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4b52a5976636f9421e712d4774dffae41863796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "html_url": "https://github.com/rust-lang/rust/commit/5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1", "html_url": "https://github.com/rust-lang/rust/commit/ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1"}, {"sha": "614b0cccfeb3f08aea0fdd90ca2d4b961f846a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/614b0cccfeb3f08aea0fdd90ca2d4b961f846a1d", "html_url": "https://github.com/rust-lang/rust/commit/614b0cccfeb3f08aea0fdd90ca2d4b961f846a1d"}], "stats": {"total": 73, "additions": 48, "deletions": 25}, "files": [{"sha": "26ce3c2c3db8a8e38fd03cab6c5bc1c138b8d2d7", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "patch": "@@ -40,29 +40,45 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n     struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(InterpErrorInfo<'_>, 8);\n+\n /// Packages the kind of error we got from the const code interpreter\n /// up with a Rust-level backtrace of where the error occurred.\n /// Thsese should always be constructed by calling `.into()` on\n /// a `InterpError`. In `librustc_mir::interpret`, we have `throw_err_*`\n /// macros for this.\n #[derive(Debug)]\n-pub struct InterpErrorInfo<'tcx> {\n-    pub kind: InterpError<'tcx>,\n+pub struct InterpErrorInfo<'tcx>(Box<InterpErrorInfoInner<'tcx>>);\n+\n+#[derive(Debug)]\n+struct InterpErrorInfoInner<'tcx> {\n+    kind: InterpError<'tcx>,\n     backtrace: Option<Box<Backtrace>>,\n }\n \n impl fmt::Display for InterpErrorInfo<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.kind)\n+        write!(f, \"{}\", self.0.kind)\n     }\n }\n \n-impl InterpErrorInfo<'_> {\n+impl InterpErrorInfo<'tcx> {\n     pub fn print_backtrace(&self) {\n-        if let Some(backtrace) = self.backtrace.as_ref() {\n+        if let Some(backtrace) = self.0.backtrace.as_ref() {\n             print_backtrace(backtrace);\n         }\n     }\n+\n+    pub fn into_kind(self) -> InterpError<'tcx> {\n+        let InterpErrorInfo(box InterpErrorInfoInner { kind, .. }) = self;\n+        kind\n+    }\n+\n+    #[inline]\n+    pub fn kind(&self) -> &InterpError<'tcx> {\n+        &self.0.kind\n+    }\n }\n \n fn print_backtrace(backtrace: &Backtrace) {\n@@ -108,7 +124,7 @@ impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n             }\n         };\n \n-        InterpErrorInfo { kind, backtrace }\n+        InterpErrorInfo(Box::new(InterpErrorInfoInner { kind, backtrace }))\n     }\n }\n "}, {"sha": "754ed0bea8494212bb3bd6a62e598d19c923b619", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "patch": "@@ -84,7 +84,11 @@ impl<'tcx> ConstEvalErr<'tcx> {\n     {\n         error.print_backtrace();\n         let stacktrace = ecx.generate_stacktrace();\n-        ConstEvalErr { error: error.kind, stacktrace, span: span.unwrap_or_else(|| ecx.cur_span()) }\n+        ConstEvalErr {\n+            error: error.into_kind(),\n+            stacktrace,\n+            span: span.unwrap_or_else(|| ecx.cur_span()),\n+        }\n     }\n \n     pub fn struct_error("}, {"sha": "0f1c2b87426b53b4251ffeeae8ecfd95c902b862", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "patch": "@@ -230,7 +230,7 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n         };\n         return eval_nullary_intrinsic(tcx, key.param_env, def_id, substs).map_err(|error| {\n             let span = tcx.def_span(def_id);\n-            let error = ConstEvalErr { error: error.kind, stacktrace: vec![], span };\n+            let error = ConstEvalErr { error: error.into_kind(), stacktrace: vec![], span };\n             error.report_as_error(tcx.at(span), \"could not evaluate nullary intrinsic\")\n         });\n     }"}, {"sha": "8e75481e323c54cf652fec9c9e9ada23d2cbd270", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "patch": "@@ -245,8 +245,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Ok(Some(match ecx.load_mir(instance.def, None) {\n             Ok(body) => body,\n             Err(err) => {\n-                if let err_unsup!(NoMirFor(did)) = err.kind {\n-                    let path = ecx.tcx.def_path_str(did);\n+                if let err_unsup!(NoMirFor(did)) = err.kind() {\n+                    let path = ecx.tcx.def_path_str(*did);\n                     return Err(ConstEvalErrKind::NeedsRfc(format!(\n                         \"calling extern function `{}`\",\n                         path"}, {"sha": "7993d4847a744d9e019205b0725f89fa38950008", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "patch": "@@ -356,7 +356,7 @@ where\n                 // an allocation, which we should avoid. When that happens,\n                 // dedicated error variants should be introduced instead.\n                 assert!(\n-                    !error.kind.allocates(),\n+                    !error.kind().allocates(),\n                     \"interning encountered allocating error: {}\",\n                     error\n                 );"}, {"sha": "ce803c0d485f1b20a585a2ea101f881b185e1342", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "patch": "@@ -11,7 +11,7 @@ use std::ops::RangeInclusive;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_middle::mir::interpret::{InterpError, InterpErrorInfo};\n+use rustc_middle::mir::interpret::InterpError;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::symbol::{sym, Symbol};\n@@ -83,14 +83,17 @@ macro_rules! try_validation {\n             Ok(x) => x,\n             // We catch the error and turn it into a validation failure. We are okay with\n             // allocation here as this can only slow down builds that fail anyway.\n-            $( $( Err(InterpErrorInfo { kind: $p, .. }) )|+ =>\n-                throw_validation_failure!(\n-                    $where,\n-                    { $( $what_fmt ),+ } $( expected { $( $expected_fmt ),+ } )?\n-                ),\n-            )+\n-            #[allow(unreachable_patterns)]\n-            Err(e) => Err::<!, _>(e)?,\n+            Err(e) => match e.kind() {\n+                $(\n+                    $($p)|+ =>\n+                       throw_validation_failure!(\n+                            $where,\n+                            { $( $what_fmt ),+ } $( expected { $( $expected_fmt ),+ } )?\n+                        )\n+                ),+,\n+                #[allow(unreachable_patterns)]\n+                _ => Err::<!, _>(e)?,\n+            }\n         }\n     }};\n }\n@@ -877,7 +880,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     Err(err) => {\n                         // For some errors we might be able to provide extra information.\n                         // (This custom logic does not fit the `try_validation!` macro.)\n-                        match err.kind {\n+                        match err.kind() {\n                             err_ub!(InvalidUninitBytes(Some(access))) => {\n                                 // Some byte was uninitialized, determine which\n                                 // element that byte belongs to so we can\n@@ -935,10 +938,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match visitor.visit_value(op) {\n             Ok(()) => Ok(()),\n             // Pass through validation failures.\n-            Err(err) if matches!(err.kind, err_ub!(ValidationFailure { .. })) => Err(err),\n+            Err(err) if matches!(err.kind(), err_ub!(ValidationFailure { .. })) => Err(err),\n             // Also pass through InvalidProgram, those just indicate that we could not\n             // validate and each caller will know best what to do with them.\n-            Err(err) if matches!(err.kind, InterpError::InvalidProgram(_)) => Err(err),\n+            Err(err) if matches!(err.kind(), InterpError::InvalidProgram(_)) => Err(err),\n             // Avoid other errors as those do not show *where* in the value the issue lies.\n             Err(err) => {\n                 err.print_backtrace();"}, {"sha": "d0a23e1359c700c63a1cc65af32049a6feefbf29", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "patch": "@@ -466,7 +466,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 // an allocation, which we should avoid. When that happens,\n                 // dedicated error variants should be introduced instead.\n                 assert!(\n-                    !error.kind.allocates(),\n+                    !error.kind().allocates(),\n                     \"const-prop encountered allocating error: {}\",\n                     error\n                 );"}, {"sha": "1762d2183284899e7ab903433c591febade072df", "filename": "src/test/ui/issues/issue-23458.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs?ref=5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "patch": "@@ -1,5 +1,5 @@\n #![feature(llvm_asm)]\n-\n+// compile-flags: -Ccodegen-units=1\n // build-fail\n // only-x86_64\n "}]}