{"sha": "104ec48c649987685e385b7f64a19921403ece63", "node_id": "C_kwDOAAsO6NoAKDEwNGVjNDhjNjQ5OTg3Njg1ZTM4NWI3ZjY0YTE5OTIxNDAzZWNlNjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-11T03:54:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-11T18:05:50Z"}, "message": "Report fulfillment errors in new trait solver", "tree": {"sha": "075080a32f5107c8a536f7cdc42dfedc5b9c56a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/075080a32f5107c8a536f7cdc42dfedc5b9c56a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104ec48c649987685e385b7f64a19921403ece63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104ec48c649987685e385b7f64a19921403ece63", "html_url": "https://github.com/rust-lang/rust/commit/104ec48c649987685e385b7f64a19921403ece63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104ec48c649987685e385b7f64a19921403ece63/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "c014d682a9aaabcdb269168dd6e050f4dae2784c", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/104ec48c649987685e385b7f64a19921403ece63/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104ec48c649987685e385b7f64a19921403ece63/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=104ec48c649987685e385b7f64a19921403ece63", "patch": "@@ -3,7 +3,10 @@ use std::mem;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_infer::{\n     infer::InferCtxt,\n-    traits::{query::NoSolution, FulfillmentError, PredicateObligation, TraitEngine},\n+    traits::{\n+        query::NoSolution, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n+        SelectionError, TraitEngine,\n+    },\n };\n use rustc_middle::ty;\n \n@@ -45,32 +48,43 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n             return errors;\n         }\n \n-        if self.obligations.is_empty() {\n-            Vec::new()\n-        } else {\n-            unimplemented!(\"ambiguous obligations\")\n-        }\n+        self.obligations\n+            .drain(..)\n+            .map(|obligation| FulfillmentError {\n+                obligation: obligation.clone(),\n+                code: FulfillmentErrorCode::CodeSelectionError(SelectionError::Unimplemented),\n+                root_obligation: obligation,\n+            })\n+            .collect()\n     }\n \n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n-        let errors = Vec::new();\n+        let mut errors = Vec::new();\n         for i in 0.. {\n             if !infcx.tcx.recursion_limit().value_within_limit(i) {\n                 unimplemented!(\"overflow\")\n             }\n \n             let mut has_changed = false;\n-            for o in mem::take(&mut self.obligations) {\n+            for obligation in mem::take(&mut self.obligations) {\n                 let mut cx = EvalCtxt::new(infcx.tcx);\n-                let (changed, certainty) = match cx.evaluate_goal(infcx, o.clone().into()) {\n+                let (changed, certainty) = match cx.evaluate_goal(infcx, obligation.clone().into())\n+                {\n                     Ok(result) => result,\n-                    Err(NoSolution) => unimplemented!(\"error\"),\n+                    Err(NoSolution) => {\n+                        errors.push(FulfillmentError {\n+                            obligation: obligation.clone(),\n+                            code: FulfillmentErrorCode::CodeAmbiguity,\n+                            root_obligation: obligation,\n+                        });\n+                        continue;\n+                    }\n                 };\n \n                 has_changed |= changed;\n                 match certainty {\n                     Certainty::Yes => {}\n-                    Certainty::Maybe(_) => self.obligations.push(o),\n+                    Certainty::Maybe(_) => self.obligations.push(obligation),\n                 }\n             }\n "}]}