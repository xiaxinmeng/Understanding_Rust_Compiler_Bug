{"sha": "85c8fd9c94d842fcdee98d60abaf7225250be870", "node_id": "C_kwDOAAsO6NoAKDg1YzhmZDljOTRkODQyZmNkZWU5OGQ2MGFiYWY3MjI1MjUwYmU4NzA", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-14T20:57:23Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T15:10:46Z"}, "message": "Make EvaluationCache consider polarity as cache's key", "tree": {"sha": "aa824c1e70b459ab0a66e23e77cb036dbb276815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa824c1e70b459ab0a66e23e77cb036dbb276815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c8fd9c94d842fcdee98d60abaf7225250be870", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFwMXYACgkQgTGiTgx5\n76+QWBAAqcAHZyV7mczeWEV998WjMzMAzKcJl3rMM3OV3Vw77MU2/z5i+MTc7JNf\nlbG/IppHG3sRcuRlJ2ihmVWtQkbB9JiyTI5PaufTUupcFTMSt3Tq9h2IsdQtC4Bl\nI3vTyuKhlVfIYSVzDEQG6IGNDJDVmB2OUoUPPilNlHfdUybgcPQMzjeYp5GmCADB\n3SLrF3QBQz4HNN5itdGWZ6s4sM+g+m2R4Rfb9Hk3jhGzoPJOK8HxvA2HRVZnD1XX\n3eIUHpHEpThdta1PzzVi35krVuEwz7qlTscwd3mBksaF1P+hRpUeD1kgoHaRvUU6\npD49h9v/m13kf4TILOM1d+5v+X2GzMymH8WZG8ZJ5CHyQ6s3eeTZi0m54M6iUTM/\nyEuZ1FcekcdIUS/8hhPhnY00YYsE47hbLRDDvPwPZT2p+TcJtCI4KKbrldR6Ps0u\n8HqIfp8vSvW2sdV+sQc4C4hqEQQKFT8H4cECCvdxRDzFaI0u2M6dcemt+1Bes6gZ\nKvWSLo0RhiV4gGUBMsgRo9y5QRCj9DxnEBpGXeXNx3Awq1msD1/vmd1CqMBAWVxa\nlI2aUZNSsQB3t4zpURRbtTBWMaq+ZrVA6u881uUENL9t/KitkIXSOM8yqAEhLmag\nnULUfpd7Et8eFqTQ7qMTkgQ0d+6qsMwVOu1u+SfzQTK2teyX7NA=\n=qQ9p\n-----END PGP SIGNATURE-----", "payload": "tree aa824c1e70b459ab0a66e23e77cb036dbb276815\nparent da8873e3439c4e8335e59a389a0c0f5d0d43c534\nauthor Santiago Pastorino <spastorino@gmail.com> 1634245043 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634742646 -0300\n\nMake EvaluationCache consider polarity as cache's key\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c8fd9c94d842fcdee98d60abaf7225250be870", "html_url": "https://github.com/rust-lang/rust/commit/85c8fd9c94d842fcdee98d60abaf7225250be870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c8fd9c94d842fcdee98d60abaf7225250be870/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da8873e3439c4e8335e59a389a0c0f5d0d43c534", "url": "https://api.github.com/repos/rust-lang/rust/commits/da8873e3439c4e8335e59a389a0c0f5d0d43c534", "html_url": "https://github.com/rust-lang/rust/commit/da8873e3439c4e8335e59a389a0c0f5d0d43c534"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "560660517f34b27ab7134b515951762b6e9c8133", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c8fd9c94d842fcdee98d60abaf7225250be870/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c8fd9c94d842fcdee98d60abaf7225250be870/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=85c8fd9c94d842fcdee98d60abaf7225250be870", "patch": "@@ -16,8 +16,10 @@ pub type SelectionCache<'tcx> = Cache<\n     SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n >;\n \n-pub type EvaluationCache<'tcx> =\n-    Cache<ty::ParamEnvAnd<'tcx, ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>>, EvaluationResult>;\n+pub type EvaluationCache<'tcx> = Cache<\n+    (ty::ParamEnvAnd<'tcx, ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>>, ty::ImplPolarity),\n+    EvaluationResult,\n+>;\n \n /// The selection process begins by considering all impls, where\n /// clauses, and so forth that might resolve an obligation. Sometimes"}, {"sha": "0e3f5d746e059e71f6109318601498e11585f9d1", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/85c8fd9c94d842fcdee98d60abaf7225250be870/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c8fd9c94d842fcdee98d60abaf7225250be870/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=85c8fd9c94d842fcdee98d60abaf7225250be870", "patch": "@@ -709,7 +709,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(?fresh_trait_ref);\n \n-        if let Some(result) = self.check_evaluation_cache(obligation.param_env, fresh_trait_ref) {\n+        if let Some(result) = self.check_evaluation_cache(\n+            obligation.param_env,\n+            fresh_trait_ref,\n+            obligation.predicate.skip_binder().polarity,\n+        ) {\n             debug!(?result, \"CACHE HIT\");\n             return Ok(result);\n         }\n@@ -739,12 +743,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let reached_depth = stack.reached_depth.get();\n         if reached_depth >= stack.depth {\n             debug!(?result, \"CACHE MISS\");\n-            self.insert_evaluation_cache(obligation.param_env, fresh_trait_ref, dep_node, result);\n+            self.insert_evaluation_cache(\n+                obligation.param_env,\n+                fresh_trait_ref,\n+                obligation.predicate.skip_binder().polarity,\n+                dep_node,\n+                result,\n+            );\n \n             stack.cache().on_completion(stack.dfn, |fresh_trait_ref, provisional_result| {\n                 self.insert_evaluation_cache(\n                     obligation.param_env,\n                     fresh_trait_ref,\n+                    obligation.predicate.skip_binder().polarity,\n                     dep_node,\n                     provisional_result.max(result),\n                 );\n@@ -977,6 +988,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n+        polarity: ty::ImplPolarity,\n     ) -> Option<EvaluationResult> {\n         // Neither the global nor local cache is aware of intercrate\n         // mode, so don't do any caching. In particular, we might\n@@ -988,17 +1000,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.tcx();\n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_ref), tcx) {\n+            if let Some(res) = tcx.evaluation_cache.get(&(param_env.and(trait_ref), polarity), tcx)\n+            {\n                 return Some(res);\n             }\n         }\n-        self.infcx.evaluation_cache.get(&param_env.and(trait_ref), tcx)\n+        self.infcx.evaluation_cache.get(&(param_env.and(trait_ref), polarity), tcx)\n     }\n \n     fn insert_evaluation_cache(\n         &mut self,\n         param_env: ty::ParamEnv<'tcx>,\n         trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n+        polarity: ty::ImplPolarity,\n         dep_node: DepNodeIndex,\n         result: EvaluationResult,\n     ) {\n@@ -1023,13 +1037,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // FIXME: Due to #50507 this overwrites the different values\n                 // This should be changed to use HashMapExt::insert_same\n                 // when that is fixed\n-                self.tcx().evaluation_cache.insert(param_env.and(trait_ref), dep_node, result);\n+                self.tcx().evaluation_cache.insert(\n+                    (param_env.and(trait_ref), polarity),\n+                    dep_node,\n+                    result,\n+                );\n                 return;\n             }\n         }\n \n         debug!(?trait_ref, ?result, \"insert_evaluation_cache\");\n-        self.infcx.evaluation_cache.insert(param_env.and(trait_ref), dep_node, result);\n+        self.infcx.evaluation_cache.insert((param_env.and(trait_ref), polarity), dep_node, result);\n     }\n \n     /// For various reasons, it's possible for a subobligation"}]}