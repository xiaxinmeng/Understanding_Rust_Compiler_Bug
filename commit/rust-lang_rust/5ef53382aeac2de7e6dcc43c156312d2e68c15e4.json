{"sha": "5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZjUzMzgyYWVhYzJkZTdlNmRjYzQzYzE1NjMxMmQyZTY4YzE1ZTQ=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-01-25T23:38:09Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:23:49Z"}, "message": "Add support for parsing quasi-quotes, doesn't do anything useful yet.", "tree": {"sha": "0687cc4a0a4bdd20b5118541dd149a2a7a9ec8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0687cc4a0a4bdd20b5118541dd149a2a7a9ec8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "html_url": "https://github.com/rust-lang/rust/commit/5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75edd9ff69625292b1c4d5f05502d1fd28b39f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/75edd9ff69625292b1c4d5f05502d1fd28b39f55", "html_url": "https://github.com/rust-lang/rust/commit/75edd9ff69625292b1c4d5f05502d1fd28b39f55"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "ea8dcbf7f4b959f891159c0db3fa89bbe881f647", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -277,6 +277,10 @@ enum mac_ {\n     mac_embed_type(@ty),\n     mac_embed_block(blk),\n     mac_ellipsis,\n+    // the span is used by the quoter/anti-quoter ...\n+    mac_qq(span /* span of expr */, @expr), // quasi-quote\n+    mac_aq(span /* span of quote */, @expr), // anti-quote\n+    mac_var(uint),\n }\n \n type lit = spanned<lit_>;"}, {"sha": "afcb184652ca878570cee17c081c09f0a7f39630", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -5,7 +5,7 @@ import option::{none, some};\n import std::map::hashmap;\n import vec;\n \n-import syntax::ast::{crate, expr_, expr_mac, mac_invoc};\n+import syntax::ast::{crate, expr_, expr_mac, mac_invoc, mac_qq};\n import syntax::fold::*;\n import syntax::ext::base::*;\n import syntax::parse::parser::parse_expr_from_source_str;\n@@ -45,13 +45,21 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                   }\n                 }\n               }\n+              mac_qq(sp, exp) { (expand_qquote(cx, sp, exp), s) }\n               _ { cx.span_bug(mac.span, \"naked syntactic bit\") }\n             }\n           }\n           _ { orig(e, s, fld) }\n         };\n }\n \n+fn expand_qquote(cx: ext_ctxt, sp: span, e: @ast::expr) -> ast::expr_ {\n+    import syntax::ext::build::*;\n+    let str = codemap::span_to_snippet(sp, cx.session().parse_sess.cm);\n+    let expr = make_new_str(cx, e.span, str);\n+    ret expr.node;\n+}\n+\n // FIXME: this is a terrible kludge to inject some macros into the default\n // compilation environment. When the macro-definition system is substantially\n // more mature, these should move from here, into a compiled part of libcore"}, {"sha": "3ee7a422d2ead7262bf4fc26b8226396150ada51", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -587,6 +587,9 @@ fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, s: selector, b: binders) {\n           none { no_des(cx, blk.span, \"under `#{}`\"); }\n         }\n       }\n+      ast::mac_qq(_,_) { no_des(cx, mac.span, \"quasiquotes\"); }\n+      ast::mac_aq(_,_) { no_des(cx, mac.span, \"antiquotes\"); }\n+      ast::mac_var(_) { no_des(cx, mac.span, \"antiquote variables\"); }\n     }\n }\n "}, {"sha": "1831e30e810781c0b5fec524af84fae1c76ce2a0", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -138,6 +138,9 @@ fn fold_mac_(m: mac, fld: ast_fold) -> mac {\n                mac_embed_type(ty) { mac_embed_type(fld.fold_ty(ty)) }\n                mac_embed_block(blk) { mac_embed_block(fld.fold_block(blk)) }\n                mac_ellipsis { mac_ellipsis }\n+               mac_qq(_,_) { /* fixme */ m.node }\n+               mac_aq(_,_) { /* fixme */ m.node }\n+               mac_var(_) { /* fixme */ m.node }\n              },\n          span: m.span};\n }"}, {"sha": "e023e5259fde26a7d790db3b23bff77d4b5fd66d", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -349,6 +349,7 @@ fn next_token_inner(rdr: reader) -> token::token {\n       '#' {\n         rdr.bump();\n         if rdr.curr == '<' { rdr.bump(); ret token::POUND_LT; }\n+        if rdr.curr == '(' { rdr.bump(); ret token::POUND_LPAREN; }\n         if rdr.curr == '{' { rdr.bump(); ret token::POUND_LBRACE; }\n         ret token::POUND;\n       }\n@@ -361,6 +362,23 @@ fn next_token_inner(rdr: reader) -> token::token {\n         } else { ret token::COLON; }\n       }\n \n+      '$' {\n+        rdr.bump();\n+        if is_dec_digit(rdr.curr) {\n+            let val = dec_digit_val(rdr.curr) as uint;\n+            while is_dec_digit(rdr.next()) {\n+                rdr.bump();\n+                val = val * 10u + (dec_digit_val(rdr.curr) as uint);\n+            }\n+            rdr.bump();\n+            ret token::DOLLAR_NUM(val);\n+        } else if c == '(' {\n+            ret token::DOLLAR_LPAREN;\n+        } else {\n+            rdr.fatal(\"expected digit3\");\n+        }\n+      }\n+\n \n \n "}, {"sha": "f2f1f7c14ed1c3335f2f789d3c191111d902514d", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -628,6 +628,13 @@ fn parse_seq<T: copy>(bra: token::token, ket: token::token,\n     ret spanned(lo, hi, result);\n }\n \n+fn have_dollar(p: parser) -> option::t<ast::mac_> {\n+    alt p.token {\n+      token::DOLLAR_NUM(num) {p.bump(); some(ast::mac_var(num))}\n+      _                      {none}\n+    }\n+}\n+\n fn lit_from_token(p: parser, tok: token::token) -> ast::lit_ {\n     alt tok {\n       token::LIT_INT(i, it) { ast::lit_int(i, it) }\n@@ -755,6 +762,12 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n     let hi = p.span.hi;\n \n     let ex: ast::expr_;\n+\n+    alt have_dollar(p) {\n+      some(x) {ret pexpr(mk_mac_expr(p, lo, p.span.hi, x));}\n+      _ {}\n+    }\n+\n     if p.token == token::LPAREN {\n         p.bump();\n         if p.token == token::RPAREN {\n@@ -843,6 +856,12 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n     } else if p.token == token::ELLIPSIS {\n         p.bump();\n         ret pexpr(mk_mac_expr(p, lo, p.span.hi, ast::mac_ellipsis));\n+    } else if p.token == token::POUND_LPAREN {\n+        p.bump();\n+        let e = parse_expr(p);\n+        expect(p, token::RPAREN);\n+        ret pexpr(mk_mac_expr(p, lo, p.span.hi,\n+                              ast::mac_qq(e.span, e)));\n     } else if eat_word(p, \"bind\") {\n         let e = parse_expr_res(p, RESTRICT_NO_CALL_EXPRS);\n         fn parse_expr_opt(p: parser) -> option<@ast::expr> {"}, {"sha": "37ef677b6d6b6c9c3fe11605c0a110442730566a", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -53,9 +53,13 @@ enum token {\n     LBRACE,\n     RBRACE,\n     POUND,\n+    POUND_LPAREN,\n     POUND_LBRACE,\n     POUND_LT,\n \n+    DOLLAR_LPAREN,\n+    DOLLAR_NUM(uint),\n+\n     /* Literals */\n     LIT_INT(i64, ast::int_ty),\n     LIT_UINT(u64, ast::uint_ty),\n@@ -69,6 +73,7 @@ enum token {\n     UNDERSCORE,\n     BRACEQUOTE(str_num),\n     EOF,\n+\n }\n \n fn binop_to_str(o: binop) -> str {\n@@ -123,9 +128,15 @@ fn to_str(r: reader, t: token) -> str {\n       LBRACE { ret \"{\"; }\n       RBRACE { ret \"}\"; }\n       POUND { ret \"#\"; }\n+      POUND_LPAREN { ret \"#(\"; }\n       POUND_LBRACE { ret \"#{\"; }\n       POUND_LT { ret \"#<\"; }\n \n+      DOLLAR_LPAREN { ret \"$(\"; }\n+      DOLLAR_NUM(u) {\n+        ret \"$\" + uint::to_str(u as uint, 10u);\n+      }\n+\n       /* Literals */\n       LIT_INT(c, ast::ty_char) {\n         // FIXME: escape."}, {"sha": "74ebd271b6ab4129971f419cf386f1115be28497", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -739,6 +739,8 @@ fn print_mac(s: ps, m: ast::mac) {\n         print_possibly_embedded_block(s, blk, block_normal, indent_unit);\n       }\n       ast::mac_ellipsis { word(s.s, \"...\"); }\n+      ast::mac_var(v) { word(s.s, #fmt(\"$%u\", v)); }\n+      _ { /* fixme */ }\n     }\n }\n "}, {"sha": "0601e8285d429e761499f39f0701e81e752a25c0", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -277,6 +277,9 @@ fn visit_mac<E>(m: mac, e: E, v: vt<E>) {\n       ast::mac_embed_type(ty) { v.visit_ty(ty, e, v); }\n       ast::mac_embed_block(blk) { v.visit_block(blk, e, v); }\n       ast::mac_ellipsis { }\n+      ast::mac_qq(_, e) { /* FIXME: maybe visit */ }\n+      ast::mac_aq(_, e) { /* FIXME: maybe visit */ }\n+      ast::mac_var(_) { }\n     }\n }\n "}, {"sha": "6771a219d1dd7489ad185302b5376d2088c0ea87", "filename": "src/test/compile-fail/ext-noname.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Ftest%2Fcompile-fail%2Fext-noname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef53382aeac2de7e6dcc43c156312d2e68c15e4/src%2Ftest%2Fcompile-fail%2Fext-noname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fext-noname.rs?ref=5ef53382aeac2de7e6dcc43c156312d2e68c15e4", "patch": "@@ -1,5 +1,6 @@\n+// xfail-test\n // error-pattern:expected a syntax expander name\n \n fn main() {\n   #();\n-}\n\\ No newline at end of file\n+}"}]}