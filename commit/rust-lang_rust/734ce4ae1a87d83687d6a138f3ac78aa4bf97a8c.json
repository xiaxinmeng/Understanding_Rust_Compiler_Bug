{"sha": "734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNGNlNGFlMWE4N2Q4MzY4N2Q2YTEzOGYzYWM3OGFhNGJmOTdhOGM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-28T21:29:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Fix tidy check", "tree": {"sha": "515e71a166c3b45da917d4de3f04bfd0ee3cc560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515e71a166c3b45da917d4de3f04bfd0ee3cc560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c", "html_url": "https://github.com/rust-lang/rust/commit/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "335770267a2ec23012b834751c2a4c9ef867b558", "url": "https://api.github.com/repos/rust-lang/rust/commits/335770267a2ec23012b834751c2a4c9ef867b558", "html_url": "https://github.com/rust-lang/rust/commit/335770267a2ec23012b834751c2a4c9ef867b558"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "3d8bb6b825b38ec40e599a6086ae1d053c75e0a7", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c", "patch": "@@ -20,7 +20,7 @@ use hir::map as hir_map;\n use hir::def::Def;\n use hir::def_id::{DefId, CrateNum};\n use rustc_data_structures::sync::Lrc;\n-use ty::{self, TyCtxt, GenericParamDefKind};\n+use ty::{self, TyCtxt};\n use ty::query::Providers;\n use middle::privacy;\n use session::config;"}, {"sha": "d43169baf5dd314f41eeea1c01d7a592a48faf95", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c", "patch": "@@ -316,36 +316,43 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // variables.\n         let method_generics = self.tcx.generics_of(pick.item.def_id);\n         let supress_mismatch = self.fcx.check_impl_trait(self.span, segment, &method_generics);\n-        self.fcx.check_generic_arg_count(self.span, &segment, &method_generics, true, supress_mismatch);\n+        self.fcx.check_generic_arg_count(self.span, &segment, &method_generics, true,\n+                                         supress_mismatch);\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method.\n         assert_eq!(method_generics.parent_count, parent_substs.len());\n         let provided = &segment.args;\n         let own_counts = method_generics.own_counts();\n         // FIXME(varkor): Separating out the parameters is messy.\n-        let lifetimes: Vec<_> = provided.iter().flat_map(|data| data.args.iter().filter_map(|arg| match arg {\n-            GenericArg::Lifetime(ty) => Some(ty),\n-            _ => None,\n-        })).collect();\n-        let types: Vec<_> = provided.iter().flat_map(|data| data.args.iter().filter_map(|arg| match arg {\n-            GenericArg::Type(ty) => Some(ty),\n-            _ => None,\n-        })).collect();\n+        let lifetimes: Vec<_> = provided.iter().flat_map(|data| {\n+                data.args.iter().filter_map(|arg| match arg {\n+                GenericArg::Lifetime(ty) => Some(ty),\n+                _ => None,\n+            })\n+        }).collect();\n+        let types: Vec<_> = provided.iter().flat_map(|data| {\n+                data.args.iter().filter_map(|arg| match arg {\n+                GenericArg::Type(ty) => Some(ty),\n+                _ => None,\n+            })\n+        }).collect();\n         Substs::for_item(self.tcx, pick.item.def_id, |param, _| {\n             let i = param.index as usize;\n             if i < parent_substs.len() {\n                 parent_substs[i]\n             } else {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n-                        if let Some(lifetime) = lifetimes.get(i - parent_substs.len()) {\n+                        let idx = i - parent_substs.len();\n+                        if let Some(lifetime) = lifetimes.get(idx) {\n                             return AstConv::ast_region_to_region(\n                                 self.fcx, lifetime, Some(param)).into();\n                         }\n                     }\n                     GenericParamDefKind::Type { .. } => {\n-                        if let Some(ast_ty) = types.get(i - parent_substs.len() - own_counts.lifetimes) {\n+                        let idx = i - parent_substs.len() - own_counts.lifetimes;\n+                        if let Some(ast_ty) = types.get(idx) {\n                             return self.to_ty(ast_ty).into();\n                         }\n                     }"}, {"sha": "779cb6f32cd0df9a8e2bf613ac84d53854dd948f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=734ce4ae1a87d83687d6a138f3ac78aa4bf97a8c", "patch": "@@ -5162,9 +5162,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let ty_accepted = ty_params.accepted;\n         let ty_required = ty_params.required;\n \n-        let count_type_params = |n| format!(\"{} type parameter{}\", n, if n == 1 { \"\" } else { \"s\" });\n-        let expected_text = count_type_params(ty_accepted);\n-        let actual_text = count_type_params(types.len());\n+        let count_ty_params = |n| format!(\"{} type parameter{}\", n, if n == 1 { \"\" } else { \"s\" });\n+        let expected_text = count_ty_params(ty_accepted);\n+        let actual_text = count_ty_params(types.len());\n         if let Some((mut err, span)) = if types.len() > ty_accepted {\n             // To prevent derived errors to accumulate due to extra\n             // type parameters, we force instantiate_value_path to"}]}