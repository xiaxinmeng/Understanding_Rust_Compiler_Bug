{"sha": "4749175ced2eca288e5c0de57bb50daae406f8cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDkxNzVjZWQyZWNhMjg4ZTVjMGRlNTdiYjUwZGFhZTQwNmY4Y2Q=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-11-04T06:31:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-17T15:48:46Z"}, "message": "rework `TraitSelect` to avoid a vec and just use two def-ids", "tree": {"sha": "69f089775361b24ddda875df583684755afbbbf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f089775361b24ddda875df583684755afbbbf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4749175ced2eca288e5c0de57bb50daae406f8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4749175ced2eca288e5c0de57bb50daae406f8cd", "html_url": "https://github.com/rust-lang/rust/commit/4749175ced2eca288e5c0de57bb50daae406f8cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4749175ced2eca288e5c0de57bb50daae406f8cd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0bb3f2839c13ab42feacd423f728fbfd2f2f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0bb3f2839c13ab42feacd423f728fbfd2f2f7a", "html_url": "https://github.com/rust-lang/rust/commit/dc0bb3f2839c13ab42feacd423f728fbfd2f2f7a"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "96d1a925425e8d322a283e9bc4ffc6a716b1eb52", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4749175ced2eca288e5c0de57bb50daae406f8cd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4749175ced2eca288e5c0de57bb50daae406f8cd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=4749175ced2eca288e5c0de57bb50daae406f8cd", "patch": "@@ -131,7 +131,37 @@ pub enum DepNode<D: Clone + Debug> {\n     // which would yield an overly conservative dep-graph.\n     TraitItems(D),\n     ReprHints(D),\n-    TraitSelect(Vec<D>),\n+\n+    // Trait selection cache is a little funny. Given a trait\n+    // reference like `Foo: SomeTrait<Bar>`, there could be\n+    // arbitrarily many def-ids to map on in there (e.g., `Foo`,\n+    // `SomeTrait`, `Bar`). We could have a vector of them, but it\n+    // requires heap-allocation, and trait sel in general can be a\n+    // surprisingly hot path. So instead we pick two def-ids: the\n+    // trait def-id, and the first def-id in the input types. If there\n+    // is no def-id in the input types, then we use the trait def-id\n+    // again. So for example:\n+    //\n+    // - `i32: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n+    // - `u32: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n+    // - `Clone: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Clone }`\n+    // - `Vec<i32>: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: Vec }`\n+    // - `String: Clone` -> `TraitSelect { trait_def_id: Clone, self_def_id: String }`\n+    // - `Foo: Trait<Bar>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n+    // - `Foo: Trait<i32>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n+    // - `(Foo, Bar): Trait` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n+    // - `i32: Trait<Foo>` -> `TraitSelect { trait_def_id: Trait, self_def_id: Foo }`\n+    //\n+    // You can see that we map many trait refs to the same\n+    // trait-select node.  This is not a problem, it just means\n+    // imprecision in our dep-graph tracking.  The important thing is\n+    // that for any given trait-ref, we always map to the **same**\n+    // trait-select node.\n+    TraitSelect { trait_def_id: D, input_def_id: D },\n+\n+    // For proj. cache, we just keep a list of all def-ids, since it is\n+    // not a hotspot.\n+    ProjectionCache { def_ids: Vec<D> },\n }\n \n impl<D: Clone + Debug> DepNode<D> {\n@@ -236,9 +266,17 @@ impl<D: Clone + Debug> DepNode<D> {\n             TraitImpls(ref d) => op(d).map(TraitImpls),\n             TraitItems(ref d) => op(d).map(TraitItems),\n             ReprHints(ref d) => op(d).map(ReprHints),\n-            TraitSelect(ref type_ds) => {\n-                let type_ds = try_opt!(type_ds.iter().map(|d| op(d)).collect());\n-                Some(TraitSelect(type_ds))\n+            TraitSelect { ref trait_def_id, ref input_def_id } => {\n+                op(trait_def_id).and_then(|trait_def_id| {\n+                    op(input_def_id).and_then(|input_def_id| {\n+                        Some(TraitSelect { trait_def_id: trait_def_id,\n+                                           input_def_id: input_def_id })\n+                    })\n+                })\n+            }\n+            ProjectionCache { ref def_ids } => {\n+                let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n+                def_ids.map(|d| ProjectionCache { def_ids: d })\n             }\n         }\n     }"}, {"sha": "7937d2ccfe46da45d4c6e5d5524a6599986a7590", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4749175ced2eca288e5c0de57bb50daae406f8cd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4749175ced2eca288e5c0de57bb50daae406f8cd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4749175ced2eca288e5c0de57bb50daae406f8cd", "patch": "@@ -34,7 +34,6 @@ use serialize::{self, Encodable, Encoder};\n use std::borrow::Cow;\n use std::cell::{Cell, RefCell, Ref};\n use std::hash::{Hash, Hasher};\n-use std::iter;\n use std::ops::Deref;\n use std::rc::Rc;\n use std::slice;\n@@ -843,27 +842,22 @@ impl<'tcx> TraitPredicate<'tcx> {\n \n     /// Creates the dep-node for selecting/evaluating this trait reference.\n     fn dep_node(&self) -> DepNode<DefId> {\n-        // Ideally, the dep-node would just have all the input types\n-        // in it.  But they are limited to including def-ids. So as an\n-        // approximation we include the def-ids for all nominal types\n-        // found somewhere. This means that we will e.g. conflate the\n-        // dep-nodes for `u32: SomeTrait` and `u64: SomeTrait`, but we\n-        // would have distinct dep-nodes for `Vec<u32>: SomeTrait`,\n-        // `Rc<u32>: SomeTrait`, and `(Vec<u32>, Rc<u32>): SomeTrait`.\n-        // Note that it's always sound to conflate dep-nodes, it just\n-        // leads to more recompilation.\n-        let def_ids: Vec<_> =\n+        // Extact the trait-def and first def-id from inputs.  See the\n+        // docs for `DepNode::TraitSelect` for more information.\n+        let trait_def_id = self.def_id();\n+        let input_def_id =\n             self.input_types()\n                 .flat_map(|t| t.walk())\n                 .filter_map(|t| match t.sty {\n-                    ty::TyAdt(adt_def, _) =>\n-                        Some(adt_def.did),\n-                    _ =>\n-                        None\n+                    ty::TyAdt(adt_def, _) => Some(adt_def.did),\n+                    _ => None\n                 })\n-                .chain(iter::once(self.def_id()))\n-                .collect();\n-        DepNode::TraitSelect(def_ids)\n+                .next()\n+                .unwrap_or(trait_def_id);\n+        DepNode::TraitSelect {\n+            trait_def_id: trait_def_id,\n+            input_def_id: input_def_id\n+        }\n     }\n \n     pub fn input_types<'a>(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a {"}, {"sha": "799f502aadbfa97cd4f844eb6e596a22119e4d40", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4749175ced2eca288e5c0de57bb50daae406f8cd/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4749175ced2eca288e5c0de57bb50daae406f8cd/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=4749175ced2eca288e5c0de57bb50daae406f8cd", "patch": "@@ -208,7 +208,8 @@ impl<'gcx> DepTrackingMapConfig for ProjectionCache<'gcx> {\n                    _ => None,\n                })\n                .collect();\n-        DepNode::TraitSelect(def_ids)\n+\n+        DepNode::ProjectionCache { def_ids: def_ids }\n     }\n }\n "}]}