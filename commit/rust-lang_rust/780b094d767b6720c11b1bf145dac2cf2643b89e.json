{"sha": "780b094d767b6720c11b1bf145dac2cf2643b89e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MGIwOTRkNzY3YjY3MjBjMTFiMWJmMTQ1ZGFjMmNmMjY0M2I4OWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-26T06:43:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-26T06:43:51Z"}, "message": "Auto merge of #80209 - erikdesjardins:ptrcmp, r=Mark-Simulacrum\n\nRemove pointer comparison from slice equality\n\nThis resurrects #71735.\n\nFixes #71602, helps with #80140.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "1da0e978e53445747fb13b617d94bd7cbbdb3229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1da0e978e53445747fb13b617d94bd7cbbdb3229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/780b094d767b6720c11b1bf145dac2cf2643b89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/780b094d767b6720c11b1bf145dac2cf2643b89e", "html_url": "https://github.com/rust-lang/rust/commit/780b094d767b6720c11b1bf145dac2cf2643b89e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/780b094d767b6720c11b1bf145dac2cf2643b89e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30dac2d839293f2c48e18ebfea1082819115d08", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30dac2d839293f2c48e18ebfea1082819115d08", "html_url": "https://github.com/rust-lang/rust/commit/d30dac2d839293f2c48e18ebfea1082819115d08"}, {"sha": "733cb54d18c6c3bbd8dfcd6184cdf678bd64bd0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/733cb54d18c6c3bbd8dfcd6184cdf678bd64bd0e", "html_url": "https://github.com/rust-lang/rust/commit/733cb54d18c6c3bbd8dfcd6184cdf678bd64bd0e"}], "stats": {"total": 43, "additions": 16, "deletions": 27}, "files": [{"sha": "72af47c71dd64333b9c4d4e12c9104540678736b", "filename": "library/core/src/slice/cmp.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/780b094d767b6720c11b1bf145dac2cf2643b89e/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780b094d767b6720c11b1bf145dac2cf2643b89e/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs?ref=780b094d767b6720c11b1bf145dac2cf2643b89e", "patch": "@@ -75,28 +75,6 @@ where\n     }\n }\n \n-// Use an equal-pointer optimization when types are `Eq`\n-// We can't make `A` and `B` the same type because `min_specialization` won't\n-// allow it.\n-impl<A, B> SlicePartialEq<B> for [A]\n-where\n-    A: MarkerEq<B>,\n-{\n-    default fn equal(&self, other: &[B]) -> bool {\n-        if self.len() != other.len() {\n-            return false;\n-        }\n-\n-        // While performance would suffer if `guaranteed_eq` just returned `false`\n-        // for all arguments, correctness and return value of this function are not affected.\n-        if self.as_ptr().guaranteed_eq(other.as_ptr() as *const A) {\n-            return true;\n-        }\n-\n-        self.iter().zip(other.iter()).all(|(x, y)| x == y)\n-    }\n-}\n-\n // Use memcmp for bytewise equality when the types allow\n impl<A, B> SlicePartialEq<B> for [A]\n where\n@@ -107,11 +85,6 @@ where\n             return false;\n         }\n \n-        // While performance would suffer if `guaranteed_eq` just returned `false`\n-        // for all arguments, correctness and return value of this function are not affected.\n-        if self.as_ptr().guaranteed_eq(other.as_ptr() as *const A) {\n-            return true;\n-        }\n         // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.\n         // The two slices have been checked to have the same size above.\n         unsafe {"}, {"sha": "acc7879e7b18984474c02b39180032af7f26d5e8", "filename": "src/test/codegen/slice-ref-equality.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/780b094d767b6720c11b1bf145dac2cf2643b89e/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780b094d767b6720c11b1bf145dac2cf2643b89e/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fslice-ref-equality.rs?ref=780b094d767b6720c11b1bf145dac2cf2643b89e", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -C opt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+// #71602: check that slice equality just generates a single bcmp\n+\n+// CHECK-LABEL: @is_zero_slice\n+#[no_mangle]\n+pub fn is_zero_slice(data: &[u8; 4]) -> bool {\n+    // CHECK: start:\n+    // CHECK-NEXT: %{{.+}} = getelementptr {{.+}}\n+    // CHECK-NEXT: %[[BCMP:.+]] = tail call i32 @{{bcmp|memcmp}}({{.+}})\n+    // CHECK-NEXT: %[[EQ:.+]] = icmp eq i32 %[[BCMP]], 0\n+    // CHECK-NEXT: ret i1 %[[EQ]]\n+    *data == [0; 4]\n+}"}]}