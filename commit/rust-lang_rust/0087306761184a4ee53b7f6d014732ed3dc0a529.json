{"sha": "0087306761184a4ee53b7f6d014732ed3dc0a529", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwODczMDY3NjExODRhNGVlNTNiN2Y2ZDAxNDczMmVkM2RjMGE1Mjk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-06-01T11:28:36Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-06-01T11:28:36Z"}, "message": "Merge pull request #1016 from rust-lang-nursery/try-double-indent\n\nTreat chains with just expr? specially.", "tree": {"sha": "ea8304529305d5e1e1c6ad3a4ea6a6c503b1e9e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8304529305d5e1e1c6ad3a4ea6a6c503b1e9e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0087306761184a4ee53b7f6d014732ed3dc0a529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0087306761184a4ee53b7f6d014732ed3dc0a529", "html_url": "https://github.com/rust-lang/rust/commit/0087306761184a4ee53b7f6d014732ed3dc0a529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0087306761184a4ee53b7f6d014732ed3dc0a529/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6263735b101b353bfee883046116b6b0e377589", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6263735b101b353bfee883046116b6b0e377589", "html_url": "https://github.com/rust-lang/rust/commit/b6263735b101b353bfee883046116b6b0e377589"}, {"sha": "bbb6038b92aa1ce17eebad96a904543e867f18b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb6038b92aa1ce17eebad96a904543e867f18b2", "html_url": "https://github.com/rust-lang/rust/commit/bbb6038b92aa1ce17eebad96a904543e867f18b2"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "4a0b21a01e235d48bf49672079178d479ffe9171", "filename": "src/chains.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0087306761184a4ee53b7f6d014732ed3dc0a529/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0087306761184a4ee53b7f6d014732ed3dc0a529/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=0087306761184a4ee53b7f6d014732ed3dc0a529", "patch": "@@ -88,6 +88,7 @@ use expr::rewrite_call;\n use config::BlockIndentStyle;\n use macros::convert_try_mac;\n \n+use std::iter;\n use syntax::{ast, ptr};\n use syntax::codemap::{mk_sp, Span};\n \n@@ -99,6 +100,12 @@ pub fn rewrite_chain(expr: &ast::Expr,\n     let total_span = expr.span;\n     let (parent, subexpr_list) = make_subexpr_list(expr, context);\n \n+    // Bail out if the chain is just try sugar, i.e., an expression followed by\n+    // any number of `?`s.\n+    if chain_only_try(&subexpr_list) {\n+        return rewrite_try(&parent, subexpr_list.len(), context, width, offset);\n+    }\n+\n     // Parent is the first item in the chain, e.g., `foo` in `foo.bar.baz()`.\n     let parent_block_indent = chain_base_indent(context, offset);\n     let parent_context = &RewriteContext { block_indent: parent_block_indent, ..*context };\n@@ -196,6 +203,27 @@ pub fn rewrite_chain(expr: &ast::Expr,\n              offset)\n }\n \n+// True if the chain is only `?`s.\n+fn chain_only_try(exprs: &[ast::Expr]) -> bool {\n+    exprs.iter().all(|e| if let ast::ExprKind::Try(_) = e.node {\n+        true\n+    } else {\n+        false\n+    })\n+}\n+\n+pub fn rewrite_try(expr: &ast::Expr,\n+                   try_count: usize,\n+                   context: &RewriteContext,\n+                   width: usize,\n+                   offset: Indent)\n+                   -> Option<String> {\n+    let sub_expr = try_opt!(expr.rewrite(context, width - try_count, offset));\n+    Some(format!(\"{}{}\",\n+                 sub_expr,\n+                 iter::repeat(\"?\").take(try_count).collect::<String>()))\n+}\n+\n fn join_rewrites(rewrites: &[String], subexps: &[ast::Expr], connector: &str) -> String {\n     let mut rewrite_iter = rewrites.iter();\n     let mut result = rewrite_iter.next().unwrap().clone();"}, {"sha": "39d3c65d9b7dbf7dce8791626a2bf56c053eea0f", "filename": "tests/source/chains.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0087306761184a4ee53b7f6d014732ed3dc0a529/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0087306761184a4ee53b7f6d014732ed3dc0a529/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=0087306761184a4ee53b7f6d014732ed3dc0a529", "patch": "@@ -134,3 +134,18 @@ fn try_shorthand() {\n                               |tcx| tcx.lookup_item_type(def_id).generics)?;\n     fooooooooooooooooooooooooooo()?.bar()?.baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz()?;\n }\n+\n+fn issue_1004() {\n+         match *self {\n+                ty::ImplOrTraitItem::MethodTraitItem(ref i) => write!(f, \"{:?}\", i),\n+                ty::ImplOrTraitItem::ConstTraitItem(ref i) => write!(f, \"{:?}\", i),\n+                ty::ImplOrTraitItem::TypeTraitItem(ref i) => write!(f, \"{:?}\", i),\n+            }\n+            ?;\n+\n+            ty::tls::with(|tcx| {\n+                let tap = ty::Binder(TraitAndProjections(principal, projections));\n+                in_binder(f, tcx, &ty::Binder(\"\"), Some(tap))\n+            })\n+            ?;\n+}"}, {"sha": "53a54e8522d0b0756a9d871f5d841bf7d8a2ea7f", "filename": "tests/target/chains.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0087306761184a4ee53b7f6d014732ed3dc0a529/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0087306761184a4ee53b7f6d014732ed3dc0a529/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=0087306761184a4ee53b7f6d014732ed3dc0a529", "patch": "@@ -163,3 +163,16 @@ fn try_shorthand() {\n         .bar()?\n         .baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz()?;\n }\n+\n+fn issue_1004() {\n+    match *self {\n+        ty::ImplOrTraitItem::MethodTraitItem(ref i) => write!(f, \"{:?}\", i),\n+        ty::ImplOrTraitItem::ConstTraitItem(ref i) => write!(f, \"{:?}\", i),\n+        ty::ImplOrTraitItem::TypeTraitItem(ref i) => write!(f, \"{:?}\", i),\n+    }?;\n+\n+    ty::tls::with(|tcx| {\n+        let tap = ty::Binder(TraitAndProjections(principal, projections));\n+        in_binder(f, tcx, &ty::Binder(\"\"), Some(tap))\n+    })?;\n+}"}]}