{"sha": "f6a4b5270a0007e950546828a7f6fc7c54354b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YTRiNTI3MGEwMDA3ZTk1MDU0NjgyOGE3ZjZmYzdjNTQzNTRiOTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-02T23:13:28Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-02T23:13:28Z"}, "message": "Deduplicate needed parentheses suggestion code", "tree": {"sha": "9957f766cf04f54b8c9cee777ef7a88239c6664d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9957f766cf04f54b8c9cee777ef7a88239c6664d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6a4b5270a0007e950546828a7f6fc7c54354b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a4b5270a0007e950546828a7f6fc7c54354b96", "html_url": "https://github.com/rust-lang/rust/commit/f6a4b5270a0007e950546828a7f6fc7c54354b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6a4b5270a0007e950546828a7f6fc7c54354b96/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0cef5cf406016d5c1685a164a27571d182fa873", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0cef5cf406016d5c1685a164a27571d182fa873", "html_url": "https://github.com/rust-lang/rust/commit/e0cef5cf406016d5c1685a164a27571d182fa873"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "763d6b898a4849c6e09ed085d27829d58e9d8c09", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6a4b5270a0007e950546828a7f6fc7c54354b96/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a4b5270a0007e950546828a7f6fc7c54354b96/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f6a4b5270a0007e950546828a7f6fc7c54354b96", "patch": "@@ -4177,17 +4177,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 if let Some(sp) = tcx.sess.parse_sess.abiguous_block_expr_parse\n                                     .borrow().get(&sp)\n                                 {\n-                                    if let Ok(snippet) = tcx.sess.source_map()\n-                                        .span_to_snippet(*sp)\n-                                    {\n-                                        err.span_suggestion(\n-                                            *sp,\n-                                            \"parentheses are required to parse this \\\n-                                             as an expression\",\n-                                            format!(\"({})\", snippet),\n-                                            Applicability::MachineApplicable,\n-                                        );\n-                                    }\n+                                    tcx.sess.parse_sess.expr_parentheses_needed(\n+                                        &mut err,\n+                                        *sp,\n+                                        None,\n+                                    );\n                                 }\n                                 err.emit();\n                                 oprnd_t = tcx.types.err;"}, {"sha": "0d41a1ff84904be31a1c53c71ad242da4f110e24", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f6a4b5270a0007e950546828a7f6fc7c54354b96/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a4b5270a0007e950546828a7f6fc7c54354b96/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f6a4b5270a0007e950546828a7f6fc7c54354b96", "patch": "@@ -11,7 +11,7 @@ use crate::tokenstream::{TokenStream, TokenTree};\n use crate::diagnostics::plugin::ErrorMap;\n use crate::print::pprust::token_to_string;\n \n-use errors::{FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n+use errors::{Applicability, FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::sync::{Lrc, Lock};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n use log::debug;\n@@ -47,6 +47,9 @@ pub struct ParseSess {\n     included_mod_stack: Lock<Vec<PathBuf>>,\n     source_map: Lrc<SourceMap>,\n     pub buffered_lints: Lock<Vec<BufferedEarlyLint>>,\n+    /// Contains the spans of block expressions that could have been incomplete based on the\n+    /// operation token that followed it, but that the parser cannot identify without further\n+    /// analysis.\n     pub abiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n }\n \n@@ -95,6 +98,24 @@ impl ParseSess {\n             });\n         });\n     }\n+\n+    /// Extend an error with a suggestion to wrap an expression with parentheses to allow the\n+    /// parser to continue parsing the following operation as part of the same expression.\n+    pub fn expr_parentheses_needed(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        span: Span,\n+        alt_snippet: Option<String>,\n+    ) {\n+        if let Some(snippet) = self.source_map().span_to_snippet(span).ok().or(alt_snippet) {\n+            err.span_suggestion(\n+                span,\n+                \"parentheses are required to parse this as an expression\",\n+                format!(\"({})\", snippet),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "66d45f799d97d50f83c17995d08445f56bb84b7d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f6a4b5270a0007e950546828a7f6fc7c54354b96/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a4b5270a0007e950546828a7f6fc7c54354b96/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f6a4b5270a0007e950546828a7f6fc7c54354b96", "patch": "@@ -2931,14 +2931,7 @@ impl<'a> Parser<'a> {\n                             if let Some(sp) = self.sess.abiguous_block_expr_parse.borrow()\n                                 .get(&sp)\n                             {\n-                                if let Ok(snippet) = self.sess.source_map().span_to_snippet(*sp) {\n-                                    err.span_suggestion(\n-                                        *sp,\n-                                        \"parentheses are required to parse this as an expression\",\n-                                        format!(\"({})\", snippet),\n-                                        Applicability::MachineApplicable,\n-                                    );\n-                                }\n+                                self.sess.expr_parentheses_needed(&mut err, *sp, None);\n                             }\n                             err.span_label(self.span, \"expected expression\");\n                             return Err(err);\n@@ -3657,14 +3650,11 @@ impl<'a> Parser<'a> {\n                     pprust::token_to_string(&self.token),\n                 ));\n                 err.span_label(self.span, \"expected expression\");\n-                let snippet = self.sess.source_map().span_to_snippet(lhs.span)\n-                    .unwrap_or_else(|_| pprust::expr_to_string(&lhs));\n-                err.span_suggestion(\n+                self.sess.expr_parentheses_needed(\n+                    &mut err,\n                     lhs.span,\n-                    \"parentheses are required to parse this as an expression\",\n-                    format!(\"({})\", snippet),\n-                    Applicability::MachineApplicable,\n-                );\n+                    Some(pprust::expr_to_string(&lhs),\n+                ));\n                 err.emit();\n             }\n         }\n@@ -4979,14 +4969,7 @@ impl<'a> Parser<'a> {\n                         err.span_label(self.span, format!(\"expected {}\", expected));\n                         let sp = self.sess.source_map().start_point(self.span);\n                         if let Some(sp) = self.sess.abiguous_block_expr_parse.borrow().get(&sp) {\n-                            if let Ok(snippet) = self.sess.source_map().span_to_snippet(*sp) {\n-                                err.span_suggestion(\n-                                    *sp,\n-                                    \"parentheses are required to parse this as an expression\",\n-                                    format!(\"({})\", snippet),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n+                            self.sess.expr_parentheses_needed(&mut err, *sp, None);\n                         }\n                         return Err(err);\n                     }"}]}