{"sha": "a6f817f42926ab6d7487081209fbff674934b4a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZjgxN2Y0MjkyNmFiNmQ3NDg3MDgxMjA5ZmJmZjY3NDkzNGI0YTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-16T16:33:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-16T16:33:01Z"}, "message": "Rollup merge of #67249 - ranma42:improve-starts-with-literal-char, r=BurntSushi\n\nImprove code generated for `starts_with(<literal char>)`\n\nThis PR includes two minor improvements to the code generated when checking for string prefix/suffix.\n\nThe first commit simplifies the str/str operation, by taking advantage of the raw UTF-8 representation.\n\nThe second commit replaces the current str/char matching logic with a char->str encoding and then the previous method.\n\nThe resulting code should be equivalent in the generic case (one char is being encoded versus one char being decoded), but it becomes easy to optimize in the case of a literal char, which in most cases a developer might expect to be at least as simple as that of a literal string.\n\nThis PR should fix #41993", "tree": {"sha": "971315905259a078db059080964220fc56255a4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971315905259a078db059080964220fc56255a4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6f817f42926ab6d7487081209fbff674934b4a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd97G9CRBK7hj4Ov3rIwAAdHIIAE6scUAQwAxY7NWxqvGtS3cj\nONe7a/RJdBxu4/vVsBx579hea68vh0edvXOh90KRDohqenSjPHy/1+pkI1KoR741\n16GmCaolSm//voG06d+UGAe4yFPms7XqNwAopqwNBaBvoaXByj8/gogmffFyWn7X\nwVwtqETzjgo49uyAxK2q0Y/lJgE8y7Zl7jlXNIRSQSepGex/BpNgA8XPBizR0HHC\ntaPszZaH5fW4vNSJpQqw+gfM/XehVaImkhGcQRnaycWmPKEsjVnGcpMLFtQbSj2m\naKlT5l1cITrX3qsemHQAphNONIc0L6b5twYa/inJoxramS7enX7PomRSvtYgx8U=\n=i1de\n-----END PGP SIGNATURE-----\n", "payload": "tree 971315905259a078db059080964220fc56255a4b\nparent f0d4b571936d4072ed90ab7750636f68f1443b3e\nparent 3de1923d5d3aad5c4bb0914f054e950bf166aa00\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576513981 +0100\ncommitter GitHub <noreply@github.com> 1576513981 +0100\n\nRollup merge of #67249 - ranma42:improve-starts-with-literal-char, r=BurntSushi\n\nImprove code generated for `starts_with(<literal char>)`\n\nThis PR includes two minor improvements to the code generated when checking for string prefix/suffix.\n\nThe first commit simplifies the str/str operation, by taking advantage of the raw UTF-8 representation.\n\nThe second commit replaces the current str/char matching logic with a char->str encoding and then the previous method.\n\nThe resulting code should be equivalent in the generic case (one char is being encoded versus one char being decoded), but it becomes easy to optimize in the case of a literal char, which in most cases a developer might expect to be at least as simple as that of a literal string.\n\nThis PR should fix #41993\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f817f42926ab6d7487081209fbff674934b4a0", "html_url": "https://github.com/rust-lang/rust/commit/a6f817f42926ab6d7487081209fbff674934b4a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6f817f42926ab6d7487081209fbff674934b4a0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0d4b571936d4072ed90ab7750636f68f1443b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d4b571936d4072ed90ab7750636f68f1443b3e", "html_url": "https://github.com/rust-lang/rust/commit/f0d4b571936d4072ed90ab7750636f68f1443b3e"}, {"sha": "3de1923d5d3aad5c4bb0914f054e950bf166aa00", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de1923d5d3aad5c4bb0914f054e950bf166aa00", "html_url": "https://github.com/rust-lang/rust/commit/3de1923d5d3aad5c4bb0914f054e950bf166aa00"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "570fc4ab93390ecba7eb509c0be49cbd5ebba634", "filename": "src/libcore/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6f817f42926ab6d7487081209fbff674934b4a0/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f817f42926ab6d7487081209fbff674934b4a0/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=a6f817f42926ab6d7487081209fbff674934b4a0", "patch": "@@ -11,4 +11,5 @@ mod hash;\n mod iter;\n mod num;\n mod ops;\n+mod pattern;\n mod slice;"}, {"sha": "a49490cec12190810d4c864f828da805c9f2bc61", "filename": "src/libcore/benches/pattern.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a6f817f42926ab6d7487081209fbff674934b4a0/src%2Flibcore%2Fbenches%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f817f42926ab6d7487081209fbff674934b4a0/src%2Flibcore%2Fbenches%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fpattern.rs?ref=a6f817f42926ab6d7487081209fbff674934b4a0", "patch": "@@ -0,0 +1,43 @@\n+use test::black_box;\n+use test::Bencher;\n+\n+#[bench]\n+fn starts_with_char(b: &mut Bencher) {\n+    let text = black_box(\"kdjsfhlakfhlsghlkvcnljknfqiunvcijqenwodind\");\n+    b.iter(|| {\n+        for _ in 0..1024 {\n+            black_box(text.starts_with('k'));\n+        }\n+    })\n+}\n+\n+#[bench]\n+fn starts_with_str(b: &mut Bencher) {\n+    let text = black_box(\"kdjsfhlakfhlsghlkvcnljknfqiunvcijqenwodind\");\n+    b.iter(|| {\n+        for _ in 0..1024 {\n+            black_box(text.starts_with(\"k\"));\n+        }\n+    })\n+}\n+\n+\n+#[bench]\n+fn ends_with_char(b: &mut Bencher) {\n+    let text = black_box(\"kdjsfhlakfhlsghlkvcnljknfqiunvcijqenwodind\");\n+    b.iter(|| {\n+        for _ in 0..1024 {\n+            black_box(text.ends_with('k'));\n+        }\n+    })\n+}\n+\n+#[bench]\n+fn ends_with_str(b: &mut Bencher) {\n+    let text = black_box(\"kdjsfhlakfhlsghlkvcnljknfqiunvcijqenwodind\");\n+    b.iter(|| {\n+        for _ in 0..1024 {\n+            black_box(text.ends_with(\"k\"));\n+        }\n+    })\n+}"}, {"sha": "b7ebd5f88b589ccf7a6c918b81a42c16d47a3375", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a6f817f42926ab6d7487081209fbff674934b4a0/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f817f42926ab6d7487081209fbff674934b4a0/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=a6f817f42926ab6d7487081209fbff674934b4a0", "patch": "@@ -445,21 +445,13 @@ impl<'a> Pattern<'a> for char {\n \n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        if let Some(ch) = haystack.chars().next() {\n-            self == ch\n-        } else {\n-            false\n-        }\n+        self.encode_utf8(&mut [0u8; 4]).is_prefix_of(haystack)\n     }\n \n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n     {\n-        if let Some(ch) = haystack.chars().next_back() {\n-            self == ch\n-        } else {\n-            false\n-        }\n+        self.encode_utf8(&mut [0u8; 4]).is_suffix_of(haystack)\n     }\n }\n \n@@ -710,16 +702,13 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n     /// Checks whether the pattern matches at the front of the haystack\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        haystack.is_char_boundary(self.len()) &&\n-            self == &haystack[..self.len()]\n+        haystack.as_bytes().starts_with(self.as_bytes())\n     }\n \n     /// Checks whether the pattern matches at the back of the haystack\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool {\n-        self.len() <= haystack.len() &&\n-            haystack.is_char_boundary(haystack.len() - self.len()) &&\n-            self == &haystack[haystack.len() - self.len()..]\n+        haystack.as_bytes().ends_with(self.as_bytes())\n     }\n }\n "}]}