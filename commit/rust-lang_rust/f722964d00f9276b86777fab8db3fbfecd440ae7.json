{"sha": "f722964d00f9276b86777fab8db3fbfecd440ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MjI5NjRkMDBmOTI3NmI4Njc3N2ZhYjhkYjNmYmZlY2Q0NDBhZTc=", "commit": {"author": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2020-01-29T01:53:45Z"}, "committer": {"name": "Peter Todd", "email": "pete@petertodd.org", "date": "2020-01-29T01:53:45Z"}, "message": "Minor: note why we can rely on Any trait for safety", "tree": {"sha": "5465feea2309f14924755a3b780859b99d336ed3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5465feea2309f14924755a3b780859b99d336ed3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f722964d00f9276b86777fab8db3fbfecd440ae7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEFcyURjhyM68BBPYTJIFAPaXwkfsFAl4w5a0ACgkQJIFAPaXw\nkfvq8Qf/Yo4k+GflsX0C2dBADO7MRKjIF5WRztrNKlmhc2CHgh4+kRBSxmro4Qhz\nCiuYHFQrfy9rXarhuB5qivGT5sz+3Wrh9vZlpfBL8J0Nbq1LJ3emTssPVRp8jRl5\nMOBVTmzVojDv1CuoMUjwSZGrZBlS+wSg8MKfxPkbkimhYD2GfNaPZ5I6tjN/hYE7\nuwDSICgZwdYxK/FNGJOKS/LbwxVt9EraFm8KotsTXvldXk2Lqu39EkgYrMiXDygo\nZ5i3d/RPB4UVvLXLxTYSChoT9fq1Bx99lEWFrJCA4iQcWs45NHYJWUEC8leN7ffU\nUvEmDk9YJd8zxsNL13Vz1/+Y8fMVaA==\n=zsLi\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAJunr3iOcUIByHAWs/zfSqTQdYMSfVH9GytRMrEvcC7CP/wEDm78NbqG9ZT\n0w1oxjjrt1YI8QReMOWx8AjpGxl0s4fkCgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEFZ0cXX3xhQI8Gm8kLvwgagI8QReMOWz\n8AgGhFB8oAfkjACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wEL+j2JmbKPV6dREbD6Bq/1kI8QReMOWy8AjIp7+TVOZ4\nIwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQ9rvh26IKWbuKIcrqKF+W3AjxBF4w5bLwCAbhOEWaW3J6AIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----", "payload": "tree 5465feea2309f14924755a3b780859b99d336ed3\nparent 3761dcd3467441f78939ccb3b341b03b6a7558d7\nauthor Peter Todd <pete@petertodd.org> 1580262825 -0500\ncommitter Peter Todd <pete@petertodd.org> 1580262825 -0500\n\nMinor: note why we can rely on Any trait for safety\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f722964d00f9276b86777fab8db3fbfecd440ae7", "html_url": "https://github.com/rust-lang/rust/commit/f722964d00f9276b86777fab8db3fbfecd440ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f722964d00f9276b86777fab8db3fbfecd440ae7/comments", "author": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petertodd", "id": 7042, "node_id": "MDQ6VXNlcjcwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petertodd", "html_url": "https://github.com/petertodd", "followers_url": "https://api.github.com/users/petertodd/followers", "following_url": "https://api.github.com/users/petertodd/following{/other_user}", "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions", "organizations_url": "https://api.github.com/users/petertodd/orgs", "repos_url": "https://api.github.com/users/petertodd/repos", "events_url": "https://api.github.com/users/petertodd/events{/privacy}", "received_events_url": "https://api.github.com/users/petertodd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3761dcd3467441f78939ccb3b341b03b6a7558d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3761dcd3467441f78939ccb3b341b03b6a7558d7", "html_url": "https://github.com/rust-lang/rust/commit/3761dcd3467441f78939ccb3b341b03b6a7558d7"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "97ef513cbcc63d14ad7bbca205f04f38f20a3213", "filename": "src/libcore/any.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f722964d00f9276b86777fab8db3fbfecd440ae7/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f722964d00f9276b86777fab8db3fbfecd440ae7/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=f722964d00f9276b86777fab8db3fbfecd440ae7", "patch": "@@ -194,7 +194,9 @@ impl dyn Any {\n     #[inline]\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         if self.is::<T>() {\n-            // SAFETY: just checked whether we are pointing to the correct type\n+            // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n+            // that check for memory safety because we have implemented Any for all types; no other\n+            // impls can exist as they would conflict with our impl.\n             unsafe { Some(&*(self as *const dyn Any as *const T)) }\n         } else {\n             None\n@@ -228,7 +230,9 @@ impl dyn Any {\n     #[inline]\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n-            // SAFETY: just checked whether we are pointing to the correct type\n+            // SAFETY: just checked whether we are pointing to the correct type, and we can rely on\n+            // that check for memory safety because we have implemented Any for all types; no other\n+            // impls can exist as they would conflict with our impl.\n             unsafe { Some(&mut *(self as *mut dyn Any as *mut T)) }\n         } else {\n             None"}]}