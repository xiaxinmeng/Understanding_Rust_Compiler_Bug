{"sha": "a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZmRmYzA1ZDc2MWJmMTliMjA4ZTU3MDZkNmRiY2JiMmRmNDM4YjI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-17T08:35:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-17T08:35:58Z"}, "message": "Merge pull request #2298 from goodmanjonathan/else_if_without_else\n\nadd new lint else_if_without_else", "tree": {"sha": "19c018a327425619b1568d463f52375247efc85d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19c018a327425619b1568d463f52375247efc85d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaXwruCRBK7hj4Ov3rIwAAdHIIABl2Sr+ZWSGyl+J4KlpMVahL\nn4Pz871rxboWOtxyDt70aKyIKzU8KsadQTk8QIBS3ElQIZ4KeMselOhM9zWkKori\n4zbLRIgopLaYPFPKYmLWihYJhxgsHATu0a8QqVQDGNOS7q9N4vHzV2kM5Gm8+vl3\nwj6Gn67uj97Zl2A/8sY0Ura71YQmw/zVxKwHcsZv0UeRJI/gGzjIpYQoe5DUJAeQ\n+A6y1RSmBU1gO31bVr0ICHHNkGSEUsHVheISW9kqp8GIOknM3UFyAM6afiMOs9ZB\nO06XpIHSZCYVNiatLf0TZtQ2mPNC1j0+sxHvzbdx0vy0Q3z8g3rT+3Cz6CPB/IU=\n=351t\n-----END PGP SIGNATURE-----\n", "payload": "tree 19c018a327425619b1568d463f52375247efc85d\nparent 3d2d94b9c99fa0b0cc3b42f2e2f328e5ebfc7f42\nparent 40c6f431da2133e743570cf2ab870741fd4aeb28\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1516178158 +0100\ncommitter GitHub <noreply@github.com> 1516178158 +0100\n\nMerge pull request #2298 from goodmanjonathan/else_if_without_else\n\nadd new lint else_if_without_else"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "html_url": "https://github.com/rust-lang/rust/commit/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d2d94b9c99fa0b0cc3b42f2e2f328e5ebfc7f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2d94b9c99fa0b0cc3b42f2e2f328e5ebfc7f42", "html_url": "https://github.com/rust-lang/rust/commit/3d2d94b9c99fa0b0cc3b42f2e2f328e5ebfc7f42"}, {"sha": "40c6f431da2133e743570cf2ab870741fd4aeb28", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c6f431da2133e743570cf2ab870741fd4aeb28", "html_url": "https://github.com/rust-lang/rust/commit/40c6f431da2133e743570cf2ab870741fd4aeb28"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "b354fe7059600bdb191e1bce95be866421733e54", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "patch": "@@ -0,0 +1,70 @@\n+//! lint on if expressions with an else if, but without a final else branch\n+\n+use rustc::lint::*;\n+use syntax::ast::*;\n+\n+use utils::{in_external_macro, span_lint_and_sugg};\n+\n+/// **What it does:** Checks for usage of if expressions with an `else if` branch,\n+/// but without a final `else` branch.\n+///\n+/// **Why is this bad?** Some coding guidelines require this (e.g. MISRA-C:2004 Rule 14.10).\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// if x.is_positive() {\n+///     a();\n+/// } else if x.is_negative() {\n+///     b();\n+/// }\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// if x.is_positive() {\n+///     a();\n+/// } else if x.is_negative() {\n+///     b();\n+/// } else {\n+///     // we don't care about zero\n+/// }\n+/// ```\n+declare_restriction_lint! {\n+    pub ELSE_IF_WITHOUT_ELSE,\n+    \"if expression with an `else if`, but without a final `else` branch\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct ElseIfWithoutElse;\n+\n+impl LintPass for ElseIfWithoutElse {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ELSE_IF_WITHOUT_ELSE)\n+    }\n+}\n+\n+impl EarlyLintPass for ElseIfWithoutElse {\n+    fn check_expr(&mut self, cx: &EarlyContext, mut item: &Expr) {\n+        if in_external_macro(cx, item.span) {\n+            return;\n+        }\n+\n+        while let ExprKind::If(_, _, Some(ref els)) = item.node {\n+            if let ExprKind::If(_, _, None) = els.node {\n+                span_lint_and_sugg(\n+                    cx,\n+                    ELSE_IF_WITHOUT_ELSE,\n+                    els.span,\n+                    \"if expression with an `else if`, but without a final `else`\",\n+                    \"add an `else` block here\",\n+                    \"\".to_string()\n+                );\n+            }\n+\n+            item = els;\n+        }\n+    }\n+}"}, {"sha": "11afefd6d4be6e5cf3fd1d590488898b3e0b383a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "patch": "@@ -88,6 +88,7 @@ pub mod derive;\n pub mod doc;\n pub mod double_parens;\n pub mod drop_forget_ref;\n+pub mod else_if_without_else;\n pub mod empty_enum;\n pub mod entry;\n pub mod enum_clike;\n@@ -329,6 +330,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box formatting::Formatting);\n     reg.register_late_lint_pass(box swap::Swap);\n     reg.register_early_lint_pass(box if_not_else::IfNotElse);\n+    reg.register_early_lint_pass(box else_if_without_else::ElseIfWithoutElse);\n     reg.register_early_lint_pass(box int_plus_one::IntPlusOne);\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n@@ -369,6 +371,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         arithmetic::INTEGER_ARITHMETIC,\n         array_indexing::INDEXING_SLICING,\n         assign_ops::ASSIGN_OPS,\n+        else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n         misc::FLOAT_CMP_CONST,\n     ]);\n "}, {"sha": "4f019819effc00e266def274169b56ddcead578f", "filename": "tests/ui/else_if_without_else.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/tests%2Fui%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/tests%2Fui%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.rs?ref=a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "patch": "@@ -0,0 +1,50 @@\n+#![warn(clippy)]\n+#![warn(else_if_without_else)]\n+\n+fn bla1() -> bool { unimplemented!() }\n+fn bla2() -> bool { unimplemented!() }\n+fn bla3() -> bool { unimplemented!() }\n+\n+fn main() {\n+    if bla1() {\n+        println!(\"if\");\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else {\n+        println!(\"else\");\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else if bla2() {\n+        println!(\"else if\");\n+    } else {\n+        println!(\"else\")\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else if bla2() {\n+        println!(\"else if 1\");\n+    } else if bla3() {\n+        println!(\"else if 2\");\n+    } else {\n+        println!(\"else\")\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else if bla2() { //~ ERROR else if without else\n+        println!(\"else if\");\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else if bla2() {\n+        println!(\"else if 1\");\n+    } else if bla3() { //~ ERROR else if without else\n+        println!(\"else if 2\");\n+    }\n+}"}, {"sha": "2395c2afde1374900c51633a2af30dcf3f8e2f63", "filename": "tests/ui/else_if_without_else.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/tests%2Fui%2Felse_if_without_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2fdfc05d761bf19b208e5706d6dbcbb2df438b2/tests%2Fui%2Felse_if_without_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.stderr?ref=a2fdfc05d761bf19b208e5706d6dbcbb2df438b2", "patch": "@@ -0,0 +1,20 @@\n+error: if expression with an `else if`, but without a final `else`\n+  --> $DIR/else_if_without_else.rs:39:12\n+   |\n+39 |       } else if bla2() { //~ ERROR else if without else\n+   |  ____________^\n+40 | |         println!(\"else if\");\n+41 | |     }\n+   | |_____^ help: add an `else` block here\n+   |\n+   = note: `-D else-if-without-else` implied by `-D warnings`\n+\n+error: if expression with an `else if`, but without a final `else`\n+  --> $DIR/else_if_without_else.rs:47:12\n+   |\n+47 |       } else if bla3() { //~ ERROR else if without else\n+   |  ____________^\n+48 | |         println!(\"else if 2\");\n+49 | |     }\n+   | |_____^ help: add an `else` block here\n+"}]}