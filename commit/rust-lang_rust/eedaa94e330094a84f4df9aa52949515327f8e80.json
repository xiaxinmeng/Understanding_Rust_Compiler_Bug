{"sha": "eedaa94e330094a84f4df9aa52949515327f8e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZGFhOTRlMzMwMDk0YTg0ZjRkZjlhYTUyOTQ5NTE1MzI3ZjhlODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-02T21:58:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-02T21:58:10Z"}, "message": "Auto merge of #39470 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 9 pull requests\n\n- Successful merges: #38823, #39196, #39299, #39319, #39373, #39383, #39416, #39420, #39427\n- Failed merges:", "tree": {"sha": "6aecbbce96b60f7526484eab622ad2817fc55dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aecbbce96b60f7526484eab622ad2817fc55dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eedaa94e330094a84f4df9aa52949515327f8e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eedaa94e330094a84f4df9aa52949515327f8e80", "html_url": "https://github.com/rust-lang/rust/commit/eedaa94e330094a84f4df9aa52949515327f8e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eedaa94e330094a84f4df9aa52949515327f8e80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a47a6ea771ca4426b6bba29219bdc7d2bceec3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a47a6ea771ca4426b6bba29219bdc7d2bceec3d5", "html_url": "https://github.com/rust-lang/rust/commit/a47a6ea771ca4426b6bba29219bdc7d2bceec3d5"}, {"sha": "d09e4de640de7632f82f034ef48f73e4ec0ea4ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d09e4de640de7632f82f034ef48f73e4ec0ea4ca", "html_url": "https://github.com/rust-lang/rust/commit/d09e4de640de7632f82f034ef48f73e4ec0ea4ca"}], "stats": {"total": 212, "additions": 75, "deletions": 137}, "files": [{"sha": "1ae0aae2d01baeb9664f244ececb7a3815145716", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -167,6 +167,7 @@ O\u017ebolt Menegatti <ozbolt.menegatti@gmail.com> gareins <ozbolt.menegatti@gmail.c\n Paul Faria <paul_faria@ultimatesoftware.com> Paul Faria <Nashenas88@gmail.com>\n Peer Aramillo Irizar <peer.aramillo.irizar@gmail.com> parir <peer.aramillo.irizar@gmail.com>\n Peter Elmers <peter.elmers@yahoo.com> <peter.elmers@rice.edu>\n+Peter Liniker <peter.liniker+github@gmail.com>\n Peter Zotov <whitequark@whitequark.org>\n Phil Dawes <phil@phildawes.net> Phil Dawes <pdawes@drw.com>\n Philipp Br\u00fcschweiler <blei42@gmail.com> <blei42@gmail.com>"}, {"sha": "ef19c0dc7cc5e16a1fbc85a2577783dc6c1447cf", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -499,6 +499,10 @@ be imported in every test with `mod common;`\n That's all there is to the `tests` directory. The `tests` module isn't needed\n here, since the whole thing is focused on tests.\n \n+Note, when building integration tests, cargo will not pass the `test` attribute\n+to the compiler. It means that all parts in `cfg(test)` won't be included in\n+the build used in your integration tests.\n+\n Let's finally check out that third section: documentation tests.\n \n # Documentation tests"}, {"sha": "6114006cbb341c068fd9936244616cb71fadfffd", "filename": "src/doc/nomicon/dropck.md", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Fdoc%2Fnomicon%2Fdropck.md", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Fdoc%2Fnomicon%2Fdropck.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fdropck.md?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -199,24 +199,42 @@ assert (unsafely) that a generic type's destructor is *guaranteed* to\n not access any expired data, even if its type gives it the capability\n to do so.\n \n-That attribute is called `unsafe_destructor_blind_to_params`.\n+That attribute is called `may_dangle` and was introduced in [RFC 1327]\n+(https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md).\n To deploy it on the Inspector example from above, we would write:\n \n ```rust,ignore\n struct Inspector<'a>(&'a u8, &'static str);\n \n-impl<'a> Drop for Inspector<'a> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] 'a> Drop for Inspector<'a> {\n     fn drop(&mut self) {\n         println!(\"Inspector(_, {}) knows when *not* to inspect.\", self.1);\n     }\n }\n ```\n \n-This attribute has the word `unsafe` in it because the compiler is not\n-checking the implicit assertion that no potentially expired data\n+Use of this attribute requires the `Drop` impl to be marked `unsafe` because the\n+compiler is not checking the implicit assertion that no potentially expired data\n (e.g. `self.0` above) is accessed.\n \n+The attribute can be applied to any number of lifetime and type parameters. In\n+the following example, we assert that we access no data behind a reference of\n+lifetime `'b` and that the only uses of `T` will be moves or drops, but omit\n+the attribute from `'a` and `U`, because we do access data with that lifetime\n+and that type:\n+\n+```rust,ignore\n+use std::fmt::Display;\n+\n+struct Inspector<'a, 'b, T, U: Display>(&'a u8, &'b u8, T, U);\n+\n+unsafe impl<'a, #[may_dangle] 'b, #[may_dangle] T, U: Display> Drop for Inspector<'a, 'b, T, U> {\n+    fn drop(&mut self) {\n+        println!(\"Inspector({}, _, _, {})\", self.0, self.3);\n+    }\n+}\n+```\n+\n It is sometimes obvious that no such access can occur, like the case above.\n However, when dealing with a generic type parameter, such access can\n occur indirectly. Examples of such indirect access are:\n@@ -263,7 +281,7 @@ some other method invoked by the destructor, rather than being written\n directly within it.\n \n In all of the above cases where the `&'a u8` is accessed in the\n-destructor, adding the `#[unsafe_destructor_blind_to_params]`\n+destructor, adding the `#[may_dangle]`\n attribute makes the type vulnerable to misuse that the borrower\n checker will not catch, inviting havoc. It is better to avoid adding\n the attribute."}, {"sha": "6108a06634bb88cfaefafda0e88a76f80aa12e2d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -17,9 +17,11 @@\n //! pointer to the same value in the heap. When the last [`Rc`] pointer to a\n //! given value is destroyed, the pointed-to value is also destroyed.\n //!\n-//! Shared references in Rust disallow mutation by default, and `Rc` is no\n-//! exception. If you need to mutate through an [`Rc`], use [`Cell`] or\n-//! [`RefCell`].\n+//! Shared references in Rust disallow mutation by default, and [`Rc`]\n+//! is no exception: you cannot obtain a mutable reference to\n+//! something inside an [`Rc`]. If you need mutability, put a [`Cell`]\n+//! or [`RefCell`] inside the [`Rc`]; see [an example of mutability\n+//! inside an Rc][mutability].\n //!\n //! [`Rc`] uses non-atomic reference counting. This means that overhead is very\n //! low, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]\n@@ -214,6 +216,7 @@\n //! [upgrade]: struct.Weak.html#method.upgrade\n //! [`None`]: ../../std/option/enum.Option.html#variant.None\n //! [assoc]: ../../book/method-syntax.html#associated-functions\n+//! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "855f4a8197e35558a9e384a0a6072dcb1890bfae", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -109,7 +109,6 @@ pub mod util {\n     pub mod common;\n     pub mod ppaux;\n     pub mod nodemap;\n-    pub mod num;\n     pub mod fs;\n }\n "}, {"sha": "da04976a96a37234b4f1cfaf05af3b622ce865ab", "filename": "src/librustc/util/num.rs", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/a47a6ea771ca4426b6bba29219bdc7d2bceec3d5/src%2Flibrustc%2Futil%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47a6ea771ca4426b6bba29219bdc7d2bceec3d5/src%2Flibrustc%2Futil%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnum.rs?ref=a47a6ea771ca4426b6bba29219bdc7d2bceec3d5", "patch": "@@ -1,98 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub trait ToPrimitive {\n-    fn to_i8(&self) -> Option<i8>;\n-    fn to_i16(&self) -> Option<i16>;\n-    fn to_i32(&self) -> Option<i32>;\n-    fn to_i64(&self) -> Option<i64>;\n-    fn to_u8(&self) -> Option<u8>;\n-    fn to_u16(&self) -> Option<u16>;\n-    fn to_u32(&self) -> Option<u32>;\n-    fn to_u64(&self) -> Option<u64>;\n-}\n-\n-impl ToPrimitive for i64 {\n-    fn to_i8(&self) -> Option<i8> {\n-        if *self < i8::min_value() as i64 || *self > i8::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as i8)\n-        }\n-    }\n-    fn to_i16(&self) -> Option<i16> {\n-        if *self < i16::min_value() as i64 || *self > i16::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as i16)\n-        }\n-    }\n-    fn to_i32(&self) -> Option<i32> {\n-        if *self < i32::min_value() as i64 || *self > i32::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as i32)\n-        }\n-    }\n-    fn to_i64(&self) -> Option<i64> {\n-        Some(*self)\n-    }\n-    fn to_u8(&self) -> Option<u8> {\n-        if *self < 0 || *self > u8::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as u8)\n-        }\n-    }\n-    fn to_u16(&self) -> Option<u16> {\n-        if *self < 0 || *self > u16::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as u16)\n-        }\n-    }\n-    fn to_u32(&self) -> Option<u32> {\n-        if *self < 0 || *self > u32::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as u32)\n-        }\n-    }\n-    fn to_u64(&self) -> Option<u64> {\n-        if *self < 0 {None} else {Some(*self as u64)}\n-    }\n-}\n-\n-impl ToPrimitive for u64 {\n-    fn to_i8(&self) -> Option<i8> {\n-        if *self > i8::max_value() as u64 {None} else {Some(*self as i8)}\n-    }\n-    fn to_i16(&self) -> Option<i16> {\n-        if *self > i16::max_value() as u64 {None} else {Some(*self as i16)}\n-    }\n-    fn to_i32(&self) -> Option<i32> {\n-        if *self > i32::max_value() as u64 {None} else {Some(*self as i32)}\n-    }\n-    fn to_i64(&self) -> Option<i64> {\n-        if *self > i64::max_value() as u64 {None} else {Some(*self as i64)}\n-    }\n-    fn to_u8(&self) -> Option<u8> {\n-        if *self > u8::max_value() as u64 {None} else {Some(*self as u8)}\n-    }\n-    fn to_u16(&self) -> Option<u16> {\n-        if *self > u16::max_value() as u64 {None} else {Some(*self as u16)}\n-    }\n-    fn to_u32(&self) -> Option<u32> {\n-        if *self > u32::max_value() as u64 {None} else {Some(*self as u32)}\n-    }\n-    fn to_u64(&self) -> Option<u64> {\n-        Some(*self)\n-    }\n-}"}, {"sha": "47a98155fc4b026a425a37fd0a1f9805140b83a7", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//#![allow(non_camel_case_types)]\n-\n use rustc::middle::const_val::ConstVal::*;\n use rustc::middle::const_val::ConstVal;\n use self::ErrKind::*;"}, {"sha": "58b2017ceb66e8a7dd562e7369ca72578f63feba", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -804,7 +804,7 @@ extern \"C\" {\n                                     Name: *const c_char)\n                                     -> ValueRef;\n     pub fn LLVMRustAddHandler(CatchSwitch: ValueRef, Handler: BasicBlockRef);\n-    pub fn LLVMRustSetPersonalityFn(B: BuilderRef, Pers: ValueRef);\n+    pub fn LLVMSetPersonalityFn(Func: ValueRef, Pers: ValueRef);\n \n     // Add a case to the switch instruction\n     pub fn LLVMAddCase(Switch: ValueRef, OnVal: ValueRef, Dest: BasicBlockRef);"}, {"sha": "121d592da0316881621fc53468fffc0da11eca32", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -16,8 +16,6 @@ use rustc::hir;\n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn ast_block(&mut self,\n                      destination: &Lvalue<'tcx>,\n-                     // FIXME(#32959): temporary measure for the issue\n-                     dest_is_unit: bool,\n                      mut block: BasicBlock,\n                      ast_block: &'tcx hir::Block)\n                      -> BlockAnd<()> {\n@@ -83,8 +81,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             // of the block.\n             if let Some(expr) = expr {\n                 unpack!(block = this.into(destination, block, expr));\n-            } else if dest_is_unit {\n-                // FIXME(#31472)\n+            } else {\n                 let source_info = this.source_info(span);\n                 this.cfg.push_assign_unit(block, source_info, destination);\n             }"}, {"sha": "3d4af259ec9f72550ed8ce17f51692872bc00392", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 this.in_scope(extent, block, |this| this.into(destination, block, value))\n             }\n             ExprKind::Block { body: ast_block } => {\n-                this.ast_block(destination, expr.ty.is_nil(), block, ast_block)\n+                this.ast_block(destination, block, ast_block)\n             }\n             ExprKind::Match { discriminant, arms } => {\n                 this.match_expr(destination, expr_span, block, discriminant, arms)"}, {"sha": "c113716ca5c74295339868d95bda27492dbcc0d3", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -1107,7 +1107,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     pub fn set_personality_fn(&self, personality: ValueRef) {\n         unsafe {\n-            llvm::LLVMRustSetPersonalityFn(self.llbuilder, personality);\n+            llvm::LLVMSetPersonalityFn(self.llfn(), personality);\n         }\n     }\n "}, {"sha": "30c138310da9c501d158ba856ecd2b6890540a82", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -319,7 +319,9 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     mircx.cleanup_kinds.iter_enumerated().map(|(bb, cleanup_kind)| {\n         if let CleanupKind::Funclet = *cleanup_kind {\n             let bcx = mircx.get_builder(bb);\n-            bcx.set_personality_fn(mircx.ccx.eh_personality());\n+            unsafe {\n+                llvm::LLVMSetPersonalityFn(mircx.llfn, mircx.ccx.eh_personality());\n+            }\n             if base::wants_msvc_seh(ccx.sess()) {\n                 return Some(Funclet::new(bcx.cleanup_pad(None, &[])));\n             }"}, {"sha": "40eb7e5ab78c3df024e83346641c41979913fc76", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -1806,12 +1806,13 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                     String::new()\n                 };\n \n-                let mut unsafety_flag = \"\";\n-                if let clean::FunctionItem(ref func) = myitem.inner {\n-                    if func.unsafety == hir::Unsafety::Unsafe {\n-                        unsafety_flag = \"<a title='unsafe function' href='#'><sup>\u26a0</sup></a>\";\n+                let unsafety_flag = match myitem.inner {\n+                    clean::FunctionItem(ref func) | clean::ForeignFunctionItem(ref func)\n+                    if func.unsafety == hir::Unsafety::Unsafe => {\n+                        \"<a title='unsafe function' href='#'><sup>\u26a0</sup></a>\"\n                     }\n-                }\n+                    _ => \"\",\n+                };\n \n                 let doc_value = myitem.doc_value().unwrap_or(\"\");\n                 write!(w, \""}, {"sha": "2532a1def7ddaf65a23d14bf377b6acf2cf6e79c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -2456,9 +2456,21 @@ impl<'a> Parser<'a> {\n                             Some(f) => f,\n                             None => continue,\n                         };\n-                        err.help(&format!(\"try parenthesizing the first index; e.g., `(foo.{}){}`\",\n-                                 float.trunc() as usize,\n-                                 format!(\".{}\", fstr.splitn(2, \".\").last().unwrap())));\n+                        let sugg = pprust::to_string(|s| {\n+                            use print::pprust::PrintState;\n+                            use print::pp::word;\n+                            s.popen()?;\n+                            s.print_expr(&e)?;\n+                            word(&mut s.s, \".\")?;\n+                            s.print_usize(float.trunc() as usize)?;\n+                            s.pclose()?;\n+                            word(&mut s.s, \".\")?;\n+                            word(&mut s.s, fstr.splitn(2, \".\").last().unwrap())\n+                        });\n+                        err.span_suggestion(\n+                            prev_span,\n+                            \"try parenthesizing the first index\",\n+                            sugg);\n                     }\n                     return Err(err);\n \n@@ -3900,7 +3912,14 @@ impl<'a> Parser<'a> {\n                     if self.eat(&token::Semi) {\n                         stmt_span.hi = self.prev_span.hi;\n                     }\n-                    e.span_help(stmt_span, \"try placing this code inside a block\");\n+                    let sugg = pprust::to_string(|s| {\n+                        use print::pprust::{PrintState, INDENT_UNIT};\n+                        s.ibox(INDENT_UNIT)?;\n+                        s.bopen()?;\n+                        s.print_stmt(&stmt)?;\n+                        s.bclose_maybe_open(stmt.span, INDENT_UNIT, false)\n+                    });\n+                    e.span_suggestion(stmt_span, \"try placing this code inside a block\", sugg);\n                 }\n                 Err(mut e) => {\n                     self.recover_stmt_(SemiColonMode::Break);"}, {"sha": "34ee7d552f346f7ad1b578a75c905971917b5cb3", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -1082,14 +1082,6 @@ extern \"C\" void LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n #endif\n }\n \n-extern \"C\" void LLVMRustSetPersonalityFn(LLVMBuilderRef B,\n-                                         LLVMValueRef Personality) {\n-#if LLVM_VERSION_GE(3, 8)\n-  unwrap(B)->GetInsertBlock()->getParent()->setPersonalityFn(\n-      cast<Function>(unwrap(Personality)));\n-#endif\n-}\n-\n #if LLVM_VERSION_GE(3, 8)\n extern \"C\" OperandBundleDef *LLVMRustBuildOperandBundleDef(const char *Name,\n                                                            LLVMValueRef *Inputs,"}, {"sha": "6a140e6f21c1948220cd005b7a66f7b6198f65d1", "filename": "src/test/compile-fail/missing-block-hint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Ftest%2Fcompile-fail%2Fmissing-block-hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Ftest%2Fcompile-fail%2Fmissing-block-hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-block-hint.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -15,6 +15,7 @@ fn main() {\n     {\n         if (foo)\n             bar; //~ ERROR expected `{`, found `bar`\n-                 //^ HELP try placing this code inside a block\n+                 //~^ HELP try placing this code inside a block\n+                 //~| SUGGESTION { bar; }\n     }\n }"}, {"sha": "57ad89ad374045f1cd6a645139722f5e12a69fc7", "filename": "src/test/parse-fail/tuple-float-index.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Ftest%2Fparse-fail%2Ftuple-float-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedaa94e330094a84f4df9aa52949515327f8e80/src%2Ftest%2Fparse-fail%2Ftuple-float-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftuple-float-index.rs?ref=eedaa94e330094a84f4df9aa52949515327f8e80", "patch": "@@ -12,5 +12,6 @@\n \n fn main () {\n     (1, (2, 3)).1.1; //~ ERROR unexpected token\n-                     //~^ HELP try parenthesizing the first index; e.g., `(foo.1).1`\n+                     //~^ HELP try parenthesizing the first index\n+                     //~| SUGGESTION ((1, (2, 3)).1).1\n }"}]}