{"sha": "071f0422c6dd897bc61891f96d4448df44d8069f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MWYwNDIyYzZkZDg5N2JjNjE4OTFmOTZkNDQ0OGRmNDRkODA2OWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-28T19:12:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-28T20:38:59Z"}, "message": "linker: Add a linker rerun hack for gcc versions not supporting -static-pie", "tree": {"sha": "8bbc808f51867a927f8139eb6545e38db9ca114f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bbc808f51867a927f8139eb6545e38db9ca114f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/071f0422c6dd897bc61891f96d4448df44d8069f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/071f0422c6dd897bc61891f96d4448df44d8069f", "html_url": "https://github.com/rust-lang/rust/commit/071f0422c6dd897bc61891f96d4448df44d8069f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/071f0422c6dd897bc61891f96d4448df44d8069f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45127211566c53bac386b66909a830649182ab7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45127211566c53bac386b66909a830649182ab7a", "html_url": "https://github.com/rust-lang/rust/commit/45127211566c53bac386b66909a830649182ab7a"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "b322e9a8fef1cea2d62c24cbf6eb49509f4b38a7", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/071f0422c6dd897bc61891f96d4448df44d8069f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071f0422c6dd897bc61891f96d4448df44d8069f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=071f0422c6dd897bc61891f96d4448df44d8069f", "patch": "@@ -12,7 +12,7 @@ use rustc_session::utils::NativeLibKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n-use rustc_target::spec::crt_objects::CrtObjectsFallback;\n+use rustc_target::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel};\n \n@@ -25,16 +25,10 @@ use crate::{looks_like_rust_object_file, CodegenResults, CrateInfo, METADATA_FIL\n use cc::windows_registry;\n use tempfile::{Builder as TempFileBuilder, TempDir};\n \n-use std::ascii;\n-use std::char;\n-use std::env;\n use std::ffi::OsString;\n-use std::fmt;\n-use std::fs;\n-use std::io;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n-use std::str;\n+use std::{ascii, char, env, fmt, fs, io, mem, str};\n \n pub fn remove(sess: &Session, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n@@ -543,6 +537,61 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             continue;\n         }\n \n+        // Detect '-static-pie' used with an older version of gcc or clang not supporting it.\n+        // Fallback from '-static-pie' to '-static' in that case.\n+        if sess.target.target.options.linker_is_gnu\n+            && flavor != LinkerFlavor::Ld\n+            && (out.contains(\"unrecognized command line option\")\n+                || out.contains(\"unknown argument\"))\n+            && (out.contains(\"-static-pie\") || out.contains(\"--no-dynamic-linker\"))\n+            && cmd.get_args().iter().any(|e| e.to_string_lossy() == \"-static-pie\")\n+        {\n+            info!(\"linker output: {:?}\", out);\n+            warn!(\n+                \"Linker does not support -static-pie command line option. Retrying with -static instead.\"\n+            );\n+            // Mirror `add_(pre,post)_link_objects` to replace CRT objects.\n+            let fallback = crt_objects_fallback(sess, crate_type);\n+            let opts = &sess.target.target.options;\n+            let pre_objects =\n+                if fallback { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n+            let post_objects =\n+                if fallback { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n+            let get_objects = |objects: &CrtObjects, kind| {\n+                objects\n+                    .get(&kind)\n+                    .iter()\n+                    .copied()\n+                    .flatten()\n+                    .map(|obj| get_object_file_path(sess, obj).into_os_string())\n+                    .collect::<Vec<_>>()\n+            };\n+            let pre_objects_static_pie = get_objects(pre_objects, LinkOutputKind::StaticPicExe);\n+            let post_objects_static_pie = get_objects(post_objects, LinkOutputKind::StaticPicExe);\n+            let mut pre_objects_static = get_objects(pre_objects, LinkOutputKind::StaticNoPicExe);\n+            let mut post_objects_static = get_objects(post_objects, LinkOutputKind::StaticNoPicExe);\n+            // Assume that we know insertion positions for the replacement arguments from replaced\n+            // arguments, which is true for all supported targets.\n+            assert!(pre_objects_static.is_empty() || !pre_objects_static_pie.is_empty());\n+            assert!(post_objects_static.is_empty() || !post_objects_static_pie.is_empty());\n+            for arg in cmd.take_args() {\n+                if arg.to_string_lossy() == \"-static-pie\" {\n+                    // Replace the output kind.\n+                    cmd.arg(\"-static\");\n+                } else if pre_objects_static_pie.contains(&arg) {\n+                    // Replace the pre-link objects (replace the first and remove the rest).\n+                    cmd.args(mem::take(&mut pre_objects_static));\n+                } else if post_objects_static_pie.contains(&arg) {\n+                    // Replace the post-link objects (replace the first and remove the rest).\n+                    cmd.args(mem::take(&mut post_objects_static));\n+                } else {\n+                    cmd.arg(arg);\n+                }\n+            }\n+            info!(\"{:?}\", &cmd);\n+            continue;\n+        }\n+\n         // Here's a terribly awful hack that really shouldn't be present in any\n         // compiler. Here an environment variable is supported to automatically\n         // retry the linker invocation if the linker looks like it segfaulted."}, {"sha": "fb3f912ffde1ad500d76bcfc2c95581e8a30b384", "filename": "src/librustc_target/spec/tests/tests_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/071f0422c6dd897bc61891f96d4448df44d8069f/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/071f0422c6dd897bc61891f96d4448df44d8069f/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs?ref=071f0422c6dd897bc61891f96d4448df44d8069f", "patch": "@@ -39,5 +39,10 @@ impl Target {\n                 assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n             }\n         }\n+        assert!(\n+            (self.options.pre_link_objects_fallback.is_empty()\n+                && self.options.post_link_objects_fallback.is_empty())\n+                || self.options.crt_objects_fallback.is_some()\n+        );\n     }\n }"}]}