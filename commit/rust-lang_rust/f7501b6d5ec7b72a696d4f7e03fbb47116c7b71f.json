{"sha": "f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NTAxYjZkNWVjN2I3MmE2OTZkNGY3ZTAzZmJiNDcxMTZjN2I3MWY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-17T22:51:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T22:51:20Z"}, "message": "Rollup merge of #82021 - csmoe:issue-78600, r=tmandry\n\nSpell out nested Self type in lint message\n\nCloses #78600\nr? `@tmandry`", "tree": {"sha": "a43bc225212082351133ae53a1512c568fb22bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43bc225212082351133ae53a1512c568fb22bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLZ3pCRBK7hj4Ov3rIwAAdHIIADh5Vd19sh4WSKd2HkNeS7Ob\naRHvE0UoxivuPscCw2r5/zYvhtZ61osJy/11gNxHcRTWhHh0DRwpGVzrUX18ZY4M\nDZbpW6KXukvrKcpjJNoiCzpOYLuWhWJ6KYpzw04XOuJXw+ZpzG4gfObH52GSc/5R\n7/DieGP8JVo2r37nlIgGntLlmpz/GPp4TobFGvzVzXgsamACcZLMIZ0gpPh0foHb\nuMlRU4mHaICJ0c1PvR9rPfQ0nnDjp7mXgiItb9+K+j034g+lNa5TxC/Jz9dmy+Pa\nUI+qWTyn524xXKnzJRWHNB/Ztvl1ZvXiV92carcgMwIzNDNZDdjVPxSBkHcc00o=\n=espZ\n-----END PGP SIGNATURE-----\n", "payload": "tree a43bc225212082351133ae53a1512c568fb22bb8\nparent 0b2f2b941332954c5bd80e61eabce3ee2161a7f5\nparent 5385a3d6a779b2e85d47c3fc317796ea3755c11a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613602280 +0100\ncommitter GitHub <noreply@github.com> 1613602280 +0100\n\nRollup merge of #82021 - csmoe:issue-78600, r=tmandry\n\nSpell out nested Self type in lint message\n\nCloses #78600\nr? `@tmandry`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f", "html_url": "https://github.com/rust-lang/rust/commit/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b2f2b941332954c5bd80e61eabce3ee2161a7f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2f2b941332954c5bd80e61eabce3ee2161a7f5", "html_url": "https://github.com/rust-lang/rust/commit/0b2f2b941332954c5bd80e61eabce3ee2161a7f5"}, {"sha": "5385a3d6a779b2e85d47c3fc317796ea3755c11a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5385a3d6a779b2e85d47c3fc317796ea3755c11a", "html_url": "https://github.com/rust-lang/rust/commit/5385a3d6a779b2e85d47c3fc317796ea3755c11a"}], "stats": {"total": 75, "additions": 62, "deletions": 13}, "files": [{"sha": "5d7f5bf1c7b8001b06800c7de473ca09007d476a", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f", "patch": "@@ -7,8 +7,9 @@ use rustc_attr as attr;\n use rustc_errors::{Applicability, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ItemKind, Node};\n+use rustc_hir::{def::Res, ItemKind, Node, PathSegment};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -513,10 +514,11 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         }\n     }\n \n-    #[derive(Debug)]\n     struct ProhibitOpaqueVisitor<'tcx> {\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n+        tcx: TyCtxt<'tcx>,\n+        selftys: Vec<(Span, Option<String>)>,\n     }\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n@@ -533,6 +535,29 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         }\n     }\n \n+    impl Visitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+        type Map = rustc_middle::hir::map::Map<'tcx>;\n+\n+        fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n+            hir::intravisit::NestedVisitorMap::OnlyBodies(self.tcx.hir())\n+        }\n+\n+        fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n+            match arg.kind {\n+                hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n+                    [PathSegment { res: Some(Res::SelfTy(_, impl_ref)), .. }] => {\n+                        let impl_ty_name =\n+                            impl_ref.map(|(def_id, _)| self.tcx.def_path_str(def_id));\n+                        self.selftys.push((path.span, impl_ty_name));\n+                    }\n+                    _ => {}\n+                },\n+                _ => {}\n+            }\n+            hir::intravisit::walk_ty(self, arg);\n+        }\n+    }\n+\n     if let ItemKind::OpaqueTy(hir::OpaqueTy {\n         origin: hir::OpaqueTyOrigin::AsyncFn | hir::OpaqueTyOrigin::FnReturn,\n         ..\n@@ -544,17 +569,20 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n             ),\n             generics: tcx.generics_of(def_id),\n+            tcx,\n+            selftys: vec![],\n         };\n         let prohibit_opaque = tcx\n             .explicit_item_bounds(def_id)\n             .iter()\n             .try_for_each(|(predicate, _)| predicate.visit_with(&mut visitor));\n         debug!(\n-            \"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}, visitor={:?}\",\n-            prohibit_opaque, visitor\n+            \"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}, visitor.opaque_identity_ty={:?}, visitor.generics={:?}\",\n+            prohibit_opaque, visitor.opaque_identity_ty, visitor.generics\n         );\n \n         if let Some(ty) = prohibit_opaque.break_value() {\n+            visitor.visit_item(&item);\n             let is_async = match item.kind {\n                 ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n                     matches!(origin, hir::OpaqueTyOrigin::AsyncFn)\n@@ -571,15 +599,13 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 if is_async { \"async fn\" } else { \"impl Trait\" },\n             );\n \n-            if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n-                if snippet == \"Self\" {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider spelling out the type instead\",\n-                        format!(\"{:?}\", ty),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+            for (span, name) in visitor.selftys {\n+                err.span_suggestion(\n+                    span,\n+                    \"consider spelling out the type instead\",\n+                    name.unwrap_or_else(|| format!(\"{:?}\", ty)),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n             err.emit();\n         }"}, {"sha": "8aaeaecf3e1da11ddb7c81d4e5e20b252974d8a0", "filename": "src/test/ui/async-await/issues/issue-78600.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.rs?ref=f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+\n+struct S<'a>(&'a i32);\n+\n+impl<'a> S<'a> {\n+    async fn new(i: &'a i32) -> Result<Self, ()> {\n+        //~^ ERROR: `async fn`\n+        Ok(S(&22))\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "92b66147106e1eae7ecf4b851d1f1975cf9af1c6", "filename": "src/test/ui/async-await/issues/issue-78600.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr?ref=f7501b6d5ec7b72a696d4f7e03fbb47116c7b71f", "patch": "@@ -0,0 +1,11 @@\n+error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/issue-78600.rs:6:33\n+   |\n+LL |     async fn new(i: &'a i32) -> Result<Self, ()> {\n+   |                                 ^^^^^^^----^^^^^\n+   |                                        |\n+   |                                        help: consider spelling out the type instead: `S<'a>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0760`."}]}