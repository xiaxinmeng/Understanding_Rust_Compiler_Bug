{"sha": "1c4823e81c57fce3aa2770e35c70d6d474f9e98b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNDgyM2U4MWM1N2ZjZTNhYTI3NzBlMzVjNzBkNmQ0NzRmOWU5OGI=", "commit": {"author": {"name": "John Paul Adrian Glaubitz", "email": "glaubitz@physik.fu-berlin.de", "date": "2019-01-06T10:02:30Z"}, "committer": {"name": "John Paul Adrian Glaubitz", "email": "glaubitz@physik.fu-berlin.de", "date": "2019-01-06T10:58:13Z"}, "message": "flock: Use fcntl constants directly from libc crate on Unix targets\n\nSince the values for the fcntl constants can vary from architecture\nto architecture, it is better to use the values defined in the libc\ncrate instead of assigning literals in the flock code which would\nmake the assumption that all architectures use the same values.\n\nFixes #57007", "tree": {"sha": "ab56c2b930ab355a57018b1080bedd377acb210e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab56c2b930ab355a57018b1080bedd377acb210e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c4823e81c57fce3aa2770e35c70d6d474f9e98b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4823e81c57fce3aa2770e35c70d6d474f9e98b", "html_url": "https://github.com/rust-lang/rust/commit/1c4823e81c57fce3aa2770e35c70d6d474f9e98b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c4823e81c57fce3aa2770e35c70d6d474f9e98b/comments", "author": {"login": "glaubitz", "id": 1647645, "node_id": "MDQ6VXNlcjE2NDc2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1647645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glaubitz", "html_url": "https://github.com/glaubitz", "followers_url": "https://api.github.com/users/glaubitz/followers", "following_url": "https://api.github.com/users/glaubitz/following{/other_user}", "gists_url": "https://api.github.com/users/glaubitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/glaubitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glaubitz/subscriptions", "organizations_url": "https://api.github.com/users/glaubitz/orgs", "repos_url": "https://api.github.com/users/glaubitz/repos", "events_url": "https://api.github.com/users/glaubitz/events{/privacy}", "received_events_url": "https://api.github.com/users/glaubitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glaubitz", "id": 1647645, "node_id": "MDQ6VXNlcjE2NDc2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1647645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glaubitz", "html_url": "https://github.com/glaubitz", "followers_url": "https://api.github.com/users/glaubitz/followers", "following_url": "https://api.github.com/users/glaubitz/following{/other_user}", "gists_url": "https://api.github.com/users/glaubitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/glaubitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glaubitz/subscriptions", "organizations_url": "https://api.github.com/users/glaubitz/orgs", "repos_url": "https://api.github.com/users/glaubitz/repos", "events_url": "https://api.github.com/users/glaubitz/events{/privacy}", "received_events_url": "https://api.github.com/users/glaubitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e903c3e96dcc484e83624bda2df0da5409c3d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e903c3e96dcc484e83624bda2df0da5409c3d49", "html_url": "https://github.com/rust-lang/rust/commit/1e903c3e96dcc484e83624bda2df0da5409c3d49"}], "stats": {"total": 46, "additions": 5, "deletions": 41}, "files": [{"sha": "2dea249f1c07c25773f4858225aaba14d56d076d", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1c4823e81c57fce3aa2770e35c70d6d474f9e98b/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4823e81c57fce3aa2770e35c70d6d474f9e98b/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=1c4823e81c57fce3aa2770e35c70d6d474f9e98b", "patch": "@@ -31,12 +31,6 @@ cfg_if! {\n                 // not actually here, but brings in line with freebsd\n                 pub l_sysid: libc::c_int,\n             }\n-\n-            pub const F_RDLCK: libc::c_short = 0;\n-            pub const F_WRLCK: libc::c_short = 1;\n-            pub const F_UNLCK: libc::c_short = 2;\n-            pub const F_SETLK: libc::c_int = 6;\n-            pub const F_SETLKW: libc::c_int = 7;\n         }\n \n         #[cfg(target_os = \"freebsd\")]\n@@ -52,12 +46,6 @@ cfg_if! {\n                 pub l_whence: libc::c_short,\n                 pub l_sysid: libc::c_int,\n             }\n-\n-            pub const F_RDLCK: libc::c_short = 1;\n-            pub const F_UNLCK: libc::c_short = 2;\n-            pub const F_WRLCK: libc::c_short = 3;\n-            pub const F_SETLK: libc::c_int = 12;\n-            pub const F_SETLKW: libc::c_int = 13;\n         }\n \n         #[cfg(any(target_os = \"dragonfly\",\n@@ -78,12 +66,6 @@ cfg_if! {\n                 // not actually here, but brings in line with freebsd\n                 pub l_sysid: libc::c_int,\n             }\n-\n-            pub const F_RDLCK: libc::c_short = 1;\n-            pub const F_UNLCK: libc::c_short = 2;\n-            pub const F_WRLCK: libc::c_short = 3;\n-            pub const F_SETLK: libc::c_int = 8;\n-            pub const F_SETLKW: libc::c_int = 9;\n         }\n \n         #[cfg(target_os = \"haiku\")]\n@@ -101,12 +83,6 @@ cfg_if! {\n                 // not actually here, but brings in line with freebsd\n                 pub l_sysid: libc::c_int,\n             }\n-\n-            pub const F_RDLCK: libc::c_short = 0x0040;\n-            pub const F_UNLCK: libc::c_short = 0x0200;\n-            pub const F_WRLCK: libc::c_short = 0x0400;\n-            pub const F_SETLK: libc::c_int = 0x0080;\n-            pub const F_SETLKW: libc::c_int = 0x0100;\n         }\n \n         #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n@@ -124,12 +100,6 @@ cfg_if! {\n                 // not actually here, but brings in line with freebsd\n                 pub l_sysid: libc::c_int,\n             }\n-\n-            pub const F_RDLCK: libc::c_short = 1;\n-            pub const F_UNLCK: libc::c_short = 2;\n-            pub const F_WRLCK: libc::c_short = 3;\n-            pub const F_SETLK: libc::c_int = 8;\n-            pub const F_SETLKW: libc::c_int = 9;\n         }\n \n         #[cfg(target_os = \"solaris\")]\n@@ -145,12 +115,6 @@ cfg_if! {\n                 pub l_sysid: libc::c_int,\n                 pub l_pid: libc::pid_t,\n             }\n-\n-            pub const F_RDLCK: libc::c_short = 1;\n-            pub const F_WRLCK: libc::c_short = 2;\n-            pub const F_UNLCK: libc::c_short = 3;\n-            pub const F_SETLK: libc::c_int = 6;\n-            pub const F_SETLKW: libc::c_int = 7;\n         }\n \n         #[derive(Debug)]\n@@ -182,9 +146,9 @@ cfg_if! {\n                 }\n \n                 let lock_type = if exclusive {\n-                    os::F_WRLCK\n+                    libc::F_WRLCK as libc::c_short\n                 } else {\n-                    os::F_RDLCK\n+                    libc::F_RDLCK as libc::c_short\n                 };\n \n                 let flock = os::flock {\n@@ -195,7 +159,7 @@ cfg_if! {\n                     l_type: lock_type,\n                     l_sysid: 0,\n                 };\n-                let cmd = if wait { os::F_SETLKW } else { os::F_SETLK };\n+                let cmd = if wait { libc::F_SETLKW } else { libc::F_SETLK };\n                 let ret = unsafe {\n                     libc::fcntl(fd, cmd, &flock)\n                 };\n@@ -216,11 +180,11 @@ cfg_if! {\n                     l_len: 0,\n                     l_pid: 0,\n                     l_whence: libc::SEEK_SET as libc::c_short,\n-                    l_type: os::F_UNLCK,\n+                    l_type: libc::F_UNLCK as libc::c_short,\n                     l_sysid: 0,\n                 };\n                 unsafe {\n-                    libc::fcntl(self.fd, os::F_SETLK, &flock);\n+                    libc::fcntl(self.fd, libc::F_SETLK, &flock);\n                     libc::close(self.fd);\n                 }\n             }"}]}