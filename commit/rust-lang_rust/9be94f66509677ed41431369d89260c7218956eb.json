{"sha": "9be94f66509677ed41431369d89260c7218956eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZTk0ZjY2NTA5Njc3ZWQ0MTQzMTM2OWQ4OTI2MGM3MjE4OTU2ZWI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-01T21:25:06Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-04T16:54:03Z"}, "message": "Provide mechanisms to inspect warning settings from outside lint.", "tree": {"sha": "4c76086bbf81c64f1cc6a76f8ed870841619c26b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c76086bbf81c64f1cc6a76f8ed870841619c26b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be94f66509677ed41431369d89260c7218956eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be94f66509677ed41431369d89260c7218956eb", "html_url": "https://github.com/rust-lang/rust/commit/9be94f66509677ed41431369d89260c7218956eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be94f66509677ed41431369d89260c7218956eb/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b5777c8b6e4c3f580aa9e256de96b4b4b92739", "html_url": "https://github.com/rust-lang/rust/commit/01b5777c8b6e4c3f580aa9e256de96b4b4b92739"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "7d8953f2fd4143ab61e62b2c0e6351925d0adcf4", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9be94f66509677ed41431369d89260c7218956eb/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be94f66509677ed41431369d89260c7218956eb/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=9be94f66509677ed41431369d89260c7218956eb", "patch": "@@ -11,7 +11,7 @@ import syntax::print::pprust::expr_to_str;\n export lint, ctypes, unused_imports;\n export level, ignore, warn, error;\n export lookup_lint, lint_dict, get_lint_dict, check_crate;\n-export warning_settings;\n+export warning_settings, warning_methods;\n \n #[doc=\"\n \n@@ -21,6 +21,14 @@ basis. They contrast with static constraints enforced by other phases of the\n compiler, which are generally required to hold in order to compile the program\n at all.\n \n+We also build up a table containing information about lint settings, in order\n+to allow other passes to take advantage of the warning attribute\n+infrastructure. To save space, the table is keyed by the id of /items/, not of\n+every expression. When an item has the default settings, the entry will be\n+omitted. If we start allowing warn attributes on expressions, we will start\n+having entries for expressions that do not share their enclosing items\n+settings.\n+\n \"]\n \n enum lint {\n@@ -100,6 +108,39 @@ type warning_settings = {\n     settings_map: lint_mode_map\n };\n \n+fn get_warning_level(modes: lint_modes, lint: lint) -> level {\n+    alt modes.find(lint as uint) {\n+      some(c) { c }\n+      none { ignore }\n+    }\n+}\n+\n+fn span_lint(tcx: ty::ctxt, level: level, span: span, msg: str) {\n+    alt level {\n+      ignore { }\n+      warn { tcx.sess.span_warn(span, msg); }\n+      error { tcx.sess.span_err(span, msg); }\n+    }\n+}\n+\n+impl warning_methods for warning_settings {\n+    fn get_level(lint_mode: lint,\n+                 _expr_id: ast::node_id, item_id: ast::node_id) -> level {\n+        alt self.settings_map.find(item_id) {\n+          some(modes) { get_warning_level(modes, lint_mode) }\n+          none { get_warning_level(self.default_settings, lint_mode) }\n+        }\n+    }\n+\n+    fn span_lint(tcx: ty::ctxt, lint_mode: lint,\n+                 expr_id: ast::node_id, item_id: ast::node_id,\n+                 span: span, msg: str) {\n+        let level = self.get_level(lint_mode, expr_id, item_id);\n+        span_lint(tcx, level, span, msg);\n+    }\n+\n+}\n+\n // This is kind of unfortunate. It should be somewhere else, or we should use\n // a persistent data structure...\n fn clone_lint_modes(modes: lint_modes) -> lint_modes {\n@@ -115,10 +156,7 @@ type ctxt = {dict: lint_dict,\n \n impl methods for ctxt {\n     fn get_level(lint: lint) -> level {\n-        alt self.curr.find(lint as uint) {\n-          some(c) { c }\n-          none { ignore }\n-        }\n+        get_warning_level(self.curr, lint)\n     }\n \n     fn set_level(lint: lint, level: level) {\n@@ -130,11 +168,7 @@ impl methods for ctxt {\n     }\n \n     fn span_lint(level: level, span: span, msg: str) {\n-        alt level {\n-          ignore { }\n-          warn { self.tcx.sess.span_warn(span, msg); }\n-          error { self.tcx.sess.span_err(span, msg); }\n-        }\n+        span_lint(self.tcx, level, span, msg);\n     }\n \n     #[doc=\""}]}