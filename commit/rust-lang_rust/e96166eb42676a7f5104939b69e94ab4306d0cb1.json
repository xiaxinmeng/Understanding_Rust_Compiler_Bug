{"sha": "e96166eb42676a7f5104939b69e94ab4306d0cb1", "node_id": "C_kwDOAAsO6NoAKGU5NjE2NmViNDI2NzZhN2Y1MTA0OTM5YjY5ZTk0YWI0MzA2ZDBjYjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T22:03:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-18T22:03:06Z"}, "message": "Rollup merge of #105867 - matthiaskrgr:rec_param, r=compiler-errors\n\nremove redundant fn params that were only \"used\" in recursion", "tree": {"sha": "eb1a8d26b47a0b657678040d5a28507faedad5a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb1a8d26b47a0b657678040d5a28507faedad5a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e96166eb42676a7f5104939b69e94ab4306d0cb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjn44aCRBK7hj4Ov3rIwAAEQIIAD4kLlEbarxW6IJrLiYtZ+L2\nFdINA6VDWWG0UiIQGIA3XSalbdC65AouC3krj/fyMKVPA+D9Px0dE6/dMFPD7WJo\n1M/RjYHVltT4POgUZguoD1sHMhwZAJwQBIbmJUYbiuTfn1Uk9fhWtRbOzRaxEHFI\nZbA/wayGIJc4u9TkmDe2vXqazM1VjxnHcDbOEeY78EAU27/JtktqDihKDZqccrNW\nqpttf3iWKMI7snpAcMYZqQJCYSLA/bft+jo4DSy5gnzd4tVo10byFCMdLcYcB8It\nk+HCRh9dMELay/56t5KJ2RH7N8JhSUUaWaQiuzKBT1W9YB86GLux7Hxe2XcI34Q=\n=9MGl\n-----END PGP SIGNATURE-----\n", "payload": "tree eb1a8d26b47a0b657678040d5a28507faedad5a8\nparent be48d219381f4a4e4c82ca6348777ee827fafd17\nparent 6e52a0f42182b6f628329b32db951beb57bcb2e0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671400986 +0100\ncommitter GitHub <noreply@github.com> 1671400986 +0100\n\nRollup merge of #105867 - matthiaskrgr:rec_param, r=compiler-errors\n\nremove redundant fn params that were only \"used\" in recursion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e96166eb42676a7f5104939b69e94ab4306d0cb1", "html_url": "https://github.com/rust-lang/rust/commit/e96166eb42676a7f5104939b69e94ab4306d0cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e96166eb42676a7f5104939b69e94ab4306d0cb1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be48d219381f4a4e4c82ca6348777ee827fafd17", "url": "https://api.github.com/repos/rust-lang/rust/commits/be48d219381f4a4e4c82ca6348777ee827fafd17", "html_url": "https://github.com/rust-lang/rust/commit/be48d219381f4a4e4c82ca6348777ee827fafd17"}, {"sha": "6e52a0f42182b6f628329b32db951beb57bcb2e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e52a0f42182b6f628329b32db951beb57bcb2e0", "html_url": "https://github.com/rust-lang/rust/commit/6e52a0f42182b6f628329b32db951beb57bcb2e0"}], "stats": {"total": 54, "additions": 10, "deletions": 44}, "files": [{"sha": "0d03346ef0a5e22f5016e2512d2aa86135d347a0", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e96166eb42676a7f5104939b69e94ab4306d0cb1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96166eb42676a7f5104939b69e94ab4306d0cb1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=e96166eb42676a7f5104939b69e94ab4306d0cb1", "patch": "@@ -831,7 +831,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if self.eval_verify_bound(\n                 infcx,\n                 param_env,\n-                body,\n                 generic_ty,\n                 type_test.lower_bound,\n                 &type_test.verify_bound,\n@@ -962,14 +961,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // where `ur` is a local bound -- we are sometimes in a\n             // position to prove things that our caller cannot.  See\n             // #53570 for an example.\n-            if self.eval_verify_bound(\n-                infcx,\n-                param_env,\n-                body,\n-                generic_ty,\n-                ur,\n-                &type_test.verify_bound,\n-            ) {\n+            if self.eval_verify_bound(infcx, param_env, generic_ty, ur, &type_test.verify_bound) {\n                 continue;\n             }\n \n@@ -1190,7 +1182,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        body: &Body<'tcx>,\n         generic_ty: Ty<'tcx>,\n         lower_bound: RegionVid,\n         verify_bound: &VerifyBound<'tcx>,\n@@ -1213,25 +1204,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             VerifyBound::AnyBound(verify_bounds) => verify_bounds.iter().any(|verify_bound| {\n-                self.eval_verify_bound(\n-                    infcx,\n-                    param_env,\n-                    body,\n-                    generic_ty,\n-                    lower_bound,\n-                    verify_bound,\n-                )\n+                self.eval_verify_bound(infcx, param_env, generic_ty, lower_bound, verify_bound)\n             }),\n \n             VerifyBound::AllBounds(verify_bounds) => verify_bounds.iter().all(|verify_bound| {\n-                self.eval_verify_bound(\n-                    infcx,\n-                    param_env,\n-                    body,\n-                    generic_ty,\n-                    lower_bound,\n-                    verify_bound,\n-                )\n+                self.eval_verify_bound(infcx, param_env, generic_ty, lower_bound, verify_bound)\n             }),\n         }\n     }"}, {"sha": "eee0ba2e5ed2740961b4eeabec9b747a96752e41", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e96166eb42676a7f5104939b69e94ab4306d0cb1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96166eb42676a7f5104939b69e94ab4306d0cb1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=e96166eb42676a7f5104939b69e94ab4306d0cb1", "patch": "@@ -99,18 +99,17 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n             ty: Ty<'tcx>,\n             tcx: TyCtxt<'tcx>,\n             param_env: ty::ParamEnv<'tcx>,\n-            span: Span,\n         ) -> bool {\n             // We don't just accept all !needs_drop fields, due to semver concerns.\n             match ty.kind() {\n                 ty::Ref(..) => true, // references never drop (even mutable refs, which are non-Copy and hence fail the later check)\n                 ty::Tuple(tys) => {\n                     // allow tuples of allowed types\n-                    tys.iter().all(|ty| allowed_union_field(ty, tcx, param_env, span))\n+                    tys.iter().all(|ty| allowed_union_field(ty, tcx, param_env))\n                 }\n                 ty::Array(elem, _len) => {\n                     // Like `Copy`, we do *not* special-case length 0.\n-                    allowed_union_field(*elem, tcx, param_env, span)\n+                    allowed_union_field(*elem, tcx, param_env)\n                 }\n                 _ => {\n                     // Fallback case: allow `ManuallyDrop` and things that are `Copy`.\n@@ -124,7 +123,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n         for field in &def.non_enum_variant().fields {\n             let field_ty = field.ty(tcx, substs);\n \n-            if !allowed_union_field(field_ty, tcx, param_env, span) {\n+            if !allowed_union_field(field_ty, tcx, param_env) {\n                 let (field_span, ty_span) = match tcx.hir().get_if_local(field.did) {\n                     // We are currently checking the type this field came from, so it must be local.\n                     Some(Node::Field(field)) => (field.span, field.ty.span),"}, {"sha": "d3e88b1b80ae29a30aec1856320059b54bdbf793", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e96166eb42676a7f5104939b69e94ab4306d0cb1/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96166eb42676a7f5104939b69e94ab4306d0cb1/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=e96166eb42676a7f5104939b69e94ab4306d0cb1", "patch": "@@ -2130,7 +2130,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n         {\n             let ty = self.resolve_vars_if_possible(ti.expected);\n-            let is_slice_or_array_or_vector = self.is_slice_or_array_or_vector(&mut err, snippet.clone(), ty);\n+            let is_slice_or_array_or_vector = self.is_slice_or_array_or_vector(ty);\n             match is_slice_or_array_or_vector.1.kind() {\n                 ty::Adt(adt_def, _)\n                     if self.tcx.is_diagnostic_item(sym::Option, adt_def.did())\n@@ -2159,17 +2159,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn is_slice_or_array_or_vector(\n-        &self,\n-        err: &mut Diagnostic,\n-        snippet: String,\n-        ty: Ty<'tcx>,\n-    ) -> (bool, Ty<'tcx>) {\n+    fn is_slice_or_array_or_vector(&self, ty: Ty<'tcx>) -> (bool, Ty<'tcx>) {\n         match ty.kind() {\n             ty::Adt(adt_def, _) if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did()) => {\n                 (true, ty)\n             }\n-            ty::Ref(_, ty, _) => self.is_slice_or_array_or_vector(err, snippet, *ty),\n+            ty::Ref(_, ty, _) => self.is_slice_or_array_or_vector(*ty),\n             ty::Slice(..) | ty::Array(..) => (true, ty),\n             _ => (false, ty),\n         }"}, {"sha": "948632ccc6c40a87082f62225f42bd1b09ee68ba", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e96166eb42676a7f5104939b69e94ab4306d0cb1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96166eb42676a7f5104939b69e94ab4306d0cb1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=e96166eb42676a7f5104939b69e94ab4306d0cb1", "patch": "@@ -159,13 +159,12 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             orig_env,\n             orig_env,\n             &mut fresh_preds,\n-            false,\n         ) else {\n             return AutoTraitResult::NegativeImpl;\n         };\n \n         let (full_env, full_user_env) = self\n-            .evaluate_predicates(&infcx, trait_did, ty, new_env, user_env, &mut fresh_preds, true)\n+            .evaluate_predicates(&infcx, trait_did, ty, new_env, user_env, &mut fresh_preds)\n             .unwrap_or_else(|| {\n                 panic!(\"Failed to fully process: {:?} {:?} {:?}\", ty, trait_did, orig_env)\n             });\n@@ -247,7 +246,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         user_env: ty::ParamEnv<'tcx>,\n         fresh_preds: &mut FxHashSet<ty::Predicate<'tcx>>,\n-        only_projections: bool,\n     ) -> Option<(ty::ParamEnv<'tcx>, ty::ParamEnv<'tcx>)> {\n         let tcx = infcx.tcx;\n \n@@ -322,7 +320,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                         fresh_preds,\n                         &mut predicates,\n                         &mut select,\n-                        only_projections,\n                     ) {\n                         return None;\n                     }\n@@ -600,7 +597,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         fresh_preds: &mut FxHashSet<ty::Predicate<'tcx>>,\n         predicates: &mut VecDeque<ty::PolyTraitPredicate<'tcx>>,\n         selcx: &mut SelectionContext<'_, 'tcx>,\n-        only_projections: bool,\n     ) -> bool {\n         let dummy_cause = ObligationCause::dummy();\n \n@@ -744,7 +740,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                     fresh_preds,\n                                     predicates,\n                                     selcx,\n-                                    only_projections,\n                                 ) {\n                                     return false;\n                                 }"}]}