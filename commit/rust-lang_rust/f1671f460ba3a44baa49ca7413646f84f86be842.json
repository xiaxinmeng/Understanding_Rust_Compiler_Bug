{"sha": "f1671f460ba3a44baa49ca7413646f84f86be842", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNjcxZjQ2MGJhM2E0NGJhYTQ5Y2E3NDEzNjQ2Zjg0Zjg2YmU4NDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T13:38:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T13:38:53Z"}, "message": "Compress attribute completion tests", "tree": {"sha": "a5828618f9cb1e9ad3f15adb4f5d0dfd57e08d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5828618f9cb1e9ad3f15adb4f5d0dfd57e08d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1671f460ba3a44baa49ca7413646f84f86be842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1671f460ba3a44baa49ca7413646f84f86be842", "html_url": "https://github.com/rust-lang/rust/commit/f1671f460ba3a44baa49ca7413646f84f86be842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1671f460ba3a44baa49ca7413646f84f86be842/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6a6d75d5dba2825e6b90e67e0b147a5f7158e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6a6d75d5dba2825e6b90e67e0b147a5f7158e1", "html_url": "https://github.com/rust-lang/rust/commit/ef6a6d75d5dba2825e6b90e67e0b147a5f7158e1"}], "stats": {"total": 213, "additions": 63, "deletions": 150}, "files": [{"sha": "4e50a294f8d2badbf175b51c9f6f4013545f51f7", "filename": "crates/ra_ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 63, "deletions": 150, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/f1671f460ba3a44baa49ca7413646f84f86be842/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1671f460ba3a44baa49ca7413646f84f86be842/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=f1671f460ba3a44baa49ca7413646f84f86be842", "patch": "@@ -46,7 +46,7 @@ fn complete_attribute_start(acc: &mut Completions, ctx: &CompletionContext, attr\n             _ => {}\n         }\n \n-        if attribute.kind() == ast::AttrKind::Inner || !attr_completion.should_be_inner {\n+        if attribute.kind() == ast::AttrKind::Inner || !attr_completion.prefer_inner {\n             acc.add(item);\n         }\n     }\n@@ -56,159 +56,72 @@ struct AttrCompletion {\n     label: &'static str,\n     lookup: Option<&'static str>,\n     snippet: Option<&'static str>,\n-    should_be_inner: bool,\n+    prefer_inner: bool,\n+}\n+\n+impl AttrCompletion {\n+    const fn prefer_inner(self) -> AttrCompletion {\n+        AttrCompletion { prefer_inner: true, ..self }\n+    }\n+}\n+\n+const fn attr(\n+    label: &'static str,\n+    lookup: Option<&'static str>,\n+    snippet: Option<&'static str>,\n+) -> AttrCompletion {\n+    AttrCompletion { label, lookup, snippet, prefer_inner: false }\n }\n \n const ATTRIBUTES: &[AttrCompletion] = &[\n-    AttrCompletion {\n-        label: \"allow(\u2026)\",\n-        snippet: Some(\"allow(${0:lint})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"allow\"),\n-    },\n-    AttrCompletion {\n-        label: \"cfg_attr(\u2026)\",\n-        snippet: Some(\"cfg_attr(${1:predicate}, ${0:attr})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"cfg_attr\"),\n-    },\n-    AttrCompletion {\n-        label: \"cfg(\u2026)\",\n-        snippet: Some(\"cfg(${0:predicate})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"cfg\"),\n-    },\n-    AttrCompletion {\n-        label: \"deny(\u2026)\",\n-        snippet: Some(\"deny(${0:lint})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"deny\"),\n-    },\n-    AttrCompletion {\n-        label: r#\"deprecated = \"\u2026\"\"#,\n-        snippet: Some(r#\"deprecated = \"${0:reason}\"\"#),\n-        should_be_inner: false,\n-        lookup: Some(\"deprecated\"),\n-    },\n-    AttrCompletion {\n-        label: \"derive(\u2026)\",\n-        snippet: Some(r#\"derive(${0:Debug})\"#),\n-        should_be_inner: false,\n-        lookup: Some(\"derive\"),\n-    },\n-    AttrCompletion {\n-        label: r#\"doc = \"\u2026\"\"#,\n-        snippet: Some(r#\"doc = \"${0:docs}\"\"#),\n-        should_be_inner: false,\n-        lookup: Some(\"doc\"),\n-    },\n-    AttrCompletion {\n-        label: \"feature(\u2026)\",\n-        snippet: Some(\"feature(${0:flag})\"),\n-        should_be_inner: true,\n-        lookup: Some(\"feature\"),\n-    },\n-    AttrCompletion {\n-        label: \"forbid(\u2026)\",\n-        snippet: Some(\"forbid(${0:lint})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"forbid\"),\n-    },\n+    attr(\"allow(\u2026)\", Some(\"allow\"), Some(\"allow(${0:lint})\")),\n+    attr(\"cfg_attr(\u2026)\", Some(\"cfg_attr\"), Some(\"cfg_attr(${1:predicate}, ${0:attr})\")),\n+    attr(\"cfg(\u2026)\", Some(\"cfg\"), Some(\"cfg(${0:predicate})\")),\n+    attr(\"deny(\u2026)\", Some(\"deny\"), Some(\"deny(${0:lint})\")),\n+    attr(r#\"deprecated = \"\u2026\"\"#, Some(\"deprecated\"), Some(r#\"deprecated = \"${0:reason}\"\"#)),\n+    attr(\"derive(\u2026)\", Some(\"derive\"), Some(r#\"derive(${0:Debug})\"#)),\n+    attr(r#\"doc = \"\u2026\"\"#, Some(\"doc\"), Some(r#\"doc = \"${0:docs}\"\"#)),\n+    attr(\"feature(\u2026)\", Some(\"feature\"), Some(\"feature(${0:flag})\")).prefer_inner(),\n+    attr(\"forbid(\u2026)\", Some(\"forbid\"), Some(\"forbid(${0:lint})\")),\n     // FIXME: resolve through macro resolution?\n-    AttrCompletion {\n-        label: \"global_allocator\",\n-        snippet: None,\n-        should_be_inner: true,\n-        lookup: None,\n-    },\n-    AttrCompletion {\n-        label: \"ignore(\u2026)\",\n-        snippet: Some(\"ignore(${0:lint})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"ignore\"),\n-    },\n-    AttrCompletion {\n-        label: \"inline(\u2026)\",\n-        snippet: Some(\"inline(${0:lint})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"inline\"),\n-    },\n-    AttrCompletion {\n-        label: r#\"link_name = \"\u2026\"\"#,\n-        snippet: Some(r#\"link_name = \"${0:symbol_name}\"\"#),\n-        should_be_inner: false,\n-        lookup: Some(\"link_name\"),\n-    },\n-    AttrCompletion { label: \"link\", snippet: None, should_be_inner: false, lookup: None },\n-    AttrCompletion { label: \"macro_export\", snippet: None, should_be_inner: false, lookup: None },\n-    AttrCompletion { label: \"macro_use\", snippet: None, should_be_inner: false, lookup: None },\n-    AttrCompletion {\n-        label: r#\"must_use = \"\u2026\"\"#,\n-        snippet: Some(r#\"must_use = \"${0:reason}\"\"#),\n-        should_be_inner: false,\n-        lookup: Some(\"must_use\"),\n-    },\n-    AttrCompletion { label: \"no_mangle\", snippet: None, should_be_inner: false, lookup: None },\n-    AttrCompletion { label: \"no_std\", snippet: None, should_be_inner: true, lookup: None },\n-    AttrCompletion { label: \"non_exhaustive\", snippet: None, should_be_inner: false, lookup: None },\n-    AttrCompletion { label: \"panic_handler\", snippet: None, should_be_inner: true, lookup: None },\n-    AttrCompletion {\n-        label: \"path = \\\"\u2026\\\"\",\n-        snippet: Some(\"path =\\\"${0:path}\\\"\"),\n-        should_be_inner: false,\n-        lookup: Some(\"path\"),\n-    },\n-    AttrCompletion { label: \"proc_macro\", snippet: None, should_be_inner: false, lookup: None },\n-    AttrCompletion {\n-        label: \"proc_macro_attribute\",\n-        snippet: None,\n-        should_be_inner: false,\n-        lookup: None,\n-    },\n-    AttrCompletion {\n-        label: \"proc_macro_derive(\u2026)\",\n-        snippet: Some(\"proc_macro_derive(${0:Trait})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"proc_macro_derive\"),\n-    },\n-    AttrCompletion {\n-        label: \"recursion_limit = \u2026\",\n-        snippet: Some(\"recursion_limit = ${0:128}\"),\n-        should_be_inner: true,\n-        lookup: Some(\"recursion_limit\"),\n-    },\n-    AttrCompletion {\n-        label: \"repr(\u2026)\",\n-        snippet: Some(\"repr(${0:C})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"repr\"),\n-    },\n-    AttrCompletion {\n-        label: \"should_panic(\u2026)\",\n-        snippet: Some(r#\"should_panic(expected = \"${0:reason}\")\"#),\n-        should_be_inner: false,\n-        lookup: Some(\"should_panic\"),\n-    },\n-    AttrCompletion {\n-        label: r#\"target_feature = \"\u2026\"\"#,\n-        snippet: Some(\"target_feature = \\\"${0:feature}\\\"\"),\n-        should_be_inner: false,\n-        lookup: Some(\"target_feature\"),\n-    },\n-    AttrCompletion { label: \"test\", snippet: None, should_be_inner: false, lookup: None },\n-    AttrCompletion { label: \"used\", snippet: None, should_be_inner: false, lookup: None },\n-    AttrCompletion {\n-        label: \"warn(\u2026)\",\n-        snippet: Some(\"warn(${0:lint})\"),\n-        should_be_inner: false,\n-        lookup: Some(\"warn\"),\n-    },\n-    AttrCompletion {\n-        label: r#\"windows_subsystem = \"\u2026\"\"#,\n-        snippet: Some(r#\"windows_subsystem = \"${0:subsystem}\"\"#),\n-        should_be_inner: true,\n-        lookup: Some(\"windows_subsystem\"),\n-    },\n+    attr(\"global_allocator\", None, None).prefer_inner(),\n+    attr(\"ignore(\u2026)\", Some(\"ignore\"), Some(\"ignore(${0:lint})\")),\n+    attr(\"inline(\u2026)\", Some(\"inline\"), Some(\"inline(${0:lint})\")),\n+    attr(r#\"link_name = \"\u2026\"\"#, Some(\"link_name\"), Some(r#\"link_name = \"${0:symbol_name}\"\"#)),\n+    attr(\"link\", None, None),\n+    attr(\"macro_export\", None, None),\n+    attr(\"macro_use\", None, None),\n+    attr(r#\"must_use = \"\u2026\"\"#, Some(\"must_use\"), Some(r#\"must_use = \"${0:reason}\"\"#)),\n+    attr(\"no_mangle\", None, None),\n+    attr(\"no_std\", None, None).prefer_inner(),\n+    attr(\"non_exhaustive\", None, None),\n+    attr(\"panic_handler\", None, None).prefer_inner(),\n+    attr(\"path = \\\"\u2026\\\"\", Some(\"path\"), Some(\"path =\\\"${0:path}\\\"\")),\n+    attr(\"proc_macro\", None, None),\n+    attr(\"proc_macro_attribute\", None, None),\n+    attr(\"proc_macro_derive(\u2026)\", Some(\"proc_macro_derive\"), Some(\"proc_macro_derive(${0:Trait})\")),\n+    attr(\"recursion_limit = \u2026\", Some(\"recursion_limit\"), Some(\"recursion_limit = ${0:128}\"))\n+        .prefer_inner(),\n+    attr(\"repr(\u2026)\", Some(\"repr\"), Some(\"repr(${0:C})\")),\n+    attr(\n+        \"should_panic(\u2026)\",\n+        Some(\"should_panic\"),\n+        Some(r#\"should_panic(expected = \"${0:reason}\")\"#),\n+    ),\n+    attr(\n+        r#\"target_feature = \"\u2026\"\"#,\n+        Some(\"target_feature\"),\n+        Some(\"target_feature = \\\"${0:feature}\\\"\"),\n+    ),\n+    attr(\"test\", None, None),\n+    attr(\"used\", None, None),\n+    attr(\"warn(\u2026)\", Some(\"warn\"), Some(\"warn(${0:lint})\")),\n+    attr(\n+        r#\"windows_subsystem = \"\u2026\"\"#,\n+        Some(\"windows_subsystem\"),\n+        Some(r#\"windows_subsystem = \"${0:subsystem}\"\"#),\n+    )\n+    .prefer_inner(),\n ];\n \n fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree) {"}]}