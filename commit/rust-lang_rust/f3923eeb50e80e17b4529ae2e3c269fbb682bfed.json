{"sha": "f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTIzZWViNTBlODBlMTdiNDUyOWFlMmUzYzI2OWZiYjY4MmJmZWQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-05-30T19:01:11Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-05-30T19:01:11Z"}, "message": "Merge pull request #13 from oli-obk/master\n\nbenchmarks", "tree": {"sha": "5c92b3c2f751571bbc47377baca09b780cee15c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c92b3c2f751571bbc47377baca09b780cee15c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "html_url": "https://github.com/rust-lang/rust/commit/f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8961063c605702435d1b1f699b6883b9722af87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8961063c605702435d1b1f699b6883b9722af87c", "html_url": "https://github.com/rust-lang/rust/commit/8961063c605702435d1b1f699b6883b9722af87c"}, {"sha": "8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "html_url": "https://github.com/rust-lang/rust/commit/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159"}], "stats": {"total": 180, "additions": 176, "deletions": 4}, "files": [{"sha": "1f8a2aafc9ed9efce8d6eaadbb206ed67f6f021f", "filename": "benches/fibonacci.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Ffibonacci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Ffibonacci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci.rs?ref=f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "patch": "@@ -0,0 +1,36 @@\n+#![feature(custom_attribute, test)]\n+#![feature(rustc_private)]\n+#![allow(unused_attributes)]\n+\n+extern crate test;\n+use test::Bencher;\n+\n+mod fibonacci_helper;\n+\n+#[bench]\n+fn fib(bencher: &mut Bencher) {\n+    bencher.iter(|| {\n+        fibonacci_helper::main();\n+    })\n+}\n+\n+mod miri_helper;\n+\n+#[bench]\n+fn fib_miri(bencher: &mut Bencher) {\n+    miri_helper::run(\"fibonacci_helper\", bencher);\n+}\n+\n+mod fibonacci_helper_iterative;\n+\n+#[bench]\n+fn fib_iter(bencher: &mut Bencher) {\n+    bencher.iter(|| {\n+        fibonacci_helper_iterative::main();\n+    })\n+}\n+\n+#[bench]\n+fn fib_iter_miri(bencher: &mut Bencher) {\n+    miri_helper::run(\"fibonacci_helper_iterative\", bencher);\n+}"}, {"sha": "cddfff9c2c92dc3ef8c9662633c3591a6a03fa61", "filename": "benches/fibonacci_helper.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Ffibonacci_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Ffibonacci_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci_helper.rs?ref=f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "patch": "@@ -0,0 +1,16 @@\n+#![feature(custom_attribute)]\n+#![allow(unused_attributes)]\n+\n+#[miri_run]\n+#[inline(never)]\n+pub fn main() {\n+    assert_eq!(fib(10), 55);\n+}\n+\n+fn fib(n: usize) -> usize {\n+    if n <= 2 {\n+        1\n+    } else {\n+        fib(n - 1) + fib(n - 2)\n+    }\n+}"}, {"sha": "486d8c2e8a8689f7645f49ff20ffe23333407329", "filename": "benches/fibonacci_helper_iterative.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Ffibonacci_helper_iterative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Ffibonacci_helper_iterative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci_helper_iterative.rs?ref=f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "patch": "@@ -0,0 +1,19 @@\n+#![feature(custom_attribute)]\n+#![allow(unused_attributes)]\n+\n+#[miri_run]\n+#[inline(never)]\n+pub fn main() {\n+    assert_eq!(fib(10), 55);\n+}\n+\n+fn fib(n: usize) -> usize {\n+    let mut a = 0;\n+    let mut b = 1;\n+    for _ in 0..n {\n+        let c = a;\n+        a = b;\n+        b = c + b;\n+    }\n+    a\n+}"}, {"sha": "54c15a27ed88425982bd96a92f8dc9951d16e6af", "filename": "benches/miri_helper.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fmiri_helper.rs?ref=f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "patch": "@@ -0,0 +1,47 @@\n+#![feature(custom_attribute, test)]\n+#![feature(rustc_private)]\n+#![allow(unused_attributes)]\n+\n+extern crate getopts;\n+extern crate miri;\n+extern crate rustc;\n+extern crate rustc_driver;\n+extern crate test;\n+\n+use self::miri::interpreter;\n+use self::rustc::session::Session;\n+use self::rustc_driver::{driver, CompilerCalls};\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::env::var;\n+use test::Bencher;\n+\n+pub struct MiriCompilerCalls<'a>(Rc<RefCell<&'a mut Bencher>>);\n+\n+pub fn run(filename: &str, bencher: &mut Bencher) {\n+    let path = var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n+    rustc_driver::run_compiler(&[\n+        \"miri\".to_string(), format!(\"benches/{}.rs\", filename), \"--sysroot\".to_string(), path.to_string(),\n+    ], &mut MiriCompilerCalls(Rc::new(RefCell::new(bencher))));\n+}\n+\n+impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n+    fn build_controller(\n+        &mut self,\n+        _: &Session,\n+        _: &getopts::Matches\n+    ) -> driver::CompileController<'a> {\n+        let mut control: driver::CompileController<'a> = driver::CompileController::basic();\n+\n+        let bencher = self.0.clone();\n+\n+        control.after_analysis.callback = Box::new(move |state| {\n+            state.session.abort_if_errors();\n+            bencher.borrow_mut().iter(|| {\n+                interpreter::interpret_start_points(state.tcx.unwrap(), state.mir_map.unwrap());\n+            })\n+        });\n+\n+        control\n+    }\n+}"}, {"sha": "43baf486df397c773921c8e389e8df803819df14", "filename": "benches/smoke.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fsmoke.rs?ref=f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "patch": "@@ -0,0 +1,41 @@\n+#![feature(custom_attribute, test)]\n+#![feature(rustc_private)]\n+#![allow(unused_attributes)]\n+\n+extern crate test;\n+use test::Bencher;\n+\n+mod smoke_helper;\n+\n+#[bench]\n+fn noop(bencher: &mut Bencher) {\n+    bencher.iter(|| {\n+        smoke_helper::main();\n+    })\n+}\n+\n+/*\n+// really slow\n+#[bench]\n+fn noop_miri_full(bencher: &mut Bencher) {\n+    let path = std::env::var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n+    bencher.iter(|| {\n+        let mut process = std::process::Command::new(\"target/release/miri\");\n+        process.arg(\"benches/smoke_helper.rs\")\n+               .arg(\"--sysroot\").arg(&path);\n+        let output = process.output().unwrap();\n+        if !output.status.success() {\n+            println!(\"{}\", String::from_utf8(output.stdout).unwrap());\n+            println!(\"{}\", String::from_utf8(output.stderr).unwrap());\n+            panic!(\"failed to run miri\");\n+        }\n+    })\n+}\n+*/\n+\n+mod miri_helper;\n+\n+#[bench]\n+fn noop_miri_interpreter(bencher: &mut Bencher) {\n+    miri_helper::run(\"smoke_helper\", bencher);\n+}"}, {"sha": "e8691f244c02f02440f3795c2ef232d47e7bdb55", "filename": "benches/smoke_helper.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Fsmoke_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/benches%2Fsmoke_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fsmoke_helper.rs?ref=f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "patch": "@@ -0,0 +1,7 @@\n+#![feature(custom_attribute)]\n+#![allow(unused_attributes)]\n+\n+#[miri_run]\n+#[inline(never)]\n+pub fn main() {\n+}"}, {"sha": "8e8565b50c55c302a43119438cd214be0124e321", "filename": "src/interpreter.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3923eeb50e80e17b4529ae2e3c269fbb682bfed/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=f3923eeb50e80e17b4529ae2e3c269fbb682bfed", "patch": "@@ -1365,7 +1365,7 @@ impl<'mir, 'tcx: 'mir> Deref for CachedMir<'mir, 'tcx> {\n     fn deref(&self) -> &mir::Mir<'tcx> {\n         match *self {\n             CachedMir::Ref(r) => r,\n-            CachedMir::Owned(ref rc) => &rc,\n+            CachedMir::Owned(ref rc) => rc,\n         }\n     }\n }\n@@ -1422,20 +1422,26 @@ pub fn interpret_start_points<'a, 'tcx>(\n             if attr.check_name(\"miri_run\") {\n                 let item = tcx.map.expect_item(id);\n \n-                println!(\"Interpreting: {}\", item.name);\n+                if TRACE_EXECUTION {\n+                    println!(\"Interpreting: {}\", item.name);\n+                }\n \n                 let mut gecx = GlobalEvalContext::new(tcx, mir_map);\n                 let mut fecx = FnEvalContext::new(&mut gecx);\n                 match fecx.call_nested(mir) {\n-                    Ok(Some(return_ptr)) => fecx.memory.dump(return_ptr.alloc_id),\n+                    Ok(Some(return_ptr)) => if TRACE_EXECUTION {\n+                        fecx.memory.dump(return_ptr.alloc_id);\n+                    },\n                     Ok(None) => println!(\"(diverging function returned)\"),\n                     Err(_e) => {\n                         // TODO(solson): Detect whether the error was already reported or not.\n                         // tcx.sess.err(&e.to_string());\n                     }\n                 }\n \n-                println!(\"\");\n+                if TRACE_EXECUTION {\n+                    println!(\"\");\n+                }\n             }\n         }\n     }"}]}