{"sha": "cc73abf72c46d9f13a176d93d1d38f3a72d638e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNzNhYmY3MmM0NmQ5ZjEzYTE3NmQ5M2QxZDM4ZjNhNzJkNjM4ZTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T20:33:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T20:33:01Z"}, "message": "minor: use minicore", "tree": {"sha": "526ec0b4cf0c91baa404a7f84a486445da439ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/526ec0b4cf0c91baa404a7f84a486445da439ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc73abf72c46d9f13a176d93d1d38f3a72d638e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc73abf72c46d9f13a176d93d1d38f3a72d638e3", "html_url": "https://github.com/rust-lang/rust/commit/cc73abf72c46d9f13a176d93d1d38f3a72d638e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc73abf72c46d9f13a176d93d1d38f3a72d638e3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "181184a350046a460441209fd34821c2c796b066", "url": "https://api.github.com/repos/rust-lang/rust/commits/181184a350046a460441209fd34821c2c796b066", "html_url": "https://github.com/rust-lang/rust/commit/181184a350046a460441209fd34821c2c796b066"}], "stats": {"total": 98, "additions": 13, "deletions": 85}, "files": [{"sha": "48bab0b2e61a299c07f5ce242903948150443169", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc73abf72c46d9f13a176d93d1d38f3a72d638e3/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc73abf72c46d9f13a176d93d1d38f3a72d638e3/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=cc73abf72c46d9f13a176d93d1d38f3a72d638e3", "patch": "@@ -908,9 +908,7 @@ fn main() {\n     fn unit_structs_have_no_type_hints() {\n         check_types(\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n+//- minicore: result\n struct SyntheticSyntax;\n \n fn main() {"}, {"sha": "c11deebcb5e475f33e7beb61b5a945e40285fa13", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc73abf72c46d9f13a176d93d1d38f3a72d638e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc73abf72c46d9f13a176d93d1d38f3a72d638e3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=cc73abf72c46d9f13a176d93d1d38f3a72d638e3", "patch": "@@ -436,18 +436,15 @@ fn main() {\n         check_edit(\n             \"ifl\",\n             r#\"\n-enum Option<T> { Some(T), None }\n-\n+//- minicore: option\n fn main() {\n-    let bar = Option::Some(true);\n+    let bar = Some(true);\n     bar.$0\n }\n \"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-\n fn main() {\n-    let bar = Option::Some(true);\n+    let bar = Some(true);\n     if let Some($1) = bar {\n     $0\n }\n@@ -461,18 +458,15 @@ fn main() {\n         check_edit(\n             \"match\",\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-\n+//- minicore: result\n fn main() {\n-    let bar = Result::Ok(true);\n+    let bar = Ok(true);\n     bar.$0\n }\n \"#,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-\n fn main() {\n-    let bar = Result::Ok(true);\n+    let bar = Ok(true);\n     match bar {\n     Ok(${1:_}) => {$2},\n     Err(${3:_}) => {$0},"}, {"sha": "c0edcd7d39ec48af325a2e9d9a5da5178e3fbbe9", "filename": "crates/ide_diagnostics/src/handlers/missing_ok_or_some_in_tail_expr.rs", "status": "modified", "additions": 6, "deletions": 70, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/cc73abf72c46d9f13a176d93d1d38f3a72d638e3/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc73abf72c46d9f13a176d93d1d38f3a72d638e3/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs?ref=cc73abf72c46d9f13a176d93d1d38f3a72d638e3", "patch": "@@ -49,26 +49,15 @@ mod tests {\n     fn test_wrap_return_type_option() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::option::Option::{self, Some, None};\n-\n+//- minicore: option, result\n fn div(x: i32, y: i32) -> Option<i32> {\n     if y == 0 {\n         return None;\n     }\n     x / y$0\n }\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n             r#\"\n-use core::option::Option::{self, Some, None};\n-\n fn div(x: i32, y: i32) -> Option<i32> {\n     if y == 0 {\n         return None;\n@@ -83,26 +72,15 @@ fn div(x: i32, y: i32) -> Option<i32> {\n     fn test_wrap_return_type() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n fn div(x: i32, y: i32) -> Result<i32, ()> {\n     if y == 0 {\n         return Err(());\n     }\n     x / y$0\n }\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n             r#\"\n-use core::result::Result::{self, Ok, Err};\n-\n fn div(x: i32, y: i32) -> Result<i32, ()> {\n     if y == 0 {\n         return Err(());\n@@ -117,26 +95,15 @@ fn div(x: i32, y: i32) -> Result<i32, ()> {\n     fn test_wrap_return_type_handles_generic_functions() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n fn div<T>(x: T) -> Result<T, i32> {\n     if x == 0 {\n         return Err(7);\n     }\n     $0x\n }\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n             r#\"\n-use core::result::Result::{self, Ok, Err};\n-\n fn div<T>(x: T) -> Result<T, i32> {\n     if x == 0 {\n         return Err(7);\n@@ -151,9 +118,7 @@ fn div<T>(x: T) -> Result<T, i32> {\n     fn test_wrap_return_type_handles_type_aliases() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n type MyResult<T> = Result<T, ()>;\n \n fn div(x: i32, y: i32) -> MyResult<i32> {\n@@ -162,17 +127,8 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     }\n     x $0/ y\n }\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n             r#\"\n-use core::result::Result::{self, Ok, Err};\n-\n type MyResult<T> = Result<T, ()>;\n \n fn div(x: i32, y: i32) -> MyResult<i32> {\n@@ -189,18 +145,8 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     fn test_wrap_return_type_not_applicable_when_expr_type_does_not_match_ok_type() {\n         check_diagnostics(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n fn foo() -> Result<(), i32> { 0 }\n-\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n         );\n     }\n@@ -209,20 +155,10 @@ pub mod option {\n     fn test_wrap_return_type_not_applicable_when_return_type_is_not_result_or_option() {\n         check_diagnostics(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n enum SomeOtherEnum { Ok(i32), Err(String) }\n \n fn foo() -> SomeOtherEnum { 0 }\n-\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n         );\n     }"}]}