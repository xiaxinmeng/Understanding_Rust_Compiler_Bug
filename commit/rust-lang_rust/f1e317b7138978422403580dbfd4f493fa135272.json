{"sha": "f1e317b7138978422403580dbfd4f493fa135272", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZTMxN2I3MTM4OTc4NDIyNDAzNTgwZGJmZDRmNDkzZmExMzUyNzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-09T16:18:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-09T16:18:21Z"}, "message": "Rollup merge of #58750 - TimDiekmann:master, r=oli-obk\n\nMake `Unique::as_ptr`, `NonNull::dangling` and `NonNull::cast` const", "tree": {"sha": "d8b8c1d30f395df0296123982d3cd7d304db26fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8b8c1d30f395df0296123982d3cd7d304db26fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1e317b7138978422403580dbfd4f493fa135272", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcg+dNCRBK7hj4Ov3rIwAAdHIIAA1LXOeIAgqu7psdfuePPYiz\nsNzgrG922fRyCQEoAL0V58K+IXt9gXCaKjBDCUpDyMN1DDEkz1y7cmpKVNzCW1zY\nDhXTHPXm3hH0pLVA5HIQWK3LeRVNS9jkmx4PeI5+jC9n1zmxQ1stPvRSnBYVRM1p\nY0DTNgZ3W+0DFTvxVT2Vr6QJJ96mjh+UY6Vt/yMyeswao5qZiAH0NdbNQXff/j8V\nzKz0892Xi2lIK1XJLwFV2TEx4E+LrkvJ4L3eTjSMllUmMsSfEsn+Wy8OwF4abTzk\nRMjuf+8Xn4pGQWMmX0Y5xa6ICBI3Xiua8GZc6blO0r695HkE2E8AlKNmBdKP18Y=\n=MwUn\n-----END PGP SIGNATURE-----\n", "payload": "tree d8b8c1d30f395df0296123982d3cd7d304db26fb\nparent f32d62e5ae28c8398630117a2aea4a5cf5fb13f1\nparent 60a649ef6ecf905253507997211ebd081f298f24\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552148301 +0100\ncommitter GitHub <noreply@github.com> 1552148301 +0100\n\nRollup merge of #58750 - TimDiekmann:master, r=oli-obk\n\nMake `Unique::as_ptr`, `NonNull::dangling` and `NonNull::cast` const\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e317b7138978422403580dbfd4f493fa135272", "html_url": "https://github.com/rust-lang/rust/commit/f1e317b7138978422403580dbfd4f493fa135272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1e317b7138978422403580dbfd4f493fa135272/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1", "html_url": "https://github.com/rust-lang/rust/commit/f32d62e5ae28c8398630117a2aea4a5cf5fb13f1"}, {"sha": "60a649ef6ecf905253507997211ebd081f298f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a649ef6ecf905253507997211ebd081f298f24", "html_url": "https://github.com/rust-lang/rust/commit/60a649ef6ecf905253507997211ebd081f298f24"}], "stats": {"total": 139, "additions": 136, "deletions": 3}, "files": [{"sha": "53d41976030685c74620b76c1ee565b2dfef414c", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -2790,7 +2790,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n-    pub fn as_ptr(self) -> *mut T {\n+    pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n     }\n \n@@ -2903,7 +2903,8 @@ impl<T: Sized> NonNull<T> {\n     /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n-    pub fn dangling() -> Self {\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_ptr_nonnull\"))]\n+    pub const fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n             NonNull::new_unchecked(ptr)\n@@ -2966,7 +2967,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// Cast to a pointer of another type\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn cast<U>(self) -> NonNull<U> {\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_ptr_nonnull\"))]\n+    pub const fn cast<U>(self) -> NonNull<U> {\n         unsafe {\n             NonNull::new_unchecked(self.as_ptr() as *mut U)\n         }"}, {"sha": "91624e92fbe753ad0801e589095e72f008ab8465", "filename": "src/test/run-pass/consts/const-ptr-nonnull.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![feature(const_ptr_nonnull)]\n+\n+use std::ptr::NonNull;\n+\n+const DANGLING: NonNull<u32> = NonNull::dangling();\n+const CASTED: NonNull<u32> = NonNull::cast(NonNull::<i32>::dangling());\n+\n+fn ident<T>(ident: T) -> T {\n+    ident\n+}\n+\n+pub fn main() {\n+    assert_eq!(DANGLING, ident(NonNull::dangling()));\n+    assert_eq!(CASTED, ident(NonNull::dangling()));\n+}"}, {"sha": "eb371ab184166491e039136ed2d4ae954be90c8d", "filename": "src/test/run-pass/consts/const-ptr-unique.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+#![feature(ptr_internals)]\n+\n+use std::ptr::Unique;\n+\n+const PTR: *mut u32 = Unique::empty().as_ptr();\n+\n+fn ident<T>(ident: T) -> T {\n+    ident\n+}\n+\n+pub fn main() {\n+    assert_eq!(PTR, ident(Unique::<u32>::empty().as_ptr()));\n+}"}, {"sha": "6977e7fdc11837d6a841b33a306f2994c1088e39", "filename": "src/test/ui/consts/const-ptr-nonnull.nll.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.nll.stderr?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -0,0 +1,25 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-ptr-nonnull.rs:4:37\n+   |\n+LL |     let x: &'static NonNull<u32> = &(NonNull::dangling());\n+   |            ---------------------    ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-ptr-nonnull.rs:9:37\n+   |\n+LL |     let x: &'static NonNull<u32> = &(non_null.cast());\n+   |            ---------------------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |     //~^ ERROR borrowed value does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "54e743aa32e232d4d421f9c85e6f819214277e80", "filename": "src/test/ui/consts/const-ptr-nonnull.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.rs?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -0,0 +1,11 @@\n+use std::ptr::NonNull;\n+\n+fn main() {\n+    let x: &'static NonNull<u32> = &(NonNull::dangling());\n+    //~^ ERROR borrowed value does not live long enough\n+\n+    let mut i: i32 = 10;\n+    let non_null = NonNull::new(&mut i).unwrap();\n+    let x: &'static NonNull<u32> = &(non_null.cast());\n+    //~^ ERROR borrowed value does not live long enough\n+}"}, {"sha": "a9476dda6d3203308f97073d0f78413b04fa58eb", "filename": "src/test/ui/consts/const-ptr-nonnull.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/const-ptr-nonnull.rs:4:37\n+   |\n+LL |     let x: &'static NonNull<u32> = &(NonNull::dangling());\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/const-ptr-nonnull.rs:9:37\n+   |\n+LL |     let x: &'static NonNull<u32> = &(non_null.cast());\n+   |                                     ^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     //~^ ERROR borrowed value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "b201994c894e4d2d9277f6784ccbf4923453a9e3", "filename": "src/test/ui/consts/const-ptr-unique.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.nll.stderr?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -0,0 +1,14 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-ptr-unique.rs:8:33\n+   |\n+LL |     let x: &'static *mut u32 = &(unique.as_ptr());\n+   |            -----------------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |     //~^ ERROR borrowed value does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "be44a24181606d30baf6d8fade61e3ad9f3c9d1c", "filename": "src/test/ui/consts/const-ptr-unique.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.rs?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -0,0 +1,10 @@\n+#![feature(ptr_internals)]\n+\n+use std::ptr::Unique;\n+\n+fn main() {\n+    let mut i: u32 = 10;\n+    let unique = Unique::new(&mut i).unwrap();\n+    let x: &'static *mut u32 = &(unique.as_ptr());\n+    //~^ ERROR borrowed value does not live long enough\n+}"}, {"sha": "141465bf184d0ef7ce6e309a522d2690c448700b", "filename": "src/test/ui/consts/const-ptr-unique.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1e317b7138978422403580dbfd4f493fa135272/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr?ref=f1e317b7138978422403580dbfd4f493fa135272", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/const-ptr-unique.rs:8:33\n+   |\n+LL |     let x: &'static *mut u32 = &(unique.as_ptr());\n+   |                                 ^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     //~^ ERROR borrowed value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}