{"sha": "67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZmEzOTRlNGVkNGY0YTkzM2MwOWYwY2JkNTBhMWU1YjFhZjU2ZTU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-09T00:30:47Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-09T00:34:13Z"}, "message": "Restrict the width of doc comments with comment_width\n\nSee the diff in tests/target/enum.rs for an example.", "tree": {"sha": "ce1751ddc2b3b2eee912113738ce9a7d37482060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce1751ddc2b3b2eee912113738ce9a7d37482060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5", "html_url": "https://github.com/rust-lang/rust/commit/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9344d2ca83dd9159aaa13cbd48929fe038009a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/9344d2ca83dd9159aaa13cbd48929fe038009a27", "html_url": "https://github.com/rust-lang/rust/commit/9344d2ca83dd9159aaa13cbd48929fe038009a27"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "2e4a46326201964e55375542c9c855e089219da5", "filename": "src/attr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5", "patch": "@@ -21,8 +21,6 @@ use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use utils::{count_newlines, mk_sp};\n \n-use std::cmp;\n-\n /// Returns attributes on the given statement.\n pub fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n     match stmt.node {\n@@ -140,7 +138,7 @@ fn rewrite_first_group_attrs(\n             .join(\"\\n\");\n         return Some((\n             sugared_docs.len(),\n-            rewrite_doc_comment(&snippet, shape, context.config)?,\n+            rewrite_doc_comment(&snippet, shape.comment(context.config), context.config)?,\n         ));\n     }\n     // Rewrite `#[derive(..)]`s.\n@@ -249,13 +247,7 @@ impl Rewrite for ast::Attribute {\n         };\n         let snippet = context.snippet(self.span);\n         if self.is_sugared_doc {\n-            let doc_shape = Shape {\n-                width: cmp::min(shape.width, context.config.comment_width())\n-                    .checked_sub(shape.indent.width())\n-                    .unwrap_or(0),\n-                ..shape\n-            };\n-            rewrite_doc_comment(snippet, doc_shape, context.config)\n+            rewrite_doc_comment(snippet, shape.comment(context.config), context.config)\n         } else {\n             if contains_comment(snippet) {\n                 return Some(snippet.to_owned());"}, {"sha": "047a50340eb18594b5d39e1baa3df2be8e299242", "filename": "src/shape.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n+use std::cmp::min;\n use std::ops::{Add, Sub};\n \n use Config;\n@@ -276,6 +277,17 @@ impl Shape {\n             .checked_sub(self.used_width() + self.width)\n             .unwrap_or(0)\n     }\n+\n+    pub fn comment(&self, config: &Config) -> Shape {\n+        let width = min(\n+            self.width,\n+            config\n+                .comment_width()\n+                .checked_sub(self.indent.width())\n+                .unwrap_or(0),\n+        );\n+        Shape { width, ..*self }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "50d1037fe09424b8972002d95001fe842cd26e12", "filename": "tests/target/enum.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=67fa394e4ed4f4a933c09f0cbd50a1e5b1af56e5", "patch": "@@ -145,8 +145,9 @@ pub enum Bencoding<'i> {\n     Str(&'i [u8]),\n     Int(i64),\n     List(Vec<Bencoding<'i>>),\n-    /// A bencoded dict value. The first element the slice of bytes in the source that the dict is\n-    /// composed of. The second is the dict, decoded into an ordered map.\n+    /// A bencoded dict value. The first element the slice of bytes in the\n+    /// source that the dict is composed of. The second is the dict,\n+    /// decoded into an ordered map.\n     // TODO make Dict \"structlike\" AKA name the two values.\n     Dict(&'i [u8], BTreeMap<&'i [u8], Bencoding<'i>>),\n }"}]}