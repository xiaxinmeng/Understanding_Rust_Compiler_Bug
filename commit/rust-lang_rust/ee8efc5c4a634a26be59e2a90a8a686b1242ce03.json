{"sha": "ee8efc5c4a634a26be59e2a90a8a686b1242ce03", "node_id": "C_kwDOAAsO6NoAKGVlOGVmYzVjNGE2MzRhMjZiZTU5ZTJhOTBhOGE2ODZiMTI0MmNlMDM", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-05-19T18:53:01Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-05-24T05:33:34Z"}, "message": "Coalesce branches\n\nMove a bunch of branches together into one if block, for easier reading.\n\nResolve comments\n\nAttempt to make some branches unreachable [tmp]\n\nRevert unreachable branches", "tree": {"sha": "25555c7ead0e7a92ce8486c68487c535ab425105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25555c7ead0e7a92ce8486c68487c535ab425105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8efc5c4a634a26be59e2a90a8a686b1242ce03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8efc5c4a634a26be59e2a90a8a686b1242ce03", "html_url": "https://github.com/rust-lang/rust/commit/ee8efc5c4a634a26be59e2a90a8a686b1242ce03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8efc5c4a634a26be59e2a90a8a686b1242ce03/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edae6edd32f1c68dd42841888c963353f89473b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/edae6edd32f1c68dd42841888c963353f89473b4", "html_url": "https://github.com/rust-lang/rust/commit/edae6edd32f1c68dd42841888c963353f89473b4"}], "stats": {"total": 270, "additions": 133, "deletions": 137}, "files": [{"sha": "5e549319abf6a964b1dc6f0dd237bc6dbf016db6", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee8efc5c4a634a26be59e2a90a8a686b1242ce03/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8efc5c4a634a26be59e2a90a8a686b1242ce03/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=ee8efc5c4a634a26be59e2a90a8a686b1242ce03", "patch": "@@ -21,6 +21,7 @@\n #![feature(label_break_value)]\n #![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(if_let_guard)]\n #![feature(never_type)]\n #![recursion_limit = \"512\"] // For rustdoc\n "}, {"sha": "0dea2c3d8bfe8e0a9692c2c0bbf6f5bf339dd294", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 132, "deletions": 137, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/ee8efc5c4a634a26be59e2a90a8a686b1242ce03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8efc5c4a634a26be59e2a90a8a686b1242ce03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=ee8efc5c4a634a26be59e2a90a8a686b1242ce03", "patch": "@@ -39,153 +39,148 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     let tcx = infcx.tcx;\n \n     if tcx.features().generic_const_exprs {\n-        match AbstractConst::new(tcx, uv)? {\n-            // We are looking at a generic abstract constant.\n-            Some(ct) => {\n-                if satisfied_from_param_env(tcx, ct, param_env)? {\n-                    return Ok(());\n-                }\n-\n-                // We were unable to unify the abstract constant with\n-                // a constant found in the caller bounds, there are\n-                // now three possible cases here.\n-                #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n-                enum FailureKind {\n-                    /// The abstract const still references an inference\n-                    /// variable, in this case we return `TooGeneric`.\n-                    MentionsInfer,\n-                    /// The abstract const references a generic parameter,\n-                    /// this means that we emit an error here.\n-                    MentionsParam,\n-                    /// The substs are concrete enough that we can simply\n-                    /// try and evaluate the given constant.\n-                    Concrete,\n-                }\n-                let mut failure_kind = FailureKind::Concrete;\n-                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root(tcx) {\n-                    Node::Leaf(leaf) => {\n-                        if leaf.has_infer_types_or_consts() {\n-                            failure_kind = FailureKind::MentionsInfer;\n-                        } else if leaf.has_param_types_or_consts() {\n-                            failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n-                        }\n-\n-                        ControlFlow::CONTINUE\n+        if let Some(ct) = AbstractConst::new(tcx, uv)? {\n+            if satisfied_from_param_env(tcx, ct, param_env)? {\n+                return Ok(());\n+            }\n+\n+            // We were unable to unify the abstract constant with\n+            // a constant found in the caller bounds, there are\n+            // now three possible cases here.\n+            #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+            enum FailureKind {\n+                /// The abstract const still references an inference\n+                /// variable, in this case we return `TooGeneric`.\n+                MentionsInfer,\n+                /// The abstract const references a generic parameter,\n+                /// this means that we emit an error here.\n+                MentionsParam,\n+                /// The substs are concrete enough that we can simply\n+                /// try and evaluate the given constant.\n+                Concrete,\n+            }\n+            let mut failure_kind = FailureKind::Concrete;\n+            walk_abstract_const::<!, _>(tcx, ct, |node| match node.root(tcx) {\n+                Node::Leaf(leaf) => {\n+                    if leaf.has_infer_types_or_consts() {\n+                        failure_kind = FailureKind::MentionsInfer;\n+                    } else if leaf.has_param_types_or_consts() {\n+                        failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                     }\n-                    Node::Cast(_, _, ty) => {\n-                        if ty.has_infer_types_or_consts() {\n-                            failure_kind = FailureKind::MentionsInfer;\n-                        } else if ty.has_param_types_or_consts() {\n-                            failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n-                        }\n \n-                        ControlFlow::CONTINUE\n-                    }\n-                    Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => {\n-                        ControlFlow::CONTINUE\n+                    ControlFlow::CONTINUE\n+                }\n+                Node::Cast(_, _, ty) => {\n+                    if ty.has_infer_types_or_consts() {\n+                        failure_kind = FailureKind::MentionsInfer;\n+                    } else if ty.has_param_types_or_consts() {\n+                        failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                     }\n-                });\n \n-                match failure_kind {\n-                    FailureKind::MentionsInfer => {\n-                        return Err(NotConstEvaluatable::MentionsInfer);\n-                    }\n-                    FailureKind::MentionsParam => {\n-                        return Err(NotConstEvaluatable::MentionsParam);\n-                    }\n-                    FailureKind::Concrete => {\n-                        // Dealt with below by the same code which handles this\n-                        // without the feature gate.\n-                    }\n+                    ControlFlow::CONTINUE\n                 }\n-            }\n-            None => {\n-                // If we are dealing with a concrete constant, we can\n-                // reuse the old code path and try to evaluate\n-                // the constant.\n-            }\n-        }\n-    }\n+                Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => {\n+                    ControlFlow::CONTINUE\n+                }\n+            });\n \n-    let future_compat_lint = || {\n-        if tcx.features().generic_const_exprs {\n-            return;\n-        }\n-        if let Some(local_def_id) = uv.def.did.as_local() {\n-            infcx.tcx.struct_span_lint_hir(\n-                lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n-                infcx.tcx.hir().local_def_id_to_hir_id(local_def_id),\n-                span,\n-                |err| {\n-                    err.build(\"cannot use constants which depend on generic parameters in types\")\n-                        .emit();\n-                },\n-            );\n-        }\n-    };\n-\n-    // FIXME: We should only try to evaluate a given constant here if it is fully concrete\n-    // as we don't want to allow things like `[u8; std::mem::size_of::<*mut T>()]`.\n-    //\n-    // We previously did not check this, so we only emit a future compat warning if\n-    // const evaluation succeeds and the given constant is still polymorphic for now\n-    // and hopefully soon change this to an error.\n-    //\n-    // See #74595 for more details about this.\n-    let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n-\n-    if concrete.is_ok() && uv.substs.has_param_types_or_consts() {\n-        match infcx.tcx.def_kind(uv.def.did) {\n-            DefKind::AnonConst | DefKind::InlineConst => {\n-                let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n-\n-                if mir_body.is_polymorphic {\n-                    future_compat_lint();\n+            match failure_kind {\n+                FailureKind::MentionsInfer => {\n+                    return Err(NotConstEvaluatable::MentionsInfer);\n+                }\n+                FailureKind::MentionsParam => {\n+                    return Err(NotConstEvaluatable::MentionsParam);\n                 }\n+                // returned below\n+                FailureKind::Concrete => {}\n             }\n-            _ => future_compat_lint(),\n         }\n-    }\n-\n-    // If we're evaluating a foreign constant, under a nightly compiler without generic\n-    // const exprs, AND it would've passed if that expression had been evaluated with\n-    // generic const exprs, then suggest using generic const exprs.\n-    if concrete.is_err()\n-        && tcx.sess.is_nightly_build()\n-        && !uv.def.did.is_local()\n-        && !tcx.features().generic_const_exprs\n-        && let Ok(Some(ct)) = AbstractConst::new(tcx, uv)\n-        && satisfied_from_param_env(tcx, ct, param_env) == Ok(true)\n-    {\n-        tcx.sess\n-            .struct_span_fatal(\n-                // Slightly better span than just using `span` alone\n-                if span == rustc_span::DUMMY_SP { tcx.def_span(uv.def.did) } else { span },\n-                \"failed to evaluate generic const expression\",\n-            )\n-            .note(\"the crate this constant originates from uses `#![feature(generic_const_exprs)]`\")\n-            .span_suggestion_verbose(\n-                rustc_span::DUMMY_SP,\n-                \"consider enabling this feature\",\n-                \"#![feature(generic_const_exprs)]\\n\".to_string(),\n-                rustc_errors::Applicability::MaybeIncorrect,\n-            )\n-            .emit()\n-    }\n-\n-    debug!(?concrete, \"is_const_evaluatable\");\n-    match concrete {\n-        Err(ErrorHandled::TooGeneric) => Err(match uv.has_infer_types_or_consts() {\n-            true => NotConstEvaluatable::MentionsInfer,\n-            false => NotConstEvaluatable::MentionsParam,\n-        }),\n-        Err(ErrorHandled::Linted) => {\n-            let reported =\n-                infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n-            Err(NotConstEvaluatable::Error(reported))\n+        let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+        match concrete {\n+            Err(ErrorHandled::TooGeneric) => Err(if !uv.has_infer_types_or_consts() {\n+                infcx\n+                    .tcx\n+                    .sess\n+                    .delay_span_bug(span, &format!(\"unexpected `TooGeneric` for {:?}\", uv));\n+                NotConstEvaluatable::MentionsParam\n+            } else {\n+                NotConstEvaluatable::MentionsInfer\n+            }),\n+            Err(ErrorHandled::Linted) => {\n+                let reported = infcx\n+                    .tcx\n+                    .sess\n+                    .delay_span_bug(span, \"constant in type had error reported as lint\");\n+                Err(NotConstEvaluatable::Error(reported))\n+            }\n+            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+            Ok(_) => Ok(()),\n+        }\n+    } else {\n+        // FIXME: We should only try to evaluate a given constant here if it is fully concrete\n+        // as we don't want to allow things like `[u8; std::mem::size_of::<*mut T>()]`.\n+        //\n+        // We previously did not check this, so we only emit a future compat warning if\n+        // const evaluation succeeds and the given constant is still polymorphic for now\n+        // and hopefully soon change this to an error.\n+        //\n+        // See #74595 for more details about this.\n+        let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+\n+        match concrete {\n+          // If we're evaluating a foreign constant, under a nightly compiler without generic\n+          // const exprs, AND it would've passed if that expression had been evaluated with\n+          // generic const exprs, then suggest using generic const exprs.\n+          Err(_) if tcx.sess.is_nightly_build()\n+            && let Ok(Some(ct)) = AbstractConst::new(tcx, uv)\n+            && satisfied_from_param_env(tcx, ct, param_env) == Ok(true) => {\n+              tcx.sess\n+                  .struct_span_fatal(\n+                      // Slightly better span than just using `span` alone\n+                      if span == rustc_span::DUMMY_SP { tcx.def_span(uv.def.did) } else { span },\n+                      \"failed to evaluate generic const expression\",\n+                  )\n+                  .note(\"the crate this constant originates from uses `#![feature(generic_const_exprs)]`\")\n+                  .span_suggestion_verbose(\n+                      rustc_span::DUMMY_SP,\n+                      \"consider enabling this feature\",\n+                      \"#![feature(generic_const_exprs)]\\n\".to_string(),\n+                      rustc_errors::Applicability::MaybeIncorrect,\n+                  )\n+                  .emit()\n+            }\n+\n+            Err(ErrorHandled::TooGeneric) => Err(if uv.has_infer_types_or_consts() {\n+                NotConstEvaluatable::MentionsInfer\n+                } else {\n+                NotConstEvaluatable::MentionsParam\n+            }),\n+            Err(ErrorHandled::Linted) => {\n+                let reported =\n+                    infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n+                Err(NotConstEvaluatable::Error(reported))\n+            }\n+            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+            Ok(_) => {\n+              if uv.substs.has_param_types_or_consts() {\n+                  assert!(matches!(infcx.tcx.def_kind(uv.def.did), DefKind::AnonConst));\n+                  let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n+\n+                  if mir_body.is_polymorphic {\n+                      let Some(local_def_id) = uv.def.did.as_local() else { return Ok(()) };\n+                      tcx.struct_span_lint_hir(\n+                          lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n+                          tcx.hir().local_def_id_to_hir_id(local_def_id),\n+                          span,\n+                          |err| {\n+                              err.build(\"cannot use constants which depend on generic parameters in types\").emit();\n+                        })\n+                  }\n+              }\n+\n+              Ok(())\n+            },\n         }\n-        Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n-        Ok(_) => Ok(()),\n     }\n }\n "}]}