{"sha": "e05cd155feaafec2b94cd11083e8425094ad8806", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNWNkMTU1ZmVhYWZlYzJiOTRjZDExMDgzZTg0MjUwOTRhZDg4MDY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-23T19:42:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-30T18:31:55Z"}, "message": "Move lowering to create_global_ctxt.", "tree": {"sha": "d1184c0713db687c216d14f0497b28232c0d163a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1184c0713db687c216d14f0497b28232c0d163a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e05cd155feaafec2b94cd11083e8425094ad8806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e05cd155feaafec2b94cd11083e8425094ad8806", "html_url": "https://github.com/rust-lang/rust/commit/e05cd155feaafec2b94cd11083e8425094ad8806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e05cd155feaafec2b94cd11083e8425094ad8806/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80f720a2af0ccad54a1236063888aa9418cdf0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80f720a2af0ccad54a1236063888aa9418cdf0f", "html_url": "https://github.com/rust-lang/rust/commit/b80f720a2af0ccad54a1236063888aa9418cdf0f"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "e08c8faaa52bbb43053b86e251ad5a467b9e4d45", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e05cd155feaafec2b94cd11083e8425094ad8806/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05cd155feaafec2b94cd11083e8425094ad8806/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=e05cd155feaafec2b94cd11083e8425094ad8806", "patch": "@@ -458,15 +458,9 @@ pub fn lower_to_hir<'res, 'tcx>(\n     sess: &'tcx Session,\n     lint_store: &LintStore,\n     resolver: &'res mut Resolver<'_>,\n-    dep_graph: &'res DepGraph,\n     krate: &'res ast::Crate,\n     arena: &'tcx rustc_ast_lowering::Arena<'tcx>,\n ) -> Crate<'tcx> {\n-    // We're constructing the HIR here; we don't care what we will\n-    // read, since we haven't even constructed the *input* to\n-    // incr. comp. yet.\n-    dep_graph.assert_ignored();\n-\n     // Lower AST to HIR.\n     let hir_crate = rustc_ast_lowering::lower_crate(\n         sess,\n@@ -783,17 +777,27 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n-    krate: &'tcx Crate<'tcx>,\n+    krate: &ast::Crate,\n     dep_graph: DepGraph,\n-    resolver_outputs: ResolverOutputs,\n+    resolver: Rc<RefCell<BoxedResolver>>,\n     outputs: OutputFilenames,\n     crate_name: &str,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n     global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n+    hir_arena: &'tcx WorkerLocal<rustc_ast_lowering::Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n+    // We're constructing the HIR here; we don't care what we will\n+    // read, since we haven't even constructed the *input* to\n+    // incr. comp. yet.\n+    dep_graph.assert_ignored();\n+\n     let sess = &compiler.session();\n-    let _timer = sess.timer(\"create_global_ctxt\");\n+    let krate = resolver\n+        .borrow_mut()\n+        .access(|resolver| lower_to_hir(sess, &lint_store, resolver, krate, hir_arena));\n+    let krate = &*hir_arena.alloc(krate);\n+    let resolver_outputs = BoxedResolver::to_resolver_outputs(resolver);\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n@@ -812,7 +816,7 @@ pub fn create_global_ctxt<'tcx>(\n     let queries = queries.get_or_init(|| TcxQueries::new(local_providers, extern_providers));\n \n     let gcx = sess.time(\"setup_global_ctxt\", || {\n-        global_ctxt.get_or_init(|| {\n+        global_ctxt.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n                 sess,\n                 lint_store,"}, {"sha": "7b284e206e2bf5a7f9b7511e34696fac79b72955", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e05cd155feaafec2b94cd11083e8425094ad8806/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05cd155feaafec2b94cd11083e8425094ad8806/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=e05cd155feaafec2b94cd11083e8425094ad8806", "patch": "@@ -224,31 +224,19 @@ impl<'tcx> Queries<'tcx> {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n             let (ref krate, ref resolver, ref lint_store) = &*self.expansion()?.peek();\n-            let resolver = resolver.steal();\n             let dep_graph = self.dep_graph()?.peek().clone();\n-            let krate = resolver.borrow_mut().access(|resolver| {\n-                Ok(passes::lower_to_hir(\n-                    self.session(),\n-                    lint_store,\n-                    resolver,\n-                    &dep_graph,\n-                    &krate,\n-                    &self.hir_arena,\n-                ))\n-            })?;\n-            let krate = self.hir_arena.alloc(krate);\n-            let resolver_outputs = Steal::new(BoxedResolver::to_resolver_outputs(resolver));\n             Ok(passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store.clone(),\n                 krate,\n                 dep_graph,\n-                resolver_outputs.steal(),\n+                resolver.steal(),\n                 outputs,\n                 &crate_name,\n                 &self.queries,\n                 &self.gcx,\n                 &self.arena,\n+                &self.hir_arena,\n             ))\n         })\n     }"}]}