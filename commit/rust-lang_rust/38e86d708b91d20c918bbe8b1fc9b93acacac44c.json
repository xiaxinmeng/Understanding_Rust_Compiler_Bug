{"sha": "38e86d708b91d20c918bbe8b1fc9b93acacac44c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZTg2ZDcwOGI5MWQyMGM5MThiYmU4YjFmYzliOTNhY2FjYWM0NGM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T11:34:08Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-13T11:34:08Z"}, "message": "Properly alias-check bindings in for-each loops", "tree": {"sha": "8f6051bc82736ff976e1ecb918882d4313d88328", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f6051bc82736ff976e1ecb918882d4313d88328"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e86d708b91d20c918bbe8b1fc9b93acacac44c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e86d708b91d20c918bbe8b1fc9b93acacac44c", "html_url": "https://github.com/rust-lang/rust/commit/38e86d708b91d20c918bbe8b1fc9b93acacac44c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e86d708b91d20c918bbe8b1fc9b93acacac44c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45bdff01b2dd7232638b135b188226540b5e79ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/45bdff01b2dd7232638b135b188226540b5e79ec", "html_url": "https://github.com/rust-lang/rust/commit/45bdff01b2dd7232638b135b188226540b5e79ec"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "e68b84e9e7023eac91391018fb949a59d18484da", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/38e86d708b91d20c918bbe8b1fc9b93acacac44c/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e86d708b91d20c918bbe8b1fc9b93acacac44c/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=38e86d708b91d20c918bbe8b1fc9b93acacac44c", "patch": "@@ -15,13 +15,11 @@ import std::option::{some, none, is_none};\n tag valid { valid; overwritten(span, ast::path); val_taken(span, ast::path); }\n tag copied { not_allowed; copied; not_copied; }\n \n-type restrict = @{root_var: option::t<node_id>,\n-                  node_id: node_id,\n+type restrict = @{node_id: node_id,\n                   span: span,\n                   local_id: uint,\n-                  binding: option::t<node_id>,\n+                  root_var: option::t<node_id>,\n                   unsafe_tys: [ty::t],\n-                  depends_on: [uint],\n                   mutable ok: valid,\n                   mutable copied: copied};\n \n@@ -71,7 +69,7 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n     let handled = true;\n     alt ex.node {\n       ast::expr_call(f, args) {\n-        check_call(*cx, f, args, sc);\n+        check_call(*cx, f, args);\n         handled = false;\n       }\n       ast::expr_alt(input, arms) { check_alt(*cx, input, arms, sc, v); }\n@@ -160,8 +158,7 @@ fn cant_copy(cx: ctx, r: restrict) -> bool {\n     } else { ret true; }\n }\n \n-fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr], sc: scope) ->\n-   [restrict] {\n+fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr]) -> [restrict] {\n     let fty = ty::type_autoderef(cx.tcx, ty::expr_ty(cx.tcx, f));\n     let arg_ts = ty::ty_fn_args(cx.tcx, fty);\n     let mut_roots: [{arg: uint, node: node_id}] = [];\n@@ -180,13 +177,11 @@ fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr], sc: scope) ->\n             }\n         }\n         let root_var = path_def_id(cx, root.ex);\n-        restricts += [@{root_var: root_var,\n-                        node_id: arg.id,\n+        restricts += [@{node_id: arg.id,\n                         span: arg.span,\n                         local_id: cx.next_local,\n-                        binding: none::<node_id>,\n+                        root_var: root_var,\n                         unsafe_tys: inner_mut(root.ds),\n-                        depends_on: deps(sc, root_var),\n                         mutable ok: valid,\n                         mutable copied: alt arg_t.mode {\n                           ast::by_move. { copied }\n@@ -284,13 +279,11 @@ fn check_alt(cx: ctx, input: @ast::expr, arms: [ast::arm], sc: scope,\n             }\n         }\n         for info in binding_info {\n-            new_sc += [@{root_var: root_var,\n-                         node_id: info.id,\n+            new_sc += [@{node_id: info.id,\n                          span: info.span,\n                          local_id: cx.next_local,\n-                         binding: some(info.id),\n+                         root_var: root_var,\n                          unsafe_tys: info.unsafe,\n-                         depends_on: deps(sc, root_var),\n                          mutable ok: valid,\n                          mutable copied: not_copied}];\n         }\n@@ -304,9 +297,18 @@ fn check_for_each(cx: ctx, local: @ast::local, call: @ast::expr,\n     v.visit_expr(call, sc, v);\n     alt call.node {\n       ast::expr_call(f, args) {\n-        let restricts = check_call(cx, f, args, sc);\n+        let new_sc = *sc + check_call(cx, f, args);\n+        for proot in *pattern_roots(cx.tcx, [], local.node.pat) {\n+            new_sc += [@{node_id: proot.id,\n+                         span: proot.span,\n+                         local_id: cx.next_local,\n+                         root_var: none::<node_id>,\n+                         unsafe_tys: inner_mut(proot.ds),\n+                         mutable ok: valid,\n+                         mutable copied: not_copied}];\n+        }\n         register_locals(cx, local.node.pat);\n-        visit::visit_block(blk, @(*sc + restricts), v);\n+        visit::visit_block(blk, @new_sc, v);\n       }\n     }\n }\n@@ -330,13 +332,11 @@ fn check_for(cx: ctx, local: @ast::local, seq: @ast::expr, blk: ast::blk,\n     let root_var = path_def_id(cx, root.ex);\n     let new_sc = *sc;\n     for proot in *pattern_roots(cx.tcx, ext_ds, local.node.pat) {\n-        new_sc += [@{root_var: root_var,\n-                     node_id: proot.id,\n+        new_sc += [@{node_id: proot.id,\n                      span: proot.span,\n                      local_id: cx.next_local,\n-                     binding: some(proot.id),\n+                     root_var: root_var,\n                      unsafe_tys: inner_mut(proot.ds),\n-                     depends_on: deps(sc, root_var),\n                      mutable ok: valid,\n                      mutable copied: not_copied}];\n     }\n@@ -360,7 +360,7 @@ fn check_var(cx: ctx, ex: @ast::expr, p: ast::path, id: ast::node_id,\n                     r.ok = val_taken(ex.span, p);\n                 }\n             }\n-        } else if r.binding == some(my_defnum) {\n+        } else if r.node_id == my_defnum {\n             test_scope(cx, sc, r, p);\n         }\n     }\n@@ -387,9 +387,16 @@ fn check_assign(cx: @ctx, dest: @ast::expr, src: @ast::expr, sc: scope,\n \n fn test_scope(cx: ctx, sc: scope, r: restrict, p: ast::path) {\n     let prob = r.ok;\n-    for dep: uint in r.depends_on {\n-        if prob != valid { break; }\n-        prob = sc[dep].ok;\n+    alt r.root_var {\n+      some(dn) {\n+        for other in *sc {\n+            if other.node_id == dn {\n+                prob = other.ok;\n+                if prob != valid { break; }\n+            }\n+        }\n+      }\n+      _ {}\n     }\n     if prob != valid && cant_copy(cx, r) {\n         let msg =\n@@ -409,21 +416,6 @@ fn test_scope(cx: ctx, sc: scope, r: restrict, p: ast::path) {\n     }\n }\n \n-fn deps(sc: scope, root: option::t<node_id>) -> [uint] {\n-    let result = [];\n-    alt root {\n-      some(dn) {\n-        let i = 0u;\n-        for r: restrict in *sc {\n-            if r.binding == some(dn) { result += [i]; }\n-            i += 1u;\n-        }\n-      }\n-      _ { }\n-    }\n-    ret result;\n-}\n-\n fn path_def(cx: ctx, ex: @ast::expr) -> option::t<ast::def> {\n     ret alt ex.node {\n           ast::expr_path(_) { some(cx.tcx.def_map.get(ex.id)) }"}]}