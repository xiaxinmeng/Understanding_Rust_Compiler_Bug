{"sha": "721ffd14c35a7cb0202b84492196fa134ca65f3d", "node_id": "C_kwDOAAsO6NoAKDcyMWZmZDE0YzM1YTdjYjAyMDJiODQ0OTIxOTZmYTEzNGNhNjVmM2Q", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-21T14:56:00Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-29T13:19:46Z"}, "message": "Add constness to ParamEnv\n\nThis now causes a lot of queries to be executed twice, as reveal_all forces NotConst", "tree": {"sha": "001fe0b57a9fa8ff271a67b3085830d7fb1e45d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001fe0b57a9fa8ff271a67b3085830d7fb1e45d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/721ffd14c35a7cb0202b84492196fa134ca65f3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmGk03IACgkQbQF6ltjm\nwvmEtA/7BcsVilA8NMItk71notXgL57+Vp0HI/o7is/6EnRb0crUwC53LgJmUssT\ngc7VoTaX7CZgZz4qYtNAfIaEnp+O9qKGKWQEBPgnKBdaOlnlA9FfZo+Zxf5/di+9\nUrhL/tkm6MJeLGn3+Ee/kWKJxVrBtKC2jLyjXcOAYHXKno902ynQVHoRNc3yVKbG\nclwG5HQwBU6cUHI0lroiI2HUW9nvnOMSm2F7kTdUzrDId//L4CEjH38y/SCkl731\ngpIqqV8R822/jKJ+wJGb5jDsAh0xq9i+SAGBXczm50wde0a2MpFmdfdreAcrsgob\nPCBBMPOdL1SbrNow6mabR/CaiicuiY94uuNEiggbApQ/yvDubkhc2edLUXzulhi8\nl5buyyY5Gn6HrXUK03eTFgU7QcHzSH3qOJGDKn2/c9XF22WjsOhRwzGUH0L4UrMX\nNjKGDTwabI4era5MafBm7cYslBBKM1SeIdfuIuGzajmXPzzHilkuXotYwa0/vJml\n/BN6gF178J0P/KpSw9NTdg9OU/TFiBdT/IEWt6u8Xbaxl1krTnlp8o4cJN2k23W9\n/eGrmne9T2rBoI+mw7Il3V/1iXg5weEW5C7lhbIdi8uHhVHoWxa0JJJcxyMx7M8i\n2+fPaS/ffapx13m4yztS6JifvzTKgV0ZUaSszFx3IHjOJxuXByQ=\n=2rp3\n-----END PGP SIGNATURE-----", "payload": "tree 001fe0b57a9fa8ff271a67b3085830d7fb1e45d7\nparent 22eeff700e4d2b4c4160c63d8d3e14931268b5f8\nauthor Oli Scherer <git-spam-no-reply9815368754983@oli-obk.de> 1634828160 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1638191986 +0800\n\nAdd constness to ParamEnv\n\nThis now causes a lot of queries to be executed twice, as reveal_all forces NotConst\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/721ffd14c35a7cb0202b84492196fa134ca65f3d", "html_url": "https://github.com/rust-lang/rust/commit/721ffd14c35a7cb0202b84492196fa134ca65f3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/721ffd14c35a7cb0202b84492196fa134ca65f3d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22eeff700e4d2b4c4160c63d8d3e14931268b5f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/22eeff700e4d2b4c4160c63d8d3e14931268b5f8", "html_url": "https://github.com/rust-lang/rust/commit/22eeff700e4d2b4c4160c63d8d3e14931268b5f8"}], "stats": {"total": 173, "additions": 127, "deletions": 46}, "files": [{"sha": "bde566d4c3136bb8fa126442d1fcb1fc6a84895a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=721ffd14c35a7cb0202b84492196fa134ca65f3d", "patch": "@@ -454,18 +454,30 @@ impl<'hir> Map<'hir> {\n     ///\n     /// Panics if `LocalDefId` does not have an associated body.\n     pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {\n+        match self.opt_body_owner_kind(id) {\n+            Ok(kind) => kind,\n+            Err(node) => bug!(\"{:#?} is not a body node\", node),\n+        }\n+    }\n+\n+    /// Returns the `BodyOwnerKind` of this `LocalDefId`.\n+    ///\n+    /// Returns the `Node` if `LocalDefId` does not have an associated body.\n+    pub fn opt_body_owner_kind(&self, id: HirId) -> Result<BodyOwnerKind, Node<'_>> {\n         match self.get(id) {\n             Node::Item(&Item { kind: ItemKind::Const(..), .. })\n             | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })\n             | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })\n-            | Node::AnonConst(_) => BodyOwnerKind::Const,\n+            | Node::AnonConst(_) => Ok(BodyOwnerKind::Const),\n             Node::Ctor(..)\n             | Node::Item(&Item { kind: ItemKind::Fn(..), .. })\n             | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })\n-            | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,\n-            Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),\n-            Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,\n-            node => bug!(\"{:#?} is not a body node\", node),\n+            | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => Ok(BodyOwnerKind::Fn),\n+            Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => {\n+                Ok(BodyOwnerKind::Static(m))\n+            }\n+            Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => Ok(BodyOwnerKind::Closure),\n+            node => Err(node),\n         }\n     }\n \n@@ -474,7 +486,8 @@ impl<'hir> Map<'hir> {\n     /// Panics if `LocalDefId` does not have an associated body.\n     ///\n     /// This should only be used for determining the context of a body, a return\n-    /// value of `Some` does not always suggest that the owner of the body is `const`.\n+    /// value of `Some` does not always suggest that the owner of the body is `const`,\n+    /// just that it has to be checked as if it were.\n     pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {\n         let hir_id = self.local_def_id_to_hir_id(did);\n         let ccx = match self.body_owner_kind(hir_id) {"}, {"sha": "8e7eb46f260100e0766d703a6e2a93d766c66fd6", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=721ffd14c35a7cb0202b84492196fa134ca65f3d", "patch": "@@ -1227,22 +1227,27 @@ pub struct ParamEnv<'tcx> {\n #[derive(Copy, Clone)]\n struct ParamTag {\n     reveal: traits::Reveal,\n+    constness: hir::Constness,\n }\n \n unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {\n-    const BITS: usize = 1;\n+    const BITS: usize = 2;\n     #[inline]\n     fn into_usize(self) -> usize {\n         match self {\n-            Self { reveal: traits::Reveal::UserFacing } => 0,\n-            Self { reveal: traits::Reveal::All } => 1,\n+            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,\n+            Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,\n+            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,\n+            Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,\n         }\n     }\n     #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         match ptr {\n-            0 => Self { reveal: traits::Reveal::UserFacing },\n-            1 => Self { reveal: traits::Reveal::All },\n+            0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },\n+            1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },\n+            2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },\n+            3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },\n             _ => std::hint::unreachable_unchecked(),\n         }\n     }\n@@ -1253,6 +1258,7 @@ impl<'tcx> fmt::Debug for ParamEnv<'tcx> {\n         f.debug_struct(\"ParamEnv\")\n             .field(\"caller_bounds\", &self.caller_bounds())\n             .field(\"reveal\", &self.reveal())\n+            .field(\"constness\", &self.constness())\n             .finish()\n     }\n }\n@@ -1261,20 +1267,23 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         self.caller_bounds().hash_stable(hcx, hasher);\n         self.reveal().hash_stable(hcx, hasher);\n+        self.constness().hash_stable(hcx, hasher);\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n-    fn super_fold_with<F: ty::fold::TypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(ParamEnv::new(self.caller_bounds().fold_with(folder)?, self.reveal().fold_with(folder)?))\n+    fn super_fold_with<F: ty::fold::TypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        ParamEnv::new(\n+            self.caller_bounds().fold_with(folder)?,\n+            self.reveal().fold_with(folder)?,\n+            self.constness().fold_with(folder)?,\n+        )\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n-        self.reveal().visit_with(visitor)\n+        self.reveal().visit_with(visitor)?;\n+        self.constness().visit_with(visitor)\n     }\n }\n \n@@ -1285,7 +1294,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// type-checking.\n     #[inline]\n     pub fn empty() -> Self {\n-        Self::new(List::empty(), Reveal::UserFacing)\n+        Self::new(List::empty(), Reveal::UserFacing, hir::Constness::NotConst)\n     }\n \n     #[inline]\n@@ -1298,6 +1307,11 @@ impl<'tcx> ParamEnv<'tcx> {\n         self.packed.tag().reveal\n     }\n \n+    #[inline]\n+    pub fn constness(self) -> hir::Constness {\n+        self.packed.tag().constness\n+    }\n+\n     /// Construct a trait environment with no where-clauses in scope\n     /// where the values of all `impl Trait` and other hidden types\n     /// are revealed. This is suitable for monomorphized, post-typeck\n@@ -1307,13 +1321,17 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// or invoke `param_env.with_reveal_all()`.\n     #[inline]\n     pub fn reveal_all() -> Self {\n-        Self::new(List::empty(), Reveal::All)\n+        Self::new(List::empty(), Reveal::All, hir::Constness::NotConst)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n     #[inline]\n-    pub fn new(caller_bounds: &'tcx List<Predicate<'tcx>>, reveal: Reveal) -> Self {\n-        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal }) }\n+    pub fn new(\n+        caller_bounds: &'tcx List<Predicate<'tcx>>,\n+        reveal: Reveal,\n+        constness: hir::Constness,\n+    ) -> Self {\n+        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }\n     }\n \n     pub fn with_user_facing(mut self) -> Self {\n@@ -1335,13 +1353,17 @@ impl<'tcx> ParamEnv<'tcx> {\n             return self;\n         }\n \n-        ParamEnv::new(tcx.normalize_opaque_types(self.caller_bounds()), Reveal::All)\n+        ParamEnv::new(\n+            tcx.normalize_opaque_types(self.caller_bounds()),\n+            Reveal::All,\n+            self.constness(),\n+        )\n     }\n \n     /// Returns this same environment but with no caller bounds.\n     #[inline]\n     pub fn without_caller_bounds(self) -> Self {\n-        Self::new(List::empty(), self.reveal())\n+        Self::new(List::empty(), self.reveal(), self.constness())\n     }\n \n     /// Creates a suitable environment in which to perform trait"}, {"sha": "f637412a117443e53367dd0cca235abe3a72fd18", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=721ffd14c35a7cb0202b84492196fa134ca65f3d", "patch": "@@ -480,7 +480,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n     type Lifted = ty::ParamEnv<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(self.caller_bounds())\n-            .map(|caller_bounds| ty::ParamEnv::new(caller_bounds, self.reveal()))\n+            .map(|caller_bounds| ty::ParamEnv::new(caller_bounds, self.reveal(), self.constness()))\n     }\n }\n "}, {"sha": "74de49e8fa4c331e4a411f9481369d15ae6ebecc", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=721ffd14c35a7cb0202b84492196fa134ca65f3d", "patch": "@@ -370,12 +370,17 @@ impl AutoTraitFinder<'tcx> {\n                 computed_preds.clone().chain(user_computed_preds.iter().cloned()),\n             )\n             .map(|o| o.predicate);\n-            new_env = ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal());\n+            new_env = ty::ParamEnv::new(\n+                tcx.mk_predicates(normalized_preds),\n+                param_env.reveal(),\n+                param_env.constness(),\n+            );\n         }\n \n         let final_user_env = ty::ParamEnv::new(\n             tcx.mk_predicates(user_computed_preds.into_iter()),\n             user_env.reveal(),\n+            user_env.constness(),\n         );\n         debug!(\n             \"evaluate_nested_obligations(ty={:?}, trait_did={:?}): succeeded with '{:?}' \\"}, {"sha": "36305429877a8df64c247014aad868f5621884cc", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=721ffd14c35a7cb0202b84492196fa134ca65f3d", "patch": "@@ -307,8 +307,11 @@ pub fn normalize_param_env_or_error<'tcx>(\n \n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\", predicates);\n \n-    let elaborated_env =\n-        ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal());\n+    let elaborated_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&predicates),\n+        unnormalized_env.reveal(),\n+        unnormalized_env.constness(),\n+    );\n \n     // HACK: we are trying to normalize the param-env inside *itself*. The problem is that\n     // normalization expects its param-env to be already normalized, which means we have\n@@ -360,8 +363,11 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // predicates here anyway. Keeping them here anyway because it seems safer.\n     let outlives_env: Vec<_> =\n         non_outlives_predicates.iter().chain(&outlives_predicates).cloned().collect();\n-    let outlives_env =\n-        ty::ParamEnv::new(tcx.intern_predicates(&outlives_env), unnormalized_env.reveal());\n+    let outlives_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&outlives_env),\n+        unnormalized_env.reveal(),\n+        unnormalized_env.constness(),\n+    );\n     let outlives_predicates = match do_normalize_predicates(\n         tcx,\n         region_context,\n@@ -381,7 +387,11 @@ pub fn normalize_param_env_or_error<'tcx>(\n     let mut predicates = non_outlives_predicates;\n     predicates.extend(outlives_predicates);\n     debug!(\"normalize_param_env_or_error: final predicates={:?}\", predicates);\n-    ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal())\n+    ty::ParamEnv::new(\n+        tcx.intern_predicates(&predicates),\n+        unnormalized_env.reveal(),\n+        unnormalized_env.constness(),\n+    )\n }\n \n pub fn fully_normalize<'a, 'tcx, T>("}, {"sha": "616efffd999ec6c756eddf85cfbb86710bc276ec", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=721ffd14c35a7cb0202b84492196fa134ca65f3d", "patch": "@@ -698,7 +698,11 @@ fn receiver_is_dispatchable<'tcx>(\n             .chain(array::IntoIter::new([unsize_predicate, trait_predicate]))\n             .collect();\n \n-        ty::ParamEnv::new(tcx.intern_predicates(&caller_bounds), param_env.reveal())\n+        ty::ParamEnv::new(\n+            tcx.intern_predicates(&caller_bounds),\n+            param_env.reveal(),\n+            param_env.constness(),\n+        )\n     };\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>"}, {"sha": "dccb74c03f7253c1695309f6be7c35effea21248", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=721ffd14c35a7cb0202b84492196fa134ca65f3d", "patch": "@@ -285,16 +285,33 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // issue #89334\n     predicates = tcx.expose_default_const_substs(predicates);\n \n-    let unnormalized_env =\n-        ty::ParamEnv::new(tcx.intern_predicates(&predicates), traits::Reveal::UserFacing);\n-\n-    debug!(\"unnormalized_env caller bounds: {:?}\", unnormalized_env.caller_bounds());\n-    let body_id = def_id\n-        .as_local()\n-        .map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n-        .map_or(hir::CRATE_HIR_ID, |id| {\n-            tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n-        });\n+    let local_did = def_id.as_local();\n+    let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n+\n+    let constness = match hir_id {\n+        Some(hir_id) => match tcx.hir().opt_body_owner_kind(hir_id) {\n+            Err(hir::Node::Item(&hir::Item {\n+                kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n+                ..\n+            })) => constness,\n+            Err(_) => hir::Constness::NotConst,\n+            Ok(_) => match tcx.hir().body_const_context(local_did.unwrap()) {\n+                Some(_) => hir::Constness::Const,\n+                None => hir::Constness::NotConst,\n+            },\n+        },\n+        None => hir::Constness::NotConst,\n+    };\n+\n+    let unnormalized_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&predicates),\n+        traits::Reveal::UserFacing,\n+        constness,\n+    );\n+\n+    let body_id = hir_id.map_or(hir::CRATE_HIR_ID, |id| {\n+        tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n+    });\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n     traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n }"}, {"sha": "51dd0f98eb504cc3b75c0e1ee750a52e8a807677", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721ffd14c35a7cb0202b84492196fa134ca65f3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=721ffd14c35a7cb0202b84492196fa134ca65f3d", "patch": "@@ -208,8 +208,11 @@ fn compare_predicate_entailment<'tcx>(\n     // The key step here is to update the caller_bounds's predicates to be\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_hir_id);\n-    let param_env =\n-        ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates), Reveal::UserFacing);\n+    let param_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&hybrid_preds.predicates),\n+        Reveal::UserFacing,\n+        hir::Constness::NotConst,\n+    );\n     let param_env =\n         traits::normalize_param_env_or_error(tcx, impl_m.def_id, param_env, normalize_cause);\n \n@@ -1183,8 +1186,11 @@ fn compare_type_predicate_entailment<'tcx>(\n     debug!(\"compare_type_predicate_entailment: bounds={:?}\", hybrid_preds);\n \n     let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n-    let param_env =\n-        ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates), Reveal::UserFacing);\n+    let param_env = ty::ParamEnv::new(\n+        tcx.intern_predicates(&hybrid_preds.predicates),\n+        Reveal::UserFacing,\n+        hir::Constness::NotConst,\n+    );\n     let param_env = traits::normalize_param_env_or_error(\n         tcx,\n         impl_ty.def_id,\n@@ -1369,7 +1375,11 @@ pub fn check_type_bounds<'tcx>(\n                 .to_predicate(tcx),\n             ),\n         };\n-        ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing)\n+        ty::ParamEnv::new(\n+            tcx.intern_predicates(&predicates),\n+            Reveal::UserFacing,\n+            param_env.constness(),\n+        )\n     };\n     debug!(?normalize_param_env);\n "}]}