{"sha": "2a45a2ab6b5fd9075b3488c32825a6686f532559", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDVhMmFiNmI1ZmQ5MDc1YjM0ODhjMzI4MjVhNjY4NmY1MzI1NTk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T18:55:45Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T18:55:45Z"}, "message": "Use `utils::sugg` in `FOR_KV_MAP`", "tree": {"sha": "7fe0806a28271fe773ae2fcf894f776015d2602f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe0806a28271fe773ae2fcf894f776015d2602f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a45a2ab6b5fd9075b3488c32825a6686f532559", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdrziAAoJEF5CfHlMukXo/qkQAK4qC4ylK+JAMu+984dKp7Q9\nxR3zS+iDGFQz29x4BouD5GfSvtIzMnU9O9H3GzII/R3StJ6XB7yCph5zyq1Jde7y\nhHKz/XREDnRvedAwdtvMbxINFIZsU5L82F2cPlJy++Q9BGY+ocefeQqmd6v7HjX5\nHuU6m1CzPkKbtQuhEPVqcIP++GS3jHy+448YdXv6ud2vfAXHN4gCUGr/T59e+kSO\nv4hYTXCnoq0dqh4/S3qGSQjVzEiIou0sXIpX3Dt9aQ82dlCGLGZX9+1x7TxCvIas\nKDM2KIbw+SsIpLlOM47cmHoOJlQXI1bI8Vgtc/potYPX5BpzdVWfaZ1TrsZ0gXp8\n3rW+2I1Ac5um+Plj7q6IQ/N7S8q44/ITAABc+hIYAr8ZS111DjBxbmxhPCnE8CSJ\nBy9GpWHgvh3zZqsKE+02cnNVT7n5tRNH26+Pa/5dfqN1zVXsISJwhnVN7+CWP7O+\nZgmVgSlakcyD8EyfC85/8nh9+1l71d40qBkHVJO3RQEhKWaDnPed4HTILPL+qbKc\nPUNzIQpkQcM//ieLJx+7s6CAToKUuqZ1qBsb1TaUPtTwmJmKMzRJl3IuMDYwADXh\n88MduQpS2475EZ8+MYJf5tm0n1zfBjQiRSI+yWKqKmXavUoAmKRx61MCiYMoeNyL\nGM6huu5UWFWpuoEvmjQj\n=o1Mh\n-----END PGP SIGNATURE-----", "payload": "tree 7fe0806a28271fe773ae2fcf894f776015d2602f\nparent f6c9490e6527d204bd4a22273e01f76632460506\nauthor mcarton <cartonmartin+git@gmail.com> 1467399345 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467399345 +0200\n\nUse `utils::sugg` in `FOR_KV_MAP`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a45a2ab6b5fd9075b3488c32825a6686f532559", "html_url": "https://github.com/rust-lang/rust/commit/2a45a2ab6b5fd9075b3488c32825a6686f532559", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a45a2ab6b5fd9075b3488c32825a6686f532559/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6c9490e6527d204bd4a22273e01f76632460506", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c9490e6527d204bd4a22273e01f76632460506", "html_url": "https://github.com/rust-lang/rust/commit/f6c9490e6527d204bd4a22273e01f76632460506"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "a4e338053e27b003add995aafcd537020e36d6e1", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a45a2ab6b5fd9075b3488c32825a6686f532559/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a45a2ab6b5fd9075b3488c32825a6686f532559/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=2a45a2ab6b5fd9075b3488c32825a6686f532559", "patch": "@@ -596,33 +596,34 @@ fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, ex\n \n /// Check for the `FOR_KV_MAP` lint.\n fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n+    let pat_span = pat.span;\n+\n     if let PatKind::Tuple(ref pat, _) = pat.node {\n         if pat.len() == 2 {\n-            let (pat_span, kind) = match (&pat[0].node, &pat[1].node) {\n-                (key, _) if pat_is_wild(key, body) => (&pat[1].span, \"values\"),\n-                (_, value) if pat_is_wild(value, body) => (&pat[0].span, \"keys\"),\n+            let (new_pat_span, kind) = match (&pat[0].node, &pat[1].node) {\n+                (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\"),\n+                (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\"),\n                 _ => return,\n             };\n \n-            let arg_span = match arg.node {\n-                ExprAddrOf(MutImmutable, ref expr) => expr.span,\n+            let (arg_span, arg) = match arg.node {\n+                ExprAddrOf(MutImmutable, ref expr) => (arg.span, &**expr),\n                 ExprAddrOf(MutMutable, _) => return, // for _ in &mut _, there is no {values,keys}_mut method\n-                _ => arg.span,\n+                _ => (arg.span, arg),\n             };\n \n             let ty = walk_ptrs_ty(cx.tcx.expr_ty(arg));\n             if match_type(cx, ty, &paths::HASHMAP) || match_type(cx, ty, &paths::BTREEMAP) {\n                 span_lint_and_then(cx,\n                                    FOR_KV_MAP,\n                                    expr.span,\n-                                   &format!(\"you seem to want to iterate on a map's {}\", kind),\n+                                   &format!(\"you seem to want to iterate on a map's {}s\", kind),\n                                    |db| {\n-                    db.span_suggestion(expr.span,\n-                                       \"use the corresponding method\",\n-                                       format!(\"for {} in {}.{}() {{ .. }}\",\n-                                               snippet(cx, *pat_span, \"..\"),\n-                                               snippet(cx, arg_span, \"..\"),\n-                                               kind));\n+                    let map = sugg::Sugg::hir(cx, arg, \"map\");\n+                    multispan_sugg(db, \"use the corresponding method\".into(), &[\n+                        (pat_span, &snippet(cx, new_pat_span, kind)),\n+                        (arg_span, &format!(\"{}.{}s()\", map.maybe_par(), kind)),\n+                    ]);\n                 });\n             }\n         }"}, {"sha": "d95fad8fc0f0f0b0502c6217bb41bafec12a0fd2", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a45a2ab6b5fd9075b3488c32825a6686f532559/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a45a2ab6b5fd9075b3488c32825a6686f532559/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=2a45a2ab6b5fd9075b3488c32825a6686f532559", "patch": "@@ -149,7 +149,7 @@ impl LateLintPass for Transmute {\n                                     from_ty,\n                                     to_ty),\n                             |db| {\n-                                let arg = &sugg::Sugg::hir(cx, &args[0], \"..\");\n+                                let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n                                 let (deref, cast) = if to_rty.mutbl == Mutability::MutMutable {\n                                     (\"&mut *\", \"*mut\")\n                                 } else {"}, {"sha": "c2fd2c1a6b7bf49c7e1d471c77ee1e0e8c051fe7", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a45a2ab6b5fd9075b3488c32825a6686f532559/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a45a2ab6b5fd9075b3488c32825a6686f532559/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=2a45a2ab6b5fd9075b3488c32825a6686f532559", "patch": "@@ -121,7 +121,7 @@ impl<'a> Sugg<'a> {\n \n     /// Convenience method to create the `&<expr>` suggestion.\n     pub fn addr(self) -> Sugg<'static> {\n-        make_unop(\"&\", &self)\n+        make_unop(\"&\", self)\n     }\n \n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>` suggestion.\n@@ -131,6 +131,15 @@ impl<'a> Sugg<'a> {\n             ast::RangeLimits::Closed => make_assoc(AssocOp::DotDotDot, &self, &end),\n         }\n     }\n+\n+    /// Add parenthesis to any expression that might need them. Suitable to the `self` argument of\n+    /// a method call (eg. to build `bar.foo()` or `(1 + 2).foo()`).\n+    pub fn maybe_par(self) -> Self {\n+        match self {\n+            Sugg::NonParen(..) => self,\n+            Sugg::MaybeParen(sugg) | Sugg::BinOp(_, sugg) => Sugg::NonParen(format!(\"({})\", sugg).into()),\n+        }\n+    }\n }\n \n impl<'a, 'b> std::ops::Add<Sugg<'b>> for Sugg<'a> {\n@@ -150,7 +159,7 @@ impl<'a, 'b> std::ops::Sub<Sugg<'b>> for Sugg<'a> {\n impl<'a> std::ops::Not for Sugg<'a> {\n     type Output = Sugg<'static>;\n     fn not(self) -> Sugg<'static> {\n-        make_unop(\"!\", &self)\n+        make_unop(\"!\", self)\n     }\n }\n \n@@ -178,13 +187,12 @@ impl<T: std::fmt::Display> std::fmt::Display for ParenHelper<T> {\n     }\n }\n \n-/// Build the string for `<op> <expr>` adding parenthesis when necessary.\n+/// Build the string for `<op><expr>` adding parenthesis when necessary.\n ///\n /// For convenience, the operator is taken as a string because all unary operators have the same\n /// precedence.\n-pub fn make_unop(op: &str, expr: &Sugg) -> Sugg<'static> {\n-    let needs_paren = !matches!(*expr, Sugg::NonParen(..));\n-    Sugg::MaybeParen(format!(\"{}{}\", op, ParenHelper::new(needs_paren, expr)).into())\n+pub fn make_unop(op: &str, expr: Sugg) -> Sugg<'static> {\n+    Sugg::MaybeParen(format!(\"{}{}\", op, expr.maybe_par()).into())\n }\n \n /// Build the string for `<lhs> <op> <rhs>` adding parenthesis when necessary."}, {"sha": "bcb20be4ff462d715541b840c25b6cdd094ccc55", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a45a2ab6b5fd9075b3488c32825a6686f532559/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a45a2ab6b5fd9075b3488c32825a6686f532559/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=2a45a2ab6b5fd9075b3488c32825a6686f532559", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n \n use std::collections::*;\n+use std::rc::Rc;\n \n static STATIC: [usize; 4] = [ 0,  1,  8, 16 ];\n const CONST: [usize; 4] = [ 0,  1,  8, 16 ];\n@@ -388,8 +389,20 @@ fn main() {\n     for (_, v) in &m {\n         //~^ you seem to want to iterate on a map's values\n         //~| HELP use the corresponding method\n-        //~| SUGGESTION for v in m.values()\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for v in m.values() {\n+        let _v = v;\n+    }\n+\n+    let m : Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n+    for (_, v) in &*m {\n+        //~^ you seem to want to iterate on a map's values\n+        //~| HELP use the corresponding method\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for v in (*m).values() {\n         let _v = v;\n+        // Here the `*` is not actually necesarry, but the test tests that we don't suggest\n+        // `in *m.values()` as we used to\n     }\n \n     let mut m : HashMap<u64, u64> = HashMap::new();\n@@ -403,7 +416,8 @@ fn main() {\n     for (k, _value) in rm {\n         //~^ you seem to want to iterate on a map's keys\n         //~| HELP use the corresponding method\n-        //~| SUGGESTION for k in rm.keys()\n+        //~| HELP use the corresponding method\n+        //~| SUGGESTION for k in rm.keys() {\n         let _k = k;\n     }\n "}]}