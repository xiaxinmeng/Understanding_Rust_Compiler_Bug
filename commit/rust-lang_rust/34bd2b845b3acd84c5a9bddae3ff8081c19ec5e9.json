{"sha": "34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YmQyYjg0NWIzYWNkODRjNWE5YmRkYWUzZmY4MDgxYzE5ZWM1ZTk=", "commit": {"author": {"name": "John Heitmann", "email": "jheitmann@gmail.com", "date": "2018-12-27T05:23:05Z"}, "committer": {"name": "John Heitmann", "email": "jheitmann@gmail.com", "date": "2018-12-28T05:22:27Z"}, "message": "Simplify foreign type rendering.\n\nSimplified foreign type rendering by switching from tables to flexbox. Also, removed some seemingly extraneous elements like \u201cghost\u201d spans.\n\nReduces element count on std::iter::Iterator by 30%.", "tree": {"sha": "940845f1de40cbbc20fa23a23f4e8cef9243bf74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/940845f1de40cbbc20fa23a23f4e8cef9243bf74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "html_url": "https://github.com/rust-lang/rust/commit/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/comments", "author": {"login": "JohnHeitmann", "id": 4282480, "node_id": "MDQ6VXNlcjQyODI0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4282480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnHeitmann", "html_url": "https://github.com/JohnHeitmann", "followers_url": "https://api.github.com/users/JohnHeitmann/followers", "following_url": "https://api.github.com/users/JohnHeitmann/following{/other_user}", "gists_url": "https://api.github.com/users/JohnHeitmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnHeitmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnHeitmann/subscriptions", "organizations_url": "https://api.github.com/users/JohnHeitmann/orgs", "repos_url": "https://api.github.com/users/JohnHeitmann/repos", "events_url": "https://api.github.com/users/JohnHeitmann/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnHeitmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnHeitmann", "id": 4282480, "node_id": "MDQ6VXNlcjQyODI0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4282480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnHeitmann", "html_url": "https://github.com/JohnHeitmann", "followers_url": "https://api.github.com/users/JohnHeitmann/followers", "following_url": "https://api.github.com/users/JohnHeitmann/following{/other_user}", "gists_url": "https://api.github.com/users/JohnHeitmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnHeitmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnHeitmann/subscriptions", "organizations_url": "https://api.github.com/users/JohnHeitmann/orgs", "repos_url": "https://api.github.com/users/JohnHeitmann/repos", "events_url": "https://api.github.com/users/JohnHeitmann/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnHeitmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7", "html_url": "https://github.com/rust-lang/rust/commit/f8caa321c7c7214a6c5415e4b3694e65b4ff73a7"}], "stats": {"total": 188, "additions": 95, "deletions": 93}, "files": [{"sha": "f543568ec1f0ecac2542970d5f5d77f91f8d09b3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 19, "deletions": 51, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -3051,7 +3051,7 @@ fn item_trait(\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-        write!(w, \"{extra}<h3 id='{id}' class='method'><code id='{ns_id}'>\",\n+        write!(w, \"<h3 id='{id}' class='method'>{extra}<code id='{ns_id}'>\",\n                extra = render_spotlight_traits(m)?,\n                id = id,\n                ns_id = ns_id)?;\n@@ -3436,7 +3436,7 @@ fn item_union(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             let id = format!(\"{}.{}\", ItemType::StructField, name);\n             write!(w, \"<span id=\\\"{id}\\\" class=\\\"{shortty} small-section-header\\\">\\\n                            <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                           <span class='invisible'><code>{name}: {ty}</code></span>\\\n+                           <code>{name}: {ty}</code>\\\n                        </span>\",\n                    id = id,\n                    name = name,\n@@ -3991,8 +3991,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             None => \"impl\".to_string(),\n         });\n         if let Some(use_absolute) = use_absolute {\n-            write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n-                       <tbody><tr><td><code>\", id)?;\n+            write!(w, \"<h3 id='{}' class='impl'><code class='in-band'>\", id)?;\n             fmt_impl_for_trait_page(&i.inner_impl(), w, use_absolute)?;\n             if show_def_docs {\n                 for it in &i.inner_impl().items {\n@@ -4006,22 +4005,18 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             }\n             write!(w, \"</code>\")?;\n         } else {\n-            write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n-                       <tbody><tr><td><code>{}</code>\",\n-                   id, i.inner_impl())?;\n+            write!(w, \"<h3 id='{}' class='impl'><code class='in-band'>{}</code>\",\n+                id, i.inner_impl()\n+            )?;\n         }\n         write!(w, \"<a href='#{}' class='anchor'></a>\", id)?;\n-        write!(w, \"</td><td><span class='out-of-band'>\")?;\n         let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n+        render_stability_since_raw(w, since, outer_version)?;\n         if let Some(l) = (Item { item: &i.impl_item, cx: cx }).src_href() {\n-            write!(w, \"<div class='ghost'></div>\")?;\n-            render_stability_since_raw(w, since, outer_version)?;\n             write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n                    l, \"goto source code\")?;\n-        } else {\n-            render_stability_since_raw(w, since, outer_version)?;\n         }\n-        write!(w, \"</span></td></tr></tbody></table></span></h3>\")?;\n+        write!(w, \"</h3>\")?;\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             let mut ids = cx.id_map.borrow_mut();\n             write!(w, \"<div class='docblock'>{}</div>\",\n@@ -4057,20 +4052,15 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                     write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                     write!(w, \"{}\", spotlight_decl(decl)?)?;\n-                    write!(w, \"<table id='{}' class='table-display'><tbody><tr><td><code>\", ns_id)?;\n+                    write!(w, \"<code id='{}'>\", ns_id)?;\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl)?;\n                     write!(w, \"</code>\")?;\n+                    render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     if let Some(l) = (Item { cx, item }).src_href() {\n-                        write!(w, \"</td><td><span class='out-of-band'>\")?;\n-                        write!(w, \"<div class='ghost'></div>\")?;\n-                        render_stability_since_raw(w, item.stable_since(), outer_version)?;\n-                        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a></span>\",\n+                        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n                                l, \"goto source code\")?;\n-                    } else {\n-                        write!(w, \"</td><td>\")?;\n-                        render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     }\n-                    write!(w, \"</td></tr></tbody></table></h4>\")?;\n+                    write!(w, \"</h4>\")?;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n@@ -4082,40 +4072,18 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                 write!(w, \"</code></h4>\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n-                let mut version = String::new();\n-\n-                render_stability_since_raw(&mut version, item.stable_since(), outer_version)?;\n-\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n-                if !version.is_empty() {\n-                    write!(w, \"<table id='{}' class='table-display'><tbody><tr><td><code>\", ns_id)?;\n-                } else {\n-                    write!(w, \"<code id='{}'>\", ns_id)?;\n-                }\n+                write!(w, \"<code id='{}'>\", ns_id)?;\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n-                if !version.is_empty() {\n-                    write!(w, \"</code>\")?;\n-                }\n-                let src = if let Some(l) = (Item { cx, item }).src_href() {\n-                    if !version.is_empty() {\n-                        write!(w, \"</td><td><span class='out-of-band'>\")?;\n-                        write!(w, \"<div class='ghost'></div>{}\", version)?;\n-                    }\n-                    format!(\"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n-                            l, \"goto source code\")\n-                } else {\n-                    if !version.is_empty() {\n-                        write!(w, \"</td><td>{}\", version)?;\n-                    }\n-                    String::new()\n-                };\n-                if version.is_empty() {\n-                    write!(w, \"</code>{}</h4>\", src)?;\n-                } else {\n-                    write!(w, \"{}</span></td></tr></tbody></table></h4>\", src)?;\n+                write!(w, \"</code>\")?;\n+                render_stability_since_raw(w, item.stable_since(), outer_version)?;\n+                if let Some(l) = (Item { cx, item }).src_href() {\n+                    write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                            l, \"goto source code\")?;\n                 }\n+                write!(w, \"</h4>\")?;\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));"}, {"sha": "b376ab804126a087ba14226d2a4815625f327033", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -2409,8 +2409,17 @@ if (!DOMTokenList.prototype.remove) {\n             e.remove();\n         });\n         onEachLazy(main.childNodes, function(e) {\n+            // Unhide the actual content once loading is complete. Headers get\n+            // flex treatment for their horizontal layout, divs get block treatment\n+            // for vertical layout (column-oriented flex layout for divs caused\n+            // errors in mobile browsers).\n             if (e.tagName === \"H2\" || e.tagName === \"H3\") {\n-                e.nextElementSibling.style.display = \"block\";\n+                let nextTagName = e.nextElementSibling.tagName;\n+                if (nextTagName == \"H2\" || nextTagName == \"H3\") {\n+                    e.nextElementSibling.style.display = \"flex\";\n+                } else {\n+                    e.nextElementSibling.style.display = \"block\";\n+                }\n             }\n         });\n     }"}, {"sha": "9cb7963ad0071f8ae6449cc7ec73c1a9074ea6c6", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -90,8 +90,9 @@ h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.t\n \tborder-bottom: 1px solid;\n }\n h3.impl, h3.method, h4.method, h3.type, h4.type, h4.associatedconstant {\n+\tflex-basis: 100%;\n \tfont-weight: 600;\n-\tmargin-top: 10px;\n+\tmargin-top: 16px;\n \tmargin-bottom: 10px;\n \tposition: relative;\n }\n@@ -357,7 +358,8 @@ nav.sub {\n #main > .docblock h3, #main > .docblock h4, #main > .docblock h5 { font-size: 1em; }\n \n #main > h2 + div, #main > h2 + h3, #main > h3 + div {\n-\tdisplay: none;\n+\tdisplay: none; /* Changed to flex or block via js once the page is loaded */\n+\tflex-wrap: wrap;\n }\n \n .docblock h1 { font-size: 1em; }\n@@ -391,7 +393,7 @@ h4 > code, h3 > code, .invisible > code {\n }\n \n .in-band, code {\n-\tz-index: 5;\n+\tz-index: -5;\n }\n \n .invisible {\n@@ -535,6 +537,10 @@ h4 > code, h3 > code, .invisible > code {\n \tmargin-top: -8px;\n }\n \n+.impl-items {\n+\tflex-basis: 100%;\n+}\n+\n #main > .stability {\n \tmargin-top: 0;\n }\n@@ -781,6 +787,33 @@ body.blur > :not(#help) {\n \ttop: 0;\n }\n \n+.impl-items .since, .impl .since {\n+\tflex-grow: 0;\n+\tpadding-left: 12px;\n+\tpadding-right: 2px;\n+\tposition: initial;\n+}\n+\n+.impl-items .srclink, .impl .srclink {\n+\tflex-grow: 0;\n+\t/* Override header settings otherwise it's too bold */\n+\tfont-size: 17px;\n+\tfont-weight: normal;\n+}\n+\n+.impl-items code, .impl code {\n+\tflex-grow: 1;\n+}\n+\n+.impl-items h4, h4.impl, h3.impl {\n+\tdisplay: flex;\n+\tflex-basis: 100%;\n+\tfont-size: 16px;\n+\tmargin-bottom: 12px;\n+\t/* Push the src link out to the right edge consistently */\n+\tjustify-content: space-between;\n+}\n+\n .variants_table {\n \twidth: 100%;\n }\n@@ -868,15 +901,6 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tmargin-left: 20px;\n }\n \n-.ghost {\n-\tdisplay: none;\n-}\n-\n-.ghost + .since {\n-\tposition: initial;\n-\tdisplay: table-cell;\n-}\n-\n .since + .srclink {\n \tdisplay: table-cell;\n \tpadding-left: 10px;\n@@ -1116,7 +1140,7 @@ span.since {\n \tmargin-left: 5px;\n \ttop: -5px;\n \tleft: 105%;\n-\tz-index: 1;\n+\tz-index: 10;\n }\n \n .tooltip:hover .tooltiptext {\n@@ -1358,8 +1382,9 @@ h3.important {\n \tmargin-top: 16px;\n }\n \n-.content > .methods > div.important-traits {\n+.content > .methods > .method > div.important-traits {\n \tposition: absolute;\n+\tfont-weight: 400;\n \tleft: -42px;\n \tmargin-top: 2px;\n }"}, {"sha": "c561269cf9a856fab03feacda61a7ccb061fabb7", "filename": "src/test/rustdoc/assoc-consts-version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fassoc-consts-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fassoc-consts-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts-version.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -10,7 +10,7 @@\n pub struct SomeStruct;\n \n impl SomeStruct {\n-    // @has 'foo/struct.SomeStruct.html' '//*[@id=\"SOME_CONST.v\"]//div[@class=\"since\"]' '1.1.2'\n+    // @has 'foo/struct.SomeStruct.html' '//*[@id=\"associatedconstant.SOME_CONST\"]//div[@class=\"since\"]' '1.1.2'\n     #[stable(since=\"1.1.2\", feature=\"rust2\")]\n     pub const SOME_CONST: usize = 0;\n }"}, {"sha": "c33db5809cc7c5d685e47d439e66523f7d65a527", "filename": "src/test/rustdoc/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -3,7 +3,7 @@\n pub struct Foo;\n \n impl Foo {\n-    // @has const/struct.Foo.html '//*[@id=\"new.v\"]//code' 'const unsafe fn new'\n+    // @has const/struct.Foo.html '//code[@id=\"new.v\"]' 'const unsafe fn new'\n     pub const unsafe fn new() -> Foo {\n         Foo\n     }"}, {"sha": "55d8ee394385b50b4bc4c49c59784e0ef39bb6de", "filename": "src/test/rustdoc/issue-25001.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-25001.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -9,17 +9,17 @@ pub trait Bar {\n \n impl Foo<u8> {\n     // @has - '//*[@id=\"method.pass\"]//code' 'fn pass()'\n-    // @has - '//*[@id=\"pass.v\"]//code' 'fn pass()'\n+    // @has - '//code[@id=\"pass.v\"]' 'fn pass()'\n     pub fn pass() {}\n }\n impl Foo<u16> {\n     // @has - '//*[@id=\"method.pass-1\"]//code' 'fn pass() -> usize'\n-    // @has - '//*[@id=\"pass.v-1\"]//code' 'fn pass() -> usize'\n+    // @has - '//code[@id=\"pass.v-1\"]' 'fn pass() -> usize'\n     pub fn pass() -> usize { 42 }\n }\n impl Foo<u32> {\n     // @has - '//*[@id=\"method.pass-2\"]//code' 'fn pass() -> isize'\n-    // @has - '//*[@id=\"pass.v-2\"]//code' 'fn pass() -> isize'\n+    // @has - '//code[@id=\"pass.v-2\"]' 'fn pass() -> isize'\n     pub fn pass() -> isize { 42 }\n }\n "}, {"sha": "d9accf9c5998b355c6f139af54aa738fb8e44557", "filename": "src/test/rustdoc/issue-51236.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-51236.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -7,7 +7,7 @@ pub mod traits {\n }\n \n // @has issue_51236/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> Send for \\\n // Owned<T> where <T as Owned<'static>>::Reader: Send\"\n pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n     marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,"}, {"sha": "263b1eb0bd65aad1cbcbcf0130804d482c187088", "filename": "src/test/rustdoc/issue-54705.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-54705.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -3,10 +3,10 @@ pub trait ScopeHandle<'scope> {}\n \n \n // @has issue_54705/struct.ScopeFutureContents.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'scope, S> \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'scope, S> \\\n // Send for ScopeFutureContents<'scope, S> where S: Sync\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'scope, S> \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'scope, S> \\\n // Sync for ScopeFutureContents<'scope, S> where S: Sync\"\n pub struct ScopeFutureContents<'scope, S>\n     where S: ScopeHandle<'scope>,"}, {"sha": "257cb32c65c259261b177e7791dacadf6594ccbb", "filename": "src/test/rustdoc/issue-55321.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55321.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -1,16 +1,16 @@\n #![feature(optin_builtin_traits)]\n \n // @has issue_55321/struct.A.html\n-// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl !Send for A\"\n-// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl !Sync for A\"\n+// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//code' \"impl !Send for A\"\n+// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//code' \"impl !Sync for A\"\n pub struct A();\n \n impl !Send for A {}\n impl !Sync for A {}\n \n // @has issue_55321/struct.B.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> !Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n // B<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> !Sync for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> !Sync for \\\n // B<T>\"\n pub struct B<T: ?Sized>(A, Box<T>);"}, {"sha": "38aa797993b36435ee9f667fcef439d5b9eecbf2", "filename": "src/test/rustdoc/issue-56822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-56822.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -27,7 +27,7 @@ impl<'a, T> MyTrait for Inner<'a, T> {\n }\n \n // @has issue_56822/struct.Parser.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'a> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'a> Send for \\\n // Parser<'a>\"\n pub struct Parser<'a> {\n     field: <Wrapper<Inner<'a, u8>> as MyTrait>::Output"}, {"sha": "609cefc7115e2d19b8f8443d759d53f69d324b6c", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -20,7 +20,7 @@ mod foo {\n }\n \n // @has complex/struct.NotOuter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'a, T, K: \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'a, T, K: \\\n // ?Sized> Send for NotOuter<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n "}, {"sha": "6d0a68f9b0734eeaaf7c0f465e012d1593df9a5c", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -9,10 +9,10 @@ where\n {}\n \n // @has lifetimes/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Send \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'c, K> Send \\\n // for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Sync \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "413ba187f4556410a3267dd1b3b3bc168783d408", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -1,8 +1,8 @@\n // @has manual/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' 'impl<T> Sync for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' 'impl<T> Sync for \\\n // Foo<T> where T: Sync'\n //\n-// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//*/code' \\\n+// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//code' \\\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 1"}, {"sha": "30713849da221fd6bcf278778cbff88aa19d2658", "filename": "src/test/rustdoc/synthetic_auto/negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -3,10 +3,10 @@ pub struct Inner<T: Copy> {\n }\n \n // @has negative/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> !Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> !Send for \\\n // Outer<T>\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> \\\n // !Sync for Outer<T>\"\n pub struct Outer<T: Copy> {\n     inner_field: Inner<T>,"}, {"sha": "e710ce1c2ed95eb1c49a21da5a81d28ecabc9998", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -9,10 +9,10 @@ where\n }\n \n // @has nested/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' 'impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' 'impl<T> Send for \\\n // Foo<T> where T: Copy'\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \\\n // 'impl<T> Sync for Foo<T> where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,"}, {"sha": "cf173111ec1e27ebdab26114d4315721d1ccff01", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -9,7 +9,7 @@ where\n }\n \n // @has no_redundancy/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> Send for \\\n // Outer<T> where T: Copy + Send\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,"}, {"sha": "5346521f8d2e365cbffabda500186b9e781605fc", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -23,10 +23,10 @@ where\n }\n \n // @has project/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Send \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'c, K> Send \\\n // for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Sync \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "7d15434afe6dbb9cfd12fb50b768be211b1bcc83", "filename": "src/test/rustdoc/synthetic_auto/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -23,7 +23,7 @@ impl<T> Pattern for Wrapper<T> {\n \n \n // @has self_referential/struct.WriteAndThen.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<P1> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<P1> Send for \\\n // WriteAndThen<P1>  where  <P1 as Pattern>::Value: Send\"\n pub struct WriteAndThen<P1>(pub P1::Value,pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n     where P1: Pattern;"}, {"sha": "59493744b623d7155f82ad268e1939cb9eda97af", "filename": "src/test/rustdoc/synthetic_auto/static-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs?ref=34bd2b845b3acd84c5a9bddae3ff8081c19ec5e9", "patch": "@@ -3,7 +3,7 @@ pub trait OwnedTrait<'a> {\n }\n \n // @has static_region/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//code' \"impl<T> Send for \\\n // Owned<T> where <T as OwnedTrait<'static>>::Reader: Send\"\n pub struct Owned<T> where T: OwnedTrait<'static> {\n     marker: <T as OwnedTrait<'static>>::Reader,"}]}