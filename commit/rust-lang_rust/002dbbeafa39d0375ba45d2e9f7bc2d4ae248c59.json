{"sha": "002dbbeafa39d0375ba45d2e9f7bc2d4ae248c59", "node_id": "C_kwDOAAsO6NoAKDAwMmRiYmVhZmEzOWQwMzc1YmE0NWQyZTlmN2JjMmQ0YWUyNDhjNTk", "commit": {"author": {"name": "Lenko Donchev", "email": "lenko.donchev@gmail.com", "date": "2023-01-12T07:21:21Z"}, "committer": {"name": "Lenko Donchev", "email": "lenko.donchev@gmail.com", "date": "2023-01-23T01:24:52Z"}, "message": "Print why a test was ignored if it's the only test specified.", "tree": {"sha": "40b2105fa0b1aa3655173bb4dfa1fa6474f0927c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40b2105fa0b1aa3655173bb4dfa1fa6474f0927c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002dbbeafa39d0375ba45d2e9f7bc2d4ae248c59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002dbbeafa39d0375ba45d2e9f7bc2d4ae248c59", "html_url": "https://github.com/rust-lang/rust/commit/002dbbeafa39d0375ba45d2e9f7bc2d4ae248c59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002dbbeafa39d0375ba45d2e9f7bc2d4ae248c59/comments", "author": {"login": "lenko-d", "id": 1954225, "node_id": "MDQ6VXNlcjE5NTQyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1954225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lenko-d", "html_url": "https://github.com/lenko-d", "followers_url": "https://api.github.com/users/lenko-d/followers", "following_url": "https://api.github.com/users/lenko-d/following{/other_user}", "gists_url": "https://api.github.com/users/lenko-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/lenko-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lenko-d/subscriptions", "organizations_url": "https://api.github.com/users/lenko-d/orgs", "repos_url": "https://api.github.com/users/lenko-d/repos", "events_url": "https://api.github.com/users/lenko-d/events{/privacy}", "received_events_url": "https://api.github.com/users/lenko-d/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lenko-d", "id": 1954225, "node_id": "MDQ6VXNlcjE5NTQyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1954225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lenko-d", "html_url": "https://github.com/lenko-d", "followers_url": "https://api.github.com/users/lenko-d/followers", "following_url": "https://api.github.com/users/lenko-d/following{/other_user}", "gists_url": "https://api.github.com/users/lenko-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/lenko-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lenko-d/subscriptions", "organizations_url": "https://api.github.com/users/lenko-d/orgs", "repos_url": "https://api.github.com/users/lenko-d/repos", "events_url": "https://api.github.com/users/lenko-d/events{/privacy}", "received_events_url": "https://api.github.com/users/lenko-d/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5fa99eed20a46a88c0c85eed6552a94b6656634", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fa99eed20a46a88c0c85eed6552a94b6656634", "html_url": "https://github.com/rust-lang/rust/commit/a5fa99eed20a46a88c0c85eed6552a94b6656634"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "45fd87bea9bb5ac72437553c8c2de59c01741239", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 54, "deletions": 28, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/002dbbeafa39d0375ba45d2e9f7bc2d4ae248c59/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002dbbeafa39d0375ba45d2e9f7bc2d4ae248c59/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=002dbbeafa39d0375ba45d2e9f7bc2d4ae248c59", "patch": "@@ -926,7 +926,7 @@ pub fn make_test_description<R: Read>(\n     cfg: Option<&str>,\n ) -> test::TestDesc {\n     let mut ignore = false;\n-    let ignore_message = None;\n+    let mut ignore_message = None;\n     let mut should_fail = false;\n \n     let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n@@ -966,41 +966,67 @@ pub fn make_test_description<R: Read>(\n         if revision.is_some() && revision != cfg {\n             return;\n         }\n+        macro_rules! reason {\n+            ($e:expr) => {\n+                ignore |= match $e {\n+                    true => {\n+                        ignore_message = Some(stringify!($e));\n+                        true\n+                    }\n+                    false => ignore,\n+                }\n+            };\n+        }\n         ignore = match config.parse_cfg_name_directive(ln, \"ignore\") {\n-            ParsedNameDirective::Match => true,\n+            ParsedNameDirective::Match => {\n+                ignore_message = Some(\"cfg -> ignore => Match\");\n+                true\n+            }\n             ParsedNameDirective::NoMatch => ignore,\n         };\n+\n         if config.has_cfg_prefix(ln, \"only\") {\n             ignore = match config.parse_cfg_name_directive(ln, \"only\") {\n                 ParsedNameDirective::Match => ignore,\n-                ParsedNameDirective::NoMatch => true,\n+                ParsedNameDirective::NoMatch => {\n+                    ignore_message = Some(\"cfg -> only => NoMatch\");\n+                    true\n+                }\n             };\n         }\n-        ignore |= ignore_llvm(config, ln);\n-        ignore |=\n-            config.run_clang_based_tests_with.is_none() && config.parse_needs_matching_clang(ln);\n-        ignore |= !has_asm_support && config.parse_name_directive(ln, \"needs-asm-support\");\n-        ignore |= !rustc_has_profiler_support && config.parse_needs_profiler_support(ln);\n-        ignore |= !config.run_enabled() && config.parse_name_directive(ln, \"needs-run-enabled\");\n-        ignore |= !rustc_has_sanitizer_support\n-            && config.parse_name_directive(ln, \"needs-sanitizer-support\");\n-        ignore |= !has_asan && config.parse_name_directive(ln, \"needs-sanitizer-address\");\n-        ignore |= !has_cfi && config.parse_name_directive(ln, \"needs-sanitizer-cfi\");\n-        ignore |= !has_kcfi && config.parse_name_directive(ln, \"needs-sanitizer-kcfi\");\n-        ignore |= !has_lsan && config.parse_name_directive(ln, \"needs-sanitizer-leak\");\n-        ignore |= !has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\");\n-        ignore |= !has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\");\n-        ignore |= !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\");\n-        ignore |= !has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\");\n-        ignore |= !has_shadow_call_stack\n-            && config.parse_name_directive(ln, \"needs-sanitizer-shadow-call-stack\");\n-        ignore |= !config.can_unwind() && config.parse_name_directive(ln, \"needs-unwind\");\n-        ignore |= config.target == \"wasm32-unknown-unknown\"\n-            && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS);\n-        ignore |= config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln);\n-        ignore |= config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln);\n-        ignore |= config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln);\n-        ignore |= !has_rust_lld && config.parse_name_directive(ln, \"needs-rust-lld\");\n+\n+        reason!(ignore_llvm(config, ln));\n+        reason!(\n+            config.run_clang_based_tests_with.is_none() && config.parse_needs_matching_clang(ln)\n+        );\n+        reason!(!has_asm_support && config.parse_name_directive(ln, \"needs-asm-support\"));\n+        reason!(!rustc_has_profiler_support && config.parse_needs_profiler_support(ln));\n+        reason!(!config.run_enabled() && config.parse_name_directive(ln, \"needs-run-enabled\"));\n+        reason!(\n+            !rustc_has_sanitizer_support\n+                && config.parse_name_directive(ln, \"needs-sanitizer-support\")\n+        );\n+        reason!(!has_asan && config.parse_name_directive(ln, \"needs-sanitizer-address\"));\n+        reason!(!has_cfi && config.parse_name_directive(ln, \"needs-sanitizer-cfi\"));\n+        reason!(!has_kcfi && config.parse_name_directive(ln, \"needs-sanitizer-kcfi\"));\n+        reason!(!has_lsan && config.parse_name_directive(ln, \"needs-sanitizer-leak\"));\n+        reason!(!has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\"));\n+        reason!(!has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\"));\n+        reason!(!has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\"));\n+        reason!(!has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\"));\n+        reason!(\n+            !has_shadow_call_stack\n+                && config.parse_name_directive(ln, \"needs-sanitizer-shadow-call-stack\")\n+        );\n+        reason!(!config.can_unwind() && config.parse_name_directive(ln, \"needs-unwind\"));\n+        reason!(\n+            config.target == \"wasm32-unknown-unknown\"\n+                && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS)\n+        );\n+        reason!(config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln));\n+        reason!(config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln));\n+        reason!(config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln));\n+        reason!(!has_rust_lld && config.parse_name_directive(ln, \"needs-rust-lld\"));\n         should_fail |= config.parse_name_directive(ln, \"should-fail\");\n     });\n "}]}