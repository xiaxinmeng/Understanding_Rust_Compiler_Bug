{"sha": "c00f298fd26d4982e9fe092ee004facf9cef6906", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMGYyOThmZDI2ZDQ5ODJlOWZlMDkyZWUwMDRmYWNmOWNlZjY5MDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-12T19:07:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-12T19:07:47Z"}, "message": "add syntax-tree based indents", "tree": {"sha": "6d66bed9aa538f34ea40b988af43774c16df909c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d66bed9aa538f34ea40b988af43774c16df909c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00f298fd26d4982e9fe092ee004facf9cef6906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00f298fd26d4982e9fe092ee004facf9cef6906", "html_url": "https://github.com/rust-lang/rust/commit/c00f298fd26d4982e9fe092ee004facf9cef6906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00f298fd26d4982e9fe092ee004facf9cef6906/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "264a07975d23ad4d7cb41b309ba4a4c0a507a028", "url": "https://api.github.com/repos/rust-lang/rust/commits/264a07975d23ad4d7cb41b309ba4a4c0a507a028", "html_url": "https://github.com/rust-lang/rust/commit/264a07975d23ad4d7cb41b309ba4a4c0a507a028"}], "stats": {"total": 116, "additions": 103, "deletions": 13}, "files": [{"sha": "e270c5d60da3c9c7409824c0edcf9993fc2b8a11", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c00f298fd26d4982e9fe092ee004facf9cef6906/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00f298fd26d4982e9fe092ee004facf9cef6906/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=c00f298fd26d4982e9fe092ee004facf9cef6906", "patch": "@@ -138,6 +138,7 @@ impl AssistBuilder {\n \n     /// Replaces specified `node` of text with a given string, reindenting the\n     /// string to maintain `node`'s existing indent.\n+    // FIXME: remove in favor of ra_syntax::edit::IndentLevel::increase_indent\n     pub(crate) fn replace_node_and_indent(\n         &mut self,\n         node: &SyntaxNode,"}, {"sha": "e3f30b5defceca317a1f1f9a82c56702b2b08406", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c00f298fd26d4982e9fe092ee004facf9cef6906/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00f298fd26d4982e9fe092ee004facf9cef6906/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=c00f298fd26d4982e9fe092ee004facf9cef6906", "patch": "@@ -3,7 +3,7 @@\n use std::iter;\n \n use hir::{db::HirDatabase, Adt, HasSource};\n-use ra_syntax::ast::{self, make, AstNode, NameOwner};\n+use ra_syntax::ast::{self, edit::IndentLevel, make, AstNode, NameOwner};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -30,15 +30,19 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     let variant_list = enum_def.variant_list()?;\n \n     ctx.add_action(AssistId(\"fill_match_arms\"), \"fill match arms\", |edit| {\n-        let variants = variant_list.variants();\n-        let arms = variants\n-            .filter_map(build_pat)\n-            .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()));\n-        let new_arm_list = make::match_arm_list(arms);\n+        let indent_level = IndentLevel::from_node(match_arm_list.syntax());\n+\n+        let new_arm_list = {\n+            let variants = variant_list.variants();\n+            let arms = variants\n+                .filter_map(build_pat)\n+                .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()));\n+            indent_level.increase_indent(make::match_arm_list(arms))\n+        };\n \n         edit.target(match_expr.syntax().text_range());\n         edit.set_cursor(expr.syntax().text_range().start());\n-        edit.replace_node_and_indent(match_arm_list.syntax(), new_arm_list.syntax().text());\n+        edit.replace_ast(match_arm_list, new_arm_list);\n     });\n \n     ctx.build()"}, {"sha": "ea92284b833797e5c6591ccd80c30df48bef2149", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 85, "deletions": 6, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c00f298fd26d4982e9fe092ee004facf9cef6906/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00f298fd26d4982e9fe092ee004facf9cef6906/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=c00f298fd26d4982e9fe092ee004facf9cef6906", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     },\n     AstToken, Direction, InsertPosition, SmolStr, SyntaxElement,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n-    SyntaxNode, T,\n+    SyntaxNode, SyntaxToken, T,\n };\n \n impl ast::FnDef {\n@@ -231,12 +231,64 @@ pub fn replace_descendants<N: AstNode, D: AstNode>(\n     N::cast(new_syntax).unwrap()\n }\n \n-// Note this is copy-pasted from fmt. It seems like fmt should be a separate\n-// crate, but basic tree building should be this crate. However, tree building\n-// might want to call into fmt...\n+#[derive(Debug, Clone, Copy)]\n+pub struct IndentLevel(pub u8);\n+\n+impl From<u8> for IndentLevel {\n+    fn from(level: u8) -> IndentLevel {\n+        IndentLevel(level)\n+    }\n+}\n+\n+impl IndentLevel {\n+    pub fn from_node(node: &SyntaxNode) -> IndentLevel {\n+        let first_token = match node.first_token() {\n+            Some(it) => it,\n+            None => return IndentLevel(0),\n+        };\n+        for ws in prev_tokens(first_token).filter_map(ast::Whitespace::cast) {\n+            let text = ws.syntax().text();\n+            if let Some(pos) = text.rfind('\\n') {\n+                let level = text[pos + 1..].chars().count() / 4;\n+                return IndentLevel(level as u8);\n+            }\n+        }\n+        IndentLevel(0)\n+    }\n+\n+    pub fn increase_indent<N: AstNode>(self, node: N) -> N {\n+        N::cast(self._increase_indent(node.syntax().clone())).unwrap()\n+    }\n+\n+    fn _increase_indent(self, node: SyntaxNode) -> SyntaxNode {\n+        let replacements: FxHashMap<SyntaxElement, SyntaxElement> = node\n+            .descendants_with_tokens()\n+            .filter_map(|el| el.into_token())\n+            .filter_map(ast::Whitespace::cast)\n+            .filter(|ws| {\n+                let text = ws.syntax().text();\n+                text.contains('\\n')\n+            })\n+            .map(|ws| {\n+                (\n+                    ws.syntax().clone().into(),\n+                    make::tokens::whitespace(&format!(\n+                        \"{}{:width$}\",\n+                        ws.syntax().text(),\n+                        \"\",\n+                        width = self.0 as usize * 4\n+                    ))\n+                    .into(),\n+                )\n+            })\n+            .collect();\n+        algo::replace_descendants(&node, &replacements)\n+    }\n+}\n+\n+// FIXME: replace usages with IndentLevel above\n fn leading_indent(node: &SyntaxNode) -> Option<SmolStr> {\n-    let prev_tokens = std::iter::successors(node.first_token(), |token| token.prev_token());\n-    for token in prev_tokens {\n+    for token in prev_tokens(node.first_token()?) {\n         if let Some(ws) = ast::Whitespace::cast(token.clone()) {\n             let ws_text = ws.text();\n             if let Some(pos) = ws_text.rfind('\\n') {\n@@ -250,6 +302,10 @@ fn leading_indent(node: &SyntaxNode) -> Option<SmolStr> {\n     None\n }\n \n+fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n+    iter::successors(Some(token), |token| token.prev_token())\n+}\n+\n #[must_use]\n fn insert_children<N: AstNode>(\n     parent: &N,\n@@ -269,3 +325,26 @@ fn replace_children<N: AstNode>(\n     let new_syntax = algo::replace_children(parent.syntax(), to_replace, &mut to_insert);\n     N::cast(new_syntax).unwrap()\n }\n+\n+#[test]\n+fn test_increase_indent() {\n+    let arm_list = {\n+        let arm = make::match_arm(iter::once(make::placeholder_pat().into()), make::expr_unit());\n+        make::match_arm_list(vec![arm.clone(), arm].into_iter())\n+    };\n+    assert_eq!(\n+        arm_list.syntax().to_string(),\n+        \"{\n+    _ => (),\n+    _ => (),\n+}\"\n+    );\n+    let indented = IndentLevel(2).increase_indent(arm_list);\n+    assert_eq!(\n+        indented.syntax().to_string(),\n+        \"{\n+            _ => (),\n+            _ => (),\n+        }\"\n+    );\n+}"}, {"sha": "143835172afddf709724b625a40aa4d73bee8f52", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c00f298fd26d4982e9fe092ee004facf9cef6906/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00f298fd26d4982e9fe092ee004facf9cef6906/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=c00f298fd26d4982e9fe092ee004facf9cef6906", "patch": "@@ -160,6 +160,12 @@ pub mod tokens {\n             .unwrap()\n     }\n \n+    pub fn whitespace(text: &str) -> SyntaxToken {\n+        assert!(text.trim().is_empty());\n+        let sf = SourceFile::parse(text).ok().unwrap();\n+        sf.syntax().first_child_or_token().unwrap().into_token().unwrap()\n+    }\n+\n     pub fn single_newline() -> SyntaxToken {\n         SOURCE_FILE\n             .tree()"}]}