{"sha": "7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8", "node_id": "C_kwDOAAsO6NoAKDdiZmJhYTM4ODFmZTBhNmU0YTEyYjRmZjIxOTdlMDQ0Y2IwNWFmZjg", "commit": {"author": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-09-22T10:40:37Z"}, "committer": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-09-23T06:19:58Z"}, "message": "Detect panic strategy using `rustc --print cfg`\n\nInstead of relying on a command line parameter, detect if a target\nis able to unwind or not.\nIgnore tests that require unwinding on targets that don't support it.", "tree": {"sha": "3995133cdeadb412b3ca92354a931beb07c456a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3995133cdeadb412b3ca92354a931beb07c456a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8", "html_url": "https://github.com/rust-lang/rust/commit/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8/comments", "author": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9279c547c79ac840d4dd9cc40cc4e0219aabf2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9279c547c79ac840d4dd9cc40cc4e0219aabf2d4", "html_url": "https://github.com/rust-lang/rust/commit/9279c547c79ac840d4dd9cc40cc4e0219aabf2d4"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "4994fb9bbf9418e82e0470a23932aa582cf08f97", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8", "patch": "@@ -278,10 +278,6 @@ pub struct Config {\n     /// override this setting.\n     pub optimize_tests: bool,\n \n-    /// What panic strategy the target is built with.  Unwind supports Abort, but\n-    /// not vice versa.\n-    pub target_panic: PanicStrategy,\n-\n     /// Target system to be tested\n     pub target: String,\n \n@@ -426,6 +422,10 @@ impl Config {\n         *&self.target_cfg().pointer_width\n     }\n \n+    pub fn can_unwind(&self) -> bool {\n+        self.target_cfg().panic == PanicStrategy::Unwind\n+    }\n+\n     pub fn has_asm_support(&self) -> bool {\n         static ASM_SUPPORTED_ARCHS: &[&str] = &[\n             \"x86\", \"x86_64\", \"arm\", \"aarch64\", \"riscv32\",\n@@ -446,6 +446,7 @@ pub struct TargetCfg {\n     families: Vec<String>,\n     pointer_width: u32,\n     endian: Endian,\n+    panic: PanicStrategy,\n }\n \n #[derive(Eq, PartialEq, Clone, Debug)]\n@@ -481,6 +482,7 @@ impl TargetCfg {\n         let mut families = Vec::new();\n         let mut pointer_width = None;\n         let mut endian = None;\n+        let mut panic = None;\n         for line in print_cfg.lines() {\n             if let Some((name, value)) = line.split_once('=') {\n                 let value = value.trim_matches('\"');\n@@ -498,6 +500,13 @@ impl TargetCfg {\n                             s => panic!(\"unexpected {s}\"),\n                         })\n                     }\n+                    \"panic\" => {\n+                        panic = match value {\n+                            \"abort\" => Some(PanicStrategy::Abort),\n+                            \"unwind\" => Some(PanicStrategy::Unwind),\n+                            s => panic!(\"unexpected {s}\"),\n+                        }\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -510,6 +519,7 @@ impl TargetCfg {\n             families,\n             pointer_width: pointer_width.unwrap(),\n             endian: endian.unwrap(),\n+            panic: panic.unwrap(),\n         }\n     }\n }"}, {"sha": "6f85227500361e3a2f03c44c091bc5f83c287a37", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8", "patch": "@@ -7,7 +7,7 @@ use std::path::{Path, PathBuf};\n \n use tracing::*;\n \n-use crate::common::{CompareMode, Config, Debugger, FailMode, Mode, PanicStrategy, PassMode};\n+use crate::common::{CompareMode, Config, Debugger, FailMode, Mode, PassMode};\n use crate::util;\n use crate::{extract_cdb_version, extract_gdb_version};\n \n@@ -949,8 +949,7 @@ pub fn make_test_description<R: Read>(\n         ignore |= !has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\");\n         ignore |= !has_shadow_call_stack\n             && config.parse_name_directive(ln, \"needs-sanitizer-shadow-call-stack\");\n-        ignore |= config.target_panic == PanicStrategy::Abort\n-            && config.parse_name_directive(ln, \"needs-unwind\");\n+        ignore |= !config.can_unwind() && config.parse_name_directive(ln, \"needs-unwind\");\n         ignore |= config.target == \"wasm32-unknown-unknown\"\n             && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS);\n         ignore |= config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln);"}, {"sha": "dccfd4e0d9807c7a8a8277bfc0699fa1f4f9a8f9", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=7bfbaa3881fe0a6e4a12b4ff2197e044cb05aff8", "patch": "@@ -5,9 +5,7 @@\n \n extern crate test;\n \n-use crate::common::{\n-    expected_output_path, output_base_dir, output_relative_path, PanicStrategy, UI_EXTENSIONS,\n-};\n+use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n use crate::common::{CompareMode, Config, Debugger, Mode, PassMode, TestPaths};\n use crate::util::logv;\n use getopts::Options;\n@@ -105,7 +103,6 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .optmulti(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n         .optmulti(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n         .optflag(\"\", \"optimize-tests\", \"run tests with optimizations enabled\")\n-        .optopt(\"\", \"target-panic\", \"what panic strategy the target supports\", \"unwind | abort\")\n         .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n         .optflag(\n             \"\",\n@@ -258,11 +255,6 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         host_rustcflags: Some(matches.opt_strs(\"host-rustcflags\").join(\" \")),\n         target_rustcflags: Some(matches.opt_strs(\"target-rustcflags\").join(\" \")),\n         optimize_tests: matches.opt_present(\"optimize-tests\"),\n-        target_panic: match matches.opt_str(\"target-panic\").as_deref() {\n-            Some(\"unwind\") | None => PanicStrategy::Unwind,\n-            Some(\"abort\") => PanicStrategy::Abort,\n-            _ => panic!(\"unknown `--target-panic` option `{}` given\", mode),\n-        },\n         target,\n         host: opt_str2(matches.opt_str(\"host\")),\n         cdb,"}]}