{"sha": "032ea41e99b39f6af2aa26c0ba049d0d215d8ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMmVhNDFlOTliMzlmNmFmMmFhMjZjMGJhMDQ5ZDBkMjE1ZDhlYmI=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-06-13T17:22:38Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-07-27T17:58:51Z"}, "message": "book/ffi: nullable pointer, libc cleanups\n\nExpand the \"nullable pointer optimization\" section with a code example.\n\nChange examples to use std::os::raw instead of libc, when applicable.", "tree": {"sha": "9d7fea0346308076811c77460b860158fb5171d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d7fea0346308076811c77460b860158fb5171d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/032ea41e99b39f6af2aa26c0ba049d0d215d8ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/032ea41e99b39f6af2aa26c0ba049d0d215d8ebb", "html_url": "https://github.com/rust-lang/rust/commit/032ea41e99b39f6af2aa26c0ba049d0d215d8ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/032ea41e99b39f6af2aa26c0ba049d0d215d8ebb/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a373b8437b205cce01a19e7cdef17a50ff7ec84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a373b8437b205cce01a19e7cdef17a50ff7ec84a", "html_url": "https://github.com/rust-lang/rust/commit/a373b8437b205cce01a19e7cdef17a50ff7ec84a"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "873d078f053e4552d542ce327795d97f2c7a88ff", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/032ea41e99b39f6af2aa26c0ba049d0d215d8ebb/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/032ea41e99b39f6af2aa26c0ba049d0d215d8ebb/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=032ea41e99b39f6af2aa26c0ba049d0d215d8ebb", "patch": "@@ -461,12 +461,11 @@ global state. In order to access these variables, you declare them in `extern`\n blocks with the `static` keyword:\n \n ```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n+use std::os::raw::c_int;\n \n #[link(name = \"readline\")]\n extern {\n-    static rl_readline_version: libc::c_int;\n+    static rl_readline_version: c_int;\n }\n \n fn main() {\n@@ -480,15 +479,14 @@ interface. To do this, statics can be declared with `mut` so we can mutate\n them.\n \n ```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n \n use std::ffi::CString;\n+use std::os::raw::c_char;\n use std::ptr;\n \n #[link(name = \"readline\")]\n extern {\n-    static mut rl_prompt: *const libc::c_char;\n+    static mut rl_prompt: *const c_char;\n }\n \n fn main() {\n@@ -513,14 +511,13 @@ calling foreign functions. Some foreign functions, most notably the Windows API,\n conventions. Rust provides a way to tell the compiler which convention to use:\n \n ```rust\n-# #![feature(libc)]\n-extern crate libc;\n+use std::os::raw::c_int;\n \n #[cfg(all(target_os = \"win32\", target_arch = \"x86\"))]\n #[link(name = \"kernel32\")]\n #[allow(non_snake_case)]\n extern \"stdcall\" {\n-    fn SetEnvironmentVariableA(n: *const u8, v: *const u8) -> libc::c_int;\n+    fn SetEnvironmentVariableA(n: *const u8, v: *const u8) -> c_int;\n }\n # fn main() { }\n ```\n@@ -575,16 +572,45 @@ against `libc` and `libm` by default.\n \n # The \"nullable pointer optimization\"\n \n-Certain types are defined to not be NULL. This includes references (`&T`,\n-`&mut T`), boxes (`Box<T>`), and function pointers (`extern \"abi\" fn()`).\n-When interfacing with C, pointers that might be NULL are often used.\n-As a special case, a generic `enum` that contains exactly two variants, one of\n+Certain Rust types are defined to never be `null`. This includes references (`&T`,\n+`&mut T`), boxes (`Box<T>`), and function pointers (`extern \"abi\" fn()`). When\n+interfacing with C, pointers that might be `null` are often used, which would seem to\n+require some messy `transmute`s and/or unsafe code to handle conversions to/from Rust types.\n+However, the language provides a workaround.\n+\n+As a special case, an `enum` that contains exactly two variants, one of\n which contains no data and the other containing a single field, is eligible\n for the \"nullable pointer optimization\". When such an enum is instantiated\n-with one of the non-nullable types, it is represented as a single pointer,\n-and the non-data variant is represented as the NULL pointer. So\n-`Option<extern \"C\" fn(c_int) -> c_int>` is how one represents a nullable\n-function pointer using the C ABI.\n+with one of the non-nullable types listed above, it is represented as a single pointer,\n+and the non-data variant is represented as the null pointer. This is called an\n+\"optimization\", but unlike other optimizations it is guaranteed to apply to\n+eligible types.\n+\n+The most common type that takes advantage of the nullable pointer optimization is `Option<T>`,\n+where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way\n+to represent a nullable function pointer using the C ABI (corresponding to the C type\n+`int (*)(int)`). (However, generics are not required to get the optimization. A simple\n+`enum NullableIntRef { Int(Box<i32>), NotInt }` is also represented as a single pointer.)\n+\n+Here is an example:\n+\n+```rust\n+use std::os::raw::c_int;\n+\n+/// This fairly useless function receives a function pointer and an integer\n+/// from C, and returns the result of calling the function with the integer.\n+/// In case no function is provided, it squares the integer by default.\n+#[no_mangle]\n+pub extern fn apply(process: Option<extern \"C\" fn(c_int) -> c_int>, int: c_int) -> c_int {\n+    match process {\n+        Some(f) => unsafe { f(int) },\n+        None    => int * int\n+    }\n+}\n+# fn main() {}\n+```\n+\n+No `tranmsute` required!\n \n # Calling Rust code from C\n \n@@ -642,12 +668,11 @@ void bar(void *arg);\n We can represent this in Rust with the `c_void` type:\n \n ```rust\n-# #![feature(libc)]\n-extern crate libc;\n+use std::os::raw::c_void;\n \n extern \"C\" {\n-    pub fn foo(arg: *mut libc::c_void);\n-    pub fn bar(arg: *mut libc::c_void);\n+    pub fn foo(arg: *mut c_void);\n+    pub fn bar(arg: *mut c_void);\n }\n # fn main() {}\n ```"}]}