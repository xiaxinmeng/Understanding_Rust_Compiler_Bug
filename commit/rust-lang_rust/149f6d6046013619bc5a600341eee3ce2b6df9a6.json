{"sha": "149f6d6046013619bc5a600341eee3ce2b6df9a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OWY2ZDYwNDYwMTM2MTliYzVhNjAwMzQxZWVlM2NlMmI2ZGY5YTY=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-04-22T21:01:25Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-04-26T19:27:29Z"}, "message": "Implement mismatched_target_os lint", "tree": {"sha": "97e775a36af588842c64ef3f890bf4eaf38c6474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97e775a36af588842c64ef3f890bf4eaf38c6474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/149f6d6046013619bc5a600341eee3ce2b6df9a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/149f6d6046013619bc5a600341eee3ce2b6df9a6", "html_url": "https://github.com/rust-lang/rust/commit/149f6d6046013619bc5a600341eee3ce2b6df9a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/149f6d6046013619bc5a600341eee3ce2b6df9a6/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a6f3fc2c3300ee7ea165ff7da7c085f534b142", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a6f3fc2c3300ee7ea165ff7da7c085f534b142", "html_url": "https://github.com/rust-lang/rust/commit/87a6f3fc2c3300ee7ea165ff7da7c085f534b142"}], "stats": {"total": 335, "additions": 307, "deletions": 28}, "files": [{"sha": "847a8d86e177ddc1eb89b0cf5a1e2bb47c4002aa", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/149f6d6046013619bc5a600341eee3ce2b6df9a6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/149f6d6046013619bc5a600341eee3ce2b6df9a6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=149f6d6046013619bc5a600341eee3ce2b6df9a6", "patch": "@@ -1444,6 +1444,7 @@ Released 2018-09-13\n [`mem_replace_with_uninit`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_uninit\n [`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n+[`mismatched_target_os`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatched_target_os\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items"}, {"sha": "7cdc3aa0145ecfe881b2f5c86596c0919e10e8e1", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 130, "deletions": 27, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/149f6d6046013619bc5a600341eee3ce2b6df9a6/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f6d6046013619bc5a600341eee3ce2b6df9a6/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=149f6d6046013619bc5a600341eee3ce2b6df9a6", "patch": "@@ -20,6 +20,30 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n use semver::Version;\n \n+// NOTE: windows is excluded from the list because it's also a valid target family.\n+static OPERATING_SYSTEMS: &[&str] = &[\n+    \"android\",\n+    \"cloudabi\",\n+    \"dragonfly\",\n+    \"emscripten\",\n+    \"freebsd\",\n+    \"fuchsia\",\n+    \"haiku\",\n+    \"hermit\",\n+    \"illumos\",\n+    \"ios\",\n+    \"l4re\",\n+    \"linux\",\n+    \"macos\",\n+    \"netbsd\",\n+    \"none\",\n+    \"openbsd\",\n+    \"redox\",\n+    \"solaris\",\n+    \"vxworks\",\n+    \"wasi\",\n+];\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n     /// unless the annotated function is empty or simply panics.\n@@ -189,6 +213,38 @@ declare_clippy_lint! {\n     \"usage of `cfg_attr(rustfmt)` instead of tool attributes\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for cfg attributes having operating systems used in target family position.\n+    ///\n+    /// **Why is this bad?** The configuration option will not be recognised and the related item will not be included\n+    /// by the conditional compilation engine.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust\n+    /// #[cfg(linux)]\n+    /// fn conditional() { }\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// #[cfg(target_os = \"linux\")]\n+    /// fn conditional() { }\n+    /// ```\n+    ///\n+    /// Or:\n+    /// ```rust\n+    /// #[cfg(unix)]\n+    /// fn conditional() { }\n+    /// ```\n+    pub MISMATCHED_TARGET_OS,\n+    correctness,\n+    \"usage of `cfg(operating_system)` instead of `cfg(target_os = \\\"operating_system\\\")`\"\n+}\n+\n declare_lint_pass!(Attributes => [\n     INLINE_ALWAYS,\n     DEPRECATED_SEMVER,\n@@ -496,35 +552,82 @@ fn is_word(nmi: &NestedMetaItem, expected: Symbol) -> bool {\n     }\n }\n \n-declare_lint_pass!(DeprecatedCfgAttribute => [DEPRECATED_CFG_ATTR]);\n+declare_lint_pass!(EarlyAttributes => [DEPRECATED_CFG_ATTR, MISMATCHED_TARGET_OS]);\n \n-impl EarlyLintPass for DeprecatedCfgAttribute {\n+impl EarlyLintPass for EarlyAttributes {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &Attribute) {\n-        if_chain! {\n-            // check cfg_attr\n-            if attr.check_name(sym!(cfg_attr));\n-            if let Some(items) = attr.meta_item_list();\n-            if items.len() == 2;\n-            // check for `rustfmt`\n-            if let Some(feature_item) = items[0].meta_item();\n-            if feature_item.check_name(sym!(rustfmt));\n-            // check for `rustfmt_skip` and `rustfmt::skip`\n-            if let Some(skip_item) = &items[1].meta_item();\n-            if skip_item.check_name(sym!(rustfmt_skip)) ||\n-                skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym!(skip);\n-            // Only lint outer attributes, because custom inner attributes are unstable\n-            // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n-            if let AttrStyle::Outer = attr.style;\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    DEPRECATED_CFG_ATTR,\n-                    attr.span,\n-                    \"`cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\",\n-                    \"use\",\n-                    \"#[rustfmt::skip]\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n+        check_deprecated_cfg_attr(cx, attr);\n+        check_mismatched_target_os(cx, attr);\n+    }\n+}\n+\n+fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n+    if_chain! {\n+        // check cfg_attr\n+        if attr.check_name(sym!(cfg_attr));\n+        if let Some(items) = attr.meta_item_list();\n+        if items.len() == 2;\n+        // check for `rustfmt`\n+        if let Some(feature_item) = items[0].meta_item();\n+        if feature_item.check_name(sym!(rustfmt));\n+        // check for `rustfmt_skip` and `rustfmt::skip`\n+        if let Some(skip_item) = &items[1].meta_item();\n+        if skip_item.check_name(sym!(rustfmt_skip)) ||\n+            skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym!(skip);\n+        // Only lint outer attributes, because custom inner attributes are unstable\n+        // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n+        if let AttrStyle::Outer = attr.style;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                DEPRECATED_CFG_ATTR,\n+                attr.span,\n+                \"`cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\",\n+                \"use\",\n+                \"#[rustfmt::skip]\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n+    fn find_mismatched_target_os(items: &[NestedMetaItem]) -> Vec<(&str, Span)> {\n+        let mut mismatched = Vec::new();\n+        for item in items {\n+            if let NestedMetaItem::MetaItem(meta) = item {\n+                match &meta.kind {\n+                    MetaItemKind::List(list) => {\n+                        mismatched.extend(find_mismatched_target_os(&list));\n+                    },\n+                    MetaItemKind::Word => {\n+                        if let Some(ident) = meta.ident() {\n+                            let name = &*ident.name.as_str();\n+                            if let Some(os) = OPERATING_SYSTEMS.iter().find(|&&os| os == name) {\n+                                mismatched.push((os, ident.span));\n+                            }\n+                        }\n+                    },\n+                    _ => {},\n+                }\n+            }\n+        }\n+        mismatched\n+    }\n+\n+    if_chain! {\n+        if attr.check_name(sym!(cfg));\n+        if let Some(list) = attr.meta_item_list();\n+        then {\n+            let mismatched = find_mismatched_target_os(&list);\n+            for (os, span) in mismatched {\n+                let mess = format!(\"`{}` is not a valid target family\", os);\n+                let sugg = format!(\"target_os = \\\"{}\\\"\", os);\n+\n+                span_lint_and_then(cx, MISMATCHED_TARGET_OS, span, &mess, |diag| {\n+                    diag.span_suggestion(span, \"try\", sugg, Applicability::MaybeIncorrect);\n+                    diag.help(\"Did you mean `unix`?\");\n+                });\n             }\n         }\n     }"}, {"sha": "4daaf9a98208bda5da3e71d002c484268d1912c4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/149f6d6046013619bc5a600341eee3ce2b6df9a6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f6d6046013619bc5a600341eee3ce2b6df9a6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=149f6d6046013619bc5a600341eee3ce2b6df9a6", "patch": "@@ -350,7 +350,7 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, conf: &Co\n     store.register_pre_expansion_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n     });\n-    store.register_pre_expansion_pass(|| box attrs::DeprecatedCfgAttribute);\n+    store.register_pre_expansion_pass(|| box attrs::EarlyAttributes);\n     store.register_pre_expansion_pass(|| box dbg_macro::DbgMacro);\n }\n \n@@ -496,6 +496,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &attrs::DEPRECATED_SEMVER,\n         &attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n         &attrs::INLINE_ALWAYS,\n+        &attrs::MISMATCHED_TARGET_OS,\n         &attrs::UNKNOWN_CLIPPY_LINTS,\n         &attrs::USELESS_ATTRIBUTE,\n         &await_holding_lock::AWAIT_HOLDING_LOCK,\n@@ -1190,6 +1191,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n+        LintId::of(&attrs::MISMATCHED_TARGET_OS),\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n         LintId::of(&bit_mask::BAD_BIT_MASK),\n@@ -1610,6 +1612,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&approx_const::APPROX_CONSTANT),\n         LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n+        LintId::of(&attrs::MISMATCHED_TARGET_OS),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n         LintId::of(&bit_mask::BAD_BIT_MASK),\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),"}, {"sha": "c6c388ee9f086d8ddf06905fd3292874074a1290", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/149f6d6046013619bc5a600341eee3ce2b6df9a6/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f6d6046013619bc5a600341eee3ce2b6df9a6/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=149f6d6046013619bc5a600341eee3ce2b6df9a6", "patch": "@@ -1228,6 +1228,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"minmax\",\n     },\n+    Lint {\n+        name: \"mismatched_target_os\",\n+        group: \"correctness\",\n+        desc: \"usage of `cfg(operating_system)` instead of `cfg(target_os = \\\"operating_system\\\")`\",\n+        deprecation: None,\n+        module: \"attrs\",\n+    },\n     Lint {\n         name: \"misrefactored_assign_op\",\n         group: \"complexity\","}, {"sha": "b68b0e449e796d9b13516a0a1513e66e1d8bc621", "filename": "tests/ui/mismatched_target_os.fixed", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/149f6d6046013619bc5a600341eee3ce2b6df9a6/tests%2Fui%2Fmismatched_target_os.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/149f6d6046013619bc5a600341eee3ce2b6df9a6/tests%2Fui%2Fmismatched_target_os.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os.fixed?ref=149f6d6046013619bc5a600341eee3ce2b6df9a6", "patch": "@@ -0,0 +1,41 @@\n+// run-rustfix\n+\n+#![warn(clippy::mismatched_target_os)]\n+#![allow(unused)]\n+\n+#[cfg(target_os = \"linux\")]\n+fn linux() {}\n+\n+#[cfg(target_os = \"freebsd\")]\n+fn freebsd() {}\n+\n+#[cfg(target_os = \"dragonfly\")]\n+fn dragonfly() {}\n+\n+#[cfg(target_os = \"openbsd\")]\n+fn openbsd() {}\n+\n+#[cfg(target_os = \"netbsd\")]\n+fn netbsd() {}\n+\n+#[cfg(target_os = \"macos\")]\n+fn macos() {}\n+\n+#[cfg(target_os = \"ios\")]\n+fn ios() {}\n+\n+#[cfg(target_os = \"android\")]\n+fn android() {}\n+\n+#[cfg(all(not(any(windows, target_os = \"linux\")), target_os = \"freebsd\"))]\n+fn list() {}\n+\n+// windows is a valid target family, should be ignored\n+#[cfg(windows)]\n+fn windows() {}\n+\n+// correct use, should be ignored\n+#[cfg(target_os = \"freebsd\")]\n+fn freebsd() {}\n+\n+fn main() {}"}, {"sha": "deeb547e99a672860364790e84064e615f47fc46", "filename": "tests/ui/mismatched_target_os.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/149f6d6046013619bc5a600341eee3ce2b6df9a6/tests%2Fui%2Fmismatched_target_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f6d6046013619bc5a600341eee3ce2b6df9a6/tests%2Fui%2Fmismatched_target_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os.rs?ref=149f6d6046013619bc5a600341eee3ce2b6df9a6", "patch": "@@ -0,0 +1,41 @@\n+// run-rustfix\n+\n+#![warn(clippy::mismatched_target_os)]\n+#![allow(unused)]\n+\n+#[cfg(linux)]\n+fn linux() {}\n+\n+#[cfg(freebsd)]\n+fn freebsd() {}\n+\n+#[cfg(dragonfly)]\n+fn dragonfly() {}\n+\n+#[cfg(openbsd)]\n+fn openbsd() {}\n+\n+#[cfg(netbsd)]\n+fn netbsd() {}\n+\n+#[cfg(macos)]\n+fn macos() {}\n+\n+#[cfg(ios)]\n+fn ios() {}\n+\n+#[cfg(android)]\n+fn android() {}\n+\n+#[cfg(all(not(any(windows, linux)), freebsd))]\n+fn list() {}\n+\n+// windows is a valid target family, should be ignored\n+#[cfg(windows)]\n+fn windows() {}\n+\n+// correct use, should be ignored\n+#[cfg(target_os = \"freebsd\")]\n+fn freebsd() {}\n+\n+fn main() {}"}, {"sha": "bb14061dff94e16e7cbca20b4f662746a3b1ca49", "filename": "tests/ui/mismatched_target_os.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/149f6d6046013619bc5a600341eee3ce2b6df9a6/tests%2Fui%2Fmismatched_target_os.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/149f6d6046013619bc5a600341eee3ce2b6df9a6/tests%2Fui%2Fmismatched_target_os.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_target_os.stderr?ref=149f6d6046013619bc5a600341eee3ce2b6df9a6", "patch": "@@ -0,0 +1,83 @@\n+error: `linux` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:6:7\n+   |\n+LL | #[cfg(linux)]\n+   |       ^^^^^ help: try: `target_os = \"linux\"`\n+   |\n+   = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n+   = help: Did you mean `unix`?\n+\n+error: `freebsd` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:9:7\n+   |\n+LL | #[cfg(freebsd)]\n+   |       ^^^^^^^ help: try: `target_os = \"freebsd\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: `dragonfly` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:12:7\n+   |\n+LL | #[cfg(dragonfly)]\n+   |       ^^^^^^^^^ help: try: `target_os = \"dragonfly\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: `openbsd` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:15:7\n+   |\n+LL | #[cfg(openbsd)]\n+   |       ^^^^^^^ help: try: `target_os = \"openbsd\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: `netbsd` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:18:7\n+   |\n+LL | #[cfg(netbsd)]\n+   |       ^^^^^^ help: try: `target_os = \"netbsd\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: `macos` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:21:7\n+   |\n+LL | #[cfg(macos)]\n+   |       ^^^^^ help: try: `target_os = \"macos\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: `ios` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:24:7\n+   |\n+LL | #[cfg(ios)]\n+   |       ^^^ help: try: `target_os = \"ios\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: `android` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:27:7\n+   |\n+LL | #[cfg(android)]\n+   |       ^^^^^^^ help: try: `target_os = \"android\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: `linux` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:30:28\n+   |\n+LL | #[cfg(all(not(any(windows, linux)), freebsd))]\n+   |                            ^^^^^ help: try: `target_os = \"linux\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: `freebsd` is not a valid target family\n+  --> $DIR/mismatched_target_os.rs:30:37\n+   |\n+LL | #[cfg(all(not(any(windows, linux)), freebsd))]\n+   |                                     ^^^^^^^ help: try: `target_os = \"freebsd\"`\n+   |\n+   = help: Did you mean `unix`?\n+\n+error: aborting due to 10 previous errors\n+"}]}