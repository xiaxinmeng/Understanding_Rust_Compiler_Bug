{"sha": "c215c1927af2eee46e7c36a4fdd7e2871a3f18e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMTVjMTkyN2FmMmVlZTQ2ZTdjMzZhNGZkZDdlMjg3MWEzZjE4ZTI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-04T10:20:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-04T10:20:08Z"}, "message": "Rollup merge of #54761 - Lucretiel:patch-1, r=cramertj\n\nMake spec_extend use for_each()\n\n`for_each` will use an iterator's own implementation of `try_fold`, which I understand to be generally preferable (because nested iterator adapter's will use each other's `try_fold` and be designed for the specific adaptation in a way that promotes performance and inlining.", "tree": {"sha": "86cd6718d714a0f5788254d355a55f9e044c5eca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86cd6718d714a0f5788254d355a55f9e044c5eca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c215c1927af2eee46e7c36a4fdd7e2871a3f18e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbtelYCRBK7hj4Ov3rIwAAdHIIAF3ZKrl1QTHoJw+L4Y08j5gb\nPQiZ1umPw1Ku2/Q8ugrNrw/4CmA6MvEcIgepP6LLP4vs3WdWLRBuXROXlTEGXzjV\n0YiX1/pgutJS1rtQ3ABwf50EqBB+i4++nM44aJRxHnOgAHISVD3wZ3BYScsDkG24\nWfmYD78oH4h6tIBgXhBvZJx5FhP/9v48/kDptMQh4Qc15YghMTPpgNEI5XVx1SI3\niNdmizTyLMdV2uwijDbxgloZVI5imEnklGxG8NkWARKNfxljrc54+1QpV7TxITMN\nW1leapzXXQI/6JPk0IG+CIxIdOdK6DDH3/RzbaF0C4ZyJbiAiKaTQBtt/4G0yBg=\n=U8ZK\n-----END PGP SIGNATURE-----\n", "payload": "tree 86cd6718d714a0f5788254d355a55f9e044c5eca\nparent bc4f86909ea5e08a9114c70eef29942a4ea2c459\nparent ec59188025582fd91ab868206cfb3f3f05e27ade\nauthor Pietro Albini <pietro@pietroalbini.org> 1538648408 +0200\ncommitter GitHub <noreply@github.com> 1538648408 +0200\n\nRollup merge of #54761 - Lucretiel:patch-1, r=cramertj\n\nMake spec_extend use for_each()\n\n`for_each` will use an iterator's own implementation of `try_fold`, which I understand to be generally preferable (because nested iterator adapter's will use each other's `try_fold` and be designed for the specific adaptation in a way that promotes performance and inlining.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c215c1927af2eee46e7c36a4fdd7e2871a3f18e2", "html_url": "https://github.com/rust-lang/rust/commit/c215c1927af2eee46e7c36a4fdd7e2871a3f18e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c215c1927af2eee46e7c36a4fdd7e2871a3f18e2/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc4f86909ea5e08a9114c70eef29942a4ea2c459", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4f86909ea5e08a9114c70eef29942a4ea2c459", "html_url": "https://github.com/rust-lang/rust/commit/bc4f86909ea5e08a9114c70eef29942a4ea2c459"}, {"sha": "ec59188025582fd91ab868206cfb3f3f05e27ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec59188025582fd91ab868206cfb3f3f05e27ade", "html_url": "https://github.com/rust-lang/rust/commit/ec59188025582fd91ab868206cfb3f3f05e27ade"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "2bc037e3fee126343715212911c8b62e1d28867e", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c215c1927af2eee46e7c36a4fdd7e2871a3f18e2/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c215c1927af2eee46e7c36a4fdd7e2871a3f18e2/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=c215c1927af2eee46e7c36a4fdd7e2871a3f18e2", "patch": "@@ -1822,12 +1822,12 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n             unsafe {\n                 let mut ptr = self.as_mut_ptr().add(self.len());\n                 let mut local_len = SetLenOnDrop::new(&mut self.len);\n-                for element in iterator {\n+                iterator.for_each(move |element| {\n                     ptr::write(ptr, element);\n                     ptr = ptr.offset(1);\n                     // NB can't overflow since we would have had to alloc the address space\n                     local_len.increment_len(1);\n-                }\n+                });\n             }\n         } else {\n             self.extend_desugared(iterator)"}]}