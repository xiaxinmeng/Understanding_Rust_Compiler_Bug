{"sha": "7faae12311895b20b4dec47825708d15f3aaf034", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYWFlMTIzMTE4OTViMjBiNGRlYzQ3ODI1NzA4ZDE1ZjNhYWYwMzQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-16T16:29:55Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-16T16:29:55Z"}, "message": "Remove FnSig from FnDef type\n\nIt doesn't need to be in there since it's just information from the def. Another\nstep towards aligning Ty with Chalk's representation.", "tree": {"sha": "dc7298ec39809f520362a5c1fa1dc98ce63900f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7298ec39809f520362a5c1fa1dc98ce63900f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7faae12311895b20b4dec47825708d15f3aaf034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7faae12311895b20b4dec47825708d15f3aaf034", "html_url": "https://github.com/rust-lang/rust/commit/7faae12311895b20b4dec47825708d15f3aaf034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7faae12311895b20b4dec47825708d15f3aaf034/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ddaba905348897606948658798f9f46854acf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ddaba905348897606948658798f9f46854acf7", "html_url": "https://github.com/rust-lang/rust/commit/a9ddaba905348897606948658798f9f46854acf7"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "5ad9547f14805714b12fc70147af9af7f7ddb494", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7faae12311895b20b4dec47825708d15f3aaf034/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7faae12311895b20b4dec47825708d15f3aaf034/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=7faae12311895b20b4dec47825708d15f3aaf034", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     macros::MacroExpansion,\n     module_tree::ModuleTree,\n     nameres::{ItemMap, lower::{LoweredModule, ImportSourceMap}},\n-    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef},\n+    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig},\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap},\n     generics::{GenericParams, GenericDef},\n@@ -105,6 +105,9 @@ pub trait HirDatabase: PersistentHirDatabase {\n     #[salsa::invoke(crate::ty::type_for_field)]\n     fn type_for_field(&self, field: StructField) -> Ty;\n \n+    #[salsa::invoke(crate::ty::callable_item_sig)]\n+    fn callable_item_signature(&self, def: CallableDef) -> FnSig;\n+\n     #[salsa::invoke(crate::expr::body_with_source_map_query)]\n     fn body_with_source_map(\n         &self,"}, {"sha": "2ea3b341fc67bca4f524d38a3348ce453c09f948", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7faae12311895b20b4dec47825708d15f3aaf034/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7faae12311895b20b4dec47825708d15f3aaf034/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=7faae12311895b20b4dec47825708d15f3aaf034", "patch": "@@ -16,7 +16,7 @@ use std::{fmt, mem};\n \n use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase};\n \n-pub(crate) use lower::{TypableDef, CallableDef, type_for_def, type_for_field};\n+pub(crate) use lower::{TypableDef, CallableDef, type_for_def, type_for_field, callable_item_sig};\n pub(crate) use infer::{infer, InferenceResult, InferTy};\n use display::{HirDisplay, HirFormatter};\n \n@@ -77,8 +77,6 @@ pub enum Ty {\n     FnDef {\n         /// The definition of the function / constructor.\n         def: CallableDef,\n-        /// Parameters and return type\n-        sig: FnSig,\n         /// Substitutions for the generic parameters of the type\n         substs: Substs,\n     },\n@@ -189,11 +187,7 @@ impl Ty {\n                 }\n                 sig.ret().walk(f);\n             }\n-            Ty::FnDef { substs, sig, .. } => {\n-                for input in sig.params() {\n-                    input.walk(f);\n-                }\n-                sig.ret().walk(f);\n+            Ty::FnDef { substs, .. } => {\n                 for t in substs.0.iter() {\n                     t.walk(f);\n                 }\n@@ -232,8 +226,7 @@ impl Ty {\n             Ty::FnPtr(sig) => {\n                 sig.walk_mut(f);\n             }\n-            Ty::FnDef { substs, sig, .. } => {\n-                sig.walk_mut(f);\n+            Ty::FnDef { substs, .. } => {\n                 substs.walk_mut(f);\n             }\n             Ty::Adt { substs, .. } => {\n@@ -275,7 +268,7 @@ impl Ty {\n     pub fn apply_substs(self, substs: Substs) -> Ty {\n         match self {\n             Ty::Adt { def_id, .. } => Ty::Adt { def_id, substs },\n-            Ty::FnDef { def, sig, .. } => Ty::FnDef { def, sig, substs },\n+            Ty::FnDef { def, .. } => Ty::FnDef { def, substs },\n             _ => self,\n         }\n     }\n@@ -344,7 +337,8 @@ impl HirDisplay for Ty {\n                 f.write_joined(sig.params(), \", \")?;\n                 write!(f, \") -> {}\", sig.ret().display(f.db))?;\n             }\n-            Ty::FnDef { def, substs, sig, .. } => {\n+            Ty::FnDef { def, substs, .. } => {\n+                let sig = f.db.callable_item_signature(*def);\n                 let name = match def {\n                     CallableDef::Function(ff) => ff.name(f.db),\n                     CallableDef::Struct(s) => s.name(f.db).unwrap_or_else(Name::missing),"}, {"sha": "c9a5bc7a100aa00ca8df8bb802bf2f152786ca5b", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7faae12311895b20b4dec47825708d15f3aaf034/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7faae12311895b20b4dec47825708d15f3aaf034/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=7faae12311895b20b4dec47825708d15f3aaf034", "patch": "@@ -725,7 +725,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let (param_tys, ret_ty) = match &callee_ty {\n                     Ty::FnPtr(sig) => (sig.params().to_vec(), sig.ret().clone()),\n-                    Ty::FnDef { substs, sig, .. } => {\n+                    Ty::FnDef { substs, def, .. } => {\n+                        let sig = self.db.callable_item_signature(*def);\n                         let ret_ty = sig.ret().clone().subst(&substs);\n                         let param_tys =\n                             sig.params().iter().map(|ty| ty.clone().subst(&substs)).collect();\n@@ -768,7 +769,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             (Ty::Unknown, Vec::new(), sig.ret().clone())\n                         }\n                     }\n-                    Ty::FnDef { substs, sig, .. } => {\n+                    Ty::FnDef { substs, def, .. } => {\n+                        let sig = self.db.callable_item_signature(*def);\n                         let ret_ty = sig.ret().clone().subst(&substs);\n \n                         if !sig.params().is_empty() {"}, {"sha": "278f592d391ced3f48ec3d29e702110b332029be", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7faae12311895b20b4dec47825708d15f3aaf034/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7faae12311895b20b4dec47825708d15f3aaf034/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=7faae12311895b20b4dec47825708d15f3aaf034", "patch": "@@ -212,6 +212,15 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n     }\n }\n \n+/// Build the signature of a callable item (function, struct or enum variant).\n+pub(crate) fn callable_item_sig(db: &impl HirDatabase, def: CallableDef) -> FnSig {\n+    match def {\n+        CallableDef::Function(f) => fn_sig_for_fn(db, f),\n+        CallableDef::Struct(s) => fn_sig_for_struct_constructor(db, s),\n+        CallableDef::EnumVariant(e) => fn_sig_for_enum_variant_constructor(db, e),\n+    }\n+}\n+\n /// Build the type of a specific field of a struct or enum variant.\n pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n     let parent_def = field.parent_def(db);\n@@ -236,10 +245,9 @@ fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n /// Build the declared type of a function. This should not need to look at the\n /// function body.\n fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n-    let sig = fn_sig_for_fn(db, def);\n     let generics = def.generic_params(db);\n     let substs = make_substs(&generics);\n-    Ty::FnDef { def: def.into(), sig, substs }\n+    Ty::FnDef { def: def.into(), substs }\n }\n \n /// Build the declared type of a const.\n@@ -279,10 +287,9 @@ fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n     if var_data.fields().is_none() {\n         return type_for_struct(db, def); // Unit struct\n     }\n-    let sig = fn_sig_for_struct_constructor(db, def);\n     let generics = def.generic_params(db);\n     let substs = make_substs(&generics);\n-    Ty::FnDef { def: def.into(), sig, substs }\n+    Ty::FnDef { def: def.into(), substs }\n }\n \n fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> FnSig {\n@@ -308,10 +315,9 @@ fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) ->\n     if var_data.fields().is_none() {\n         return type_for_enum(db, def.parent_enum(db)); // Unit variant\n     }\n-    let sig = fn_sig_for_enum_variant_constructor(db, def);\n     let generics = def.parent_enum(db).generic_params(db);\n     let substs = make_substs(&generics);\n-    Ty::FnDef { def: def.into(), sig, substs }\n+    Ty::FnDef { def: def.into(), substs }\n }\n \n fn make_substs(generics: &GenericParams) -> Substs {"}]}