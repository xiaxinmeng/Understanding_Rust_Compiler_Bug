{"sha": "87c7e1542c386a06a5fb1de63c36df8b95088231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzdlMTU0MmMzODZhMDZhNWZiMWRlNjNjMzZkZjhiOTUwODgyMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-21T21:56:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-21T21:56:49Z"}, "message": "auto merge of #12362 : liigo/rust/update-rust-manual, r=alexcrichton\n\nchange `extern mod` to `extern crate`, `package id` to `crate id`, and some lines wrapping fix, etc.", "tree": {"sha": "168547577c025f043d9a337a52d883f7c9cc281a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168547577c025f043d9a337a52d883f7c9cc281a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c7e1542c386a06a5fb1de63c36df8b95088231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c7e1542c386a06a5fb1de63c36df8b95088231", "html_url": "https://github.com/rust-lang/rust/commit/87c7e1542c386a06a5fb1de63c36df8b95088231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c7e1542c386a06a5fb1de63c36df8b95088231/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d4bf851cd2997ea6193ed686d8586e81b94a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d4bf851cd2997ea6193ed686d8586e81b94a93", "html_url": "https://github.com/rust-lang/rust/commit/78d4bf851cd2997ea6193ed686d8586e81b94a93"}, {"sha": "4e9df9a656edd5bc42bc15cc21202e68aa7fbe1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9df9a656edd5bc42bc15cc21202e68aa7fbe1d", "html_url": "https://github.com/rust-lang/rust/commit/4e9df9a656edd5bc42bc15cc21202e68aa7fbe1d"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "47f26c93bd3c5c473e6099deea5c4645823eb294", "filename": "src/doc/rust.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87c7e1542c386a06a5fb1de63c36df8b95088231/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/87c7e1542c386a06a5fb1de63c36df8b95088231/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=87c7e1542c386a06a5fb1de63c36df8b95088231", "patch": "@@ -752,35 +752,35 @@ mod task {\n #### View items\n \n ~~~~ {.ebnf .gram}\n-view_item : extern_mod_decl | use_decl ;\n+view_item : extern_crate_decl | use_decl ;\n ~~~~\n \n A view item manages the namespace of a module.\n View items do not define new items, but rather, simply change other items' visibility.\n There are several kinds of view item:\n \n- * [`extern crate` declarations](#extern-mod-declarations)\n+ * [`extern crate` declarations](#extern-crate-declarations)\n  * [`use` declarations](#use-declarations)\n \n-##### Extern mod declarations\n+##### Extern crate declarations\n \n ~~~~ {.ebnf .gram}\n-extern_mod_decl : \"extern\" \"mod\" ident [ '(' link_attrs ')' ] ? [ '=' string_lit ] ? ;\n+extern_crate_decl : \"extern\" \"crate\" ident [ '(' link_attrs ')' ] ? [ '=' string_lit ] ? ;\n link_attrs : link_attr [ ',' link_attrs ] + ;\n link_attr : ident '=' literal ;\n ~~~~\n \n An _`extern crate` declaration_ specifies a dependency on an external crate.\n-The external crate is then bound into the declaring scope\n-as the `ident` provided in the `extern_mod_decl`.\n+The external crate is then bound into the declaring scope as the `ident` provided\n+in the `extern_crate_decl`.\n \n The external crate is resolved to a specific `soname` at compile time, and a\n runtime linkage requirement to that `soname` is passed to the linker for\n loading at runtime.  The `soname` is resolved at compile time by scanning the\n compiler's library path and matching the optional `crateid` provided as a string literal\n against the `crateid` attributes that were declared on the external crate when\n it was compiled.  If no `crateid` is provided, a default `name` attribute is\n-assumed, equal to the `ident` given in the `extern_mod_decl`.\n+assumed, equal to the `ident` given in the `extern_crate_decl`.\n \n Four examples of `extern crate` declarations:\n \n@@ -813,7 +813,7 @@ module item. These declarations may appear at the top of [modules](#modules) and\n \n *Note*: Unlike in many languages,\n `use` declarations in Rust do *not* declare linkage dependency with external crates.\n-Rather, [`extern crate` declarations](#extern-mod-declarations) declare linkage dependencies.\n+Rather, [`extern crate` declarations](#extern-crate-declarations) declare linkage dependencies.\n \n Use declarations support a number of convenient shortcuts:\n "}, {"sha": "6454e22b896a445eb8ab4d11207b728c0c346276", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/87c7e1542c386a06a5fb1de63c36df8b95088231/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/87c7e1542c386a06a5fb1de63c36df8b95088231/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=87c7e1542c386a06a5fb1de63c36df8b95088231", "patch": "@@ -495,8 +495,7 @@ reject the previous example if the arm with the wildcard pattern was\n omitted.\n \n A powerful application of pattern matching is *destructuring*:\n-matching in order to bind names to the contents of data\n-types.\n+matching in order to bind names to the contents of data types.\n \n > ***Note:*** The following code makes use of tuples (`(f64, f64)`) which\n > are explained in section 5.3. For now you can think of tuples as a list of\n@@ -2726,7 +2725,8 @@ pub mod barn {\n \n In short, `mod foo;` is just syntactic sugar for `mod foo { /* content of <...>/foo.rs or <...>/foo/mod.rs */ }`.\n \n-This also means that having two or more identical `mod foo;` declarations somewhere in your crate hierarchy is generally a bad idea,\n+This also means that having two or more identical `mod foo;` declarations\n+somewhere in your crate hierarchy is generally a bad idea,\n just like copy-and-paste-ing a module into multiple places is a bad idea.\n Both will result in duplicate and mutually incompatible definitions.\n \n@@ -3074,11 +3074,6 @@ fn main() {\n It's a bit weird, but it's the result of shadowing rules that have been set that way because\n they model most closely what people expect to shadow.\n \n-## Package ids\n-\n-If you use `extern crate`, per default `rustc` will look for libraries in the library search path (which you can\n-extend with the `-L` switch).\n-\n ## Crate metadata and settings\n \n For every crate you can define a number of metadata items, such as link name, version or author.\n@@ -3096,14 +3091,13 @@ Therefore, if you plan to compile your crate as a library, you should annotate i\n // `lib.rs`\n \n # #[crate_type = \"lib\"];\n-// Package ID\n #[crate_id = \"farm#2.5\"];\n \n // ...\n # fn farm() {}\n ~~~~\n \n-You can also specify package ID information in a `extern crate` statement.  For\n+You can also specify crate id information in a `extern crate` statement.  For\n example, these `extern crate` statements would both accept and select the\n crate define above:\n \n@@ -3161,7 +3155,7 @@ Now compile and run like this (adjust to your platform if necessary):\n Notice that the library produced contains the version in the file name\n as well as an inscrutable string of alphanumerics. As explained in the previous paragraph,\n these are both part of Rust's library versioning scheme. The alphanumerics are\n-a hash representing the crates package ID.\n+a hash representing the crates id.\n \n ## The standard library and the prelude\n \n@@ -3231,8 +3225,7 @@ library.  You can link to a library such as `extra` with an `extern crate extra;\n [extra library]: extra/index.html\n \n Right now `extra` contains those definitions directly, but in the future it will likely just\n-re-export a bunch of 'officially blessed' crates that get managed with a\n-package manager.\n+re-export a bunch of 'officially blessed' crates that get managed with a package manager.\n \n # What next?\n "}]}