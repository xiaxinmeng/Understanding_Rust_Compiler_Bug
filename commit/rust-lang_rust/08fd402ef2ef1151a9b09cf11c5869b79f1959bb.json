{"sha": "08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZmQ0MDJlZjJlZjExNTFhOWIwOWNmMTFjNTg2OWI3OWYxOTU5YmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-18T17:09:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-19T10:16:24Z"}, "message": "migrate mbe to the new rowan", "tree": {"sha": "a1172066c2a564d7b0024d23099248415a9fee16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1172066c2a564d7b0024d23099248415a9fee16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "html_url": "https://github.com/rust-lang/rust/commit/08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d402974aa0af6de290245a9d2a69a5d56c4fa610", "url": "https://api.github.com/repos/rust-lang/rust/commits/d402974aa0af6de290245a9d2a69a5d56c4fa610", "html_url": "https://github.com/rust-lang/rust/commit/d402974aa0af6de290245a9d2a69a5d56c4fa610"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "f185aecb7183926c7f6709fbdc58e8bdf2d09bfb", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "patch": "@@ -599,7 +599,8 @@ mod tests {\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let (definition_tt, _) =\n+            ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n         crate::MacroRules::parse(&definition_tt).unwrap()\n     }\n \n@@ -611,7 +612,8 @@ mod tests {\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let (invocation_tt, _) = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+        let (invocation_tt, _) =\n+            ast_to_token_tree(&macro_invocation.token_tree().unwrap()).unwrap();\n \n         expand_rule(&rules.rules[0], &invocation_tt)\n     }"}, {"sha": "954b84d9d7decdd6f3181b5ea9ecd06c12c6b98c", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "patch": "@@ -179,7 +179,8 @@ mod tests {\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-        let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let (definition_tt, _) =\n+            ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n         parse(&definition_tt)\n     }\n "}, {"sha": "64ed6a517dad07733614ee0fbd4eb9c7904ef247", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "patch": "@@ -2,7 +2,7 @@ use crate::subtree_source::SubtreeTokenSource;\n use crate::ExpandError;\n use ra_parser::{ParseError, TreeSink};\n use ra_syntax::{\n-    ast, AstNode, Parse, SmolStr, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxNode,\n+    ast, AstNode, AstToken, Parse, SmolStr, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxNode,\n     SyntaxTreeBuilder, TextRange, TextUnit, T,\n };\n use tt::buffer::{Cursor, TokenBuffer};\n@@ -116,8 +116,6 @@ impl TokenMap {\n /// and strips the ending `*/`\n /// And then quote the string, which is needed to convert to `tt::Literal`\n fn doc_comment_text(comment: &ast::Comment) -> SmolStr {\n-    use ast::AstToken;\n-\n     let prefix_len = comment.prefix().len();\n     let mut text = &comment.text()[prefix_len..];\n \n@@ -132,9 +130,8 @@ fn doc_comment_text(comment: &ast::Comment) -> SmolStr {\n     text.into()\n }\n \n-fn convert_doc_comment<'a>(token: &ra_syntax::SyntaxToken<'a>) -> Option<Vec<tt::TokenTree>> {\n-    use ast::AstToken;\n-    let comment = ast::Comment::cast(*token)?;\n+fn convert_doc_comment(token: &ra_syntax::SyntaxToken) -> Option<Vec<tt::TokenTree>> {\n+    let comment = ast::Comment::cast(token.clone())?;\n     let doc = comment.kind().doc?;\n \n     // Make `doc=\"\\\" Comments\\\"\"\n@@ -245,7 +242,7 @@ fn convert_tt(\n                 }\n             }\n             SyntaxElement::Node(node) => {\n-                let child = convert_tt(token_map, global_offset, node)?.into();\n+                let child = convert_tt(token_map, global_offset, &node)?.into();\n                 token_trees.push(child);\n             }\n         };"}, {"sha": "38a31109d9f97b3bed3cc18241463ee0323b38fa", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fd402ef2ef1151a9b09cf11c5869b79f1959bb/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=08fd402ef2ef1151a9b09cf11c5869b79f1959bb", "patch": "@@ -37,8 +37,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n     let macro_invocation =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-    let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n-    let (invocation_tt, _) = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+    let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n+    let (invocation_tt, _) = ast_to_token_tree(&macro_invocation.token_tree().unwrap()).unwrap();\n     let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n     let expansion = rules.expand(&invocation_tt).unwrap();\n     assert_eq!(\n@@ -53,7 +53,7 @@ pub(crate) fn create_rules(macro_definition: &str) -> MacroRules {\n     let macro_definition =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-    let (definition_tt, _) = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+    let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n     crate::MacroRules::parse(&definition_tt).unwrap()\n }\n \n@@ -62,42 +62,33 @@ pub(crate) fn expand(rules: &MacroRules, invocation: &str) -> tt::Subtree {\n     let macro_invocation =\n         source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n \n-    let (invocation_tt, _) = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+    let (invocation_tt, _) = ast_to_token_tree(&macro_invocation.token_tree().unwrap()).unwrap();\n \n     rules.expand(&invocation_tt).unwrap()\n }\n \n-pub(crate) fn expand_to_items(\n-    rules: &MacroRules,\n-    invocation: &str,\n-) -> ra_syntax::TreeArc<ast::MacroItems> {\n+pub(crate) fn expand_to_items(rules: &MacroRules, invocation: &str) -> ast::MacroItems {\n     let expanded = expand(rules, invocation);\n-    token_tree_to_macro_items(&expanded).unwrap().tree().to_owned()\n+    token_tree_to_macro_items(&expanded).unwrap().tree()\n }\n \n #[allow(unused)]\n-pub(crate) fn expand_to_stmts(\n-    rules: &MacroRules,\n-    invocation: &str,\n-) -> ra_syntax::TreeArc<ast::MacroStmts> {\n+pub(crate) fn expand_to_stmts(rules: &MacroRules, invocation: &str) -> ast::MacroStmts {\n     let expanded = expand(rules, invocation);\n-    token_tree_to_macro_stmts(&expanded).unwrap().tree().to_owned()\n+    token_tree_to_macro_stmts(&expanded).unwrap().tree()\n }\n \n-pub(crate) fn expand_to_expr(\n-    rules: &MacroRules,\n-    invocation: &str,\n-) -> ra_syntax::TreeArc<ast::Expr> {\n+pub(crate) fn expand_to_expr(rules: &MacroRules, invocation: &str) -> ast::Expr {\n     let expanded = expand(rules, invocation);\n-    token_tree_to_expr(&expanded).unwrap().tree().to_owned()\n+    token_tree_to_expr(&expanded).unwrap().tree()\n }\n \n pub(crate) fn text_to_tokentree(text: &str) -> tt::Subtree {\n     // wrap the given text to a macro call\n     let wrapped = format!(\"wrap_macro!( {} )\", text);\n     let wrapped = ast::SourceFile::parse(&wrapped);\n     let wrapped = wrapped.tree().syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n-    let mut wrapped = ast_to_token_tree(wrapped).unwrap().0;\n+    let mut wrapped = ast_to_token_tree(&wrapped).unwrap().0;\n     wrapped.delimiter = tt::Delimiter::None;\n \n     wrapped\n@@ -164,8 +155,8 @@ pub(crate) fn assert_expansion(\n \n     let (expanded_tree, expected_tree) = match kind {\n         MacroKind::Items => {\n-            let expanded_tree = token_tree_to_macro_items(&expanded).unwrap().tree().to_owned();\n-            let expected_tree = token_tree_to_macro_items(&expected).unwrap().tree().to_owned();\n+            let expanded_tree = token_tree_to_macro_items(&expanded).unwrap().tree();\n+            let expected_tree = token_tree_to_macro_items(&expected).unwrap().tree();\n \n             (\n                 debug_dump_ignore_spaces(expanded_tree.syntax()).trim().to_string(),\n@@ -174,8 +165,8 @@ pub(crate) fn assert_expansion(\n         }\n \n         MacroKind::Stmts => {\n-            let expanded_tree = token_tree_to_macro_stmts(&expanded).unwrap().tree().to_owned();\n-            let expected_tree = token_tree_to_macro_stmts(&expected).unwrap().tree().to_owned();\n+            let expanded_tree = token_tree_to_macro_stmts(&expanded).unwrap().tree();\n+            let expected_tree = token_tree_to_macro_stmts(&expected).unwrap().tree();\n \n             (\n                 debug_dump_ignore_spaces(expanded_tree.syntax()).trim().to_string(),\n@@ -419,7 +410,7 @@ fn test_expand_to_item_list() {\n             \",\n     );\n     let expansion = expand(&rules, \"structs!(Foo, Bar);\");\n-    let tree = token_tree_to_macro_items(&expansion).unwrap().tree().to_owned();\n+    let tree = token_tree_to_macro_items(&expansion).unwrap().tree();\n     assert_eq!(\n         tree.syntax().debug_dump().trim(),\n         r#\"\n@@ -537,7 +528,7 @@ fn test_tt_to_stmts() {\n     );\n \n     let expanded = expand(&rules, \"foo!{}\");\n-    let stmts = token_tree_to_macro_stmts(&expanded).unwrap().tree().to_owned();\n+    let stmts = token_tree_to_macro_stmts(&expanded).unwrap().tree();\n \n     assert_eq!(\n         stmts.syntax().debug_dump().trim(),"}]}