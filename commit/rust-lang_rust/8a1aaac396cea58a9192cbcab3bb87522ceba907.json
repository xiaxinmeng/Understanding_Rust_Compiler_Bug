{"sha": "8a1aaac396cea58a9192cbcab3bb87522ceba907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMWFhYWMzOTZjZWE1OGE5MTkyY2JjYWIzYmI4NzUyMmNlYmE5MDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-13T04:35:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-05-15T01:29:12Z"}, "message": "liblog: Remove all uses of `~str` from `liblog`", "tree": {"sha": "55a9d75f4fa2855490c767e9dec5ab967e3896b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a9d75f4fa2855490c767e9dec5ab967e3896b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1aaac396cea58a9192cbcab3bb87522ceba907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1aaac396cea58a9192cbcab3bb87522ceba907", "html_url": "https://github.com/rust-lang/rust/commit/8a1aaac396cea58a9192cbcab3bb87522ceba907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1aaac396cea58a9192cbcab3bb87522ceba907/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e786a745b5e7476b898b248055577ded9d09de7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e786a745b5e7476b898b248055577ded9d09de7a", "html_url": "https://github.com/rust-lang/rust/commit/e786a745b5e7476b898b248055577ded9d09de7a"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "a5bcb7463029be932df0936003a12a6afc299c50", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a1aaac396cea58a9192cbcab3bb87522ceba907/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1aaac396cea58a9192cbcab3bb87522ceba907/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=8a1aaac396cea58a9192cbcab3bb87522ceba907", "patch": "@@ -13,7 +13,7 @@ use std::cmp;\n \n #[deriving(Show, Clone)]\n pub struct LogDirective {\n-    pub name: Option<~str>,\n+    pub name: Option<StrBuf>,\n     pub level: u32,\n }\n \n@@ -64,7 +64,7 @@ pub fn parse_logging_spec(spec: &str) -> Vec<LogDirective> {\n             }\n         };\n         dirs.push(LogDirective {\n-            name: name.map(|s| s.to_owned()),\n+            name: name.map(|s| s.to_strbuf()),\n             level: log_level,\n         });\n     }\n@@ -80,13 +80,13 @@ mod tests {\n         let dirs = parse_logging_spec(\"crate1::mod1=1,crate1::mod2,crate2=4\");\n         let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 3);\n-        assert_eq!(dirs[0].name, Some(\"crate1::mod1\".to_owned()));\n+        assert_eq!(dirs[0].name, Some(\"crate1::mod1\".to_strbuf()));\n         assert_eq!(dirs[0].level, 1);\n \n-        assert_eq!(dirs[1].name, Some(\"crate1::mod2\".to_owned()));\n+        assert_eq!(dirs[1].name, Some(\"crate1::mod2\".to_strbuf()));\n         assert_eq!(dirs[1].level, ::MAX_LOG_LEVEL);\n \n-        assert_eq!(dirs[2].name, Some(\"crate2\".to_owned()));\n+        assert_eq!(dirs[2].name, Some(\"crate2\".to_strbuf()));\n         assert_eq!(dirs[2].level, 4);\n     }\n \n@@ -96,7 +96,7 @@ mod tests {\n         let dirs = parse_logging_spec(\"crate1::mod1=1=2,crate2=4\");\n         let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n+        assert_eq!(dirs[0].name, Some(\"crate2\".to_strbuf()));\n         assert_eq!(dirs[0].level, 4);\n     }\n \n@@ -106,7 +106,7 @@ mod tests {\n         let dirs = parse_logging_spec(\"crate1::mod1=noNumber,crate2=4\");\n         let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n+        assert_eq!(dirs[0].name, Some(\"crate2\".to_strbuf()));\n         assert_eq!(dirs[0].level, 4);\n     }\n \n@@ -116,7 +116,7 @@ mod tests {\n         let dirs = parse_logging_spec(\"crate1::mod1=wrong,crate2=warn\");\n         let dirs = dirs.as_slice();\n         assert_eq!(dirs.len(), 1);\n-        assert_eq!(dirs[0].name, Some(\"crate2\".to_owned()));\n+        assert_eq!(dirs[0].name, Some(\"crate2\".to_strbuf()));\n         assert_eq!(dirs[0].level, ::WARN);\n     }\n \n@@ -128,7 +128,7 @@ mod tests {\n         assert_eq!(dirs.len(), 2);\n         assert_eq!(dirs[0].name, None);\n         assert_eq!(dirs[0].level, 2);\n-        assert_eq!(dirs[1].name, Some(\"crate2\".to_owned()));\n+        assert_eq!(dirs[1].name, Some(\"crate2\".to_strbuf()));\n         assert_eq!(dirs[1].level, 4);\n     }\n }"}, {"sha": "9dd87a38fb63af5d139884bc4537216118ba7359", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8a1aaac396cea58a9192cbcab3bb87522ceba907/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1aaac396cea58a9192cbcab3bb87522ceba907/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=8a1aaac396cea58a9192cbcab3bb87522ceba907", "patch": "@@ -307,7 +307,7 @@ fn enabled(level: u32, module: &str,\n     // Search for the longest match, the vector is assumed to be pre-sorted.\n     for directive in iter.rev() {\n         match directive.name {\n-            Some(ref name) if !module.starts_with(*name) => {},\n+            Some(ref name) if !module.starts_with(name.as_slice()) => {},\n             Some(..) | None => {\n                 return level <= directive.level\n             }\n@@ -362,8 +362,16 @@ mod tests {\n \n     #[test]\n     fn match_full_path() {\n-        let dirs = [LogDirective { name: Some(\"crate2\".to_owned()), level: 3 },\n-                    LogDirective { name: Some(\"crate1::mod1\".to_owned()), level: 2 }];\n+        let dirs = [\n+            LogDirective {\n+                name: Some(\"crate2\".to_strbuf()),\n+                level: 3\n+            },\n+            LogDirective {\n+                name: Some(\"crate1::mod1\".to_strbuf()),\n+                level: 2\n+            }\n+        ];\n         assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n         assert!(!enabled(3, \"crate1::mod1\", dirs.iter()));\n         assert!(enabled(3, \"crate2\", dirs.iter()));\n@@ -372,39 +380,49 @@ mod tests {\n \n     #[test]\n     fn no_match() {\n-        let dirs = [LogDirective { name: Some(\"crate2\".to_owned()), level: 3 },\n-                    LogDirective { name: Some(\"crate1::mod1\".to_owned()), level: 2 }];\n+        let dirs = [\n+            LogDirective { name: Some(\"crate2\".to_strbuf()), level: 3 },\n+            LogDirective { name: Some(\"crate1::mod1\".to_strbuf()), level: 2 }\n+        ];\n         assert!(!enabled(2, \"crate3\", dirs.iter()));\n     }\n \n     #[test]\n     fn match_beginning() {\n-        let dirs = [LogDirective { name: Some(\"crate2\".to_owned()), level: 3 },\n-                    LogDirective { name: Some(\"crate1::mod1\".to_owned()), level: 2 }];\n+        let dirs = [\n+            LogDirective { name: Some(\"crate2\".to_strbuf()), level: 3 },\n+            LogDirective { name: Some(\"crate1::mod1\".to_strbuf()), level: 2 }\n+        ];\n         assert!(enabled(3, \"crate2::mod1\", dirs.iter()));\n     }\n \n     #[test]\n     fn match_beginning_longest_match() {\n-        let dirs = [LogDirective { name: Some(\"crate2\".to_owned()), level: 3 },\n-                    LogDirective { name: Some(\"crate2::mod\".to_owned()), level: 4 },\n-                    LogDirective { name: Some(\"crate1::mod1\".to_owned()), level: 2 }];\n+        let dirs = [\n+            LogDirective { name: Some(\"crate2\".to_strbuf()), level: 3 },\n+            LogDirective { name: Some(\"crate2::mod\".to_strbuf()), level: 4 },\n+            LogDirective { name: Some(\"crate1::mod1\".to_strbuf()), level: 2 }\n+        ];\n         assert!(enabled(4, \"crate2::mod1\", dirs.iter()));\n         assert!(!enabled(4, \"crate2\", dirs.iter()));\n     }\n \n     #[test]\n     fn match_default() {\n-        let dirs = [LogDirective { name: None, level: 3 },\n-                    LogDirective { name: Some(\"crate1::mod1\".to_owned()), level: 2 }];\n+        let dirs = [\n+            LogDirective { name: None, level: 3 },\n+            LogDirective { name: Some(\"crate1::mod1\".to_strbuf()), level: 2 }\n+        ];\n         assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n         assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n     }\n \n     #[test]\n     fn zero_level() {\n-        let dirs = [LogDirective { name: None, level: 3 },\n-                    LogDirective { name: Some(\"crate1::mod1\".to_owned()), level: 0 }];\n+        let dirs = [\n+            LogDirective { name: None, level: 3 },\n+            LogDirective { name: Some(\"crate1::mod1\".to_strbuf()), level: 0 }\n+        ];\n         assert!(!enabled(1, \"crate1::mod1\", dirs.iter()));\n         assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n     }"}]}