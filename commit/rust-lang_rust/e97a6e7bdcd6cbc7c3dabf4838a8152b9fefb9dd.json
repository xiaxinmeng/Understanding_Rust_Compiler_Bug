{"sha": "e97a6e7bdcd6cbc7c3dabf4838a8152b9fefb9dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5N2E2ZTdiZGNkNmNiYzdjM2RhYmY0ODM4YTgxNTJiOWZlZmI5ZGQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-08T16:37:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-08T16:37:24Z"}, "message": "Rollup merge of #70876 - nnethercote:smallvec-predecessors, r=estebank\n\nUse a `SmallVec` for `Cache::predecessors`.\n\nThis is a very small win.", "tree": {"sha": "801106669a999ef8b1601850c04840ea5fb9ba2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/801106669a999ef8b1601850c04840ea5fb9ba2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97a6e7bdcd6cbc7c3dabf4838a8152b9fefb9dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejf3ECRBK7hj4Ov3rIwAAdHIIAJLawaZO4bAHEGSOxVTbT2lw\nNzBSRCKRoLj4jwQmO4ns1+eVB2Dy3VfseKlcnyZPKuNSObk80N1rjEJ1ZUqW9Xa2\nLbU2zDBcsaAPcfJGiDfyJeD36Du1g/jCETOcoIcEVQAAe7383t3M8fSwuk9EbZ2T\n6BH9pV82xCcZVSevyZAdOynfg9mwhTzUFhiP6PkT1Jcx9jCNnzNfWZFq+DiBw5R9\nR2KDk/VUqLEDFe9+Aif+AdmG594SjVhAtgpjYi81qJIWc9X4a8FTTlGvdxBUWXor\n81Yd6LuXSeklGccgC9uEv4HtmBKqvJ4j1aCyd2SI/1tuq/jukOJzWgGcs3DzLIc=\n=y4lm\n-----END PGP SIGNATURE-----\n", "payload": "tree 801106669a999ef8b1601850c04840ea5fb9ba2e\nparent b9bb12640e1c68a855e88f45056356857c9cfc17\nparent a90661a780134439fefdd17e42576b946d7102d5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586363844 +0200\ncommitter GitHub <noreply@github.com> 1586363844 +0200\n\nRollup merge of #70876 - nnethercote:smallvec-predecessors, r=estebank\n\nUse a `SmallVec` for `Cache::predecessors`.\n\nThis is a very small win.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97a6e7bdcd6cbc7c3dabf4838a8152b9fefb9dd", "html_url": "https://github.com/rust-lang/rust/commit/e97a6e7bdcd6cbc7c3dabf4838a8152b9fefb9dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97a6e7bdcd6cbc7c3dabf4838a8152b9fefb9dd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9bb12640e1c68a855e88f45056356857c9cfc17", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bb12640e1c68a855e88f45056356857c9cfc17", "html_url": "https://github.com/rust-lang/rust/commit/b9bb12640e1c68a855e88f45056356857c9cfc17"}, {"sha": "a90661a780134439fefdd17e42576b946d7102d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a90661a780134439fefdd17e42576b946d7102d5", "html_url": "https://github.com/rust-lang/rust/commit/a90661a780134439fefdd17e42576b946d7102d5"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "af0f7efc3e3548ad9781708d3c391c79377f6126", "filename": "src/librustc_middle/mir/cache.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e97a6e7bdcd6cbc7c3dabf4838a8152b9fefb9dd/src%2Flibrustc_middle%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97a6e7bdcd6cbc7c3dabf4838a8152b9fefb9dd/src%2Flibrustc_middle%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fcache.rs?ref=e97a6e7bdcd6cbc7c3dabf4838a8152b9fefb9dd", "patch": "@@ -5,13 +5,15 @@ use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_index::vec::IndexVec;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use smallvec::SmallVec;\n use std::iter;\n use std::ops::{Deref, DerefMut, Index, IndexMut};\n use std::vec::IntoIter;\n \n #[derive(Clone, Debug)]\n pub struct Cache {\n-    predecessors: Option<IndexVec<BasicBlock, Vec<BasicBlock>>>,\n+    // Typically 95%+ of the inner vectors have 4 or fewer elements.\n+    predecessors: Option<IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>>>,\n }\n \n impl rustc_serialize::Encodable for Cache {\n@@ -44,7 +46,7 @@ impl Cache {\n \n     pub fn ensure_predecessors(&mut self, body: &Body<'_>) {\n         if self.predecessors.is_none() {\n-            let mut result = IndexVec::from_elem(vec![], body.basic_blocks());\n+            let mut result = IndexVec::from_elem(smallvec![], body.basic_blocks());\n             for (bb, data) in body.basic_blocks().iter_enumerated() {\n                 if let Some(ref term) = data.terminator {\n                     for &tgt in term.successors() {\n@@ -58,7 +60,11 @@ impl Cache {\n     }\n \n     /// This will recompute the predecessors cache if it is not available\n-    fn predecessors(&mut self, body: &Body<'_>) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    // njn: typedef?\n+    fn predecessors(\n+        &mut self,\n+        body: &Body<'_>,\n+    ) -> &IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>> {\n         self.ensure_predecessors(body);\n         self.predecessors.as_ref().unwrap()\n     }\n@@ -137,7 +143,7 @@ impl BodyAndCache<'tcx> {\n         self.cache.ensure_predecessors(&self.body);\n     }\n \n-    pub fn predecessors(&mut self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    pub fn predecessors(&mut self) -> &IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>> {\n         self.cache.predecessors(&self.body)\n     }\n \n@@ -199,7 +205,7 @@ impl ReadOnlyBodyAndCache<'a, 'tcx> {\n         Self { body, cache }\n     }\n \n-    pub fn predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    pub fn predecessors(&self) -> &IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>> {\n         self.cache.predecessors.as_ref().unwrap()\n     }\n "}]}