{"sha": "ffe5162cd1605228a1dae798953a5ea6b8f2e97f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZTUxNjJjZDE2MDUyMjhhMWRhZTc5ODk1M2E1ZWE2YjhmMmU5N2Y=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-03-02T19:57:00Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-03-07T20:23:45Z"}, "message": "Fix #26114", "tree": {"sha": "d1ef5c79da737554d3147e33aaf44f82e5279943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1ef5c79da737554d3147e33aaf44f82e5279943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe5162cd1605228a1dae798953a5ea6b8f2e97f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe5162cd1605228a1dae798953a5ea6b8f2e97f", "html_url": "https://github.com/rust-lang/rust/commit/ffe5162cd1605228a1dae798953a5ea6b8f2e97f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe5162cd1605228a1dae798953a5ea6b8f2e97f/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f94fac150c872f93ee00eaad736eae5e3226aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f94fac150c872f93ee00eaad736eae5e3226aaa", "html_url": "https://github.com/rust-lang/rust/commit/3f94fac150c872f93ee00eaad736eae5e3226aaa"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "07d8175727b5a49787858db9234a5bac607b8355", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ffe5162cd1605228a1dae798953a5ea6b8f2e97f/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe5162cd1605228a1dae798953a5ea6b8f2e97f/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=ffe5162cd1605228a1dae798953a5ea6b8f2e97f", "patch": "@@ -400,6 +400,15 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                     }\n                 }\n             }\n+\n+            // If the alignment is smaller than the chosen discriminant size, don't use the\n+            // alignment as the final size.\n+            let min_ty = ll_inttype(&cx, min_ity);\n+            let min_size = machine::llsize_of_real(cx, min_ty);\n+            if (align as u64) < min_size {\n+                use_align = false;\n+            }\n+\n             let ity = if use_align {\n                 // Use the overall alignment\n                 match align {\n@@ -817,11 +826,11 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // FIXME #10604: this breaks when vector types are present.\n             let (size, align) = union_size_and_align(&sts[..]);\n             let align_s = align as u64;\n-            assert_eq!(size % align_s, 0);\n-            let align_units = size / align_s - 1;\n-\n             let discr_ty = ll_inttype(cx, ity);\n             let discr_size = machine::llsize_of_alloc(cx, discr_ty);\n+            let padded_discr_size = roundup(discr_size, align);\n+            assert_eq!(size % align_s, 0); // Ensure division in align_units comes out evenly\n+            let align_units = (size - padded_discr_size) / align_s;\n             let fill_ty = match align_s {\n                 1 => Type::array(&Type::i8(cx), align_units),\n                 2 => Type::array(&Type::i16(cx), align_units),\n@@ -833,10 +842,10 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 _ => panic!(\"unsupported enum alignment: {}\", align)\n             };\n             assert_eq!(machine::llalign_of_min(cx, fill_ty), align);\n-            assert_eq!(align_s % discr_size, 0);\n+            assert_eq!(padded_discr_size % discr_size, 0); // Ensure discr_ty can fill pad evenly\n             let mut fields: Vec<Type> =\n                 [discr_ty,\n-                 Type::array(&discr_ty, align_s / discr_size - 1),\n+                 Type::array(&discr_ty, (padded_discr_size - discr_size)/discr_size),\n                  fill_ty].iter().cloned().collect();\n             if delay_drop_flag && dtor_needed {\n                 fields.pop();"}]}