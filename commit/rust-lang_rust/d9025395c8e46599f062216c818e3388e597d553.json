{"sha": "d9025395c8e46599f062216c818e3388e597d553", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDI1Mzk1YzhlNDY1OTlmMDYyMjE2YzgxOGUzMzg4ZTU5N2Q1NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-23T04:24:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-23T04:24:35Z"}, "message": "Auto merge of #66656 - Centril:rollup-fivygwz, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #65961 (add fn type_name_of_val)\n - #66574 (Update tidy check for error codes testing)\n - #66576 (made gdb pretty-printing more robust when printing uninitialized vec)\n - #66583 (Clarify Step Documentation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fc9fcd0b3c778e896c4613528514633c721cb6b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9fcd0b3c778e896c4613528514633c721cb6b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9025395c8e46599f062216c818e3388e597d553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9025395c8e46599f062216c818e3388e597d553", "html_url": "https://github.com/rust-lang/rust/commit/d9025395c8e46599f062216c818e3388e597d553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9025395c8e46599f062216c818e3388e597d553/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d523ee501a1ae30428d22ce4fc3c1f720e896e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d523ee501a1ae30428d22ce4fc3c1f720e896e6", "html_url": "https://github.com/rust-lang/rust/commit/6d523ee501a1ae30428d22ce4fc3c1f720e896e6"}, {"sha": "8024e0df4b0128ca8e740db46a626a964e2eb084", "url": "https://api.github.com/repos/rust-lang/rust/commits/8024e0df4b0128ca8e740db46a626a964e2eb084", "html_url": "https://github.com/rust-lang/rust/commit/8024e0df4b0128ca8e740db46a626a964e2eb084"}], "stats": {"total": 129, "additions": 106, "deletions": 23}, "files": [{"sha": "5da01b96fa5e36f392cdecad68eb448964eed219", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9025395c8e46599f062216c818e3388e597d553/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/d9025395c8e46599f062216c818e3388e597d553/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=d9025395c8e46599f062216c818e3388e597d553", "patch": "@@ -284,10 +284,20 @@ def to_string(self):\n                 (\"(len: %i, cap: %i)\" % (length, cap)))\n \n     def children(self):\n+        saw_inaccessible = False\n         (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(self.__val)\n         gdb_ptr = data_ptr.get_wrapped_value()\n         for index in xrange(0, length):\n-            yield (str(index), (gdb_ptr + index).dereference())\n+            if saw_inaccessible:\n+                return\n+            try:\n+                # rust-lang/rust#64343: passing deref expr to `str` allows\n+                # catching exception on garbage pointer\n+                str((gdb_ptr + index).dereference())\n+                yield (str(index), (gdb_ptr + index).dereference())\n+            except RuntimeError:\n+                saw_inaccessible = True\n+                yield (str(index), \"inaccessible\")\n \n \n class RustStdVecDequePrinter(object):"}, {"sha": "57a2aecd8be6d1a85fed50c988892804e2d4833a", "filename": "src/libcore/any.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d9025395c8e46599f062216c818e3388e597d553/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9025395c8e46599f062216c818e3388e597d553/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=d9025395c8e46599f062216c818e3388e597d553", "patch": "@@ -452,7 +452,7 @@ impl TypeId {\n /// The current implementation uses the same infrastructure as compiler\n /// diagnostics and debuginfo, but this is not guaranteed.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// assert_eq!(\n@@ -465,3 +465,42 @@ impl TypeId {\n pub const fn type_name<T: ?Sized>() -> &'static str {\n     intrinsics::type_name::<T>()\n }\n+\n+/// Returns the name of the type of the pointed-to value as a string slice.\n+/// This is the same as `type_name::<T>()`, but can be used where the type of a\n+/// variable is not easily available.\n+///\n+/// # Note\n+///\n+/// This is intended for diagnostic use. The exact contents and format of the\n+/// string are not specified, other than being a best-effort description of the\n+/// type. For example, `type_name_of::<Option<String>>(None)` could return the\n+/// `\"Option<String>\"` or `\"std::option::Option<std::string::String>\"`, but not\n+/// `\"foobar\"`. In addition, the output may change between versions of the\n+/// compiler.\n+///\n+/// The type name should not be considered a unique identifier of a type;\n+/// multiple types may share the same type name.\n+///\n+/// The current implementation uses the same infrastructure as compiler\n+/// diagnostics and debuginfo, but this is not guaranteed.\n+///\n+/// # Examples\n+///\n+/// Prints the default integer and float types.\n+///\n+/// ```rust\n+/// #![feature(type_name_of_val)]\n+/// use std::any::type_name_of_val;\n+///\n+/// let x = 1;\n+/// println!(\"{}\", type_name_of_val(&x));\n+/// let y = 1.0;\n+/// println!(\"{}\", type_name_of_val(&y));\n+/// ```\n+#[unstable(feature = \"type_name_of_val\", issue = \"66359\")]\n+#[rustc_const_unstable(feature = \"const_type_name\")]\n+pub const fn type_name_of_val<T: ?Sized>(val: &T) -> &'static str {\n+    let _ = val;\n+    type_name::<T>()\n+}"}, {"sha": "63036f516a0a4fc1d4a15544bd431e761a999246", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9025395c8e46599f062216c818e3388e597d553/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9025395c8e46599f062216c818e3388e597d553/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=d9025395c8e46599f062216c818e3388e597d553", "patch": "@@ -20,10 +20,14 @@ pub trait Step: Clone + PartialOrd + Sized {\n     /// without overflow.\n     fn steps_between(start: &Self, end: &Self) -> Option<usize>;\n \n-    /// Replaces this step with `1`, returning itself.\n+    /// Replaces this step with `1`, returning a clone of itself.\n+    ///\n+    /// The output of this method should always be greater than the output of replace_zero.\n     fn replace_one(&mut self) -> Self;\n \n-    /// Replaces this step with `0`, returning itself.\n+    /// Replaces this step with `0`, returning a clone of itself.\n+    ///\n+    /// The output of this method should always be less than the output of replace_one.\n     fn replace_zero(&mut self) -> Self;\n \n     /// Adds one to this step, returning the result."}, {"sha": "5364005840aa1419d9e3ded0fce4eae518a93ffc", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d9025395c8e46599f062216c818e3388e597d553/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9025395c8e46599f062216c818e3388e597d553/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=d9025395c8e46599f062216c818e3388e597d553", "patch": "@@ -3,6 +3,8 @@\n \n use std::collections::HashMap;\n use std::ffi::OsStr;\n+use std::fs::read_to_string;\n+use std::io::Read;\n use std::path::Path;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n@@ -50,41 +52,69 @@ const WHITELIST: &[&str] = &[\n     \"E0729\",\n ];\n \n-fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>) {\n+fn check_error_code_explanation(\n+    f: &str,\n+    error_codes: &mut HashMap<String, bool>,\n+    err_code: String,\n+) {\n+    for line in f.lines() {\n+        let s = line.trim();\n+        if s.starts_with(\"```\") && s.contains(\"compile_fail\") && s.contains('E') {\n+            error_codes.insert(err_code, true);\n+            return;\n+        } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n+            error_codes.get_mut(&err_code).map(|x| *x = true);\n+            return;\n+        }\n+    }\n+}\n+\n+macro_rules! some_or_continue {\n+    ($e:expr) => (\n+        match $e {\n+            Some(e) => e,\n+            None => continue,\n+        }\n+    );\n+}\n+\n+fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>, path: &Path) {\n     let mut reached_no_explanation = false;\n-    let mut last_error_code = None;\n \n     for line in f.lines() {\n         let s = line.trim();\n-        if s.starts_with('E') && s.ends_with(\": r##\\\"\") {\n+        if !reached_no_explanation && s.starts_with('E') && s.contains(\"include_str!(\\\"\") {\n             if let Some(err_code) = s.splitn(2, ':').next() {\n                 let err_code = err_code.to_owned();\n-                last_error_code = Some(err_code.clone());\n                 if !error_codes.contains_key(&err_code) {\n-                    error_codes.insert(err_code, false);\n+                    error_codes.insert(err_code.clone(), false);\n                 }\n-            }\n-        } else if s.starts_with(\"```\") && s.contains(\"compile_fail\") && s.contains('E') {\n-            if let Some(err_code) = s.splitn(2, 'E').skip(1).next() {\n-                if let Some(err_code) = err_code.splitn(2, ',').next() {\n-                    let nb = error_codes.entry(format!(\"E{}\", err_code)).or_insert(false);\n-                    *nb = true;\n+                // Now we extract the tests from the markdown file!\n+                let md = some_or_continue!(s.splitn(2, \"include_str!(\\\"\").skip(1).next());\n+                let md_file_name = some_or_continue!(md.splitn(2, \"\\\")\").next());\n+                let path = some_or_continue!(path.parent()).join(md_file_name);\n+                match read_to_string(&path) {\n+                    Ok(content) => {\n+                        check_error_code_explanation(\n+                            &content,\n+                            error_codes,\n+                            err_code,\n+                        );\n+                    }\n+                    Err(e) => {\n+                        eprintln!(\"Couldn't read `{}`: {}\", path.display(), e);\n+                    }\n                 }\n             }\n-        } else if s == \";\" {\n-            reached_no_explanation = true;\n         } else if reached_no_explanation && s.starts_with('E') {\n             if let Some(err_code) = s.splitn(2, ',').next() {\n                 let err_code = err_code.to_owned();\n                 if !error_codes.contains_key(&err_code) { // this check should *never* fail!\n                     error_codes.insert(err_code, false);\n                 }\n             }\n-        } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n-            if let Some(last) = last_error_code {\n-                error_codes.get_mut(&last).map(|x| *x = true);\n-            }\n-            last_error_code = None;\n+        } else if s == \";\" {\n+            reached_no_explanation = true;\n         }\n     }\n }\n@@ -111,7 +141,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 &mut |entry, contents| {\n         let file_name = entry.file_name();\n         if file_name == \"error_codes.rs\" {\n-            extract_error_codes(contents, &mut error_codes);\n+            extract_error_codes(contents, &mut error_codes, entry.path());\n         } else if entry.path().extension() == Some(OsStr::new(\"stderr\")) {\n             extract_error_codes_from_tests(contents, &mut error_codes);\n         }"}]}