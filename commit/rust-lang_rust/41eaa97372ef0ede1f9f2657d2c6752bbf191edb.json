{"sha": "41eaa97372ef0ede1f9f2657d2c6752bbf191edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZWFhOTczNzJlZjBlZGUxZjlmMjY1N2QyYzY3NTJiYmYxOTFlZGI=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-14T12:25:53Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-14T12:55:42Z"}, "message": "libstd: `Rational` requires `Integer` as type bounds instead of `Num`", "tree": {"sha": "94f2fb969be5bf868eebdf9ceda0b530bb799401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94f2fb969be5bf868eebdf9ceda0b530bb799401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41eaa97372ef0ede1f9f2657d2c6752bbf191edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41eaa97372ef0ede1f9f2657d2c6752bbf191edb", "html_url": "https://github.com/rust-lang/rust/commit/41eaa97372ef0ede1f9f2657d2c6752bbf191edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41eaa97372ef0ede1f9f2657d2c6752bbf191edb/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3695468b742ff307da3cf29684128ed0785ee03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3695468b742ff307da3cf29684128ed0785ee03", "html_url": "https://github.com/rust-lang/rust/commit/e3695468b742ff307da3cf29684128ed0785ee03"}], "stats": {"total": 67, "additions": 14, "deletions": 53}, "files": [{"sha": "c9596291981957fbbc797d1e3a2335de075659d7", "filename": "src/libstd/num/rational.rs", "status": "modified", "additions": 14, "deletions": 53, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/41eaa97372ef0ede1f9f2657d2c6752bbf191edb/src%2Flibstd%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41eaa97372ef0ede1f9f2657d2c6752bbf191edb/src%2Flibstd%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Frational.rs?ref=41eaa97372ef0ede1f9f2657d2c6752bbf191edb", "patch": "@@ -30,7 +30,7 @@ pub type Rational64 = Ratio<i64>;\n /// Alias for arbitrary precision rationals.\n pub type BigRational = Ratio<BigInt>;\n \n-impl<T: Copy + Num + Ord>\n+impl<T: Copy + Integer + Ord>\n     Ratio<T> {\n     /// Create a ratio representing the integer `t`.\n     #[inline(always)]\n@@ -57,7 +57,7 @@ impl<T: Copy + Num + Ord>\n \n     /// Put self into lowest terms, with denom > 0.\n     fn reduce(&mut self) {\n-        let g : T = gcd(self.numer, self.denom);\n+        let g : T = self.numer.gcd(&self.denom);\n \n         self.numer /= g;\n         self.denom /= g;\n@@ -76,34 +76,6 @@ impl<T: Copy + Num + Ord>\n     }\n }\n \n-/**\n-Compute the greatest common divisor of two numbers, via Euclid's algorithm.\n-\n-The result can be negative.\n-*/\n-#[inline]\n-pub fn gcd_raw<T: Num>(n: T, m: T) -> T {\n-    let mut m = m, n = n;\n-    while m != Zero::zero() {\n-        let temp = m;\n-        m = n % temp;\n-        n = temp;\n-    }\n-    n\n-}\n-\n-/**\n-Compute the greatest common divisor of two numbers, via Euclid's algorithm.\n-\n-The result is always positive.\n-*/\n-#[inline]\n-pub fn gcd<T: Num + Ord>(n: T, m: T) -> T {\n-    let g = gcd_raw(n, m);\n-    if g < Zero::zero() { -g }\n-    else { g }\n-}\n-\n /* Comparisons */\n \n // comparing a/b and c/d is the same as comparing a*d and b*c, so we\n@@ -133,7 +105,7 @@ cmp_impl!(impl TotalOrd, cmp -> cmp::Ordering)\n \n /* Arithmetic */\n // a/b * c/d = (a*c)/(b*d)\n-impl<T: Copy + Num + Ord>\n+impl<T: Copy + Integer + Ord>\n     Mul<Ratio<T>,Ratio<T>> for Ratio<T> {\n     #[inline]\n     fn mul(&self, rhs: &Ratio<T>) -> Ratio<T> {\n@@ -142,7 +114,7 @@ impl<T: Copy + Num + Ord>\n }\n \n // (a/b) / (c/d) = (a*d)/(b*c)\n-impl<T: Copy + Num + Ord>\n+impl<T: Copy + Integer + Ord>\n     Div<Ratio<T>,Ratio<T>> for Ratio<T> {\n     #[inline]\n     fn div(&self, rhs: &Ratio<T>) -> Ratio<T> {\n@@ -153,7 +125,7 @@ impl<T: Copy + Num + Ord>\n // Abstracts the a/b `op` c/d = (a*d `op` b*d) / (b*d) pattern\n macro_rules! arith_impl {\n     (impl $imp:ident, $method:ident) => {\n-        impl<T: Copy + Num + Ord>\n+        impl<T: Copy + Integer + Ord>\n             $imp<Ratio<T>,Ratio<T>> for Ratio<T> {\n             #[inline]\n             fn $method(&self, rhs: &Ratio<T>) -> Ratio<T> {\n@@ -173,16 +145,16 @@ arith_impl!(impl Sub, sub)\n // a/b % c/d = (a*d % b*c)/(b*d)\n arith_impl!(impl Rem, rem)\n \n-impl<T: Copy + Num + Ord>\n+impl<T: Copy + Integer + Ord>\n     Neg<Ratio<T>> for Ratio<T> {\n     #[inline]\n     fn neg(&self) -> Ratio<T> {\n-        Ratio::new_raw(-self.numer, self.denom)\n+        Ratio::new_raw(-self.numer, self.denom.clone())\n     }\n }\n \n /* Constants */\n-impl<T: Copy + Num + Ord>\n+impl<T: Copy + Integer + Ord>\n     Zero for Ratio<T> {\n     #[inline]\n     fn zero() -> Ratio<T> {\n@@ -195,19 +167,19 @@ impl<T: Copy + Num + Ord>\n     }\n }\n \n-impl<T: Copy + Num + Ord>\n+impl<T: Copy + Integer + Ord>\n     One for Ratio<T> {\n     #[inline]\n     fn one() -> Ratio<T> {\n         Ratio::new_raw(One::one(), One::one())\n     }\n }\n \n-impl<T: Copy + Num + Ord>\n+impl<T: Copy + Integer + Ord>\n     Num for Ratio<T> {}\n \n /* Utils */\n-impl<T: Copy + Num + Ord>\n+impl<T: Copy + Integer + Ord>\n     Round for Ratio<T> {\n \n     fn floor(&self) -> Ratio<T> {\n@@ -245,7 +217,7 @@ impl<T: Copy + Num + Ord>\n     }\n }\n \n-impl<T: Copy + Num + Ord> Fractional for Ratio<T> {\n+impl<T: Copy + Integer + Ord> Fractional for Ratio<T> {\n     #[inline]\n     fn recip(&self) -> Ratio<T> {\n         Ratio::new_raw(self.denom, self.numer)\n@@ -266,7 +238,7 @@ impl<T: ToStrRadix> ToStrRadix for Ratio<T> {\n     }\n }\n \n-impl<T: FromStr + Copy + Num + Ord>\n+impl<T: FromStr + Copy + Integer + Ord>\n     FromStr for Ratio<T> {\n     /// Parses `numer/denom`.\n     fn from_str(s: &str) -> Option<Ratio<T>> {\n@@ -283,7 +255,7 @@ impl<T: FromStr + Copy + Num + Ord>\n         }\n     }\n }\n-impl<T: FromStrRadix + Copy + Num + Ord>\n+impl<T: FromStrRadix + Copy + Integer + Ord>\n     FromStrRadix for Ratio<T> {\n     /// Parses `numer/denom` where the numbers are in base `radix`.\n     fn from_str_radix(s: &str, radix: uint) -> Option<Ratio<T>> {\n@@ -316,17 +288,6 @@ mod test {\n     pub static _3_2: Rational = Ratio { numer: 3, denom: 2};\n     pub static _neg1_2: Rational =  Ratio { numer: -1, denom: 2};\n \n-    #[test]\n-    fn test_gcd() {\n-        assert_eq!(gcd(10,2),2);\n-        assert_eq!(gcd(10,3),1);\n-        assert_eq!(gcd(0,3),3);\n-        assert_eq!(gcd(3,3),3);\n-\n-        assert_eq!(gcd(3,-3), 3);\n-        assert_eq!(gcd(-6,3), 3);\n-        assert_eq!(gcd(-4,-2), 2);\n-    }\n \n     #[test]\n     fn test_test_constants() {"}]}