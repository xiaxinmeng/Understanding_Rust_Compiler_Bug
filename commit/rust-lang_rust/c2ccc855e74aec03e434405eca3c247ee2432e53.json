{"sha": "c2ccc855e74aec03e434405eca3c247ee2432e53", "node_id": "C_kwDOAAsO6NoAKGMyY2NjODU1ZTc0YWVjMDNlNDM0NDA1ZWNhM2MyNDdlZTI0MzJlNTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-17T06:42:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-17T06:42:07Z"}, "message": "Auto merge of #111671 - Dylan-DPC:rollup-1jy5r16, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110145 (Share slice of bytes)\n - #111043 (Stabilize feature `cstr_is_empty`)\n - #111648 (Remove `LangItems::require`)\n - #111649 (Add derive for `core::marker::ConstParamTy`)\n - #111654 (Add a conversion from `&mut T` to `&mut UnsafeCell<T>`)\n - #111661 (Erase regions of type in `offset_of!`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "123b2319d3e649afa4438cc57830d30f5c87db1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/123b2319d3e649afa4438cc57830d30f5c87db1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2ccc855e74aec03e434405eca3c247ee2432e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ccc855e74aec03e434405eca3c247ee2432e53", "html_url": "https://github.com/rust-lang/rust/commit/c2ccc855e74aec03e434405eca3c247ee2432e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2ccc855e74aec03e434405eca3c247ee2432e53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c64870fa67f0227f40f6adc25a6944e95c2959f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c64870fa67f0227f40f6adc25a6944e95c2959f", "html_url": "https://github.com/rust-lang/rust/commit/6c64870fa67f0227f40f6adc25a6944e95c2959f"}, {"sha": "072074383627a6e5eb43c72522ae09010eb218c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/072074383627a6e5eb43c72522ae09010eb218c0", "html_url": "https://github.com/rust-lang/rust/commit/072074383627a6e5eb43c72522ae09010eb218c0"}], "stats": {"total": 315, "additions": 232, "deletions": 83}, "files": [{"sha": "2c8e6f99c6739a1787ecc43d6527b7c215852fff", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -27,3 +27,26 @@ pub fn expand_deriving_copy(\n \n     trait_def.expand(cx, mitem, item, push);\n }\n+\n+pub fn expand_deriving_const_param_ty(\n+    cx: &mut ExtCtxt<'_>,\n+    span: Span,\n+    mitem: &MetaItem,\n+    item: &Annotatable,\n+    push: &mut dyn FnMut(Annotatable),\n+    is_const: bool,\n+) {\n+    let trait_def = TraitDef {\n+        span,\n+        path: path_std!(marker::ConstParamTy),\n+        skip_path_as_bound: false,\n+        needs_copy_as_bound_if_packed: false,\n+        additional_bounds: Vec::new(),\n+        supports_unions: false,\n+        methods: Vec::new(),\n+        associated_types: Vec::new(),\n+        is_const,\n+    };\n+\n+    trait_def.expand(cx, mitem, item, push);\n+}"}, {"sha": "ebf1448f55c9985818089ee8dd9e71a31d7781dd", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -115,6 +115,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     register_derive! {\n         Clone: clone::expand_deriving_clone,\n         Copy: bounds::expand_deriving_copy,\n+        ConstParamTy: bounds::expand_deriving_const_param_ty,\n         Debug: debug::expand_deriving_debug,\n         Default: default::expand_deriving_default,\n         Eq: eq::expand_deriving_eq,"}, {"sha": "25fd5ca3ae8bc3757b2397df0f51eaa89abdce5a", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -966,11 +966,7 @@ fn codegen_panic_inner<'tcx>(\n     args: &[Value],\n     span: Span,\n ) {\n-    let def_id = fx\n-        .tcx\n-        .lang_items()\n-        .require(lang_item)\n-        .unwrap_or_else(|e| fx.tcx.sess.span_fatal(span, e.to_string()));\n+    let def_id = fx.tcx.require_lang_item(lang_item, Some(span));\n \n     let instance = Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n     let symbol_name = fx.tcx.symbol_name(instance).name;"}, {"sha": "8bf84772f0869024be1f34732579633e97d105ac", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -14,8 +14,7 @@ use snap::write::FrameEncoder;\n \n use object::elf::NT_GNU_PROPERTY_TYPE_0;\n use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owned_slice::try_slice_owned;\n-use rustc_data_structures::sync::MetadataRef;\n+use rustc_data_structures::owned_slice::{try_slice_owned, OwnedSlice};\n use rustc_metadata::fs::METADATA_FILENAME;\n use rustc_metadata::EncodedMetadata;\n use rustc_session::cstore::MetadataLoader;\n@@ -39,7 +38,7 @@ pub struct DefaultMetadataLoader;\n fn load_metadata_with(\n     path: &Path,\n     f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n-) -> Result<MetadataRef, String> {\n+) -> Result<OwnedSlice, String> {\n     let file =\n         File::open(path).map_err(|e| format!(\"failed to open file '{}': {}\", path.display(), e))?;\n \n@@ -49,7 +48,7 @@ fn load_metadata_with(\n }\n \n impl MetadataLoader for DefaultMetadataLoader {\n-    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<OwnedSlice, String> {\n         load_metadata_with(path, |data| {\n             let archive = object::read::archive::ArchiveFile::parse(&*data)\n                 .map_err(|e| format!(\"failed to parse rlib '{}': {}\", path.display(), e))?;\n@@ -69,7 +68,7 @@ impl MetadataLoader for DefaultMetadataLoader {\n         })\n     }\n \n-    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<OwnedSlice, String> {\n         load_metadata_with(path, |data| search_for_section(path, data, \".rustc\"))\n     }\n }"}, {"sha": "d83bfc74082f6c9764db6c435e93fd24263d16bf", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -1,10 +1,13 @@\n+use std::any::Any;\n+\n use super::write::WriteBackendMethods;\n use super::CodegenObject;\n use crate::back::write::TargetMachineFactoryFn;\n use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::{DynSend, DynSync};\n use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n@@ -20,11 +23,6 @@ use rustc_span::symbol::Symbol;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::spec::Target;\n \n-pub use rustc_data_structures::sync::MetadataRef;\n-\n-use rustc_data_structures::sync::{DynSend, DynSync};\n-use std::any::Any;\n-\n pub trait BackendTypes {\n     type Value: CodegenObject;\n     type Function: CodegenObject;"}, {"sha": "cbb3047d88412c6b682175ea6f13449faf40022c", "filename": "compiler/rustc_data_structures/src/owned_slice.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -1,13 +1,14 @@\n use std::{borrow::Borrow, ops::Deref};\n \n+use crate::sync::Lrc;\n // Use our fake Send/Sync traits when on not parallel compiler,\n // so that `OwnedSlice` only implements/requires Send/Sync\n // for parallel compiler builds.\n use crate::sync::{Send, Sync};\n \n /// An owned slice.\n ///\n-/// This is similar to `Box<[u8]>` but allows slicing and using anything as the\n+/// This is similar to `Lrc<[u8]>` but allows slicing and using anything as the\n /// backing buffer.\n ///\n /// See [`slice_owned`] for `OwnedSlice` construction and examples.\n@@ -16,6 +17,7 @@ use crate::sync::{Send, Sync};\n ///\n /// This is essentially a replacement for `owning_ref` which is a lot simpler\n /// and even sound! \ud83c\udf38\n+#[derive(Clone)]\n pub struct OwnedSlice {\n     /// This is conceptually a `&'self.owner [u8]`.\n     bytes: *const [u8],\n@@ -31,7 +33,7 @@ pub struct OwnedSlice {\n     //       \\/\n     //      \u2282(\u00b4\uff65\u25e1\uff65\u2282 )\u2218\u02da\u02f3\u00b0 (I am the phantom remnant of #97770)\n     #[expect(dead_code)]\n-    owner: Box<dyn Send + Sync>,\n+    owner: Lrc<dyn Send + Sync>,\n }\n \n /// Makes an [`OwnedSlice`] out of an `owner` and a `slicer` function.\n@@ -72,23 +74,50 @@ where\n     O: Send + Sync + 'static,\n     F: FnOnce(&O) -> Result<&[u8], E>,\n {\n-    // We box the owner of the bytes, so it doesn't move.\n+    // We wrap the owner of the bytes in, so it doesn't move.\n     //\n     // Since the owner does not move and we don't access it in any way\n-    // before drop, there is nothing that can invalidate the bytes pointer.\n+    // before dropping, there is nothing that can invalidate the bytes pointer.\n     //\n     // Thus, \"extending\" the lifetime of the reference returned from `F` is fine.\n     // We pretend that we pass it a reference that lives as long as the returned slice.\n     //\n     // N.B. the HRTB on the `slicer` is important \u2014 without it the caller could provide\n     // a short lived slice, unrelated to the owner.\n \n-    let owner = Box::new(owner);\n+    let owner = Lrc::new(owner);\n     let bytes = slicer(&*owner)?;\n \n     Ok(OwnedSlice { bytes, owner })\n }\n \n+impl OwnedSlice {\n+    /// Slice this slice by `slicer`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # use rustc_data_structures::owned_slice::{OwnedSlice, slice_owned};\n+    /// let vec = vec![1, 2, 3, 4];\n+    ///\n+    /// // Identical to slicing via `&v[1..3]` but produces an owned slice\n+    /// let slice: OwnedSlice = slice_owned(vec, |v| &v[..]);\n+    /// assert_eq!(&*slice, [1, 2, 3, 4]);\n+    ///\n+    /// let slice = slice.slice(|slice| &slice[1..][..2]);\n+    /// assert_eq!(&*slice, [2, 3]);\n+    /// ```\n+    ///\n+    pub fn slice(self, slicer: impl FnOnce(&[u8]) -> &[u8]) -> OwnedSlice {\n+        // This is basically identical to `try_slice_owned`,\n+        // `slicer` can only return slices of its argument or some static data,\n+        // both of which are valid while `owner` is alive.\n+\n+        let bytes = slicer(&self);\n+        OwnedSlice { bytes, ..self }\n+    }\n+}\n+\n impl Deref for OwnedSlice {\n     type Target = [u8];\n \n@@ -108,11 +137,11 @@ impl Borrow<[u8]> for OwnedSlice {\n     }\n }\n \n-// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Send`\n+// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Arc<dyn Send + Sync>)`, which is `Send`\n #[cfg(parallel_compiler)]\n unsafe impl Send for OwnedSlice {}\n \n-// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Sync`\n+// Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Arc<dyn Send + Sync>)`, which is `Sync`\n #[cfg(parallel_compiler)]\n unsafe impl Sync for OwnedSlice {}\n "}, {"sha": "1eb5378cd1ad8058d24557c196f999a3a053b7df", "filename": "compiler/rustc_data_structures/src/owned_slice/tests.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -26,7 +26,7 @@ fn static_storage() {\n }\n \n #[test]\n-fn slice_the_slice() {\n+fn slice_owned_the_slice() {\n     let slice = slice_owned(vec![1, 2, 3, 4, 5, 6], Vec::as_slice);\n     let slice = slice_owned(slice, |s| &s[1..][..4]);\n     let slice = slice_owned(slice, |s| s);\n@@ -35,6 +35,16 @@ fn slice_the_slice() {\n     assert_eq!(&*slice, &[1, 2, 3, 4, 5, 6][1..][..4][1..]);\n }\n \n+#[test]\n+fn slice_the_slice() {\n+    let slice = slice_owned(vec![1, 2, 3, 4, 5, 6], Vec::as_slice)\n+        .slice(|s| &s[1..][..4])\n+        .slice(|s| s)\n+        .slice(|s| &s[1..]);\n+\n+    assert_eq!(&*slice, &[1, 2, 3, 4, 5, 6][1..][..4][1..]);\n+}\n+\n #[test]\n fn try_and_fail() {\n     let res = try_slice_owned(vec![0], |v| v.get(12..).ok_or(()));"}, {"sha": "6c3197d8ec2c5dd70327493f145d18b0da1b502a", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -40,7 +40,6 @@\n //! [^2] `MTLockRef` is a typedef.\n \n pub use crate::marker::*;\n-use crate::owned_slice::OwnedSlice;\n use std::collections::HashMap;\n use std::hash::{BuildHasher, Hash};\n use std::ops::{Deref, DerefMut};\n@@ -92,6 +91,7 @@ mod mode {\n }\n \n pub use mode::{is_dyn_thread_safe, set_dyn_thread_safe_mode};\n+\n cfg_if! {\n     if #[cfg(not(parallel_compiler))] {\n         pub unsafe auto trait Send {}\n@@ -244,8 +244,6 @@ cfg_if! {\n             r\n         }\n \n-        pub type MetadataRef = OwnedSlice;\n-\n         pub use std::rc::Rc as Lrc;\n         pub use std::rc::Weak as Weak;\n         pub use std::cell::Ref as ReadGuard;\n@@ -517,8 +515,6 @@ cfg_if! {\n             }\n         }\n \n-        pub type MetadataRef = OwnedSlice;\n-\n         /// This makes locks panic if they are already held.\n         /// It is only useful when you are running in a single thread\n         const ERROR_CHECKING: bool = false;"}, {"sha": "e593ed1044a5818e1f4cdb7765bd9bd75cb393d9", "filename": "compiler/rustc_hir/src/errors.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c64870fa67f0227f40f6adc25a6944e95c2959f/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c64870fa67f0227f40f6adc25a6944e95c2959f/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs?ref=6c64870fa67f0227f40f6adc25a6944e95c2959f", "patch": "@@ -1,10 +0,0 @@\n-use crate::LangItem;\n-\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable)]\n-pub struct LangItemError(pub LangItem);\n-\n-impl ToString for LangItemError {\n-    fn to_string(&self) -> String {\n-        format!(\"requires `{}` lang_item\", self.0.name())\n-    }\n-}"}, {"sha": "4b3bc816b9531366afb44348148f17bc3ca71602", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -8,7 +8,6 @@\n //! * Functions called by the compiler itself.\n \n use crate::def_id::DefId;\n-use crate::errors::LangItemError;\n use crate::{MethodKind, Target};\n \n use rustc_ast as ast;\n@@ -42,13 +41,6 @@ impl LanguageItems {\n         self.items[item as usize] = Some(def_id);\n     }\n \n-    /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n-    /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n-    /// returns an error encapsulating the `LangItem`.\n-    pub fn require(&self, it: LangItem) -> Result<DefId, LangItemError> {\n-        self.get(it).ok_or_else(|| LangItemError(it))\n-    }\n-\n     pub fn iter(&self) -> impl Iterator<Item = (LangItem, DefId)> + '_ {\n         self.items\n             .iter()"}, {"sha": "616de57dc6372109d3b03ae0c9c74c59eb634784", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -30,7 +30,6 @@ pub mod def;\n pub mod def_path_hash_map;\n pub mod definitions;\n pub mod diagnostic_items;\n-pub mod errors;\n pub use rustc_span::def_id;\n mod hir;\n pub mod hir_id;"}, {"sha": "a98d8e17153d851ae5f4edb9b2bbb7fa5163088c", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -298,9 +298,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n \n     let coerce_unsized_trait = tcx.require_lang_item(LangItem::CoerceUnsized, Some(span));\n \n-    let unsize_trait = tcx.lang_items().require(LangItem::Unsize).unwrap_or_else(|err| {\n-        tcx.sess.fatal(format!(\"`CoerceUnsized` implementation {}\", err.to_string()));\n-    });\n+    let unsize_trait = tcx.require_lang_item(LangItem::Unsize, Some(span));\n \n     let source = tcx.type_of(impl_did).subst_identity();\n     let trait_ref = tcx.impl_trait_ref(impl_did).unwrap().subst_identity();"}, {"sha": "6c4d121fd0145d52bff6d87c1eb949e15c1b6407", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -220,7 +220,6 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owned_slice::slice_owned;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{DiagnosticArgValue, FatalError, IntoDiagnosticArg};\n use rustc_fs_util::try_canonicalize;\n use rustc_session::config::{self, CrateType};\n@@ -782,7 +781,7 @@ fn get_metadata_section<'p>(\n     if !filename.exists() {\n         return Err(MetadataError::NotPresent(filename));\n     }\n-    let raw_bytes: MetadataRef = match flavor {\n+    let raw_bytes = match flavor {\n         CrateFlavor::Rlib => {\n             loader.get_rlib_metadata(target, filename).map_err(MetadataError::LoadFailure)?\n         }\n@@ -843,7 +842,7 @@ fn get_metadata_section<'p>(\n             slice_owned(mmap, Deref::deref)\n         }\n     };\n-    let blob = MetadataBlob::new(raw_bytes);\n+    let blob = MetadataBlob(raw_bytes);\n     if blob.is_compatible() {\n         Ok(blob)\n     } else {"}, {"sha": "699e1f49ed6ca8cdf8d11e422a60003273eb41f5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -7,6 +7,7 @@ use crate::rmeta::*;\n use rustc_ast as ast;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{AppendOnlyVec, Lock, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n@@ -50,7 +51,7 @@ mod cstore_impl;\n /// A `MetadataBlob` internally is just a reference counted pointer to\n /// the actual data, so cloning it is cheap.\n #[derive(Clone)]\n-pub(crate) struct MetadataBlob(Lrc<MetadataRef>);\n+pub(crate) struct MetadataBlob(pub(crate) OwnedSlice);\n \n impl std::ops::Deref for MetadataBlob {\n     type Target = [u8];\n@@ -660,10 +661,6 @@ impl<'a, 'tcx, I: Idx, T> Decodable<DecodeContext<'a, 'tcx>> for LazyTable<I, T>\n implement_ty_decoder!(DecodeContext<'a, 'tcx>);\n \n impl MetadataBlob {\n-    pub(crate) fn new(metadata_ref: MetadataRef) -> MetadataBlob {\n-        MetadataBlob(Lrc::new(metadata_ref))\n-    }\n-\n     pub(crate) fn is_compatible(&self) -> bool {\n         self.blob().starts_with(METADATA_HEADER)\n     }"}, {"sha": "4f280bb9d80e221114bdac6bb8803fa355f31d9e", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -1,6 +1,5 @@\n use crate::rmeta::DecodeContext;\n use crate::rmeta::EncodeContext;\n-use rustc_data_structures::owned_slice::slice_owned;\n use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_hir::def_path_hash_map::{Config as HashMapConfig, DefPathHashMap};\n use rustc_middle::parameterized_over_tcx;\n@@ -47,7 +46,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefPathHashMapRef<'static>\n     fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefPathHashMapRef<'static> {\n         let len = d.read_usize();\n         let pos = d.position();\n-        let o = slice_owned(d.blob().clone(), |blob| &blob[pos..pos + len]);\n+        let o = d.blob().clone().0.slice(|blob| &blob[pos..pos + len]);\n \n         // Although we already have the data we need via the `OwnedSlice`, we still need\n         // to advance the `DecodeContext`'s position so it's in a valid state after"}, {"sha": "987a484049f6c25f5a53d3b9a9fec84499097d56", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -7,7 +7,6 @@ use table::TableBuilder;\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, DocLinkResMap};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};"}, {"sha": "64d511c261aa9a4952370239f03a927a8df3268d", "filename": "compiler/rustc_middle/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_middle%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_middle%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fmessages.ftl?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -39,5 +39,7 @@ middle_strict_coherence_needs_negative_coherence =\n     to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n     .label = due to this attribute\n \n+middle_requires_lang_item = requires `{$name}` lang_item\n+\n middle_const_not_used_in_type_alias =\n     const parameter `{$ct}` is part of concrete type but not used in parameter list for the `impl Trait` type alias"}, {"sha": "046186d274ca75f9b26ef1562ac2c92178764797", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -1,5 +1,5 @@\n use rustc_macros::Diagnostic;\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n use crate::ty::Ty;\n \n@@ -73,6 +73,14 @@ pub(crate) struct StrictCoherenceNeedsNegativeCoherence {\n     pub attr_span: Option<Span>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(middle_requires_lang_item)]\n+pub(crate) struct RequiresLangItem {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+    pub name: Symbol,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(middle_const_not_used_in_type_alias)]\n pub(super) struct ConstNotUsedTraitAlias {"}, {"sha": "9a633e04ce70d3f7629d64c9b90199e9ed2a62f1", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -18,12 +18,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the `DefId` for a given `LangItem`.\n     /// If not found, fatally aborts compilation.\n     pub fn require_lang_item(self, lang_item: LangItem, span: Option<Span>) -> DefId {\n-        self.lang_items().require(lang_item).unwrap_or_else(|err| {\n-            if let Some(span) = span {\n-                self.sess.span_fatal(span, err.to_string())\n-            } else {\n-                self.sess.fatal(err.to_string())\n-            }\n+        self.lang_items().get(lang_item).unwrap_or_else(|| {\n+            self.sess.emit_fatal(crate::error::RequiresLangItem { span, name: lang_item.name() });\n         })\n     }\n "}, {"sha": "0105a265ffbab598b180d84caeab4eb0d15b0172", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -481,9 +481,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }))))\n             }\n \n-            ExprKind::OffsetOf { container, fields } => {\n-                block.and(Rvalue::NullaryOp(NullOp::OffsetOf(fields), container))\n-            }\n+            ExprKind::OffsetOf { container, fields } => block.and(Rvalue::NullaryOp(\n+                NullOp::OffsetOf(fields),\n+                this.tcx.erase_regions(container),\n+            )),\n \n             ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }"}, {"sha": "dc475e8c6d57c9cab7f7e83280a706127e30f490", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -6,7 +6,8 @@ use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{self, AppendOnlyIndexVec, MetadataRef, RwLock};\n+use rustc_data_structures::owned_slice::OwnedSlice;\n+use rustc_data_structures::sync::{self, AppendOnlyIndexVec, RwLock};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, Definitions};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n@@ -203,8 +204,8 @@ pub enum ExternCrateSource {\n /// metadata in library -- this trait just serves to decouple rustc_metadata from\n /// the archive reader, which depends on LLVM.\n pub trait MetadataLoader: std::fmt::Debug {\n-    fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n-    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n+    fn get_rlib_metadata(&self, target: &Target, filename: &Path) -> Result<OwnedSlice, String>;\n+    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<OwnedSlice, String>;\n }\n \n pub type MetadataLoaderDyn = dyn MetadataLoader + Send + Sync + sync::DynSend + sync::DynSync;"}, {"sha": "874d578fe1db3827566eadcb25d6b609bf9f25ac", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -164,6 +164,7 @@ symbols! {\n         Capture,\n         Center,\n         Clone,\n+        ConstParamTy,\n         Context,\n         Continue,\n         Copy,\n@@ -1583,6 +1584,7 @@ symbols! {\n         unrestricted_attribute_tokens,\n         unsafe_block_in_unsafe_fn,\n         unsafe_cell,\n+        unsafe_cell_from_mut,\n         unsafe_no_drop_flag,\n         unsafe_pin_internals,\n         unsize,"}, {"sha": "744767aae44caa004f6ef25928d97becc8c2c6d6", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -2030,6 +2030,27 @@ impl<T> UnsafeCell<T> {\n }\n \n impl<T: ?Sized> UnsafeCell<T> {\n+    /// Converts from `&mut T` to `&mut UnsafeCell<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(unsafe_cell_from_mut)]\n+    /// use std::cell::UnsafeCell;\n+    ///\n+    /// let mut val = 42;\n+    /// let uc = UnsafeCell::from_mut(&mut val);\n+    ///\n+    /// *uc.get_mut() -= 1;\n+    /// assert_eq!(*uc.get_mut(), 41);\n+    /// ```\n+    #[inline(always)]\n+    #[unstable(feature = \"unsafe_cell_from_mut\", issue = \"111645\")]\n+    pub const fn from_mut(value: &mut T) -> &mut UnsafeCell<T> {\n+        // SAFETY: `UnsafeCell<T>` has the same memory layout as `T` due to #[repr(transparent)].\n+        unsafe { &mut *(value as *mut T as *mut UnsafeCell<T>) }\n+    }\n+\n     /// Gets a mutable pointer to the wrapped value.\n     ///\n     /// This can be cast to a pointer of any kind."}, {"sha": "201bacb28c7ee3381ee453852b1d0753552d7180", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -517,8 +517,6 @@ impl CStr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(cstr_is_empty)]\n-    ///\n     /// use std::ffi::CStr;\n     /// # use std::ffi::FromBytesWithNulError;\n     ///\n@@ -533,7 +531,8 @@ impl CStr {\n     /// # }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"cstr_is_empty\", issue = \"102444\")]\n+    #[stable(feature = \"cstr_is_empty\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"cstr_is_empty\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn is_empty(&self) -> bool {\n         // SAFETY: We know there is at least one byte; for empty strings it\n         // is the NUL terminator."}, {"sha": "ca45683d3d6b5c8a0b1c4f484be7829ebc2792ec", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -986,6 +986,14 @@ pub trait PointerLike {}\n #[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n pub trait ConstParamTy: StructuralEq {}\n \n+/// Derive macro generating an impl of the trait `Copy`.\n+#[rustc_builtin_macro]\n+#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+#[cfg(not(bootstrap))]\n+pub macro ConstParamTy($item:item) {\n+    /* compiler built-in */\n+}\n+\n // FIXME(generic_const_parameter_types): handle `ty::FnDef`/`ty::Closure`\n // FIXME(generic_const_parameter_types): handle `ty::Tuple`\n marker_impls! {"}, {"sha": "0809837d1fd7661aae2589914ed0afaab25d7f80", "filename": "src/tools/clippy/clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -289,10 +289,11 @@ fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expecte\n     let Some(id) = cx.typeck_results().qpath_res(path, pat.hir_id).opt_def_id() else { return false };\n \n     match expected_item {\n-        Item::Lang(expected_lang_item) => {\n-            let expected_id = cx.tcx.lang_items().require(expected_lang_item).unwrap();\n-            cx.tcx.parent(id) == expected_id\n-        },\n+        Item::Lang(expected_lang_item) => cx\n+            .tcx\n+            .lang_items()\n+            .get(expected_lang_item)\n+            .map_or(false, |expected_id| cx.tcx.parent(id) == expected_id),\n         Item::Diag(expected_ty, expected_variant) => {\n             let ty = cx.typeck_results().pat_ty(pat);\n "}, {"sha": "87ae83dd9660364cc6e58b1267a026caa6c8521f", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_good.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_good.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -11,6 +11,13 @@ struct S<T> {\n \n impl<T: ConstParamTy> ConstParamTy for S<T> {}\n \n+#[derive(PartialEq, Eq, ConstParamTy)]\n+struct D<T> {\n+    field: u8,\n+    gen: T,\n+}\n+\n+\n fn check<T: ConstParamTy + ?Sized>() {}\n \n fn main() {\n@@ -39,5 +46,8 @@ fn main() {\n     check::<S<u8>>();\n     check::<S<[&[bool]; 8]>>();\n \n+    check::<D<u8>>();\n+    check::<D<[&[bool]; 8]>>();\n+\n     // FIXME: test tuples\n }"}, {"sha": "74283a37afcaf071d33dbefdf770e789a9be39c1", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_bad_field.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -10,4 +10,8 @@ struct CantParam(NotParam);\n impl std::marker::ConstParamTy for CantParam {}\n //~^ error: the trait `ConstParamTy` cannot be implemented for this type\n \n+#[derive(std::marker::ConstParamTy, Eq, PartialEq)]\n+//~^ error: the trait `ConstParamTy` cannot be implemented for this type\n+struct CantParamDerive(NotParam);\n+\n fn main() {}"}, {"sha": "52b65d6061ab502515953f3018fe78baa3ac99fc", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_bad_field.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_bad_field.stderr?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -7,6 +7,17 @@ LL |\n LL | impl std::marker::ConstParamTy for CantParam {}\n    |                                    ^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0204]: the trait `ConstParamTy` cannot be implemented for this type\n+  --> $DIR/const_param_ty_impl_bad_field.rs:13:10\n+   |\n+LL | #[derive(std::marker::ConstParamTy, Eq, PartialEq)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct CantParamDerive(NotParam);\n+   |                        -------- this field does not implement `ConstParamTy`\n+   |\n+   = note: this error originates in the derive macro `std::marker::ConstParamTy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0204`."}, {"sha": "37986de481f111a9662557202aa2268bc9b979d3", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -10,6 +10,10 @@ struct CantParam(ImplementsConstParamTy);\n impl std::marker::ConstParamTy for CantParam {}\n //~^ error: the type `CantParam` does not `#[derive(Eq)]`\n \n+#[derive(std::marker::ConstParamTy)]\n+//~^ error: the type `CantParamDerive` does not `#[derive(Eq)]`\n+struct CantParamDerive(ImplementsConstParamTy);\n+\n fn check<T: std::marker::ConstParamTy>() {}\n \n fn main() {"}, {"sha": "52701d55914420d03e6910ecedac7a780012f414", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_no_structural_eq.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_no_structural_eq.stderr?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -7,6 +7,16 @@ LL | impl std::marker::ConstParamTy for CantParam {}\n note: required by a bound in `ConstParamTy`\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n \n-error: aborting due to previous error\n+error[E0277]: the type `CantParamDerive` does not `#[derive(Eq)]`\n+  --> $DIR/const_param_ty_impl_no_structural_eq.rs:13:10\n+   |\n+LL | #[derive(std::marker::ConstParamTy)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `StructuralEq` is not implemented for `CantParamDerive`\n+   |\n+note: required by a bound in `ConstParamTy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   = note: this error originates in the derive macro `std::marker::ConstParamTy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d70377a20c170054ce49dbabbe04afb5f0973282", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -0,0 +1,33 @@\n+#![allow(incomplete_features)]\n+#![feature(adt_const_params, structural_match)]\n+\n+union Union {\n+    a: u8,\n+}\n+\n+impl PartialEq for Union {\n+    fn eq(&self, other: &Union) -> bool {\n+        true\n+    }\n+}\n+impl Eq for Union {}\n+impl std::marker::StructuralEq for Union {}\n+\n+impl std::marker::ConstParamTy for Union {}\n+\n+#[derive(std::marker::ConstParamTy)]\n+//~^ ERROR this trait cannot be derived for unions\n+union UnionDerive {\n+    a: u8,\n+}\n+\n+impl PartialEq for UnionDerive {\n+    fn eq(&self, other: &UnionDerive) -> bool {\n+        true\n+    }\n+}\n+impl Eq for UnionDerive {}\n+impl std::marker::StructuralEq for UnionDerive {}\n+\n+\n+fn main() {}"}, {"sha": "293703046050357d0a9c04c52fd3e8ca68ed97d4", "filename": "tests/ui/const-generics/adt_const_params/const_param_ty_impl_union.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fadt_const_params%2Fconst_param_ty_impl_union.stderr?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -0,0 +1,8 @@\n+error: this trait cannot be derived for unions\n+  --> $DIR/const_param_ty_impl_union.rs:18:10\n+   |\n+LL | #[derive(std::marker::ConstParamTy)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "92a205f14d9d1ffb3f386ce81c83b0b10a6b16a3", "filename": "tests/ui/offset-of/offset-of-arg-count.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -12,6 +12,11 @@ fn main() {\n     offset_of!(S, f.,); //~ ERROR expected identifier\n     offset_of!(S, f..); //~ ERROR no rules expected the token\n     offset_of!(S, f..,); //~ ERROR no rules expected the token\n+    offset_of!(Lt<'static>, bar); // issue #111657\n+\n }\n \n struct S { f: u8, }\n+struct Lt<'a> {\n+    bar: &'a (),\n+}"}]}