{"sha": "fd4a3362ca607f1c3cfaf2b0c8f1c7dfdb808105", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNGEzMzYyY2E2MDdmMWMzY2ZhZjJiMGM4ZjFjN2RmZGI4MDgxMDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-14T15:49:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-14T15:49:23Z"}, "message": "Rollup merge of #59900 - czipperz:remove-bracket-mut-syntax-in-pin-docs, r=RalfJung\n\nRemove [mut] syntax in pin docs\n\nResolves #59832", "tree": {"sha": "081a0f95806d030e750e9c6c12347db0bd429d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/081a0f95806d030e750e9c6c12347db0bd429d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd4a3362ca607f1c3cfaf2b0c8f1c7dfdb808105", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcs1aDCRBK7hj4Ov3rIwAAdHIIAJAAXXeQovpwZ/S6BXgnRiXF\nKJo6USZYkVx7AjsuDtBUluTajDu5mVe7VK5lJtUDJifmOzEIo3D601DVdq3/aiqI\n3XawNqXY3no5rFFJAunIC+bifgFyDbY8VxTFSHZuXMbJGGeY2ccVAMx6pot5kfmD\nSl7JlH9cnU4uY8HCB0k2rCeLxi/bBF62WtqR9yvPczjPnI9ydgfmwN94nIV8J9Op\nkKDJMFMkAaXPQuXa6Y75oNxXub4uGt1e5pKYhB/TVY7n7omKG671z6eXNkPsk1y0\n8mJxqjqaxOKnnar+wHrHU3lr7fGVBh2yIt/6LiqKlDMzKtHJ4WAhBxwAEfgdQgA=\n=wueX\n-----END PGP SIGNATURE-----\n", "payload": "tree 081a0f95806d030e750e9c6c12347db0bd429d44\nparent 99a91094ec714b5414b3eecc662fa6d9e4589dc9\nparent b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555256963 +0200\ncommitter GitHub <noreply@github.com> 1555256963 +0200\n\nRollup merge of #59900 - czipperz:remove-bracket-mut-syntax-in-pin-docs, r=RalfJung\n\nRemove [mut] syntax in pin docs\n\nResolves #59832\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4a3362ca607f1c3cfaf2b0c8f1c7dfdb808105", "html_url": "https://github.com/rust-lang/rust/commit/fd4a3362ca607f1c3cfaf2b0c8f1c7dfdb808105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd4a3362ca607f1c3cfaf2b0c8f1c7dfdb808105/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99a91094ec714b5414b3eecc662fa6d9e4589dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/99a91094ec714b5414b3eecc662fa6d9e4589dc9", "html_url": "https://github.com/rust-lang/rust/commit/99a91094ec714b5414b3eecc662fa6d9e4589dc9"}, {"sha": "b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe", "html_url": "https://github.com/rust-lang/rust/commit/b754b8fb8eaa580753ea3f7bc52fa221cef2a9fe"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "d1ebe5ed72adf16304b5aeaa7a0d4dfe6bf7c64e", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd4a3362ca607f1c3cfaf2b0c8f1c7dfdb808105/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4a3362ca607f1c3cfaf2b0c8f1c7dfdb808105/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=fd4a3362ca607f1c3cfaf2b0c8f1c7dfdb808105", "patch": "@@ -158,28 +158,32 @@\n //! is called *even if your type was previously pinned*! It is as if the\n //! compiler automatically called `get_unchecked_mut`.\n //!\n-//! This can never cause a problem in safe code because implementing a type that relies on pinning\n-//! requires unsafe code, but be aware that deciding to make use of pinning\n-//! in your type (for example by implementing some operation on `Pin<&[mut] Self>`)\n-//! has consequences for your `Drop` implementation as well: if an element\n-//! of your type could have been pinned, you must treat Drop as implicitly taking\n-//! `Pin<&mut Self>`.\n+//! This can never cause a problem in safe code because implementing a type that\n+//! relies on pinning requires unsafe code, but be aware that deciding to make\n+//! use of pinning in your type (for example by implementing some operation on\n+//! `Pin<&Self>` or `Pin<&mut Self>`) has consequences for your `Drop`\n+//! implementation as well: if an element of your type could have been pinned,\n+//! you must treat Drop as implicitly taking `Pin<&mut Self>`.\n //!\n //! In particular, if your type is `#[repr(packed)]`, the compiler will automatically\n //! move fields around to be able to drop them. As a consequence, you cannot use\n //! pinning with a `#[repr(packed)]` type.\n //!\n //! # Projections and Structural Pinning\n //!\n-//! One interesting question arises when considering the interaction of pinning and\n-//! the fields of a struct. When can a struct have a \"pinning projection\", i.e.,\n-//! an operation with type `fn(Pin<&[mut] Struct>) -> Pin<&[mut] Field>`?\n-//! In a similar vein, when can a generic wrapper type (such as `Vec<T>`, `Box<T>`, or `RefCell<T>`)\n-//! have an operation with type `fn(Pin<&[mut] Wrapper<T>>) -> Pin<&[mut] T>`?\n+//! One interesting question arises when considering the interaction of pinning\n+//! and the fields of a struct. When can a struct have a \"pinning projection\",\n+//! i.e., an operation with type `fn(Pin<&Struct>) -> Pin<&Field>`?  In a\n+//! similar vein, when can a generic wrapper type (such as `Vec<T>`, `Box<T>`,\n+//! or `RefCell<T>`) have an operation with type `fn(Pin<&Wrapper<T>>) ->\n+//! Pin<&T>`?\n+//!\n+//! Note: For the entirety of this discussion, the same applies for mutable references as it\n+//! does for shared references.\n //!\n //! Having a pinning projection for some field means that pinning is \"structural\":\n //! when the wrapper is pinned, the field must be considered pinned, too.\n-//! After all, the pinning projection lets us get a `Pin<&[mut] Field>`.\n+//! After all, the pinning projection lets us get a `Pin<&Field>`.\n //!\n //! However, structural pinning comes with a few extra requirements, so not all\n //! wrappers can be structural and hence not all wrappers can offer pinning projections:"}]}