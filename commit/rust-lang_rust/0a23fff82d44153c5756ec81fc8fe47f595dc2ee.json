{"sha": "0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "node_id": "C_kwDOAAsO6NoAKDBhMjNmZmY4MmQ0NDE1M2M1NzU2ZWM4MWZjOGZlNDdmNTk1ZGMyZWU", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-14T18:28:30Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-15T07:36:58Z"}, "message": "Fix clippy with changed macro statement spans", "tree": {"sha": "97d33d8b0cf32a31ee03a279e4d46d760f93afba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d33d8b0cf32a31ee03a279e4d46d760f93afba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "html_url": "https://github.com/rust-lang/rust/commit/0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "049ab82662d4f63bd88bdcba97b172421f906dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/049ab82662d4f63bd88bdcba97b172421f906dd5", "html_url": "https://github.com/rust-lang/rust/commit/049ab82662d4f63bd88bdcba97b172421f906dd5"}], "stats": {"total": 256, "additions": 126, "deletions": 130}, "files": [{"sha": "b7385dcfbca19a38a4165a1f676d1f8c52c577bf", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{source_map::Span, symbol::Symbol, BytePos};\n@@ -432,10 +432,11 @@ fn emit_branches_sharing_code_lint(\n     let mut add_expr_note = false;\n \n     // Construct suggestions\n+    let sm = cx.sess().source_map();\n     if start_stmts > 0 {\n         let block = blocks[0];\n         let span_start = first_line_of_span(cx, if_expr.span).shrink_to_lo();\n-        let span_end = block.stmts[start_stmts - 1].span.source_callsite();\n+        let span_end = sm.stmt_span(block.stmts[start_stmts - 1].span, block.span);\n \n         let cond_span = first_line_of_span(cx, if_expr.span).until(block.span);\n         let cond_snippet = reindent_multiline(snippet(cx, cond_span, \"_\"), false, None);\n@@ -454,15 +455,16 @@ fn emit_branches_sharing_code_lint(\n         let span_end = block.span.shrink_to_hi();\n \n         let moved_start = if end_stmts == 0 && block.expr.is_some() {\n-            block.expr.unwrap().span\n+            block.expr.unwrap().span.source_callsite()\n         } else {\n-            block.stmts[block.stmts.len() - end_stmts].span\n-        }\n-        .source_callsite();\n+            sm.stmt_span(block.stmts[block.stmts.len() - end_stmts].span, block.span)\n+        };\n         let moved_end = block\n             .expr\n-            .map_or_else(|| block.stmts[block.stmts.len() - 1].span, |expr| expr.span)\n-            .source_callsite();\n+            .map_or_else(\n+                || sm.stmt_span(block.stmts[block.stmts.len() - 1].span, block.span),\n+                |expr| expr.span.source_callsite(),\n+            );\n \n         let moved_span = moved_start.to(moved_end);\n         let moved_snipped = reindent_multiline(snippet(cx, moved_span, \"_\"), true, None);"}, {"sha": "37d9ea3bdc117cae4b4e917425751ec27e155213", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -90,12 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n     }\n }\n \n-fn span_useless_format(cx: &LateContext<'_>, span: Span, mut sugg: String, mut applicability: Applicability) {\n-    // The callsite span contains the statement semicolon for some reason.\n-    if snippet_with_applicability(cx, span, \"..\", &mut applicability).ends_with(';') {\n-        sugg.push(';');\n-    }\n-\n+fn span_useless_format(cx: &LateContext<'_>, span: Span, sugg: String, applicability: Applicability) {\n     span_lint_and_sugg(\n         cx,\n         USELESS_FORMAT,"}, {"sha": "7aa93ed783920a943ae44caaa23128dbfc4b9990", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -36,9 +36,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::{indent_of, snippet, snippet_block};\n use rustc_ast::ast;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -270,7 +269,7 @@ struct LintData<'a> {\n     /// The 0-based index of the `if` statement in the containing loop block.\n     stmt_idx: usize,\n     /// The statements of the loop block.\n-    block_stmts: &'a [ast::Stmt],\n+    loop_block: &'a ast::Block,\n }\n \n const MSG_REDUNDANT_CONTINUE_EXPRESSION: &str = \"this `continue` expression is redundant\";\n@@ -343,10 +342,10 @@ fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data:\n     let indent = span_of_first_expr_in_block(data.if_block)\n         .and_then(|span| indent_of(cx, span))\n         .unwrap_or(0);\n-    let to_annex = data.block_stmts[data.stmt_idx + 1..]\n+    let to_annex = data.loop_block.stmts[data.stmt_idx + 1..]\n         .iter()\n-        .map(|stmt| original_sp(stmt.span, DUMMY_SP))\n-        .map(|span| {\n+        .map(|stmt| {\n+            let span = cx.sess().source_map().stmt_span(stmt.span, data.loop_block.span);\n             let snip = snippet_block(cx, span, \"..\", None).into_owned();\n             snip.lines()\n                 .map(|line| format!(\"{}{}\", \" \".repeat(indent), line))\n@@ -393,7 +392,7 @@ fn check_and_warn<'a>(cx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n                     if_cond: cond,\n                     if_block: then_block,\n                     else_expr,\n-                    block_stmts: &loop_block.stmts,\n+                    loop_block,\n                 };\n                 if needless_continue_in_else(else_expr, label) {\n                     emit_warning("}, {"sha": "039b23b1bdb2f28a02e67619cdf4c5eb0b4f194f", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -82,13 +82,13 @@ error: use of irregular braces for `eprint!` macro\n   --> $DIR/conf_nonstandard_macro_braces.rs:57:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider writing `eprint![\"test if user config overrides defaults\"];`\n+help: consider writing `eprint![\"test if user config overrides defaults\"]`\n   --> $DIR/conf_nonstandard_macro_braces.rs:57:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "409f4db76bc256e1b676a9c41535c699414dc401", "filename": "tests/ui/asm_syntax.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fasm_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fasm_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm_syntax.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -2,7 +2,7 @@ error: Intel x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:9:9\n    |\n LL |         asm!(\"\");\n-   |         ^^^^^^^^^\n+   |         ^^^^^^^^\n    |\n    = note: `-D clippy::inline-asm-x86-intel-syntax` implied by `-D warnings`\n    = help: use AT&T x86 assembly syntax\n@@ -11,23 +11,23 @@ error: Intel x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:10:9\n    |\n LL |         asm!(\"\", options());\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use AT&T x86 assembly syntax\n \n error: Intel x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:11:9\n    |\n LL |         asm!(\"\", options(nostack));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use AT&T x86 assembly syntax\n \n error: AT&T x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:23:9\n    |\n LL |         asm!(\"\", options(att_syntax));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::inline-asm-x86-att-syntax` implied by `-D warnings`\n    = help: use Intel x86 assembly syntax\n@@ -36,7 +36,7 @@ error: AT&T x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:24:9\n    |\n LL |         asm!(\"\", options(nostack, att_syntax));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use Intel x86 assembly syntax\n "}, {"sha": "4ca1e6f6e88cc783cf0b2ecd25d9b0c44ddfea5e", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -2,7 +2,7 @@ error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:11:5\n    |\n LL |     assert!(true);\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n    = help: remove it\n@@ -12,7 +12,7 @@ error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false);\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -21,7 +21,7 @@ error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:13:5\n    |\n LL |     assert!(true, \"true message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -30,7 +30,7 @@ error: `assert!(false, \"false message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:14:5\n    |\n LL |     assert!(false, \"false message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -39,7 +39,7 @@ error: `assert!(false, msg.to_uppercase())` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:17:5\n    |\n LL |     assert!(false, msg.to_uppercase());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(msg.to_uppercase())` or `unreachable!(msg.to_uppercase())`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -48,7 +48,7 @@ error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:20:5\n    |\n LL |     assert!(B);\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -57,7 +57,7 @@ error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:23:5\n    |\n LL |     assert!(C);\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -66,7 +66,7 @@ error: `assert!(false, \"C message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:24:5\n    |\n LL |     assert!(C, \"C message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -75,7 +75,7 @@ error: `debug_assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:26:5\n    |\n LL |     debug_assert!(true);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in the macro `$crate::assert` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "377d51be4cde7438cad96c7e5b6cd583a0f3dfbe", "filename": "tests/ui/bool_assert_comparison.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fbool_assert_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fbool_assert_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -2,135 +2,135 @@ error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:69:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n    |\n    = note: `-D clippy::bool-assert-comparison` implied by `-D warnings`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:70:5\n    |\n LL |     assert_eq!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:71:5\n    |\n LL |     assert_eq!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:76:5\n    |\n LL |     assert_eq!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:79:5\n    |\n LL |     assert_ne!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:80:5\n    |\n LL |     assert_ne!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:81:5\n    |\n LL |     assert_ne!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:86:5\n    |\n LL |     assert_ne!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:89:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:90:5\n    |\n LL |     debug_assert_eq!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:91:5\n    |\n LL |     debug_assert_eq!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:96:5\n    |\n LL |     debug_assert_eq!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:99:5\n    |\n LL |     debug_assert_ne!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:100:5\n    |\n LL |     debug_assert_ne!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:101:5\n    |\n LL |     debug_assert_ne!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:106:5\n    |\n LL |     debug_assert_ne!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:111:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:112:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:113:5\n    |\n LL |     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:118:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:119:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:120:5\n    |\n LL |     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: aborting due to 22 previous errors\n "}, {"sha": "34131592802174733460089058730462605bf25f", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -71,7 +71,7 @@ LL |             $a.unwrap(); // unnecessary\n    |             ^^^^^^^^^^^\n ...\n LL |     m!(x);\n-   |     ------ in this macro invocation\n+   |     ----- in this macro invocation\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "46b645aea135cd78d0e50158cbfde73ab0d0b63b", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -46,7 +46,7 @@ LL | |                     },\n    | |_____________________^\n ...\n LL |           mac!(res_opt => Ok(val), val => Some(n), foo(n));\n-   |           ------------------------------------------------- in this macro invocation\n+   |           ------------------------------------------------ in this macro invocation\n    |\n help: the outer pattern can be modified to include the inner pattern\n   --> $DIR/collapsible_match2.rs:46:28"}, {"sha": "db0cb25e34a0f7c703f63aa607a6eb40abb13222", "filename": "tests/ui/crashes/ice-6255.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -5,7 +5,7 @@ LL |         extern crate std as core;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | define_other_core!();\n-   | --------------------- in this macro invocation\n+   | -------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `define_other_core` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "fd0689dfc4c99db4dbc8dce74d0b2d3566e97e10", "filename": "tests/ui/declare_interior_mutable_const/others.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -31,7 +31,7 @@ LL |         const $name: $ty = $e;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n-   | ------------------------------------------ in this macro invocation\n+   | ----------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "7debe059ff4ee5538e7b6a0973b1e4fd70145978", "filename": "tests/ui/declare_interior_mutable_const/traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -13,7 +13,7 @@ LL |         const $name: $ty = $e;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     declare_const!(ANOTHER_ATOMIC: AtomicUsize = Self::ATOMIC); //~ ERROR interior mutable\n-   |     ----------------------------------------------------------- in this macro invocation\n+   |     ---------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f8a2407b6933d8d6be71bf32087083eeee09b79b", "filename": "tests/ui/default_numeric_fallback_f64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -139,7 +139,7 @@ LL |             let x = 22.;\n    |                     ^^^ help: consider adding suffix: `22.0_f64`\n ...\n LL |         internal_macro!();\n-   |         ------------------ in this macro invocation\n+   |         ----------------- in this macro invocation\n    |\n    = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "6f9e124704b2c76834dd95840a8cebfecec1d589", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -151,7 +151,7 @@ LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`\n ...\n LL |         internal_macro!();\n-   |         ------------------ in this macro invocation\n+   |         ----------------- in this macro invocation\n    |\n    = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d68b8a0c67be68fda36fdfd3b961ed6f3ff97945", "filename": "tests/ui/doc_unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -47,7 +47,7 @@ LL | |         }\n    | |_________^\n ...\n LL |   very_unsafe!();\n-   |   --------------- in this macro invocation\n+   |   -------------- in this macro invocation\n    |\n    = note: this error originates in the macro `very_unsafe` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "885415b42c78735c2c12bdfe385a9aea8a821292", "filename": "tests/ui/eq_op_macros.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Feq_op_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Feq_op_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op_macros.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -5,7 +5,7 @@ LL |         assert_eq!(a, a);\n    |                    ^^^^\n ...\n LL |     assert_in_macro_def!();\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = note: `-D clippy::eq-op` implied by `-D warnings`\n    = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -17,7 +17,7 @@ LL |         assert_ne!(a, a);\n    |                    ^^^^\n ...\n LL |     assert_in_macro_def!();\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -52,7 +52,7 @@ LL |         debug_assert_eq!(a, a);\n    |                          ^^^^\n ...\n LL |     assert_in_macro_def!();\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -63,7 +63,7 @@ LL |         debug_assert_ne!(a, a);\n    |                          ^^^^\n ...\n LL |     assert_in_macro_def!();\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f5d0b98c10862cd11a4db14d65c484f90c988dd4", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -37,7 +37,7 @@ note: potential failure(s)\n   --> $DIR/fallible_impl_from.rs:30:13\n    |\n LL |             panic!();\n-   |             ^^^^^^^^^\n+   |             ^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n@@ -60,11 +60,11 @@ LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n LL |         if !s.is_empty() {\n LL |             panic!(\"42\");\n-   |             ^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^\n LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n-   |             ^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n@@ -86,7 +86,7 @@ note: potential failure(s)\n LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n-   |             ^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "701399b32d62834a9d993339b83df1f5ba8d03ab", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -2,21 +2,21 @@ error: useless use of `format!`\n   --> $DIR/format.rs:13:5\n    |\n LL |     format!(\"foo\");\n-   |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:14:5\n    |\n LL |     format!(\"{{}}\");\n-   |     ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string();`\n+   |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:15:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:16:5\n@@ -25,61 +25,61 @@ LL | /     format!(\n LL | |         r##\"foo {{}}\n LL | | \" bar\"##\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n help: consider using `.to_string()`\n    |\n LL ~     r##\"foo {}\n-LL + \" bar\"##.to_string();\n+LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n   --> $DIR/format.rs:21:5\n    |\n LL |     format!(\"{}\", \"foo\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:25:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:26:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:31:5\n    |\n LL |     format!(\"{}\", arg);\n-   |     ^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:35:5\n    |\n LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:36:5\n    |\n LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:63:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:65:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:69:18"}, {"sha": "3f5f56b923fe2453b25e792bc9b5a912f880cd90", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -107,7 +107,7 @@ LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n ...\n LL | gen!(impl);\n-   | ----------- in this macro invocation\n+   | ---------- in this macro invocation\n    |\n    = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n@@ -126,7 +126,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n    |                                 ^^^^^^^^^^^^^^^^^\n ...\n LL | gen!(fn bar);\n-   | ------------- in this macro invocation\n+   | ------------ in this macro invocation\n    |\n    = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n@@ -141,7 +141,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n    |                                                               ^^^^^^^^^^^^\n ...\n LL | gen!(fn bar);\n-   | ------------- in this macro invocation\n+   | ------------ in this macro invocation\n    |\n    = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter"}, {"sha": "ab4a6374c73cae3dbfe7ddf84ebedd7e0e0a1b4c", "filename": "tests/ui/item_after_statement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -25,7 +25,7 @@ LL | |             }\n    | |_____________^\n ...\n LL |       b!();\n-   |       ----- in this macro invocation\n+   |       ---- in this macro invocation\n    |\n    = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "dd69ab8b5efb80bc8069b3c0590830079cdea50b", "filename": "tests/ui/mem_replace_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -5,7 +5,7 @@ LL |         std::mem::replace($s, Default::default())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     take!(s);\n-   |     --------- in this macro invocation\n+   |     -------- in this macro invocation\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n    = note: this error originates in the macro `take` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "b863063b626dbe68183eda66c717ef6156b78881", "filename": "tests/ui/missing_panics_doc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fmissing_panics_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fmissing_panics_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_panics_doc.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -91,7 +91,7 @@ note: first possible panic found here\n   --> $DIR/missing_panics_doc.rs:39:5\n    |\n LL |     assert_eq!(x, 0);\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n@@ -107,7 +107,7 @@ note: first possible panic found here\n   --> $DIR/missing_panics_doc.rs:45:5\n    |\n LL |     assert_ne!(x, 0);\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors"}, {"sha": "f56c2d03c664fb2d98448f7127c92acabb6b2bdc", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -13,7 +13,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:9:9\n    |\n LL |         panic!(\"error\");\n-   |         ^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -30,7 +30,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:14:9\n    |\n LL |         unimplemented!();\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -47,7 +47,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:19:9\n    |\n LL |         unreachable!();\n-   |         ^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -64,7 +64,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:24:9\n    |\n LL |         todo!(\"Finish this\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -81,7 +81,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:55:5\n    |\n LL |     panic!(\"error\");\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -98,7 +98,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:69:5\n    |\n LL |     todo!(\"finish main method\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors"}, {"sha": "7501d6d85edd78f1e0c1d375af6bc4d570cac889", "filename": "tests/ui/panic_in_result_fn_assertions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -14,7 +14,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:9:9\n    |\n LL |         assert!(x == 5, \"wrong argument\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -32,7 +32,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:15:9\n    |\n LL |         assert_eq!(x, 5);\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -50,7 +50,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:21:9\n    |\n LL |         assert_ne!(x, 1);\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "2b607ff5888958bffad99388acc43754d1524264", "filename": "tests/ui/panicking_macros.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -2,27 +2,27 @@ error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:8:5\n    |\n LL |     panic!();\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n    |\n    = note: `-D clippy::panic` implied by `-D warnings`\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:9:5\n    |\n LL |     panic!(\"message\");\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:10:5\n    |\n LL |     panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:16:5\n    |\n LL |     todo!();\n-   |     ^^^^^^^^\n+   |     ^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -31,23 +31,23 @@ error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:17:5\n    |\n LL |     todo!(\"message\");\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:18:5\n    |\n LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:24:5\n    |\n LL |     unimplemented!();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -56,23 +56,23 @@ error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:25:5\n    |\n LL |     unimplemented!(\"message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:26:5\n    |\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:32:5\n    |\n LL |     unreachable!();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -81,45 +81,45 @@ error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:33:5\n    |\n LL |     unreachable!(\"message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `$crate::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:34:5\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:40:5\n    |\n LL |     panic!();\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:41:5\n    |\n LL |     todo!();\n-   |     ^^^^^^^^\n+   |     ^^^^^^^\n    |\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:42:5\n    |\n LL |     unimplemented!();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:43:5\n    |\n LL |     unreachable!();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "12b3d3a8bd075cbe97bfe8d85769d992ce38e21e", "filename": "tests/ui/pattern_type_mismatch/syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -70,7 +70,7 @@ LL |                 Some(_) => (),\n    |                 ^^^^^^^\n ...\n LL |     matching_macro!(value);\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n    = note: this error originates in the macro `matching_macro` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "9c853020ab0191a3907fb62f4a1816e0746d3990", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -37,7 +37,7 @@ LL |         let ref _y = 42;\n    |         ----^^^^^^------ help: try: `let _y = &42;`\n ...\n LL |         gen_binding!();\n-   |         --------------- in this macro invocation\n+   |         -------------- in this macro invocation\n    |\n    = note: this error originates in the macro `gen_binding` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e97011c7fd51fa3e9e1c3db512ec0283c2c8e30f", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -13,7 +13,7 @@ LL |         fn fun_example(ref _x: usize) {}\n    |                        ^^^^^^\n ...\n LL |         gen_function!();\n-   |         ---------------- in this macro invocation\n+   |         --------------- in this macro invocation\n    |\n    = note: this error originates in the macro `gen_function` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "0cb1328fbfcf0c733d48fd7c78930f456e741a6f", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -35,7 +35,7 @@ LL |             Err(_) => Err(1)?,\n    |                       ^^^^^^^ help: try this: `return Err(1)`\n ...\n LL |     try_validation!(Ok::<_, i32>(5));\n-   |     --------------------------------- in this macro invocation\n+   |     -------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try_validation` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -46,7 +46,7 @@ LL |             Err(_) => Err(ret_one!())?,\n    |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n ...\n LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n-   |     ------------------------------------------ in this macro invocation\n+   |     ----------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try_validation_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2b5a7b348b982c13d6a9f6eda9faefc1d3cdfb23", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a23fff82d44153c5756ec81fc8fe47f595dc2ee/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=0a23fff82d44153c5756ec81fc8fe47f595dc2ee", "patch": "@@ -32,7 +32,7 @@ LL | |         },\n ...  |\n LL | |         }\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -46,7 +46,7 @@ LL | |         },\n ...  |\n LL | |         }\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n    = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -60,7 +60,7 @@ LL | |         },\n ...  |\n LL | |         }\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n    = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -74,7 +74,7 @@ LL | |         },\n ...  |\n LL | |         }\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n    = note: this error originates in the macro `$crate::assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}]}