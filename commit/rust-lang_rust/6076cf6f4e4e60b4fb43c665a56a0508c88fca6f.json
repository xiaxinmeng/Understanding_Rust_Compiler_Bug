{"sha": "6076cf6f4e4e60b4fb43c665a56a0508c88fca6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNzZjZjZmNGU0ZTYwYjRmYjQzYzY2NWE1NmEwNTA4Yzg4ZmNhNmY=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-01-03T19:00:11Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-01-03T19:00:11Z"}, "message": "Remove `T: Ord` bound from `BTreeSet::{is_empty, len}`", "tree": {"sha": "dc99a4f20b3e7b12068ca2f172266357ad29f70b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc99a4f20b3e7b12068ca2f172266357ad29f70b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6076cf6f4e4e60b4fb43c665a56a0508c88fca6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6076cf6f4e4e60b4fb43c665a56a0508c88fca6f", "html_url": "https://github.com/rust-lang/rust/commit/6076cf6f4e4e60b4fb43c665a56a0508c88fca6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6076cf6f4e4e60b4fb43c665a56a0508c88fca6f/comments", "author": null, "committer": null, "parents": [{"sha": "8d1a30289ea13c433a92e31627f8533350835328", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1a30289ea13c433a92e31627f8533350835328", "html_url": "https://github.com/rust-lang/rust/commit/8d1a30289ea13c433a92e31627f8533350835328"}], "stats": {"total": 140, "additions": 68, "deletions": 72}, "files": [{"sha": "2807bbaca0c893c5c5879d79aa417b8efbf5aa67", "filename": "src/liballoc/btree/set.rs", "status": "modified", "additions": 68, "deletions": 72, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/6076cf6f4e4e60b4fb43c665a56a0508c88fca6f/src%2Fliballoc%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6076cf6f4e4e60b4fb43c665a56a0508c88fca6f/src%2Fliballoc%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fset.rs?ref=6076cf6f4e4e60b4fb43c665a56a0508c88fca6f", "patch": "@@ -228,43 +228,7 @@ impl<T: Ord> BTreeSet<T> {\n     pub fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }\n-}\n-\n-impl<T> BTreeSet<T> {\n-    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();\n-    /// let mut set_iter = set.iter();\n-    /// assert_eq!(set_iter.next(), Some(&1));\n-    /// assert_eq!(set_iter.next(), Some(&2));\n-    /// assert_eq!(set_iter.next(), Some(&3));\n-    /// assert_eq!(set_iter.next(), None);\n-    /// ```\n-    ///\n-    /// Values returned by the iterator are returned in ascending order:\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();\n-    /// let mut set_iter = set.iter();\n-    /// assert_eq!(set_iter.next(), Some(&1));\n-    /// assert_eq!(set_iter.next(), Some(&2));\n-    /// assert_eq!(set_iter.next(), Some(&3));\n-    /// assert_eq!(set_iter.next(), None);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n-        Iter { iter: self.map.keys() }\n-    }\n-}\n \n-impl<T: Ord> BTreeSet<T> {\n     /// Constructs a double-ended iterator over a sub-range of elements in the set.\n     /// The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n     /// yield elements from min (inclusive) to max (exclusive).\n@@ -293,9 +257,7 @@ impl<T: Ord> BTreeSet<T> {\n     {\n         Range { iter: self.map.range(range) }\n     }\n-}\n \n-impl<T: Ord> BTreeSet<T> {\n     /// Visits the values representing the difference,\n     /// i.e. the values that are in `self` but not in `other`,\n     /// in ascending order.\n@@ -408,40 +370,6 @@ impl<T: Ord> BTreeSet<T> {\n         }\n     }\n \n-    /// Returns the number of elements in the set.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let mut v = BTreeSet::new();\n-    /// assert_eq!(v.len(), 0);\n-    /// v.insert(1);\n-    /// assert_eq!(v.len(), 1);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn len(&self) -> usize {\n-        self.map.len()\n-    }\n-\n-    /// Returns `true` if the set contains no elements.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let mut v = BTreeSet::new();\n-    /// assert!(v.is_empty());\n-    /// v.insert(1);\n-    /// assert!(!v.is_empty());\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_empty(&self) -> bool {\n-        self.len() == 0\n-    }\n-\n     /// Clears the set, removing all values.\n     ///\n     /// # Examples\n@@ -724,6 +652,74 @@ impl<T: Ord> BTreeSet<T> {\n     }\n }\n \n+impl<T> BTreeSet<T> {\n+    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();\n+    /// let mut set_iter = set.iter();\n+    /// assert_eq!(set_iter.next(), Some(&1));\n+    /// assert_eq!(set_iter.next(), Some(&2));\n+    /// assert_eq!(set_iter.next(), Some(&3));\n+    /// assert_eq!(set_iter.next(), None);\n+    /// ```\n+    ///\n+    /// Values returned by the iterator are returned in ascending order:\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();\n+    /// let mut set_iter = set.iter();\n+    /// assert_eq!(set_iter.next(), Some(&1));\n+    /// assert_eq!(set_iter.next(), Some(&2));\n+    /// assert_eq!(set_iter.next(), Some(&3));\n+    /// assert_eq!(set_iter.next(), None);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn iter(&self) -> Iter<T> {\n+        Iter { iter: self.map.keys() }\n+    }\n+\n+    /// Returns the number of elements in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut v = BTreeSet::new();\n+    /// assert_eq!(v.len(), 0);\n+    /// v.insert(1);\n+    /// assert_eq!(v.len(), 1);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn len(&self) -> usize {\n+        self.map.len()\n+    }\n+\n+    /// Returns `true` if the set contains no elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut v = BTreeSet::new();\n+    /// assert!(v.is_empty());\n+    /// v.insert(1);\n+    /// assert!(!v.is_empty());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> BTreeSet<T> {"}]}