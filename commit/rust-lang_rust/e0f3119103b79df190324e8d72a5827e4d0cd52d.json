{"sha": "e0f3119103b79df190324e8d72a5827e4d0cd52d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZjMxMTkxMDNiNzlkZjE5MDMyNGU4ZDcyYTU4MjdlNGQwY2Q1MmQ=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-05T16:30:39Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-14T19:25:27Z"}, "message": "Introduce `TypeVisitor::BreakTy`", "tree": {"sha": "143c0a738920c72019b6304f073ee690da445927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/143c0a738920c72019b6304f073ee690da445927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f3119103b79df190324e8d72a5827e4d0cd52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f3119103b79df190324e8d72a5827e4d0cd52d", "html_url": "https://github.com/rust-lang/rust/commit/e0f3119103b79df190324e8d72a5827e4d0cd52d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f3119103b79df190324e8d72a5827e4d0cd52d/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e49a9ead550551e879af64ba91a0316da1c422", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e49a9ead550551e879af64ba91a0316da1c422", "html_url": "https://github.com/rust-lang/rust/commit/30e49a9ead550551e879af64ba91a0316da1c422"}], "stats": {"total": 285, "additions": 157, "deletions": 128}, "files": [{"sha": "b0d9daf3927c14c0eb4857ed9af9a34346890587", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -1498,7 +1498,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n-            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(t) {\n                     let span = self.tcx.def_span(def_id);\n                     // Avoid cluttering the output when the \"found\" and error span overlap:"}, {"sha": "7b0deb45f868423e82a4ca9957296b7cb9d2cbb4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -474,7 +474,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n struct TraitObjectVisitor(Vec<DefId>);\n \n impl TypeVisitor<'_> for TraitObjectVisitor {\n-    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Dynamic(preds, RegionKind::ReStatic) => {\n                 if let Some(def_id) = preds.principal_def_id() {"}, {"sha": "0b2847658f71e15bc3f215129345354af1e0c3b8", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -741,15 +741,18 @@ struct ScopeInstantiator<'me, 'tcx> {\n }\n \n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &ty::Binder<T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.target_index.shift_in(1);\n         t.super_visit_with(self);\n         self.target_index.shift_out(1);\n \n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let ScopeInstantiator { bound_region_scope, next_region, .. } = self;\n \n         match r {"}, {"sha": "e2531dc7ad9d6fb6b969bdd348fe7508a922acfd", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> UnresolvedTypeFinder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let t = self.infcx.shallow_resolve(t);\n         if t.has_infer_types() {\n             if let ty::Infer(infer_ty) = *t.kind() {"}, {"sha": "d6500f62e785140ace33684896b73eed0a9b3315", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -69,7 +69,7 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)\n     }\n }"}, {"sha": "802fb1970cd7e505c48fd29cc183c18c7cf63b5d", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -1135,7 +1135,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         };\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match ty.kind() {\n                     ty::Opaque(..) => {\n                         self.ty = Some(ty);"}, {"sha": "18d7affa75dea9ba19c49472c97584eaec352a42", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -35,7 +35,7 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n             fn super_visit_with<__F: ::rustc_middle::ty::fold::TypeVisitor<'tcx>>(\n                 &self,\n                 __folder: &mut __F\n-            ) -> ::std::ops::ControlFlow<()> {\n+            ) -> ::std::ops::ControlFlow<__F::BreakTy> {\n                 match *self { #body_visit }\n                 ::std::ops::ControlFlow::CONTINUE\n             }"}, {"sha": "cdc5940d9baedc878b8d576e5eded5134892706d", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -51,6 +51,7 @@\n #![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]\n+#![feature(associated_type_defaults)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "057f2615a44c642894d7c225f6d33cb9a13a7a11", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -62,7 +62,7 @@ macro_rules! CloneTypeFoldableImpls {\n                 fn super_visit_with<F: $crate::ty::fold::TypeVisitor<$tcx>>(\n                     &self,\n                     _: &mut F)\n-                    -> ::std::ops::ControlFlow<()>\n+                    -> ::std::ops::ControlFlow<F::BreakTy>\n                 {\n                     ::std::ops::ControlFlow::CONTINUE\n                 }\n@@ -105,7 +105,7 @@ macro_rules! EnumTypeFoldableImpl {\n             fn super_visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n                 &self,\n                 visitor: &mut V,\n-            ) -> ::std::ops::ControlFlow<()> {\n+            ) -> ::std::ops::ControlFlow<V::BreakTy> {\n                 EnumTypeFoldableImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n             }\n         }"}, {"sha": "15783cfd00c5c6e5d69fb3135e808196bc5d8bc4", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -2477,7 +2477,10 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n         UserTypeProjection { base, projs }\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<()> {\n+    fn super_visit_with<Vs: TypeVisitor<'tcx>>(\n+        &self,\n+        visitor: &mut Vs,\n+    ) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit.\n     }"}, {"sha": "0e6bf0fd02971c7dc6327f49a185fb41944a36f0", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         Terminator { source_info: self.source_info, kind }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::mir::TerminatorKind::*;\n \n         match self.kind {\n@@ -144,7 +144,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -154,7 +154,7 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n         Place { local: self.local.fold_with(folder), projection: self.projection.fold_with(folder) }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.local.visit_with(visitor)?;\n         self.projection.visit_with(visitor)\n     }\n@@ -166,7 +166,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n         folder.tcx().intern_place_elems(&v)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -216,7 +216,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n@@ -271,7 +271,7 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n             Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n             Operand::Constant(ref c) => c.visit_with(visitor),\n@@ -295,7 +295,10 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<()> {\n+    fn super_visit_with<Vs: TypeVisitor<'tcx>>(\n+        &self,\n+        visitor: &mut Vs,\n+    ) -> ControlFlow<Vs::BreakTy> {\n         use crate::mir::ProjectionElem::*;\n \n         match self {\n@@ -310,7 +313,7 @@ impl<'tcx> TypeFoldable<'tcx> for Field {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -319,7 +322,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -328,7 +331,7 @@ impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         self.clone()\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -341,7 +344,7 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n             literal: self.literal.fold_with(folder),\n         }\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.literal.visit_with(visitor)\n     }\n }"}, {"sha": "c24cb9b4c0f2dfe5c046ac4508e0c2f4cb99f1be", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -49,8 +49,8 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.super_fold_with(folder)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()>;\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.super_visit_with(visitor)\n     }\n \n@@ -161,7 +161,7 @@ impl TypeFoldable<'tcx> for hir::Constness {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -195,23 +195,25 @@ pub trait TypeFolder<'tcx>: Sized {\n }\n \n pub trait TypeVisitor<'tcx>: Sized {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+    type BreakTy = ();\n+\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         r.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         p.super_visit_with(self)\n     }\n }\n@@ -329,14 +331,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n-            fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+            fn visit_binder<T: TypeFoldable<'tcx>>(\n+                &mut self,\n+                t: &Binder<T>,\n+            ) -> ControlFlow<Self::BreakTy> {\n                 self.outer_index.shift_in(1);\n                 let result = t.as_ref().skip_binder().visit_with(self);\n                 self.outer_index.shift_out(1);\n                 result\n             }\n \n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match *r {\n                     ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n                         ControlFlow::CONTINUE\n@@ -351,7 +356,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 }\n             }\n \n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 // We're only interested in types involving regions\n                 if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n                     ty.super_visit_with(self)\n@@ -844,14 +849,14 @@ struct HasEscapingVarsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.outer_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // If the outer-exclusive-binder is *strictly greater* than\n         // `outer_index`, that means that `t` contains some content\n         // bound at `outer_index` or above (because\n@@ -864,7 +869,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // If the region is bound by `outer_index` or anything outside\n         // of outer index, then it escapes the binders we have\n         // visited.\n@@ -875,7 +880,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n-    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // we don't have a `visit_infer_const` callback, so we have to\n         // hook in here to catch this case (annoying...), but\n         // otherwise we do want to remember to visit the rest of the\n@@ -887,7 +892,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if predicate.inner.outer_exclusive_binder > self.outer_index {\n             ControlFlow::BREAK\n         } else {\n@@ -902,7 +907,7 @@ struct HasTypeFlagsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n-    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\",\n             t,\n@@ -912,19 +917,19 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if t.flags().intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = r.type_flags();\n         debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n         if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_const(c);\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n         if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n             predicate, predicate.inner.flags, self.flags\n@@ -964,14 +969,14 @@ impl LateBoundRegionsCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         self.current_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.current_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n@@ -984,7 +989,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs of an unevaluated const, as they may not appear\n         // in the normalized form\n@@ -997,7 +1002,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::ReLateBound(debruijn, br) = *r {\n             if debruijn == self.current_index {\n                 self.regions.insert(br);"}, {"sha": "dee0abb868e394fd5619f1532f1089fbff912dd2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -1781,7 +1781,7 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n         ParamEnv::new(self.caller_bounds().fold_with(folder), self.reveal().fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)\n     }"}, {"sha": "d4fad188e215dc204bbd3e3deebc806ee9b54d69", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -1796,7 +1796,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     {\n         struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<Symbol>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_> {\n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let ty::ReLateBound(_, ty::BrNamed(_, name)) = *r {\n                     self.0.insert(name);\n                 }"}, {"sha": "d42a1b772a03900e8c7b79317737fe50da664cec", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -729,7 +729,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::AdtDef {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -739,7 +739,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n         (self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n     }\n@@ -752,7 +752,7 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n         (self.0.fold_with(folder), self.1.fold_with(folder), self.2.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)?;\n         self.2.visit_with(visitor)\n@@ -778,7 +778,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n         Rc::new((**self).fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -788,7 +788,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n         Arc::new((**self).fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -799,7 +799,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n         box content\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -809,7 +809,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n         self.iter().map(|t| t.fold_with(folder)).collect()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -819,7 +819,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n         self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>().into_boxed_slice()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -833,11 +833,11 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n         folder.fold_binder(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n }\n@@ -847,7 +847,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>>\n         fold_list(*self, folder, |tcx, v| tcx.intern_existential_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n@@ -857,7 +857,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_type_list(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -867,7 +867,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -893,7 +893,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)?;\n         match self.def {\n@@ -919,7 +919,7 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n         Self { instance: self.instance.fold_with(folder), promoted: self.promoted }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.instance.visit_with(visitor)\n     }\n }\n@@ -968,7 +968,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         folder.fold_ty(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n             ty::Array(typ, sz) => {\n@@ -1010,7 +1010,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(self)\n     }\n }\n@@ -1024,11 +1024,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n         folder.fold_region(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n }\n@@ -1039,11 +1039,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         folder.tcx().reuse_or_mk_predicate(*self, new)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ty::PredicateKind::super_visit_with(&self.inner.kind, visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n \n@@ -1061,7 +1061,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n@@ -1071,7 +1071,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n         self.iter().map(|x| x.fold_with(folder)).collect()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -1091,12 +1091,12 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n         folder.fold_const(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty.visit_with(visitor)?;\n         self.val.visit_with(visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(self)\n     }\n }\n@@ -1116,7 +1116,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n@@ -1134,7 +1134,7 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }"}, {"sha": "343322cfe58302841efeef3b311c6fc256ef56e2", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -160,7 +160,7 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n             GenericArgKind::Type(ty) => ty.visit_with(visitor),\n@@ -392,7 +392,7 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }"}, {"sha": "f7fca4822ef54e4ccb421519a0fd45aa49333ff4", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -18,7 +18,7 @@ where\n     };\n \n     impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if !c.needs_subst() {\n                 return ControlFlow::CONTINUE;\n             }\n@@ -29,7 +29,7 @@ where\n             }\n         }\n \n-        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if !ty.needs_subst() {\n                 return ControlFlow::CONTINUE;\n             }"}, {"sha": "6a50a9243781ef0ce4779abe4c0ab995fae638a7", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -283,7 +283,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -318,7 +318,7 @@ struct HasUsedGenericParams<'a> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -336,7 +336,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;"}, {"sha": "cd60602b088f26d338440cf7a1f5d27c5df9cfd6", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -640,7 +640,7 @@ pub fn write_allocations<'tcx>(\n     }\n     struct CollectAllocIds(BTreeSet<AllocId>);\n     impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Value(val) = c.val {\n                 self.0.extend(alloc_ids_from_const(val));\n             }"}, {"sha": "4a0d356d3377ba04eeb2ba8b13886c51ec547b52", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -4,6 +4,7 @@\n #![feature(or_patterns)]\n #![feature(control_flow_enum)]\n #![feature(try_blocks)]\n+#![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n \n use rustc_attr as attr;\n@@ -44,6 +45,8 @@ use std::{cmp, fmt, mem};\n /// manually. Second, it doesn't visit some type components like signatures of fn types, or traits\n /// in `impl Trait`, see individual comments in `DefIdVisitorSkeleton::visit_ty`.\n trait DefIdVisitor<'tcx> {\n+    type BreakTy = ();\n+\n     fn tcx(&self) -> TyCtxt<'tcx>;\n     fn shallow(&self) -> bool {\n         false\n@@ -56,7 +59,7 @@ trait DefIdVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()>;\n+    ) -> ControlFlow<Self::BreakTy>;\n \n     /// Not overridden, but used to actually visit types and traits.\n     fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {\n@@ -66,13 +69,16 @@ trait DefIdVisitor<'tcx> {\n             dummy: Default::default(),\n         }\n     }\n-    fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<()> {\n+    fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {\n         ty_fragment.visit_with(&mut self.skeleton())\n     }\n-    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<()> {\n+    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {\n         self.skeleton().visit_trait(trait_ref)\n     }\n-    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicates(\n+        &mut self,\n+        predicates: ty::GenericPredicates<'tcx>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.skeleton().visit_predicates(predicates)\n     }\n }\n@@ -87,13 +93,13 @@ impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {\n-    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<()> {\n+    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {\n         let TraitRef { def_id, substs } = trait_ref;\n         self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref.print_only_trait_path())?;\n         if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {\n         match predicate.skip_binders() {\n             ty::PredicateAtom::Trait(ty::TraitPredicate { trait_ref }, _) => {\n                 self.visit_trait(trait_ref)\n@@ -119,7 +125,10 @@ where\n         }\n     }\n \n-    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> ControlFlow<()> {\n+    fn visit_predicates(\n+        &mut self,\n+        predicates: ty::GenericPredicates<'tcx>,\n+    ) -> ControlFlow<V::BreakTy> {\n         let ty::GenericPredicates { parent: _, predicates } = predicates;\n         predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))\n     }\n@@ -129,7 +138,9 @@ impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    type BreakTy = V::BreakTy;\n+\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n         // InternalSubsts are not visited here because they are visited below in `super_visit_with`.\n         match *ty.kind() {\n@@ -283,7 +294,7 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n         def_id: DefId,\n         _kind: &str,\n         _descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()> {\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.min = VL::new_min(self, def_id);\n         ControlFlow::CONTINUE\n     }\n@@ -902,7 +913,7 @@ impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n         def_id: DefId,\n         _kind: &str,\n         _descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()> {\n+    ) -> ControlFlow<Self::BreakTy> {\n         if let Some(def_id) = def_id.as_local() {\n             if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =\n                 (self.tcx().visibility(def_id.to_def_id()), self.access_level)\n@@ -1299,7 +1310,7 @@ impl DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()> {\n+    ) -> ControlFlow<Self::BreakTy> {\n         if self.check_def_id(def_id, kind, descr) {\n             ControlFlow::BREAK\n         } else {\n@@ -1799,7 +1810,7 @@ impl DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<()> {\n+    ) -> ControlFlow<Self::BreakTy> {\n         if self.check_def_id(def_id, kind, descr) {\n             ControlFlow::BREAK\n         } else {"}, {"sha": "c3b2d72fb734b9158cb7f8c1e5f383244f086fbf", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -693,12 +693,15 @@ impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &ty::Binder<T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         t.as_ref().skip_binder().visit_with(self);\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *r {\n             // ignore bound regions, keep visiting\n             ty::ReLateBound(_, _) => ControlFlow::CONTINUE,\n@@ -709,7 +712,7 @@ where\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // We're only interested in types involving regions\n         if !ty.flags().intersects(ty::TypeFlags::HAS_FREE_REGIONS) {\n             return ControlFlow::CONTINUE;"}, {"sha": "fdb2361ba0360fa89c81176b5aea12af93ba3bf9", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -78,7 +78,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     Concrete,\n                 }\n                 let mut failure_kind = FailureKind::Concrete;\n-                walk_abstract_const(tcx, ct, |node| match node {\n+                walk_abstract_const::<!, _>(tcx, ct, |node| match node {\n                     Node::Leaf(leaf) => {\n                         let leaf = leaf.subst(tcx, ct.substs);\n                         if leaf.has_infer_types_or_consts() {\n@@ -574,19 +574,19 @@ pub(super) fn try_unify_abstract_consts<'tcx>(\n     // on `ErrorReported`.\n }\n \n-pub fn walk_abstract_const<'tcx, F>(\n+pub fn walk_abstract_const<'tcx, R, F>(\n     tcx: TyCtxt<'tcx>,\n     ct: AbstractConst<'tcx>,\n     mut f: F,\n-) -> ControlFlow<()>\n+) -> ControlFlow<R>\n where\n-    F: FnMut(Node<'tcx>) -> ControlFlow<()>,\n+    F: FnMut(Node<'tcx>) -> ControlFlow<R>,\n {\n-    fn recurse<'tcx>(\n+    fn recurse<'tcx, R>(\n         tcx: TyCtxt<'tcx>,\n         ct: AbstractConst<'tcx>,\n-        f: &mut dyn FnMut(Node<'tcx>) -> ControlFlow<()>,\n-    ) -> ControlFlow<()> {\n+        f: &mut dyn FnMut(Node<'tcx>) -> ControlFlow<R>,\n+    ) -> ControlFlow<R> {\n         let root = ct.root();\n         f(root)?;\n         match root {"}, {"sha": "7da5ec051cb6af77939a2c3e302a5a7997e525bb", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -771,7 +771,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n     }\n \n     impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n-        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {\n                 ty::Param(_) => {\n                     if t == self.tcx.types.self_param {\n@@ -812,7 +812,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<()> {\n+        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // First check if the type of this constant references `Self`.\n             self.visit_ty(ct.ty)?;\n \n@@ -844,7 +844,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<()> {\n+        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::PredicateAtom::ConstEvaluatable(def, substs) = pred.skip_binders() {\n                 // FIXME(const_evaluatable_checked): We should probably deduplicate the logic for\n                 // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to"}, {"sha": "edab1e031ccab94e52c20bb4cbe5013d106b05be", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -135,7 +135,7 @@ impl Search<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\"Search visiting ty: {:?}\", ty);\n \n         let (adt_def, substs) = match *ty.kind() {"}, {"sha": "4c616ccc0867634ec540bae46a8415b9bfcc297b", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -859,14 +859,14 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n         self.binder_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.binder_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n                 match self.parameters.entry(bound_ty.var.as_u32()) {\n@@ -886,7 +886,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => match br {\n                 ty::BoundRegion::BrNamed(def_id, _name) => {\n@@ -1076,7 +1076,7 @@ impl PlaceholdersCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {\n                 self.next_ty_placeholder = self.next_ty_placeholder.max(p.name.as_usize() + 1);\n@@ -1088,7 +1088,7 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n                 if let ty::BoundRegion::BrAnon(anon) = p.name {"}, {"sha": "0e6e289c9fb90ffbeb319ef2a589713200048dfe", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -450,7 +450,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     };\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n-        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n             if t != self.opaque_identity_ty && t.super_visit_with(self).is_break() {\n                 self.ty = Some(t);\n@@ -459,7 +459,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             ControlFlow::CONTINUE\n         }\n \n-        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_region) r={:?}\", r);\n             if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n                 if *index < self.generics.parent_count as u32 {\n@@ -472,7 +472,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             r.super_visit_with(self)\n         }\n \n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Unevaluated(..) = c.val {\n                 // FIXME(#72219) We currenctly don't detect lifetimes within substs\n                 // which would violate this check. Even though the particular substitution is not used\n@@ -1455,7 +1455,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n             {\n                 struct VisitTypes(Vec<DefId>);\n                 impl<'tcx> ty::fold::TypeVisitor<'tcx> for VisitTypes {\n-                    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+                    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Opaque(def, _) => {\n                                 self.0.push(def);"}, {"sha": "8e69df734e6f85c7a00bb22d4e179f9f061e8e5a", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -983,7 +983,7 @@ fn suggest_constraining_param(\n struct TypeParamVisitor<'tcx>(Vec<Ty<'tcx>>);\n \n impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Param(_) = ty.kind() {\n             self.0.push(ty);\n         }"}, {"sha": "95ad977abd1eff49982bde166a5cc557f16a7104", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -800,18 +800,18 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 params: FxHashSet<u32>,\n             }\n             impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n-                fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+                fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Param(param) = t.kind() {\n                         self.params.insert(param.index);\n                     }\n                     t.super_visit_with(self)\n                 }\n \n-                fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<()> {\n+                fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     ControlFlow::BREAK\n                 }\n \n-                fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+                fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::ConstKind::Param(param) = c.val {\n                         self.params.insert(param.index);\n                     }"}, {"sha": "7779794b9db7d97e2d66c3ec5fbc80e0aaaaae10", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -2062,7 +2062,7 @@ fn const_evaluatable_predicates_of<'tcx>(\n             }\n \n             impl<'a, 'tcx> TypeVisitor<'tcx> for TyAliasVisitor<'a, 'tcx> {\n-                fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> ControlFlow<()> {\n+                fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n                         self.preds.insert((\n                             ty::PredicateAtom::ConstEvaluatable(def, substs).to_predicate(self.tcx),"}, {"sha": "e389fd4d9f00f87afa58b0ef598587401d841ef8", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -57,7 +57,7 @@ struct ParameterCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Projection(..) | ty::Opaque(..) if !self.include_nonconstraining => {\n                 // projections are not injective\n@@ -72,14 +72,14 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::ReEarlyBound(data) = *r {\n             self.parameters.push(Parameter::from(data));\n         }\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match c.val {\n             ty::ConstKind::Unevaluated(..) if !self.include_nonconstraining => {\n                 // Constant expressions are not injective"}, {"sha": "64b12980af66b2f8f8bcc09fa24bd2a6df9c75a7", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f3119103b79df190324e8d72a5827e4d0cd52d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f3119103b79df190324e8d72a5827e4d0cd52d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=e0f3119103b79df190324e8d72a5827e4d0cd52d", "patch": "@@ -563,7 +563,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n struct ContainsRegion;\n \n impl TypeVisitor<'_> for ContainsRegion {\n-    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<()> {\n+    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::BREAK\n     }\n }"}]}