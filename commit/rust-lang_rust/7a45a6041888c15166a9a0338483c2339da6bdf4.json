{"sha": "7a45a6041888c15166a9a0338483c2339da6bdf4", "node_id": "C_kwDOAAsO6NoAKDdhNDVhNjA0MTg4OGMxNTE2NmE5YTAzMzg0ODNjMjMzOWRhNmJkZjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-17T04:03:30Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-17T04:58:38Z"}, "message": "use rustc_hir_pretty::qpath_to_string to avoid span_to_snippet when rendering path", "tree": {"sha": "2d920d1fdd4bf39320d90a0bfae5ca4ae9db078e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d920d1fdd4bf39320d90a0bfae5ca4ae9db078e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a45a6041888c15166a9a0338483c2339da6bdf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a45a6041888c15166a9a0338483c2339da6bdf4", "html_url": "https://github.com/rust-lang/rust/commit/7a45a6041888c15166a9a0338483c2339da6bdf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a45a6041888c15166a9a0338483c2339da6bdf4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04c590b7ef3f864637fa3808d43089631c4cc3db", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c590b7ef3f864637fa3808d43089631c4cc3db", "html_url": "https://github.com/rust-lang/rust/commit/04c590b7ef3f864637fa3808d43089631c4cc3db"}], "stats": {"total": 67, "additions": 52, "deletions": 15}, "files": [{"sha": "e0179bd3ed1e85afc11a512ad3dc452dcf1a0621", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -211,6 +211,10 @@ pub fn path_to_string(segment: &hir::Path<'_>) -> String {\n     to_string(NO_ANN, |s| s.print_path(segment, false))\n }\n \n+pub fn qpath_to_string(segment: &hir::QPath<'_>) -> String {\n+    to_string(NO_ANN, |s| s.print_qpath(segment, false))\n+}\n+\n pub fn fn_to_string(\n     decl: &hir::FnDecl<'_>,\n     header: hir::FnHeader,"}, {"sha": "00c8aa3a1bbdae7df4c5817ddea93d464b1d5add", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -397,7 +397,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         = self.typeck_results.borrow().qpath_res(qpath, callee_expr.hir_id)\n                     // Only suggest removing parens if there are no arguments\n                     && arg_exprs.is_empty()\n-                    && let Ok(path) = self.tcx.sess.source_map().span_to_snippet(callee_expr.span)\n                 {\n                     let descr = match kind {\n                         def::CtorOf::Struct => \"struct\",\n@@ -406,7 +405,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let removal_span =\n                         callee_expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n                     unit_variant =\n-                        Some((removal_span, descr, path));\n+                        Some((removal_span, descr, rustc_hir_pretty::qpath_to_string(qpath)));\n                 }\n \n                 let callee_ty = self.resolve_vars_if_possible(callee_ty);"}, {"sha": "6574b542e58a59f039809943817dc702ad6173b0", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.ty_error()\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {\n-                report_unexpected_variant_res(tcx, res, expr.span);\n+                report_unexpected_variant_res(tcx, res, qpath, expr.span);\n                 tcx.ty_error()\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,"}, {"sha": "0dcbdef9c7703aff2760fe301f3cfb471602ce39", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -863,17 +863,14 @@ fn bad_non_zero_sized_fields<'tcx>(\n     err.emit();\n }\n \n-fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span) {\n+fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, qpath: &hir::QPath<'_>, span: Span) {\n     struct_span_err!(\n         tcx.sess,\n         span,\n         E0533,\n-        \"expected unit struct, unit variant or constant, found {}{}\",\n+        \"expected unit struct, unit variant or constant, found {} `{}`\",\n         res.descr(),\n-        tcx.sess\n-            .source_map()\n-            .span_to_snippet(span)\n-            .map_or_else(|_| String::new(), |s| format!(\" `{s}`\",)),\n+        rustc_hir_pretty::qpath_to_string(qpath),\n     )\n     .emit();\n }"}, {"sha": "c7318cd6e531fd955b9102847a79061a3a699d9c", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -183,7 +183,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PatKind::TupleStruct(ref qpath, subpats, ddpos) => {\n                 self.check_pat_tuple_struct(pat, qpath, subpats, ddpos, expected, def_bm, ti)\n             }\n-            PatKind::Path(_) => self.check_pat_path(pat, path_res.unwrap(), expected, ti),\n+            PatKind::Path(ref qpath) => {\n+                self.check_pat_path(pat, qpath, path_res.unwrap(), expected, ti)\n+            }\n             PatKind::Struct(ref qpath, fields, has_rest_pat) => {\n                 self.check_pat_struct(pat, qpath, fields, has_rest_pat, expected, def_bm, ti)\n             }\n@@ -800,6 +802,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_pat_path<'b>(\n         &self,\n         pat: &Pat<'_>,\n+        qpath: &hir::QPath<'_>,\n         path_resolution: (Res, Option<Ty<'tcx>>, &'b [hir::PathSegment<'b>]),\n         expected: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n@@ -814,7 +817,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return tcx.ty_error();\n             }\n             Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fictive | CtorKind::Fn), _) => {\n-                report_unexpected_variant_res(tcx, res, pat.span);\n+                report_unexpected_variant_res(tcx, res, qpath, pat.span);\n                 return tcx.ty_error();\n             }\n             Res::SelfCtor(..)"}, {"sha": "1d1bdb6b052a8d7e247f0f2501cd4ad2a0331d14", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -4,13 +4,13 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |         Foo::bar => {}\n    |         ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n    |         ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n@@ -22,7 +22,7 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |     if let Foo::bar = 0u32 {}\n    |            ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}"}, {"sha": "82cc6e19f9d1ea759dc9507c22d2cf7b2be68811", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<S as Tr>::A::f::<u8>`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `<<S as Tr>::A>::f<u8>`\n   --> $DIR/qualified-path-params.rs:20:9\n    |\n LL |         <S as Tr>::A::f::<u8> => {}"}, {"sha": "0a418b5aeef1dde23381da498968cea433722491", "filename": "src/test/ui/suggestions/issue-99240-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -0,0 +1,10 @@\n+enum Enum {\n+    Unit,\n+}\n+type Alias = Enum;\n+\n+fn main() {\n+    Alias::\n+    Unit();\n+    //~^^ ERROR expected function, found enum variant `Alias::Unit`\n+}"}, {"sha": "2af60f5975992d4fab1d0da52e1c1a881e3fd5d9", "filename": "src/test/ui/suggestions/issue-99240-2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a45a6041888c15166a9a0338483c2339da6bdf4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a45a6041888c15166a9a0338483c2339da6bdf4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr?ref=7a45a6041888c15166a9a0338483c2339da6bdf4", "patch": "@@ -0,0 +1,24 @@\n+error[E0618]: expected function, found enum variant `Alias::Unit`\n+  --> $DIR/issue-99240-2.rs:7:5\n+   |\n+LL |        Unit,\n+   |        ---- enum variant `Alias::Unit` defined here\n+...\n+LL |        Alias::\n+   |   _____^\n+   |  |_____|\n+   | ||\n+LL | ||     Unit();\n+   | ||________^_- call expression requires function\n+   | |_________|\n+   | \n+   |\n+help: `Alias::Unit` is a unit enum variant, and does not take parentheses to be constructed\n+   |\n+LL -     Unit();\n+LL +     Unit;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}]}