{"sha": "3478589b99b296b1c0014478826f03f848b536bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Nzg1ODliOTliMjk2YjFjMDAxNDQ3ODgyNmYwM2Y4NDhiNTM2YmY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-25T03:23:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-28T06:42:53Z"}, "message": "std and rustc: cleanup uses of result methods", "tree": {"sha": "dbf722ebbbe85234aa160cc160e561e46c4d7d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf722ebbbe85234aa160cc160e561e46c4d7d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3478589b99b296b1c0014478826f03f848b536bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3478589b99b296b1c0014478826f03f848b536bf", "html_url": "https://github.com/rust-lang/rust/commit/3478589b99b296b1c0014478826f03f848b536bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3478589b99b296b1c0014478826f03f848b536bf/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea106f72f7d28b3fc977899b6f272d5b69cbbc31", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea106f72f7d28b3fc977899b6f272d5b69cbbc31", "html_url": "https://github.com/rust-lang/rust/commit/ea106f72f7d28b3fc977899b6f272d5b69cbbc31"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "761d07da8052cf428dca5f321530b4d2c242a3d7", "filename": "src/libstd/io.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3478589b99b296b1c0014478826f03f848b536bf/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3478589b99b296b1c0014478826f03f848b536bf/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=3478589b99b296b1c0014478826f03f848b536bf", "patch": "@@ -46,28 +46,26 @@ implement `Reader` and `Writer`, where appropriate.\n \n #[allow(missing_doc)];\n \n-use result::Result;\n-\n+use cast;\n use clone::Clone;\n use container::Container;\n use int;\n-use libc;\n-use libc::{c_int, c_long, c_void, size_t, ssize_t};\n+use iterator::IteratorUtil;\n use libc::consts::os::posix88::*;\n+use libc::{c_int, c_long, c_void, size_t, ssize_t};\n+use libc;\n use num;\n+use ops::Drop;\n use os;\n-use cast;\n use path::Path;\n-use ops::Drop;\n-use iterator::IteratorUtil;\n use ptr;\n-use result;\n-use str;\n+use result::{Result, Ok, Err};\n use str::{StrSlice, OwnedStr};\n+use str;\n use to_str::ToStr;\n use uint;\n-use vec;\n use vec::{MutableVector, ImmutableVector, OwnedVector, OwnedCopyableVector, CopyableVector};\n+use vec;\n \n #[allow(non_camel_case_types)] // not sure what to do about this\n pub type fd_t = c_int;\n@@ -1038,9 +1036,9 @@ pub fn file_reader(path: &Path) -> Result<@Reader, ~str> {\n     };\n \n     if f as uint == 0u {\n-        result::Err(~\"error opening \" + path.to_str())\n+        Err(~\"error opening \" + path.to_str())\n     } else {\n-        result::Ok(FILE_reader(f, true))\n+        Ok(FILE_reader(f, true))\n     }\n }\n \n@@ -1287,10 +1285,9 @@ pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n         }\n     };\n     if fd < (0 as c_int) {\n-        result::Err(fmt!(\"error opening %s: %s\", path.to_str(),\n-                         os::last_os_error()))\n+        Err(fmt!(\"error opening %s: %s\", path.to_str(), os::last_os_error()))\n     } else {\n-        result::Ok(fd_writer(fd, true))\n+        Ok(fd_writer(fd, true))\n     }\n }\n \n@@ -1559,7 +1556,7 @@ impl<T:Writer> WriterUtil for T {\n }\n \n pub fn file_writer(path: &Path, flags: &[FileFlag]) -> Result<@Writer, ~str> {\n-    mk_file_writer(path, flags).chain(|w| result::Ok(w))\n+    mk_file_writer(path, flags).chain(|w| Ok(w))\n }\n \n \n@@ -1572,9 +1569,9 @@ pub fn buffered_file_writer(path: &Path) -> Result<@Writer, ~str> {\n             }\n         };\n         return if f as uint == 0u {\n-            result::Err(~\"error opening \" + path.to_str())\n+            Err(~\"error opening \" + path.to_str())\n         } else {\n-            result::Ok(FILE_writer(f, true))\n+            Ok(FILE_writer(f, true))\n         }\n     }\n }\n@@ -1728,9 +1725,9 @@ pub fn seek_in_buf(offset: int, pos: uint, len: uint, whence: SeekStyle) ->\n pub fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n     do read_whole_file(file).chain |bytes| {\n         if str::is_utf8(bytes) {\n-            result::Ok(str::from_bytes(bytes))\n+            Ok(str::from_bytes(bytes))\n         } else {\n-            result::Err(file.to_str() + \" is not UTF-8\")\n+            Err(file.to_str() + \" is not UTF-8\")\n         }\n     }\n }\n@@ -1739,7 +1736,7 @@ pub fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n // abstractions is pointless.\n pub fn read_whole_file(file: &Path) -> Result<~[u8], ~str> {\n     do file_reader(file).chain |rdr| {\n-        result::Ok(rdr.read_whole_stream())\n+        Ok(rdr.read_whole_stream())\n     }\n }\n \n@@ -1839,6 +1836,7 @@ mod tests {\n     use io::{BytesWriter, SeekCur, SeekEnd, SeekSet};\n     use io;\n     use path::Path;\n+    use result::{Ok, Err};\n     use result;\n     use u64;\n     use vec;\n@@ -1939,10 +1937,10 @@ mod tests {\n     #[test]\n     fn file_reader_not_exist() {\n         match io::file_reader(&Path(\"not a file\")) {\n-          result::Err(e) => {\n+          Err(e) => {\n             assert_eq!(e, ~\"error opening not a file\");\n           }\n-          result::Ok(_) => fail!()\n+          Ok(_) => fail!()\n         }\n     }\n \n@@ -1980,20 +1978,20 @@ mod tests {\n     #[test]\n     fn file_writer_bad_name() {\n         match io::file_writer(&Path(\"?/?\"), []) {\n-          result::Err(e) => {\n+          Err(e) => {\n             assert!(e.starts_with(\"error opening\"));\n           }\n-          result::Ok(_) => fail!()\n+          Ok(_) => fail!()\n         }\n     }\n \n     #[test]\n     fn buffered_file_writer_bad_name() {\n         match io::buffered_file_writer(&Path(\"?/?\")) {\n-          result::Err(e) => {\n+          Err(e) => {\n             assert!(e.starts_with(\"error opening\"));\n           }\n-          result::Ok(_) => fail!()\n+          Ok(_) => fail!()\n         }\n     }\n "}]}