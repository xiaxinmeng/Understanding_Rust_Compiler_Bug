{"sha": "979f7cd7d7f2e3312006a212ca7a3484ebbc0140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OWY3Y2Q3ZDdmMmUzMzEyMDA2YTIxMmNhN2EzNDg0ZWJiYzAxNDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-02T21:50:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-02T21:50:24Z"}, "message": "rollup merge of #17695 : steveklabnik/various_docs", "tree": {"sha": "3f7e5046fe7eab3dfc3bac0f8fae7220049a00cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f7e5046fe7eab3dfc3bac0f8fae7220049a00cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/979f7cd7d7f2e3312006a212ca7a3484ebbc0140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/979f7cd7d7f2e3312006a212ca7a3484ebbc0140", "html_url": "https://github.com/rust-lang/rust/commit/979f7cd7d7f2e3312006a212ca7a3484ebbc0140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/979f7cd7d7f2e3312006a212ca7a3484ebbc0140/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67717b61e61ac70fdad19e5a3f5392e663646eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/67717b61e61ac70fdad19e5a3f5392e663646eb3", "html_url": "https://github.com/rust-lang/rust/commit/67717b61e61ac70fdad19e5a3f5392e663646eb3"}, {"sha": "16cca6dbada93a7468825e0eb106ea05a7417c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/16cca6dbada93a7468825e0eb106ea05a7417c01", "html_url": "https://github.com/rust-lang/rust/commit/16cca6dbada93a7468825e0eb106ea05a7417c01"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "dd79d63d514536425e58df0ca8c0cc76dffdb282", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/979f7cd7d7f2e3312006a212ca7a3484ebbc0140/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/979f7cd7d7f2e3312006a212ca7a3484ebbc0140/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=979f7cd7d7f2e3312006a212ca7a3484ebbc0140", "patch": "@@ -305,21 +305,17 @@ copying.\n #     Circle(Point, f64),   // origin, radius\n #     Rectangle(Point, Size)  // upper-left, dimensions\n # }\n-# static tau: f64 = 6.28;\n fn compute_area(shape: &Shape) -> f64 {\n     match *shape {\n-        Circle(_, radius) => 0.5 * tau * radius * radius,\n+        Circle(_, radius) => std::f64::consts::PI * radius * radius,\n         Rectangle(_, ref size) => size.w * size.h\n     }\n }\n ~~~\n \n The first case matches against circles. Here, the pattern extracts the\n radius from the shape variant and the action uses it to compute the\n-area of the circle. (Like any up-to-date engineer, we use the [tau\n-circle constant][tau] and not that dreadfully outdated notion of pi).\n-\n-[tau]: http://www.math.utah.edu/~palais/pi.html\n+area of the circle.\n \n The second match is more interesting. Here we match against a\n rectangle and extract its size: but rather than copy the `size`"}, {"sha": "3ffb7cad0a4cb7679bdacd43bca20e6f6fc6d8be", "filename": "src/doc/guide.md", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/979f7cd7d7f2e3312006a212ca7a3484ebbc0140/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/979f7cd7d7f2e3312006a212ca7a3484ebbc0140/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=979f7cd7d7f2e3312006a212ca7a3484ebbc0140", "patch": "@@ -659,14 +659,12 @@ error: mismatched types: expected `int` but found `()` (expected int but found (\n ```\n \n We expected an integer, but we got `()`. `()` is pronounced 'unit', and is a\n-special type in Rust's type system. `()` is different than `null` in other\n-languages, because `()` is distinct from other types. For example, in C, `null`\n-is a valid value for a variable of type `int`. In Rust, `()` is _not_ a valid\n-value for a variable of type `int`. It's only a valid value for variables of\n-the type `()`, which aren't very useful. Remember how we said statements don't\n-return a value? Well, that's the purpose of unit in this case. The semicolon\n-turns any expression into a statement by throwing away its value and returning\n-unit instead.\n+special type in Rust's type system. In Rust, `()` is _not_ a valid value for a\n+variable of type `int`. It's only a valid value for variables of the type `()`,\n+which aren't very useful. Remember how we said statements don't return a value?\n+Well, that's the purpose of unit in this case. The semicolon turns any\n+expression into a statement by throwing away its value and returning unit\n+instead.\n \n There's one more time in which you won't see a semicolon at the end of a line\n of Rust code. For that, we'll need our next concept: functions.\n@@ -1680,11 +1678,11 @@ just `int`s.\n \n Rust provides a method on these `IoResult<T>`s called `ok()`, which does the\n same thing as our `match` statement, but assuming that we have a valid value.\n-If we don't, it will terminate our program. In this case, if we can't get\n-input, our program doesn't work, so we're okay with that. In most cases, we\n-would want to handle the error case explicitly. The result of `ok()` has a\n-method, `expect()`, which allows us to give an error message if this crash\n-happens.\n+We then call `expect()` on the result, which will terminate our program if we\n+don't have a valid value. In this case, if we can't get input, our program\n+doesn't work, so we're okay with that. In most cases, we would want to handle\n+the error case explicitly. `expect()` allows us to give an error message if\n+this crash happens.\n \n We will cover the exact details of how all of this works later in the Guide.\n For now, this gives you enough of a basic understanding to work with.\n@@ -2030,7 +2028,7 @@ fn main() {\n     match cmp(input, secret_number) {\n         Less    => println!(\"Too small!\"),\n         Greater => println!(\"Too big!\"),\n-        Equal   => { println!(\"You win!\"); },\n+        Equal   => println!(\"You win!\"),\n     }\n }\n "}]}