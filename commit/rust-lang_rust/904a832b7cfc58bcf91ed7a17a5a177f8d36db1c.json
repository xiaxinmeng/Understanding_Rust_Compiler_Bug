{"sha": "904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNGE4MzJiN2NmYzU4YmNmOTFlZDdhMTdhNWExNzdmOGQzNmRiMWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T19:29:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T19:29:38Z"}, "message": "format", "tree": {"sha": "108049f427c2fd14e6d6086987b7368ed8d7c616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108049f427c2fd14e6d6086987b7368ed8d7c616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "html_url": "https://github.com/rust-lang/rust/commit/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8105c14454f8c4f575f16b44ec616ffd045be57f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8105c14454f8c4f575f16b44ec616ffd045be57f", "html_url": "https://github.com/rust-lang/rust/commit/8105c14454f8c4f575f16b44ec616ffd045be57f"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "f6e7e2fedf14f3d6d0df168615dfc3fad8fe93a8", "filename": "cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2Fsrc%2Fmain.rs?ref=904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "patch": "@@ -5,9 +5,9 @@ extern crate libsyntax2;\n extern crate tools;\n \n use clap::{App, Arg, SubCommand};\n+use std::time::Instant;\n use std::{fs, io::Read, path::Path};\n use tools::collect_tests;\n-use std::time::Instant;\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n "}, {"sha": "ef3a0f76c4205c37b83de51cdac3114e97a92e95", "filename": "src/parser/grammar/expressions.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/src%2Fparser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/src%2Fparser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fexpressions.rs?ref=904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "patch": "@@ -34,12 +34,11 @@ pub(super) fn expr(p: &mut Parser) {\n     loop {\n         lhs = match p.current() {\n             L_PAREN => call_expr(p, lhs),\n-            DOT if p.nth(1) == IDENT =>\n-                if p.nth(2) == L_PAREN {\n-                    method_call_expr(p, lhs)\n-                } else {\n-                    field_expr(p, lhs)\n-                }\n+            DOT if p.nth(1) == IDENT => if p.nth(2) == L_PAREN {\n+                method_call_expr(p, lhs)\n+            } else {\n+                field_expr(p, lhs)\n+            },\n             _ => break,\n         }\n     }\n@@ -193,11 +192,11 @@ fn struct_lit(p: &mut Parser) {\n                     expr(p);\n                 }\n                 m.complete(p, STRUCT_LIT_FIELD);\n-            },\n+            }\n             DOTDOT => {\n                 p.bump();\n                 expr(p);\n-            },\n+            }\n             _ => p.err_and_bump(\"expected identifier\"),\n         }\n         if !p.at(R_CURLY) {"}, {"sha": "69942e7f1c19c6d1512d199325f5556984ff8925", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "patch": "@@ -142,7 +142,9 @@ fn fn_value_parameters(p: &mut Parser) {\n             _ => return,\n         };\n         let m = p.start();\n-        for _ in 0..n_toks { p.bump(); }\n+        for _ in 0..n_toks {\n+            p.bump();\n+        }\n         m.complete(p, SELF_PARAM);\n         if !p.at(R_PAREN) {\n             p.expect(COMMA);"}, {"sha": "94d76b25af81db410c073082b1c06cf395b34106", "filename": "src/parser/grammar/type_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/src%2Fparser%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/src%2Fparser%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_args.rs?ref=904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "patch": "@@ -33,16 +33,16 @@ fn type_arg(p: &mut Parser) {\n         LIFETIME => {\n             p.bump();\n             m.complete(p, LIFETIME_ARG);\n-        },\n+        }\n         IDENT if p.nth(1) == EQ => {\n             name_ref(p);\n             p.bump();\n             types::type_(p);\n             m.complete(p, ASSOC_TYPE_ARG);\n-        },\n+        }\n         _ => {\n             types::type_(p);\n             m.complete(p, TYPE_ARG);\n-        },\n+        }\n     }\n }"}, {"sha": "a23a57423694704b1b0b97f05ca4b274c53f1b8d", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904a832b7cfc58bcf91ed7a17a5a177f8d36db1c/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=904a832b7cfc58bcf91ed7a17a5a177f8d36db1c", "patch": "@@ -1,7 +1,7 @@\n-use std::{fmt::Write};\n+use std::fmt::Write;\n use {\n+    algo::walk::{walk, WalkEvent},\n     SyntaxNode,\n-    algo::walk::{WalkEvent, walk},\n };\n \n /// Parse a file and create a string representation of the resulting parse tree.\n@@ -34,13 +34,13 @@ pub fn dump_tree(syntax: &SyntaxNode) -> String {\n                     }\n                 }\n                 level += 1;\n-            },\n+            }\n             WalkEvent::Exit(_) => level -= 1,\n         }\n     }\n \n     assert_eq!(level, 0);\n-    for err in errors[err_pos..].iter()  {\n+    for err in errors[err_pos..].iter() {\n         writeln!(buf, \"err: `{}`\", err.message).unwrap();\n     }\n "}]}