{"sha": "2a588d810fdce164c24b4de82a195da6709c47d0", "node_id": "C_kwDOAAsO6NoAKDJhNTg4ZDgxMGZkY2UxNjRjMjRiNGRlODJhMTk1ZGE2NzA5YzQ3ZDA", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-01T00:17:45Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-02T00:24:55Z"}, "message": "Add `unnecessary_find_map` lint", "tree": {"sha": "6fbd96d5f5e74dbc83e1b76ea4182df3ebc59d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fbd96d5f5e74dbc83e1b76ea4182df3ebc59d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a588d810fdce164c24b4de82a195da6709c47d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a588d810fdce164c24b4de82a195da6709c47d0", "html_url": "https://github.com/rust-lang/rust/commit/2a588d810fdce164c24b4de82a195da6709c47d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a588d810fdce164c24b4de82a195da6709c47d0/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e511476f240dfbb67b9d94a71ea45db9624e1519", "url": "https://api.github.com/repos/rust-lang/rust/commits/e511476f240dfbb67b9d94a71ea45db9624e1519", "html_url": "https://github.com/rust-lang/rust/commit/e511476f240dfbb67b9d94a71ea45db9624e1519"}], "stats": {"total": 141, "additions": 124, "deletions": 17}, "files": [{"sha": "073d4d464747eb297d48a2e4b582fe9ba255f534", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a588d810fdce164c24b4de82a195da6709c47d0/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a588d810fdce164c24b4de82a195da6709c47d0/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2a588d810fdce164c24b4de82a195da6709c47d0", "patch": "@@ -3498,6 +3498,7 @@ Released 2018-09-13\n [`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map\n+[`unnecessary_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_find_map\n [`unnecessary_fold`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fold\n [`unnecessary_lazy_evaluations`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations\n [`unnecessary_mut_passed`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed"}, {"sha": "8116f367c16c837d19768314c149e192b299e78f", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=2a588d810fdce164c24b4de82a195da6709c47d0", "patch": "@@ -189,6 +189,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::SUSPICIOUS_SPLITN),\n     LintId::of(methods::UNINIT_ASSUMED_INIT),\n     LintId::of(methods::UNNECESSARY_FILTER_MAP),\n+    LintId::of(methods::UNNECESSARY_FIND_MAP),\n     LintId::of(methods::UNNECESSARY_FOLD),\n     LintId::of(methods::UNNECESSARY_LAZY_EVALUATIONS),\n     LintId::of(methods::UNNECESSARY_TO_OWNED),"}, {"sha": "5d588ac66499fa692af18327c150a5e7364864a0", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=2a588d810fdce164c24b4de82a195da6709c47d0", "patch": "@@ -49,6 +49,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::SEARCH_IS_SOME),\n     LintId::of(methods::SKIP_WHILE_NEXT),\n     LintId::of(methods::UNNECESSARY_FILTER_MAP),\n+    LintId::of(methods::UNNECESSARY_FIND_MAP),\n     LintId::of(methods::USELESS_ASREF),\n     LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n     LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),"}, {"sha": "04e2557403f2e38964679ad4c865c9065b400502", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=2a588d810fdce164c24b4de82a195da6709c47d0", "patch": "@@ -323,6 +323,7 @@ store.register_lints(&[\n     methods::SUSPICIOUS_SPLITN,\n     methods::UNINIT_ASSUMED_INIT,\n     methods::UNNECESSARY_FILTER_MAP,\n+    methods::UNNECESSARY_FIND_MAP,\n     methods::UNNECESSARY_FOLD,\n     methods::UNNECESSARY_LAZY_EVALUATIONS,\n     methods::UNNECESSARY_TO_OWNED,"}, {"sha": "581f4c8b0e2e3fa0499002b64082c50408069c18", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2a588d810fdce164c24b4de82a195da6709c47d0", "patch": "@@ -1309,7 +1309,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for `filter_map` calls which could be replaced by `filter` or `map`.\n+    /// Checks for `filter_map` calls that could be replaced by `filter` or `map`.\n     /// More specifically it checks if the closure provided is only performing one of the\n     /// filter or map operations and suggests the appropriate option.\n     ///\n@@ -1337,6 +1337,36 @@ declare_clippy_lint! {\n     \"using `filter_map` when a more succinct alternative exists\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `find_map` calls that could be replaced by `find` or `map`. More\n+    /// specifically it checks if the closure provided is only performing one of the\n+    /// find or map operations and suggests the appropriate option.\n+    ///\n+    /// ### Why is this bad?\n+    /// Complexity. The intent is also clearer if only a single\n+    /// operation is being performed.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let _ = (0..3).find_map(|x| if x > 2 { Some(x) } else { None });\n+    ///\n+    /// // As there is no transformation of the argument this could be written as:\n+    /// let _ = (0..3).find(|&x| x > 2);\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// let _ = (0..4).find_map(|x| Some(x + 1));\n+    ///\n+    /// // As there is no conditional check on the argument this could be written as:\n+    /// let _ = (0..4).map(|x| x + 1).next();\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub UNNECESSARY_FIND_MAP,\n+    complexity,\n+    \"using `find_map` when a more succinct alternative exists\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for `into_iter` calls on references which should be replaced by `iter`\n@@ -2020,6 +2050,7 @@ impl_lint_pass!(Methods => [\n     USELESS_ASREF,\n     UNNECESSARY_FOLD,\n     UNNECESSARY_FILTER_MAP,\n+    UNNECESSARY_FIND_MAP,\n     INTO_ITER_ON_REF,\n     SUSPICIOUS_MAP,\n     UNINIT_ASSUMED_INIT,\n@@ -2305,9 +2336,12 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 extend_with_drain::check(cx, expr, recv, arg);\n             },\n             (\"filter_map\", [arg]) => {\n-                unnecessary_filter_map::check(cx, expr, arg);\n+                unnecessary_filter_map::check(cx, expr, arg, name);\n                 filter_map_identity::check(cx, expr, arg, span);\n             },\n+            (\"find_map\", [arg]) => {\n+                unnecessary_filter_map::check(cx, expr, arg, name);\n+            },\n             (\"flat_map\", [arg]) => {\n                 flat_map_identity::check(cx, expr, arg, span);\n                 flat_map_option::check(cx, expr, arg, span);"}, {"sha": "9e48cd13b4cd9e8db81abf658f61fdcb718ae69a", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a588d810fdce164c24b4de82a195da6709c47d0/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=2a588d810fdce164c24b4de82a195da6709c47d0", "patch": "@@ -11,8 +11,9 @@ use rustc_middle::ty;\n use rustc_span::sym;\n \n use super::UNNECESSARY_FILTER_MAP;\n+use super::UNNECESSARY_FIND_MAP;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>, name: &str) {\n     if !is_trait_method(cx, expr, sym::Iterator) {\n         return;\n     }\n@@ -32,23 +33,30 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         found_filtering |= return_visitor.found_filtering;\n \n         let in_ty = cx.typeck_results().node_type(body.params[0].hir_id);\n-        let sugg = if !found_filtering {\n-            \"map\"\n-        } else if !found_mapping && !mutates_arg && (!clone_or_copy_needed || is_copy(cx, in_ty)) {\n-            match cx.typeck_results().expr_ty(&body.value).kind() {\n-                ty::Adt(adt, subst) if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && in_ty == subst.type_at(0) => {\n-                    \"filter\"\n-                },\n-                _ => return,\n-            }\n-        } else {\n-            return;\n-        };\n+        let sugg =\n+            if !found_filtering {\n+                if name == \"filter_map\" { \"map\" } else { \"map(..).next()\" }\n+            } else if !found_mapping && !mutates_arg && (!clone_or_copy_needed || is_copy(cx, in_ty)) {\n+                match cx.typeck_results().expr_ty(&body.value).kind() {\n+                    ty::Adt(adt, subst)\n+                        if cx.tcx.is_diagnostic_item(sym::Option, adt.did) && in_ty == subst.type_at(0) =>\n+                    {\n+                        if name == \"filter_map\" { \"filter\" } else { \"find\" }\n+                    },\n+                    _ => return,\n+                }\n+            } else {\n+                return;\n+            };\n         span_lint(\n             cx,\n-            UNNECESSARY_FILTER_MAP,\n+            if name == \"filter_map\" {\n+                UNNECESSARY_FILTER_MAP\n+            } else {\n+                UNNECESSARY_FIND_MAP\n+            },\n             expr.span,\n-            &format!(\"this `.filter_map` can be written more simply using `.{}`\", sugg),\n+            &format!(\"this `.{}` can be written more simply using `.{}`\", name, sugg),\n         );\n     }\n }"}, {"sha": "a52390861b403b8a837ac9d091403bc9ff53a0f4", "filename": "tests/ui/unnecessary_find_map.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a588d810fdce164c24b4de82a195da6709c47d0/tests%2Fui%2Funnecessary_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a588d810fdce164c24b4de82a195da6709c47d0/tests%2Fui%2Funnecessary_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_find_map.rs?ref=2a588d810fdce164c24b4de82a195da6709c47d0", "patch": "@@ -0,0 +1,23 @@\n+#![allow(dead_code)]\n+\n+fn main() {\n+    let _ = (0..4).find_map(|x| if x > 1 { Some(x) } else { None });\n+    let _ = (0..4).find_map(|x| {\n+        if x > 1 {\n+            return Some(x);\n+        };\n+        None\n+    });\n+    let _ = (0..4).find_map(|x| match x {\n+        0 | 1 => None,\n+        _ => Some(x),\n+    });\n+\n+    let _ = (0..4).find_map(|x| Some(x + 1));\n+\n+    let _ = (0..4).find_map(i32::checked_abs);\n+}\n+\n+fn find_map_none_changes_item_type() -> Option<bool> {\n+    \"\".chars().find_map(|_| None)\n+}"}, {"sha": "fb33c122fe337e1c802b1aeec31023cedf3064ab", "filename": "tests/ui/unnecessary_find_map.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2a588d810fdce164c24b4de82a195da6709c47d0/tests%2Fui%2Funnecessary_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a588d810fdce164c24b4de82a195da6709c47d0/tests%2Fui%2Funnecessary_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_find_map.stderr?ref=2a588d810fdce164c24b4de82a195da6709c47d0", "patch": "@@ -0,0 +1,38 @@\n+error: this `.find_map` can be written more simply using `.find`\n+  --> $DIR/unnecessary_find_map.rs:4:13\n+   |\n+LL |     let _ = (0..4).find_map(|x| if x > 1 { Some(x) } else { None });\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unnecessary-find-map` implied by `-D warnings`\n+\n+error: this `.find_map` can be written more simply using `.find`\n+  --> $DIR/unnecessary_find_map.rs:5:13\n+   |\n+LL |       let _ = (0..4).find_map(|x| {\n+   |  _____________^\n+LL | |         if x > 1 {\n+LL | |             return Some(x);\n+LL | |         };\n+LL | |         None\n+LL | |     });\n+   | |______^\n+\n+error: this `.find_map` can be written more simply using `.find`\n+  --> $DIR/unnecessary_find_map.rs:11:13\n+   |\n+LL |       let _ = (0..4).find_map(|x| match x {\n+   |  _____________^\n+LL | |         0 | 1 => None,\n+LL | |         _ => Some(x),\n+LL | |     });\n+   | |______^\n+\n+error: this `.find_map` can be written more simply using `.map(..).next()`\n+  --> $DIR/unnecessary_find_map.rs:16:13\n+   |\n+LL |     let _ = (0..4).find_map(|x| Some(x + 1));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}