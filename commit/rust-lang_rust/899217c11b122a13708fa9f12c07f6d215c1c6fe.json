{"sha": "899217c11b122a13708fa9f12c07f6d215c1c6fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OTIxN2MxMWIxMjJhMTM3MDhmYTlmMTJjMDdmNmQyMTVjMWM2ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-03T18:11:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-03T18:11:25Z"}, "message": "auto merge of #10757 : TeXitoi/rust/mut-split-iter, r=alexcrichton\n\nI've renamed `MutableVector::mut_split(at)` to `MutableVector::mut_split_at(at)` to be coherent with ImmutableVector.  As specified in the commit log, The `size_hint` method is not optimal because of #9629.", "tree": {"sha": "9c525ac402986a4510f4ed760bb96f9ce1b2680f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c525ac402986a4510f4ed760bb96f9ce1b2680f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/899217c11b122a13708fa9f12c07f6d215c1c6fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/899217c11b122a13708fa9f12c07f6d215c1c6fe", "html_url": "https://github.com/rust-lang/rust/commit/899217c11b122a13708fa9f12c07f6d215c1c6fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/899217c11b122a13708fa9f12c07f6d215c1c6fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d192c9f4baa6bf8c4f930e4225d969c7595551", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d192c9f4baa6bf8c4f930e4225d969c7595551", "html_url": "https://github.com/rust-lang/rust/commit/e2d192c9f4baa6bf8c4f930e4225d969c7595551"}, {"sha": "44fc3c6ea8374e7426257532255bdbf877b77453", "url": "https://api.github.com/repos/rust-lang/rust/commits/44fc3c6ea8374e7426257532255bdbf877b77453", "html_url": "https://github.com/rust-lang/rust/commit/44fc3c6ea8374e7426257532255bdbf877b77453"}], "stats": {"total": 136, "additions": 121, "deletions": 15}, "files": [{"sha": "2274db6c63df4145c52f6b762b951c1e43829642", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/899217c11b122a13708fa9f12c07f6d215c1c6fe/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899217c11b122a13708fa9f12c07f6d215c1c6fe/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=899217c11b122a13708fa9f12c07f6d215c1c6fe", "patch": "@@ -207,14 +207,14 @@ impl<T> RingBuf<T> {\n             //    start_index to self.elts.len()\n             // and then\n             //    0 to end_index\n-            let (temp, remaining1) = self.elts.mut_split(start_index);\n-            let (remaining2, _) = temp.mut_split(end_index);\n+            let (temp, remaining1) = self.elts.mut_split_at(start_index);\n+            let (remaining2, _) = temp.mut_split_at(end_index);\n             RingBufMutIterator { remaining1: remaining1,\n                                  remaining2: remaining2,\n                                  nelts: self.nelts }\n         } else {\n             // Items to iterate goes from start_index to end_index:\n-            let (empty, elts) = self.elts.mut_split(0);\n+            let (empty, elts) = self.elts.mut_split_at(0);\n             let remaining1 = elts.mut_slice(start_index, end_index);\n             RingBufMutIterator { remaining1: remaining1,\n                                  remaining2: empty,"}, {"sha": "5bd75dbdbd89ff016dff1b68d8d1ab9720f03edf", "filename": "src/librustc/middle/borrowck/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/899217c11b122a13708fa9f12c07f6d215c1c6fe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899217c11b122a13708fa9f12c07f6d215c1c6fe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs?ref=899217c11b122a13708fa9f12c07f6d215c1c6fe", "patch": "@@ -666,8 +666,8 @@ The current rules could use some correction:\n    function will fail to compile:\n \n        fn mut_shift_ref<'a,T>(x: &mut &'a mut [T]) -> &'a mut T {\n-           // `mut_split` will restrict mutation against *x:\n-           let (head, tail) = (*x).mut_split(1);\n+           // `mut_split_at` will restrict mutation against *x:\n+           let (head, tail) = (*x).mut_split_at(1);\n \n            // Hence mutating `*x` yields an error here:\n            *x = tail;"}, {"sha": "621a0be60b373581be23223c44dd9d8d204a5308", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 116, "deletions": 10, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/899217c11b122a13708fa9f12c07f6d215c1c6fe/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899217c11b122a13708fa9f12c07f6d215c1c6fe/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=899217c11b122a13708fa9f12c07f6d215c1c6fe", "patch": "@@ -858,20 +858,24 @@ pub trait ImmutableVector<'self, T> {\n     /// Returns a reversed iterator over a vector\n     fn rev_iter(self) -> RevIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n-    /// separated by elements that match `pred`.\n+    /// separated by elements that match `pred`.  The matched element\n+    /// is not contained in the subslices.\n     fn split(self, pred: 'self |&T| -> bool) -> SplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`, limited to splitting\n-    /// at most `n` times.\n+    /// at most `n` times.  The matched element is not contained in\n+    /// the subslices.\n     fn splitn(self, n: uint, pred: 'self |&T| -> bool) -> SplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`. This starts at the\n-    /// end of the vector and works backwards.\n+    /// end of the vector and works backwards.  The matched element is\n+    /// not contained in the subslices.\n     fn rsplit(self, pred: 'self |&T| -> bool) -> RSplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred` limited to splitting\n     /// at most `n` times. This starts at the end of the vector and\n-    /// works backwards.\n+    /// works backwards.  The matched element is not contained in the\n+    /// subslices.\n     fn rsplitn(self,  n: uint, pred: 'self |&T| -> bool) -> RSplitIterator<'self, T>;\n \n     /**\n@@ -1933,6 +1937,11 @@ pub trait MutableVector<'self, T> {\n     /// Returns a reversed iterator that allows modifying each value\n     fn mut_rev_iter(self) -> MutRevIterator<'self, T>;\n \n+    /// Returns an iterator over the mutable subslices of the vector\n+    /// which are separated by elements that match `pred`.  The\n+    /// matched element is not contained in the subslices.\n+    fn mut_split(self, pred: 'self |&T| -> bool) -> MutSplitIterator<'self, T>;\n+\n     /**\n      * Returns an iterator over `size` elements of the vector at a time.\n      * The chunks are mutable and do not overlap. If `size` does not divide the\n@@ -1995,7 +2004,7 @@ pub trait MutableVector<'self, T> {\n      * itself) and the second will contain all indices from\n      * `mid..len` (excluding the index `len` itself).\n      */\n-    fn mut_split(self, mid: uint) -> (&'self mut [T],\n+    fn mut_split_at(self, mid: uint) -> (&'self mut [T],\n                                       &'self mut [T]);\n \n     /// Reverse the order of elements in a vector, in place\n@@ -2052,7 +2061,7 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n     }\n \n     #[inline]\n-    fn mut_split(self, mid: uint) -> (&'self mut [T], &'self mut [T]) {\n+    fn mut_split_at(self, mid: uint) -> (&'self mut [T], &'self mut [T]) {\n         unsafe {\n             let len = self.len();\n             let self2: &'self mut [T] = cast::transmute_copy(&self);\n@@ -2081,6 +2090,11 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         self.mut_iter().invert()\n     }\n \n+    #[inline]\n+    fn mut_split(self, pred: 'self |&T| -> bool) -> MutSplitIterator<'self, T> {\n+        MutSplitIterator { v: self, pred: pred, finished: false }\n+    }\n+\n     #[inline]\n     fn mut_chunks(self, chunk_size: uint) -> MutChunkIter<'self, T> {\n         assert!(chunk_size > 0);\n@@ -2575,6 +2589,73 @@ impl<'self, T> Clone for VecIterator<'self, T> {\n iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n pub type MutRevIterator<'self, T> = Invert<VecMutIterator<'self, T>>;\n \n+/// An iterator over the subslices of the vector which are separated\n+/// by elements that match `pred`.\n+pub struct MutSplitIterator<'self, T> {\n+    priv v: &'self mut [T],\n+    priv pred: 'self |t: &T| -> bool,\n+    priv finished: bool\n+}\n+\n+impl<'self, T> Iterator<&'self mut [T]> for MutSplitIterator<'self, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self mut [T]> {\n+        if self.finished { return None; }\n+\n+        match self.v.iter().position(|x| (self.pred)(x)) {\n+            None => {\n+                self.finished = true;\n+                let tmp = util::replace(&mut self.v, &mut []);\n+                let len = tmp.len();\n+                let (head, tail) = tmp.mut_split_at(len);\n+                self.v = tail;\n+                Some(head)\n+            }\n+            Some(idx) => {\n+                let tmp = util::replace(&mut self.v, &mut []);\n+                let (head, tail) = tmp.mut_split_at(idx);\n+                self.v = tail.mut_slice_from(1);\n+                Some(head)\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        if self.finished { return (0, Some(0)) }\n+\n+        // if the predicate doesn't match anything, we yield one slice\n+        // if it matches every element, we yield len+1 empty slices.\n+        // FIXME #9629\n+        //(1, Some(self.v.len() + 1))\n+        (1, None)\n+    }\n+}\n+\n+impl<'self, T> DoubleEndedIterator<&'self mut [T]> for MutSplitIterator<'self, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<&'self mut [T]> {\n+        if self.finished { return None; }\n+\n+        match self.v.iter().rposition(|x| (self.pred)(x)) {\n+            None => {\n+                self.finished = true;\n+                let tmp = util::replace(&mut self.v, &mut []);\n+                let len = tmp.len();\n+                let (head, tail) = tmp.mut_split_at(len);\n+                self.v = tail;\n+                Some(head)\n+            }\n+            Some(idx) => {\n+                let tmp = util::replace(&mut self.v, &mut []);\n+                let (head, tail) = tmp.mut_split_at(idx);\n+                self.v = head;\n+                Some(tail.mut_slice_from(1))\n+            }\n+        }\n+    }\n+}\n+\n /// An iterator over a vector in (non-overlapping) mutable chunks (`size`  elements at a time). When\n /// the vector len is not evenly divided by the chunk size, the last slice of the iteration will be\n /// the remainder.\n@@ -2592,7 +2673,7 @@ impl<'self, T> Iterator<&'self mut [T]> for MutChunkIter<'self, T> {\n         } else {\n             let sz = cmp::min(self.remaining, self.chunk_size);\n             let tmp = util::replace(&mut self.v, &mut []);\n-            let (head, tail) = tmp.mut_split(sz);\n+            let (head, tail) = tmp.mut_split_at(sz);\n             self.v = tail;\n             self.remaining -= sz;\n             Some(head)\n@@ -2620,7 +2701,7 @@ impl<'self, T> DoubleEndedIterator<&'self mut [T]> for MutChunkIter<'self, T> {\n             let remainder = self.remaining % self.chunk_size;\n             let sz = if remainder != 0 { remainder } else { self.chunk_size };\n             let tmp = util::replace(&mut self.v, &mut []);\n-            let (head, tail) = tmp.mut_split(self.remaining - sz);\n+            let (head, tail) = tmp.mut_split_at(self.remaining - sz);\n             self.v = head;\n             self.remaining -= sz;\n             Some(tail)\n@@ -3898,10 +3979,10 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_mut_split() {\n+    fn test_mut_split_at() {\n         let mut values = [1u8,2,3,4,5];\n         {\n-            let (left, right) = values.mut_split(2);\n+            let (left, right) = values.mut_split_at(2);\n             assert_eq!(left.slice(0, left.len()), [1, 2]);\n             for p in left.mut_iter() {\n                 *p += 1;\n@@ -4038,6 +4119,31 @@ mod tests {\n         x.pop_ref();\n     }\n \n+    #[test]\n+    fn test_mut_splitator() {\n+        let mut xs = [0,1,0,2,3,0,0,4,5,0];\n+        assert_eq!(xs.mut_split(|x| *x == 0).len(), 6);\n+        for slice in xs.mut_split(|x| *x == 0) {\n+            slice.reverse();\n+        }\n+        assert_eq!(xs, [0,1,0,3,2,0,0,5,4,0]);\n+\n+        let mut xs = [0,1,0,2,3,0,0,4,5,0,6,7];\n+        for slice in xs.mut_split(|x| *x == 0).take(5) {\n+            slice.reverse();\n+        }\n+        assert_eq!(xs, [0,1,0,3,2,0,0,5,4,0,6,7]);\n+    }\n+\n+    #[test]\n+    fn test_mut_splitator_invert() {\n+        let mut xs = [1,2,0,3,4,0,0,5,6,0];\n+        for slice in xs.mut_split(|x| *x == 0).invert().take(4) {\n+            slice.reverse();\n+        }\n+        assert_eq!(xs, [1,2,0,4,3,0,0,6,5,0]);\n+    }\n+\n     #[test]\n     fn test_mut_chunks() {\n         let mut v = [0u8, 1, 2, 3, 4, 5, 6];"}]}