{"sha": "afa995b2dd1e194845f2082707e6045d539230a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYTk5NWIyZGQxZTE5NDg0NWYyMDgyNzA3ZTYwNDVkNTM5MjMwYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-07T17:35:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-07T17:35:02Z"}, "message": "Auto merge of #79751 - aDotInTheVoid:json-true-idx, r=jyn514\n\nRustdoc: Use correct def_id for doctree::Import\n\nThe default overwrites the crate root, which crashes rustdoc-json.\n\nWhile investigating this, It turns out somehow, some items are being documented twice. I'm not sure how this is happening but for now, we just make sure they were the same if they have the same id.\n\n[Zulip descussion](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Panic.20in.20json-format/near/218899256)\n\n[Bless script](https://gist.github.com/aDotInTheVoid/2dfce0d241338def3f033f941b7c183d) (Once this is more pollished I'll submit it)\n\nr? `@jyn514`", "tree": {"sha": "e84abd3b566f58a53ee9ad0c88304d4b90241da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e84abd3b566f58a53ee9ad0c88304d4b90241da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa995b2dd1e194845f2082707e6045d539230a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa995b2dd1e194845f2082707e6045d539230a5", "html_url": "https://github.com/rust-lang/rust/commit/afa995b2dd1e194845f2082707e6045d539230a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa995b2dd1e194845f2082707e6045d539230a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ff9c3d052c2c3d5f26076362f38643f6e48680", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ff9c3d052c2c3d5f26076362f38643f6e48680", "html_url": "https://github.com/rust-lang/rust/commit/b5ff9c3d052c2c3d5f26076362f38643f6e48680"}, {"sha": "c254a15906d6ad64821659b50c4265c96b113159", "url": "https://api.github.com/repos/rust-lang/rust/commits/c254a15906d6ad64821659b50c4265c96b113159", "html_url": "https://github.com/rust-lang/rust/commit/c254a15906d6ad64821659b50c4265c96b113159"}], "stats": {"total": 290, "additions": 249, "deletions": 41}, "files": [{"sha": "16274430902e42486f3020117f4020e74b4c5efe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa995b2dd1e194845f2082707e6045d539230a5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa995b2dd1e194845f2082707e6045d539230a5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=afa995b2dd1e194845f2082707e6045d539230a5", "patch": "@@ -2263,7 +2263,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n-            def_id: DefId::local(CRATE_DEF_INDEX),\n+            def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: None,\n             const_stability: None,"}, {"sha": "5f640bfddf10b95760ba0f2e7d2dfc2a6c58916c", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afa995b2dd1e194845f2082707e6045d539230a5/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa995b2dd1e194845f2082707e6045d539230a5/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=afa995b2dd1e194845f2082707e6045d539230a5", "patch": "@@ -151,7 +151,12 @@ impl FormatRenderer for JsonRenderer {\n             } else if let types::ItemEnum::EnumItem(ref mut e) = new_item.inner {\n                 e.impls = self.get_impls(id, cache)\n             }\n-            self.index.borrow_mut().insert(id.into(), new_item);\n+            let removed = self.index.borrow_mut().insert(id.into(), new_item.clone());\n+            // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n+            // to make sure the items are unique.\n+            if let Some(old_item) = removed {\n+                assert_eq!(old_item, new_item);\n+            }\n         }\n \n         Ok(())"}, {"sha": "9335fe9be1a4b15e9d521eefc397f1fce916e296", "filename": "src/librustdoc/json/types.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/afa995b2dd1e194845f2082707e6045d539230a5/src%2Flibrustdoc%2Fjson%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa995b2dd1e194845f2082707e6045d539230a5/src%2Flibrustdoc%2Fjson%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Ftypes.rs?ref=afa995b2dd1e194845f2082707e6045d539230a5", "patch": "@@ -11,7 +11,7 @@ use serde::{Deserialize, Serialize};\n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n /// tools to find or link to them.\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Crate {\n     /// The id of the root [`Module`] item of the local crate.\n     pub root: Id,\n@@ -31,7 +31,7 @@ pub struct Crate {\n     pub format_version: u32,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub html_root_url: Option<String>,\n@@ -41,7 +41,7 @@ pub struct ExternalCrate {\n /// information. This struct should contain enough to generate a link/reference to the item in\n /// question, or can be used by a tool that takes the json output of multiple crates to find\n /// the actual item definition with all the relevant info.\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct ItemSummary {\n     /// Can be used to look up the name and html_root_url of the crate this item came from in the\n     /// `external_crates` map.\n@@ -53,7 +53,7 @@ pub struct ItemSummary {\n     pub kind: ItemKind,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Item {\n     /// The unique identifier of this item. Can be used to find this item in various mappings.\n     pub id: Id,\n@@ -79,7 +79,7 @@ pub struct Item {\n     pub inner: ItemEnum,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Span {\n     /// The path to the source file for this span relative to the path `rustdoc` was invoked with.\n     pub filename: PathBuf,\n@@ -89,14 +89,14 @@ pub struct Span {\n     pub end: (usize, usize),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Deprecation {\n     pub since: Option<String>,\n     pub note: Option<String>,\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum Visibility {\n     Public,\n     /// For the most part items are private by default. The exceptions are associated items of\n@@ -112,7 +112,7 @@ pub enum Visibility {\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum GenericArgs {\n     /// <'a, 32, B: Copy, C = u32>\n     AngleBracketed { args: Vec<GenericArg>, bindings: Vec<TypeBinding> },\n@@ -121,14 +121,14 @@ pub enum GenericArgs {\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum GenericArg {\n     Lifetime(String),\n     Type(Type),\n     Const(Constant),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Constant {\n     #[serde(rename = \"type\")]\n     pub type_: Type,\n@@ -137,14 +137,14 @@ pub struct Constant {\n     pub is_literal: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct TypeBinding {\n     pub name: String,\n     pub binding: TypeBindingKind,\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum TypeBindingKind {\n     Equality(Type),\n     Constraint(Vec<GenericBound>),\n@@ -154,7 +154,7 @@ pub enum TypeBindingKind {\n pub struct Id(pub String);\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum ItemKind {\n     Module,\n     ExternCrate,\n@@ -184,7 +184,7 @@ pub enum ItemKind {\n }\n \n #[serde(untagged)]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum ItemEnum {\n     ModuleItem(Module),\n     ExternCrateItem {\n@@ -231,13 +231,13 @@ pub enum ItemEnum {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Module {\n     pub is_crate: bool,\n     pub items: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Struct {\n     pub struct_type: StructType,\n     pub generics: Generics,\n@@ -246,7 +246,7 @@ pub struct Struct {\n     pub impls: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Enum {\n     pub generics: Generics,\n     pub variants_stripped: bool,\n@@ -256,67 +256,67 @@ pub struct Enum {\n \n #[serde(rename_all = \"snake_case\")]\n #[serde(tag = \"variant_kind\", content = \"variant_inner\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum Variant {\n     Plain,\n     Tuple(Vec<Type>),\n     Struct(Vec<Id>),\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum StructType {\n     Plain,\n     Tuple,\n     Unit,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub header: String,\n     pub abi: String,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Method {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub header: String,\n     pub has_body: bool,\n }\n \n-#[derive(Clone, Debug, Default, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Default, Serialize, Deserialize, PartialEq)]\n pub struct Generics {\n     pub params: Vec<GenericParamDef>,\n     pub where_predicates: Vec<WherePredicate>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct GenericParamDef {\n     pub name: String,\n     pub kind: GenericParamDefKind,\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum GenericParamDefKind {\n     Lifetime,\n     Type { bounds: Vec<GenericBound>, default: Option<Type> },\n     Const(Type),\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum WherePredicate {\n     BoundPredicate { ty: Type, bounds: Vec<GenericBound> },\n     RegionPredicate { lifetime: String, bounds: Vec<GenericBound> },\n     EqPredicate { lhs: Type, rhs: Type },\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum GenericBound {\n     TraitBound {\n         #[serde(rename = \"trait\")]\n@@ -329,7 +329,7 @@ pub enum GenericBound {\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum TraitBoundModifier {\n     None,\n     Maybe,\n@@ -338,7 +338,7 @@ pub enum TraitBoundModifier {\n \n #[serde(rename_all = \"snake_case\")]\n #[serde(tag = \"kind\", content = \"inner\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum Type {\n     /// Structs, enums, and traits\n     ResolvedPath {\n@@ -391,22 +391,22 @@ pub enum Type {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct FunctionPointer {\n     pub is_unsafe: bool,\n     pub generic_params: Vec<GenericParamDef>,\n     pub decl: FnDecl,\n     pub abi: String,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct FnDecl {\n     pub inputs: Vec<(String, Type)>,\n     pub output: Option<Type>,\n     pub c_variadic: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Trait {\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n@@ -416,13 +416,13 @@ pub struct Trait {\n     pub implementors: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct TraitAlias {\n     pub generics: Generics,\n     pub params: Vec<GenericBound>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Impl {\n     pub is_unsafe: bool,\n     pub generics: Generics,\n@@ -438,7 +438,7 @@ pub struct Impl {\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Import {\n     /// The full path being imported.\n     pub span: String,\n@@ -451,14 +451,14 @@ pub struct Import {\n     pub glob: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct ProcMacro {\n     pub kind: MacroKind,\n     pub helpers: Vec<String>,\n }\n \n #[serde(rename_all = \"snake_case\")]\n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub enum MacroKind {\n     /// A bang macro `foo!()`.\n     Bang,\n@@ -468,20 +468,20 @@ pub enum MacroKind {\n     Derive,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Typedef {\n     #[serde(rename = \"type\")]\n     pub type_: Type,\n     pub generics: Generics,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct OpaqueTy {\n     pub bounds: Vec<GenericBound>,\n     pub generics: Generics,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize)]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Static {\n     #[serde(rename = \"type\")]\n     pub type_: Type,"}, {"sha": "65bb0c5fa0367ef8d1e7b22d986bf40a727f648a", "filename": "src/test/rustdoc-json/nested.expected", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/afa995b2dd1e194845f2082707e6045d539230a5/src%2Ftest%2Frustdoc-json%2Fnested.expected", "raw_url": "https://github.com/rust-lang/rust/raw/afa995b2dd1e194845f2082707e6045d539230a5/src%2Ftest%2Frustdoc-json%2Fnested.expected", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.expected?ref=afa995b2dd1e194845f2082707e6045d539230a5", "patch": "@@ -0,0 +1,196 @@\n+{\n+  \"crate_version\": null,\n+  \"external_crates\": {},\n+  \"format_version\": 1,\n+  \"includes_private\": false,\n+  \"index\": {\n+    \"0:0\": {\n+      \"attrs\": [],\n+      \"crate_id\": 0,\n+      \"deprecation\": null,\n+      \"docs\": \"\",\n+      \"id\": \"0:0\",\n+      \"inner\": {\n+        \"is_crate\": true,\n+        \"items\": [\n+          \"0:3\"\n+        ]\n+      },\n+      \"kind\": \"module\",\n+      \"links\": {},\n+      \"name\": \"nested\",\n+      \"source\": {\n+        \"begin\": [\n+          2,\n+          0\n+        ],\n+        \"end\": [\n+          7,\n+          1\n+        ],\n+        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n+      },\n+      \"visibility\": \"public\"\n+    },\n+    \"0:3\": {\n+      \"attrs\": [],\n+      \"crate_id\": 0,\n+      \"deprecation\": null,\n+      \"docs\": \"\",\n+      \"id\": \"0:3\",\n+      \"inner\": {\n+        \"is_crate\": false,\n+        \"items\": [\n+          \"0:7\",\n+          \"0:4\"\n+        ]\n+      },\n+      \"kind\": \"module\",\n+      \"links\": {},\n+      \"name\": \"l1\",\n+      \"source\": {\n+        \"begin\": [\n+          2,\n+          0\n+        ],\n+        \"end\": [\n+          7,\n+          1\n+        ],\n+        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n+      },\n+      \"visibility\": \"public\"\n+    },\n+    \"0:4\": {\n+      \"attrs\": [],\n+      \"crate_id\": 0,\n+      \"deprecation\": null,\n+      \"docs\": \"\",\n+      \"id\": \"0:4\",\n+      \"inner\": {\n+        \"is_crate\": false,\n+        \"items\": [\n+          \"0:5\"\n+        ]\n+      },\n+      \"kind\": \"module\",\n+      \"links\": {},\n+      \"name\": \"l3\",\n+      \"source\": {\n+        \"begin\": [\n+          3,\n+          4\n+        ],\n+        \"end\": [\n+          5,\n+          5\n+        ],\n+        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n+      },\n+      \"visibility\": \"public\"\n+    },\n+    \"0:5\": {\n+      \"attrs\": [],\n+      \"crate_id\": 0,\n+      \"deprecation\": null,\n+      \"docs\": \"\",\n+      \"id\": \"0:5\",\n+      \"inner\": {\n+        \"fields\": [],\n+        \"fields_stripped\": false,\n+        \"generics\": {\n+          \"params\": [],\n+          \"where_predicates\": []\n+        },\n+        \"impls\": [\n+          \"0:10\",\n+          \"0:11\",\n+          \"0:12\",\n+          \"0:14\",\n+          \"0:15\"\n+        ],\n+        \"struct_type\": \"unit\"\n+      },\n+      \"kind\": \"struct\",\n+      \"links\": {},\n+      \"name\": \"L4\",\n+      \"source\": {\n+        \"begin\": [\n+          4,\n+          8\n+        ],\n+        \"end\": [\n+          4,\n+          22\n+        ],\n+        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n+      },\n+      \"visibility\": \"public\"\n+    },\n+    \"0:7\": {\n+      \"attrs\": [],\n+      \"crate_id\": 0,\n+      \"deprecation\": null,\n+      \"docs\": \"\",\n+      \"id\": \"0:7\",\n+      \"inner\": {\n+        \"glob\": false,\n+        \"id\": \"0:5\",\n+        \"name\": \"L4\",\n+        \"span\": \"l3::L4\"\n+      },\n+      \"kind\": \"import\",\n+      \"links\": {},\n+      \"name\": null,\n+      \"source\": {\n+        \"begin\": [\n+          6,\n+          4\n+        ],\n+        \"end\": [\n+          6,\n+          19\n+        ],\n+        \"filename\": \"$TEST_BASE_DIR/nested.rs\"\n+      },\n+      \"visibility\": \"public\"\n+    }\n+  },\n+  \"paths\": {\n+    \"0:0\": {\n+      \"crate_id\": 0,\n+      \"kind\": \"module\",\n+      \"path\": [\n+        \"nested\"\n+      ]\n+    },\n+    \"0:3\": {\n+      \"crate_id\": 0,\n+      \"kind\": \"module\",\n+      \"path\": [\n+        \"nested\",\n+        \"l1\"\n+      ]\n+    },\n+    \"0:4\": {\n+      \"crate_id\": 0,\n+      \"kind\": \"module\",\n+      \"path\": [\n+        \"nested\",\n+        \"l1\",\n+        \"l3\"\n+      ]\n+    },\n+    \"0:5\": {\n+      \"crate_id\": 0,\n+      \"kind\": \"struct\",\n+      \"path\": [\n+        \"nested\",\n+        \"l1\",\n+        \"l3\",\n+        \"L4\"\n+      ]\n+    }\n+  },\n+  \"root\": \"0:0\"\n+}\n\\ No newline at end of file"}, {"sha": "e460b343d37303de27936504ef78d6dd150ae46e", "filename": "src/test/rustdoc-json/nested.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afa995b2dd1e194845f2082707e6045d539230a5/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa995b2dd1e194845f2082707e6045d539230a5/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=afa995b2dd1e194845f2082707e6045d539230a5", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+pub mod l1 {\n+    pub mod l3 {\n+        pub struct L4;\n+    }\n+    pub use l3::L4;\n+}"}]}