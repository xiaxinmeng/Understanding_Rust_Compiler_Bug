{"sha": "9f0168a9f3bc546f12d07018bdacbb1798c571e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDE2OGE5ZjNiYzU0NmYxMmQwNzAxOGJkYWNiYjE3OThjNTcxZTk=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-05-29T15:25:56Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-08-18T23:06:42Z"}, "message": "Add notes on unsized argument errors.", "tree": {"sha": "8e05e9b3639316020f142e0f5cadf44d31c6f40b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e05e9b3639316020f142e0f5cadf44d31c6f40b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f0168a9f3bc546f12d07018bdacbb1798c571e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0168a9f3bc546f12d07018bdacbb1798c571e9", "html_url": "https://github.com/rust-lang/rust/commit/9f0168a9f3bc546f12d07018bdacbb1798c571e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f0168a9f3bc546f12d07018bdacbb1798c571e9/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b923fd44c5c5925e635815fce68bdf1f98740f", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b923fd44c5c5925e635815fce68bdf1f98740f", "html_url": "https://github.com/rust-lang/rust/commit/33b923fd44c5c5925e635815fce68bdf1f98740f"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "bedee5dae5db88636595f415309f1a1cc98f0293", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9f0168a9f3bc546f12d07018bdacbb1798c571e9", "patch": "@@ -1455,6 +1455,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::VariableType(_) => {\n                 err.note(\"all local variables must have a statically known size\");\n             }\n+            ObligationCauseCode::SizedArgumentType => {\n+                err.note(\"all function arguments must have a statically known size\");\n+            }\n             ObligationCauseCode::SizedReturnType => {\n                 err.note(\"the return type of a function must have a \\\n                           statically known size\");"}, {"sha": "ef14d6d05c207f5ba93b1f166572892ffd9d1951", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=9f0168a9f3bc546f12d07018bdacbb1798c571e9", "patch": "@@ -185,6 +185,8 @@ pub enum ObligationCauseCode<'tcx> {\n     StructInitializerSized,\n     /// Type of each variable must be Sized\n     VariableType(ast::NodeId),\n+    /// Argument type must be Sized\n+    SizedArgumentType,\n     /// Return type must be Sized\n     SizedReturnType,\n     /// Yield type must be Sized"}, {"sha": "9292b42eb525e751a8308c6eb348a9aa4537621e", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=9f0168a9f3bc546f12d07018bdacbb1798c571e9", "patch": "@@ -203,6 +203,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::StructInitializerSized => Some(super::StructInitializerSized),\n             super::VariableType(id) => Some(super::VariableType(id)),\n             super::ReturnType(id) => Some(super::ReturnType(id)),\n+            super::SizedArgumentType => Some(super::SizedArgumentType),\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),\n             super::RepeatVec => Some(super::RepeatVec),"}, {"sha": "c7b717969ab8be51096357ecc14d9d6cc2b5d43d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9f0168a9f3bc546f12d07018bdacbb1798c571e9", "patch": "@@ -1049,7 +1049,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n         if arg.pat.simple_ident().is_none() {\n-            fcx.require_type_is_sized(arg_ty, decl.output.span(), traits::MiscObligation);\n+            fcx.require_type_is_sized(arg_ty, decl.output.span(), traits::SizedArgumentType);\n         }\n \n         fcx.write_ty(arg.hir_id, arg_ty);"}, {"sha": "9ecae90ff3a5149d911c98ca8da7660b732883f3", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=9f0168a9f3bc546f12d07018bdacbb1798c571e9", "patch": "@@ -6,6 +6,7 @@ LL | fn _test(ref _p: str) {}\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all function arguments must have a statically known size\n \n error: aborting due to previous error\n "}, {"sha": "75f43be77281fec17e3d102a218b699eb17d540e", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=9f0168a9f3bc546f12d07018bdacbb1798c571e9", "patch": "@@ -6,6 +6,7 @@ LL | pub fn example(ref s: str) {}\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all function arguments must have a statically known size\n \n error: aborting due to previous error\n "}, {"sha": "0f383fe40a5d4f2279f35873971d30064d8e28b0", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f0168a9f3bc546f12d07018bdacbb1798c571e9/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=9f0168a9f3bc546f12d07018bdacbb1798c571e9", "patch": "@@ -7,6 +7,7 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where <Self as std::ops::Deref>::Target: std::marker::Sized` bound\n+   = note: all function arguments must have a statically known size\n \n error[E0277]: the size for values of type `(dyn std::string::ToString + 'static)` cannot be known at compilation time\n   --> $DIR/issue-42312.rs:18:23\n@@ -16,6 +17,7 @@ LL | pub fn f(_: ToString) {}\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all function arguments must have a statically known size\n \n error: aborting due to 2 previous errors\n "}]}