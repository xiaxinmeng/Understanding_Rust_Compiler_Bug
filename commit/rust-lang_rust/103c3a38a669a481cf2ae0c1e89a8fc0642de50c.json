{"sha": "103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "node_id": "C_kwDOAAsO6NoAKDEwM2MzYTM4YTY2OWE0ODFjZjJhZTBjMWU4OWE4ZmMwNjQyZGU1MGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-29T23:04:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-29T23:04:11Z"}, "message": "Rollup merge of #93358 - compiler-errors:is-not-const, r=fee1-dead\n\nAdd note suggesting that predicate may be satisfied, but is not `const`\n\nNot sure if we should be printing this in addition to, or perhaps _instead_ of the help message:\n```\nhelp: the trait `~const Add` is not implemented for `NonConstAdd`\n```\n\nAlso added `ParamEnv::is_const` and `PolyTraitPredicate::is_const_if_const` and, in a separate commit, used those in other places instead of `== hir::Constness::Const`, etc.\n\nr? ````@fee1-dead````", "tree": {"sha": "5b740cc1d21f689247749df5e0f9683949769c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b740cc1d21f689247749df5e0f9683949769c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh9cfrCRBK7hj4Ov3rIwAA+aAIABJmpy5CQa5sgIxtnYAVii3/\nhjbQvY+EYhzR6zYHnAqJ7+TMYpEqCtzcg0LhA4c5Av0jlatCmfpdlSdnq+ibgd9E\nVjkTjzIC10Yflr9apM/1OVYUyRr7Ut4m09lXX+fyl43jQItrnWUsWwh7mIbrm/ZC\nePzNrtGtbpfQoSZ1g8OhKz3aCEiFl7lSwfIo/nP7BLq+y0AUvu+k84qrBGNtnpqa\n3Tr50WOOO40GHKS3ynRZ8MR+kD2pmPg4cU9NWwGO3xRdc4qcRZX9mkMX3lymRY6/\nGQbdM6C7AAWO7KviOuswwVAeWP8V1WJJCclgI5pwyRILbGRIEkWWoC4QC8GTxvI=\n=EaAI\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b740cc1d21f689247749df5e0f9683949769c70\nparent 6e2593d3430ea6675b23387288043524d693fe8f\nparent c6de4d55aab6d06f040202cbe39dc5c32809aac2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643497451 +0100\ncommitter GitHub <noreply@github.com> 1643497451 +0100\n\nRollup merge of #93358 - compiler-errors:is-not-const, r=fee1-dead\n\nAdd note suggesting that predicate may be satisfied, but is not `const`\n\nNot sure if we should be printing this in addition to, or perhaps _instead_ of the help message:\n```\nhelp: the trait `~const Add` is not implemented for `NonConstAdd`\n```\n\nAlso added `ParamEnv::is_const` and `PolyTraitPredicate::is_const_if_const` and, in a separate commit, used those in other places instead of `== hir::Constness::Const`, etc.\n\nr? ````@fee1-dead````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "html_url": "https://github.com/rust-lang/rust/commit/103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2593d3430ea6675b23387288043524d693fe8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2593d3430ea6675b23387288043524d693fe8f", "html_url": "https://github.com/rust-lang/rust/commit/6e2593d3430ea6675b23387288043524d693fe8f"}, {"sha": "c6de4d55aab6d06f040202cbe39dc5c32809aac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6de4d55aab6d06f040202cbe39dc5c32809aac2", "html_url": "https://github.com/rust-lang/rust/commit/c6de4d55aab6d06f040202cbe39dc5c32809aac2"}], "stats": {"total": 96, "additions": 84, "deletions": 12}, "files": [{"sha": "9dc34260de76697047c831da46ec30ec24d6ca40", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -7,7 +7,6 @@ use crate::interpret::{\n };\n \n use rustc_errors::ErrorReported;\n-use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -216,7 +215,7 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n-    assert!(key.param_env.constness() == hir::Constness::Const);\n+    assert!(key.param_env.is_const());\n     // see comment in eval_to_allocation_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n@@ -251,7 +250,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToAllocationRawResult<'tcx> {\n-    assert!(key.param_env.constness() == hir::Constness::Const);\n+    assert!(key.param_env.is_const());\n     // Because the constant is computed twice (once per value of `Reveal`), we are at risk of\n     // reporting the same error twice here. To resolve this, we check whether we can evaluate the\n     // constant in the more restrictive `Reveal::UserFacing`, which most likely already was"}, {"sha": "4c7f3482776d7ff332b562ad840c1e84043a7178", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -86,15 +86,14 @@ declare_lint_pass!(\n \n impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n-        use rustc_middle::ty;\n         use rustc_middle::ty::PredicateKind::*;\n \n         let predicates = cx.tcx.explicit_predicates_of(item.def_id);\n         for &(predicate, span) in predicates.predicates {\n             let Trait(trait_predicate) = predicate.kind().skip_binder() else {\n                 continue\n             };\n-            if trait_predicate.constness == ty::BoundConstness::ConstIfConst {\n+            if trait_predicate.is_const_if_const() {\n                 // `~const Drop` definitely have meanings so avoid linting here.\n                 continue;\n             }"}, {"sha": "e7a8e71ce71b008c052604ea79caea4e4e634b12", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -784,6 +784,11 @@ impl<'tcx> TraitPredicate<'tcx> {\n     pub fn self_ty(self) -> Ty<'tcx> {\n         self.trait_ref.self_ty()\n     }\n+\n+    #[inline]\n+    pub fn is_const_if_const(self) -> bool {\n+        self.constness == BoundConstness::ConstIfConst\n+    }\n }\n \n impl<'tcx> PolyTraitPredicate<'tcx> {\n@@ -803,6 +808,11 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n             p\n         });\n     }\n+\n+    #[inline]\n+    pub fn is_const_if_const(self) -> bool {\n+        self.skip_binder().is_const_if_const()\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n@@ -1388,6 +1398,11 @@ impl<'tcx> ParamEnv<'tcx> {\n         self.packed.tag().constness\n     }\n \n+    #[inline]\n+    pub fn is_const(self) -> bool {\n+        self.packed.tag().constness == hir::Constness::Const\n+    }\n+\n     /// Construct a trait environment with no where-clauses in scope\n     /// where the values of all `impl Trait` and other hidden types\n     /// are revealed. This is suitable for monomorphized, post-typeck\n@@ -1503,6 +1518,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n             polarity: ty::ImplPolarity::Positive,\n         })\n     }\n+\n     #[inline]\n     pub fn without_const(self) -> PolyTraitPredicate<'tcx> {\n         self.with_constness(BoundConstness::NotConst)"}, {"sha": "687bd16ba30f451ba4071a978ce5223b9fb07945", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -439,6 +439,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         } else {\n                             err.span_label(span, explanation);\n                         }\n+\n+                        if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n+                            let non_const_predicate = trait_ref.without_const();\n+                            let non_const_obligation = Obligation {\n+                                cause: obligation.cause.clone(),\n+                                param_env: obligation.param_env.without_const(),\n+                                predicate: non_const_predicate.to_predicate(tcx),\n+                                recursion_depth: obligation.recursion_depth,\n+                            };\n+                            if self.predicate_may_hold(&non_const_obligation) {\n+                                err.span_note(\n+                                    span,\n+                                    &format!(\n+                                        \"the trait `{}` is implemented for `{}`, \\\n+                                        but that implementation is not `const`\",\n+                                        non_const_predicate.print_modifiers_and_trait_path(),\n+                                        trait_ref.skip_binder().self_ty(),\n+                                    ),\n+                                );\n+                            }\n+                        }\n+\n                         if let Some((msg, span)) = type_def {\n                             err.span_label(span, &msg);\n                         }"}, {"sha": "db86041f6180b5efdc49a71aebda28ba7a8d2020", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -305,7 +305,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             } else if lang_items.unsize_trait() == Some(def_id) {\n                 self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n             } else if lang_items.drop_trait() == Some(def_id)\n-                && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+                && obligation.predicate.is_const_if_const()\n             {\n                 self.assemble_const_drop_candidates(obligation, &mut candidates);\n             } else {"}, {"sha": "639884844b25d599208805359473fb4742292bbe", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -72,9 +72,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // CheckPredicate(&A: Super)\n         // CheckPredicate(A: ~const Super) // <- still const env, failure\n         // ```\n-        if obligation.param_env.constness() == Constness::Const\n-            && obligation.predicate.skip_binder().constness == ty::BoundConstness::NotConst\n-        {\n+        if obligation.param_env.is_const() && !obligation.predicate.is_const_if_const() {\n             new_obligation = TraitObligation {\n                 cause: obligation.cause.clone(),\n                 param_env: obligation.param_env.without_const(),"}, {"sha": "47427395b93b36adff83c8dda2f9034cc12346bf", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -1173,9 +1173,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ImplCandidate(def_id)\n                         if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n                     // const param\n-                    ParamCandidate(trait_pred)\n-                        if trait_pred.skip_binder().constness\n-                            == ty::BoundConstness::ConstIfConst => {}\n+                    ParamCandidate(trait_pred) if trait_pred.is_const_if_const() => {}\n                     // auto trait impl\n                     AutoImplCandidate(..) => {}\n                     // generator, this will raise error in other places"}, {"sha": "06a7a2f63cf5a6408b97b774f617f109403bcd42", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -7,6 +7,11 @@ LL |     const_eval_select((), || {}, || {});\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n+note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`, but that implementation is not `const`\n+  --> $DIR/const-eval-select-bad.rs:6:27\n+   |\n+LL |     const_eval_select((), || {}, || {});\n+   |                           ^^^^^\n    = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL"}, {"sha": "0788b17a1c0327d53e3dd0730ce01d0d6496963b", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -5,6 +5,11 @@ LL |     type Bar = NonConstAdd;\n    |                ^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `~const Add` is not implemented for `NonConstAdd`\n+note: the trait `Add` is implemented for `NonConstAdd`, but that implementation is not `const`\n+  --> $DIR/assoc-type.rs:18:16\n+   |\n+LL |     type Bar = NonConstAdd;\n+   |                ^^^^^^^^^^^\n note: required by a bound in `Foo::Bar`\n   --> $DIR/assoc-type.rs:14:15\n    |"}, {"sha": "35b7fe8e401c3162b674e93169a3c6b9d3566ee5", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -7,6 +7,11 @@ LL | pub const EQ: bool = equals_self(&S);\n    |                      required by a bound introduced by this call\n    |\n    = help: the trait `~const PartialEq` is not implemented for `S`\n+note: the trait `PartialEq` is implemented for `S`, but that implementation is not `const`\n+  --> $DIR/call-generic-method-nonconst.rs:19:34\n+   |\n+LL | pub const EQ: bool = equals_self(&S);\n+   |                                  ^^\n note: required by a bound in `equals_self`\n   --> $DIR/call-generic-method-nonconst.rs:12:25\n    |"}, {"sha": "d280cd2556f06f6c0eeed84d923930f512e3b6a1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -28,6 +28,11 @@ LL |         const _: () = check($exp);\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n    |\n+note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:46:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `ConstImplWithDropGlue`\n   --> $DIR/const-drop-fail.rs:17:8\n    |"}, {"sha": "d280cd2556f06f6c0eeed84d923930f512e3b6a1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -28,6 +28,11 @@ LL |         const _: () = check($exp);\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n    |\n+note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:46:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `ConstImplWithDropGlue`\n   --> $DIR/const-drop-fail.rs:17:8\n    |"}, {"sha": "bc807507fd6683fbf8deda4b6db4cc9aea466547", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n LL |         foo::<()>();\n    |               ^^ the trait `~const Tr` is not implemented for `()`\n    |\n+note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n+   |\n+LL |         foo::<()>();\n+   |               ^^\n note: required by a bound in `foo`\n   --> $DIR/default-method-body-is-const-body-checking.rs:7:28\n    |"}, {"sha": "f9b5d81c63b85a420c3c591456a1e8cc60fe8655", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/103c3a38a669a481cf2ae0c1e89a8fc0642de50c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=103c3a38a669a481cf2ae0c1e89a8fc0642de50c", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n LL |     T::b();\n    |     ^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause.rs:14:5\n+   |\n+LL |     T::b();\n+   |     ^^^^\n note: required by a bound in `Foo::b`\n   --> $DIR/trait-where-clause.rs:8:24\n    |\n@@ -20,6 +25,11 @@ error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause.rs:16:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^\n note: required by a bound in `Foo::c`\n   --> $DIR/trait-where-clause.rs:9:13\n    |"}]}