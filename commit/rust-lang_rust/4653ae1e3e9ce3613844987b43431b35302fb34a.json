{"sha": "4653ae1e3e9ce3613844987b43431b35302fb34a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NTNhZTFlM2U5Y2UzNjEzODQ0OTg3YjQzNDMxYjM1MzAyZmIzNGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-07T14:02:14Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "we can now print on entering/leaving the topmost frame, and make sure it stays that way", "tree": {"sha": "5e12f28a0cbdc55f7840c74049d52a6447634a4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e12f28a0cbdc55f7840c74049d52a6447634a4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4653ae1e3e9ce3613844987b43431b35302fb34a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4653ae1e3e9ce3613844987b43431b35302fb34a", "html_url": "https://github.com/rust-lang/rust/commit/4653ae1e3e9ce3613844987b43431b35302fb34a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4653ae1e3e9ce3613844987b43431b35302fb34a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d6c55cdf1772b0cfbed371dca16b3f3769117f", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d6c55cdf1772b0cfbed371dca16b3f3769117f", "html_url": "https://github.com/rust-lang/rust/commit/22d6c55cdf1772b0cfbed371dca16b3f3769117f"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "43f019019f7c3e5a339bb6c2bb54f661f4d580fb", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4653ae1e3e9ce3613844987b43431b35302fb34a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653ae1e3e9ce3613844987b43431b35302fb34a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=4653ae1e3e9ce3613844987b43431b35302fb34a", "patch": "@@ -602,14 +602,15 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n             other => return other,\n         }\n     }\n-    // the first trace is for replicating an ice\n-    // There's no tracking issue, but the next two lines concatenated link to the discussion on\n-    // zulip. It's not really possible to test this, because it doesn't show up in diagnostics\n-    // or MIR.\n-    // https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/\n-    // subject/anon_const_instance_printing/near/135980032\n-    trace!(\"const eval: {}\", key.value.instance);\n-    trace!(\"const eval: {:?}\", key);\n+    if cfg!(debug_assertions) {\n+        // Make sure we format the instance even if we do not print it.\n+        // This serves as a regression test against an ICE on printing.\n+        // The next two lines concatenated contain some discussion:\n+        // https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/\n+        // subject/anon_const_instance_printing/near/135980032\n+        let instance = key.value.instance.to_string();\n+        trace!(\"const eval: {:?} ({})\", key, instance);\n+    }\n \n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();"}, {"sha": "e81d0a56b2b051758212c1f4bc2353648dcddef8", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4653ae1e3e9ce3613844987b43431b35302fb34a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653ae1e3e9ce3613844987b43431b35302fb34a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4653ae1e3e9ce3613844987b43431b35302fb34a", "patch": "@@ -450,7 +450,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         return_place: Option<PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,\n     ) -> EvalResult<'tcx> {\n-        if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc...\n+        if self.stack.len() > 0 {\n             info!(\"PAUSING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n         ::log_settings::settings().indentation += 1;\n@@ -525,9 +525,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             self.frame_mut().locals = locals;\n         }\n \n-        if self.stack.len() > 1 { // FIXME no check should be needed, but some instances ICE\n-            info!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n-        }\n+        info!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n \n         if self.stack.len() > self.tcx.sess.const_eval_stack_frame_limit {\n             err!(StackFrameLimitReached)\n@@ -537,9 +535,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n     }\n \n     pub(super) fn pop_stack_frame(&mut self) -> EvalResult<'tcx> {\n-        if self.stack.len() > 1 { // FIXME no check should be needed, but some instances ICE\n-            info!(\"LEAVING({}) {}\", self.cur_frame(), self.frame().instance);\n-        }\n+        info!(\"LEAVING({}) {}\", self.cur_frame(), self.frame().instance);\n         ::log_settings::settings().indentation -= 1;\n         let frame = self.stack.pop().expect(\n             \"tried to pop a stack frame, but there were none\",\n@@ -591,7 +587,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             StackPopCleanup::None { .. } => {}\n         }\n \n-        if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc...\n+        if self.stack.len() > 0 {\n             info!(\"CONTINUING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n "}]}