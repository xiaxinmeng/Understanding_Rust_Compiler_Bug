{"sha": "749a9689be022f2737820a87fe09d930907435a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OWE5Njg5YmUwMjJmMjczNzgyMGE4N2ZlMDlkOTMwOTA3NDM1YTU=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-10T22:52:57Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-10T22:52:57Z"}, "message": "Break chains that don't start with path expressions", "tree": {"sha": "991bcddfb5feb8417ee49ce5f3b2640cac46bcc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991bcddfb5feb8417ee49ce5f3b2640cac46bcc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/749a9689be022f2737820a87fe09d930907435a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/749a9689be022f2737820a87fe09d930907435a5", "html_url": "https://github.com/rust-lang/rust/commit/749a9689be022f2737820a87fe09d930907435a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/749a9689be022f2737820a87fe09d930907435a5/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53be867105394f09c33d929535d37bc6522ff8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a53be867105394f09c33d929535d37bc6522ff8b", "html_url": "https://github.com/rust-lang/rust/commit/a53be867105394f09c33d929535d37bc6522ff8b"}], "stats": {"total": 126, "additions": 58, "deletions": 68}, "files": [{"sha": "9913c68cdfa9845d4563eb9bf27e8d9bb6c44575", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/749a9689be022f2737820a87fe09d930907435a5/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749a9689be022f2737820a87fe09d930907435a5/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=749a9689be022f2737820a87fe09d930907435a5", "patch": "@@ -82,7 +82,9 @@ fn main() {\n }\n \n fn print_usage<S: Into<String>>(reason: S) {\n-    println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[replace|overwrite|display|diff]] <file_name>\", reason.into());\n+    println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[replace|overwrite|display|diff]] \\\n+              <file_name>\",\n+             reason.into());\n }\n \n fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>\n@@ -123,6 +125,5 @@ fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>\n         return None;\n     }\n \n-\n     Some((rustc_args, write_mode))\n }"}, {"sha": "4f395df04871d3ac4aafb0248306978f7ac417c7", "filename": "src/chains.rs", "status": "modified", "additions": 49, "deletions": 54, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/749a9689be022f2737820a87fe09d930907435a5/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749a9689be022f2737820a87fe09d930907435a5/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=749a9689be022f2737820a87fe09d930907435a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rewrite::{Rewrite, RewriteContext};\n-use utils::{span_after, make_indent, extra_offset};\n+use utils::{make_indent, extra_offset};\n use expr::rewrite_call;\n \n use syntax::{ast, ptr};\n@@ -26,66 +26,23 @@ pub fn rewrite_chain(orig_expr: &ast::Expr,\n     let indent = offset + context.config.tab_spaces;\n     let max_width = try_opt!(context.config.max_width.checked_sub(indent));\n \n-    loop {\n-        match expr.node {\n-            ast::Expr_::ExprMethodCall(ref method_name, ref types, ref expressions) => {\n-                // FIXME: a lot of duplication between this and the\n-                // rewrite_method_call in expr.rs.\n-                let new_span = mk_sp(expressions[0].span.hi, expr.span.hi);\n-                let lo = span_after(new_span, \"(\", context.codemap);\n-                let new_span = mk_sp(lo, expr.span.hi);\n-\n-                let rewrite = rewrite_method_call(method_name.node,\n-                                                  types,\n-                                                  &expressions[1..],\n-                                                  new_span,\n-                                                  context,\n-                                                  max_width,\n-                                                  indent);\n-                rewrites.push(try_opt!(rewrite));\n-                expr = &expressions[0];\n-            }\n-            ast::Expr_::ExprField(ref subexpr, ref field) => {\n-                expr = subexpr;\n-                rewrites.push(format!(\".{}\", field.node));\n-            }\n-            ast::Expr_::ExprTupField(ref subexpr, ref field) => {\n-                expr = subexpr;\n-                rewrites.push(format!(\".{}\", field.node));\n-            }\n-            _ => break,\n-        }\n+    while let Some(pair) = pop_expr_chain(expr, orig_expr.span, context, max_width, indent) {\n+        let (rewrite, parent_expr) = pair;\n+\n+        rewrites.push(try_opt!(rewrite));\n+        expr = parent_expr;\n     }\n \n     let parent_rewrite = try_opt!(expr.rewrite(context, width, offset));\n \n-    // TODO: add exception for when rewrites.len() == 1\n     if rewrites.len() == 1 {\n         let extra_offset = extra_offset(&parent_rewrite, offset);\n+        let offset = offset + extra_offset;\n         let max_width = try_opt!(width.checked_sub(extra_offset));\n-        // FIXME: massive duplication\n-        let rerewrite = match orig_expr.node {\n-            ast::Expr_::ExprMethodCall(ref method_name, ref types, ref expressions) => {\n-                let new_span = mk_sp(expressions[0].span.hi, orig_expr.span.hi);\n-                let lo = span_after(new_span, \"(\", context.codemap);\n-                let new_span = mk_sp(lo, orig_expr.span.hi);\n-\n-                rewrite_method_call(method_name.node,\n-                                    types,\n-                                    &expressions[1..],\n-                                    new_span,\n-                                    context,\n-                                    max_width,\n-                                    offset + extra_offset)\n-            }\n-            ast::Expr_::ExprField(_, ref field) => {\n-                Some(format!(\".{}\", field.node))\n-            }\n-            ast::Expr_::ExprTupField(_, ref field) => {\n-                Some(format!(\".{}\", field.node))\n-            }\n-            _ => unreachable!(),\n-        };\n+\n+        let rerewrite = pop_expr_chain(orig_expr, orig_expr.span, context, max_width, offset)\n+                            .unwrap()\n+                            .0;\n \n         return Some(format!(\"{}{}\", parent_rewrite, try_opt!(rerewrite)));\n     }\n@@ -103,6 +60,7 @@ pub fn rewrite_chain(orig_expr: &ast::Expr,\n \n     // Put the first link on the same line as parent, if it fits.\n     let first_connector = if parent_rewrite.len() + rewrites[0].len() <= width &&\n+                             is_continuable(expr) &&\n                              !rewrites[0].contains('\\n') ||\n                              parent_rewrite.len() <= context.config.tab_spaces {\n         \"\"\n@@ -113,6 +71,43 @@ pub fn rewrite_chain(orig_expr: &ast::Expr,\n     Some(format!(\"{}{}{}\", parent_rewrite, first_connector, rewrites.join(&connector)))\n }\n \n+// Returns None when the expression is not a chainable. Otherwise, rewrites the\n+// outermost chain element and returns the remaining chain.\n+fn pop_expr_chain<'a>(expr: &'a ast::Expr,\n+                      span: Span,\n+                      context: &RewriteContext,\n+                      width: usize,\n+                      offset: usize)\n+                      -> Option<(Option<String>, &'a ast::Expr)> {\n+    match expr.node {\n+        ast::Expr_::ExprMethodCall(ref method_name, ref types, ref expressions) => {\n+            Some((rewrite_method_call(method_name.node,\n+                                      types,\n+                                      expressions,\n+                                      span,\n+                                      context,\n+                                      width,\n+                                      offset),\n+                  &expressions[0]))\n+        }\n+        ast::Expr_::ExprField(ref subexpr, ref field) => {\n+            Some((Some(format!(\".{}\", field.node)), subexpr))\n+        }\n+        ast::Expr_::ExprTupField(ref subexpr, ref field) => {\n+            Some((Some(format!(\".{}\", field.node)), subexpr))\n+        }\n+        _ => None,\n+    }\n+}\n+\n+// Determines we can continue formatting a given expression on the same line.\n+fn is_continuable(expr: &ast::Expr) -> bool {\n+    match expr.node {\n+        ast::Expr_::ExprPath(..) => true,\n+        _ => false,\n+    }\n+}\n+\n fn rewrite_method_call(method_name: ast::Ident,\n                        types: &[ptr::P<ast::Ty>],\n                        args: &[ptr::P<ast::Expr>],"}, {"sha": "313510f02b7c5a77294fb90dc95915fe6bc68b6d", "filename": "src/comment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/749a9689be022f2737820a87fe09d930907435a5/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749a9689be022f2737820a87fe09d930907435a5/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=749a9689be022f2737820a87fe09d930907435a5", "patch": "@@ -44,7 +44,6 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n                          .enumerate()\n                          .map(|(i, mut line)| {\n                              line = line.trim();\n-\n             // Drop old closer.\n                  if i == line_breaks && line.ends_with(\"*/\") && !line.starts_with(\"//\") {\n                      line = &line[..(line.len() - 2)];"}, {"sha": "69fea0e5927c4324d34183cd64ca9752ff119f12", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/749a9689be022f2737820a87fe09d930907435a5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749a9689be022f2737820a87fe09d930907435a5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=749a9689be022f2737820a87fe09d930907435a5", "patch": "@@ -40,15 +40,6 @@ impl Rewrite for ast::Expr {\n                 }\n             }\n             ast::Expr_::ExprCall(ref callee, ref args) => {\n-                // // FIXME using byte lens instead of char lens (and probably all over the place too)\n-                // // 2 is for parens\n-                // let max_callee_width = try_opt!(width.checked_sub(2));\n-                // let callee_str = try_opt!(callee.rewrite(context, max_callee_width, offset));\n-\n-                // let new_span = mk_sp(callee.span.hi, self.span.hi);\n-                // let lo = span_after(new_span, \"(\", context.codemap);\n-                // let new_span = mk_sp(lo, self.span.hi);\n-\n                 rewrite_call(context, &**callee, args, self.span, width, offset)\n             }\n             ast::Expr_::ExprParen(ref subexpr) => {\n@@ -927,6 +918,9 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         None => return Err(Ordering::Greater),\n     };\n \n+    let span_lo = span_after(span, \"(\", context.codemap);\n+    let span = mk_sp(span_lo, span.hi);\n+\n     let extra_offset = extra_offset(&callee_str, offset);\n     // 2 is for parens.\n     let remaining_width = match width.checked_sub(extra_offset + 2) {"}, {"sha": "0afee8f79ac47c2a06b6db19bac72b96cc9b6324", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749a9689be022f2737820a87fe09d930907435a5/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749a9689be022f2737820a87fe09d930907435a5/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=749a9689be022f2737820a87fe09d930907435a5", "patch": "@@ -282,7 +282,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                 None\n             };\n \n-            // Post-comment\n+                // Post-comment\n                 let next_start = match self.inner.peek() {\n                     Some(ref next_item) => (self.get_lo)(next_item),\n                     None => self.next_span_start,"}, {"sha": "9cfe9101986e80eacca54c996e8c325caab83313", "filename": "tests/system.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/749a9689be022f2737820a87fe09d930907435a5/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749a9689be022f2737820a87fe09d930907435a5/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=749a9689be022f2737820a87fe09d930907435a5", "patch": "@@ -152,7 +152,8 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n     let regex = regex::Regex::new(&pattern).ok().expect(\"Failed creating pattern 1.\");\n \n     // Matches lines containing significant comments or whitespace.\n-    let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[^:]+:\\s*\\S+)\").ok()\n+    let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[^:]+:\\s*\\S+)\")\n+                         .ok()\n                          .expect(\"Failed creating pattern 2.\");\n \n     reader.lines()"}]}