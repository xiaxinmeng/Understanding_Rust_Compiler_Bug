{"sha": "6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNjFiYmFiZTQyMzhiZTJhNWYxNmNmZmM3YjBhYjhiMTU2MWVkNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-25T02:24:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-25T02:24:03Z"}, "message": "Auto merge of #45455 - kennytm:print-extern-impl-for-e0119, r=nikomatsakis\n\nImprove diagnostic of E0119 with extern crate, try to print the conflicting impl.\n\nCloses #27403.\nCloses #23563.\n\nShould improve #23980.\n\nThe diagnostic now looks like:\n\n```\nerror[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`:\n  --> $DIR/issue-27403.rs:15:1\n   |\n15 | / impl<S> Into<S> for GenX<S> {\n16 | |     fn into(self) -> S {\n17 | |         self.inner\n18 | |     }\n19 | | }\n   | |_^\n   |\n   = note: conflicting implementation in crate `core`:\n           - impl<T, U> std::convert::Into<U> for T\n             where U: std::convert::From<T>;\n\nerror: aborting due to previous error\n```", "tree": {"sha": "fec83c67140e6f13e2aeb0cbd53a1faa756a949e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec83c67140e6f13e2aeb0cbd53a1faa756a949e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "html_url": "https://github.com/rust-lang/rust/commit/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa40292e78251f8027de72726dc4dc5ef2f1037f", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa40292e78251f8027de72726dc4dc5ef2f1037f", "html_url": "https://github.com/rust-lang/rust/commit/aa40292e78251f8027de72726dc4dc5ef2f1037f"}, {"sha": "9d050069bb2325e2644a9798ad8d6f6e97671546", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d050069bb2325e2644a9798ad8d6f6e97671546", "html_url": "https://github.com/rust-lang/rust/commit/9d050069bb2325e2644a9798ad8d6f6e97671546"}], "stats": {"total": 430, "additions": 428, "deletions": 2}, "files": [{"sha": "d8d0715ff395792b3d154eb067f2f1743ca0b092", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -20,7 +20,7 @@\n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use ty::subst::{Subst, Substs};\n@@ -335,7 +335,12 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n                                                             |ty| format!(\" for `{}`\", ty))));\n                     }\n                     Err(cname) => {\n-                        err.note(&format!(\"conflicting implementation in crate `{}`\", cname));\n+                        let msg = match to_pretty_impl_header(tcx, overlap.with_impl) {\n+                            Some(s) => format!(\n+                                \"conflicting implementation in crate `{}`:\\n- {}\", cname, s),\n+                            None => format!(\"conflicting implementation in crate `{}`\", cname),\n+                        };\n+                        err.note(&msg);\n                     }\n                 }\n \n@@ -353,3 +358,56 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n \n     Rc::new(sg)\n }\n+\n+/// Recovers the \"impl X for Y\" signature from `impl_def_id` and returns it as a\n+/// string.\n+fn to_pretty_impl_header(tcx: TyCtxt, impl_def_id: DefId) -> Option<String> {\n+    use std::fmt::Write;\n+\n+    let trait_ref = if let Some(tr) = tcx.impl_trait_ref(impl_def_id) {\n+        tr\n+    } else {\n+        return None;\n+    };\n+\n+    let mut w = \"impl\".to_owned();\n+\n+    let substs = Substs::identity_for_item(tcx, impl_def_id);\n+\n+    // FIXME: Currently only handles ?Sized.\n+    //        Needs to support ?Move and ?DynSized when they are implemented.\n+    let mut types_without_default_bounds = FxHashSet::default();\n+    let sized_trait = tcx.lang_items().sized_trait();\n+\n+    if !substs.is_noop() {\n+        types_without_default_bounds.extend(substs.types());\n+        w.push('<');\n+        w.push_str(&substs.iter().map(|k| k.to_string()).collect::<Vec<_>>().join(\", \"));\n+        w.push('>');\n+    }\n+\n+    write!(w, \" {} for {}\", trait_ref, tcx.type_of(impl_def_id)).unwrap();\n+\n+    // The predicates will contain default bounds like `T: Sized`. We need to\n+    // remove these bounds, and add `T: ?Sized` to any untouched type parameters.\n+    let predicates = tcx.predicates_of(impl_def_id).predicates;\n+    let mut pretty_predicates = Vec::with_capacity(predicates.len());\n+    for p in predicates {\n+        if let Some(poly_trait_ref) = p.to_opt_poly_trait_ref() {\n+            if Some(poly_trait_ref.def_id()) == sized_trait {\n+                types_without_default_bounds.remove(poly_trait_ref.self_ty());\n+                continue;\n+            }\n+        }\n+        pretty_predicates.push(p.to_string());\n+    }\n+    for ty in types_without_default_bounds {\n+        pretty_predicates.push(format!(\"{}: ?Sized\", ty));\n+    }\n+    if !pretty_predicates.is_empty() {\n+        write!(w, \"\\n  where {}\", pretty_predicates.join(\", \")).unwrap();\n+    }\n+\n+    w.push(';');\n+    Some(w)\n+}"}, {"sha": "83222e79a1298a558d6c0aa2eff222b659cce36e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -107,6 +107,19 @@ impl<'tcx> fmt::Debug for Kind<'tcx> {\n     }\n }\n \n+impl<'tcx> fmt::Display for Kind<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if let Some(ty) = self.as_type() {\n+            write!(f, \"{}\", ty)\n+        } else if let Some(r) = self.as_region() {\n+            write!(f, \"{}\", r)\n+        } else {\n+            // FIXME(RFC 2000): extend this if/else chain when we support const generic.\n+            unimplemented!();\n+        }\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for Kind<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         if let Some(ty) = self.as_type() {"}, {"sha": "b30db9660992c95ff1327c663b580f9fd870cc4f", "filename": "src/test/ui/e0119/auxiliary/complex_impl_support.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fauxiliary%2Fcomplex_impl_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fauxiliary%2Fcomplex_impl_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fauxiliary%2Fcomplex_impl_support.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::PhantomData;\n+\n+pub trait External {}\n+\n+pub struct M<'a, 'b, 'c, T, U, V> {\n+    a: PhantomData<&'a ()>,\n+    b: PhantomData<&'b ()>,\n+    c: PhantomData<&'c ()>,\n+    d: PhantomData<T>,\n+    e: PhantomData<U>,\n+    f: PhantomData<V>,\n+}\n+\n+impl<'a, 'b, 'c, T, U, V, W> External for (T, M<'a, 'b, 'c, Box<U>, V, W>)\n+where\n+    'b: 'a,\n+    T: 'a,\n+    U: (FnOnce(T) -> V) + 'static,\n+    V: Iterator<Item=T> + Clone,\n+    W: std::ops::Add,\n+    W::Output: Copy,\n+{}"}, {"sha": "57a0da0248d5c550b6b78123863a76d36f279e3d", "filename": "src/test/ui/e0119/auxiliary/issue_23563_a.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fauxiliary%2Fissue_23563_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fauxiliary%2Fissue_23563_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fauxiliary%2Fissue_23563_a.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ref: https://github.com/rust-lang/rust/issues/23563#issuecomment-260751672\n+\n+pub trait LolTo<T> {\n+    fn convert_to(&self) -> T;\n+}\n+\n+pub trait LolInto<T>: Sized {\n+    fn convert_into(self) -> T;\n+}\n+\n+pub trait LolFrom<T> {\n+    fn from(T) -> Self;\n+}\n+\n+impl<'a, T: ?Sized, U> LolInto<U> for &'a T where T: LolTo<U> {\n+    fn convert_into(self) -> U {\n+        self.convert_to()\n+    }\n+}\n+\n+impl<T, U> LolFrom<T> for U where T: LolInto<U> {\n+    fn from(t: T) -> U {\n+        t.convert_into()\n+    }\n+}"}, {"sha": "f0d2630b9d0ced0f7dfabeab5a680238313aa2b5", "filename": "src/test/ui/e0119/complex-impl.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:complex_impl_support.rs\n+\n+extern crate complex_impl_support;\n+\n+use complex_impl_support::{External, M};\n+\n+struct Q;\n+\n+impl<R> External for (Q, R) {}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "ff7c8a160a4a8d74b2e24de4bf2c1e6cfb7e60d7", "filename": "src/test/ui/e0119/complex-impl.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,18 @@\n+error[E0119]: conflicting implementations of trait `complex_impl_support::External` for type `(Q, complex_impl_support::M<'_, '_, '_, std::boxed::Box<_>, _, _>)`:\n+  --> $DIR/complex-impl.rs:19:1\n+   |\n+19 | impl<R> External for (Q, R) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `complex_impl_support`:\n+           - impl<'a, 'b, 'c, T, U, V, W> complex_impl_support::External for (T, complex_impl_support::M<'a, 'b, 'c, std::boxed::Box<U>, V, W>)\n+             where <U as std::ops::FnOnce<(T,)>>::Output == V, <V as std::iter::Iterator>::Item == T, 'b : 'a, T : 'a, U: std::ops::FnOnce<(T,)>, U : 'static, V: std::iter::Iterator, V: std::clone::Clone, W: std::ops::Add, <W as std::ops::Add>::Output: std::marker::Copy;\n+\n+error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n+  --> $DIR/complex-impl.rs:19:1\n+   |\n+19 | impl<R> External for (Q, R) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ead62256a598e1ff20917b91dcc1e2a9ef8d1002", "filename": "src/test/ui/e0119/conflict-with-std.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(try_from)]\n+\n+use std::marker::PhantomData;\n+use std::convert::{TryFrom, AsRef};\n+\n+struct Q;\n+impl AsRef<Q> for Box<Q> {\n+    fn as_ref(&self) -> &Q {\n+        &**self\n+    }\n+}\n+\n+struct S;\n+impl From<S> for S {\n+    fn from(s: S) -> S {\n+        s\n+    }\n+}\n+\n+struct X;\n+impl TryFrom<X> for X {\n+    type Error = ();\n+    fn try_from(u: X) -> Result<X, ()> {\n+        Ok(u)\n+    }\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "f3e33291ef5bd36989792ecbff3a119747e442bd", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,44 @@\n+error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n+  --> $DIR/conflict-with-std.rs:17:1\n+   |\n+17 | / impl AsRef<Q> for Box<Q> {\n+18 | |     fn as_ref(&self) -> &Q {\n+19 | |         &**self\n+20 | |     }\n+21 | | }\n+   | |_^\n+   |\n+   = note: conflicting implementation in crate `alloc`:\n+           - impl<T> std::convert::AsRef<T> for std::boxed::Box<T>\n+             where T: ?Sized;\n+\n+error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n+  --> $DIR/conflict-with-std.rs:24:1\n+   |\n+24 | / impl From<S> for S {\n+25 | |     fn from(s: S) -> S {\n+26 | |         s\n+27 | |     }\n+28 | | }\n+   | |_^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::convert::From<T> for T;\n+\n+error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n+  --> $DIR/conflict-with-std.rs:31:1\n+   |\n+31 | / impl TryFrom<X> for X {\n+32 | |     type Error = ();\n+33 | |     fn try_from(u: X) -> Result<X, ()> {\n+34 | |         Ok(u)\n+35 | |     }\n+36 | | }\n+   | |_^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T, U> std::convert::TryFrom<U> for T\n+             where T: std::convert::From<U>;\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "67710af9369d14405b787f48b4bac998c5589cf0", "filename": "src/test/ui/e0119/issue-23563.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_23563_a.rs\n+\n+// Ref: https://github.com/rust-lang/rust/issues/23563#issuecomment-260751672\n+\n+extern crate issue_23563_a as a;\n+\n+use a::LolFrom;\n+use a::LolInto;\n+use a::LolTo;\n+\n+struct LocalType<T>(Option<T>);\n+\n+impl<'a, T> LolFrom<&'a [T]> for LocalType<T> {\n+    fn from(_: &'a [T]) -> LocalType<T> { LocalType(None) }\n+}\n+\n+impl<T> LolInto<LocalType<T>> for LocalType<T> {\n+    fn convert_into(self) -> LocalType<T> {\n+        self\n+    }\n+}\n+\n+impl LolTo<LocalType<u8>> for [u8] {\n+    fn convert_to(&self) -> LocalType<u8> {\n+        LocalType(None)\n+    }\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "dcb76d71b3dc800d691ba1ee9179f70a7716af8d", "filename": "src/test/ui/e0119/issue-23563.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`:\n+  --> $DIR/issue-23563.rs:23:1\n+   |\n+23 | / impl<'a, T> LolFrom<&'a [T]> for LocalType<T> {\n+24 | |     fn from(_: &'a [T]) -> LocalType<T> { LocalType(None) }\n+25 | | }\n+   | |_^\n+   |\n+   = note: conflicting implementation in crate `issue_23563_a`:\n+           - impl<T, U> a::LolFrom<T> for U\n+             where T: a::LolInto<U>;\n+\n+error: aborting due to previous error\n+"}, {"sha": "c880921b65b1da38461f2c22d66a2d6779fc0832", "filename": "src/test/ui/e0119/issue-27403.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct GenX<S> {\n+    inner: S,\n+}\n+\n+impl<S> Into<S> for GenX<S> {\n+    fn into(self) -> S {\n+        self.inner\n+    }\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "d03171fc10a89ba770bd9bf1fc01658feb29c55e", "filename": "src/test/ui/e0119/issue-27403.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,16 @@\n+error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`:\n+  --> $DIR/issue-27403.rs:15:1\n+   |\n+15 | / impl<S> Into<S> for GenX<S> {\n+16 | |     fn into(self) -> S {\n+17 | |         self.inner\n+18 | |     }\n+19 | | }\n+   | |_^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T, U> std::convert::Into<U> for T\n+             where U: std::convert::From<T>;\n+\n+error: aborting due to previous error\n+"}, {"sha": "06018286b319fdff9a94a74614c5cbc07b82fbc4", "filename": "src/test/ui/e0119/issue-28981.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+struct Foo;\n+\n+impl<Foo> Deref for Foo { }\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "c6c7c117a426e6f2571247c1349f7b764f5ba1c7", "filename": "src/test/ui/e0119/issue-28981.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,18 @@\n+error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&_`:\n+  --> $DIR/issue-28981.rs:15:1\n+   |\n+15 | impl<Foo> Deref for Foo { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<'a, T> std::ops::Deref for &'a T\n+             where T: ?Sized;\n+\n+error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n+  --> $DIR/issue-28981.rs:15:1\n+   |\n+15 | impl<Foo> Deref for Foo { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0d21120eac33364c83004c975ac5ca761d403fdb", "filename": "src/test/ui/e0119/so-37347311.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.rs?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ref: https://stackoverflow.com/q/37347311\n+\n+trait Storage {\n+    type Error;\n+}\n+\n+enum MyError<S: Storage> {\n+    StorageProblem(S::Error),\n+}\n+\n+impl<S: Storage> From<S::Error> for MyError<S> {\n+    fn from(error: S::Error) -> MyError<S> {\n+        MyError::StorageProblem(error)\n+    }\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "8a26597a1c2f8e8b94398e52539cb3c17d1dafdf", "filename": "src/test/ui/e0119/so-37347311.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr?ref=6e61bbabe4238be2a5f16cffc7b0ab8b1561ed51", "patch": "@@ -0,0 +1,15 @@\n+error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`:\n+  --> $DIR/so-37347311.rs:21:1\n+   |\n+21 | / impl<S: Storage> From<S::Error> for MyError<S> {\n+22 | |     fn from(error: S::Error) -> MyError<S> {\n+23 | |         MyError::StorageProblem(error)\n+24 | |     }\n+25 | | }\n+   | |_^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::convert::From<T> for T;\n+\n+error: aborting due to previous error\n+"}]}