{"sha": "97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d", "node_id": "C_kwDOAAsO6NoAKDk3MzgxZDJmMWVmNjQ4MWUyMDFlYjhmYjhiYmMxYzVkZGVmZmI2MWQ", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-04T08:19:56Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-04T08:19:56Z"}, "message": "tweak ClosureOutlivesSubjectTy", "tree": {"sha": "2773682ff6e564258d7d4b126ff0963234be7e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2773682ff6e564258d7d4b126ff0963234be7e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d", "html_url": "https://github.com/rust-lang/rust/commit/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10da7710cdd5d76261bcfcf31dd163c966b3ebb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/10da7710cdd5d76261bcfcf31dd163c966b3ebb3", "html_url": "https://github.com/rust-lang/rust/commit/10da7710cdd5d76261bcfcf31dd163c966b3ebb3"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "74ea2451348c41c25055831848a3fdfc8d95e4bc", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d", "patch": "@@ -1153,7 +1153,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             return None;\n         }\n \n-        Some(ClosureOutlivesSubject::Ty(ClosureOutlivesSubjectTy::new(tcx, ty)))\n+        Some(ClosureOutlivesSubject::Ty(ClosureOutlivesSubjectTy::bind(tcx, ty)))\n     }\n \n     /// Returns a universally quantified region that outlives the"}, {"sha": "b964c1852d251c753233a8c38363e491cae4d450", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=97381d2f1ef6481e201eb8fb8bbc1c5ddeffb61d", "patch": "@@ -394,23 +394,26 @@ pub enum ClosureOutlivesSubject<'tcx> {\n \n /// Represents a `ty::Ty` for use in [`ClosureOutlivesSubject`].\n ///\n-/// This indirection is necessary because the type may include `ReVar` regions,\n-/// which is what we use internally within NLL code,\n-/// and we can't use `ReVar`s in a query response.\n+/// This abstraction is necessary because the type may include `ReVar` regions,\n+/// which is what we use internally within NLL code, and they can't be used in\n+/// a query response.\n+///\n+/// DO NOT implement `TypeVisitable` or `TypeFoldable` traits, because this\n+/// type is not recognized as a binder for late-bound region.\n #[derive(Copy, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n pub struct ClosureOutlivesSubjectTy<'tcx> {\n     inner: Ty<'tcx>,\n }\n \n impl<'tcx> ClosureOutlivesSubjectTy<'tcx> {\n-    // All regions of `ty` must be of kind `ReVar`\n-    // and must point to an early-bound region in the closure's signature.\n-    pub fn new(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Self {\n+    /// All regions of `ty` must be of kind `ReVar` and must represent\n+    /// universal regions *external* to the closure.\n+    pub fn bind(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Self {\n         let inner = tcx.fold_regions(ty, |r, depth| match r.kind() {\n             ty::ReVar(vid) => {\n                 let br = ty::BoundRegion {\n                     var: ty::BoundVar::new(vid.index()),\n-                    kind: ty::BrAnon(0u32, None),\n+                    kind: ty::BrAnon(vid.as_u32(), None),\n                 };\n                 tcx.mk_re_late_bound(depth, br)\n             }"}]}