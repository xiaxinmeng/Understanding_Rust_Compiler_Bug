{"sha": "3f62ab8f510fdac1eeab515c515c437d6dd141e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjJhYjhmNTEwZmRhYzFlZWFiNTE1YzUxNWM0MzdkNmRkMTQxZTY=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-24T17:45:11Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-31T10:20:56Z"}, "message": "Add WherePred to allow predicate access in WhereClause\n\nThis also unifies parsing of WHERE_PRED bounds, now Lifetime bounds will also be\nparsed using TYPE_BOUND_LIST", "tree": {"sha": "91bb5a70b999474e4d8212245fe265e71c3afde4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91bb5a70b999474e4d8212245fe265e71c3afde4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f62ab8f510fdac1eeab515c515c437d6dd141e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f62ab8f510fdac1eeab515c515c437d6dd141e6", "html_url": "https://github.com/rust-lang/rust/commit/3f62ab8f510fdac1eeab515c515c437d6dd141e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f62ab8f510fdac1eeab515c515c437d6dd141e6/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4666138c910a655deb0e8129b0a1dc5974b49bdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4666138c910a655deb0e8129b0a1dc5974b49bdf", "html_url": "https://github.com/rust-lang/rust/commit/4666138c910a655deb0e8129b0a1dc5974b49bdf"}], "stats": {"total": 140, "additions": 132, "deletions": 8}, "files": [{"sha": "07d9b079217efec146630a17552fcf9274569b44", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=3f62ab8f510fdac1eeab515c515c437d6dd141e6", "patch": "@@ -165,7 +165,7 @@ fn where_predicate(p: &mut Parser) {\n         LIFETIME => {\n             p.bump();\n             if p.at(COLON) {\n-                lifetime_bounds(p);\n+                bounds(p);\n             } else {\n                 p.error(\"expected colon\");\n             }"}, {"sha": "fd7e63f849f2aeba7ae28ba4d7a1e660cb3043dd", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=3f62ab8f510fdac1eeab515c515c437d6dd141e6", "patch": "@@ -799,3 +799,70 @@ fn test_doc_comment_preserves_indents() {\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n     assert_eq!(\"doc1\\n```\\nfn foo() {\\n    // ...\\n}\\n```\", module.doc_comment_text().unwrap());\n }\n+\n+#[test]\n+fn test_where_predicates() {\n+    fn assert_bound(text: &str, bound: Option<&TypeBound>) {\n+        assert_eq!(text, bound.unwrap().syntax().text().to_string());\n+    }\n+\n+    let file = SourceFile::parse(\n+        r#\"\n+fn foo()\n+where\n+   T: Clone + Copy + Debug + 'static,\n+   'a: 'b + 'c,\n+   Iterator::Item: 'a + Debug,\n+   Iterator::Item: Debug + 'a,\n+   <T as Iterator>::Item: Debug + 'a,\n+   for<'a> F: Fn(&'a str)\n+{}\n+        \"#,\n+    );\n+    let where_clause = file.syntax().descendants().find_map(WhereClause::cast).unwrap();\n+\n+    let mut predicates = where_clause.predicates();\n+\n+    let pred = predicates.next().unwrap();\n+    let mut bounds = pred.type_bound_list().unwrap().bounds();\n+\n+    assert_eq!(\"T\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_bound(\"Clone\", bounds.next());\n+    assert_bound(\"Copy\", bounds.next());\n+    assert_bound(\"Debug\", bounds.next());\n+    assert_bound(\"'static\", bounds.next());\n+\n+    let pred = predicates.next().unwrap();\n+    let mut bounds = pred.type_bound_list().unwrap().bounds();\n+\n+    assert_eq!(\"'a\", pred.lifetime().unwrap().syntax().text().to_string());\n+\n+    assert_bound(\"'b\", bounds.next());\n+    assert_bound(\"'c\", bounds.next());\n+\n+    let pred = predicates.next().unwrap();\n+    let mut bounds = pred.type_bound_list().unwrap().bounds();\n+\n+    assert_eq!(\"Iterator::Item\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_bound(\"'a\", bounds.next());\n+\n+    let pred = predicates.next().unwrap();\n+    let mut bounds = pred.type_bound_list().unwrap().bounds();\n+\n+    assert_eq!(\"Iterator::Item\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_bound(\"Debug\", bounds.next());\n+    assert_bound(\"'a\", bounds.next());\n+\n+    let pred = predicates.next().unwrap();\n+    let mut bounds = pred.type_bound_list().unwrap().bounds();\n+\n+    assert_eq!(\"<T as Iterator>::Item\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_bound(\"Debug\", bounds.next());\n+    assert_bound(\"'a\", bounds.next());\n+\n+    let pred = predicates.next().unwrap();\n+    let mut bounds = pred.type_bound_list().unwrap().bounds();\n+\n+    assert_eq!(\"for<'a> F\", pred.type_ref().unwrap().syntax().text().to_string());\n+    assert_bound(\"Fn(&'a str)\", bounds.next());\n+}"}, {"sha": "c51b4caa4f19407deb919244c4f67470e00517c5", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=3f62ab8f510fdac1eeab515c515c437d6dd141e6", "patch": "@@ -4810,7 +4810,48 @@ impl ToOwned for WhereClause {\n }\n \n \n-impl WhereClause {}\n+impl WhereClause {\n+    pub fn predicates(&self) -> impl Iterator<Item = &WherePred> {\n+        super::children(self)\n+    }\n+}\n+\n+// WherePred\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct WherePred {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for WherePred {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for WherePred {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            WHERE_PRED => Some(WherePred::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for WherePred {\n+    type Owned = TreeArc<WherePred>;\n+    fn to_owned(&self) -> TreeArc<WherePred> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl ast::TypeBoundsOwner for WherePred {}\n+impl WherePred {\n+    pub fn type_ref(&self) -> Option<&TypeRef> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn lifetime(&self) -> Option<&Lifetime> {\n+        super::child_opt(self)\n+    }\n+}\n \n // WhileExpr\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "1123c2e9589df55e9a1c3d617090c678e1662dd0", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=3f62ab8f510fdac1eeab515c515c437d6dd141e6", "patch": "@@ -595,7 +595,20 @@ Grammar(\n                 [\"bounds\", \"TypeBound\"],\n             ]\n         ),\n-        \"WhereClause\": (),\n+        \"WherePred\": (\n+            options: [\n+                \"TypeRef\",\n+                \"Lifetime\",\n+            ],\n+            traits: [\n+                \"TypeBoundsOwner\",\n+            ],\n+        ),\n+        \"WhereClause\": (\n+            collections: [\n+                [\"predicates\", \"WherePred\"],\n+            ],\n+        ),\n         \"ExprStmt\": (\n             options: [ [\"expr\", \"Expr\"] ]\n         ),"}, {"sha": "77a62ab4d86a2340c9eccda83c985b9a4eaa0e8e", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0056_where_clause.txt", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0056_where_clause.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3f62ab8f510fdac1eeab515c515c437d6dd141e6/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0056_where_clause.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0056_where_clause.txt?ref=3f62ab8f510fdac1eeab515c515c437d6dd141e6", "patch": "@@ -15,11 +15,14 @@ SOURCE_FILE@[0; 116)\n         LIFETIME@[18; 20) \"'a\"\n         COLON@[20; 21)\n         WHITESPACE@[21; 22)\n-        LIFETIME@[22; 24) \"'b\"\n-        WHITESPACE@[24; 25)\n-        PLUS@[25; 26)\n-        WHITESPACE@[26; 27)\n-        LIFETIME@[27; 29) \"'c\"\n+        TYPE_BOUND_LIST@[22; 29)\n+          TYPE_BOUND@[22; 24)\n+            LIFETIME@[22; 24) \"'b\"\n+          WHITESPACE@[24; 25)\n+          PLUS@[25; 26)\n+          WHITESPACE@[26; 27)\n+          TYPE_BOUND@[27; 29)\n+            LIFETIME@[27; 29) \"'c\"\n       COMMA@[29; 30)\n       WHITESPACE@[30; 34)\n       WHERE_PRED@[34; 59)"}]}