{"sha": "abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "node_id": "C_kwDOAAsO6NoAKGFiZDJjMWU4ZTQzZjE2MjQ5YTZlZWJkMGU2NjY0NjFlZTExZDg5ZmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-25T13:02:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-25T13:02:52Z"}, "message": "Auto merge of #10665 - Centri3:string_lit_as_bytes_changes, r=giraffate\n\nDon't apply `string_lit_as_bytes` if in macro expansion\n\nThe following code will emit a warning on both w! and h!, despite there being nothing the user (or library author) could do about it:\n```rust\n#![warn(clippy::string_lit_as_bytes)]\n\nuse windows::w;\nuse windows::h;\n\nfn main() {\n    let _w = w!(\"example\");\n    let _h = h!(\"example\");\n}\n```\nThis is because windows-rs will create a binding `const INPUT: &[u8] = $s.as_bytes()`, and changing this to b\"$s\" is, well, suboptimal. I don't know enough about Rust to know if this is something that can be detected though if it can be I'm happy with closing this in favor of implementing that.\n\nI'm not sure whether this is how it should be done though, as this simply tells clippy to not invoke this even if it's applicable (this also affects the other string lints, but didn't cause any tests to fail).\n\nchangelog: [`string_lit_as_bytes`]: Don't lint if in external macro", "tree": {"sha": "62699f9b8b0ae27937cd83d3748112b15c74db86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62699f9b8b0ae27937cd83d3748112b15c74db86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "html_url": "https://github.com/rust-lang/rust/commit/abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f2c48d9bed4146b1b317e17854f1cefcaf0f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f2c48d9bed4146b1b317e17854f1cefcaf0f42", "html_url": "https://github.com/rust-lang/rust/commit/c4f2c48d9bed4146b1b317e17854f1cefcaf0f42"}, {"sha": "14a6fa4a34d24ec81fe562b71966471efcbb32b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14a6fa4a34d24ec81fe562b71966471efcbb32b2", "html_url": "https://github.com/rust-lang/rust/commit/14a6fa4a34d24ec81fe562b71966471efcbb32b2"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "5b588e914fdf887b1d50b15bee5e0887e8794312", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "patch": "@@ -292,6 +292,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n         }\n \n         if_chain! {\n+            if !in_external_macro(cx.sess(), e.span);\n             if let ExprKind::MethodCall(path, receiver, ..) = &e.kind;\n             if path.ident.name == sym!(as_bytes);\n             if let ExprKind::Lit(lit) = &receiver.kind;"}, {"sha": "e5bb906663c564d65674e91fa6239dc49adb2da5", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "patch": "@@ -21,6 +21,13 @@ macro_rules! string_add {\n     };\n }\n \n+#[macro_export]\n+macro_rules! string_lit_as_bytes {\n+    ($s:literal) => {\n+        const C: &[u8] = $s.as_bytes();\n+    };\n+}\n+\n #[macro_export]\n macro_rules! mut_mut {\n     () => {"}, {"sha": "3fc11b8b0885e9070944e97d74cc9fa6ddb6a42e", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "patch": "@@ -1,8 +1,18 @@\n //@run-rustfix\n+//@aux-build:macro_rules.rs\n \n #![allow(dead_code, unused_variables)]\n #![warn(clippy::string_lit_as_bytes)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! b {\n+    ($b:literal) => {\n+        const B: &[u8] = b\"warning\";\n+    };\n+}\n+\n fn str_lit_as_bytes() {\n     let bs = b\"hello there\";\n \n@@ -11,6 +21,10 @@ fn str_lit_as_bytes() {\n     let bs = b\"lit to string\".to_vec();\n     let bs = b\"lit to owned\".to_vec();\n \n+    b!(\"warning\");\n+\n+    string_lit_as_bytes!(\"no warning\");\n+\n     // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n     let ubs = \"hello there! this is a very long string\".as_bytes();"}, {"sha": "7d54acf630e6cf06d0ffad3298b2809245407e6e", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "patch": "@@ -1,8 +1,18 @@\n //@run-rustfix\n+//@aux-build:macro_rules.rs\n \n #![allow(dead_code, unused_variables)]\n #![warn(clippy::string_lit_as_bytes)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! b {\n+    ($b:literal) => {\n+        const B: &[u8] = $b.as_bytes();\n+    };\n+}\n+\n fn str_lit_as_bytes() {\n     let bs = \"hello there\".as_bytes();\n \n@@ -11,6 +21,10 @@ fn str_lit_as_bytes() {\n     let bs = \"lit to string\".to_string().into_bytes();\n     let bs = \"lit to owned\".to_owned().into_bytes();\n \n+    b!(\"warning\");\n+\n+    string_lit_as_bytes!(\"no warning\");\n+\n     // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n     let ubs = \"hello there! this is a very long string\".as_bytes();"}, {"sha": "61b4e210e0fb94d6c0173faf863016639a8b0733", "filename": "tests/ui/string_lit_as_bytes.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/tests%2Fui%2Fstring_lit_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd2c1e8e43f16249a6eebd0e666461ee11d89fa/tests%2Fui%2Fstring_lit_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.stderr?ref=abd2c1e8e43f16249a6eebd0e666461ee11d89fa", "patch": "@@ -1,40 +1,51 @@\n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:7:14\n+  --> $DIR/string_lit_as_bytes.rs:17:14\n    |\n LL |     let bs = \"hello there\".as_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"hello there\"`\n    |\n    = note: `-D clippy::string-lit-as-bytes` implied by `-D warnings`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:9:14\n+  --> $DIR/string_lit_as_bytes.rs:19:14\n    |\n LL |     let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with 3# plus \" \"\"###`\n \n error: calling `into_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:11:14\n+  --> $DIR/string_lit_as_bytes.rs:21:14\n    |\n LL |     let bs = \"lit to string\".to_string().into_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"lit to string\".to_vec()`\n \n error: calling `into_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:12:14\n+  --> $DIR/string_lit_as_bytes.rs:22:14\n    |\n LL |     let bs = \"lit to owned\".to_owned().into_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"lit to owned\".to_vec()`\n \n+error: calling `as_bytes()` on a string literal\n+  --> $DIR/string_lit_as_bytes.rs:12:26\n+   |\n+LL |         const B: &[u8] = $b.as_bytes();\n+   |                          ^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"warning\"`\n+...\n+LL |     b!(\"warning\");\n+   |     ------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: calling `as_bytes()` on `include_str!(..)`\n-  --> $DIR/string_lit_as_bytes.rs:25:22\n+  --> $DIR/string_lit_as_bytes.rs:39:22\n    |\n LL |     let includestr = include_str!(\"string_lit_as_bytes.rs\").as_bytes();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"string_lit_as_bytes.rs\")`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:27:13\n+  --> $DIR/string_lit_as_bytes.rs:41:13\n    |\n LL |     let _ = \"string with newline/t/n\".as_bytes();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"string with newline/t/n\"`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}]}