{"sha": "350004fe758f919f75368d24973f789ee8f88d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDAwNGZlNzU4ZjkxOWY3NTM2OGQyNDk3M2Y3ODllZThmODhkMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T16:28:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-05T16:28:41Z"}, "message": "Auto merge of #1253 - RalfJung:vec-extend, r=RalfJung\n\ntest Vec::extend\n\nCurrently fails, until https://github.com/rust-lang/rust/issues/70301 gets fixed.", "tree": {"sha": "a4c4efa4587a54e8fd08459d2f08492f21994611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4c4efa4587a54e8fd08459d2f08492f21994611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/350004fe758f919f75368d24973f789ee8f88d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/350004fe758f919f75368d24973f789ee8f88d33", "html_url": "https://github.com/rust-lang/rust/commit/350004fe758f919f75368d24973f789ee8f88d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/350004fe758f919f75368d24973f789ee8f88d33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2a811eee6b0bcf99cc1895fdc5983439d879b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2a811eee6b0bcf99cc1895fdc5983439d879b5", "html_url": "https://github.com/rust-lang/rust/commit/ae2a811eee6b0bcf99cc1895fdc5983439d879b5"}, {"sha": "3eb76f4a77d68f3f84e264fe51725e7b66256ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb76f4a77d68f3f84e264fe51725e7b66256ec3", "html_url": "https://github.com/rust-lang/rust/commit/3eb76f4a77d68f3f84e264fe51725e7b66256ec3"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "6e980a4e228ebd8154690f34a6ac63b9e3b7b496", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/350004fe758f919f75368d24973f789ee8f88d33/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/350004fe758f919f75368d24973f789ee8f88d33/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=350004fe758f919f75368d24973f789ee8f88d33", "patch": "@@ -1 +1 @@\n-6050e523bae6de61de4e060facc43dc512adaccd\n+e6cef0445779724b469ab7b9a8d3c05d9e848ca8"}, {"sha": "394e91ac9c3b8df24fc29de96541f533d7c57b06", "filename": "tests/run-pass/float.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/350004fe758f919f75368d24973f789ee8f88d33/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350004fe758f919f75368d24973f789ee8f88d33/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=350004fe758f919f75368d24973f789ee8f88d33", "previous_filename": "tests/run-pass/floats.rs"}, {"sha": "5c791e4db0a77fbe6328a752a412ef1d1f21e86e", "filename": "tests/run-pass/vec.rs", "status": "renamed", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/350004fe758f919f75368d24973f789ee8f88d33/tests%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350004fe758f919f75368d24973f789ee8f88d33/tests%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec.rs?ref=350004fe758f919f75368d24973f789ee8f88d33", "patch": "@@ -71,6 +71,39 @@ fn vec_reallocate() -> Vec<u8> {\n     v\n }\n \n+fn vec_push_ptr_stable() {\n+    let mut v = Vec::with_capacity(10);\n+    v.push(0);\n+    let v0 = unsafe { &mut *(&mut v[0] as *mut _) }; // laundering the lifetime -- we take care that `v` does not reallocate, so that's okay.\n+    v.push(1);\n+    let _val = *v0;\n+}\n+\n+fn vec_extend_ptr_stable() {\n+    let mut v = Vec::with_capacity(10);\n+    v.push(0);\n+    let v0 = unsafe { &mut *(&mut v[0] as *mut _) }; // laundering the lifetime -- we take care that `v` does not reallocate, so that's okay.\n+    // `slice::Iter` (with `T: Copy`) specialization\n+    v.extend(&[1]);\n+    let _val = *v0;\n+    // `vec::IntoIter` specialization\n+    v.extend(vec![2]);\n+    let _val = *v0;\n+    // `TrustedLen` specialization\n+    v.extend(std::iter::once(3));\n+    let _val = *v0;\n+    // base case\n+    v.extend(std::iter::once(3).filter(|_| true));\n+    let _val = *v0;\n+}\n+\n+fn vec_truncate_ptr_stable() {\n+    let mut v = vec![0; 10];\n+    let v0 = unsafe { &mut *(&mut v[0] as *mut _) }; // laundering the lifetime -- we take care that `v` does not reallocate, so that's okay.\n+    v.truncate(5);\n+    let _val = *v0;\n+}\n+\n fn main() {\n     assert_eq!(vec_reallocate().len(), 5);\n \n@@ -89,4 +122,9 @@ fn main() {\n     // Test interesting empty slice comparison\n     // (one is a real pointer, one an integer pointer).\n     assert_eq!((200..-5).step_by(1).collect::<Vec<isize>>(), []);\n+\n+    // liballoc has a more extensive test of this, but let's at least do a smoke test here.\n+    vec_push_ptr_stable();\n+    vec_extend_ptr_stable();\n+    vec_truncate_ptr_stable();\n }", "previous_filename": "tests/run-pass/vecs.rs"}]}