{"sha": "936dbbce377157ac1042028da2ad8d6b8183c4de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNmRiYmNlMzc3MTU3YWMxMDQyMDI4ZGEyYWQ4ZDZiODE4M2M0ZGU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-11-05T19:12:59Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "Give function bodies their own dep graph node", "tree": {"sha": "a4256c9e632d905e065d191a00d79e949b2235d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4256c9e632d905e065d191a00d79e949b2235d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936dbbce377157ac1042028da2ad8d6b8183c4de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936dbbce377157ac1042028da2ad8d6b8183c4de", "html_url": "https://github.com/rust-lang/rust/commit/936dbbce377157ac1042028da2ad8d6b8183c4de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936dbbce377157ac1042028da2ad8d6b8183c4de/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16eedd2a781ebc5944916bc34d50383c4c3acc1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/16eedd2a781ebc5944916bc34d50383c4c3acc1e", "html_url": "https://github.com/rust-lang/rust/commit/16eedd2a781ebc5944916bc34d50383c4c3acc1e"}], "stats": {"total": 147, "additions": 118, "deletions": 29}, "files": [{"sha": "0fc8bf9e17de2e06dca4e9f260917e4fd1a17b05", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -42,6 +42,9 @@ pub enum DepNode<D: Clone + Debug> {\n     // Represents the HIR node with the given node-id\n     Hir(D),\n \n+    // Represents the body of a function or method\n+    HirBody(D),\n+\n     // Represents the metadata for a given HIR node, typically found\n     // in an extern crate.\n     MetaData(D),\n@@ -150,6 +153,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             CollectItem,\n             BorrowCheck,\n             Hir,\n+            HirBody,\n             TransCrateItem,\n             TypeckItemType,\n             TypeckItemBody,\n@@ -199,6 +203,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             WorkProduct(ref id) => Some(WorkProduct(id.clone())),\n \n             Hir(ref d) => op(d).map(Hir),\n+            HirBody(ref d) => op(d).map(HirBody),\n             MetaData(ref d) => op(d).map(MetaData),\n             CollectItem(ref d) => op(d).map(CollectItem),\n             CoherenceCheckImpl(ref d) => op(d).map(CoherenceCheckImpl),"}, {"sha": "a78f4de475a447b9b401a21dc2607e78f78a7ca9", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -256,26 +256,46 @@ impl<'ast> Map<'ast> {\n         let map = self.map.borrow();\n         let mut id = id0;\n         if !self.is_inlined_node_id(id) {\n+            let mut last_expr = None;\n             loop {\n                 match map[id.as_usize()] {\n                     EntryItem(_, item) => {\n                         assert_eq!(id, item.id);\n                         let def_id = self.local_def_id(id);\n                         assert!(!self.is_inlined_def_id(def_id));\n+\n+                        if let Some(last_id) = last_expr {\n+                            // The body of the item may have a separate dep node\n+                            // (Note that impl/trait items don't currently have\n+                            // their own dep node, so there's also just one\n+                            // HirBody node for all the items)\n+                            if self.is_body(last_id, item) {\n+                                return DepNode::HirBody(def_id);\n+                            }\n+                        }\n                         return DepNode::Hir(def_id);\n                     }\n \n-                    EntryImplItem(..) => {\n+                    EntryImplItem(_, item) => {\n                         let def_id = self.local_def_id(id);\n                         assert!(!self.is_inlined_def_id(def_id));\n+\n+                        if let Some(last_id) = last_expr {\n+                            // The body of the item may have a separate dep node\n+                            // (Note that impl/trait items don't currently have\n+                            // their own dep node, so there's also just one\n+                            // HirBody node for all the items)\n+                            if self.is_impl_item_body(last_id, item) {\n+                                return DepNode::HirBody(def_id);\n+                            }\n+                        }\n                         return DepNode::Hir(def_id);\n                     }\n \n                     EntryForeignItem(p, _) |\n                     EntryTraitItem(p, _) |\n                     EntryVariant(p, _) |\n                     EntryField(p, _) |\n-                    EntryExpr(p, _) |\n                     EntryStmt(p, _) |\n                     EntryTy(p, _) |\n                     EntryTraitRef(p, _) |\n@@ -288,6 +308,11 @@ impl<'ast> Map<'ast> {\n                     EntryVisibility(p, _) =>\n                         id = p,\n \n+                    EntryExpr(p, _) => {\n+                        last_expr = Some(id);\n+                        id = p;\n+                    }\n+\n                     RootCrate =>\n                         return DepNode::Krate,\n \n@@ -345,6 +370,29 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n+    fn is_body(&self, node_id: NodeId, item: &Item) -> bool {\n+        match item.node {\n+            ItemFn(_, _, _, _, _, body) => body.node_id() == node_id,\n+            // Since trait/impl items currently don't get their own dep nodes,\n+            // we check here whether node_id is the body of any of the items.\n+            // Once they get their own dep nodes, this can go away\n+            ItemTrait(_, _, _, ref trait_items) => {\n+                trait_items.iter().any(|trait_item| { match trait_item.node {\n+                    MethodTraitItem(_, Some(body)) => body.node_id() == node_id,\n+                    _ => false\n+                }})\n+            }\n+            _ => false\n+        }\n+    }\n+\n+    fn is_impl_item_body(&self, node_id: NodeId, item: &ImplItem) -> bool {\n+        match item.node {\n+            ImplItemKind::Method(_, body) => body.node_id() == node_id,\n+            _ => false\n+        }\n+    }\n+\n     pub fn num_local_def_ids(&self) -> usize {\n         self.definitions.borrow().len()\n     }"}, {"sha": "7972b9dc0987329a68205e02f3626a599f520dd0", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -33,7 +33,6 @@ use graphviz::IntoCow;\n use syntax::ast;\n use rustc::hir::{Expr, PatKind};\n use rustc::hir;\n-use rustc::hir::intravisit::FnKind;\n use syntax::ptr::P;\n use syntax::codemap;\n use syntax::attr::IntType;"}, {"sha": "578732edd83dd76f5fc80911b02cca71553cf864", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -149,19 +149,27 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n     {\n         assert!(def_id.is_local());\n         debug!(\"HashItemsVisitor::calculate(def_id={:?})\", def_id);\n+        self.calculate_def_hash(DepNode::Hir(def_id), false, &mut walk_op);\n+        self.calculate_def_hash(DepNode::HirBody(def_id), true, &mut walk_op);\n+    }\n+\n+    fn calculate_def_hash<W>(&mut self, dep_node: DepNode<DefId>, hash_bodies: bool, walk_op: &mut W)\n+        where W: for<'v> FnMut(&mut StrictVersionHashVisitor<'v, 'a, 'tcx>)\n+    {\n         let mut state = IchHasher::new();\n         walk_op(&mut StrictVersionHashVisitor::new(&mut state,\n                                                    self.tcx,\n                                                    &mut self.def_path_hashes,\n                                                    &mut self.codemap,\n-                                                   self.hash_spans));\n+                                                   self.hash_spans,\n+                                                   hash_bodies));\n         let bytes_hashed = state.bytes_hashed();\n         let item_hash = state.finish();\n-        self.hashes.insert(DepNode::Hir(def_id), item_hash);\n-        debug!(\"calculate_item_hash: def_id={:?} hash={:?}\", def_id, item_hash);\n+        debug!(\"calculate_def_hash: dep_node={:?} hash={:?}\", dep_node, item_hash);\n+        self.hashes.insert(dep_node, item_hash);\n \n         let bytes_hashed = self.tcx.sess.perf_stats.incr_comp_bytes_hashed.get() +\n-                           bytes_hashed;\n+            bytes_hashed;\n         self.tcx.sess.perf_stats.incr_comp_bytes_hashed.set(bytes_hashed);\n     }\n \n@@ -200,7 +208,8 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n                                                             self.tcx,\n                                                             &mut self.def_path_hashes,\n                                                             &mut self.codemap,\n-                                                            self.hash_spans);\n+                                                            self.hash_spans,\n+                                                            false);\n             visitor.hash_attributes(&krate.attrs);\n         }\n "}, {"sha": "6a045216ce9cb24f2d40edf4db3b99845595bbb1", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -52,14 +52,16 @@ pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n     hash_spans: bool,\n     codemap: &'a mut CachingCodemapView<'tcx>,\n     overflow_checks_enabled: bool,\n+    hash_bodies: bool,\n }\n \n impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n     pub fn new(st: &'a mut IchHasher,\n                tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n                def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n                codemap: &'a mut CachingCodemapView<'tcx>,\n-               hash_spans: bool)\n+               hash_spans: bool,\n+               hash_bodies: bool)\n                -> Self {\n         let check_overflow = tcx.sess.opts.debugging_opts.force_overflow_checks\n             .unwrap_or(tcx.sess.opts.debug_assertions);\n@@ -71,6 +73,7 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             hash_spans: hash_spans,\n             codemap: codemap,\n             overflow_checks_enabled: check_overflow,\n+            hash_bodies: hash_bodies,\n         }\n     }\n \n@@ -459,15 +462,16 @@ fn saw_ty(node: &Ty_) -> SawTyComponent {\n #[derive(Hash)]\n enum SawTraitOrImplItemComponent {\n     SawTraitOrImplItemConst,\n-    SawTraitOrImplItemMethod(Unsafety, Constness, Abi),\n+    // The boolean signifies whether a body is present\n+    SawTraitOrImplItemMethod(Unsafety, Constness, Abi, bool),\n     SawTraitOrImplItemType\n }\n \n fn saw_trait_item(ti: &TraitItem_) -> SawTraitOrImplItemComponent {\n     match *ti {\n         ConstTraitItem(..) => SawTraitOrImplItemConst,\n-        MethodTraitItem(ref sig, _) =>\n-            SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi),\n+        MethodTraitItem(ref sig, ref body) =>\n+            SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi, body.is_some()),\n         TypeTraitItem(..) => SawTraitOrImplItemType\n     }\n }\n@@ -476,7 +480,7 @@ fn saw_impl_item(ii: &ImplItemKind) -> SawTraitOrImplItemComponent {\n     match *ii {\n         ImplItemKind::Const(..) => SawTraitOrImplItemConst,\n         ImplItemKind::Method(ref sig, _) =>\n-            SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi),\n+            SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi, true),\n         ImplItemKind::Type(..) => SawTraitOrImplItemType\n     }\n }\n@@ -509,6 +513,14 @@ macro_rules! hash_span {\n }\n \n impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, visit::NestedVisitMode)> {\n+        if self.hash_bodies {\n+            Some((&self.tcx.map, visit::NestedVisitMode::OnlyBodies))\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn visit_variant_data(&mut self,\n                           s: &'tcx VariantData,\n                           name: Name,\n@@ -609,7 +621,8 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_mod(&mut self, m: &'tcx Mod, _s: Span, n: NodeId) {\n         debug!(\"visit_mod: st={:?}\", self.st);\n-        SawMod.hash(self.st); visit::walk_mod(self, m, n)\n+        SawMod.hash(self.st);\n+        visit::walk_mod(self, m, n)\n     }\n \n     fn visit_ty(&mut self, t: &'tcx Ty) {"}, {"sha": "40873011a7b8d7fc73aaa76fa17fc9c75b91a8ac", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -114,7 +114,8 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n \n         match dep_node {\n             DepNode::Krate |\n-            DepNode::Hir(_) => {\n+            DepNode::Hir(_) |\n+            DepNode::HirBody(_) => {\n                 // HIR nodes are inputs, so if we are asserting that the HIR node is\n                 // dirty, we check the dirty input set.\n                 if !self.dirty_inputs.contains(&dep_node) {\n@@ -143,7 +144,8 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n \n         match dep_node {\n             DepNode::Krate |\n-            DepNode::Hir(_) => {\n+            DepNode::Hir(_) |\n+            DepNode::HirBody(_) => {\n                 // For HIR nodes, check the inputs.\n                 if self.dirty_inputs.contains(&dep_node) {\n                     let dep_node_str = self.dep_node_str(&dep_node);"}, {"sha": "562efa4b0d2a8c2e720389fe1309475c0daf516b", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -45,7 +45,9 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n     pub fn is_hashable(dep_node: &DepNode<DefId>) -> bool {\n         match *dep_node {\n             DepNode::Krate |\n-            DepNode::Hir(_) => true,\n+            DepNode::Hir(_) |\n+            DepNode::HirBody(_) =>\n+                true,\n             DepNode::MetaData(def_id) => !def_id.is_local(),\n             _ => false,\n         }\n@@ -58,7 +60,7 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n             }\n \n             // HIR nodes (which always come from our crate) are an input:\n-            DepNode::Hir(def_id) => {\n+            DepNode::Hir(def_id) | DepNode::HirBody(def_id) => {\n                 assert!(def_id.is_local(),\n                         \"cannot hash HIR for non-local def-id {:?} => {:?}\",\n                         def_id,"}, {"sha": "05e21aa19b1b8870c6841a3f5af68e4ffc879344", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -145,8 +145,8 @@ pub fn encode_dep_graph(preds: &Predecessors,\n     for (&target, sources) in &preds.inputs {\n         match *target {\n             DepNode::MetaData(ref def_id) => {\n-                // Metadata *targets* are always local metadata nodes. We handle\n-                // those in `encode_metadata_hashes`, which comes later.\n+                // Metadata *targets* are always local metadata nodes. We have\n+                // already handled those in `encode_metadata_hashes`.\n                 assert!(def_id.is_local());\n                 continue;\n             }"}, {"sha": "7138b4c7604e97ffa8f4329dec30ab7850372985", "filename": "src/test/incremental/hello_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fhello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fhello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhello_world.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -31,7 +31,7 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n     pub fn y() {\n         x::x();\n     }"}, {"sha": "0a36e3c693edbb22123c03131810e7652de29888", "filename": "src/test/incremental/ich_method_call_trait_scope.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -46,12 +46,14 @@ mod mod3 {\n mod mod3 {\n     use Trait2;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n     fn bar() {\n         ().method();\n     }\n \n     #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n     fn baz() {\n         22; // no method call, traits in scope don't matter\n     }"}, {"sha": "e8e40d57b1ee6b42e514900b0a45a435d95592f4", "filename": "src/test/incremental/ich_nested_items.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_nested_items.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -23,11 +23,14 @@ fn foo() {\n \n #[cfg(rpass2)]\n #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n fn foo() {\n     #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n     fn baz() { } // order is different...\n \n     #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n     fn bar() { } // but that doesn't matter.\n \n     fn bap() { } // neither does adding a new item"}, {"sha": "49a88c530ff64b1248ca46e678edcbfbd2be61d0", "filename": "src/test/incremental/ich_resolve_results.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_resolve_results.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -45,11 +45,13 @@ mod mod3 {\n     use test;\n \n     #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n     fn in_expr() {\n         Foo(0);\n     }\n \n     #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n     fn in_type() {\n         test::<Foo>();\n     }\n@@ -60,12 +62,14 @@ mod mod3 {\n     use test;\n     use mod2::Foo; // <-- This changed!\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"rpass3\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"rpass3\")]\n     fn in_expr() {\n         Foo(0);\n     }\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"rpass3\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass3\")]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"rpass3\")]\n     fn in_type() {\n         test::<Foo>();\n     }"}, {"sha": "e81f690f5cacba9b2a894ab1a851521561bcc0c0", "filename": "src/test/incremental/source_loc_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -17,17 +17,17 @@\n \n #![feature(rustc_attrs)]\n \n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n fn line_same() {\n     let _ = line!();\n }\n \n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n fn col_same() {\n     let _ = column!();\n }\n \n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n fn file_same() {\n     let _ = file!();\n }\n@@ -38,7 +38,7 @@ fn line_different() {\n }\n \n #[cfg(rpass2)]\n-#[rustc_dirty(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n fn line_different() {\n     let _ = line!();\n }\n@@ -49,7 +49,7 @@ fn col_different() {\n }\n \n #[cfg(rpass2)]\n-#[rustc_dirty(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n fn col_different() {\n     let _ =        column!();\n }"}, {"sha": "90ec4a9d55831bb9b4ea4cd9dfa4ebc5392c6322", "filename": "src/test/incremental/spans_insignificant_w_o_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fspans_insignificant_w_o_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fspans_insignificant_w_o_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_insignificant_w_o_debuginfo.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -22,4 +22,5 @@ pub fn main() {}\n \n #[cfg(rpass2)]\n #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n pub fn main() {}"}, {"sha": "cdab8de9828ab1a22a6867b29bb5266349196d13", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936dbbce377157ac1042028da2ad8d6b8183c4de/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=936dbbce377157ac1042028da2ad8d6b8183c4de", "patch": "@@ -22,4 +22,5 @@ pub fn main() {}\n \n #[cfg(rpass2)]\n #[rustc_dirty(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n pub fn main() {}"}]}