{"sha": "87b7207acd6bfb07f0f82b72511b22c866a74553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YjcyMDdhY2Q2YmZiMDdmMGY4MmI3MjUxMWIyMmM4NjZhNzQ1NTM=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-04-08T22:11:20Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-04-16T22:02:59Z"}, "message": "Use neg intrinsics", "tree": {"sha": "d5ff264a7db9a72732fb52132b24dc066a4879ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ff264a7db9a72732fb52132b24dc066a4879ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87b7207acd6bfb07f0f82b72511b22c866a74553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87b7207acd6bfb07f0f82b72511b22c866a74553", "html_url": "https://github.com/rust-lang/rust/commit/87b7207acd6bfb07f0f82b72511b22c866a74553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87b7207acd6bfb07f0f82b72511b22c866a74553/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0682c31fcee752a5530b4f45ba0e726a85654bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0682c31fcee752a5530b4f45ba0e726a85654bcd", "html_url": "https://github.com/rust-lang/rust/commit/0682c31fcee752a5530b4f45ba0e726a85654bcd"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "4f89d00deb2307863aeb8f65839cf5f88b443cc4", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87b7207acd6bfb07f0f82b72511b22c866a74553/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b7207acd6bfb07f0f82b72511b22c866a74553/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=87b7207acd6bfb07f0f82b72511b22c866a74553", "patch": "@@ -40,6 +40,9 @@ extern \"platform-intrinsic\" {\n     /// fptoui/fptosi/uitofp/sitofp\n     pub(crate) fn simd_cast<T, U>(x: T) -> U;\n \n+    /// neg/fneg\n+    pub(crate) fn simd_neg<T>(x: T) -> T;\n+\n     // floor\n     #[cfg(feature = \"std\")]\n     pub(crate) fn simd_floor<T>(x: T) -> T;"}, {"sha": "513eeb423d9263e58ba1fa43add4b59100b8a168", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/87b7207acd6bfb07f0f82b72511b22c866a74553/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b7207acd6bfb07f0f82b72511b22c866a74553/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=87b7207acd6bfb07f0f82b72511b22c866a74553", "patch": "@@ -185,25 +185,7 @@ macro_rules! impl_op {\n             {\n                 type Output = Self;\n                 fn neg(self) -> Self::Output {\n-                    Self::splat(0) - self\n-                }\n-            }\n-        }\n-    };\n-\n-    { impl Neg for $type:ident, $scalar:ty, @float } => {\n-        impl_ref_ops! {\n-            impl<const LANES: usize> core::ops::Neg for crate::$type<LANES>\n-            where\n-                crate::$type<LANES>: LanesAtMost32,\n-                crate::SimdU32<LANES>: LanesAtMost32,\n-                crate::SimdU64<LANES>: LanesAtMost32,\n-            {\n-                type Output = Self;\n-                fn neg(self) -> Self::Output {\n-                    // FIXME: Replace this with fneg intrinsic once available.\n-                    // https://github.com/rust-lang/stdsimd/issues/32\n-                    Self::from_bits(Self::splat(-0.0).to_bits() ^ self.to_bits())\n+                    unsafe { crate::intrinsics::simd_neg(self) }\n                 }\n             }\n         }\n@@ -318,7 +300,7 @@ macro_rules! impl_float_ops {\n                 impl_op! { impl Mul for $vector, $scalar }\n                 impl_op! { impl Div for $vector, $scalar }\n                 impl_op! { impl Rem for $vector, $scalar }\n-                impl_op! { impl Neg for $vector, $scalar, @float }\n+                impl_op! { impl Neg for $vector, $scalar }\n                 impl_op! { impl Index for $vector, $scalar }\n             )*\n         )*"}]}