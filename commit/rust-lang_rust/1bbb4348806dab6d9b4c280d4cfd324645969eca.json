{"sha": "1bbb4348806dab6d9b4c280d4cfd324645969eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYmI0MzQ4ODA2ZGFiNmQ5YjRjMjgwZDRjZmQzMjQ2NDU5NjllY2E=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-09T00:30:36Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-11T22:51:09Z"}, "message": "Get static default methods working in the non-cross-crate case. Work on #7569.", "tree": {"sha": "dae50f52f179355655ab83ea4e3f5f3a32fca703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dae50f52f179355655ab83ea4e3f5f3a32fca703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bbb4348806dab6d9b4c280d4cfd324645969eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbb4348806dab6d9b4c280d4cfd324645969eca", "html_url": "https://github.com/rust-lang/rust/commit/1bbb4348806dab6d9b4c280d4cfd324645969eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bbb4348806dab6d9b4c280d4cfd324645969eca/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b89b437fb38a4388d8f868f13d1200a22157e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b89b437fb38a4388d8f868f13d1200a22157e8a", "html_url": "https://github.com/rust-lang/rust/commit/2b89b437fb38a4388d8f868f13d1200a22157e8a"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "78e0c3989ecd0023505b7aecafe8deaa601ff544", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1bbb4348806dab6d9b4c280d4cfd324645969eca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbb4348806dab6d9b4c280d4cfd324645969eca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=1bbb4348806dab6d9b4c280d4cfd324645969eca", "patch": "@@ -111,6 +111,10 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     let tpt = ty::lookup_item_type(ccx.tcx, fn_id);\n     let llitem_ty = tpt.ty;\n \n+    // We need to do special handling of the substitutions if we are\n+    // calling a static provided method. This is sort of unfortunate.\n+    let mut is_static_provided = None;\n+\n     let map_node = session::expect(\n         ccx.sess,\n         ccx.tcx.items.find_copy(&fn_id.node),\n@@ -129,6 +133,12 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         return (get_item_val(ccx, fn_id.node), true);\n       }\n       ast_map::node_trait_method(@ast::provided(m), _, pt) => {\n+        // If this is a static provided method, indicate that\n+        // and stash the number of params on the method.\n+        if m.explicit_self.node == ast::sty_static {\n+            is_static_provided = Some(m.generics.ty_params.len());\n+        }\n+\n         (pt, m.ident, m.span)\n       }\n       ast_map::node_trait_method(@ast::required(_), _, _) => {\n@@ -153,8 +163,36 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n       ast_map::node_struct_ctor(_, i, pt) => (pt, i.ident, i.span)\n     };\n \n-    let mono_ty = ty::subst_tps(ccx.tcx, psubsts.tys,\n-                                psubsts.self_ty, llitem_ty);\n+    debug!(\"monomorphic_fn about to subst into %s\", llitem_ty.repr(ccx.tcx));\n+    let mono_ty = match is_static_provided {\n+        None => ty::subst_tps(ccx.tcx, psubsts.tys,\n+                              psubsts.self_ty, llitem_ty),\n+        Some(num_method_ty_params) => {\n+            // Static default methods are a little unfortunate, in\n+            // that the \"internal\" and \"external\" type of them differ.\n+            // Internally, the method body can refer to Self, but the\n+            // externally visable type of the method has a type param\n+            // inserted in between the trait type params and the\n+            // method type params. The substs that we are given are\n+            // the proper substs *internally* to the method body, so\n+            // we have to use those when compiling it.\n+            //\n+            // In order to get the proper substitution to use on the\n+            // type of the method, we pull apart the substitution and\n+            // stick a substitution for the self type in.\n+            // This is a bit unfortunate.\n+\n+            let idx = psubsts.tys.len() - num_method_ty_params;\n+            let substs =\n+                (psubsts.tys.slice(0, idx) +\n+                 &[psubsts.self_ty.get()] +\n+                 psubsts.tys.tailn(idx));\n+            debug!(\"static default: changed substitution to %s\",\n+                   substs.repr(ccx.tcx));\n+\n+            ty::subst_tps(ccx.tcx, substs, None, llitem_ty)\n+        }\n+    };\n     let llfty = type_of_fn_from_ty(ccx, mono_ty);\n \n     ccx.stats.n_monos += 1;"}]}