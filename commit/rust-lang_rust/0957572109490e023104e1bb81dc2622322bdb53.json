{"sha": "0957572109490e023104e1bb81dc2622322bdb53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NTc1NzIxMDk0OTBlMDIzMTA0ZTFiYjgxZGMyNjIyMzIyYmRiNTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T23:52:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-24T23:52:06Z"}, "message": "Rollup merge of #48197 - bobtwinkles:two_phase_borrow_on_ops, r=nikomatsakis\n\nAllow two-phase borrows of &mut self in ops\n\nWe need two-phase borrows of ops to be in the initial NLL release since without them lots of existing code will break. Fixes #48129.\nCC @pnkfelix  and @nikomatsakis\n\nr? @pnkfelix", "tree": {"sha": "3e5b1775de99f496eaa852313d303687a34e7bf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e5b1775de99f496eaa852313d303687a34e7bf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0957572109490e023104e1bb81dc2622322bdb53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakfqmCRBK7hj4Ov3rIwAAdHIIAHImjeScIRk9HfIzSm9HbILC\noSgLfF3wK0lFE63OnxmGCf5fSrZ1kT3OeqXc2dHsQOSaxYe5QYtZ+C9RqjTsiTMl\np5j0epVguUSwyb6AOLiMpyQHMPJS45xrJ8e1X+DqIF8KhP7NIfbrQRK5AGDUdDkI\n3jXLKjS3Ddwn0mtS7Ze7+z7PmWQ20sKROe0uOc6tqrpzlRzyj9Or+brZQkXR9iEn\nRYfgx4G1XNcMX7hJyrAxPqDQwtZaJoqrSsZ/u80WA8g9pd28+EmOKpnQcUtchaLD\nBspY+xssl61uqnpbM8xQNDNLXs2Xaoyc0RVfpkcvmCtKjBL2nB08III0PmOxsqY=\n=Da65\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e5b1775de99f496eaa852313d303687a34e7bf2\nparent dd890d80a08867e15b4b892ed4f6fff457d15dad\nparent 7062955ad9186c3a8cd785ecf90bc10f1949b16a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519516326 -0800\ncommitter GitHub <noreply@github.com> 1519516326 -0800\n\nRollup merge of #48197 - bobtwinkles:two_phase_borrow_on_ops, r=nikomatsakis\n\nAllow two-phase borrows of &mut self in ops\n\nWe need two-phase borrows of ops to be in the initial NLL release since without them lots of existing code will break. Fixes #48129.\nCC @pnkfelix  and @nikomatsakis\n\nr? @pnkfelix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0957572109490e023104e1bb81dc2622322bdb53", "html_url": "https://github.com/rust-lang/rust/commit/0957572109490e023104e1bb81dc2622322bdb53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0957572109490e023104e1bb81dc2622322bdb53/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd890d80a08867e15b4b892ed4f6fff457d15dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd890d80a08867e15b4b892ed4f6fff457d15dad", "html_url": "https://github.com/rust-lang/rust/commit/dd890d80a08867e15b4b892ed4f6fff457d15dad"}, {"sha": "7062955ad9186c3a8cd785ecf90bc10f1949b16a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7062955ad9186c3a8cd785ecf90bc10f1949b16a", "html_url": "https://github.com/rust-lang/rust/commit/7062955ad9186c3a8cd785ecf90bc10f1949b16a"}], "stats": {"total": 115, "additions": 54, "deletions": 61}, "files": [{"sha": "a3dbf344ab7e090706a5474ae33328da6d06a3a8", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0957572109490e023104e1bb81dc2622322bdb53/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0957572109490e023104e1bb81dc2622322bdb53/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=0957572109490e023104e1bb81dc2622322bdb53", "patch": "@@ -201,10 +201,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let mutbl = match mt.mutbl {\n                             hir::MutImmutable => AutoBorrowMutability::Immutable,\n                             hir::MutMutable => AutoBorrowMutability::Mutable {\n-                                // For initial two-phase borrow\n-                                // deployment, conservatively omit\n-                                // overloaded binary ops.\n-                                allow_two_phase_borrow: false,\n+                                // Allow two-phase borrows for binops in initial deployment\n+                                // since they desugar to methods\n+                                allow_two_phase_borrow: true,\n                             }\n                         };\n                         let autoref = Adjustment {\n@@ -219,10 +218,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let mutbl = match mt.mutbl {\n                             hir::MutImmutable => AutoBorrowMutability::Immutable,\n                             hir::MutMutable => AutoBorrowMutability::Mutable {\n-                                // For initial two-phase borrow\n-                                // deployment, conservatively omit\n-                                // overloaded binary ops.\n-                                allow_two_phase_borrow: false,\n+                                // Allow two-phase borrows for binops in initial deployment\n+                                // since they desugar to methods\n+                                allow_two_phase_borrow: true,\n                             }\n                         };\n                         let autoref = Adjustment {"}, {"sha": "f4c36157fe98a431ea7cd7d760555882e4617954", "filename": "src/test/compile-fail/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0957572109490e023104e1bb81dc2622322bdb53/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0957572109490e023104e1bb81dc2622322bdb53/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=0957572109490e023104e1bb81dc2622322bdb53", "patch": "@@ -30,8 +30,6 @@\n // #![feature(rustc_attrs)]\n \n use std::ops::{Index, IndexMut};\n-use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n-use std::ops::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign};\n \n // This is case outlined by Niko that we want to ensure we reject\n // (at least initially).\n@@ -182,56 +180,6 @@ fn coerce_index_op() {\n     //[nll]~^^ ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n }\n \n-struct A(i32);\n-\n-macro_rules! trivial_binop {\n-    ($Trait:ident, $m:ident) => {\n-        impl $Trait<i32> for A { fn $m(&mut self, rhs: i32) { self.0 = rhs; } }\n-    }\n-}\n-\n-trivial_binop!(AddAssign, add_assign);\n-trivial_binop!(SubAssign, sub_assign);\n-trivial_binop!(MulAssign, mul_assign);\n-trivial_binop!(DivAssign, div_assign);\n-trivial_binop!(RemAssign, rem_assign);\n-trivial_binop!(BitAndAssign, bitand_assign);\n-trivial_binop!(BitOrAssign, bitor_assign);\n-trivial_binop!(BitXorAssign, bitxor_assign);\n-trivial_binop!(ShlAssign, shl_assign);\n-trivial_binop!(ShrAssign, shr_assign);\n-\n-fn overloaded_binops() {\n-    let mut a = A(10);\n-    a += a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a -= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a *= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a /= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a &= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a |= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a ^= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a <<= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-    a >>= a.0;\n-    //[lxl]~^   ERROR cannot use `a.0` because it was mutably borrowed\n-    //[nll]~^^  ERROR cannot use `a.0` because it was mutably borrowed\n-}\n-\n fn main() {\n \n     // As a reminder, this is the basic case we want to ensure we handle.\n@@ -252,5 +200,4 @@ fn main() {\n \n     coerce_unsized();\n     coerce_index_op();\n-    overloaded_binops();\n }"}, {"sha": "1b2529d7875ab436a998d5e1e5c75ac983248959", "filename": "src/test/run-pass/borrowck/two-phase-bin-ops.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0957572109490e023104e1bb81dc2622322bdb53/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0957572109490e023104e1bb81dc2622322bdb53/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs?ref=0957572109490e023104e1bb81dc2622322bdb53", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: lxl nll\n+\n+#![cfg_attr(nll, feature(nll))]\n+\n+use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n+use std::ops::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssign};\n+\n+struct A(i32);\n+\n+macro_rules! trivial_binop {\n+    ($Trait:ident, $m:ident) => {\n+        impl $Trait<i32> for A { fn $m(&mut self, rhs: i32) { self.0 = rhs; } }\n+    }\n+}\n+\n+trivial_binop!(AddAssign, add_assign);\n+trivial_binop!(SubAssign, sub_assign);\n+trivial_binop!(MulAssign, mul_assign);\n+trivial_binop!(DivAssign, div_assign);\n+trivial_binop!(RemAssign, rem_assign);\n+trivial_binop!(BitAndAssign, bitand_assign);\n+trivial_binop!(BitOrAssign, bitor_assign);\n+trivial_binop!(BitXorAssign, bitxor_assign);\n+trivial_binop!(ShlAssign, shl_assign);\n+trivial_binop!(ShrAssign, shr_assign);\n+\n+fn main() {\n+    let mut a = A(10);\n+    a += a.0;\n+    a -= a.0;\n+    a *= a.0;\n+    a /= a.0;\n+    a &= a.0;\n+    a |= a.0;\n+    a ^= a.0;\n+    a <<= a.0;\n+    a >>= a.0;\n+}"}]}