{"sha": "6117c063063211196e775b131c8b83e2e6d2c126", "node_id": "C_kwDOAAsO6NoAKDYxMTdjMDYzMDYzMjExMTk2ZTc3NWIxMzFjOGI4M2UyZTZkMmMxMjY", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-04-04T12:38:46Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-04-04T12:38:46Z"}, "message": "incr.comp.: Make sure dependencies are recorded when feeding queries during eval-always queries.", "tree": {"sha": "4db1032ed945cb5ffa45f7f2d185b6de9b5d4fab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4db1032ed945cb5ffa45f7f2d185b6de9b5d4fab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6117c063063211196e775b131c8b83e2e6d2c126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6117c063063211196e775b131c8b83e2e6d2c126", "html_url": "https://github.com/rust-lang/rust/commit/6117c063063211196e775b131c8b83e2e6d2c126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6117c063063211196e775b131c8b83e2e6d2c126/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa", "html_url": "https://github.com/rust-lang/rust/commit/932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa"}], "stats": {"total": 104, "additions": 71, "deletions": 33}, "files": [{"sha": "49aa1da01a23a88ba922a0a210ee8e89def40291", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6117c063063211196e775b131c8b83e2e6d2c126/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6117c063063211196e775b131c8b83e2e6d2c126/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=6117c063063211196e775b131c8b83e2e6d2c126", "patch": "@@ -8,34 +8,34 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n-    tcx.dep_graph.assert_ignored();\n-\n-    if tcx.sess.opts.unstable_opts.hir_stats {\n-        crate::hir_stats::print_hir_stats(tcx);\n-    }\n+    tcx.dep_graph.with_ignore(|| {\n+        if tcx.sess.opts.unstable_opts.hir_stats {\n+            crate::hir_stats::print_hir_stats(tcx);\n+        }\n \n-    #[cfg(debug_assertions)]\n-    {\n-        let errors = Lock::new(Vec::new());\n+        #[cfg(debug_assertions)]\n+        {\n+            let errors = Lock::new(Vec::new());\n \n-        tcx.hir().par_for_each_module(|module_id| {\n-            let mut v = HirIdValidator {\n-                tcx,\n-                owner: None,\n-                hir_ids_seen: Default::default(),\n-                errors: &errors,\n-            };\n+            tcx.hir().par_for_each_module(|module_id| {\n+                let mut v = HirIdValidator {\n+                    tcx,\n+                    owner: None,\n+                    hir_ids_seen: Default::default(),\n+                    errors: &errors,\n+                };\n \n-            tcx.hir().visit_item_likes_in_module(module_id, &mut v);\n-        });\n+                tcx.hir().visit_item_likes_in_module(module_id, &mut v);\n+            });\n \n-        let errors = errors.into_inner();\n+            let errors = errors.into_inner();\n \n-        if !errors.is_empty() {\n-            let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n-            tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+            if !errors.is_empty() {\n+                let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n+                tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+            }\n         }\n-    }\n+    })\n }\n \n struct HirIdValidator<'a, 'hir> {"}, {"sha": "172667e5bdd39d8a4488a22a946498b761ca5d1d", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6117c063063211196e775b131c8b83e2e6d2c126/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6117c063063211196e775b131c8b83e2e6d2c126/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=6117c063063211196e775b131c8b83e2e6d2c126", "patch": "@@ -143,16 +143,29 @@ impl<K: DepKind> DepGraph<K> {\n         assert_eq!(_green_node_index, DepNodeIndex::SINGLETON_DEPENDENCYLESS_ANON_NODE);\n \n         // Instantiate a dependy-less red node only once for anonymous queries.\n-        let (_red_node_index, _prev_and_index) = current.intern_node(\n+        let (red_node_index, red_node_prev_index_and_color) = current.intern_node(\n             profiler,\n             &prev_graph,\n             DepNode { kind: DepKind::RED, hash: Fingerprint::ZERO.into() },\n             smallvec![],\n             None,\n             false,\n         );\n-        assert_eq!(_red_node_index, DepNodeIndex::FOREVER_RED_NODE);\n-        assert!(matches!(_prev_and_index, None | Some((_, DepNodeColor::Red))));\n+        assert_eq!(red_node_index, DepNodeIndex::FOREVER_RED_NODE);\n+        match red_node_prev_index_and_color {\n+            None => {\n+                // This is expected when we have no previous compilation session.\n+                assert!(prev_graph_node_count == 0);\n+            }\n+            Some((prev_red_node_index, DepNodeColor::Red)) => {\n+                assert_eq!(prev_red_node_index.as_usize(), red_node_index.as_usize());\n+                colors.insert(prev_red_node_index, DepNodeColor::Red);\n+            }\n+            Some((_, DepNodeColor::Green(_))) => {\n+                // There must be a logic error somewhere if we hit this branch.\n+                panic!(\"DepNodeIndex::FOREVER_RED_NODE evaluated to DepNodeColor::Green\")\n+            }\n+        }\n \n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n@@ -353,10 +366,8 @@ impl<K: DepKind> DepGraphData<K> {\n             }))\n         };\n \n-        let task_deps_ref = match &task_deps {\n-            Some(deps) => TaskDepsRef::Allow(deps),\n-            None => TaskDepsRef::Ignore,\n-        };\n+        let task_deps_ref =\n+            task_deps.as_ref().map(TaskDepsRef::Allow).unwrap_or(TaskDepsRef::EvalAlways);\n \n         let result = K::with_deps(task_deps_ref, || task(cx, arg));\n         let edges = task_deps.map_or_else(|| smallvec![], |lock| lock.into_inner().reads);\n@@ -461,6 +472,11 @@ impl<K: DepKind> DepGraph<K> {\n             K::read_deps(|task_deps| {\n                 let mut task_deps = match task_deps {\n                     TaskDepsRef::Allow(deps) => deps.lock(),\n+                    TaskDepsRef::EvalAlways => {\n+                        // We don't need to record dependencies of eval_always\n+                        // queries. They are re-evaluated unconditionally anyway.\n+                        return;\n+                    }\n                     TaskDepsRef::Ignore => return,\n                     TaskDepsRef::Forbid => {\n                         panic!(\"Illegal read of: {dep_node_index:?}\")\n@@ -556,7 +572,10 @@ impl<K: DepKind> DepGraph<K> {\n             let mut edges = SmallVec::new();\n             K::read_deps(|task_deps| match task_deps {\n                 TaskDepsRef::Allow(deps) => edges.extend(deps.lock().reads.iter().copied()),\n-                TaskDepsRef::Ignore => {} // During HIR lowering, we have no dependencies.\n+                TaskDepsRef::EvalAlways => {\n+                    edges.push(DepNodeIndex::FOREVER_RED_NODE);\n+                }\n+                TaskDepsRef::Ignore => {}\n                 TaskDepsRef::Forbid => {\n                     panic!(\"Cannot summarize when dependencies are not recorded.\")\n                 }\n@@ -1349,10 +1368,13 @@ pub enum TaskDepsRef<'a, K: DepKind> {\n     /// `TaskDeps`. This is used when executing a 'normal' query\n     /// (no `eval_always` modifier)\n     Allow(&'a Lock<TaskDeps<K>>),\n-    /// New dependencies are ignored. This is used when\n-    /// executing an `eval_always` query, since there's no\n+    /// This is used when executing an `eval_always` query. We don't\n     /// need to track dependencies for a query that's always\n-    /// re-executed. This is also used for `dep_graph.with_ignore`\n+    /// re-executed -- but we need to know that this is an `eval_always`\n+    /// query in order to emit dependencies to `DepNodeIndex::FOREVER_RED_NODE`\n+    /// when directly feeding other queries.\n+    EvalAlways,\n+    /// New dependencies are ignored. This is also used for `dep_graph.with_ignore`.\n     Ignore,\n     /// Any attempt to add new dependencies will cause a panic.\n     /// This is used when decoding a query result from disk,"}, {"sha": "8f346a7207e7e97278be245075fabd2f929551c2", "filename": "tests/incremental/issue-108481-feed-eval-always.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6117c063063211196e775b131c8b83e2e6d2c126/tests%2Fincremental%2Fissue-108481-feed-eval-always.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6117c063063211196e775b131c8b83e2e6d2c126/tests%2Fincremental%2Fissue-108481-feed-eval-always.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fissue-108481-feed-eval-always.rs?ref=6117c063063211196e775b131c8b83e2e6d2c126", "patch": "@@ -0,0 +1,16 @@\n+// revisions: cpass1 cpass2\n+\n+#![crate_type = \"rlib\"]\n+\n+use std::fmt::Debug;\n+\n+// MCVE kindly provided by Nilstrieb at\n+// https://github.com/rust-lang/rust/issues/108481#issuecomment-1493080185\n+\n+#[derive(Debug)]\n+pub struct ConstGeneric<const CHUNK_SIZE: usize> {\n+    _p: [(); CHUNK_SIZE],\n+}\n+\n+#[cfg(cpass1)]\n+impl<const CHUNK_SIZE: usize> ConstGeneric<CHUNK_SIZE> {}"}]}