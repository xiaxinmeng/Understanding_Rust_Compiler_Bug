{"sha": "5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYmQ0ZDljMjdiZjhmZWU0ZjdkNjY0ZDc2YzQxODMyNzQ1ZGZmNDM=", "commit": {"author": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2019-10-20T07:55:10Z"}, "committer": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2019-10-20T08:46:18Z"}, "message": "move interface to the unikernel in the crate hermit-abi\n\n=> simplifies the maintenance of the interface", "tree": {"sha": "2564a6c2514b8c73d4aed584e9cccb99f138e710", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2564a6c2514b8c73d4aed584e9cccb99f138e710"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "html_url": "https://github.com/rust-lang/rust/commit/5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/comments", "author": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc094bf184bc624149ca6b18abbb14be0d08c3e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc094bf184bc624149ca6b18abbb14be0d08c3e7", "html_url": "https://github.com/rust-lang/rust/commit/dc094bf184bc624149ca6b18abbb14be0d08c3e7"}], "stats": {"total": 184, "additions": 70, "deletions": 114}, "files": [{"sha": "a1506619dff2f87f47dba2ece3d5484992790dd5", "filename": "Cargo.lock", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -1291,6 +1291,17 @@ dependencies = [\n  \"unicode-segmentation\",\n ]\n \n+[[package]]\n+name = \"hermit-abi\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f22b8f315b98f415780ddbe9163c7dbbc5a07225b6d102ace1d8aeef85775140\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"libc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"hex\"\n version = \"0.3.2\"\n@@ -4073,7 +4084,8 @@ dependencies = [\n  \"core\",\n  \"dlmalloc\",\n  \"fortanix-sgx-abi\",\n- \"hashbrown\",\n+ \"hashbrown 0.6.1\",\n+ \"hermit-abi\",\n  \"libc\",\n  \"panic_abort\",\n  \"panic_unwind\","}, {"sha": "0de9e6fcca5da970552fc8b28e85cdb5c5a5d389", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -50,6 +50,9 @@ dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n [target.x86_64-fortanix-unknown-sgx.dependencies]\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n \n+[target.x86_64-unknown-hermit.dependencies]\n+hermit-abi = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n+\n [target.wasm32-wasi.dependencies]\n wasi = { version = \"0.7.0\", features = ['rustc-dep-of-std', 'alloc'] }\n "}, {"sha": "86cc44636328877ec626344dfb14b1024febcd25", "filename": "src/libstd/sys/hermit/alloc.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Falloc.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -1,21 +1,16 @@\n use crate::alloc::{GlobalAlloc, Layout, System};\n use crate::ptr;\n-\n-extern \"C\" {\n-    fn sys_malloc(size: usize, align: usize) -> *mut u8;\n-    fn sys_realloc(ptr: *mut u8, size: usize, align: usize, new_size: usize) -> *mut u8;\n-    fn sys_free(ptr: *mut u8, size: usize, align: usize);\n-}\n+use crate::sys::hermit::abi;\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        sys_malloc(layout.size(), layout.align())\n+        abi::malloc(layout.size(), layout.align())\n     }\n \n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-        let addr = sys_malloc(layout.size(), layout.align());\n+        let addr = abi::malloc(layout.size(), layout.align());\n \n         if !addr.is_null() {\n             ptr::write_bytes(\n@@ -30,11 +25,11 @@ unsafe impl GlobalAlloc for System {\n \n     #[inline]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n-        sys_free(ptr, layout.size(), layout.align())\n+        abi::free(ptr, layout.size(), layout.align())\n     }\n \n     #[inline]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-        sys_realloc(ptr, layout.size(), layout.align(), new_size)\n+        abi::realloc(ptr, layout.size(), layout.align(), new_size)\n     }\n }"}, {"sha": "8e52b3da1b170e6cef9fa5293ce92c2c6b28ab23", "filename": "src/libstd/sys/hermit/condvar.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fcondvar.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -1,18 +1,12 @@\n use crate::cmp;\n+use crate::sys::hermit::abi;\n use crate::sys::mutex::Mutex;\n use crate::time::Duration;\n \n pub struct Condvar {\n     identifier: usize,\n }\n \n-extern \"C\" {\n-   fn sys_notify(id: usize, count: i32) -> i32;\n-   fn sys_add_queue(id: usize, timeout_ns: i64) -> i32;\n-   fn sys_wait(id: usize) -> i32;\n-   fn sys_destroy_queue(id: usize) -> i32;\n-}\n-\n impl Condvar {\n     pub const fn new() -> Condvar {\n         Condvar { identifier: 0 }\n@@ -24,19 +18,19 @@ impl Condvar {\n     }\n \n     pub unsafe fn notify_one(&self) {\n-         let _ = sys_notify(self.id(), 1);\n+         let _ = abi::notify(self.id(), 1);\n     }\n \n     #[inline]\n     pub unsafe fn notify_all(&self) {\n-         let _ = sys_notify(self.id(), -1 /* =all */);\n+         let _ = abi::notify(self.id(), -1 /* =all */);\n     }\n \n     pub unsafe fn wait(&self, mutex: &Mutex) {\n         // add current task to the wait queue\n-        let _ = sys_add_queue(self.id(), -1 /* no timeout */);\n+        let _ = abi::add_queue(self.id(), -1 /* no timeout */);\n         mutex.unlock();\n-        let _ = sys_wait(self.id());\n+        let _ = abi::wait(self.id());\n         mutex.lock();\n     }\n \n@@ -45,20 +39,20 @@ impl Condvar {\n         let nanos = cmp::min(i64::max_value() as u128, nanos);\n \n         // add current task to the wait queue\n-        let _ = sys_add_queue(self.id(), nanos as i64);\n+        let _ = abi::add_queue(self.id(), nanos as i64);\n \n         mutex.unlock();\n         // If the return value is !0 then a timeout happened, so we return\n         // `false` as we weren't actually notified.\n-        let ret = sys_wait(self.id()) == 0;\n+        let ret = abi::wait(self.id()) == 0;\n         mutex.lock();\n \n         ret\n     }\n \n     #[inline]\n     pub unsafe fn destroy(&self) {\n-        let _ = sys_destroy_queue(self.id());\n+        let _ = abi::destroy_queue(self.id());\n     }\n \n     #[inline]"}, {"sha": "84c547366473a1994cc4d02ed26d95f675f6358b", "filename": "src/libstd/sys/hermit/fd.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffd.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -3,14 +3,9 @@\n use crate::io::{self, Read, ErrorKind};\n use crate::mem;\n use crate::sys::cvt;\n+use crate::sys::hermit::abi;\n use crate::sys_common::AsInner;\n \n-extern {\n-    fn sys_read(fd: i32, buf: *mut u8, len: usize) -> isize;\n-    fn sys_write(fd: i32, buf: *const u8, len: usize) -> isize;\n-    fn sys_close(fd: i32) -> i32;\n-}\n-\n #[derive(Debug)]\n pub struct FileDesc {\n     fd: i32,\n@@ -31,7 +26,7 @@ impl FileDesc {\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        let result = unsafe { sys_read(self.fd, buf.as_mut_ptr(), buf.len()) };\n+        let result = unsafe { abi::read(self.fd, buf.as_mut_ptr(), buf.len()) };\n         cvt(result as i32)\n     }\n \n@@ -41,7 +36,7 @@ impl FileDesc {\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n-        let result = unsafe { sys_write(self.fd, buf.as_ptr(), buf.len()) };\n+        let result = unsafe { abi::write(self.fd, buf.as_ptr(), buf.len()) };\n         cvt(result as i32)\n     }\n \n@@ -82,6 +77,6 @@ impl Drop for FileDesc {\n         // the file descriptor was closed or not, and if we retried (for\n         // something like EINTR), we might close another valid file descriptor\n         // (opened after we closed ours.\n-        let _ = unsafe { sys_close(self.fd) };\n+        let _ = unsafe { abi::close(self.fd) };\n     }\n }"}, {"sha": "f8e5844a1678d766e9b286e296e7f19fedc495ea", "filename": "src/libstd/sys/hermit/fs.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffs.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -6,18 +6,14 @@ use crate::io::{SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n+use crate::sys::hermit::abi;\n use crate::sys::hermit::fd::FileDesc;\n use crate::sys::cvt;\n use crate::sys_common::os_str_bytes::OsStrExt;\n \n pub use crate::sys_common::fs::copy;\n //pub use crate::sys_common::fs::remove_dir_all;\n \n-extern {\n-    fn sys_open(name: *const i8, flags: i32, mode: i32) -> i32;\n-    fn sys_unlink(name: *const i8) -> i32;\n-}\n-\n fn cstr(path: &Path) -> io::Result<CString> {\n     Ok(CString::new(path.as_os_str().as_bytes())?)\n }\n@@ -272,7 +268,7 @@ impl File {\n             mode = 0;\n         }\n \n-        let fd = unsafe { cvt(sys_open(path.as_ptr(), flags, mode))? };\n+        let fd = unsafe { cvt(abi::open(path.as_ptr(), flags, mode))? };\n         Ok(File(FileDesc::new(fd as i32)))\n     }\n \n@@ -345,7 +341,7 @@ pub fn readdir(_p: &Path) -> io::Result<ReadDir> {\n \n pub fn unlink(path: &Path) -> io::Result<()> {\n     let name = cstr(path)?;\n-    let _ = unsafe { cvt(sys_unlink(name.as_ptr()))? };\n+    let _ = unsafe { cvt(abi::unlink(name.as_ptr()))? };\n     Ok(())\n }\n "}, {"sha": "d4359631769da2c0f093e7019fadbae1b26d1dcf", "filename": "src/libstd/sys/hermit/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -42,6 +42,9 @@ pub mod fast_thread_local;\n pub use crate::sys_common::os_str_bytes as os_str;\n use crate::io::ErrorKind;\n \n+#[allow(unused_extern_crates)]\n+pub extern crate hermit_abi as abi;\n+\n pub fn unsupported<T>() -> crate::io::Result<T> {\n     Err(unsupported_err())\n }\n@@ -74,11 +77,7 @@ pub extern \"C\" fn floor(x: f64) -> f64 {\n }\n \n pub unsafe fn abort_internal() -> ! {\n-    extern \"C\" {\n-        fn sys_abort() ->!;\n-    }\n-\n-    sys_abort();\n+    abi::abort();\n }\n \n // FIXME: just a workaround to test the system\n@@ -108,15 +107,14 @@ pub unsafe extern \"C\" fn runtime_entry(argc: i32, argv: *const *const c_char,\n                                        env: *const *const c_char) -> ! {\n     extern \"C\" {\n         fn main(argc: isize, argv: *const *const c_char) -> i32;\n-        fn sys_exit(arg: i32) ->!;\n     }\n \n     // initialize environment\n     os::init_environment(env as *const *const i8);\n \n     let result = main(argc as isize, argv);\n \n-    sys_exit(result);\n+    abi::exit(result);\n }\n \n pub fn decode_error_kind(errno: i32) -> ErrorKind {"}, {"sha": "9414bf8fbbbd4c7411a468e3777dace47d891524", "filename": "src/libstd/sys/hermit/mutex.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fmutex.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -1,17 +1,6 @@\n use crate::ptr;\n use crate::ffi::c_void;\n-\n-extern \"C\" {\n-    fn sys_sem_init(sem: *mut *const c_void, value: u32) -> i32;\n-    fn sys_sem_destroy(sem: *const c_void) -> i32;\n-    fn sys_sem_post(sem: *const c_void) -> i32;\n-    fn sys_sem_trywait(sem: *const c_void) -> i32;\n-    fn sys_sem_timedwait(sem: *const c_void, ms: u32) -> i32;\n-    fn sys_recmutex_init(recmutex: *mut *const c_void) -> i32;\n-    fn sys_recmutex_destroy(recmutex: *const c_void) -> i32;\n-    fn sys_recmutex_lock(recmutex: *const c_void) -> i32;\n-    fn sys_recmutex_unlock(recmutex: *const c_void) -> i32;\n-}\n+use crate::sys::hermit::abi;\n \n pub struct Mutex {\n     inner: *const c_void\n@@ -27,28 +16,28 @@ impl Mutex {\n \n     #[inline]\n     pub unsafe fn init(&mut self) {\n-        let _ = sys_sem_init(&mut self.inner as *mut *const c_void, 1);\n+        let _ = abi::sem_init(&mut self.inner as *mut *const c_void, 1);\n     }\n \n     #[inline]\n     pub unsafe fn lock(&self) {\n-        let _ = sys_sem_timedwait(self.inner, 0);\n+        let _ = abi::sem_timedwait(self.inner, 0);\n     }\n \n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        let _ = sys_sem_post(self.inner);\n+        let _ = abi::sem_post(self.inner);\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        let result = sys_sem_trywait(self.inner);\n+        let result = abi::sem_trywait(self.inner);\n         result == 0\n     }\n \n     #[inline]\n     pub unsafe fn destroy(&self) {\n-        let _ = sys_sem_destroy(self.inner);\n+        let _ = abi::sem_destroy(self.inner);\n     }\n }\n \n@@ -63,12 +52,12 @@ impl ReentrantMutex {\n \n     #[inline]\n     pub unsafe fn init(&mut self) {\n-        let _ = sys_recmutex_init(&mut self.inner as *mut *const c_void);\n+        let _ = abi::recmutex_init(&mut self.inner as *mut *const c_void);\n     }\n \n     #[inline]\n     pub unsafe fn lock(&self) {\n-        let _ = sys_recmutex_lock(self.inner);\n+        let _ = abi::recmutex_lock(self.inner);\n     }\n \n     #[inline]\n@@ -78,11 +67,11 @@ impl ReentrantMutex {\n \n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        let _ = sys_recmutex_unlock(self.inner);\n+        let _ = abi::recmutex_unlock(self.inner);\n     }\n \n     #[inline]\n     pub unsafe fn destroy(&self) {\n-        let _ = sys_recmutex_destroy(self.inner);\n+        let _ = abi::recmutex_destroy(self.inner);\n     }\n }"}, {"sha": "8a25cbcf07b9cc35cfb59bedf7223bd87d77aa45", "filename": "src/libstd/sys/hermit/os.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fos.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -12,11 +12,7 @@ use crate::collections::HashMap;\n use crate::vec;\n use crate::sync::Mutex;\n use crate::sys_common::os_str_bytes::*;\n-\n-extern \"C\" {\n-    fn sys_getpid() -> u32;\n-    fn sys_exit(arg: i32) ->!;\n-}\n+use crate::sys::hermit::abi;\n \n pub fn errno() -> i32 {\n     0\n@@ -167,12 +163,12 @@ pub fn home_dir() -> Option<PathBuf> {\n \n pub fn exit(code: i32) -> ! {\n     unsafe {\n-        sys_exit(code);\n+        abi::exit(code);\n     }\n }\n \n pub fn getpid() -> u32 {\n     unsafe {\n-        sys_getpid()\n+        abi::getpid()\n     }\n }"}, {"sha": "9505f02fda83bd15581c33f3a259162e7b64377b", "filename": "src/libstd/sys/hermit/stdio.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -1,9 +1,6 @@\n use crate::io;\n use crate::io::{IoSlice, IoSliceMut};\n-\n-extern \"C\" {\n-    fn sys_write(fd: i32, buf: *const u8, len: usize) -> isize;\n-}\n+use crate::sys::hermit::abi;\n \n pub struct Stdin;\n pub struct Stdout;\n@@ -35,7 +32,7 @@ impl Stdout {\n         let len;\n \n         unsafe {\n-            len = sys_write(1, data.as_ptr() as *const u8, data.len())\n+            len = abi::write(1, data.as_ptr() as *const u8, data.len())\n         }\n \n         if len < 0 {\n@@ -49,7 +46,7 @@ impl Stdout {\n         let len;\n \n         unsafe {\n-            len = sys_write(1, data.as_ptr() as *const u8, data.len())\n+            len = abi::write(1, data.as_ptr() as *const u8, data.len())\n         }\n \n         if len < 0 {\n@@ -73,7 +70,7 @@ impl Stderr {\n         let len;\n \n         unsafe {\n-            len = sys_write(2, data.as_ptr() as *const u8, data.len())\n+            len = abi::write(2, data.as_ptr() as *const u8, data.len())\n         }\n \n         if len < 0 {\n@@ -87,7 +84,7 @@ impl Stderr {\n         let len;\n \n         unsafe {\n-            len = sys_write(2, data.as_ptr() as *const u8, data.len())\n+            len = abi::write(2, data.as_ptr() as *const u8, data.len())\n         }\n \n         if len < 0 {"}, {"sha": "99a9c830c9e0a0fd3567d0006ca372d5a8f41e95", "filename": "src/libstd/sys/hermit/thread.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -2,14 +2,15 @@\n \n use crate::ffi::CStr;\n use crate::io;\n+use crate::sys::hermit::abi;\n use crate::time::Duration;\n use crate::mem;\n use crate::fmt;\n use core::u32;\n \n use crate::sys_common::thread::*;\n \n-pub type Tid = u32;\n+pub type Tid = abi::Tid;\n \n /// Priority of a task\n #[derive(PartialEq, Eq, PartialOrd, Ord, Debug, Clone, Copy)]\n@@ -33,14 +34,6 @@ impl fmt::Display for Priority {\n \n pub const NORMAL_PRIO: Priority = Priority::from(2);\n \n-extern \"C\" {\n-    fn sys_usleep(usecs: u64);\n-    fn sys_spawn(id: *mut Tid, func: extern \"C\" fn(usize),\n-                 arg: usize, prio: u8, core_id: isize) -> i32;\n-    fn sys_join(id: Tid) -> i32;\n-    fn sys_yield();\n-}\n-\n pub struct Thread {\n     tid: Tid\n }\n@@ -56,7 +49,7 @@ impl Thread {\n     {\n         let p = box p;\n         let mut tid: Tid = u32::MAX;\n-        let ret = sys_spawn(&mut tid as *mut Tid, thread_start,\n+        let ret = abi::spawn(&mut tid as *mut Tid, thread_start,\n                             &*p as *const _ as *const u8 as usize,\n                             Priority::into(NORMAL_PRIO), core_id);\n \n@@ -83,7 +76,7 @@ impl Thread {\n     #[inline]\n     pub fn yield_now() {\n         unsafe {\n-            sys_yield();\n+            abi::yield_now();\n         }\n     }\n \n@@ -95,13 +88,13 @@ impl Thread {\n     #[inline]\n     pub fn sleep(dur: Duration) {\n         unsafe {\n-            sys_usleep(dur.as_micros() as u64);\n+            abi::usleep(dur.as_micros() as u64);\n         }\n     }\n \n     pub fn join(self) {\n         unsafe {\n-            let _ = sys_join(self.tid);\n+            let _ = abi::join(self.tid);\n         }\n     }\n "}, {"sha": "8372189546d074a12e50babd03fd9ff9dacd45be", "filename": "src/libstd/sys/hermit/time.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebd4d9c27bf8fee4f7d664d76c41832745dff43/src%2Flibstd%2Fsys%2Fhermit%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ftime.rs?ref=5ebd4d9c27bf8fee4f7d664d76c41832745dff43", "patch": "@@ -4,21 +4,9 @@ use crate::time::Duration;\n use crate::cmp::Ordering;\n use crate::convert::TryInto;\n use core::hash::{Hash, Hasher};\n-\n-const NSEC_PER_SEC: u64 = 1_000_000_000;\n-const CLOCK_REALTIME: u64 = 1;\n-const CLOCK_MONOTONIC: u64 = 4;\n-\n-extern \"C\" {\n-    fn sys_clock_gettime(clock_id: u64, tp: *mut timespec) -> i32;\n-}\n-\n-#[derive(Copy, Clone, Debug)]\n-#[repr(C)]\n-pub struct timespec {\n-    pub tv_sec: i64,\n-    pub tv_nsec: i64,\n-}\n+use crate::sys::hermit::abi;\n+use crate::sys::hermit::abi::{CLOCK_REALTIME, CLOCK_MONOTONIC, NSEC_PER_SEC};\n+use crate::sys::hermit::abi::timespec;\n \n #[derive(Copy, Clone, Debug)]\n struct Timespec {\n@@ -131,7 +119,7 @@ pub struct Instant {\n impl Instant {\n     pub fn now() -> Instant {\n         let mut time: Timespec = Timespec::zero();\n-        let _ = unsafe { sys_clock_gettime(CLOCK_MONOTONIC, &mut time.t as *mut timespec) };\n+        let _ = unsafe { abi::clock_gettime(CLOCK_MONOTONIC, &mut time.t as *mut timespec) };\n \n         Instant { t: time }\n     }\n@@ -169,7 +157,7 @@ pub const UNIX_EPOCH: SystemTime = SystemTime {\n impl SystemTime {\n     pub fn now() -> SystemTime {\n         let mut time: Timespec = Timespec::zero();\n-        let _ = unsafe { sys_clock_gettime(CLOCK_REALTIME, &mut time.t as *mut timespec) };\n+        let _ = unsafe { abi::clock_gettime(CLOCK_REALTIME, &mut time.t as *mut timespec) };\n \n         SystemTime { t: time }\n     }"}]}