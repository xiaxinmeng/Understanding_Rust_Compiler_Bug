{"sha": "14dff25107cec4473fde8c999256a3484a7ef1d0", "node_id": "C_kwDOAAsO6NoAKDE0ZGZmMjUxMDdjZWM0NDczZmRlOGM5OTkyNTZhMzQ4NGE3ZWYxZDA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-19T20:02:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-19T20:02:26Z"}, "message": "Merge #10812\n\n10812: feat: Format `Fn` traits using parentheses r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8157\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "0a52a5effaba9b9867fe126488da1a10975680ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a52a5effaba9b9867fe126488da1a10975680ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14dff25107cec4473fde8c999256a3484a7ef1d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmALSCRBK7hj4Ov3rIwAAKBkIABdN7ZurOl76n+taTwovbfL0\nge3BsXnFSdcafT5bd1LQWbhHe6N1+Iy+gjJe2m7dtNSp9uqbBRPd+bXHppZI1fY/\n7gNQLHtzejioHNiIl8mfQusGCTB+IadFkJqU31R+2Jns4OcwDmwBrhr+L2FjYJme\nzV2OzWC5HHCP1aASNMNS7j/W5jPYNgUbfCWAeXGSnKcw9zk8e4zTv4L0uSZY+VPU\n6Knf6bQKqnKDaHSztb+eZ+AP1iqiolZm4hGMYRBu1HoteG1QIr08eRESrPDmfSbD\nM8GQp1Hl4kK3QDuuEoQCa3zIBkLuZsmY9AFRuFZY38yuphLcNDKxWElfJpih9AY=\n=y78B\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a52a5effaba9b9867fe126488da1a10975680ef\nparent cf2ddb935e12f4bf57aea76b3caee882e14a7d92\nparent 9f4c26e7802cfd4d19899ff108000e28d2580149\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637352146 +0000\ncommitter GitHub <noreply@github.com> 1637352146 +0000\n\nMerge #10812\n\n10812: feat: Format `Fn` traits using parentheses r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8157\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14dff25107cec4473fde8c999256a3484a7ef1d0", "html_url": "https://github.com/rust-lang/rust/commit/14dff25107cec4473fde8c999256a3484a7ef1d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14dff25107cec4473fde8c999256a3484a7ef1d0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf2ddb935e12f4bf57aea76b3caee882e14a7d92", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2ddb935e12f4bf57aea76b3caee882e14a7d92", "html_url": "https://github.com/rust-lang/rust/commit/cf2ddb935e12f4bf57aea76b3caee882e14a7d92"}, {"sha": "9f4c26e7802cfd4d19899ff108000e28d2580149", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4c26e7802cfd4d19899ff108000e28d2580149", "html_url": "https://github.com/rust-lang/rust/commit/9f4c26e7802cfd4d19899ff108000e28d2580149"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "a54352439ca7f980db82b294109b3d2db924a868", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14dff25107cec4473fde8c999256a3484a7ef1d0/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dff25107cec4473fde8c999256a3484a7ef1d0/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=14dff25107cec4473fde8c999256a3484a7ef1d0", "patch": "@@ -135,6 +135,9 @@ pub struct GenericArgs {\n     pub has_self_type: bool,\n     /// Associated type bindings like in `Iterator<Item = T>`.\n     pub bindings: Vec<AssociatedTypeBinding>,\n+    /// Whether these generic args were desugared from `Trait(Arg) -> Output`\n+    /// parenthesis notation typically used for the `Fn` traits.\n+    pub desugared_from_fn: bool,\n }\n \n /// An associated type binding like in `Iterator<Item = T>`.\n@@ -269,7 +272,12 @@ impl GenericArgs {\n     }\n \n     pub(crate) fn empty() -> GenericArgs {\n-        GenericArgs { args: Vec::new(), has_self_type: false, bindings: Vec::new() }\n+        GenericArgs {\n+            args: Vec::new(),\n+            has_self_type: false,\n+            bindings: Vec::new(),\n+            desugared_from_fn: false,\n+        }\n     }\n }\n "}, {"sha": "b08708bd28acc12903b7a1daf41f821b30a50d2f", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14dff25107cec4473fde8c999256a3484a7ef1d0/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dff25107cec4473fde8c999256a3484a7ef1d0/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=14dff25107cec4473fde8c999256a3484a7ef1d0", "patch": "@@ -193,7 +193,7 @@ pub(super) fn lower_generic_args(\n     if args.is_empty() && bindings.is_empty() {\n         return None;\n     }\n-    Some(GenericArgs { args, has_self_type: false, bindings })\n+    Some(GenericArgs { args, has_self_type: false, bindings, desugared_from_fn: false })\n }\n \n /// Collect `GenericArgs` from the parts of a fn-like path, i.e. `Fn(X, Y)\n@@ -229,5 +229,5 @@ fn lower_generic_args_from_fn_path(\n             bounds: Vec::new(),\n         });\n     }\n-    Some(GenericArgs { args, has_self_type: false, bindings })\n+    Some(GenericArgs { args, has_self_type: false, bindings, desugared_from_fn: true })\n }"}, {"sha": "d1ca50c6909538cb5db9a57b87d47e456e5c502c", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14dff25107cec4473fde8c999256a3484a7ef1d0/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dff25107cec4473fde8c999256a3484a7ef1d0/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=14dff25107cec4473fde8c999256a3484a7ef1d0", "patch": "@@ -1162,6 +1162,16 @@ impl HirDisplay for Path {\n             if let Some(generic_args) = segment.args_and_bindings {\n                 // We should be in type context, so format as `Foo<Bar>` instead of `Foo::<Bar>`.\n                 // Do we actually format expressions?\n+                if generic_args.desugared_from_fn {\n+                    // First argument will be a tuple, which already includes the parentheses.\n+                    generic_args.args[0].hir_fmt(f)?;\n+                    if let Some(ret) = &generic_args.bindings[0].type_ref {\n+                        write!(f, \" -> \")?;\n+                        ret.hir_fmt(f)?;\n+                    }\n+                    return Ok(());\n+                }\n+\n                 write!(f, \"<\")?;\n                 let mut first = true;\n                 for arg in &generic_args.args {"}]}