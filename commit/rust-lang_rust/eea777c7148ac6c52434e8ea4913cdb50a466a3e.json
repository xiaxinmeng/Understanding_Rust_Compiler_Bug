{"sha": "eea777c7148ac6c52434e8ea4913cdb50a466a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYTc3N2M3MTQ4YWM2YzUyNDM0ZThlYTQ5MTNjZGI1MGE0NjZhM2U=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-14T15:30:02Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-14T15:30:43Z"}, "message": "Use chalk_ir::FnSig", "tree": {"sha": "6d60ceca8815b4a39ebe531f951cbc8bcb24f3a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d60ceca8815b4a39ebe531f951cbc8bcb24f3a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eea777c7148ac6c52434e8ea4913cdb50a466a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eea777c7148ac6c52434e8ea4913cdb50a466a3e", "html_url": "https://github.com/rust-lang/rust/commit/eea777c7148ac6c52434e8ea4913cdb50a466a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eea777c7148ac6c52434e8ea4913cdb50a466a3e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3411fe3e84e641aad03abbc22eec33fdc29b15f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3411fe3e84e641aad03abbc22eec33fdc29b15f8", "html_url": "https://github.com/rust-lang/rust/commit/3411fe3e84e641aad03abbc22eec33fdc29b15f8"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "56c6b92d4e00ea70211013c2ed794309ae7ab18e", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=eea777c7148ac6c52434e8ea4913cdb50a466a3e", "patch": "@@ -84,7 +84,10 @@ fn deref_by_trait(\n     let projection = super::traits::ProjectionPredicate {\n         ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, ty.value.kinds.len()))\n             .intern(&Interner),\n-        projection_ty: super::ProjectionTy { associated_ty_id: to_assoc_type_id(target), substitution: parameters },\n+        projection_ty: super::ProjectionTy {\n+            associated_ty_id: to_assoc_type_id(target),\n+            substitution: parameters,\n+        },\n     };\n \n     let obligation = super::Obligation::Projection(projection);"}, {"sha": "55163c963f2aa611ddeac909a39d73f7ce13d160", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=eea777c7148ac6c52434e8ea4913cdb50a466a3e", "patch": "@@ -261,7 +261,7 @@ impl<'a> InferenceContext<'a> {\n                 sig_tys.push(ret_ty.clone());\n                 let sig_ty = TyKind::Function(FnPointer {\n                     num_args: sig_tys.len() - 1,\n-                    sig: FnSig { variadic: false },\n+                    sig: FnSig { abi: (), safety: chalk_ir::Safety::Safe, variadic: false },\n                     substs: Substs(sig_tys.clone().into()),\n                 })\n                 .intern(&Interner);"}, {"sha": "bc7a7369ab74437d513af700c7472bff9e2752e7", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=eea777c7148ac6c52434e8ea4913cdb50a466a3e", "patch": "@@ -46,7 +46,7 @@ pub use lower::{\n };\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n-pub use chalk_ir::{AdtId, BoundVar, DebruijnIndex, Mutability, Scalar, TyVariableKind};\n+pub use chalk_ir::{AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind};\n \n pub use crate::traits::chalk::Interner;\n \n@@ -105,10 +105,7 @@ impl TypeWalk for ProjectionTy {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n-pub struct FnSig {\n-    pub variadic: bool,\n-}\n+pub type FnSig = chalk_ir::FnSig<Interner>;\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct FnPointer {\n@@ -643,7 +640,7 @@ impl Ty {\n     pub fn fn_ptr(sig: CallableSig) -> Self {\n         TyKind::Function(FnPointer {\n             num_args: sig.params().len(),\n-            sig: FnSig { variadic: sig.is_varargs },\n+            sig: FnSig { abi: (), safety: Safety::Safe, variadic: sig.is_varargs },\n             substs: Substs(sig.params_and_return),\n         })\n         .intern(&Interner)\n@@ -945,7 +942,9 @@ impl Ty {\n                 }\n             }\n             TyKind::Alias(AliasTy::Projection(projection_ty)) => {\n-                match from_assoc_type_id(projection_ty.associated_ty_id).lookup(db.upcast()).container\n+                match from_assoc_type_id(projection_ty.associated_ty_id)\n+                    .lookup(db.upcast())\n+                    .container\n                 {\n                     AssocContainerId::TraitId(trait_id) => Some(trait_id),\n                     _ => None,"}, {"sha": "76b2124af952c4538d2d30fff9de7687c1932ee5", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=eea777c7148ac6c52434e8ea4913cdb50a466a3e", "patch": "@@ -8,7 +8,7 @@\n use std::{iter, sync::Arc};\n \n use base_db::CrateId;\n-use chalk_ir::{cast::Cast, Mutability};\n+use chalk_ir::{cast::Cast, Mutability, Safety};\n use hir_def::{\n     adt::StructKind,\n     builtin_type::BuiltinType,\n@@ -181,7 +181,7 @@ impl<'a> TyLoweringContext<'a> {\n                 let substs = Substs(params.iter().map(|tr| self.lower_ty(tr)).collect());\n                 TyKind::Function(FnPointer {\n                     num_args: substs.len() - 1,\n-                    sig: FnSig { variadic: *is_varargs },\n+                    sig: FnSig { abi: (), safety: Safety::Safe, variadic: *is_varargs },\n                     substs,\n                 })\n                 .intern(&Interner)"}, {"sha": "1a6fca611ad474514026f7fc826e0a32930242bb", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea777c7148ac6c52434e8ea4913cdb50a466a3e/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=eea777c7148ac6c52434e8ea4913cdb50a466a3e", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     from_assoc_type_id,\n     primitive::UintTy,\n     traits::{Canonical, Obligation},\n-    AliasTy, CallableDefId, FnPointer, FnSig, GenericPredicate, InEnvironment, OpaqueTy,\n+    AliasTy, CallableDefId, FnPointer, GenericPredicate, InEnvironment, OpaqueTy,\n     ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitRef, Ty,\n };\n \n@@ -27,11 +27,11 @@ impl ToChalk for Ty {\n         match self.0 {\n             TyKind::Ref(m, parameters) => ref_to_chalk(db, m, parameters),\n             TyKind::Array(parameters) => array_to_chalk(db, parameters),\n-            TyKind::Function(FnPointer { sig: FnSig { variadic }, substs, .. }) => {\n+            TyKind::Function(FnPointer { sig, substs, .. }) => {\n                 let substitution = chalk_ir::FnSubst(substs.to_chalk(db).shifted_in(&Interner));\n                 chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                     num_binders: 0,\n-                    sig: chalk_ir::FnSig { abi: (), safety: chalk_ir::Safety::Safe, variadic },\n+                    sig,\n                     substitution,\n                 })\n                 .intern(&Interner)\n@@ -121,7 +121,10 @@ impl ToChalk for Ty {\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n                 let associated_ty = proj.associated_ty_id;\n                 let parameters = from_chalk(db, proj.substitution);\n-                TyKind::Alias(AliasTy::Projection(ProjectionTy { associated_ty_id: associated_ty, substitution: parameters }))\n+                TyKind::Alias(AliasTy::Projection(ProjectionTy {\n+                    associated_ty_id: associated_ty,\n+                    substitution: parameters,\n+                }))\n             }\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(opaque_ty)) => {\n                 let opaque_ty_id = opaque_ty.opaque_ty_id;\n@@ -130,7 +133,7 @@ impl ToChalk for Ty {\n             }\n             chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                 num_binders,\n-                sig: chalk_ir::FnSig { variadic, .. },\n+                sig,\n                 substitution,\n                 ..\n             }) => {\n@@ -139,11 +142,7 @@ impl ToChalk for Ty {\n                     db,\n                     substitution.0.shifted_out(&Interner).expect(\"fn ptr should have no binders\"),\n                 );\n-                TyKind::Function(FnPointer {\n-                    num_args: (substs.len() - 1),\n-                    sig: FnSig { variadic },\n-                    substs,\n-                })\n+                TyKind::Function(FnPointer { num_args: (substs.len() - 1), sig, substs })\n             }\n             chalk_ir::TyKind::BoundVar(idx) => TyKind::BoundVar(idx),\n             chalk_ir::TyKind::InferenceVar(_iv, _kind) => TyKind::Unknown,"}]}