{"sha": "eb084b1818bb220928d1c99e241192f2cd98b069", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDg0YjE4MThiYjIyMDkyOGQxYzk5ZTI0MTE5MmYyY2Q5OGIwNjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-03T00:08:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-03T09:09:30Z"}, "message": "rustdoc: Make static initalizers prettier\n\nPreviously, if an initializer took multiple lines or was just large in general,\nit was pretty poorly rendered [1] [2]. This alters the logic to just link back\nto the source for any multi-line static, with a placeholder of \"[definition]\".\nThis should make reading statics a little easier on the eyes. All single-line\nstatics are still inlined in the documentation.\n\nCloses #13198\n\n[1] - http://static.rust-lang.org/doc/master/sync/mutex/index.html#statics\n[2] - http://static.rust-lang.org/doc/master/std/sync/atomics/index.html#statics", "tree": {"sha": "f517d6f0244e7740e0128bf2146168d8a197b092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f517d6f0244e7740e0128bf2146168d8a197b092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb084b1818bb220928d1c99e241192f2cd98b069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb084b1818bb220928d1c99e241192f2cd98b069", "html_url": "https://github.com/rust-lang/rust/commit/eb084b1818bb220928d1c99e241192f2cd98b069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb084b1818bb220928d1c99e241192f2cd98b069/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a52a2edc76527e3bba92378da633bb1fde3743", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a52a2edc76527e3bba92378da633bb1fde3743", "html_url": "https://github.com/rust-lang/rust/commit/71a52a2edc76527e3bba92378da633bb1fde3743"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "504be2cd8ae958c9eab4c9f1eb97d6267e82eeb3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/eb084b1818bb220928d1c99e241192f2cd98b069/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb084b1818bb220928d1c99e241192f2cd98b069/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=eb084b1818bb220928d1c99e241192f2cd98b069", "patch": "@@ -930,6 +930,23 @@ impl<'a> Item<'a> {\n             clean::ModuleItem(..) => true, _ => false\n         }\n     }\n+\n+    fn link(&self) -> ~str {\n+        let mut path = Vec::new();\n+        clean_srcpath(self.item.source.filename.as_bytes(), |component| {\n+            path.push(component.to_owned());\n+        });\n+        let href = if self.item.source.loline == self.item.source.hiline {\n+            format!(\"{}\", self.item.source.loline)\n+        } else {\n+            format!(\"{}-{}\", self.item.source.loline, self.item.source.hiline)\n+        };\n+        format!(\"{root}src/{krate}/{path}.html\\\\#{href}\",\n+                root = self.cx.root_path,\n+                krate = self.cx.layout.krate,\n+                path = path.connect(\"/\"),\n+                href = href)\n+    }\n }\n \n impl<'a> fmt::Show for Item<'a> {\n@@ -977,23 +994,8 @@ impl<'a> fmt::Show for Item<'a> {\n \n         // Write `src` tag\n         if self.cx.include_sources {\n-            let mut path = Vec::new();\n-            clean_srcpath(self.item.source.filename.as_bytes(), |component| {\n-                path.push(component.to_owned());\n-            });\n-            let href = if self.item.source.loline == self.item.source.hiline {\n-                format!(\"{}\", self.item.source.loline)\n-            } else {\n-                format!(\"{}-{}\", self.item.source.loline, self.item.source.hiline)\n-            };\n-            try!(write!(fmt.buf,\n-                          \"<a class='source' \\\n-                              href='{root}src/{krate}/{path}.html\\\\#{href}'>\\\n-                              [src]</a>\",\n-                          root = self.cx.root_path,\n-                          krate = self.cx.layout.krate,\n-                          path = path.connect(\"/\"),\n-                          href = href));\n+            try!(write!(fmt.buf, \"<a class='source' href='{}'>[src]</a>\",\n+                        self.link()));\n         }\n         try!(write!(fmt.buf, \"</h1>\\n\"));\n \n@@ -1138,16 +1140,19 @@ fn item_module(w: &mut Writer, cx: &Context,\n \n         match myitem.inner {\n             clean::StaticItem(ref s) | clean::ForeignStaticItem(ref s) => {\n-                struct Initializer<'a>(&'a str);\n+                struct Initializer<'a>(&'a str, Item<'a>);\n                 impl<'a> fmt::Show for Initializer<'a> {\n                     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                        let Initializer(s) = *self;\n+                        let Initializer(s, item) = *self;\n                         if s.len() == 0 { return Ok(()); }\n                         try!(write!(f.buf, \"<code> = </code>\"));\n-                        let tag = if s.contains(\"\\n\") { \"pre\" } else { \"code\" };\n-                        try!(write!(f.buf, \"<{tag}>{}</{tag}>\",\n-                                      s.as_slice(), tag=tag));\n-                        Ok(())\n+                        if s.contains(\"\\n\") {\n+                            write!(f.buf,\n+                                   \"<a href='{}'>[definition]</a>\",\n+                                   item.link())\n+                        } else {\n+                            write!(f.buf, \"<code>{}</code>\", s.as_slice())\n+                        }\n                     }\n                 }\n \n@@ -1160,7 +1165,7 @@ fn item_module(w: &mut Writer, cx: &Context,\n                 VisSpace(myitem.visibility),\n                 *myitem.name.get_ref(),\n                 s.type_,\n-                Initializer(s.expr),\n+                Initializer(s.expr, Item { cx: cx, item: myitem }),\n                 Markdown(blank(myitem.doc_value()))));\n             }\n "}]}