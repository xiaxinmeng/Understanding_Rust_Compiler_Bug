{"sha": "9e7858545a2c0427120065431809653e3bb78ce2", "node_id": "C_kwDOAAsO6NoAKDllNzg1ODU0NWEyYzA0MjcxMjAwNjU0MzE4MDk2NTNlM2JiNzhjZTI", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-01-14T22:45:05Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-01-14T22:45:05Z"}, "message": "Add `msrv` config for `map_clone`", "tree": {"sha": "01d7d0c8b479d97bed03e07b97d7783bf85d93f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d7d0c8b479d97bed03e07b97d7783bf85d93f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e7858545a2c0427120065431809653e3bb78ce2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmHh/PEACgkQ/Ny/Ka9k\n1gGyRw//Sy8v47c9eErr21bsat+/uI/90W5o/0Y5tSI0iXboOr91x+ICSSsPBoUf\nyZX5j/v9jyyAPo4xH9Tsvrrft7LQhF7BGiEmd3bs2/iHHfjPdEv5uHF9Txm4p8p/\n9sztJJ82EGW8Ih/7uxf1j5k+S8IE7IvE/jTs5lwXV2TmK6Kdp59p0zit3l6olE/w\nMLUM89AOul0aJiJdzNY+GFXCAMN7KgKNPJ+XUltodUIuAj9NJEjTQPN2AG43kldc\nZuD/mTEZHJeH9m2kg23FEdg0AZqEzlzhElsEYVzTtIgsgkNGvIELKxN372SF6EvC\nAwBU2l1V5gIwZV3JdTn4p20xvG3zGi9g+2f6h0g2TMtmTIXtq2g0snu0neJ1dRCj\nvMzaTDfHVu1lrO56A8uqTmsemDhsOf391/+CYwZauqTiR4H/ybdBwTzf83g4wtXW\nbAKnjo8Hw+dpc3Ea7PYSo71n6FK82S+3xekiTE6nkAPHRqMxbAORrxrmJ1xPK4Ax\ngfjejFPr6Gh8o3tfcBMkuWJLvIXr633N6vZ+lXa3pPANEMhGq2SxIGRfDAMllR0t\nFe6oh4j4t/xdShHK70bamGTgAOJ5eJ3F4+8xqSnzRV1e7pXOlT1GLB5UZLjhQFzO\nAvwaT5yQ2uvHFwVNPRETxHDPUBXc8FcQMCpRKy9mZnbdGt3Veew=\n=DmMh\n-----END PGP SIGNATURE-----", "payload": "tree 01d7d0c8b479d97bed03e07b97d7783bf85d93f9\nparent 5cada57f306ee47ee4e9a78008798d734ff7b9d7\nauthor xFrednet <xFrednet@gmail.com> 1642200305 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1642200305 +0100\n\nAdd `msrv` config for `map_clone`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7858545a2c0427120065431809653e3bb78ce2", "html_url": "https://github.com/rust-lang/rust/commit/9e7858545a2c0427120065431809653e3bb78ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e7858545a2c0427120065431809653e3bb78ce2/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cada57f306ee47ee4e9a78008798d734ff7b9d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cada57f306ee47ee4e9a78008798d734ff7b9d7", "html_url": "https://github.com/rust-lang/rust/commit/5cada57f306ee47ee4e9a78008798d734ff7b9d7"}], "stats": {"total": 85, "additions": 56, "deletions": 29}, "files": [{"sha": "ed25d6fd29757f3376e211dd1756a9a5aa7ed08c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e7858545a2c0427120065431809653e3bb78ce2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e7858545a2c0427120065431809653e3bb78ce2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9e7858545a2c0427120065431809653e3bb78ce2", "patch": "@@ -581,6 +581,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(needless_question_mark::NeedlessQuestionMark));\n     store.register_late_pass(move || Box::new(casts::Casts::new(msrv)));\n     store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv)));\n+    store.register_late_pass(move || Box::new(map_clone::MapClone::new(msrv)));\n \n     store.register_late_pass(|| Box::new(size_of_in_element_count::SizeOfInElementCount));\n     store.register_late_pass(|| Box::new(same_name_method::SameNameMethod));\n@@ -591,7 +592,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             msrv,\n         ))\n     });\n-    store.register_late_pass(|| Box::new(map_clone::MapClone));\n     store.register_late_pass(|| Box::new(map_err_ignore::MapErrIgnore));\n     store.register_late_pass(|| Box::new(shadow::Shadow::default()));\n     store.register_late_pass(|| Box::new(unit_types::UnitTypes));"}, {"sha": "5b203fd3d928cc369d999c99786845f2e87a5279", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9e7858545a2c0427120065431809653e3bb78ce2/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e7858545a2c0427120065431809653e3bb78ce2/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=9e7858545a2c0427120065431809653e3bb78ce2", "patch": "@@ -1,15 +1,16 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item};\n-use clippy_utils::{is_trait_method, peel_blocks};\n+use clippy_utils::{is_trait_method, meets_msrv, msrvs, peel_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::Adjust;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span};\n \n@@ -42,7 +43,17 @@ declare_clippy_lint! {\n     \"using `iterator.map(|x| x.clone())`, or dereferencing closures for `Copy` types\"\n }\n \n-declare_lint_pass!(MapClone => [MAP_CLONE]);\n+pub struct MapClone {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl_lint_pass!(MapClone => [MAP_CLONE]);\n+\n+impl MapClone {\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n \n impl<'tcx> LateLintPass<'tcx> for MapClone {\n     fn check_expr(&mut self, cx: &LateContext<'_>, e: &hir::Expr<'_>) {\n@@ -65,15 +76,15 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n                         hir::BindingAnnotation::Unannotated, .., name, None\n                     ) = inner.kind {\n                         if ident_eq(name, closure_expr) {\n-                            lint(cx, e.span, args[0].span, true);\n+                            self.lint_explicit_closure(cx, e.span, args[0].span, true);\n                         }\n                     },\n                     hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n                         match closure_expr.kind {\n                             hir::ExprKind::Unary(hir::UnOp::Deref, inner) => {\n                                 if ident_eq(name, inner) {\n                                     if let ty::Ref(.., Mutability::Not) = cx.typeck_results().expr_ty(inner).kind() {\n-                                        lint(cx, e.span, args[0].span, true);\n+                                        self.lint_explicit_closure(cx, e.span, args[0].span, true);\n                                     }\n                                 }\n                             },\n@@ -90,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n                                     if let ty::Ref(_, ty, mutability) = obj_ty.kind() {\n                                         if matches!(mutability, Mutability::Not) {\n                                             let copy = is_copy(cx, ty);\n-                                            lint(cx, e.span, args[0].span, copy);\n+                                            self.lint_explicit_closure(cx, e.span, args[0].span, copy);\n                                         }\n                                     } else {\n                                         lint_needless_cloning(cx, e.span, args[0].span);\n@@ -105,6 +116,8 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n fn ident_eq(name: Ident, path: &hir::Expr<'_>) -> bool {\n@@ -127,31 +140,30 @@ fn lint_needless_cloning(cx: &LateContext<'_>, root: Span, receiver: Span) {\n     );\n }\n \n-fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n-    let mut applicability = Applicability::MachineApplicable;\n-    if copied {\n-        span_lint_and_sugg(\n-            cx,\n-            MAP_CLONE,\n-            replace,\n-            \"you are using an explicit closure for copying elements\",\n-            \"consider calling the dedicated `copied` method\",\n-            format!(\n-                \"{}.copied()\",\n-                snippet_with_applicability(cx, root, \"..\", &mut applicability)\n-            ),\n-            applicability,\n-        );\n-    } else {\n+impl MapClone {\n+    fn lint_explicit_closure(&self, cx: &LateContext<'_>, replace: Span, root: Span, is_copy: bool) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        let message = if is_copy {\n+            \"you are using an explicit closure for copying elements\"\n+        } else {\n+            \"you are using an explicit closure for cloning elements\"\n+        };\n+        let sugg_method = if is_copy && meets_msrv(self.msrv.as_ref(), &msrvs::ITERATOR_COPIED) {\n+            \"copied\"\n+        } else {\n+            \"cloned\"\n+        };\n+\n         span_lint_and_sugg(\n             cx,\n             MAP_CLONE,\n             replace,\n-            \"you are using an explicit closure for cloning elements\",\n-            \"consider calling the dedicated `cloned` method\",\n+            message,\n+            &format!(\"consider calling the dedicated `{}` method\", sugg_method),\n             format!(\n-                \"{}.cloned()\",\n-                snippet_with_applicability(cx, root, \"..\", &mut applicability)\n+                \"{}.{}()\",\n+                snippet_with_applicability(cx, root, \"..\", &mut applicability),\n+                sugg_method,\n             ),\n             applicability,\n         );"}, {"sha": "0cc6f5206986347ee5fb1415c40599c5a8147988", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e7858545a2c0427120065431809653e3bb78ce2/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e7858545a2c0427120065431809653e3bb78ce2/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=9e7858545a2c0427120065431809653e3bb78ce2", "patch": "@@ -156,7 +156,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),"}, {"sha": "213252f7b58af91317ea0dfc464235df0942b46e", "filename": "tests/ui-toml/min_rust_version/min_rust_version.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e7858545a2c0427120065431809653e3bb78ce2/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e7858545a2c0427120065431809653e3bb78ce2/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs?ref=9e7858545a2c0427120065431809653e3bb78ce2", "patch": "@@ -68,6 +68,11 @@ fn check_index_refutable_slice() {\n     }\n }\n \n+fn map_clone_suggest_copied() {\n+    // This should still trigger the lint but suggest `cloned()` instead of `copied()`\n+    let _: Option<u64> = Some(&16).map(|b| *b);\n+}\n+\n fn main() {\n     option_as_ref_deref();\n     match_like_matches();"}, {"sha": "f226c012ca85c35fd8878340ab37fe2303318f26", "filename": "tests/ui-toml/min_rust_version/min_rust_version.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e7858545a2c0427120065431809653e3bb78ce2/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e7858545a2c0427120065431809653e3bb78ce2/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.stderr?ref=9e7858545a2c0427120065431809653e3bb78ce2", "patch": "@@ -0,0 +1,10 @@\n+error: you are using an explicit closure for copying elements\n+  --> $DIR/min_rust_version.rs:73:26\n+   |\n+LL |     let _: Option<u64> = Some(&16).map(|b| *b);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `cloned` method: `Some(&16).cloned()`\n+   |\n+   = note: `-D clippy::map-clone` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}