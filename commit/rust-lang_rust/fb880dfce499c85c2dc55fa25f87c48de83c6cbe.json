{"sha": "fb880dfce499c85c2dc55fa25f87c48de83c6cbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiODgwZGZjZTQ5OWM4NWMyZGM1NWZhMjVmODdjNDhkZTgzYzZjYmU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-09-30T17:44:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-30T17:44:47Z"}, "message": "Rollup merge of #36810 - GuillaumeGomez:ops_doc, r=steveklabnik\n\nAdd missing urls for ops module\n\nPart of #29365.\n\nr? @steveklabnik", "tree": {"sha": "b8b058acca12fa730d82681e9d3138f7d928578a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8b058acca12fa730d82681e9d3138f7d928578a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb880dfce499c85c2dc55fa25f87c48de83c6cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb880dfce499c85c2dc55fa25f87c48de83c6cbe", "html_url": "https://github.com/rust-lang/rust/commit/fb880dfce499c85c2dc55fa25f87c48de83c6cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb880dfce499c85c2dc55fa25f87c48de83c6cbe/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083af27779018f6374c6778efac85d654a4b1fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/083af27779018f6374c6778efac85d654a4b1fe6", "html_url": "https://github.com/rust-lang/rust/commit/083af27779018f6374c6778efac85d654a4b1fe6"}, {"sha": "5cec0653992cb102fb13f295fcf6229fe1b770d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cec0653992cb102fb13f295fcf6229fe1b770d4", "html_url": "https://github.com/rust-lang/rust/commit/5cec0653992cb102fb13f295fcf6229fe1b770d4"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "72e951a7c347c1f2c73f76c06d78e880c84472c2", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fb880dfce499c85c2dc55fa25f87c48de83c6cbe/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb880dfce499c85c2dc55fa25f87c48de83c6cbe/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=fb880dfce499c85c2dc55fa25f87c48de83c6cbe", "patch": "@@ -14,7 +14,7 @@\n //!\n //! Some of these traits are imported by the prelude, so they are available in\n //! every Rust program. Only operators backed by traits can be overloaded. For\n-//! example, the addition operator (`+`) can be overloaded through the `Add`\n+//! example, the addition operator (`+`) can be overloaded through the [`Add`]\n //! trait, but since the assignment operator (`=`) has no backing trait, there\n //! is no way of overloading its semantics. Additionally, this module does not\n //! provide any mechanism to create new operators. If traitless overloading or\n@@ -30,17 +30,18 @@\n //! contexts involving built-in types, this is usually not a problem.\n //! However, using these operators in generic code, requires some\n //! attention if values have to be reused as opposed to letting the operators\n-//! consume them. One option is to occasionally use `clone()`.\n+//! consume them. One option is to occasionally use [`clone()`].\n //! Another option is to rely on the types involved providing additional\n //! operator implementations for references. For example, for a user-defined\n //! type `T` which is supposed to support addition, it is probably a good\n-//! idea to have both `T` and `&T` implement the traits `Add<T>` and `Add<&T>`\n-//! so that generic code can be written without unnecessary cloning.\n+//! idea to have both `T` and `&T` implement the traits [`Add<T>`][`Add`] and\n+//! [`Add<&T>`][`Add`] so that generic code can be written without unnecessary\n+//! cloning.\n //!\n //! # Examples\n //!\n-//! This example creates a `Point` struct that implements `Add` and `Sub`, and\n-//! then demonstrates adding and subtracting two `Point`s.\n+//! This example creates a `Point` struct that implements [`Add`] and [`Sub`],\n+//! and then demonstrates adding and subtracting two `Point`s.\n //!\n //! ```rust\n //! use std::ops::{Add, Sub};\n@@ -75,18 +76,14 @@\n //! See the documentation for each trait for an example implementation.\n //!\n //! The [`Fn`], [`FnMut`], and [`FnOnce`] traits are implemented by types that can be\n-//! invoked like functions. Note that `Fn` takes `&self`, `FnMut` takes `&mut\n-//! self` and `FnOnce` takes `self`. These correspond to the three kinds of\n+//! invoked like functions. Note that [`Fn`] takes `&self`, [`FnMut`] takes `&mut\n+//! self` and [`FnOnce`] takes `self`. These correspond to the three kinds of\n //! methods that can be invoked on an instance: call-by-reference,\n //! call-by-mutable-reference, and call-by-value. The most common use of these\n //! traits is to act as bounds to higher-level functions that take functions or\n //! closures as arguments.\n //!\n-//! [`Fn`]: trait.Fn.html\n-//! [`FnMut`]: trait.FnMut.html\n-//! [`FnOnce`]: trait.FnOnce.html\n-//!\n-//! Taking a `Fn` as a parameter:\n+//! Taking a [`Fn`] as a parameter:\n //!\n //! ```rust\n //! fn call_with_one<F>(func: F) -> usize\n@@ -99,7 +96,7 @@\n //! assert_eq!(call_with_one(double), 2);\n //! ```\n //!\n-//! Taking a `FnMut` as a parameter:\n+//! Taking a [`FnMut`] as a parameter:\n //!\n //! ```rust\n //! fn do_twice<F>(mut func: F)\n@@ -118,7 +115,7 @@\n //! assert_eq!(x, 5);\n //! ```\n //!\n-//! Taking a `FnOnce` as a parameter:\n+//! Taking a [`FnOnce`] as a parameter:\n //!\n //! ```rust\n //! fn consume_with_relish<F>(func: F)\n@@ -140,6 +137,13 @@\n //!\n //! // `consume_and_return_x` can no longer be invoked at this point\n //! ```\n+//!\n+//! [`Fn`]: trait.Fn.html\n+//! [`FnMut`]: trait.FnMut.html\n+//! [`FnOnce`]: trait.FnOnce.html\n+//! [`Add`]: trait.Add.html\n+//! [`Sub`]: trait.Sub.html\n+//! [`clone()`]: ../clone/trait.Clone.html#tymethod.clone\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}