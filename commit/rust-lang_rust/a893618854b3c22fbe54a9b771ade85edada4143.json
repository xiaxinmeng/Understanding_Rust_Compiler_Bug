{"sha": "a893618854b3c22fbe54a9b771ade85edada4143", "node_id": "C_kwDOAAsO6NoAKGE4OTM2MTg4NTRiM2MyMmZiZTU0YTliNzcxYWRlODVlZGFkYTQxNDM", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-29T21:37:54Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-29T22:51:01Z"}, "message": "Implement llvm.x86.addcarry.64", "tree": {"sha": "2ffb7b8afdcaa4b85b3acbaaceea3fe76a1d1abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ffb7b8afdcaa4b85b3acbaaceea3fe76a1d1abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a893618854b3c22fbe54a9b771ade85edada4143", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmJsa9UACgkQ+boUO5X/\nbYJYIBAAuBr9MV08SaddQ6Ea6P6n/L7WiJAM+dPn1xr5j6vqHKE9Lec63etzrkyw\nGGRpo0O6Spw/rH5l0aeS0fB6yLMHkSB0+Iwz2/++V2wuw1WoUm6xmoD2eelKtZ9N\nVyYjL9PjPNJHdatNBhW6kRg7BKVBsMevehGE+JwVna8TaPpJDiyO7YsA+lALRNOr\nbF7WKDVWc0YDobVpNzwuG2tHmDC/gKCtjYLa1oC7FoQ8tHMOhmhp6DPy3Z+EArYV\n7JE2gg3Ij0au4no/f1xNEOHgKyacCtdpxPi/NY4sZj6qTGMNCk0VbfSPWkHxNNxj\ng81LYS0puJDlUzHp3/pbYGMmDGM28U6DIS4h/UgcRJnV22BHyIMQ1Dn91tfGwgDG\nOmtWHoRnAEa+OXT7tJEjkJuQ1sPbK4UqMudAjsLjnBOtPn1+0f64mGExs1lhhjId\nrV0bMBfMBO7Le3y/0pA19hsx8f0Zo4bwb9KfYvVD7z53aGBq1oyaHqhpuF9+Av2V\njl0Jacm4QI+iYspzKkWWY/J08Su89jEMJByrZQeRWtAuWDVHh2GGo9AKAFcftSvv\n6J6dyraQotdo7WUwBelaFVeJYmRAK090PrnEHyjr/Lm/eD9PMUZZOO7IM4Jkp/WW\ncpJQ7nYp+uGP1uYGIwJVbUv63DkWDlNCd6TmDYerGwRV6iplm0c=\n=0/Gk\n-----END PGP SIGNATURE-----", "payload": "tree 2ffb7b8afdcaa4b85b3acbaaceea3fe76a1d1abf\nparent a71a0083937671d79e16bfac4c7b8cab9c8ab9bb\nauthor David Tolnay <dtolnay@gmail.com> 1651268274 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1651272661 -0700\n\nImplement llvm.x86.addcarry.64\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a893618854b3c22fbe54a9b771ade85edada4143", "html_url": "https://github.com/rust-lang/rust/commit/a893618854b3c22fbe54a9b771ade85edada4143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a893618854b3c22fbe54a9b771ade85edada4143/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a71a0083937671d79e16bfac4c7b8cab9c8ab9bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a71a0083937671d79e16bfac4c7b8cab9c8ab9bb", "html_url": "https://github.com/rust-lang/rust/commit/a71a0083937671d79e16bfac4c7b8cab9c8ab9bb"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "807fca817016907eabc35e674bee22ce0bf3e051", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a893618854b3c22fbe54a9b771ade85edada4143/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a893618854b3c22fbe54a9b771ade85edada4143/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=a893618854b3c22fbe54a9b771ade85edada4143", "patch": "@@ -671,6 +671,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Architecture-specific shims\n+            \"llvm.x86.addcarry.64\" if this.tcx.sess.target.arch == \"x86_64\" => {\n+                // Computes u8+u64+u64, returning tuple (u8,u64) comprising the output carry and truncated sum.\n+                let &[ref c_in, ref a, ref b] = this.check_shim(abi, Abi::Unadjusted, link_name, args)?;\n+                let c_in = this.read_scalar(c_in)?.to_u8()?;\n+                let a = this.read_scalar(a)?.to_u64()?;\n+                let b = this.read_scalar(b)?.to_u64()?;\n+\n+                let wide_sum = c_in as u128 + a as u128 + b as u128;\n+                let (c_out, sum) = ((wide_sum >> 64) as u8, wide_sum as u64);\n+\n+                let c_out_field = this.place_field(dest, 0)?;\n+                this.write_scalar(Scalar::from_u8(c_out), &c_out_field)?;\n+                let sum_field = this.place_field(dest, 1)?;\n+                this.write_scalar(Scalar::from_u64(sum), &sum_field)?;\n+            }\n             \"llvm.x86.sse2.pause\" if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" => {\n                 let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.yield_active_thread();"}, {"sha": "88cd782e70a467fad604b5f9c421f7bcee3e1036", "filename": "tests/run-pass/intrinsics-x86.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a893618854b3c22fbe54a9b771ade85edada4143/tests%2Frun-pass%2Fintrinsics-x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a893618854b3c22fbe54a9b771ade85edada4143/tests%2Frun-pass%2Fintrinsics-x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-x86.rs?ref=a893618854b3c22fbe54a9b771ade85edada4143", "patch": "@@ -0,0 +1,22 @@\n+#[cfg(target_arch = \"x86_64\")]\n+mod x86_64 {\n+    use core::arch::x86_64 as arch;\n+\n+    fn adc(c_in: u8, a: u64, b: u64) -> (u8, u64) {\n+        let mut sum = 0;\n+        // SAFETY: There are no safety requirements for calling `_addcarry_u64`.\n+        // It's just unsafe for API consistency with other intrinsics.\n+        let c_out = unsafe { arch::_addcarry_u64(c_in, a, b, &mut sum) };\n+        (c_out, sum)\n+    }\n+\n+    pub fn main() {\n+        assert_eq!(adc(1, 1, 1), (0, 3));\n+        assert_eq!(adc(3, u64::MAX, u64::MAX), (2, 1));\n+    }\n+}\n+\n+fn main() {\n+    #[cfg(target_arch = \"x86_64\")]\n+    x86_64::main();\n+}"}]}