{"sha": "06112abd5f170e9f1ee06e212acb31976d6bb7c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTEyYWJkNWYxNzBlOWYxZWUwNmUyMTJhY2IzMTk3NmQ2YmI3YzQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-15T08:55:26Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-15T10:49:30Z"}, "message": "Rollup merge of #47120 - clarcharr:io_error_debug, r=dtolnay\n\nBetter Debug impl for io::Error.\n\nThis PR includes the below changes:\n\n1. The former impl wrapped the entire thing in `Error { repr: ... }` which was unhelpful; this has been removed.\n2. The `Os` variant of `io::Error` included the code and message, but not the kind; this has been fixed.\n3. The `Custom` variant of `io::Error` included a `Custom(Custom { ... })`, which is now just `Custom { ... }`.\n\nExample of previous impl:\n\n```rust\nError {\n    repr: Custom(\n        Custom {\n            kind: InvalidData,\n            error: Error {\n                repr: Os {\n                    code: 2,\n                    message: \"no such file or directory\"\n                }\n            }\n        }\n    )\n}\n```\n\nExample of new impl:\n\n```rust\nCustom {\n    kind: InvalidData,\n    error: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"no such file or directory\"\n    }\n}\n```", "tree": {"sha": "b006301a0822089bcaf9d718c6af54058fa00f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b006301a0822089bcaf9d718c6af54058fa00f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06112abd5f170e9f1ee06e212acb31976d6bb7c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpchzoACgkQ/vbIBR0O\nATzx0g//ZbmG1t911vu0/eG/fHnrQWpY3q5JVPvnPdWm5YI+Lrx1EnlXSCZSzgej\nAji8wzQFE4oY90jCXyAqQKe6nyaizSRjSAKoFUOXqQ1deF95bL/APW9eeraYirJx\nAxhj8343zKWubi6OmPQVwlXHhPnBfvf58epYeholeNFQPeHqP82GcDfJNMfK8NOX\nNUY+Viv4OxMFyEXVGSrJfjB7JGc4stSx9S3vyCHpjnD4BeLBMquBTwoCW5NI96EI\n44fh3TrDOs/NXsioqKO+6Xmw4fqvhbTOY55KlOIMTpt37fOSCYPhNg8uzUVgnT2I\nLcfpLrr2/t/+ec/9314B0mWM68YP33lUjDPKrfdYl2MWySENAFOXJ1Hq19rE/klo\nxs5XjcggnH/uncCchc0IKu1w9crROkwIP9QfbRvZtjGIkuwr4PYjD7DAlNpwLsCF\nc9KX/OQqaaa9ZWvZ4k/WuLvuq5mOGicVcceA5bRprc35WzOUpkNn6ulhczcYly6X\nP1qtTiswcGOtu6zC5+I3XTgfJo/NS4HvIuvlygWzcBjhP/KV94aUI0BW9oNJu0KF\nvUqJ4AABhXmk3nUP9yECL7otg5saCMrRZsEoBgHZL2xpQI8z5evdQhD/o+0/aFA3\n8gYZKXhJKE58pHXDGzd/xIHQeocAaC1FC2y75bO/Qdf7x4/cqEM=\n=Jxb1\n-----END PGP SIGNATURE-----", "payload": "tree b006301a0822089bcaf9d718c6af54058fa00f3c\nparent 8ff449d505728276e822ca9a80c1e7b2da8288a2\nparent 52e074e40ee3eaf04415b2044c93bcfddad52f35\nauthor kennytm <kennytm@gmail.com> 1516006526 +0800\ncommitter kennytm <kennytm@gmail.com> 1516013370 +0800\n\nRollup merge of #47120 - clarcharr:io_error_debug, r=dtolnay\n\nBetter Debug impl for io::Error.\n\nThis PR includes the below changes:\n\n1. The former impl wrapped the entire thing in `Error { repr: ... }` which was unhelpful; this has been removed.\n2. The `Os` variant of `io::Error` included the code and message, but not the kind; this has been fixed.\n3. The `Custom` variant of `io::Error` included a `Custom(Custom { ... })`, which is now just `Custom { ... }`.\n\nExample of previous impl:\n\n```rust\nError {\n    repr: Custom(\n        Custom {\n            kind: InvalidData,\n            error: Error {\n                repr: Os {\n                    code: 2,\n                    message: \"no such file or directory\"\n                }\n            }\n        }\n    )\n}\n```\n\nExample of new impl:\n\n```rust\nCustom {\n    kind: InvalidData,\n    error: Os {\n        code: 2,\n        kind: NotFound,\n        message: \"no such file or directory\"\n    }\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06112abd5f170e9f1ee06e212acb31976d6bb7c4", "html_url": "https://github.com/rust-lang/rust/commit/06112abd5f170e9f1ee06e212acb31976d6bb7c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06112abd5f170e9f1ee06e212acb31976d6bb7c4/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff449d505728276e822ca9a80c1e7b2da8288a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff449d505728276e822ca9a80c1e7b2da8288a2", "html_url": "https://github.com/rust-lang/rust/commit/8ff449d505728276e822ca9a80c1e7b2da8288a2"}, {"sha": "52e074e40ee3eaf04415b2044c93bcfddad52f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e074e40ee3eaf04415b2044c93bcfddad52f35", "html_url": "https://github.com/rust-lang/rust/commit/52e074e40ee3eaf04415b2044c93bcfddad52f35"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "f0b41f30251e09d10209422ea9cd23eb139588ad", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/06112abd5f170e9f1ee06e212acb31976d6bb7c4/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06112abd5f170e9f1ee06e212acb31976d6bb7c4/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=06112abd5f170e9f1ee06e212acb31976d6bb7c4", "patch": "@@ -62,12 +62,18 @@ pub type Result<T> = result::Result<T, Error>;\n /// [`Write`]: ../io/trait.Write.html\n /// [`Seek`]: ../io/trait.Seek.html\n /// [`ErrorKind`]: enum.ErrorKind.html\n-#[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Error {\n     repr: Repr,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl fmt::Debug for Error {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&self.repr, f)\n+    }\n+}\n+\n enum Repr {\n     Os(i32),\n     Simple(ErrorKind),\n@@ -511,10 +517,12 @@ impl Error {\n impl fmt::Debug for Repr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            Repr::Os(ref code) =>\n-                fmt.debug_struct(\"Os\").field(\"code\", code)\n-                   .field(\"message\", &sys::os::error_string(*code)).finish(),\n-            Repr::Custom(ref c) => fmt.debug_tuple(\"Custom\").field(c).finish(),\n+            Repr::Os(code) =>\n+                fmt.debug_struct(\"Os\")\n+                    .field(\"code\", &code)\n+                    .field(\"kind\", &sys::decode_error_kind(code))\n+                    .field(\"message\", &sys::os::error_string(code)).finish(),\n+            Repr::Custom(ref c) => fmt::Debug::fmt(&c, fmt),\n             Repr::Simple(kind) => fmt.debug_tuple(\"Kind\").field(&kind).finish(),\n         }\n     }\n@@ -559,17 +567,36 @@ fn _assert_error_is_sync_send() {\n \n #[cfg(test)]\n mod test {\n-    use super::{Error, ErrorKind};\n+    use super::{Error, ErrorKind, Repr, Custom};\n     use error;\n     use fmt;\n     use sys::os::error_string;\n+    use sys::decode_error_kind;\n \n     #[test]\n     fn test_debug_error() {\n         let code = 6;\n         let msg = error_string(code);\n-        let err = Error { repr: super::Repr::Os(code) };\n-        let expected = format!(\"Error {{ repr: Os {{ code: {:?}, message: {:?} }} }}\", code, msg);\n+        let kind = decode_error_kind(code);\n+        let err = Error {\n+            repr: Repr::Custom(box Custom {\n+                kind: ErrorKind::InvalidInput,\n+                error: box Error {\n+                    repr: super::Repr::Os(code)\n+                },\n+            })\n+        };\n+        let expected = format!(\n+            \"Custom {{ \\\n+                kind: InvalidInput, \\\n+                error: Os {{ \\\n+                    code: {:?}, \\\n+                    kind: {:?}, \\\n+                    message: {:?} \\\n+                }} \\\n+            }}\",\n+            code, kind, msg\n+        );\n         assert_eq!(format!(\"{:?}\", err), expected);\n     }\n "}]}