{"sha": "d18b344afba6ab301bef297c161265e1aa6be79e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOGIzNDRhZmJhNmFiMzAxYmVmMjk3YzE2MTI2NWUxYWE2YmU3OWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-25T08:19:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:51:28Z"}, "message": "Move resolve arenas/crate loader outside of the core of phase_2_configure_and_expand", "tree": {"sha": "58155d833c997c7fa221a3486e81d5e6f93d0f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58155d833c997c7fa221a3486e81d5e6f93d0f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d18b344afba6ab301bef297c161265e1aa6be79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d18b344afba6ab301bef297c161265e1aa6be79e", "html_url": "https://github.com/rust-lang/rust/commit/d18b344afba6ab301bef297c161265e1aa6be79e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d18b344afba6ab301bef297c161265e1aa6be79e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5", "html_url": "https://github.com/rust-lang/rust/commit/f7a8a97b6997fc6a8a5a22a9d1c45d93869a0cb5"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "90ab8a1951f129e5b6cae02b9e1dec7af7f5c529", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d18b344afba6ab301bef297c161265e1aa6be79e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18b344afba6ab301bef297c161265e1aa6be79e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d18b344afba6ab301bef297c161265e1aa6be79e", "patch": "@@ -28,7 +28,7 @@ use rustc::util::common::{ErrorReported, time};\n use rustc_allocator as allocator;\n use rustc_borrowck as borrowck;\n use rustc_incremental;\n-use rustc_resolve::{MakeGlobMap, Resolver};\n+use rustc_resolve::{MakeGlobMap, Resolver, ResolverArenas};\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n use rustc_trans_utils::trans_crate::TransCrate;\n@@ -139,6 +139,14 @@ pub fn compile_input(trans: Box<TransCrate>,\n \n         let crate_name =\n             ::rustc_trans_utils::link::find_crate_name(Some(sess), &krate.attrs, input);\n+\n+        // Currently, we ignore the name resolution data structures for the purposes of dependency\n+        // tracking. Instead we will run name resolution and include its output in the hash of each\n+        // item, much like we do for macro expansion. In other words, the hash reflects not just\n+        // its contents but the results of name resolution on those contents. Hopefully we'll push\n+        // this back at some point.\n+        let mut crate_loader = CrateLoader::new(sess, &cstore, &crate_name);\n+        let resolver_arenas = Resolver::arenas();\n         let ExpansionResult { expanded_crate, defs, analysis, resolutions, mut hir_forest } = {\n             phase_2_configure_and_expand(\n                 sess,\n@@ -148,6 +156,8 @@ pub fn compile_input(trans: Box<TransCrate>,\n                 &crate_name,\n                 addl_plugins,\n                 control.make_glob_map,\n+                &resolver_arenas,\n+                &mut crate_loader,\n                 |expanded_crate| {\n                     let mut state = CompileState::state_after_expand(\n                         input, sess, outdir, output, &cstore, expanded_crate, &crate_name,\n@@ -569,13 +579,15 @@ pub struct ExpansionResult {\n /// standard library and prelude, and name resolution.\n ///\n /// Returns `None` if we're aborting after handling -W help.\n-pub fn phase_2_configure_and_expand<F>(sess: &Session,\n-                                       cstore: &CStore,\n+pub fn phase_2_configure_and_expand<'a, F>(sess: &'a Session,\n+                                       cstore: &'a CStore,\n                                        krate: ast::Crate,\n                                        registry: Option<Registry>,\n                                        crate_name: &str,\n                                        addl_plugins: Option<Vec<String>>,\n                                        make_glob_map: MakeGlobMap,\n+                                       resolver_arenas: &'a ResolverArenas<'a>,\n+                                       crate_loader: &'a mut CrateLoader,\n                                        after_expand: F)\n                                        -> Result<ExpansionResult, CompileIncomplete>\n     where F: FnOnce(&ast::Crate) -> CompileResult,\n@@ -666,19 +678,12 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         return Err(CompileIncomplete::Stopped);\n     }\n \n-    // Currently, we ignore the name resolution data structures for the purposes of dependency\n-    // tracking. Instead we will run name resolution and include its output in the hash of each\n-    // item, much like we do for macro expansion. In other words, the hash reflects not just\n-    // its contents but the results of name resolution on those contents. Hopefully we'll push\n-    // this back at some point.\n-    let mut crate_loader = CrateLoader::new(sess, &cstore, crate_name);\n-    let resolver_arenas = Resolver::arenas();\n     let mut resolver = Resolver::new(sess,\n                                      cstore,\n                                      &krate,\n                                      crate_name,\n                                      make_glob_map,\n-                                     &mut crate_loader,\n+                                     crate_loader,\n                                      &resolver_arenas);\n     resolver.whitelisted_legacy_custom_derives = whitelisted_legacy_custom_derives;\n     syntax_ext::register_builtins(&mut resolver, syntax_exts, sess.features.borrow().quote);"}, {"sha": "b849c433ec396ab7a7d109baa6ed0ced4d121be4", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d18b344afba6ab301bef297c161265e1aa6be79e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18b344afba6ab301bef297c161265e1aa6be79e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d18b344afba6ab301bef297c161265e1aa6be79e", "patch": "@@ -223,6 +223,7 @@ pub fn run_core(search_paths: SearchPaths,\n                                                   resolve::MakeGlobMap::No,\n                                                   &mut crate_loader,\n                                                   &resolver_arenas);\n+        resolver.resolve_imports();\n         resolver.resolve_crate(&expanded_crate);\n \n         let ctxt = DocContext {"}]}