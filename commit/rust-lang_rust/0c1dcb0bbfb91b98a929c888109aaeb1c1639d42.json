{"sha": "0c1dcb0bbfb91b98a929c888109aaeb1c1639d42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMWRjYjBiYmZiOTFiOThhOTI5Yzg4ODEwOWFhZWIxYzE2MzlkNDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-14T18:01:47Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-14T18:01:47Z"}, "message": "Pre-allocate vec for rlib metadata reading\n\nReduces the time spent during the copy from ~9% to ~1% for helloworld\n\ncc #878", "tree": {"sha": "93deab03a7e8fdc5ecf6e3bba732a253dc047748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93deab03a7e8fdc5ecf6e3bba732a253dc047748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c1dcb0bbfb91b98a929c888109aaeb1c1639d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1dcb0bbfb91b98a929c888109aaeb1c1639d42", "html_url": "https://github.com/rust-lang/rust/commit/0c1dcb0bbfb91b98a929c888109aaeb1c1639d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c1dcb0bbfb91b98a929c888109aaeb1c1639d42/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe0e2ae66dac3da90e5f2f51b2c1430f5c82e434", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0e2ae66dac3da90e5f2f51b2c1430f5c82e434", "html_url": "https://github.com/rust-lang/rust/commit/fe0e2ae66dac3da90e5f2f51b2c1430f5c82e434"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "c1f2534111ead243b0e3c2ab41a98e8f5f4cb5eb", "filename": "src/metadata.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c1dcb0bbfb91b98a929c888109aaeb1c1639d42/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c1dcb0bbfb91b98a929c888109aaeb1c1639d42/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=0c1dcb0bbfb91b98a929c888109aaeb1c1639d42", "patch": "@@ -1,3 +1,4 @@\n+use std::convert::TryFrom;\n use std::fs::File;\n use std::path::Path;\n \n@@ -24,7 +25,10 @@ impl MetadataLoader for CraneliftMetadataLoader {\n         while let Some(entry_result) = archive.next_entry() {\n             let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n             if entry.header().identifier() == METADATA_FILENAME.as_bytes() {\n-                let mut buf = Vec::new();\n+                let mut buf = Vec::with_capacity(\n+                    usize::try_from(entry.header().size())\n+                        .expect(\"Rlib metadata file too big to load into memory.\")\n+                );\n                 ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n                 let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n                 return Ok(rustc_erase_owner!(buf.map_owner_box()));"}]}