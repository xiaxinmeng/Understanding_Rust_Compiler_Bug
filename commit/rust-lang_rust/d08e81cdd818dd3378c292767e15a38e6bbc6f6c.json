{"sha": "d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOGU4MWNkZDgxOGRkMzM3OGMyOTI3NjdlMTVhMzhlNmJiYzZmNmM=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-01-19T14:02:50Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-01-19T14:02:50Z"}, "message": "refactor completions to use TextEdit instead of InsertText", "tree": {"sha": "e07b3363f21912ca7aaca4ae1dce482c0bcd6f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e07b3363f21912ca7aaca4ae1dce482c0bcd6f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "html_url": "https://github.com/rust-lang/rust/commit/d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "html_url": "https://github.com/rust-lang/rust/commit/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca"}], "stats": {"total": 2633, "additions": 2320, "deletions": 313}, "files": [{"sha": "855f5d9640fba99e7d7592bb9d1275ebcae1acc8", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     },\n };\n \n-pub use crate::completion::completion_item::{CompletionItem, InsertText, CompletionItemKind};\n+pub use crate::completion::completion_item::{CompletionItem, CompletionItemKind, InsertTextFormat};\n \n /// Main entry point for completion. We run completion as a two-phase process.\n ///\n@@ -60,15 +60,3 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n \n     Some(acc)\n }\n-\n-#[cfg(test)]\n-fn check_completion(code: &str, expected_completions: &str, kind: CompletionKind) {\n-    use crate::mock_analysis::{single_file_with_position, analysis_and_position};\n-    let (analysis, position) = if code.contains(\"//-\") {\n-        analysis_and_position(code)\n-    } else {\n-        single_file_with_position(code)\n-    };\n-    let completions = completions(&analysis.db, position).unwrap();\n-    completions.assert_match(expected_completions, kind);\n-}"}, {"sha": "aaf739500a97bc697ce53c01659a69a90fad00ce", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -1,6 +1,7 @@\n use hir::{Ty, Def};\n \n-use crate::completion::{CompletionContext, Completions, CompletionKind, CompletionItem, CompletionItemKind};\n+use crate::completion::{CompletionContext, Completions, CompletionItem, CompletionItemKind};\n+use crate::completion::completion_item::CompletionKind;\n \n /// Complete dot accesses, i.e. fields or methods (currently only fields).\n pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -30,6 +31,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n                         for field in s.fields(ctx.db) {\n                             CompletionItem::new(\n                                 CompletionKind::Reference,\n+                                ctx,\n                                 field.name().to_string(),\n                             )\n                             .kind(CompletionItemKind::Field)\n@@ -43,7 +45,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n             }\n             Ty::Tuple(fields) => {\n                 for (i, _ty) in fields.iter().enumerate() {\n-                    CompletionItem::new(CompletionKind::Reference, i.to_string())\n+                    CompletionItem::new(CompletionKind::Reference, ctx, i.to_string())\n                         .kind(CompletionItemKind::Field)\n                         .add_to(acc);\n                 }\n@@ -57,7 +59,7 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty\n     receiver.iterate_methods(ctx.db, |func| {\n         let sig = func.signature(ctx.db);\n         if sig.has_self_param() {\n-            CompletionItem::new(CompletionKind::Reference, sig.name().to_string())\n+            CompletionItem::new(CompletionKind::Reference, ctx, sig.name().to_string())\n                 .from_function(ctx, func)\n                 .kind(CompletionItemKind::Method)\n                 .add_to(acc);\n@@ -69,27 +71,29 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty\n #[cfg(test)]\n mod tests {\n     use crate::completion::*;\n+    use crate::completion::completion_item::check_completion;\n \n-    fn check_ref_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Reference);\n+    fn check_ref_completion(name: &str, code: &str) {\n+        check_completion(name, code, CompletionKind::Reference);\n     }\n \n     #[test]\n     fn test_struct_field_completion() {\n         check_ref_completion(\n+            \"struct_field_completion\",\n             r\"\n             struct A { the_field: u32 }\n             fn foo(a: A) {\n                a.<|>\n             }\n             \",\n-            r#\"the_field \"u32\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_struct_field_completion_self() {\n         check_ref_completion(\n+            \"struct_field_completion_self\",\n             r\"\n             struct A { the_field: (u32,) }\n             impl A {\n@@ -98,14 +102,13 @@ mod tests {\n                 }\n             }\n             \",\n-            r#\"the_field \"(u32,)\"\n-               foo \"foo($0)\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_struct_field_completion_autoderef() {\n         check_ref_completion(\n+            \"struct_field_completion_autoderef\",\n             r\"\n             struct A { the_field: (u32, i32) }\n             impl A {\n@@ -114,27 +117,26 @@ mod tests {\n                 }\n             }\n             \",\n-            r#\"the_field \"(u32, i32)\"\n-               foo \"foo($0)\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_no_struct_field_completion_for_method_call() {\n         check_ref_completion(\n+            \"no_struct_field_completion_for_method_call\",\n             r\"\n             struct A { the_field: u32 }\n             fn foo(a: A) {\n                a.<|>()\n             }\n             \",\n-            r#\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_method_completion() {\n         check_ref_completion(\n+            \"method_completion\",\n             r\"\n             struct A {}\n             impl A {\n@@ -144,13 +146,13 @@ mod tests {\n                a.<|>\n             }\n             \",\n-            r#\"the_method \"the_method($0)\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_no_non_self_method() {\n         check_ref_completion(\n+            \"no_non_self_method\",\n             r\"\n             struct A {}\n             impl A {\n@@ -160,7 +162,6 @@ mod tests {\n                a.<|>\n             }\n             \",\n-            r#\"\"#,\n         );\n     }\n }"}, {"sha": "e3d1470c2b5fd2ba39c7a03a01c2a92a8c0601a5", "filename": "crates/ra_ide_api/src/completion/complete_fn_param.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -34,7 +34,7 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n             }\n         })\n         .for_each(|(label, lookup)| {\n-            CompletionItem::new(CompletionKind::Magic, label)\n+            CompletionItem::new(CompletionKind::Magic, ctx, label)\n                 .lookup_by(lookup)\n                 .add_to(acc)\n         });\n@@ -56,38 +56,40 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n #[cfg(test)]\n mod tests {\n     use crate::completion::*;\n+    use crate::completion::completion_item::check_completion;\n \n-    fn check_magic_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Magic);\n+    fn check_magic_completion(name: &str, code: &str) {\n+        check_completion(name, code, CompletionKind::Magic);\n     }\n \n     #[test]\n     fn test_param_completion_last_param() {\n         check_magic_completion(\n+            \"param_completion_last_param\",\n             r\"\n             fn foo(file_id: FileId) {}\n             fn bar(file_id: FileId) {}\n             fn baz(file<|>) {}\n             \",\n-            r#\"file_id \"file_id: FileId\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_param_completion_nth_param() {\n         check_magic_completion(\n+            \"param_completion_nth_param\",\n             r\"\n             fn foo(file_id: FileId) {}\n             fn bar(file_id: FileId) {}\n             fn baz(file<|>, x: i32) {}\n             \",\n-            r#\"file_id \"file_id: FileId\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_param_completion_trait_param() {\n         check_magic_completion(\n+            \"param_completion_trait_param\",\n             r\"\n             pub(crate) trait SourceRoot {\n                 pub fn contains(&self, file_id: FileId) -> bool;\n@@ -96,7 +98,6 @@ mod tests {\n                 pub fn syntax(&self, file<|>)\n             }\n             \",\n-            r#\"file_id \"file_id: FileId\"\"#,\n         );\n     }\n }"}, {"sha": "3fbf3631317becfffa43717c52ad50846190e929", "filename": "crates/ra_ide_api/src/completion/complete_keyword.rs", "status": "modified", "additions": 46, "deletions": 118, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -11,36 +11,33 @@ pub(super) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n     // complete keyword \"crate\" in use stmt\n     match (ctx.use_item_syntax.as_ref(), ctx.path_prefix.as_ref()) {\n         (Some(_), None) => {\n-            CompletionItem::new(CompletionKind::Keyword, \"crate\")\n+            CompletionItem::new(CompletionKind::Keyword, ctx, \"crate\")\n                 .kind(CompletionItemKind::Keyword)\n-                .lookup_by(\"crate\")\n-                .snippet(\"crate::\")\n+                .insert_text(\"crate::\")\n                 .add_to(acc);\n-            CompletionItem::new(CompletionKind::Keyword, \"self\")\n+            CompletionItem::new(CompletionKind::Keyword, ctx, \"self\")\n                 .kind(CompletionItemKind::Keyword)\n-                .lookup_by(\"self\")\n                 .add_to(acc);\n-            CompletionItem::new(CompletionKind::Keyword, \"super\")\n+            CompletionItem::new(CompletionKind::Keyword, ctx, \"super\")\n                 .kind(CompletionItemKind::Keyword)\n-                .lookup_by(\"super\")\n+                .insert_text(\"super::\")\n                 .add_to(acc);\n         }\n         (Some(_), Some(_)) => {\n-            CompletionItem::new(CompletionKind::Keyword, \"self\")\n+            CompletionItem::new(CompletionKind::Keyword, ctx, \"self\")\n                 .kind(CompletionItemKind::Keyword)\n-                .lookup_by(\"self\")\n                 .add_to(acc);\n-            CompletionItem::new(CompletionKind::Keyword, \"super\")\n+            CompletionItem::new(CompletionKind::Keyword, ctx, \"super\")\n                 .kind(CompletionItemKind::Keyword)\n-                .lookup_by(\"super\")\n+                .insert_text(\"super::\")\n                 .add_to(acc);\n         }\n         _ => {}\n     }\n }\n \n-fn keyword(kw: &str, snippet: &str) -> CompletionItem {\n-    CompletionItem::new(CompletionKind::Keyword, kw)\n+fn keyword(ctx: &CompletionContext, kw: &str, snippet: &str) -> CompletionItem {\n+    CompletionItem::new(CompletionKind::Keyword, ctx, kw)\n         .kind(CompletionItemKind::Keyword)\n         .snippet(snippet)\n         .build()\n@@ -55,25 +52,25 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         Some(it) => it,\n         None => return,\n     };\n-    acc.add(keyword(\"if\", \"if $0 {}\"));\n-    acc.add(keyword(\"match\", \"match $0 {}\"));\n-    acc.add(keyword(\"while\", \"while $0 {}\"));\n-    acc.add(keyword(\"loop\", \"loop {$0}\"));\n+    acc.add(keyword(ctx, \"if\", \"if $0 {}\"));\n+    acc.add(keyword(ctx, \"match\", \"match $0 {}\"));\n+    acc.add(keyword(ctx, \"while\", \"while $0 {}\"));\n+    acc.add(keyword(ctx, \"loop\", \"loop {$0}\"));\n \n     if ctx.after_if {\n-        acc.add(keyword(\"else\", \"else {$0}\"));\n-        acc.add(keyword(\"else if\", \"else if $0 {}\"));\n+        acc.add(keyword(ctx, \"else\", \"else {$0}\"));\n+        acc.add(keyword(ctx, \"else if\", \"else if $0 {}\"));\n     }\n     if is_in_loop_body(ctx.leaf) {\n         if ctx.can_be_stmt {\n-            acc.add(keyword(\"continue\", \"continue;\"));\n-            acc.add(keyword(\"break\", \"break;\"));\n+            acc.add(keyword(ctx, \"continue\", \"continue;\"));\n+            acc.add(keyword(ctx, \"break\", \"break;\"));\n         } else {\n-            acc.add(keyword(\"continue\", \"continue\"));\n-            acc.add(keyword(\"break\", \"break\"));\n+            acc.add(keyword(ctx, \"continue\", \"continue\"));\n+            acc.add(keyword(ctx, \"break\", \"break\"));\n         }\n     }\n-    acc.add_all(complete_return(fn_def, ctx.can_be_stmt));\n+    acc.add_all(complete_return(ctx, fn_def, ctx.can_be_stmt));\n }\n \n fn is_in_loop_body(leaf: &SyntaxNode) -> bool {\n@@ -95,170 +92,129 @@ fn is_in_loop_body(leaf: &SyntaxNode) -> bool {\n     false\n }\n \n-fn complete_return(fn_def: &ast::FnDef, can_be_stmt: bool) -> Option<CompletionItem> {\n+fn complete_return(\n+    ctx: &CompletionContext,\n+    fn_def: &ast::FnDef,\n+    can_be_stmt: bool,\n+) -> Option<CompletionItem> {\n     let snip = match (can_be_stmt, fn_def.ret_type().is_some()) {\n         (true, true) => \"return $0;\",\n         (true, false) => \"return;\",\n         (false, true) => \"return $0\",\n         (false, false) => \"return\",\n     };\n-    Some(keyword(\"return\", snip))\n+    Some(keyword(ctx, \"return\", snip))\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{CompletionKind, check_completion};\n-    fn check_keyword_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Keyword);\n+    use crate::completion::CompletionKind;\n+    use crate::completion::completion_item::check_completion;\n+\n+    fn check_keyword_completion(name: &str, code: &str) {\n+        check_completion(name, code, CompletionKind::Keyword);\n     }\n \n     #[test]\n     fn completes_keywords_in_use_stmt() {\n         check_keyword_completion(\n+            \"keywords_in_use_stmt1\",\n             r\"\n             use <|>\n             \",\n-            r#\"\n-            crate \"crate\" \"crate::\"\n-            self \"self\"\n-            super \"super\"\n-            \"#,\n         );\n \n         check_keyword_completion(\n+            \"keywords_in_use_stmt2\",\n             r\"\n             use a::<|>\n             \",\n-            r#\"\n-            self \"self\"\n-            super \"super\"\n-            \"#,\n         );\n \n         check_keyword_completion(\n+            \"keywords_in_use_stmt3\",\n             r\"\n             use a::{b, <|>}\n             \",\n-            r#\"\n-            self \"self\"\n-            super \"super\"\n-            \"#,\n         );\n     }\n \n     #[test]\n     fn completes_various_keywords_in_function() {\n         check_keyword_completion(\n+            \"keywords_in_function1\",\n             r\"\n             fn quux() {\n                 <|>\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            return \"return;\"\n-            \"#,\n         );\n     }\n \n     #[test]\n     fn completes_else_after_if() {\n         check_keyword_completion(\n+            \"keywords_in_function2\",\n             r\"\n             fn quux() {\n                 if true {\n                     ()\n                 } <|>\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            else \"else {$0}\"\n-            else if \"else if $0 {}\"\n-            return \"return;\"\n-            \"#,\n         );\n     }\n \n     #[test]\n     fn test_completion_return_value() {\n         check_keyword_completion(\n+            \"keywords_in_function3\",\n             r\"\n             fn quux() -> i32 {\n                 <|>\n                 92\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            return \"return $0;\"\n-            \"#,\n         );\n         check_keyword_completion(\n+            \"keywords_in_function4\",\n             r\"\n             fn quux() {\n                 <|>\n                 92\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            return \"return;\"\n-            \"#,\n         );\n     }\n \n     #[test]\n     fn dont_add_semi_after_return_if_not_a_statement() {\n         check_keyword_completion(\n+            \"dont_add_semi_after_return_if_not_a_statement\",\n             r\"\n             fn quux() -> i32 {\n                 match () {\n                     () => <|>\n                 }\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            return \"return $0\"\n-            \"#,\n         );\n     }\n \n     #[test]\n     fn last_return_in_block_has_semi() {\n         check_keyword_completion(\n+            \"last_return_in_block_has_semi1\",\n             r\"\n             fn quux() -> i32 {\n                 if condition {\n                     <|>\n                 }\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            return \"return $0;\"\n-            \"#,\n         );\n         check_keyword_completion(\n+            \"last_return_in_block_has_semi2\",\n             r\"\n             fn quux() -> i32 {\n                 if condition {\n@@ -268,54 +224,35 @@ mod tests {\n                 x\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            return \"return $0;\"\n-            \"#,\n         );\n     }\n \n     #[test]\n     fn completes_break_and_continue_in_loops() {\n         check_keyword_completion(\n+            \"completes_break_and_continue_in_loops1\",\n             r\"\n             fn quux() -> i32 {\n                 loop { <|> }\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            continue \"continue;\"\n-            break \"break;\"\n-            return \"return $0;\"\n-            \"#,\n         );\n+\n         // No completion: lambda isolates control flow\n         check_keyword_completion(\n+            \"completes_break_and_continue_in_loops2\",\n             r\"\n             fn quux() -> i32 {\n                 loop { || { <|> } }\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            return \"return $0;\"\n-            \"#,\n         );\n     }\n \n     #[test]\n     fn no_semi_after_break_continue_in_expr() {\n         check_keyword_completion(\n+            \"no_semi_after_break_continue_in_expr\",\n             r\"\n             fn f() {\n                 loop {\n@@ -325,15 +262,6 @@ mod tests {\n                 }\n             }\n             \",\n-            r#\"\n-            if \"if $0 {}\"\n-            match \"match $0 {}\"\n-            while \"while $0 {}\"\n-            loop \"loop {$0}\"\n-            continue \"continue\"\n-            break \"break\"\n-            return \"return\"\n-            \"#,\n         )\n     }\n }"}, {"sha": "7413c71e80fac08e3002229c18f0c1983f5f83f4", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -15,7 +15,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         hir::Def::Module(module) => {\n             let module_scope = module.scope(ctx.db);\n             for (name, res) in module_scope.entries() {\n-                CompletionItem::new(CompletionKind::Reference, name.to_string())\n+                CompletionItem::new(CompletionKind::Reference, ctx, name.to_string())\n                     .from_resolution(ctx, res)\n                     .add_to(acc);\n             }\n@@ -24,7 +24,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n             e.variants(ctx.db)\n                 .into_iter()\n                 .for_each(|(variant_name, _variant)| {\n-                    CompletionItem::new(CompletionKind::Reference, variant_name.to_string())\n+                    CompletionItem::new(CompletionKind::Reference, ctx, variant_name.to_string())\n                         .kind(CompletionItemKind::EnumVariant)\n                         .add_to(acc)\n                 });\n@@ -35,7 +35,8 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{CompletionKind, check_completion};\n+    use crate::completion::CompletionKind;\n+    use crate::completion::completion_item::check_completion;\n \n     fn check_reference_completion(code: &str, expected_completions: &str) {\n         check_completion(code, expected_completions, CompletionKind::Reference);\n@@ -44,48 +45,49 @@ mod tests {\n     #[test]\n     fn completes_use_item_starting_with_self() {\n         check_reference_completion(\n+            \"use_item_starting_with_self\",\n             r\"\n             use self::m::<|>;\n \n             mod m {\n                 struct Bar;\n             }\n             \",\n-            \"Bar\",\n         );\n     }\n \n     #[test]\n     fn completes_use_item_starting_with_crate() {\n         check_reference_completion(\n+            \"use_item_starting_with_crate\",\n             \"\n             //- /lib.rs\n             mod foo;\n             struct Spam;\n             //- /foo.rs\n             use crate::Sp<|>\n             \",\n-            \"Spam;foo\",\n         );\n     }\n \n     #[test]\n     fn completes_nested_use_tree() {\n         check_reference_completion(\n+            \"nested_use_tree\",\n             \"\n             //- /lib.rs\n             mod foo;\n             struct Spam;\n             //- /foo.rs\n             use crate::{Sp<|>};\n             \",\n-            \"Spam;foo\",\n         );\n     }\n \n     #[test]\n     fn completes_deeply_nested_use_tree() {\n         check_reference_completion(\n+            \"deeply_nested_use_tree\",\n             \"\n             //- /lib.rs\n             mod foo;\n@@ -97,45 +99,44 @@ mod tests {\n             //- /foo.rs\n             use crate::{bar::{baz::Sp<|>}};\n             \",\n-            \"Spam\",\n         );\n     }\n \n     #[test]\n     fn completes_enum_variant() {\n         check_reference_completion(\n+            \"reference_completion\",\n             \"\n             //- /lib.rs\n             enum E { Foo, Bar(i32) }\n             fn foo() { let _ = E::<|> }\n             \",\n-            \"Foo;Bar\",\n         );\n     }\n \n     #[test]\n     fn dont_render_function_parens_in_use_item() {\n         check_reference_completion(\n+            \"dont_render_function_parens_in_use_item\",\n             \"\n             //- /lib.rs\n             mod m { pub fn foo() {} }\n             use crate::m::f<|>;\n             \",\n-            \"foo\",\n         )\n     }\n \n     #[test]\n     fn dont_render_function_parens_if_already_call() {\n         check_reference_completion(\n+            \"dont_render_function_parens_if_already_call\",\n             \"\n             //- /lib.rs\n             fn frobnicate() {}\n             fn main() {\n                 frob<|>();\n             }\n             \",\n-            \"main;frobnicate\",\n         )\n     }\n }"}, {"sha": "bb080a341f55115e0736ffb9be7b170fa44f291c", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -1,6 +1,5 @@\n use rustc_hash::FxHashSet;\n-use ra_syntax::{AstNode, TextUnit};\n-\n+use ra_syntax::ast::AstNode;\n use crate::completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -13,7 +12,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     };\n     if let Some(function) = &ctx.function {\n         let scopes = function.scopes(ctx.db);\n-        complete_fn(acc, &scopes, ctx.offset);\n+        complete_fn(acc, &scopes, ctx);\n     }\n \n     let module_scope = module.scope(ctx.db);\n@@ -30,50 +29,56 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n             }\n         })\n         .for_each(|(name, res)| {\n-            CompletionItem::new(CompletionKind::Reference, name.to_string())\n+            CompletionItem::new(CompletionKind::Reference, ctx, name.to_string())\n                 .from_resolution(ctx, res)\n                 .add_to(acc)\n         });\n }\n \n-fn complete_fn(acc: &mut Completions, scopes: &hir::ScopesWithSyntaxMapping, offset: TextUnit) {\n+fn complete_fn(\n+    acc: &mut Completions,\n+    scopes: &hir::ScopesWithSyntaxMapping,\n+    ctx: &CompletionContext,\n+) {\n     let mut shadowed = FxHashSet::default();\n     scopes\n-        .scope_chain_for_offset(offset)\n+        .scope_chain_for_offset(ctx.offset)\n         .flat_map(|scope| scopes.scopes.entries(scope).iter())\n         .filter(|entry| shadowed.insert(entry.name()))\n         .for_each(|entry| {\n-            CompletionItem::new(CompletionKind::Reference, entry.name().to_string())\n+            CompletionItem::new(CompletionKind::Reference, ctx, entry.name().to_string())\n                 .kind(CompletionItemKind::Binding)\n                 .add_to(acc)\n         });\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{CompletionKind, check_completion};\n+    use crate::completion::CompletionKind;\n+    use crate::completion::completion_item::check_completion;\n \n-    fn check_reference_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Reference);\n+    fn check_reference_completion(name: &str, code: &str) {\n+        check_completion(name, code, CompletionKind::Reference);\n     }\n \n     #[test]\n     fn completes_bindings_from_let() {\n         check_reference_completion(\n+            \"bindings_from_let\",\n             r\"\n             fn quux(x: i32) {\n                 let y = 92;\n                 1 + <|>;\n                 let z = ();\n             }\n             \",\n-            r#\"y;x;quux \"quux($0)\"\"#,\n         );\n     }\n \n     #[test]\n     fn completes_bindings_from_if_let() {\n         check_reference_completion(\n+            \"bindings_from_if_let\",\n             r\"\n             fn quux() {\n                 if let Some(x) = foo() {\n@@ -85,66 +90,66 @@ mod tests {\n                 }\n             }\n             \",\n-            r#\"b;a;quux \"quux()$0\"\"#,\n         );\n     }\n \n     #[test]\n     fn completes_bindings_from_for() {\n         check_reference_completion(\n+            \"bindings_from_for\",\n             r\"\n             fn quux() {\n                 for x in &[1, 2, 3] {\n                     <|>\n                 }\n             }\n             \",\n-            r#\"x;quux \"quux()$0\"\"#,\n         );\n     }\n \n     #[test]\n     fn completes_module_items() {\n         check_reference_completion(\n+            \"module_items\",\n             r\"\n             struct Foo;\n             enum Baz {}\n             fn quux() {\n                 <|>\n             }\n             \",\n-            r#\"quux \"quux()$0\";Foo;Baz\"#,\n         );\n     }\n \n     #[test]\n     fn completes_module_items_in_nested_modules() {\n         check_reference_completion(\n+            \"module_items_in_nested_modules\",\n             r\"\n             struct Foo;\n             mod m {\n                 struct Bar;\n                 fn quux() { <|> }\n             }\n             \",\n-            r#\"quux \"quux()$0\";Bar\"#,\n         );\n     }\n \n     #[test]\n     fn completes_return_type() {\n         check_reference_completion(\n+            \"return_type\",\n             r\"\n             struct Foo;\n             fn x() -> <|>\n             \",\n-            r#\"Foo;x \"x()$0\"\"#,\n         )\n     }\n \n     #[test]\n     fn dont_show_both_completions_for_shadowing() {\n         check_reference_completion(\n+            \"dont_show_both_completions_for_shadowing\",\n             r\"\n             fn foo() -> {\n                 let bar = 92;\n@@ -154,32 +159,29 @@ mod tests {\n                 }\n             }\n             \",\n-            r#\"bar;foo \"foo()$0\"\"#,\n         )\n     }\n \n     #[test]\n     fn completes_self_in_methods() {\n-        check_reference_completion(r\"impl S { fn foo(&self) { <|> } }\", \"self\")\n+        check_reference_completion(\"self_in_methods\", r\"impl S { fn foo(&self) { <|> } }\")\n     }\n \n     #[test]\n     fn inserts_parens_for_function_calls() {\n         check_reference_completion(\n+            \"inserts_parens_for_function_calls1\",\n             r\"\n             fn no_args() {}\n             fn main() { no_<|> }\n             \",\n-            r#\"no_args \"no_args()$0\"\n-               main \"main()$0\"\"#,\n         );\n         check_reference_completion(\n+            \"inserts_parens_for_function_calls2\",\n             r\"\n             fn with_args(x: i32, y: String) {}\n             fn main() { with_<|> }\n             \",\n-            r#\"main \"main()$0\"\n-               with_args \"with_args($0)\"\"#,\n         );\n     }\n }"}, {"sha": "fb94e3674a672705529210fe1bd1ff48aabf9f14", "filename": "crates/ra_ide_api/src/completion/complete_snippet.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -1,7 +1,7 @@\n use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionItemKind, CompletionContext, completion_item::Builder};\n \n-fn snippet(label: &str, snippet: &str) -> Builder {\n-    CompletionItem::new(CompletionKind::Snippet, label)\n+fn snippet<'a>(ctx: &'a CompletionContext<'a>, label: &str, snippet: &str) -> Builder<'a> {\n+    CompletionItem::new(CompletionKind::Snippet, ctx, label)\n         .snippet(snippet)\n         .kind(CompletionItemKind::Snippet)\n }\n@@ -10,15 +10,16 @@ pub(super) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n     if !(ctx.is_trivial_path && ctx.function_syntax.is_some()) {\n         return;\n     }\n-    snippet(\"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n-    snippet(\"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n+    snippet(ctx, \"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n+    snippet(ctx, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n }\n \n pub(super) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_new_item {\n         return;\n     }\n     snippet(\n+        ctx,\n         \"Test function\",\n         \"\\\n #[test]\n@@ -29,45 +30,33 @@ fn ${1:feature}() {\n     .lookup_by(\"tfn\")\n     .add_to(acc);\n \n-    snippet(\"pub(crate)\", \"pub(crate) $0\").add_to(acc);\n+    snippet(ctx, \"pub(crate)\", \"pub(crate) $0\").add_to(acc);\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{CompletionKind, check_completion};\n-    fn check_snippet_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Snippet);\n+    use crate::completion::CompletionKind;\n+    use crate::completion::completion_item::check_completion;\n+\n+    fn check_snippet_completion(name: &str, code: &str) {\n+        check_completion(name, code, CompletionKind::Snippet);\n     }\n \n     #[test]\n     fn completes_snippets_in_expressions() {\n-        check_snippet_completion(\n-            r\"fn foo(x: i32) { <|> }\",\n-            r##\"\n-            pd \"eprintln!(\\\"$0 = {:?}\\\", $0);\"\n-            ppd \"eprintln!(\\\"$0 = {:#?}\\\", $0);\"\n-            \"##,\n-        );\n+        check_snippet_completion(\"snippets_in_expressions\", r\"fn foo(x: i32) { <|> }\");\n     }\n \n     #[test]\n     fn completes_snippets_in_items() {\n-        // check_snippet_completion(r\"\n-        //     <|>\n-        //     \",\n-        //     r##\"[CompletionItem { label: \"Test function\", lookup: None, snippet: Some(\"#[test]\\nfn test_${1:feature}() {\\n$0\\n}\"##,\n-        // );\n         check_snippet_completion(\n+            \"snippets_in_items\",\n             r\"\n             #[cfg(test)]\n             mod tests {\n                 <|>\n             }\n             \",\n-            r##\"\n-            tfn \"Test function\" \"#[test]\\nfn ${1:feature}() {\\n    $0\\n}\"\n-            pub(crate) \"pub(crate) $0\"\n-            \"##,\n         );\n     }\n }"}, {"sha": "de9b95c81f0a990aeee723d95b25492f990afc43", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -12,7 +12,7 @@ use crate::{db, FilePosition};\n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n-pub(super) struct CompletionContext<'a> {\n+pub(crate) struct CompletionContext<'a> {\n     pub(super) db: &'a db::RootDatabase,\n     pub(super) offset: TextUnit,\n     pub(super) leaf: &'a SyntaxNode,\n@@ -65,6 +65,10 @@ impl<'a> CompletionContext<'a> {\n         Some(ctx)\n     }\n \n+    pub(crate) fn leaf_range(&self) -> TextRange {\n+        self.leaf.range()\n+    }\n+\n     fn fill(&mut self, original_file: &'a SourceFile, offset: TextUnit) {\n         // Insert a fake ident to get a valid parse tree. We will use this file\n         // to determine context, though the original_file will be used for"}, {"sha": "7bd6344985f311296607998102c87dc16ff8f2e0", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 122, "deletions": 88, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -1,6 +1,10 @@\n use hir::PerNs;\n+use ra_text_edit::{\n+    AtomTextEdit,\n+    TextEdit,\n+};\n \n-use crate::completion::CompletionContext;\n+use crate::completion::completion_context::CompletionContext;\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n@@ -11,15 +15,29 @@ pub struct CompletionItem {\n     /// completion.\n     completion_kind: CompletionKind,\n     label: String,\n+    kind: Option<CompletionItemKind>,\n     detail: Option<String>,\n     lookup: Option<String>,\n-    snippet: Option<String>,\n-    kind: Option<CompletionItemKind>,\n-}\n-\n-pub enum InsertText {\n-    PlainText { text: String },\n-    Snippet { text: String },\n+    /// The format of the insert text. The format applies to both the `insert_text` property\n+    /// and the `insert` property of a provided `text_edit`.\n+    insert_text_format: InsertTextFormat,\n+    /// An edit which is applied to a document when selecting this completion. When an edit is\n+    /// provided the value of `insert_text` is ignored.\n+    ///\n+    /// *Note:* The range of the edit must be a single line range and it must contain the position\n+    /// at which completion has been requested.\n+    ///\n+    /// *Note:* If sending a range that overlaps a string, the string should match the relevant\n+    /// part of the replacement text, or be filtered out.\n+    text_edit: Option<AtomTextEdit>,\n+    /// An optional array of additional text edits that are applied when\n+    /// selecting this completion. Edits must not overlap (including the same insert position)\n+    /// with the main edit nor with themselves.\n+    ///\n+    /// Additional text edits should be used to change text unrelated to the current cursor position\n+    /// (for example adding an import statement at the top of the file if the completion item will\n+    /// insert an unqualified type).\n+    additional_text_edits: Option<TextEdit>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -40,7 +58,7 @@ pub enum CompletionItemKind {\n     Method,\n }\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub(crate) enum CompletionKind {\n     /// Parser-based keyword completion.\n     Keyword,\n@@ -51,16 +69,30 @@ pub(crate) enum CompletionKind {\n     Snippet,\n }\n \n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+pub enum InsertTextFormat {\n+    PlainText,\n+    Snippet,\n+}\n+\n impl CompletionItem {\n-    pub(crate) fn new(completion_kind: CompletionKind, label: impl Into<String>) -> Builder {\n+    pub(crate) fn new<'a>(\n+        completion_kind: CompletionKind,\n+        ctx: &'a CompletionContext,\n+        label: impl Into<String>,\n+    ) -> Builder<'a> {\n         let label = label.into();\n         Builder {\n+            ctx,\n             completion_kind,\n             label,\n+            insert_text: None,\n+            insert_text_format: InsertTextFormat::PlainText,\n             detail: None,\n             lookup: None,\n-            snippet: None,\n             kind: None,\n+            text_edit: None,\n+            additional_text_edits: None,\n         }\n     }\n     /// What user sees in pop-up in the UI.\n@@ -78,72 +110,108 @@ impl CompletionItem {\n             .map(|it| it.as_str())\n             .unwrap_or(self.label())\n     }\n-    /// What is inserted.\n-    pub fn insert_text(&self) -> InsertText {\n-        match &self.snippet {\n-            None => InsertText::PlainText {\n-                text: self.label.clone(),\n-            },\n-            Some(it) => InsertText::Snippet { text: it.clone() },\n-        }\n+\n+    pub fn insert_text_format(&self) -> InsertTextFormat {\n+        self.insert_text_format.clone()\n     }\n \n     pub fn kind(&self) -> Option<CompletionItemKind> {\n         self.kind\n     }\n+    pub fn text_edit(&mut self) -> Option<&AtomTextEdit> {\n+        self.text_edit.as_ref()\n+    }\n+    pub fn take_additional_text_edits(&mut self) -> Option<TextEdit> {\n+        self.additional_text_edits.take()\n+    }\n }\n \n /// A helper to make `CompletionItem`s.\n #[must_use]\n-pub(crate) struct Builder {\n+pub(crate) struct Builder<'a> {\n+    ctx: &'a CompletionContext<'a>,\n     completion_kind: CompletionKind,\n     label: String,\n+    insert_text: Option<String>,\n+    insert_text_format: InsertTextFormat,\n     detail: Option<String>,\n     lookup: Option<String>,\n-    snippet: Option<String>,\n     kind: Option<CompletionItemKind>,\n+    text_edit: Option<AtomTextEdit>,\n+    additional_text_edits: Option<TextEdit>,\n }\n \n-impl Builder {\n+impl<'a> Builder<'a> {\n     pub(crate) fn add_to(self, acc: &mut Completions) {\n         acc.add(self.build())\n     }\n \n     pub(crate) fn build(self) -> CompletionItem {\n+        let self_text_edit = self.text_edit;\n+        let self_insert_text = self.insert_text;\n+        let text_edit = match (self_text_edit, self_insert_text) {\n+            (Some(text_edit), ..) => Some(text_edit),\n+            (None, Some(insert_text)) => {\n+                Some(AtomTextEdit::replace(self.ctx.leaf_range(), insert_text))\n+            }\n+            _ => None,\n+        };\n+\n         CompletionItem {\n             label: self.label,\n             detail: self.detail,\n+            insert_text_format: self.insert_text_format,\n             lookup: self.lookup,\n-            snippet: self.snippet,\n             kind: self.kind,\n             completion_kind: self.completion_kind,\n+            text_edit,\n+            additional_text_edits: self.additional_text_edits,\n         }\n     }\n-    pub(crate) fn lookup_by(mut self, lookup: impl Into<String>) -> Builder {\n+    pub(crate) fn lookup_by(mut self, lookup: impl Into<String>) -> Builder<'a> {\n         self.lookup = Some(lookup.into());\n         self\n     }\n-    pub(crate) fn snippet(mut self, snippet: impl Into<String>) -> Builder {\n-        self.snippet = Some(snippet.into());\n+    pub(crate) fn insert_text(mut self, insert_text: impl Into<String>) -> Builder<'a> {\n+        self.insert_text = Some(insert_text.into());\n+        self\n+    }\n+    pub(crate) fn insert_text_format(\n+        mut self,\n+        insert_text_format: InsertTextFormat,\n+    ) -> Builder<'a> {\n+        self.insert_text_format = insert_text_format;\n         self\n     }\n-    pub(crate) fn kind(mut self, kind: CompletionItemKind) -> Builder {\n+    pub(crate) fn snippet(mut self, snippet: impl Into<String>) -> Builder<'a> {\n+        self.insert_text_format = InsertTextFormat::Snippet;\n+        self.insert_text(snippet)\n+    }\n+    pub(crate) fn kind(mut self, kind: CompletionItemKind) -> Builder<'a> {\n         self.kind = Some(kind);\n         self\n     }\n+    pub(crate) fn text_edit(mut self, text_edit: AtomTextEdit) -> Builder<'a> {\n+        self.text_edit = Some(text_edit);\n+        self\n+    }\n+    pub(crate) fn additional_text_edits(mut self, additional_text_edits: TextEdit) -> Builder<'a> {\n+        self.additional_text_edits = Some(additional_text_edits);\n+        self\n+    }\n     #[allow(unused)]\n-    pub(crate) fn detail(self, detail: impl Into<String>) -> Builder {\n+    pub(crate) fn detail(self, detail: impl Into<String>) -> Builder<'a> {\n         self.set_detail(Some(detail))\n     }\n-    pub(crate) fn set_detail(mut self, detail: Option<impl Into<String>>) -> Builder {\n+    pub(crate) fn set_detail(mut self, detail: Option<impl Into<String>>) -> Builder<'a> {\n         self.detail = detail.map(Into::into);\n         self\n     }\n     pub(super) fn from_resolution(\n         mut self,\n         ctx: &CompletionContext,\n         resolution: &hir::Resolution,\n-    ) -> Builder {\n+    ) -> Builder<'a> {\n         let resolved = resolution.def_id.map(|d| d.resolve(ctx.db));\n         let kind = match resolved {\n             PerNs {\n@@ -188,21 +256,22 @@ impl Builder {\n         mut self,\n         ctx: &CompletionContext,\n         function: hir::Function,\n-    ) -> Builder {\n+    ) -> Builder<'a> {\n         // If not an import, add parenthesis automatically.\n         if ctx.use_item_syntax.is_none() && !ctx.is_call {\n             if function.signature(ctx.db).params().is_empty() {\n-                self.snippet = Some(format!(\"{}()$0\", self.label));\n+                self.insert_text = Some(format!(\"{}()$0\", self.label));\n             } else {\n-                self.snippet = Some(format!(\"{}($0)\", self.label));\n+                self.insert_text = Some(format!(\"{}($0)\", self.label));\n             }\n+            self.insert_text_format = InsertTextFormat::Snippet;\n         }\n         self.kind = Some(CompletionItemKind::Function);\n         self\n     }\n }\n \n-impl Into<CompletionItem> for Builder {\n+impl<'a> Into<CompletionItem> for Builder<'a> {\n     fn into(self) -> CompletionItem {\n         self.build()\n     }\n@@ -225,64 +294,29 @@ impl Completions {\n     {\n         items.into_iter().for_each(|item| self.add(item.into()))\n     }\n-\n-    #[cfg(test)]\n-    pub(crate) fn assert_match(&self, expected: &str, kind: CompletionKind) {\n-        let expected = normalize(expected);\n-        let actual = self.debug_render(kind);\n-        test_utils::assert_eq_text!(expected.as_str(), actual.as_str(),);\n-\n-        /// Normalize the textual representation of `Completions`:\n-        /// replace `;` with newlines, normalize whitespace\n-        fn normalize(expected: &str) -> String {\n-            use ra_syntax::{tokenize, TextUnit, TextRange, SyntaxKind::SEMI};\n-            let mut res = String::new();\n-            for line in expected.trim().lines() {\n-                let line = line.trim();\n-                let mut start_offset: TextUnit = 0.into();\n-                // Yep, we use rust tokenize in completion tests :-)\n-                for token in tokenize(line) {\n-                    let range = TextRange::offset_len(start_offset, token.len);\n-                    start_offset += token.len;\n-                    if token.kind == SEMI {\n-                        res.push('\\n');\n-                    } else {\n-                        res.push_str(&line[range]);\n-                    }\n-                }\n-\n-                res.push('\\n');\n-            }\n-            res\n-        }\n-    }\n-\n-    #[cfg(test)]\n-    fn debug_render(&self, kind: CompletionKind) -> String {\n-        let mut res = String::new();\n-        for c in self.buf.iter() {\n-            if c.completion_kind == kind {\n-                if let Some(lookup) = &c.lookup {\n-                    res.push_str(lookup);\n-                    res.push_str(&format!(\" {:?}\", c.label));\n-                } else {\n-                    res.push_str(&c.label);\n-                }\n-                if let Some(detail) = &c.detail {\n-                    res.push_str(&format!(\" {:?}\", detail));\n-                }\n-                if let Some(snippet) = &c.snippet {\n-                    res.push_str(&format!(\" {:?}\", snippet));\n-                }\n-                res.push('\\n');\n-            }\n-        }\n-        res\n-    }\n }\n \n impl Into<Vec<CompletionItem>> for Completions {\n     fn into(self) -> Vec<CompletionItem> {\n         self.buf\n     }\n }\n+\n+#[cfg(test)]\n+pub(crate) fn check_completion(test_name: &str, code: &str, kind: CompletionKind) {\n+    use crate::mock_analysis::{single_file_with_position, analysis_and_position};\n+    use crate::completion::completions;\n+    use insta::assert_debug_snapshot_matches;\n+    let (analysis, position) = if code.contains(\"//-\") {\n+        analysis_and_position(code)\n+    } else {\n+        single_file_with_position(code)\n+    };\n+    let completions = completions(&analysis.db, position).unwrap();\n+    let completion_items: Vec<CompletionItem> = completions.into();\n+    let kind_completions: Vec<CompletionItem> = completion_items\n+        .into_iter()\n+        .filter(|c| c.completion_kind == kind)\n+        .collect();\n+    assert_debug_snapshot_matches!(test_name, kind_completions);\n+}"}, {"sha": "40a5fd90fa3d15980189e4a46c70dfe7aa4070c5", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__bindings_from_for.snap", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_for.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_for.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_for.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,35 @@\n+Created: 2019-01-19T13:42:17.835266+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"x\",\n+        kind: Some(\n+            Binding\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"quux\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"quux()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "f6c0d75013b5e20a79fec6cd61d875b85664d39a", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__bindings_from_if_let.snap", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_if_let.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_if_let.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_if_let.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,47 @@\n+Created: 2019-01-19T13:42:17.835796+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"b\",\n+        kind: Some(\n+            Binding\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"a\",\n+        kind: Some(\n+            Binding\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"quux\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [213; 231),\n+                insert: \"quux()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "a6fda0cf2d0aae677846186335fe555c6eefe884", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__bindings_from_let.snap", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_let.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_let.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__bindings_from_let.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,47 @@\n+Created: 2019-01-19T13:42:17.835351+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"y\",\n+        kind: Some(\n+            Binding\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"x\",\n+        kind: Some(\n+            Binding\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"quux\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [78; 79),\n+                insert: \"quux($0)\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "b27674da42be4c92567b32858d0ab419b1ade337", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__completes_break_and_continue_in_loops1.snap", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_break_and_continue_in_loops1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_break_and_continue_in_loops1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_break_and_continue_in_loops1.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,125 @@\n+Created: 2019-01-19T13:42:17.819543+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [54; 56),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [54; 56),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [54; 56),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [54; 56),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"continue\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [54; 56),\n+                insert: \"continue;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"break\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [54; 56),\n+                insert: \"break;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [54; 56),\n+                insert: \"return $0;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "4ebc168228c8c6520f10c745ab9d7493da8dc0e8", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__completes_break_and_continue_in_loops2.snap", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_break_and_continue_in_loops2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_break_and_continue_in_loops2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completes_break_and_continue_in_loops2.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,91 @@\n+Created: 2019-01-19T13:42:17.830288+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [59; 61),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [59; 61),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [59; 61),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [59; 61),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [59; 61),\n+                insert: \"return $0;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "60b5a7424b92c62280ca2060cfa1fdd96ddacb06", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__completion_postfix.snap", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completion_postfix.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completion_postfix.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__completion_postfix.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,102 @@\n+Created: 2019-01-19T13:50:41.824939+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Postfix,\n+        label: \"not\",\n+        kind: None,\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [78; 78),\n+                insert: \"!not\"\n+            }\n+        ),\n+        additional_text_edits: Some(\n+            TextEdit {\n+                atoms: [\n+                    AtomTextEdit {\n+                        delete: [72; 78),\n+                        insert: \"\"\n+                    }\n+                ]\n+            }\n+        )\n+    },\n+    CompletionItem {\n+        completion_kind: Postfix,\n+        label: \"if\",\n+        kind: None,\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [78; 78),\n+                insert: \"if bar {$0}\"\n+            }\n+        ),\n+        additional_text_edits: Some(\n+            TextEdit {\n+                atoms: [\n+                    AtomTextEdit {\n+                        delete: [72; 78),\n+                        insert: \"\"\n+                    }\n+                ]\n+            }\n+        )\n+    },\n+    CompletionItem {\n+        completion_kind: Postfix,\n+        label: \"match\",\n+        kind: None,\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [78; 78),\n+                insert: \"match bar {\\n${1:_} => {$0\\\\},\\n}\"\n+            }\n+        ),\n+        additional_text_edits: Some(\n+            TextEdit {\n+                atoms: [\n+                    AtomTextEdit {\n+                        delete: [72; 78),\n+                        insert: \"\"\n+                    }\n+                ]\n+            }\n+        )\n+    },\n+    CompletionItem {\n+        completion_kind: Postfix,\n+        label: \"while\",\n+        kind: None,\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [78; 78),\n+                insert: \"while bar {\\n$0\\n}\"\n+            }\n+        ),\n+        additional_text_edits: Some(\n+            TextEdit {\n+                atoms: [\n+                    AtomTextEdit {\n+                        delete: [72; 78),\n+                        insert: \"\"\n+                    }\n+                ]\n+            }\n+        )\n+    }\n+]"}, {"sha": "b33bc3e047fb68e4edb6f6dfe761ec32d4fc133b", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__deeply_nested_use_tree.snap", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__deeply_nested_use_tree.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__deeply_nested_use_tree.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__deeply_nested_use_tree.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,18 @@\n+Created: 2019-01-19T11:53:16.799862+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Spam\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "0a96291ab656a9e849e6f74198de7f9bbf01b558", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__dont_add_semi_after_return_if_not_a_statement.snap", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_add_semi_after_return_if_not_a_statement.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_add_semi_after_return_if_not_a_statement.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_add_semi_after_return_if_not_a_statement.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,91 @@\n+Created: 2019-01-19T13:42:17.821375+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [84; 102),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [84; 102),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [84; 102),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [84; 102),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [84; 102),\n+                insert: \"return $0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "5126c2bdc47d0287663b481d2e9b7984bb5601e4", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__dont_render_function_parens_if_already_call.snap", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_if_already_call.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_if_already_call.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_if_already_call.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,30 @@\n+Created: 2019-01-19T11:53:16.799845+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"main\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"frobnicate\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "dd91e337a4c2c56b42a74ccc819ab3d499e3819f", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__dont_render_function_parens_in_use_item.snap", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_in_use_item.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_in_use_item.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_in_use_item.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,18 @@\n+Created: 2019-01-19T11:53:16.799820+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"foo\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "9c1c3fe6a6ea6bf5979b6be3f57a68091aaf9763", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__dont_show_both_completions_for_shadowing.snap", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_show_both_completions_for_shadowing.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_show_both_completions_for_shadowing.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_show_both_completions_for_shadowing.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,35 @@\n+Created: 2019-01-19T13:42:17.841643+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"bar\",\n+        kind: Some(\n+            Binding\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"foo\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [108; 146),\n+                insert: \"foo()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "7d693be771d77f3106f7d002f17597838dba4093", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__inserts_parens_for_function_calls1.snap", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__inserts_parens_for_function_calls1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__inserts_parens_for_function_calls1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__inserts_parens_for_function_calls1.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,40 @@\n+Created: 2019-01-19T13:42:17.844671+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"no_args\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [53; 56),\n+                insert: \"no_args()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"main\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [53; 56),\n+                insert: \"main()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "1d2946c499625a9c64c23b37d1bb10966d79618e", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__inserts_parens_for_function_calls2.snap", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__inserts_parens_for_function_calls2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__inserts_parens_for_function_calls2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__inserts_parens_for_function_calls2.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,40 @@\n+Created: 2019-01-19T13:42:17.849139+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"main\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [72; 77),\n+                insert: \"main()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"with_args\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [72; 77),\n+                insert: \"with_args($0)\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "2059d63e83da5dcb6035bd10c3451786a971ab0f", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__keywords_in_function1.snap", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function1.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,91 @@\n+Created: 2019-01-19T13:42:17.819926+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 54),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 54),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 54),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 54),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 54),\n+                insert: \"return;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "2cc81582c0218c1ada1daf4c4ada0535d1261888", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__keywords_in_function2.snap", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function2.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,125 @@\n+Created: 2019-01-19T13:42:17.819839+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [91; 105),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [91; 105),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [91; 105),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [91; 105),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"else\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [91; 105),\n+                insert: \"else {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"else if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [91; 105),\n+                insert: \"else if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [91; 105),\n+                insert: \"return;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "26dec82c7bae912a0bad6b18b57712933af3a288", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__keywords_in_function3.snap", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function3.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function3.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function3.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,91 @@\n+Created: 2019-01-19T13:42:17.822255+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [31; 65),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [31; 65),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [31; 65),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [31; 65),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [31; 65),\n+                insert: \"return $0;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "4167165ec2e6d049026aeff0b5a76fe0a08a2aa9", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__keywords_in_function4.snap", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function4.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function4.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_function4.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,91 @@\n+Created: 2019-01-19T13:42:17.830680+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 58),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 58),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 58),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 58),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [24; 58),\n+                insert: \"return;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "db137d896f0a8085f39ea07248f7d13eabf1904a", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__keywords_in_use_stmt1.snap", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt1.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,52 @@\n+Created: 2019-01-19T13:42:17.819227+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"crate\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [16; 30),\n+                insert: \"crate::\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"self\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"super\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [16; 30),\n+                insert: \"super::\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "1ff0f49393b5f3b39040cd127445af8c190145d7", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__keywords_in_use_stmt2.snap", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt2.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,35 @@\n+Created: 2019-01-19T13:42:17.822990+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"self\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"super\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [18; 20),\n+                insert: \"super::\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "e14bd209cea1f3878fa8e726b3681a1ff566a778", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__keywords_in_use_stmt3.snap", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt3.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt3.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__keywords_in_use_stmt3.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,35 @@\n+Created: 2019-01-19T13:42:17.826915+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"self\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"super\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [23; 24),\n+                insert: \"super::\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "a728283554c4a6eaf7eecfd70c33fd5517ce4ba2", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__last_return_in_block_has_semi1.snap", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__last_return_in_block_has_semi1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__last_return_in_block_has_semi1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__last_return_in_block_has_semi1.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,91 @@\n+Created: 2019-01-19T13:42:17.821139+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"return $0;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "c5d5e74cbd7cf0abdc7df691407557e9d7e62533", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__last_return_in_block_has_semi2.snap", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__last_return_in_block_has_semi2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__last_return_in_block_has_semi2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__last_return_in_block_has_semi2.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,91 @@\n+Created: 2019-01-19T13:42:17.829078+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [62; 100),\n+                insert: \"return $0;\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "c18b44d590ab6ddc8de9f83e8d868cda5e7f8da9", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__method_completion.snap", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__method_completion.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__method_completion.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__method_completion.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,23 @@\n+Created: 2019-01-19T13:42:17.817204+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"the_method\",\n+        kind: Some(\n+            Method\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [143; 144),\n+                insert: \"the_method($0)\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "8d262a91de65a4801c33830e83981ab00ea79b15", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__module_items.snap", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__module_items.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__module_items.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__module_items.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,47 @@\n+Created: 2019-01-19T13:42:17.835687+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"quux\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [72; 102),\n+                insert: \"quux()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Foo\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Baz\",\n+        kind: Some(\n+            Enum\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "0973445215f0095da4028b985de406ce0f15f6cf", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__module_items_in_nested_modules.snap", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__module_items_in_nested_modules.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__module_items_in_nested_modules.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__module_items_in_nested_modules.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,35 @@\n+Created: 2019-01-19T13:42:17.836102+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"quux\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [100; 102),\n+                insert: \"quux()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Bar\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "dbe1e0445206f4a8c980342146db56aa479c21b5", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__nested_use_tree.snap", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__nested_use_tree.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__nested_use_tree.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__nested_use_tree.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,30 @@\n+Created: 2019-01-19T11:53:16.799743+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Spam\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"foo\",\n+        kind: Some(\n+            Module\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "417b692dcaa7e25c0e952af543c3ff6f7f706864", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__no_non_self_method.snap", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_non_self_method.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_non_self_method.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_non_self_method.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,5 @@\n+Created: 2019-01-19T11:34:11.702251+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[]"}, {"sha": "26c54018eaa8de17841dc0705441c918a5e1b872", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__no_semi_after_break_continue_in_expr.snap", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_semi_after_break_continue_in_expr.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_semi_after_break_continue_in_expr.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_semi_after_break_continue_in_expr.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,125 @@\n+Created: 2019-01-19T13:42:17.821881+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"if\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [106; 108),\n+                insert: \"if $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"match\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [106; 108),\n+                insert: \"match $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"while\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [106; 108),\n+                insert: \"while $0 {}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"loop\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [106; 108),\n+                insert: \"loop {$0}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"continue\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [106; 108),\n+                insert: \"continue\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"break\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [106; 108),\n+                insert: \"break\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Keyword,\n+        label: \"return\",\n+        kind: Some(\n+            Keyword\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [106; 108),\n+                insert: \"return\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "0948c9fe60e33aa94e3f6f28c7fd53102f68a03b", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__no_struct_field_completion_for_method_call.snap", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_struct_field_completion_for_method_call.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_struct_field_completion_for_method_call.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__no_struct_field_completion_for_method_call.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,5 @@\n+Created: 2019-01-19T11:34:11.702201+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[]"}, {"sha": "160da9e3161014c6842c02eac65ac465c3ed9bad", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__param_completion_last_param.snap", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_last_param.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_last_param.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_last_param.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,18 @@\n+Created: 2019-01-19T11:27:14.070727+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Magic,\n+        label: \"file_id: FileId\",\n+        kind: None,\n+        detail: None,\n+        lookup: Some(\n+            \"file_id\"\n+        ),\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "baeb01ed9acc98cb997b8064b3bea8461515ce98", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__param_completion_nth_param.snap", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_nth_param.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_nth_param.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_nth_param.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,18 @@\n+Created: 2019-01-19T11:29:09.355053+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Magic,\n+        label: \"file_id: FileId\",\n+        kind: None,\n+        detail: None,\n+        lookup: Some(\n+            \"file_id\"\n+        ),\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "8193c4f170a82741861811ef25a4f5f7e6be4c4e", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__param_completion_trait_param.snap", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_trait_param.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_trait_param.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__param_completion_trait_param.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,18 @@\n+Created: 2019-01-19T11:29:09.355066+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Magic,\n+        label: \"file_id: FileId\",\n+        kind: None,\n+        detail: None,\n+        lookup: Some(\n+            \"file_id\"\n+        ),\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "abd17dcec12513506f142bfb328f0175e268181a", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__reference_completion.snap", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__reference_completion.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__reference_completion.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__reference_completion.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,30 @@\n+Created: 2019-01-19T11:53:16.799765+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Foo\",\n+        kind: Some(\n+            EnumVariant\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Bar\",\n+        kind: Some(\n+            EnumVariant\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "c00a5ea5d38071004646037b2814da6caf6a94bc", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__return_type.snap", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__return_type.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__return_type.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__return_type.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,35 @@\n+Created: 2019-01-19T13:42:17.837692+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Foo\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"x\",\n+        kind: Some(\n+            Function\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [46; 60),\n+                insert: \"x()$0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "263b1515640a71666d200d77219810d63c232eed", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__self_in_methods.snap", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__self_in_methods.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__self_in_methods.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__self_in_methods.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,18 @@\n+Created: 2019-01-19T11:59:18.394156+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"self\",\n+        kind: Some(\n+            Binding\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "82f0a6d8d719cf717d0b9db765658e7f88439c4b", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__snippets_in_expressions.snap", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__snippets_in_expressions.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__snippets_in_expressions.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__snippets_in_expressions.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,40 @@\n+Created: 2019-01-19T13:42:17.844708+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Snippet,\n+        label: \"pd\",\n+        kind: Some(\n+            Snippet\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [16; 18),\n+                insert: \"eprintln!(\\\"$0 = {:?}\\\", $0);\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Snippet,\n+        label: \"ppd\",\n+        kind: Some(\n+            Snippet\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [16; 18),\n+                insert: \"eprintln!(\\\"$0 = {:#?}\\\", $0);\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "e7cc5c410c55e46d31b077f297690275f1850d7f", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__snippets_in_items.snap", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__snippets_in_items.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__snippets_in_items.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__snippets_in_items.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,42 @@\n+Created: 2019-01-19T13:42:17.845616+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Snippet,\n+        label: \"Test function\",\n+        kind: Some(\n+            Snippet\n+        ),\n+        detail: None,\n+        lookup: Some(\n+            \"tfn\"\n+        ),\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [49; 79),\n+                insert: \"#[test]\\nfn ${1:feature}() {\\n    $0\\n}\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Snippet,\n+        label: \"pub(crate)\",\n+        kind: Some(\n+            Snippet\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [49; 79),\n+                insert: \"pub(crate) $0\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "d27ca5f8f81a1df20216d753e55f7fb432dc74f4", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__struct_field_completion.snap", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,20 @@\n+Created: 2019-01-19T11:34:11.702218+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"the_field\",\n+        kind: Some(\n+            Field\n+        ),\n+        detail: Some(\n+            \"u32\"\n+        ),\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "8e547ad37649d65f37342316c953c53922bd7945", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__struct_field_completion_autoderef.snap", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion_autoderef.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion_autoderef.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion_autoderef.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,37 @@\n+Created: 2019-01-19T13:42:17.817216+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"the_field\",\n+        kind: Some(\n+            Field\n+        ),\n+        detail: Some(\n+            \"(u32, i32)\"\n+        ),\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"foo\",\n+        kind: Some(\n+            Method\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [125; 126),\n+                insert: \"foo($0)\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "4536cee17141629c673a150ce339b38062a9dd57", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__struct_field_completion_self.snap", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion_self.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion_self.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_field_completion_self.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,37 @@\n+Created: 2019-01-19T13:42:17.817207+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"the_field\",\n+        kind: Some(\n+            Field\n+        ),\n+        detail: Some(\n+            \"(u32,)\"\n+        ),\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"foo\",\n+        kind: Some(\n+            Method\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: Snippet,\n+        text_edit: Some(\n+            AtomTextEdit {\n+                delete: [120; 121),\n+                insert: \"foo($0)\"\n+            }\n+        ),\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "4c35be33ade1c0a622a757c458e93b8a564ec195", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__use_item_starting_with_crate.snap", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__use_item_starting_with_crate.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__use_item_starting_with_crate.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__use_item_starting_with_crate.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,30 @@\n+Created: 2019-01-19T11:53:16.799683+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Spam\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    },\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"foo\",\n+        kind: Some(\n+            Module\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "9780d652a7a18283ef68a47909f6c509c1196098", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__use_item_starting_with_self.snap", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__use_item_starting_with_self.snap", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__use_item_starting_with_self.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__use_item_starting_with_self.snap?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -0,0 +1,18 @@\n+Created: 2019-01-19T11:53:16.799788+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/src/completion/completion_item.rs\n+\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"Bar\",\n+        kind: Some(\n+            Struct\n+        ),\n+        detail: None,\n+        lookup: None,\n+        insert_text_format: PlainText,\n+        text_edit: None,\n+        additional_text_edits: None\n+    }\n+]"}, {"sha": "fb0821ff63827dd90dde9a9998ba3a7c6ccd2508", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -43,7 +43,7 @@ use crate::{\n };\n \n pub use crate::{\n-    completion::{CompletionItem, CompletionItemKind, InsertText},\n+    completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n     runnables::{Runnable, RunnableKind},\n     navigation_target::NavigationTarget,\n };"}, {"sha": "76215a97511d152e6034bcb0f295b56ce55ccbf1", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -1,13 +1,13 @@\n use lsp_types::{\n-    self, CreateFile, DocumentChangeOperation, DocumentChanges, InsertTextFormat, Location, LocationLink,\n+    self, CreateFile, DocumentChangeOperation, DocumentChanges, Location, LocationLink,\n     Position, Range, RenameFile, ResourceOp, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n     TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier,\n     WorkspaceEdit,\n };\n use ra_ide_api::{\n     CompletionItem, CompletionItemKind, FileId, FilePosition, FileRange, FileSystemEdit,\n-    InsertText, NavigationTarget, SourceChange, SourceFileEdit, RangeInfo,\n-    LineCol, LineIndex, translate_offset_with_edit\n+    NavigationTarget, SourceChange, SourceFileEdit, RangeInfo,\n+    LineCol, LineIndex, translate_offset_with_edit, InsertTextFormat\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n@@ -74,27 +74,30 @@ impl Conv for CompletionItemKind {\n     }\n }\n \n-impl Conv for CompletionItem {\n+impl ConvWith for CompletionItem {\n+    type Ctx = LineIndex;\n     type Output = ::lsp_types::CompletionItem;\n \n-    fn conv(self) -> <Self as Conv>::Output {\n-        let mut res = ::lsp_types::CompletionItem {\n+    fn conv_with(mut self, ctx: &LineIndex) -> ::lsp_types::CompletionItem {\n+        let text_edit = self.text_edit().map(|t| t.conv_with(ctx));\n+        let additonal_text_edit = self\n+            .take_additional_text_edits()\n+            .map(|it| it.conv_with(ctx));\n+\n+        let mut res = lsp_types::CompletionItem {\n             label: self.label().to_string(),\n             detail: self.detail().map(|it| it.to_string()),\n             filter_text: Some(self.lookup().to_string()),\n             kind: self.kind().map(|it| it.conv()),\n+            text_edit,\n+            additional_text_edits: additonal_text_edit,\n             ..Default::default()\n         };\n-        match self.insert_text() {\n-            InsertText::PlainText { text } => {\n-                res.insert_text = Some(text);\n-                res.insert_text_format = Some(InsertTextFormat::PlainText);\n-            }\n-            InsertText::Snippet { text } => {\n-                res.insert_text = Some(text);\n-                res.insert_text_format = Some(InsertTextFormat::Snippet);\n-            }\n-        }\n+        res.insert_text_format = Some(match self.insert_text_format() {\n+            InsertTextFormat::Snippet => lsp_types::InsertTextFormat::Snippet,\n+            InsertTextFormat::PlainText => lsp_types::InsertTextFormat::PlainText,\n+        });\n+\n         res\n     }\n }"}, {"sha": "d1e8c57747b7832b45daf68d3dbd3e8a4f1edb15", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08e81cdd818dd3378c292767e15a38e6bbc6f6c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d08e81cdd818dd3378c292767e15a38e6bbc6f6c", "patch": "@@ -337,7 +337,11 @@ pub fn handle_completion(\n         None => return Ok(None),\n         Some(items) => items,\n     };\n-    let items = items.into_iter().map(|item| item.conv()).collect();\n+    let line_index = world.analysis().file_line_index(position.file_id);\n+    let items = items\n+        .into_iter()\n+        .map(|item| item.conv_with(&line_index))\n+        .collect();\n \n     Ok(Some(req::CompletionResponse::Array(items)))\n }"}]}