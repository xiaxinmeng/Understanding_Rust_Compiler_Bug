{"sha": "b23ddc60e9fcb188421060a83f1af2b815fc60e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyM2RkYzYwZTlmY2IxODg0MjEwNjBhODNmMWFmMmI4MTVmYzYwZTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-16T10:20:30Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-30T05:21:26Z"}, "message": "Implement get_enclosing_scope and use it in save-analysis", "tree": {"sha": "cc87feb3dc28243acb5c26f229a158d1ae556937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc87feb3dc28243acb5c26f229a158d1ae556937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b23ddc60e9fcb188421060a83f1af2b815fc60e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b23ddc60e9fcb188421060a83f1af2b815fc60e2", "html_url": "https://github.com/rust-lang/rust/commit/b23ddc60e9fcb188421060a83f1af2b815fc60e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b23ddc60e9fcb188421060a83f1af2b815fc60e2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbf0daa19276354d5759d0b0bd7d31bcd3cc301c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf0daa19276354d5759d0b0bd7d31bcd3cc301c", "html_url": "https://github.com/rust-lang/rust/commit/bbf0daa19276354d5759d0b0bd7d31bcd3cc301c"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "7c80ba376c3680059e0df3df477f0160e094315f", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b23ddc60e9fcb188421060a83f1af2b815fc60e2/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b23ddc60e9fcb188421060a83f1af2b815fc60e2/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=b23ddc60e9fcb188421060a83f1af2b815fc60e2", "patch": "@@ -321,6 +321,34 @@ impl<'ast> Map<'ast> {\n         self.find_entry(id).and_then(|x| x.parent_node()).unwrap_or(id)\n     }\n \n+    /// Returns the nearest enclosing scope. A scope is an item or block.\n+    /// FIXME it is not clear to me that all items qualify as scopes - statics\n+    /// and associated types probably shouldn't, for example. Behaviour in this\n+    /// regard should be expected to be highly unstable.\n+    pub fn get_enclosing_scope(&self, id: NodeId) -> Option<NodeId> {\n+        let mut last_id = id;\n+        // Walk up the chain of parents until we find a 'scope'.\n+        loop {\n+            let cur_id = self.get_parent_node(last_id);\n+            if cur_id == last_id {\n+                return None;\n+            }\n+\n+            match self.get(cur_id) {\n+                NodeItem(_) |\n+                NodeForeignItem(_) |\n+                NodeTraitItem(_) |\n+                NodeImplItem(_) |\n+                NodeBlock(_) => {\n+                    return Some(cur_id);\n+                }\n+                _ => {}\n+            }\n+\n+            last_id = cur_id;\n+        }\n+    }\n+\n     pub fn get_parent_did(&self, id: NodeId) -> DefId {\n         let parent = self.get_parent(id);\n         match self.find_entry(parent) {"}, {"sha": "e9c91f4f4c194ef2b508ff04ee1e296a8a384ea1", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b23ddc60e9fcb188421060a83f1af2b815fc60e2/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b23ddc60e9fcb188421060a83f1af2b815fc60e2/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=b23ddc60e9fcb188421060a83f1af2b815fc60e2", "patch": "@@ -172,7 +172,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     qualname: qualname,\n                     declaration: None,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_parent(item.id),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n                 })\n             }\n             ast::ItemStatic(ref typ, mt, ref expr) => {\n@@ -191,7 +191,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_parent(item.id),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n                     value: value,\n                     type_value: ty_to_string(&typ),\n                 })\n@@ -205,7 +205,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_parent(item.id),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n                     value: self.span_utils.snippet(expr.span),\n                     type_value: ty_to_string(&typ),\n                 })\n@@ -223,7 +223,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: get_ident(item.ident).to_string(),\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n-                    scope: self.tcx.map.get_parent(item.id),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n                     filename: filename,\n                 })\n             },\n@@ -237,14 +237,14 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     value: val,\n                     span: sub_span.unwrap(),\n                     qualname: enum_name,\n-                    scope: self.tcx.map.get_parent(item.id),\n+                    scope: self.tcx.map.get_enclosing_scope(item.id).unwrap(),\n                 })\n             },\n             ast::ItemImpl(_, _, _, ref trait_ref, ref typ, _) => {\n                 let mut type_data = None;\n                 let sub_span;\n \n-                let parent = self.tcx.map.get_parent(item.id);\n+                let parent = self.tcx.map.get_enclosing_scope(item.id).unwrap();\n \n                 match typ.node {\n                     // Common case impl for a struct or something basic.\n@@ -337,7 +337,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                 return Some(Data::VariableRefData(VariableRefData {\n                                     name: get_ident(ident.node).to_string(),\n                                     span: sub_span.unwrap(),\n-                                    scope: self.tcx.map.get_parent(expr.id),\n+                                    scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap(),\n                                     ref_id: f.id,\n                                 }));\n                             }\n@@ -360,7 +360,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                         let sub_span = self.span_utils.span_for_last_ident(path.span);\n                         Some(Data::TypeRefData(TypeRefData {\n                             span: sub_span.unwrap(),\n-                            scope: self.tcx.map.get_parent(expr.id),\n+                            scope: self.tcx.map.get_enclosing_scope(expr.id).unwrap(),\n                             ref_id: def_id,\n                         }))\n                     }"}]}