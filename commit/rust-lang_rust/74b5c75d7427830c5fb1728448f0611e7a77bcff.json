{"sha": "74b5c75d7427830c5fb1728448f0611e7a77bcff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YjVjNzVkNzQyNzgzMGM1ZmIxNzI4NDQ4ZjA2MTFlN2E3N2JjZmY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-10T16:25:40Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-10T16:26:58Z"}, "message": "copyediting: while loops", "tree": {"sha": "6bcd1e8bdda7b18586d0be761bbbe64fa2e3c227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bcd1e8bdda7b18586d0be761bbbe64fa2e3c227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74b5c75d7427830c5fb1728448f0611e7a77bcff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74b5c75d7427830c5fb1728448f0611e7a77bcff", "html_url": "https://github.com/rust-lang/rust/commit/74b5c75d7427830c5fb1728448f0611e7a77bcff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74b5c75d7427830c5fb1728448f0611e7a77bcff/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d35fc6303195c0f47c8eb0bc5f9da0ce0073b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d35fc6303195c0f47c8eb0bc5f9da0ce0073b1f", "html_url": "https://github.com/rust-lang/rust/commit/8d35fc6303195c0f47c8eb0bc5f9da0ce0073b1f"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "f2e2f6b6f49a7403048a36ff755ac18cf8119fc1", "filename": "src/doc/trpl/while-loops.md", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/74b5c75d7427830c5fb1728448f0611e7a77bcff/src%2Fdoc%2Ftrpl%2Fwhile-loops.md", "raw_url": "https://github.com/rust-lang/rust/raw/74b5c75d7427830c5fb1728448f0611e7a77bcff/src%2Fdoc%2Ftrpl%2Fwhile-loops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fwhile-loops.md?ref=74b5c75d7427830c5fb1728448f0611e7a77bcff", "patch": "@@ -1,53 +1,59 @@\n % while loops\n \n-The other kind of looping construct in Rust is the `while` loop. It looks like\n-this:\n+Rust also has a `while` loop. It looks like this:\n \n ```{rust}\n let mut x = 5; // mut x: u32\n let mut done = false; // mut done: bool\n \n while !done {\n     x += x - 3;\n+\n     println!(\"{}\", x);\n-    if x % 5 == 0 { done = true; }\n+\n+    if x % 5 == 0 {\n+        done = true;\n+    }\n }\n ```\n \n-`while` loops are the correct choice when you're not sure how many times\n+`while` loops are the correct choice when you\u2019re not sure how many times\n you need to loop.\n \n If you need an infinite loop, you may be tempted to write this:\n \n-```{rust,ignore}\n+```rust,ignore\n while true {\n ```\n \n However, Rust has a dedicated keyword, `loop`, to handle this case:\n \n-```{rust,ignore}\n+```rust,ignore\n loop {\n ```\n \n-Rust's control-flow analysis treats this construct differently than a\n-`while true`, since we know that it will always loop. The details of what\n-that _means_ aren't super important to understand at this stage, but in\n-general, the more information we can give to the compiler, the better it\n-can do with safety and code generation, so you should always prefer\n-`loop` when you plan to loop infinitely.\n+Rust\u2019s control-flow analysis treats this construct differently than a `while\n+true`, since we know that it will always loop. In general, the more information\n+we can give to the compiler, the better it can do with safety and code\n+generation, so you should always prefer `loop` when you plan to loop\n+infinitely.\n \n ## Ending iteration early\n \n-Let's take a look at that `while` loop we had earlier:\n+Let\u2019s take a look at that `while` loop we had earlier:\n \n-```{rust}\n+```rust\n let mut x = 5;\n let mut done = false;\n \n while !done {\n     x += x - 3;\n+\n     println!(\"{}\", x);\n-    if x % 5 == 0 { done = true; }\n+\n+    if x % 5 == 0 {\n+        done = true;\n+    }\n }\n ```\n \n@@ -57,12 +63,14 @@ modifying iteration: `break` and `continue`.\n \n In this case, we can write the loop in a better way with `break`:\n \n-```{rust}\n+```rust\n let mut x = 5;\n \n loop {\n     x += x - 3;\n+\n     println!(\"{}\", x);\n+\n     if x % 5 == 0 { break; }\n }\n ```\n@@ -72,12 +80,14 @@ We now loop forever with `loop` and use `break` to break out early.\n `continue` is similar, but instead of ending the loop, goes to the next\n iteration. This will only print the odd numbers:\n \n-```{rust}\n+```rust\n for x in 0..10 {\n     if x % 2 == 0 { continue; }\n \n     println!(\"{}\", x);\n }\n ```\n \n-Both `continue` and `break` are valid in both kinds of loops.\n+Both `continue` and `break` are valid in both `while` loops and [`for` loops][for].\n+\n+[for]: for-loops.html"}]}