{"sha": "692d9426e77757c976cfb841105c159af2385d36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MmQ5NDI2ZTc3NzU3Yzk3NmNmYjg0MTEwNWMxNTlhZjIzODVkMzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:47Z"}, "message": "rollup merge of #21107: nikomatsakis/assoc-type-ice-hunt-take-1\n\nFixes for #20831 and #21010\n\nr? @nick29581", "tree": {"sha": "5342804cb2443b9d50eac2bf43046187836e59ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5342804cb2443b9d50eac2bf43046187836e59ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/692d9426e77757c976cfb841105c159af2385d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/692d9426e77757c976cfb841105c159af2385d36", "html_url": "https://github.com/rust-lang/rust/commit/692d9426e77757c976cfb841105c159af2385d36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/692d9426e77757c976cfb841105c159af2385d36/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7009e6f31c63fc2e0ba2153e6354ce44663ddb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7009e6f31c63fc2e0ba2153e6354ce44663ddb4", "html_url": "https://github.com/rust-lang/rust/commit/d7009e6f31c63fc2e0ba2153e6354ce44663ddb4"}, {"sha": "2479dfcbf7abc401e5925bf5d53b7ac2e0eed694", "url": "https://api.github.com/repos/rust-lang/rust/commits/2479dfcbf7abc401e5925bf5d53b7ac2e0eed694", "html_url": "https://github.com/rust-lang/rust/commit/2479dfcbf7abc401e5925bf5d53b7ac2e0eed694"}], "stats": {"total": 334, "additions": 226, "deletions": 108}, "files": [{"sha": "46cce164781f5f6c26ce4e7d5d513d790202c09d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -2605,12 +2605,17 @@ impl FlagComputation {\n \n             &ty_projection(ref data) => {\n                 self.add_flags(HAS_PROJECTION);\n-                self.add_substs(data.trait_ref.substs);\n+                self.add_projection_ty(data);\n             }\n \n             &ty_trait(box TyTrait { ref principal, ref bounds }) => {\n                 let mut computation = FlagComputation::new();\n                 computation.add_substs(principal.0.substs);\n+                for projection_bound in bounds.projection_bounds.iter() {\n+                    let mut proj_computation = FlagComputation::new();\n+                    proj_computation.add_projection_predicate(&projection_bound.0);\n+                    computation.add_bound_computation(&proj_computation);\n+                }\n                 self.add_bound_computation(&computation);\n \n                 self.add_bounds(bounds);\n@@ -2674,6 +2679,15 @@ impl FlagComputation {\n         }\n     }\n \n+    fn add_projection_predicate(&mut self, projection_predicate: &ProjectionPredicate) {\n+        self.add_projection_ty(&projection_predicate.projection_ty);\n+        self.add_ty(projection_predicate.ty);\n+    }\n+\n+    fn add_projection_ty(&mut self, projection_ty: &ProjectionTy) {\n+        self.add_substs(projection_ty.trait_ref.substs);\n+    }\n+\n     fn add_substs(&mut self, substs: &Substs) {\n         self.add_tys(substs.types.as_slice());\n         match substs.regions {"}, {"sha": "fb44d0cadfa6c8f50ba5965078236e948fc5b331", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -1430,7 +1430,7 @@ impl<'tcx> UserString<'tcx> for ty::ProjectionPredicate<'tcx> {\n impl<'tcx> Repr<'tcx> for ty::ProjectionTy<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         format!(\"<{} as {}>::{}\",\n-                self.trait_ref.self_ty().repr(tcx),\n+                self.trait_ref.substs.self_ty().repr(tcx),\n                 self.trait_ref.repr(tcx),\n                 self.item_name.repr(tcx))\n     }"}, {"sha": "3eee4637de1995322030c5224f7d65de8cf50946", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -217,12 +217,15 @@ pub fn type_needs_drop<'tcx>(cx: &ty::ctxt<'tcx>,\n     ty::type_contents(cx, ty).needs_drop(cx)\n }\n \n-fn type_is_newtype_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                   ty: Ty<'tcx>) -> bool {\n+fn type_is_newtype_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n         ty::ty_struct(def_id, substs) => {\n-            let fields = ty::struct_fields(ccx.tcx(), def_id, substs);\n-            fields.len() == 1 && type_is_immediate(ccx, fields[0].mt.ty)\n+            let fields = ty::lookup_struct_fields(ccx.tcx(), def_id);\n+            fields.len() == 1 && {\n+                let ty = ty::lookup_field_type(ccx.tcx(), def_id, fields[0].id, substs);\n+                let ty = monomorphize::normalize_associated_type(ccx.tcx(), &ty);\n+                type_is_immediate(ccx, ty)\n+            }\n         }\n         _ => false\n     }"}, {"sha": "0ef0fa6dfe6e880239f2feaf364f3696fa9b7840", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 22, "deletions": 58, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -323,28 +323,26 @@ impl<'tcx> TypeMap<'tcx> {\n     fn get_unique_type_id_of_type<'a>(&mut self, cx: &CrateContext<'a, 'tcx>,\n                                       type_: Ty<'tcx>) -> UniqueTypeId {\n \n-        // basic type               -> {:name of the type:}\n-        // tuple                    -> {tuple_(:param-uid:)*}\n-        // struct                   -> {struct_:svh: / :node-id:_<(:param-uid:),*> }\n-        // enum                     -> {enum_:svh: / :node-id:_<(:param-uid:),*> }\n-        // enum variant             -> {variant_:variant-name:_:enum-uid:}\n-        // reference (&)            -> {& :pointee-uid:}\n-        // mut reference (&mut)     -> {&mut :pointee-uid:}\n-        // ptr (*)                  -> {* :pointee-uid:}\n-        // mut ptr (*mut)           -> {*mut :pointee-uid:}\n-        // unique ptr (~)           -> {~ :pointee-uid:}\n-        // @-ptr (@)                -> {@ :pointee-uid:}\n-        // sized vec ([T; x])       -> {[:size:] :element-uid:}\n-        // unsized vec ([T])        -> {[] :element-uid:}\n-        // trait (T)                -> {trait_:svh: / :node-id:_<(:param-uid:),*> }\n-        // closure                  -> {<unsafe_> <once_> :store-sigil:\n-        //                                  |(:param-uid:),* <,_...>| -> \\\n-        //                                  :return-type-uid: : (:bounds:)*}\n-        // function                 -> {<unsafe_> <abi_> fn( (:param-uid:)* <,_...> ) -> \\\n-        //                                  :return-type-uid:}\n-        // unique vec box (~[])     -> {HEAP_VEC_BOX<:pointee-uid:>}\n-        // gc box                   -> {GC_BOX<:pointee-uid:>}\n-        // projection (<T as U>::V) -> {<:ty-uid: as :trait-uid:> :: :name-uid: }\n+        // basic type           -> {:name of the type:}\n+        // tuple                -> {tuple_(:param-uid:)*}\n+        // struct               -> {struct_:svh: / :node-id:_<(:param-uid:),*> }\n+        // enum                 -> {enum_:svh: / :node-id:_<(:param-uid:),*> }\n+        // enum variant         -> {variant_:variant-name:_:enum-uid:}\n+        // reference (&)        -> {& :pointee-uid:}\n+        // mut reference (&mut) -> {&mut :pointee-uid:}\n+        // ptr (*)              -> {* :pointee-uid:}\n+        // mut ptr (*mut)       -> {*mut :pointee-uid:}\n+        // unique ptr (~)       -> {~ :pointee-uid:}\n+        // @-ptr (@)            -> {@ :pointee-uid:}\n+        // sized vec ([T; x])   -> {[:size:] :element-uid:}\n+        // unsized vec ([T])    -> {[] :element-uid:}\n+        // trait (T)            -> {trait_:svh: / :node-id:_<(:param-uid:),*> }\n+        // closure              -> {<unsafe_> <once_> :store-sigil: |(:param-uid:),* <,_...>| -> \\\n+        //                             :return-type-uid: : (:bounds:)*}\n+        // function             -> {<unsafe_> <abi_> fn( (:param-uid:)* <,_...> ) -> \\\n+        //                             :return-type-uid:}\n+        // unique vec box (~[]) -> {HEAP_VEC_BOX<:pointee-uid:>}\n+        // gc box               -> {GC_BOX<:pointee-uid:>}\n \n         match self.type_to_unique_id.get(&type_).cloned() {\n             Some(unique_type_id) => return unique_type_id,\n@@ -437,25 +435,6 @@ impl<'tcx> TypeMap<'tcx> {\n                                        principal.substs,\n                                        &mut unique_type_id);\n             },\n-            ty::ty_projection(ref projection) => {\n-                unique_type_id.push_str(\"<\");\n-\n-                let self_ty = projection.trait_ref.self_ty();\n-                let self_type_id = self.get_unique_type_id_of_type(cx, self_ty);\n-                let self_type_id = self.get_unique_type_id_as_string(self_type_id);\n-                unique_type_id.push_str(&self_type_id[]);\n-\n-                unique_type_id.push_str(\" as \");\n-\n-                from_def_id_and_substs(self,\n-                                       cx,\n-                                       projection.trait_ref.def_id,\n-                                       projection.trait_ref.substs,\n-                                       &mut unique_type_id);\n-\n-                unique_type_id.push_str(\">::\");\n-                unique_type_id.push_str(token::get_name(projection.item_name).get());\n-            },\n             ty::ty_bare_fn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n                 if unsafety == ast::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n@@ -499,10 +478,7 @@ impl<'tcx> TypeMap<'tcx> {\n                                                         closure_ty,\n                                                         &mut unique_type_id);\n             },\n-            ty::ty_err |\n-            ty::ty_infer(_) |\n-            ty::ty_open(_) |\n-            ty::ty_param(_) => {\n+            _ => {\n                 cx.sess().bug(&format!(\"get_unique_type_id_of_type() - unexpected type: {}, {:?}\",\n                                       &ppaux::ty_to_string(cx.tcx(), type_)[],\n                                       type_.sty)[])\n@@ -3880,22 +3856,10 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_unboxed_closure(..) => {\n             output.push_str(\"closure\");\n         }\n-        ty::ty_projection(ref projection) => {\n-            output.push_str(\"<\");\n-            let self_ty = projection.trait_ref.self_ty();\n-            push_debuginfo_type_name(cx, self_ty, true, output);\n-\n-            output.push_str(\" as \");\n-\n-            push_item_name(cx, projection.trait_ref.def_id, false, output);\n-            push_type_params(cx, projection.trait_ref.substs, output);\n-\n-            output.push_str(\">::\");\n-            output.push_str(token::get_name(projection.item_name).get());\n-        }\n         ty::ty_err |\n         ty::ty_infer(_) |\n         ty::ty_open(_) |\n+        ty::ty_projection(..) |\n         ty::ty_param(_) => {\n             cx.sess().bug(&format!(\"debuginfo: Trying to create type name for \\\n                 unexpected type: {}\", ppaux::ty_to_string(cx.tcx(), t))[]);"}, {"sha": "f2927dfd843400551699b78d77612a71bd5127c7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 45, "deletions": 29, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -516,8 +516,15 @@ pub fn instantiate_poly_trait_ref<'tcx>(\n {\n     let mut projections = Vec::new();\n \n+    // the trait reference introduces a binding level here, so\n+    // we need to shift the `rscope`. It'd be nice if we could\n+    // do away with this rscope stuff and work this knowledge\n+    // into resolve_lifetimes, as we do with non-omitted\n+    // lifetimes. Oh well, not there yet.\n+    let shifted_rscope = ShiftedRscope::new(rscope);\n+\n     let trait_ref =\n-        instantiate_trait_ref(this, rscope, &ast_trait_ref.trait_ref,\n+        instantiate_trait_ref(this, &shifted_rscope, &ast_trait_ref.trait_ref,\n                               self_ty, Some(&mut projections));\n \n     for projection in projections.into_iter() {\n@@ -561,6 +568,29 @@ pub fn instantiate_trait_ref<'tcx>(\n     }\n }\n \n+fn object_path_to_poly_trait_ref<'a,'tcx>(\n+    this: &AstConv<'tcx>,\n+    rscope: &RegionScope,\n+    trait_def_id: ast::DefId,\n+    path: &ast::Path,\n+    mut projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n+    -> ty::PolyTraitRef<'tcx>\n+{\n+    // we are introducing a binder here, so shift the\n+    // anonymous regions depth to account for that\n+    let shifted_rscope = ShiftedRscope::new(rscope);\n+\n+    let mut tmp = Vec::new();\n+    let trait_ref = ty::Binder(ast_path_to_trait_ref(this,\n+                                                     &shifted_rscope,\n+                                                     trait_def_id,\n+                                                     None,\n+                                                     path,\n+                                                     Some(&mut tmp)));\n+    projections.extend(tmp.into_iter().map(ty::Binder));\n+    trait_ref\n+}\n+\n fn ast_path_to_trait_ref<'a,'tcx>(\n     this: &AstConv<'tcx>,\n     rscope: &RegionScope,\n@@ -573,13 +603,6 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n     debug!(\"ast_path_to_trait_ref {:?}\", path);\n     let trait_def = this.get_trait_def(trait_def_id);\n \n-    // the trait reference introduces a binding level here, so\n-    // we need to shift the `rscope`. It'd be nice if we could\n-    // do away with this rscope stuff and work this knowledge\n-    // into resolve_lifetimes, as we do with non-omitted\n-    // lifetimes. Oh well, not there yet.\n-    let shifted_rscope = ShiftedRscope::new(rscope);\n-\n     let (regions, types, assoc_bindings) = match path.segments.last().unwrap().parameters {\n         ast::AngleBracketedParameters(ref data) => {\n             // For now, require that parenthetical notation be used\n@@ -595,7 +618,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n                             the crate attributes to enable\");\n             }\n \n-            convert_angle_bracketed_parameters(this, &shifted_rscope, data)\n+            convert_angle_bracketed_parameters(this, rscope, data)\n         }\n         ast::ParenthesizedParameters(ref data) => {\n             // For now, require that parenthetical notation be used\n@@ -616,7 +639,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n     };\n \n     let substs = create_substs_for_ast_path(this,\n-                                            &shifted_rscope,\n+                                            rscope,\n                                             path.span,\n                                             &trait_def.generics,\n                                             self_ty,\n@@ -851,15 +874,11 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n             match this.tcx().def_map.borrow().get(&id) {\n                 Some(&def::DefTrait(trait_def_id)) => {\n                     let mut projection_bounds = Vec::new();\n-                    let trait_ref = ty::Binder(ast_path_to_trait_ref(this,\n-                                                                     rscope,\n-                                                                     trait_def_id,\n-                                                                     None,\n-                                                                     path,\n-                                                                     Some(&mut projection_bounds)));\n-                    let projection_bounds = projection_bounds.into_iter()\n-                                                             .map(ty::Binder)\n-                                                             .collect();\n+                    let trait_ref = object_path_to_poly_trait_ref(this,\n+                                                                  rscope,\n+                                                                  trait_def_id,\n+                                                                  path,\n+                                                                  &mut projection_bounds);\n                     Ok((trait_ref, projection_bounds))\n                 }\n                 _ => {\n@@ -1098,16 +1117,13 @@ pub fn ast_ty_to_ty<'tcx>(\n                         // N.B. this case overlaps somewhat with\n                         // TyObjectSum, see that fn for details\n                         let mut projection_bounds = Vec::new();\n-                        let trait_ref = ast_path_to_trait_ref(this,\n-                                                              rscope,\n-                                                              trait_def_id,\n-                                                              None,\n-                                                              path,\n-                                                              Some(&mut projection_bounds));\n-                        let trait_ref = ty::Binder(trait_ref);\n-                        let projection_bounds = projection_bounds.into_iter()\n-                                                                 .map(ty::Binder)\n-                                                                 .collect();\n+\n+                        let trait_ref = object_path_to_poly_trait_ref(this,\n+                                                                      rscope,\n+                                                                      trait_def_id,\n+                                                                      path,\n+                                                                      &mut projection_bounds);\n+\n                         trait_ref_to_object_type(this, rscope, path.span,\n                                                  trait_ref, projection_bounds, &[])\n                     }"}, {"sha": "aaf45f27398914cdc84574b3c91c73fbb0ec22ac", "filename": "src/test/compile-fail/issue-20831-debruijn.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #20831: debruijn index account was thrown off\n+// by the (anonymous) lifetime in `<Self as Publisher>::Output`\n+// below. Note that changing to a named lifetime made the problem go\n+// away.\n+\n+use std::ops::{Shl, Shr};\n+use std::cell::RefCell;\n+\n+pub trait Subscriber {\n+    type Input;\n+}\n+\n+pub trait Publisher<'a> {\n+    type Output;\n+    fn subscribe(&mut self, Box<Subscriber<Input=Self::Output> + 'a>);\n+}\n+\n+pub trait Processor<'a> : Subscriber + Publisher<'a> { }\n+\n+impl<'a, P> Processor<'a> for P where P : Subscriber + Publisher<'a> { }\n+\n+struct MyStruct<'a> {\n+    sub: Box<Subscriber<Input=u64> + 'a>\n+}\n+\n+impl<'a> Publisher<'a> for MyStruct<'a> {\n+    type Output = u64;\n+    fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+        // Not obvious, but there is an implicit lifetime here -------^\n+        //~^^ ERROR cannot infer\n+        //\n+        // The fact that `Publisher` is using an implicit lifetime is\n+        // what was causing the debruijn accounting to be off, so\n+        // leave it that way!\n+        self.sub = t;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c517f61de0c16d076ba2087c8dde81e891013c3c", "filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #21010: Normalize associated types in\n+// various special paths in the `type_is_immediate` function.\n+\n+#![allow(unstable)]\n+\n+pub trait OffsetState: Sized {}\n+pub trait Offset { type State: OffsetState; }\n+\n+#[derive(Copy)] pub struct X;\n+impl Offset for X { type State = Y; }\n+\n+#[derive(Copy)] pub struct Y;\n+impl OffsetState for Y {}\n+\n+pub fn now() -> DateTime<X> { from_utc(Y) }\n+\n+pub struct DateTime<Off: Offset> { pub offset: Off::State }\n+pub fn from_utc<Off: Offset>(offset: Off::State) -> DateTime<Off> { DateTime { offset: offset } }\n+\n+pub fn main() {\n+    let _x = now();\n+}"}, {"sha": "44dd49b72976edc3aafd4b3d859844ef903f32ee", "filename": "src/test/run-pass/associated-types-projection-in-object-type.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Corrected regression test for #20831. The original did not compile.\n+// When fixed, it revealed another problem concerning projections that\n+// appear in associated type bindings in object types, which were not\n+// being properly flagged.\n+\n+use std::ops::{Shl, Shr};\n+use std::cell::RefCell;\n+\n+pub trait Subscriber {\n+    type Input;\n+}\n+\n+pub trait Publisher<'a> {\n+    type Output;\n+    fn subscribe(&mut self, Box<Subscriber<Input=Self::Output> + 'a>);\n+}\n+\n+pub trait Processor<'a> : Subscriber + Publisher<'a> { }\n+\n+impl<'a, P> Processor<'a> for P where P : Subscriber + Publisher<'a> { }\n+\n+struct MyStruct<'a> {\n+    sub: Box<Subscriber<Input=u64> + 'a>\n+}\n+\n+impl<'a> Publisher<'a> for MyStruct<'a> {\n+    type Output = u64;\n+    fn subscribe(&mut self, t : Box<Subscriber<Input=u64> + 'a>) {\n+        self.sub = t;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b9d3ed49c625f6bb1376a2993c18d294e8d45883", "filename": "src/test/run-pass/regions-debruijn-of-object.rs", "status": "renamed", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/692d9426e77757c976cfb841105c159af2385d36/src%2Ftest%2Frun-pass%2Fregions-debruijn-of-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692d9426e77757c976cfb841105c159af2385d36/src%2Ftest%2Frun-pass%2Fregions-debruijn-of-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-debruijn-of-object.rs?ref=692d9426e77757c976cfb841105c159af2385d36", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,21 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-android: FIXME(#10381)\n-// min-lldb-version: 310\n-\n-// compile-flags:-g\n+struct ctxt<'tcx> {\n+    x: &'tcx i32\n+}\n \n-struct Peekable<I> where I: Iterator {\n-    _iter: I,\n-    _next: Option<<I as Iterator>::Item>,\n+trait AstConv<'tcx> {\n+    fn tcx<'a>(&'a self) -> &'a ctxt<'tcx>;\n }\n \n-fn main() {\n-    let mut iter = Vec::<i32>::new().into_iter();\n-    let next = iter.next();\n-    let _v = Peekable {\n-        _iter: iter,\n-        _next : next,\n-    };\n+fn foo(conv: &AstConv) { }\n+\n+fn bar<'tcx>(conv: &AstConv<'tcx>) {\n+    foo(conv)\n }\n+\n+fn main() { }", "previous_filename": "src/test/debuginfo/associated_types.rs"}]}