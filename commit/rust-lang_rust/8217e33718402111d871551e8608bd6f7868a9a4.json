{"sha": "8217e33718402111d871551e8608bd6f7868a9a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMTdlMzM3MTg0MDIxMTFkODcxNTUxZTg2MDhiZDZmNzg2OGE5YTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-18T13:27:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-18T13:27:47Z"}, "message": "Only suggest implementing Copy if it can actually be done", "tree": {"sha": "01caa7b16655fced3f9f58eeac255e95c483297a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01caa7b16655fced3f9f58eeac255e95c483297a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8217e33718402111d871551e8608bd6f7868a9a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlpgoNMACgkQpp+NIls6\n19lgwA//dsIyXwN3uxstoRwjBjOgqrSyz+9xccvPAeVDlisT88FNRTZV2NdvjFQQ\n4aQAlWAY75nXDKAYPlH05ZfPElnQGKzU2x/NpNmwlU+10SOxWl830eFjKXZpmLl1\nKwPcKZ/0Bo1jfnZSadbtXNAA3EZSPhfv/wFuTHv2Vj/5CyV/78qU/XIj7dItoUtC\nL6cWLalmK2aMlOKuVK4bG4Volqa5tT2+wOTbQkXDHogQk/w+SXk1unYkJt3ulHXV\nBhO8+/pMxQRH1NLRw7Juu/E49NaabPPicmPI9vyNAQUF4ef9WsWW9m1iPCjL1zFv\nfw4TMWuiJ8MBMU9PQuEbR9Cg7l9Y0Ldy2lkXaHLVnZ48JXQBRcQyGWfPlL5lovg3\nBtM7oRKsp9i27mvvmXm04sEfdPcxd9DwFRyG38jqCcrOm4OirJu5KOHWhKxhSKZS\nVwsRjp+1vgF3Nryarz30U7v+1zZLkiRzeX/KhnZWx1w7xWWKpckarGrJkuhfDMmg\n3JX4v42ddI4S/bBGIH08hpMVVnzq0RLmFXT1N6+XQTK94Pu8tfT+yDFUBjkccWZm\n+LngaKx9zPrF8oGetFFnv90on7ZM0zGnFymJ/iZXEy+SO7i495tG6Av9WQ0KAxkJ\nEQbLqUYsMbpu/LRMKNodStX0+KHs/mh57OxuhPZlaBiJtkA//Kw=\n=SZ99\n-----END PGP SIGNATURE-----", "payload": "tree 01caa7b16655fced3f9f58eeac255e95c483297a\nparent 552e950080f4fa2a4570e9719f2b4f7effed047e\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516282067 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516282067 +0100\n\nOnly suggest implementing Copy if it can actually be done\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8217e33718402111d871551e8608bd6f7868a9a4", "html_url": "https://github.com/rust-lang/rust/commit/8217e33718402111d871551e8608bd6f7868a9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8217e33718402111d871551e8608bd6f7868a9a4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552e950080f4fa2a4570e9719f2b4f7effed047e", "url": "https://api.github.com/repos/rust-lang/rust/commits/552e950080f4fa2a4570e9719f2b4f7effed047e", "html_url": "https://github.com/rust-lang/rust/commit/552e950080f4fa2a4570e9719f2b4f7effed047e"}], "stats": {"total": 105, "additions": 80, "deletions": 25}, "files": [{"sha": "21a7542e6c766a65a10459d12d819673ded75605", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8217e33718402111d871551e8608bd6f7868a9a4/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8217e33718402111d871551e8608bd6f7868a9a4/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8217e33718402111d871551e8608bd6f7868a9a4", "patch": "@@ -205,8 +205,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                     let sugg = |db: &mut DiagnosticBuilder| {\n                         if let ty::TypeVariants::TyAdt(ref def, ..) = ty.sty {\n                             if let Some(span) = cx.tcx.hir.span_if_local(def.did) {\n-                                // FIXME (#2374) Restrict this to types which can impl Copy\n-                                db.span_help(span, \"consider marking this type as Copy if possible\");\n+                                let param_env = ty::ParamEnv::empty(traits::Reveal::UserFacing);\n+                                if param_env.can_type_implement_copy(cx.tcx, ty, span).is_ok() {\n+                                    db.span_help(span, \"consider marking this type as Copy\");\n+                                }\n                             }\n                         }\n "}, {"sha": "6e87fcc7b44f85f062df63e0b94b8b88253c00d0", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8217e33718402111d871551e8608bd6f7868a9a4/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8217e33718402111d871551e8608bd6f7868a9a4/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=8217e33718402111d871551e8608bd6f7868a9a4", "patch": "@@ -120,4 +120,21 @@ fn range<T: ::std::collections::range::RangeArgument<usize>>(range: T) {\n     let _ = range.start();\n }\n \n+struct CopyWrapper(u32);\n+\n+fn bar_copy(x: u32, y: CopyWrapper) {\n+    assert_eq!(x, 42);\n+    assert_eq!(y.0, 42);\n+}\n+\n+// x and y should be warned, but z is ok\n+fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    let CopyWrapper(s) = z; // moved\n+    let CopyWrapper(ref t) = y; // not moved\n+    let CopyWrapper(_) = y; // still not moved\n+\n+    assert_eq!(x.0, s);\n+    println!(\"{}\", t);\n+}\n+\n fn main() {}"}, {"sha": "469c16fa3d5bf080b4bf9d242049b3fcd6502759", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8217e33718402111d871551e8608bd6f7868a9a4/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8217e33718402111d871551e8608bd6f7868a9a4/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=8217e33718402111d871551e8608bd6f7868a9a4", "patch": "@@ -17,12 +17,6 @@ error: this argument is passed by value, but not consumed in the function body\n    |\n 28 | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n-   |\n-help: consider marking this type as Copy if possible\n-  --> $DIR/needless_pass_by_value.rs:26:1\n-   |\n-26 | struct Wrapper(String);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:34:71\n@@ -46,24 +40,12 @@ error: this argument is passed by value, but not consumed in the function body\n    |\n 59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n-   |\n-help: consider marking this type as Copy if possible\n-  --> $DIR/needless_pass_by_value.rs:26:1\n-   |\n-26 | struct Wrapper(String);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:59:36\n    |\n 59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^\n-   |\n-help: consider marking this type as Copy if possible\n-  --> $DIR/needless_pass_by_value.rs:26:1\n-   |\n-26 | struct Wrapper(String);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider taking a reference instead\n    |\n 59 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n@@ -141,12 +123,66 @@ error: this argument is passed by value, but not consumed in the function body\n     |\n 103 |         _s: Self,\n     |             ^^^^ help: consider taking a reference instead: `&Self`\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:125:24\n+    |\n+125 | fn bar_copy(x: u32, y: CopyWrapper) {\n+    |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:29\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:45\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                                             ^^^^^^^^^^^\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider taking a reference instead\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: &CopyWrapper, z: CopyWrapper) {\n+132 |     let CopyWrapper(s) = z; // moved\n+133 |     let CopyWrapper(ref t) = *y; // not moved\n+134 |     let CopyWrapper(_) = *y; // still not moved\n+    |\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:61\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                                                             ^^^^^^^^^^^\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider taking a reference instead\n     |\n-help: consider marking this type as Copy if possible\n-   --> $DIR/needless_pass_by_value.rs:84:1\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: &CopyWrapper) {\n+132 |     let CopyWrapper(s) = *z; // moved\n     |\n-84  | struct S<T, U>(T, U);\n-    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 20 previous errors\n "}]}