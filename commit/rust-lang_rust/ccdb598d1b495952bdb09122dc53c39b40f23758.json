{"sha": "ccdb598d1b495952bdb09122dc53c39b40f23758", "node_id": "C_kwDOAAsO6NoAKGNjZGI1OThkMWI0OTU5NTJiZGIwOTEyMmRjNTNjMzliNDBmMjM3NTg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-18T10:10:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-18T10:45:01Z"}, "message": "rustdoc: Cleanup broken link callbacks", "tree": {"sha": "a21f00dcb8eae10686b34051bf36fb1a816547c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a21f00dcb8eae10686b34051bf36fb1a816547c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccdb598d1b495952bdb09122dc53c39b40f23758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccdb598d1b495952bdb09122dc53c39b40f23758", "html_url": "https://github.com/rust-lang/rust/commit/ccdb598d1b495952bdb09122dc53c39b40f23758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccdb598d1b495952bdb09122dc53c39b40f23758/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34ba77d26064f9038fddd5349ceede088f8557f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/34ba77d26064f9038fddd5349ceede088f8557f9", "html_url": "https://github.com/rust-lang/rust/commit/34ba77d26064f9038fddd5349ceede088f8557f9"}], "stats": {"total": 101, "additions": 43, "deletions": 58}, "files": [{"sha": "be49fbfaa2950038a09cb10ab5da9ca4a58474cc", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ccdb598d1b495952bdb09122dc53c39b40f23758/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccdb598d1b495952bdb09122dc53c39b40f23758/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=ccdb598d1b495952bdb09122dc53c39b40f23758", "patch": "@@ -5,7 +5,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n-use std::cell::RefCell;\n use std::{cmp, mem};\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n@@ -354,16 +353,14 @@ pub(crate) fn attrs_to_preprocessed_links(attrs: &[ast::Attribute]) -> Vec<Strin\n     let (doc_fragments, _) = attrs_to_doc_fragments(attrs.iter().map(|attr| (attr, None)), true);\n     let doc = prepare_to_doc_link_resolution(&doc_fragments).into_values().next().unwrap();\n \n-    let links = RefCell::new(Vec::new());\n-    let mut callback = |link: BrokenLink<'_>| {\n-        links.borrow_mut().push(preprocess_link(&link.reference));\n-        None\n-    };\n-    for event in Parser::new_with_broken_link_callback(&doc, main_body_opts(), Some(&mut callback))\n-    {\n-        if let Event::Start(Tag::Link(_, dest, _)) = event {\n-            links.borrow_mut().push(preprocess_link(&dest));\n-        }\n-    }\n-    links.into_inner()\n+    Parser::new_with_broken_link_callback(\n+        &doc,\n+        main_body_opts(),\n+        Some(&mut |link: BrokenLink<'_>| Some((link.reference, \"\".into()))),\n+    )\n+    .filter_map(|event| match event {\n+        Event::Start(Tag::Link(_, dest, _)) => Some(preprocess_link(&dest)),\n+        _ => None,\n+    })\n+    .collect()\n }"}, {"sha": "a34628991b24a5821bf4810e0e83a4a9c36e3ed8", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ccdb598d1b495952bdb09122dc53c39b40f23758/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccdb598d1b495952bdb09122dc53c39b40f23758/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ccdb598d1b495952bdb09122dc53c39b40f23758", "patch": "@@ -34,7 +34,6 @@ use rustc_span::{Span, Symbol};\n \n use once_cell::sync::Lazy;\n use std::borrow::Cow;\n-use std::cell::RefCell;\n use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt::Write;\n@@ -1226,14 +1225,12 @@ pub(crate) struct MarkdownLink {\n \n pub(crate) fn markdown_links<R>(\n     md: &str,\n-    filter_map: impl Fn(MarkdownLink) -> Option<R>,\n+    preprocess_link: impl Fn(MarkdownLink) -> Option<R>,\n ) -> Vec<R> {\n     if md.is_empty() {\n         return vec![];\n     }\n \n-    let links = RefCell::new(vec![]);\n-\n     // FIXME: remove this function once pulldown_cmark can provide spans for link definitions.\n     let locate = |s: &str, fallback: Range<usize>| unsafe {\n         let s_start = s.as_ptr();\n@@ -1265,21 +1262,14 @@ pub(crate) fn markdown_links<R>(\n         }\n     };\n \n-    let mut push = |link: BrokenLink<'_>| {\n-        let span = span_for_link(&link.reference, link.span);\n-        filter_map(MarkdownLink {\n-            kind: LinkType::ShortcutUnknown,\n-            link: link.reference.to_string(),\n-            range: span,\n-        })\n-        .map(|link| links.borrow_mut().push(link));\n-        None\n-    };\n-\n-    for ev in Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut push))\n-        .into_offset_iter()\n-    {\n-        if let Event::Start(Tag::Link(\n+    Parser::new_with_broken_link_callback(\n+        md,\n+        main_body_opts(),\n+        Some(&mut |link: BrokenLink<'_>| Some((link.reference, \"\".into()))),\n+    )\n+    .into_offset_iter()\n+    .filter_map(|(event, span)| match event {\n+        Event::Start(Tag::Link(\n             // `<>` links cannot be intra-doc links so we skip them.\n             kind @ (LinkType::Inline\n             | LinkType::Reference\n@@ -1290,16 +1280,14 @@ pub(crate) fn markdown_links<R>(\n             | LinkType::ShortcutUnknown),\n             dest,\n             _,\n-        )) = ev.0\n-        {\n-            debug!(\"found link: {dest}\");\n-            let span = span_for_link(&dest, ev.1);\n-            filter_map(MarkdownLink { kind, link: dest.into_string(), range: span })\n-                .map(|link| links.borrow_mut().push(link));\n-        }\n-    }\n-\n-    links.into_inner()\n+        )) => preprocess_link(MarkdownLink {\n+            kind,\n+            range: span_for_link(&dest, span),\n+            link: dest.into_string(),\n+        }),\n+        _ => None,\n+    })\n+    .collect()\n }\n \n #[derive(Debug)]"}, {"sha": "741a7f51a77e25a04d6cb5eaf0cc22987772ea97", "filename": "tests/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ccdb598d1b495952bdb09122dc53c39b40f23758/tests%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccdb598d1b495952bdb09122dc53c39b40f23758/tests%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=ccdb598d1b495952bdb09122dc53c39b40f23758", "patch": "@@ -20,22 +20,6 @@ LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |\n    = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n-error: unknown disambiguator `foo`\n-  --> $DIR/unknown-disambiguator.rs:10:34\n-   |\n-LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n-   |                                  ^^^\n-   |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n-\n-error: unknown disambiguator `foo`\n-  --> $DIR/unknown-disambiguator.rs:10:48\n-   |\n-LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n-   |                                                ^^^\n-   |\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n-\n error: unknown disambiguator ``\n   --> $DIR/unknown-disambiguator.rs:7:31\n    |\n@@ -52,5 +36,21 @@ LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n    |\n    = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:10:34\n+   |\n+LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+   |                                  ^^^\n+   |\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:10:48\n+   |\n+LL | //! And with weird backticks: [``foo@hello``] [foo`@`hello].\n+   |                                                ^^^\n+   |\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/write-documentation/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n+\n error: aborting due to 6 previous errors\n "}]}