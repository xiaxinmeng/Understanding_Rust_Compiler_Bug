{"sha": "d58dd10f5ad1e0b91ee6de3b6add0e1a20f8a311", "node_id": "C_kwDOAAsO6NoAKGQ1OGRkMTBmNWFkMWUwYjkxZWU2ZGUzYjZhZGQwZTFhMjBmOGEzMTE", "commit": {"author": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2022-03-22T04:56:06Z"}, "committer": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2023-05-19T22:20:39Z"}, "message": "Add slice::{split_,}{first,last}_chunk{,_mut}", "tree": {"sha": "48d05317b4add34035702f74c342933c52556345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d05317b4add34035702f74c342933c52556345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d58dd10f5ad1e0b91ee6de3b6add0e1a20f8a311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d58dd10f5ad1e0b91ee6de3b6add0e1a20f8a311", "html_url": "https://github.com/rust-lang/rust/commit/d58dd10f5ad1e0b91ee6de3b6add0e1a20f8a311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d58dd10f5ad1e0b91ee6de3b6add0e1a20f8a311/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45", "html_url": "https://github.com/rust-lang/rust/commit/8a281f9c796ee8cbebb07bbeec04ef2f2dd8db45"}], "stats": {"total": 258, "additions": 258, "deletions": 0}, "files": [{"sha": "96d63cb727e9262091c79116a40bef6441ff94b5", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/rust-lang/rust/blob/d58dd10f5ad1e0b91ee6de3b6add0e1a20f8a311/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d58dd10f5ad1e0b91ee6de3b6add0e1a20f8a311/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=d58dd10f5ad1e0b91ee6de3b6add0e1a20f8a311", "patch": "@@ -319,6 +319,264 @@ impl<T> [T] {\n         if let [.., last] = self { Some(last) } else { None }\n     }\n \n+    /// Returns the first `N` elements of the slice, or `None` if it has fewer than `N` elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_first_last_chunk)]\n+    ///\n+    /// let u = [10, 40, 30];\n+    /// assert_eq!(Some(&[10, 40]), u.first_chunk::<2>());\n+    ///\n+    /// let v: &[i32] = &[10];\n+    /// assert_eq!(None, v.first_chunk::<2>());\n+    ///\n+    /// let w: &[i32] = &[];\n+    /// assert_eq!(Some(&[]), w.first_chunk::<0>());\n+    /// ```\n+    #[unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[rustc_const_unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[inline]\n+    pub const fn first_chunk<const N: usize>(&self) -> Option<&[T; N]> {\n+        if self.len() < N {\n+            None\n+        } else {\n+            // SAFETY: We explicitly check for the correct number of elements,\n+            //   and do not let the reference outlive the slice.\n+            Some(unsafe { &*(self.as_ptr() as *const [T; N]) })\n+        }\n+    }\n+\n+    /// Returns a mutable reference to the first `N` elements of the slice,\n+    /// or `None` if it has fewer than `N` elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_first_last_chunk)]\n+    ///\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some(first) = x.first_chunk_mut::<2>() {\n+    ///     first[0] = 5;\n+    ///     first[1] = 4;\n+    /// }\n+    /// assert_eq!(x, &[5, 4, 2]);\n+    /// ```\n+    #[unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[rustc_const_unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[inline]\n+    pub const fn first_chunk_mut<const N: usize>(&mut self) -> Option<&mut [T; N]> {\n+        if self.len() < N {\n+            None\n+        } else {\n+            // SAFETY: We explicitly check for the correct number of elements,\n+            //   do not let the reference outlive the slice,\n+            //   and require exclusive access to the entire slice to mutate the chunk.\n+            Some(unsafe { &mut *(self.as_mut_ptr() as *mut [T; N]) })\n+        }\n+    }\n+\n+    /// Returns the first `N` elements of the slice and the remainder,\n+    /// or `None` if it has fewer than `N` elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_first_last_chunk)]\n+    ///\n+    /// let x = &[0, 1, 2];\n+    ///\n+    /// if let Some((first, elements)) = x.split_first_chunk::<2>() {\n+    ///     assert_eq!(first, &[0, 1]);\n+    ///     assert_eq!(elements, &[2]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[rustc_const_unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[inline]\n+    pub const fn split_first_chunk<const N: usize>(&self) -> Option<(&[T; N], &[T])> {\n+        if self.len() < N {\n+            None\n+        } else {\n+            // SAFETY: We manually verified the bounds of the split.\n+            let (first, tail) = unsafe { self.split_at_unchecked(N) };\n+\n+            // SAFETY: We explicitly check for the correct number of elements,\n+            //   and do not let the references outlive the slice.\n+            Some((unsafe { &*(first.as_ptr() as *const [T; N]) }, tail))\n+        }\n+    }\n+\n+    /// Returns a mutable reference to the first `N` elements of the slice and the remainder,\n+    /// or `None` if it has fewer than `N` elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_first_last_chunk)]\n+    ///\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some((first, elements)) = x.split_first_chunk_mut::<2>() {\n+    ///     first[0] = 3;\n+    ///     first[1] = 4;\n+    ///     elements[0] = 5;\n+    /// }\n+    /// assert_eq!(x, &[3, 4, 5]);\n+    /// ```\n+    #[unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[rustc_const_unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[inline]\n+    pub const fn split_first_chunk_mut<const N: usize>(\n+        &mut self,\n+    ) -> Option<(&mut [T; N], &mut [T])> {\n+        if self.len() < N {\n+            None\n+        } else {\n+            // SAFETY: We manually verified the bounds of the split.\n+            let (first, tail) = unsafe { self.split_at_mut_unchecked(N) };\n+\n+            // SAFETY: We explicitly check for the correct number of elements,\n+            //   do not let the reference outlive the slice,\n+            //   and enforce exclusive mutability of the chunk by the split.\n+            Some((unsafe { &mut *(first.as_mut_ptr() as *mut [T; N]) }, tail))\n+        }\n+    }\n+\n+    /// Returns the last `N` elements of the slice and the remainder,\n+    /// or `None` if it has fewer than `N` elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_first_last_chunk)]\n+    ///\n+    /// let x = &[0, 1, 2];\n+    ///\n+    /// if let Some((last, elements)) = x.split_last_chunk::<2>() {\n+    ///     assert_eq!(last, &[1, 2]);\n+    ///     assert_eq!(elements, &[0]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[rustc_const_unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[inline]\n+    pub const fn split_last_chunk<const N: usize>(&self) -> Option<(&[T; N], &[T])> {\n+        if self.len() < N {\n+            None\n+        } else {\n+            // SAFETY: We manually verified the bounds of the split.\n+            let (init, last) = unsafe { self.split_at_unchecked(self.len() - N) };\n+\n+            // SAFETY: We explicitly check for the correct number of elements,\n+            //   and do not let the references outlive the slice.\n+            Some((unsafe { &*(last.as_ptr() as *const [T; N]) }, init))\n+        }\n+    }\n+\n+    /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_first_last_chunk)]\n+    ///\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some((last, elements)) = x.split_last_chunk_mut::<2>() {\n+    ///     last[0] = 3;\n+    ///     last[1] = 4;\n+    ///     elements[0] = 5;\n+    /// }\n+    /// assert_eq!(x, &[5, 3, 4]);\n+    /// ```\n+    #[unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[rustc_const_unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[inline]\n+    pub const fn split_last_chunk_mut<const N: usize>(\n+        &mut self,\n+    ) -> Option<(&mut [T; N], &mut [T])> {\n+        if self.len() < N {\n+            None\n+        } else {\n+            // SAFETY: We manually verified the bounds of the split.\n+            let (init, last) = unsafe { self.split_at_mut_unchecked(self.len() - N) };\n+\n+            // SAFETY: We explicitly check for the correct number of elements,\n+            //   do not let the reference outlive the slice,\n+            //   and enforce exclusive mutability of the chunk by the split.\n+            Some((unsafe { &mut *(last.as_mut_ptr() as *mut [T; N]) }, init))\n+        }\n+    }\n+\n+    /// Returns the last element of the slice, or `None` if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_first_last_chunk)]\n+    ///\n+    /// let u = [10, 40, 30];\n+    /// assert_eq!(Some(&[40, 30]), u.last_chunk::<2>());\n+    ///\n+    /// let v: &[i32] = &[10];\n+    /// assert_eq!(None, v.last_chunk::<2>());\n+    ///\n+    /// let w: &[i32] = &[];\n+    /// assert_eq!(Some(&[]), w.last_chunk::<0>());\n+    /// ```\n+    #[unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[rustc_const_unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[inline]\n+    pub const fn last_chunk<const N: usize>(&self) -> Option<&[T; N]> {\n+        if self.len() < N {\n+            None\n+        } else {\n+            // SAFETY: We manually verified the bounds of the slice.\n+            // FIXME: Without const traits, we need this instead of `get_unchecked`.\n+            let last = unsafe { self.split_at_unchecked(self.len() - N).1 };\n+\n+            // SAFETY: We explicitly check for the correct number of elements,\n+            //   and do not let the references outlive the slice.\n+            Some(unsafe { &*(last.as_ptr() as *const [T; N]) })\n+        }\n+    }\n+\n+    /// Returns a mutable pointer to the last item in the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_first_last_chunk)]\n+    ///\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some(last) = x.last_chunk_mut::<2>() {\n+    ///     last[0] = 10;\n+    ///     last[1] = 20;\n+    /// }\n+    /// assert_eq!(x, &[0, 10, 20]);\n+    /// ```\n+    #[unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[rustc_const_unstable(feature = \"slice_first_last_chunk\", issue = \"111774\")]\n+    #[inline]\n+    pub const fn last_chunk_mut<const N: usize>(&mut self) -> Option<&mut [T; N]> {\n+        if self.len() < N {\n+            None\n+        } else {\n+            // SAFETY: We manually verified the bounds of the slice.\n+            // FIXME: Without const traits, we need this instead of `get_unchecked`.\n+            let last = unsafe { self.split_at_mut_unchecked(self.len() - N).1 };\n+\n+            // SAFETY: We explicitly check for the correct number of elements,\n+            //   do not let the reference outlive the slice,\n+            //   and require exclusive access to the entire slice to mutate the chunk.\n+            Some(unsafe { &mut *(last.as_mut_ptr() as *mut [T; N]) })\n+        }\n+    }\n+\n     /// Returns a reference to an element or subslice depending on the type of\n     /// index.\n     ///"}]}