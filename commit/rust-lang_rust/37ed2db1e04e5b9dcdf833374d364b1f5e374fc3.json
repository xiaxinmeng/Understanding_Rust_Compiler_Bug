{"sha": "37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "node_id": "C_kwDOAAsO6NoAKDM3ZWQyZGIxZTA0ZTViOWRjZGY4MzMzNzRkMzY0YjFmNWUzNzRmYzM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-11-07T21:38:33Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-11-07T21:59:41Z"}, "message": "consider unevaluated consts in extract_inference_diagnostics_data", "tree": {"sha": "d43fd6379f076076d82c7c2d92434821005a346f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d43fd6379f076076d82c7c2d92434821005a346f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "html_url": "https://github.com/rust-lang/rust/commit/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae24073687fca6682c351379d41d61397e7c329", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae24073687fca6682c351379d41d61397e7c329", "html_url": "https://github.com/rust-lang/rust/commit/dae24073687fca6682c351379d41d61397e7c329"}], "stats": {"total": 136, "additions": 95, "deletions": 41}, "files": [{"sha": "5b39897bc1d20e227744baad3bca8b4be1acd85c", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 66, "deletions": 26, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "patch": "@@ -1,5 +1,6 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n+use crate::rustc_middle::ty::TypeFoldable;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n@@ -390,36 +391,75 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n             GenericArgKind::Const(ct) => {\n-                if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val {\n-                    let origin =\n-                        self.inner.borrow_mut().const_unification_table().probe_value(vid).origin;\n-                    if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n-                        origin.kind\n-                    {\n-                        return InferenceDiagnosticsData {\n-                            name: name.to_string(),\n+                match ct.val {\n+                    ty::ConstKind::Infer(InferConst::Var(vid)) => {\n+                        let origin = self\n+                            .inner\n+                            .borrow_mut()\n+                            .const_unification_table()\n+                            .probe_value(vid)\n+                            .origin;\n+                        if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n+                            origin.kind\n+                        {\n+                            return InferenceDiagnosticsData {\n+                                name: name.to_string(),\n+                                span: Some(origin.span),\n+                                kind: UnderspecifiedArgKind::Const { is_parameter: true },\n+                                parent: InferenceDiagnosticsParentData::for_def_id(\n+                                    self.tcx, def_id,\n+                                ),\n+                            };\n+                        }\n+\n+                        debug_assert!(!origin.span.is_dummy());\n+                        let mut s = String::new();\n+                        let mut printer =\n+                            ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n+                        if let Some(highlight) = highlight {\n+                            printer.region_highlight_mode = highlight;\n+                        }\n+                        let _ = ct.print(printer);\n+                        InferenceDiagnosticsData {\n+                            name: s,\n                             span: Some(origin.span),\n-                            kind: UnderspecifiedArgKind::Const { is_parameter: true },\n-                            parent: InferenceDiagnosticsParentData::for_def_id(self.tcx, def_id),\n-                        };\n+                            kind: UnderspecifiedArgKind::Const { is_parameter: false },\n+                            parent: None,\n+                        }\n                     }\n-\n-                    debug_assert!(!origin.span.is_dummy());\n-                    let mut s = String::new();\n-                    let mut printer =\n-                        ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n-                    if let Some(highlight) = highlight {\n-                        printer.region_highlight_mode = highlight;\n+                    ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                        substs_: Some(substs), ..\n+                    }) => {\n+                        assert!(substs.has_infer_types_or_consts());\n+\n+                        // FIXME: We only use the first inference variable we encounter in\n+                        // `substs` here, this gives insufficiently informative diagnostics\n+                        // in case there are multiple inference variables\n+                        for s in substs.iter() {\n+                            match s.unpack() {\n+                                GenericArgKind::Type(t) => match t.kind() {\n+                                    ty::Infer(_) => {\n+                                        return self.extract_inference_diagnostics_data(s, None);\n+                                    }\n+                                    _ => {}\n+                                },\n+                                GenericArgKind::Const(c) => match c.val {\n+                                    ty::ConstKind::Infer(InferConst::Var(_)) => {\n+                                        return self.extract_inference_diagnostics_data(s, None);\n+                                    }\n+                                    _ => {}\n+                                },\n+                                _ => {}\n+                            }\n+                        }\n+                        bug!(\n+                            \"expected an inference variable in substs of unevaluated const {:?}\",\n+                            ct\n+                        );\n                     }\n-                    let _ = ct.print(printer);\n-                    InferenceDiagnosticsData {\n-                        name: s,\n-                        span: Some(origin.span),\n-                        kind: UnderspecifiedArgKind::Const { is_parameter: false },\n-                        parent: None,\n+                    _ => {\n+                        bug!(\"unexpect const: {:?}\", ct);\n                     }\n-                } else {\n-                    bug!(\"unexpect const: {:?}\", ct);\n                 }\n             }\n             GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),"}, {"sha": "18f33acaabbba19fbcc73a699924d4c26b0cad2b", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs?ref=37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "patch": "@@ -27,4 +27,5 @@ fn main() {\n     //~^ ERROR type annotations needed\n \n     _q = foo::<_, 2>(_q);\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "e59f1ac8027de3edde0a3324e2a32d848c99d57b", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr?ref=37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "patch": "@@ -4,6 +4,30 @@ error[E0282]: type annotations needed\n LL |     let mut _q = Default::default();\n    |         ^^^^^^ consider giving `_q` a type\n \n-error: aborting due to previous error\n+error[E0283]: type annotations needed\n+  --> $DIR/const_eval_resolve_canonical.rs:29:10\n+   |\n+LL |     _q = foo::<_, 2>(_q);\n+   |          ^^^^^^^^^^^ cannot infer type\n+   |\n+note: multiple `impl`s satisfying `(): Foo<{ N + 1 }>` found\n+  --> $DIR/const_eval_resolve_canonical.rs:8:1\n+   |\n+LL | impl Foo<0> for () {\n+   | ^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl Foo<3> for () {\n+   | ^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `foo`\n+  --> $DIR/const_eval_resolve_canonical.rs:18:9\n+   |\n+LL | fn foo<T, const N: usize>(_: T) -> <() as Foo<{ N + 1 }>>::Assoc\n+   |    --- required by a bound in this\n+LL | where\n+LL |     (): Foo<{ N + 1 }>,\n+   |         ^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0282`.\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "402b3aa2d61dcfca63815196aa639c036f48fae0", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "patch": "@@ -1,22 +1,11 @@\n-error[E0283]: type annotations needed\n+error[E0282]: type annotations needed\n   --> $DIR/issue-83249.rs:19:13\n    |\n LL |     let _ = foo([0; 1]);\n    |         -   ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |         |\n    |         consider giving this pattern a type\n-   |\n-   = note: cannot satisfy `_: Foo`\n-note: required by a bound in `foo`\n-  --> $DIR/issue-83249.rs:12:11\n-   |\n-LL | fn foo<T: Foo>(_: [u8; T::N]) -> T {\n-   |           ^^^ required by this bound in `foo`\n-help: consider specifying the type argument in the function call\n-   |\n-LL |     let _ = foo::<T>([0; 1]);\n-   |                +++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0282`."}]}