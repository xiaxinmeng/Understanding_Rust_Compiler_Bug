{"sha": "7a39bc3ba29351feabcd4a16e12568a9e12818ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzliYzNiYTI5MzUxZmVhYmNkNGExNmUxMjU2OGE5ZTEyODE4Y2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T14:42:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T17:20:41Z"}, "message": "Make records grammar more orthogonal\n\nWe used\n\n  name [: expr]\n\ngrammar before, now it is\n\n  [name :] expr\n\nwhich makes things simpler", "tree": {"sha": "a5f102f40002dd66b4fc06aa2c3474f3be184a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f102f40002dd66b4fc06aa2c3474f3be184a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a39bc3ba29351feabcd4a16e12568a9e12818ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a39bc3ba29351feabcd4a16e12568a9e12818ca", "html_url": "https://github.com/rust-lang/rust/commit/7a39bc3ba29351feabcd4a16e12568a9e12818ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a39bc3ba29351feabcd4a16e12568a9e12818ca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a68c8f55e0770fdeae508a1710509c13aaffa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a68c8f55e0770fdeae508a1710509c13aaffa1", "html_url": "https://github.com/rust-lang/rust/commit/e7a68c8f55e0770fdeae508a1710509c13aaffa1"}], "stats": {"total": 210, "additions": 142, "deletions": 68}, "files": [{"sha": "05147901efc8148d5e4cac5a0cf60c93e5b7247f", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -139,7 +139,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::FieldExpr,\n-    ) -> Option<crate::StructField> {\n+    ) -> Option<StructField> {\n         let expr_id = self.expr_id(db, &field.clone().into())?;\n         self.infer.as_ref()?.field_resolution(expr_id).map(|it| it.into())\n     }\n@@ -148,21 +148,19 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::RecordField,\n-    ) -> Option<(crate::StructField, Option<Local>)> {\n-        let (expr_id, local) = match field.expr() {\n-            Some(it) => (self.expr_id(db, &it)?, None),\n-            None => {\n-                let src = InFile { file_id: self.file_id, value: field };\n-                let expr_id = self.body_source_map.as_ref()?.field_init_shorthand_expr(src)?;\n-                let local_name = field.name_ref()?.as_name();\n-                let path = ModPath::from_segments(PathKind::Plain, once(local_name));\n-                let local = match self.resolver.resolve_path_in_value_ns_fully(db.upcast(), &path) {\n-                    Some(ValueNs::LocalBinding(pat_id)) => {\n-                        Some(Local { pat_id, parent: self.resolver.body_owner()? })\n-                    }\n-                    _ => None,\n-                };\n-                (expr_id, local)\n+    ) -> Option<(StructField, Option<Local>)> {\n+        let expr = field.expr()?;\n+        let expr_id = self.expr_id(db, &expr)?;\n+        let local = if field.name_ref().is_some() {\n+            None\n+        } else {\n+            let local_name = field.field_name()?.as_name();\n+            let path = ModPath::from_segments(PathKind::Plain, once(local_name));\n+            match self.resolver.resolve_path_in_value_ns_fully(db.upcast(), &path) {\n+                Some(ValueNs::LocalBinding(pat_id)) => {\n+                    Some(Local { pat_id, parent: self.resolver.body_owner()? })\n+                }\n+                _ => None,\n             }\n         };\n         let struct_field = self.infer.as_ref()?.record_field_resolution(expr_id)?;"}, {"sha": "67d6237140d2efe0ad88263897d39feae1fac70f", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -294,11 +294,6 @@ impl BodySourceMap {\n         self.expansions.get(&src).cloned()\n     }\n \n-    pub fn field_init_shorthand_expr(&self, node: InFile<&ast::RecordField>) -> Option<ExprId> {\n-        let src = node.map(|it| Either::Right(AstPtr::new(it)));\n-        self.expr_map.get(&src).cloned()\n-    }\n-\n     pub fn pat_syntax(&self, pat: PatId) -> Result<PatSource, SyntheticSyntax> {\n         self.pat_map_back[pat].clone()\n     }"}, {"sha": "990761661514785d32c69b073af5331ecb89e4e3", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -27,7 +27,6 @@ use crate::{\n     },\n     item_scope::BuiltinShadowMode,\n     path::GenericArgs,\n-    path::Path,\n     type_ref::{Mutability, TypeRef},\n     AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n     StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n@@ -113,13 +112,6 @@ impl ExprCollector<'_> {\n     fn alloc_expr_desugared(&mut self, expr: Expr) -> ExprId {\n         self.make_expr(expr, Err(SyntheticSyntax))\n     }\n-    fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n-        let ptr = Either::Right(ptr);\n-        let src = self.expander.to_source(ptr);\n-        let id = self.make_expr(expr, Ok(src.clone()));\n-        self.source_map.expr_map.insert(src, id);\n-        id\n-    }\n     fn empty_block(&mut self) -> ExprId {\n         self.alloc_expr_desugared(Expr::Block { statements: Vec::new(), tail: None })\n     }\n@@ -309,22 +301,13 @@ impl ExprCollector<'_> {\n                             if !self.expander.is_cfg_enabled(&attrs) {\n                                 return None;\n                             }\n+                            let name = field.field_name()?.as_name();\n \n                             Some(RecordLitField {\n-                                name: field\n-                                    .name_ref()\n-                                    .map(|nr| nr.as_name())\n-                                    .unwrap_or_else(Name::missing),\n-                                expr: if let Some(e) = field.expr() {\n-                                    self.collect_expr(e)\n-                                } else if let Some(nr) = field.name_ref() {\n-                                    // field shorthand\n-                                    self.alloc_expr_field_shorthand(\n-                                        Expr::Path(Path::from_name_ref(&nr)),\n-                                        AstPtr::new(&field),\n-                                    )\n-                                } else {\n-                                    self.missing_expr()\n+                                name,\n+                                expr: match field.expr() {\n+                                    Some(e) => self.collect_expr(e),\n+                                    None => self.missing_expr(),\n                                 },\n                             })\n                         })"}, {"sha": "91c7b3e094191e6a476e83cb8a29096939c7939d", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -134,11 +134,6 @@ impl Path {\n         lower::lower_path(path, hygiene)\n     }\n \n-    /// Converts an `ast::NameRef` into a single-identifier `Path`.\n-    pub(crate) fn from_name_ref(name_ref: &ast::NameRef) -> Path {\n-        Path { type_anchor: None, mod_path: name_ref.as_name().into(), generic_args: vec![None] }\n-    }\n-\n     /// Converts a known mod path to `Path`.\n     pub(crate) fn from_known_path(\n         path: ModPath,"}, {"sha": "0b0da6ee495b40bb5bf9b14fb6a8bbed10da45b2", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -3,7 +3,7 @@\n use crate::completion::{CompletionContext, Completions};\n \n pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !(ctx.is_trivial_path && !ctx.is_pat_binding_or_const) {\n+    if !(ctx.is_trivial_path && !ctx.is_pat_binding_or_const && !ctx.record_lit_syntax.is_some()) {\n         return;\n     }\n "}, {"sha": "14a4a14d7b2d19910931e955a1ea8be73482aaae", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -227,7 +227,7 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n         let name_range = name_ref.syntax().text_range();\n-        if name_ref.syntax().parent().and_then(ast::RecordField::cast).is_some() {\n+        if ast::RecordField::for_field_name(&name_ref).is_some() {\n             self.record_lit_syntax =\n                 self.sema.find_node_at_offset_with_macros(&original_file, offset);\n         }"}, {"sha": "49a8c74fba7b2c0b3438f9846232a69fbb39ced8", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -216,7 +216,7 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    if let Some(record_field) = ast::RecordField::cast(parent.clone()) {\n+    if let Some(record_field) = ast::RecordField::for_field_name(name_ref) {\n         tested_by!(goto_def_for_record_fields; force);\n         tested_by!(goto_def_for_field_init_shorthand; force);\n         if let Some((field, local)) = sema.resolve_record_field(&record_field) {"}, {"sha": "cb30b25a890ea05b6db8b3743558c07a49370315", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -619,26 +619,39 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n     let m = p.start();\n     p.bump(T!['{']);\n     while !p.at(EOF) && !p.at(T!['}']) {\n+        let m = p.start();\n+        // test record_literal_field_with_attr\n+        // fn main() {\n+        //     S { #[cfg(test)] field: 1 }\n+        // }\n+        attributes::outer_attributes(p);\n+\n         match p.current() {\n-            // test record_literal_field_with_attr\n-            // fn main() {\n-            //     S { #[cfg(test)] field: 1 }\n-            // }\n-            IDENT | INT_NUMBER | T![#] => {\n-                let m = p.start();\n-                attributes::outer_attributes(p);\n-                name_ref_or_index(p);\n-                if p.eat(T![:]) {\n-                    expr(p);\n+            IDENT | INT_NUMBER => {\n+                // test_err record_literal_before_ellipsis_recovery\n+                // fn main() {\n+                //     S { field ..S::default() }\n+                // }\n+                if p.nth_at(1, T![:]) || p.nth_at(1, T![..]) {\n+                    name_ref_or_index(p);\n+                    p.expect(T![:]);\n                 }\n+                expr(p);\n                 m.complete(p, RECORD_FIELD);\n             }\n             T![.] if p.at(T![..]) => {\n+                m.abandon(p);\n                 p.bump(T![..]);\n                 expr(p);\n             }\n-            T!['{'] => error_block(p, \"expected a field\"),\n-            _ => p.err_and_bump(\"expected identifier\"),\n+            T!['{'] => {\n+                error_block(p, \"expected a field\");\n+                m.abandon(p);\n+            }\n+            _ => {\n+                p.err_and_bump(\"expected identifier\");\n+                m.abandon(p);\n+            }\n         }\n         if !p.at(T!['}']) {\n             p.expect(T![,]);"}, {"sha": "7dc0249914ec4be609a458fa6954deb6b0a09327", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -187,6 +187,38 @@ impl ast::StructDef {\n     }\n }\n \n+impl ast::RecordField {\n+    pub fn for_field_name(field_name: &ast::NameRef) -> Option<ast::RecordField> {\n+        eprintln!(\"field_name = {}\", field_name);\n+        dbg!(field_name.syntax().ancestors().nth(6));\n+        let candidate =\n+            field_name.syntax().parent().and_then(ast::RecordField::cast).or_else(|| {\n+                field_name.syntax().ancestors().nth(4).and_then(ast::RecordField::cast)\n+            })?;\n+        if candidate.field_name().as_ref() == Some(field_name) {\n+            Some(candidate)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Deals with field init shorthand\n+    pub fn field_name(&self) -> Option<ast::NameRef> {\n+        if let Some(name_ref) = self.name_ref() {\n+            return Some(name_ref);\n+        }\n+        if let Some(ast::Expr::PathExpr(expr)) = self.expr() {\n+            let path = expr.path()?;\n+            let segment = path.segment()?;\n+            let name_ref = segment.name_ref()?;\n+            if path.qualifier().is_none() {\n+                return Some(name_ref);\n+            }\n+        }\n+        None\n+    }\n+}\n+\n impl ast::EnumVariant {\n     pub fn parent_enum(&self) -> ast::EnumDef {\n         self.syntax()"}, {"sha": "75043c9c048784d27379666026c1f30ca29d3d00", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_record_literal_before_ellipsis_recovery.rast", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -0,0 +1,49 @@\n+SOURCE_FILE@[0; 45)\n+  FN_DEF@[0; 44)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 44)\n+      BLOCK@[10; 44)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        RECORD_LIT@[16; 42)\n+          PATH@[16; 17)\n+            PATH_SEGMENT@[16; 17)\n+              NAME_REF@[16; 17)\n+                IDENT@[16; 17) \"S\"\n+          WHITESPACE@[17; 18) \" \"\n+          RECORD_FIELD_LIST@[18; 42)\n+            L_CURLY@[18; 19) \"{\"\n+            WHITESPACE@[19; 20) \" \"\n+            RECORD_FIELD@[20; 40)\n+              NAME_REF@[20; 25)\n+                IDENT@[20; 25) \"field\"\n+              WHITESPACE@[25; 26) \" \"\n+              RANGE_EXPR@[26; 40)\n+                DOT2@[26; 28) \"..\"\n+                CALL_EXPR@[28; 40)\n+                  PATH_EXPR@[28; 38)\n+                    PATH@[28; 38)\n+                      PATH@[28; 29)\n+                        PATH_SEGMENT@[28; 29)\n+                          NAME_REF@[28; 29)\n+                            IDENT@[28; 29) \"S\"\n+                      COLON2@[29; 31) \"::\"\n+                      PATH_SEGMENT@[31; 38)\n+                        NAME_REF@[31; 38)\n+                          IDENT@[31; 38) \"default\"\n+                  ARG_LIST@[38; 40)\n+                    L_PAREN@[38; 39) \"(\"\n+                    R_PAREN@[39; 40) \")\"\n+            WHITESPACE@[40; 41) \" \"\n+            R_CURLY@[41; 42) \"}\"\n+        WHITESPACE@[42; 43) \"\\n\"\n+        R_CURLY@[43; 44) \"}\"\n+  WHITESPACE@[44; 45) \"\\n\"\n+error [25; 25): expected COLON"}, {"sha": "a4e5b2f69336f67002441eb47ddbe64744ca694c", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_record_literal_before_ellipsis_recovery.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    S { field ..S::default() }\n+}"}, {"sha": "89a61179967d3f80cf4facaf22b6bf6b02abf2fb", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_record_lit.rast", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -35,8 +35,11 @@ SOURCE_FILE@[0; 112)\n               L_CURLY@[27; 28) \"{\"\n               WHITESPACE@[28; 29) \" \"\n               RECORD_FIELD@[29; 30)\n-                NAME_REF@[29; 30)\n-                  IDENT@[29; 30) \"x\"\n+                PATH_EXPR@[29; 30)\n+                  PATH@[29; 30)\n+                    PATH_SEGMENT@[29; 30)\n+                      NAME_REF@[29; 30)\n+                        IDENT@[29; 30) \"x\"\n               COMMA@[30; 31) \",\"\n               WHITESPACE@[31; 32) \" \"\n               RECORD_FIELD@[32; 37)\n@@ -62,8 +65,11 @@ SOURCE_FILE@[0; 112)\n               L_CURLY@[48; 49) \"{\"\n               WHITESPACE@[49; 50) \" \"\n               RECORD_FIELD@[50; 51)\n-                NAME_REF@[50; 51)\n-                  IDENT@[50; 51) \"x\"\n+                PATH_EXPR@[50; 51)\n+                  PATH@[50; 51)\n+                    PATH_SEGMENT@[50; 51)\n+                      NAME_REF@[50; 51)\n+                        IDENT@[50; 51) \"x\"\n               COMMA@[51; 52) \",\"\n               WHITESPACE@[52; 53) \" \"\n               RECORD_FIELD@[53; 58)"}, {"sha": "4164bfd5eda1b96a84c86897fd7c74c3c539f5dc", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a39bc3ba29351feabcd4a16e12568a9e12818ca/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=7a39bc3ba29351feabcd4a16e12568a9e12818ca", "patch": "@@ -395,7 +395,7 @@ pub fn skip_slow_tests() -> bool {\n     should_skip\n }\n \n-const REWRITE: bool = true;\n+const REWRITE: bool = false;\n \n /// Asserts that `expected` and `actual` strings are equal. If they differ only\n /// in trailing or leading whitespace the test won't fail and"}]}