{"sha": "21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "node_id": "C_kwDOAAsO6NoAKDIxZDZiMWZjMGU3ZjBiZmQ3Mjk2NDQ1YjBhYjJkMjk0OTdiOTkyOWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-11T09:49:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-11T09:49:33Z"}, "message": "Rollup merge of #99147 - compiler-errors:issue-55673, r=lcnr\n\nMention similarly named associated type even if it's not clearly in supertrait\n\nDue to query cycle avoidance, we sometimes restrict the candidates in `complain_about_assoc_type_not_found` too much so that we can't detect typo replacements from just supertraits.\n\nThis creates a more general note of the existence of a similarly named associated type from _all_ visible traits when possible.\n\nFixes #55673", "tree": {"sha": "49b79248453247301e212efab2187a6a95d00f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b79248453247301e212efab2187a6a95d00f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiy/ItCRBK7hj4Ov3rIwAAPGcIABaq0KmyRdjWSD9XHB28zrD6\nrRDXZrc/beaj/93osTIF/Imbf/a5GrfaS2swiX5eSbyaHbO9lkJt85ZARLhvPXgV\nANL3nt2SNvDSP/5I3rff4nafVb/4PM1ajTuukEMFU0rncnymrrwPIX5wkqsBAEWm\nbpzLhmcKv8uhfEno/2hOjaVWVB8c1DV7eoDcnQp7yWCFEodceE0Hpt9Hj/84fel6\n9SSztQKI5NBaHwLP/+sMOxk4I/1fpiB3Q4a+Jy6RODEPnXrXKFp8CbIsBH1BgGq8\n1Z68z+GL8Vs7SXExRxz8KOrtz+5M+1r7MHc0rvvl9ZwlKRt4tFlGPuv+XnSKiWE=\n=v+0w\n-----END PGP SIGNATURE-----\n", "payload": "tree 49b79248453247301e212efab2187a6a95d00f96\nparent 9fc297a2aefe141951994bec9ebd74733fed1623\nparent 680fef4d0455449d2226f8b9a4b266cc5c82ccc0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657532973 +0530\ncommitter GitHub <noreply@github.com> 1657532973 +0530\n\nRollup merge of #99147 - compiler-errors:issue-55673, r=lcnr\n\nMention similarly named associated type even if it's not clearly in supertrait\n\nDue to query cycle avoidance, we sometimes restrict the candidates in `complain_about_assoc_type_not_found` too much so that we can't detect typo replacements from just supertraits.\n\nThis creates a more general note of the existence of a similarly named associated type from _all_ visible traits when possible.\n\nFixes #55673\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "html_url": "https://github.com/rust-lang/rust/commit/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc297a2aefe141951994bec9ebd74733fed1623", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc297a2aefe141951994bec9ebd74733fed1623", "html_url": "https://github.com/rust-lang/rust/commit/9fc297a2aefe141951994bec9ebd74733fed1623"}, {"sha": "680fef4d0455449d2226f8b9a4b266cc5c82ccc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/680fef4d0455449d2226f8b9a4b266cc5c82ccc0", "html_url": "https://github.com/rust-lang/rust/commit/680fef4d0455449d2226f8b9a4b266cc5c82ccc0"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "c873cf27e42c51cae416f53811b555344b85e679", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "patch": "@@ -164,10 +164,62 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 suggested_name,\n                 Applicability::MaybeIncorrect,\n             );\n-        } else {\n-            err.span_label(span, format!(\"associated type `{}` not found\", assoc_name));\n+            return err.emit();\n         }\n \n+        // If we didn't find a good item in the supertraits (or couldn't get\n+        // the supertraits), like in ItemCtxt, then look more generally from\n+        // all visible traits. If there's one clear winner, just suggest that.\n+\n+        let visible_traits: Vec<_> = self\n+            .tcx()\n+            .all_traits()\n+            .filter(|trait_def_id| {\n+                let viz = self.tcx().visibility(*trait_def_id);\n+                if let Some(def_id) = self.item_def_id() {\n+                    viz.is_accessible_from(def_id, self.tcx())\n+                } else {\n+                    viz.is_visible_locally()\n+                }\n+            })\n+            .collect();\n+\n+        let wider_candidate_names: Vec<_> = visible_traits\n+            .iter()\n+            .flat_map(|trait_def_id| {\n+                self.tcx().associated_items(*trait_def_id).in_definition_order()\n+            })\n+            .filter_map(\n+                |item| if item.kind == ty::AssocKind::Type { Some(item.name) } else { None },\n+            )\n+            .collect();\n+\n+        if let (Some(suggested_name), true) = (\n+            find_best_match_for_name(&wider_candidate_names, assoc_name.name, None),\n+            assoc_name.span != DUMMY_SP,\n+        ) {\n+            if let [best_trait] = visible_traits\n+                .iter()\n+                .filter(|trait_def_id| {\n+                    self.tcx()\n+                        .associated_items(*trait_def_id)\n+                        .filter_by_name_unhygienic(suggested_name)\n+                        .any(|item| item.kind == ty::AssocKind::Type)\n+                })\n+                .collect::<Vec<_>>()[..]\n+            {\n+                err.span_label(\n+                    assoc_name.span,\n+                    format!(\n+                        \"there is a similarly named associated type `{suggested_name}` in the trait `{}`\",\n+                        self.tcx().def_path_str(*best_trait)\n+                    ),\n+                );\n+                return err.emit();\n+            }\n+        }\n+\n+        err.span_label(span, format!(\"associated type `{}` not found\", assoc_name));\n         err.emit()\n     }\n "}, {"sha": "0436bd397424c2ee66d0583b484ec17cf83c462d", "filename": "src/test/ui/resolve/issue-55673.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.rs?ref=21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "patch": "@@ -0,0 +1,12 @@\n+trait Foo {\n+    type Bar;\n+}\n+\n+fn foo<T: Foo>()\n+where\n+    T::Baa: std::fmt::Debug,\n+    //~^ ERROR associated type `Baa` not found for `T`\n+{\n+}\n+\n+fn main() {}"}, {"sha": "39318f959056f56fe2eeb81aa9afe63d8bf2aa94", "filename": "src/test/ui/resolve/issue-55673.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-55673.stderr?ref=21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "patch": "@@ -0,0 +1,9 @@\n+error[E0220]: associated type `Baa` not found for `T`\n+  --> $DIR/issue-55673.rs:7:8\n+   |\n+LL |     T::Baa: std::fmt::Debug,\n+   |        ^^^ there is a similarly named associated type `Bar` in the trait `Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0220`."}, {"sha": "203a89285306d3f029411c778763c27c1cccf45f", "filename": "src/test/ui/traits/issue-59029-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/src%2Ftest%2Fui%2Ftraits%2Fissue-59029-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/src%2Ftest%2Fui%2Ftraits%2Fissue-59029-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-59029-1.stderr?ref=21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "patch": "@@ -2,13 +2,13 @@ error[E0220]: associated type `Res` not found for `Self`\n   --> $DIR/issue-59029-1.rs:5:52\n    |\n LL | trait MkSvc<Target, Req> = Svc<Target> where Self::Res: Svc<Req>;\n-   |                                                    ^^^ associated type `Res` not found\n+   |                                                    ^^^ there is a similarly named associated type `Res` in the trait `Svc`\n \n error[E0220]: associated type `Res` not found for `Self`\n   --> $DIR/issue-59029-1.rs:5:52\n    |\n LL | trait MkSvc<Target, Req> = Svc<Target> where Self::Res: Svc<Req>;\n-   |                                                    ^^^ associated type `Res` not found\n+   |                                                    ^^^ there is a similarly named associated type `Res` in the trait `Svc`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c36b95f47e837532991bff0f56450ed0165fb463", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.stderr?ref=21d6b1fc0e7f0bfd7296445b0ab2d29497b9929d", "patch": "@@ -2,7 +2,7 @@ error[E0220]: associated type `Assoc` not found for `V`\n   --> $DIR/not_well_formed.rs:9:29\n    |\n LL | type Foo<V> = impl Trait<V::Assoc>;\n-   |                             ^^^^^ associated type `Assoc` not found\n+   |                             ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n \n error: aborting due to previous error\n "}]}