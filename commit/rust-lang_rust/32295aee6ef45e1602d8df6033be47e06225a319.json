{"sha": "32295aee6ef45e1602d8df6033be47e06225a319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMjk1YWVlNmVmNDVlMTYwMmQ4ZGY2MDMzYmU0N2UwNjIyNWEzMTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T13:10:03Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-24T20:53:23Z"}, "message": "parse: simplify `parse_stmt_without_recovery`.", "tree": {"sha": "e39ca962b2fbd823730fad2673b8753a3fc19bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e39ca962b2fbd823730fad2673b8753a3fc19bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32295aee6ef45e1602d8df6033be47e06225a319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32295aee6ef45e1602d8df6033be47e06225a319", "html_url": "https://github.com/rust-lang/rust/commit/32295aee6ef45e1602d8df6033be47e06225a319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32295aee6ef45e1602d8df6033be47e06225a319/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "245e15b4ac07e1e780921e3512ae2b9fb2a4a718", "url": "https://api.github.com/repos/rust-lang/rust/commits/245e15b4ac07e1e780921e3512ae2b9fb2a4a718", "html_url": "https://github.com/rust-lang/rust/commit/245e15b4ac07e1e780921e3512ae2b9fb2a4a718"}], "stats": {"total": 65, "additions": 29, "deletions": 36}, "files": [{"sha": "a1078a59239c75a0dc014ecea75a4e9787ad34ad", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 29, "deletions": 36, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/32295aee6ef45e1602d8df6033be47e06225a319/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32295aee6ef45e1602d8df6033be47e06225a319/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=32295aee6ef45e1602d8df6033be47e06225a319", "patch": "@@ -35,39 +35,33 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n \n-        if self.eat_keyword(kw::Let) {\n-            return self.parse_local_mk(lo, attrs.into()).map(Some);\n-        }\n-        if self.is_kw_followed_by_ident(kw::Mut) {\n-            return self.recover_stmt_local(lo, attrs.into(), \"missing keyword\", \"let mut\");\n-        }\n-        if self.is_kw_followed_by_ident(kw::Auto) {\n+        let stmt = if self.eat_keyword(kw::Let) {\n+            self.parse_local_mk(lo, attrs.into())?\n+        } else if self.is_kw_followed_by_ident(kw::Mut) {\n+            self.recover_stmt_local(lo, attrs.into(), \"missing keyword\", \"let mut\")?\n+        } else if self.is_kw_followed_by_ident(kw::Auto) {\n             self.bump(); // `auto`\n             let msg = \"write `let` instead of `auto` to introduce a new variable\";\n-            return self.recover_stmt_local(lo, attrs.into(), msg, \"let\");\n-        }\n-        if self.is_kw_followed_by_ident(sym::var) {\n+            self.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n+        } else if self.is_kw_followed_by_ident(sym::var) {\n             self.bump(); // `var`\n             let msg = \"write `let` instead of `var` to introduce a new variable\";\n-            return self.recover_stmt_local(lo, attrs.into(), msg, \"let\");\n-        }\n-\n-        // Starts like a simple path, being careful to avoid contextual keywords,\n-        // e.g., `union`, items with `crate` visibility, or `auto trait` items.\n-        // We aim to parse an arbitrary path `a::b` but not something that starts like a path\n-        // (1 token), but it fact not a path. Also, we avoid stealing syntax from `parse_item_`.\n-        if self.token.is_path_start() && !self.token.is_qpath_start() && !self.is_path_start_item()\n+            self.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n+        } else if self.token.is_path_start()\n+            && !self.token.is_qpath_start()\n+            && !self.is_path_start_item()\n         {\n-            return self.parse_stmt_path_start(lo, attrs).map(Some);\n-        }\n-\n-        if let Some(item) = self.parse_stmt_item(attrs.clone())? {\n+            // We have avoided contextual keywords like `union`, items with `crate` visibility,\n+            // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n+            // that starts like a path (1 token), but it fact not a path.\n+            // Also, we avoid stealing syntax from `parse_item_`.\n+            self.parse_stmt_path_start(lo, attrs)?\n+        } else if let Some(item) = self.parse_stmt_item(attrs.clone())? {\n             // FIXME: Bad copy of attrs\n-            return Ok(Some(self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))));\n+            self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n         }\n-\n         // Do not attempt to parse an expression if we're done here.\n-        if self.token == token::Semi {\n+        else if self.token == token::Semi {\n             self.error_outer_attrs(&attrs);\n             self.bump();\n             let mut last_semi = lo;\n@@ -82,17 +76,16 @@ impl<'a> Parser<'a> {\n                 ExprKind::Tup(Vec::new()),\n                 AttrVec::new(),\n             ));\n-            return Ok(Some(self.mk_stmt(lo.to(last_semi), kind)));\n-        }\n-\n-        if self.token == token::CloseDelim(token::Brace) {\n+            self.mk_stmt(lo.to(last_semi), kind)\n+        } else if self.token != token::CloseDelim(token::Brace) {\n+            // Remainder are line-expr stmts.\n+            let e = self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs.into()))?;\n+            self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n+        } else {\n             self.error_outer_attrs(&attrs);\n             return Ok(None);\n-        }\n-\n-        // Remainder are line-expr stmts.\n-        let e = self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs.into()))?;\n-        Ok(Some(self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))))\n+        };\n+        Ok(Some(stmt))\n     }\n \n     fn parse_stmt_item(&mut self, attrs: Vec<Attribute>) -> PResult<'a, Option<ast::Item>> {\n@@ -168,12 +161,12 @@ impl<'a> Parser<'a> {\n         attrs: AttrVec,\n         msg: &str,\n         sugg: &str,\n-    ) -> PResult<'a, Option<Stmt>> {\n+    ) -> PResult<'a, Stmt> {\n         let stmt = self.parse_local_mk(lo, attrs)?;\n         self.struct_span_err(lo, \"invalid variable declaration\")\n             .span_suggestion(lo, msg, sugg.to_string(), Applicability::MachineApplicable)\n             .emit();\n-        Ok(Some(stmt))\n+        Ok(stmt)\n     }\n \n     fn parse_local_mk(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, Stmt> {"}]}