{"sha": "bbc400993eadea8a927cc5f96a15cc7c493c7a88", "node_id": "C_kwDOAAsO6NoAKGJiYzQwMDk5M2VhZGVhOGE5MjdjYzVmOTZhMTVjYzdjNDkzYzdhODg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-12T05:31:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-13T02:20:41Z"}, "message": "Remove `ToRegionVid`.\n\nIt is only implemented for `Region`, where it is equivalent to the\ninherent `as_var` method.", "tree": {"sha": "d81db68edfd3977ad25a163f95395e084f6a0e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81db68edfd3977ad25a163f95395e084f6a0e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc400993eadea8a927cc5f96a15cc7c493c7a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc400993eadea8a927cc5f96a15cc7c493c7a88", "html_url": "https://github.com/rust-lang/rust/commit/bbc400993eadea8a927cc5f96a15cc7c493c7a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc400993eadea8a927cc5f96a15cc7c493c7a88/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "411422f2b9b0861f416d18f1ab9ca079ac01bb08", "url": "https://api.github.com/repos/rust-lang/rust/commits/411422f2b9b0861f416d18f1ab9ca079ac01bb08", "html_url": "https://github.com/rust-lang/rust/commit/411422f2b9b0861f416d18f1ab9ca079ac01bb08"}], "stats": {"total": 87, "additions": 32, "deletions": 55}, "files": [{"sha": "4824f6346d4c87b1b7474cda90c07e1fda572c4d", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -1,6 +1,5 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-use crate::nll::ToRegionVid;\n use crate::path_utils::allow_two_phase_borrow;\n use crate::place_ext::PlaceExt;\n use crate::BorrowIndex;\n@@ -204,7 +203,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n                 return;\n             }\n \n-            let region = region.to_region_vid();\n+            let region = region.as_var();\n \n             let borrow = BorrowData {\n                 kind,\n@@ -279,7 +278,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n             let borrow_data = &self.location_map[&location];\n             assert_eq!(borrow_data.reserve_location, location);\n             assert_eq!(borrow_data.kind, kind);\n-            assert_eq!(borrow_data.region, region.to_region_vid());\n+            assert_eq!(borrow_data.region, region.as_var());\n             assert_eq!(borrow_data.borrowed_place, place);\n         }\n "}, {"sha": "2aa09a3f26c1758d6dc76f2d06f239a2efeada8c", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -12,8 +12,8 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n \n use crate::{\n-    borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, nll::ToRegionVid,\n-    places_conflict, region_infer::values::LivenessValues,\n+    borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, places_conflict,\n+    region_infer::values::LivenessValues,\n };\n \n pub(super) fn generate_constraints<'tcx>(\n@@ -170,7 +170,7 @@ impl<'cx, 'tcx> ConstraintGeneration<'cx, 'tcx> {\n         debug!(\"add_regular_live_constraint(live_ty={:?}, location={:?})\", live_ty, location);\n \n         self.infcx.tcx.for_each_free_region(&live_ty, |live_region| {\n-            let vid = live_region.to_region_vid();\n+            let vid = live_region.as_var();\n             self.liveness_constraints.add_element(vid, location);\n         });\n     }"}, {"sha": "2495613fea1d2c9e6473f7a299c9199c6630f0cf", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -6,7 +6,6 @@ use std::rc::Rc;\n \n use crate::{\n     def_use::{self, DefUse},\n-    nll::ToRegionVid,\n     region_infer::{Cause, RegionInferenceContext},\n };\n use rustc_data_structures::fx::FxIndexSet;\n@@ -117,7 +116,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for DefUseVisitor<'cx, 'tcx> {\n \n         let mut found_it = false;\n         self.tcx.for_each_free_region(&local_ty, |r| {\n-            if r.to_region_vid() == self.region_vid {\n+            if r.as_var() == self.region_vid {\n                 found_it = true;\n             }\n         });"}, {"sha": "f69c4829ae2999ba9df9f39c02f8da69b86b10e4", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n-use crate::{nll::ToRegionVid, universal_regions::DefiningTy, MirBorrowckCtxt};\n+use crate::{universal_regions::DefiningTy, MirBorrowckCtxt};\n \n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.\n@@ -497,7 +497,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 //     &\n                 //     - let's call the lifetime of this reference `'1`\n                 (ty::Ref(region, referent_ty, _), hir::TyKind::Ref(_lifetime, referent_hir_ty)) => {\n-                    if region.to_region_vid() == needle_fr {\n+                    if region.as_var() == needle_fr {\n                         // Just grab the first character, the `&`.\n                         let source_map = self.infcx.tcx.sess.source_map();\n                         let ampersand_span = source_map.start_point(hir_ty.span);\n@@ -598,7 +598,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         for (kind, hir_arg) in iter::zip(substs, args.args) {\n             match (kind.unpack(), hir_arg) {\n                 (GenericArgKind::Lifetime(r), hir::GenericArg::Lifetime(lt)) => {\n-                    if r.to_region_vid() == needle_fr {\n+                    if r.as_var() == needle_fr {\n                         return Some(lt);\n                     }\n                 }\n@@ -666,7 +666,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let return_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n         debug!(\"give_name_if_anonymous_region_appears_in_output: return_ty = {:?}\", return_ty);\n-        if !tcx.any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr) {\n+        if !tcx.any_free_region_meets(&return_ty, |r| r.as_var() == fr) {\n             return None;\n         }\n \n@@ -803,7 +803,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n \n-        if !tcx.any_free_region_meets(&yield_ty, |r| r.to_region_vid() == fr) {\n+        if !tcx.any_free_region_meets(&yield_ty, |r| r.as_var() == fr) {\n             return None;\n         }\n "}, {"sha": "376415e3d3208466ca69af129d650beb154ae6e2", "filename": "compiler/rustc_borrowck/src/diagnostics/var_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -1,8 +1,8 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+use crate::region_infer::RegionInferenceContext;\n use crate::Upvar;\n-use crate::{nll::ToRegionVid, region_infer::RegionInferenceContext};\n use rustc_index::vec::{Idx, IndexSlice};\n use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n@@ -46,7 +46,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.universal_regions().defining_ty.upvar_tys().position(|upvar_ty| {\n                 debug!(\"get_upvar_index_for_region: upvar_ty={upvar_ty:?}\");\n                 tcx.any_free_region_meets(&upvar_ty, |r| {\n-                    let r = r.to_region_vid();\n+                    let r = r.as_var();\n                     debug!(\"get_upvar_index_for_region: r={r:?} fr={fr:?}\");\n                     r == fr\n                 })\n@@ -96,7 +96,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.universal_regions().unnormalized_input_tys.iter().skip(implicit_inputs).position(\n                 |arg_ty| {\n                     debug!(\"get_argument_index_for_region: arg_ty = {arg_ty:?}\");\n-                    tcx.any_free_region_meets(arg_ty, |r| r.to_region_vid() == fr)\n+                    tcx.any_free_region_meets(arg_ty, |r| r.as_var() == fr)\n                 },\n             )?;\n "}, {"sha": "59a3ab3189d75628e48a0849f882ab6b8fa6a686", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n };\n-use rustc_middle::ty::{self, OpaqueHiddenType, Region, RegionVid, TyCtxt};\n+use rustc_middle::ty::{self, OpaqueHiddenType, TyCtxt};\n use rustc_span::symbol::sym;\n use std::env;\n use std::io;\n@@ -444,21 +444,6 @@ fn for_each_region_constraint<'tcx>(\n     Ok(())\n }\n \n-/// Right now, we piggy back on the `ReVar` to store our NLL inference\n-/// regions. These are indexed with `RegionVid`. This method will\n-/// assert that the region is a `ReVar` and extract its internal index.\n-/// This is reasonable because in our MIR we replace all universal regions\n-/// with inference variables.\n-pub trait ToRegionVid {\n-    fn to_region_vid(self) -> RegionVid;\n-}\n-\n-impl<'tcx> ToRegionVid for Region<'tcx> {\n-    fn to_region_vid(self) -> RegionVid {\n-        if let ty::ReVar(vid) = *self { vid } else { bug!(\"region is not an ReVar: {:?}\", self) }\n-    }\n-}\n-\n pub(crate) trait ConstraintDescription {\n     fn description(&self) -> &'static str;\n }"}, {"sha": "729f3dbff3b46b1050128075f5c091cf86f8ba65", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -1130,7 +1130,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let r_vid = self.to_region_vid(r);\n             let r_scc = self.constraint_sccs.scc(r_vid);\n \n-            // The challenge if this. We have some region variable `r`\n+            // The challenge is this. We have some region variable `r`\n             // whose value is a set of CFG points and universal\n             // regions. We want to find if that set is *equivalent* to\n             // any of the named regions found in the closure."}, {"sha": "71eae7b27d1db7835d8e4625781d9b6f3f9013ac", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -12,7 +12,6 @@ use rustc_span::{Span, DUMMY_SP};\n \n use crate::{\n     constraints::OutlivesConstraint,\n-    nll::ToRegionVid,\n     region_infer::TypeTest,\n     type_check::{Locations, MirTypeckRegionConstraints},\n     universal_regions::UniversalRegions,\n@@ -198,7 +197,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n \n     fn to_region_vid(&mut self, r: ty::Region<'tcx>) -> ty::RegionVid {\n         if let ty::RePlaceholder(placeholder) = *r {\n-            self.constraints.placeholder_region(self.infcx, placeholder).to_region_vid()\n+            self.constraints.placeholder_region(self.infcx, placeholder).as_var()\n         } else {\n             self.universal_regions.to_region_vid(r)\n         }"}, {"sha": "f1ad0ca55ccfd45b0a9dc8bdc11345dcbb286984", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -11,7 +11,6 @@ use crate::{\n     constraints::OutlivesConstraintSet,\n     facts::{AllFacts, AllFactsExt},\n     location::LocationTable,\n-    nll::ToRegionVid,\n     region_infer::values::RegionValueElements,\n     universal_regions::UniversalRegions,\n };\n@@ -80,9 +79,7 @@ fn compute_relevant_live_locals<'tcx>(\n ) -> (Vec<Local>, Vec<Local>) {\n     let (boring_locals, relevant_live_locals): (Vec<_>, Vec<_>) =\n         body.local_decls.iter_enumerated().partition_map(|(local, local_decl)| {\n-            if tcx.all_free_regions_meet(&local_decl.ty, |r| {\n-                free_regions.contains(&r.to_region_vid())\n-            }) {\n+            if tcx.all_free_regions_meet(&local_decl.ty, |r| free_regions.contains(&r.as_var())) {\n                 Either::Left(local)\n             } else {\n                 Either::Right(local)"}, {"sha": "375eca1b29d3daf841f5b0d184d2a0976276cde0", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -56,7 +56,6 @@ use crate::{\n     facts::AllFacts,\n     location::LocationTable,\n     member_constraints::MemberConstraintSet,\n-    nll::ToRegionVid,\n     path_utils,\n     region_infer::values::{\n         LivenessValues, PlaceholderIndex, PlaceholderIndices, RegionValueElements,\n@@ -2419,7 +2418,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if let Some(all_facts) = all_facts {\n             let _prof_timer = self.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n             if let Some(borrow_index) = borrow_set.get_index_of(&location) {\n-                let region_vid = borrow_region.to_region_vid();\n+                let region_vid = borrow_region.as_var();\n                 all_facts.loan_issued_at.push((\n                     region_vid,\n                     borrow_index,\n@@ -2465,8 +2464,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     match base_ty.kind() {\n                         ty::Ref(ref_region, _, mutbl) => {\n                             constraints.outlives_constraints.push(OutlivesConstraint {\n-                                sup: ref_region.to_region_vid(),\n-                                sub: borrow_region.to_region_vid(),\n+                                sup: ref_region.as_var(),\n+                                sub: borrow_region.as_var(),\n                                 locations: location.to_locations(),\n                                 span: location.to_locations().span(body),\n                                 category,"}, {"sha": "70fddb1057c09c86f69a7f5f03c6773648b0b52d", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc400993eadea8a927cc5f96a15cc7c493c7a88/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=bbc400993eadea8a927cc5f96a15cc7c493c7a88", "patch": "@@ -28,7 +28,6 @@ use rustc_span::symbol::{kw, sym};\n use rustc_span::Symbol;\n use std::iter;\n \n-use crate::nll::ToRegionVid;\n use crate::renumber::{BoundRegionInfo, RegionCtxt};\n use crate::BorrowckInferCtxt;\n \n@@ -406,7 +405,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         // Create the \"global\" region that is always free in all contexts: 'static.\n         let fr_static =\n-            self.infcx.next_nll_region_var(FR, || RegionCtxt::Free(kw::Static)).to_region_vid();\n+            self.infcx.next_nll_region_var(FR, || RegionCtxt::Free(kw::Static)).as_var();\n \n         // We've now added all the global regions. The next ones we\n         // add will be external.\n@@ -446,7 +445,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                         };\n \n                         debug!(?region_vid);\n-                        indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+                        indices.insert_late_bound_region(r, region_vid.as_var());\n                     }\n                 },\n             );\n@@ -480,7 +479,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 };\n \n                 debug!(?region_vid);\n-                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+                indices.insert_late_bound_region(r, region_vid.as_var());\n             }\n         });\n \n@@ -499,7 +498,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 let reg_vid = self\n                     .infcx\n                     .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"c-variadic\")))\n-                    .to_region_vid();\n+                    .as_var();\n \n                 let region = self.infcx.tcx.mk_re_var(reg_vid);\n                 let va_list_ty =\n@@ -514,7 +513,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let fr_fn_body = self\n             .infcx\n             .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"fn_body\")))\n-            .to_region_vid();\n+            .as_var();\n \n         let num_universals = self.infcx.num_region_vars();\n \n@@ -635,7 +634,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let global_mapping = iter::once((tcx.lifetimes.re_static, fr_static));\n         let subst_mapping =\n-            iter::zip(identity_substs.regions(), fr_substs.regions().map(|r| r.to_region_vid()));\n+            iter::zip(identity_substs.regions(), fr_substs.regions().map(|r| r.as_var()));\n \n         UniversalRegionIndices { indices: global_mapping.chain(subst_mapping).collect(), fr_static }\n     }\n@@ -789,7 +788,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n                 self.next_nll_region_var(origin, || RegionCtxt::Bound(BoundRegionInfo::Name(name)))\n             };\n \n-            indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n+            indices.insert_late_bound_region(liberated_region, region_vid.as_var());\n             debug!(?liberated_region, ?region_vid);\n             region_vid\n         });\n@@ -822,7 +821,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n                 };\n \n                 debug!(?region_vid);\n-                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+                indices.insert_late_bound_region(r, region_vid.as_var());\n             }\n         });\n     }\n@@ -843,7 +842,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n                     })\n                 };\n \n-                indices.insert_late_bound_region(r, region_vid.to_region_vid());\n+                indices.insert_late_bound_region(r, region_vid.as_var());\n             }\n         });\n     }\n@@ -861,7 +860,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     }\n \n     /// Converts `r` into a local inference variable: `r` can either\n-    /// by a `ReVar` (i.e., already a reference to an inference\n+    /// be a `ReVar` (i.e., already a reference to an inference\n     /// variable) or it can be `'static` or some early-bound\n     /// region. This is useful when taking the results from\n     /// type-checking and trait-matching, which may sometimes\n@@ -870,7 +869,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     /// fully initialized.\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n         if let ty::ReVar(..) = *r {\n-            r.to_region_vid()\n+            r.as_var()\n         } else if r.is_error() {\n             // We use the `'static` `RegionVid` because `ReError` doesn't actually exist in the\n             // `UniversalRegionIndices`. This is fine because 1) it is a fallback only used if"}]}