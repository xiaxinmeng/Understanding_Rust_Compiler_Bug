{"sha": "133cd2cfaf244c130e2e0d681090ca117bcba94e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzM2NkMmNmYWYyNDRjMTMwZTJlMGQ2ODEwOTBjYTExN2JjYmE5NGU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-20T17:17:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-22T11:26:32Z"}, "message": "Search for generic parameters when finding non-`structural_match` types", "tree": {"sha": "08ba9c66c833011a5451fe5338834c7b7e087cff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08ba9c66c833011a5451fe5338834c7b7e087cff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/133cd2cfaf244c130e2e0d681090ca117bcba94e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/133cd2cfaf244c130e2e0d681090ca117bcba94e", "html_url": "https://github.com/rust-lang/rust/commit/133cd2cfaf244c130e2e0d681090ca117bcba94e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/133cd2cfaf244c130e2e0d681090ca117bcba94e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd53deaeb79e78162524e18ca29211745e2d18e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd53deaeb79e78162524e18ca29211745e2d18e", "html_url": "https://github.com/rust-lang/rust/commit/bbd53deaeb79e78162524e18ca29211745e2d18e"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "6c512a0238eed03bd1780f17dae75aec6ac0248f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=133cd2cfaf244c130e2e0d681090ca117bcba94e", "patch": "@@ -3393,9 +3393,15 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     fn_like.asyncness()\n }\n \n+pub enum NonStructuralMatchTy<'tcx> {\n+    Adt(&'tcx AdtDef),\n+    Param,\n+}\n+\n /// This method traverses the structure of `ty`, trying to find an\n /// instance of an ADT (i.e. struct or enum) that was declared without\n-/// the `#[structural_match]` attribute.\n+/// the `#[structural_match]` attribute, or a generic type parameter\n+/// (which cannot be determined to be `structural_match`).\n ///\n /// The \"structure of a type\" includes all components that would be\n /// considered when doing a pattern match on a constant of that\n@@ -3417,22 +3423,22 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n /// For more background on why Rust has this requirement, and issues\n /// that arose when the requirement was not enforced completely, see\n /// Rust RFC 1445, rust-lang/rust#61188, and rust-lang/rust#62307.\n-pub fn search_for_adt_without_structural_match<'tcx>(tcx: TyCtxt<'tcx>,\n-                                                 ty: Ty<'tcx>)\n-                                                 -> Option<&'tcx AdtDef>\n-{\n+pub fn search_for_structural_match_violation<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Option<NonStructuralMatchTy<'tcx>> {\n     let mut search = Search { tcx, found: None, seen: FxHashSet::default() };\n     ty.visit_with(&mut search);\n     return search.found;\n \n     struct Search<'tcx> {\n         tcx: TyCtxt<'tcx>,\n \n-        // records the first ADT we find without `#[structural_match`\n-        found: Option<&'tcx AdtDef>,\n+        // Records the first ADT or type parameter we find without `#[structural_match`.\n+        found: Option<NonStructuralMatchTy<'tcx>>,\n \n-        // tracks ADT's previously encountered during search, so that\n-        // we will not recur on them again.\n+        // Tracks ADTs previously encountered during search, so that\n+        // we will not recurse on them again.\n         seen: FxHashSet<hir::def_id::DefId>,\n     }\n \n@@ -3442,6 +3448,10 @@ pub fn search_for_adt_without_structural_match<'tcx>(tcx: TyCtxt<'tcx>,\n \n             let (adt_def, substs) = match ty.kind {\n                 ty::Adt(adt_def, substs) => (adt_def, substs),\n+                ty::Param(_) => {\n+                    self.found = Some(NonStructuralMatchTy::Param);\n+                    return true; // Stop visiting.\n+                }\n                 ty::RawPtr(..) => {\n                     // `#[structural_match]` ignores substructure of\n                     // `*const _`/`*mut _`, so skip super_visit_with\n@@ -3468,9 +3478,9 @@ pub fn search_for_adt_without_structural_match<'tcx>(tcx: TyCtxt<'tcx>,\n             };\n \n             if !self.tcx.has_attr(adt_def.did, sym::structural_match) {\n-                self.found = Some(&adt_def);\n+                self.found = Some(NonStructuralMatchTy::Adt(&adt_def));\n                 debug!(\"Search found adt_def: {:?}\", adt_def);\n-                return true // Halt visiting!\n+                return true; // Stop visiting.\n             }\n \n             if !self.seen.insert(adt_def.did) {"}, {"sha": "98e286e61e942d54c7e293f34ebf2e01680da233", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=133cd2cfaf244c130e2e0d681090ca117bcba94e", "patch": "@@ -999,15 +999,21 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         if self.include_lint_checks && !saw_error {\n             // If we were able to successfully convert the const to some pat, double-check\n             // that the type of the const obeys `#[structural_match]` constraint.\n-            if let Some(adt_def) = ty::search_for_adt_without_structural_match(self.tcx, cv.ty) {\n-\n-                let path = self.tcx.def_path_str(adt_def.did);\n-                let msg = format!(\n-                    \"to use a constant of type `{}` in a pattern, \\\n-                     `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                    path,\n-                    path,\n-                );\n+            if let Some(non_sm_ty) = ty::search_for_structural_match_violation(self.tcx, cv.ty) {\n+                let msg = match non_sm_ty {\n+                    ty::NonStructuralMatchTy::Adt(adt_def) => {\n+                        let path = self.tcx.def_path_str(adt_def.did);\n+                        format!(\n+                            \"to use a constant of type `{}` in a pattern, \\\n+                             `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                            path,\n+                            path,\n+                        )\n+                    }\n+                    ty::NonStructuralMatchTy::Param => {\n+                        bug!(\"use of constant whose type is a parameter inside a pattern\");\n+                    }\n+                };\n \n                 // before issuing lint, double-check there even *is* a\n                 // semantic PartialEq for us to dispatch to."}, {"sha": "08fb5ae1676e7c68beef5e0ec82efae131a52c57", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=133cd2cfaf244c130e2e0d681090ca117bcba94e", "patch": "@@ -1532,11 +1532,11 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                         );\n                     };\n                 }\n-                if ty::search_for_adt_without_structural_match(tcx, ty).is_some() {\n+                if ty::search_for_structural_match_violation(tcx, ty).is_some() {\n                     struct_span_err!(\n                         tcx.sess,\n                         hir_ty.span,\n-                        E0739,\n+                        E0740,\n                         \"the types of const generic parameters must derive `PartialEq` and `Eq`\",\n                     ).span_label(\n                         hir_ty.span,"}, {"sha": "2cf6951c37569cb7a57eab454f6fddc77bda9248", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=133cd2cfaf244c130e2e0d681090ca117bcba94e", "patch": "@@ -4978,11 +4978,11 @@ the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n [RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n \"##,\n \n-E0739: r##\"\n+E0740: r##\"\n Only `structural_match` types (that is, types that derive `PartialEq` and `Eq`)\n may be used as the types of const generic parameters.\n \n-```compile_fail,E0739\n+```compile_fail,E0740\n #![feature(const_generics)]\n \n struct A;"}, {"sha": "c870d9b1db48602ca43b5a038b2dbbc4de6f2a61", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/133cd2cfaf244c130e2e0d681090ca117bcba94e/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr?ref=133cd2cfaf244c130e2e0d681090ca117bcba94e", "patch": "@@ -6,12 +6,12 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0739]: the types of const generic parameters must derive `PartialEq` and `Eq`\n+error[E0740]: the types of const generic parameters must derive `PartialEq` and `Eq`\n   --> $DIR/forbid-non-structural_match-types.rs:11:19\n    |\n LL | struct D<const X: C>;\n    |                   ^ `C` doesn't derive both `PartialEq` and `Eq`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0739`.\n+For more information about this error, try `rustc --explain E0740`."}]}