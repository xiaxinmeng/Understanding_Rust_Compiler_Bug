{"sha": "9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDllMmVmMDcwNmFiMzFmMDUwN2UzOGFkNDkyODFhOGMzOGY2Y2I=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-25T11:13:28Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-25T11:13:28Z"}, "message": "Use smaller span for adjustments on block expressions", "tree": {"sha": "39bf4ccabd0947bb7c084196ab8d7531497a5286", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39bf4ccabd0947bb7c084196ab8d7531497a5286"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "html_url": "https://github.com/rust-lang/rust/commit/9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9fe312b98d5a6b194c4ad1a17dcf258ba9941ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9fe312b98d5a6b194c4ad1a17dcf258ba9941ea", "html_url": "https://github.com/rust-lang/rust/commit/a9fe312b98d5a6b194c4ad1a17dcf258ba9941ea"}], "stats": {"total": 176, "additions": 81, "deletions": 95}, "files": [{"sha": "3e2c03f25ab86f6a3bdea00a9b5883377c940e38", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -78,7 +78,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     mut expr: Expr<'tcx>,\n                                     adjustment: &Adjustment<'tcx>)\n                                     -> Expr<'tcx> {\n-    let Expr { temp_lifetime, span, .. } = expr;\n+    let Expr { temp_lifetime, mut span, .. } = expr;\n     let kind = match adjustment.kind {\n         Adjust::ReifyFnPointer => {\n             ExprKind::ReifyFnPointer { source: expr.to_ref() }\n@@ -96,6 +96,25 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             ExprKind::Cast { source: expr.to_ref() }\n         }\n         Adjust::Deref(None) => {\n+            // Adjust the span from the block, to the last expression of the\n+            // block. This is a better span when returning a mutable reference\n+            // with too short a lifetime. The error message will use the span\n+            // from the assignment to the return place, which should only point\n+            // at the returned value, not the entire function body.\n+            //\n+            // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {\n+            //      x\n+            //   // ^ error message points at this expression.\n+            // }\n+            //\n+            // We don't need to do this adjustment in the next match arm since\n+            // deref coercions always start with a built-in deref.\n+            if let ExprKind::Block { body } = expr.kind {\n+                if let Some(ref last_expr) = body.expr {\n+                    span = last_expr.span;\n+                    expr.span = span;\n+                }\n+            }\n             ExprKind::Deref { arg: expr.to_ref() }\n         }\n         Adjust::Deref(Some(deref)) => {"}, {"sha": "16cf4fd1b32e4edae0cbb86b6ee2e03a768a6257", "filename": "src/test/ui/issues/issue-17718-const-bad-values.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.rs?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -15,6 +15,5 @@ static mut S: usize = 3;\n const C2: &'static mut usize = unsafe { &mut S };\n //~^ ERROR: constants cannot refer to statics\n //~| ERROR: references in constants may only refer to immutable values\n-//~| ERROR: references in constants may only refer to immutable values\n \n fn main() {}"}, {"sha": "85424e5b73e545e8cb6748a40852d4d965e3592a", "filename": "src/test/ui/issues/issue-17718-const-bad-values.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-bad-values.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -16,13 +16,7 @@ error[E0017]: references in constants may only refer to immutable values\n LL | const C2: &'static mut usize = unsafe { &mut S };\n    |                                         ^^^^^^ constants require immutable values\n \n-error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/issue-17718-const-bad-values.rs:15:32\n-   |\n-LL | const C2: &'static mut usize = unsafe { &mut S };\n-   |                                ^^^^^^^^^^^^^^^^^ constants require immutable values\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors occurred: E0013, E0017.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "3f098fa37ce5c9b48b48730a75772ae35e05bd23", "filename": "src/test/ui/issues/issue-46471-1.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -12,16 +12,13 @@ LL | }\n error[E0597]: `z` does not live long enough (Mir)\n   --> $DIR/issue-46471-1.rs:16:9\n    |\n-LL |       let y = {\n-   |  _____________-\n-LL | |         let mut z = 0;\n-LL | |         &mut z\n-   | |         ^^^^^^ borrowed value does not live long enough\n-LL | |     };\n-   | |     -\n-   | |     |\n-   | |_____`z` dropped here while still borrowed\n-   |       borrow later used here\n+LL |         &mut z\n+   |         ^^^^^^\n+   |         |\n+   |         borrowed value does not live long enough\n+   |         borrow later used here\n+LL |     };\n+   |     - `z` dropped here while still borrowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "40dd9e25a17392c4b19d000c39c656a1ee5c526d", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -5,17 +5,14 @@ LL |         match self.0 { ref mut x => x } //~ ERROR mismatched types\n    |                                     ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/match-ref-mut-invariance.rs:19:49\n+  --> $DIR/match-ref-mut-invariance.rs:20:9\n    |\n-LL |   impl<'b> S<'b> {\n-   |        -- lifetime `'b` defined here\n-LL |       fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n-   |  ____________--___________________________________^\n-   | |            |\n-   | |            lifetime `'a` defined here\n-LL | |         match self.0 { ref mut x => x } //~ ERROR mismatched types\n-LL | |     }\n-   | |_____^ returning this value requires that `'a` must outlive `'b`\n+LL | impl<'b> S<'b> {\n+   |      -- lifetime `'b` defined here\n+LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n+   |            -- lifetime `'a` defined here\n+LL |         match self.0 { ref mut x => x } //~ ERROR mismatched types\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "5314f37a3f88cad4fb428597b9ebe3986b626411", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -5,18 +5,15 @@ LL |         x //~ ERROR mismatched types\n    |         ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/match-ref-mut-let-invariance.rs:19:49\n+  --> $DIR/match-ref-mut-let-invariance.rs:21:9\n    |\n-LL |   impl<'b> S<'b> {\n-   |        -- lifetime `'b` defined here\n-LL |       fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n-   |  ____________--___________________________________^\n-   | |            |\n-   | |            lifetime `'a` defined here\n-LL | |         let ref mut x = self.0;\n-LL | |         x //~ ERROR mismatched types\n-LL | |     }\n-   | |_____^ returning this value requires that `'a` must outlive `'b`\n+LL | impl<'b> S<'b> {\n+   |      -- lifetime `'b` defined here\n+LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n+   |            -- lifetime `'a` defined here\n+LL |         let ref mut x = self.0;\n+LL |         x //~ ERROR mismatched types\n+   |         ^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "7ef6572a5d79973316e20a878a5e3389995e23e2", "filename": "src/test/ui/nll/mir_check_cast_unsize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.rs?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -15,9 +15,9 @@\n use std::fmt::Debug;\n \n fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n-    //~^ ERROR unsatisfied lifetime constraints\n     x\n-    //~^ WARNING not reporting region error due to nll\n+    //~^ ERROR unsatisfied lifetime constraints\n+    //~| WARNING not reporting region error due to nll\n }\n \n fn main() {}"}, {"sha": "a965e611f992a42d5bf00e48b9fe1978dd98a8ac", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -1,21 +1,16 @@\n warning: not reporting region error due to nll\n-  --> $DIR/mir_check_cast_unsize.rs:19:5\n+  --> $DIR/mir_check_cast_unsize.rs:18:5\n    |\n LL |     x\n    |     ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_unsize.rs:17:46\n+  --> $DIR/mir_check_cast_unsize.rs:18:5\n    |\n-LL |   fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n-   |  ________--____________________________________^\n-   | |        |\n-   | |        lifetime `'a` defined here\n-LL | |     //~^ ERROR unsatisfied lifetime constraints\n-LL | |     x\n-LL | |     //~^ WARNING not reporting region error due to nll\n-LL | | }\n-   | |_^ returning this value requires that `'a` must outlive `'static`\n+LL | fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n+   |        -- lifetime `'a` defined here\n+LL |     x\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "2dc0a10f425ae0c370ed18c8436c140cec60a544", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.nll.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -5,20 +5,15 @@ LL |     ss\n    |     ^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/object-lifetime-default-elision.rs:64:53\n+  --> $DIR/object-lifetime-default-elision.rs:81:5\n    |\n-LL |   fn load3<'a,'b>(ss: &'a SomeTrait) -> &'b SomeTrait {\n-   |  __________--_--______________________________________^\n-   | |          |  |\n-   | |          |  lifetime `'b` defined here\n-   | |          lifetime `'a` defined here\n-LL | |     // Under old rules, the fully elaborated types of input/output were:\n-LL | |     //\n-LL | |     // for<'a,'b,'c>fn(&'a (SomeTrait+'c)) -> &'b (SomeTrait+'a)\n-...  |\n-LL | |         //~| ERROR cannot infer\n-LL | | }\n-   | |_^ returning this value requires that `'a` must outlive `'b`\n+LL | fn load3<'a,'b>(ss: &'a SomeTrait) -> &'b SomeTrait {\n+   |          -- -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+...\n+LL |     ss\n+   |     ^^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "89575ca9bc809097171f44e5f56fb55826b0497b", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -5,16 +5,14 @@ LL |     &mut ***p //~ ERROR 14:5: 14:14: lifetime mismatch [E0623]\n    |     ^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-reborrow-from-shorter-mut-ref-mut-ref.rs:13:85\n+  --> $DIR/regions-reborrow-from-shorter-mut-ref-mut-ref.rs:14:5\n    |\n-LL |   fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b mut isize {\n-   |  ______________________--__--_________________________________________________________^\n-   | |                      |   |\n-   | |                      |   lifetime `'b` defined here\n-   | |                      lifetime `'a` defined here\n-LL | |     &mut ***p //~ ERROR 14:5: 14:14: lifetime mismatch [E0623]\n-LL | | }\n-   | |_^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+LL | fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b mut isize {\n+   |                      --  -- lifetime `'b` defined here\n+   |                      |\n+   |                      lifetime `'a` defined here\n+LL |     &mut ***p //~ ERROR 14:5: 14:14: lifetime mismatch [E0623]\n+   |     ^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "9c57813f26be6a67069a93c669bb70bada1c8283", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.nll.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -5,16 +5,14 @@ LL |     &mut **p //~ ERROR 16:5: 16:13: lifetime mismatch [E0623]\n    |     ^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-reborrow-from-shorter-mut-ref.rs:15:73\n+  --> $DIR/regions-reborrow-from-shorter-mut-ref.rs:16:5\n    |\n-LL |   fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n-   |  ______________________--__--_____________________________________________^\n-   | |                      |   |\n-   | |                      |   lifetime `'b` defined here\n-   | |                      lifetime `'a` defined here\n-LL | |     &mut **p //~ ERROR 16:5: 16:13: lifetime mismatch [E0623]\n-LL | | }\n-   | |_^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+LL | fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n+   |                      --  -- lifetime `'b` defined here\n+   |                      |\n+   |                      lifetime `'a` defined here\n+LL |     &mut **p //~ ERROR 16:5: 16:13: lifetime mismatch [E0623]\n+   |     ^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "01db25a07f76e6bf7634411ef83ac37490005f27", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9309e2ef0706ab31f0507e38ad49281a8c38f6cb/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "patch": "@@ -11,18 +11,15 @@ LL |     x //~ ERROR mismatched types\n    |     ^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-trait-object-subtyping.rs:23:51\n+  --> $DIR/regions-trait-object-subtyping.rs:25:5\n    |\n-LL |   fn foo3<'a,'b>(x: &'a mut Dummy) -> &'b mut Dummy {\n-   |  _________--_--_____________________________________^\n-   | |         |  |\n-   | |         |  lifetime `'b` defined here\n-   | |         lifetime `'a` defined here\n-LL | |     // Without knowing 'a:'b, we can't coerce\n-LL | |     x //~ ERROR lifetime bound not satisfied\n-LL | |      //~^ ERROR cannot infer an appropriate lifetime\n-LL | | }\n-   | |_^ returning this value requires that `'a` must outlive `'b`\n+LL | fn foo3<'a,'b>(x: &'a mut Dummy) -> &'b mut Dummy {\n+   |         -- -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     // Without knowing 'a:'b, we can't coerce\n+LL |     x //~ ERROR lifetime bound not satisfied\n+   |     ^ returning this value requires that `'a` must outlive `'b`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/regions-trait-object-subtyping.rs:32:5"}]}