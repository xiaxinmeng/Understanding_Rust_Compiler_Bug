{"sha": "ede7f94794213187b7d8984fdd24be6eb6106b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZTdmOTQ3OTQyMTMxODdiN2Q4OTg0ZmRkMjRiZTZlYjYxMDZiOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-27T23:31:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-27T23:31:43Z"}, "message": "Auto merge of #49822 - matthewjasper:dropck-closures, r=nikomatsakis\n\nAccess individual fields of tuples, closures and generators on drop.\n\nFixes #48623, by extending the change in #47917 to closures. Also does this for tuples and generators for consistency.\n\nEnums are unchanged because there is now way to borrow `*enum.field` without borrowing `enum.field` at the moment, so any error would be reported when the enum goes out of scope. Unions aren't changed because unions they don't automatically drop their fields.\n\nr? @nikomatsakis", "tree": {"sha": "81e7aa351705e7b1d8375c9b23594d2086318ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e7aa351705e7b1d8375c9b23594d2086318ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede7f94794213187b7d8984fdd24be6eb6106b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede7f94794213187b7d8984fdd24be6eb6106b96", "html_url": "https://github.com/rust-lang/rust/commit/ede7f94794213187b7d8984fdd24be6eb6106b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede7f94794213187b7d8984fdd24be6eb6106b96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686d0ae137b1d66711694903607750ad54f60f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/686d0ae137b1d66711694903607750ad54f60f69", "html_url": "https://github.com/rust-lang/rust/commit/686d0ae137b1d66711694903607750ad54f60f69"}, {"sha": "902bc0fb1afb9eeb04c541787bcef37e67bfbcbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/902bc0fb1afb9eeb04c541787bcef37e67bfbcbe", "html_url": "https://github.com/rust-lang/rust/commit/902bc0fb1afb9eeb04c541787bcef37e67bfbcbe"}], "stats": {"total": 142, "additions": 102, "deletions": 40}, "files": [{"sha": "5c7061abbb6608b9104401710d0dd04c113d286c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ede7f94794213187b7d8984fdd24be6eb6106b96", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::maps::Providers;\n use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Place};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Field, Statement, StatementKind, Terminator, TerminatorKind};\n-use rustc::mir::ClosureRegionRequirements;\n+use rustc::mir::{ClosureRegionRequirements, Local};\n \n use rustc_data_structures::control_flow_graph::dominators::Dominators;\n use rustc_data_structures::fx::FxHashSet;\n@@ -729,6 +729,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         erased_drop_place_ty: ty::Ty<'gcx>,\n         span: Span,\n     ) {\n+        let gcx = self.tcx.global_tcx();\n+        let drop_field = |\n+            mir: &mut MirBorrowckCtxt<'cx, 'gcx, 'tcx>,\n+            (index, field): (usize, ty::Ty<'gcx>),\n+        | {\n+            let field_ty = gcx.normalize_erasing_regions(mir.param_env, field);\n+            let place = drop_place.clone().field(Field::new(index), field_ty);\n+\n+            mir.visit_terminator_drop(loc, term, flow_state, &place, field_ty, span);\n+        };\n+\n         match erased_drop_place_ty.sty {\n             // When a struct is being dropped, we need to check\n             // whether it has a destructor, if it does, then we can\n@@ -737,22 +748,31 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             // destructor but `bar` does not, we will only check for\n             // borrows of `x.foo` and not `x.bar`. See #47703.\n             ty::TyAdt(def, substs) if def.is_struct() && !def.has_dtor(self.tcx) => {\n-                for (index, field) in def.all_fields().enumerate() {\n-                    let gcx = self.tcx.global_tcx();\n-                    let field_ty = field.ty(gcx, substs);\n-                    let field_ty = gcx.normalize_erasing_regions(self.param_env, field_ty);\n-                    let place = drop_place.clone().field(Field::new(index), field_ty);\n-\n-                    self.visit_terminator_drop(loc, term, flow_state, &place, field_ty, span);\n-                }\n+                def.all_fields()\n+                    .map(|field| field.ty(gcx, substs))\n+                    .enumerate()\n+                    .for_each(|field| drop_field(self, field));\n+            }\n+            // Same as above, but for tuples.\n+            ty::TyTuple(tys) => {\n+                tys.iter().cloned().enumerate()\n+                    .for_each(|field| drop_field(self, field));\n+            }\n+            // Closures and generators also have disjoint fields, but they are only\n+            // directly accessed in the body of the closure/generator.\n+            ty::TyClosure(def, substs)\n+            | ty::TyGenerator(def, substs, ..)\n+                if *drop_place == Place::Local(Local::new(1)) && !self.mir.upvar_decls.is_empty()\n+            => {\n+                substs.upvar_tys(def, self.tcx).enumerate()\n+                    .for_each(|field| drop_field(self, field));\n             }\n             _ => {\n                 // We have now refined the type of the value being\n                 // dropped (potentially) to just the type of a\n                 // subfield; so check whether that field's type still\n                 // \"needs drop\". If so, we assume that the destructor\n                 // may access any data it likes (i.e., a Deep Write).\n-                let gcx = self.tcx.global_tcx();\n                 if erased_drop_place_ty.needs_drop(gcx, self.param_env) {\n                     self.access_place(\n                         ContextKind::Drop.new(loc),"}, {"sha": "4fec3efc0a0896d49ce19019f9e715bc0fee0704", "filename": "src/test/run-pass/issue-47703-tuple.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Ftest%2Frun-pass%2Fissue-47703-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Ftest%2Frun-pass%2Fissue-47703-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47703-tuple.rs?ref=ede7f94794213187b7d8984fdd24be6eb6106b96", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+struct WithDrop;\n+\n+impl Drop for WithDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+fn consume(x: (&mut (), WithDrop)) -> &mut () { x.0 }\n+\n+fn main() {}"}, {"sha": "08ff54a428e763d85e5e5d3f05a6a1639d7f7237", "filename": "src/test/run-pass/nll/issue-48623-closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-closure.rs?ref=ede7f94794213187b7d8984fdd24be6eb6106b96", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+struct WithDrop;\n+\n+impl Drop for WithDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+fn reborrow_from_closure(r: &mut ()) -> &mut () {\n+    let d = WithDrop;\n+    (move || { d; &mut *r })()\n+}\n+\n+fn main() {}"}, {"sha": "524837c4ba91e97b184a6065226c536ef72f4e93", "filename": "src/test/run-pass/nll/issue-48623-generator.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-48623-generator.rs?ref=ede7f94794213187b7d8984fdd24be6eb6106b96", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+#![feature(generators, generator_trait)]\n+\n+struct WithDrop;\n+\n+impl Drop for WithDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+fn reborrow_from_generator(r: &mut ()) {\n+    let d = WithDrop;\n+    move || { d; yield; &mut *r };\n+}\n+\n+fn main() {}"}, {"sha": "af79eb7ac054fb8b84862a58c04f3cd41f62f78d", "filename": "src/test/ui/generator/yield-while-iterating.nll.stderr", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ede7f94794213187b7d8984fdd24be6eb6106b96/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr?ref=ede7f94794213187b7d8984fdd24be6eb6106b96", "patch": "@@ -6,20 +6,6 @@ LL |         for p in &x { //~ ERROR\n LL |             yield();\n    |             ------- possible yield occurs here\n \n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/yield-while-iterating.rs:50:17\n-   |\n-LL |       let mut b = || {\n-   |  _________________^\n-LL | |         for p in &mut x {\n-LL | |             yield p;\n-LL | |         }\n-LL | |     };\n-   | |     ^\n-   | |     |\n-   | |_____temporary value only lives until here\n-   |       temporary value does not live long enough\n-\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/yield-while-iterating.rs:67:20\n    |\n@@ -35,21 +21,7 @@ LL |       println!(\"{}\", x[0]); //~ ERROR\n LL |       b.resume();\n    |       - borrow later used here\n \n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/yield-while-iterating.rs:62:17\n-   |\n-LL |       let mut b = || {\n-   |  _________________^\n-LL | |         for p in &mut x {\n-LL | |             yield p;\n-LL | |         }\n-LL | |     };\n-   | |     ^\n-   | |     |\n-   | |_____temporary value only lives until here\n-   |       temporary value does not live long enough\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0502, E0597, E0626.\n+Some errors occurred: E0502, E0626.\n For more information about an error, try `rustc --explain E0502`."}]}