{"sha": "6c26cbb6026194a280fa0f33c794d4397ad426da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjZjYmI2MDI2MTk0YTI4MGZhMGYzM2M3OTRkNDM5N2FkNDI2ZGE=", "commit": {"author": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-05-02T22:13:26Z"}, "committer": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-05-02T22:13:26Z"}, "message": "Add lint check for negating uint literals and variables.\n\nSee #11273 and #13318", "tree": {"sha": "b648bcff3efbbaa001274ccd134f3476bfa68359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b648bcff3efbbaa001274ccd134f3476bfa68359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c26cbb6026194a280fa0f33c794d4397ad426da", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c26cbb6026194a280fa0f33c794d4397ad426da", "html_url": "https://github.com/rust-lang/rust/commit/6c26cbb6026194a280fa0f33c794d4397ad426da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c26cbb6026194a280fa0f33c794d4397ad426da/comments", "author": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "239557de6de72748a5c7604081b202d53f7d9ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/239557de6de72748a5c7604081b202d53f7d9ac9", "html_url": "https://github.com/rust-lang/rust/commit/239557de6de72748a5c7604081b202d53f7d9ac9"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "15e6e62421a5b1810dcfa072db729beb128f6a36", "filename": "src/libnative/io/timer_win32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibnative%2Fio%2Ftimer_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibnative%2Fio%2Ftimer_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_win32.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -137,7 +137,7 @@ impl rtio::RtioTimer for Timer {\n \n         // there are 10^6 nanoseconds in a millisecond, and the parameter is in\n         // 100ns intervals, so we multiply by 10^4.\n-        let due = -(msecs * 10000) as libc::LARGE_INTEGER;\n+        let due = -(msecs as i64 * 10000) as libc::LARGE_INTEGER;\n         assert_eq!(unsafe {\n             imp::SetWaitableTimer(self.obj, &due, 0, ptr::null(),\n                                   ptr::mut_null(), 0)\n@@ -151,7 +151,7 @@ impl rtio::RtioTimer for Timer {\n         let (tx, rx) = channel();\n \n         // see above for the calculation\n-        let due = -(msecs * 10000) as libc::LARGE_INTEGER;\n+        let due = -(msecs as i64 * 10000) as libc::LARGE_INTEGER;\n         assert_eq!(unsafe {\n             imp::SetWaitableTimer(self.obj, &due, 0, ptr::null(),\n                                   ptr::mut_null(), 0)\n@@ -167,7 +167,7 @@ impl rtio::RtioTimer for Timer {\n         let (tx, rx) = channel();\n \n         // see above for the calculation\n-        let due = -(msecs * 10000) as libc::LARGE_INTEGER;\n+        let due = -(msecs as i64 * 10000) as libc::LARGE_INTEGER;\n         assert_eq!(unsafe {\n             imp::SetWaitableTimer(self.obj, &due, msecs as libc::LONG,\n                                   ptr::null(), ptr::mut_null(), 0)"}, {"sha": "7f083865d141bffa8729c691505ae5cfad80c502", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(non_camel_case_types)]\n+#![allow(unsigned_negate)]\n \n use metadata::csearch;\n use middle::astencode;"}, {"sha": "57fc8f150215aa7914526f892d9b548672e4f6a2", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -91,6 +91,7 @@ pub enum Lint {\n     AttributeUsage,\n     UnknownFeatures,\n     UnknownCrateType,\n+    UnsignedNegate,\n \n     ManagedHeapMemory,\n     OwnedHeapMemory,\n@@ -390,6 +391,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: deny,\n     }),\n \n+    (\"unsigned_negate\",\n+    LintSpec {\n+        lint: UnsignedNegate,\n+        desc: \"using an unary minus operator on unsigned type\",\n+        default: warn\n+    }),\n+\n     (\"unused_must_use\",\n     LintSpec {\n         lint: UnusedMustUse,\n@@ -704,6 +712,29 @@ fn check_unused_casts(cx: &Context, e: &ast::Expr) {\n \n fn check_type_limits(cx: &Context, e: &ast::Expr) {\n     return match e.node {\n+        ast::ExprUnary(ast::UnNeg, ex) => {\n+            match ex.node  {\n+                ast::ExprLit(lit) => {\n+                    match lit.node {\n+                        ast::LitUint(..) => {\n+                            cx.span_lint(UnsignedNegate, e.span,\n+                                         \"negation of unsigned int literal may be unintentional\");\n+                        },\n+                        _ => ()\n+                    }\n+                },\n+                _ => {\n+                    let t = ty::expr_ty(cx.tcx, ex);\n+                    match ty::get(t).sty {\n+                        ty::ty_uint(_) => {\n+                            cx.span_lint(UnsignedNegate, e.span,\n+                                         \"negation of unsigned int variable may be unintentional\");\n+                        },\n+                        _ => ()\n+                    }\n+                }\n+            }\n+        },\n         ast::ExprBinary(binop, l, r) => {\n             if is_comparison(binop) && !check_limits(cx.tcx, binop, l, r) {\n                 cx.span_lint(TypeLimits, e.span,"}, {"sha": "2791e79907fe1c655041480901a92ecd58824cb3", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -43,6 +43,8 @@\n  *   taken to it, implementing them for Rust seems difficult.\n  */\n \n+#![allow(unsigned_negate)]\n+\n use std::container::Map;\n use libc::c_ulonglong;\n use std::num::{Bitwise};"}, {"sha": "2032a2a6b58bd9a9e854a1453dedee35e2007971", "filename": "src/libstd/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fnum.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -12,6 +12,8 @@\n \n // FIXME: #6220 Implement floating point formatting\n \n+#![allow(unsigned_negate)]\n+\n use container::Container;\n use fmt;\n use iter::{Iterator, DoubleEndedIterator};"}, {"sha": "672de0bf9e5791e93d1093f90168f08a8162ecd6", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for 32-bits floats (`f32` type)\n \n #![allow(missing_doc)]\n+#![allow(unsigned_negate)]\n \n use prelude::*;\n "}, {"sha": "14a432905b401562af0277ab5aa02bba6887bd45", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n #![allow(non_uppercase_statics)]\n+#![allow(unsigned_negate)]\n \n use prelude::*;\n "}, {"sha": "87740dcb1355bbd07345d5c784df7fb4fa048ce5", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n #![allow(non_uppercase_statics)]\n+#![allow(unsigned_negate)]\n \n use prelude::*;\n "}, {"sha": "15b2528e616092378362068f8fe19b42d3e0e011", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n #![allow(non_uppercase_statics)]\n+#![allow(unsigned_negate)]\n \n use prelude::*;\n "}, {"sha": "f841a31ee13588895c593715efbc7da052bfc8bd", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n #![allow(non_uppercase_statics)]\n+#![allow(unsigned_negate)]\n \n use prelude::*;\n "}, {"sha": "46cb4f448877d73abf15dba07d8368e56a7ae525", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -11,6 +11,7 @@\n //! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n #![allow(non_uppercase_statics)]\n+#![allow(unsigned_negate)]\n \n use prelude::*;\n "}, {"sha": "fac8736b929363319e05fe1c8af47f188fe617e5", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -10,6 +10,7 @@\n \n #![macro_escape]\n #![doc(hidden)]\n+#![allow(unsigned_negate)]\n \n macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (\n "}, {"sha": "9f5986e3dc6b2df3f749efec12d121bf95284bf0", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -15,6 +15,7 @@\n //! which are not used for scheduling in any way.\n \n #![allow(non_camel_case_types)]\n+#![allow(unsigned_negate)]\n \n use cast;\n use kinds::Send;"}, {"sha": "1aaf68d7c1ad1305e9088cf0317e64883722fb19", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c26cbb6026194a280fa0f33c794d4397ad426da/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=6c26cbb6026194a280fa0f33c794d4397ad426da", "patch": "@@ -36,3 +36,14 @@ fn qux() {\n         i += 1;\n     }\n }\n+\n+fn quy() {\n+    let i = -23u; //~ WARNING negation of unsigned int literal may be unintentional\n+                  //~^ WARNING unused variable\n+}\n+\n+fn quz() {\n+    let i = 23u;\n+    let j = -i;   //~ WARNING negation of unsigned int variable may be unintentional\n+                  //~^ WARNING unused variable\n+}"}]}