{"sha": "30b883b93f94be643e4b29e32bc8dcdbf07bf1d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYjg4M2I5M2Y5NGJlNjQzZTRiMjllMzJiYzhkY2RiZjA3YmYxZDk=", "commit": {"author": {"name": "John Gallagher", "email": "jgallagher@bignerdranch.com", "date": "2015-05-06T15:47:11Z"}, "committer": {"name": "John Gallagher", "email": "jgallagher@bignerdranch.com", "date": "2015-05-06T15:47:11Z"}, "message": "Make RwLock::try_write try to obtain a write lock", "tree": {"sha": "7b630d0cb63d0a9f53fa0b08dd52c5527c990a38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b630d0cb63d0a9f53fa0b08dd52c5527c990a38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b883b93f94be643e4b29e32bc8dcdbf07bf1d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b883b93f94be643e4b29e32bc8dcdbf07bf1d9", "html_url": "https://github.com/rust-lang/rust/commit/30b883b93f94be643e4b29e32bc8dcdbf07bf1d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b883b93f94be643e4b29e32bc8dcdbf07bf1d9/comments", "author": {"login": "hydhknn", "id": 62813007, "node_id": "MDQ6VXNlcjYyODEzMDA3", "avatar_url": "https://avatars.githubusercontent.com/u/62813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hydhknn", "html_url": "https://github.com/hydhknn", "followers_url": "https://api.github.com/users/hydhknn/followers", "following_url": "https://api.github.com/users/hydhknn/following{/other_user}", "gists_url": "https://api.github.com/users/hydhknn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hydhknn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hydhknn/subscriptions", "organizations_url": "https://api.github.com/users/hydhknn/orgs", "repos_url": "https://api.github.com/users/hydhknn/repos", "events_url": "https://api.github.com/users/hydhknn/events{/privacy}", "received_events_url": "https://api.github.com/users/hydhknn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hydhknn", "id": 62813007, "node_id": "MDQ6VXNlcjYyODEzMDA3", "avatar_url": "https://avatars.githubusercontent.com/u/62813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hydhknn", "html_url": "https://github.com/hydhknn", "followers_url": "https://api.github.com/users/hydhknn/followers", "following_url": "https://api.github.com/users/hydhknn/following{/other_user}", "gists_url": "https://api.github.com/users/hydhknn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hydhknn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hydhknn/subscriptions", "organizations_url": "https://api.github.com/users/hydhknn/orgs", "repos_url": "https://api.github.com/users/hydhknn/repos", "events_url": "https://api.github.com/users/hydhknn/events{/privacy}", "received_events_url": "https://api.github.com/users/hydhknn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd71637ca40910dbd310813a19abf76db84f8f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd71637ca40910dbd310813a19abf76db84f8f6", "html_url": "https://github.com/rust-lang/rust/commit/7bd71637ca40910dbd310813a19abf76db84f8f6"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "9563f6f82136f38f1267d1d5383921015b1f0bec", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/30b883b93f94be643e4b29e32bc8dcdbf07bf1d9/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b883b93f94be643e4b29e32bc8dcdbf07bf1d9/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=30b883b93f94be643e4b29e32bc8dcdbf07bf1d9", "patch": "@@ -232,7 +232,7 @@ impl<T: ?Sized> RwLock<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<T>> {\n-        if unsafe { self.inner.lock.try_read() } {\n+        if unsafe { self.inner.lock.try_write() } {\n             Ok(try!(RwLockWriteGuard::new(&*self.inner, &self.data)))\n         } else {\n             Err(TryLockError::WouldBlock)\n@@ -413,7 +413,7 @@ mod tests {\n     use rand::{self, Rng};\n     use sync::mpsc::channel;\n     use thread;\n-    use sync::{Arc, RwLock, StaticRwLock, RW_LOCK_INIT};\n+    use sync::{Arc, RwLock, StaticRwLock, TryLockError, RW_LOCK_INIT};\n \n     #[test]\n     fn smoke() {\n@@ -577,4 +577,21 @@ mod tests {\n         let comp: &[i32] = &[4, 2, 5];\n         assert_eq!(&*rw.read().unwrap(), comp);\n     }\n+\n+    #[test]\n+    fn test_rwlock_try_write() {\n+        use mem::drop;\n+\n+        let lock = RwLock::new(0isize);\n+        let read_guard = lock.read().unwrap();\n+\n+        let write_result = lock.try_write();\n+        match write_result {\n+            Err(TryLockError::WouldBlock) => (),\n+            Ok(_) => assert!(false, \"try_write should not succeed while read_guard is in scope\"),\n+            Err(_) => assert!(false, \"unexpected error\"),\n+        }\n+\n+        drop(read_guard);\n+    }\n }"}]}