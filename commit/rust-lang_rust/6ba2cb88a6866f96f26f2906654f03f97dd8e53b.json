{"sha": "6ba2cb88a6866f96f26f2906654f03f97dd8e53b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYTJjYjg4YTY4NjZmOTZmMjZmMjkwNjY1NGYwM2Y5N2RkOGU1M2I=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@composition.al", "date": "2013-09-14T23:37:39Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@composition.al", "date": "2013-09-14T23:38:22Z"}, "message": "These impls, at least, can be avoided by deriving Ord.", "tree": {"sha": "a526f460d5c5c7b907da2959d3e47a53a01cf777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a526f460d5c5c7b907da2959d3e47a53a01cf777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba2cb88a6866f96f26f2906654f03f97dd8e53b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba2cb88a6866f96f26f2906654f03f97dd8e53b", "html_url": "https://github.com/rust-lang/rust/commit/6ba2cb88a6866f96f26f2906654f03f97dd8e53b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba2cb88a6866f96f26f2906654f03f97dd8e53b/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653ffa845d70b26a49e227ae4445729c369c9f80", "url": "https://api.github.com/repos/rust-lang/rust/commits/653ffa845d70b26a49e227ae4445729c369c9f80", "html_url": "https://github.com/rust-lang/rust/commit/653ffa845d70b26a49e227ae4445729c369c9f80"}], "stats": {"total": 18, "additions": 2, "deletions": 16}, "files": [{"sha": "c8e40b82e0c30b914d97efbb5575b48293f47891", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ba2cb88a6866f96f26f2906654f03f97dd8e53b/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba2cb88a6866f96f26f2906654f03f97dd8e53b/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=6ba2cb88a6866f96f26f2906654f03f97dd8e53b", "patch": "@@ -30,12 +30,12 @@ pub trait Pos {\n }\n \n /// A byte offset\n-#[deriving(Clone, Eq, IterBytes)]\n+#[deriving(Clone, Eq, IterBytes, Ord)]\n pub struct BytePos(uint);\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[deriving(Eq,IterBytes)]\n+#[deriving(Eq,IterBytes, Ord)]\n pub struct CharPos(uint);\n \n // XXX: Lots of boilerplate in these impls, but so far my attempts to fix\n@@ -46,13 +46,6 @@ impl Pos for BytePos {\n     fn to_uint(&self) -> uint { **self }\n }\n \n-impl cmp::Ord for BytePos {\n-    fn lt(&self, other: &BytePos) -> bool { **self < **other }\n-    fn le(&self, other: &BytePos) -> bool { **self <= **other }\n-    fn ge(&self, other: &BytePos) -> bool { **self >= **other }\n-    fn gt(&self, other: &BytePos) -> bool { **self > **other }\n-}\n-\n impl Add<BytePos, BytePos> for BytePos {\n     fn add(&self, rhs: &BytePos) -> BytePos {\n         BytePos(**self + **rhs)\n@@ -70,13 +63,6 @@ impl Pos for CharPos {\n     fn to_uint(&self) -> uint { **self }\n }\n \n-impl cmp::Ord for CharPos {\n-    fn lt(&self, other: &CharPos) -> bool { **self < **other }\n-    fn le(&self, other: &CharPos) -> bool { **self <= **other }\n-    fn ge(&self, other: &CharPos) -> bool { **self >= **other }\n-    fn gt(&self, other: &CharPos) -> bool { **self > **other }\n-}\n-\n impl Add<CharPos,CharPos> for CharPos {\n     fn add(&self, rhs: &CharPos) -> CharPos {\n         CharPos(**self + **rhs)"}]}