{"sha": "c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NGM5ZWY4NjNmM2I5YmZiM2RkNmU3NGNmMTgzMjgyZmFmYWNiZDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T04:50:05Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:28Z"}, "message": "parser: early return for item stmt", "tree": {"sha": "50b48c2ca1c5f3733c7babb87dc81e2f4d421f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b48c2ca1c5f3733c7babb87dc81e2f4d421f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7", "html_url": "https://github.com/rust-lang/rust/commit/c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "690815b70e14842a7713f10d8f76618f369c7a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/690815b70e14842a7713f10d8f76618f369c7a94", "html_url": "https://github.com/rust-lang/rust/commit/690815b70e14842a7713f10d8f76618f369c7a94"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "6f27fdc1a25f622256e1207508ce6e63049a5226", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=c54c9ef863f3b9bfb3dd6e74cf183282fafacbd7", "patch": "@@ -84,51 +84,50 @@ impl<'a> Parser<'a> {\n             let item = self.parse_item_(attrs.clone(), false, true)?;\n             self.directory.ownership = old_directory_ownership;\n \n-            match item {\n-                Some(i) => self.mk_stmt(lo.to(i.span), StmtKind::Item(i)),\n-                None => {\n-                    let unused_attrs = |attrs: &[Attribute], s: &mut Self| {\n-                        if !attrs.is_empty() {\n-                            if s.prev_token_kind == PrevTokenKind::DocComment {\n-                                s.span_fatal_err(s.prev_span, Error::UselessDocComment).emit();\n-                            } else if attrs.iter().any(|a| a.style == AttrStyle::Outer) {\n-                                s.span_err(\n-                                    s.token.span, \"expected statement after outer attribute\"\n-                                );\n-                            }\n-                        }\n-                    };\n-\n-                    // Do not attempt to parse an expression if we're done here.\n-                    if self.token == token::Semi {\n-                        unused_attrs(&attrs, self);\n-                        self.bump();\n-                        let mut last_semi = lo;\n-                        while self.token == token::Semi {\n-                            last_semi = self.token.span;\n-                            self.bump();\n-                        }\n-                        // We are encoding a string of semicolons as an\n-                        // an empty tuple that spans the excess semicolons\n-                        // to preserve this info until the lint stage\n-                        let kind = StmtKind::Semi(self.mk_expr(\n-                            lo.to(last_semi),\n-                            ExprKind::Tup(Vec::new()),\n-                            ThinVec::new()\n-                        ));\n-                        return Ok(Some(self.mk_stmt(lo.to(last_semi), kind)));\n-                    }\n+            if let Some(item) = item {\n+                return Ok(Some(self.mk_stmt(lo.to(item.span), StmtKind::Item(item))));\n+            }\n \n-                    if self.token == token::CloseDelim(token::Brace) {\n-                        unused_attrs(&attrs, self);\n-                        return Ok(None);\n+            let unused_attrs = |attrs: &[Attribute], s: &mut Self| {\n+                if !attrs.is_empty() {\n+                    if s.prev_token_kind == PrevTokenKind::DocComment {\n+                        s.span_fatal_err(s.prev_span, Error::UselessDocComment).emit();\n+                    } else if attrs.iter().any(|a| a.style == AttrStyle::Outer) {\n+                        s.span_err(\n+                            s.token.span, \"expected statement after outer attribute\"\n+                        );\n                     }\n+                }\n+            };\n \n-                    // Remainder are line-expr stmts.\n-                    let e = self.parse_expr_res( Restrictions::STMT_EXPR, Some(attrs.into()))?;\n-                    self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n+            // Do not attempt to parse an expression if we're done here.\n+            if self.token == token::Semi {\n+                unused_attrs(&attrs, self);\n+                self.bump();\n+                let mut last_semi = lo;\n+                while self.token == token::Semi {\n+                    last_semi = self.token.span;\n+                    self.bump();\n                 }\n+                // We are encoding a string of semicolons as an\n+                // an empty tuple that spans the excess semicolons\n+                // to preserve this info until the lint stage\n+                let kind = StmtKind::Semi(self.mk_expr(\n+                    lo.to(last_semi),\n+                    ExprKind::Tup(Vec::new()),\n+                    ThinVec::new()\n+                ));\n+                return Ok(Some(self.mk_stmt(lo.to(last_semi), kind)));\n+            }\n+\n+            if self.token == token::CloseDelim(token::Brace) {\n+                unused_attrs(&attrs, self);\n+                return Ok(None);\n             }\n+\n+            // Remainder are line-expr stmts.\n+            let e = self.parse_expr_res( Restrictions::STMT_EXPR, Some(attrs.into()))?;\n+            self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n         }))\n     }\n "}]}