{"sha": "ad1959e8e426279f68c1dd73a67356638c9ee295", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTk1OWU4ZTQyNjI3OWY2OGMxZGQ3M2E2NzM1NjYzOGM5ZWUyOTU=", "commit": {"author": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-04-29T14:56:01Z"}, "committer": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-04-29T14:56:01Z"}, "message": "added dep nodes and comment", "tree": {"sha": "cb6778b0bb6693c21ea17f08438ab9a8e556dc6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb6778b0bb6693c21ea17f08438ab9a8e556dc6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad1959e8e426279f68c1dd73a67356638c9ee295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1959e8e426279f68c1dd73a67356638c9ee295", "html_url": "https://github.com/rust-lang/rust/commit/ad1959e8e426279f68c1dd73a67356638c9ee295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad1959e8e426279f68c1dd73a67356638c9ee295/comments", "author": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f73b173cbe6e6635226593a2bc6672faf61bd60", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f73b173cbe6e6635226593a2bc6672faf61bd60", "html_url": "https://github.com/rust-lang/rust/commit/2f73b173cbe6e6635226593a2bc6672faf61bd60"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "acf9baf9677b407b63d767d2228269984af85103", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad1959e8e426279f68c1dd73a67356638c9ee295/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1959e8e426279f68c1dd73a67356638c9ee295/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=ad1959e8e426279f68c1dd73a67356638c9ee295", "patch": "@@ -148,6 +148,10 @@ pub enum DepNode<D: Clone + Debug> {\n     // For proj. cache, we just keep a list of all def-ids, since it is\n     // not a hotspot.\n     ProjectionCache { def_ids: Vec<D> },\n+\n+    // Depnodes for MetaData\n+    DescribeDef(D),\n+    DefSpan(D),\n }\n \n impl<D: Clone + Debug> DepNode<D> {\n@@ -253,6 +257,8 @@ impl<D: Clone + Debug> DepNode<D> {\n                 let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n                 def_ids.map(|d| ProjectionCache { def_ids: d })\n             }\n+            DescribeDef(ref d) => op(d).map(MetaData),\n+            DefSpan(ref d) => op(d).map(MetaData),\n         }\n     }\n }"}, {"sha": "233066f266a1db770e432d06542ed62c88861156", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad1959e8e426279f68c1dd73a67356638c9ee295/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1959e8e426279f68c1dd73a67356638c9ee295/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=ad1959e8e426279f68c1dd73a67356638c9ee295", "patch": "@@ -365,6 +365,8 @@ macro_rules! define_maps {\n                 }\n \n                 // FIXME(eddyb) Get more valid Span's on queries.\n+                // def_span guard is necesary to prevent a recursive loop,\n+                // default_span calls def_span query internally.\n                 if span == DUMMY_SP && stringify!($name) != \"def_span\" {\n                     span = key.default_span(tcx)\n                 }\n@@ -574,9 +576,8 @@ define_maps! { <'tcx>\n     [] def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n     [] symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n \n-\n-    [] describe_def: MetaData(DefId) -> Option<Def>,\n-    [] def_span: MetaData(DefId) -> Span\n+    [] describe_def: describe_def(DefId) -> Option<Def>,\n+    [] def_span: def_span(DefId) -> Span\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {\n@@ -608,3 +609,11 @@ fn typeck_item_bodies_dep_node(_: CrateNum) -> DepNode<DefId> {\n fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n     DepNode::ConstEval(def_id)\n }\n+\n+fn describe_def(def_id: DefId) -> DepNode<DefId> {\n+    DepNode::DescribeDef(def_id)\n+}\n+\n+fn def_span(def_id: DefId) -> DepNode<DefId> {\n+    DepNode::DefSpan(def_id)\n+}"}]}