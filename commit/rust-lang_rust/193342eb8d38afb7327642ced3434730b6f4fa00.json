{"sha": "193342eb8d38afb7327642ced3434730b6f4fa00", "node_id": "C_kwDOAAsO6NoAKDE5MzM0MmViOGQzOGFmYjczMjc2NDJjZWQzNDM0NzMwYjZmNGZhMDA", "commit": {"author": {"name": "Jakub K\u0105dzio\u0142ka", "email": "kuba@kadziolka.net", "date": "2022-01-01T04:12:56Z"}, "committer": {"name": "Jakub K\u0105dzio\u0142ka", "email": "kuba@kadziolka.net", "date": "2022-01-01T04:21:36Z"}, "message": "Emit an error for `--cfg=)`\n\nFixes #73026\n\nSee also: #64467, #89468\n\nThe issue stems from a `FatalError` being silently raised in\n`panictry_buffer`. Normally this is not a problem, because\n`panictry_buffer` emits the causes of the error, but they are not\nthemselves fatal, so they get filtered out by the silent emitter.\n\nTo fix this, we use a parser entrypoint which doesn't use\n`panictry_buffer`, and we handle the error ourselves.", "tree": {"sha": "94b345629e4f4311727daa40bfa6d5dd64df061e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b345629e4f4311727daa40bfa6d5dd64df061e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/193342eb8d38afb7327642ced3434730b6f4fa00", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5Xa/ss9usT31cTO54xWnWEYTFWQFAmHP1tkACgkQ4xWnWEYT\nFWRifg//SyXWFtSPF1eINMDIlp5+AC3sI7k9MFrJt1RUGWt8g4CApeQNzES226o5\nTlxSFXFGVwqtUL5xBhgsLjew1MwJfxG4p2YbY+J7rXXJ+WU3+gDRoB6NXYE1UkUL\nRt2CB9a7EC/9d57KJr0sjBvOIzXM69awgXwGHuVeoWpLJ/TK8est5n/cRqxylSDF\ntZyx16VzvSu3C45H7wJH1LesesKgm25dWP42iTZTehvs0txARdr6u3FL+NEF3vm6\nGsxQdHuLwe95sZDFPowDKQgDTXlruj373nR/7J2ha4LY67ZGb+UyXWtJeft9A0oG\n5/Ooup2vxtR7wgz/ouNvXcxSXP3fvtIA98GkUrF5GlRnlsuWv7Qu2ljI0Yje+RyM\nHCBA97nFGGz8DyB+sH20MVAYeCfMo1StHTI52Y86XjjMK8T4NgVlx3W1KFvcz/dB\nyzHEN5ZrnwClbunrJiiOLmy9DbVwzPfvJREBq9L8s00rMkdeP/YJe1SwvUdDReP0\nrMmkW3X9LPPtk3mqX3m7Cd/GjH+E1CKf1nzMUnzmwwTmXbYPftMYbi51mI/UQ2Kf\nq9yg50x4PfAFeR6uFO4laIzriSxn7rtOWwIu5XjKPlenqdS8DDESgVr6CTN5c1+B\nvXTvsA6TkS9pbU1W6Snb3PvaWCJFxkeOlrnS0wplkWkrpwZ68cs=\n=5UuZ\n-----END PGP SIGNATURE-----", "payload": "tree 94b345629e4f4311727daa40bfa6d5dd64df061e\nparent 8ed935e92dfb09ae388344b12284bf5110cf9265\nauthor Jakub K\u0105dzio\u0142ka <kuba@kadziolka.net> 1641010376 +0100\ncommitter Jakub K\u0105dzio\u0142ka <kuba@kadziolka.net> 1641010896 +0100\n\nEmit an error for `--cfg=)`\n\nFixes #73026\n\nSee also: #64467, #89468\n\nThe issue stems from a `FatalError` being silently raised in\n`panictry_buffer`. Normally this is not a problem, because\n`panictry_buffer` emits the causes of the error, but they are not\nthemselves fatal, so they get filtered out by the silent emitter.\n\nTo fix this, we use a parser entrypoint which doesn't use\n`panictry_buffer`, and we handle the error ourselves.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/193342eb8d38afb7327642ced3434730b6f4fa00", "html_url": "https://github.com/rust-lang/rust/commit/193342eb8d38afb7327642ced3434730b6f4fa00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/193342eb8d38afb7327642ced3434730b6f4fa00/comments", "author": {"login": "meithecatte", "id": 23580910, "node_id": "MDQ6VXNlcjIzNTgwOTEw", "avatar_url": "https://avatars.githubusercontent.com/u/23580910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meithecatte", "html_url": "https://github.com/meithecatte", "followers_url": "https://api.github.com/users/meithecatte/followers", "following_url": "https://api.github.com/users/meithecatte/following{/other_user}", "gists_url": "https://api.github.com/users/meithecatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/meithecatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meithecatte/subscriptions", "organizations_url": "https://api.github.com/users/meithecatte/orgs", "repos_url": "https://api.github.com/users/meithecatte/repos", "events_url": "https://api.github.com/users/meithecatte/events{/privacy}", "received_events_url": "https://api.github.com/users/meithecatte/received_events", "type": "User", "site_admin": false}, "committer": {"login": "meithecatte", "id": 23580910, "node_id": "MDQ6VXNlcjIzNTgwOTEw", "avatar_url": "https://avatars.githubusercontent.com/u/23580910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meithecatte", "html_url": "https://github.com/meithecatte", "followers_url": "https://api.github.com/users/meithecatte/followers", "following_url": "https://api.github.com/users/meithecatte/following{/other_user}", "gists_url": "https://api.github.com/users/meithecatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/meithecatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meithecatte/subscriptions", "organizations_url": "https://api.github.com/users/meithecatte/orgs", "repos_url": "https://api.github.com/users/meithecatte/repos", "events_url": "https://api.github.com/users/meithecatte/events{/privacy}", "received_events_url": "https://api.github.com/users/meithecatte/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed935e92dfb09ae388344b12284bf5110cf9265", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed935e92dfb09ae388344b12284bf5110cf9265", "html_url": "https://github.com/rust-lang/rust/commit/8ed935e92dfb09ae388344b12284bf5110cf9265"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "3804e10030733309293866cc5383da930661a2d8", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/193342eb8d38afb7327642ced3434730b6f4fa00/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193342eb8d38afb7327642ced3434730b6f4fa00/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=193342eb8d38afb7327642ced3434730b6f4fa00", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::registry::Registry;\n use rustc_errors::{ErrorReported, Handler};\n use rustc_lint::LintStore;\n use rustc_middle::ty;\n-use rustc_parse::new_parser_from_source_str;\n+use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n use rustc_session::early_error;\n@@ -91,7 +91,6 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     s\n                 )));\n                 let filename = FileName::cfg_spec_source_code(&s);\n-                let mut parser = new_parser_from_source_str(&sess, filename, s.to_string());\n \n                 macro_rules! error {\n                     ($reason: expr) => {\n@@ -102,26 +101,27 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     };\n                 }\n \n-                match &mut parser.parse_meta_item() {\n-                    Ok(meta_item) if parser.token == token::Eof => {\n-                        if meta_item.path.segments.len() != 1 {\n-                            error!(\"argument key must be an identifier\");\n-                        }\n-                        match &meta_item.kind {\n-                            MetaItemKind::List(..) => {\n-                                error!(r#\"expected `key` or `key=\"value\"`\"#);\n-                            }\n-                            MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n-                                error!(\"argument value must be a string\");\n+                match maybe_new_parser_from_source_str(&sess, filename, s.to_string()) {\n+                    Ok(mut parser) => match &mut parser.parse_meta_item() {\n+                        Ok(meta_item) if parser.token == token::Eof => {\n+                            if meta_item.path.segments.len() != 1 {\n+                                error!(\"argument key must be an identifier\");\n                             }\n-                            MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                                let ident = meta_item.ident().expect(\"multi-segment cfg key\");\n-                                return (ident.name, meta_item.value_str());\n+                            match &meta_item.kind {\n+                                MetaItemKind::List(..) => {}\n+                                MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n+                                    error!(\"argument value must be a string\");\n+                                }\n+                                MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n+                                    let ident = meta_item.ident().expect(\"multi-segment cfg key\");\n+                                    return (ident.name, meta_item.value_str());\n+                                }\n                             }\n                         }\n-                    }\n-                    Ok(..) => {}\n-                    Err(err) => err.cancel(),\n+                        Ok(..) => {}\n+                        Err(err) => err.cancel(),\n+                    },\n+                    Err(errs) => errs.into_iter().for_each(|mut err| err.cancel()),\n                 }\n \n                 error!(r#\"expected `key` or `key=\"value\"`\"#);"}, {"sha": "1d7fa7885348ef8509bad200af0ca22c1810fde2", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-8.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/193342eb8d38afb7327642ced3434730b6f4fa00/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193342eb8d38afb7327642ced3434730b6f4fa00/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs?ref=193342eb8d38afb7327642ced3434730b6f4fa00", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --cfg )\n+// error-pattern: invalid `--cfg` argument: `)` (expected `key` or `key=\"value\"`)\n+fn main() {}"}, {"sha": "7bb1814127b292e43a0b26c6d8a05cd707ccf3a9", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-8.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/193342eb8d38afb7327642ced3434730b6f4fa00/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/193342eb8d38afb7327642ced3434730b6f4fa00/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr?ref=193342eb8d38afb7327642ced3434730b6f4fa00", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--cfg` argument: `)` (expected `key` or `key=\"value\"`)\n+"}]}