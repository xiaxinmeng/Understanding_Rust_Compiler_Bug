{"sha": "9520d3dfa4d3213ef07894dd99d201aeab255fa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjBkM2RmYTRkMzIxM2VmMDc4OTRkZDk5ZDIwMWFlYWIyNTVmYTM=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-16T03:26:44Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:33Z"}, "message": "Suggest usage of `powi` method when applicable", "tree": {"sha": "28d617bb850c6091757cf7a9fcc9774e69dab889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d617bb850c6091757cf7a9fcc9774e69dab889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9520d3dfa4d3213ef07894dd99d201aeab255fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9520d3dfa4d3213ef07894dd99d201aeab255fa3", "html_url": "https://github.com/rust-lang/rust/commit/9520d3dfa4d3213ef07894dd99d201aeab255fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9520d3dfa4d3213ef07894dd99d201aeab255fa3/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "html_url": "https://github.com/rust-lang/rust/commit/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21"}], "stats": {"total": 95, "additions": 85, "deletions": 10}, "files": [{"sha": "84a9cac5b6344951ba699930d8710e22d116ac9b", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9520d3dfa4d3213ef07894dd99d201aeab255fa3/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9520d3dfa4d3213ef07894dd99d201aeab255fa3/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=9520d3dfa4d3213ef07894dd99d201aeab255fa3", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{\n-    constant,\n+    constant, Constant,\n     Constant::{F32, F64},\n };\n use crate::utils::*;\n@@ -37,6 +37,7 @@ declare_clippy_lint! {\n     /// let _ = a.log(E);\n     /// let _ = (1.0 + a).ln();\n     /// let _ = a.exp() - 1.0;\n+    /// let _ = a.powf(2.0);\n     /// ```\n     ///\n     /// is better expressed as\n@@ -54,6 +55,7 @@ declare_clippy_lint! {\n     /// let _ = a.ln();\n     /// let _ = a.ln_1p();\n     /// let _ = a.exp_m1();\n+    /// let _ = a.powi(2);\n     /// ```\n     pub FLOATING_POINT_IMPROVEMENTS,\n     nursery,\n@@ -114,6 +116,31 @@ fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n     }\n }\n \n+// Returns an integer if the float constant is a whole number and it\n+// can be converted to an integer without loss\n+// TODO: Add a better check to determine whether the float can be\n+// casted without loss\n+#[allow(clippy::cast_possible_truncation)]\n+fn get_integer_from_float_constant(value: &Constant) -> Option<i64> {\n+    match value {\n+        F32(num) if (num.trunc() - num).abs() <= std::f32::EPSILON => {\n+            if *num > -16_777_217.0 && *num < 16_777_217.0 {\n+                Some(num.round() as i64)\n+            } else {\n+                None\n+            }\n+        },\n+        F64(num) if (num.trunc() - num).abs() <= std::f64::EPSILON => {\n+            if *num > -9_007_199_254_740_993.0 && *num < 9_007_199_254_740_993.0 {\n+                Some(num.round() as i64)\n+            } else {\n+                None\n+            }\n+        },\n+        _ => None,\n+    }\n+}\n+\n fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n     // Check receiver\n     if let Some((value, _)) = constant(cx, cx.tables, &args[0]) {\n@@ -149,6 +176,18 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n         } else if F32(1.0 / 3.0) == value || F64(1.0 / 3.0) == value {\n             help = \"cube-root of a number can be computed more accurately\";\n             method = \"cbrt\";\n+        } else if let Some(exponent) = get_integer_from_float_constant(&value) {\n+            span_lint_and_sugg(\n+                cx,\n+                FLOATING_POINT_IMPROVEMENTS,\n+                expr.span,\n+                \"exponentiation with integer powers can be computed more efficiently\",\n+                \"consider using\",\n+                format!(\"{}.powi({})\", sugg::Sugg::hir(cx, &args[0], \"..\"), exponent),\n+                Applicability::MachineApplicable,\n+            );\n+\n+            return;\n         } else {\n             return;\n         }"}, {"sha": "77a14a7a666880da502abb5888744ac4cf55c5ea", "filename": "tests/ui/floating_point_arithmetic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9520d3dfa4d3213ef07894dd99d201aeab255fa3/tests%2Fui%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9520d3dfa4d3213ef07894dd99d201aeab255fa3/tests%2Fui%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_arithmetic.rs?ref=9520d3dfa4d3213ef07894dd99d201aeab255fa3", "patch": "@@ -46,12 +46,24 @@ fn check_powf() {\n     let _ = std::f32::consts::E.powf(x);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n+    let _ = x.powf(2.0);\n+    let _ = x.powf(-2.0);\n+    let _ = x.powf(2.1);\n+    let _ = x.powf(-2.1);\n+    let _ = x.powf(16_777_217.0);\n+    let _ = x.powf(-16_777_217.0);\n \n     let x = 3f64;\n     let _ = 2f64.powf(x);\n     let _ = std::f64::consts::E.powf(x);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n+    let _ = x.powf(2.0);\n+    let _ = x.powf(-2.0);\n+    let _ = x.powf(2.1);\n+    let _ = x.powf(-2.1);\n+    let _ = x.powf(9_007_199_254_740_993.0);\n+    let _ = x.powf(-9_007_199_254_740_993.0);\n }\n \n fn check_expm1() {"}, {"sha": "0fc05bce2528ad4f00d14421136bc6dd6826674f", "filename": "tests/ui/floating_point_arithmetic.stderr", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9520d3dfa4d3213ef07894dd99d201aeab255fa3/tests%2Fui%2Ffloating_point_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9520d3dfa4d3213ef07894dd99d201aeab255fa3/tests%2Fui%2Ffloating_point_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_arithmetic.stderr?ref=9520d3dfa4d3213ef07894dd99d201aeab255fa3", "patch": "@@ -120,53 +120,77 @@ error: cube-root of a number can be computed more accurately\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_arithmetic.rs:49:13\n+   |\n+LL |     let _ = x.powf(2.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_arithmetic.rs:50:13\n+   |\n+LL |     let _ = x.powf(-2.0);\n+   |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n+\n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:51:13\n+  --> $DIR/floating_point_arithmetic.rs:57:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:52:13\n+  --> $DIR/floating_point_arithmetic.rs:58:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_arithmetic.rs:53:13\n+  --> $DIR/floating_point_arithmetic.rs:59:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:54:13\n+  --> $DIR/floating_point_arithmetic.rs:60:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_arithmetic.rs:61:13\n+   |\n+LL |     let _ = x.powf(2.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_arithmetic.rs:62:13\n+   |\n+LL |     let _ = x.powf(-2.0);\n+   |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n+\n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:59:13\n+  --> $DIR/floating_point_arithmetic.rs:71:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:60:13\n+  --> $DIR/floating_point_arithmetic.rs:72:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:66:13\n+  --> $DIR/floating_point_arithmetic.rs:78:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:67:13\n+  --> $DIR/floating_point_arithmetic.rs:79:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 32 previous errors\n "}]}