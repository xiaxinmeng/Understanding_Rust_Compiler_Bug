{"sha": "dc323d7ffa9a5563f8c4f891992ac988db1f96fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMzIzZDdmZmE5YTU1NjNmOGM0Zjg5MTk5MmFjOTg4ZGIxZjk2ZmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T10:04:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T10:07:42Z"}, "message": "Don't call finalize_all and then finalize_function", "tree": {"sha": "f292f7be85523f6e1af9b77af71890b4d15ab6dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f292f7be85523f6e1af9b77af71890b4d15ab6dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc323d7ffa9a5563f8c4f891992ac988db1f96fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc323d7ffa9a5563f8c4f891992ac988db1f96fd", "html_url": "https://github.com/rust-lang/rust/commit/dc323d7ffa9a5563f8c4f891992ac988db1f96fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc323d7ffa9a5563f8c4f891992ac988db1f96fd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b391524b4f59ea250939def0580c0754eb839c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b391524b4f59ea250939def0580c0754eb839c6c", "html_url": "https://github.com/rust-lang/rust/commit/b391524b4f59ea250939def0580c0754eb839c6c"}], "stats": {"total": 97, "additions": 54, "deletions": 43}, "files": [{"sha": "4f7a086d748e29a830899a402fe530d453abb1c1", "filename": "src/base.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc323d7ffa9a5563f8c4f891992ac988db1f96fd/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc323d7ffa9a5563f8c4f891992ac988db1f96fd/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=dc323d7ffa9a5563f8c4f891992ac988db1f96fd", "patch": "@@ -74,23 +74,20 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n \n                 context.func = f;\n                 // TODO: cranelift doesn't yet support some of the things needed\n-                // cx.module.define_function(func_id, context).unwrap();\n+                if false {\n+                    cx.module.define_function(func_id, context).unwrap();\n+                    cx.defined_functions.push(func_id);\n+                }\n \n                 context.clear();\n             }\n-            inst => cx\n-                .tcx\n-                .sess\n-                .warn(&format!(\"Unimplemented instance {:?}\", inst)),\n+            inst => unimpl!(\"Unimplemented instance {:?}\", inst),\n         },\n-        MonoItem::Static(def_id) => cx\n-            .tcx\n-            .sess\n-            .err(&format!(\"Unimplemented static mono item {:?}\", def_id)),\n+        MonoItem::Static(def_id) => unimpl!(\"Unimplemented static mono item {:?}\", def_id),\n         MonoItem::GlobalAsm(node_id) => cx\n             .tcx\n             .sess\n-            .err(&format!(\"Unimplemented global asm mono item {:?}\", node_id)),\n+            .fatal(&format!(\"Unimplemented global asm mono item {:?}\", node_id)),\n     }\n }\n "}, {"sha": "2a0f86f66b56b70b8390a77f768a369264148b0e", "filename": "src/lib.rs", "status": "modified", "additions": 47, "deletions": 33, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/dc323d7ffa9a5563f8c4f891992ac988db1f96fd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc323d7ffa9a5563f8c4f891992ac988db1f96fd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dc323d7ffa9a5563f8c4f891992ac988db1f96fd", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, macro_at_most_once_rep)]\n+#![feature(rustc_private, macro_at_most_once_rep, iterator_find_map)]\n #![allow(intra_doc_link_resolution_failure)]\n \n extern crate syntax;\n@@ -100,6 +100,7 @@ pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub module: &'a mut Module<B>,\n     pub constants: HashMap<AllocId, DataId>,\n+    pub defined_functions: Vec<FuncId>,\n }\n \n struct CraneliftMetadataLoader;\n@@ -241,12 +242,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let mut module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n         let mut context = Context::new();\n \n-        {\n+        let defined_functions = {\n             use std::io::Write;\n             let mut cx = CodegenCx {\n                 tcx,\n                 module: &mut module,\n                 constants: HashMap::new(),\n+                defined_functions: Vec::new(),\n             };\n \n             let mut log = ::std::fs::File::create(\"../target/log.txt\").unwrap();\n@@ -269,49 +271,61 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     }\n                 }\n             }\n-        }\n+            \n+            std::mem::replace(&mut cx.defined_functions, Vec::new())\n+        };\n \n         tcx.sess.warn(\"Compiled everything\");\n \n         // TODO: this doesn't work most of the time\n         if false {\n-            module.finalize_all();\n-            tcx.sess.warn(\"Finalized everything\");\n-\n-            for mono_item in\n-                collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0\n-            {\n+            let call_instance = collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0.into_iter().find_map(|mono_item| {\n                 let inst = match mono_item {\n                     MonoItem::Fn(inst) => inst,\n-                    _ => continue,\n+                    _ => return None,\n                 };\n \n                 //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n-                if tcx.absolute_item_path_str(inst.def_id()) != \"example::option_unwrap_or\" {\n-                    continue;\n+                if tcx.absolute_item_path_str(inst.def_id()) == \"example::option_unwrap_or\" {\n+                    Some(inst)\n+                } else {\n+                    None\n+                }\n+            }).unwrap();\n+\n+            \n+            let fn_ty = call_instance.ty(tcx);\n+            let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n+            let def_path_based_names =\n+                ::rustc_mir::monomorphize::item::DefPathBasedNames::new(tcx, false, false);\n+            let mut name = String::new();\n+            def_path_based_names.push_instance_as_string(call_instance, &mut name);\n+            let called_func_id = module\n+                .declare_function(&name, Linkage::Import, &sig)\n+                .unwrap();\n+\n+            for func_id in defined_functions {\n+                if func_id != called_func_id {\n+                    module.finalize_function(func_id);\n                 }\n-\n-                let fn_ty = inst.ty(tcx);\n-                let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n-                let def_path_based_names =\n-                    ::rustc_mir::monomorphize::item::DefPathBasedNames::new(tcx, false, false);\n-                let mut name = String::new();\n-                def_path_based_names.push_instance_as_string(inst, &mut name);\n-                let func_id = module\n-                    .declare_function(&name, Linkage::Import, &sig)\n-                    .unwrap();\n-\n-                let finalized_function: *const u8 = module.finalize_function(func_id);\n-                /*let f: extern \"C\" fn(&mut u32) = unsafe { ::std::mem::transmute(finalized_function) };\n-                let mut res = 0u32;\n-                f(&mut res);\n-                tcx.sess.warn(&format!(\"ret_42 returned {}\", res));*/\n-                let f: extern \"C\" fn(&mut bool, &u8, bool) =\n-                    unsafe { ::std::mem::transmute(finalized_function) };\n-                let mut res = false;\n-                f(&mut res, &3, false);\n-                tcx.sess.warn(&format!(\"option_unwrap_or returned {}\", res));\n             }\n+            tcx.sess.warn(\"Finalized everything\");\n+\n+            let finalized_function: *const u8 = module.finalize_function(called_func_id);\n+            /*let f: extern \"C\" fn(&mut u32) = unsafe { ::std::mem::transmute(finalized_function) };\n+            let mut res = 0u32;\n+            f(&mut res);\n+            tcx.sess.warn(&format!(\"ret_42 returned {}\", res));*/\n+            /*let f: extern \"C\" fn(&mut bool, &u8, bool) =\n+-                   unsafe { ::std::mem::transmute(finalized_function) };\n+            let mut res = false;\n+            f(&mut res, &3, false);\n+            tcx.sess.warn(&format!(\"option_unwrap_or returned {}\", res));*/\n+            let f: extern \"C\" fn(&mut u8, isize, *const *const u8) =\n+                unsafe { ::std::mem::transmute(finalized_function) };\n+            let mut res = 0;\n+            f(&mut res, 0, 0 as *const _);\n+            tcx.sess.warn(&format!(\"main returned {}\", res));\n \n             module.finish();\n         }"}]}