{"sha": "d7f1a53c6c1238828276a44866c2376588f435aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZjFhNTNjNmMxMjM4ODI4Mjc2YTQ0ODY2YzIzNzY1ODhmNDM1YWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-24T20:18:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-24T20:18:01Z"}, "message": "Merge #5524\n\n5524: Allow opting out of experimental diagnostics like MismatchedArgCount r=matklad a=jonas-schievink\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/5448\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/5419\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "e41e3bc6ba72922d983ae8ae4db0ddc571925f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e41e3bc6ba72922d983ae8ae4db0ddc571925f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f1a53c6c1238828276a44866c2376588f435aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfG0H5CRBK7hj4Ov3rIwAAdHIIACEuDkMTUGX/uyYSpgqfFJJz\nbIrxIhIKcTXCDaHYzFZHCW2pXvYfaz3S/DXTJy8pusgPKwK9fUtYnQjnDtjkvpt/\npsfqkCWkuCPY7kYkP/2hdHb/naDTesR1PF7za8iHm1mzhHG9kx85P1neQ6ZHJBWZ\n9QteFFSgxu53Xpk6IhX9jFY+aXmUtuQU2Cd2FiKtc66uI2030Q2tDhykpoDlH558\ngzhdEQw7brar5kbmLvWP0V2/voJyZaLkY7XE62cWbyRWKAetUpoZwEw6xJm152+V\nhOZ2gvkwf1x9CFW2kn9KvvhwCDAgQRnLJ6xGjVez7+5eFF3Fgf4QswsYmDItMAM=\n=TXMw\n-----END PGP SIGNATURE-----\n", "payload": "tree e41e3bc6ba72922d983ae8ae4db0ddc571925f5a\nparent 75e67ee74e5d3db5363732bb793b872c57408013\nparent 92a4ec80a0ce1dd834578f53ea3fd018530ec0e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595621881 +0000\ncommitter GitHub <noreply@github.com> 1595621881 +0000\n\nMerge #5524\n\n5524: Allow opting out of experimental diagnostics like MismatchedArgCount r=matklad a=jonas-schievink\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/5448\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/5419\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f1a53c6c1238828276a44866c2376588f435aa", "html_url": "https://github.com/rust-lang/rust/commit/d7f1a53c6c1238828276a44866c2376588f435aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f1a53c6c1238828276a44866c2376588f435aa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e67ee74e5d3db5363732bb793b872c57408013", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e67ee74e5d3db5363732bb793b872c57408013", "html_url": "https://github.com/rust-lang/rust/commit/75e67ee74e5d3db5363732bb793b872c57408013"}, {"sha": "92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "html_url": "https://github.com/rust-lang/rust/commit/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6"}], "stats": {"total": 262, "additions": 159, "deletions": 103}, "files": [{"sha": "266b513dcf50c307943ce688af4c8d700a92b25c", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -1,6 +1,8 @@\n //! FIXME: write short doc here\n pub use hir_def::diagnostics::UnresolvedModule;\n-pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n+pub use hir_expand::diagnostics::{\n+    AstDiagnostic, Diagnostic, DiagnosticSink, DiagnosticSinkBuilder,\n+};\n pub use hir_ty::diagnostics::{\n     MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField,\n };"}, {"sha": "84ba97b14a1fedd42f4ee77268f068336731e9ab", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -24,6 +24,9 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n     fn source(&self) -> InFile<SyntaxNodePtr>;\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n+    fn is_experimental(&self) -> bool {\n+        false\n+    }\n }\n \n pub trait AstDiagnostic {\n@@ -44,16 +47,48 @@ impl dyn Diagnostic {\n \n pub struct DiagnosticSink<'a> {\n     callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n+    filters: Vec<Box<dyn FnMut(&dyn Diagnostic) -> bool + 'a>>,\n     default_callback: Box<dyn FnMut(&dyn Diagnostic) + 'a>,\n }\n \n impl<'a> DiagnosticSink<'a> {\n-    /// FIXME: split `new` and `on` into a separate builder type\n-    pub fn new(cb: impl FnMut(&dyn Diagnostic) + 'a) -> DiagnosticSink<'a> {\n-        DiagnosticSink { callbacks: Vec::new(), default_callback: Box::new(cb) }\n+    pub fn push(&mut self, d: impl Diagnostic) {\n+        let d: &dyn Diagnostic = &d;\n+        self._push(d);\n+    }\n+\n+    fn _push(&mut self, d: &dyn Diagnostic) {\n+        for filter in &mut self.filters {\n+            if !filter(d) {\n+                return;\n+            }\n+        }\n+        for cb in &mut self.callbacks {\n+            match cb(d) {\n+                Ok(()) => return,\n+                Err(()) => (),\n+            }\n+        }\n+        (self.default_callback)(d)\n     }\n+}\n \n-    pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> DiagnosticSink<'a> {\n+pub struct DiagnosticSinkBuilder<'a> {\n+    callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n+    filters: Vec<Box<dyn FnMut(&dyn Diagnostic) -> bool + 'a>>,\n+}\n+\n+impl<'a> DiagnosticSinkBuilder<'a> {\n+    pub fn new() -> Self {\n+        Self { callbacks: Vec::new(), filters: Vec::new() }\n+    }\n+\n+    pub fn filter<F: FnMut(&dyn Diagnostic) -> bool + 'a>(mut self, cb: F) -> Self {\n+        self.filters.push(Box::new(cb));\n+        self\n+    }\n+\n+    pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> Self {\n         let cb = move |diag: &dyn Diagnostic| match diag.downcast_ref::<D>() {\n             Some(d) => {\n                 cb(d);\n@@ -65,18 +100,11 @@ impl<'a> DiagnosticSink<'a> {\n         self\n     }\n \n-    pub fn push(&mut self, d: impl Diagnostic) {\n-        let d: &dyn Diagnostic = &d;\n-        self._push(d);\n-    }\n-\n-    fn _push(&mut self, d: &dyn Diagnostic) {\n-        for cb in self.callbacks.iter_mut() {\n-            match cb(d) {\n-                Ok(()) => return,\n-                Err(()) => (),\n-            }\n+    pub fn build<F: FnMut(&dyn Diagnostic) + 'a>(self, default_callback: F) -> DiagnosticSink<'a> {\n+        DiagnosticSink {\n+            callbacks: self.callbacks,\n+            filters: self.filters,\n+            default_callback: Box::new(default_callback),\n         }\n-        (self.default_callback)(d)\n     }\n }"}, {"sha": "885abbaf2d61176abd38591d3290a8c7338a2a1b", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -234,6 +234,9 @@ impl Diagnostic for MismatchedArgCount {\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n     }\n+    fn is_experimental(&self) -> bool {\n+        true\n+    }\n }\n \n impl AstDiagnostic for MismatchedArgCount {\n@@ -248,7 +251,7 @@ impl AstDiagnostic for MismatchedArgCount {\n #[cfg(test)]\n mod tests {\n     use hir_def::{db::DefDatabase, AssocItemId, ModuleDefId};\n-    use hir_expand::diagnostics::{Diagnostic, DiagnosticSink};\n+    use hir_expand::diagnostics::{Diagnostic, DiagnosticSinkBuilder};\n     use ra_db::{fixture::WithFixture, FileId, SourceDatabase, SourceDatabaseExt};\n     use ra_syntax::{TextRange, TextSize};\n     use rustc_hash::FxHashMap;\n@@ -280,7 +283,7 @@ mod tests {\n                 }\n \n                 for f in fns {\n-                    let mut sink = DiagnosticSink::new(&mut cb);\n+                    let mut sink = DiagnosticSinkBuilder::new().build(&mut cb);\n                     validate_body(self, f.into(), &mut sink);\n                 }\n             }"}, {"sha": "897177d05d4f665ddd386c4a64b9cfcf0bf3376c", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 83, "deletions": 73, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -7,7 +7,7 @@\n use std::cell::RefCell;\n \n use hir::{\n-    diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink},\n+    diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSinkBuilder},\n     HasSource, HirDisplay, Semantics, VariantDef,\n };\n use itertools::Itertools;\n@@ -29,7 +29,11 @@ pub enum Severity {\n     WeakWarning,\n }\n \n-pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic> {\n+pub(crate) fn diagnostics(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    enable_experimental: bool,\n+) -> Vec<Diagnostic> {\n     let _p = profile(\"diagnostics\");\n     let sema = Semantics::new(db);\n     let parse = db.parse(file_id);\n@@ -48,79 +52,85 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         check_struct_shorthand_initialization(&mut res, file_id, &node);\n     }\n     let res = RefCell::new(res);\n-    let mut sink = DiagnosticSink::new(|d| {\n-        res.borrow_mut().push(Diagnostic {\n-            message: d.message(),\n-            range: sema.diagnostics_range(d).range,\n-            severity: Severity::Error,\n-            fix: None,\n-        })\n-    })\n-    .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n-        let original_file = d.source().file_id.original_file(db);\n-        let fix = Fix::new(\n-            \"Create module\",\n-            FileSystemEdit::CreateFile { anchor: original_file, dst: d.candidate.clone() }.into(),\n-        );\n-        res.borrow_mut().push(Diagnostic {\n-            range: sema.diagnostics_range(d).range,\n-            message: d.message(),\n-            severity: Severity::Error,\n-            fix: Some(fix),\n+    let mut sink = DiagnosticSinkBuilder::new()\n+        .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n+            let original_file = d.source().file_id.original_file(db);\n+            let fix = Fix::new(\n+                \"Create module\",\n+                FileSystemEdit::CreateFile { anchor: original_file, dst: d.candidate.clone() }\n+                    .into(),\n+            );\n+            res.borrow_mut().push(Diagnostic {\n+                range: sema.diagnostics_range(d).range,\n+                message: d.message(),\n+                severity: Severity::Error,\n+                fix: Some(fix),\n+            })\n         })\n-    })\n-    .on::<hir::diagnostics::MissingFields, _>(|d| {\n-        // Note that although we could add a diagnostics to\n-        // fill the missing tuple field, e.g :\n-        // `struct A(usize);`\n-        // `let a = A { 0: () }`\n-        // but it is uncommon usage and it should not be encouraged.\n-        let fix = if d.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n-            None\n-        } else {\n-            let mut field_list = d.ast(db);\n-            for f in d.missed_fields.iter() {\n-                let field =\n-                    make::record_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n-                field_list = field_list.append_field(&field);\n-            }\n-\n-            let edit = {\n-                let mut builder = TextEditBuilder::default();\n-                algo::diff(&d.ast(db).syntax(), &field_list.syntax()).into_text_edit(&mut builder);\n-                builder.finish()\n+        .on::<hir::diagnostics::MissingFields, _>(|d| {\n+            // Note that although we could add a diagnostics to\n+            // fill the missing tuple field, e.g :\n+            // `struct A(usize);`\n+            // `let a = A { 0: () }`\n+            // but it is uncommon usage and it should not be encouraged.\n+            let fix = if d.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n+                None\n+            } else {\n+                let mut field_list = d.ast(db);\n+                for f in d.missed_fields.iter() {\n+                    let field =\n+                        make::record_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n+                    field_list = field_list.append_field(&field);\n+                }\n+\n+                let edit = {\n+                    let mut builder = TextEditBuilder::default();\n+                    algo::diff(&d.ast(db).syntax(), &field_list.syntax())\n+                        .into_text_edit(&mut builder);\n+                    builder.finish()\n+                };\n+                Some(Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()))\n             };\n-            Some(Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()))\n-        };\n \n-        res.borrow_mut().push(Diagnostic {\n-            range: sema.diagnostics_range(d).range,\n-            message: d.message(),\n-            severity: Severity::Error,\n-            fix,\n+            res.borrow_mut().push(Diagnostic {\n+                range: sema.diagnostics_range(d).range,\n+                message: d.message(),\n+                severity: Severity::Error,\n+                fix,\n+            })\n         })\n-    })\n-    .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n-        let node = d.ast(db);\n-        let replacement = format!(\"Ok({})\", node.syntax());\n-        let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n-        let source_change = SourceFileEdit { file_id, edit }.into();\n-        let fix = Fix::new(\"Wrap with ok\", source_change);\n-        res.borrow_mut().push(Diagnostic {\n-            range: sema.diagnostics_range(d).range,\n-            message: d.message(),\n-            severity: Severity::Error,\n-            fix: Some(fix),\n+        .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n+            let node = d.ast(db);\n+            let replacement = format!(\"Ok({})\", node.syntax());\n+            let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n+            let source_change = SourceFileEdit { file_id, edit }.into();\n+            let fix = Fix::new(\"Wrap with ok\", source_change);\n+            res.borrow_mut().push(Diagnostic {\n+                range: sema.diagnostics_range(d).range,\n+                message: d.message(),\n+                severity: Severity::Error,\n+                fix: Some(fix),\n+            })\n         })\n-    })\n-    .on::<hir::diagnostics::NoSuchField, _>(|d| {\n-        res.borrow_mut().push(Diagnostic {\n-            range: sema.diagnostics_range(d).range,\n-            message: d.message(),\n-            severity: Severity::Error,\n-            fix: missing_struct_field_fix(&sema, file_id, d),\n+        .on::<hir::diagnostics::NoSuchField, _>(|d| {\n+            res.borrow_mut().push(Diagnostic {\n+                range: sema.diagnostics_range(d).range,\n+                message: d.message(),\n+                severity: Severity::Error,\n+                fix: missing_struct_field_fix(&sema, file_id, d),\n+            })\n         })\n-    });\n+        // Only collect experimental diagnostics when they're enabled.\n+        .filter(|diag| !diag.is_experimental() || enable_experimental)\n+        // Diagnostics not handled above get no fix and default treatment.\n+        .build(|d| {\n+            res.borrow_mut().push(Diagnostic {\n+                message: d.message(),\n+                range: sema.diagnostics_range(d).range,\n+                severity: Severity::Error,\n+                fix: None,\n+            })\n+        });\n \n     if let Some(m) = sema.to_module_def(file_id) {\n         m.diagnostics(db, &mut sink);\n@@ -298,7 +308,7 @@ mod tests {\n         let after = trim_indent(ra_fixture_after);\n \n         let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n-        let diagnostic = analysis.diagnostics(file_position.file_id).unwrap().pop().unwrap();\n+        let diagnostic = analysis.diagnostics(file_position.file_id, true).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n@@ -324,7 +334,7 @@ mod tests {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n         let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n-        let diagnostic = analysis.diagnostics(current_file_id).unwrap().pop().unwrap();\n+        let diagnostic = analysis.diagnostics(current_file_id, true).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap();\n         let changed_file_id = edit.file_id;\n@@ -345,14 +355,14 @@ mod tests {\n         let analysis = mock.analysis();\n         let diagnostics = files\n             .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(file_id).unwrap())\n+            .flat_map(|file_id| analysis.diagnostics(file_id, true).unwrap())\n             .collect::<Vec<_>>();\n         assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n     }\n \n     fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n-        let diagnostics = analysis.diagnostics(file_id).unwrap();\n+        let diagnostics = analysis.diagnostics(file_id, true).unwrap();\n         expect.assert_debug_eq(&diagnostics)\n     }\n "}, {"sha": "4c4d9f6fa9dd571d4f12fff570bd4d67a59242ca", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -487,8 +487,12 @@ impl Analysis {\n     }\n \n     /// Computes the set of diagnostics for the given file.\n-    pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| diagnostics::diagnostics(db, file_id))\n+    pub fn diagnostics(\n+        &self,\n+        file_id: FileId,\n+        enable_experimental: bool,\n+    ) -> Cancelable<Vec<Diagnostic>> {\n+        self.with_db(|db| diagnostics::diagnostics(db, file_id, enable_experimental))\n     }\n \n     /// Returns the edit required to rename reference at the position to the new"}, {"sha": "076184ad6e99c420a644ab3d1a9c6481ded5ad4e", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -70,7 +70,7 @@ pub fn analysis_bench(\n     match &what {\n         BenchWhat::Highlight { .. } => {\n             let res = do_work(&mut host, file_id, |analysis| {\n-                analysis.diagnostics(file_id).unwrap();\n+                analysis.diagnostics(file_id, true).unwrap();\n                 analysis.highlight_as_html(file_id, false).unwrap()\n             });\n             if verbosity.is_verbose() {"}, {"sha": "4ac8c8772eba344d3509e4d7ca44b0d4c63b9fd2", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -47,7 +47,7 @@ pub fn diagnostics(\n                 String::from(\"unknown\")\n             };\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n-            for diagnostic in analysis.diagnostics(file_id).unwrap() {\n+            for diagnostic in analysis.diagnostics(file_id, true).unwrap() {\n                 if matches!(diagnostic.severity, Severity::Error) {\n                     found_error = true;\n                 }"}, {"sha": "e11c8b909abdf411aa6bbce2956ec654f54fcd74", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -23,6 +23,7 @@ pub struct Config {\n     pub client_caps: ClientCapsConfig,\n \n     pub publish_diagnostics: bool,\n+    pub experimental_diagnostics: bool,\n     pub diagnostics: DiagnosticsConfig,\n     pub lru_capacity: Option<usize>,\n     pub proc_macro_srv: Option<(PathBuf, Vec<OsString>)>,\n@@ -137,6 +138,7 @@ impl Config {\n \n             with_sysroot: true,\n             publish_diagnostics: true,\n+            experimental_diagnostics: true,\n             diagnostics: DiagnosticsConfig::default(),\n             lru_capacity: None,\n             proc_macro_srv: None,\n@@ -187,6 +189,7 @@ impl Config {\n \n         self.with_sysroot = data.withSysroot;\n         self.publish_diagnostics = data.diagnostics_enable;\n+        self.experimental_diagnostics = data.diagnostics_enableExperimental;\n         self.diagnostics = DiagnosticsConfig {\n             warnings_as_info: data.diagnostics_warningsAsInfo,\n             warnings_as_hint: data.diagnostics_warningsAsHint,\n@@ -405,6 +408,7 @@ config_data! {\n         completion_postfix_enable: bool          = true,\n \n         diagnostics_enable: bool                = true,\n+        diagnostics_enableExperimental: bool    = true,\n         diagnostics_warningsAsHint: Vec<String> = Vec::new(),\n         diagnostics_warningsAsInfo: Vec<String> = Vec::new(),\n "}, {"sha": "cd309ed744ca33c17814792b04b6dd23d8fe94a0", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -774,7 +774,7 @@ fn handle_fixes(\n         None => {}\n     };\n \n-    let diagnostics = snap.analysis.diagnostics(file_id)?;\n+    let diagnostics = snap.analysis.diagnostics(file_id, snap.config.experimental_diagnostics)?;\n \n     let fixes_from_diagnostics = diagnostics\n         .into_iter()\n@@ -1040,7 +1040,7 @@ pub(crate) fn publish_diagnostics(\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let diagnostics: Vec<Diagnostic> = snap\n         .analysis\n-        .diagnostics(file_id)?\n+        .diagnostics(file_id, snap.config.experimental_diagnostics)?\n         .into_iter()\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),"}, {"sha": "658c913fdb186c1f3d78e5972b6803510be7241a", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a53c6c1238828276a44866c2376588f435aa/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a53c6c1238828276a44866c2376588f435aa/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d7f1a53c6c1238828276a44866c2376588f435aa", "patch": "@@ -200,11 +200,6 @@\n             \"type\": \"object\",\n             \"title\": \"Rust Analyzer\",\n             \"properties\": {\n-                \"rust-analyzer.diagnostics.enable\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\"\n-                },\n                 \"rust-analyzer.lruCapacity\": {\n                     \"type\": [\n                         \"null\",\n@@ -579,6 +574,16 @@\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },\n+                \"rust-analyzer.diagnostics.enable\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Whether to show native rust-analyzer diagnostics.\"\n+                },\n+                \"rust-analyzer.diagnostics.enableExperimental\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"markdownDescription\": \"Whether to show experimental rust-analyzer diagnostics that might have more false positives than usual.\"\n+                },\n                 \"rust-analyzer.diagnostics.warningsAsInfo\": {\n                     \"type\": \"array\",\n                     \"uniqueItems\": true,"}]}