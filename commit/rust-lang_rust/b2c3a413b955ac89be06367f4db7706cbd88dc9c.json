{"sha": "b2c3a413b955ac89be06367f4db7706cbd88dc9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzNhNDEzYjk1NWFjODliZTA2MzY3ZjRkYjc3MDZjYmQ4OGRjOWM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-02T09:56:23Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-02T09:56:23Z"}, "message": "incr.comp.: Properly incorporate symbol linkage and visibility into CGU hash.", "tree": {"sha": "726d8bf7c9041cfe33f633ffc69aa99c936ad058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/726d8bf7c9041cfe33f633ffc69aa99c936ad058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c3a413b955ac89be06367f4db7706cbd88dc9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c3a413b955ac89be06367f4db7706cbd88dc9c", "html_url": "https://github.com/rust-lang/rust/commit/b2c3a413b955ac89be06367f4db7706cbd88dc9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c3a413b955ac89be06367f4db7706cbd88dc9c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b5c0874b8bc35e5be57ca856994e311772ada1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5c0874b8bc35e5be57ca856994e311772ada1d", "html_url": "https://github.com/rust-lang/rust/commit/0b5c0874b8bc35e5be57ca856994e311772ada1d"}], "stats": {"total": 23, "additions": 5, "deletions": 18}, "files": [{"sha": "49a2885747f6d3dd1da669afab0560def96717b8", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c3a413b955ac89be06367f4db7706cbd88dc9c/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c3a413b955ac89be06367f4db7706cbd88dc9c/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=b2c3a413b955ac89be06367f4db7706cbd88dc9c", "patch": "@@ -1172,7 +1172,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         let cgu_name = String::from(cgu.name());\n         let cgu_id = cgu.work_product_id();\n-        let symbol_name_hash = cgu.compute_symbol_name_hash(scx, &exported_symbols);\n+        let symbol_name_hash = cgu.compute_symbol_name_hash(scx);\n \n         // Check whether there is a previous work-product we can\n         // re-use.  Not only must the file exist, and the inputs not"}, {"sha": "cff0eca02c60ee4ccaea654f6d436bc8c86721c5", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b2c3a413b955ac89be06367f4db7706cbd88dc9c/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c3a413b955ac89be06367f4db7706cbd88dc9c/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=b2c3a413b955ac89be06367f4db7706cbd88dc9c", "patch": "@@ -174,29 +174,16 @@ impl<'tcx> CodegenUnit<'tcx> {\n     }\n \n     pub fn compute_symbol_name_hash<'a>(&self,\n-                                        scx: &SharedCrateContext<'a, 'tcx>,\n-                                        exported_symbols: &ExportedSymbols)\n+                                        scx: &SharedCrateContext<'a, 'tcx>)\n                                         -> u64 {\n         let mut state = IchHasher::new();\n-        let exported_symbols = exported_symbols.local_exports();\n         let all_items = self.items_in_deterministic_order(scx.tcx());\n-        for (item, _) in all_items {\n+        for (item, (linkage, visibility)) in all_items {\n             let symbol_name = item.symbol_name(scx.tcx());\n             symbol_name.len().hash(&mut state);\n             symbol_name.hash(&mut state);\n-            let exported = match item {\n-                TransItem::Fn(ref instance) => {\n-                    let node_id =\n-                        scx.tcx().hir.as_local_node_id(instance.def_id());\n-                    node_id.map(|node_id| exported_symbols.contains(&node_id))\n-                        .unwrap_or(false)\n-                }\n-                TransItem::Static(node_id) => {\n-                    exported_symbols.contains(&node_id)\n-                }\n-                TransItem::GlobalAsm(..) => true,\n-            };\n-            exported.hash(&mut state);\n+            linkage.hash(&mut state);\n+            visibility.hash(&mut state);\n         }\n         state.finish().to_smaller_hash()\n     }"}]}