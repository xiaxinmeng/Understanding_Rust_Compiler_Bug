{"sha": "3aec4a2d00fab81b0372e3e98ea34d8305233f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZWM0YTJkMDBmYWI4MWIwMzcyZTNlOThlYTM0ZDgzMDUyMzNmMjk=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2020-10-18T06:57:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-18T06:57:47Z"}, "message": "Merge pull request #43 from rust-lang/docs/layout\n\nDocument size/align of SIMD types", "tree": {"sha": "13caa75b69806c4c1755ce87f6721816e232d17d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13caa75b69806c4c1755ce87f6721816e232d17d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aec4a2d00fab81b0372e3e98ea34d8305233f29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfi+drCRBK7hj4Ov3rIwAAdHIIAJxsKkat5Heiv08sLlMxMKJy\nGDgbtLCXEOQiNR+Vjv+oBNkqAJhwKJzDZhmQDt78xR2k2b8QoDKEUNbfOTLhXIHE\n3Daln61QrlagQpzjYYY3kTBPqwDeG8iinJuS2te+EQXvKnfq4KTYVhhi5AbM0ESN\nytT2piwKyYMCIiZqmWFkPNnyXpbs0h/OIslUiG7ynGqBAvKoWfUcHHvatsTDef4X\nzAHUJPvVhN2D8SgQTpDuy740JJVrRUd8jPhFNJG5xD3nwXH++AitjRyYquQYsywt\nZGPheLDfF4JxjzyKK1wtzY0OisnUii1nvZxjICdo41ibF2eK36PF6vW0cSfznSw=\n=wU3H\n-----END PGP SIGNATURE-----\n", "payload": "tree 13caa75b69806c4c1755ce87f6721816e232d17d\nparent 4baa8c27a706e75e41910e115d4da57ad394012d\nparent a5bdb8b1ff7ec99e25d8dd195b142b1ab7058e30\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1603004267 -0700\ncommitter GitHub <noreply@github.com> 1603004267 -0700\n\nMerge pull request #43 from rust-lang/docs/layout\n\nDocument size/align of SIMD types"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aec4a2d00fab81b0372e3e98ea34d8305233f29", "html_url": "https://github.com/rust-lang/rust/commit/3aec4a2d00fab81b0372e3e98ea34d8305233f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aec4a2d00fab81b0372e3e98ea34d8305233f29/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4baa8c27a706e75e41910e115d4da57ad394012d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4baa8c27a706e75e41910e115d4da57ad394012d", "html_url": "https://github.com/rust-lang/rust/commit/4baa8c27a706e75e41910e115d4da57ad394012d"}, {"sha": "a5bdb8b1ff7ec99e25d8dd195b142b1ab7058e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5bdb8b1ff7ec99e25d8dd195b142b1ab7058e30", "html_url": "https://github.com/rust-lang/rust/commit/a5bdb8b1ff7ec99e25d8dd195b142b1ab7058e30"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "998dabfed1fb94e3124770d1cbb7d7702a50d65e", "filename": "beginners-guide.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3aec4a2d00fab81b0372e3e98ea34d8305233f29/beginners-guide.md", "raw_url": "https://github.com/rust-lang/rust/raw/3aec4a2d00fab81b0372e3e98ea34d8305233f29/beginners-guide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/beginners-guide.md?ref=3aec4a2d00fab81b0372e3e98ea34d8305233f29", "patch": "@@ -65,3 +65,14 @@ This is no bug in Rust, or soundness hole in the type system. You just plain can\n This is why the various Rust targets *don't* enable many CPU feature flags by default: requiring a more advanced CPU makes the final binary *less* portable.\n \n So please select an appropriate CPU feature level when building your programs.\n+\n+## Size, Alignment, and Unsafe Code\n+\n+Most of the portable SIMD API is designed to allow the user to gloss over the details of different architectures and avoid using unsafe code. However, there are plenty of reasons to want to use unsafe code with these SIMD types, such as using an intrinsic function from `core::arch` to further accelerate particularly specialized SIMD operations on a given platform, while still using the portable API elsewhere. For these cases, there are some rules to keep in mind.\n+\n+Fortunately, most SIMD types have a fairly predictable size. `i32x4` is bit-equivalent to `[i32; 4]` and so can be bitcast to it, e.g. using [`mem::transmute`], though the API usually offers a safe cast you can use instead.\n+\n+However, this is not the same as alignment. Computer architectures generally prefer aligned accesses, especially when moving data between memory and vector registers, and while some support specialized operations that can bend the rules to help with this, unaligned access is still typically slow, or even undefined behavior. In addition, different architectures can require different alignments when interacting with their native SIMD types. For this reason, any `#[repr(simd)]` type has a non-portable alignment. If it is necessary to directly interact with the alignment of these types, it should be via [`mem::align_of`].\n+\n+[`mem::transmute`]: https://doc.rust-lang.org/core/mem/fn.transmute.html\n+[`mem::align_of`]: https://doc.rust-lang.org/core/mem/fn.align_of.html\n\\ No newline at end of file"}]}