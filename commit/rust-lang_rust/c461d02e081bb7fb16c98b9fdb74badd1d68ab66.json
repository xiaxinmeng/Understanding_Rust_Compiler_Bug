{"sha": "c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NjFkMDJlMDgxYmI3ZmIxNmM5OGI5ZmRiNzRiYWRkMWQ2OGFiNjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-21T20:00:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-21T20:00:53Z"}, "message": "Rollup merge of #65660 - varkor:canonical-const-to-bound-const, r=eddyb\n\nRename `ConstValue::Infer(InferConst::Canonical(..))` to `ConstValue::Bound(..)`\n\nIt already has the right form, so this is just a renaming. Fixes https://github.com/rust-lang/rust/issues/65655.\n\nr? @eddyb", "tree": {"sha": "9637c2d897e490add3217d62b12639c978bc5f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9637c2d897e490add3217d62b12639c978bc5f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdrg51CRBK7hj4Ov3rIwAAdHIIAAKS6jGwbkItmgx42LtHOQE2\nxpLqXJlqjhfJcS+aWXkxFpCKd7EoTx7HyywbSSjjYxKdPymDFX254i5wM1FPo8ye\nEKhwQ426TnLl05CdZVlPJg897VIzW6P/3l9KUsBvGizcFZ1YCbX4ARTJ/y1PT98u\nsfb5snWeml0D+UG7tkK9HvgaF2veFIUXR6LSYjI4kZF2wMfHFhm4opLV2olrY9Yv\nUjMdv7ekL0YSVXsqQKAvXB4+sGZ1v1yt5y4I+9wHTq6hJwKnMZ4yF1hpXFDsMRBw\n8D/OB2FPNCUFj9+vDerRXKt1lxzMuAAfJX538LQZn7NqM7v/VuUy9qSPHKM7l3Y=\n=CqV9\n-----END PGP SIGNATURE-----\n", "payload": "tree 9637c2d897e490add3217d62b12639c978bc5f57\nparent 760cd9759ed963afe1e315d4fb27a110671066bb\nparent e9c2685167c4d0f207714d436de8bb95538b7254\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571688053 +0200\ncommitter GitHub <noreply@github.com> 1571688053 +0200\n\nRollup merge of #65660 - varkor:canonical-const-to-bound-const, r=eddyb\n\nRename `ConstValue::Infer(InferConst::Canonical(..))` to `ConstValue::Bound(..)`\n\nIt already has the right form, so this is just a renaming. Fixes https://github.com/rust-lang/rust/issues/65655.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "html_url": "https://github.com/rust-lang/rust/commit/c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760cd9759ed963afe1e315d4fb27a110671066bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/760cd9759ed963afe1e315d4fb27a110671066bb", "html_url": "https://github.com/rust-lang/rust/commit/760cd9759ed963afe1e315d4fb27a110671066bb"}, {"sha": "e9c2685167c4d0f207714d436de8bb95538b7254", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c2685167c4d0f207714d436de8bb95538b7254", "html_url": "https://github.com/rust-lang/rust/commit/e9c2685167c4d0f207714d436de8bb95538b7254"}], "stats": {"total": 111, "additions": 47, "deletions": 64}, "files": [{"sha": "49a2c90bdbf603e37bf28edbafbb3c68781892f0", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -468,7 +468,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             ConstValue::Infer(InferConst::Fresh(_)) => {\n                 bug!(\"encountered a fresh const during canonicalization\")\n             }\n-            ConstValue::Infer(InferConst::Canonical(debruijn, _)) => {\n+            ConstValue::Bound(debruijn, _) => {\n                 if debruijn >= self.binder_index {\n                     bug!(\"escaping bound type during canonicalization\")\n                 } else {\n@@ -700,7 +700,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             let var = self.canonical_var(info, const_var.into());\n             self.tcx().mk_const(\n                 ty::Const {\n-                    val: ConstValue::Infer(InferConst::Canonical(self.binder_index, var.into())),\n+                    val: ConstValue::Bound(self.binder_index, var.into()),\n                     ty: self.fold_ty(const_var.ty),\n                 }\n             )"}, {"sha": "d833feeeb09d615f6187e69300cd2cd4cab17780", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -33,7 +33,7 @@ use std::ops::Index;\n use syntax::source_map::Span;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::GenericArg;\n-use crate::ty::{self, BoundVar, InferConst, Lift, List, Region, TyCtxt};\n+use crate::ty::{self, BoundVar, Lift, List, Region, TyCtxt};\n \n mod canonicalizer;\n \n@@ -510,9 +510,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                     GenericArgKind::Const(ct) => {\n                         tcx.mk_const(ty::Const {\n                             ty: ct.ty,\n-                            val: ConstValue::Infer(\n-                                InferConst::Canonical(ty::INNERMOST, ty::BoundVar::from_u32(i))\n-                            ),\n+                            val: ConstValue::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n                         }).into()\n                     }\n                 })"}, {"sha": "7ad6006012f49cafecf02430b776414e90ee9f0a", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -26,7 +26,7 @@ use crate::traits::TraitEngine;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, BoundVar, InferConst, Ty, TyCtxt};\n+use crate::ty::{self, BoundVar, Ty, TyCtxt};\n use crate::util::captures::Captures;\n \n impl<'tcx> InferCtxtBuilder<'tcx> {\n@@ -493,10 +493,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                     }\n                 }\n                 GenericArgKind::Const(result_value) => {\n-                    if let ty::Const {\n-                        val: ConstValue::Infer(InferConst::Canonical(debrujin, b)),\n-                        ..\n-                    } = result_value {\n+                    if let ty::Const { val: ConstValue::Bound(debrujin, b), .. } = result_value {\n                         // ...in which case we would set `canonical_vars[0]` to `Some(const X)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions."}, {"sha": "1841bd9ea6423e9a4e3d8c390fa348389275b186", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -252,7 +252,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                 return ct;\n             }\n \n-            ConstValue::Infer(ty::InferConst::Canonical(..)) |\n+            ConstValue::Bound(..) |\n             ConstValue::Placeholder(_) => {\n                 bug!(\"unexpected const {:?}\", ct)\n             }"}, {"sha": "64ef0421808f44f29958a7f79ac7d677bf7f6042", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -27,7 +27,7 @@ use crate::ty::error::TypeError;\n use crate::ty::fold::{TypeFoldable, TypeVisitor};\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::GenericArg;\n-use crate::ty::{self, Ty, TyCtxt, InferConst};\n+use crate::ty::{self, Ty, TyCtxt};\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::fx::FxHashMap;\n use std::fmt::Debug;\n@@ -618,7 +618,7 @@ where\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        if let ty::Const { val: ConstValue::Infer(InferConst::Canonical(_, _)), .. } = a {\n+        if let ty::Const { val: ConstValue::Bound(..), .. } = a {\n             // FIXME(const_generics): I'm unsure how this branch should actually be handled,\n             // so this is probably not correct.\n             self.infcx.super_combine_consts(self, a, b)\n@@ -993,7 +993,7 @@ where\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n         debug!(\"TypeGeneralizer::consts(a={:?})\", a);\n \n-        if let ty::Const { val: ConstValue::Infer(InferConst::Canonical(_, _)), .. } = a {\n+        if let ty::Const { val: ConstValue::Bound(..), .. } = a {\n             bug!(\n                 \"unexpected inference variable encountered in NLL generalization: {:?}\",\n                 a"}, {"sha": "ac16b8b884c450f9b51b8729e2c051087d056b84", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -5,6 +5,7 @@ use rustc_apfloat::{Float, ieee::{Double, Single}};\n use crate::ty::{Ty, InferConst, ParamConst, layout::{HasDataLayout, Size}, subst::SubstsRef};\n use crate::ty::PlaceholderConst;\n use crate::hir::def_id::DefId;\n+use crate::ty::{BoundVar, DebruijnIndex};\n \n use super::{InterpResult, Pointer, PointerArithmetic, Allocation, AllocId, sign_extend, truncate};\n \n@@ -28,6 +29,9 @@ pub enum ConstValue<'tcx> {\n     /// Infer the value of the const.\n     Infer(InferConst<'tcx>),\n \n+    /// Bound const variable, used only when preparing a trait query.\n+    Bound(DebruijnIndex, BoundVar),\n+\n     /// A placeholder const - universally quantified higher-ranked const.\n     Placeholder(PlaceholderConst),\n \n@@ -66,8 +70,9 @@ impl<'tcx> ConstValue<'tcx> {\n         match *self {\n             ConstValue::Param(_) |\n             ConstValue::Infer(_) |\n+            ConstValue::Bound(..) |\n             ConstValue::Placeholder(_) |\n-            ConstValue::ByRef{ .. } |\n+            ConstValue::ByRef { .. } |\n             ConstValue::Unevaluated(..) |\n             ConstValue::Slice { .. } => None,\n             ConstValue::Scalar(val) => Some(val),"}, {"sha": "d118bef37fc119e79475dbaedae51bd3fb0a4455", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -882,7 +882,7 @@ impl CanonicalUserType<'tcx> {\n                         },\n \n                         GenericArgKind::Const(ct) => match ct.val {\n-                            ConstValue::Infer(InferConst::Canonical(debruijn, b)) => {\n+                            ConstValue::Bound(debruijn, b) => {\n                                 // We only allow a `ty::INNERMOST` index in substitutions.\n                                 assert_eq!(debruijn, ty::INNERMOST);\n                                 cvar == b"}, {"sha": "cb1fb4f685de57853fa775241e1f97acaca3fd55", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -240,10 +240,10 @@ impl FlagComputation {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES | TypeFlags::HAS_CT_INFER);\n                 match infer {\n                     InferConst::Fresh(_) => {}\n-                    InferConst::Canonical(debruijn, _) => self.add_binder(debruijn),\n                     InferConst::Var(_) => self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX),\n                 }\n             }\n+            ConstValue::Bound(debruijn, _) => self.add_binder(debruijn),\n             ConstValue::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES | TypeFlags::HAS_PARAMS);\n             }"}, {"sha": "bacf3d42f043130fd47b040df8f40720ba5710a9", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -521,10 +521,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const {\n-            val: ConstValue::Infer(ty::InferConst::Canonical(debruijn, bound_const)),\n-            ty,\n-        } = *ct {\n+        if let ty::Const { val: ConstValue::Bound(debruijn, bound_const), ty } = *ct {\n             if debruijn == self.current_index {\n                 let fld_c = &mut self.fld_c;\n                 let ct = fld_c(bound_const, ty);\n@@ -570,7 +567,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         // identity for bound types and consts\n         let fld_t = |bound_ty| self.mk_ty(ty::Bound(ty::INNERMOST, bound_ty));\n         let fld_c = |bound_ct, ty| {\n-            self.mk_const_infer(ty::InferConst::Canonical(ty::INNERMOST, bound_ct), ty)\n+            self.mk_const(ty::Const {\n+                val: ConstValue::Bound(ty::INNERMOST, bound_ct),\n+                ty,\n+            })\n         };\n         self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t, fld_c)\n     }\n@@ -801,10 +801,7 @@ impl TypeFolder<'tcx> for Shifter<'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ty::Const {\n-            val: ConstValue::Infer(ty::InferConst::Canonical(debruijn, bound_const)),\n-            ty,\n-        } = *ct {\n+        if let ty::Const { val: ConstValue::Bound(debruijn, bound_ct), ty } = *ct {\n             if self.amount == 0 || debruijn < self.current_index {\n                 ct\n             } else {\n@@ -815,7 +812,10 @@ impl TypeFolder<'tcx> for Shifter<'tcx> {\n                         debruijn.shifted_out(self.amount)\n                     }\n                 };\n-                self.tcx.mk_const_infer(ty::InferConst::Canonical(debruijn, bound_const), ty)\n+                self.tcx.mk_const(ty::Const {\n+                    val: ConstValue::Bound(debruijn, bound_ct),\n+                    ty,\n+                })\n             }\n         } else {\n             ct.super_fold_with(self)\n@@ -919,8 +919,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         // const, as it has types/regions embedded in a lot of other\n         // places.\n         match ct.val {\n-            ConstValue::Infer(ty::InferConst::Canonical(debruijn, _))\n-                if debruijn >= self.outer_index => true,\n+            ConstValue::Bound(debruijn, _) if debruijn >= self.outer_index => true,\n             _ => ct.super_visit_with(self),\n         }\n     }"}, {"sha": "6b1f10bdb21c46f9ed84308ee122f76ba2594243", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -1379,27 +1379,23 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n-            ConstValue::ByRef { alloc, offset } =>\n-                ConstValue::ByRef { alloc, offset },\n             ConstValue::Infer(ic) => ConstValue::Infer(ic.fold_with(folder)),\n             ConstValue::Param(p) => ConstValue::Param(p.fold_with(folder)),\n-            ConstValue::Placeholder(p) => ConstValue::Placeholder(p),\n-            ConstValue::Scalar(a) => ConstValue::Scalar(a),\n-            ConstValue::Slice { data, start, end } => ConstValue::Slice { data, start, end },\n             ConstValue::Unevaluated(did, substs)\n                 => ConstValue::Unevaluated(did, substs.fold_with(folder)),\n+            ConstValue::ByRef { .. } | ConstValue::Bound(..) | ConstValue::Placeholder(..)\n+            | ConstValue::Scalar(..) | ConstValue::Slice { .. } => *self,\n+\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n-            ConstValue::ByRef { .. } => false,\n             ConstValue::Infer(ic) => ic.visit_with(visitor),\n             ConstValue::Param(p) => p.visit_with(visitor),\n-            ConstValue::Placeholder(_) => false,\n-            ConstValue::Scalar(_) => false,\n-            ConstValue::Slice { .. } => false,\n             ConstValue::Unevaluated(_, substs) => substs.visit_with(visitor),\n+            ConstValue::ByRef { .. } | ConstValue::Bound(..) | ConstValue::Placeholder(_)\n+            | ConstValue::Scalar(_) | ConstValue::Slice { .. } => false,\n         }\n     }\n }"}, {"sha": "298e798959635ef5c7275a768f4d6d02c5677052", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -2371,6 +2371,4 @@ pub enum InferConst<'tcx> {\n     Var(ConstVid<'tcx>),\n     /// A fresh const variable. See `infer::freshen` for more details.\n     Fresh(u32),\n-    /// Canonicalized const variable, used only when preparing a trait query.\n-    Canonical(DebruijnIndex, BoundVar),\n }"}, {"sha": "29721979099d59e0c7635b92f5a8d3a936e6cf19", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -2,7 +2,7 @@\n \n use crate::hir::def_id::DefId;\n use crate::infer::canonical::Canonical;\n-use crate::ty::{self, Lift, List, Ty, TyCtxt, InferConst, ParamConst};\n+use crate::ty::{self, Lift, List, Ty, TyCtxt, ParamConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::mir::interpret::ConstValue;\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts};\n@@ -234,9 +234,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n \n                 ty::GenericParamDefKind::Const => {\n                     tcx.mk_const(ty::Const {\n-                        val: ConstValue::Infer(\n-                            InferConst::Canonical(ty::INNERMOST, ty::BoundVar::from(param.index))\n-                        ),\n+                        val: ConstValue::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n                         ty: tcx.type_of(def_id),\n                     }).into()\n                 }"}, {"sha": "ba5e47aeede1b36f8a355f8309848f7c53f82e48", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -79,6 +79,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n             ConstValue::Unevaluated(..) => bug!(\"unevaluated constant in `OperandRef::from_const`\"),\n             ConstValue::Param(_) => bug!(\"encountered a ConstValue::Param in codegen\"),\n             ConstValue::Infer(_) => bug!(\"encountered a ConstValue::Infer in codegen\"),\n+            ConstValue::Bound(..) => bug!(\"encountered a ConstValue::Bound in codegen\"),\n             ConstValue::Placeholder(_) => bug!(\"encountered a ConstValue::Placeholder in codegen\"),\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {"}, {"sha": "4fd5e6a5435517742aa728c558b637ecaf137397", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -589,8 +589,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let ptr = self.tag_static_base_pointer(Pointer::new(id, offset));\n                 Operand::Indirect(MemPlace::from_ptr(ptr, layout.align.abi))\n             },\n-            ConstValue::Scalar(x) =>\n-                Operand::Immediate(tag_scalar(x).into()),\n+            ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x).into()),\n             ConstValue::Slice { data, start, end } => {\n                 // We rely on mutability being set correctly in `data` to prevent writes\n                 // where none should happen.\n@@ -606,6 +605,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             ConstValue::Param(..) |\n             ConstValue::Infer(..) |\n+            ConstValue::Bound(..) |\n             ConstValue::Placeholder(..) |\n             ConstValue::Unevaluated(..) =>\n                 bug!(\"eval_const_to_op: Unexpected ConstValue {:?}\", val),"}, {"sha": "8d136a1b65c79504ec1b91f9153193b8a703fd4c", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -33,7 +33,7 @@ use rustc::traits::{\n     InEnvironment,\n     ChalkCanonicalGoal,\n };\n-use rustc::ty::{self, TyCtxt, InferConst};\n+use rustc::ty::{self, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{GenericArg, GenericArgKind};\n@@ -286,7 +286,7 @@ impl context::ContextOps<ChalkArenas<'tcx>> for ChalkContext<'tcx> {\n                     _ => false,\n                 },\n                 GenericArgKind::Const(ct) => match ct.val {\n-                    ConstValue::Infer(InferConst::Canonical(debruijn, bound_ct)) => {\n+                    ConstValue::Bound(debruijn, bound_ct) => {\n                         debug_assert_eq!(debruijn, ty::INNERMOST);\n                         cvar == bound_ct\n                     }"}, {"sha": "49d76681196af6db5f1b6a7a1343e65a7878a5e0", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -16,7 +16,7 @@ use rustc::traits::{\n     Environment,\n     InEnvironment,\n };\n-use rustc::ty::{self, Ty, TyCtxt, InferConst};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::GenericArg;\n use rustc::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc::mir::interpret::ConstValue;\n@@ -287,10 +287,7 @@ impl TypeRelation<'tcx> for AnswerSubstitutor<'cx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        if let ty::Const {\n-            val: ConstValue::Infer(InferConst::Canonical(debruijn, bound_ct)),\n-            ..\n-        } = a {\n+        if let ty::Const { val: ConstValue::Bound(debruijn, bound_ct), .. } = a {\n             if *debruijn == self.binder_index {\n                 self.unify_free_answer_var(*bound_ct, b.into())?;\n                 return Ok(b);\n@@ -299,14 +296,8 @@ impl TypeRelation<'tcx> for AnswerSubstitutor<'cx, 'tcx> {\n \n         match (a, b) {\n             (\n-                ty::Const {\n-                    val: ConstValue::Infer(InferConst::Canonical(a_debruijn, a_bound)),\n-                    ..\n-                },\n-                ty::Const {\n-                    val: ConstValue::Infer(InferConst::Canonical(b_debruijn, b_bound)),\n-                    ..\n-                },\n+                ty::Const { val: ConstValue::Bound(a_debruijn, a_bound), .. },\n+                ty::Const { val: ConstValue::Bound(b_debruijn, b_bound), .. },\n             ) => {\n                 assert_eq!(a_debruijn, b_debruijn);\n                 assert_eq!(a_bound, b_bound);"}, {"sha": "610937739c194489104ee2d1e413b63b0abc7a2a", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c461d02e081bb7fb16c98b9fdb74badd1d68ab66/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=c461d02e081bb7fb16c98b9fdb74badd1d68ab66", "patch": "@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h059bf53000885489E)\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h636bc933fc62ee2fE)\n   --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h059bf53000885489)\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h636bc933fc62ee2f)\n   --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]"}]}