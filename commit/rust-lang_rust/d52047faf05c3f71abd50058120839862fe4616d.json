{"sha": "d52047faf05c3f71abd50058120839862fe4616d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MjA0N2ZhZjA1YzNmNzFhYmQ1MDA1ODEyMDgzOTg2MmZlNDYxNmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-18T10:08:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-18T10:08:06Z"}, "message": "Remove LinkMeta struct", "tree": {"sha": "4f87e14dbb321bd8f18d3ff712b4fb4b74c5cd20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f87e14dbb321bd8f18d3ff712b4fb4b74c5cd20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52047faf05c3f71abd50058120839862fe4616d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52047faf05c3f71abd50058120839862fe4616d", "html_url": "https://github.com/rust-lang/rust/commit/d52047faf05c3f71abd50058120839862fe4616d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52047faf05c3f71abd50058120839862fe4616d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e", "html_url": "https://github.com/rust-lang/rust/commit/6b1ff19af36f7bbf1974579ec1b9bf2c8ccd595e"}], "stats": {"total": 78, "additions": 25, "deletions": 53}, "files": [{"sha": "f4b44043389615d2c2540f4b692bf198ae3bd2c3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -42,11 +42,6 @@ pub use self::NativeLibraryKind::*;\n \n // lonely orphan structs and enums looking for a better home\n \n-#[derive(Clone, Debug, Copy)]\n-pub struct LinkMeta {\n-    pub crate_hash: Svh,\n-}\n-\n /// Where a crate came from on the local filesystem. One of these three options\n /// must be non-None.\n #[derive(PartialEq, Clone, Debug)]\n@@ -233,8 +228,7 @@ pub trait CrateStore {\n \n     // utility functions\n     fn encode_metadata<'a, 'tcx>(&self,\n-                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 link_meta: &LinkMeta)\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                  -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n }"}, {"sha": "12b07e7cc3f82c5aed72a2eb4718e84a51c65979", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -26,7 +26,7 @@ use lint::{self, Lint};\n use ich::{StableHashingContext, NodeIdHashingMode};\n use infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use infer::outlives::free_region_map::FreeRegionMap;\n-use middle::cstore::{CrateStoreDyn, LinkMeta};\n+use middle::cstore::CrateStoreDyn;\n use middle::cstore::EncodedMetadata;\n use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n@@ -1491,10 +1491,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n-    pub fn encode_metadata(self, link_meta: &LinkMeta)\n+    pub fn encode_metadata(self)\n         -> EncodedMetadata\n     {\n-        self.cstore.encode_metadata(self, link_meta)\n+        self.cstore.encode_metadata(self)\n     }\n }\n "}, {"sha": "373ddafee51f7446e82e6d0e22180ba14b28d581", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -47,8 +47,7 @@ use std::str;\n use syntax::attr;\n \n pub use rustc_codegen_utils::link::{find_crate_name, filename_for_input, default_output_for_target,\n-                                  invalid_output_for_target, build_link_meta, out_filename,\n-                                  check_file_is_writeable};\n+                                  invalid_output_for_target, out_filename, check_file_is_writeable};\n \n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled"}, {"sha": "888fb70e969844f4f7311720bd72cd41bea38d30", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -19,7 +19,7 @@ use base;\n use consts;\n use rustc_incremental::{copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir};\n use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n-use rustc::middle::cstore::{LinkMeta, EncodedMetadata};\n+use rustc::middle::cstore::EncodedMetadata;\n use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Sanitizer, Lto};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n@@ -32,6 +32,7 @@ use rustc::ty::TyCtxt;\n use rustc::util::common::{time_ext, time_depth, set_time_depth, print_time_passes_entry};\n use rustc_fs_util::{path2cstr, link_or_copy};\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_data_structures::svh::Svh;\n use errors::{self, Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n use errors::emitter::{Emitter};\n use syntax::attr;\n@@ -912,13 +913,13 @@ fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n \n pub fn start_async_codegen(tcx: TyCtxt,\n                                time_graph: Option<TimeGraph>,\n-                               link: LinkMeta,\n                                metadata: EncodedMetadata,\n                                coordinator_receive: Receiver<Box<dyn Any + Send>>,\n                                total_cgus: usize)\n                                -> OngoingCodegen {\n     let sess = tcx.sess;\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n+    let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n     let no_builtins = attr::contains_name(&tcx.hir.krate().attrs, \"no_builtins\");\n     let subsystem = attr::first_attr_value_str_by_name(&tcx.hir.krate().attrs,\n                                                        \"windows_subsystem\");\n@@ -1037,7 +1038,7 @@ pub fn start_async_codegen(tcx: TyCtxt,\n \n     OngoingCodegen {\n         crate_name,\n-        link,\n+        crate_hash,\n         metadata,\n         windows_subsystem,\n         linker_info,\n@@ -2268,7 +2269,7 @@ impl SharedEmitterMain {\n \n pub struct OngoingCodegen {\n     crate_name: Symbol,\n-    link: LinkMeta,\n+    crate_hash: Svh,\n     metadata: EncodedMetadata,\n     windows_subsystem: Option<String>,\n     linker_info: LinkerInfo,\n@@ -2319,7 +2320,7 @@ impl OngoingCodegen {\n \n         (CodegenResults {\n             crate_name: self.crate_name,\n-            link: self.link,\n+            crate_hash: self.crate_hash,\n             metadata: self.metadata,\n             windows_subsystem: self.windows_subsystem,\n             linker_info: self.linker_info,"}, {"sha": "9ce3354533f4d0271bba18fc1b458f6fb98bce90", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -29,7 +29,6 @@ use super::ModuleCodegen;\n use super::ModuleKind;\n \n use abi;\n-use back::link;\n use back::write::{self, OngoingCodegen};\n use llvm::{self, TypeKind, get_param};\n use metadata;\n@@ -42,7 +41,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf};\n use rustc::ty::query::Providers;\n use rustc::dep_graph::{DepNode, DepConstructor};\n-use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n+use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::middle::exported_symbols;\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::util::profiling::ProfileCategory;\n@@ -608,8 +607,7 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n }\n \n fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n-                            llvm_module: &ModuleLlvm,\n-                            link_meta: &LinkMeta)\n+                            llvm_module: &ModuleLlvm)\n                             -> EncodedMetadata {\n     use std::io::Write;\n     use flate2::Compression;\n@@ -641,7 +639,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n         return EncodedMetadata::new();\n     }\n \n-    let metadata = tcx.encode_metadata(link_meta);\n+    let metadata = tcx.encode_metadata();\n     if kind == MetadataKind::Uncompressed {\n         return metadata;\n     }\n@@ -719,8 +717,6 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.sess.fatal(\"this compiler's LLVM does not support PGO\");\n     }\n \n-    let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n-    let link_meta = link::build_link_meta(crate_hash);\n     let cgu_name_builder = &mut CodegenUnitNameBuilder::new(tcx);\n \n     // Codegen the metadata.\n@@ -732,7 +728,7 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                                              .to_string();\n     let metadata_llvm_module = ModuleLlvm::new(tcx.sess, &metadata_cgu_name);\n     let metadata = time(tcx.sess, \"write metadata\", || {\n-        write_metadata(tcx, &metadata_llvm_module, &link_meta)\n+        write_metadata(tcx, &metadata_llvm_module)\n     });\n     tcx.sess.profiler(|p| p.end_activity(ProfileCategory::Codegen));\n \n@@ -754,7 +750,6 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let ongoing_codegen = write::start_async_codegen(\n             tcx,\n             time_graph.clone(),\n-            link_meta,\n             metadata,\n             rx,\n             1);\n@@ -789,7 +784,6 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let ongoing_codegen = write::start_async_codegen(\n         tcx,\n         time_graph.clone(),\n-        link_meta,\n         metadata,\n         rx,\n         codegen_units.len());"}, {"sha": "03a2e0a82cf1010a5f8f75ed027be127a4dce8d1", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -88,6 +88,7 @@ use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::util::profiling::ProfileCategory;\n use rustc_mir::monomorphize;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_data_structures::svh::Svh;\n \n mod diagnostics;\n \n@@ -251,7 +252,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n         // Now that we won't touch anything in the incremental compilation directory\n         // any more, we can finalize it (which involves renaming it)\n-        rustc_incremental::finalize_session_directory(sess, ongoing_codegen.link.crate_hash);\n+        rustc_incremental::finalize_session_directory(sess, ongoing_codegen.crate_hash);\n \n         Ok(())\n     }\n@@ -389,7 +390,7 @@ struct CodegenResults {\n     modules: Vec<CompiledModule>,\n     allocator_module: Option<CompiledModule>,\n     metadata_module: CompiledModule,\n-    link: rustc::middle::cstore::LinkMeta,\n+    crate_hash: Svh,\n     metadata: rustc::middle::cstore::EncodedMetadata,\n     windows_subsystem: Option<String>,\n     linker_info: back::linker::LinkerInfo,"}, {"sha": "d693e088360d45e4f87e229ac2c4291be7d7ceb7", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -44,7 +44,7 @@ use rustc::dep_graph::DepGraph;\n use rustc_target::spec::Target;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::monomorphize::collector;\n-use link::{build_link_meta, out_filename};\n+use link::out_filename;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n@@ -180,8 +180,7 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         }\n         tcx.sess.abort_if_errors();\n \n-        let link_meta = build_link_meta(tcx.crate_hash(LOCAL_CRATE));\n-        let metadata = tcx.encode_metadata(&link_meta);\n+        let metadata = tcx.encode_metadata();\n \n         box OngoingCodegen {\n             metadata: metadata,"}, {"sha": "75f1d614ae72ffa6a034e96e250f92a2ad37fb97", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -10,8 +10,6 @@\n \n use rustc::session::config::{self, OutputFilenames, Input, OutputType};\n use rustc::session::Session;\n-use rustc::middle::cstore::LinkMeta;\n-use rustc_data_structures::svh::Svh;\n use std::path::{Path, PathBuf};\n use syntax::{ast, attr};\n use syntax_pos::Span;\n@@ -50,14 +48,6 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n-pub fn build_link_meta(crate_hash: Svh) -> LinkMeta {\n-    let r = LinkMeta {\n-        crate_hash,\n-    };\n-    info!(\"{:?}\", r);\n-    return r;\n-}\n-\n pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {"}, {"sha": "778ca9c20d78ad3372d782c4e8a53303e892c0e2", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -17,7 +17,6 @@ use schema;\n \n use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateStore, DepKind,\n-                            LinkMeta,\n                             EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n@@ -567,11 +566,10 @@ impl CrateStore for cstore::CStore {\n     }\n \n     fn encode_metadata<'a, 'tcx>(&self,\n-                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 link_meta: &LinkMeta)\n+                                 tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                  -> EncodedMetadata\n     {\n-        encoder::encode_metadata(tcx, link_meta)\n+        encoder::encode_metadata(tcx)\n     }\n \n     fn metadata_encoding_version(&self) -> &[u8]"}, {"sha": "f9a392eb3ba769037e156bcb1f5c292a6aef97f0", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52047faf05c3f71abd50058120839862fe4616d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d52047faf05c3f71abd50058120839862fe4616d", "patch": "@@ -13,7 +13,7 @@ use index_builder::{FromId, IndexBuilder, Untracked};\n use isolated_encoder::IsolatedEncoder;\n use schema::*;\n \n-use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary,\n+use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n@@ -52,7 +52,6 @@ use rustc::hir::intravisit;\n pub struct EncodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Encoder,\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    link_meta: &'a LinkMeta,\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n@@ -482,7 +481,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let index_bytes = self.position() - i;\n \n         let attrs = tcx.hir.krate_attrs();\n-        let link_meta = self.link_meta;\n         let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateType::ProcMacro);\n         let has_default_lib_allocator = attr::contains_name(&attrs, \"default_lib_allocator\");\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n@@ -491,7 +489,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             name: tcx.crate_name(LOCAL_CRATE),\n             extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n             triple: tcx.sess.opts.target_triple.clone(),\n-            hash: link_meta.crate_hash,\n+            hash: tcx.crate_hash(LOCAL_CRATE),\n             disambiguator: tcx.sess.local_crate_disambiguator(),\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: hygiene::default_edition(),\n@@ -1824,8 +1822,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 link_meta: &LinkMeta)\n+pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                  -> EncodedMetadata\n {\n     let mut encoder = opaque::Encoder::new(vec![]);\n@@ -1838,7 +1835,6 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let mut ecx = EncodeContext {\n             opaque: encoder,\n             tcx,\n-            link_meta,\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),"}]}