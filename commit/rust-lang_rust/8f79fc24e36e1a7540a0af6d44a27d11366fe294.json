{"sha": "8f79fc24e36e1a7540a0af6d44a27d11366fe294", "node_id": "C_kwDOAAsO6NoAKDhmNzlmYzI0ZTM2ZTFhNzU0MGEwYWY2ZDQ0YTI3ZDExMzY2ZmUyOTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-19T03:06:21Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-24T01:10:25Z"}, "message": "Properly handle `Pin<&mut dyn* Trait>` receiver in codegen", "tree": {"sha": "18a3f7b7acab5457ca559bd8ffe278cd9e80856b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a3f7b7acab5457ca559bd8ffe278cd9e80856b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f79fc24e36e1a7540a0af6d44a27d11366fe294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f79fc24e36e1a7540a0af6d44a27d11366fe294", "html_url": "https://github.com/rust-lang/rust/commit/8f79fc24e36e1a7540a0af6d44a27d11366fe294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f79fc24e36e1a7540a0af6d44a27d11366fe294/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c620a972f3bae8171e17eb8a243b419caadd9ab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c620a972f3bae8171e17eb8a243b419caadd9ab7", "html_url": "https://github.com/rust-lang/rust/commit/c620a972f3bae8171e17eb8a243b419caadd9ab7"}], "stats": {"total": 92, "additions": 86, "deletions": 6}, "files": [{"sha": "03d833fbba87cf4afbc49318c9fa55b52d8a57e3", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8f79fc24e36e1a7540a0af6d44a27d11366fe294/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f79fc24e36e1a7540a0af6d44a27d11366fe294/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=8f79fc24e36e1a7540a0af6d44a27d11366fe294", "patch": "@@ -938,7 +938,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         // that is understood elsewhere in the compiler as a method on\n                         // `dyn Trait`.\n                         // To get a `*mut RcBox<Self>`, we just keep unwrapping newtypes until\n-                        // we get a value of a built-in pointer type\n+                        // we get a value of a built-in pointer type.\n+                        //\n+                        // This is also relevant for `Pin<&mut Self>`, where we need to peel the `Pin`.\n                         'descend_newtypes: while !op.layout.ty.is_unsafe_ptr()\n                             && !op.layout.ty.is_region_ptr()\n                         {\n@@ -980,13 +982,29 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         continue;\n                     }\n                     Immediate(_) => {\n-                        let ty::Ref(_, ty, _) = op.layout.ty.kind() else {\n-                            span_bug!(span, \"can't codegen a virtual call on {:#?}\", op);\n-                        };\n-                        if !ty.is_dyn_star() {\n+                        // See comment above explaining why we peel these newtypes\n+                        'descend_newtypes: while !op.layout.ty.is_unsafe_ptr()\n+                            && !op.layout.ty.is_region_ptr()\n+                        {\n+                            for i in 0..op.layout.fields.count() {\n+                                let field = op.extract_field(bx, i);\n+                                if !field.layout.is_zst() {\n+                                    // we found the one non-zero-sized field that is allowed\n+                                    // now find *its* non-zero-sized field, or stop if it's a\n+                                    // pointer\n+                                    op = field;\n+                                    continue 'descend_newtypes;\n+                                }\n+                            }\n+\n+                            span_bug!(span, \"receiver has no non-zero-sized fields {:?}\", op);\n+                        }\n+\n+                        // Make sure that we've actually unwrapped the rcvr down\n+                        // to a pointer or ref to `dyn* Trait`.\n+                        if !op.layout.ty.builtin_deref(true).unwrap().ty.is_dyn_star() {\n                             span_bug!(span, \"can't codegen a virtual call on {:#?}\", op);\n                         }\n-                        // FIXME(dyn-star): Make sure this is done on a &dyn* receiver\n                         let place = op.deref(bx.cx());\n                         let data_ptr = place.project_field(bx, 0);\n                         let meta_ptr = place.project_field(bx, 1);"}, {"sha": "8eedff87d0d24251fa45b82d189ff767f5987082", "filename": "src/test/ui/dyn-star/dispatch-on-pin-mut.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8f79fc24e36e1a7540a0af6d44a27d11366fe294/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f79fc24e36e1a7540a0af6d44a27d11366fe294/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.rs?ref=8f79fc24e36e1a7540a0af6d44a27d11366fe294", "patch": "@@ -0,0 +1,51 @@\n+// build-pass\n+// edition:2021\n+\n+#![feature(dyn_star)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+use std::future::Future;\n+\n+async fn foo(f: dyn* Future<Output = i32>) {\n+    println!(\"value: {}\", f.await);\n+}\n+\n+async fn async_main() {\n+    foo(Box::pin(async { 1 })).await\n+}\n+\n+// ------------------------------------------------------------------------- //\n+// Implementation Details Below...\n+\n+use std::pin::Pin;\n+use std::task::*;\n+\n+pub fn noop_waker() -> Waker {\n+    let raw = RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE);\n+\n+    // SAFETY: the contracts for RawWaker and RawWakerVTable are upheld\n+    unsafe { Waker::from_raw(raw) }\n+}\n+\n+const NOOP_WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(noop_clone, noop, noop, noop);\n+\n+unsafe fn noop_clone(_p: *const ()) -> RawWaker {\n+    RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE)\n+}\n+\n+unsafe fn noop(_p: *const ()) {}\n+\n+fn main() {\n+    let mut fut = async_main();\n+\n+    // Poll loop, just to test the future...\n+    let waker = noop_waker();\n+    let ctx = &mut Context::from_waker(&waker);\n+\n+    loop {\n+        match unsafe { Pin::new_unchecked(&mut fut).poll(ctx) } {\n+            Poll::Pending => {}\n+            Poll::Ready(()) => break,\n+        }\n+    }\n+}"}, {"sha": "a73e34009227d106fdd8545b25026720808c783e", "filename": "src/test/ui/dyn-star/dispatch-on-pin-mut.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f79fc24e36e1a7540a0af6d44a27d11366fe294/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f79fc24e36e1a7540a0af6d44a27d11366fe294/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdispatch-on-pin-mut.stderr?ref=8f79fc24e36e1a7540a0af6d44a27d11366fe294", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dispatch-on-pin-mut.rs:4:12\n+   |\n+LL | #![feature(dyn_star)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}