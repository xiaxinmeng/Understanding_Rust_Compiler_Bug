{"sha": "7f91e7740dfbf020e2538d95e21851a32a3454a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOTFlNzc0MGRmYmYwMjBlMjUzOGQ5NWUyMTg1MWEzMmEzNDU0YTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-06T04:21:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-20T15:33:52Z"}, "message": "Fix LLVM compilation issues and use the new attrs\n\nThis implements #[no_split_stack] and also changes #[fast_ffi] to using the new\n\"fixedstacksegment\" string attribute instead of integer attribute.", "tree": {"sha": "2f92d18adfbedc90fae93d6423c7d6e5d21b9e7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f92d18adfbedc90fae93d6423c7d6e5d21b9e7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f91e7740dfbf020e2538d95e21851a32a3454a6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f91e7740dfbf020e2538d95e21851a32a3454a6", "html_url": "https://github.com/rust-lang/rust/commit/7f91e7740dfbf020e2538d95e21851a32a3454a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f91e7740dfbf020e2538d95e21851a32a3454a6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e48152551548fbb2a4a0b6a21756342d5dd2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e48152551548fbb2a4a0b6a21756342d5dd2a9", "html_url": "https://github.com/rust-lang/rust/commit/d1e48152551548fbb2a4a0b6a21756342d5dd2a9"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "cba8da23107719575c49c5089c88ddb0be174418", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=7f91e7740dfbf020e2538d95e21851a32a3454a6", "patch": "@@ -292,7 +292,6 @@ pub static transform_passes : &'static [(&'static str, &'static str)] = &'static\n     (\"scalarrepl\",                      \"Scalar Replacement of Aggregates (DT)\"),\n     (\"scalarrepl-ssa\",                  \"Scalar Replacement of Aggregates (SSAUp)\"),\n     (\"sccp\",                            \"Sparse Conditional Constant Propagation\"),\n-    (\"simplify-libcalls\",               \"Simplify well-known library calls\"),\n     (\"simplifycfg\",                     \"Simplify the CFG\"),\n     (\"sink\",                            \"Code sinking\"),\n     (\"strip\",                           \"Strip all symbols from a module\"),"}, {"sha": "f393cfa12fb7ea0ffa0dab5106f3f0d1707c8289", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=7f91e7740dfbf020e2538d95e21851a32a3454a6", "patch": "@@ -85,11 +85,6 @@ pub enum Attribute {\n     ReturnsTwiceAttribute = 1 << 29,\n     UWTableAttribute = 1 << 30,\n     NonLazyBindAttribute = 1 << 31,\n-\n-    // Not added to LLVM yet, so may need to stay updated if LLVM changes.\n-    // FIXME(#8199): if this changes, be sure to change the relevant constant\n-    //               down below\n-    // FixedStackSegment = 1 << 41,\n }\n \n // enum for the LLVM IntPredicate type\n@@ -843,7 +838,9 @@ pub mod llvm {\n         #[fast_ffi]\n         pub fn LLVMSetGC(Fn: ValueRef, Name: *c_char);\n         #[fast_ffi]\n-        pub fn LLVMAddFunctionAttr(Fn: ValueRef, PA: c_uint, HighPA: c_uint);\n+        pub fn LLVMAddFunctionAttr(Fn: ValueRef, PA: c_uint);\n+        #[fast_ffi]\n+        pub fn LLVMAddFunctionAttrString(Fn: ValueRef, Name: *c_char);\n         #[fast_ffi]\n         pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_ulonglong;\n         #[fast_ffi]\n@@ -2112,23 +2109,7 @@ pub fn ConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n \n pub fn SetFunctionAttribute(Fn: ValueRef, attr: Attribute) {\n     unsafe {\n-        let attr = attr as u64;\n-        let lower = attr & 0xffffffff;\n-        let upper = (attr >> 32) & 0xffffffff;\n-        llvm::LLVMAddFunctionAttr(Fn, lower as c_uint, upper as c_uint);\n-    }\n-}\n-\n-// FIXME(#8199): this shouldn't require this hackery. On i686\n-//               (FixedStackSegment as u64) will return 0 instead of 1 << 41.\n-//               Furthermore, if we use a match of any sort then an LLVM\n-//               assertion is generated!\n-pub fn SetFixedStackSegmentAttribute(Fn: ValueRef) {\n-    unsafe {\n-        let attr = 1u64 << 41;\n-        let lower = attr & 0xffffffff;\n-        let upper = (attr >> 32) & 0xffffffff;\n-        llvm::LLVMAddFunctionAttr(Fn, lower as c_uint, upper as c_uint);\n+        llvm::LLVMAddFunctionAttr(Fn, attr as c_uint)\n     }\n }\n /* Memory-managed object interface to type handles. */"}, {"sha": "b0f2cc39f39b1130d30864f7f358297d323ab2fb", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7f91e7740dfbf020e2538d95e21851a32a3454a6", "patch": "@@ -440,23 +440,36 @@ pub fn set_inline_hint(f: ValueRef) {\n     lib::llvm::SetFunctionAttribute(f, lib::llvm::InlineHintAttribute)\n }\n \n-pub fn set_inline_hint_if_appr(attrs: &[ast::Attribute],\n-                               llfn: ValueRef) {\n+pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n     use syntax::attr::*;\n+    // Set the inline hint if there is one\n     match find_inline_attr(attrs) {\n         InlineHint   => set_inline_hint(llfn),\n         InlineAlways => set_always_inline(llfn),\n         InlineNever  => set_no_inline(llfn),\n         InlineNone   => { /* fallthrough */ }\n     }\n+\n+    // Add the no-split-stack attribute if requested\n+    if contains_name(attrs, \"no_split_stack\") {\n+        set_no_split_stack(llfn);\n+    }\n }\n \n pub fn set_always_inline(f: ValueRef) {\n     lib::llvm::SetFunctionAttribute(f, lib::llvm::AlwaysInlineAttribute)\n }\n \n pub fn set_fixed_stack_segment(f: ValueRef) {\n-    lib::llvm::SetFixedStackSegmentAttribute(f);\n+    do \"fixed-stack-segment\".to_c_str().with_ref |buf| {\n+        unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n+    }\n+}\n+\n+pub fn set_no_split_stack(f: ValueRef) {\n+    do \"no-split-stack\".to_c_str().with_ref |buf| {\n+        unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n+    }\n }\n \n pub fn set_glue_inlining(f: ValueRef, t: ty::t) {\n@@ -2444,7 +2457,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             } else {\n                                 foreign::register_foreign_fn(ccx, i.span, sym, i.id)\n                             };\n-                            set_inline_hint_if_appr(i.attrs, llfn);\n+                            set_llvm_fn_attrs(i.attrs, llfn);\n                             llfn\n                         }\n \n@@ -2579,7 +2592,7 @@ pub fn register_method(ccx: @mut CrateContext,\n     let sym = exported_name(ccx, path, mty, m.attrs);\n \n     let llfn = register_fn(ccx, m.span, sym, id, mty);\n-    set_inline_hint_if_appr(m.attrs, llfn);\n+    set_llvm_fn_attrs(m.attrs, llfn);\n     llfn\n }\n "}, {"sha": "352eff967f4cf33cabd6f2b2275d3eb7bbc30a86", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=7f91e7740dfbf020e2538d95e21851a32a3454a6", "patch": "@@ -12,7 +12,7 @@\n use back::link::mangle_exported_name;\n use driver::session;\n use lib::llvm::ValueRef;\n-use middle::trans::base::{set_inline_hint_if_appr, set_inline_hint};\n+use middle::trans::base::{set_llvm_fn_attrs, set_inline_hint};\n use middle::trans::base::{trans_enum_variant,push_ctxt};\n use middle::trans::base::{trans_fn, decl_internal_cdecl_fn};\n use middle::trans::base::{get_item_val, no_self};\n@@ -222,7 +222,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n                 _\n             }, _) => {\n         let d = mk_lldecl();\n-        set_inline_hint_if_appr(i.attrs, d);\n+        set_llvm_fn_attrs(i.attrs, d);\n         trans_fn(ccx,\n                  pt,\n                  decl,\n@@ -266,13 +266,13 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n       ast_map::node_method(mth, _, _) => {\n         // XXX: What should the self type be here?\n         let d = mk_lldecl();\n-        set_inline_hint_if_appr(mth.attrs.clone(), d);\n+        set_llvm_fn_attrs(mth.attrs, d);\n         meth::trans_method(ccx, pt, mth, Some(psubsts), d);\n         d\n       }\n       ast_map::node_trait_method(@ast::provided(mth), _, pt) => {\n         let d = mk_lldecl();\n-        set_inline_hint_if_appr(mth.attrs.clone(), d);\n+        set_llvm_fn_attrs(mth.attrs, d);\n         meth::trans_method(ccx, (*pt).clone(), mth, Some(psubsts), d);\n         d\n       }"}, {"sha": "632edd8561134f18637c52cbf2bfd9f85cb3a844", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=7f91e7740dfbf020e2538d95e21851a32a3454a6", "patch": "@@ -43,7 +43,7 @@ extern \"C\" void LLVMRustAddPrintModulePass(LLVMPassManagerRef PMR,\n                                            const char* path) {\n   PassManager *PM = unwrap<PassManager>(PMR);\n   std::string ErrorInfo;\n-  raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n+  raw_fd_ostream OS(path, ErrorInfo, sys::fs::F_Binary);\n   formatted_raw_ostream FOS(OS);\n   PM->add(createPrintModulePass(&FOS));\n   PM->run(*unwrap(M));\n@@ -412,7 +412,7 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   bool NoVerify = false;\n   std::string ErrorInfo;\n   raw_fd_ostream OS(path, ErrorInfo,\n-                    raw_fd_ostream::F_Binary);\n+                    sys::fs::F_Binary);\n   if (ErrorInfo != \"\") {\n     LLVMRustError = ErrorInfo.c_str();\n     return false;\n@@ -481,6 +481,10 @@ extern \"C\" LLVMTypeRef LLVMMetadataTypeInContext(LLVMContextRef C) {\n   return wrap(Type::getMetadataTy(*unwrap(C)));\n }\n \n+extern \"C\" void LLVMAddFunctionAttrString(LLVMValueRef fn, const char *Name) {\n+  unwrap<Function>(fn)->addFnAttr(Name);\n+}\n+\n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n                                             const char* Name,\n@@ -624,7 +628,7 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateFunction(\n     return wrap(Builder->createFunction(\n         unwrapDI<DIScope>(Scope), Name, LinkageName,\n         unwrapDI<DIFile>(File), LineNo,\n-        unwrapDI<DIType>(Ty), isLocalToUnit, isDefinition, ScopeLine,\n+        unwrapDI<DICompositeType>(Ty), isLocalToUnit, isDefinition, ScopeLine,\n         Flags, isOptimized,\n         unwrap<Function>(Fn),\n         unwrapDI<MDNode*>(TParam),"}, {"sha": "bde2bb765263ff60056b1ab6dceb3d756f3e41ae", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/7f91e7740dfbf020e2538d95e21851a32a3454a6/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=7f91e7740dfbf020e2538d95e21851a32a3454a6", "patch": "@@ -42,6 +42,7 @@ LLVMAddDestination\n LLVMAddEarlyCSEPass\n LLVMAddFunction\n LLVMAddFunctionAttr\n+LLVMAddFunctionAttrString\n LLVMAddFunctionAttrsPass\n LLVMAddFunctionInliningPass\n LLVMAddGVNPass"}]}