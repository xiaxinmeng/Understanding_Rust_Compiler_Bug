{"sha": "848aa56df5229d13b92987d631f318c87bffbc96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OGFhNTZkZjUyMjlkMTNiOTI5ODdkNjMxZjMxOGM4N2JmZmJjOTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-11T17:33:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-11T17:33:38Z"}, "message": "Merge #4397\n\n4397: Textmate cooperation r=matklad a=georgewfraser\n\nThis PR tweaks the fallback TextMate scopes to make them more consistent with the existing grammar and other languages, and edits the builtin TextMate grammar to align with semantic coloring. Before is on the left, after is on the right:\r\n\r\n<img width=\"855\" alt=\"Screen Shot 2020-05-10 at 1 45 51 PM\" src=\"https://user-images.githubusercontent.com/1369240/81512320-a8be7e80-92d4-11ea-8940-2c03f6769015.png\">\r\n\r\n**Use keyword.other for regular keywords instead of keyword**. This is a really peculiar quirk of TextMate conventions, but virtually *all* TextMate grammars use `keyword.other` (colored blue in VSCode Dark+) for regular keywords and `keyword.control` (colored purple in VSCode Dark+) for control keywords. The TextMate scope `keyword` is colored like control keywords, not regular keywords. It may seem strange that the `keyword` scope is not the right fallback for the `keyword` semantic token, but TextMate has a long and weird history. Note how keywords change from purple back to blue (what they were before semantic coloring was added):\r\n\r\n**(1) Use punctuation.section.embedded for format specifiers**. This aligns with how Typescript colors formatting directives:\r\n\r\n<img width=\"238\" alt=\"Screen Shot 2020-05-09 at 10 54 01 AM\" src=\"https://user-images.githubusercontent.com/1369240/81481258-93b5f280-91e3-11ea-99c2-c6d258c5bcad.png\">\r\n\r\n**(2) Consistently use `entity.name.type.*` scopes for type names**. Avoid using `entity.name.*` which gets colored like a keyword.\r\n\r\n**(3) Use Property instead of Member for fields**. Property and Member are very similar, but if you look at the TextMate fallback scopes, it's clear that Member is intended for function-like-things (methods?) and Property is intended for variable-like-things.\r\n\r\n**(4) Color `for` as a regular keyword when it's part of `impl Trait for Struct`**. \r\n\r\n**(5) Use `variable.other.constant` for constants instead of `entity.name.constant`**. In the latest VSCode insiders, variable.other.constant has a subtly different color that differentiates constants from ordinary variables. It looks close to the green of types but it's not the same---it's a new color recently added to take advantage of semantic coloring.\r\n\r\nI also made some minor changes that make the TextMate scopes better match the semantic scopes. The effect of this for the user is you observe less of a change when semantic coloring \"activates\". You can see the changes I made relative to the built-in TextMate grammar here:\r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/pull/4397/files/a91d15c80c337dd1afb0eddd5eb048010d098ac7..97428b6d52d25f810dbd7d7a8d787740c58bfbd2#diff-6966c729b862f79f79bf7258eb3e0885\r\n\n\nCo-authored-by: George Fraser <george@fivetran.com>", "tree": {"sha": "c69ba875ce32c560ce3547cbd2a76753f821c1a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c69ba875ce32c560ce3547cbd2a76753f821c1a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/848aa56df5229d13b92987d631f318c87bffbc96", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeuYxyCRBK7hj4Ov3rIwAAdHIIAHHsPgRFA6kutDQcYyDp5eS4\np67zEfZMDjNPq5kapIKxuJQyyarT7xx+MTB7wZqi9eDgyHfsJQwDcUVxaEhISy1O\nWKAC6t8hau5HONAe4y98QTK83sYCGA4fPJc7uNOP/HufnBIyK9NPTje8a3iWnT4N\nYBKsUjMGXRGzzJ5wTtUW4GZ23scTZl3YJiGie47zVNIm9JqIOIFb28a7NsRS2O3C\ntjFvU+mBMOxyBiJbk7tpN8AMk8DLIiV5tXK+t0Df94KVqwsrhkxr8zLLOIvUVnOh\nQqesxCThfyE6qPP0ZiaTipqO1nxL5jzBYWrJpQyPN5aCEJ+1SnvNnmiA2QCOMCg=\n=Nv27\n-----END PGP SIGNATURE-----\n", "payload": "tree c69ba875ce32c560ce3547cbd2a76753f821c1a7\nparent de1fe23c1ebd28eb2e5227752697a5a6f63be7fa\nparent 97428b6d52d25f810dbd7d7a8d787740c58bfbd2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589218418 +0000\ncommitter GitHub <noreply@github.com> 1589218418 +0000\n\nMerge #4397\n\n4397: Textmate cooperation r=matklad a=georgewfraser\n\nThis PR tweaks the fallback TextMate scopes to make them more consistent with the existing grammar and other languages, and edits the builtin TextMate grammar to align with semantic coloring. Before is on the left, after is on the right:\r\n\r\n<img width=\"855\" alt=\"Screen Shot 2020-05-10 at 1 45 51 PM\" src=\"https://user-images.githubusercontent.com/1369240/81512320-a8be7e80-92d4-11ea-8940-2c03f6769015.png\">\r\n\r\n**Use keyword.other for regular keywords instead of keyword**. This is a really peculiar quirk of TextMate conventions, but virtually *all* TextMate grammars use `keyword.other` (colored blue in VSCode Dark+) for regular keywords and `keyword.control` (colored purple in VSCode Dark+) for control keywords. The TextMate scope `keyword` is colored like control keywords, not regular keywords. It may seem strange that the `keyword` scope is not the right fallback for the `keyword` semantic token, but TextMate has a long and weird history. Note how keywords change from purple back to blue (what they were before semantic coloring was added):\r\n\r\n**(1) Use punctuation.section.embedded for format specifiers**. This aligns with how Typescript colors formatting directives:\r\n\r\n<img width=\"238\" alt=\"Screen Shot 2020-05-09 at 10 54 01 AM\" src=\"https://user-images.githubusercontent.com/1369240/81481258-93b5f280-91e3-11ea-99c2-c6d258c5bcad.png\">\r\n\r\n**(2) Consistently use `entity.name.type.*` scopes for type names**. Avoid using `entity.name.*` which gets colored like a keyword.\r\n\r\n**(3) Use Property instead of Member for fields**. Property and Member are very similar, but if you look at the TextMate fallback scopes, it's clear that Member is intended for function-like-things (methods?) and Property is intended for variable-like-things.\r\n\r\n**(4) Color `for` as a regular keyword when it's part of `impl Trait for Struct`**. \r\n\r\n**(5) Use `variable.other.constant` for constants instead of `entity.name.constant`**. In the latest VSCode insiders, variable.other.constant has a subtly different color that differentiates constants from ordinary variables. It looks close to the green of types but it's not the same---it's a new color recently added to take advantage of semantic coloring.\r\n\r\nI also made some minor changes that make the TextMate scopes better match the semantic scopes. The effect of this for the user is you observe less of a change when semantic coloring \"activates\". You can see the changes I made relative to the built-in TextMate grammar here:\r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/pull/4397/files/a91d15c80c337dd1afb0eddd5eb048010d098ac7..97428b6d52d25f810dbd7d7a8d787740c58bfbd2#diff-6966c729b862f79f79bf7258eb3e0885\r\n\n\nCo-authored-by: George Fraser <george@fivetran.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/848aa56df5229d13b92987d631f318c87bffbc96", "html_url": "https://github.com/rust-lang/rust/commit/848aa56df5229d13b92987d631f318c87bffbc96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/848aa56df5229d13b92987d631f318c87bffbc96/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de1fe23c1ebd28eb2e5227752697a5a6f63be7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1fe23c1ebd28eb2e5227752697a5a6f63be7fa", "html_url": "https://github.com/rust-lang/rust/commit/de1fe23c1ebd28eb2e5227752697a5a6f63be7fa"}, {"sha": "97428b6d52d25f810dbd7d7a8d787740c58bfbd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/97428b6d52d25f810dbd7d7a8d787740c58bfbd2", "html_url": "https://github.com/rust-lang/rust/commit/97428b6d52d25f810dbd7d7a8d787740c58bfbd2"}], "stats": {"total": 745, "additions": 734, "deletions": 11}, "files": [{"sha": "635fe5cf9ddf54fc7d11ace1fca787cdfd56b341", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/848aa56df5229d13b92987d631f318c87bffbc96/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/848aa56df5229d13b92987d631f318c87bffbc96/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=848aa56df5229d13b92987d631f318c87bffbc96", "patch": "@@ -33,6 +33,16 @@\n     <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span>: <span class=\"builtin_type\">i32</span>,\n }\n \n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>(&<span class=\"keyword\">self</span>) -&gt; <span class=\"builtin_type\">i32</span>;\n+}\n+\n+<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>(&<span class=\"keyword\">self</span>) -&gt; <span class=\"builtin_type\">i32</span> {\n+        <span class=\"keyword\">self</span>.<span class=\"field\">x</span>\n+    }\n+}\n+\n <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span>: <span class=\"builtin_type\">i32</span> = <span class=\"numeric_literal\">0</span>;\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>&lt;<span class=\"lifetime declaration\">'a</span>, <span class=\"type_param declaration\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n@@ -63,6 +73,10 @@\n         <span class=\"static mutable\">STATIC_MUT</span> = <span class=\"numeric_literal\">1</span>;\n     }\n \n+    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> {\n+        <span class=\"comment\">// Do nothing</span>\n+    }\n+\n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = &<span class=\"variable mutable\">y</span>;"}, {"sha": "be57eeb0abeab6eade3d82657cf876328e4bb563", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/848aa56df5229d13b92987d631f318c87bffbc96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848aa56df5229d13b92987d631f318c87bffbc96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=848aa56df5229d13b92987d631f318c87bffbc96", "patch": "@@ -403,12 +403,13 @@ fn highlight_element(\n                 T![break]\n                 | T![continue]\n                 | T![else]\n-                | T![for]\n                 | T![if]\n                 | T![loop]\n                 | T![match]\n                 | T![return]\n-                | T![while] => h | HighlightModifier::ControlFlow,\n+                | T![while]\n+                | T![in] => h | HighlightModifier::ControlFlow,\n+                T![for] if !is_child_of_impl(element) => h | HighlightModifier::ControlFlow,\n                 T![unsafe] => h | HighlightModifier::Unsafe,\n                 _ => h,\n             }\n@@ -432,6 +433,13 @@ fn highlight_element(\n     }\n }\n \n+fn is_child_of_impl(element: SyntaxElement) -> bool {\n+    match element.parent() {\n+        Some(e) => e.kind() == IMPL_DEF,\n+        _ => false,\n+    }\n+}\n+\n fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,"}, {"sha": "eb43a23da6821ad34a5dc734b79f8eff510df82b", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/848aa56df5229d13b92987d631f318c87bffbc96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848aa56df5229d13b92987d631f318c87bffbc96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=848aa56df5229d13b92987d631f318c87bffbc96", "patch": "@@ -17,6 +17,16 @@ struct Foo {\n     pub y: i32,\n }\n \n+trait Bar {\n+    fn bar(&self) -> i32;\n+}\n+\n+impl Bar for Foo {\n+    fn bar(&self) -> i32 {\n+        self.x\n+    }\n+}\n+\n static mut STATIC_MUT: i32 = 0;\n \n fn foo<'a, T>() -> T {\n@@ -47,6 +57,10 @@ fn main() {\n         STATIC_MUT = 1;\n     }\n \n+    for e in vec {\n+        // Do nothing\n+    }\n+\n     let mut x = 42;\n     let y = &mut x;\n     let z = &y;"}, {"sha": "33c2fd595fbddc89287fa73884023c44976b2243", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/848aa56df5229d13b92987d631f318c87bffbc96/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848aa56df5229d13b92987d631f318c87bffbc96/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=848aa56df5229d13b92987d631f318c87bffbc96", "patch": "@@ -264,7 +264,7 @@ fn semantic_token_type_and_modifiers(\n         HighlightTag::Trait => lsp_types::SemanticTokenType::INTERFACE,\n         HighlightTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n         HighlightTag::SelfType => lsp_types::SemanticTokenType::TYPE,\n-        HighlightTag::Field => lsp_types::SemanticTokenType::MEMBER,\n+        HighlightTag::Field => lsp_types::SemanticTokenType::PROPERTY,\n         HighlightTag::Function => lsp_types::SemanticTokenType::FUNCTION,\n         HighlightTag::Module => lsp_types::SemanticTokenType::NAMESPACE,\n         HighlightTag::Constant => {"}, {"sha": "257b744bfeaa3f34fd7542d280eaaa67d9c6783c", "filename": "editors/code/.vscodeignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/848aa56df5229d13b92987d631f318c87bffbc96/editors%2Fcode%2F.vscodeignore", "raw_url": "https://github.com/rust-lang/rust/raw/848aa56df5229d13b92987d631f318c87bffbc96/editors%2Fcode%2F.vscodeignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.vscodeignore?ref=848aa56df5229d13b92987d631f318c87bffbc96", "patch": "@@ -3,5 +3,6 @@\n !package.json\n !package-lock.json\n !ra_syntax_tree.tmGrammar.json\n+!rust.tmGrammar.json\n !icon.png\n !README.md"}, {"sha": "f46684c76570ce062311198bd77908cbfffe67bd", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/848aa56df5229d13b92987d631f318c87bffbc96/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/848aa56df5229d13b92987d631f318c87bffbc96/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=848aa56df5229d13b92987d631f318c87bffbc96", "patch": "@@ -478,6 +478,11 @@\n             }\n         ],\n         \"grammars\": [\n+            {\n+                \"language\": \"rust\",\n+                \"scopeName\": \"source.rust\",\n+                \"path\": \"rust.tmGrammar.json\"\n+            },\n             {\n                 \"language\": \"ra_syntax_tree\",\n                 \"scopeName\": \"source.ra_syntax_tree\",\n@@ -596,28 +601,28 @@\n                         \"support.type.primitive\"\n                     ],\n                     \"lifetime\": [\n-                        \"entity.name.lifetime.rust\"\n+                        \"storage.modifier.lifetime.rust\"\n                     ],\n                     \"typeAlias\": [\n-                        \"entity.name.typeAlias\"\n+                        \"entity.name.type.typeAlias\"\n                     ],\n                     \"union\": [\n-                        \"entity.name.union\"\n+                        \"entity.name.type.union\"\n                     ],\n                     \"struct\": [\n                         \"entity.name.type.struct\"\n                     ],\n-                    \"keyword.unsafe\": [\n-                        \"keyword.other.unsafe\"\n-                    ],\n                     \"keyword\": [\n-                        \"keyword\"\n+                        \"keyword.other\"\n                     ],\n                     \"keyword.controlFlow\": [\n                         \"keyword.control\"\n                     ],\n                     \"variable.constant\": [\n-                        \"entity.name.constant\"\n+                        \"variable.other.constant\"\n+                    ],\n+                    \"formatSpecifier\": [\n+                        \"punctuation.section.embedded\"\n                     ]\n                 }\n             }"}, {"sha": "27982c13a5015adc22dbffa0f1794fd17dd1a9a7", "filename": "editors/code/rust.tmGrammar.json", "status": "added", "additions": 681, "deletions": 0, "changes": 681, "blob_url": "https://github.com/rust-lang/rust/blob/848aa56df5229d13b92987d631f318c87bffbc96/editors%2Fcode%2Frust.tmGrammar.json", "raw_url": "https://github.com/rust-lang/rust/raw/848aa56df5229d13b92987d631f318c87bffbc96/editors%2Fcode%2Frust.tmGrammar.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Frust.tmGrammar.json?ref=848aa56df5229d13b92987d631f318c87bffbc96", "patch": "@@ -0,0 +1,681 @@\n+{\n+\t\"name\": \"Rust\",\n+\t\"scopeName\": \"source.rust\",\n+\t\"patterns\": [\n+\t\t{\n+\t\t\t\"comment\": \"Implementation\",\n+\t\t\t\"begin\": \"\\\\b(impl)\\\\b\",\n+\t\t\t\"end\": \"\\\\{\",\n+\t\t\t\"beginCaptures\": {\n+\t\t\t\t\"1\": {\n+\t\t\t\t\t\"name\": \"storage.type.rust\"\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#line_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#sigils\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#mut\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#dyn\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#ref_lifetime\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_marker\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#type_params\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#where\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"storage.type.rust\",\n+\t\t\t\t\t\"match\": \"\\\\bfor\\\\b\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#type\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#block_doc_comment\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#block_comment\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#line_doc_comment\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#line_comment\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Attribute\",\n+\t\t\t\"name\": \"meta.attribute.rust\",\n+\t\t\t\"begin\": \"#\\\\!?\\\\[\",\n+\t\t\t\"end\": \"\\\\]\",\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#string_literal\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_doc_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#line_doc_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#line_comment\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Single-quote string literal (character)\",\n+\t\t\t\"name\": \"string.quoted.single.rust\",\n+\t\t\t\"match\": \"b?'([^'\\\\\\\\]|\\\\\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#string_literal\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#raw_string_literal\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Floating point literal (fraction)\",\n+\t\t\t\"name\": \"constant.numeric.float.rust\",\n+\t\t\t\"match\": \"\\\\b[0-9][0-9_]*\\\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Floating point literal (exponent)\",\n+\t\t\t\"name\": \"constant.numeric.float.rust\",\n+\t\t\t\"match\": \"\\\\b[0-9][0-9_]*(\\\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Floating point literal (typed)\",\n+\t\t\t\"name\": \"constant.numeric.float.rust\",\n+\t\t\t\"match\": \"\\\\b[0-9][0-9_]*(\\\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Integer literal (decimal)\",\n+\t\t\t\"name\": \"constant.numeric.integer.decimal.rust\",\n+\t\t\t\"match\": \"\\\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Integer literal (hexadecimal)\",\n+\t\t\t\"name\": \"constant.numeric.integer.hexadecimal.rust\",\n+\t\t\t\"match\": \"\\\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Integer literal (octal)\",\n+\t\t\t\"name\": \"constant.numeric.integer.octal.rust\",\n+\t\t\t\"match\": \"\\\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Integer literal (binary)\",\n+\t\t\t\"name\": \"constant.numeric.integer.binary.rust\",\n+\t\t\t\"match\": \"\\\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Static storage modifier\",\n+\t\t\t\"name\": \"storage.modifier.static.rust\",\n+\t\t\t\"match\": \"\\\\bstatic\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Boolean constant\",\n+\t\t\t\"name\": \"constant.language.boolean.rust\",\n+\t\t\t\"match\": \"\\\\b(true|false)\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Control keyword\",\n+\t\t\t\"name\": \"keyword.control.rust\",\n+\t\t\t\"match\": \"\\\\b(async|await|break|continue|else|if|in|for|loop|match|return|try|while)\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Keyword\",\n+\t\t\t\"name\": \"keyword.other.rust\",\n+\t\t\t\"match\": \"\\\\b(crate|extern|mod|let|ref|use|super|move|as)\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Reserved keyword\",\n+\t\t\t\"name\": \"invalid.deprecated.rust\",\n+\t\t\t\"match\": \"\\\\b(abstract|alignof|become|do|final|macro|offsetof|override|priv|proc|pure|sizeof|typeof|virtual|yield)\\\\b\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#unsafe\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#sigils\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#self\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#mut\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#dyn\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#impl\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#box\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#lifetime\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#ref_lifetime\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#const\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#pub\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Miscellaneous operator\",\n+\t\t\t\"name\": \"keyword.operator.misc.rust\",\n+\t\t\t\"match\": \"(=>|::)\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Comparison operator\",\n+\t\t\t\"name\": \"keyword.operator.comparison.rust\",\n+\t\t\t\"match\": \"(&&|\\\\|\\\\||==|!=)\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Assignment operator\",\n+\t\t\t\"name\": \"keyword.operator.assignment.rust\",\n+\t\t\t\"match\": \"(\\\\+=|-=|/=|\\\\*=|%=|\\\\^=|&=|\\\\|=|<<=|>>=|=)\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Arithmetic operator\",\n+\t\t\t\"name\": \"keyword.operator.arithmetic.rust\",\n+\t\t\t\"match\": \"(!|\\\\+|-|/|\\\\*|%|\\\\^|&|\\\\||<<|>>)\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Comparison operator (second group because of regex precedence)\",\n+\t\t\t\"name\": \"keyword.operator.comparison.rust\",\n+\t\t\t\"match\": \"(<=|>=|<|>)\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#core_types\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#core_vars\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#core_marker\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#core_traits\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#std_types\"\n+\t\t},\n+\t\t{\n+\t\t\t\"include\": \"#std_traits\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Built-in macro\",\n+\t\t\t\"name\": \"support.function.builtin.rust\",\n+\t\t\t\"match\": \"\\\\b(macro_rules|compile_error|format_args|env|option_env|concat_idents|concat|line|column|file|stringify|include|include_str|include_bytes|module_path|cfg)!\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Core macro\",\n+\t\t\t\"name\": \"support.function.core.rust\",\n+\t\t\t\"match\": \"\\\\b(panic|assert|assert_eq|assert_ne|debug_assert|debug_assert_eq|debug_assert_ne|try|write|writeln|unreachable|unimplemented)!\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Standard library macro\",\n+\t\t\t\"name\": \"support.function.std.rust\",\n+\t\t\t\"match\": \"\\\\b(format|print|println|eprint|eprintln|select|vec)!\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Logging macro\",\n+\t\t\t\"name\": \"support.function.log.rust\",\n+\t\t\t\"match\": \"\\\\b(log|error|warn|info|debug|trace|log_enabled)!\"\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Invokation of a macro\",\n+\t\t\t\"match\": \"\\\\b([a-zA-Z_][a-zA-Z0-9_]*\\\\!)\\\\s*[({\\\\[]\",\n+\t\t\t\"captures\": {\n+\t\t\t\t\"1\": {\n+\t\t\t\t\t\"name\": \"entity.name.function.macro.rust\"\n+\t\t\t\t}\n+\t\t\t}\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Function call\",\n+\t\t\t\"match\": \"\\\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\\\s*\\\\(\",\n+\t\t\t\"captures\": {\n+\t\t\t\t\"1\": {\n+\t\t\t\t\t\"name\": \"entity.name.function.rust\"\n+\t\t\t\t}\n+\t\t\t}\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Function call with type parameters\",\n+\t\t\t\"begin\": \"\\\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\\\s*(::)(?=\\\\s*<.*>\\\\s*\\\\()\",\n+\t\t\t\"end\": \"\\\\(\",\n+\t\t\t\"captures\": {\n+\t\t\t\t\"1\": {\n+\t\t\t\t\t\"name\": \"entity.name.function.rust\"\n+\t\t\t\t},\n+\t\t\t\t\"2\": {\n+\t\t\t\t\t\"name\": \"keyword.operator.misc.rust\"\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#type_params\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Function definition\",\n+\t\t\t\"begin\": \"\\\\b(fn)\\\\s+([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\",\n+\t\t\t\"end\": \"[\\\\{;]\",\n+\t\t\t\"beginCaptures\": {\n+\t\t\t\t\"1\": {\n+\t\t\t\t\t\"name\": \"keyword.other.fn.rust\"\n+\t\t\t\t},\n+\t\t\t\t\"2\": {\n+\t\t\t\t\t\"name\": \"entity.name.function.rust\"\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#line_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#sigils\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#self\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#mut\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#dyn\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#impl\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#ref_lifetime\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_marker\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#type_params\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#const\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#where\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#unsafe\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"comment\": \"Function arguments\",\n+\t\t\t\t\t\"match\": \"\\bfn\\b\",\n+\t\t\t\t\t\"name\": \"keyword.other.fn.rust\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Type declaration\",\n+\t\t\t\"begin\": \"\\\\b(enum|struct|trait|union)\\\\s+([a-zA-Z_][a-zA-Z0-9_]*)\",\n+\t\t\t\"end\": \"[\\\\{\\\\(;]\",\n+\t\t\t\"beginCaptures\": {\n+\t\t\t\t\"1\": {\n+\t\t\t\t\t\"name\": \"storage.type.rust\"\n+\t\t\t\t},\n+\t\t\t\t\"2\": {\n+\t\t\t\t\t\"name\": \"entity.name.type.rust\"\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#line_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#type_params\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#pub\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#where\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"comment\": \"Type alias\",\n+\t\t\t\"begin\": \"\\\\b(type)\\\\s+([a-zA-Z_][a-zA-Z0-9_]*)\",\n+\t\t\t\"end\": \";\",\n+\t\t\t\"beginCaptures\": {\n+\t\t\t\t\"1\": {\n+\t\t\t\t\t\"name\": \"storage.type.rust\"\n+\t\t\t\t},\n+\t\t\t\t\"2\": {\n+\t\t\t\t\t\"name\": \"entity.name.type.rust\"\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#line_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#sigils\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#mut\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#dyn\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#impl\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#lifetime\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#ref_lifetime\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_marker\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#type_params\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t}\n+\t],\n+\t\"repository\": {\n+\t\t\"block_doc_comment\": {\n+\t\t\t\"comment\": \"Block documentation comment\",\n+\t\t\t\"name\": \"comment.block.documentation.rust\",\n+\t\t\t\"begin\": \"/\\\\*[\\\\*!](?![\\\\*/])\",\n+\t\t\t\"end\": \"\\\\*/\",\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_doc_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_comment\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t\"block_comment\": {\n+\t\t\t\"comment\": \"Block comment\",\n+\t\t\t\"name\": \"comment.block.rust\",\n+\t\t\t\"begin\": \"/\\\\*\",\n+\t\t\t\"end\": \"\\\\*/\",\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_doc_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_comment\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t\"line_doc_comment\": {\n+\t\t\t\"comment\": \"Single-line documentation comment\",\n+\t\t\t\"name\": \"comment.line.documentation.rust\",\n+\t\t\t\"begin\": \"//[!/](?=[^/])\",\n+\t\t\t\"end\": \"$\"\n+\t\t},\n+\t\t\"line_comment\": {\n+\t\t\t\"comment\": \"Single-line comment\",\n+\t\t\t\"name\": \"comment.line.double-slash.rust\",\n+\t\t\t\"begin\": \"//\",\n+\t\t\t\"end\": \"$\"\n+\t\t},\n+\t\t\"escaped_character\": {\n+\t\t\t\"name\": \"constant.character.escape.rust\",\n+\t\t\t\"match\": \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)\"\n+\t\t},\n+\t\t\"string_literal\": {\n+\t\t\t\"comment\": \"Double-quote string literal\",\n+\t\t\t\"name\": \"string.quoted.double.rust\",\n+\t\t\t\"begin\": \"b?\\\"\",\n+\t\t\t\"end\": \"\\\"\",\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#escaped_character\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t},\n+\t\t\"raw_string_literal\": {\n+\t\t\t\"comment\": \"Raw double-quote string literal\",\n+\t\t\t\"name\": \"string.quoted.double.raw.rust\",\n+\t\t\t\"begin\": \"b?r(#*)\\\"\",\n+\t\t\t\"end\": \"\\\"\\\\1\"\n+\t\t},\n+\t\t\"sigils\": {\n+\t\t\t\"comment\": \"Sigil\",\n+\t\t\t\"name\": \"keyword.operator.sigil.rust\",\n+\t\t\t\"match\": \"[&*](?=[a-zA-Z0-9_\\\\(\\\\[\\\\|\\\\\\\"]+)\"\n+\t\t},\n+\t\t\"self\": {\n+\t\t\t\"comment\": \"Self variable\",\n+\t\t\t\"name\": \"variable.language.rust\",\n+\t\t\t\"match\": \"\\\\bself\\\\b\"\n+\t\t},\n+\t\t\"mut\": {\n+\t\t\t\"comment\": \"Mutable storage modifier\",\n+\t\t\t\"name\": \"storage.modifier.mut.rust\",\n+\t\t\t\"match\": \"\\\\bmut\\\\b\"\n+\t\t},\n+\t\t\"dyn\": {\n+\t\t\t\"comment\": \"Dynamic modifier\",\n+\t\t\t\"name\": \"storage.modifier.dyn.rust\",\n+\t\t\t\"match\": \"\\\\bdyn\\\\b\"\n+\t\t},\n+\t\t\"impl\": {\n+\t\t\t\"comment\": \"Existential type modifier\",\n+\t\t\t\"name\": \"storage.modifier.impl.rust\",\n+\t\t\t\"match\": \"\\\\bimpl\\\\b\"\n+\t\t},\n+\t\t\"box\": {\n+\t\t\t\"comment\": \"Box storage modifier\",\n+\t\t\t\"name\": \"storage.modifier.box.rust\",\n+\t\t\t\"match\": \"\\\\bbox\\\\b\"\n+\t\t},\n+\t\t\"const\": {\n+\t\t\t\"comment\": \"Const storage modifier\",\n+\t\t\t\"name\": \"storage.modifier.const.rust\",\n+\t\t\t\"match\": \"\\\\bconst\\\\b\"\n+\t\t},\n+\t\t\"pub\": {\n+\t\t\t\"comment\": \"Visibility modifier\",\n+\t\t\t\"name\": \"storage.modifier.visibility.rust\",\n+\t\t\t\"match\": \"\\\\bpub\\\\b\"\n+\t\t},\n+\t\t\"unsafe\": {\n+\t\t\t\"comment\": \"Unsafe code keyword\",\n+\t\t\t\"name\": \"keyword.other.unsafe.rust\",\n+\t\t\t\"match\": \"\\\\bunsafe\\\\b\"\n+\t\t},\n+\t\t\"where\": {\n+\t\t\t\"comment\": \"Generic where clause\",\n+\t\t\t\"name\": \"keyword.other.where.rust\",\n+\t\t\t\"match\": \"\\\\bwhere\\\\b\"\n+\t\t},\n+\t\t\"lifetime\": {\n+\t\t\t\"comment\": \"Named lifetime\",\n+\t\t\t\"name\": \"storage.modifier.lifetime.rust\",\n+\t\t\t\"match\": \"'([a-zA-Z_][a-zA-Z0-9_]*)\\\\b\"\n+\t\t},\n+\t\t\"ref_lifetime\": {\n+\t\t\t\"comment\": \"Reference with named lifetime\",\n+\t\t\t\"match\": \"(&)('[a-zA-Z_][a-zA-Z0-9_]*)\\\\b\",\n+\t\t\t\"captures\": {\n+\t\t\t\t\"1\": {\n+\t\t\t\t\t\"name\": \"keyword.operator.sigil.rust\"\n+\t\t\t\t},\n+\t\t\t\t\"2\": {\n+\t\t\t\t\t\"name\": \"storage.modifier.lifetime.rust\"\n+\t\t\t\t}\n+\t\t\t}\n+\t\t},\n+\t\t\"core_types\": {\n+\t\t\t\"comment\": \"Built-in/core type\",\n+\t\t\t\"name\": \"support.type.primitive\",\n+\t\t\t\"match\": \"\\\\b(bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self)\\\\b\"\n+\t\t},\n+\t\t\"core_vars\": {\n+\t\t\t\"comment\": \"Core type variant\",\n+\t\t\t\"name\": \"support.constant.core.rust\",\n+\t\t\t\"match\": \"\\\\b(Some|None|Ok|Err)\\\\b\"\n+\t\t},\n+\t\t\"core_marker\": {\n+\t\t\t\"comment\": \"Core trait (marker)\",\n+\t\t\t\"name\": \"entity.name.type.marker.rust\",\n+\t\t\t\"match\": \"\\\\b(Copy|Send|Sized|Sync)\\\\b\"\n+\t\t},\n+\t\t\"core_traits\": {\n+\t\t\t\"comment\": \"Core trait\",\n+\t\t\t\"name\": \"entity.name.type.core.rust\",\n+\t\t\t\"match\": \"\\\\b(Drop|Fn|FnMut|FnOnce|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator)\\\\b\"\n+\t\t},\n+\t\t\"std_types\": {\n+\t\t\t\"comment\": \"Standard library type\",\n+\t\t\t\"name\": \"entity.name.type.class.std.rust\",\n+\t\t\t\"match\": \"\\\\b(Box|String|Vec|Path|PathBuf|Option|Result)\\\\b\"\n+\t\t},\n+\t\t\"std_traits\": {\n+\t\t\t\"comment\": \"Standard library trait\",\n+\t\t\t\"name\": \"entity.name.type.std.rust\",\n+\t\t\t\"match\": \"\\\\b(ToOwned|ToString)\\\\b\"\n+\t\t},\n+\t\t\"type\": {\n+\t\t\t\"comment\": \"A type\",\n+\t\t\t\"name\": \"entity.name.type.rust\",\n+\t\t\t\"match\": \"\\\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\\\b\"\n+\t\t},\n+\t\t\"type_params\": {\n+\t\t\t\"comment\": \"Type parameters\",\n+\t\t\t\"name\": \"meta.type_params.rust\",\n+\t\t\t\"begin\": \"<(?![=<])\",\n+\t\t\t\"end\": \"(?<![-])>\",\n+\t\t\t\"patterns\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#block_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#line_comment\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#sigils\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#mut\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#dyn\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#impl\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#lifetime\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_marker\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#core_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_types\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#std_traits\"\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"include\": \"#type_params\"\n+\t\t\t\t}\n+\t\t\t]\n+\t\t}\n+\t}\n+}\n\\ No newline at end of file"}]}