{"sha": "9ce0f82b8ab44869777d441b51aecfb9d8ebdef9", "node_id": "C_kwDOAAsO6NoAKDljZTBmODJiOGFiNDQ4Njk3NzdkNDQxYjUxYWVjZmI5ZDhlYmRlZjk", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-07-06T02:30:36Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-07-17T15:14:07Z"}, "message": "Include the borrow in the suggestion for `explicit_auto_deref`", "tree": {"sha": "1162fe7f9bc9e7bb95d45d1fad50acc4ecaec261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1162fe7f9bc9e7bb95d45d1fad50acc4ecaec261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9", "html_url": "https://github.com/rust-lang/rust/commit/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c990e2922ac7ff27e9a7516e9ac92cac5989c9e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c990e2922ac7ff27e9a7516e9ac92cac5989c9e0", "html_url": "https://github.com/rust-lang/rust/commit/c990e2922ac7ff27e9a7516e9ac92cac5989c9e0"}], "stats": {"total": 199, "additions": 98, "deletions": 101}, "files": [{"sha": "8495d2c6df712e884415480fd756899e104a40b6", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 34, "deletions": 45, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=9ce0f82b8ab44869777d441b51aecfb9d8ebdef9", "patch": "@@ -183,24 +183,24 @@ enum State {\n     },\n     DerefedBorrow(DerefedBorrow),\n     ExplicitDeref {\n-        // Span and id of the top-level deref expression if the parent expression is a borrow.\n-        deref_span_id: Option<(Span, HirId)>,\n+        mutability: Option<Mutability>,\n     },\n     ExplicitDerefField {\n         name: Symbol,\n     },\n     Reborrow {\n-        deref_span: Span,\n-        deref_hir_id: HirId,\n+        mutability: Mutability,\n+    },\n+    Borrow {\n+        mutability: Mutability,\n     },\n-    Borrow,\n }\n \n // A reference operation considered by this lint pass\n enum RefOp {\n     Method(Mutability),\n     Deref,\n-    AddrOf,\n+    AddrOf(Mutability),\n }\n \n struct RefPat {\n@@ -263,7 +263,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             ));\n                         } else if position.is_deref_stable() {\n                             self.state = Some((\n-                                State::ExplicitDeref { deref_span_id: None },\n+                                State::ExplicitDeref { mutability: None },\n                                 StateData { span: expr.span, hir_id: expr.hir_id, position },\n                             ));\n                         }\n@@ -289,7 +289,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             },\n                         ));\n                     },\n-                    RefOp::AddrOf => {\n+                    RefOp::AddrOf(mutability) => {\n                         // Find the number of times the borrow is auto-derefed.\n                         let mut iter = adjustments.iter();\n                         let mut deref_count = 0usize;\n@@ -359,7 +359,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             ));\n                         } else if position.is_deref_stable() {\n                             self.state = Some((\n-                                State::Borrow,\n+                                State::Borrow { mutability },\n                                 StateData {\n                                     span: expr.span,\n                                     hir_id: expr.hir_id,\n@@ -395,7 +395,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                     data,\n                 ));\n             },\n-            (Some((State::DerefedBorrow(state), data)), RefOp::AddrOf) if state.count != 0 => {\n+            (Some((State::DerefedBorrow(state), data)), RefOp::AddrOf(_)) if state.count != 0 => {\n                 self.state = Some((\n                     State::DerefedBorrow(DerefedBorrow {\n                         count: state.count - 1,\n@@ -404,12 +404,12 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                     data,\n                 ));\n             },\n-            (Some((State::DerefedBorrow(state), data)), RefOp::AddrOf) => {\n+            (Some((State::DerefedBorrow(state), data)), RefOp::AddrOf(mutability)) => {\n                 let position = data.position;\n                 report(cx, expr, State::DerefedBorrow(state), data);\n                 if position.is_deref_stable() {\n                     self.state = Some((\n-                        State::Borrow,\n+                        State::Borrow { mutability },\n                         StateData {\n                             span: expr.span,\n                             hir_id: expr.hir_id,\n@@ -430,43 +430,28 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                     ));\n                 } else if position.is_deref_stable() {\n                     self.state = Some((\n-                        State::ExplicitDeref { deref_span_id: None },\n+                        State::ExplicitDeref { mutability: None },\n                         StateData { span: expr.span, hir_id: expr.hir_id, position },\n                     ));\n                 }\n             },\n \n-            (Some((State::Borrow, data)), RefOp::Deref) => {\n+            (Some((State::Borrow { mutability }, data)), RefOp::Deref) => {\n                 if typeck.expr_ty(sub_expr).is_ref() {\n-                    self.state = Some((\n-                        State::Reborrow {\n-                            deref_span: expr.span,\n-                            deref_hir_id: expr.hir_id,\n-                        },\n-                        data,\n-                    ));\n+                    self.state = Some((State::Reborrow { mutability }, data));\n                 } else {\n                     self.state = Some((\n                         State::ExplicitDeref {\n-                            deref_span_id: Some((expr.span, expr.hir_id)),\n+                            mutability: Some(mutability),\n                         },\n                         data,\n                     ));\n                 }\n             },\n-            (\n-                Some((\n-                    State::Reborrow {\n-                        deref_span,\n-                        deref_hir_id,\n-                    },\n-                    data,\n-                )),\n-                RefOp::Deref,\n-            ) => {\n+            (Some((State::Reborrow { mutability }, data)), RefOp::Deref) => {\n                 self.state = Some((\n                     State::ExplicitDeref {\n-                        deref_span_id: Some((deref_span, deref_hir_id)),\n+                        mutability: Some(mutability),\n                     },\n                     data,\n                 ));\n@@ -573,7 +558,7 @@ fn try_parse_ref_op<'tcx>(\n         ExprKind::Unary(UnOp::Deref, sub_expr) if !typeck.expr_ty(sub_expr).is_unsafe_ptr() => {\n             return Some((RefOp::Deref, sub_expr));\n         },\n-        ExprKind::AddrOf(BorrowKind::Ref, _, sub_expr) => return Some((RefOp::AddrOf, sub_expr)),\n+        ExprKind::AddrOf(BorrowKind::Ref, mutability, sub_expr) => return Some((RefOp::AddrOf(mutability), sub_expr)),\n         _ => return None,\n     };\n     if tcx.is_diagnostic_item(sym::deref_method, def_id) {\n@@ -1074,7 +1059,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                 diag.span_suggestion(data.span, \"change this to\", sugg, app);\n             });\n         },\n-        State::ExplicitDeref { deref_span_id } => {\n+        State::ExplicitDeref { mutability } => {\n             if matches!(\n                 expr.kind,\n                 ExprKind::Block(..)\n@@ -1088,29 +1073,33 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                 return;\n             }\n \n-            let (span, hir_id, precedence) = if let Some((span, hir_id)) = deref_span_id\n+            let (prefix, precedence) = if let Some(mutability) = mutability\n                 && !cx.typeck_results().expr_ty(expr).is_ref()\n             {\n-                (span, hir_id, PREC_PREFIX)\n+                let prefix = match mutability {\n+                    Mutability::Not => \"&\",\n+                    Mutability::Mut => \"&mut \",\n+                };\n+                (prefix, 0)\n             } else {\n-                (data.span, data.hir_id, data.position.precedence())\n+                (\"\", data.position.precedence())\n             };\n             span_lint_hir_and_then(\n                 cx,\n                 EXPLICIT_AUTO_DEREF,\n-                hir_id,\n-                span,\n+                data.hir_id,\n+                data.span,\n                 \"deref which would be done by auto-deref\",\n                 |diag| {\n                     let mut app = Applicability::MachineApplicable;\n-                    let (snip, snip_is_macro) = snippet_with_context(cx, expr.span, span.ctxt(), \"..\", &mut app);\n+                    let (snip, snip_is_macro) = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app);\n                     let sugg =\n                         if !snip_is_macro && expr.precedence().order() < precedence && !has_enclosing_paren(&snip) {\n-                            format!(\"({})\", snip)\n+                            format!(\"{}({})\", prefix, snip)\n                         } else {\n-                            snip.into()\n+                            format!(\"{}{}\", prefix, snip)\n                         };\n-                    diag.span_suggestion(span, \"try this\", sugg, app);\n+                    diag.span_suggestion(data.span, \"try this\", sugg, app);\n                 },\n             );\n         },\n@@ -1141,7 +1130,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                 },\n             );\n         },\n-        State::Borrow | State::Reborrow { .. } => (),\n+        State::Borrow { .. } | State::Reborrow { .. } => (),\n     }\n }\n "}, {"sha": "d3efc29941454d05f26cca16facfcf3be8682b28", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=9ce0f82b8ab44869777d441b51aecfb9d8ebdef9", "patch": "@@ -68,6 +68,7 @@ fn main() {\n \n     let _: &str = &s;\n     let _: &str = &{ String::new() };\n+    let _: &str = &mut { String::new() };\n     let _ = &*s; // Don't lint. Inferred type would change.\n     let _: &_ = &*s; // Don't lint. Inferred type would change.\n "}, {"sha": "e25ccbe78cef6be3a12878cc2c653e1d5aa64678", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=9ce0f82b8ab44869777d441b51aecfb9d8ebdef9", "patch": "@@ -68,6 +68,7 @@ fn main() {\n \n     let _: &str = &*s;\n     let _: &str = &*{ String::new() };\n+    let _: &str = &mut *{ String::new() };\n     let _ = &*s; // Don't lint. Inferred type would change.\n     let _: &_ = &*s; // Don't lint. Inferred type would change.\n "}, {"sha": "0d7a9564a900e5241989dbf6d8c5cf525b277a6a", "filename": "tests/ui/explicit_auto_deref.stderr", "status": "modified", "additions": 62, "deletions": 56, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/tests%2Fui%2Fexplicit_auto_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ce0f82b8ab44869777d441b51aecfb9d8ebdef9/tests%2Fui%2Fexplicit_auto_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.stderr?ref=9ce0f82b8ab44869777d441b51aecfb9d8ebdef9", "patch": "@@ -1,208 +1,214 @@\n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:69:20\n+  --> $DIR/explicit_auto_deref.rs:69:19\n    |\n LL |     let _: &str = &*s;\n-   |                    ^^ help: try this: `s`\n+   |                   ^^^ help: try this: `&s`\n    |\n    = note: `-D clippy::explicit-auto-deref` implied by `-D warnings`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:70:20\n+  --> $DIR/explicit_auto_deref.rs:70:19\n    |\n LL |     let _: &str = &*{ String::new() };\n-   |                    ^^^^^^^^^^^^^^^^^^ help: try this: `{ String::new() }`\n+   |                   ^^^^^^^^^^^^^^^^^^^ help: try this: `&{ String::new() }`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:74:12\n+  --> $DIR/explicit_auto_deref.rs:71:19\n+   |\n+LL |     let _: &str = &mut *{ String::new() };\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut { String::new() }`\n+\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:75:11\n    |\n LL |     f_str(&*s);\n-   |            ^^ help: try this: `s`\n+   |           ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:78:14\n+  --> $DIR/explicit_auto_deref.rs:79:13\n    |\n LL |     f_str_t(&*s, &*s); // Don't lint second param.\n-   |              ^^ help: try this: `s`\n+   |             ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:81:25\n+  --> $DIR/explicit_auto_deref.rs:82:24\n    |\n LL |     let _: &Box<i32> = &**b;\n-   |                         ^^^ help: try this: `b`\n+   |                        ^^^^ help: try this: `&b`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:87:8\n+  --> $DIR/explicit_auto_deref.rs:88:7\n    |\n LL |     c(&*s);\n-   |        ^^ help: try this: `s`\n+   |       ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:93:9\n+  --> $DIR/explicit_auto_deref.rs:94:9\n    |\n LL |         &**x\n    |         ^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:97:11\n+  --> $DIR/explicit_auto_deref.rs:98:11\n    |\n LL |         { &**x }\n    |           ^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:101:9\n+  --> $DIR/explicit_auto_deref.rs:102:9\n    |\n LL |         &**{ x }\n    |         ^^^^^^^^ help: try this: `{ x }`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:105:9\n+  --> $DIR/explicit_auto_deref.rs:106:9\n    |\n LL |         &***x\n    |         ^^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:122:13\n+  --> $DIR/explicit_auto_deref.rs:123:12\n    |\n LL |         f1(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:123:13\n+  --> $DIR/explicit_auto_deref.rs:124:12\n    |\n LL |         f2(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:124:13\n+  --> $DIR/explicit_auto_deref.rs:125:12\n    |\n LL |         f3(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:125:28\n+  --> $DIR/explicit_auto_deref.rs:126:27\n    |\n LL |         f4.callable_str()(&*x);\n-   |                            ^^ help: try this: `x`\n+   |                           ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:126:13\n+  --> $DIR/explicit_auto_deref.rs:127:12\n    |\n LL |         f5(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:127:13\n+  --> $DIR/explicit_auto_deref.rs:128:12\n    |\n LL |         f6(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:128:28\n+  --> $DIR/explicit_auto_deref.rs:129:27\n    |\n LL |         f7.callable_str()(&*x);\n-   |                            ^^ help: try this: `x`\n+   |                           ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:129:26\n+  --> $DIR/explicit_auto_deref.rs:130:25\n    |\n LL |         f8.callable_t()(&*x);\n-   |                          ^^ help: try this: `x`\n+   |                         ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:130:13\n+  --> $DIR/explicit_auto_deref.rs:131:12\n    |\n LL |         f9(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:131:14\n+  --> $DIR/explicit_auto_deref.rs:132:13\n    |\n LL |         f10(&*x);\n-   |              ^^ help: try this: `x`\n+   |             ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:132:27\n+  --> $DIR/explicit_auto_deref.rs:133:26\n    |\n LL |         f11.callable_t()(&*x);\n-   |                           ^^ help: try this: `x`\n+   |                          ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:136:17\n+  --> $DIR/explicit_auto_deref.rs:137:16\n    |\n LL |     let _ = S1(&*s);\n-   |                 ^^ help: try this: `s`\n+   |                ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:141:22\n+  --> $DIR/explicit_auto_deref.rs:142:21\n    |\n LL |     let _ = S2 { s: &*s };\n-   |                      ^^ help: try this: `s`\n+   |                     ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:157:30\n+  --> $DIR/explicit_auto_deref.rs:158:30\n    |\n LL |             let _ = Self::S1(&**s);\n    |                              ^^^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:158:35\n+  --> $DIR/explicit_auto_deref.rs:159:35\n    |\n LL |             let _ = Self::S2 { s: &**s };\n    |                                   ^^^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:161:21\n+  --> $DIR/explicit_auto_deref.rs:162:20\n    |\n LL |     let _ = E1::S1(&*s);\n-   |                     ^^ help: try this: `s`\n+   |                    ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:162:26\n+  --> $DIR/explicit_auto_deref.rs:163:25\n    |\n LL |     let _ = E1::S2 { s: &*s };\n-   |                          ^^ help: try this: `s`\n+   |                         ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:180:13\n+  --> $DIR/explicit_auto_deref.rs:181:13\n    |\n LL |     let _ = (*b).foo;\n    |             ^^^^ help: try this: `b`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:181:13\n+  --> $DIR/explicit_auto_deref.rs:182:13\n    |\n LL |     let _ = (**b).foo;\n    |             ^^^^^ help: try this: `b`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:196:19\n+  --> $DIR/explicit_auto_deref.rs:197:19\n    |\n LL |     let _ = f_str(*ref_str);\n    |                   ^^^^^^^^ help: try this: `ref_str`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:198:19\n+  --> $DIR/explicit_auto_deref.rs:199:19\n    |\n LL |     let _ = f_str(**ref_ref_str);\n    |                   ^^^^^^^^^^^^^ help: try this: `ref_ref_str`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:208:13\n+  --> $DIR/explicit_auto_deref.rs:209:13\n    |\n LL |     f_str(&&*ref_str); // `needless_borrow` will suggest removing both references\n    |             ^^^^^^^^ help: try this: `ref_str`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:209:12\n+  --> $DIR/explicit_auto_deref.rs:210:12\n    |\n LL |     f_str(&&**ref_str); // `needless_borrow` will suggest removing only one reference\n    |            ^^^^^^^^^^ help: try this: `ref_str`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:218:41\n+  --> $DIR/explicit_auto_deref.rs:219:41\n    |\n LL |     let _ = || -> &'static str { return *s };\n    |                                         ^^ help: try this: `s`\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 35 previous errors\n "}]}