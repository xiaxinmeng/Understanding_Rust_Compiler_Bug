{"sha": "fec0ff2ce83ca771eabb61fcf449a5380cf98de0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYzBmZjJjZTgzY2E3NzFlYWJiNjFmY2Y0NDlhNTM4MGNmOThkZTA=", "commit": {"author": {"name": "Grigorii Kargin", "email": "greg.kargin@gmail.com", "date": "2019-03-14T21:08:44Z"}, "committer": {"name": "Grigorii Kargin", "email": "greg.kargin@gmail.com", "date": "2019-03-14T21:08:44Z"}, "message": "consistent naming for Rhs type parameter in libcore/ops", "tree": {"sha": "2438910d56e9ac8032d103a579c8decb48373c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2438910d56e9ac8032d103a579c8decb48373c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec0ff2ce83ca771eabb61fcf449a5380cf98de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec0ff2ce83ca771eabb61fcf449a5380cf98de0", "html_url": "https://github.com/rust-lang/rust/commit/fec0ff2ce83ca771eabb61fcf449a5380cf98de0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec0ff2ce83ca771eabb61fcf449a5380cf98de0/comments", "author": {"login": "greg-kargin", "id": 9350729, "node_id": "MDQ6VXNlcjkzNTA3Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9350729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greg-kargin", "html_url": "https://github.com/greg-kargin", "followers_url": "https://api.github.com/users/greg-kargin/followers", "following_url": "https://api.github.com/users/greg-kargin/following{/other_user}", "gists_url": "https://api.github.com/users/greg-kargin/gists{/gist_id}", "starred_url": "https://api.github.com/users/greg-kargin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greg-kargin/subscriptions", "organizations_url": "https://api.github.com/users/greg-kargin/orgs", "repos_url": "https://api.github.com/users/greg-kargin/repos", "events_url": "https://api.github.com/users/greg-kargin/events{/privacy}", "received_events_url": "https://api.github.com/users/greg-kargin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "greg-kargin", "id": 9350729, "node_id": "MDQ6VXNlcjkzNTA3Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9350729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greg-kargin", "html_url": "https://github.com/greg-kargin", "followers_url": "https://api.github.com/users/greg-kargin/followers", "following_url": "https://api.github.com/users/greg-kargin/following{/other_user}", "gists_url": "https://api.github.com/users/greg-kargin/gists{/gist_id}", "starred_url": "https://api.github.com/users/greg-kargin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greg-kargin/subscriptions", "organizations_url": "https://api.github.com/users/greg-kargin/orgs", "repos_url": "https://api.github.com/users/greg-kargin/repos", "events_url": "https://api.github.com/users/greg-kargin/events{/privacy}", "received_events_url": "https://api.github.com/users/greg-kargin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc44841ad2a2ad5f6c5e67b9e35ed8e7e71d4dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc44841ad2a2ad5f6c5e67b9e35ed8e7e71d4dc7", "html_url": "https://github.com/rust-lang/rust/commit/bc44841ad2a2ad5f6c5e67b9e35ed8e7e71d4dc7"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "38ec0d8e1431c46c4a1279dc87923600a9b3b764", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fec0ff2ce83ca771eabb61fcf449a5380cf98de0/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec0ff2ce83ca771eabb61fcf449a5380cf98de0/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=fec0ff2ce83ca771eabb61fcf449a5380cf98de0", "patch": "@@ -1,6 +1,6 @@\n /// The addition operator `+`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory. For\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory. For\n /// example, [`std::time::SystemTime`] implements `Add<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime + Duration`.\n ///\n@@ -67,26 +67,26 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     on(\n-        all(_Self=\"{integer}\", RHS=\"{float}\"),\n+        all(_Self=\"{integer}\", Rhs=\"{float}\"),\n         message=\"cannot add a float to an integer\",\n     ),\n     on(\n-        all(_Self=\"{float}\", RHS=\"{integer}\"),\n+        all(_Self=\"{float}\", Rhs=\"{integer}\"),\n         message=\"cannot add an integer to a float\",\n     ),\n-    message=\"cannot add `{RHS}` to `{Self}`\",\n-    label=\"no implementation for `{Self} + {RHS}`\",\n+    message=\"cannot add `{Rhs}` to `{Self}`\",\n+    label=\"no implementation for `{Self} + {Rhs}`\",\n )]\n #[doc(alias = \"+\")]\n-pub trait Add<RHS=Self> {\n+pub trait Add<Rhs=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `+` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn add(self, rhs: RHS) -> Self::Output;\n+    fn add(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! add_impl {\n@@ -108,7 +108,7 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The subtraction operator `-`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory. For\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory. For\n /// example, [`std::time::SystemTime`] implements `Sub<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime - Duration`.\n ///\n@@ -173,18 +173,18 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot subtract `{RHS}` from `{Self}`\",\n-                         label=\"no implementation for `{Self} - {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot subtract `{Rhs}` from `{Self}`\",\n+                         label=\"no implementation for `{Self} - {Rhs}`\")]\n #[doc(alias = \"-\")]\n-pub trait Sub<RHS=Self> {\n+pub trait Sub<Rhs=Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `-` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn sub(self, rhs: RHS) -> Self::Output;\n+    fn sub(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! sub_impl {\n@@ -206,7 +206,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The multiplication operator `*`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -293,18 +293,18 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot multiply `{RHS}` to `{Self}`\",\n-                         label=\"no implementation for `{Self} * {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot multiply `{Rhs}` to `{Self}`\",\n+                         label=\"no implementation for `{Self} * {Rhs}`\")]\n #[doc(alias = \"*\")]\n-pub trait Mul<RHS=Self> {\n+pub trait Mul<Rhs=Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `*` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn mul(self, rhs: RHS) -> Self::Output;\n+    fn mul(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! mul_impl {\n@@ -326,7 +326,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The division operator `/`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -417,18 +417,18 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{RHS}`\",\n-                         label=\"no implementation for `{Self} / {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot divide `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} / {Rhs}`\")]\n #[doc(alias = \"/\")]\n-pub trait Div<RHS=Self> {\n+pub trait Div<Rhs=Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `/` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn div(self, rhs: RHS) -> Self::Output;\n+    fn div(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! div_impl_integer {\n@@ -467,7 +467,7 @@ div_impl_float! { f32 f64 }\n \n /// The remainder operator `%`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -502,18 +502,18 @@ div_impl_float! { f32 f64 }\n /// ```\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{RHS}`\",\n-                         label=\"no implementation for `{Self} % {RHS}`\")]\n+#[rustc_on_unimplemented(message=\"cannot mod `{Self}` by `{Rhs}`\",\n+                         label=\"no implementation for `{Self} % {Rhs}`\")]\n #[doc(alias = \"%\")]\n-pub trait Rem<RHS=Self> {\n+pub trait Rem<Rhs=Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output = Self;\n \n     /// Performs the `%` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn rem(self, rhs: RHS) -> Self::Output;\n+    fn rem(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! rem_impl_integer {"}, {"sha": "1b9c5e6bae3fd3c487f50164bce839b4d5280edb", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fec0ff2ce83ca771eabb61fcf449a5380cf98de0/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec0ff2ce83ca771eabb61fcf449a5380cf98de0/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=fec0ff2ce83ca771eabb61fcf449a5380cf98de0", "patch": "@@ -59,7 +59,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise AND operator `&`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -112,17 +112,17 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitand\"]\n #[doc(alias = \"&\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {RHS}`\",\n-                         label=\"no implementation for `{Self} & {RHS}`\")]\n-pub trait BitAnd<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} & {Rhs}`\",\n+                         label=\"no implementation for `{Self} & {Rhs}`\")]\n+pub trait BitAnd<Rhs=Self> {\n     /// The resulting type after applying the `&` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `&` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitand(self, rhs: RHS) -> Self::Output;\n+    fn bitand(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitand_impl {\n@@ -143,7 +143,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise OR operator `|`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -196,17 +196,17 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitor\"]\n #[doc(alias = \"|\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {RHS}`\",\n-                         label=\"no implementation for `{Self} | {RHS}`\")]\n-pub trait BitOr<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} | {Rhs}`\",\n+                         label=\"no implementation for `{Self} | {Rhs}`\")]\n+pub trait BitOr<Rhs=Self> {\n     /// The resulting type after applying the `|` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `|` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitor(self, rhs: RHS) -> Self::Output;\n+    fn bitor(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitor_impl {\n@@ -227,7 +227,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The bitwise XOR operator `^`.\n ///\n-/// Note that `RHS` is `Self` by default, but this is not mandatory.\n+/// Note that `Rhs` is `Self` by default, but this is not mandatory.\n ///\n /// # Examples\n ///\n@@ -283,17 +283,17 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"bitxor\"]\n #[doc(alias = \"^\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {RHS}`\",\n-                         label=\"no implementation for `{Self} ^ {RHS}`\")]\n-pub trait BitXor<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} ^ {Rhs}`\",\n+                         label=\"no implementation for `{Self} ^ {Rhs}`\")]\n+pub trait BitXor<Rhs=Self> {\n     /// The resulting type after applying the `^` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `^` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn bitxor(self, rhs: RHS) -> Self::Output;\n+    fn bitxor(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! bitxor_impl {\n@@ -371,17 +371,17 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n #[lang = \"shl\"]\n #[doc(alias = \"<<\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {RHS}`\",\n-                         label=\"no implementation for `{Self} << {RHS}`\")]\n-pub trait Shl<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} << {Rhs}`\",\n+                         label=\"no implementation for `{Self} << {Rhs}`\")]\n+pub trait Shl<Rhs=Self> {\n     /// The resulting type after applying the `<<` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `<<` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn shl(self, rhs: RHS) -> Self::Output;\n+    fn shl(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! shl_impl {\n@@ -480,17 +480,17 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n #[lang = \"shr\"]\n #[doc(alias = \">>\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {RHS}`\",\n-                         label=\"no implementation for `{Self} >> {RHS}`\")]\n-pub trait Shr<RHS=Self> {\n+#[rustc_on_unimplemented(message=\"no implementation for `{Self} >> {Rhs}`\",\n+                         label=\"no implementation for `{Self} >> {Rhs}`\")]\n+pub trait Shr<Rhs=Self> {\n     /// The resulting type after applying the `>>` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n     /// Performs the `>>` operation.\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn shr(self, rhs: RHS) -> Self::Output;\n+    fn shr(self, rhs: Rhs) -> Self::Output;\n }\n \n macro_rules! shr_impl {"}]}