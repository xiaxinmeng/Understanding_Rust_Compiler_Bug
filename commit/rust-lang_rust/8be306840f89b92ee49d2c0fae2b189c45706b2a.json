{"sha": "8be306840f89b92ee49d2c0fae2b189c45706b2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZTMwNjg0MGY4OWI5MmVlNDlkMmMwZmFlMmIxODljNDU3MDZiMmE=", "commit": {"author": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2018-02-10T23:27:21Z"}, "committer": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2018-02-10T23:27:21Z"}, "message": "added conversion from Rust feature to LLVM feature", "tree": {"sha": "c4fe4bc9532ed23e1f4dd065c209a44b11b9d19b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4fe4bc9532ed23e1f4dd065c209a44b11b9d19b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8be306840f89b92ee49d2c0fae2b189c45706b2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJaf3/ZAAoJEBOpOZ+3fjNccCUP/ihN76oyuURcMs3fRY9dbasn\n4zapYQSgDPWRFPIU2zyw6d1NvN8cWl+NkpPlmOkPPWYDNTNdOHbuQa9FII6TMhLZ\nRSJVYMpPLTvhgCcUo2IIHw74P+x3Hwsk+Vvphg5YTswyHqsZgVIbcAUQGITrjrk5\nl5lRn5ureMbv9bbmJX5UIGIGdqEu11qp2bxjEgoA1IJtMObXO2+UYohzyrv9Yv1v\nH09x2Y+oZ/Syo9ltrtbENN7H95xyILEkuDG97LPPvf7VvHnPZPLDrqtuZ8QLwqBo\nXksFQV7Q3jufkbYeI/hK4P8YuyGB4PGuna4T8uWZfeKVHsETXjIBjb3HH+mdmfFB\nr5AktPBotTFGzh6Ld1VS63K4OtgqcvpeBt3KTbO18dD55U40VQt0eMElnPiZtOlJ\n/+BwHDDFfz6hfnjGOKaujAFpq+Fw3WNWhamQz5wLDgBPB1gAaN5whM9/YCt86ETN\nkB46MrJigG/zxUg8poEmq9CEcqprKeOKJAcFMReRLbpB7cZNni7Xqcb1hhyhgk9X\nFfEByO/z0X4ib0cO4EBVgDSM8apElmcutwJxYwSDtKP+YAIdD0ZFyf6aXlgP5Fd1\nTc406Lss/KXuvdl0IP8VTNw2Ya0Ogokv8l5glHkir29ehkOB3xpY8ppNN+N0cGhP\n3F4LZ3B6idk2gIqvRmrN\n=kjh0\n-----END PGP SIGNATURE-----", "payload": "tree c4fe4bc9532ed23e1f4dd065c209a44b11b9d19b\nparent 877272ba066dd81d9d920b851d0300bb3e7ee2b3\nauthor \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1518305241 +0300\ncommitter \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1518305241 +0300\n\nadded conversion from Rust feature to LLVM feature\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8be306840f89b92ee49d2c0fae2b189c45706b2a", "html_url": "https://github.com/rust-lang/rust/commit/8be306840f89b92ee49d2c0fae2b189c45706b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8be306840f89b92ee49d2c0fae2b189c45706b2a/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877272ba066dd81d9d920b851d0300bb3e7ee2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/877272ba066dd81d9d920b851d0300bb3e7ee2b3", "html_url": "https://github.com/rust-lang/rust/commit/877272ba066dd81d9d920b851d0300bb3e7ee2b3"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "8309c91ab2573bcf4ee7f349cd9e7b45f79b3d05", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8be306840f89b92ee49d2c0fae2b189c45706b2a/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be306840f89b92ee49d2c0fae2b189c45706b2a/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=8be306840f89b92ee49d2c0fae2b189c45706b2a", "patch": "@@ -142,7 +142,7 @@ pub fn provide(providers: &mut Providers) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Rc::new(llvm_util::target_feature_whitelist(tcx.sess)\n             .iter()\n-            .map(|c| c.to_str().unwrap().to_string())\n+            .map(|c| c.to_string())\n             .collect())\n     };\n \n@@ -212,7 +212,8 @@ fn from_target_feature(\n         let value = value.as_str();\n         for feature in value.split(',') {\n             if whitelist.contains(feature) {\n-                target_features.push(format!(\"+{}\", feature));\n+                let llvm_feature = llvm_util::to_llvm_feature(feature);\n+                target_features.push(format!(\"+{}\", llvm_feature));\n                 continue\n             }\n "}, {"sha": "61eefb32e099a0f6b37475c8332819caa4d6932b", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 39, "deletions": 33, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8be306840f89b92ee49d2c0fae2b189c45706b2a/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be306840f89b92ee49d2c0fae2b189c45706b2a/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=8be306840f89b92ee49d2c0fae2b189c45706b2a", "patch": "@@ -79,45 +79,54 @@ unsafe fn configure_llvm(sess: &Session) {\n // detection code will walk past the end of the feature array,\n // leading to crashes.\n \n-const ARM_WHITELIST: &'static [&'static str] = &[\"neon\\0\", \"v7\\0\", \"vfp2\\0\", \"vfp3\\0\", \"vfp4\\0\"];\n-\n-const AARCH64_WHITELIST: &'static [&'static str] = &[\"neon\\0\", \"v7\\0\"];\n-\n-const X86_WHITELIST: &'static [&'static str] = &[\"avx\\0\", \"avx2\\0\", \"bmi\\0\", \"bmi2\\0\", \"sse\\0\",\n-                                                 \"sse2\\0\", \"sse3\\0\", \"sse4.1\\0\", \"sse4.2\\0\",\n-                                                 \"ssse3\\0\", \"tbm\\0\", \"lzcnt\\0\", \"popcnt\\0\",\n-                                                 \"sse4a\\0\", \"rdrnd\\0\", \"rdseed\\0\", \"fma\\0\",\n-                                                 \"xsave\\0\", \"xsaveopt\\0\", \"xsavec\\0\",\n-                                                 \"xsaves\\0\", \"aes\\0\", \"pclmul\\0\",\n-                                                 \"avx512bw\\0\", \"avx512cd\\0\",\n-                                                 \"avx512dq\\0\", \"avx512er\\0\",\n-                                                 \"avx512f\\0\", \"avx512ifma\\0\",\n-                                                 \"avx512pf\\0\", \"avx512vbmi\\0\",\n-                                                 \"avx512vl\\0\", \"avx512vpopcntdq\\0\",\n-                                                 \"mmx\\0\", \"fxsr\\0\"];\n-\n-const HEXAGON_WHITELIST: &'static [&'static str] = &[\"hvx\\0\", \"hvx-double\\0\"];\n-\n-const POWERPC_WHITELIST: &'static [&'static str] = &[\"altivec\\0\",\n-                                                     \"power8-altivec\\0\", \"power9-altivec\\0\",\n-                                                     \"power8-vector\\0\", \"power9-vector\\0\",\n-                                                     \"vsx\\0\"];\n-\n-const MIPS_WHITELIST: &'static [&'static str] = &[\"msa\\0\"];\n+const ARM_WHITELIST: &'static [&'static str] = &[\"neon\", \"v7\", \"vfp2\", \"vfp3\", \"vfp4\"];\n+\n+const AARCH64_WHITELIST: &'static [&'static str] = &[\"neon\", \"v7\"];\n+\n+const X86_WHITELIST: &'static [&'static str] = &[\"avx\", \"avx2\", \"bmi\", \"bmi2\", \"sse\",\n+                                                 \"sse2\", \"sse3\", \"sse4.1\", \"sse4.2\",\n+                                                 \"ssse3\", \"tbm\", \"lzcnt\", \"popcnt\",\n+                                                 \"sse4a\", \"rdrnd\", \"rdseed\", \"fma\",\n+                                                 \"xsave\", \"xsaveopt\", \"xsavec\",\n+                                                 \"xsaves\", \"aes\", \"pclmulqdq\",\n+                                                 \"avx512bw\", \"avx512cd\",\n+                                                 \"avx512dq\", \"avx512er\",\n+                                                 \"avx512f\", \"avx512ifma\",\n+                                                 \"avx512pf\", \"avx512vbmi\",\n+                                                 \"avx512vl\", \"avx512vpopcntdq\",\n+                                                 \"mmx\", \"fxsr\"];\n+\n+const HEXAGON_WHITELIST: &'static [&'static str] = &[\"hvx\", \"hvx-double\"];\n+\n+const POWERPC_WHITELIST: &'static [&'static str] = &[\"altivec\",\n+                                                     \"power8-altivec\", \"power9-altivec\",\n+                                                     \"power8-vector\", \"power9-vector\",\n+                                                     \"vsx\"];\n+\n+const MIPS_WHITELIST: &'static [&'static str] = &[\"msa\"];\n+\n+pub fn to_llvm_feature(s: &str) -> &str {\n+    match s {\n+        \"pclmulqdq\" => \"pclmul\",\n+        s => s,\n+    }\n+}\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let whitelist = target_feature_whitelist(sess);\n     let target_machine = create_target_machine(sess);\n     let mut features = Vec::new();\n-    for feat in whitelist {\n-        if unsafe { llvm::LLVMRustHasFeature(target_machine, feat.as_ptr()) } {\n-            features.push(Symbol::intern(feat.to_str().unwrap()));\n+    for feature in whitelist {\n+        let llvm_feature = to_llvm_feature(feature);\n+        let ptr = CString::new(llvm_feature).as_ptr();\n+        if unsafe { llvm::LLVMRustHasFeature(target_machine, ptr) } {\n+            features.push(Symbol::intern(feature));\n         }\n     }\n     features\n }\n \n-pub fn target_feature_whitelist(sess: &Session) -> Vec<&CStr> {\n+pub fn target_feature_whitelist(sess: &Session) -> &'static [&'static str] {\n     let whitelist = match &*sess.target.target.arch {\n         \"arm\" => ARM_WHITELIST,\n         \"aarch64\" => AARCH64_WHITELIST,\n@@ -126,10 +135,7 @@ pub fn target_feature_whitelist(sess: &Session) -> Vec<&CStr> {\n         \"mips\" | \"mips64\" => MIPS_WHITELIST,\n         \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n         _ => &[],\n-    };\n-    whitelist.iter().map(|m| {\n-        CStr::from_bytes_with_nul(m.as_bytes()).unwrap()\n-    }).collect()\n+    }\n }\n \n pub fn print_version() {"}]}