{"sha": "9671dd239d37cf6001eaea1f85f9f81200b8ade6", "node_id": "C_kwDOAAsO6NoAKDk2NzFkZDIzOWQzN2NmNjAwMWVhZWExZjg1ZjlmODEyMDBiOGFkZTY", "commit": {"author": {"name": "Hannes K\u00f6rber", "email": "hannes@hkoerber.de", "date": "2022-12-15T13:05:01Z"}, "committer": {"name": "Hannes K\u00f6rber", "email": "hannes@hkoerber.de", "date": "2022-12-15T13:05:03Z"}, "message": "doc: Fix a few small issues\n\n* A few typos around generic types (`;` vs `,`)\n* Use inline code formatting for code fragments\n* One instance of wrong wording", "tree": {"sha": "a916f5adec95590b7a402af7ecaaca3897f66127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a916f5adec95590b7a402af7ecaaca3897f66127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9671dd239d37cf6001eaea1f85f9f81200b8ade6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9671dd239d37cf6001eaea1f85f9f81200b8ade6", "html_url": "https://github.com/rust-lang/rust/commit/9671dd239d37cf6001eaea1f85f9f81200b8ade6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9671dd239d37cf6001eaea1f85f9f81200b8ade6/comments", "author": {"login": "hakoerber", "id": 3748696, "node_id": "MDQ6VXNlcjM3NDg2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3748696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hakoerber", "html_url": "https://github.com/hakoerber", "followers_url": "https://api.github.com/users/hakoerber/followers", "following_url": "https://api.github.com/users/hakoerber/following{/other_user}", "gists_url": "https://api.github.com/users/hakoerber/gists{/gist_id}", "starred_url": "https://api.github.com/users/hakoerber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hakoerber/subscriptions", "organizations_url": "https://api.github.com/users/hakoerber/orgs", "repos_url": "https://api.github.com/users/hakoerber/repos", "events_url": "https://api.github.com/users/hakoerber/events{/privacy}", "received_events_url": "https://api.github.com/users/hakoerber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hakoerber", "id": 3748696, "node_id": "MDQ6VXNlcjM3NDg2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3748696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hakoerber", "html_url": "https://github.com/hakoerber", "followers_url": "https://api.github.com/users/hakoerber/followers", "following_url": "https://api.github.com/users/hakoerber/following{/other_user}", "gists_url": "https://api.github.com/users/hakoerber/gists{/gist_id}", "starred_url": "https://api.github.com/users/hakoerber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hakoerber/subscriptions", "organizations_url": "https://api.github.com/users/hakoerber/orgs", "repos_url": "https://api.github.com/users/hakoerber/repos", "events_url": "https://api.github.com/users/hakoerber/events{/privacy}", "received_events_url": "https://api.github.com/users/hakoerber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d67000e44e1b9908c81fc4d5de875608f1b80ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d67000e44e1b9908c81fc4d5de875608f1b80ae9", "html_url": "https://github.com/rust-lang/rust/commit/d67000e44e1b9908c81fc4d5de875608f1b80ae9"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "be615b70ced9cfffd9f0ffd2c61752a61410538a", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9671dd239d37cf6001eaea1f85f9f81200b8ade6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9671dd239d37cf6001eaea1f85f9f81200b8ade6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=9671dd239d37cf6001eaea1f85f9f81200b8ade6", "patch": "@@ -2541,7 +2541,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// The deque is assumed to be partitioned according to the given predicate.\n     /// This means that all elements for which the predicate returns true are at the start of the deque\n     /// and all elements for which the predicate returns false are at the end.\n-    /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n+    /// For example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0`\n     /// (all odd numbers are at the start, all even at the end).\n     ///\n     /// If the deque is not partitioned, the returned result is unspecified and meaningless,"}, {"sha": "2825e0bbb438593a9217c8a490fd6161f5f2bcd0", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9671dd239d37cf6001eaea1f85f9f81200b8ade6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9671dd239d37cf6001eaea1f85f9f81200b8ade6/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=9671dd239d37cf6001eaea1f85f9f81200b8ade6", "patch": "@@ -69,7 +69,7 @@ where\n /// if any element creation was unsuccessful.\n ///\n /// The return type of this function depends on the return type of the closure.\n-/// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N]; E>`.\n+/// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N], E>`.\n /// If you return `Option<T>` from the closure, you'll get an `Option<[T; N]>`.\n ///\n /// # Arguments\n@@ -522,7 +522,7 @@ impl<T, const N: usize> [T; N] {\n     /// return an array the same size as `self` or the first error encountered.\n     ///\n     /// The return type of this function depends on the return type of the closure.\n-    /// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N]; E>`.\n+    /// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N], E>`.\n     /// If you return `Option<T>` from the closure, you'll get an `Option<[T; N]>`.\n     ///\n     /// # Examples"}, {"sha": "bac836292f8fa836c163823280463423b12b6700", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9671dd239d37cf6001eaea1f85f9f81200b8ade6/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9671dd239d37cf6001eaea1f85f9f81200b8ade6/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=9671dd239d37cf6001eaea1f85f9f81200b8ade6", "patch": "@@ -2734,7 +2734,7 @@ pub trait Iterator {\n     /// the first true result or the first error.\n     ///\n     /// The return type of this method depends on the return type of the closure.\n-    /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.\n+    /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>, E>`.\n     /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.\n     ///\n     /// # Examples"}, {"sha": "8bd2ed45c0a2aa02d19e072415e8c21a9f162f42", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9671dd239d37cf6001eaea1f85f9f81200b8ade6/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9671dd239d37cf6001eaea1f85f9f81200b8ade6/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=9671dd239d37cf6001eaea1f85f9f81200b8ade6", "patch": "@@ -3795,7 +3795,7 @@ impl<T> [T] {\n     /// The slice is assumed to be partitioned according to the given predicate.\n     /// This means that all elements for which the predicate returns true are at the start of the slice\n     /// and all elements for which the predicate returns false are at the end.\n-    /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n+    /// For example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0`\n     /// (all odd numbers are at the start, all even at the end).\n     ///\n     /// If this slice is not partitioned, the returned result is unspecified and meaningless,"}]}