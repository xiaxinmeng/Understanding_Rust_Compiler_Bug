{"sha": "4731a25d2dbe84e711101f2cbb83b40fa96c7014", "node_id": "C_kwDOAAsO6NoAKDQ3MzFhMjVkMmRiZTg0ZTcxMTEwMWYyY2JiODNiNDBmYTk2YzcwMTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-18T23:45:49Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-08T03:42:21Z"}, "message": "Make suggest_deref_or_ref return a multipart suggestion", "tree": {"sha": "b1689a44bbff82fab0d5f7a0749514948d773517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1689a44bbff82fab0d5f7a0749514948d773517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4731a25d2dbe84e711101f2cbb83b40fa96c7014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4731a25d2dbe84e711101f2cbb83b40fa96c7014", "html_url": "https://github.com/rust-lang/rust/commit/4731a25d2dbe84e711101f2cbb83b40fa96c7014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4731a25d2dbe84e711101f2cbb83b40fa96c7014/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a283f581839e17a3be4a828c95fa9e905e878ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a283f581839e17a3be4a828c95fa9e905e878ac4", "html_url": "https://github.com/rust-lang/rust/commit/a283f581839e17a3be4a828c95fa9e905e878ac4"}], "stats": {"total": 411, "additions": 235, "deletions": 176}, "files": [{"sha": "51cdf64c6b91347ca63be9b9ab76b3587d309c68", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 62, "deletions": 59, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -1087,7 +1087,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// ```ignore (illustrative)\n     /// opt.map(|param| { takes_ref(param) });\n     /// ```\n-    fn can_use_as_ref(&self, expr: &hir::Expr<'_>) -> Option<(Span, &'static str, String)> {\n+    fn can_use_as_ref(&self, expr: &hir::Expr<'_>) -> Option<(Vec<(Span, String)>, &'static str)> {\n         let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = expr.kind else {\n             return None;\n         };\n@@ -1133,12 +1133,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => false,\n         };\n-        match (is_as_ref_able, self.sess().source_map().span_to_snippet(method_path.ident.span)) {\n-            (true, Ok(src)) => {\n-                let suggestion = format!(\"as_ref().{}\", src);\n-                Some((method_path.ident.span, \"consider using `as_ref` instead\", suggestion))\n-            }\n-            _ => None,\n+        if is_as_ref_able {\n+            Some((\n+                vec![(method_path.ident.span.shrink_to_lo(), \"as_ref().\".to_string())],\n+                \"consider using `as_ref` instead\",\n+            ))\n+        } else {\n+            None\n         }\n     }\n \n@@ -1223,8 +1224,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n     ) -> Option<(\n-        Span,\n-        String,\n+        Vec<(Span, String)>,\n         String,\n         Applicability,\n         bool, /* verbose */\n@@ -1254,30 +1254,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         && let Ok(src) = sm.span_to_snippet(sp)\n                         && replace_prefix(&src, \"b\\\"\", \"\\\"\").is_some()\n                     {\n-                                let pos = sp.lo() + BytePos(1);\n-                                return Some((\n-                                    sp.with_hi(pos),\n-                                    \"consider removing the leading `b`\".to_string(),\n-                                    String::new(),\n-                                    Applicability::MachineApplicable,\n-                                    true,\n-                                    false,\n-                                ));\n-                            }\n-                        }\n+                        let pos = sp.lo() + BytePos(1);\n+                        return Some((\n+                            vec![(sp.with_hi(pos), String::new())],\n+                            \"consider removing the leading `b`\".to_string(),\n+                            Applicability::MachineApplicable,\n+                            true,\n+                            false,\n+                        ));\n+                    }\n+                }\n                 (&ty::Array(arr, _) | &ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind\n                         && let Ok(src) = sm.span_to_snippet(sp)\n                         && replace_prefix(&src, \"\\\"\", \"b\\\"\").is_some()\n                     {\n-                                return Some((\n-                                    sp.shrink_to_lo(),\n-                                    \"consider adding a leading `b`\".to_string(),\n-                                    \"b\".to_string(),\n-                                    Applicability::MachineApplicable,\n-                                    true,\n-                                    false,\n-                                ));\n+                        return Some((\n+                            vec![(sp.shrink_to_lo(), \"b\".to_string())],\n+                            \"consider adding a leading `b`\".to_string(),\n+                            Applicability::MachineApplicable,\n+                            true,\n+                            false,\n+                        ));\n                     }\n                 }\n                 _ => {}\n@@ -1320,14 +1318,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n \n                     if let hir::ExprKind::Unary(hir::UnOp::Deref, ref inner) = expr.kind\n-                        && let Some(1) = self.deref_steps(expected, checked_ty) {\n+                        && let Some(1) = self.deref_steps(expected, checked_ty)\n+                    {\n                         // We have `*&T`, check if what was expected was `&T`.\n                         // If so, we may want to suggest removing a `*`.\n                         sugg_sp = sugg_sp.with_hi(inner.span.lo());\n                         return Some((\n-                            sugg_sp,\n+                            vec![(sugg_sp, String::new())],\n                             \"consider removing deref here\".to_string(),\n-                            \"\".to_string(),\n                             Applicability::MachineApplicable,\n                             true,\n                             false,\n@@ -1342,13 +1340,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         _ => false,\n                     };\n \n-                    if let Some(sugg) = self.can_use_as_ref(expr) {\n+                    if let Some((sugg, msg)) = self.can_use_as_ref(expr) {\n                         return Some((\n-                            sugg.0,\n-                            sugg.1.to_string(),\n-                            sugg.2,\n+                            sugg,\n+                            msg.to_string(),\n                             Applicability::MachineApplicable,\n-                            false,\n+                            true,\n                             false,\n                         ));\n                     }\n@@ -1369,16 +1366,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n \n-                    let (sp, sugg_expr, verbose) = if needs_parens {\n-                        let src = sm.span_to_snippet(sugg_sp).ok()?;\n-                        (sp, format!(\"({src})\"), false)\n+                    let sugg = mutability.ref_prefix_str();\n+                    let (sugg, verbose) = if needs_parens {\n+                        (\n+                            vec![\n+                                (sp.shrink_to_lo(), format!(\"{prefix}{sugg}(\")),\n+                                (sp.shrink_to_hi(), \")\".to_string()),\n+                            ],\n+                            false,\n+                        )\n                     } else {\n-                        (sp.shrink_to_lo(), \"\".to_string(), true)\n+                        (vec![(sp.shrink_to_lo(), format!(\"{prefix}{sugg}\"))], true)\n                     };\n                     return Some((\n-                        sp,\n+                        sugg,\n                         format!(\"consider {}borrowing here\", mutability.mutably_str()),\n-                        format!(\"{prefix}{}{sugg_expr}\", mutability.ref_prefix_str()),\n                         Applicability::MachineApplicable,\n                         verbose,\n                         false,\n@@ -1404,23 +1406,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         && sm.is_span_accessible(call_span)\n                     {\n                         return Some((\n-                            sp.with_hi(call_span.lo()),\n+                            vec![(sp.with_hi(call_span.lo()), String::new())],\n                             \"consider removing the borrow\".to_string(),\n-                            String::new(),\n                             Applicability::MachineApplicable,\n                             true,\n-                            true\n+                            true,\n                         ));\n                     }\n                     return None;\n                 }\n-                if sp.contains(expr.span)\n-                    && sm.is_span_accessible(expr.span)\n-                {\n+                if sp.contains(expr.span) && sm.is_span_accessible(expr.span) {\n                     return Some((\n-                        sp.with_hi(expr.span.lo()),\n+                        vec![(sp.with_hi(expr.span.lo()), String::new())],\n                         \"consider removing the borrow\".to_string(),\n-                        String::new(),\n                         Applicability::MachineApplicable,\n                         true,\n                         true,\n@@ -1444,23 +1442,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     let suggestion = replace_prefix(&src, old_prefix, &new_prefix).map(|_| {\n                         // skip `&` or `&mut ` if both mutabilities are mutable\n-                        let lo = sp.lo() + BytePos(min(old_prefix.len(), mutbl_b.ref_prefix_str().len()) as _);\n+                        let lo = sp.lo()\n+                            + BytePos(min(old_prefix.len(), mutbl_b.ref_prefix_str().len()) as _);\n                         // skip `&` or `&mut `\n                         let hi = sp.lo() + BytePos(old_prefix.len() as _);\n                         let sp = sp.with_lo(lo).with_hi(hi);\n \n                         (\n                             sp,\n-                            format!(\"{}{derefs}\", if mutbl_a != mutbl_b { mutbl_b.prefix_str() } else { \"\" }),\n-                            if mutbl_b <= mutbl_a { Applicability::MachineApplicable } else { Applicability::MaybeIncorrect }\n+                            format!(\n+                                \"{}{derefs}\",\n+                                if mutbl_a != mutbl_b { mutbl_b.prefix_str() } else { \"\" }\n+                            ),\n+                            if mutbl_b <= mutbl_a {\n+                                Applicability::MachineApplicable\n+                            } else {\n+                                Applicability::MaybeIncorrect\n+                            },\n                         )\n                     });\n \n                     if let Some((span, src, applicability)) = suggestion {\n                         return Some((\n-                            span,\n+                            vec![(span, src)],\n                             \"consider dereferencing\".to_string(),\n-                            src,\n                             applicability,\n                             true,\n                             false,\n@@ -1489,9 +1494,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // If we've reached our target type with just removing `&`, then just print now.\n                     if steps == 0 && !remove.trim().is_empty() {\n                         return Some((\n-                            prefix_span,\n+                            vec![(prefix_span, String::new())],\n                             format!(\"consider removing the `{}`\", remove.trim()),\n-                            String::new(),\n                             // Do not remove `&&` to get to bool, because it might be something like\n                             // { a } && b, which we have a separate fixup suggestion that is more\n                             // likely correct...\n@@ -1557,9 +1561,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n \n                         return Some((\n-                            span,\n+                            vec![(span, suggestion)],\n                             message,\n-                            suggestion,\n                             Applicability::MachineApplicable,\n                             true,\n                             false,"}, {"sha": "aea0e4a6b2b001cf482f2a9f06ca5b1a6f9ab5f8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -274,13 +274,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n     ) -> bool {\n         let expr = expr.peel_blocks();\n-        if let Some((sp, msg, suggestion, applicability, verbose, annotation)) =\n+        if let Some((suggestion, msg, applicability, verbose, annotation)) =\n             self.suggest_deref_or_ref(expr, found, expected)\n         {\n             if verbose {\n-                err.span_suggestion_verbose(sp, msg, suggestion, applicability);\n+                err.multipart_suggestion_verbose(msg, suggestion, applicability);\n             } else {\n-                err.span_suggestion(sp, msg, suggestion, applicability);\n+                err.multipart_suggestion(msg, suggestion, applicability);\n             }\n             if annotation {\n                 let suggest_annotation = match expr.peel_drop_temps().kind {"}, {"sha": "211dd51289595a743586decc12e1868a13376625", "filename": "tests/ui/issues/issue-46756-consider-borrowing-cast-or-binexpr.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -2,33 +2,37 @@ error[E0308]: mismatched types\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:12:42\n    |\n LL |     light_flows_our_war_of_mocking_words(behold as usize);\n-   |     ------------------------------------ ^^^^^^^^^^^^^^^\n-   |     |                                    |\n-   |     |                                    expected `&usize`, found `usize`\n-   |     |                                    help: consider borrowing here: `&(behold as usize)`\n+   |     ------------------------------------ ^^^^^^^^^^^^^^^ expected `&usize`, found `usize`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:5:4\n    |\n LL | fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------\n+help: consider borrowing here\n+   |\n+LL |     light_flows_our_war_of_mocking_words(&(behold as usize));\n+   |                                          ++               +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:14:42\n    |\n LL |     light_flows_our_war_of_mocking_words(with_tears + 4);\n-   |     ------------------------------------ ^^^^^^^^^^^^^^\n-   |     |                                    |\n-   |     |                                    expected `&usize`, found `usize`\n-   |     |                                    help: consider borrowing here: `&(with_tears + 4)`\n+   |     ------------------------------------ ^^^^^^^^^^^^^^ expected `&usize`, found `usize`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:5:4\n    |\n LL | fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------\n+help: consider borrowing here\n+   |\n+LL |     light_flows_our_war_of_mocking_words(&(with_tears + 4));\n+   |                                          ++              +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db455fada3bd8a30adda84aef44e64147333d6b0", "filename": "tests/ui/range/issue-54505-no-std.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -29,30 +29,30 @@ fn main() {\n     take_range(0..1);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(0..1)\n+    //~| SUGGESTION &(\n \n     take_range(1..);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(1..)\n+    //~| SUGGESTION &(\n \n     take_range(..);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..)\n+    //~| SUGGESTION &(\n \n     take_range(0..=1);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(0..=1)\n+    //~| SUGGESTION &(\n \n     take_range(..5);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..5)\n+    //~| SUGGESTION &(\n \n     take_range(..=42);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..=42)\n+    //~| SUGGESTION &(\n }"}, {"sha": "13563d1940cb691d1759b929457fa2d541320667", "filename": "tests/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -14,10 +14,8 @@ error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:29:16\n    |\n LL |     take_range(0..1);\n-   |     ---------- ^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `Range<{integer}>`\n-   |     |          help: consider borrowing here: `&(0..1)`\n+   |     ---------- ^^^^ expected `&_`, found `Range<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -27,15 +25,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(0..1));\n+   |                ++    +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:34:16\n    |\n LL |     take_range(1..);\n-   |     ---------- ^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeFrom<{integer}>`\n-   |     |          help: consider borrowing here: `&(1..)`\n+   |     ---------- ^^^ expected `&_`, found `RangeFrom<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -45,15 +45,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(1..));\n+   |                ++   +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:39:16\n    |\n LL |     take_range(..);\n-   |     ---------- ^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeFull`\n-   |     |          help: consider borrowing here: `&(..)`\n+   |     ---------- ^^ expected `&_`, found `RangeFull`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -63,15 +65,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(..));\n+   |                ++  +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:44:16\n    |\n LL |     take_range(0..=1);\n-   |     ---------- ^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n-   |     |          help: consider borrowing here: `&(0..=1)`\n+   |     ---------- ^^^^^ expected `&_`, found `RangeInclusive<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -81,15 +85,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(0..=1));\n+   |                ++     +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:49:16\n    |\n LL |     take_range(..5);\n-   |     ---------- ^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeTo<{integer}>`\n-   |     |          help: consider borrowing here: `&(..5)`\n+   |     ---------- ^^^ expected `&_`, found `RangeTo<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -99,15 +105,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(..5));\n+   |                ++   +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505-no-std.rs:54:16\n    |\n LL |     take_range(..=42);\n-   |     ---------- ^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n-   |     |          help: consider borrowing here: `&(..=42)`\n+   |     ---------- ^^^^^ expected `&_`, found `RangeToInclusive<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -117,6 +125,10 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(..=42));\n+   |                ++     +\n \n error: aborting due to 8 previous errors\n "}, {"sha": "9d113ba1d35c2129f91ad1ed3d16939949639da4", "filename": "tests/ui/range/issue-54505.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505.fixed?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -14,30 +14,30 @@ fn main() {\n     take_range(&(0..1));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(0..1)\n+    //~| SUGGESTION &(\n \n     take_range(&(1..));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(1..)\n+    //~| SUGGESTION &(\n \n     take_range(&(..));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..)\n+    //~| SUGGESTION &(\n \n     take_range(&(0..=1));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(0..=1)\n+    //~| SUGGESTION &(\n \n     take_range(&(..5));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..5)\n+    //~| SUGGESTION &(\n \n     take_range(&(..=42));\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..=42)\n+    //~| SUGGESTION &(\n }"}, {"sha": "c9929988fe539f0657e7f1254436c01bc44b4976", "filename": "tests/ui/range/issue-54505.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505.rs?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -14,30 +14,30 @@ fn main() {\n     take_range(0..1);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(0..1)\n+    //~| SUGGESTION &(\n \n     take_range(1..);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(1..)\n+    //~| SUGGESTION &(\n \n     take_range(..);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..)\n+    //~| SUGGESTION &(\n \n     take_range(0..=1);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(0..=1)\n+    //~| SUGGESTION &(\n \n     take_range(..5);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..5)\n+    //~| SUGGESTION &(\n \n     take_range(..=42);\n     //~^ ERROR mismatched types [E0308]\n     //~| HELP consider borrowing here\n-    //~| SUGGESTION &(..=42)\n+    //~| SUGGESTION &(\n }"}, {"sha": "0e959fc05e279e935ee21848a9d13064a8a4f9da", "filename": "tests/ui/range/issue-54505.stderr", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505.stderr?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:14:16\n    |\n LL |     take_range(0..1);\n-   |     ---------- ^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `Range<{integer}>`\n-   |     |          help: consider borrowing here: `&(0..1)`\n+   |     ---------- ^^^^ expected `&_`, found `Range<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -15,15 +13,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(0..1));\n+   |                ++    +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:19:16\n    |\n LL |     take_range(1..);\n-   |     ---------- ^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeFrom<{integer}>`\n-   |     |          help: consider borrowing here: `&(1..)`\n+   |     ---------- ^^^ expected `&_`, found `RangeFrom<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -33,15 +33,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(1..));\n+   |                ++   +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:24:16\n    |\n LL |     take_range(..);\n-   |     ---------- ^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeFull`\n-   |     |          help: consider borrowing here: `&(..)`\n+   |     ---------- ^^ expected `&_`, found `RangeFull`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -51,15 +53,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(..));\n+   |                ++  +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:29:16\n    |\n LL |     take_range(0..=1);\n-   |     ---------- ^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n-   |     |          help: consider borrowing here: `&(0..=1)`\n+   |     ---------- ^^^^^ expected `&_`, found `RangeInclusive<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -69,15 +73,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(0..=1));\n+   |                ++     +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:34:16\n    |\n LL |     take_range(..5);\n-   |     ---------- ^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeTo<{integer}>`\n-   |     |          help: consider borrowing here: `&(..5)`\n+   |     ---------- ^^^ expected `&_`, found `RangeTo<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -87,15 +93,17 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(..5));\n+   |                ++   +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-54505.rs:39:16\n    |\n LL |     take_range(..=42);\n-   |     ---------- ^^^^^\n-   |     |          |\n-   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n-   |     |          help: consider borrowing here: `&(..=42)`\n+   |     ---------- ^^^^^ expected `&_`, found `RangeToInclusive<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&_`\n@@ -105,6 +113,10 @@ note: function defined here\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n+help: consider borrowing here\n+   |\n+LL |     take_range(&(..=42));\n+   |                ++     +\n \n error: aborting due to 6 previous errors\n "}, {"sha": "52efa241d0b12a4176f40c36636fb5a6cd8407c5", "filename": "tests/ui/range/issue-73553-misinterp-range-literal.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/issue-73553-misinterp-range-literal.rs:12:10\n    |\n LL |     demo(tell(1)..tell(10));\n-   |     ---- ^^^^^^^^^^^^^^^^^\n-   |     |    |\n-   |     |    expected `&Range<usize>`, found `Range<usize>`\n-   |     |    help: consider borrowing here: `&(tell(1)..tell(10))`\n+   |     ---- ^^^^^^^^^^^^^^^^^ expected `&Range<usize>`, found `Range<usize>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&std::ops::Range<usize>`\n@@ -15,15 +13,17 @@ note: function defined here\n    |\n LL | fn demo(r: &Range) {\n    |    ^^^^ ---------\n+help: consider borrowing here\n+   |\n+LL |     demo(&(tell(1)..tell(10)));\n+   |          ++                 +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-73553-misinterp-range-literal.rs:14:10\n    |\n LL |     demo(1..10);\n-   |     ---- ^^^^^\n-   |     |    |\n-   |     |    expected `&Range<usize>`, found `Range<{integer}>`\n-   |     |    help: consider borrowing here: `&(1..10)`\n+   |     ---- ^^^^^ expected `&Range<usize>`, found `Range<{integer}>`\n+   |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected reference `&std::ops::Range<usize>`\n@@ -33,6 +33,10 @@ note: function defined here\n    |\n LL | fn demo(r: &Range) {\n    |    ^^^^ ---------\n+help: consider borrowing here\n+   |\n+LL |     demo(&(1..10));\n+   |          ++     +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2147d2d92e389b05208a872a16b9f8ace5a2e1a3", "filename": "tests/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 56, "deletions": 32, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4731a25d2dbe84e711101f2cbb83b40fa96c7014/tests%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=4731a25d2dbe84e711101f2cbb83b40fa96c7014", "patch": "@@ -2,61 +2,73 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:7:29\n    |\n LL |     opt.map(|arg| takes_ref(arg));\n-   |         ---       --------- ^^^ expected `&Foo`, found `Foo`\n-   |         |         |\n-   |         |         arguments to this function are incorrect\n-   |         help: consider using `as_ref` instead: `as_ref().map`\n+   |                   --------- ^^^ expected `&Foo`, found `Foo`\n+   |                   |\n+   |                   arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/as-ref.rs:3:4\n    |\n LL | fn takes_ref(_: &Foo) {}\n    |    ^^^^^^^^^ -------\n+help: consider using `as_ref` instead\n+   |\n+LL |     opt.as_ref().map(|arg| takes_ref(arg));\n+   |         +++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:8:39\n    |\n LL |     opt.and_then(|arg| Some(takes_ref(arg)));\n-   |         --------            --------- ^^^ expected `&Foo`, found `Foo`\n-   |         |                   |\n-   |         |                   arguments to this function are incorrect\n-   |         help: consider using `as_ref` instead: `as_ref().and_then`\n+   |                             --------- ^^^ expected `&Foo`, found `Foo`\n+   |                             |\n+   |                             arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/as-ref.rs:3:4\n    |\n LL | fn takes_ref(_: &Foo) {}\n    |    ^^^^^^^^^ -------\n+help: consider using `as_ref` instead\n+   |\n+LL |     opt.as_ref().and_then(|arg| Some(takes_ref(arg)));\n+   |         +++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:10:29\n    |\n LL |     opt.map(|arg| takes_ref(arg));\n-   |         ---       --------- ^^^ expected `&Foo`, found `Foo`\n-   |         |         |\n-   |         |         arguments to this function are incorrect\n-   |         help: consider using `as_ref` instead: `as_ref().map`\n+   |                   --------- ^^^ expected `&Foo`, found `Foo`\n+   |                   |\n+   |                   arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/as-ref.rs:3:4\n    |\n LL | fn takes_ref(_: &Foo) {}\n    |    ^^^^^^^^^ -------\n+help: consider using `as_ref` instead\n+   |\n+LL |     opt.as_ref().map(|arg| takes_ref(arg));\n+   |         +++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:11:37\n    |\n LL |     opt.and_then(|arg| Ok(takes_ref(arg)));\n-   |         --------          --------- ^^^ expected `&Foo`, found `Foo`\n-   |         |                 |\n-   |         |                 arguments to this function are incorrect\n-   |         help: consider using `as_ref` instead: `as_ref().and_then`\n+   |                           --------- ^^^ expected `&Foo`, found `Foo`\n+   |                           |\n+   |                           arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/as-ref.rs:3:4\n    |\n LL | fn takes_ref(_: &Foo) {}\n    |    ^^^^^^^^^ -------\n+help: consider using `as_ref` instead\n+   |\n+LL |     opt.as_ref().and_then(|arg| Ok(takes_ref(arg)));\n+   |         +++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:13:29\n@@ -101,61 +113,73 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:22:42\n    |\n LL |     multiple_ref_opt.map(|arg| takes_ref(arg));\n-   |                      ---       --------- ^^^ expected `&Foo`, found `Foo`\n-   |                      |         |\n-   |                      |         arguments to this function are incorrect\n-   |                      help: consider using `as_ref` instead: `as_ref().map`\n+   |                                --------- ^^^ expected `&Foo`, found `Foo`\n+   |                                |\n+   |                                arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/as-ref.rs:3:4\n    |\n LL | fn takes_ref(_: &Foo) {}\n    |    ^^^^^^^^^ -------\n+help: consider using `as_ref` instead\n+   |\n+LL |     multiple_ref_opt.as_ref().map(|arg| takes_ref(arg));\n+   |                      +++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:23:52\n    |\n LL |     multiple_ref_opt.and_then(|arg| Some(takes_ref(arg)));\n-   |                      --------            --------- ^^^ expected `&Foo`, found `Foo`\n-   |                      |                   |\n-   |                      |                   arguments to this function are incorrect\n-   |                      help: consider using `as_ref` instead: `as_ref().and_then`\n+   |                                          --------- ^^^ expected `&Foo`, found `Foo`\n+   |                                          |\n+   |                                          arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/as-ref.rs:3:4\n    |\n LL | fn takes_ref(_: &Foo) {}\n    |    ^^^^^^^^^ -------\n+help: consider using `as_ref` instead\n+   |\n+LL |     multiple_ref_opt.as_ref().and_then(|arg| Some(takes_ref(arg)));\n+   |                      +++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:25:45\n    |\n LL |     multiple_ref_result.map(|arg| takes_ref(arg));\n-   |                         ---       --------- ^^^ expected `&Foo`, found `Foo`\n-   |                         |         |\n-   |                         |         arguments to this function are incorrect\n-   |                         help: consider using `as_ref` instead: `as_ref().map`\n+   |                                   --------- ^^^ expected `&Foo`, found `Foo`\n+   |                                   |\n+   |                                   arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/as-ref.rs:3:4\n    |\n LL | fn takes_ref(_: &Foo) {}\n    |    ^^^^^^^^^ -------\n+help: consider using `as_ref` instead\n+   |\n+LL |     multiple_ref_result.as_ref().map(|arg| takes_ref(arg));\n+   |                         +++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:26:53\n    |\n LL |     multiple_ref_result.and_then(|arg| Ok(takes_ref(arg)));\n-   |                         --------          --------- ^^^ expected `&Foo`, found `Foo`\n-   |                         |                 |\n-   |                         |                 arguments to this function are incorrect\n-   |                         help: consider using `as_ref` instead: `as_ref().and_then`\n+   |                                           --------- ^^^ expected `&Foo`, found `Foo`\n+   |                                           |\n+   |                                           arguments to this function are incorrect\n    |\n note: function defined here\n   --> $DIR/as-ref.rs:3:4\n    |\n LL | fn takes_ref(_: &Foo) {}\n    |    ^^^^^^^^^ -------\n+help: consider using `as_ref` instead\n+   |\n+LL |     multiple_ref_result.as_ref().and_then(|arg| Ok(takes_ref(arg)));\n+   |                         +++++++++\n \n error: aborting due to 11 previous errors\n "}]}