{"sha": "d134385823525255546deaa930af2d5b1eada0df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzQzODU4MjM1MjUyNTU1NDZkZWFhOTMwYWYyZDViMWVhZGEwZGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-24T09:06:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-24T17:25:32Z"}, "message": "syntax: Remove `Nt(Impl,Trait,Foreign)Item`", "tree": {"sha": "a3620ec494203476839f0b256206695654c971b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3620ec494203476839f0b256206695654c971b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d134385823525255546deaa930af2d5b1eada0df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d134385823525255546deaa930af2d5b1eada0df", "html_url": "https://github.com/rust-lang/rust/commit/d134385823525255546deaa930af2d5b1eada0df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d134385823525255546deaa930af2d5b1eada0df/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a328a0ade570608717b0df654306a5268c9f46", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a328a0ade570608717b0df654306a5268c9f46", "html_url": "https://github.com/rust-lang/rust/commit/d9a328a0ade570608717b0df654306a5268c9f46"}], "stats": {"total": 92, "additions": 45, "deletions": 47}, "files": [{"sha": "802d5cfbfc442c6bb3c7c827316648f7bf1f6691", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d134385823525255546deaa930af2d5b1eada0df/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134385823525255546deaa930af2d5b1eada0df/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=d134385823525255546deaa930af2d5b1eada0df", "patch": "@@ -319,10 +319,7 @@ pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n         token::NtLifetime(e) => e.to_string(),\n         token::NtLiteral(ref e) => expr_to_string(e),\n         token::NtTT(ref tree) => tt_to_string(tree.clone()),\n-        // FIXME(Centril): merge these variants.\n-        token::NtImplItem(ref e) | token::NtTraitItem(ref e) => assoc_item_to_string(e),\n         token::NtVis(ref e) => vis_to_string(e),\n-        token::NtForeignItem(ref e) => foreign_item_to_string(e),\n     }\n }\n \n@@ -358,10 +355,6 @@ pub fn item_to_string(i: &ast::Item) -> String {\n     to_string(|s| s.print_item(i))\n }\n \n-fn assoc_item_to_string(i: &ast::AssocItem) -> String {\n-    to_string(|s| s.print_assoc_item(i))\n-}\n-\n pub fn generic_params_to_string(generic_params: &[ast::GenericParam]) -> String {\n     to_string(|s| s.print_generic_params(generic_params))\n }\n@@ -404,10 +397,6 @@ pub fn param_to_string(arg: &ast::Param) -> String {\n     to_string(|s| s.print_param(arg, false))\n }\n \n-fn foreign_item_to_string(arg: &ast::ForeignItem) -> String {\n-    to_string(|s| s.print_foreign_item(arg))\n-}\n-\n fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n     format!(\"{}{}\", to_string(|s| s.print_visibility(vis)), s)\n }"}, {"sha": "8ed7bbf6e1276eb78dc26df6453c4935cbf075e8", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d134385823525255546deaa930af2d5b1eada0df/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134385823525255546deaa930af2d5b1eada0df/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=d134385823525255546deaa930af2d5b1eada0df", "patch": "@@ -669,12 +669,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 SyntaxExtensionKind::Attr(expander) => {\n                     self.gate_proc_macro_input(&item);\n                     self.gate_proc_macro_attr_item(span, &item);\n+                    // `Annotatable` can be converted into tokens directly, but we are packing it\n+                    // into a nonterminal as a piece of AST to make the produced token stream\n+                    // look nicer in pretty-printed form. This may be no longer necessary.\n                     let item_tok = TokenTree::token(\n                         token::Interpolated(Lrc::new(match item {\n                             Annotatable::Item(item) => token::NtItem(item),\n-                            Annotatable::TraitItem(item) => token::NtTraitItem(item),\n-                            Annotatable::ImplItem(item) => token::NtImplItem(item),\n-                            Annotatable::ForeignItem(item) => token::NtForeignItem(item),\n+                            Annotatable::TraitItem(item)\n+                            | Annotatable::ImplItem(item)\n+                            | Annotatable::ForeignItem(item) => {\n+                                token::NtItem(P(item.and_then(ast::AssocItem::into_item)))\n+                            }\n                             Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n                             Annotatable::Expr(expr) => token::NtExpr(expr),\n                             Annotatable::Arm(..)"}, {"sha": "bd0b189d4fd4d41e7347acb8c0641a445ee3bdc8", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d134385823525255546deaa930af2d5b1eada0df/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134385823525255546deaa930af2d5b1eada0df/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=d134385823525255546deaa930af2d5b1eada0df", "patch": "@@ -314,9 +314,6 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n         Nonterminal::NtItem(ref item) => {\n             prepend_attrs(sess, &item.attrs, item.tokens.as_ref(), span)\n         }\n-        Nonterminal::NtTraitItem(ref item) | Nonterminal::NtImplItem(ref item) => {\n-            prepend_attrs(sess, &item.attrs, item.tokens.as_ref(), span)\n-        }\n         Nonterminal::NtIdent(ident, is_raw) => {\n             Some(tokenstream::TokenTree::token(token::Ident(ident.name, is_raw), ident.span).into())\n         }"}, {"sha": "d9e28716c84c7fdc57dc76ddda28e8745f3acf89", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d134385823525255546deaa930af2d5b1eada0df/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134385823525255546deaa930af2d5b1eada0df/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=d134385823525255546deaa930af2d5b1eada0df", "patch": "@@ -632,16 +632,10 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn parse_impl_item(&mut self) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        maybe_whole!(self, NtImplItem, |x| Some(Some(x)));\n         self.parse_assoc_item(|_| true)\n     }\n \n     pub fn parse_trait_item(&mut self) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n-        maybe_whole!(self, NtTraitItem, |x| Some(Some(x)));\n-        // This is somewhat dubious; We don't want to allow\n-        // param names to be left off if there is a definition...\n-        //\n-        // We don't allow param names to be left off in edition 2018.\n         self.parse_assoc_item(|t| t.span.rust_2018())\n     }\n \n@@ -834,8 +828,6 @@ impl<'a> Parser<'a> {\n \n     /// Parses a foreign item (one in an `extern { ... }` block).\n     pub fn parse_foreign_item(&mut self) -> PResult<'a, Option<Option<P<ForeignItem>>>> {\n-        maybe_whole!(self, NtForeignItem, |item| Some(Some(item)));\n-\n         Ok(self.parse_item_(|_| true)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n             let kind = match kind {\n                 ItemKind::Mac(a) => ForeignItemKind::Macro(a),"}, {"sha": "62ff4f5183a70a8ebf12c7328a3077b97d5064a4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d134385823525255546deaa930af2d5b1eada0df/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134385823525255546deaa930af2d5b1eada0df/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d134385823525255546deaa930af2d5b1eada0df", "patch": "@@ -2441,6 +2441,13 @@ impl Item {\n     }\n }\n \n+impl<K: IntoItemKind> Item<K> {\n+    pub fn into_item(self) -> Item {\n+        let Item { attrs, id, span, vis, ident, kind, tokens } = self;\n+        Item { attrs, id, span, vis, ident, kind: kind.into_item_kind(), tokens }\n+    }\n+}\n+\n /// `extern` qualifier on a function item or function type.\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub enum Extern {\n@@ -2617,6 +2624,10 @@ impl ItemKind {\n     }\n }\n \n+pub trait IntoItemKind {\n+    fn into_item_kind(self) -> ItemKind;\n+}\n+\n // FIXME(Centril): These definitions should be unmerged;\n // see https://github.com/rust-lang/rust/pull/69194#discussion_r379899975\n pub type ForeignItem = Item<AssocItemKind>;\n@@ -2656,3 +2667,15 @@ impl AssocItemKind {\n         }\n     }\n }\n+\n+impl IntoItemKind for AssocItemKind {\n+    fn into_item_kind(self) -> ItemKind {\n+        match self {\n+            AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n+            AssocItemKind::Static(a, b, c) => ItemKind::Static(a, b, c),\n+            AssocItemKind::Fn(a, b, c, d) => ItemKind::Fn(a, b, c, d),\n+            AssocItemKind::TyAlias(a, b, c, d) => ItemKind::TyAlias(a, b, c, d),\n+            AssocItemKind::Macro(a) => ItemKind::Mac(a),\n+        }\n+    }\n+}"}, {"sha": "b3abd4fc755e46b721b1a4d376650008b6079f89", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d134385823525255546deaa930af2d5b1eada0df/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134385823525255546deaa930af2d5b1eada0df/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=d134385823525255546deaa930af2d5b1eada0df", "patch": "@@ -711,20 +711,7 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n         }\n         token::NtPath(path) => vis.visit_path(path),\n         token::NtTT(tt) => vis.visit_tt(tt),\n-        token::NtImplItem(item) => visit_clobber(item, |item| {\n-            // See reasoning above.\n-            vis.flat_map_impl_item(item).expect_one(\"expected visitor to produce exactly one item\")\n-        }),\n-        token::NtTraitItem(item) => visit_clobber(item, |item| {\n-            // See reasoning above.\n-            vis.flat_map_trait_item(item).expect_one(\"expected visitor to produce exactly one item\")\n-        }),\n         token::NtVis(visib) => vis.visit_vis(visib),\n-        token::NtForeignItem(item) => visit_clobber(item, |item| {\n-            // See reasoning above.\n-            vis.flat_map_foreign_item(item)\n-                .expect_one(\"expected visitor to produce exactly one item\")\n-        }),\n     }\n }\n "}, {"sha": "52bf50604fb307e3bc8083997b08635a6bf36c58", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d134385823525255546deaa930af2d5b1eada0df/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134385823525255546deaa930af2d5b1eada0df/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=d134385823525255546deaa930af2d5b1eada0df", "patch": "@@ -712,12 +712,6 @@ pub enum Nonterminal {\n     NtPath(ast::Path),\n     NtVis(ast::Visibility),\n     NtTT(TokenTree),\n-    // Used only for passing items to proc macro attributes (they are not\n-    // strictly necessary for that, `Annotatable` can be converted into\n-    // tokens directly, but doing that naively regresses pretty-printing).\n-    NtTraitItem(P<ast::AssocItem>),\n-    NtImplItem(P<ast::AssocItem>),\n-    NtForeignItem(P<ast::ForeignItem>),\n }\n \n // `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -755,9 +749,6 @@ impl fmt::Debug for Nonterminal {\n             NtMeta(..) => f.pad(\"NtMeta(..)\"),\n             NtPath(..) => f.pad(\"NtPath(..)\"),\n             NtTT(..) => f.pad(\"NtTT(..)\"),\n-            NtImplItem(..) => f.pad(\"NtImplItem(..)\"),\n-            NtTraitItem(..) => f.pad(\"NtTraitItem(..)\"),\n-            NtForeignItem(..) => f.pad(\"NtForeignItem(..)\"),\n             NtVis(..) => f.pad(\"NtVis(..)\"),\n             NtLifetime(..) => f.pad(\"NtLifetime(..)\"),\n         }"}, {"sha": "3a448d4b2201d892920e1658382268d5c900d188", "filename": "src/test/ui/proc-macro/trait-fn-args-2015.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d134385823525255546deaa930af2d5b1eada0df/src%2Ftest%2Fui%2Fproc-macro%2Ftrait-fn-args-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d134385823525255546deaa930af2d5b1eada0df/src%2Ftest%2Fui%2Fproc-macro%2Ftrait-fn-args-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Ftrait-fn-args-2015.rs?ref=d134385823525255546deaa930af2d5b1eada0df", "patch": "@@ -0,0 +1,14 @@\n+// Unnamed arguments in trait functions can be passed through proc macros on 2015 edition.\n+\n+// check-pass\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+trait Tr {\n+    #[identity_attr]\n+    fn method(u8);\n+}\n+\n+fn main() {}"}]}