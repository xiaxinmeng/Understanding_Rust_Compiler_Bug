{"sha": "abf62d8011cb8a4c66f6f9b4fd156d04fcfeb8f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZjYyZDgwMTFjYjhhNGM2NmY2ZjliNGZkMTU2ZDA0ZmNmZWI4ZjI=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-13T06:27:37Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-13T06:27:37Z"}, "message": "literal representation restructure 6\n\nAdd `group_digits` helper function.", "tree": {"sha": "49f80ffefec8bffab407744391a7327bc15c9050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f80ffefec8bffab407744391a7327bc15c9050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abf62d8011cb8a4c66f6f9b4fd156d04fcfeb8f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abf62d8011cb8a4c66f6f9b4fd156d04fcfeb8f2", "html_url": "https://github.com/rust-lang/rust/commit/abf62d8011cb8a4c66f6f9b4fd156d04fcfeb8f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abf62d8011cb8a4c66f6f9b4fd156d04fcfeb8f2/comments", "author": null, "committer": null, "parents": [{"sha": "ec664e84bfe67e0835ec0bb04e63a1210007b598", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec664e84bfe67e0835ec0bb04e63a1210007b598", "html_url": "https://github.com/rust-lang/rust/commit/ec664e84bfe67e0835ec0bb04e63a1210007b598"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "bc23255da0989c0c02bd47b5565f0d4198f0da52", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 35, "deletions": 40, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/abf62d8011cb8a4c66f6f9b4fd156d04fcfeb8f2/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf62d8011cb8a4c66f6f9b4fd156d04fcfeb8f2/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=abf62d8011cb8a4c66f6f9b4fd156d04fcfeb8f2", "patch": "@@ -233,53 +233,16 @@ impl<'a> DigitInfo<'a> {\n \n         let (integer, fraction, exponent) = &self.split_digit_parts();\n \n-        let int_digits: Vec<_> = integer.chars().rev().filter(|&c| c != '_').collect();\n-        let int_part_hint = int_digits\n-            .chunks(group_size)\n-            .map(|chunk| chunk.iter().rev().collect())\n-            .rev()\n-            .collect::<Vec<String>>()\n-            .join(\"_\");\n-\n-        // Pad leading hexidecimal group with zeros\n-        if self.radix == Radix::Hexadecimal {\n-            debug_assert!(group_size > 0);\n-            let first_group_size = (int_digits.len() + group_size - 1) % group_size + 1;\n-            for _ in 0..group_size - first_group_size {\n-                output.push('0');\n-            }\n-        }\n-\n-        output.push_str(&int_part_hint);\n+        Self::group_digits(&mut output, integer, group_size, true, self.radix == Radix::Hexadecimal);\n \n         if let Some(fraction) = fraction {\n-            let frac_part_hint = fraction\n-                .chars()\n-                .filter(|&c| c != '_')\n-                .collect::<Vec<_>>()\n-                .chunks(group_size)\n-                .map(|chunk| chunk.iter().collect())\n-                .collect::<Vec<String>>()\n-                .join(\"_\");\n-\n             output.push('.');\n-            output.push_str(&frac_part_hint);\n+            Self::group_digits(&mut output, fraction, group_size, false, false);\n         }\n \n         if let Some((separator, exponent)) = exponent {\n-            let after_e_hint = exponent\n-                .chars()\n-                .rev()\n-                .filter(|&c| c != '_')\n-                .collect::<Vec<_>>()\n-                .chunks(group_size)\n-                .map(|chunk| chunk.iter().rev().collect())\n-                .rev()\n-                .collect::<Vec<String>>()\n-                .join(\"_\");\n-\n             output.push(*separator);\n-            output.push_str(&after_e_hint);\n+            Self::group_digits(&mut output, exponent, group_size, true, false);\n         }\n \n         if let Some(suffix) = self.suffix {\n@@ -296,6 +259,38 @@ impl<'a> DigitInfo<'a> {\n \n         output\n     }\n+\n+    fn group_digits(output: &mut String, input: &str, group_size: usize, partial_group_first: bool, pad: bool) {\n+        debug_assert!(group_size > 0);\n+\n+        let mut digits = input.chars().filter(|&c| c != '_');\n+\n+        let first_group_size;\n+\n+        if partial_group_first {\n+            first_group_size = (digits.clone().count() + group_size - 1) % group_size + 1;\n+            if pad {\n+                for _ in 0..group_size - first_group_size {\n+                    output.push('0');\n+                }\n+            }\n+        } else {\n+            first_group_size = group_size;\n+        }\n+\n+        for _ in 0..first_group_size {\n+            if let Some(digit) = digits.next() {\n+                output.push(digit);\n+            }\n+        }\n+\n+        for (c, i) in digits.zip((0..group_size).cycle()) {\n+            if i == 0 {\n+                output.push('_');\n+            }\n+            output.push(c);\n+        }\n+    }\n }\n \n enum WarningType {"}]}