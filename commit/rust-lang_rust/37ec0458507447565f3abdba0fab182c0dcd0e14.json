{"sha": "37ec0458507447565f3abdba0fab182c0dcd0e14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZWMwNDU4NTA3NDQ3NTY1ZjNhYmRiYTBmYWIxODJjMGRjZDBlMTQ=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-19T22:45:29Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-20T18:07:05Z"}, "message": "BTreeMap: extra testing unveiling mistakes in future PR", "tree": {"sha": "c4c51347e9598f1458c2ae50da9d9ceb7ab88b0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c51347e9598f1458c2ae50da9d9ceb7ab88b0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ec0458507447565f3abdba0fab182c0dcd0e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ec0458507447565f3abdba0fab182c0dcd0e14", "html_url": "https://github.com/rust-lang/rust/commit/37ec0458507447565f3abdba0fab182c0dcd0e14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ec0458507447565f3abdba0fab182c0dcd0e14/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e02708f1f4760244756548981277d5199baa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/81e02708f1f4760244756548981277d5199baa9a", "html_url": "https://github.com/rust-lang/rust/commit/81e02708f1f4760244756548981277d5199baa9a"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "8018514fa1776dd6875770df96178bcab4cbc25e", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37ec0458507447565f3abdba0fab182c0dcd0e14/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ec0458507447565f3abdba0fab182c0dcd0e14/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=37ec0458507447565f3abdba0fab182c0dcd0e14", "patch": "@@ -88,6 +88,11 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n                     let min_len = if is_root { 1 } else { node::MIN_LEN };\n                     assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n \n+                    for idx in 0..=node.len() {\n+                        let edge = unsafe { node::Handle::new_edge(node, idx) };\n+                        assert!(edge.descend().ascend().ok().unwrap() == edge);\n+                    }\n+\n                     internal_length += node.len();\n                 }\n                 Position::InternalKV(kv) => {\n@@ -1846,3 +1851,17 @@ fn test_into_values() {\n     assert!(values.contains(&'b'));\n     assert!(values.contains(&'c'));\n }\n+\n+#[test]\n+fn test_insert_remove_intertwined() {\n+    let loops = if cfg!(miri) { 100 } else { 1_000_000 };\n+    let mut map = BTreeMap::new();\n+    let mut i = 1;\n+    for _ in 0..loops {\n+        i = (i + 421) & 0xFF;\n+        map.insert(i, i);\n+        map.remove(&(0xFF - i));\n+    }\n+\n+    map.check();\n+}"}, {"sha": "f1d66e973cb52dd53b0ae343999e8bf3d627ef95", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37ec0458507447565f3abdba0fab182c0dcd0e14/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ec0458507447565f3abdba0fab182c0dcd0e14/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=37ec0458507447565f3abdba0fab182c0dcd0e14", "patch": "@@ -613,8 +613,8 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n-    /// Adds a key/value pair and an edge to go to the right of that pair to\n-    /// the end of the node.\n+    /// Adds a key/value pair, and an edge to go to the right of that pair,\n+    /// to the end of the node.\n     pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n \n@@ -630,8 +630,8 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n         }\n     }\n \n-    /// Adds a key/value pair and an edge to go to the left of that pair to\n-    /// the beginning of the node.\n+    /// Adds a key/value pair, and an edge to go to the left of that pair,\n+    /// to the beginning of the node.\n     pub fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n         assert!(self.len() < CAPACITY);\n@@ -1152,7 +1152,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     ///\n     /// - The node is truncated to only contain the key/value pairs to the right of\n     ///   this handle.\n-    /// - The key and value pointed to by this handle and extracted.\n+    /// - The key and value pointed to by this handle are extracted.\n     /// - All the key/value pairs to the right of this handle are put into a newly\n     ///   allocated node.\n     pub fn split(mut self) -> (NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, K, V, Root<K, V>) {\n@@ -1196,7 +1196,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n     ///\n     /// - The node is truncated to only contain the edges and key/value pairs to the\n     ///   right of this handle.\n-    /// - The key and value pointed to by this handle and extracted.\n+    /// - The key and value pointed to by this handle are extracted.\n     /// - All the edges and key/value pairs to the right of this handle are put into\n     ///   a newly allocated node.\n     pub fn split(mut self) -> (NodeRef<marker::Mut<'a>, K, V, marker::Internal>, K, V, Root<K, V>) {"}]}