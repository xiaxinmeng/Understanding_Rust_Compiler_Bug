{"sha": "71543836ab6c27c5a9368855053b36f40d3ed033", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNTQzODM2YWI2YzI3YzVhOTM2ODg1NTA1M2IzNmY0MGQzZWQwMzM=", "commit": {"author": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-06-20T16:02:44Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-06-20T16:02:44Z"}, "message": "NLL: Walk the MIR only once for the \"unused mut\" lint", "tree": {"sha": "57dab5758b5f73845a15ebbb8dd3722c000f0c32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57dab5758b5f73845a15ebbb8dd3722c000f0c32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71543836ab6c27c5a9368855053b36f40d3ed033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71543836ab6c27c5a9368855053b36f40d3ed033", "html_url": "https://github.com/rust-lang/rust/commit/71543836ab6c27c5a9368855053b36f40d3ed033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71543836ab6c27c5a9368855053b36f40d3ed033/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d313eaeb6589c6236719a3130337676b550bada", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d313eaeb6589c6236719a3130337676b550bada", "html_url": "https://github.com/rust-lang/rust/commit/7d313eaeb6589c6236719a3130337676b550bada"}], "stats": {"total": 91, "additions": 77, "deletions": 14}, "files": [{"sha": "115f36c149b64907ce33fa3974f5c9088803efbf", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71543836ab6c27c5a9368855053b36f40d3ed033/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71543836ab6c27c5a9368855053b36f40d3ed033/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=71543836ab6c27c5a9368855053b36f40d3ed033", "patch": "@@ -61,6 +61,7 @@ mod location;\n crate mod place_ext;\n mod prefixes;\n mod path_utils;\n+mod used_muts;\n \n pub(crate) mod nll;\n \n@@ -281,20 +282,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             .filter(|&local| !mbcx.mir.local_decls[*local].is_user_variable.is_some())\n             .cloned()\n             .collect();\n-\n-    for local in temporary_used_locals {\n-        for location in mbcx.mir.find_assignments(local) {\n-            for moi in &mbcx.move_data.loc_map[location] {\n-                let mpi = &mbcx.move_data.moves[*moi].path;\n-                let path = &mbcx.move_data.move_paths[*mpi];\n-                debug!(\"assignment of {:?} to {:?}, adding {:?} to used mutable set\",\n-                       path.place, local, path.place);\n-                if let Place::Local(user_local) = path.place {\n-                    mbcx.used_mut.insert(user_local);\n-                }\n-            }\n-        }\n-    }\n+    mbcx.gather_used_muts(temporary_used_locals);\n \n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n "}, {"sha": "0a6258c00110aa16ef28c732a60c96842dee18d3", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/71543836ab6c27c5a9368855053b36f40d3ed033/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71543836ab6c27c5a9368855053b36f40d3ed033/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=71543836ab6c27c5a9368855053b36f40d3ed033", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::mir::visit::{PlaceContext, Visitor};\n+use rustc::mir::{Local, Location, Place};\n+\n+use rustc_data_structures::fx::FxHashSet;\n+\n+use borrow_check::MirBorrowckCtxt;\n+\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n+    /// Walks the MIR looking for assignments to a set of locals, as part of the unused mutable\n+    /// local variables lint, to update the context's `used_mut` in a single walk.\n+    crate fn gather_used_muts(&mut self, locals: FxHashSet<Local>) {\n+        let mut visitor = GatherUsedMutsVisitor {\n+            needles: locals,\n+            mbcx: self,\n+        };\n+        visitor.visit_mir(visitor.mbcx.mir);\n+    }\n+}\n+\n+/// MIR visitor gathering the assignments to a set of locals, in a single walk.\n+/// 'visit = the duration of the MIR walk\n+struct GatherUsedMutsVisitor<'visit, 'cx: 'visit, 'gcx: 'tcx, 'tcx: 'cx> {\n+    needles: FxHashSet<Local>,\n+    mbcx: &'visit mut MirBorrowckCtxt<'cx, 'gcx, 'tcx>,\n+}\n+\n+impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'gcx, 'tcx> {\n+    fn visit_local(\n+        &mut self,\n+        local: &Local,\n+        place_context: PlaceContext<'tcx>,\n+        location: Location,\n+    ) {\n+        if !self.needles.contains(local) {\n+            return;\n+        }\n+\n+        match place_context {\n+            PlaceContext::Store | PlaceContext::Call => {\n+                // Propagate the Local assigned at this Location as a used mutable local variable\n+                for moi in &self.mbcx.move_data.loc_map[location] {\n+                    let mpi = &self.mbcx.move_data.moves[*moi].path;\n+                    let path = &self.mbcx.move_data.move_paths[*mpi];\n+                    debug!(\n+                        \"assignment of {:?} to {:?}, adding {:?} to used mutable set\",\n+                        path.place, local, path.place\n+                    );\n+                    if let Place::Local(user_local) = path.place {\n+                        self.mbcx.used_mut.insert(user_local);\n+                    }\n+                }\n+            }\n+            PlaceContext::AsmOutput\n+            | PlaceContext::Drop\n+            | PlaceContext::Inspect\n+            | PlaceContext::Borrow { .. }\n+            | PlaceContext::Projection(..)\n+            | PlaceContext::Copy\n+            | PlaceContext::Move\n+            | PlaceContext::StorageLive\n+            | PlaceContext::StorageDead\n+            | PlaceContext::Validate => {}\n+        }\n+    }\n+}"}]}