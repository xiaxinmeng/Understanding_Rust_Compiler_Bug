{"sha": "5f4351fbb6cf07582974e37845f4d30b81399b0a", "node_id": "C_kwDOAAsO6NoAKDVmNDM1MWZiYjZjZjA3NTgyOTc0ZTM3ODQ1ZjRkMzBiODEzOTliMGE", "commit": {"author": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2022-05-04T15:41:29Z"}, "committer": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2022-05-04T15:41:29Z"}, "message": "fix: doc url link type", "tree": {"sha": "059e0de62fcb946ef13ef0fb8239dfff46340e55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/059e0de62fcb946ef13ef0fb8239dfff46340e55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f4351fbb6cf07582974e37845f4d30b81399b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4351fbb6cf07582974e37845f4d30b81399b0a", "html_url": "https://github.com/rust-lang/rust/commit/5f4351fbb6cf07582974e37845f4d30b81399b0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f4351fbb6cf07582974e37845f4d30b81399b0a/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee4e6a22d79f58b6b459dbc874d6b90a4495d83", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee4e6a22d79f58b6b459dbc874d6b90a4495d83", "html_url": "https://github.com/rust-lang/rust/commit/0ee4e6a22d79f58b6b459dbc874d6b90a4495d83"}], "stats": {"total": 115, "additions": 82, "deletions": 33}, "files": [{"sha": "f92de2d42d15b41430a64c12213f182731fcb47a", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5f4351fbb6cf07582974e37845f4d30b81399b0a/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4351fbb6cf07582974e37845f4d30b81399b0a/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=5f4351fbb6cf07582974e37845f4d30b81399b0a", "patch": "@@ -853,6 +853,23 @@ impl<'attr> AttrQuery<'attr> {\n             .iter()\n             .filter(move |attr| attr.path.as_ident().map_or(false, |s| s.to_smol_str() == key))\n     }\n+\n+    pub fn find_string_value_in_tt(self, key: &'attr str) -> Option<&SmolStr> {\n+        if !self.exists() {\n+            return None;\n+        }\n+\n+        self.tt_values().find_map(|tt| {\n+            let name = tt.token_trees.iter()\n+                .skip_while(|tt| !matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident { text, ..} )) if text == key))\n+                .nth(2);\n+\n+            match name {\n+                Some(tt::TokenTree::Leaf(tt::Leaf::Literal(tt::Literal{ref text, ..}))) => Some(text),\n+                _ => None\n+            }\n+        })\n+    }\n }\n \n fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase) -> RawAttrs {"}, {"sha": "54a04f0ba21872bc28b99df9a560414f97fe4d29", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f4351fbb6cf07582974e37845f4d30b81399b0a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4351fbb6cf07582974e37845f4d30b81399b0a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5f4351fbb6cf07582974e37845f4d30b81399b0a", "patch": "@@ -75,7 +75,6 @@ use syntax::{\n     ast::{self, HasAttrs as _, HasDocComments, HasName},\n     AstNode, AstPtr, SmolStr, SyntaxNodePtr, T,\n };\n-use tt::{Ident, Leaf, Literal, TokenTree};\n \n use crate::db::{DefDatabase, HirDatabase};\n \n@@ -230,23 +229,7 @@ impl Crate {\n     pub fn get_html_root_url(self: &Crate, db: &dyn HirDatabase) -> Option<String> {\n         // Look for #![doc(html_root_url = \"...\")]\n         let attrs = db.attrs(AttrDefId::ModuleId(self.root_module(db).into()));\n-        let doc_attr_q = attrs.by_key(\"doc\");\n-\n-        if !doc_attr_q.exists() {\n-            return None;\n-        }\n-\n-        let doc_url = doc_attr_q.tt_values().filter_map(|tt| {\n-            let name = tt.token_trees.iter()\n-                .skip_while(|tt| !matches!(tt, TokenTree::Leaf(Leaf::Ident(Ident { text, ..} )) if text == \"html_root_url\"))\n-                .nth(2);\n-\n-            match name {\n-                Some(TokenTree::Leaf(Leaf::Literal(Literal{ref text, ..}))) => Some(text),\n-                _ => None\n-            }\n-        }).next();\n-\n+        let doc_url = attrs.by_key(\"doc\").find_string_value_in_tt(\"html_root_url\");\n         doc_url.map(|s| s.trim_matches('\"').trim_end_matches('/').to_owned() + \"/\")\n     }\n "}, {"sha": "2b788fb6cf9d384860f44d561348f683d2632501", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5f4351fbb6cf07582974e37845f4d30b81399b0a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4351fbb6cf07582974e37845f4d30b81399b0a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=5f4351fbb6cf07582974e37845f4d30b81399b0a", "patch": "@@ -45,19 +45,19 @@ pub(crate) fn rewrite_links(db: &RootDatabase, markdown: &str, definition: Defin\n         // and valid URLs so we choose to be too eager to try to resolve what might be\n         // a URL.\n         if target.contains(\"://\") {\n-            (target.to_string(), title.to_string())\n+            (Some(LinkType::Inline), target.to_string(), title.to_string())\n         } else {\n             // Two possibilities:\n             // * path-based links: `../../module/struct.MyStruct.html`\n             // * module-based links (AKA intra-doc links): `super::super::module::MyStruct`\n-            if let Some(rewritten) = rewrite_intra_doc_link(db, definition, target, title) {\n-                return rewritten;\n+            if let Some((target, title)) = rewrite_intra_doc_link(db, definition, target, title) {\n+                return (None, target, title);\n             }\n             if let Some(target) = rewrite_url_link(db, definition, target) {\n-                return (target, title.to_string());\n+                return (Some(LinkType::Inline), target, title.to_string());\n             }\n \n-            (target.to_string(), title.to_string())\n+            (None, target.to_string(), title.to_string())\n         }\n     });\n     let mut out = String::new();\n@@ -368,33 +368,42 @@ fn mod_path_of_def(db: &RootDatabase, def: Definition) -> Option<String> {\n /// Rewrites a markdown document, applying 'callback' to each link.\n fn map_links<'e>(\n     events: impl Iterator<Item = Event<'e>>,\n-    callback: impl Fn(&str, &str) -> (String, String),\n+    callback: impl Fn(&str, &str) -> (Option<LinkType>, String, String),\n ) -> impl Iterator<Item = Event<'e>> {\n     let mut in_link = false;\n-    let mut link_target: Option<CowStr> = None;\n+    // holds the origin link target on start event and the rewritten one on end event\n+    let mut end_link_target: Option<CowStr> = None;\n+    // normally link's type is determined by the type of link tag in the end event,\n+    // however in same cases we want to change the link type.\n+    // For example, Shortcut type doesn't make sense for url links\n+    let mut end_link_type: Option<LinkType> = None;\n \n     events.map(move |evt| match evt {\n         Event::Start(Tag::Link(_, ref target, _)) => {\n             in_link = true;\n-            link_target = Some(target.clone());\n+            end_link_target = Some(target.clone());\n             evt\n         }\n         Event::End(Tag::Link(link_type, target, _)) => {\n             in_link = false;\n             Event::End(Tag::Link(\n-                link_type,\n-                link_target.take().unwrap_or(target),\n+                end_link_type.unwrap_or(link_type),\n+                end_link_target.take().unwrap_or(target),\n                 CowStr::Borrowed(\"\"),\n             ))\n         }\n         Event::Text(s) if in_link => {\n-            let (link_target_s, link_name) = callback(&link_target.take().unwrap(), &s);\n-            link_target = Some(CowStr::Boxed(link_target_s.into()));\n+            let (link_type, link_target_s, link_name) =\n+                callback(&end_link_target.take().unwrap(), &s);\n+            end_link_target = Some(CowStr::Boxed(link_target_s.into()));\n+            end_link_type = link_type;\n             Event::Text(CowStr::Boxed(link_name.into()))\n         }\n         Event::Code(s) if in_link => {\n-            let (link_target_s, link_name) = callback(&link_target.take().unwrap(), &s);\n-            link_target = Some(CowStr::Boxed(link_target_s.into()));\n+            let (link_type, link_target_s, link_name) =\n+                callback(&end_link_target.take().unwrap(), &s);\n+            end_link_target = Some(CowStr::Boxed(link_target_s.into()));\n+            end_link_type = link_type;\n             Event::Code(CowStr::Boxed(link_name.into()))\n         }\n         _ => evt,\n@@ -468,7 +477,13 @@ fn filename_and_frag_for_def(\n             Adt::Union(u) => format!(\"union.{}.html\", u.name(db)),\n         },\n         Definition::Module(m) => match m.name(db) {\n-            Some(name) => format!(\"{}/index.html\", name),\n+            // `#[doc(keyword = \"...\")]` is internal used only by rust compiler\n+            Some(name) => match m.attrs(db).by_key(\"doc\").find_string_value_in_tt(\"keyword\") {\n+                Some(kw) => {\n+                    format!(\"keyword.{}.html\", kw.trim_matches('\"'))\n+                }\n+                None => format!(\"{}/index.html\", name),\n+            },\n             None => String::from(\"index.html\"),\n         },\n         Definition::Trait(t) => format!(\"trait.{}.html\", t.name(db)),"}, {"sha": "95420f2ffe1f7a7dc095e82bd03e81dbee9573be", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5f4351fbb6cf07582974e37845f4d30b81399b0a/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4351fbb6cf07582974e37845f4d30b81399b0a/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=5f4351fbb6cf07582974e37845f4d30b81399b0a", "patch": "@@ -3641,6 +3641,40 @@ mod return_keyword {}\n     );\n }\n \n+#[test]\n+fn hover_keyword_doc() {\n+    check(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+fn foo() {\n+    let bar = mov$0e || {};\n+}\n+//- /libstd.rs crate:std\n+#[doc(keyword = \"move\")]\n+/// [closure]\n+/// [closures][closure]\n+/// [threads]\n+///\n+/// [closure]: ../book/ch13-01-closures.html\n+/// [threads]: ../book/ch16-01-threads.html#using-move-closures-with-threads\n+mod move_keyword {}\n+\"#,\n+        expect![[r##\"\n+            *move*\n+\n+            ```rust\n+            move\n+            ```\n+\n+            ---\n+\n+            [closure](https://doc.rust-lang.org/nightly/book/ch13-01-closures.html)\n+            [closures](https://doc.rust-lang.org/nightly/book/ch13-01-closures.html)\n+            [threads](https://doc.rust-lang.org/nightly/book/ch16-01-threads.html#using-move-closures-with-threads)\n+        \"##]],\n+    );\n+}\n+\n #[test]\n fn hover_keyword_as_primitive() {\n     check("}]}