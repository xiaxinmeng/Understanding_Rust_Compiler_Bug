{"sha": "4dc923fbda6f55a15583ed5f60aef08c1faf2cba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzkyM2ZiZGE2ZjU1YTE1NTgzZWQ1ZjYwYWVmMDhjMWZhZjJjYmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:43:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:27Z"}, "message": "librustc: De-`@mut` the `normalized_cache` in the type context", "tree": {"sha": "c7f79049be3c71b2a20738544615bd528231c7ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f79049be3c71b2a20738544615bd528231c7ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc923fbda6f55a15583ed5f60aef08c1faf2cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc923fbda6f55a15583ed5f60aef08c1faf2cba", "html_url": "https://github.com/rust-lang/rust/commit/4dc923fbda6f55a15583ed5f60aef08c1faf2cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc923fbda6f55a15583ed5f60aef08c1faf2cba/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b98c66593660cfa4ee4d39aabeaa97bb36eb75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f", "html_url": "https://github.com/rust-lang/rust/commit/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "354f0b7ae39f1e9004f3efb5840e2eb56a8a5a90", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4dc923fbda6f55a15583ed5f60aef08c1faf2cba/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc923fbda6f55a15583ed5f60aef08c1faf2cba/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4dc923fbda6f55a15583ed5f60aef08c1faf2cba", "patch": "@@ -313,7 +313,7 @@ struct ctxt_ {\n     enum_var_cache: RefCell<HashMap<DefId, @~[@VariantInfo]>>,\n     ty_param_defs: RefCell<HashMap<ast::NodeId, TypeParameterDef>>,\n     adjustments: RefCell<HashMap<ast::NodeId, @AutoAdjustment>>,\n-    normalized_cache: @mut HashMap<t, t>,\n+    normalized_cache: RefCell<HashMap<t, t>>,\n     lang_items: middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n     provided_method_sources: RefCell<HashMap<ast::DefId, ast::DefId>>,\n@@ -961,10 +961,6 @@ fn mk_rcache() -> creader_cache {\n     return @mut HashMap::new();\n }\n \n-pub fn new_ty_hash<V:'static>() -> @mut HashMap<t, V> {\n-    @mut HashMap::new()\n-}\n-\n pub fn mk_ctxt(s: session::Session,\n                dm: resolve::DefMap,\n                named_region_map: @mut resolve_lifetime::NamedRegionMap,\n@@ -1003,7 +999,7 @@ pub fn mk_ctxt(s: session::Session,\n         impl_trait_cache: RefCell::new(HashMap::new()),\n         ty_param_defs: RefCell::new(HashMap::new()),\n         adjustments: RefCell::new(HashMap::new()),\n-        normalized_cache: new_ty_hash(),\n+        normalized_cache: RefCell::new(HashMap::new()),\n         lang_items: lang_items,\n         provided_method_sources: RefCell::new(HashMap::new()),\n         supertraits: RefCell::new(HashMap::new()),\n@@ -4265,13 +4261,20 @@ pub fn normalize_ty(cx: ctxt, t: t) -> t {\n         fn tcx(&self) -> ty::ctxt { **self }\n \n         fn fold_ty(&mut self, t: ty::t) -> ty::t {\n-            match self.tcx().normalized_cache.find_copy(&t) {\n+            let normalized_opt = {\n+                let normalized_cache = self.tcx().normalized_cache.borrow();\n+                normalized_cache.get().find_copy(&t)\n+            };\n+            match normalized_opt {\n                 Some(u) => {\n                     return u;\n                 }\n                 None => {\n                     let t_norm = ty_fold::super_fold_ty(self, t);\n-                    self.tcx().normalized_cache.insert(t, t_norm);\n+                    let mut normalized_cache = self.tcx()\n+                                                   .normalized_cache\n+                                                   .borrow_mut();\n+                    normalized_cache.get().insert(t, t_norm);\n                     return t_norm;\n                 }\n             }"}]}