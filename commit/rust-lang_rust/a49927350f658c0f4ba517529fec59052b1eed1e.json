{"sha": "a49927350f658c0f4ba517529fec59052b1eed1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OTkyNzM1MGY2NThjMGY0YmE1MTc1MjlmZWM1OTA1MmIxZWVkMWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-12T23:54:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-12T23:54:31Z"}, "message": "Rollup merge of #86887 - jyn514:cleanup-clean, r=CraftSpider\n\nrustdoc: remove dead code in `clean`\n\nBuilds on https://github.com/rust-lang/rust/pull/86886 and should not be merged before.", "tree": {"sha": "c61e9be1bda4c4f224ea4bdd0038e4d4de50f0a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c61e9be1bda4c4f224ea4bdd0038e4d4de50f0a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a49927350f658c0f4ba517529fec59052b1eed1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7NY4CRBK7hj4Ov3rIwAA6LUIAB32jJKHdDxZvHPtIaU+u0EH\nuj2Vtnrr0c0p/jgzW3QDT9m9L7E6lvK2ZbbxRAi3OKX+Kws+l0GKK+UhHBPDIGE1\njBqaF17qbWmn31uOv931l59MH4VOhavMRk/onWNVQn41Fua3HMgGfhuc0tbuKadg\nkXQLxyi7OvyC5VZfgT3DwwzIL3otsadn6sSx2lvQi6wyunVwCf8MJMcJvHSFrA7+\nufZdM8A0fJ1+mg3mslpkBQn1D5SgUh4mP9oeav4qO37d+x2JVJoq+JEQ2l6ed2OW\n33AxEY5YQgNUTVId/FACJ7ylSMmgVthJ0g5CtRyy8gMBKr2I16ZB8FE5P/EZ9TM=\n=YRU2\n-----END PGP SIGNATURE-----\n", "payload": "tree c61e9be1bda4c4f224ea4bdd0038e4d4de50f0a5\nparent bcacfe7c64cc294551f8520c1f48dfbbb52a028b\nparent b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c\nauthor Yuki Okushi <jtitor@2k36.org> 1626134071 +0900\ncommitter GitHub <noreply@github.com> 1626134071 +0900\n\nRollup merge of #86887 - jyn514:cleanup-clean, r=CraftSpider\n\nrustdoc: remove dead code in `clean`\n\nBuilds on https://github.com/rust-lang/rust/pull/86886 and should not be merged before.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a49927350f658c0f4ba517529fec59052b1eed1e", "html_url": "https://github.com/rust-lang/rust/commit/a49927350f658c0f4ba517529fec59052b1eed1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a49927350f658c0f4ba517529fec59052b1eed1e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcacfe7c64cc294551f8520c1f48dfbbb52a028b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcacfe7c64cc294551f8520c1f48dfbbb52a028b", "html_url": "https://github.com/rust-lang/rust/commit/bcacfe7c64cc294551f8520c1f48dfbbb52a028b"}, {"sha": "b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c", "html_url": "https://github.com/rust-lang/rust/commit/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c"}], "stats": {"total": 47, "additions": 1, "deletions": 46}, "files": [{"sha": "8f74a48547d8833c0f88a12e6ec8ac111cda1af4", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a49927350f658c0f4ba517529fec59052b1eed1e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49927350f658c0f4ba517529fec59052b1eed1e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=a49927350f658c0f4ba517529fec59052b1eed1e", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     visibility: Inherited,\n                     def_id: ItemId::Blanket { impl_id: impl_def_id, for_: item_def_id },\n                     kind: box ImplItem(Impl {\n-                        span: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n+                        span: Span::from_rustc_span(self.cx.tcx.def_span(impl_def_id)),\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n                             self.cx.tcx.generics_of(impl_def_id),"}, {"sha": "80aaae1580114752da8ebe3a610719c814ce5624", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a49927350f658c0f4ba517529fec59052b1eed1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49927350f658c0f4ba517529fec59052b1eed1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a49927350f658c0f4ba517529fec59052b1eed1e", "patch": "@@ -227,20 +227,6 @@ impl<'tcx> Clean<GenericBound> for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<Option<Vec<GenericBound>>> for InternalSubsts<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Option<Vec<GenericBound>> {\n-        let mut v = Vec::new();\n-        v.extend(self.regions().filter_map(|r| r.clean(cx)).map(GenericBound::Outlives));\n-        v.extend(self.types().map(|t| {\n-            GenericBound::TraitBound(\n-                PolyTrait { trait_: t.clean(cx), generic_params: Vec::new() },\n-                hir::TraitBoundModifier::None,\n-            )\n-        }));\n-        if !v.is_empty() { Some(v) } else { None }\n-    }\n-}\n-\n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Lifetime {\n         let def = cx.tcx.named_region(self.hir_id);\n@@ -296,12 +282,6 @@ impl Clean<Constant> for hir::ConstArg {\n     }\n }\n \n-impl Clean<Lifetime> for ty::GenericParamDef {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> Lifetime {\n-        Lifetime(self.name)\n-    }\n-}\n-\n impl Clean<Option<Lifetime>> for ty::RegionKind {\n     fn clean(&self, _cx: &mut DocContext<'_>) -> Option<Lifetime> {\n         match *self {\n@@ -1764,12 +1744,6 @@ impl Clean<Variant> for hir::VariantData<'_> {\n     }\n }\n \n-impl Clean<Span> for rustc_span::Span {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> Span {\n-        Span::from_rustc_span(*self)\n-    }\n-}\n-\n impl Clean<Path> for hir::Path<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n         Path {\n@@ -2193,22 +2167,3 @@ impl Clean<TypeBindingKind> for hir::TypeBindingKind<'_> {\n         }\n     }\n }\n-\n-enum SimpleBound {\n-    TraitBound(Vec<PathSegment>, Vec<SimpleBound>, Vec<GenericParamDef>, hir::TraitBoundModifier),\n-    Outlives(Lifetime),\n-}\n-\n-impl From<GenericBound> for SimpleBound {\n-    fn from(bound: GenericBound) -> Self {\n-        match bound.clone() {\n-            GenericBound::Outlives(l) => SimpleBound::Outlives(l),\n-            GenericBound::TraitBound(t, mod_) => match t.trait_ {\n-                Type::ResolvedPath { path, .. } => {\n-                    SimpleBound::TraitBound(path.segments, Vec::new(), t.generic_params, mod_)\n-                }\n-                _ => panic!(\"Unexpected bound {:?}\", bound),\n-            },\n-        }\n-    }\n-}"}]}