{"sha": "37bf8f888cb7b8a7cb461f0d41588e500b0bb9d1", "node_id": "C_kwDOAAsO6NoAKDM3YmY4Zjg4OGNiN2I4YTdjYjQ2MWYwZDQxNTg4ZTUwMGIwYmI5ZDE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-09T14:38:33Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-28T07:40:02Z"}, "message": "rustc_safe_intrinsic: Keep list of safe intrinsics within the compiler", "tree": {"sha": "63905d70ac9079e8123bba6bdfd7cb14fd0c002d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63905d70ac9079e8123bba6bdfd7cb14fd0c002d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37bf8f888cb7b8a7cb461f0d41588e500b0bb9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37bf8f888cb7b8a7cb461f0d41588e500b0bb9d1", "html_url": "https://github.com/rust-lang/rust/commit/37bf8f888cb7b8a7cb461f0d41588e500b0bb9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37bf8f888cb7b8a7cb461f0d41588e500b0bb9d1/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d57ee23d61293bc14f6a8f0eb9ad4fe10acc94", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d57ee23d61293bc14f6a8f0eb9ad4fe10acc94", "html_url": "https://github.com/rust-lang/rust/commit/99d57ee23d61293bc14f6a8f0eb9ad4fe10acc94"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "8be1cf04f8b691d9b8e8127b9eb52f3555567e0a", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/37bf8f888cb7b8a7cb461f0d41588e500b0bb9d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bf8f888cb7b8a7cb461f0d41588e500b0bb9d1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=37bf8f888cb7b8a7cb461f0d41588e500b0bb9d1", "patch": "@@ -8,7 +8,7 @@ use crate::errors::{\n use crate::require_same_types;\n \n use hir::def_id::DefId;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, DiagnosticMessage};\n use rustc_hir as hir;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -63,10 +63,66 @@ fn equate_intrinsic_type<'tcx>(\n \n /// Returns the unsafety of the given intrinsic.\n pub fn intrinsic_operation_unsafety(tcx: TyCtxt<'_>, intrinsic_id: DefId) -> hir::Unsafety {\n-    match tcx.has_attr(intrinsic_id, sym::rustc_safe_intrinsic) {\n+    let has_safe_attr = match tcx.has_attr(intrinsic_id, sym::rustc_safe_intrinsic) {\n         true => hir::Unsafety::Normal,\n         false => hir::Unsafety::Unsafe,\n+    };\n+    let is_in_list = match tcx.item_name(intrinsic_id) {\n+        // When adding a new intrinsic to this list,\n+        // it's usually worth updating that intrinsic's documentation\n+        // to note that it's safe to call, since\n+        // safe extern fns are otherwise unprecedented.\n+        sym::abort\n+        | sym::assert_inhabited\n+        | sym::assert_zero_valid\n+        | sym::assert_uninit_valid\n+        | sym::size_of\n+        | sym::min_align_of\n+        | sym::needs_drop\n+        | sym::caller_location\n+        | sym::add_with_overflow\n+        | sym::sub_with_overflow\n+        | sym::mul_with_overflow\n+        | sym::wrapping_add\n+        | sym::wrapping_sub\n+        | sym::wrapping_mul\n+        | sym::saturating_add\n+        | sym::saturating_sub\n+        | sym::rotate_left\n+        | sym::rotate_right\n+        | sym::ctpop\n+        | sym::ctlz\n+        | sym::cttz\n+        | sym::bswap\n+        | sym::bitreverse\n+        | sym::discriminant_value\n+        | sym::type_id\n+        | sym::likely\n+        | sym::unlikely\n+        | sym::ptr_guaranteed_cmp\n+        | sym::minnumf32\n+        | sym::minnumf64\n+        | sym::maxnumf32\n+        | sym::rustc_peek\n+        | sym::maxnumf64\n+        | sym::type_name\n+        | sym::forget\n+        | sym::black_box\n+        | sym::variant_count\n+        | sym::ptr_mask => hir::Unsafety::Normal,\n+        _ => hir::Unsafety::Unsafe,\n+    };\n+\n+    if has_safe_attr != is_in_list {\n+        tcx.sess.struct_span_err(\n+            tcx.def_span(intrinsic_id),\n+            DiagnosticMessage::Str(format!(\n+                    \"intrinsic safety mismatch between list of intrinsics within the compiler and core library intrinsics for intrinsic `{}`\",\n+                    tcx.item_name(intrinsic_id)\n+        ))).emit();\n     }\n+\n+    is_in_list\n }\n \n /// Remember to add all intrinsics here, in `compiler/rustc_codegen_llvm/src/intrinsic.rs`,\n@@ -312,7 +368,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (\n                     1,\n                     vec![\n-                        tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0))\n+                        tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)), param(0)),\n                     ],\n                     tcx.mk_projection(discriminant_def_id, tcx.mk_substs([param(0).into()].iter())),\n                 )"}]}