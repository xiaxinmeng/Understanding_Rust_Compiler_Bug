{"sha": "12f68e6987c4669b90a6cdac1643b99b6c677aea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZjY4ZTY5ODdjNDY2OWI5MGE2Y2RhYzE2NDNiOTliNmM2NzdhZWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-23T16:40:18Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-23T16:40:18Z"}, "message": "Account for const generalisation in combine", "tree": {"sha": "9e7d4ab946fe9facdde7d0293015a8fb668ce1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7d4ab946fe9facdde7d0293015a8fb668ce1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12f68e6987c4669b90a6cdac1643b99b6c677aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12f68e6987c4669b90a6cdac1643b99b6c677aea", "html_url": "https://github.com/rust-lang/rust/commit/12f68e6987c4669b90a6cdac1643b99b6c677aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12f68e6987c4669b90a6cdac1643b99b6c677aea/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc7294c751fd700b77c3556eaae8507661f08f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc7294c751fd700b77c3556eaae8507661f08f22", "html_url": "https://github.com/rust-lang/rust/commit/cc7294c751fd700b77c3556eaae8507661f08f22"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "a6c3c2de139bd993bfb68baff8627781df1894ed", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12f68e6987c4669b90a6cdac1643b99b6c677aea/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f68e6987c4669b90a6cdac1643b99b6c677aea/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=12f68e6987c4669b90a6cdac1643b99b6c677aea", "patch": "@@ -605,9 +605,21 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n         match c.val {\n             ConstValue::Infer(InferConst::Var(vid)) => {\n                 let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n-                match variable_table.probe_value(vid).val.known() {\n-                    Some(u) => self.relate(&u, &u),\n-                    None => Ok(c),\n+                let var_value = variable_table.probe_value(vid);\n+                match var_value.val {\n+                    ConstVariableValue::Known { value: u } => self.relate(&u, &u),\n+                    ConstVariableValue::Unknown { universe } => {\n+                        if self.for_universe.can_name(universe) {\n+                            Ok(c)\n+                        } else {\n+                            let new_var_id = variable_table.new_key(ConstVarValue {\n+                                origin: var_value.origin,\n+                                val: ConstVariableValue::Unknown { universe: self.for_universe },\n+                            });\n+                            let u = self.tcx().mk_const_var(new_var_id, c.ty);\n+                            return Ok(u);\n+                        }\n+                    }\n                 }\n             }\n             _ => relate::super_relate_consts(self, c, c),"}]}