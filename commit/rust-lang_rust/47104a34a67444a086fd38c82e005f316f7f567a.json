{"sha": "47104a34a67444a086fd38c82e005f316f7f567a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTA0YTM0YTY3NDQ0YTA4NmZkMzhjODJlMDA1ZjMxNmY3ZjU2N2E=", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-09-15T18:45:31Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-09-15T18:45:31Z"}, "message": "Allow call to get_body_with_borrowck_facts without -Z polonius", "tree": {"sha": "4c64a79a03a7d9a751497af7bc013b73b18473e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c64a79a03a7d9a751497af7bc013b73b18473e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47104a34a67444a086fd38c82e005f316f7f567a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47104a34a67444a086fd38c82e005f316f7f567a", "html_url": "https://github.com/rust-lang/rust/commit/47104a34a67444a086fd38c82e005f316f7f567a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47104a34a67444a086fd38c82e005f316f7f567a/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fd39dd8a6f20bb919b30a56022c16e235cf7d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd39dd8a6f20bb919b30a56022c16e235cf7d5a", "html_url": "https://github.com/rust-lang/rust/commit/4fd39dd8a6f20bb919b30a56022c16e235cf7d5a"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "4333038a6f936618c6f683dd6b4230fbd104a15a", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47104a34a67444a086fd38c82e005f316f7f567a/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47104a34a67444a086fd38c82e005f316f7f567a/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=47104a34a67444a086fd38c82e005f316f7f567a", "patch": "@@ -14,16 +14,16 @@ pub use super::{\n };\n \n /// This function computes Polonius facts for the given body. It makes a copy of\n-/// the body because it needs to regenerate the region identifiers.\n+/// the body because it needs to regenerate the region identifiers. This function\n+/// should never be invoked during a typical compilation session due to performance\n+/// issues with Polonius.\n ///\n /// Note:\n /// *   This function will panic if the required body was already stolen. This\n ///     can, for example, happen when requesting a body of a `const` function\n ///     because they are evaluated during typechecking. The panic can be avoided\n ///     by overriding the `mir_borrowck` query. You can find a complete example\n ///     that shows how to do this at `src/test/run-make/obtain-borrowck/`.\n-/// *   This function will also panic if computation of Polonius facts\n-///     (`-Zpolonius` flag) is not enabled.\n ///\n /// *   Polonius is highly unstable, so expect regular changes in its signature or other details.\n pub fn get_body_with_borrowck_facts<'tcx>("}, {"sha": "b3b7d7e02ccef068b444607116f3058a20ba0f10", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47104a34a67444a086fd38c82e005f316f7f567a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47104a34a67444a086fd38c82e005f316f7f567a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=47104a34a67444a086fd38c82e005f316f7f567a", "patch": "@@ -154,11 +154,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     debug!(\"do_mir_borrowck(def = {:?})\", def);\n \n-    assert!(\n-        !return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius,\n-        \"borrowck facts can be requested only when Polonius is enabled\"\n-    );\n-\n     let tcx = infcx.tcx;\n     let param_env = tcx.param_env(def.did);\n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n@@ -235,6 +230,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let borrow_set =\n         Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));\n \n+    let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;\n+\n     // Compute non-lexical lifetimes.\n     let nll::NllOutput {\n         regioncx,\n@@ -254,6 +251,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         &mdpe.move_data,\n         &borrow_set,\n         &upvars,\n+        use_polonius,\n     );\n \n     // Dump MIR results into a file, if that is enabled. This let us"}, {"sha": "477b049b07596cda7b1c7eed0399d82fdf7938cb", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47104a34a67444a086fd38c82e005f316f7f567a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47104a34a67444a086fd38c82e005f316f7f567a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=47104a34a67444a086fd38c82e005f316f7f567a", "patch": "@@ -164,8 +164,10 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n     move_data: &MoveData<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n     upvars: &[Upvar<'tcx>],\n+    use_polonius: bool,\n ) -> NllOutput<'tcx> {\n-    let mut all_facts = AllFacts::enabled(infcx.tcx).then_some(AllFacts::default());\n+    let mut all_facts =\n+        (use_polonius || AllFacts::enabled(infcx.tcx)).then_some(AllFacts::default());\n \n     let universal_regions = Rc::new(universal_regions);\n \n@@ -281,7 +283,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n             all_facts.write_to_dir(dir_path, location_table).unwrap();\n         }\n \n-        if infcx.tcx.sess.opts.debugging_opts.polonius {\n+        if use_polonius {\n             let algorithm =\n                 env::var(\"POLONIUS_ALGORITHM\").unwrap_or_else(|_| String::from(\"Hybrid\"));\n             let algorithm = Algorithm::from_str(&algorithm).unwrap();"}]}