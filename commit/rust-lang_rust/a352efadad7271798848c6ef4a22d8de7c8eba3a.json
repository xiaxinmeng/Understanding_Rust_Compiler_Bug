{"sha": "a352efadad7271798848c6ef4a22d8de7c8eba3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNTJlZmFkYWQ3MjcxNzk4ODQ4YzZlZjRhMjJkOGRlN2M4ZWJhM2E=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-14T21:41:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-14T21:41:10Z"}, "message": "Switch upcall glues to fastcall as well.", "tree": {"sha": "13e38ac987a13c1b5cf27d1c949275af68808c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e38ac987a13c1b5cf27d1c949275af68808c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a352efadad7271798848c6ef4a22d8de7c8eba3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a352efadad7271798848c6ef4a22d8de7c8eba3a", "html_url": "https://github.com/rust-lang/rust/commit/a352efadad7271798848c6ef4a22d8de7c8eba3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a352efadad7271798848c6ef4a22d8de7c8eba3a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cbef9d8a1f5d894325c252a70429116c24d5364", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cbef9d8a1f5d894325c252a70429116c24d5364", "html_url": "https://github.com/rust-lang/rust/commit/4cbef9d8a1f5d894325c252a70429116c24d5364"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "a2a8d5cc82298dbf803afbbee0dec43b6ca2c100", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a352efadad7271798848c6ef4a22d8de7c8eba3a/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a352efadad7271798848c6ef4a22d8de7c8eba3a/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=a352efadad7271798848c6ef4a22d8de7c8eba3a", "patch": "@@ -70,16 +70,18 @@ fn upcall_glue(int n_args) -> vec[str] {\n     /*\n      * 0, 4, 8, 12 are callee-saves\n      * 16 is retpc\n-     * 20 is taskptr\n-     * 24 is callee\n-     * 28 .. (7+i) * 4 are args\n+     * 20 .. (5+i) * 4 are args\n+     *\n+     * ecx is taskptr\n+     * edx is callee\n+     *\n      */\n \n     fn copy_arg(uint i) -> str {\n-        auto src_off = wstr(7 + (i as int));\n+        auto src_off = wstr(5 + (i as int));\n         auto dst_off = wstr(1 + (i as int));\n-        auto m = vec(\"movl  \" + src_off + \"(%ebp),%edx\",\n-                     \"movl  %edx,\" + dst_off + \"(%esp)\");\n+        auto m = vec(\"movl  \" + src_off + \"(%ebp),%eax\",\n+                     \"movl  %eax,\" + dst_off + \"(%esp)\");\n         ret _str.connect(m, \"\\n\\t\");\n     }\n \n@@ -88,8 +90,7 @@ fn upcall_glue(int n_args) -> vec[str] {\n     ret\n         save_callee_saves()\n \n-        + vec(\"movl  %esp, %ebp     # ebp = rust_sp\",\n-              \"movl  20(%esp), %ecx # ecx = rust_task\")\n+        + vec(\"movl  %esp, %ebp     # ebp = rust_sp\")\n \n         + store_esp_to_rust_sp()\n         + load_esp_from_runtime_sp()\n@@ -100,9 +101,9 @@ fn upcall_glue(int n_args) -> vec[str] {\n \n         + _vec.init_fn[str](carg, n_args as uint)\n \n-        +  vec(\"movl  24(%ebp), %edx # edx = callee\",\n+        +  vec(\"movl  %ecx, %edi     # save task from ecx to edi\",\n                \"call  *%edx          # call *%edx\",\n-               \"movl  20(%ebp), %ecx # edx = rust_task\")\n+               \"movl  %edi, %ecx     # restore edi-saved task to ecx\")\n \n         + load_esp_from_rust_sp()\n         + restore_callee_saves()"}, {"sha": "da48c6b5d4dfb87693f2d0d77d41d08134b0d144", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a352efadad7271798848c6ef4a22d8de7c8eba3a/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a352efadad7271798848c6ef4a22d8de7c8eba3a/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=a352efadad7271798848c6ef4a22d8de7c8eba3a", "patch": "@@ -1026,6 +1026,15 @@ obj builder(BuilderRef B) {\n                                _str.buf(\"\"));\n     }\n \n+    fn FastCall(ValueRef Fn, vec[ValueRef] Args) -> ValueRef {\n+        auto v = llvm.LLVMBuildCall(B, Fn,\n+                                    _vec.buf[ValueRef](Args),\n+                                    _vec.len[ValueRef](Args),\n+                                    _str.buf(\"\"));\n+        llvm.LLVMSetInstructionCallConv(v, LLVMFastCallConv);\n+        ret v;\n+    }\n+\n     fn Select(ValueRef If, ValueRef Then, ValueRef Else) -> ValueRef {\n         ret llvm.LLVMBuildSelect(B, If, Then, Else, _str.buf(\"\"));\n     }"}, {"sha": "0c85d50b130bfb32761526761a0124e8da99de0c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a352efadad7271798848c6ef4a22d8de7c8eba3a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a352efadad7271798848c6ef4a22d8de7c8eba3a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a352efadad7271798848c6ef4a22d8de7c8eba3a", "patch": "@@ -375,7 +375,7 @@ fn decl_upcall(ModuleRef llmod, uint _n) -> ValueRef {\n             T_int())     // callee\n         + _vec.init_elt[TypeRef](T_int(), n as uint);\n \n-    ret decl_cdecl_fn(llmod, s, args, T_int());\n+    ret decl_fastcall_fn(llmod, s, args, T_int());\n }\n \n fn get_upcall(@trans_ctxt cx, str name, int n_args) -> ValueRef {\n@@ -400,8 +400,7 @@ fn trans_upcall(@block_ctxt cx, str name, vec[ValueRef] args) -> result {\n     for (ValueRef a in args) {\n         call_args += cx.build.ZExtOrBitCast(a, T_int());\n     }\n-\n-    ret res(cx, cx.build.Call(llglue, call_args));\n+    ret res(cx, cx.build.FastCall(llglue, call_args));\n }\n \n fn trans_non_gc_free(@block_ctxt cx, ValueRef v) -> result {\n@@ -941,10 +940,8 @@ impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n             auto args_res = trans_exprs(f_res._0.bcx, args);\n             auto llargs = vec(cx.fcx.lltaskptr);\n             llargs += args_res._1;\n-            auto call_val = args_res._0.build.Call(f_res._0.val, llargs);\n-            llvm.LLVMSetInstructionCallConv(call_val,\n-                                            lib.llvm.LLVMFastCallConv);\n-            ret res(args_res._0, call_val);\n+            ret res(args_res._0,\n+                    args_res._0.build.FastCall(f_res._0.val, llargs));\n         }\n \n     }"}]}