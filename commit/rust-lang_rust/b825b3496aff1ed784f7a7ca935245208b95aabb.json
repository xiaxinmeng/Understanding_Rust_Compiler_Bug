{"sha": "b825b3496aff1ed784f7a7ca935245208b95aabb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjViMzQ5NmFmZjFlZDc4NGY3YTdjYTkzNTI0NTIwOGI5NWFhYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-20T10:01:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-20T10:01:42Z"}, "message": "auto merge of #18638 : aturon/rust/as_slice_dst, r=japaric\n\nThis PR changes `AsSlice` to work on unsized types, and changes the\r\n`impl` for `&[T]` to `[T]`. Aside from making the trait more general,\r\nthis also helps some ongoing work with method resolution changes.\r\n\r\nThis is a breaking change: code that uses generics bounded by `AsSlice`\r\nwill have to change. In particular, such code previously often took\r\narguments of type `V` where `V: AsSlice<T>` by value. These should now\r\nbe taken by reference:\r\n\r\n```rust\r\nfn foo<Sized? V: AsSlice<T>>(v: &V) { .. }\r\n```\r\n\r\nA few std lib functions have been changed accordingly.\r\n\r\nThe PR also relaxes constraints on generics and traits within the\r\n`core::ops` module and for the `Equiv` trait.\r\n\r\n[breaking-change]\r\n\r\nr? @nikomatsakis \r\ncc @japaric", "tree": {"sha": "e68c0589de4162fdcf072913d6fe547afa1b7c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68c0589de4162fdcf072913d6fe547afa1b7c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b825b3496aff1ed784f7a7ca935245208b95aabb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b825b3496aff1ed784f7a7ca935245208b95aabb", "html_url": "https://github.com/rust-lang/rust/commit/b825b3496aff1ed784f7a7ca935245208b95aabb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b825b3496aff1ed784f7a7ca935245208b95aabb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5ce5ae2f254cc42763518909f6e7c486d9502a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5ce5ae2f254cc42763518909f6e7c486d9502a", "html_url": "https://github.com/rust-lang/rust/commit/dd5ce5ae2f254cc42763518909f6e7c486d9502a"}, {"sha": "c287afb2fa530d22563391737ac1d44faf2f9b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c287afb2fa530d22563391737ac1d44faf2f9b2e", "html_url": "https://github.com/rust-lang/rust/commit/c287afb2fa530d22563391737ac1d44faf2f9b2e"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "e077f7f6021bde6f0a2aef46c8b339f62198265e", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=b825b3496aff1ed784f7a7ca935245208b95aabb", "patch": "@@ -121,7 +121,7 @@ pub trait VectorVector<T> for Sized? {\n     fn connect_vec(&self, sep: &T) -> Vec<T>;\n }\n \n-impl<T: Clone, V: AsSlice<T>> VectorVector<T> for [V] {\n+impl<'a, T: Clone, V: AsSlice<T>> VectorVector<T> for [V] {\n     fn concat_vec(&self) -> Vec<T> {\n         let size = self.iter().fold(0u, |acc, v| acc + v.as_slice().len());\n         let mut result = Vec::with_capacity(size);"}, {"sha": "d6a21ef19a28b6c27eef8ee52049ea0cdd65df50", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b825b3496aff1ed784f7a7ca935245208b95aabb", "patch": "@@ -20,6 +20,7 @@ use core::cmp::max;\n use core::default::Default;\n use core::fmt;\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n+use core::kinds::Sized;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n use core::ops;\n@@ -516,7 +517,7 @@ impl<T: PartialOrd> PartialOrd for Vec<T> {\n impl<T: Eq> Eq for Vec<T> {}\n \n #[experimental]\n-impl<T: PartialEq, V: AsSlice<T>> Equiv<V> for Vec<T> {\n+impl<T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for Vec<T> {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }\n@@ -1181,7 +1182,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     }\n }\n \n-impl<T: Clone, V: AsSlice<T>> Add<V, Vec<T>> for Vec<T> {\n+impl<T: Clone, Sized? V: AsSlice<T>> Add<V, Vec<T>> for Vec<T> {\n     #[inline]\n     fn add(&self, rhs: &V) -> Vec<T> {\n         let mut res = Vec::with_capacity(self.len() + rhs.as_slice().len());"}, {"sha": "51122d0a17023196d9d1c5200bcc6d86632f2b7c", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=b825b3496aff1ed784f7a7ca935245208b95aabb", "patch": "@@ -241,7 +241,7 @@ pub trait PartialOrd for Sized?: PartialEq {\n /// container types; e.g. it is often desirable to be able to use `&str`\n /// values to look up entries in a container with `String` keys.\n #[experimental = \"Better solutions may be discovered.\"]\n-pub trait Equiv<T> for Sized? {\n+pub trait Equiv<Sized? T> for Sized? {\n     /// Implement this function to decide equivalent values.\n     fn equiv(&self, other: &T) -> bool;\n }"}, {"sha": "185c937eb6b37b610300215c791ec9f6ae103e6b", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b825b3496aff1ed784f7a7ca935245208b95aabb", "patch": "@@ -112,7 +112,7 @@ pub trait Drop {\n  * ```\n  */\n #[lang=\"add\"]\n-pub trait Add<RHS,Result> {\n+pub trait Add<Sized? RHS,Result> for Sized? {\n     /// The method for the `+` operator\n     fn add(&self, rhs: &RHS) -> Result;\n }\n@@ -153,7 +153,7 @@ add_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n  * ```\n  */\n #[lang=\"sub\"]\n-pub trait Sub<RHS,Result> {\n+pub trait Sub<Sized? RHS, Result> for Sized? {\n     /// The method for the `-` operator\n     fn sub(&self, rhs: &RHS) -> Result;\n }\n@@ -194,7 +194,7 @@ sub_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n  * ```\n  */\n #[lang=\"mul\"]\n-pub trait Mul<RHS,Result> {\n+pub trait Mul<Sized? RHS, Result>  for Sized? {\n     /// The method for the `*` operator\n     fn mul(&self, rhs: &RHS) -> Result;\n }\n@@ -235,7 +235,7 @@ mul_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n  * ```\n  */\n #[lang=\"div\"]\n-pub trait Div<RHS,Result> {\n+pub trait Div<Sized? RHS, Result> for Sized? {\n     /// The method for the `/` operator\n     fn div(&self, rhs: &RHS) -> Result;\n }\n@@ -276,7 +276,7 @@ div_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n  * ```\n  */\n #[lang=\"rem\"]\n-pub trait Rem<RHS,Result> {\n+pub trait Rem<Sized? RHS, Result>  for Sized? {\n     /// The method for the `%` operator\n     fn rem(&self, rhs: &RHS) -> Result;\n }\n@@ -331,7 +331,7 @@ rem_float_impl!(f64, fmod)\n  * ```\n  */\n #[lang=\"neg\"]\n-pub trait Neg<Result> {\n+pub trait Neg<Result> for Sized? {\n     /// The method for the unary `-` operator\n     fn neg(&self) -> Result;\n }\n@@ -388,7 +388,7 @@ neg_uint_impl!(u64, i64)\n  * ```\n  */\n #[lang=\"not\"]\n-pub trait Not<Result> {\n+pub trait Not<Result> for Sized? {\n     /// The method for the unary `!` operator\n     fn not(&self) -> Result;\n }\n@@ -430,7 +430,7 @@ not_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"bitand\"]\n-pub trait BitAnd<RHS,Result> {\n+pub trait BitAnd<Sized? RHS, Result> for Sized? {\n     /// The method for the `&` operator\n     fn bitand(&self, rhs: &RHS) -> Result;\n }\n@@ -471,7 +471,7 @@ bitand_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"bitor\"]\n-pub trait BitOr<RHS,Result> {\n+pub trait BitOr<Sized? RHS, Result> for Sized? {\n     /// The method for the `|` operator\n     fn bitor(&self, rhs: &RHS) -> Result;\n }\n@@ -512,7 +512,7 @@ bitor_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"bitxor\"]\n-pub trait BitXor<RHS,Result> {\n+pub trait BitXor<Sized? RHS, Result> for Sized? {\n     /// The method for the `^` operator\n     fn bitxor(&self, rhs: &RHS) -> Result;\n }\n@@ -553,7 +553,7 @@ bitxor_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"shl\"]\n-pub trait Shl<RHS,Result> {\n+pub trait Shl<Sized? RHS, Result> for Sized? {\n     /// The method for the `<<` operator\n     fn shl(&self, rhs: &RHS) -> Result;\n }\n@@ -596,7 +596,7 @@ shl_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"shr\"]\n-pub trait Shr<RHS,Result> {\n+pub trait Shr<Sized? RHS, Result> for Sized? {\n     /// The method for the `>>` operator\n     fn shr(&self, rhs: &RHS) -> Result;\n }\n@@ -669,7 +669,7 @@ pub trait Index<Sized? Index, Sized? Result> for Sized? {\n  * ```\n  */\n #[lang=\"index_mut\"]\n-pub trait IndexMut<Sized? Index, Result> for Sized? {\n+pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n     /// The method for the indexing (`Foo[Bar]`) operation\n     fn index_mut<'a>(&'a mut self, index: &Index) -> &'a mut Result;\n }\n@@ -712,7 +712,7 @@ pub trait IndexMut<Sized? Index, Result> for Sized? {\n  * ```\n  */\n #[lang=\"slice\"]\n-pub trait Slice<Idx, Sized? Result> for Sized? {\n+pub trait Slice<Sized? Idx, Sized? Result> for Sized? {\n     /// The method for the slicing operation foo[]\n     fn as_slice_<'a>(&'a self) -> &'a Result;\n     /// The method for the slicing operation foo[from..]\n@@ -761,7 +761,7 @@ pub trait Slice<Idx, Sized? Result> for Sized? {\n  * ```\n  */\n #[lang=\"slice_mut\"]\n-pub trait SliceMut<Idx, Sized? Result> for Sized? {\n+pub trait SliceMut<Sized? Idx, Sized? Result> for Sized? {\n     /// The method for the slicing operation foo[]\n     fn as_mut_slice_<'a>(&'a mut self) -> &'a mut Result;\n     /// The method for the slicing operation foo[from..]\n@@ -800,7 +800,7 @@ pub trait SliceMut<Idx, Sized? Result> for Sized? {\n  * ```\n  */\n #[lang=\"deref\"]\n-pub trait Deref<Sized? Result> {\n+pub trait Deref<Sized? Result> for Sized? {\n     /// The method called to dereference a value\n     fn deref<'a>(&'a self) -> &'a Result;\n }\n@@ -859,21 +859,21 @@ impl<'a, Sized? T> DerefMut<T> for &'a mut T {\n \n /// A version of the call operator that takes an immutable receiver.\n #[lang=\"fn\"]\n-pub trait Fn<Args,Result> {\n+pub trait Fn<Args,Result> for Sized? {\n     /// This is called when the call operator is used.\n     extern \"rust-call\" fn call(&self, args: Args) -> Result;\n }\n \n /// A version of the call operator that takes a mutable receiver.\n #[lang=\"fn_mut\"]\n-pub trait FnMut<Args,Result> {\n+pub trait FnMut<Args,Result> for Sized? {\n     /// This is called when the call operator is used.\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Result;\n }\n \n /// A version of the call operator that takes a by-value receiver.\n #[lang=\"fn_once\"]\n-pub trait FnOnce<Args,Result> {\n+pub trait FnOnce<Args,Result> for Sized? {\n     /// This is called when the call operator is used.\n     extern \"rust-call\" fn call_once(self, args: Args) -> Result;\n }"}, {"sha": "7a3e06e7eb40de6b4e2062ca03790af9fe5d888b", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=b825b3496aff1ed784f7a7ca935245208b95aabb", "patch": "@@ -1008,15 +1008,25 @@ impl<T: Clone> CloneSlicePrelude<T> for [T] {\n \n /// Data that is viewable as a slice.\n #[unstable = \"may merge with other traits\"]\n-pub trait AsSlice<T> {\n+pub trait AsSlice<T> for Sized? {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a [T];\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a,T> AsSlice<T> for &'a [T] {\n+impl<T> AsSlice<T> for [T] {\n     #[inline(always)]\n-    fn as_slice<'a>(&'a self) -> &'a [T] { *self }\n+    fn as_slice<'a>(&'a self) -> &'a [T] { self }\n+}\n+\n+impl<'a, T, Sized? U: AsSlice<T>> AsSlice<T> for &'a U {\n+    #[inline(always)]\n+    fn as_slice<'a>(&'a self) -> &'a [T] { AsSlice::as_slice(*self) }\n+}\n+\n+impl<'a, T, Sized? U: AsSlice<T>> AsSlice<T> for &'a mut U {\n+    #[inline(always)]\n+    fn as_slice<'a>(&'a self) -> &'a [T] { AsSlice::as_slice(*self) }\n }\n \n #[unstable = \"waiting for DST\"]\n@@ -1681,13 +1691,13 @@ impl<T: PartialEq> PartialEq for [T] {\n impl<T: Eq> Eq for [T] {}\n \n #[unstable = \"waiting for DST\"]\n-impl<T: PartialEq, V: AsSlice<T>> Equiv<V> for [T] {\n+impl<T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }\n \n #[unstable = \"waiting for DST\"]\n-impl<'a,T:PartialEq, V: AsSlice<T>> Equiv<V> for &'a mut [T] {\n+impl<'a,T:PartialEq, Sized? V: AsSlice<T>> Equiv<V> for &'a mut [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }"}, {"sha": "70b3971c6b8058e87f5b8dd8e7ba71358cb3f9ca", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=b825b3496aff1ed784f7a7ca935245208b95aabb", "patch": "@@ -89,7 +89,7 @@ impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n     }\n }\n \n-impl<'a, T: PartialEq, V: AsSlice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n+impl<'a, T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n     fn equiv(&self, other: &V) -> bool {\n         self.as_slice() == other.as_slice()\n     }"}, {"sha": "2b444fdc32bab28174cc8edd9c54fe74737f1984", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b3496aff1ed784f7a7ca935245208b95aabb/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=b825b3496aff1ed784f7a7ca935245208b95aabb", "patch": "@@ -16,6 +16,7 @@ use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n use io::Writer;\n use iter::{DoubleEndedIterator, AdditiveIterator, Extend, Iterator, Map};\n+use kinds::Sized;\n use option::{Option, None, Some};\n use str::{FromStr, Str};\n use str;\n@@ -342,7 +343,7 @@ impl Path {\n \n     /// Returns a normalized byte vector representation of a path, by removing all empty\n     /// components, and unnecessary . and .. components.\n-    fn normalize<V: AsSlice<u8>>(v: V) -> Vec<u8> {\n+    fn normalize<Sized? V: AsSlice<u8>>(v: &V) -> Vec<u8> {\n         // borrowck is being very picky\n         let val = {\n             let is_abs = !v.as_slice().is_empty() && v.as_slice()[0] == SEP_BYTE;"}]}