{"sha": "ac8c98da8e806a7e18dcc0cee8201085e5c7abb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOGM5OGRhOGU4MDZhN2UxOGRjYzBjZWU4MjAxMDg1ZTVjN2FiYjY=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-03-29T06:38:34Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T15:37:57Z"}, "message": "Store layouts of i32 and u32 inside Evaluator", "tree": {"sha": "9767e5279d9491a34e05afa20eab14c3bd04f782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9767e5279d9491a34e05afa20eab14c3bd04f782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6", "html_url": "https://github.com/rust-lang/rust/commit/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8293d80b53a60121961027c3ba8e29823b153179", "url": "https://api.github.com/repos/rust-lang/rust/commits/8293d80b53a60121961027c3ba8e29823b153179", "html_url": "https://github.com/rust-lang/rust/commit/8293d80b53a60121961027c3ba8e29823b153179"}], "stats": {"total": 100, "additions": 75, "deletions": 25}, "files": [{"sha": "82ac2e8d21883ae9b7fd575aa4e511688b2b7a0c", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ac8c98da8e806a7e18dcc0cee8201085e5c7abb6", "patch": "@@ -51,8 +51,9 @@ pub use crate::diagnostics::{\n pub use crate::eval::{create_ecx, eval_main, MiriConfig};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n pub use crate::machine::{\n-    AllocExtra, Evaluator, FrameData, MemoryExtra, MiriEvalContext, MiriEvalContextExt,\n-    MiriMemoryKind, NUM_CPUS, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n+    AllocExtra, EvalContextExt as MachineEvalContextExt, Evaluator, FrameData, MemoryExtra,\n+    MiriEvalContext, MiriEvalContextExt, MiriMemoryKind, NUM_CPUS, PAGE_SIZE, STACK_ADDR,\n+    STACK_SIZE,\n };\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;"}, {"sha": "a60ae8a4be21ced6f3a3b9127a4e7bfb83e02461", "filename": "src/machine.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ac8c98da8e806a7e18dcc0cee8201085e5c7abb6", "patch": "@@ -11,7 +11,7 @@ use log::trace;\n use rand::rngs::StdRng;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_middle::{mir, ty};\n+use rustc_middle::{mir, ty::{self, layout::TyAndLayout}};\n use rustc_target::abi::{LayoutOf, Size};\n use rustc_ast::attr;\n use rustc_span::symbol::{sym, Symbol};\n@@ -146,6 +146,39 @@ impl MemoryExtra {\n     }\n }\n \n+/// Cached layouts of primitive types\n+#[derive(Default)]\n+struct PrimitiveLayouts<'tcx> {\n+    i32: RefCell<Option<TyAndLayout<'tcx>>>,\n+    u32: RefCell<Option<TyAndLayout<'tcx>>>,\n+}\n+\n+impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n+    fn i32(&self, ecx: &MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n+        {\n+            let layout_ref = self.i32.borrow();\n+            if layout_ref.is_some() {\n+                return Ok(layout_ref.unwrap());\n+            }\n+        }\n+        let layout = ecx.layout_of(ecx.tcx.types.i32)?;\n+        *self.i32.borrow_mut() = Some(layout);\n+        Ok(layout)\n+    }\n+\n+    fn u32(&self, ecx: &MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n+        {\n+            let layout_ref = self.u32.borrow();\n+            if layout_ref.is_some() {\n+                return Ok(layout_ref.unwrap());\n+            }\n+        }\n+        let layout = ecx.layout_of(ecx.tcx.types.u32)?;\n+        *self.u32.borrow_mut() = Some(layout);\n+        Ok(layout)\n+    }\n+}\n+\n /// The machine itself.\n pub struct Evaluator<'tcx> {\n     /// Environment variables set by `setenv`.\n@@ -182,6 +215,9 @@ pub struct Evaluator<'tcx> {\n \n     /// The \"time anchor\" for this machine's monotone clock (for `Instant` simulation).\n     pub(crate) time_anchor: Instant,\n+\n+    /// Cached `TyLayout`s for primitive data types that are commonly used inside Miri.\n+    primitive_layouts: PrimitiveLayouts<'tcx>,\n }\n \n impl<'tcx> Evaluator<'tcx> {\n@@ -201,6 +237,7 @@ impl<'tcx> Evaluator<'tcx> {\n             dir_handler: Default::default(),\n             panic_payload: None,\n             time_anchor: Instant::now(),\n+            primitive_layouts: PrimitiveLayouts::default(),\n         }\n     }\n }\n@@ -224,6 +261,20 @@ impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx>\n     }\n }\n \n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {}\n+/// Provides convenience methods for use elsewhere\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n+    fn i32_layout(&self) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n+        let this = self.eval_context_ref();\n+        this.machine.primitive_layouts.i32(this)\n+    }\n+\n+    fn u32_layout(&self) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n+        let this = self.eval_context_ref();\n+        this.machine.primitive_layouts.u32(this)\n+    }\n+}\n+\n /// Machine hook implementations.\n impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKind = MiriMemoryKind;"}, {"sha": "eac2053493a8cb0b737b6d75bdfd766f17d17102", "filename": "src/shims/sync.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8c98da8e806a7e18dcc0cee8201085e5c7abb6/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=ac8c98da8e806a7e18dcc0cee8201085e5c7abb6", "patch": "@@ -30,8 +30,7 @@ fn mutexattr_get_kind<'mir, 'tcx: 'mir>(\n     // Ensure that the following read at an offset to the attr pointer is within bounds\n     assert_ptr_target_min_size(ecx, attr_op, 4)?;\n     let attr_place = ecx.deref_operand(attr_op)?;\n-    let i32_layout = ecx.layout_of(ecx.tcx.types.i32)?;\n-    let kind_place = attr_place.offset(Size::ZERO, MemPlaceMeta::None, i32_layout, ecx)?;\n+    let kind_place = attr_place.offset(Size::ZERO, MemPlaceMeta::None, ecx.i32_layout()?, ecx)?;\n     ecx.read_scalar(kind_place.into())\n }\n \n@@ -43,8 +42,7 @@ fn mutexattr_set_kind<'mir, 'tcx: 'mir>(\n     // Ensure that the following write at an offset to the attr pointer is within bounds\n     assert_ptr_target_min_size(ecx, attr_op, 4)?;\n     let attr_place = ecx.deref_operand(attr_op)?;\n-    let i32_layout = ecx.layout_of(ecx.tcx.types.i32)?;\n-    let kind_place = attr_place.offset(Size::ZERO, MemPlaceMeta::None, i32_layout, ecx)?;\n+    let kind_place = attr_place.offset(Size::ZERO, MemPlaceMeta::None, ecx.i32_layout()?, ecx)?;\n     ecx.write_scalar(kind.into(), kind_place.into())\n }\n \n@@ -64,9 +62,8 @@ fn mutex_get_locked_count<'mir, 'tcx: 'mir>(\n     // Ensure that the following read at an offset to the mutex pointer is within bounds\n     assert_ptr_target_min_size(ecx, mutex_op, 20)?;\n     let mutex_place = ecx.deref_operand(mutex_op)?;\n-    let u32_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n     let locked_count_place =\n-        mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, ecx)?;\n+        mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, ecx.u32_layout()?, ecx)?;\n     ecx.read_scalar(locked_count_place.into())\n }\n \n@@ -78,9 +75,8 @@ fn mutex_set_locked_count<'mir, 'tcx: 'mir>(\n     // Ensure that the following write at an offset to the mutex pointer is within bounds\n     assert_ptr_target_min_size(ecx, mutex_op, 20)?;\n     let mutex_place = ecx.deref_operand(mutex_op)?;\n-    let u32_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n     let locked_count_place =\n-        mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, ecx)?;\n+        mutex_place.offset(Size::from_bytes(4), MemPlaceMeta::None, ecx.u32_layout()?, ecx)?;\n     ecx.write_scalar(locked_count.into(), locked_count_place.into())\n }\n \n@@ -91,10 +87,13 @@ fn mutex_get_kind<'mir, 'tcx: 'mir>(\n     // Ensure that the following read at an offset to the mutex pointer is within bounds\n     assert_ptr_target_min_size(ecx, mutex_op, 20)?;\n     let mutex_place = ecx.deref_operand(mutex_op)?;\n-    let i32_layout = ecx.layout_of(ecx.tcx.types.i32)?;\n     let kind_offset = if ecx.pointer_size().bytes() == 8 { 16 } else { 12 };\n-    let kind_place =\n-        mutex_place.offset(Size::from_bytes(kind_offset), MemPlaceMeta::None, i32_layout, ecx)?;\n+    let kind_place = mutex_place.offset(\n+        Size::from_bytes(kind_offset),\n+        MemPlaceMeta::None,\n+        ecx.i32_layout()?,\n+        ecx,\n+    )?;\n     ecx.read_scalar(kind_place.into())\n }\n \n@@ -106,10 +105,13 @@ fn mutex_set_kind<'mir, 'tcx: 'mir>(\n     // Ensure that the following write at an offset to the mutex pointer is within bounds\n     assert_ptr_target_min_size(ecx, mutex_op, 20)?;\n     let mutex_place = ecx.deref_operand(mutex_op)?;\n-    let i32_layout = ecx.layout_of(ecx.tcx.types.i32)?;\n     let kind_offset = if ecx.pointer_size().bytes() == 8 { 16 } else { 12 };\n-    let kind_place =\n-        mutex_place.offset(Size::from_bytes(kind_offset), MemPlaceMeta::None, i32_layout, ecx)?;\n+    let kind_place = mutex_place.offset(\n+        Size::from_bytes(kind_offset),\n+        MemPlaceMeta::None,\n+        ecx.i32_layout()?,\n+        ecx,\n+    )?;\n     ecx.write_scalar(kind.into(), kind_place.into())\n }\n \n@@ -128,9 +130,8 @@ fn rwlock_get_readers<'mir, 'tcx: 'mir>(\n     // Ensure that the following read at an offset to the rwlock pointer is within bounds\n     assert_ptr_target_min_size(ecx, rwlock_op, 12)?;\n     let rwlock_place = ecx.deref_operand(rwlock_op)?;\n-    let u32_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n     let readers_place =\n-        rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, ecx)?;\n+        rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, ecx.u32_layout()?, ecx)?;\n     ecx.read_scalar(readers_place.into())\n }\n \n@@ -142,9 +143,8 @@ fn rwlock_set_readers<'mir, 'tcx: 'mir>(\n     // Ensure that the following write at an offset to the rwlock pointer is within bounds\n     assert_ptr_target_min_size(ecx, rwlock_op, 12)?;\n     let rwlock_place = ecx.deref_operand(rwlock_op)?;\n-    let u32_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n     let readers_place =\n-        rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, u32_layout, ecx)?;\n+        rwlock_place.offset(Size::from_bytes(4), MemPlaceMeta::None, ecx.u32_layout()?, ecx)?;\n     ecx.write_scalar(readers.into(), readers_place.into())\n }\n \n@@ -155,9 +155,8 @@ fn rwlock_get_writers<'mir, 'tcx: 'mir>(\n     // Ensure that the following read at an offset to the rwlock pointer is within bounds\n     assert_ptr_target_min_size(ecx, rwlock_op, 12)?;\n     let rwlock_place = ecx.deref_operand(rwlock_op)?;\n-    let u32_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n     let writers_place =\n-        rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, u32_layout, ecx)?;\n+        rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, ecx.u32_layout()?, ecx)?;\n     ecx.read_scalar(writers_place.into())\n }\n \n@@ -169,9 +168,8 @@ fn rwlock_set_writers<'mir, 'tcx: 'mir>(\n     // Ensure that the following write at an offset to the rwlock pointer is within bounds\n     assert_ptr_target_min_size(ecx, rwlock_op, 12)?;\n     let rwlock_place = ecx.deref_operand(rwlock_op)?;\n-    let u32_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n     let writers_place =\n-        rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, u32_layout, ecx)?;\n+        rwlock_place.offset(Size::from_bytes(8), MemPlaceMeta::None, ecx.u32_layout()?, ecx)?;\n     ecx.write_scalar(writers.into(), writers_place.into())\n }\n "}]}