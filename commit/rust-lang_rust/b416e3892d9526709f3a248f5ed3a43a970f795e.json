{"sha": "b416e3892d9526709f3a248f5ed3a43a970f795e", "node_id": "C_kwDOAAsO6NoAKGI0MTZlMzg5MmQ5NTI2NzA5ZjNhMjQ4ZjVlZDNhNDNhOTcwZjc5NWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-13T20:11:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-13T20:11:58Z"}, "message": "Auto merge of #90385 - mfrw:mfrw/librustdoc, r=GuillaumeGomez\n\nrustdoc: use Type::def_id() instead of Type::def_id_no_primitives()\n\nFor: #90187\n\nr? `@jyn514`", "tree": {"sha": "0a4ffa3452dfde8e53b05268ee74f9a74503bf5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a4ffa3452dfde8e53b05268ee74f9a74503bf5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b416e3892d9526709f3a248f5ed3a43a970f795e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b416e3892d9526709f3a248f5ed3a43a970f795e", "html_url": "https://github.com/rust-lang/rust/commit/b416e3892d9526709f3a248f5ed3a43a970f795e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b416e3892d9526709f3a248f5ed3a43a970f795e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d212d902ae8d29e31b32641096f7848a4bb35522", "url": "https://api.github.com/repos/rust-lang/rust/commits/d212d902ae8d29e31b32641096f7848a4bb35522", "html_url": "https://github.com/rust-lang/rust/commit/d212d902ae8d29e31b32641096f7848a4bb35522"}, {"sha": "5cfc7ce3372852b76dce6e6354faa3e7f0bf8598", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfc7ce3372852b76dce6e6354faa3e7f0bf8598", "html_url": "https://github.com/rust-lang/rust/commit/5cfc7ce3372852b76dce6e6354faa3e7f0bf8598"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "05d8b643f502b5e6fa2ecd3d9d37420838ba0c42", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b416e3892d9526709f3a248f5ed3a43a970f795e/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b416e3892d9526709f3a248f5ed3a43a970f795e/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=b416e3892d9526709f3a248f5ed3a43a970f795e", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             desc,\n                             parent,\n                             parent_idx: None,\n-                            search_type: get_index_search_type(&item, self.tcx),\n+                            search_type: get_index_search_type(&item, self.tcx, self.cache),\n                             aliases: item.attrs.get_doc_aliases(),\n                         });\n                     }"}, {"sha": "b52369773fefa79144767100fdc03c1d180ff73e", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b416e3892d9526709f3a248f5ed3a43a970f795e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b416e3892d9526709f3a248f5ed3a43a970f795e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=b416e3892d9526709f3a248f5ed3a43a970f795e", "patch": "@@ -42,7 +42,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 desc,\n                 parent: Some(did),\n                 parent_idx: None,\n-                search_type: get_index_search_type(item, tcx),\n+                search_type: get_index_search_type(item, tcx, cache),\n                 aliases: item.attrs.get_doc_aliases(),\n             });\n         }\n@@ -194,11 +194,12 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n crate fn get_index_search_type<'tcx>(\n     item: &clean::Item,\n     tcx: TyCtxt<'tcx>,\n+    cache: &Cache,\n ) -> Option<IndexItemFunctionType> {\n     let (mut inputs, mut output) = match *item.kind {\n-        clean::FunctionItem(ref f) => get_all_types(&f.generics, &f.decl, tcx),\n-        clean::MethodItem(ref m, _) => get_all_types(&m.generics, &m.decl, tcx),\n-        clean::TyMethodItem(ref m) => get_all_types(&m.generics, &m.decl, tcx),\n+        clean::FunctionItem(ref f) => get_all_types(&f.generics, &f.decl, tcx, cache),\n+        clean::MethodItem(ref m, _) => get_all_types(&m.generics, &m.decl, tcx, cache),\n+        clean::TyMethodItem(ref m) => get_all_types(&m.generics, &m.decl, tcx, cache),\n         _ => return None,\n     };\n \n@@ -254,12 +255,14 @@ crate fn get_real_types<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     recurse: usize,\n     res: &mut Vec<TypeWithKind>,\n+    cache: &Cache,\n ) {\n     fn insert_ty(\n         res: &mut Vec<TypeWithKind>,\n         tcx: TyCtxt<'_>,\n         ty: Type,\n         mut generics: Vec<TypeWithKind>,\n+        _cache: &Cache,\n     ) {\n         let is_full_generic = ty.is_full_generic();\n \n@@ -350,23 +353,30 @@ crate fn get_real_types<'tcx>(\n                             continue;\n                         }\n                         if let Some(ty) = x.get_type() {\n-                            get_real_types(generics, &ty, tcx, recurse + 1, &mut ty_generics);\n+                            get_real_types(\n+                                generics,\n+                                &ty,\n+                                tcx,\n+                                recurse + 1,\n+                                &mut ty_generics,\n+                                cache,\n+                            );\n                         }\n                     }\n                 }\n             }\n-            insert_ty(res, tcx, arg.clone(), ty_generics);\n+            insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n         }\n         // Otherwise we check if the trait bounds are \"inlined\" like `T: Option<u32>`...\n         if let Some(bound) = generics.params.iter().find(|g| g.is_type() && g.name == arg_s) {\n             let mut ty_generics = Vec::new();\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n                 if let Some(path) = bound.get_trait_path() {\n                     let ty = Type::ResolvedPath { did: path.def_id(), path };\n-                    get_real_types(generics, &ty, tcx, recurse + 1, &mut ty_generics);\n+                    get_real_types(generics, &ty, tcx, recurse + 1, &mut ty_generics, cache);\n                 }\n             }\n-            insert_ty(res, tcx, arg.clone(), ty_generics);\n+            insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n         }\n     } else {\n         // This is not a type parameter. So for example if we have `T, U: Option<T>`, and we're\n@@ -377,10 +387,10 @@ crate fn get_real_types<'tcx>(\n         let mut ty_generics = Vec::new();\n         if let Some(arg_generics) = arg.generics() {\n             for gen in arg_generics.iter() {\n-                get_real_types(generics, gen, tcx, recurse + 1, &mut ty_generics);\n+                get_real_types(generics, gen, tcx, recurse + 1, &mut ty_generics, cache);\n             }\n         }\n-        insert_ty(res, tcx, arg.clone(), ty_generics);\n+        insert_ty(res, tcx, arg.clone(), ty_generics, cache);\n     }\n }\n \n@@ -392,6 +402,7 @@ crate fn get_all_types<'tcx>(\n     generics: &Generics,\n     decl: &FnDecl,\n     tcx: TyCtxt<'tcx>,\n+    cache: &Cache,\n ) -> (Vec<TypeWithKind>, Vec<TypeWithKind>) {\n     let mut all_types = Vec::new();\n     for arg in decl.inputs.values.iter() {\n@@ -401,7 +412,7 @@ crate fn get_all_types<'tcx>(\n         // FIXME: performance wise, it'd be much better to move `args` declaration outside of the\n         // loop and replace this line with `args.clear()`.\n         let mut args = Vec::new();\n-        get_real_types(generics, &arg.type_, tcx, 0, &mut args);\n+        get_real_types(generics, &arg.type_, tcx, 0, &mut args, cache);\n         if !args.is_empty() {\n             // FIXME: once back to performance improvements, replace this line with:\n             // `all_types.extend(args.drain(..));`.\n@@ -417,7 +428,7 @@ crate fn get_all_types<'tcx>(\n     let mut ret_types = Vec::new();\n     match decl.output {\n         FnRetTy::Return(ref return_type) => {\n-            get_real_types(generics, return_type, tcx, 0, &mut ret_types);\n+            get_real_types(generics, return_type, tcx, 0, &mut ret_types, cache);\n             if ret_types.is_empty() {\n                 if let Some(kind) =\n                     return_type.def_id_no_primitives().map(|did| tcx.def_kind(did).into())"}, {"sha": "e7904aeedd49611b291b4ac730a801b45d57b1a3", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b416e3892d9526709f3a248f5ed3a43a970f795e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b416e3892d9526709f3a248f5ed3a43a970f795e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b416e3892d9526709f3a248f5ed3a43a970f795e", "patch": "@@ -2166,7 +2166,7 @@ fn sidebar_deref_methods(\n         }\n \n         // Recurse into any further impls that might exist for `target`\n-        if let Some(target_did) = target.def_id_no_primitives() {\n+        if let Some(target_did) = target.def_id(c) {\n             if let Some(target_impls) = c.impls.get(&target_did) {\n                 if let Some(target_deref_impl) = target_impls.iter().find(|i| {\n                     i.inner_impl()"}, {"sha": "8524f872ca36487d87c779b2acc632ac41d3d7c9", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b416e3892d9526709f3a248f5ed3a43a970f795e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b416e3892d9526709f3a248f5ed3a43a970f795e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=b416e3892d9526709f3a248f5ed3a43a970f795e", "patch": "@@ -57,6 +57,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n \n     // Follow all `Deref` targets of included items and recursively add them as valid\n     fn add_deref_target(\n+        cx: &DocContext<'_>,\n         map: &FxHashMap<DefId, &Type>,\n         cleaner: &mut BadImplStripper,\n         type_did: DefId,\n@@ -65,14 +66,14 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n             debug!(\"add_deref_target: type {:?}, target {:?}\", type_did, target);\n             if let Some(target_prim) = target.primitive_type() {\n                 cleaner.prims.insert(target_prim);\n-            } else if let Some(target_did) = target.def_id_no_primitives() {\n+            } else if let Some(target_did) = target.def_id(&cx.cache) {\n                 // `impl Deref<Target = S> for S`\n                 if target_did == type_did {\n                     // Avoid infinite cycles\n                     return;\n                 }\n                 cleaner.items.insert(target_did.into());\n-                add_deref_target(map, cleaner, target_did);\n+                add_deref_target(cx, map, cleaner, target_did);\n             }\n         }\n     }\n@@ -102,7 +103,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n                         // `Deref` target type and the impl for type positions, this map of types is keyed by\n                         // `DefId` and for convenience uses a special cleaner that accepts `DefId`s directly.\n                         if cleaner.keep_impl_with_def_id(for_did.into()) {\n-                            add_deref_target(&type_did_to_deref_target, &mut cleaner, for_did);\n+                            add_deref_target(cx, &type_did_to_deref_target, &mut cleaner, for_did);\n                         }\n                     }\n                 }"}]}