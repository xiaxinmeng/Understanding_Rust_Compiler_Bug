{"sha": "b6eef82c684268bd719d3ced4f4cca69b014aaff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZWVmODJjNjg0MjY4YmQ3MTlkM2NlZDRmNGNjYTY5YjAxNGFhZmY=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-06T15:26:41Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-06T15:54:58Z"}, "message": "Rename variables", "tree": {"sha": "883b1c12b5a05233d1ffdc30a7164a829f2dcab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/883b1c12b5a05233d1ffdc30a7164a829f2dcab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6eef82c684268bd719d3ced4f4cca69b014aaff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6eef82c684268bd719d3ced4f4cca69b014aaff", "html_url": "https://github.com/rust-lang/rust/commit/b6eef82c684268bd719d3ced4f4cca69b014aaff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6eef82c684268bd719d3ced4f4cca69b014aaff/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8782d0fe78762db6c8cf750cc9707ede94026832", "url": "https://api.github.com/repos/rust-lang/rust/commits/8782d0fe78762db6c8cf750cc9707ede94026832", "html_url": "https://github.com/rust-lang/rust/commit/8782d0fe78762db6c8cf750cc9707ede94026832"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "115782ca2ade1e2251c071d90a4ca12ee6a78824", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b6eef82c684268bd719d3ced4f4cca69b014aaff/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6eef82c684268bd719d3ced4f4cca69b014aaff/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b6eef82c684268bd719d3ced4f4cca69b014aaff", "patch": "@@ -711,38 +711,38 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            OutputTypeParameterMismatch(ref expected_trait_ref, ref actual_trait_ref, _) => {\n+            OutputTypeParameterMismatch(ref found_trait_ref, ref expected_trait_ref, _) => {\n+                let found_trait_ref = self.resolve_type_vars_if_possible(&*found_trait_ref);\n                 let expected_trait_ref = self.resolve_type_vars_if_possible(&*expected_trait_ref);\n-                let actual_trait_ref = self.resolve_type_vars_if_possible(&*actual_trait_ref);\n-                if actual_trait_ref.self_ty().references_error() {\n+                if expected_trait_ref.self_ty().references_error() {\n                     return;\n                 }\n-                let expected_trait_ty = expected_trait_ref.self_ty();\n+                let found_trait_ty = found_trait_ref.self_ty();\n \n-                let found_did = expected_trait_ty.ty_to_def_id();\n+                let found_did = found_trait_ty.ty_to_def_id();\n                 let found_span = found_did.and_then(|did| {\n                     self.tcx.hir.span_if_local(did)\n                 });\n \n-                let self_ty_count =\n-                    match expected_trait_ref.skip_binder().substs.type_at(1).sty {\n+                let found_ty_count =\n+                    match found_trait_ref.skip_binder().substs.type_at(1).sty {\n                         ty::TyTuple(ref tys, _) => tys.len(),\n                         _ => 1,\n                     };\n-                let (arg_tys, arg_ty_count) =\n-                    match actual_trait_ref.skip_binder().substs.type_at(1).sty {\n+                let (expected_tys, expected_ty_count) =\n+                    match expected_trait_ref.skip_binder().substs.type_at(1).sty {\n                         ty::TyTuple(ref tys, _) =>\n                             (tys.iter().map(|t| &t.sty).collect(), tys.len()),\n                         ref sty => (vec![sty], 1),\n                     };\n-                if self_ty_count == arg_ty_count {\n+                if found_ty_count == expected_ty_count {\n                     self.report_closure_arg_mismatch(span,\n                                                      found_span,\n-                                                     expected_trait_ref,\n-                                                     actual_trait_ref)\n+                                                     found_trait_ref,\n+                                                     expected_trait_ref)\n                 } else {\n-                    let arg_tuple = if arg_ty_count == 1 {\n-                        arg_tys.first().and_then(|t| {\n+                    let expected_tuple = if expected_ty_count == 1 {\n+                        expected_tys.first().and_then(|t| {\n                             if let &&ty::TyTuple(ref tuptys, _) = t {\n                                 Some(tuptys.len())\n                             } else {\n@@ -753,15 +753,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         None\n                     };\n \n-                    // FIXME(#44150): Expand this to \"N args expected bug a N-tuple found\".\n+                    // FIXME(#44150): Expand this to \"N args expected but a N-tuple found.\"\n                     // Type of the 1st expected argument is somehow provided as type of a\n                     // found one in that case.\n                     //\n                     // ```\n                     // [1i32, 2, 3].sort_by(|(a, b)| ..)\n                     // //                   ^^^^^^^^\n-                    // //   actual_trait_ref:  std::ops::FnMut<(&i32, &i32)>\n-                    // // expected_trait_ref:  std::ops::FnMut<(&i32,)>\n+                    // // expected_trait_ref:  std::ops::FnMut<(&i32, &i32)>\n+                    // //    found_trait_ref:  std::ops::FnMut<(&i32,)>\n                     // ```\n \n                     let closure_args_span = found_did.and_then(|did| self.tcx.hir.get_if_local(did))\n@@ -778,10 +778,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     self.report_arg_count_mismatch(\n                         span,\n                         closure_args_span.or(found_span),\n-                        arg_ty_count,\n-                        arg_tuple,\n-                        self_ty_count,\n-                        expected_trait_ty.is_closure()\n+                        expected_ty_count,\n+                        expected_tuple,\n+                        found_ty_count,\n+                        found_trait_ty.is_closure()\n                     )\n                 }\n             }"}]}