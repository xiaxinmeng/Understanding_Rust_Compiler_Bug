{"sha": "2c033f83ef0819931566462642253fc89ee47189", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMDMzZjgzZWYwODE5OTMxNTY2NDYyNjQyMjUzZmM4OWVlNDcxODk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-04T11:23:35Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-04T11:23:35Z"}, "message": "Fill in the tutorial section on testing", "tree": {"sha": "2c7df78b0283ebdb9a7941c89af496dbf8b89011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7df78b0283ebdb9a7941c89af496dbf8b89011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c033f83ef0819931566462642253fc89ee47189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c033f83ef0819931566462642253fc89ee47189", "html_url": "https://github.com/rust-lang/rust/commit/2c033f83ef0819931566462642253fc89ee47189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c033f83ef0819931566462642253fc89ee47189/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af1ce1f3ded07833d8c5d5d455285fa4a5c800d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/af1ce1f3ded07833d8c5d5d455285fa4a5c800d3", "html_url": "https://github.com/rust-lang/rust/commit/af1ce1f3ded07833d8c5d5d455285fa4a5c800d3"}], "stats": {"total": 91, "additions": 82, "deletions": 9}, "files": [{"sha": "d2c36bcb35e8ba32400ef4704af3376a64a1aee0", "filename": "doc/tutorial/syntax.md", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c033f83ef0819931566462642253fc89ee47189/doc%2Ftutorial%2Fsyntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c033f83ef0819931566462642253fc89ee47189/doc%2Ftutorial%2Fsyntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fsyntax.md?ref=2c033f83ef0819931566462642253fc89ee47189", "patch": "@@ -281,6 +281,8 @@ exists, convert the result of the expression to the given type.\n \n ## Attributes\n \n+<a name=\"conditional></a>\n+\n Every definition can be annotated with attributes. Attributes are meta\n information that can serve a variety of purposes. One of those is\n conditional compilation:\n@@ -289,14 +291,20 @@ conditional compilation:\n     fn register_win_service() { /* ... */ }\n \n This will cause the function to vanish without a trace during\n-compilation on a non-Windows platform. Attributes always look like\n-`#[attr]`, where `attr` can be simply a name (as in `#[test]`, which\n-is used by the [built-in test framework](test.html)), a name followed\n-by `=` and then a literal (as in `#[license = \"BSD\"]`, which is a\n-valid way to annotate a Rust program as being released under a\n-BSD-style license), or a name followed by a comma-separated list of\n-nested attributes, as in the `cfg` example above, or in this\n-[crate](mod.html) metadata declaration:\n+compilation on a non-Windows platform, much like `#ifdef` in C (it\n+allows `cfg(flag=value)` and `cfg(flag)` forms, where the second\n+simply checks whether the configuration flag is defined at all). Flags\n+for `target_os` and `target_arch` are set by the compiler. It is\n+possible to set additional flags with the `--cfg` command-line option.\n+\n+Attributes always look like `#[attr]`, where `attr` can be simply a\n+name (as in `#[test]`, which is used by the [built-in test\n+framework](test.html)), a name followed by `=` and then a literal (as\n+in `#[license = \"BSD\"]`, which is a valid way to annotate a Rust\n+program as being released under a BSD-style license), or a name\n+followed by a comma-separated list of nested attributes, as in the\n+`cfg` example above, or in this [crate](mod.html) metadata\n+declaration:\n \n     #[link(name = \"std\",\n            vers = \"0.1\","}, {"sha": "b7185c51085ba8b6cc90eb8749dcf21d45d1ac90", "filename": "doc/tutorial/test.md", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2c033f83ef0819931566462642253fc89ee47189/doc%2Ftutorial%2Ftest.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c033f83ef0819931566462642253fc89ee47189/doc%2Ftutorial%2Ftest.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Ftest.md?ref=2c033f83ef0819931566462642253fc89ee47189", "patch": "@@ -1,3 +1,68 @@\n # Testing\n \n-FIXME to be written\n+The Rust language has a facility for testing built into the language.\n+Tests can be interspersed with other code, and annotated with the\n+`#[test]` attribute.\n+\n+    use std;\n+    \n+    fn twice(x: int) -> int { x + x }\n+    \n+    #[test]\n+    fn test_twice() {\n+        let i = -100;\n+        while i < 100 {\n+            assert twice(i) == 2 * i;\n+            i += 1;\n+        }\n+    }\n+\n+When you compile the program normally, the `test_twice` function will\n+not be used. To actually run the tests, compile with the `--test`\n+flag:\n+\n+    > rustc --lib twice.rs\n+    > ./twice\n+    running 1 tests\n+    test test_twice ... ok\n+    result: ok. 1 passed; 0 failed; 0 ignored\n+\n+Or, if we change the file to fail, for example by replacing `x + x`\n+with `x + 1`:\n+\n+    running 1 tests\n+    test test_twice ... FAILED\n+    failures:\n+        test_twice\n+    result: FAILED. 0 passed; 1 failed; 0 ignored\n+\n+You can pass a command-line argument to a program compiled with\n+`--test` to run only the tests whose name matches the given string. If\n+we had, for example, test functions `test_twice`, `test_once_1`, and\n+`test_once_2`, running our program with `./twice test_once` would run\n+the latter two, and running it with `./twice test_once_2` would run\n+only the last.\n+\n+To indicate that a test is supposed to fail instead of pass, you can\n+give it a `#[should_fail]` attribute.\n+\n+    use std;\n+    \n+    fn divide(a: float, b: float) -> float {\n+        if b == 0f { fail; }\n+        a / b\n+    }\n+    \n+    #[test]\n+    #[should_fail]\n+    fn divide_by_zero() { divide(1f, 0f); }\n+\n+To disable a test completely, add an `#[ignore]` attribute. Running a\n+test runner (the program compiled with `--test`) with an `--ignored`\n+command-line flag will cause it to also run the tests labelled as\n+ignored.\n+\n+A program compiled as a test runner will have the configuration flag\n+`test` defined, so that you can add code that won't be included in a\n+normal compile with the `#[cfg(test)]` attribute (see [conditional\n+compilation](syntax.md#conditional))."}]}