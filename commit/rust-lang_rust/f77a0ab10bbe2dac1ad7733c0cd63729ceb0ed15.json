{"sha": "f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3N2EwYWIxMGJiZTJkYWMxYWQ3NzMzYzBjZDYzNzI5Y2ViMGVkMTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-15T14:18:49Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-15T14:18:49Z"}, "message": "fix writing int->ptr transmuted primvals to memory", "tree": {"sha": "5eeccee07a7df6ce90b990ca8690f92346109e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eeccee07a7df6ce90b990ca8690f92346109e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYKxlJAAoJEFbW7qD8Z6xGJBwP/ja1E1Wr3l4BoIhlHSrZelhN\nEROWZq6aLFyy9sxsebW+YSfy0v8dsDNBxWEdxl/d7LLFKg8UtY3XUSCmK9UCo8Wm\nhv52H4u3q7cJsBHRCE6WJESUFF5+pDH53hANVpPd1oCY7Asc7/+QOJ3pftKVn2gX\nQje0kngaw7V2Gdu5JlzSCuBulvyrYViBf3XbioMIB30COUx6zsYguTG1CCaNmL7B\nGFcIl5//SGybBphkWVUaPpTNRKOhKbETiYaAFz/ESWrOLtliKilMlmZ/rLuk0/3R\nDmS+icA4XjH/ggZpUlcdDvZKTI3Mp8uCZLqdBb7zAiLl39Dtr2qM5EnZRtBAq5LF\njMpBu74FfLblXp+48GTK/g++G0y7Z9qJvbw+/JMmAchYXASUJH5njNzPhFNLxDC8\nmO/ys+uZek/y5xkr8yl/ekY+vbovL5cGnkTIc68IvG4RZmkYkkMhYgMpTxJt4qSS\n7OJeskUg9LxlfmUyARvkmE4t67B4iXnuFOI33YhuUQoB2CobLP6pVV5bGz0pK+4j\naWRsIEnyT3gFtwKFVqIZrfnn/NzO+LC3UIcAJFyu0kf5oDEMVOwLYG2WjUbybdxh\n+eSd9DWBnN/H4v3/D4gl/MX8/YcdY89wRnW3R7PZ7pR45bboAUOwVbLlh7oH+7yj\nCta1vdQCa1ziRKphmo+w\n=2IWA\n-----END PGP SIGNATURE-----", "payload": "tree 5eeccee07a7df6ce90b990ca8690f92346109e49\nparent 13f22f8344f2ac149ecb5d6d817f208e99926ba1\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479219529 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479219529 +0100\n\nfix writing int->ptr transmuted primvals to memory"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15", "html_url": "https://github.com/rust-lang/rust/commit/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f22f8344f2ac149ecb5d6d817f208e99926ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f22f8344f2ac149ecb5d6d817f208e99926ba1", "html_url": "https://github.com/rust-lang/rust/commit/13f22f8344f2ac149ecb5d6d817f208e99926ba1"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "8bb39d5167f34c597a93cc3cfd43dfbb91910464", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15", "patch": "@@ -543,7 +543,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             I16 | U16              => (2, val.bits as u16 as u64),\n             I32 | U32 | F32 | Char => (4, val.bits as u32 as u64),\n             I64 | U64 | F64        => (8, val.bits),\n-            FnPtr | Ptr            => bug!(\"handled above\"),\n+            // int -> ptr transmutes are handled here\n+            FnPtr | Ptr            => return self.write_usize(dest, val.bits),\n         };\n \n         self.write_uint(dest, bits, size)"}, {"sha": "9466f115b1a50d69b97e6e5d5f342cf2e2da0b39", "filename": "tests/run-pass/binops.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15/tests%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15/tests%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbinops.rs?ref=f77a0ab10bbe2dac1ad7733c0cd63729ceb0ed15", "patch": "@@ -0,0 +1,96 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Binop corner cases\n+\n+fn test_nil() {\n+    assert_eq!((), ());\n+    assert!((!(() != ())));\n+    assert!((!(() < ())));\n+    assert!((() <= ()));\n+    assert!((!(() > ())));\n+    assert!((() >= ()));\n+}\n+\n+fn test_bool() {\n+    assert!((!(true < false)));\n+    assert!((!(true <= false)));\n+    assert!((true > false));\n+    assert!((true >= false));\n+\n+    assert!((false < true));\n+    assert!((false <= true));\n+    assert!((!(false > true)));\n+    assert!((!(false >= true)));\n+\n+    // Bools support bitwise binops\n+    assert_eq!(false & false, false);\n+    assert_eq!(true & false, false);\n+    assert_eq!(true & true, true);\n+    assert_eq!(false | false, false);\n+    assert_eq!(true | false, true);\n+    assert_eq!(true | true, true);\n+    assert_eq!(false ^ false, false);\n+    assert_eq!(true ^ false, true);\n+    assert_eq!(true ^ true, false);\n+}\n+\n+fn test_ptr() {\n+    unsafe {\n+        let p1: *const u8 = ::std::mem::transmute(0_usize);\n+        let p2: *const u8 = ::std::mem::transmute(0_usize);\n+        let p3: *const u8 = ::std::mem::transmute(1_usize);\n+\n+        assert_eq!(p1, p2);\n+        assert!(p1 != p3);\n+        assert!(p1 < p3);\n+        assert!(p1 <= p3);\n+        assert!(p3 > p1);\n+        assert!(p3 >= p3);\n+        assert!(p1 <= p2);\n+        assert!(p1 >= p2);\n+    }\n+}\n+\n+#[derive(PartialEq, Debug)]\n+struct P {\n+    x: isize,\n+    y: isize,\n+}\n+\n+fn p(x: isize, y: isize) -> P {\n+    P {\n+        x: x,\n+        y: y\n+    }\n+}\n+\n+fn test_class() {\n+  let q = p(1, 2);\n+  let mut r = p(1, 2);\n+\n+  unsafe {\n+  println!(\"q = {:x}, r = {:x}\",\n+         (::std::mem::transmute::<*const P, usize>(&q)),\n+         (::std::mem::transmute::<*const P, usize>(&r)));\n+  }\n+  assert_eq!(q, r);\n+  r.y = 17;\n+  assert!((r.y != q.y));\n+  assert_eq!(r.y, 17);\n+  assert!((q != r));\n+}\n+\n+pub fn main() {\n+    test_nil();\n+    test_bool();\n+    test_ptr();\n+    test_class();\n+}"}]}