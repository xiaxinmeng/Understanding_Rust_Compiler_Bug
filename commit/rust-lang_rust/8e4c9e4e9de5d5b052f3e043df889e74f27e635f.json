{"sha": "8e4c9e4e9de5d5b052f3e043df889e74f27e635f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNGM5ZTRlOWRlNWQ1YjA1MmYzZTA0M2RmODg5ZTc0ZjI3ZTYzNWY=", "commit": {"author": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2017-08-01T14:06:14Z"}, "committer": {"name": "Isaac van Bakel", "email": "ivb@vanbakel.io", "date": "2017-08-01T22:01:24Z"}, "message": "Fixed interior mutable references causing a mark\n\nThe mutability system now checks where derefs go through borrows in the\nloan chain, and can correctly detect mutable borrows inside structs and\ntuples.", "tree": {"sha": "91c27edf74d72889fb8c816fd3aa2db1493fe935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91c27edf74d72889fb8c816fd3aa2db1493fe935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e4c9e4e9de5d5b052f3e043df889e74f27e635f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4c9e4e9de5d5b052f3e043df889e74f27e635f", "html_url": "https://github.com/rust-lang/rust/commit/8e4c9e4e9de5d5b052f3e043df889e74f27e635f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e4c9e4e9de5d5b052f3e043df889e74f27e635f/comments", "author": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivanbakel", "id": 20319565, "node_id": "MDQ6VXNlcjIwMzE5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/20319565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanbakel", "html_url": "https://github.com/ivanbakel", "followers_url": "https://api.github.com/users/ivanbakel/followers", "following_url": "https://api.github.com/users/ivanbakel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanbakel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanbakel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanbakel/subscriptions", "organizations_url": "https://api.github.com/users/ivanbakel/orgs", "repos_url": "https://api.github.com/users/ivanbakel/repos", "events_url": "https://api.github.com/users/ivanbakel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanbakel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "400075d9d9b6410c9f7952ca52c35806b46b3177", "url": "https://api.github.com/repos/rust-lang/rust/commits/400075d9d9b6410c9f7952ca52c35806b46b3177", "html_url": "https://github.com/rust-lang/rust/commit/400075d9d9b6410c9f7952ca52c35806b46b3177"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "a992cf13b510477d7a9253666e48b29e79069ca5", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8e4c9e4e9de5d5b052f3e043df889e74f27e635f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4c9e4e9de5d5b052f3e043df889e74f27e635f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=8e4c9e4e9de5d5b052f3e043df889e74f27e635f", "patch": "@@ -431,38 +431,45 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n             //    }\n         // }\n     }\n-\n+    \n     pub fn mark_loan_path_as_mutated(&self, loan_path: &LoanPath) {\n         //! For mutable loans of content whose mutability derives\n         //! from a local variable, mark the mutability decl as necessary.\n \n-        match loan_path.kind {\n-            LpVar(local_id) |\n-            LpUpvar(ty::UpvarId{ var_id: local_id, closure_expr_id: _ }) => {\n-                self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n-            }\n-            LpExtend(ref base, mc::McInherited, LpDeref(pointer_kind)) |\n-            LpExtend(ref base, mc::McDeclared, LpDeref(pointer_kind)) => {\n-                match base.kind {\n-                    LpVar(_) if pointer_kind != mc::Unique => {\n-                        // If you mutate the inside of a ref var, the var itself\n-                        // is not used mutably [Issue #25049]\n-                        // Unless it's a Box! (mc::Unique)\n+        let mut wrapped_path = Some(loan_path);\n+        let mut through_borrow = false;\n+\n+        while let Some(current_path) = wrapped_path {\n+            wrapped_path = match current_path.kind {\n+                LpVar(local_id) => {\n+                    if !through_borrow {\n+                        self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n                     }\n-                    _ => {\n-                        self.mark_loan_path_as_mutated(&base);\n+                    None\n+                }\n+                LpUpvar(ty::UpvarId{ var_id: local_id, closure_expr_id: _ }) => {\n+                    self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n+                    None\n+                }\n+                LpExtend(ref base, mc::McInherited, LpDeref(pointer_kind)) |\n+                LpExtend(ref base, mc::McDeclared, LpDeref(pointer_kind)) => {\n+                    if pointer_kind != mc::Unique {\n+                        through_borrow = true;\n                     }\n+                    Some(base)\n                 }\n-            }\n-            LpDowncast(ref base, _) |\n-            LpExtend(ref base, mc::McInherited, _) |\n-            LpExtend(ref base, mc::McDeclared, _) => {\n-                self.mark_loan_path_as_mutated(&base);\n-            }\n-            LpExtend(_, mc::McImmutable, _) => {\n-                // Nothing to do.\n-            }\n+                LpDowncast(ref base, _) |\n+                LpExtend(ref base, mc::McInherited, _) |\n+                LpExtend(ref base, mc::McDeclared, _) => {\n+                    Some(base)\n+                }\n+                LpExtend(_, mc::McImmutable, _) => {\n+                    // Nothing to do.\n+                    None\n+                }\n+            }   \n         }\n+\n     }\n \n     pub fn compute_gen_scope(&self,"}]}