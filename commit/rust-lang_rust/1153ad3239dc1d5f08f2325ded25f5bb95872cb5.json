{"sha": "1153ad3239dc1d5f08f2325ded25f5bb95872cb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNTNhZDMyMzlkYzFkNWYwOGYyMzI1ZGVkMjVmNWJiOTU4NzJjYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-23T20:50:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-23T20:50:57Z"}, "message": "auto merge of #16670 : Swatinem/rust/charascii, r=alexcrichton\n\nI was doing a lot of parsing ascii strings, and the generic bsearch functions in `tables.rs` came up very high in the profile.\r\nThis should avoid calling those functions for simple ASCII range chars.", "tree": {"sha": "a36eb31f3c812d309f6bbdaa907d3a1699cea7fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a36eb31f3c812d309f6bbdaa907d3a1699cea7fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1153ad3239dc1d5f08f2325ded25f5bb95872cb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1153ad3239dc1d5f08f2325ded25f5bb95872cb5", "html_url": "https://github.com/rust-lang/rust/commit/1153ad3239dc1d5f08f2325ded25f5bb95872cb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1153ad3239dc1d5f08f2325ded25f5bb95872cb5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03fd90be459650160a4edefbc78588a938db2f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/03fd90be459650160a4edefbc78588a938db2f8c", "html_url": "https://github.com/rust-lang/rust/commit/03fd90be459650160a4edefbc78588a938db2f8c"}, {"sha": "cb29492e77ff24d56ebc06ecfbd9b2c9bcc6e315", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb29492e77ff24d56ebc06ecfbd9b2c9bcc6e315", "html_url": "https://github.com/rust-lang/rust/commit/cb29492e77ff24d56ebc06ecfbd9b2c9bcc6e315"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "0f75cf86c18da443e3917ac909e17b3354f84ec7", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1153ad3239dc1d5f08f2325ded25f5bb95872cb5/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1153ad3239dc1d5f08f2325ded25f5bb95872cb5/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=1153ad3239dc1d5f08f2325ded25f5bb95872cb5", "patch": "@@ -20,7 +20,13 @@ use tables::{derived_property, property, general_category, conversions, charwidt\n \n /// Returns whether the specified `char` is considered a Unicode alphabetic\n /// code point\n-pub fn is_alphabetic(c: char) -> bool   { derived_property::Alphabetic(c) }\n+pub fn is_alphabetic(c: char) -> bool {\n+    match c {\n+        'a' .. 'z' | 'A' .. 'Z' => true,\n+        c if c > '\\x7f' => derived_property::Alphabetic(c),\n+        _ => false\n+    }\n+}\n \n /// Returns whether the specified `char` satisfies the 'XID_Start' Unicode property\n ///\n@@ -44,15 +50,27 @@ pub fn is_XID_continue(c: char) -> bool { derived_property::XID_Continue(c) }\n /// This is defined according to the terms of the Unicode Derived Core Property 'Lowercase'.\n ///\n #[inline]\n-pub fn is_lowercase(c: char) -> bool { derived_property::Lowercase(c) }\n+pub fn is_lowercase(c: char) -> bool {\n+    match c {\n+        'a' .. 'z' => true,\n+        c if c > '\\x7f' => derived_property::Lowercase(c),\n+        _ => false\n+    }\n+}\n \n ///\n /// Indicates whether a `char` is in upper case\n ///\n /// This is defined according to the terms of the Unicode Derived Core Property 'Uppercase'.\n ///\n #[inline]\n-pub fn is_uppercase(c: char) -> bool { derived_property::Uppercase(c) }\n+pub fn is_uppercase(c: char) -> bool {\n+    match c {\n+        'A' .. 'Z' => true,\n+        c if c > '\\x7f' => derived_property::Uppercase(c),\n+        _ => false\n+    }\n+}\n \n ///\n /// Indicates whether a `char` is whitespace\n@@ -61,10 +79,11 @@ pub fn is_uppercase(c: char) -> bool { derived_property::Uppercase(c) }\n ///\n #[inline]\n pub fn is_whitespace(c: char) -> bool {\n-    // As an optimization ASCII whitespace characters are checked separately\n-    c == ' '\n-        || ('\\x09' <= c && c <= '\\x0d')\n-        || property::White_Space(c)\n+    match c {\n+        ' ' | '\\x09' .. '\\x0d' => true,\n+        c if c > '\\x7f' => property::White_Space(c),\n+        _ => false\n+    }\n }\n \n ///\n@@ -75,8 +94,8 @@ pub fn is_whitespace(c: char) -> bool {\n ///\n #[inline]\n pub fn is_alphanumeric(c: char) -> bool {\n-    derived_property::Alphabetic(c)\n-        || general_category::N(c)\n+    is_alphabetic(c)\n+        || is_digit(c)\n }\n \n ///\n@@ -91,7 +110,11 @@ pub fn is_control(c: char) -> bool { general_category::Cc(c) }\n /// Indicates whether the `char` is numeric (Nd, Nl, or No)\n #[inline]\n pub fn is_digit(c: char) -> bool {\n-    general_category::N(c)\n+    match c {\n+        '0' .. '9' => true,\n+        c if c > '\\x7f' => general_category::N(c),\n+        _ => false\n+    }\n }\n \n /// Convert a char to its uppercase equivalent"}]}