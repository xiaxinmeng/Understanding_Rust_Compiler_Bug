{"sha": "0808ade4e43157f96ddaca8fa39f436038c3ede0", "node_id": "C_kwDOAAsO6NoAKDA4MDhhZGU0ZTQzMTU3Zjk2ZGRhY2E4ZmEzOWY0MzYwMzhjM2VkZTA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-31T11:16:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T11:16:22Z"}, "message": "Merge #11182\n\n11182: fix: don't panic on seeing an unexpected offset r=Veykril a=dimbleby\n\nIntended as a fix, or at least a sticking plaster, for #11081.\r\n\r\nI have arranged that [offset()](https://github.com/rust-analyzer/rust-analyzer/blob/1ba9a924d7b161c52e605e157ee16d582e4a8684/crates/ide_db/src/line_index.rs#L105-L107) returns `Option<TextSize>` instead of going out of bounds; other changes are the result of following the compiler after doing this.\r\n\r\nPerhaps there's still an issue here - I suppose the server and client have gotten out of sync and that probably shouldn't happen in the first place?  I see that https://github.com/rust-analyzer/rust-analyzer/issues/10138#issuecomment-913727554 suggests what sounds like a more substantial fix which I think might be aimed in this direction.  So perhaps that one should be left open to cover such things?\r\n\r\nMeanwhile, I hope that not-crashing is a good improvement: and I can confirm that it works out just fine in the repro I have at #11081.\n\nCo-authored-by: David Hotham <david.hotham@metaswitch.com>", "tree": {"sha": "96b81bfe1964164f3932cf38a32c6f1136bfa323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b81bfe1964164f3932cf38a32c6f1136bfa323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0808ade4e43157f96ddaca8fa39f436038c3ede0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh98UGCRBK7hj4Ov3rIwAAgvgIACaXySF0lMIjvNZa7Z7ctHxk\nzmcC28kvvTKBIMfVAAPYaKC0X9Jlb5uJpx2iE2lcatrB9YbPQovIkRKb5wX/wG9y\ne1GeyXwF8r05+M5v8k2bzbZbbd5NmgVTnv4ytv74Y8Jeu+26U+jvEB9SB3EPHr0X\nF3zQyLKOHpwZUejjoNzUl9LORGWF2kwRPqdAUQuNaN+HHXNQKPp2mZdjCSMSmXBw\n6B2ZIAx/AtAvRPvQRI/+LxtpZvOQaaneEEvfFzmHhyWWuDkE0TubiMBoWar1WzWV\n4auhIMlXLkwrEBCGEUfkSWejPz+2T7C2YU/L06u48I0mr0arYiVWucQZcmxX7Ck=\n=EGSF\n-----END PGP SIGNATURE-----\n", "payload": "tree 96b81bfe1964164f3932cf38a32c6f1136bfa323\nparent 66870ca0edc6c06f3e574c677918426a16796080\nparent b7cabf1e443b2f9f944747c2124639abacedaf40\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643627782 +0000\ncommitter GitHub <noreply@github.com> 1643627782 +0000\n\nMerge #11182\n\n11182: fix: don't panic on seeing an unexpected offset r=Veykril a=dimbleby\n\nIntended as a fix, or at least a sticking plaster, for #11081.\r\n\r\nI have arranged that [offset()](https://github.com/rust-analyzer/rust-analyzer/blob/1ba9a924d7b161c52e605e157ee16d582e4a8684/crates/ide_db/src/line_index.rs#L105-L107) returns `Option<TextSize>` instead of going out of bounds; other changes are the result of following the compiler after doing this.\r\n\r\nPerhaps there's still an issue here - I suppose the server and client have gotten out of sync and that probably shouldn't happen in the first place?  I see that https://github.com/rust-analyzer/rust-analyzer/issues/10138#issuecomment-913727554 suggests what sounds like a more substantial fix which I think might be aimed in this direction.  So perhaps that one should be left open to cover such things?\r\n\r\nMeanwhile, I hope that not-crashing is a good improvement: and I can confirm that it works out just fine in the repro I have at #11081.\n\nCo-authored-by: David Hotham <david.hotham@metaswitch.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0808ade4e43157f96ddaca8fa39f436038c3ede0", "html_url": "https://github.com/rust-lang/rust/commit/0808ade4e43157f96ddaca8fa39f436038c3ede0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0808ade4e43157f96ddaca8fa39f436038c3ede0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66870ca0edc6c06f3e574c677918426a16796080", "url": "https://api.github.com/repos/rust-lang/rust/commits/66870ca0edc6c06f3e574c677918426a16796080", "html_url": "https://github.com/rust-lang/rust/commit/66870ca0edc6c06f3e574c677918426a16796080"}, {"sha": "b7cabf1e443b2f9f944747c2124639abacedaf40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cabf1e443b2f9f944747c2124639abacedaf40", "html_url": "https://github.com/rust-lang/rust/commit/b7cabf1e443b2f9f944747c2124639abacedaf40"}], "stats": {"total": 68, "additions": 38, "deletions": 30}, "files": [{"sha": "35e1757eaec49189e20c23d0680cdc48dbe31255", "filename": "crates/ide_db/src/line_index.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0808ade4e43157f96ddaca8fa39f436038c3ede0/crates%2Fide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0808ade4e43157f96ddaca8fa39f436038c3ede0/crates%2Fide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fline_index.rs?ref=0808ade4e43157f96ddaca8fa39f436038c3ede0", "patch": "@@ -102,8 +102,10 @@ impl LineIndex {\n         LineCol { line: line as u32, col: col.into() }\n     }\n \n-    pub fn offset(&self, line_col: LineCol) -> TextSize {\n-        self.newlines[line_col.line as usize] + TextSize::from(line_col.col)\n+    pub fn offset(&self, line_col: LineCol) -> Option<TextSize> {\n+        self.newlines\n+            .get(line_col.line as usize)\n+            .map(|offset| offset + TextSize::from(line_col.col))\n     }\n \n     pub fn to_utf16(&self, line_col: LineCol) -> LineColUtf16 {"}, {"sha": "1c67ecc22c8008fb6c4f43a01af231f1615b9add", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0808ade4e43157f96ddaca8fa39f436038c3ede0/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0808ade4e43157f96ddaca8fa39f436038c3ede0/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=0808ade4e43157f96ddaca8fa39f436038c3ede0", "patch": "@@ -1,4 +1,5 @@\n //! Conversion lsp_types types to rust-analyzer specific ones.\n+use anyhow::format_err;\n use ide::{Annotation, AnnotationKind, AssistKind, LineCol, LineColUtf16};\n use ide_db::base_db::{FileId, FilePosition, FileRange};\n use syntax::{TextRange, TextSize};\n@@ -22,7 +23,7 @@ pub(crate) fn vfs_path(url: &lsp_types::Url) -> Result<vfs::VfsPath> {\n     abs_path(url).map(vfs::VfsPath::from)\n }\n \n-pub(crate) fn offset(line_index: &LineIndex, position: lsp_types::Position) -> TextSize {\n+pub(crate) fn offset(line_index: &LineIndex, position: lsp_types::Position) -> Result<TextSize> {\n     let line_col = match line_index.encoding {\n         OffsetEncoding::Utf8 => {\n             LineCol { line: position.line as u32, col: position.character as u32 }\n@@ -33,13 +34,16 @@ pub(crate) fn offset(line_index: &LineIndex, position: lsp_types::Position) -> T\n             line_index.index.to_utf8(line_col)\n         }\n     };\n-    line_index.index.offset(line_col)\n+    let text_size =\n+        line_index.index.offset(line_col).ok_or_else(|| format_err!(\"Invalid offset\"))?;\n+    Ok(text_size)\n }\n \n-pub(crate) fn text_range(line_index: &LineIndex, range: lsp_types::Range) -> TextRange {\n-    let start = offset(line_index, range.start);\n-    let end = offset(line_index, range.end);\n-    TextRange::new(start, end)\n+pub(crate) fn text_range(line_index: &LineIndex, range: lsp_types::Range) -> Result<TextRange> {\n+    let start = offset(line_index, range.start)?;\n+    let end = offset(line_index, range.end)?;\n+    let text_range = TextRange::new(start, end);\n+    Ok(text_range)\n }\n \n pub(crate) fn file_id(snap: &GlobalStateSnapshot, url: &lsp_types::Url) -> Result<FileId> {\n@@ -52,7 +56,7 @@ pub(crate) fn file_position(\n ) -> Result<FilePosition> {\n     let file_id = file_id(snap, &tdpp.text_document.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n-    let offset = offset(&line_index, tdpp.position);\n+    let offset = offset(&line_index, tdpp.position)?;\n     Ok(FilePosition { file_id, offset })\n }\n \n@@ -63,7 +67,7 @@ pub(crate) fn file_range(\n ) -> Result<FileRange> {\n     let file_id = file_id(snap, &text_document_identifier.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n-    let range = text_range(&line_index, range);\n+    let range = text_range(&line_index, range)?;\n     Ok(FileRange { file_id, range })\n }\n \n@@ -96,7 +100,7 @@ pub(crate) fn annotation(\n             let line_index = snap.file_line_index(file_id)?;\n \n             Ok(Annotation {\n-                range: text_range(&line_index, code_lens.range),\n+                range: text_range(&line_index, code_lens.range)?,\n                 kind: AnnotationKind::HasImpls {\n                     position: file_position(snap, params.text_document_position_params)?,\n                     data: None,\n@@ -108,7 +112,7 @@ pub(crate) fn annotation(\n             let line_index = snap.file_line_index(file_id)?;\n \n             Ok(Annotation {\n-                range: text_range(&line_index, code_lens.range),\n+                range: text_range(&line_index, code_lens.range)?,\n                 kind: AnnotationKind::HasReferences {\n                     position: file_position(snap, params)?,\n                     data: None,"}, {"sha": "4160b3ecd1fbbe3d764f578c77ec160145db79dc", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0808ade4e43157f96ddaca8fa39f436038c3ede0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0808ade4e43157f96ddaca8fa39f436038c3ede0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=0808ade4e43157f96ddaca8fa39f436038c3ede0", "patch": "@@ -108,7 +108,7 @@ pub(crate) fn handle_syntax_tree(\n     let _p = profile::span(\"handle_syntax_tree\");\n     let id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.file_line_index(id)?;\n-    let text_range = params.range.map(|r| from_proto::text_range(&line_index, r));\n+    let text_range = params.range.and_then(|r| from_proto::text_range(&line_index, r).ok());\n     let res = snap.analysis.syntax_tree(id, text_range)?;\n     Ok(res)\n }\n@@ -149,7 +149,7 @@ pub(crate) fn handle_expand_macro(\n     let _p = profile::span(\"handle_expand_macro\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n-    let offset = from_proto::offset(&line_index, params.position);\n+    let offset = from_proto::offset(&line_index, params.position)?;\n \n     let res = snap.analysis.expand_macro(FilePosition { file_id, offset })?;\n     Ok(res.map(|it| lsp_ext::ExpandedMacro { name: it.name, expansion: it.expansion }))\n@@ -166,7 +166,7 @@ pub(crate) fn handle_selection_range(\n         .positions\n         .into_iter()\n         .map(|position| {\n-            let offset = from_proto::offset(&line_index, position);\n+            let offset = from_proto::offset(&line_index, position)?;\n             let mut ranges = Vec::new();\n             {\n                 let mut range = TextRange::new(offset, offset);\n@@ -205,19 +205,20 @@ pub(crate) fn handle_matching_brace(\n     let _p = profile::span(\"handle_matching_brace\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n-    let res = params\n+    params\n         .positions\n         .into_iter()\n         .map(|position| {\n             let offset = from_proto::offset(&line_index, position);\n-            let offset = match snap.analysis.matching_brace(FilePosition { file_id, offset }) {\n-                Ok(Some(matching_brace_offset)) => matching_brace_offset,\n-                Err(_) | Ok(None) => offset,\n-            };\n-            to_proto::position(&line_index, offset)\n+            offset.map(|offset| {\n+                let offset = match snap.analysis.matching_brace(FilePosition { file_id, offset }) {\n+                    Ok(Some(matching_brace_offset)) => matching_brace_offset,\n+                    Err(_) | Ok(None) => offset,\n+                };\n+                to_proto::position(&line_index, offset)\n+            })\n         })\n-        .collect();\n-    Ok(res)\n+        .collect()\n }\n \n pub(crate) fn handle_join_lines(\n@@ -232,7 +233,7 @@ pub(crate) fn handle_join_lines(\n \n     let mut res = TextEdit::default();\n     for range in params.ranges {\n-        let range = from_proto::text_range(&line_index, range);\n+        let range = from_proto::text_range(&line_index, range)?;\n         let edit = snap.analysis.join_lines(&config, FileRange { file_id, range })?;\n         match res.union(edit) {\n             Ok(()) => (),\n@@ -675,7 +676,7 @@ pub(crate) fn handle_runnables(\n     let _p = profile::span(\"handle_runnables\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n-    let offset = params.position.map(|it| from_proto::offset(&line_index, it));\n+    let offset = params.position.and_then(|it| from_proto::offset(&line_index, it).ok());\n     let cargo_spec = CargoTargetSpec::for_file(&snap, file_id)?;\n \n     let expect_test = match offset {\n@@ -839,7 +840,7 @@ pub(crate) fn handle_completion_resolve(\n \n     let file_id = from_proto::file_id(&snap, &resolve_data.position.text_document.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n-    let offset = from_proto::offset(&line_index, resolve_data.position.position);\n+    let offset = from_proto::offset(&line_index, resolve_data.position.position)?;\n \n     let additional_edits = snap\n         .analysis\n@@ -1089,7 +1090,7 @@ pub(crate) fn handle_code_action(\n             .ranges\n             .iter()\n             .copied()\n-            .map(|range| from_proto::text_range(&line_index, range))\n+            .filter_map(|range| from_proto::text_range(&line_index, range).ok())\n             .any(|fix_range| fix_range.intersect(frange.range).is_some());\n         if intersect_fix_range {\n             res.push(fix.action.clone());\n@@ -1111,7 +1112,7 @@ pub(crate) fn handle_code_action_resolve(\n \n     let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n-    let range = from_proto::text_range(&line_index, params.code_action_params.range);\n+    let range = from_proto::text_range(&line_index, params.code_action_params.range)?;\n     let frange = FileRange { file_id, range };\n \n     let mut assists_config = snap.config.assist();"}, {"sha": "b09c411908af6c75356f8040f1060d73efac9a13", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0808ade4e43157f96ddaca8fa39f436038c3ede0/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0808ade4e43157f96ddaca8fa39f436038c3ede0/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=0808ade4e43157f96ddaca8fa39f436038c3ede0", "patch": "@@ -151,8 +151,9 @@ pub(crate) fn apply_document_changes(\n                     line_index.index = Arc::new(ide::LineIndex::new(old_text));\n                 }\n                 index_valid = IndexValid::UpToLineExclusive(range.start.line);\n-                let range = from_proto::text_range(&line_index, range);\n-                old_text.replace_range(Range::<usize>::from(range), &change.text);\n+                if let Ok(range) = from_proto::text_range(&line_index, range) {\n+                    old_text.replace_range(Range::<usize>::from(range), &change.text);\n+                }\n             }\n             None => {\n                 *old_text = change.text;"}]}