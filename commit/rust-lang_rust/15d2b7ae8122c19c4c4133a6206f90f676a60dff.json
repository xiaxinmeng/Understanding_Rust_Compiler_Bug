{"sha": "15d2b7ae8122c19c4c4133a6206f90f676a60dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZDJiN2FlODEyMmMxOWM0YzQxMzNhNjIwNmY5MGY2NzZhNjBkZmY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-13T12:40:43Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-28T00:11:12Z"}, "message": "Respond to code review feedback and fix tidy", "tree": {"sha": "b36698a60007d65d71253110994635a85ec0b398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b36698a60007d65d71253110994635a85ec0b398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15d2b7ae8122c19c4c4133a6206f90f676a60dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15d2b7ae8122c19c4c4133a6206f90f676a60dff", "html_url": "https://github.com/rust-lang/rust/commit/15d2b7ae8122c19c4c4133a6206f90f676a60dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15d2b7ae8122c19c4c4133a6206f90f676a60dff/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fadfd92c2f27fbaf3473f952fb9a35b8fc20693a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fadfd92c2f27fbaf3473f952fb9a35b8fc20693a", "html_url": "https://github.com/rust-lang/rust/commit/fadfd92c2f27fbaf3473f952fb9a35b8fc20693a"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "bc7a5a1a7c37469c1a43ab2852770a8f11d659dc", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=15d2b7ae8122c19c4c4133a6206f90f676a60dff", "patch": "@@ -134,7 +134,9 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n     pub fn access(&self) -> InterpResult<'tcx, Operand<Tag>> {\n         match self.value {\n             LocalValue::Dead => throw_unsup!(DeadLocal),\n-            LocalValue::Uninitialized => throw_unsup!(UninitializedLocal),\n+            LocalValue::Uninitialized =>\n+                // this is reachable from ConstProp\n+                throw_unsup!(UninitializedLocal),\n             LocalValue::Live(val) => Ok(val),\n         }\n     }"}, {"sha": "bdc44471b64e14f51c79cc8f2a1860db8a974cd7", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=15d2b7ae8122c19c4c4133a6206f90f676a60dff", "patch": "@@ -245,7 +245,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // report those as uninitialized for now.\n                 if let Place {\n                     base: PlaceBase::Local(local),\n-                    projection: None\n+                    projection: box []\n                 } = place {\n                     let alive =\n                         if let LocalValue::Live(_) = self.frame().locals[*local].value {"}, {"sha": "b00c15ca50143c97a48dd0fc0932a61e8f36167d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=15d2b7ae8122c19c4c4133a6206f90f676a60dff", "patch": "@@ -569,11 +569,15 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     base: PlaceBase::Local(local),\n                     projection: box [],\n                 } = *place {\n-                    if let Some(value) = self.const_prop(rval, place_layout, statement.source_info, place) {\n+                    if let Some(value) = self.const_prop(rval,\n+                                                         place_layout,\n+                                                         statement.source_info,\n+                                                         place) {\n                         trace!(\"checking whether {:?} can be stored to {:?}\", value, local);\n                         if self.can_const_prop[local] {\n                             trace!(\"storing {:?} to {:?}\", value, local);\n-                            assert!(self.get_const(local).is_none() || self.get_const(local) == Some(value));\n+                            assert!(self.get_const(local).is_none() ||\n+                                    self.get_const(local) == Some(value));\n                             self.set_const(local, value);\n \n                             if self.should_const_prop() {\n@@ -587,19 +591,22 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     }\n                 }\n             }\n-        } else if let StatementKind::StorageLive(local) = statement.kind {\n-            if self.can_const_prop[local] {\n-                let frame = self.ecx.frame_mut();\n-\n-                frame.locals[local].value = LocalValue::Uninitialized;\n-            }\n-        } else if let StatementKind::StorageDead(local) = statement.kind {\n-            if self.can_const_prop[local] {\n-                let frame = self.ecx.frame_mut();\n-\n-                frame.locals[local].value = LocalValue::Dead;\n+        } else {\n+            match statement.kind {\n+                StatementKind::StorageLive(local) |\n+                StatementKind::StorageDead(local) if self.can_const_prop[local] => {\n+                    let frame = self.ecx.frame_mut();\n+                    frame.locals[local].value =\n+                        if let StatementKind::StorageLive(_) = statement.kind {\n+                            LocalValue::Uninitialized\n+                        } else {\n+                            LocalValue::Dead\n+                        };\n+                }\n+                _ => {}\n             }\n         }\n+\n         self.super_statement(statement, location);\n     }\n "}, {"sha": "7504fd525955a2cbdbf23a47791321b8f954c0b2", "filename": "src/test/ui/consts/const-prop-read-static-in-const.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs?ref=15d2b7ae8122c19c4c4133a6206f90f676a60dff", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+const TEST: u8 = MY_STATIC;\n+//~^ skipping const checks\n+\n+static MY_STATIC: u8 = 4;\n+\n+fn main() {\n+}"}, {"sha": "bbd5b12ed7dfcfd3ff92d9b8a1961d2661740d08", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15d2b7ae8122c19c4c4133a6206f90f676a60dff/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=15d2b7ae8122c19c4c4133a6206f90f676a60dff", "patch": "@@ -0,0 +1,6 @@\n+warning: skipping const checks\n+  --> $DIR/const-prop-read-static-in-const.rs:6:18\n+   |\n+LL | const TEST: u8 = MY_STATIC;\n+   |                  ^^^^^^^^^\n+"}]}