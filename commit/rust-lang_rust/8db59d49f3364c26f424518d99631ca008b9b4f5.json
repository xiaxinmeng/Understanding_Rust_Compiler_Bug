{"sha": "8db59d49f3364c26f424518d99631ca008b9b4f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYjU5ZDQ5ZjMzNjRjMjZmNDI0NTE4ZDk5NjMxY2EwMDhiOWI0ZjU=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-01-23T13:10:40Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-01-23T13:23:39Z"}, "message": "Add os::fortanix_sgx::ffi module", "tree": {"sha": "9695e773b3bf4b292bfb82fd8a02316b27ec52a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9695e773b3bf4b292bfb82fd8a02316b27ec52a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8db59d49f3364c26f424518d99631ca008b9b4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8db59d49f3364c26f424518d99631ca008b9b4f5", "html_url": "https://github.com/rust-lang/rust/commit/8db59d49f3364c26f424518d99631ca008b9b4f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8db59d49f3364c26f424518d99631ca008b9b4f5/comments", "author": null, "committer": null, "parents": [{"sha": "6bba352cad2117f56353d400f71e96eafa2e6bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bba352cad2117f56353d400f71e96eafa2e6bd7", "html_url": "https://github.com/rust-lang/rust/commit/6bba352cad2117f56353d400f71e96eafa2e6bd7"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "810965fc1b85af02892ba3126eb8db80ccaed161", "filename": "src/libstd/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8db59d49f3364c26f424518d99631ca008b9b4f5/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db59d49f3364c26f424518d99631ca008b9b4f5/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=8db59d49f3364c26f424518d99631ca008b9b4f5", "patch": "@@ -56,4 +56,4 @@ pub mod mem {\n     pub use sys::abi::mem::*;\n }\n \n-pub use sys::ext::{io, arch};\n+pub use sys::ext::{io, arch, ffi};"}, {"sha": "7b0ffea49ae7caaf7c9af35ea0cf203a60c2bf98", "filename": "src/libstd/sys/sgx/ext/ffi.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8db59d49f3364c26f424518d99631ca008b9b4f5/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db59d49f3364c26f424518d99631ca008b9b4f5/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fffi.rs?ref=8db59d49f3364c26f424518d99631ca008b9b4f5", "patch": "@@ -0,0 +1,109 @@\n+//! SGX-specific extension to the primitives in the `std::ffi` module\n+\n+#![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+\n+use ffi::{OsStr, OsString};\n+use mem;\n+use sys::os_str::Buf;\n+use sys_common::{FromInner, IntoInner, AsInner};\n+\n+/// SGX-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait OsStringExt {\n+    /// Creates an [`OsString`] from a byte vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::unix::ffi::OsStringExt;\n+    ///\n+    /// let bytes = b\"foo\".to_vec();\n+    /// let os_string = OsString::from_vec(bytes);\n+    /// assert_eq!(os_string.to_str(), Some(\"foo\"));\n+    /// ```\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n+    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+    fn from_vec(vec: Vec<u8>) -> Self;\n+\n+    /// Yields the underlying byte vector of this [`OsString`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::unix::ffi::OsStringExt;\n+    ///\n+    /// let mut os_string = OsString::new();\n+    /// os_string.push(\"foo\");\n+    /// let bytes = os_string.into_vec();\n+    /// assert_eq!(bytes, b\"foo\");\n+    /// ```\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n+    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+    fn into_vec(self) -> Vec<u8>;\n+}\n+\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+impl OsStringExt for OsString {\n+    fn from_vec(vec: Vec<u8>) -> OsString {\n+        FromInner::from_inner(Buf { inner: vec })\n+    }\n+    fn into_vec(self) -> Vec<u8> {\n+        self.into_inner().inner\n+    }\n+}\n+\n+/// SGX-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait OsStrExt {\n+    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+    /// Creates an [`OsStr`] from a byte slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    /// use std::os::unix::ffi::OsStrExt;\n+    ///\n+    /// let bytes = b\"foo\";\n+    /// let os_str = OsStr::from_bytes(bytes);\n+    /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n+    /// ```\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n+    fn from_bytes(slice: &[u8]) -> &Self;\n+\n+    /// Gets the underlying byte view of the [`OsStr`] slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    /// use std::os::unix::ffi::OsStrExt;\n+    ///\n+    /// let mut os_str = OsStr::new(\"foo\");\n+    /// let bytes = os_str.as_bytes();\n+    /// assert_eq!(bytes, b\"foo\");\n+    /// ```\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n+    #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+    fn as_bytes(&self) -> &[u8];\n+}\n+\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+impl OsStrExt for OsStr {\n+    fn from_bytes(slice: &[u8]) -> &OsStr {\n+        unsafe { mem::transmute(slice) }\n+    }\n+    fn as_bytes(&self) -> &[u8] {\n+        &self.as_inner().inner\n+    }\n+}"}, {"sha": "51b2659da83e369f7e3ec1aa19aa37c2e64b63df", "filename": "src/libstd/sys/sgx/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8db59d49f3364c26f424518d99631ca008b9b4f5/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8db59d49f3364c26f424518d99631ca008b9b4f5/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Fmod.rs?ref=8db59d49f3364c26f424518d99631ca008b9b4f5", "patch": "@@ -2,3 +2,4 @@\n \n pub mod arch;\n pub mod io;\n+pub mod ffi;"}]}