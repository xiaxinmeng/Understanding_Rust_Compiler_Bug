{"sha": "1c5bfb17703975ff9952243c24c46cf54fe0d49c", "node_id": "C_kwDOAAsO6NoAKDFjNWJmYjE3NzAzOTc1ZmY5OTUyMjQzYzI0YzQ2Y2Y1NGZlMGQ0OWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-10T14:53:50Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T16:29:54Z"}, "message": "Don't bind hidden types when searching for matching impls", "tree": {"sha": "97957c637ce3e87550fe69caf11dad04134fd9eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97957c637ce3e87550fe69caf11dad04134fd9eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5bfb17703975ff9952243c24c46cf54fe0d49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5bfb17703975ff9952243c24c46cf54fe0d49c", "html_url": "https://github.com/rust-lang/rust/commit/1c5bfb17703975ff9952243c24c46cf54fe0d49c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5bfb17703975ff9952243c24c46cf54fe0d49c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f42a6793ce3d32a8d414519b8ec82141f7996479", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42a6793ce3d32a8d414519b8ec82141f7996479", "html_url": "https://github.com/rust-lang/rust/commit/f42a6793ce3d32a8d414519b8ec82141f7996479"}], "stats": {"total": 113, "additions": 74, "deletions": 39}, "files": [{"sha": "76526df6461596f5b812f7390010dcd99d3e5607", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5bfb17703975ff9952243c24c46cf54fe0d49c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5bfb17703975ff9952243c24c46cf54fe0d49c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1c5bfb17703975ff9952243c24c46cf54fe0d49c", "patch": "@@ -2163,6 +2163,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let InferOk { obligations, .. } = self\n             .infcx\n             .at(&cause, obligation.param_env)\n+            .define_opaque_types(false)\n             .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n             .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n         nested_obligations.extend(obligations);"}, {"sha": "85c6f8c462cbbfb60adb2c7a83a72783769961dc", "filename": "src/test/ui/impl-trait/nested_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs?ref=1c5bfb17703975ff9952243c24c46cf54fe0d49c", "patch": "@@ -4,7 +4,7 @@ fn fine(x: impl Into<u32>) -> impl Into<u32> { x }\n \n fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n //~^ ERROR nested `impl Trait` is not allowed\n-//~| ERROR `impl Into<u32>` doesn't implement `Debug`\n+//~| ERROR the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n \n fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n //~^ ERROR nested `impl Trait` is not allowed\n@@ -17,7 +17,7 @@ struct X;\n impl X {\n     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n     //~^ ERROR nested `impl Trait` is not allowed\n-    //~| ERROR `impl Into<u32>` doesn't implement `Debug`\n+    //~| ERROR the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n }\n \n fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {"}, {"sha": "a10e4ec318230f09f24eaf9a05e55ad0c698f8c3", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=1c5bfb17703975ff9952243c24c46cf54fe0d49c", "patch": "@@ -46,27 +46,21 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n    |                                          ^^^^^^^^^^^^^^\n \n-error[E0277]: `impl Into<u32>` doesn't implement `Debug`\n+error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n   --> $DIR/nested_impl_trait.rs:5:70\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n-   |                                                                      ^ `impl Into<u32>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |                                                                      ^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n-help: consider further restricting this bound\n-   |\n-LL | fn bad_in_ret_position(x: impl Into<u32> + std::fmt::Debug) -> impl Into<impl Debug> { x }\n-   |                                          +++++++++++++++++\n+   = note: required because of the requirements on the impl of `Into<impl Debug>` for `impl Into<u32>`\n \n-error[E0277]: `impl Into<u32>` doesn't implement `Debug`\n+error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n   --> $DIR/nested_impl_trait.rs:18:58\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n-   |                                                          ^ `impl Into<u32>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-help: consider further restricting this bound\n+   |                                                          ^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n-LL |     fn bad(x: impl Into<u32> + std::fmt::Debug) -> impl Into<impl Debug> { x }\n-   |                              +++++++++++++++++\n+   = note: required because of the requirements on the impl of `Into<impl Debug>` for `impl Into<u32>`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "6b200d7e3a89eeb6c615ba0b5dc6f71fc476d178", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs?ref=1c5bfb17703975ff9952243c24c46cf54fe0d49c", "patch": "@@ -0,0 +1,17 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = impl PartialEq<(Foo, i32)>;\n+\n+struct Bar;\n+\n+impl PartialEq<(Foo, i32)> for Bar {\n+    fn eq(&self, _other: &(Foo, i32)) -> bool {\n+        true\n+    }\n+}\n+\n+fn foo() -> Foo {\n+    Bar //~ ERROR can't compare `Bar` with `(Bar, i32)`\n+}\n+\n+fn main() {}"}, {"sha": "5476bf9d27745d9373b1daf74885f5a4f37b626d", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr?ref=1c5bfb17703975ff9952243c24c46cf54fe0d49c", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: can't compare `Bar` with `(Bar, i32)`\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:14:5\n+   |\n+LL |     Bar\n+   |     ^^^ no implementation for `Bar == (Bar, i32)`\n+   |\n+   = help: the trait `PartialEq<(Bar, i32)>` is not implemented for `Bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ad0a003e87948ec9279fce45edcbee650754dedc", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.rs?ref=1c5bfb17703975ff9952243c24c46cf54fe0d49c", "patch": "@@ -2,36 +2,18 @@\n \n #![feature(type_alias_impl_trait)]\n \n-mod direct {\n-    type Foo = impl PartialEq<(Foo, i32)>;\n+type Foo = impl PartialEq<(Foo, i32)>;\n \n-    struct Bar;\n+struct Bar;\n \n-    impl PartialEq<(Foo, i32)> for Bar {\n-        fn eq(&self, _other: &(Foo, i32)) -> bool {\n-            true\n-        }\n-    }\n-\n-    fn foo() -> Foo {\n-        Bar\n+impl PartialEq<(Bar, i32)> for Bar {\n+    fn eq(&self, _other: &(Bar, i32)) -> bool {\n+        true\n     }\n }\n \n-mod indirect {\n-    type Foo = impl PartialEq<(Foo, i32)>;\n-\n-    struct Bar;\n-\n-    impl PartialEq<(Bar, i32)> for Bar {\n-        fn eq(&self, _other: &(Bar, i32)) -> bool {\n-            true\n-        }\n-    }\n-\n-    fn foo() -> Foo {\n-        Bar\n-    }\n+fn foo() -> Foo {\n+    Bar\n }\n \n fn main() {}"}, {"sha": "8dcbbfd6e6492622fea9c286fa5c1c963b9ae74d", "filename": "src/test/ui/impl-trait/trait_resolution.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5bfb17703975ff9952243c24c46cf54fe0d49c/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_resolution.rs?ref=1c5bfb17703975ff9952243c24c46cf54fe0d49c", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+use std::fmt::Debug;\n+\n+pub struct EventStream<S> {\n+    stream: S,\n+}\n+\n+impl<S: Debug> EventStream<S> {\n+    fn into_stream(self) -> impl Debug {\n+        unimplemented!()\n+    }\n+\n+    pub fn into_reader(self) -> impl Debug {\n+        ReaderStream::from(self.into_stream())\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct ReaderStream<S> {\n+    stream: S,\n+}\n+\n+impl<S> From<S> for ReaderStream<S> {\n+    fn from(stream: S) -> Self {\n+        ReaderStream { stream }\n+    }\n+}\n+\n+fn main() {}"}]}