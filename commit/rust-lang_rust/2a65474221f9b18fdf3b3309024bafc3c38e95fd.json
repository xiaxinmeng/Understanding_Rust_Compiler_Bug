{"sha": "2a65474221f9b18fdf3b3309024bafc3c38e95fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjU0NzQyMjFmOWIxOGZkZjNiMzMwOTAyNGJhZmMzYzM4ZTk1ZmQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T10:13:10Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T10:13:10Z"}, "message": "Improved libfmt_macros code style with clippy", "tree": {"sha": "1ec4b22d02c127586668a680cf27477346df9e79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec4b22d02c127586668a680cf27477346df9e79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a65474221f9b18fdf3b3309024bafc3c38e95fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a65474221f9b18fdf3b3309024bafc3c38e95fd", "html_url": "https://github.com/rust-lang/rust/commit/2a65474221f9b18fdf3b3309024bafc3c38e95fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a65474221f9b18fdf3b3309024bafc3c38e95fd/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dbbab904916236d59446b9f51944a057e7b9966", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbbab904916236d59446b9f51944a057e7b9966", "html_url": "https://github.com/rust-lang/rust/commit/0dbbab904916236d59446b9f51944a057e7b9966"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "32a5bd906fcd7d05e8c87c3b2da4e310a4efd75d", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a65474221f9b18fdf3b3309024bafc3c38e95fd/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65474221f9b18fdf3b3309024bafc3c38e95fd/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=2a65474221f9b18fdf3b3309024bafc3c38e95fd", "patch": "@@ -190,7 +190,7 @@ impl<'a> Parser<'a> {\n     /// String, but I think it does when this eventually uses conditions so it\n     /// might as well start using it now.\n     fn err(&mut self, msg: &str) {\n-        self.errors.push(msg.to_string());\n+        self.errors.push(msg.to_owned());\n     }\n \n     /// Optionally consumes the specified character. If the character is not at\n@@ -353,7 +353,7 @@ impl<'a> Parser<'a> {\n         } else {\n             spec.ty = self.word();\n         }\n-        return spec;\n+        spec\n     }\n \n     /// Parses a Count parameter at the current position. This does not check\n@@ -417,25 +417,19 @@ impl<'a> Parser<'a> {\n     fn integer(&mut self) -> Option<usize> {\n         let mut cur = 0;\n         let mut found = false;\n-        loop {\n-            match self.cur.clone().next() {\n-                Some((_, c)) => {\n-                    match c.to_digit(10) {\n-                        Some(i) => {\n-                            cur = cur * 10 + i as usize;\n-                            found = true;\n-                            self.cur.next();\n-                        }\n-                        None => { break }\n-                    }\n-                }\n-                None => { break }\n+        while let Some((_, c)) = self.cur.clone().next() {\n+            if let Some(i) = c.to_digit(10) {\n+                cur = cur * 10 + i as usize;\n+                found = true;\n+                self.cur.next();\n+            } else {\n+                break\n             }\n         }\n         if found {\n-            return Some(cur);\n+            Some(cur)\n         } else {\n-            return None;\n+            None\n         }\n     }\n }"}]}