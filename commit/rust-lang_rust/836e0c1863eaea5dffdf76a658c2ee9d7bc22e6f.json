{"sha": "836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNmUwYzE4NjNlYWVhNWRmZmRmNzZhNjU4YzJlZTlkN2JjMjJlNmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T21:12:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T21:12:31Z"}, "message": "simplify", "tree": {"sha": "db655764db63f160bf96a88796b2d21604b2af29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db655764db63f160bf96a88796b2d21604b2af29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "html_url": "https://github.com/rust-lang/rust/commit/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e4232cc69bc2e003dc8a14e604119bb36e9f9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e4232cc69bc2e003dc8a14e604119bb36e9f9f", "html_url": "https://github.com/rust-lang/rust/commit/46e4232cc69bc2e003dc8a14e604119bb36e9f9f"}], "stats": {"total": 144, "additions": 73, "deletions": 71}, "files": [{"sha": "de1fd557d2b420889c147f2d7c64033612ddf861", "filename": "crates/server/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f/crates%2Fserver%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f/crates%2Fserver%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fhandlers.rs?ref=836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "patch": "@@ -3,7 +3,10 @@ use languageserver_types::{Range, Position, Diagnostic, DiagnosticSeverity};\n use libanalysis::World;\n use libeditor::{self, LineIndex, LineCol, TextRange, TextUnit};\n \n-use {req, Result, FilePath};\n+use ::{\n+    req, Result,\n+    util::FilePath,\n+};\n \n pub fn handle_syntax_tree(\n     world: World,"}, {"sha": "0e4f5f86a1753e2b365198c9063609900c3c59a5", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 27, "deletions": 70, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "patch": "@@ -21,18 +21,18 @@ mod caps;\n mod req;\n mod dispatch;\n mod handlers;\n-\n-use std::path::PathBuf;\n+mod util;\n \n use threadpool::ThreadPool;\n use crossbeam_channel::{bounded, Sender, Receiver};\n use flexi_logger::Logger;\n-use languageserver_types::{TextDocumentItem, VersionedTextDocumentIdentifier, TextDocumentIdentifier};\n+use url::Url;\n use libanalysis::{WorldState, World};\n \n use ::{\n     io::{Io, RawMsg, RawRequest},\n     handlers::{handle_syntax_tree, handle_extend_selection, publish_diagnostics},\n+    util::{FilePath, FnBox}\n };\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n@@ -198,21 +198,9 @@ fn main_loop(\n                 dispatch::handle_notification::<req::DidOpenTextDocument, _>(&mut not, |params| {\n                     let path = params.text_document.file_path()?;\n                     world.change_overlay(path, Some(params.text_document.text));\n-                    let world = world.snapshot();\n-                    let sender = sender.clone();\n-                    let uri = params.text_document.uri;\n-                    pool.execute(move || {\n-                        match publish_diagnostics(world, uri) {\n-                            Err(e) => {\n-                                error!(\"failed to compute diagnostics: {:?}\", e)\n-                            }\n-                            Ok(params) => {\n-                                sender.send(Box::new(|io: &mut Io| {\n-                                    dispatch::send_notification::<req::PublishDiagnostics>(io, params)\n-                                }))\n-                            }\n-                        }\n-                    });\n+                    update_diagnostics_on_threadpool(\n+                        pool, world.snapshot(), sender.clone(), params.text_document.uri,\n+                    );\n                     Ok(())\n                 })?;\n                 dispatch::handle_notification::<req::DidChangeTextDocument, _>(&mut not, |mut params| {\n@@ -221,21 +209,9 @@ fn main_loop(\n                         .ok_or_else(|| format_err!(\"empty changes\"))?\n                         .text;\n                     world.change_overlay(path, Some(text));\n-                    let world = world.snapshot();\n-                    let sender = sender.clone();\n-                    let uri = params.text_document.uri;\n-                    pool.execute(move || {\n-                        match publish_diagnostics(world, uri) {\n-                            Err(e) => {\n-                                error!(\"failed to compute diagnostics: {:?}\", e)\n-                            }\n-                            Ok(params) => {\n-                                sender.send(Box::new(|io: &mut Io| {\n-                                    dispatch::send_notification::<req::PublishDiagnostics>(io, params)\n-                                }))\n-                            }\n-                        }\n-                    });\n+                    update_diagnostics_on_threadpool(\n+                        pool, world.snapshot(), sender.clone(), params.text_document.uri,\n+                    );\n                     Ok(())\n                 })?;\n                 dispatch::handle_notification::<req::DidCloseTextDocument, _>(&mut not, |params| {\n@@ -278,41 +254,22 @@ fn handle_request_on_threadpool<R: req::ClientRequest>(\n     })\n }\n \n-trait FnBox<A, R>: Send {\n-    fn call_box(self: Box<Self>, a: A) -> R;\n-}\n-\n-impl<A, R, F: FnOnce(A) -> R + Send> FnBox<A, R> for F {\n-    fn call_box(self: Box<F>, a: A) -> R {\n-        (*self)(a)\n-    }\n-}\n-\n-trait FilePath {\n-    fn file_path(&self) -> Result<PathBuf>;\n-}\n-\n-impl FilePath for TextDocumentItem {\n-    fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.file_path()\n-    }\n-}\n-\n-impl FilePath for VersionedTextDocumentIdentifier {\n-    fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.file_path()\n-    }\n-}\n-\n-impl FilePath for TextDocumentIdentifier {\n-    fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.file_path()\n-    }\n-}\n-\n-impl FilePath for ::url::Url {\n-    fn file_path(&self) -> Result<PathBuf> {\n-        self.to_file_path()\n-            .map_err(|()| format_err!(\"invalid uri: {}\", self))\n-    }\n+fn update_diagnostics_on_threadpool(\n+    pool: &ThreadPool,\n+    world: World,\n+    sender: Sender<Thunk>,\n+    uri: Url,\n+) {\n+    pool.execute(move || {\n+        match publish_diagnostics(world, uri) {\n+            Err(e) => {\n+                error!(\"failed to compute diagnostics: {:?}\", e)\n+            }\n+            Ok(params) => {\n+                sender.send(Box::new(|io: &mut Io| {\n+                    dispatch::send_notification::<req::PublishDiagnostics>(io, params)\n+                }))\n+            }\n+        }\n+    });\n }"}, {"sha": "3691852f01d3544318a49ca1858a1f201d532c43", "filename": "crates/server/src/util.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f/crates%2Fserver%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f/crates%2Fserver%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Futil.rs?ref=836e0c1863eaea5dffdf76a658c2ee9d7bc22e6f", "patch": "@@ -0,0 +1,42 @@\n+use std::path::PathBuf;\n+use languageserver_types::{TextDocumentItem, VersionedTextDocumentIdentifier, TextDocumentIdentifier};\n+use ::{Result};\n+\n+pub trait FnBox<A, R>: Send {\n+    fn call_box(self: Box<Self>, a: A) -> R;\n+}\n+\n+impl<A, R, F: FnOnce(A) -> R + Send> FnBox<A, R> for F {\n+    fn call_box(self: Box<F>, a: A) -> R {\n+        (*self)(a)\n+    }\n+}\n+\n+pub trait FilePath {\n+    fn file_path(&self) -> Result<PathBuf>;\n+}\n+\n+impl FilePath for TextDocumentItem {\n+    fn file_path(&self) -> Result<PathBuf> {\n+        self.uri.file_path()\n+    }\n+}\n+\n+impl FilePath for VersionedTextDocumentIdentifier {\n+    fn file_path(&self) -> Result<PathBuf> {\n+        self.uri.file_path()\n+    }\n+}\n+\n+impl FilePath for TextDocumentIdentifier {\n+    fn file_path(&self) -> Result<PathBuf> {\n+        self.uri.file_path()\n+    }\n+}\n+\n+impl FilePath for ::url::Url {\n+    fn file_path(&self) -> Result<PathBuf> {\n+        self.to_file_path()\n+            .map_err(|()| format_err!(\"invalid uri: {}\", self))\n+    }\n+}"}]}