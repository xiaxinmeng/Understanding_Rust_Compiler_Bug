{"sha": "1b9fbd8801019b9235c08e09acb92d21ac0c8c74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOWZiZDg4MDEwMTliOTIzNWMwOGUwOWFjYjkyZDIxYWMwYzhjNzQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-29T21:18:14Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-29T21:31:12Z"}, "message": "Fix false positive in NEEDLESS_LIFETIMES", "tree": {"sha": "2e0fd18dd37b5da1c15f7629e45abd86c6e06f61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e0fd18dd37b5da1c15f7629e45abd86c6e06f61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b9fbd8801019b9235c08e09acb92d21ac0c8c74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9fbd8801019b9235c08e09acb92d21ac0c8c74", "html_url": "https://github.com/rust-lang/rust/commit/1b9fbd8801019b9235c08e09acb92d21ac0c8c74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b9fbd8801019b9235c08e09acb92d21ac0c8c74/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c99bd089e6f8f4d6118f2a00669f61f3002905", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c99bd089e6f8f4d6118f2a00669f61f3002905", "html_url": "https://github.com/rust-lang/rust/commit/e6c99bd089e6f8f4d6118f2a00669f61f3002905"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "1441015eb0e3ec1a0a445130338b5b2c49118717", "filename": "src/lifetimes.rs", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1b9fbd8801019b9235c08e09acb92d21ac0c8c74/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9fbd8801019b9235c08e09acb92d21ac0c8c74/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=1b9fbd8801019b9235c08e09acb92d21ac0c8c74", "patch": "@@ -65,13 +65,30 @@ enum RefLt {\n     Static,\n     Named(Name),\n }\n-use self::RefLt::*;\n+\n+fn bound_lifetimes(bound: &TyParamBound) -> Option<HirVec<&Lifetime>> {\n+    if let TraitTyParamBound(ref trait_ref, _) = *bound {\n+        let lt = trait_ref.trait_ref.path.segments\n+            .last().expect(\"a path must have at least one segment\")\n+            .parameters.lifetimes();\n+\n+        Some(lt)\n+    } else {\n+        None\n+    }\n+}\n \n fn check_fn_inner(cx: &LateContext, decl: &FnDecl, slf: Option<&ExplicitSelf>, generics: &Generics, span: Span) {\n     if in_external_macro(cx, span) || has_where_lifetimes(cx, &generics.where_clause) {\n         return;\n     }\n-    if could_use_elision(cx, decl, slf, &generics.lifetimes) {\n+\n+    let bounds_lts =\n+        generics.ty_params\n+            .iter()\n+            .flat_map(|ref typ| typ.bounds.iter().filter_map(bound_lifetimes).flat_map(|lts| lts));\n+\n+    if could_use_elision(cx, decl, slf, &generics.lifetimes, bounds_lts) {\n         span_lint(cx,\n                   NEEDLESS_LIFETIMES,\n                   span,\n@@ -80,7 +97,10 @@ fn check_fn_inner(cx: &LateContext, decl: &FnDecl, slf: Option<&ExplicitSelf>, g\n     report_extra_lifetimes(cx, decl, &generics, slf);\n }\n \n-fn could_use_elision(cx: &LateContext, func: &FnDecl, slf: Option<&ExplicitSelf>, named_lts: &[LifetimeDef]) -> bool {\n+fn could_use_elision<'a, T: Iterator<Item=&'a Lifetime>>(\n+    cx: &LateContext, func: &FnDecl, slf: Option<&ExplicitSelf>,\n+    named_lts: &[LifetimeDef], bounds_lts: T\n+) -> bool {\n     // There are two scenarios where elision works:\n     // * no output references, all input references have different LT\n     // * output references, exactly one input reference with same LT\n@@ -112,7 +132,7 @@ fn could_use_elision(cx: &LateContext, func: &FnDecl, slf: Option<&ExplicitSelf>\n         output_visitor.visit_ty(ty);\n     }\n \n-    let input_lts = input_visitor.into_vec();\n+    let input_lts = lts_from_bounds(input_visitor.into_vec(), bounds_lts);\n     let output_lts = output_visitor.into_vec();\n \n     // check for lifetimes from higher scopes\n@@ -129,7 +149,7 @@ fn could_use_elision(cx: &LateContext, func: &FnDecl, slf: Option<&ExplicitSelf>\n         // no output lifetimes, check distinctness of input lifetimes\n \n         // only unnamed and static, ok\n-        if input_lts.iter().all(|lt| *lt == Unnamed || *lt == Static) {\n+        if input_lts.iter().all(|lt| *lt == RefLt::Unnamed || *lt == RefLt::Static) {\n             return false;\n         }\n         // we have no output reference, so we only need all distinct lifetimes\n@@ -142,8 +162,8 @@ fn could_use_elision(cx: &LateContext, func: &FnDecl, slf: Option<&ExplicitSelf>\n         }\n         if input_lts.len() == 1 {\n             match (&input_lts[0], &output_lts[0]) {\n-                (&Named(n1), &Named(n2)) if n1 == n2 => true,\n-                (&Named(_), &Unnamed) => true,\n+                (&RefLt::Named(n1), &RefLt::Named(n2)) if n1 == n2 => true,\n+                (&RefLt::Named(_), &RefLt::Unnamed) => true,\n                 _ => false, // already elided, different named lifetimes\n                 // or something static going on\n             }\n@@ -157,22 +177,32 @@ fn allowed_lts_from(named_lts: &[LifetimeDef]) -> HashSet<RefLt> {\n     let mut allowed_lts = HashSet::new();\n     for lt in named_lts {\n         if lt.bounds.is_empty() {\n-            allowed_lts.insert(Named(lt.lifetime.name));\n+            allowed_lts.insert(RefLt::Named(lt.lifetime.name));\n         }\n     }\n-    allowed_lts.insert(Unnamed);\n-    allowed_lts.insert(Static);\n+    allowed_lts.insert(RefLt::Unnamed);\n+    allowed_lts.insert(RefLt::Static);\n     allowed_lts\n }\n \n+fn lts_from_bounds<'a, T: Iterator<Item=&'a Lifetime>>(mut vec: Vec<RefLt>, bounds_lts: T) -> Vec<RefLt> {\n+    for lt in bounds_lts {\n+        if lt.name.as_str() != \"'static\" {\n+            vec.push(RefLt::Named(lt.name));\n+        }\n+    }\n+\n+    vec\n+}\n+\n /// Number of unique lifetimes in the given vector.\n fn unique_lifetimes(lts: &[RefLt]) -> usize {\n     lts.iter().collect::<HashSet<_>>().len()\n }\n \n-/// A visitor usable for rustc_front::visit::walk_ty().\n+/// A visitor usable for `rustc_front::visit::walk_ty()`.\n struct RefVisitor<'v, 't: 'v> {\n-    cx: &'v LateContext<'v, 't>, // context reference\n+    cx: &'v LateContext<'v, 't>,\n     lts: Vec<RefLt>,\n }\n \n@@ -187,12 +217,12 @@ impl<'v, 't> RefVisitor<'v, 't> {\n     fn record(&mut self, lifetime: &Option<Lifetime>) {\n         if let Some(ref lt) = *lifetime {\n             if lt.name.as_str() == \"'static\" {\n-                self.lts.push(Static);\n+                self.lts.push(RefLt::Static);\n             } else {\n-                self.lts.push(Named(lt.name));\n+                self.lts.push(RefLt::Named(lt.name));\n             }\n         } else {\n-            self.lts.push(Unnamed);\n+            self.lts.push(RefLt::Unnamed);\n         }\n     }\n "}, {"sha": "408b6762df69002047e484cc824e83e0a98d5ab9", "filename": "tests/compile-fail/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b9fbd8801019b9235c08e09acb92d21ac0c8c74/tests%2Fcompile-fail%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9fbd8801019b9235c08e09acb92d21ac0c8c74/tests%2Fcompile-fail%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flifetimes.rs?ref=1b9fbd8801019b9235c08e09acb92d21ac0c8c74", "patch": "@@ -3,6 +3,7 @@\n \n #![deny(needless_lifetimes, unused_lifetimes)]\n #![allow(dead_code)]\n+\n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n //~^ERROR explicit lifetimes given\n \n@@ -97,6 +98,7 @@ fn struct_with_lt3<'a>(_foo: &Foo<'a> ) -> &'a str { unimplemented!() }\n fn struct_with_lt4<'a, 'b>(_foo: &'a Foo<'b> ) -> &'a str { unimplemented!() }\n \n trait WithLifetime<'a> {}\n+\n type WithLifetimeAlias<'a> = WithLifetime<'a>;\n \n // should not warn because it won't build without the lifetime\n@@ -123,5 +125,8 @@ fn named_input_elided_output<'a>(_arg: &'a str) -> &str { unimplemented!() } //~\n \n fn elided_input_named_output<'a>(_arg: &str) -> &'a str { unimplemented!() }\n \n+fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() } //~ERROR explicit lifetimes given\n+fn trait_bound<'a, T: WithLifetime<'a>>(_: &'a u8, _: T) { unimplemented!() }\n+\n fn main() {\n }"}]}