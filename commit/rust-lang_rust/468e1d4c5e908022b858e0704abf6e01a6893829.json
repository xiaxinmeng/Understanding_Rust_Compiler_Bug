{"sha": "468e1d4c5e908022b858e0704abf6e01a6893829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OGUxZDRjNWU5MDgwMjJiODU4ZTA3MDRhYmY2ZTAxYTY4OTM4Mjk=", "commit": {"author": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-02-11T20:57:38Z"}, "committer": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-02-12T20:18:42Z"}, "message": "auto_import: more tests and some refactorings", "tree": {"sha": "e4a79799ee6ecf33fbf442fee1b55c7c52e03a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a79799ee6ecf33fbf442fee1b55c7c52e03a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/468e1d4c5e908022b858e0704abf6e01a6893829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/468e1d4c5e908022b858e0704abf6e01a6893829", "html_url": "https://github.com/rust-lang/rust/commit/468e1d4c5e908022b858e0704abf6e01a6893829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/468e1d4c5e908022b858e0704abf6e01a6893829/comments", "author": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61324a845bde0959c1f9ac86ce31d022812f4c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/61324a845bde0959c1f9ac86ce31d022812f4c21", "html_url": "https://github.com/rust-lang/rust/commit/61324a845bde0959c1f9ac86ce31d022812f4c21"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "3255a100843668cc5908ffecdf758cbec48515a7", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/468e1d4c5e908022b858e0704abf6e01a6893829/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468e1d4c5e908022b858e0704abf6e01a6893829/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=468e1d4c5e908022b858e0704abf6e01a6893829", "patch": "@@ -345,9 +345,9 @@ fn best_action_for_target<'b, 'a: 'b>(\n     match best_action {\n         Some(action) => return action,\n         None => {\n-            // We have no action we no use item was found in container so we find\n+            // We have no action and no UseItem was found in container so we find\n             // another item and we use it as anchor.\n-            // If there are not items, we choose the target path itself as anchor.\n+            // If there are no items, we choose the target path itself as anchor.\n             let anchor = container\n                 .children()\n                 .find_map(ast::ModuleItem::cast)\n@@ -480,6 +480,24 @@ fn make_assist_add_nested_import(\n     }\n }\n \n+fn apply_auto_import<'a>(\n+    container: &SyntaxNode,\n+    path: &ast::Path,\n+    target: &[&'a ast::PathSegment],\n+    edit: &mut AssistBuilder,\n+) {\n+    let action = best_action_for_target(container, path, target);\n+    make_assist(&action, target, edit);\n+    if let (Some(first), Some(last)) = (target.first(), target.last()) {\n+        // Here we are assuming the assist will provide a  correct use statement\n+        // so we can delete the path qualifier\n+        edit.delete(TextRange::from_to(\n+            first.syntax().range().start(),\n+            last.syntax().range().start(),\n+        ));\n+    }\n+}\n+\n pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let node = ctx.covering_node();\n     let current_file = node.ancestors().find_map(ast::SourceFile::cast)?;\n@@ -496,16 +514,7 @@ pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n     }\n \n     ctx.add_action(format!(\"import {} in the current file\", fmt_segments(&segments)), |edit| {\n-        let action = best_action_for_target(current_file.syntax(), path, &segments);\n-        make_assist(&action, segments.as_slice(), edit);\n-        if let Some(last_segment) = path.segment() {\n-            // Here we are assuming the assist will provide a  correct use statement\n-            // so we can delete the path qualifier\n-            edit.delete(TextRange::from_to(\n-                path.syntax().range().start(),\n-                last_segment.syntax().range().start(),\n-            ));\n-        }\n+        apply_auto_import(current_file.syntax(), path, &segments, edit);\n     });\n \n     ctx.build()\n@@ -531,6 +540,21 @@ Debug<|>\n         );\n     }\n \n+    #[test]\n+    fn test_auto_import_file_add_use_no_anchor_2seg() {\n+        check_assist(\n+            auto_import,\n+            \"\n+std::fmt<|>::Debug\n+    \",\n+            \"\n+use std::fmt;\n+\n+fmt<|>::Debug\n+    \",\n+        );\n+    }\n+\n     #[test]\n     fn test_auto_import_file_add_use() {\n         check_assist(\n@@ -725,6 +749,16 @@ impl Debug<|> for Foo {\n             \"\n impl foo<|> for Foo {\n }\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_auto_import_not_applicable_in_use() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            \"\n+use std::fmt<|>;\n \",\n         );\n     }"}]}