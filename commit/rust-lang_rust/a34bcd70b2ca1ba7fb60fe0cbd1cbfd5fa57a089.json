{"sha": "a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "node_id": "C_kwDOAAsO6NoAKGEzNGJjZDcwYjJjYTFiYTdmYjYwZmUwY2JkMWNiZmQ1ZmE1N2EwODk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T18:56:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T18:56:22Z"}, "message": "Rollup merge of #110203 - compiler-errors:rtn-dots, r=eholk\n\nRemove `..` from return type notation\n\n`@nikomatsakis` and I decided that using `..` in the return-type notation syntax is probably overkill.\n\nr? `@eholk` since you reviewed the last one\n\nSince this is piggybacking now totally off of a pre-existing syntax (parenthesized generics), let me know if you need any explanation of the logic here, since it's a bit more complicated now.", "tree": {"sha": "80ecf040f8c30f8ee3dc617d64712c6d1596104c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80ecf040f8c30f8ee3dc617d64712c6d1596104c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNv7WCRBK7hj4Ov3rIwAA8kAIAHmxSPPIRZTfRkTOZzkgVuYm\n6UgjHlI1QGZcHdnZERM6ZEAMlyJfRLQMiu733Xc5SVV49u4urp9yoGhv0HVe7G3H\ncuF7BO8nIie7vD7CgsxqKlcooyDweUO7KS8eBVSKhngnb/G2T8RV/cSvJbA/cbHm\nXuYnKvE0boGtO/Ww820Rc3P/OmlOPeIdwEuj0G+PzZWVBam/JHGMLhbFvYDW87fU\nNDlFzMLHbjEOAt4s6gtDY8SbMiXLW/o5NMInCOd4/z9l+F7liSh8KBVY8Fma5Oac\nzugkE3KO1c36bhdRIYzrcOqecNcMHffvFWD7zgKHcXmVEJhmL2SGic9Wlnv/hjw=\n=SnAS\n-----END PGP SIGNATURE-----\n", "payload": "tree 80ecf040f8c30f8ee3dc617d64712c6d1596104c\nparent b4734f01fee9fd34f80e0516798e70e8e5666533\nparent 24cbf81b8546beb8193217316acf4ded4117b4af\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681325782 +0200\ncommitter GitHub <noreply@github.com> 1681325782 +0200\n\nRollup merge of #110203 - compiler-errors:rtn-dots, r=eholk\n\nRemove `..` from return type notation\n\n`@nikomatsakis` and I decided that using `..` in the return-type notation syntax is probably overkill.\n\nr? `@eholk` since you reviewed the last one\n\nSince this is piggybacking now totally off of a pre-existing syntax (parenthesized generics), let me know if you need any explanation of the logic here, since it's a bit more complicated now.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "html_url": "https://github.com/rust-lang/rust/commit/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4734f01fee9fd34f80e0516798e70e8e5666533", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4734f01fee9fd34f80e0516798e70e8e5666533", "html_url": "https://github.com/rust-lang/rust/commit/b4734f01fee9fd34f80e0516798e70e8e5666533"}, {"sha": "24cbf81b8546beb8193217316acf4ded4117b4af", "url": "https://api.github.com/repos/rust-lang/rust/commits/24cbf81b8546beb8193217316acf4ded4117b4af", "html_url": "https://github.com/rust-lang/rust/commit/24cbf81b8546beb8193217316acf4ded4117b4af"}], "stats": {"total": 235, "additions": 126, "deletions": 109}, "files": [{"sha": "df1a716755b481f37fc1ef4190448a11449e4047", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -167,9 +167,6 @@ pub enum GenericArgs {\n     AngleBracketed(AngleBracketedArgs),\n     /// The `(A, B)` and `C` in `Foo(A, B) -> C`.\n     Parenthesized(ParenthesizedArgs),\n-    /// Associated return type bounds, like `T: Trait<method(..): Send>`\n-    /// which applies the `Send` bound to the return-type of `method`.\n-    ReturnTypeNotation(Span),\n }\n \n impl GenericArgs {\n@@ -181,7 +178,6 @@ impl GenericArgs {\n         match self {\n             AngleBracketed(data) => data.span,\n             Parenthesized(data) => data.span,\n-            ReturnTypeNotation(span) => *span,\n         }\n     }\n }"}, {"sha": "694d31d8f1fd4718f97448c7f209465e2475f877", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -561,7 +561,6 @@ pub fn noop_visit_generic_args<T: MutVisitor>(generic_args: &mut GenericArgs, vi\n     match generic_args {\n         GenericArgs::AngleBracketed(data) => vis.visit_angle_bracketed_parameter_data(data),\n         GenericArgs::Parenthesized(data) => vis.visit_parenthesized_parameter_data(data),\n-        GenericArgs::ReturnTypeNotation(_span) => {}\n     }\n }\n "}, {"sha": "ac9b321b71c6fe643223d74bc51fbf058ddd8eb8", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -482,7 +482,6 @@ where\n             walk_list!(visitor, visit_ty, &data.inputs);\n             walk_fn_ret_ty(visitor, &data.output);\n         }\n-        GenericArgs::ReturnTypeNotation(_span) => {}\n     }\n }\n "}, {"sha": "3e9f9b43623f8131ad4f44aaa7f398e9b64772af", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -353,13 +353,7 @@ pub enum BadReturnTypeNotation {\n     #[diag(ast_lowering_bad_return_type_notation_inputs)]\n     Inputs {\n         #[primary_span]\n-        #[suggestion(code = \"(..)\", applicability = \"maybe-incorrect\")]\n-        span: Span,\n-    },\n-    #[diag(ast_lowering_bad_return_type_notation_needs_dots)]\n-    NeedsDots {\n-        #[primary_span]\n-        #[suggestion(code = \"(..)\", applicability = \"maybe-incorrect\")]\n+        #[suggestion(code = \"()\", applicability = \"maybe-incorrect\")]\n         span: Span,\n     },\n     #[diag(ast_lowering_bad_return_type_notation_output)]"}, {"sha": "f7ae96b7c4a3dbedce95f5496c66ff0c79b70a69", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -987,15 +987,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 GenericArgs::AngleBracketed(data) => {\n                     self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n-                &GenericArgs::ReturnTypeNotation(span) => GenericArgsCtor {\n-                    args: Default::default(),\n-                    bindings: &[],\n-                    parenthesized: hir::GenericArgsParentheses::ReturnTypeNotation,\n-                    span,\n-                },\n                 GenericArgs::Parenthesized(data) => {\n-                    if let Some(start_char) = constraint.ident.as_str().chars().next()\n-                        && start_char.is_ascii_lowercase()\n+                    if data.inputs.is_empty() && matches!(data.output, FnRetTy::Default(..)) {\n+                        let parenthesized = if self.tcx.features().return_type_notation {\n+                            hir::GenericArgsParentheses::ReturnTypeNotation\n+                        } else {\n+                            self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n+                            hir::GenericArgsParentheses::No\n+                        };\n+                        GenericArgsCtor {\n+                            args: Default::default(),\n+                            bindings: &[],\n+                            parenthesized,\n+                            span: data.inputs_span,\n+                        }\n+                    } else if let Some(first_char) = constraint.ident.as_str().chars().next()\n+                        && first_char.is_ascii_lowercase()\n                     {\n                         let mut err = if !data.inputs.is_empty() {\n                             self.tcx.sess.create_err(errors::BadReturnTypeNotation::Inputs {\n@@ -1006,9 +1013,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 span: data.inputs_span.shrink_to_hi().to(ty.span),\n                             })\n                         } else {\n-                            self.tcx.sess.create_err(errors::BadReturnTypeNotation::NeedsDots {\n-                                span: data.inputs_span,\n-                            })\n+                            unreachable!(\"inputs are empty and return type is not provided\")\n                         };\n                         if !self.tcx.features().return_type_notation\n                             && self.tcx.sess.is_nightly_build()"}, {"sha": "8eb84c036a0840d74cd2041d16f72fe70ba3ec6b", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -13,7 +13,6 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};\n-use thin_vec::ThinVec;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     #[instrument(level = \"trace\", skip(self))]\n@@ -219,18 +218,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         )\n                     }\n                 },\n-                &GenericArgs::ReturnTypeNotation(span) => {\n-                    self.tcx.sess.emit_err(GenericTypeWithParentheses { span, sub: None });\n-                    (\n-                        self.lower_angle_bracketed_parameter_data(\n-                            &AngleBracketedArgs { span, args: ThinVec::default() },\n-                            param_mode,\n-                            itctx,\n-                        )\n-                        .0,\n-                        false,\n-                    )\n-                }\n             }\n         } else {\n             ("}, {"sha": "c79626ccd76f0dc18249cffc15e09a30daaec8c2", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -1080,7 +1080,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.with_impl_trait(None, |this| this.visit_ty(ty));\n                 }\n             }\n-            GenericArgs::ReturnTypeNotation(_span) => {}\n         }\n     }\n \n@@ -1391,7 +1390,6 @@ fn deny_equality_constraints(\n                                     match &mut assoc_path.segments[len].args {\n                                         Some(args) => match args.deref_mut() {\n                                             GenericArgs::Parenthesized(_) => continue,\n-                                            GenericArgs::ReturnTypeNotation(_span) => continue,\n                                             GenericArgs::AngleBracketed(args) => {\n                                                 args.args.push(arg);\n                                             }"}, {"sha": "66d82a26c37727081562464db14c3c01d4d611bd", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -485,20 +485,23 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {\n         if let AssocConstraintKind::Bound { .. } = constraint.kind {\n-            if let Some(args) = constraint.gen_args.as_ref()\n-                && matches!(\n-                    args,\n-                    ast::GenericArgs::ReturnTypeNotation(..)\n-                )\n+            if let Some(ast::GenericArgs::Parenthesized(args)) = constraint.gen_args.as_ref()\n+                && args.inputs.is_empty()\n+                && matches!(args.output, ast::FnRetTy::Default(..))\n             {\n-                // RTN is gated below with a `gate_all`.\n+                gate_feature_post!(\n+                    &self,\n+                    return_type_notation,\n+                    constraint.span,\n+                    \"return type notation is experimental\"\n+                );\n             } else {\n                 gate_feature_post!(\n                     &self,\n                     associated_type_bounds,\n                     constraint.span,\n                     \"associated type bounds are unstable\"\n-                )\n+                );\n             }\n         }\n         visit::walk_assoc_constraint(self, constraint)\n@@ -589,7 +592,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(yeet_expr, \"`do yeet` expression is experimental\");\n     gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n     gate_all!(const_closures, \"const closures are experimental\");\n-    gate_all!(return_type_notation, \"return type notation is experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded).\n@@ -605,6 +607,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n \n     gate_all!(trait_alias, \"trait aliases are experimental\");\n     gate_all!(associated_type_bounds, \"associated type bounds are unstable\");\n+    gate_all!(return_type_notation, \"return type notation is experimental\");\n     gate_all!(decl_macro, \"`macro` is experimental\");\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");"}, {"sha": "849336c8669a1288fe20031bf54a7cf4a9c5452e", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -936,10 +936,6 @@ impl<'a> PrintState<'a> for State<'a> {\n                 self.word(\")\");\n                 self.print_fn_ret_ty(&data.output);\n             }\n-\n-            ast::GenericArgs::ReturnTypeNotation(_span) => {\n-                self.word(\"(..)\");\n-            }\n         }\n     }\n }"}, {"sha": "f11d0ed0f0109e20826fd0253b283c3334749595", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -738,3 +738,7 @@ parse_box_syntax_removed = `box_syntax` has been removed\n parse_bad_return_type_notation_output =\n     return type not allowed with return type notation\n     .suggestion = remove the return type\n+\n+parse_bad_return_type_notation_dotdot =\n+    return type notation uses `()` instead of `(..)` for elided arguments\n+    .suggestion = remove the `..`"}, {"sha": "069217165fabe3c920630d707cc200ceba8bdbfc", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -2324,3 +2324,11 @@ pub(crate) struct BadReturnTypeNotationOutput {\n     #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_bad_return_type_notation_dotdot)]\n+pub(crate) struct BadReturnTypeNotationDotDot {\n+    #[primary_span]\n+    #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+    pub span: Span,\n+}"}, {"sha": "c25c23d849f04f56387061217c471395a35971ed", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -290,16 +290,17 @@ impl<'a> Parser<'a> {\n                     })?;\n                     let span = lo.to(self.prev_token.span);\n                     AngleBracketedArgs { args, span }.into()\n-                } else if self.token.kind == token::OpenDelim(Delimiter::Parenthesis)\n+                } else if self.may_recover()\n+                    && self.token.kind == token::OpenDelim(Delimiter::Parenthesis)\n                     // FIXME(return_type_notation): Could also recover `...` here.\n                     && self.look_ahead(1, |tok| tok.kind == token::DotDot)\n                 {\n-                    let lo = self.token.span;\n                     self.bump();\n+                    self.sess\n+                        .emit_err(errors::BadReturnTypeNotationDotDot { span: self.token.span });\n                     self.bump();\n                     self.expect(&token::CloseDelim(Delimiter::Parenthesis))?;\n                     let span = lo.to(self.prev_token.span);\n-                    self.sess.gated_spans.gate(sym::return_type_notation, span);\n \n                     if self.eat_noexpect(&token::RArrow) {\n                         let lo = self.prev_token.span;\n@@ -308,7 +309,13 @@ impl<'a> Parser<'a> {\n                             .emit_err(errors::BadReturnTypeNotationOutput { span: lo.to(ty.span) });\n                     }\n \n-                    P(GenericArgs::ReturnTypeNotation(span))\n+                    ParenthesizedArgs {\n+                        span,\n+                        inputs: ThinVec::new(),\n+                        inputs_span: span,\n+                        output: ast::FnRetTy::Default(self.prev_token.span.shrink_to_hi()),\n+                    }\n+                    .into()\n                 } else {\n                     // `(T, U) -> R`\n                     let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n@@ -566,13 +573,13 @@ impl<'a> Parser<'a> {\n                     };\n \n                     let span = lo.to(self.prev_token.span);\n-\n                     // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n                     if let AssocConstraintKind::Bound { .. } = kind {\n-                        if gen_args.as_ref().map_or(false, |args| {\n-                            matches!(args, GenericArgs::ReturnTypeNotation(..))\n-                        }) {\n-                            // This is already gated in `parse_path_segment`\n+                        if let Some(ast::GenericArgs::Parenthesized(args)) = &gen_args\n+                            && args.inputs.is_empty()\n+                            && matches!(args.output, ast::FnRetTy::Default(..))\n+                        {\n+                            self.sess.gated_spans.gate(sym::return_type_notation, span);\n                         } else {\n                             self.sess.gated_spans.gate(sym::associated_type_bounds, span);\n                         }"}, {"sha": "47e032758f23da1b90be4453357f8af649fd1246", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -666,7 +666,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_generic_args(&mut self, g: &'v ast::GenericArgs) {\n         record_variants!(\n             (self, g, g, Id::None, ast, GenericArgs, GenericArgs),\n-            [AngleBracketed, Parenthesized, ReturnTypeNotation]\n+            [AngleBracketed, Parenthesized]\n         );\n         ast_visit::walk_generic_args(self, g)\n     }"}, {"sha": "90a2fa89cd2abdacf33c5e22c128cadb3dafd491", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -1116,7 +1116,6 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                         }\n                     }\n                 }\n-                GenericArgs::ReturnTypeNotation(_span) => {}\n             }\n         }\n     }"}, {"sha": "572b0c4cf6452dd7a9c2cfa2399fca66daf59a18", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -312,7 +312,6 @@ impl<'a> From<&'a ast::PathSegment> for Segment {\n                     (args.span, found_lifetimes)\n                 }\n                 GenericArgs::Parenthesized(args) => (args.span, true),\n-                GenericArgs::ReturnTypeNotation(span) => (*span, false),\n             }\n         } else {\n             (DUMMY_SP, false)"}, {"sha": "79cee55177ba0261d92ddbf437ea8d8a0294c4b8", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -12,11 +12,11 @@ fn foo<T: Trait<method(i32): Send>>() {}\n //~^ ERROR argument types not allowed with return type notation\n //~| ERROR associated type bounds are unstable\n \n-fn bar<T: Trait<method(..) -> (): Send>>() {}\n+fn bar<T: Trait<method() -> (): Send>>() {}\n //~^ ERROR return type not allowed with return type notation\n-\n-fn baz<T: Trait<method(): Send>>() {}\n-//~^ ERROR return type notation arguments must be elided with `..`\n //~| ERROR associated type bounds are unstable\n \n+fn baz<T: Trait<method(..): Send>>() {}\n+//~^ ERROR return type notation uses `()` instead of `(..)` for elided arguments\n+\n fn main() {}"}, {"sha": "b23e0f791eae4646113ca0ca79d2ed7e17913ffe", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -1,8 +1,8 @@\n-error: return type not allowed with return type notation\n-  --> $DIR/bad-inputs-and-output.rs:15:28\n+error: return type notation uses `()` instead of `(..)` for elided arguments\n+  --> $DIR/bad-inputs-and-output.rs:19:24\n    |\n-LL | fn bar<T: Trait<method(..) -> (): Send>>() {}\n-   |                            ^^^^^ help: remove the return type\n+LL | fn baz<T: Trait<method(..): Send>>() {}\n+   |                        ^^ help: remove the `..`\n \n error[E0658]: associated type bounds are unstable\n   --> $DIR/bad-inputs-and-output.rs:11:17\n@@ -14,10 +14,10 @@ LL | fn foo<T: Trait<method(i32): Send>>() {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/bad-inputs-and-output.rs:18:17\n+  --> $DIR/bad-inputs-and-output.rs:15:17\n    |\n-LL | fn baz<T: Trait<method(): Send>>() {}\n-   |                 ^^^^^^^^^^^^^^\n+LL | fn bar<T: Trait<method() -> (): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n@@ -43,13 +43,13 @@ error: argument types not allowed with return type notation\n   --> $DIR/bad-inputs-and-output.rs:11:23\n    |\n LL | fn foo<T: Trait<method(i32): Send>>() {}\n-   |                       ^^^^^ help: remove the input types: `(..)`\n+   |                       ^^^^^ help: remove the input types: `()`\n \n-error: return type notation arguments must be elided with `..`\n-  --> $DIR/bad-inputs-and-output.rs:18:23\n+error: return type not allowed with return type notation\n+  --> $DIR/bad-inputs-and-output.rs:15:25\n    |\n-LL | fn baz<T: Trait<method(): Send>>() {}\n-   |                       ^^ help: add `..`: `(..)`\n+LL | fn bar<T: Trait<method() -> (): Send>>() {}\n+   |                         ^^^^^^ help: remove the return type\n \n error: aborting due to 5 previous errors; 2 warnings emitted\n "}, {"sha": "0b7530b65d758e4d3dfd46c4fe8fa57f460c2b14", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -18,7 +18,7 @@ async fn foo<T: Foo>() -> Result<(), ()> {\n fn is_send(_: impl Send) {}\n \n fn test<\n-    #[cfg(with)] T: Foo<method(..): Send>,\n+    #[cfg(with)] T: Foo<method(): Send>,\n     #[cfg(without)] T: Foo,\n >() {\n     is_send(foo::<T>());"}, {"sha": "75f757e90259ba1433a479150bbf43c22c05cdad", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -10,7 +10,7 @@ trait Trait {\n     async fn method() {}\n }\n \n-fn test<T: Trait<method(..) = Box<dyn Future<Output = ()>>>>() {}\n+fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n //~^ ERROR return type notation is not allowed to use type equality\n \n fn main() {}"}, {"sha": "c5b2e5710d4a79db20b38662d643c1cdabe42e56", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -18,8 +18,8 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n error: return type notation is not allowed to use type equality\n   --> $DIR/equality.rs:13:18\n    |\n-LL | fn test<T: Trait<method(..) = Box<dyn Future<Output = ()>>>>() {}\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "7b98a5cdafdd3b27cfcab2e17e5d45842d3989e4", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -8,7 +8,7 @@ trait Trait {\n     async fn method() {}\n }\n \n-fn bar<T: Trait<methid(..): Send>>() {}\n+fn bar<T: Trait<methid(): Send>>() {}\n //~^ ERROR cannot find associated function `methid` in trait `Trait`\n \n fn main() {}"}, {"sha": "34f5bda884d4caa9dd11ecb56c3e85f496032c6e", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -18,8 +18,8 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n error: cannot find associated function `methid` in trait `Trait`\n   --> $DIR/missing.rs:11:17\n    |\n-LL | fn bar<T: Trait<methid(..): Send>>() {}\n-   |                 ^^^^^^^^^^^^^^^^\n+LL | fn bar<T: Trait<methid(): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "db5f6fe389ea7769967ec6e59ec56da5c78bd41a", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -5,7 +5,7 @@ trait Trait {\n     fn method() {}\n }\n \n-fn test<T: Trait<method(..): Send>>() {}\n+fn test<T: Trait<method(): Send>>() {}\n //~^ ERROR  return type notation used on function that is not `async` and does not return `impl Trait`\n \n fn main() {}"}, {"sha": "31b793995f8ab965616ac86d8cad41c364ef7401", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -13,8 +13,8 @@ error: return type notation used on function that is not `async` and does not re\n LL |     fn method() {}\n    |     ----------- this function must be `async` or return `impl Trait`\n ...\n-LL | fn test<T: Trait<method(..): Send>>() {}\n-   |                  ^^^^^^^^^^^^^^^^\n+LL | fn test<T: Trait<method(): Send>>() {}\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = note: function returns `()`, which is not compatible with associated type return bounds\n "}, {"sha": "c3a371e25e8961a6e44bfa9e9d90679197a97eee", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -1,21 +1,36 @@\n error[E0658]: return type notation is experimental\n-  --> $DIR/feature-gate-return_type_notation.rs:12:18\n+  --> $DIR/feature-gate-return_type_notation.rs:15:17\n    |\n-LL | fn foo<T: Trait<m(..): Send>>() {}\n-   |                  ^^^^\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^^^^^^^^^\n    |\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n \n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:4:12\n+  --> $DIR/feature-gate-return_type_notation.rs:7:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error: aborting due to previous error; 1 warning emitted\n+error: parenthesized generic arguments cannot be used in associated type constraints\n+  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^--\n+   |                  |\n+   |                  help: remove these parentheses\n+\n+error[E0220]: associated type `m` not found for `Trait`\n+  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^ associated type `m` not found\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0220, E0658.\n+For more information about an error, try `rustc --explain E0220`."}, {"sha": "52c90c1565cff0bf25c907e33c09325a80fb575b", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.no.stderr", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -1,21 +1,22 @@\n-error[E0658]: return type notation is experimental\n-  --> $DIR/feature-gate-return_type_notation.rs:12:18\n-   |\n-LL | fn foo<T: Trait<m(..): Send>>() {}\n-   |                  ^^^^\n-   |\n-   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n-   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n-\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:4:12\n+  --> $DIR/feature-gate-return_type_notation.rs:7:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error: aborting due to previous error; 1 warning emitted\n+warning: return type notation is experimental\n+  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 2 warnings emitted\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "5028b9ec9e3de7fc88ac31f707a76d3616d07894", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs?ref=a34bcd70b2ca1ba7fb60fe0cbd1cbfd5fa57a089", "patch": "@@ -1,6 +1,9 @@\n // edition: 2021\n // revisions: cfg no\n \n+//[no] check-pass\n+// Since we're not adding new syntax, `cfg`'d out RTN must pass.\n+\n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete\n \n@@ -9,7 +12,11 @@ trait Trait {\n }\n \n #[cfg(cfg)]\n-fn foo<T: Trait<m(..): Send>>() {}\n-//~^ ERROR return type notation is experimental\n+fn foo<T: Trait<m(): Send>>() {}\n+//[cfg]~^ ERROR return type notation is experimental\n+//[cfg]~| ERROR parenthesized generic arguments cannot be used in associated type constraints\n+//[cfg]~| ERROR associated type `m` not found for `Trait`\n+//[no]~^^^^ WARN return type notation is experimental\n+//[no]~| WARN unstable syntax can change at any point in the future, causing a hard error!\n \n fn main() {}"}]}