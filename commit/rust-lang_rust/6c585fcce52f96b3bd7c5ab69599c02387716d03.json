{"sha": "6c585fcce52f96b3bd7c5ab69599c02387716d03", "node_id": "C_kwDOAAsO6NoAKDZjNTg1ZmNjZTUyZjk2YjNiZDdjNWFiNjk1OTljMDIzODc3MTZkMDM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-30T15:11:07Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-30T18:22:05Z"}, "message": "Clean up render_assoc_items_inner a bit", "tree": {"sha": "44a23d66b8cae117529a1b186a89a47870562ead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44a23d66b8cae117529a1b186a89a47870562ead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c585fcce52f96b3bd7c5ab69599c02387716d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c585fcce52f96b3bd7c5ab69599c02387716d03", "html_url": "https://github.com/rust-lang/rust/commit/6c585fcce52f96b3bd7c5ab69599c02387716d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c585fcce52f96b3bd7c5ab69599c02387716d03/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a42ca942cda0d197a63373127e7e373305957a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a42ca942cda0d197a63373127e7e373305957a0", "html_url": "https://github.com/rust-lang/rust/commit/7a42ca942cda0d197a63373127e7e373305957a0"}], "stats": {"total": 106, "additions": 52, "deletions": 54}, "files": [{"sha": "56e1c1fe5a7bccdc10cd6ca615e3350bf78c4e7a", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6c585fcce52f96b3bd7c5ab69599c02387716d03/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c585fcce52f96b3bd7c5ab69599c02387716d03/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6c585fcce52f96b3bd7c5ab69599c02387716d03", "patch": "@@ -613,7 +613,7 @@ fn short_item_info(\n \n // Render the list of items inside one of the sections \"Trait Implementations\",\n // \"Auto Trait Implementations,\" \"Blanket Trait Implementations\" (on struct/enum pages).\n-fn render_impls(\n+pub(crate) fn render_impls(\n     cx: &mut Context<'_>,\n     w: &mut Buffer,\n     impls: &[&&Impl],\n@@ -1025,6 +1025,47 @@ impl<'a> AssocItemLink<'a> {\n     }\n }\n \n+fn write_impl_section_heading(w: &mut Buffer, title: &str, id: &str) {\n+    write!(\n+        w,\n+        \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n+            {title}\\\n+            <a href=\\\"#{id}\\\" class=\\\"anchor\\\"></a>\\\n+         </h2>\"\n+    );\n+}\n+\n+pub(crate) fn render_all_impls(\n+    w: &mut Buffer,\n+    cx: &mut Context<'_>,\n+    containing_item: &clean::Item,\n+    concrete: &[&&Impl],\n+    synthetic: &[&&Impl],\n+    blanket_impl: &[&&Impl],\n+) {\n+    let mut impls = Buffer::empty_from(w);\n+    render_impls(cx, &mut impls, concrete, containing_item, true);\n+    let impls = impls.into_inner();\n+    if !impls.is_empty() {\n+        write_impl_section_heading(w, \"Trait Implementations\", \"trait-implementations\");\n+        write!(w, \"<div id=\\\"trait-implementations-list\\\">{}</div>\", impls);\n+    }\n+\n+    if !synthetic.is_empty() {\n+        write_impl_section_heading(w, \"Auto Trait Implementations\", \"synthetic-implementations\");\n+        w.write_str(\"<div id=\\\"synthetic-implementations-list\\\">\");\n+        render_impls(cx, w, synthetic, containing_item, false);\n+        w.write_str(\"</div>\");\n+    }\n+\n+    if !blanket_impl.is_empty() {\n+        write_impl_section_heading(w, \"Blanket Implementations\", \"blanket-implementations\");\n+        w.write_str(\"<div id=\\\"blanket-implementations-list\\\">\");\n+        render_impls(cx, w, blanket_impl, containing_item, false);\n+        w.write_str(\"</div>\");\n+    }\n+}\n+\n fn render_assoc_items(\n     w: &mut Buffer,\n     cx: &mut Context<'_>,\n@@ -1054,12 +1095,7 @@ fn render_assoc_items_inner(\n         let mut tmp_buf = Buffer::empty_from(w);\n         let (render_mode, id) = match what {\n             AssocItemRender::All => {\n-                tmp_buf.write_str(\n-                    \"<h2 id=\\\"implementations\\\" class=\\\"small-section-header\\\">\\\n-                         Implementations\\\n-                         <a href=\\\"#implementations\\\" class=\\\"anchor\\\"></a>\\\n-                     </h2>\",\n-                );\n+                write_impl_section_heading(&mut tmp_buf, \"Implementations\", \"implementations\");\n                 (RenderMode::Normal, \"implementations-list\".to_owned())\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n@@ -1068,15 +1104,14 @@ fn render_assoc_items_inner(\n                 if let Some(def_id) = type_.def_id(cx.cache()) {\n                     cx.deref_id_map.insert(def_id, id.clone());\n                 }\n-                write!(\n-                    tmp_buf,\n-                    \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n-                         <span>Methods from {trait_}&lt;Target = {type_}&gt;</span>\\\n-                         <a href=\\\"#{id}\\\" class=\\\"anchor\\\"></a>\\\n-                     </h2>\",\n-                    id = id,\n-                    trait_ = trait_.print(cx),\n-                    type_ = type_.print(cx),\n+                write_impl_section_heading(\n+                    &mut tmp_buf,\n+                    &format!(\n+                        \"<span>Methods from {trait_}&lt;Target = {type_}&gt;</span>\",\n+                        trait_ = trait_.print(cx),\n+                        type_ = type_.print(cx),\n+                    ),\n+                    &id,\n                 );\n                 (RenderMode::ForDeref { mut_: deref_mut_ }, cx.derive_id(id))\n             }\n@@ -1128,44 +1163,7 @@ fn render_assoc_items_inner(\n         let (blanket_impl, concrete): (Vec<&&Impl>, _) =\n             concrete.into_iter().partition(|t| t.inner_impl().kind.is_blanket());\n \n-        let mut impls = Buffer::empty_from(w);\n-        render_impls(cx, &mut impls, &concrete, containing_item, true);\n-        let impls = impls.into_inner();\n-        if !impls.is_empty() {\n-            write!(\n-                w,\n-                \"<h2 id=\\\"trait-implementations\\\" class=\\\"small-section-header\\\">\\\n-                     Trait Implementations\\\n-                     <a href=\\\"#trait-implementations\\\" class=\\\"anchor\\\"></a>\\\n-                 </h2>\\\n-                 <div id=\\\"trait-implementations-list\\\">{}</div>\",\n-                impls\n-            );\n-        }\n-\n-        if !synthetic.is_empty() {\n-            w.write_str(\n-                \"<h2 id=\\\"synthetic-implementations\\\" class=\\\"small-section-header\\\">\\\n-                     Auto Trait Implementations\\\n-                     <a href=\\\"#synthetic-implementations\\\" class=\\\"anchor\\\"></a>\\\n-                 </h2>\\\n-                 <div id=\\\"synthetic-implementations-list\\\">\",\n-            );\n-            render_impls(cx, w, &synthetic, containing_item, false);\n-            w.write_str(\"</div>\");\n-        }\n-\n-        if !blanket_impl.is_empty() {\n-            w.write_str(\n-                \"<h2 id=\\\"blanket-implementations\\\" class=\\\"small-section-header\\\">\\\n-                     Blanket Implementations\\\n-                     <a href=\\\"#blanket-implementations\\\" class=\\\"anchor\\\"></a>\\\n-                 </h2>\\\n-                 <div id=\\\"blanket-implementations-list\\\">\",\n-            );\n-            render_impls(cx, w, &blanket_impl, containing_item, false);\n-            w.write_str(\"</div>\");\n-        }\n+        render_all_impls(w, cx, containing_item, &concrete, &synthetic, &blanket_impl);\n     }\n }\n "}]}