{"sha": "5c8993854495a35a182182b00d472e08be796a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODk5Mzg1NDQ5NWEzNWExODIxODJiMDBkNDcyZTA4YmU3OTZhNmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T23:50:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T00:05:17Z"}, "message": "rt: Remove rust_timer. Unused", "tree": {"sha": "bf4fddeb5135ba862651a004b44834974ef47bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4fddeb5135ba862651a004b44834974ef47bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8993854495a35a182182b00d472e08be796a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8993854495a35a182182b00d472e08be796a6b", "html_url": "https://github.com/rust-lang/rust/commit/5c8993854495a35a182182b00d472e08be796a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8993854495a35a182182b00d472e08be796a6b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d24eb58a094b73f1b22cdc7ea5087b59f1d1b574", "url": "https://api.github.com/repos/rust-lang/rust/commits/d24eb58a094b73f1b22cdc7ea5087b59f1d1b574", "html_url": "https://github.com/rust-lang/rust/commit/d24eb58a094b73f1b22cdc7ea5087b59f1d1b574"}], "stats": {"total": 119, "additions": 0, "deletions": 119}, "files": [{"sha": "1a140426a5fc5a6f7e358b6715a272cf840ca18d", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c8993854495a35a182182b00d472e08be796a6b/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5c8993854495a35a182182b00d472e08be796a6b/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=5c8993854495a35a182182b00d472e08be796a6b", "patch": "@@ -50,7 +50,6 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_uv.cpp \\\n               rt/rust_uvtmp.cpp \\\n               rt/rust_log.cpp \\\n-              rt/rust_timer.cpp \\\n               rt/circular_buffer.cpp \\\n               rt/isaac/randport.cpp \\\n               rt/rust_srv.cpp \\"}, {"sha": "a31aa9b31afee53aad5a0678e0e7ae217e42938e", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c8993854495a35a182182b00d472e08be796a6b/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/5c8993854495a35a182182b00d472e08be796a6b/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=5c8993854495a35a182182b00d472e08be796a6b", "patch": "@@ -220,27 +220,6 @@ template <typename T> class ptr_vec : public task_owned<ptr_vec<T> > {\n #include \"rust_kernel.h\"\n #include \"rust_scheduler.h\"\n \n-struct rust_timer {\n-    // FIXME: This will probably eventually need replacement\n-    // with something more sophisticated and integrated with\n-    // an IO event-handling library, when we have such a thing.\n-    // For now it's just the most basic \"thread that can interrupt\n-    // its associated domain-thread\" device, so that we have\n-    // *some* form of task-preemption.\n-    rust_scheduler *sched;\n-    uintptr_t exit_flag;\n-\n-#if defined(__WIN32__)\n-    HANDLE thread;\n-#else\n-    pthread_attr_t attr;\n-    pthread_t thread;\n-#endif\n-\n-    rust_timer(rust_scheduler *sched);\n-    ~rust_timer();\n-};\n-\n typedef void CDECL (glue_fn)(void *, void *,\n                              const type_desc **, void *);\n typedef void CDECL (cmp_glue_fn)(void *, void *,"}, {"sha": "d4aaa9edbcd90c134ef07f70452ec1e83bc6de45", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c8993854495a35a182182b00d472e08be796a6b/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5c8993854495a35a182182b00d472e08be796a6b/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=5c8993854495a35a182182b00d472e08be796a6b", "patch": "@@ -244,13 +244,6 @@ void\n rust_scheduler::start_main_loop() {\n     lock.lock();\n \n-    // Make sure someone is watching, to pull us out of infinite loops.\n-    //\n-    // FIXME: time-based interruption is not presently working; worked\n-    // in rustboot and has been completely broken in rustc.\n-    //\n-    // rust_timer timer(this);\n-\n     DLOG(this, dom, \"started domain loop %d\", id);\n \n     while (kernel->live_tasks > 0) {"}, {"sha": "ffa9876676375fd882631bfbe4c2376fe7e0e7ee", "filename": "src/rt/rust_timer.cpp", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d24eb58a094b73f1b22cdc7ea5087b59f1d1b574/src%2Frt%2Frust_timer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d24eb58a094b73f1b22cdc7ea5087b59f1d1b574/src%2Frt%2Frust_timer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_timer.cpp?ref=d24eb58a094b73f1b22cdc7ea5087b59f1d1b574", "patch": "@@ -1,90 +0,0 @@\n-#include \"rust_internal.h\"\n-#include \"vg/valgrind.h\"\n-\n-// The mechanism in this file is very crude; every domain (thread) spawns its\n-// own secondary timer thread, and that timer thread *never idles*. It\n-// sleep-loops interrupting the domain.\n-//\n-// This will need replacement, particularly in order to achieve an actual\n-// state of idling when we're waiting on the outside world.  Though that might\n-// be as simple as making a secondary waitable start/stop-timer signalling\n-// system between the domain and its timer thread. We'll see.\n-//\n-// On the other hand, we don't presently have the ability to idle domains *at\n-// all*, and without the timer thread we're unable to otherwise preempt rust\n-// tasks. So ... one step at a time.\n-//\n-// The implementation here is \"lockless\" in the sense that it only involves\n-// one-directional signaling of one-shot events, so the event initiator just\n-// writes a nonzero word to a prederermined location and waits for the\n-// receiver to see it show up in their memory.\n-\n-#if defined(__WIN32__)\n-static DWORD WINAPI\n-#elif defined(__GNUC__)\n-static void *\n-#else\n-#error \"Platform not supported\"\n-#endif\n-timer_loop(void *ptr) {\n-    // We were handed the rust_timer that owns us.\n-    rust_timer *timer = (rust_timer *)ptr;\n-    rust_scheduler *sched = timer->sched;\n-    DLOG(sched, timer, \"in timer 0x%\" PRIxPTR, (uintptr_t)timer);\n-    size_t ms = TIME_SLICE_IN_MS;\n-\n-    while (!timer->exit_flag) {\n-#if defined(__WIN32__)\n-        Sleep(ms);\n-#else\n-        usleep(ms * 1000);\n-#endif\n-        DLOG(sched, timer, \"timer 0x%\" PRIxPTR\n-        \" interrupting schedain 0x%\" PRIxPTR, (uintptr_t) timer,\n-                 (uintptr_t) sched);\n-        sched->interrupt_flag = 1;\n-    }\n-#if defined(__WIN32__)\n-    ExitThread(0);\n-#else\n-    pthread_exit(NULL);\n-#endif\n-    return 0;\n-}\n-\n-rust_timer::rust_timer(rust_scheduler *sched) :\n-    sched(sched), exit_flag(0) {\n-    DLOG(sched, timer, \"creating timer for domain 0x%\" PRIxPTR, sched);\n-#if defined(__WIN32__)\n-    thread = CreateThread(NULL, 0, timer_loop, this, 0, NULL);\n-    sched->kernel->win32_require(\"CreateThread\", thread != NULL);\n-    if (RUNNING_ON_VALGRIND)\n-        Sleep(10);\n-#else\n-    pthread_attr_init(&attr);\n-    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n-    pthread_create(&thread, &attr, timer_loop, (void *)this);\n-#endif\n-}\n-\n-rust_timer::~rust_timer() {\n-    exit_flag = 1;\n-#if defined(__WIN32__)\n-    sched->kernel->win32_require(\"WaitForSingleObject\",\n-                               WaitForSingleObject(thread, INFINITE) ==\n-                               WAIT_OBJECT_0);\n-#else\n-    pthread_join(thread, NULL);\n-#endif\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//"}]}