{"sha": "d15663814b8ec3b60da9e1c733c90e478ebb3ed0", "node_id": "C_kwDOAAsO6NoAKGQxNTY2MzgxNGI4ZWMzYjYwZGE5ZTFjNzMzYzkwZTQ3OGViYjNlZDA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T09:38:49Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T10:01:40Z"}, "message": "Inline the expansion query", "tree": {"sha": "c1abb2c7fc47e8d8000ae1b4cc80b6c8157ae460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1abb2c7fc47e8d8000ae1b4cc80b6c8157ae460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15663814b8ec3b60da9e1c733c90e478ebb3ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15663814b8ec3b60da9e1c733c90e478ebb3ed0", "html_url": "https://github.com/rust-lang/rust/commit/d15663814b8ec3b60da9e1c733c90e478ebb3ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15663814b8ec3b60da9e1c733c90e478ebb3ed0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f4c0723ed871472b050b6031b7c9f5e7e0970d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f4c0723ed871472b050b6031b7c9f5e7e0970d", "html_url": "https://github.com/rust-lang/rust/commit/21f4c0723ed871472b050b6031b7c9f5e7e0970d"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "fcd399c0540e3f80152a115e4d2296a8e3228bd8", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d15663814b8ec3b60da9e1c733c90e478ebb3ed0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15663814b8ec3b60da9e1c733c90e478ebb3ed0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=d15663814b8ec3b60da9e1c733c90e478ebb3ed0", "patch": "@@ -13,7 +13,7 @@ use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n+use rustc_middle::ty::{self, GlobalCtxt, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n use rustc_resolve::Resolver;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n@@ -88,7 +88,6 @@ pub struct Queries<'tcx> {\n     parse: Query<ast::Crate>,\n     crate_name: Query<Symbol>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n-    expansion: Query<(Lrc<ast::Crate>, ResolverOutputs, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     // This just points to what's in `gcx_cell`.\n     gcx: Query<&'tcx GlobalCtxt<'tcx>>,\n@@ -107,7 +106,6 @@ impl<'tcx> Queries<'tcx> {\n             parse: Default::default(),\n             crate_name: Default::default(),\n             register_plugins: Default::default(),\n-            expansion: Default::default(),\n             dep_graph: Default::default(),\n             gcx: Default::default(),\n             ongoing_codegen: Default::default(),\n@@ -169,30 +167,6 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn expansion(\n-        &self,\n-    ) -> Result<QueryResult<'_, (Lrc<ast::Crate>, ResolverOutputs, Lrc<LintStore>)>> {\n-        trace!(\"expansion\");\n-        self.expansion.compute(|| {\n-            let crate_name = *self.crate_name()?.borrow();\n-            let (krate, lint_store) = self.register_plugins()?.steal();\n-            let _timer = self.session().timer(\"configure_and_expand\");\n-            let sess = self.session();\n-\n-            let arenas = Resolver::arenas();\n-            let mut resolver = Resolver::new(\n-                sess,\n-                &krate,\n-                crate_name,\n-                self.codegen_backend().metadata_loader(),\n-                &arenas,\n-            );\n-            let krate =\n-                passes::configure_and_expand(sess, &lint_store, krate, crate_name, &mut resolver)?;\n-            Ok((Lrc::new(krate), resolver.into_outputs(), lint_store))\n-        })\n-    }\n-\n     fn dep_graph(&self) -> Result<QueryResult<'_, DepGraph>> {\n         self.dep_graph.compute(|| {\n             let sess = self.session();\n@@ -212,7 +186,28 @@ impl<'tcx> Queries<'tcx> {\n     pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, &'tcx GlobalCtxt<'tcx>>> {\n         self.gcx.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n-            let (krate, resolver_outputs, lint_store) = self.expansion()?.steal();\n+            let (krate, resolver_outputs, lint_store) = {\n+                let (krate, lint_store) = self.register_plugins()?.steal();\n+                let _timer = self.session().timer(\"configure_and_expand\");\n+                let sess = self.session();\n+\n+                let arenas = Resolver::arenas();\n+                let mut resolver = Resolver::new(\n+                    sess,\n+                    &krate,\n+                    crate_name,\n+                    self.codegen_backend().metadata_loader(),\n+                    &arenas,\n+                );\n+                let krate = passes::configure_and_expand(\n+                    sess,\n+                    &lint_store,\n+                    krate,\n+                    crate_name,\n+                    &mut resolver,\n+                )?;\n+                (Lrc::new(krate), resolver.into_outputs(), lint_store)\n+            };\n \n             let ty::ResolverOutputs {\n                 untracked,"}]}