{"sha": "c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMWZiYzNlODdkMWU3MDFmMjlmYWZjZGFkMGE3M2U4ZDY5YTJmMjk=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T16:31:49Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T16:37:40Z"}, "message": "Migrate tests from extension to rust", "tree": {"sha": "0d013438df4c61f510dada3787aaa5dc8a30138e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d013438df4c61f510dada3787aaa5dc8a30138e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "html_url": "https://github.com/rust-lang/rust/commit/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17360b5d14ec98085169bfb344b220dcfc75b9f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/17360b5d14ec98085169bfb344b220dcfc75b9f0", "html_url": "https://github.com/rust-lang/rust/commit/17360b5d14ec98085169bfb344b220dcfc75b9f0"}], "stats": {"total": 1069, "additions": 1069, "deletions": 0}, "files": [{"sha": "08e4b7106ea83d47a07c2a87fb456f2ed9864a68", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1054,6 +1054,7 @@ dependencies = [\n  \"cargo_metadata 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jod-thread 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-server 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "54a01d7a2c7d94a333368fbfbc3d3d7bb09cb177", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -30,6 +30,7 @@ env_logger = { version = \"0.7.1\", default-features = false, features = [\"humanti\n cargo_metadata = \"0.9.1\"\n \n [dev-dependencies]\n+insta = \"0.12.0\"\n tempfile = \"3\"\n test_utils = { path = \"../test_utils\" }\n "}, {"sha": "5a6a209eba390918b511c06db8ace57b6a5cb387", "filename": "crates/ra_lsp_server/src/cargo_check.rs", "status": "modified", "additions": 709, "deletions": 0, "changes": 709, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -461,6 +461,7 @@ fn map_rust_child_diagnostic(\n     }\n }\n \n+#[derive(Debug)]\n struct MappedRustDiagnostic {\n     location: Location,\n     diagnostic: Diagnostic,\n@@ -563,3 +564,711 @@ fn are_diagnostics_equal(left: &Diagnostic, right: &Diagnostic) -> bool {\n         && left.range == right.range\n         && left.message == right.message\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+\n+    fn parse_diagnostic(val: &str) -> cargo_metadata::diagnostic::Diagnostic {\n+        serde_json::from_str::<cargo_metadata::diagnostic::Diagnostic>(val).unwrap()\n+    }\n+\n+    #[test]\n+    fn snap_rustc_incompatible_type_for_trait() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+                \"message\": \"method `next` has an incompatible type for trait\",\n+                \"code\": {\n+                    \"code\": \"E0053\",\n+                    \"explanation\": \"\\nThe parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nHere are a couple examples of this error:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"\n+                },\n+                \"level\": \"error\",\n+                \"spans\": [\n+                    {\n+                        \"file_name\": \"compiler/ty/list_iter.rs\",\n+                        \"byte_start\": 1307,\n+                        \"byte_end\": 1350,\n+                        \"line_start\": 52,\n+                        \"line_end\": 52,\n+                        \"column_start\": 5,\n+                        \"column_end\": 48,\n+                        \"is_primary\": true,\n+                        \"text\": [\n+                            {\n+                                \"text\": \"    fn next(&self) -> Option<&'list ty::Ref<M>> {\",\n+                                \"highlight_start\": 5,\n+                                \"highlight_end\": 48\n+                            }\n+                        ],\n+                        \"label\": \"types differ in mutability\",\n+                        \"suggested_replacement\": null,\n+                        \"suggestion_applicability\": null,\n+                        \"expansion\": null\n+                    }\n+                ],\n+                \"children\": [\n+                    {\n+                        \"message\": \"expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\",\n+                        \"code\": null,\n+                        \"level\": \"note\",\n+                        \"spans\": [],\n+                        \"children\": [],\n+                        \"rendered\": null\n+                    }\n+                ],\n+                \"rendered\": \"error[E0053]: method `next` has an incompatible type for trait\\n  --> compiler/ty/list_iter.rs:52:5\\n   |\\n52 |     fn next(&self) -> Option<&'list ty::Ref<M>> {\\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\\n   |\\n   = note: expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n              found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\\n\\n\"\n+            }\n+            \"##,\n+        );\n+\n+        let workspace_root = PathBuf::from(\"/test/\");\n+        let diag =\n+            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    fn snap_rustc_unused_variable() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"message\": \"unused variable: `foo`\",\n+    \"code\": {\n+        \"code\": \"unused_variables\",\n+        \"explanation\": null\n+    },\n+    \"level\": \"warning\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"driver/subcommand/repl.rs\",\n+            \"byte_start\": 9228,\n+            \"byte_end\": 9231,\n+            \"line_start\": 291,\n+            \"line_end\": 291,\n+            \"column_start\": 9,\n+            \"column_end\": 12,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    let foo = 42;\",\n+                    \"highlight_start\": 9,\n+                    \"highlight_end\": 12\n+                }\n+            ],\n+            \"label\": null,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"#[warn(unused_variables)] on by default\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider prefixing with an underscore\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"driver/subcommand/repl.rs\",\n+                    \"byte_start\": 9228,\n+                    \"byte_end\": 9231,\n+                    \"line_start\": 291,\n+                    \"line_end\": 291,\n+                    \"column_start\": 9,\n+                    \"column_end\": 12,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let foo = 42;\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 12\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"_foo\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n+}\"##,\n+        );\n+\n+        let workspace_root = PathBuf::from(\"/test/\");\n+        let diag =\n+            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    fn snap_rustc_wrong_number_of_parameters() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"message\": \"this function takes 2 parameters but 3 parameters were supplied\",\n+    \"code\": {\n+        \"code\": \"E0061\",\n+        \"explanation\": \"\\nThe number of arguments passed to a function must match the number of arguments\\nspecified in the function signature.\\n\\nFor example, a function like:\\n\\n```\\nfn f(a: u16, b: &str) {}\\n```\\n\\nMust always be called with exactly two arguments, e.g., `f(2, \\\"test\\\")`.\\n\\nNote that Rust does not have a notion of optional function arguments or\\nvariadic functions (except for its C-FFI).\\n\"\n+    },\n+    \"level\": \"error\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"compiler/ty/select.rs\",\n+            \"byte_start\": 8787,\n+            \"byte_end\": 9241,\n+            \"line_start\": 219,\n+            \"line_end\": 231,\n+            \"column_start\": 5,\n+            \"column_end\": 6,\n+            \"is_primary\": false,\n+            \"text\": [\n+                {\n+                    \"text\": \"    pub fn add_evidence(\",\n+                    \"highlight_start\": 5,\n+                    \"highlight_end\": 25\n+                },\n+                {\n+                    \"text\": \"        &mut self,\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 19\n+                },\n+                {\n+                    \"text\": \"        target_poly: &ty::Ref<ty::Poly>,\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 41\n+                },\n+                {\n+                    \"text\": \"        evidence_poly: &ty::Ref<ty::Poly>,\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 43\n+                },\n+                {\n+                    \"text\": \"    ) {\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 8\n+                },\n+                {\n+                    \"text\": \"        match target_poly {\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 28\n+                },\n+                {\n+                    \"text\": \"            ty::Ref::Var(tvar, _) => self.add_var_evidence(tvar, evidence_poly),\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 81\n+                },\n+                {\n+                    \"text\": \"            ty::Ref::Fixed(target_ty) => {\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 43\n+                },\n+                {\n+                    \"text\": \"                let evidence_ty = evidence_poly.resolve_to_ty();\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 65\n+                },\n+                {\n+                    \"text\": \"                self.add_evidence_ty(target_ty, evidence_poly, evidence_ty)\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 76\n+                },\n+                {\n+                    \"text\": \"            }\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 14\n+                },\n+                {\n+                    \"text\": \"        }\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 10\n+                },\n+                {\n+                    \"text\": \"    }\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 6\n+                }\n+            ],\n+            \"label\": \"defined here\",\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        },\n+        {\n+            \"file_name\": \"compiler/ty/select.rs\",\n+            \"byte_start\": 4045,\n+            \"byte_end\": 4057,\n+            \"line_start\": 104,\n+            \"line_end\": 104,\n+            \"column_start\": 18,\n+            \"column_end\": 30,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"            self.add_evidence(target_fixed, evidence_fixed, false);\",\n+                    \"highlight_start\": 18,\n+                    \"highlight_end\": 30\n+                }\n+            ],\n+            \"label\": \"expected 2 parameters\",\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [],\n+    \"rendered\": \"error[E0061]: this function takes 2 parameters but 3 parameters were supplied\\n   --> compiler/ty/select.rs:104:18\\n    |\\n104 |               self.add_evidence(target_fixed, evidence_fixed, false);\\n    |                    ^^^^^^^^^^^^ expected 2 parameters\\n...\\n219 | /     pub fn add_evidence(\\n220 | |         &mut self,\\n221 | |         target_poly: &ty::Ref<ty::Poly>,\\n222 | |         evidence_poly: &ty::Ref<ty::Poly>,\\n...   |\\n230 | |         }\\n231 | |     }\\n    | |_____- defined here\\n\\n\"\n+}\"##,\n+        );\n+\n+        let workspace_root = PathBuf::from(\"/test/\");\n+        let diag =\n+            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    fn snap_clippy_pass_by_ref() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"message\": \"this argument is passed by reference, but would be more efficient if passed by value\",\n+    \"code\": {\n+        \"code\": \"clippy::trivially_copy_pass_by_ref\",\n+        \"explanation\": null\n+    },\n+    \"level\": \"warning\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"compiler/mir/tagset.rs\",\n+            \"byte_start\": 941,\n+            \"byte_end\": 946,\n+            \"line_start\": 42,\n+            \"line_end\": 42,\n+            \"column_start\": 24,\n+            \"column_end\": 29,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n+                    \"highlight_start\": 24,\n+                    \"highlight_end\": 29\n+                }\n+            ],\n+            \"label\": null,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"lint level defined here\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"compiler/lib.rs\",\n+                    \"byte_start\": 8,\n+                    \"byte_end\": 19,\n+                    \"line_start\": 1,\n+                    \"line_end\": 1,\n+                    \"column_start\": 9,\n+                    \"column_end\": 20,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"#![warn(clippy::all)]\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 20\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider passing by value instead\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"compiler/mir/tagset.rs\",\n+                    \"byte_start\": 941,\n+                    \"byte_end\": 946,\n+                    \"line_start\": 42,\n+                    \"line_end\": 42,\n+                    \"column_start\": 24,\n+                    \"column_end\": 29,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n+                            \"highlight_start\": 24,\n+                            \"highlight_end\": 29\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"self\",\n+                    \"suggestion_applicability\": \"Unspecified\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"warning: this argument is passed by reference, but would be more efficient if passed by value\\n  --> compiler/mir/tagset.rs:42:24\\n   |\\n42 |     pub fn is_disjoint(&self, other: Self) -> bool {\\n   |                        ^^^^^ help: consider passing by value instead: `self`\\n   |\\nnote: lint level defined here\\n  --> compiler/lib.rs:1:9\\n   |\\n1  | #![warn(clippy::all)]\\n   |         ^^^^^^^^^^^\\n   = note: #[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\\n\\n\"\n+}\"##,\n+        );\n+\n+        let workspace_root = PathBuf::from(\"/test/\");\n+        let diag =\n+            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    fn snap_rustc_mismatched_type() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"message\": \"mismatched types\",\n+    \"code\": {\n+        \"code\": \"E0308\",\n+        \"explanation\": \"\\nThis error occurs when the compiler was unable to infer the concrete type of a\\nvariable. It can occur for several cases, the most common of which is a\\nmismatch in the expected type that the compiler inferred for a variable's\\ninitializing expression, and the actual type explicitly assigned to the\\nvariable.\\n\\nFor example:\\n\\n```compile_fail,E0308\\nlet x: i32 = \\\"I am not a number!\\\";\\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\\n//      |             |\\n//      |    initializing expression;\\n//      |    compiler infers type `&str`\\n//      |\\n//    type `i32` assigned to variable `x`\\n```\\n\"\n+    },\n+    \"level\": \"error\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"runtime/compiler_support.rs\",\n+            \"byte_start\": 1589,\n+            \"byte_end\": 1594,\n+            \"line_start\": 48,\n+            \"line_end\": 48,\n+            \"column_start\": 65,\n+            \"column_end\": 70,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    let layout = alloc::Layout::from_size_align_unchecked(size, align);\",\n+                    \"highlight_start\": 65,\n+                    \"highlight_end\": 70\n+                }\n+            ],\n+            \"label\": \"expected usize, found u32\",\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [],\n+    \"rendered\": \"error[E0308]: mismatched types\\n  --> runtime/compiler_support.rs:48:65\\n   |\\n48 |     let layout = alloc::Layout::from_size_align_unchecked(size, align);\\n   |                                                                 ^^^^^ expected usize, found u32\\n\\n\"\n+}\"##,\n+        );\n+\n+        let workspace_root = PathBuf::from(\"/test/\");\n+        let diag =\n+            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+\n+    #[test]\n+    fn snap_handles_macro_location() {\n+        let diag = parse_diagnostic(\n+            r##\"{\n+    \"rendered\": \"error[E0277]: can't compare `{integer}` with `&str`\\n --> src/main.rs:2:5\\n  |\\n2 |     assert_eq!(1, \\\"love\\\");\\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\\n  |\\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\\n\\n\",\n+    \"children\": [\n+        {\n+            \"children\": [],\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"message\": \"the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n+            \"rendered\": null,\n+            \"spans\": []\n+        }\n+    ],\n+    \"code\": {\n+        \"code\": \"E0277\",\n+        \"explanation\": \"\\nYou tried to use a type which doesn't implement some trait in a place which\\nexpected that trait. Erroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function: Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function: It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"\n+    },\n+    \"level\": \"error\",\n+    \"message\": \"can't compare `{integer}` with `&str`\",\n+    \"spans\": [\n+        {\n+            \"byte_end\": 155,\n+            \"byte_start\": 153,\n+            \"column_end\": 33,\n+            \"column_start\": 31,\n+            \"expansion\": {\n+                \"def_site_span\": {\n+                    \"byte_end\": 940,\n+                    \"byte_start\": 0,\n+                    \"column_end\": 6,\n+                    \"column_start\": 1,\n+                    \"expansion\": null,\n+                    \"file_name\": \"<::core::macros::assert_eq macros>\",\n+                    \"is_primary\": false,\n+                    \"label\": null,\n+                    \"line_end\": 36,\n+                    \"line_start\": 1,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"text\": [\n+                        {\n+                            \"highlight_end\": 35,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"($ left : expr, $ right : expr) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 3,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     match (& $ left, & $ right)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 34,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         (left_val, right_val) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 46,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             if ! (* left_val == * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 25,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 panic !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 57,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n+                        },\n+                        {\n+                            \"highlight_end\": 16,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"  left: `{:?}`,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 18,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" right: `{:?}`\\\"#,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 47,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  & * left_val, & * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 42,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" }) ; ($ left : expr, $ right : expr,) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 49,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({ $ crate :: assert_eq ! ($ left, $ right) }) ;\"\n+                        },\n+                        {\n+                            \"highlight_end\": 53,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 3,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({\"\n+                        },\n+                        {\n+                            \"highlight_end\": 37,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     match (& ($ left), & ($ right))\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 34,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         (left_val, right_val) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 46,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             if ! (* left_val == * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 25,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 panic !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 57,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n+                        },\n+                        {\n+                            \"highlight_end\": 16,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"  left: `{:?}`,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 22,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" right: `{:?}`: {}\\\"#,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 72,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  & * left_val, & * right_val, $ crate :: format_args !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  ($ ($ arg) +))\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 6,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" }) ;\"\n+                        }\n+                    ]\n+                },\n+                \"macro_decl_name\": \"assert_eq!\",\n+                \"span\": {\n+                    \"byte_end\": 38,\n+                    \"byte_start\": 16,\n+                    \"column_end\": 27,\n+                    \"column_start\": 5,\n+                    \"expansion\": null,\n+                    \"file_name\": \"src/main.rs\",\n+                    \"is_primary\": false,\n+                    \"label\": null,\n+                    \"line_end\": 2,\n+                    \"line_start\": 2,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"text\": [\n+                        {\n+                            \"highlight_end\": 27,\n+                            \"highlight_start\": 5,\n+                            \"text\": \"    assert_eq!(1, \\\"love\\\");\"\n+                        }\n+                    ]\n+                }\n+            },\n+            \"file_name\": \"<::core::macros::assert_eq macros>\",\n+            \"is_primary\": true,\n+            \"label\": \"no implementation for `{integer} == &str`\",\n+            \"line_end\": 7,\n+            \"line_start\": 7,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"text\": [\n+                {\n+                    \"highlight_end\": 33,\n+                    \"highlight_start\": 31,\n+                    \"text\": \"             if ! (* left_val == * right_val)\"\n+                }\n+            ]\n+        }\n+    ]\n+}\"##,\n+        );\n+\n+        let workspace_root = PathBuf::from(\"/test/\");\n+        let diag =\n+            map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+        insta::assert_debug_snapshot!(diag);\n+    }\n+}"}, {"sha": "a5ce291572379f91d3a37d878d7e1fee51f41195", "filename": "crates/ra_lsp_server/src/snapshots/test__snap_clippy_pass_by_ref.snap", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_clippy_pass_by_ref.snap", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_clippy_pass_by_ref.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_clippy_pass_by_ref.snap?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -0,0 +1,85 @@\n+---\n+source: crates/ra_lsp_server/src/cargo_check.rs\n+expression: diag\n+---\n+MappedRustDiagnostic {\n+    location: Location {\n+        uri: \"file:///test/compiler/mir/tagset.rs\",\n+        range: Range {\n+            start: Position {\n+                line: 41,\n+                character: 23,\n+            },\n+            end: Position {\n+                line: 41,\n+                character: 28,\n+            },\n+        },\n+    },\n+    diagnostic: Diagnostic {\n+        range: Range {\n+            start: Position {\n+                line: 41,\n+                character: 23,\n+            },\n+            end: Position {\n+                line: 41,\n+                character: 28,\n+            },\n+        },\n+        severity: Some(\n+            Warning,\n+        ),\n+        code: Some(\n+            String(\n+                \"trivially_copy_pass_by_ref\",\n+            ),\n+        ),\n+        source: Some(\n+            \"clippy\",\n+        ),\n+        message: \"this argument is passed by reference, but would be more efficient if passed by value\\n#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\nfor further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\",\n+        related_information: Some(\n+            [\n+                DiagnosticRelatedInformation {\n+                    location: Location {\n+                        uri: \"file:///test/compiler/lib.rs\",\n+                        range: Range {\n+                            start: Position {\n+                                line: 0,\n+                                character: 8,\n+                            },\n+                            end: Position {\n+                                line: 0,\n+                                character: 19,\n+                            },\n+                        },\n+                    },\n+                    message: \"lint level defined here\",\n+                },\n+            ],\n+        ),\n+        tags: None,\n+    },\n+    suggested_fixes: [\n+        SuggestedFix {\n+            title: \"consider passing by value instead: \\'self\\'\",\n+            location: Location {\n+                uri: \"file:///test/compiler/mir/tagset.rs\",\n+                range: Range {\n+                    start: Position {\n+                        line: 41,\n+                        character: 23,\n+                    },\n+                    end: Position {\n+                        line: 41,\n+                        character: 28,\n+                    },\n+                },\n+            },\n+            replacement: \"self\",\n+            applicability: Unspecified,\n+            diagnostics: [],\n+        },\n+    ],\n+}"}, {"sha": "07e363ebf152b891e33a3919f03d4d667c86bf4e", "filename": "crates/ra_lsp_server/src/snapshots/test__snap_handles_macro_location.snap", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_handles_macro_location.snap", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_handles_macro_location.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_handles_macro_location.snap?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -0,0 +1,46 @@\n+---\n+source: crates/ra_lsp_server/src/cargo_check.rs\n+expression: diag\n+---\n+MappedRustDiagnostic {\n+    location: Location {\n+        uri: \"file:///test/src/main.rs\",\n+        range: Range {\n+            start: Position {\n+                line: 1,\n+                character: 4,\n+            },\n+            end: Position {\n+                line: 1,\n+                character: 26,\n+            },\n+        },\n+    },\n+    diagnostic: Diagnostic {\n+        range: Range {\n+            start: Position {\n+                line: 1,\n+                character: 4,\n+            },\n+            end: Position {\n+                line: 1,\n+                character: 26,\n+            },\n+        },\n+        severity: Some(\n+            Error,\n+        ),\n+        code: Some(\n+            String(\n+                \"E0277\",\n+            ),\n+        ),\n+        source: Some(\n+            \"rustc\",\n+        ),\n+        message: \"can\\'t compare `{integer}` with `&str`\\nthe trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n+        related_information: None,\n+        tags: None,\n+    },\n+    suggested_fixes: [],\n+}"}, {"sha": "85a87db0b827975f7a08467873c6e3ca2553115d", "filename": "crates/ra_lsp_server/src/snapshots/test__snap_rustc_incompatible_type_for_trait.snap", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_incompatible_type_for_trait.snap", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_incompatible_type_for_trait.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_incompatible_type_for_trait.snap?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -0,0 +1,46 @@\n+---\n+source: crates/ra_lsp_server/src/cargo_check.rs\n+expression: diag\n+---\n+MappedRustDiagnostic {\n+    location: Location {\n+        uri: \"file:///test/compiler/ty/list_iter.rs\",\n+        range: Range {\n+            start: Position {\n+                line: 51,\n+                character: 4,\n+            },\n+            end: Position {\n+                line: 51,\n+                character: 47,\n+            },\n+        },\n+    },\n+    diagnostic: Diagnostic {\n+        range: Range {\n+            start: Position {\n+                line: 51,\n+                character: 4,\n+            },\n+            end: Position {\n+                line: 51,\n+                character: 47,\n+            },\n+        },\n+        severity: Some(\n+            Error,\n+        ),\n+        code: Some(\n+            String(\n+                \"E0053\",\n+            ),\n+        ),\n+        source: Some(\n+            \"rustc\",\n+        ),\n+        message: \"method `next` has an incompatible type for trait\\nexpected type `fn(&mut ty::list_iter::ListIterator<\\'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<\\'list, M>) -> std::option::Option<&\\'list ty::Ref<M>>`\",\n+        related_information: None,\n+        tags: None,\n+    },\n+    suggested_fixes: [],\n+}"}, {"sha": "69cb8badfcbb1886c50c0e048a41834d76908373", "filename": "crates/ra_lsp_server/src/snapshots/test__snap_rustc_mismatched_type.snap", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_mismatched_type.snap", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_mismatched_type.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_mismatched_type.snap?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -0,0 +1,46 @@\n+---\n+source: crates/ra_lsp_server/src/cargo_check.rs\n+expression: diag\n+---\n+MappedRustDiagnostic {\n+    location: Location {\n+        uri: \"file:///test/runtime/compiler_support.rs\",\n+        range: Range {\n+            start: Position {\n+                line: 47,\n+                character: 64,\n+            },\n+            end: Position {\n+                line: 47,\n+                character: 69,\n+            },\n+        },\n+    },\n+    diagnostic: Diagnostic {\n+        range: Range {\n+            start: Position {\n+                line: 47,\n+                character: 64,\n+            },\n+            end: Position {\n+                line: 47,\n+                character: 69,\n+            },\n+        },\n+        severity: Some(\n+            Error,\n+        ),\n+        code: Some(\n+            String(\n+                \"E0308\",\n+            ),\n+        ),\n+        source: Some(\n+            \"rustc\",\n+        ),\n+        message: \"mismatched types\\nexpected usize, found u32\",\n+        related_information: None,\n+        tags: None,\n+    },\n+    suggested_fixes: [],\n+}"}, {"sha": "33a3e30348e4ff31fc6e863a38fc99b5214ee121", "filename": "crates/ra_lsp_server/src/snapshots/test__snap_rustc_unused_variable.snap", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_unused_variable.snap", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_unused_variable.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_unused_variable.snap?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -0,0 +1,70 @@\n+---\n+source: crates/ra_lsp_server/src/cargo_check.rs\n+expression: diag\n+---\n+MappedRustDiagnostic {\n+    location: Location {\n+        uri: \"file:///test/driver/subcommand/repl.rs\",\n+        range: Range {\n+            start: Position {\n+                line: 290,\n+                character: 8,\n+            },\n+            end: Position {\n+                line: 290,\n+                character: 11,\n+            },\n+        },\n+    },\n+    diagnostic: Diagnostic {\n+        range: Range {\n+            start: Position {\n+                line: 290,\n+                character: 8,\n+            },\n+            end: Position {\n+                line: 290,\n+                character: 11,\n+            },\n+        },\n+        severity: Some(\n+            Warning,\n+        ),\n+        code: Some(\n+            String(\n+                \"unused_variables\",\n+            ),\n+        ),\n+        source: Some(\n+            \"rustc\",\n+        ),\n+        message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n+        related_information: None,\n+        tags: Some(\n+            [\n+                Unnecessary,\n+            ],\n+        ),\n+    },\n+    suggested_fixes: [\n+        SuggestedFix {\n+            title: \"consider prefixing with an underscore: \\'_foo\\'\",\n+            location: Location {\n+                uri: \"file:///test/driver/subcommand/repl.rs\",\n+                range: Range {\n+                    start: Position {\n+                        line: 290,\n+                        character: 8,\n+                    },\n+                    end: Position {\n+                        line: 290,\n+                        character: 11,\n+                    },\n+                },\n+            },\n+            replacement: \"_foo\",\n+            applicability: MachineApplicable,\n+            diagnostics: [],\n+        },\n+    ],\n+}"}, {"sha": "ced6fa4df1ce4ceeb97ec15d1442412b1784c782", "filename": "crates/ra_lsp_server/src/snapshots/test__snap_rustc_wrong_number_of_parameters.snap", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_wrong_number_of_parameters.snap", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_wrong_number_of_parameters.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fsnapshots%2Ftest__snap_rustc_wrong_number_of_parameters.snap?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -0,0 +1,65 @@\n+---\n+source: crates/ra_lsp_server/src/cargo_check.rs\n+expression: diag\n+---\n+MappedRustDiagnostic {\n+    location: Location {\n+        uri: \"file:///test/compiler/ty/select.rs\",\n+        range: Range {\n+            start: Position {\n+                line: 103,\n+                character: 17,\n+            },\n+            end: Position {\n+                line: 103,\n+                character: 29,\n+            },\n+        },\n+    },\n+    diagnostic: Diagnostic {\n+        range: Range {\n+            start: Position {\n+                line: 103,\n+                character: 17,\n+            },\n+            end: Position {\n+                line: 103,\n+                character: 29,\n+            },\n+        },\n+        severity: Some(\n+            Error,\n+        ),\n+        code: Some(\n+            String(\n+                \"E0061\",\n+            ),\n+        ),\n+        source: Some(\n+            \"rustc\",\n+        ),\n+        message: \"this function takes 2 parameters but 3 parameters were supplied\\nexpected 2 parameters\",\n+        related_information: Some(\n+            [\n+                DiagnosticRelatedInformation {\n+                    location: Location {\n+                        uri: \"file:///test/compiler/ty/select.rs\",\n+                        range: Range {\n+                            start: Position {\n+                                line: 218,\n+                                character: 4,\n+                            },\n+                            end: Position {\n+                                line: 230,\n+                                character: 5,\n+                            },\n+                        },\n+                    },\n+                    message: \"defined here\",\n+                },\n+            ],\n+        ),\n+        tags: None,\n+    },\n+    suggested_fixes: [],\n+}"}]}