{"sha": "144b8cf5db99df4f6132f1ac5b59184f8907965d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NGI4Y2Y1ZGI5OWRmNGY2MTMyZjFhYzViNTkxODRmODkwNzk2NWQ=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-18T14:51:01Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:26:41Z"}, "message": "Factor write_ty out of check_struct_expr", "tree": {"sha": "11eb30efe22595bc7cbd4482dd43dae11ab142a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11eb30efe22595bc7cbd4482dd43dae11ab142a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/144b8cf5db99df4f6132f1ac5b59184f8907965d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/144b8cf5db99df4f6132f1ac5b59184f8907965d", "html_url": "https://github.com/rust-lang/rust/commit/144b8cf5db99df4f6132f1ac5b59184f8907965d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/144b8cf5db99df4f6132f1ac5b59184f8907965d/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22dd2e2d9f29869ff7956cecb5a616ce50e3e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22dd2e2d9f29869ff7956cecb5a616ce50e3e89", "html_url": "https://github.com/rust-lang/rust/commit/f22dd2e2d9f29869ff7956cecb5a616ce50e3e89"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "838cf36b8853eef90e9fecec1257f3746814441b", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/144b8cf5db99df4f6132f1ac5b59184f8907965d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144b8cf5db99df4f6132f1ac5b59184f8907965d/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=144b8cf5db99df4f6132f1ac5b59184f8907965d", "patch": "@@ -497,6 +497,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             return;\n         };\n+        self.write_ty(pat.id, pat_ty);\n \n         // Type check the path.\n         self.demand_eqtype(pat.span, expected, pat_ty);"}, {"sha": "f70d7c577486c450033c59ecf4202285dc89ec4f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/144b8cf5db99df4f6132f1ac5b59184f8907965d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144b8cf5db99df4f6132f1ac5b59184f8907965d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=144b8cf5db99df4f6132f1ac5b59184f8907965d", "patch": "@@ -1711,7 +1711,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.add_obligations_for_parameters(cause, &bounds);\n \n         let ty_substituted = self.instantiate_type_scheme(path.span, substs, &ty);\n-        self.write_ty(node_id, ty_substituted);\n         self.write_substs(node_id, ty::ItemSubsts {\n             substs: substs\n         });\n@@ -3190,12 +3189,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn check_struct_fields_on_error(&self,\n-                                    id: ast::NodeId,\n                                     fields: &'gcx [hir::Field],\n-                                    base_expr: &'gcx Option<P<hir::Expr>>) -> Ty<'tcx> {\n-        // Make sure to still write the types\n-        // otherwise we might ICE\n-        let ty = self.write_error(id);\n+                                    base_expr: &'gcx Option<P<hir::Expr>>) {\n         for field in fields {\n             self.check_expr(&field.expr);\n         }\n@@ -3205,7 +3200,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             },\n             None => {}\n         }\n-        ty\n     }\n \n     pub fn check_struct_path(&self,\n@@ -3262,7 +3256,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                                                   expr.span) {\n             variant_ty\n         } else {\n-            return self.check_struct_fields_on_error(expr.id, fields, base_expr);\n+            self.check_struct_fields_on_error(fields, base_expr);\n+            return self.tcx().types.err;\n         };\n \n         self.check_expr_struct_fields(expr_t, path.span, variant, fields,\n@@ -3286,6 +3281,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n         }\n+        self.require_type_is_sized(expr_t, expr.span, traits::StructInitializerSized);\n         expr_t\n     }\n \n@@ -3690,9 +3686,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           }\n           hir::ExprStruct(ref path, ref fields, ref base_expr) => {\n             let ty = self.check_expr_struct(expr, path, fields, base_expr);\n-\n-            self.require_type_is_sized(ty, expr.span, traits::StructInitializerSized);\n-            ty\n+            self.write_ty(id, ty)\n           }\n           hir::ExprField(ref base, ref field) => {\n             let ty = self.check_field(expr, lvalue_pref, &base, field);"}]}