{"sha": "bc830a274b91d67fed39b875247163fde4f13326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjODMwYTI3NGI5MWQ2N2ZlZDM5Yjg3NTI0NzE2M2ZkZTRmMTMzMjY=", "commit": {"author": {"name": "Daniel Conley", "email": "danielc030417@gmail.com", "date": "2021-01-22T22:20:42Z"}, "committer": {"name": "Daniel Conley", "email": "danielc030417@gmail.com", "date": "2021-01-22T22:57:07Z"}, "message": "library/core/tests/iter rearrange & add back missed doc comments", "tree": {"sha": "e8be20fcbddafa4080fc5522dcdc338e66b3d6a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8be20fcbddafa4080fc5522dcdc338e66b3d6a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc830a274b91d67fed39b875247163fde4f13326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc830a274b91d67fed39b875247163fde4f13326", "html_url": "https://github.com/rust-lang/rust/commit/bc830a274b91d67fed39b875247163fde4f13326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc830a274b91d67fed39b875247163fde4f13326/comments", "author": {"login": "danii", "id": 39541871, "node_id": "MDQ6VXNlcjM5NTQxODcx", "avatar_url": "https://avatars.githubusercontent.com/u/39541871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danii", "html_url": "https://github.com/danii", "followers_url": "https://api.github.com/users/danii/followers", "following_url": "https://api.github.com/users/danii/following{/other_user}", "gists_url": "https://api.github.com/users/danii/gists{/gist_id}", "starred_url": "https://api.github.com/users/danii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danii/subscriptions", "organizations_url": "https://api.github.com/users/danii/orgs", "repos_url": "https://api.github.com/users/danii/repos", "events_url": "https://api.github.com/users/danii/events{/privacy}", "received_events_url": "https://api.github.com/users/danii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danii", "id": 39541871, "node_id": "MDQ6VXNlcjM5NTQxODcx", "avatar_url": "https://avatars.githubusercontent.com/u/39541871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danii", "html_url": "https://github.com/danii", "followers_url": "https://api.github.com/users/danii/followers", "following_url": "https://api.github.com/users/danii/following{/other_user}", "gists_url": "https://api.github.com/users/danii/gists{/gist_id}", "starred_url": "https://api.github.com/users/danii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danii/subscriptions", "organizations_url": "https://api.github.com/users/danii/orgs", "repos_url": "https://api.github.com/users/danii/repos", "events_url": "https://api.github.com/users/danii/events{/privacy}", "received_events_url": "https://api.github.com/users/danii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e3a2def678477ce81e2a8c03b9df998acc289a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3a2def678477ce81e2a8c03b9df998acc289a5", "html_url": "https://github.com/rust-lang/rust/commit/1e3a2def678477ce81e2a8c03b9df998acc289a5"}], "stats": {"total": 544, "additions": 274, "deletions": 270}, "files": [{"sha": "ca5ae12ae263f6ef90b70ef7ae1d3c7f9973fe46", "filename": "library/core/tests/iter/adapters/chain.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -226,3 +226,47 @@ fn test_chain_try_folds() {\n     iter.nth(14); // skip the first 15, ending in state Back\n     assert_eq!(iter.try_rfold(7, f), (15..20).try_rfold(7, f));\n }\n+\n+#[test]\n+fn test_double_ended_chain() {\n+    let xs = [1, 2, 3, 4, 5];\n+    let ys = [7, 9, 11];\n+    let mut it = xs.iter().chain(&ys).rev();\n+    assert_eq!(it.next().unwrap(), &11);\n+    assert_eq!(it.next().unwrap(), &9);\n+    assert_eq!(it.next_back().unwrap(), &1);\n+    assert_eq!(it.next_back().unwrap(), &2);\n+    assert_eq!(it.next_back().unwrap(), &3);\n+    assert_eq!(it.next_back().unwrap(), &4);\n+    assert_eq!(it.next_back().unwrap(), &5);\n+    assert_eq!(it.next_back().unwrap(), &7);\n+    assert_eq!(it.next_back(), None);\n+\n+    // test that .chain() is well behaved with an unfused iterator\n+    struct CrazyIterator(bool);\n+    impl CrazyIterator {\n+        fn new() -> CrazyIterator {\n+            CrazyIterator(false)\n+        }\n+    }\n+    impl Iterator for CrazyIterator {\n+        type Item = i32;\n+        fn next(&mut self) -> Option<i32> {\n+            if self.0 {\n+                Some(99)\n+            } else {\n+                self.0 = true;\n+                None\n+            }\n+        }\n+    }\n+\n+    impl DoubleEndedIterator for CrazyIterator {\n+        fn next_back(&mut self) -> Option<i32> {\n+            self.next()\n+        }\n+    }\n+\n+    assert_eq!(CrazyIterator::new().chain(0..10).rev().last(), Some(0));\n+    assert!((0..10).chain(CrazyIterator::new()).rev().any(|i| i == 0));\n+}"}, {"sha": "0e60338784797e64c0a9250a44aed224440fb4e6", "filename": "library/core/tests/iter/adapters/enumerate.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -92,3 +92,16 @@ fn test_enumerate_try_folds() {\n     assert_eq!(iter.try_rfold(0, f), None);\n     assert_eq!(iter.next_back(), Some((11, 111)));\n }\n+\n+#[test]\n+fn test_double_ended_enumerate() {\n+    let xs = [1, 2, 3, 4, 5, 6];\n+    let mut it = xs.iter().cloned().enumerate();\n+    assert_eq!(it.next(), Some((0, 1)));\n+    assert_eq!(it.next(), Some((1, 2)));\n+    assert_eq!(it.next_back(), Some((5, 6)));\n+    assert_eq!(it.next_back(), Some((4, 5)));\n+    assert_eq!(it.next_back(), Some((3, 4)));\n+    assert_eq!(it.next_back(), Some((2, 3)));\n+    assert_eq!(it.next(), None);\n+}"}, {"sha": "a2050d89d8564fb1a86e24144e676a2c790710a2", "filename": "library/core/tests/iter/adapters/filter.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -40,3 +40,13 @@ fn test_filter_try_folds() {\n     assert_eq!(iter.try_rfold(0, i8::checked_add), None);\n     assert_eq!(iter.next_back(), Some(31));\n }\n+\n+#[test]\n+fn test_double_ended_filter() {\n+    let xs = [1, 2, 3, 4, 5, 6];\n+    let mut it = xs.iter().filter(|&x| *x & 1 == 0);\n+    assert_eq!(it.next_back().unwrap(), &6);\n+    assert_eq!(it.next_back().unwrap(), &4);\n+    assert_eq!(it.next().unwrap(), &2);\n+    assert_eq!(it.next_back(), None);\n+}"}, {"sha": "46738eda63f3d1ce2f6a8a26ef397a9147b8af3a", "filename": "library/core/tests/iter/adapters/filter_map.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter_map.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -24,3 +24,27 @@ fn test_filter_map_fold() {\n     });\n     assert_eq!(i, 0);\n }\n+\n+#[test]\n+fn test_filter_map_try_folds() {\n+    let mp = &|x| if 0 <= x && x < 10 { Some(x * 2) } else { None };\n+    let f = &|acc, x| i32::checked_add(2 * acc, x);\n+    assert_eq!((-9..20).filter_map(mp).try_fold(7, f), (0..10).map(|x| 2 * x).try_fold(7, f));\n+    assert_eq!((-9..20).filter_map(mp).try_rfold(7, f), (0..10).map(|x| 2 * x).try_rfold(7, f));\n+\n+    let mut iter = (0..40).filter_map(|x| if x % 2 == 1 { None } else { Some(x * 2 + 10) });\n+    assert_eq!(iter.try_fold(0, i8::checked_add), None);\n+    assert_eq!(iter.next(), Some(38));\n+    assert_eq!(iter.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(iter.next_back(), Some(78));\n+}\n+\n+#[test]\n+fn test_double_ended_filter_map() {\n+    let xs = [1, 2, 3, 4, 5, 6];\n+    let mut it = xs.iter().filter_map(|&x| if x & 1 == 0 { Some(x * 2) } else { None });\n+    assert_eq!(it.next_back().unwrap(), 12);\n+    assert_eq!(it.next_back().unwrap(), 8);\n+    assert_eq!(it.next().unwrap(), 4);\n+    assert_eq!(it.next_back(), None);\n+}"}, {"sha": "ee945e69801b879e609b95177772dc037ff1bc52", "filename": "library/core/tests/iter/adapters/flat_map.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflat_map.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -13,6 +13,8 @@ fn test_iterator_flat_map() {\n     assert_eq!(i, ys.len());\n }\n \n+/// Tests `FlatMap::fold` with items already picked off the front and back,\n+/// to make sure all parts of the `FlatMap` are folded correctly.\n #[test]\n fn test_iterator_flat_map_fold() {\n     let xs = [0, 3, 6];\n@@ -53,3 +55,20 @@ fn test_flat_map_try_folds() {\n     assert_eq!(iter.try_rfold(0, i8::checked_add), None);\n     assert_eq!(iter.next_back(), Some(35));\n }\n+\n+#[test]\n+fn test_double_ended_flat_map() {\n+    let u = [0, 1];\n+    let v = [5, 6, 7, 8];\n+    let mut it = u.iter().flat_map(|x| &v[*x..v.len()]);\n+    assert_eq!(it.next_back().unwrap(), &8);\n+    assert_eq!(it.next().unwrap(), &5);\n+    assert_eq!(it.next_back().unwrap(), &7);\n+    assert_eq!(it.next_back().unwrap(), &6);\n+    assert_eq!(it.next_back().unwrap(), &8);\n+    assert_eq!(it.next().unwrap(), &6);\n+    assert_eq!(it.next_back().unwrap(), &7);\n+    assert_eq!(it.next_back(), None);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.next_back(), None);\n+}"}, {"sha": "bd2c6fd9252dfd3649c56b7ad5ca6916bf74a975", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -14,6 +14,8 @@ fn test_iterator_flatten() {\n     assert_eq!(i, ys.len());\n }\n \n+/// Tests `Flatten::fold` with items already picked off the front and back,\n+/// to make sure all parts of the `Flatten` are folded correctly.\n #[test]\n fn test_iterator_flatten_fold() {\n     let xs = [0, 3, 6];\n@@ -73,3 +75,20 @@ fn test_flatten_non_fused_inner() {\n     assert_eq!(iter.next(), Some(1));\n     assert_eq!(iter.next(), None);\n }\n+\n+#[test]\n+fn test_double_ended_flatten() {\n+    let u = [0, 1];\n+    let v = [5, 6, 7, 8];\n+    let mut it = u.iter().map(|x| &v[*x..v.len()]).flatten();\n+    assert_eq!(it.next_back().unwrap(), &8);\n+    assert_eq!(it.next().unwrap(), &5);\n+    assert_eq!(it.next_back().unwrap(), &7);\n+    assert_eq!(it.next_back().unwrap(), &6);\n+    assert_eq!(it.next_back().unwrap(), &8);\n+    assert_eq!(it.next().unwrap(), &6);\n+    assert_eq!(it.next_back().unwrap(), &7);\n+    assert_eq!(it.next_back(), None);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.next_back(), None);\n+}"}, {"sha": "f41b379b3ac7fdb01f290450a5047be9ff2e7eee", "filename": "library/core/tests/iter/adapters/fuse.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffuse.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -55,3 +55,21 @@ fn test_fuse_fold() {\n     });\n     assert_eq!(i, xs.len());\n }\n+\n+#[test]\n+fn test_fuse() {\n+    let mut it = 0..3;\n+    assert_eq!(it.len(), 3);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.len(), 2);\n+    assert_eq!(it.next(), Some(1));\n+    assert_eq!(it.len(), 1);\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.len(), 0);\n+}"}, {"sha": "9dbe232e4eec89d75aafe5db691839ee4941691e", "filename": "library/core/tests/iter/adapters/intersperse.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -129,3 +129,26 @@ fn test_intersperse_collect_string() {\n         .collect::<String>();\n     assert_eq!(contents_string, \"1, 2, 3\");\n }\n+\n+#[test]\n+fn test_try_fold_specialization_intersperse_err() {\n+    let orig_iter = [\"a\", \"b\"].iter().copied().intersperse(\"-\");\n+\n+    // Abort after the first item.\n+    let mut iter = orig_iter.clone();\n+    iter.try_for_each(|_| None::<()>);\n+    assert_eq!(iter.next(), Some(\"-\"));\n+    assert_eq!(iter.next(), Some(\"b\"));\n+    assert_eq!(iter.next(), None);\n+\n+    // Abort after the second item.\n+    let mut iter = orig_iter.clone();\n+    iter.try_for_each(|item| if item == \"-\" { None } else { Some(()) });\n+    assert_eq!(iter.next(), Some(\"b\"));\n+    assert_eq!(iter.next(), None);\n+\n+    // Abort after the third item.\n+    let mut iter = orig_iter.clone();\n+    iter.try_for_each(|item| if item == \"b\" { None } else { Some(()) });\n+    assert_eq!(iter.next(), None);\n+}"}, {"sha": "77ce3819b322e62cccb535432738cb6c0e9e97ef", "filename": "library/core/tests/iter/adapters/map.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmap.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -1,28 +1,5 @@\n use core::iter::*;\n \n-#[test]\n-fn test_find_map() {\n-    let xs: &[isize] = &[];\n-    assert_eq!(xs.iter().find_map(half_if_even), None);\n-    let xs: &[isize] = &[3, 5];\n-    assert_eq!(xs.iter().find_map(half_if_even), None);\n-    let xs: &[isize] = &[4, 5];\n-    assert_eq!(xs.iter().find_map(half_if_even), Some(2));\n-    let xs: &[isize] = &[3, 6];\n-    assert_eq!(xs.iter().find_map(half_if_even), Some(3));\n-\n-    let xs: &[isize] = &[1, 2, 3, 4, 5, 6, 7];\n-    let mut iter = xs.iter();\n-    assert_eq!(iter.find_map(half_if_even), Some(1));\n-    assert_eq!(iter.find_map(half_if_even), Some(2));\n-    assert_eq!(iter.find_map(half_if_even), Some(3));\n-    assert_eq!(iter.next(), Some(&7));\n-\n-    fn half_if_even(x: &isize) -> Option<isize> {\n-        if x % 2 == 0 { Some(x / 2) } else { None }\n-    }\n-}\n-\n #[test]\n fn test_map_try_folds() {\n     let f = &|acc, x| i32::checked_add(2 * acc, x);\n@@ -37,15 +14,14 @@ fn test_map_try_folds() {\n }\n \n #[test]\n-fn test_filter_map_try_folds() {\n-    let mp = &|x| if 0 <= x && x < 10 { Some(x * 2) } else { None };\n-    let f = &|acc, x| i32::checked_add(2 * acc, x);\n-    assert_eq!((-9..20).filter_map(mp).try_fold(7, f), (0..10).map(|x| 2 * x).try_fold(7, f));\n-    assert_eq!((-9..20).filter_map(mp).try_rfold(7, f), (0..10).map(|x| 2 * x).try_rfold(7, f));\n-\n-    let mut iter = (0..40).filter_map(|x| if x % 2 == 1 { None } else { Some(x * 2 + 10) });\n-    assert_eq!(iter.try_fold(0, i8::checked_add), None);\n-    assert_eq!(iter.next(), Some(38));\n-    assert_eq!(iter.try_rfold(0, i8::checked_add), None);\n-    assert_eq!(iter.next_back(), Some(78));\n+fn test_double_ended_map() {\n+    let xs = [1, 2, 3, 4, 5, 6];\n+    let mut it = xs.iter().map(|&x| x * -1);\n+    assert_eq!(it.next(), Some(-1));\n+    assert_eq!(it.next(), Some(-2));\n+    assert_eq!(it.next_back(), Some(-6));\n+    assert_eq!(it.next_back(), Some(-5));\n+    assert_eq!(it.next(), Some(-3));\n+    assert_eq!(it.next_back(), Some(-4));\n+    assert_eq!(it.next(), None);\n }"}, {"sha": "96a53be1eaa507e0c298fc689b886afcc2864167", "filename": "library/core/tests/iter/adapters/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -15,7 +15,6 @@ mod peekable;\n mod scan;\n mod skip;\n mod skip_while;\n-mod step;\n mod step_by;\n mod take;\n mod take_while;"}, {"sha": "1fce0951e365e527dcea7269a358a7e9d4708bcf", "filename": "library/core/tests/iter/adapters/zip.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -231,3 +231,17 @@ fn test_zip_trusted_random_access_composition() {\n     assert_trusted_random_access(&z2);\n     assert_eq!(z2.next().unwrap(), ((1, 1), 1));\n }\n+\n+#[test]\n+fn test_double_ended_zip() {\n+    let xs = [1, 2, 3, 4, 5, 6];\n+    let ys = [1, 2, 3, 7];\n+    let a = xs.iter().cloned();\n+    let b = ys.iter().cloned();\n+    let mut it = a.zip(b);\n+    assert_eq!(it.next(), Some((1, 1)));\n+    assert_eq!(it.next(), Some((2, 2)));\n+    assert_eq!(it.next_back(), Some((4, 7)));\n+    assert_eq!(it.next_back(), Some((3, 3)));\n+    assert_eq!(it.next(), None);\n+}"}, {"sha": "b88454a50c406eabb5bb972914454383c088bad6", "filename": "library/core/tests/iter/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fmod.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -83,26 +83,3 @@ pub fn extend_for_unit() {\n     }\n     assert_eq!(x, 5);\n }\n-\n-#[test]\n-fn test_try_fold_specialization_intersperse_err() {\n-    let orig_iter = [\"a\", \"b\"].iter().copied().intersperse(\"-\");\n-\n-    // Abort after the first item.\n-    let mut iter = orig_iter.clone();\n-    iter.try_for_each(|_| None::<()>);\n-    assert_eq!(iter.next(), Some(\"-\"));\n-    assert_eq!(iter.next(), Some(\"b\"));\n-    assert_eq!(iter.next(), None);\n-\n-    // Abort after the second item.\n-    let mut iter = orig_iter.clone();\n-    iter.try_for_each(|item| if item == \"-\" { None } else { Some(()) });\n-    assert_eq!(iter.next(), Some(\"b\"));\n-    assert_eq!(iter.next(), None);\n-\n-    // Abort after the third item.\n-    let mut iter = orig_iter.clone();\n-    iter.try_for_each(|item| if item == \"b\" { None } else { Some(()) });\n-    assert_eq!(iter.next(), None);\n-}"}, {"sha": "44adc3c58d2494443e6e3edba59a09df0269c881", "filename": "library/core/tests/iter/range.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Frange.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -431,3 +431,16 @@ fn test_range_inclusive_size_hint() {\n     assert_eq!((imin..=imax).size_hint(), (usize::MAX, None));\n     assert_eq!((imin..=imax + 1).size_hint(), (usize::MAX, None));\n }\n+\n+#[test]\n+fn test_double_ended_range() {\n+    assert_eq!((11..14).rev().collect::<Vec<_>>(), [13, 12, 11]);\n+    for _ in (10..0).rev() {\n+        panic!(\"unreachable\");\n+    }\n+\n+    assert_eq!((11..14).rev().collect::<Vec<_>>(), [13, 12, 11]);\n+    for _ in (10..0).rev() {\n+        panic!(\"unreachable\");\n+    }\n+}"}, {"sha": "2728be2959387e7796ee871e3a187664fa60b16b", "filename": "library/core/tests/iter/traits/double_ended.rs", "status": "modified", "additions": 35, "deletions": 158, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -16,14 +16,6 @@ fn test_iterator_rev_nth() {\n     assert_eq!(v.iter().rev().nth(v.len()), None);\n }\n \n-#[test]\n-fn test_iterator_len() {\n-    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[..4].iter().count(), 4);\n-    assert_eq!(v[..10].iter().count(), 10);\n-    assert_eq!(v[..0].iter().count(), 0);\n-}\n-\n #[test]\n fn test_rev() {\n     let xs = [2, 4, 6, 8, 10, 12, 14, 16];\n@@ -34,167 +26,52 @@ fn test_rev() {\n }\n \n #[test]\n-fn test_double_ended_map() {\n-    let xs = [1, 2, 3, 4, 5, 6];\n-    let mut it = xs.iter().map(|&x| x * -1);\n-    assert_eq!(it.next(), Some(-1));\n-    assert_eq!(it.next(), Some(-2));\n-    assert_eq!(it.next_back(), Some(-6));\n-    assert_eq!(it.next_back(), Some(-5));\n-    assert_eq!(it.next(), Some(-3));\n-    assert_eq!(it.next_back(), Some(-4));\n-    assert_eq!(it.next(), None);\n-}\n-\n-#[test]\n-fn test_double_ended_enumerate() {\n-    let xs = [1, 2, 3, 4, 5, 6];\n-    let mut it = xs.iter().cloned().enumerate();\n-    assert_eq!(it.next(), Some((0, 1)));\n-    assert_eq!(it.next(), Some((1, 2)));\n-    assert_eq!(it.next_back(), Some((5, 6)));\n-    assert_eq!(it.next_back(), Some((4, 5)));\n-    assert_eq!(it.next_back(), Some((3, 4)));\n-    assert_eq!(it.next_back(), Some((2, 3)));\n-    assert_eq!(it.next(), None);\n-}\n-\n-#[test]\n-fn test_double_ended_zip() {\n-    let xs = [1, 2, 3, 4, 5, 6];\n-    let ys = [1, 2, 3, 7];\n-    let a = xs.iter().cloned();\n-    let b = ys.iter().cloned();\n-    let mut it = a.zip(b);\n-    assert_eq!(it.next(), Some((1, 1)));\n-    assert_eq!(it.next(), Some((2, 2)));\n-    assert_eq!(it.next_back(), Some((4, 7)));\n-    assert_eq!(it.next_back(), Some((3, 3)));\n-    assert_eq!(it.next(), None);\n-}\n-\n-#[test]\n-fn test_double_ended_filter() {\n-    let xs = [1, 2, 3, 4, 5, 6];\n-    let mut it = xs.iter().filter(|&x| *x & 1 == 0);\n-    assert_eq!(it.next_back().unwrap(), &6);\n-    assert_eq!(it.next_back().unwrap(), &4);\n-    assert_eq!(it.next().unwrap(), &2);\n-    assert_eq!(it.next_back(), None);\n-}\n+fn test_rev_try_folds() {\n+    let f = &|acc, x| i32::checked_add(2 * acc, x);\n+    assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n+    assert_eq!((1..10).rev().try_rfold(7, f), (1..10).try_fold(7, f));\n \n-#[test]\n-fn test_double_ended_filter_map() {\n-    let xs = [1, 2, 3, 4, 5, 6];\n-    let mut it = xs.iter().filter_map(|&x| if x & 1 == 0 { Some(x * 2) } else { None });\n-    assert_eq!(it.next_back().unwrap(), 12);\n-    assert_eq!(it.next_back().unwrap(), 8);\n-    assert_eq!(it.next().unwrap(), 4);\n-    assert_eq!(it.next_back(), None);\n+    let a = [10, 20, 30, 40, 100, 60, 70, 80, 90];\n+    let mut iter = a.iter().rev();\n+    assert_eq!(iter.try_fold(0_i8, |acc, &x| acc.checked_add(x)), None);\n+    assert_eq!(iter.next(), Some(&70));\n+    let mut iter = a.iter().rev();\n+    assert_eq!(iter.try_rfold(0_i8, |acc, &x| acc.checked_add(x)), None);\n+    assert_eq!(iter.next_back(), Some(&60));\n }\n \n #[test]\n-fn test_double_ended_chain() {\n-    let xs = [1, 2, 3, 4, 5];\n-    let ys = [7, 9, 11];\n-    let mut it = xs.iter().chain(&ys).rev();\n-    assert_eq!(it.next().unwrap(), &11);\n-    assert_eq!(it.next().unwrap(), &9);\n-    assert_eq!(it.next_back().unwrap(), &1);\n-    assert_eq!(it.next_back().unwrap(), &2);\n-    assert_eq!(it.next_back().unwrap(), &3);\n-    assert_eq!(it.next_back().unwrap(), &4);\n-    assert_eq!(it.next_back().unwrap(), &5);\n-    assert_eq!(it.next_back().unwrap(), &7);\n-    assert_eq!(it.next_back(), None);\n-\n-    // test that .chain() is well behaved with an unfused iterator\n-    struct CrazyIterator(bool);\n-    impl CrazyIterator {\n-        fn new() -> CrazyIterator {\n-            CrazyIterator(false)\n-        }\n+fn test_rposition() {\n+    fn f(xy: &(isize, char)) -> bool {\n+        let (_x, y) = *xy;\n+        y == 'b'\n     }\n-    impl Iterator for CrazyIterator {\n-        type Item = i32;\n-        fn next(&mut self) -> Option<i32> {\n-            if self.0 {\n-                Some(99)\n-            } else {\n-                self.0 = true;\n-                None\n-            }\n-        }\n-    }\n-\n-    impl DoubleEndedIterator for CrazyIterator {\n-        fn next_back(&mut self) -> Option<i32> {\n-            self.next()\n-        }\n+    fn g(xy: &(isize, char)) -> bool {\n+        let (_x, y) = *xy;\n+        y == 'd'\n     }\n+    let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-    assert_eq!(CrazyIterator::new().chain(0..10).rev().last(), Some(0));\n-    assert!((0..10).chain(CrazyIterator::new()).rev().any(|i| i == 0));\n-}\n-\n-#[test]\n-fn test_double_ended_flat_map() {\n-    let u = [0, 1];\n-    let v = [5, 6, 7, 8];\n-    let mut it = u.iter().flat_map(|x| &v[*x..v.len()]);\n-    assert_eq!(it.next_back().unwrap(), &8);\n-    assert_eq!(it.next().unwrap(), &5);\n-    assert_eq!(it.next_back().unwrap(), &7);\n-    assert_eq!(it.next_back().unwrap(), &6);\n-    assert_eq!(it.next_back().unwrap(), &8);\n-    assert_eq!(it.next().unwrap(), &6);\n-    assert_eq!(it.next_back().unwrap(), &7);\n-    assert_eq!(it.next_back(), None);\n-    assert_eq!(it.next(), None);\n-    assert_eq!(it.next_back(), None);\n+    assert_eq!(v.iter().rposition(f), Some(3));\n+    assert!(v.iter().rposition(g).is_none());\n }\n \n #[test]\n-fn test_double_ended_flatten() {\n-    let u = [0, 1];\n-    let v = [5, 6, 7, 8];\n-    let mut it = u.iter().map(|x| &v[*x..v.len()]).flatten();\n-    assert_eq!(it.next_back().unwrap(), &8);\n-    assert_eq!(it.next().unwrap(), &5);\n-    assert_eq!(it.next_back().unwrap(), &7);\n-    assert_eq!(it.next_back().unwrap(), &6);\n-    assert_eq!(it.next_back().unwrap(), &8);\n-    assert_eq!(it.next().unwrap(), &6);\n-    assert_eq!(it.next_back().unwrap(), &7);\n-    assert_eq!(it.next_back(), None);\n-    assert_eq!(it.next(), None);\n-    assert_eq!(it.next_back(), None);\n-}\n-\n-#[test]\n-fn test_double_ended_range() {\n-    assert_eq!((11..14).rev().collect::<Vec<_>>(), [13, 12, 11]);\n-    for _ in (10..0).rev() {\n-        panic!(\"unreachable\");\n-    }\n-\n-    assert_eq!((11..14).rev().collect::<Vec<_>>(), [13, 12, 11]);\n-    for _ in (10..0).rev() {\n-        panic!(\"unreachable\");\n-    }\n+fn test_rev_rposition() {\n+    let v = [0, 0, 1, 1];\n+    assert_eq!(v.iter().rev().rposition(|&x| x == 1), Some(1));\n }\n \n #[test]\n-fn test_rev_try_folds() {\n-    let f = &|acc, x| i32::checked_add(2 * acc, x);\n-    assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n-    assert_eq!((1..10).rev().try_rfold(7, f), (1..10).try_fold(7, f));\n-\n-    let a = [10, 20, 30, 40, 100, 60, 70, 80, 90];\n-    let mut iter = a.iter().rev();\n-    assert_eq!(iter.try_fold(0_i8, |acc, &x| acc.checked_add(x)), None);\n-    assert_eq!(iter.next(), Some(&70));\n-    let mut iter = a.iter().rev();\n-    assert_eq!(iter.try_rfold(0_i8, |acc, &x| acc.checked_add(x)), None);\n-    assert_eq!(iter.next_back(), Some(&60));\n+#[should_panic]\n+fn test_rposition_panic() {\n+    let v: [(Box<_>, Box<_>); 4] = [(box 0, box 0), (box 0, box 0), (box 0, box 0), (box 0, box 0)];\n+    let mut i = 0;\n+    v.iter().rposition(|_elt| {\n+        if i == 2 {\n+            panic!()\n+        }\n+        i += 1;\n+        false\n+    });\n }"}, {"sha": "f31686378ebc026b0d5970ec8b6f3007ec5ff360", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -430,3 +430,34 @@ fn test_iterator_rev_advance_by() {\n     assert_eq!(v.iter().rev().advance_by(v.len()), Ok(()));\n     assert_eq!(v.iter().rev().advance_by(100), Err(v.len()));\n }\n+\n+#[test]\n+fn test_find_map() {\n+    let xs: &[isize] = &[];\n+    assert_eq!(xs.iter().find_map(half_if_even), None);\n+    let xs: &[isize] = &[3, 5];\n+    assert_eq!(xs.iter().find_map(half_if_even), None);\n+    let xs: &[isize] = &[4, 5];\n+    assert_eq!(xs.iter().find_map(half_if_even), Some(2));\n+    let xs: &[isize] = &[3, 6];\n+    assert_eq!(xs.iter().find_map(half_if_even), Some(3));\n+\n+    let xs: &[isize] = &[1, 2, 3, 4, 5, 6, 7];\n+    let mut iter = xs.iter();\n+    assert_eq!(iter.find_map(half_if_even), Some(1));\n+    assert_eq!(iter.find_map(half_if_even), Some(2));\n+    assert_eq!(iter.find_map(half_if_even), Some(3));\n+    assert_eq!(iter.next(), Some(&7));\n+\n+    fn half_if_even(x: &isize) -> Option<isize> {\n+        if x % 2 == 0 { Some(x / 2) } else { None }\n+    }\n+}\n+\n+#[test]\n+fn test_iterator_len() {\n+    let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    assert_eq!(v[..4].iter().count(), 4);\n+    assert_eq!(v[..10].iter().count(), 10);\n+    assert_eq!(v[..0].iter().count(), 0);\n+}"}, {"sha": "d3510703a2d467eaebdb4f423c1228295ca591ea", "filename": "library/core/tests/iter/traits/marker.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmarker.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -1,17 +0,0 @@\n-#[test]\n-fn test_fuse() {\n-    let mut it = 0..3;\n-    assert_eq!(it.len(), 3);\n-    assert_eq!(it.next(), Some(0));\n-    assert_eq!(it.len(), 2);\n-    assert_eq!(it.next(), Some(1));\n-    assert_eq!(it.len(), 1);\n-    assert_eq!(it.next(), Some(2));\n-    assert_eq!(it.len(), 0);\n-    assert_eq!(it.next(), None);\n-    assert_eq!(it.len(), 0);\n-    assert_eq!(it.next(), None);\n-    assert_eq!(it.len(), 0);\n-    assert_eq!(it.next(), None);\n-    assert_eq!(it.len(), 0);\n-}"}, {"sha": "b00e49b06967f25ad8c6f1519fba2fd44b65dfda", "filename": "library/core/tests/iter/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmod.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "patch": "@@ -2,40 +2,4 @@ mod accum;\n mod collect;\n mod double_ended;\n mod iterator;\n-mod marker;\n-\n-#[test]\n-fn test_rposition() {\n-    fn f(xy: &(isize, char)) -> bool {\n-        let (_x, y) = *xy;\n-        y == 'b'\n-    }\n-    fn g(xy: &(isize, char)) -> bool {\n-        let (_x, y) = *xy;\n-        y == 'd'\n-    }\n-    let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n-\n-    assert_eq!(v.iter().rposition(f), Some(3));\n-    assert!(v.iter().rposition(g).is_none());\n-}\n-\n-#[test]\n-fn test_rev_rposition() {\n-    let v = [0, 0, 1, 1];\n-    assert_eq!(v.iter().rev().rposition(|&x| x == 1), Some(1));\n-}\n-\n-#[test]\n-#[should_panic]\n-fn test_rposition_panic() {\n-    let v: [(Box<_>, Box<_>); 4] = [(box 0, box 0), (box 0, box 0), (box 0, box 0), (box 0, box 0)];\n-    let mut i = 0;\n-    v.iter().rposition(|_elt| {\n-        if i == 2 {\n-            panic!()\n-        }\n-        i += 1;\n-        false\n-    });\n-}\n+mod step;"}, {"sha": "3d82a40cd294180669a6d5828e9cee64593fc329", "filename": "library/core/tests/iter/traits/step.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc830a274b91d67fed39b875247163fde4f13326/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fstep.rs?ref=bc830a274b91d67fed39b875247163fde4f13326", "previous_filename": "library/core/tests/iter/adapters/step.rs"}]}