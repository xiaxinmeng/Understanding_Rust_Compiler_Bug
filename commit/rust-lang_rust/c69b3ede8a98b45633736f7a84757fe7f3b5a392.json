{"sha": "c69b3ede8a98b45633736f7a84757fe7f3b5a392", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OWIzZWRlOGE5OGI0NTYzMzczNmY3YTg0NzU3ZmU3ZjNiNWEzOTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T05:41:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T07:28:49Z"}, "message": "extract parse_pat_tuple_or_parens", "tree": {"sha": "eb64ba8ec1422e10bb9f3844ff0366acd0507a5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb64ba8ec1422e10bb9f3844ff0366acd0507a5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c69b3ede8a98b45633736f7a84757fe7f3b5a392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c69b3ede8a98b45633736f7a84757fe7f3b5a392", "html_url": "https://github.com/rust-lang/rust/commit/c69b3ede8a98b45633736f7a84757fe7f3b5a392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c69b3ede8a98b45633736f7a84757fe7f3b5a392/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90793c0f126a9d5a0ffab297e9fef8bbbed6ae70", "url": "https://api.github.com/repos/rust-lang/rust/commits/90793c0f126a9d5a0ffab297e9fef8bbbed6ae70", "html_url": "https://github.com/rust-lang/rust/commit/90793c0f126a9d5a0ffab297e9fef8bbbed6ae70"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "b7e40969d3eb5ed2a32037c1ccbd829e62a4533e", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c69b3ede8a98b45633736f7a84757fe7f3b5a392/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c69b3ede8a98b45633736f7a84757fe7f3b5a392/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=c69b3ede8a98b45633736f7a84757fe7f3b5a392", "patch": "@@ -110,18 +110,7 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let pat = match self.token.kind {\n             token::BinOp(token::And) | token::AndAnd => self.parse_pat_deref(expected)?,\n-            token::OpenDelim(token::Paren) => {\n-                // Parse a tuple or parenthesis pattern.\n-                let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n-\n-                // Here, `(pat,)` is a tuple pattern.\n-                // For backward compatibility, `(..)` is a tuple pattern as well.\n-                if fields.len() == 1 && !(trailing_comma || fields[0].is_rest()) {\n-                    PatKind::Paren(fields.into_iter().nth(0).unwrap())\n-                } else {\n-                    PatKind::Tuple(fields)\n-                }\n-            }\n+            token::OpenDelim(token::Paren) => self.parse_pat_tuple_or_parens()?,\n             token::OpenDelim(token::Bracket) => {\n                 // Parse `[pat, pat,...]` as a slice pattern.\n                 PatKind::Slice(self.parse_delim_comma_seq(token::Bracket, |p| p.parse_pat(None))?.0)\n@@ -336,6 +325,19 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::Ref(subpat, mutbl))\n     }\n \n+    /// Parse a tuple or parenthesis pattern.\n+    fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n+        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n+\n+        // Here, `(pat,)` is a tuple pattern.\n+        // For backward compatibility, `(..)` is a tuple pattern as well.\n+        Ok(if fields.len() == 1 && !(trailing_comma || fields[0].is_rest()) {\n+            PatKind::Paren(fields.into_iter().nth(0).unwrap())\n+        } else {\n+            PatKind::Tuple(fields)\n+        })\n+    }\n+\n     // Helper function to decide whether to parse as ident binding\n     // or to try to do something more complex like range patterns.\n     fn parse_as_ident(&mut self) -> bool {"}]}