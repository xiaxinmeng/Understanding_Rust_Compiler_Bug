{"sha": "7a089a7bab3779ad83719a91f0db6ec6ccf0175b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMDg5YTdiYWIzNzc5YWQ4MzcxOWE5MWYwZGI2ZWM2Y2NmMDE3NWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-20T16:13:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-20T16:13:18Z"}, "message": "Merge #5457\n\n5457: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "dec88276e72c3e49f5946a16a1b01a163c34fe17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec88276e72c3e49f5946a16a1b01a163c34fe17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a089a7bab3779ad83719a91f0db6ec6ccf0175b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfFcKeCRBK7hj4Ov3rIwAAdHIIABUHG4WqR+drb/A2FWykmZKL\nPT8ZXQZ+SVLDnUoZ343X38V2C/mPOVN+vxcppv++waEZPcC7eNMtelB6Tv/LxxIC\nL6uBpwwAQlZ8vypq5nPTQ8/cYXYmiW6eHJ5sRcFLMpCsOMYBX4SuT8SYIVV+cY2k\nk4pnRURt0bQ+NEK13tIBmMlITBPnbWKAp/ueSVOVdUrvkq2+j22W3NVGu7PhJJ6B\nu6Ejx7U/AJEgkw6tsXgoMT/bAA+B4cWHUlbytoNhu70WA0ZF3G5ZAcm63Gnpd36R\nL69SWtOTtMQksOiMwboEHfgDCezDgNTiVloaMDrby08vqKOt2LqiUNKwjRJvPS8=\n=Q1g3\n-----END PGP SIGNATURE-----\n", "payload": "tree dec88276e72c3e49f5946a16a1b01a163c34fe17\nparent 62735cf587c92d20d4a308f2dd22d798dcb0f177\nparent 3e688d2a9340e8d8ca2da5bbdc441f2d6cce893c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595261598 +0000\ncommitter GitHub <noreply@github.com> 1595261598 +0000\n\nMerge #5457\n\n5457: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a089a7bab3779ad83719a91f0db6ec6ccf0175b", "html_url": "https://github.com/rust-lang/rust/commit/7a089a7bab3779ad83719a91f0db6ec6ccf0175b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a089a7bab3779ad83719a91f0db6ec6ccf0175b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62735cf587c92d20d4a308f2dd22d798dcb0f177", "url": "https://api.github.com/repos/rust-lang/rust/commits/62735cf587c92d20d4a308f2dd22d798dcb0f177", "html_url": "https://github.com/rust-lang/rust/commit/62735cf587c92d20d4a308f2dd22d798dcb0f177"}, {"sha": "3e688d2a9340e8d8ca2da5bbdc441f2d6cce893c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e688d2a9340e8d8ca2da5bbdc441f2d6cce893c", "html_url": "https://github.com/rust-lang/rust/commit/3e688d2a9340e8d8ca2da5bbdc441f2d6cce893c"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "778cc84ef92578d318526c615006def9152ad2c5", "filename": "crates/ra_project_model/src/project_json.rs", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7a089a7bab3779ad83719a91f0db6ec6ccf0175b/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a089a7bab3779ad83719a91f0db6ec6ccf0175b/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=7a089a7bab3779ad83719a91f0db6ec6ccf0175b", "patch": "@@ -34,6 +34,7 @@ pub struct Crate {\n     pub(crate) target: Option<String>,\n     pub(crate) out_dir: Option<AbsPathBuf>,\n     pub(crate) proc_macro_dylib_path: Option<AbsPathBuf>,\n+    pub(crate) is_workspace_member: bool,\n }\n \n impl ProjectJson {\n@@ -43,32 +44,42 @@ impl ProjectJson {\n             crates: data\n                 .crates\n                 .into_iter()\n-                .map(|crate_data| Crate {\n-                    root_module: base.join(crate_data.root_module),\n-                    edition: crate_data.edition.into(),\n-                    deps: crate_data\n-                        .deps\n-                        .into_iter()\n-                        .map(|dep_data| Dependency {\n-                            crate_id: CrateId(dep_data.krate as u32),\n-                            name: dep_data.name,\n-                        })\n-                        .collect::<Vec<_>>(),\n-                    cfg: {\n-                        let mut cfg = CfgOptions::default();\n-                        for entry in &crate_data.cfg {\n-                            match split_delim(entry, '=') {\n-                                Some((key, value)) => {\n-                                    cfg.insert_key_value(key.into(), value.into());\n+                .map(|crate_data| {\n+                    let is_workspace_member = crate_data.is_workspace_member.unwrap_or_else(|| {\n+                        crate_data.root_module.is_relative()\n+                            && !crate_data.root_module.starts_with(\"..\")\n+                            || crate_data.root_module.starts_with(base)\n+                    });\n+                    Crate {\n+                        root_module: base.join(crate_data.root_module),\n+                        edition: crate_data.edition.into(),\n+                        deps: crate_data\n+                            .deps\n+                            .into_iter()\n+                            .map(|dep_data| Dependency {\n+                                crate_id: CrateId(dep_data.krate as u32),\n+                                name: dep_data.name,\n+                            })\n+                            .collect::<Vec<_>>(),\n+                        cfg: {\n+                            let mut cfg = CfgOptions::default();\n+                            for entry in &crate_data.cfg {\n+                                match split_delim(entry, '=') {\n+                                    Some((key, value)) => {\n+                                        cfg.insert_key_value(key.into(), value.into());\n+                                    }\n+                                    None => cfg.insert_atom(entry.into()),\n                                 }\n-                                None => cfg.insert_atom(entry.into()),\n                             }\n-                        }\n-                        cfg\n-                    },\n-                    target: crate_data.target,\n-                    out_dir: crate_data.out_dir.map(|it| base.join(it)),\n-                    proc_macro_dylib_path: crate_data.proc_macro_dylib_path.map(|it| base.join(it)),\n+                            cfg\n+                        },\n+                        target: crate_data.target,\n+                        out_dir: crate_data.out_dir.map(|it| base.join(it)),\n+                        proc_macro_dylib_path: crate_data\n+                            .proc_macro_dylib_path\n+                            .map(|it| base.join(it)),\n+                        is_workspace_member,\n+                    }\n                 })\n                 .collect::<Vec<_>>(),\n         }\n@@ -91,6 +102,7 @@ struct CrateData {\n     target: Option<String>,\n     out_dir: Option<PathBuf>,\n     proc_macro_dylib_path: Option<PathBuf>,\n+    is_workspace_member: Option<bool>,\n }\n \n #[derive(Deserialize)]"}, {"sha": "04e257f53f866bf071bc0eb7ec3fcb6a19eeb835", "filename": "crates/vfs/src/loader.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a089a7bab3779ad83719a91f0db6ec6ccf0175b/crates%2Fvfs%2Fsrc%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a089a7bab3779ad83719a91f0db6ec6ccf0175b/crates%2Fvfs%2Fsrc%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Floader.rs?ref=7a089a7bab3779ad83719a91f0db6ec6ccf0175b", "patch": "@@ -83,11 +83,11 @@ impl Directories {\n         self.includes_path(path)\n     }\n     fn includes_path(&self, path: &AbsPath) -> bool {\n-        let mut include = None;\n+        let mut include: Option<&AbsPathBuf> = None;\n         for incl in &self.include {\n-            if is_prefix(incl, path) {\n+            if path.starts_with(incl) {\n                 include = Some(match include {\n-                    Some(prev) if is_prefix(incl, prev) => prev,\n+                    Some(prev) if prev.starts_with(incl) => prev,\n                     _ => incl,\n                 })\n             }\n@@ -97,15 +97,11 @@ impl Directories {\n             None => return false,\n         };\n         for excl in &self.exclude {\n-            if is_prefix(excl, path) && is_prefix(include, excl) {\n+            if path.starts_with(excl) && excl.starts_with(include) {\n                 return false;\n             }\n         }\n-        return true;\n-\n-        fn is_prefix(short: &AbsPath, long: &AbsPath) -> bool {\n-            long.strip_prefix(short).is_some()\n-        }\n+        true\n     }\n }\n "}]}