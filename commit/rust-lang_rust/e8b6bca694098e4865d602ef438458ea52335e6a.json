{"sha": "e8b6bca694098e4865d602ef438458ea52335e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YjZiY2E2OTQwOThlNDg2NWQ2MDJlZjQzODQ1OGVhNTIzMzVlNmE=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-04-14T03:19:53Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-04-25T23:42:49Z"}, "message": "Finish fixing up abs docs", "tree": {"sha": "6753eeff0abdafb430adc98275c665a1d7be8188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6753eeff0abdafb430adc98275c665a1d7be8188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8b6bca694098e4865d602ef438458ea52335e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b6bca694098e4865d602ef438458ea52335e6a", "html_url": "https://github.com/rust-lang/rust/commit/e8b6bca694098e4865d602ef438458ea52335e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8b6bca694098e4865d602ef438458ea52335e6a/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f4e902ee70e178f1009e4242b2dac083bb942d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4e902ee70e178f1009e4242b2dac083bb942d4", "html_url": "https://github.com/rust-lang/rust/commit/1f4e902ee70e178f1009e4242b2dac083bb942d4"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "baf92ee097bd357ba2ca2f362d52c7854213c22f", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e8b6bca694098e4865d602ef438458ea52335e6a/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b6bca694098e4865d602ef438458ea52335e6a/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=e8b6bca694098e4865d602ef438458ea52335e6a", "patch": "@@ -79,16 +79,37 @@ macro_rules! impl_int_arith {\n                 unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n             }\n \n+            /// Lanewise absolute value, implemented in Rust.\n+            /// Every lane becomes its absolute value.\n+            ///\n+            /// # Examples\n+            /// ```\n+            /// # use core_simd::*;\n+            #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n+            #[doc = concat!(\"let xs = \", stringify!($name), \"::from_array([MIN, MIN +1, -5, 0]);\")]\n+            #[doc = concat!(\"assert_eq!(xs.abs(), \", stringify!($name), \"::from_array([MIN, MAX, 5, 0]));\")]\n+            /// ```\n+            #[inline]\n+            pub fn abs(self) -> Self {\n+                let mut xs = self.to_array();\n+                for (i, x) in xs.clone().iter().enumerate() {\n+                    xs[i] = x.wrapping_abs()\n+                }\n+                $name::from_array(xs)\n+            }\n+\n             /// Lanewise saturating absolute value, implemented in Rust.\n             /// As abs(), except the MIN value becomes MAX instead of itself.\n             ///\n             /// # Examples\n             /// ```\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n-            #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, -2, 0, 3]);\")]\n-            /// let abs = x.saturating_abs();\n-            #[doc = concat!(\"assert_eq!(abs, \", stringify!($name), \"::from_array([MAX, 2, 0, 3]));\")]\n+            #[doc = concat!(\"let xs = \", stringify!($name), \"::from_array([MIN, -2, 0, 3]);\")]\n+            /// let unsat = xs.abs();\n+            /// let sat = xs.saturating_abs();\n+            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, 0, 3]));\")]\n+            #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([MAX, 2, 0, 3]));\")]\n             /// ```\n             #[inline]\n             pub fn saturating_abs(self) -> Self {"}]}