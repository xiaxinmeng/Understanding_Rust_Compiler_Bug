{"sha": "bd83650e91a751ad352444b458f9f50549fac208", "node_id": "C_kwDOAAsO6NoAKGJkODM2NTBlOTFhNzUxYWQzNTI0NDRiNDU4ZjlmNTA1NDlmYWMyMDg", "commit": {"author": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2022-12-21T19:47:39Z"}, "committer": {"name": "Tyler Weaver", "email": "tyler@picknik.ai", "date": "2023-01-02T23:27:46Z"}, "message": "Suggest using Path for comparing extensions\n\nSigned-off-by: Tyler Weaver <maybe@tylerjw.dev>", "tree": {"sha": "ee12f26f6712e8c63cde07583aa0cdee0bc838d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee12f26f6712e8c63cde07583aa0cdee0bc838d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd83650e91a751ad352444b458f9f50549fac208", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAARcAAAAHc3NoLXJzYQAAAAMBAAEAAAEBALT2BR97TqMEfbs16kxp9J\nBwk/H0Kc3HrrEj5WAJngRJRlF5gV0mkh4CWr5gCardKxWaUrjLK/rVR/zyM8Ic4cAcY6pE\nIilIy/Owe20c1xOZdHPtoXKi5yKBENIhMPBNNVvNPl0uLwL73cH5DsXo0TFHyCaUkXv/uj\nDH8v1HSwDi2EVcMX6poH4RmSbq9Vfh1obNhY2uPJ2CqT2sFk3qWFK5sd+RIf3V9Ah1M36u\ndUEdl/rC4ByVjfAqjCDSbjtYP61Va70DNVGZOBjZXS+IZnQCyAqtjYu//U666YhMaBsPDS\ngl3liYqKG+GUcf94wfY7KQcMDhny2PpOa+Ve6o5vEAAAADZ2l0AAAAAAAAAAZzaGE1MTIA\nAAEUAAAADHJzYS1zaGEyLTUxMgAAAQAokYVOxnSbR0iBPD78tDoJA5oM8fT+2fKsZmACDj\nX4UVIMQ1GdJw+6vbo+CyRNriMWRzbO2t0jjinNpmjcX1RvHh2Frof6pl9Pe9j8+sMMNhV1\nIkP8/CCjNd1IlD7V9Z5ilddjPBFAsbypMqR2IOoiU3r8YIjXh7ifOUWoXONbygMU1OJhhr\n6ujzR+6kvNT423ZqafZ6AXzXyZ851AONrJu2OfkTMlYXIxb9rcmNjqkhkZ9m68OWlJ0H4I\nxVYpEJ1/mMEEEZEvDYmTe7xeyL9J1xwss3aq750yH+IJrKXZjIiAqlV7PBnND0qgx3stts\nKXaVbrCzOB2TP+IwUzlDdU\n-----END SSH SIGNATURE-----", "payload": "tree ee12f26f6712e8c63cde07583aa0cdee0bc838d4\nparent 1a46dc0b9f923af1c012ac300a2b351cf99560c6\nauthor Tyler Weaver <maybe@tylerjw.dev> 1671652059 -0700\ncommitter Tyler Weaver <tyler@picknik.ai> 1672702066 -0700\n\nSuggest using Path for comparing extensions\n\nSigned-off-by: Tyler Weaver <maybe@tylerjw.dev>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd83650e91a751ad352444b458f9f50549fac208", "html_url": "https://github.com/rust-lang/rust/commit/bd83650e91a751ad352444b458f9f50549fac208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd83650e91a751ad352444b458f9f50549fac208/comments", "author": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a46dc0b9f923af1c012ac300a2b351cf99560c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a46dc0b9f923af1c012ac300a2b351cf99560c6", "html_url": "https://github.com/rust-lang/rust/commit/1a46dc0b9f923af1c012ac300a2b351cf99560c6"}], "stats": {"total": 192, "additions": 175, "deletions": 17}, "files": [{"sha": "bc9b7a73b5b182adcd8284c3d1ccfd1e5d6bde50", "filename": "clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bd83650e91a751ad352444b458f9f50549fac208/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd83650e91a751ad352444b458f9f50549fac208/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=bd83650e91a751ad352444b458f9f50549fac208", "patch": "@@ -1,7 +1,9 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::LateContext;\n use rustc_span::{source_map::Spanned, Span};\n@@ -28,13 +30,39 @@ pub(super) fn check<'tcx>(\n         let recv_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n         if recv_ty.is_str() || is_type_lang_item(cx, recv_ty, LangItem::String);\n         then {\n-            span_lint_and_help(\n+            span_lint_and_then(\n                 cx,\n                 CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n-                call_span,\n+                recv.span.to(call_span),\n                 \"case-sensitive file extension comparison\",\n-                None,\n-                \"consider using a case-insensitive comparison instead\",\n+                |diag| {\n+                    diag.help(\"consider using a case-insensitive comparison instead\");\n+                    let mut recv_str = Sugg::hir(cx, recv, \"\").to_string();\n+\n+                    if is_type_lang_item(cx, recv_ty, LangItem::String) {\n+                        recv_str = format!(\"&{recv_str}\");\n+                    }\n+\n+                    if recv_str.contains(\".to_lowercase()\") {\n+                        diag.note(\"to_lowercase allocates memory, this can be avoided by using Path\");\n+                        recv_str = recv_str.replace(\".to_lowercase()\", \"\");\n+                    }\n+\n+                    if recv_str.contains(\".to_uppercase()\") {\n+                        diag.note(\"to_uppercase allocates memory, this can be avoided by using Path\");\n+                        recv_str = recv_str.replace(\".to_uppercase()\", \"\");\n+                    }\n+\n+                    diag.span_suggestion(\n+                        recv.span.to(call_span),\n+                        \"use std::path::Path\",\n+                        format!(\"std::path::Path::new({})\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\\\"{}\\\"))\", \n+                            recv_str, ext_str.strip_prefix('.').unwrap()),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             );\n         }\n     }"}, {"sha": "a8b5950f2087d2b51a009544d772c030f1dd43fa", "filename": "tests/ui/case_sensitive_file_extension_comparisons.fixed", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bd83650e91a751ad352444b458f9f50549fac208/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bd83650e91a751ad352444b458f9f50549fac208/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed?ref=bd83650e91a751ad352444b458f9f50549fac208", "patch": "@@ -0,0 +1,64 @@\n+// run-rustfix\n+#![warn(clippy::case_sensitive_file_extension_comparisons)]\n+\n+use std::string::String;\n+\n+struct TestStruct;\n+\n+impl TestStruct {\n+    fn ends_with(self, _arg: &str) {}\n+}\n+\n+#[allow(dead_code)]\n+fn is_rust_file(filename: &str) -> bool {\n+    std::path::Path::new(filename)\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"rs\"))\n+}\n+\n+fn main() {\n+    // std::string::String and &str should trigger the lint failure with .ext12\n+    let _ = std::path::Path::new(&String::new())\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+    let _ = std::path::Path::new(\"str\")\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+\n+    // The test struct should not trigger the lint failure with .ext12\n+    TestStruct {}.ends_with(\".ext12\");\n+\n+    // std::string::String and &str should trigger the lint failure with .EXT12\n+    let _ = std::path::Path::new(&String::new())\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+    let _ = std::path::Path::new(\"str\")\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+\n+    // This should print a note about how to_lowercase and to_uppercase allocates\n+    let _ = std::path::Path::new(&String::new())\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+    let _ = std::path::Path::new(&String::new())\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+\n+    // The test struct should not trigger the lint failure with .EXT12\n+    TestStruct {}.ends_with(\".EXT12\");\n+\n+    // Should not trigger the lint failure with .eXT12\n+    let _ = String::new().ends_with(\".eXT12\");\n+    let _ = \"str\".ends_with(\".eXT12\");\n+    TestStruct {}.ends_with(\".eXT12\");\n+\n+    // Should not trigger the lint failure with .EXT123 (too long)\n+    let _ = String::new().ends_with(\".EXT123\");\n+    let _ = \"str\".ends_with(\".EXT123\");\n+    TestStruct {}.ends_with(\".EXT123\");\n+\n+    // Shouldn't fail if it doesn't start with a dot\n+    let _ = String::new().ends_with(\"a.ext\");\n+    let _ = \"str\".ends_with(\"a.extA\");\n+    TestStruct {}.ends_with(\"a.ext\");\n+}"}, {"sha": "ee9bcd73d52e747b2f420d18d8e0000cc1a4cb60", "filename": "tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd83650e91a751ad352444b458f9f50549fac208/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd83650e91a751ad352444b458f9f50549fac208/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=bd83650e91a751ad352444b458f9f50549fac208", "patch": "@@ -1,13 +1,15 @@\n+// run-rustfix\n #![warn(clippy::case_sensitive_file_extension_comparisons)]\n \n use std::string::String;\n \n struct TestStruct;\n \n impl TestStruct {\n-    fn ends_with(self, arg: &str) {}\n+    fn ends_with(self, _arg: &str) {}\n }\n \n+#[allow(dead_code)]\n fn is_rust_file(filename: &str) -> bool {\n     filename.ends_with(\".rs\")\n }\n@@ -24,6 +26,10 @@ fn main() {\n     let _ = String::new().ends_with(\".EXT12\");\n     let _ = \"str\".ends_with(\".EXT12\");\n \n+    // This should print a note about how to_lowercase and to_uppercase allocates\n+    let _ = String::new().to_lowercase().ends_with(\".EXT12\");\n+    let _ = String::new().to_uppercase().ends_with(\".EXT12\");\n+\n     // The test struct should not trigger the lint failure with .EXT12\n     TestStruct {}.ends_with(\".EXT12\");\n "}, {"sha": "33435f086d43cf399f6efad5ef0828cf8ac845d4", "filename": "tests/ui/case_sensitive_file_extension_comparisons.stderr", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bd83650e91a751ad352444b458f9f50549fac208/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd83650e91a751ad352444b458f9f50549fac208/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr?ref=bd83650e91a751ad352444b458f9f50549fac208", "patch": "@@ -1,43 +1,103 @@\n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:12:14\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:14:5\n    |\n LL |     filename.ends_with(\".rs\")\n-   |              ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n    = note: `-D clippy::case-sensitive-file-extension-comparisons` implied by `-D warnings`\n+help: use std::path::Path\n+   |\n+LL ~     std::path::Path::new(filename)\n+LL +         .extension()\n+LL +         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"rs\"))\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:17:27\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:19:13\n    |\n LL |     let _ = String::new().ends_with(\".ext12\");\n-   |                           ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(&String::new())\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:18:19\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:20:13\n    |\n LL |     let _ = \"str\".ends_with(\".ext12\");\n-   |                   ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(\"str\")\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:27\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:26:13\n    |\n LL |     let _ = String::new().ends_with(\".EXT12\");\n-   |                           ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(&String::new())\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:25:19\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:27:13\n    |\n LL |     let _ = \"str\".ends_with(\".EXT12\");\n-   |                   ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(\"str\")\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+   |\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:30:13\n+   |\n+LL |     let _ = String::new().to_lowercase().ends_with(\".EXT12\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+   = note: to_lowercase allocates memory, this can be avoided by using Path\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(&String::new())\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+   |\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:31:13\n+   |\n+LL |     let _ = String::new().to_uppercase().ends_with(\".EXT12\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+   = note: to_uppercase allocates memory, this can be avoided by using Path\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(&String::new())\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+   |\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}]}