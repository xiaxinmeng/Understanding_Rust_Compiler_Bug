{"sha": "b48699e4cfd8af15669227049f3c6056d4084aba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ODY5OWU0Y2ZkOGFmMTU2NjkyMjcwNDlmM2M2MDU2ZDQwODRhYmE=", "commit": {"author": {"name": "cherryblossom", "email": "31467609+cherryblossom000@users.noreply.github.com", "date": "2021-04-22T09:34:36Z"}, "committer": {"name": "cherryblossom", "email": "31467609+cherryblossom000@users.noreply.github.com", "date": "2021-04-22T09:34:36Z"}, "message": "`single_component_path_imports`: ignore `pub(crate) use some_macro;` (fixes #7106)", "tree": {"sha": "e619c4313c4f9bac3b260ac0fae1f4471fb92983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e619c4313c4f9bac3b260ac0fae1f4471fb92983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48699e4cfd8af15669227049f3c6056d4084aba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1adfSZhTT7R8g5qdA7NGSNbetjkFAmCBQywACgkQA7NGSNbe\ntjkyGg/+Nevp/NJdqxS+yqTDCo/dRVOGw6VE7hT3JEsh13RhAZbt5LTN6GasUGsS\nwuKQ8ExNXQUnXKWN54it/p2X05VAq8pqKcAZ4gxg7yjlfkh48i/QdkNg/fi8NG3E\nWgTiNvMRkxQ/g0dfbNKJ7D0um9HWzvP40xd6kKPNgKdmc1+vODAWWyH8qyhLRGpB\nUx2gJjSMhGMiRilpKET0ZPJXYSg9yV19queJbJ1h5FHqZAj1fdPWh+8XvoQpz4xL\nienp4xniVavNFdTYMPaedQoJ2IcXkVttp+n4xcZ5jrhwBrboT3qdTwkxBMv4D/rs\nLoT2/NG0QlpLx1/zSfGI8T0DBQ7/S4UQcUqaJgifxbJ9BqsxNYaD3AryebRAaVtb\n1VYMJLS5WCCTjEDy1c4mDIvmzH9H7jQAf18ZjzWjMIYO+ZRvLrfgOcSVf37CpfA2\n24VCr6ZgBnS+2i+OBh8zldFz0ySnTN1ScO8e/I6W/17ImQfCCJRyo4YHx4c8PvFJ\ndo7TBzw15uc581XfOn8P2R0tdO+6fhUZXEsFuNjJYR4W2pbDy4UczFRL2k0rRkKi\nkmpEO3zNcVKu34pQHa84eOyKw/b/uhrRYVi3dzGS7W6PpCz2fdoqnw42LX1JweU2\nzfnPFKCs81gJVqHA+pNjhRLm8KR8xnqAKoIgdqoBfANJxmsgQzQ=\n=dK9C\n-----END PGP SIGNATURE-----", "payload": "tree e619c4313c4f9bac3b260ac0fae1f4471fb92983\nparent ec38ea1ac1eac8efad1880fe33c49d65b8c4591c\nauthor cherryblossom <31467609+cherryblossom000@users.noreply.github.com> 1619084076 +1000\ncommitter cherryblossom <31467609+cherryblossom000@users.noreply.github.com> 1619084076 +1000\n\n`single_component_path_imports`: ignore `pub(crate) use some_macro;` (fixes #7106)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48699e4cfd8af15669227049f3c6056d4084aba", "html_url": "https://github.com/rust-lang/rust/commit/b48699e4cfd8af15669227049f3c6056d4084aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48699e4cfd8af15669227049f3c6056d4084aba/comments", "author": {"login": "cherryblossom000", "id": 31467609, "node_id": "MDQ6VXNlcjMxNDY3NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/31467609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cherryblossom000", "html_url": "https://github.com/cherryblossom000", "followers_url": "https://api.github.com/users/cherryblossom000/followers", "following_url": "https://api.github.com/users/cherryblossom000/following{/other_user}", "gists_url": "https://api.github.com/users/cherryblossom000/gists{/gist_id}", "starred_url": "https://api.github.com/users/cherryblossom000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cherryblossom000/subscriptions", "organizations_url": "https://api.github.com/users/cherryblossom000/orgs", "repos_url": "https://api.github.com/users/cherryblossom000/repos", "events_url": "https://api.github.com/users/cherryblossom000/events{/privacy}", "received_events_url": "https://api.github.com/users/cherryblossom000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cherryblossom000", "id": 31467609, "node_id": "MDQ6VXNlcjMxNDY3NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/31467609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cherryblossom000", "html_url": "https://github.com/cherryblossom000", "followers_url": "https://api.github.com/users/cherryblossom000/followers", "following_url": "https://api.github.com/users/cherryblossom000/following{/other_user}", "gists_url": "https://api.github.com/users/cherryblossom000/gists{/gist_id}", "starred_url": "https://api.github.com/users/cherryblossom000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cherryblossom000/subscriptions", "organizations_url": "https://api.github.com/users/cherryblossom000/orgs", "repos_url": "https://api.github.com/users/cherryblossom000/repos", "events_url": "https://api.github.com/users/cherryblossom000/events{/privacy}", "received_events_url": "https://api.github.com/users/cherryblossom000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec38ea1ac1eac8efad1880fe33c49d65b8c4591c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec38ea1ac1eac8efad1880fe33c49d65b8c4591c", "html_url": "https://github.com/rust-lang/rust/commit/ec38ea1ac1eac8efad1880fe33c49d65b8c4591c"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "a45bb1023899dacd3f04d8883ef1b04d3f7e4497", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b48699e4cfd8af15669227049f3c6056d4084aba/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48699e4cfd8af15669227049f3c6056d4084aba/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=b48699e4cfd8af15669227049f3c6056d4084aba", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::in_macro;\n-use rustc_ast::{ptr::P, Crate, Item, ItemKind, ModKind, UseTreeKind};\n+use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind, VisibilityKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -60,8 +60,21 @@ fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n     // ```\n     let mut single_use_usages = Vec::new();\n \n+    // keep track of macros defined in the module as we don't want it to trigger on this (#7106)\n+    // ```rust,ignore\n+    // macro_rules! foo { () => {} };\n+    // pub(crate) use foo;\n+    // ```\n+    let mut macros = Vec::new();\n+\n     for item in items {\n-        track_uses(cx, &item, &mut imports_reused_with_self, &mut single_use_usages);\n+        track_uses(\n+            cx,\n+            &item,\n+            &mut imports_reused_with_self,\n+            &mut single_use_usages,\n+            &mut macros,\n+        );\n     }\n \n     for single_use in &single_use_usages {\n@@ -96,6 +109,7 @@ fn track_uses(\n     item: &Item,\n     imports_reused_with_self: &mut Vec<Symbol>,\n     single_use_usages: &mut Vec<(Symbol, Span, bool)>,\n+    macros: &mut Vec<Symbol>,\n ) {\n     if in_macro(item.span) || item.vis.kind.is_pub() {\n         return;\n@@ -105,14 +119,22 @@ fn track_uses(\n         ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n             check_mod(cx, &items);\n         },\n+        ItemKind::MacroDef(MacroDef { macro_rules: true, .. }) => {\n+            macros.push(item.ident.name);\n+        },\n         ItemKind::Use(use_tree) => {\n             let segments = &use_tree.prefix.segments;\n \n+            let should_report =\n+                |name: &Symbol| !macros.contains(name) || matches!(item.vis.kind, VisibilityKind::Inherited);\n+\n             // keep track of `use some_module;` usages\n             if segments.len() == 1 {\n                 if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n-                    let ident = &segments[0].ident;\n-                    single_use_usages.push((ident.name, item.span, true));\n+                    let name = segments[0].ident.name;\n+                    if should_report(&name) {\n+                        single_use_usages.push((name, item.span, true));\n+                    }\n                 }\n                 return;\n             }\n@@ -124,8 +146,10 @@ fn track_uses(\n                         let segments = &tree.0.prefix.segments;\n                         if segments.len() == 1 {\n                             if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n-                                let ident = &segments[0].ident;\n-                                single_use_usages.push((ident.name, tree.0.span, false));\n+                                let name = segments[0].ident.name;\n+                                if should_report(&name) {\n+                                    single_use_usages.push((name, tree.0.span, false));\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "05863f9a2bf488c06722209622ceae63cce12de7", "filename": "tests/ui/single_component_path_imports_macro.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b48699e4cfd8af15669227049f3c6056d4084aba/tests%2Fui%2Fsingle_component_path_imports_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b48699e4cfd8af15669227049f3c6056d4084aba/tests%2Fui%2Fsingle_component_path_imports_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.fixed?ref=b48699e4cfd8af15669227049f3c6056d4084aba", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+// #7106: use statements exporting a macro within a crate should not trigger lint\n+\n+macro_rules! m1 {\n+    () => {};\n+}\n+pub(crate) use m1; // ok\n+\n+macro_rules! m2 {\n+    () => {};\n+}\n+ // fail\n+\n+fn main() {\n+    m1!();\n+    m2!();\n+}"}, {"sha": "633deea348b81d415778fc372cae9a720c5c5ffc", "filename": "tests/ui/single_component_path_imports_macro.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b48699e4cfd8af15669227049f3c6056d4084aba/tests%2Fui%2Fsingle_component_path_imports_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48699e4cfd8af15669227049f3c6056d4084aba/tests%2Fui%2Fsingle_component_path_imports_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.rs?ref=b48699e4cfd8af15669227049f3c6056d4084aba", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+// #7106: use statements exporting a macro within a crate should not trigger lint\n+\n+macro_rules! m1 {\n+    () => {};\n+}\n+pub(crate) use m1; // ok\n+\n+macro_rules! m2 {\n+    () => {};\n+}\n+use m2; // fail\n+\n+fn main() {\n+    m1!();\n+    m2!();\n+}"}, {"sha": "239efb393b1ab4ac058a959ebe323044cad662f1", "filename": "tests/ui/single_component_path_imports_macro.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b48699e4cfd8af15669227049f3c6056d4084aba/tests%2Fui%2Fsingle_component_path_imports_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b48699e4cfd8af15669227049f3c6056d4084aba/tests%2Fui%2Fsingle_component_path_imports_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.stderr?ref=b48699e4cfd8af15669227049f3c6056d4084aba", "patch": "@@ -0,0 +1,10 @@\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_macro.rs:16:1\n+   |\n+LL | use m2; // fail\n+   | ^^^^^^^ help: remove it entirely\n+   |\n+   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}