{"sha": "a1ee3810b82e4947d872c6d74c9d246fe4d2853d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZWUzODEwYjgyZTQ5NDdkODcyYzZkNzRjOWQyNDZmZTRkMjg1M2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:52:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:27Z"}, "message": "librustc: De-`@mut` `resolve::Module::kind`", "tree": {"sha": "6704a0d704658ac6e45e01f9d05184c2a082a1c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6704a0d704658ac6e45e01f9d05184c2a082a1c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1ee3810b82e4947d872c6d74c9d246fe4d2853d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ee3810b82e4947d872c6d74c9d246fe4d2853d", "html_url": "https://github.com/rust-lang/rust/commit/a1ee3810b82e4947d872c6d74c9d246fe4d2853d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1ee3810b82e4947d872c6d74c9d246fe4d2853d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "752283889ca8da16dc2efc093bbc1094b034444c", "url": "https://api.github.com/repos/rust-lang/rust/commits/752283889ca8da16dc2efc093bbc1094b034444c", "html_url": "https://github.com/rust-lang/rust/commit/752283889ca8da16dc2efc093bbc1094b034444c"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "a012dc5b91a48756fbb2659b73ed5b1f1ad6530a", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a1ee3810b82e4947d872c6d74c9d246fe4d2853d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ee3810b82e4947d872c6d74c9d246fe4d2853d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=a1ee3810b82e4947d872c6d74c9d246fe4d2853d", "patch": "@@ -29,6 +29,7 @@ use syntax::opt_vec::OptVec;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n+use std::cell::Cell;\n use std::uint;\n use std::hashmap::{HashMap, HashSet};\n use std::util;\n@@ -416,7 +417,7 @@ enum ModuleKind {\n struct Module {\n     parent_link: ParentLink,\n     def_id: Option<DefId>,\n-    kind: ModuleKind,\n+    kind: Cell<ModuleKind>,\n     is_public: bool,\n \n     children: @mut HashMap<Name, @mut NameBindings>,\n@@ -463,11 +464,11 @@ impl Module {\n            kind: ModuleKind,\n            external: bool,\n            is_public: bool)\n-                -> Module {\n+           -> Module {\n         Module {\n             parent_link: parent_link,\n             def_id: def_id,\n-            kind: kind,\n+            kind: Cell::new(kind),\n             is_public: is_public,\n             children: @mut HashMap::new(),\n             imports: @mut ~[],\n@@ -581,7 +582,7 @@ impl NameBindings {\n                             type_span: None,\n                         })\n                     }\n-                    Some(module_def) => module_def.kind = kind,\n+                    Some(module_def) => module_def.kind.set(kind),\n                 }\n             }\n         }\n@@ -1238,7 +1239,7 @@ impl Resolver {\n                             // It already exists\n                             Some(&child) if child.get_module_if_available()\n                                                  .is_some() &&\n-                                            child.get_module().kind ==\n+                                            child.get_module().kind.get() ==\n                                                 ImplModuleKind => {\n                                 ModuleReducedGraphParent(child.get_module())\n                             }\n@@ -1805,7 +1806,7 @@ impl Resolver {\n \n                                         // Mark it as an impl module if\n                                         // necessary.\n-                                        type_module.kind = ImplModuleKind;\n+                                        type_module.kind.set(ImplModuleKind);\n                                     }\n                                     Some(_) | None => {\n                                         let parent_link =\n@@ -2649,7 +2650,7 @@ impl Resolver {\n                                     // import, do not allow traits and impls\n                                     // to be selected.\n                                     match (name_search_type,\n-                                           module_def.kind) {\n+                                           module_def.kind.get()) {\n                                         (ImportSearch, TraitModuleKind) |\n                                         (ImportSearch, ImplModuleKind) => {\n                                             self.resolve_error(\n@@ -2879,7 +2880,7 @@ impl Resolver {\n                 ModuleParentLink(parent_module_node, _) => {\n                     match search_through_modules {\n                         DontSearchThroughModules => {\n-                            match search_module.kind {\n+                            match search_module.kind.get() {\n                                 NormalModuleKind => {\n                                     // We stop the search here.\n                                     debug!(\"(resolving item in lexical \\\n@@ -2987,7 +2988,7 @@ impl Resolver {\n                 NoParentLink => return None,\n                 ModuleParentLink(new_module, _) |\n                 BlockParentLink(new_module, _) => {\n-                    match new_module.kind {\n+                    match new_module.kind.get() {\n                         NormalModuleKind => return Some(new_module),\n                         ExternModuleKind |\n                         TraitModuleKind |\n@@ -3004,7 +3005,7 @@ impl Resolver {\n     fn get_nearest_normal_module_parent_or_self(&mut self,\n                                                     module_: @mut Module)\n                                                     -> @mut Module {\n-        match module_.kind {\n+        match module_.kind.get() {\n             NormalModuleKind => return module_,\n             ExternModuleKind |\n             TraitModuleKind |\n@@ -4702,7 +4703,7 @@ impl Resolver {\n                 (def, last_private.or(lp))\n             }\n         };\n-        match containing_module.kind {\n+        match containing_module.kind.get() {\n             TraitModuleKind | ImplModuleKind => {\n                 match self.method_map.find(&ident.name) {\n                     Some(s) => {"}]}