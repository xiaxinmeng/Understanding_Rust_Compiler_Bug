{"sha": "a1531ed946e2d650fc6cb5af6258fed8003e9443", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNTMxZWQ5NDZlMmQ2NTBmYzZjYjVhZjYyNThmZWQ4MDAzZTk0NDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-12T02:13:42Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:16Z"}, "message": "librustc: Remove the broken overloaded assign-ops from the language.\n\nThey evaluated the receiver twice. They should be added back with\n`AddAssign`, `SubAssign`, etc., traits.", "tree": {"sha": "8f629d34e6cb62bd9a5a2ef22656075715446c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f629d34e6cb62bd9a5a2ef22656075715446c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1531ed946e2d650fc6cb5af6258fed8003e9443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1531ed946e2d650fc6cb5af6258fed8003e9443", "html_url": "https://github.com/rust-lang/rust/commit/a1531ed946e2d650fc6cb5af6258fed8003e9443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1531ed946e2d650fc6cb5af6258fed8003e9443/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fcd4dca301d01c41a7db7f9023bc11be1025fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcd4dca301d01c41a7db7f9023bc11be1025fc7", "html_url": "https://github.com/rust-lang/rust/commit/3fcd4dca301d01c41a7db7f9023bc11be1025fc7"}], "stats": {"total": 525, "additions": 316, "deletions": 209}, "files": [{"sha": "aa6e90826bbbf5d902eeb4cbd0477244abb1bbcd", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -1281,9 +1281,9 @@ let your_crayons = ~[BananaMania, Beaver, Bittersweet];\n // Add two vectors to create a new one\n let our_crayons = my_crayons + your_crayons;\n \n-// += will append to a vector, provided it lives in a mutable slot\n+// .push_all() will append to a vector, provided it lives in a mutable slot\n let mut my_crayons = my_crayons;\n-my_crayons += your_crayons;\n+my_crayons.push_all(your_crayons);\n ~~~~\n \n > ***Note:*** The above examples of vector addition use owned"}, {"sha": "4649d4dfc3c4b913f1f7f38f5cea63e82bd0a8db", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -21,7 +21,7 @@ pub fn load_errors(testfile: &Path) -> ~[ExpectedError] {\n     let mut line_num = 1u;\n     while !rdr.eof() {\n         let ln = rdr.read_line();\n-        error_patterns += parse_expected(line_num, ln);\n+        error_patterns.push_all_move(parse_expected(line_num, ln));\n         line_num += 1u;\n     }\n     return error_patterns;"}, {"sha": "0e04be34c795a7a4ac32e854b8be5a2bb53fd36c", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -226,8 +226,8 @@ actual:\\n\\\n                          ~\"-L\", config.build_base.to_str(),\n                          ~\"-L\",\n                          aux_output_dir_name(config, testfile).to_str()];\n-        args += split_maybe_args(&config.rustcflags);\n-        args += split_maybe_args(&props.compile_flags);\n+        args.push_all_move(split_maybe_args(&config.rustcflags));\n+        args.push_all_move(split_maybe_args(&props.compile_flags));\n         return ProcArgs {prog: config.rustc_path.to_str(), args: args};\n     }\n }\n@@ -581,8 +581,8 @@ fn make_compile_args(config: &config, props: &TestProps, extras: ~[~str],\n                      ~\"-o\", xform(config, testfile).to_str(),\n                      ~\"-L\", config.build_base.to_str()]\n         + extras;\n-    args += split_maybe_args(&config.rustcflags);\n-    args += split_maybe_args(&props.compile_flags);\n+    args.push_all_move(split_maybe_args(&config.rustcflags));\n+    args.push_all_move(split_maybe_args(&props.compile_flags));\n     return ProcArgs {prog: config.rustc_path.to_str(), args: args};\n }\n "}, {"sha": "79e09c32030b3ffc004ed16fb0a9b57c9efabf57", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -186,20 +186,18 @@ impl Arena {\n     #[inline]\n     fn alloc_pod_inner(&mut self, n_bytes: uint, align: uint) -> *u8 {\n         unsafe {\n-            // XXX: Borrow check\n-            let head = transmute_mut_region(&mut self.pod_head);\n-\n-            let start = round_up_to(head.fill, align);\n+            let this = transmute_mut_region(self);\n+            let start = round_up_to(this.pod_head.fill, align);\n             let end = start + n_bytes;\n-            if end > at_vec::capacity(head.data) {\n-                return self.alloc_pod_grow(n_bytes, align);\n+            if end > at_vec::capacity(this.pod_head.data) {\n+                return this.alloc_pod_grow(n_bytes, align);\n             }\n-            head.fill = end;\n+            this.pod_head.fill = end;\n \n             //debug!(\"idx = %u, size = %u, align = %u, fill = %u\",\n             //       start, n_bytes, align, head.fill);\n \n-            ptr::offset(vec::raw::to_ptr(head.data), start)\n+            ptr::offset(vec::raw::to_ptr(this.pod_head.data), start)\n         }\n     }\n \n@@ -237,15 +235,15 @@ impl Arena {\n             let after_tydesc = head.fill + sys::size_of::<*TyDesc>();\n             let start = round_up_to(after_tydesc, align);\n             let end = start + n_bytes;\n-            if end > at_vec::capacity(head.data) {\n+            if end > at_vec::capacity(self.head.data) {\n                 return self.alloc_nonpod_grow(n_bytes, align);\n             }\n             head.fill = round_up_to(end, sys::pref_align_of::<*TyDesc>());\n \n             //debug!(\"idx = %u, size = %u, align = %u, fill = %u\",\n             //       start, n_bytes, align, head.fill);\n \n-            let buf = vec::raw::to_ptr(head.data);\n+            let buf = vec::raw::to_ptr(self.head.data);\n             return (ptr::offset(buf, tydesc_start), ptr::offset(buf, start));\n         }\n     }"}, {"sha": "4fe7761bf18da24bcdd50c89ab057a093e6036db", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -476,9 +476,15 @@ impl Bitv {\n      * character is either '0' or '1'.\n      */\n      pub fn to_str(&self) -> ~str {\n-       let mut rs = ~\"\";\n-       for self.each() |i| { if i { rs += \"1\"; } else { rs += \"0\"; } };\n-       rs\n+        let mut rs = ~\"\";\n+        for self.each() |i| {\n+            if i {\n+                rs.push_char('1');\n+            } else {\n+                rs.push_char('0');\n+            }\n+        };\n+        rs\n      }\n \n "}, {"sha": "fa064e6330e7b4dd3d9bad6a30c34df3300123b3", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -606,33 +606,47 @@ pub mod groups {\n             let mut row = \" \".repeat(4);\n \n             // short option\n-            row += match short_name.len() {\n-                0 => ~\"\",\n-                1 => ~\"-\" + short_name + \" \",\n+            match short_name.len() {\n+                0 => {}\n+                1 => {\n+                    row.push_char('-');\n+                    row.push_str(short_name);\n+                    row.push_char(' ');\n+                }\n                 _ => fail!(\"the short name should only be 1 ascii char long\"),\n-            };\n+            }\n \n             // long option\n-            row += match long_name.len() {\n-                0 => ~\"\",\n-                _ => ~\"--\" + long_name + \" \",\n-            };\n+            match long_name.len() {\n+                0 => {}\n+                _ => {\n+                    row.push_str(\"--\");\n+                    row.push_str(long_name);\n+                    row.push_char(' ');\n+                }\n+            }\n \n             // arg\n-            row += match hasarg {\n-                No    => ~\"\",\n-                Yes   => hint,\n-                Maybe => ~\"[\" + hint + \"]\",\n-            };\n+            match hasarg {\n+                No => {}\n+                Yes => row.push_str(hint),\n+                Maybe => {\n+                    row.push_char('[');\n+                    row.push_str(hint);\n+                    row.push_char(']');\n+                }\n+            }\n \n             // FIXME: #5516\n             // here we just need to indent the start of the description\n             let rowlen = row.len();\n-            row += if rowlen < 24 {\n-                \" \".repeat(24 - rowlen)\n+            if rowlen < 24 {\n+                for (24 - rowlen).times {\n+                    row.push_char(' ')\n+                }\n             } else {\n-                copy desc_sep\n-            };\n+                row.push_str(desc_sep)\n+            }\n \n             // Normalize desc to contain words separated by one space character\n             let mut desc_normalized_whitespace = ~\"\";\n@@ -649,7 +663,7 @@ pub mod groups {\n \n             // FIXME: #5516\n             // wrapped description\n-            row += desc_rows.connect(desc_sep);\n+            row.push_str(desc_rows.connect(desc_sep));\n \n             row\n         });"}, {"sha": "a71be18174ab872a9457ecbbe98794798dbea82d", "filename": "src/libextra/json.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -60,25 +60,27 @@ fn escape_str(s: &str) -> ~str {\n     let mut escaped = ~\"\\\"\";\n     for s.iter().advance |c| {\n         match c {\n-          '\"' => escaped += \"\\\\\\\"\",\n-          '\\\\' => escaped += \"\\\\\\\\\",\n-          '\\x08' => escaped += \"\\\\b\",\n-          '\\x0c' => escaped += \"\\\\f\",\n-          '\\n' => escaped += \"\\\\n\",\n-          '\\r' => escaped += \"\\\\r\",\n-          '\\t' => escaped += \"\\\\t\",\n-          _ => escaped += str::from_char(c)\n+          '\"' => escaped.push_str(\"\\\\\\\"\"),\n+          '\\\\' => escaped.push_str(\"\\\\\\\\\"),\n+          '\\x08' => escaped.push_str(\"\\\\b\"),\n+          '\\x0c' => escaped.push_str(\"\\\\f\"),\n+          '\\n' => escaped.push_str(\"\\\\n\"),\n+          '\\r' => escaped.push_str(\"\\\\r\"),\n+          '\\t' => escaped.push_str(\"\\\\t\"),\n+          _ => escaped.push_char(c),\n         }\n     };\n \n-    escaped += \"\\\"\";\n+    escaped.push_char('\"');\n \n     escaped\n }\n \n fn spaces(n: uint) -> ~str {\n     let mut ss = ~\"\";\n-    for n.times { ss.push_str(\" \"); }\n+    for n.times {\n+        ss.push_str(\" \");\n+    }\n     return ss;\n }\n "}, {"sha": "3be7394b46d0bd275fdb31273d5fa971e653ec0b", "filename": "src/libextra/md4.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -119,8 +119,10 @@ pub fn md4_str(msg: &[u8]) -> ~str {\n         let mut i = 0u32;\n         while i < 4u32 {\n             let byte = (u >> (i * 8u32)) as u8;\n-            if byte <= 16u8 { result += \"0\"; }\n-            result += uint::to_str_radix(byte as uint, 16u);\n+            if byte <= 16u8 {\n+                result.push_char('0')\n+            }\n+            result.push_str(uint::to_str_radix(byte as uint, 16u));\n             i += 1u32;\n         }\n     }"}, {"sha": "a60f51e751e1c4cd73eafe6a391717f44d460b21", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -93,10 +93,10 @@ fn encode_inner(s: &str, full_url: bool) -> ~str {\n                         out.push_char(ch);\n                       }\n \n-                      _ => out += fmt!(\"%%%X\", ch as uint)\n+                      _ => out.push_str(fmt!(\"%%%X\", ch as uint))\n                     }\n                 } else {\n-                    out += fmt!(\"%%%X\", ch as uint);\n+                    out.push_str(fmt!(\"%%%X\", ch as uint));\n                 }\n               }\n             }\n@@ -192,7 +192,7 @@ fn encode_plus(s: &str) -> ~str {\n                 out.push_char(ch);\n               }\n               ' ' => out.push_char('+'),\n-              _ => out += fmt!(\"%%%X\", ch as uint)\n+              _ => out.push_str(fmt!(\"%%%X\", ch as uint))\n             }\n         }\n \n@@ -218,7 +218,7 @@ pub fn encode_form_urlencoded(m: &HashMap<~str, ~[~str]>) -> ~str {\n                 first = false;\n             }\n \n-            out += fmt!(\"%s=%s\", key, encode_plus(*value));\n+            out.push_str(fmt!(\"%s=%s\", key, encode_plus(*value)));\n         }\n     }\n "}, {"sha": "b0fa715fdd81a65622255bd711bb23901f47bc55", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -510,11 +510,11 @@ impl ToStrRadix for BigUint {\n             let mut m      = n;\n             while m > divider {\n                 let (d, m0) = m.div_mod_floor(&divider);\n-                result += [m0.to_uint() as BigDigit];\n+                result.push(m0.to_uint() as BigDigit);\n                 m = d;\n             }\n             if !m.is_zero() {\n-                result += [m.to_uint() as BigDigit];\n+                result.push(m.to_uint() as BigDigit);\n             }\n             return result;\n         }"}, {"sha": "931a42d3c5377f2f196aeddbbb0976460c41a8a2", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -849,7 +849,7 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n     do io::with_str_reader(format) |rdr| {\n         while !rdr.eof() {\n             match rdr.read_char() {\n-                '%' => buf += parse_type(rdr.read_char(), tm),\n+                '%' => buf.push_str(parse_type(rdr.read_char(), tm)),\n                 ch => buf.push_char(ch)\n             }\n         }"}, {"sha": "af23696cbc1a6b882e0172d49bd8164eba8adce0", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -642,15 +642,15 @@ pub fn sanitize(s: &str) -> ~str {\n     for s.iter().advance |c| {\n         match c {\n             // Escape these with $ sequences\n-            '@' => result += \"$SP$\",\n-            '~' => result += \"$UP$\",\n-            '*' => result += \"$RP$\",\n-            '&' => result += \"$BP$\",\n-            '<' => result += \"$LT$\",\n-            '>' => result += \"$GT$\",\n-            '(' => result += \"$LP$\",\n-            ')' => result += \"$RP$\",\n-            ',' => result += \"$C$\",\n+            '@' => result.push_str(\"$SP$\"),\n+            '~' => result.push_str(\"$UP$\"),\n+            '*' => result.push_str(\"$RP$\"),\n+            '&' => result.push_str(\"$BP$\"),\n+            '<' => result.push_str(\"$LT$\"),\n+            '>' => result.push_str(\"$GT$\"),\n+            '(' => result.push_str(\"$LP$\"),\n+            ')' => result.push_str(\"$RP$\"),\n+            ',' => result.push_str(\"$C$\"),\n \n             // '.' doesn't occur in types and functions, so reuse it\n             // for ':'\n@@ -686,12 +686,14 @@ pub fn mangle(sess: Session, ss: path) -> ~str {\n     let mut n = ~\"_ZN\"; // Begin name-sequence.\n \n     for ss.iter().advance |s| {\n-        match *s { path_name(s) | path_mod(s) => {\n-          let sani = sanitize(sess.str_of(s));\n-          n += fmt!(\"%u%s\", sani.len(), sani);\n-        } }\n+        match *s {\n+            path_name(s) | path_mod(s) => {\n+                let sani = sanitize(sess.str_of(s));\n+                n.push_str(fmt!(\"%u%s\", sani.len(), sani));\n+            }\n+        }\n     }\n-    n += \"E\"; // End name-sequence.\n+    n.push_char('E'); // End name-sequence.\n     n\n }\n "}, {"sha": "f8ecef3b4a49c64384f0af52f1f484e54fa70dcb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -979,7 +979,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n \n         // >:-<\n         let mut impl_path = vec::append(~[], path);\n-        impl_path += [ast_map::path_name(item.ident)];\n+        impl_path.push(ast_map::path_name(item.ident));\n \n         for methods.iter().advance |m| {\n             index.push(entry {val: m.id, pos: ebml_w.writer.tell()});"}, {"sha": "1ec5c983f624819bc697666cf6c21de838317ae8", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -261,7 +261,9 @@ fn parse_opt<T>(st: &mut PState, f: &fn(&mut PState) -> T) -> Option<T> {\n fn parse_str(st: &mut PState, term: char) -> ~str {\n     let mut result = ~\"\";\n     while peek(st) != term {\n-        result += str::from_byte(next_byte(st));\n+        unsafe {\n+            str::raw::push_byte(&mut result, next_byte(st));\n+        }\n     }\n     next(st);\n     return result;"}, {"sha": "bf37ce676a817f75f36360aa1497cb99f72588cb", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -2091,8 +2091,12 @@ impl Resolver {\n         let mut first = true;\n         let mut result = ~\"\";\n         for idents.iter().advance |ident| {\n-            if first { first = false; } else { result += \"::\" };\n-            result += self.session.str_of(*ident);\n+            if first {\n+                first = false\n+            } else {\n+                result.push_str(\"::\")\n+            }\n+            result.push_str(*self.session.str_of(*ident));\n         };\n         return result;\n     }"}, {"sha": "b208592d113f383e0726ee084a045d10667c30d9", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -98,15 +98,15 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n     if !ia.clobbers.is_empty() && !clobbers.is_empty() {\n         clobbers = fmt!(\"%s,%s\", ia.clobbers, clobbers);\n     } else {\n-        clobbers += ia.clobbers;\n+        clobbers.push_str(*ia.clobbers);\n     };\n \n     // Add the clobbers to our constraints list\n-    if !clobbers.is_empty() && !constraints.is_empty() {\n-        constraints += \",\";\n-        constraints += clobbers;\n+    if clobbers.len() != 0 && constraints.len() != 0 {\n+        constraints.push_char(',');\n+        constraints.push_str(clobbers);\n     } else {\n-        constraints += clobbers;\n+        constraints.push_str(clobbers);\n     }\n \n     debug!(\"Asm Constraints: %?\", constraints);"}, {"sha": "e48a98cd90c0fc50978fd0bdf540013fe00e5e1e", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -68,13 +68,13 @@ pub fn count_insn(cx: block, category: &str) {\n         i = 0u;\n         while i < len {\n             i = *mm.get(&v[i]);\n-            s += \"/\";\n-            s += v[i];\n+            s.push_char('/');\n+            s.push_str(v[i]);\n             i += 1u;\n         }\n \n-        s += \"/\";\n-        s += category;\n+        s.push_char('/');\n+        s.push_str(category);\n \n         let n = match h.find(&s) {\n           Some(&n) => n,"}, {"sha": "4e3583a4095add2240b345bd1059c80ba1f79fd3", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -964,9 +964,12 @@ pub fn path_str(sess: session::Session, p: &[path_elt]) -> ~str {\n     for p.iter().advance |e| {\n         match *e {\n             ast_map::path_name(s) | ast_map::path_mod(s) => {\n-                if first { first = false; }\n-                else { r += \"::\"; }\n-                r += sess.str_of(s);\n+                if first {\n+                    first = false\n+                } else {\n+                    r.push_str(\"::\")\n+                }\n+                r.push_str(*sess.str_of(s));\n             }\n         }\n     }"}, {"sha": "212f78c47568047bf35b7671b39126224b000c0d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -2120,7 +2120,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                     TC_NONE,\n                     |tc, f| tc + tc_mt(cx, f.mt, cache));\n                 if ty::has_dtor(cx, did) {\n-                    res += TC_DTOR;\n+                    res = res + TC_DTOR;\n                 }\n                 apply_tc_attr(cx, did, res)\n             }\n@@ -2205,10 +2205,10 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n     fn apply_tc_attr(cx: ctxt, did: def_id, mut tc: TypeContents) -> TypeContents {\n         if has_attr(cx, did, \"mutable\") {\n-            tc += TC_MUTABLE;\n+            tc = tc + TC_MUTABLE;\n         }\n         if has_attr(cx, did, \"non_sendable\") {\n-            tc += TC_NON_SENDABLE;\n+            tc = tc + TC_NON_SENDABLE;\n         }\n         tc\n     }"}, {"sha": "1da76644244fad58e25a6be21d587fb8e8f1f70d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -213,6 +213,13 @@ impl PurityState {\n     }\n }\n \n+/// Whether `check_binop` allows overloaded operators to be invoked.\n+#[deriving(Eq)]\n+enum AllowOverloadedOperatorsFlag {\n+    AllowOverloadedOperators,\n+    DontAllowOverloadedOperators,\n+}\n+\n pub struct FnCtxt {\n     // Number of errors that had been reported when we started\n     // checking this function. On exit, if we find that *more* errors\n@@ -1487,7 +1494,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                    lhs: @ast::expr,\n                    rhs: @ast::expr,\n                    // Used only in the error case\n-                   expected_result: Option<ty::t>\n+                   expected_result: Option<ty::t>,\n+                   allow_overloaded_operators: AllowOverloadedOperatorsFlag\n                   ) {\n         let tcx = fcx.ccx.tcx;\n \n@@ -1537,8 +1545,30 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n \n         }\n \n-        let result_t = check_user_binop(fcx, callee_id, expr, lhs, lhs_t, op, rhs,\n-                                       expected_result);\n+        // Check for overloaded operators if allowed.\n+        let result_t;\n+        if allow_overloaded_operators == AllowOverloadedOperators {\n+            result_t = check_user_binop(fcx,\n+                                        callee_id,\n+                                        expr,\n+                                        lhs,\n+                                        lhs_t,\n+                                        op,\n+                                        rhs,\n+                                        expected_result);\n+        } else {\n+            fcx.type_error_message(expr.span,\n+                                   |actual| {\n+                                        fmt!(\"binary operation %s cannot be \\\n+                                              applied to type `%s`\",\n+                                             ast_util::binop_to_str(op),\n+                                             actual)\n+                                   },\n+                                   lhs_t,\n+                                   None);\n+            result_t = ty::mk_err();\n+        }\n+\n         fcx.write_ty(expr.id, result_t);\n         if ty::type_is_error(result_t) {\n             fcx.write_ty(rhs.id, result_t);\n@@ -2229,7 +2259,15 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         fcx.write_ty(id, typ);\n       }\n       ast::expr_binary(callee_id, op, lhs, rhs) => {\n-        check_binop(fcx, callee_id, expr, op, lhs, rhs, expected);\n+        check_binop(fcx,\n+                    callee_id,\n+                    expr,\n+                    op,\n+                    lhs,\n+                    rhs,\n+                    expected,\n+                    AllowOverloadedOperators);\n+\n         let lhs_ty = fcx.expr_ty(lhs);\n         let rhs_ty = fcx.expr_ty(rhs);\n         if ty::type_is_error(lhs_ty) ||\n@@ -2242,7 +2280,15 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         }\n       }\n       ast::expr_assign_op(callee_id, op, lhs, rhs) => {\n-        check_binop(fcx, callee_id, expr, op, lhs, rhs, expected);\n+        check_binop(fcx,\n+                    callee_id,\n+                    expr,\n+                    op,\n+                    lhs,\n+                    rhs,\n+                    expected,\n+                    DontAllowOverloadedOperators);\n+\n         let lhs_t = fcx.expr_ty(lhs);\n         let result_t = fcx.expr_ty(expr);\n         demand::suptype(fcx, expr.span, result_t, lhs_t);"}, {"sha": "e9deef6b22364b613ac6ed77610bebac94e3d601", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -192,11 +192,11 @@ pub fn header_name(doc: doc::ItemTag) -> ~str {\n             let mut trait_part = ~\"\";\n             for doc.trait_types.iter().enumerate().advance |(i, trait_type)| {\n                 if i == 0 {\n-                    trait_part += \" of \";\n+                    trait_part.push_str(\" of \");\n                 } else {\n-                    trait_part += \", \";\n+                    trait_part.push_str(\", \");\n                 }\n-                trait_part += *trait_type;\n+                trait_part.push_str(*trait_type);\n             }\n             fmt!(\"%s for %s%s\", trait_part, *self_ty, bounds)\n         }"}, {"sha": "a093824e453bff8b9c5f73b759a8be9e0799e11f", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -130,7 +130,7 @@ fn generic_writer(process: ~fn(markdown: ~str)) -> Writer {\n         let mut keep_going = true;\n         while keep_going {\n             match po.recv() {\n-              Write(s) => markdown += s,\n+              Write(s) => markdown.push_str(s),\n               Done => keep_going = false\n             }\n         }\n@@ -214,7 +214,7 @@ fn future_writer() -> (Writer, future::Future<~str>) {\n         let mut res = ~\"\";\n         loop {\n             match port.recv() {\n-              Write(s) => res += s,\n+              Write(s) => res.push_str(s),\n               Done => break\n             }\n         }"}, {"sha": "35a433ec9dedd84e5edba12de3013af92e3c0334", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -70,7 +70,7 @@ fn make_doc_from_pages(page_port: &PagePort) -> doc::Doc {\n     loop {\n         let val = page_port.recv();\n         if val.is_some() {\n-            pages += [val.unwrap()];\n+            pages.push(val.unwrap());\n         } else {\n             break;\n         }"}, {"sha": "abb0cf271ec464981212fc11eac42d4d8bc9777d", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -402,7 +402,8 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n                         if line.trim() == \":}\" {\n                             end_multiline = true;\n                         } else {\n-                            multiline_cmd += line + \"\\n\";\n+                            multiline_cmd.push_str(line);\n+                            multiline_cmd.push_char('\\n');\n                         }\n                     }\n                 }"}, {"sha": "6c3fcd41ed3b9d6fb1b698f95faee702332efa27", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -24,6 +24,7 @@\n use container::Container;\n use iterator::IteratorUtil;\n use rt::io::Writer;\n+use str::OwnedStr;\n use to_bytes::IterBytes;\n use uint;\n use vec::ImmutableVector;\n@@ -369,7 +370,7 @@ impl Streaming for SipState {\n         let r = self.result_bytes();\n         let mut s = ~\"\";\n         for r.iter().advance |b| {\n-            s += uint::to_str_radix(*b as uint, 16u);\n+            s.push_str(uint::to_str_radix(*b as uint, 16u));\n         }\n         s\n     }\n@@ -471,7 +472,7 @@ mod tests {\n         fn to_hex_str(r: &[u8, ..8]) -> ~str {\n             let mut s = ~\"\";\n             for r.iter().advance |b| {\n-                s += uint::to_str_radix(*b as uint, 16u);\n+                s.push_str(uint::to_str_radix(*b as uint, 16u));\n             }\n             s\n         }\n@@ -492,7 +493,7 @@ mod tests {\n \n             assert!(f == i && f == v);\n \n-            buf += [t as u8];\n+            buf.push(t as u8);\n             stream_inc.input([t as u8]);\n \n             t += 1;"}, {"sha": "b856c3c65ea5aa04e829815a93be8d00e57d6654", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -412,7 +412,7 @@ pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(radix: uint, pow\n         if my_pow % 2u == 1u {\n             total = total * multiplier;\n         }\n-        my_pow     = my_pow / 2u;\n+        my_pow = my_pow / 2u;\n         multiplier = multiplier * multiplier;\n     }\n     total"}, {"sha": "6059ba5cbddd92ce4475424bde80f8f198746984", "filename": "src/libstd/path.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -21,8 +21,8 @@ use cmp::Eq;\n use iterator::IteratorUtil;\n use libc;\n use option::{None, Option, Some};\n-use str;\n use str::{Str, StrSlice, StrVector};\n+use str;\n use to_str::ToStr;\n use ascii::{AsciiCast, AsciiStr};\n use vec::{OwnedVector, ImmutableVector};\n@@ -476,7 +476,7 @@ impl ToStr for PosixPath {\n     fn to_str(&self) -> ~str {\n         let mut s = ~\"\";\n         if self.is_absolute {\n-            s += \"/\";\n+            s.push_str(\"/\");\n         }\n         s + self.components.connect(\"/\")\n     }\n@@ -655,15 +655,21 @@ impl ToStr for WindowsPath {\n     fn to_str(&self) -> ~str {\n         let mut s = ~\"\";\n         match self.host {\n-          Some(ref h) => { s += \"\\\\\\\\\"; s += *h; }\n+          Some(ref h) => {\n+            s.push_str(\"\\\\\\\\\");\n+            s.push_str(*h);\n+          }\n           None => { }\n         }\n         match self.device {\n-          Some(ref d) => { s += *d; s += \":\"; }\n+          Some(ref d) => {\n+            s.push_str(*d);\n+            s.push_str(\":\");\n+          }\n           None => { }\n         }\n         if self.is_absolute {\n-            s += \"\\\\\";\n+            s.push_str(\"\\\\\");\n         }\n         s + self.components.connect(\"\\\\\")\n     }"}, {"sha": "ab7d3fda50137eb1bfda42b6947097a5f1ca764b", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -263,8 +263,11 @@ fn highlight_lines(cm: @codemap::CodeMap,\n         let s = fmt!(\"%s:%u \", fm.name, last_line + 1u);\n         let mut indent = s.len();\n         let mut out = ~\"\";\n-        while indent > 0u { out += \" \"; indent -= 1u; }\n-        out += \"...\\n\";\n+        while indent > 0u {\n+            out.push_char(' ');\n+            indent -= 1u;\n+        }\n+        out.push_str(\"...\\n\");\n         io::stderr().write_str(out);\n     }\n \n@@ -285,23 +288,29 @@ fn highlight_lines(cm: @codemap::CodeMap,\n         // part of the 'filename:line ' part of the previous line.\n         let skip = fm.name.len() + digits + 3u;\n         for skip.times() {\n-            s += \" \";\n+            s.push_char(' ');\n         }\n         let orig = fm.get_line(lines.lines[0] as int);\n         for uint::range(0u,left-skip) |pos| {\n             let curChar = (orig[pos] as char);\n-            s += match curChar { // Whenever a tab occurs on the previous\n-                '\\t' => \"\\t\",    // line, we insert one on the error-point-\n-                _ => \" \"         // -squiggly-line as well (instead of a\n-            };                   // space). This way the squiggly-line will\n-        }                        // usually appear in the correct position.\n+            // Whenever a tab occurs on the previous line, we insert one on\n+            // the error-point-squiggly-line as well (instead of a space).\n+            // That way the squiggly line will usually appear in the correct\n+            // position.\n+            match curChar {\n+                '\\t' => s.push_char('\\t'),\n+                _ => s.push_char(' '),\n+            };\n+        }\n         io::stderr().write_str(s);\n         let mut s = ~\"^\";\n         let hi = cm.lookup_char_pos(sp.hi);\n         if hi.col != lo.col {\n             // the ^ already takes up one space\n             let num_squigglies = hi.col.to_uint()-lo.col.to_uint()-1u;\n-            for num_squigglies.times() { s += \"~\"; }\n+            for num_squigglies.times() {\n+                s.push_char('~')\n+            }\n         }\n         print_maybe_colored(s + \"\\n\", diagnosticcolor(lvl));\n     }"}, {"sha": "7df8874076e091456f2fb32bdc485f1ccd9629ba", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -26,8 +26,7 @@ pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n             }\n         } else {\n             match *e {\n-                ast::tt_tok(_, token::IDENT(ident,_)) =>\n-                res_str += cx.str_of(ident),\n+                ast::tt_tok(_, token::IDENT(ident,_)) => res_str.push_str(cx.str_of(ident)),\n                 _ => cx.span_fatal(sp, \"concat_idents! requires ident args.\")\n             }\n         }"}, {"sha": "8e1276d52d1d60b2b40ef4a28ae7fd2482fc96ad", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -65,8 +65,8 @@ impl gen_send for message {\n                 args_ast);\n \n             let mut body = ~\"{\\n\";\n-            body += fmt!(\"use super::%s;\\n\", name);\n-            body += \"let mut pipe = pipe;\\n\";\n+            body.push_str(fmt!(\"use super::%s;\\n\", name));\n+            body.push_str(\"let mut pipe = pipe;\\n\");\n \n             if this.proto.is_bounded() {\n                 let (sp, rp) = match (this.dir, next.dir) {\n@@ -76,13 +76,15 @@ impl gen_send for message {\n                   (recv, recv) => (~\"c\", ~\"s\")\n                 };\n \n-                body += \"let mut b = pipe.reuse_buffer();\\n\";\n-                body += fmt!(\"let %s = ::std::pipes::SendPacketBuffered(\\\n-                              &mut (b.buffer.data.%s));\\n\",\n-                             sp, next.name);\n-                body += fmt!(\"let %s = ::std::pipes::RecvPacketBuffered(\\\n-                              &mut (b.buffer.data.%s));\\n\",\n-                             rp, next.name);\n+                body.push_str(\"let mut b = pipe.reuse_buffer();\\n\");\n+                body.push_str(fmt!(\"let %s = ::std::pipes::SendPacketBuffered(\\\n+                                    &mut (b.buffer.data.%s));\\n\",\n+                                    sp,\n+                                    next.name));\n+                body.push_str(fmt!(\"let %s = ::std::pipes::RecvPacketBuffered(\\\n+                                   &mut (b.buffer.data.%s));\\n\",\n+                                   rp,\n+                                   next.name));\n             }\n             else {\n                 let pat = match (this.dir, next.dir) {\n@@ -92,23 +94,22 @@ impl gen_send for message {\n                   (recv, recv) => \"(s, c)\"\n                 };\n \n-                body += fmt!(\"let %s = ::std::pipes::entangle();\\n\", pat);\n+                body.push_str(fmt!(\"let %s = ::std::pipes::entangle();\\n\", pat));\n             }\n-            body += fmt!(\"let message = %s(%s);\\n\",\n-                         name,\n-                         vec::append_one(\n-                             arg_names.map(|x| cx.str_of(*x)),\n-                             @\"s\").connect(\", \"));\n+            body.push_str(fmt!(\"let message = %s(%s);\\n\",\n+                                name,\n+                                vec::append_one(arg_names.map(|x| cx.str_of(*x)), ~\"s\")\n+                                                         .connect(\", \")));\n \n             if !try {\n-                body += fmt!(\"::std::pipes::send(pipe, message);\\n\");\n+                body.push_str(fmt!(\"::std::pipes::send(pipe, message);\\n\"));\n                 // return the new channel\n-                body += \"c }\";\n+                body.push_str(\"c }\");\n             }\n             else {\n-                body += fmt!(\"if ::std::pipes::send(pipe, message) {\\n \\\n+                body.push_str(fmt!(\"if ::std::pipes::send(pipe, message) {\\n \\\n                                   ::std::pipes::rt::make_some(c) \\\n-                              } else { ::std::pipes::rt::make_none() } }\");\n+                              } else { ::std::pipes::rt::make_none() } }\"));\n             }\n \n             let body = cx.parse_expr(body.to_managed());\n@@ -155,19 +156,19 @@ impl gen_send for message {\n                 };\n \n                 let mut body = ~\"{ \";\n-                body += fmt!(\"use super::%s;\\n\", name);\n-                body += fmt!(\"let message = %s%s;\\n\", name, message_args);\n+                body.push_str(fmt!(\"use super::%s;\\n\", name));\n+                body.push_str(fmt!(\"let message = %s%s;\\n\", name, message_args));\n \n                 if !try {\n-                    body += fmt!(\"::std::pipes::send(pipe, message);\\n\");\n-                    body += \" }\";\n+                    body.push_str(fmt!(\"::std::pipes::send(pipe, message);\\n\"));\n+                    body.push_str(\" }\");\n                 } else {\n-                    body += fmt!(\"if ::std::pipes::send(pipe, message) \\\n+                    body.push_str(fmt!(\"if ::std::pipes::send(pipe, message) \\\n                                         { \\\n                                       ::std::pipes::rt::make_some(()) \\\n                                   } else { \\\n                                     ::std::pipes::rt::make_none() \\\n-                                  } }\");\n+                                  } }\"));\n                 }\n \n                 let body = cx.parse_expr(body.to_managed());\n@@ -433,10 +434,10 @@ impl gen_init for protocol {\n         let mut server_states = ~[];\n \n         for (copy self.states).iter().advance |s| {\n-            items += s.to_type_decls(cx);\n+            items.push_all_move(s.to_type_decls(cx));\n \n-            client_states += s.to_endpoint_decls(cx, send);\n-            server_states += s.to_endpoint_decls(cx, recv);\n+            client_states.push_all_move(s.to_endpoint_decls(cx, send));\n+            server_states.push_all_move(s.to_endpoint_decls(cx, recv));\n         }\n \n         if self.is_bounded() {"}, {"sha": "d33b72ae3c90e8170d031e360b1503ce72fa039b", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -42,7 +42,7 @@ impl parser_attr for Parser {\n                 if self.look_ahead(1u) != token::LBRACKET {\n                     break;\n                 }\n-                attrs += [self.parse_attribute(ast::attr_outer)];\n+                attrs.push(self.parse_attribute(ast::attr_outer));\n               }\n               token::DOC_COMMENT(s) => {\n                 let attr = ::attr::mk_sugared_doc_attr(\n@@ -53,7 +53,7 @@ impl parser_attr for Parser {\n                 if attr.node.style != ast::attr_outer {\n                   self.fatal(\"expected outer comment\");\n                 }\n-                attrs += [attr];\n+                attrs.push(attr);\n                 self.bump();\n               }\n               _ => break\n@@ -77,9 +77,7 @@ impl parser_attr for Parser {\n         self.expect(&token::RBRACKET);\n         let hi = self.span.hi;\n         return spanned(lo, hi, ast::attribute_ { style: style,\n-                                                 value: meta_item,\n-                                                 is_sugared_doc: false });\n-    }\n+                                                 value: meta_item, is_sugared_doc: false }); }\n \n     // Parse attributes that appear after the opening of an item, each\n     // terminated by a semicolon. In addition to a vector of inner attributes,\n@@ -105,15 +103,15 @@ impl parser_attr for Parser {\n                 let attr = self.parse_attribute(ast::attr_inner);\n                 if *self.token == token::SEMI {\n                     self.bump();\n-                    inner_attrs += [attr];\n+                    inner_attrs.push(attr);\n                 } else {\n                     // It's not really an inner attribute\n                     let outer_attr =\n                         spanned(attr.span.lo, attr.span.hi,\n                             ast::attribute_ { style: ast::attr_outer,\n                                               value: attr.node.value,\n                                               is_sugared_doc: false });\n-                    next_outer_attrs += [outer_attr];\n+                    next_outer_attrs.push(outer_attr);\n                     break;\n                 }\n               }\n@@ -125,9 +123,9 @@ impl parser_attr for Parser {\n                 );\n                 self.bump();\n                 if attr.node.style == ast::attr_inner {\n-                  inner_attrs += [attr];\n+                  inner_attrs.push(attr);\n                 } else {\n-                  next_outer_attrs += [attr];\n+                  next_outer_attrs.push(attr);\n                   break;\n                 }\n               }"}, {"sha": "01af33b13b856316c9ac235e57eeb0f32d56488d", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -254,7 +254,7 @@ fn read_block_comment(rdr: @mut StringReader,\n             bump(rdr);\n         }\n         if !is_eof(rdr) {\n-            curr_line += \"*/\";\n+            curr_line.push_str(\"*/\");\n             bump(rdr);\n             bump(rdr);\n         }\n@@ -278,13 +278,13 @@ fn read_block_comment(rdr: @mut StringReader,\n                 if rdr.curr == '/' && nextch(rdr) == '*' {\n                     bump(rdr);\n                     bump(rdr);\n-                    curr_line += \"*\";\n+                    curr_line.push_char('*');\n                     level += 1;\n                 } else {\n                     if rdr.curr == '*' && nextch(rdr) == '/' {\n                         bump(rdr);\n                         bump(rdr);\n-                        curr_line += \"/\";\n+                        curr_line.push_char('/');\n                         level -= 1;\n                     } else { bump(rdr); }\n                 }"}, {"sha": "e003e2b27e9a2c24f3e27f87615b518423951e2c", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -192,10 +192,10 @@ impl Parser {\n             );\n         } else {\n             let mut s: ~str = ~\"expected `\";\n-            s += self.token_to_str(&token::GT);\n-            s += \"`, found `\";\n-            s += self.this_token_to_str();\n-            s += \"`\";\n+            s.push_str(self.token_to_str(&token::GT));\n+            s.push_str(\"`, found `\");\n+            s.push_str(self.this_token_to_str());\n+            s.push_str(\"`\");\n             self.fatal(s);\n         }\n     }"}, {"sha": "4a872832952665b31a7f6a38874c833e3f134f2a", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -180,7 +180,7 @@ pub fn bump(rdr: &mut StringReader) {\n         let byte_offset_diff = next.next - current_byte_offset;\n         rdr.pos = rdr.pos + BytePos(byte_offset_diff);\n         rdr.curr = next.ch;\n-        rdr.col += CharPos(1u);\n+        rdr.col = rdr.col + CharPos(1u);\n         if last_char == '\\n' {\n             rdr.filemap.next_line(rdr.last_pos);\n             rdr.col = CharPos(0u);\n@@ -448,8 +448,8 @@ fn scan_number(c: char, rdr: @mut StringReader) -> token::Token {\n         is_float = true;\n         bump(rdr);\n         let dec_part = scan_digits(rdr, 10u);\n-        num_str += \".\";\n-        num_str += dec_part;\n+        num_str.push_char('.');\n+        num_str.push_str(dec_part);\n     }\n     if is_float {\n         match base {\n@@ -461,7 +461,7 @@ fn scan_number(c: char, rdr: @mut StringReader) -> token::Token {\n     match scan_exponent(rdr) {\n       Some(ref s) => {\n         is_float = true;\n-        num_str += (*s);\n+        num_str.push_str(*s);\n       }\n       None => ()\n     }"}, {"sha": "a7c46d609cae2582a6879eb3077a775ad5d3cf69", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -4257,8 +4257,12 @@ impl Parser {\n         // FAILURE TO PARSE ITEM\n         if visibility != inherited {\n             let mut s = ~\"unmatched visibility `\";\n-            s += if visibility == public { \"pub\" } else { \"priv\" };\n-            s += \"`\";\n+            if visibility == public {\n+                s.push_str(\"pub\")\n+            } else {\n+                s.push_str(\"priv\")\n+            }\n+            s.push_char('`');\n             self.span_fatal(*self.last_span, s);\n         }\n         return iovi_none;"}, {"sha": "18e6c1817991bb4d7616d8a0d493a7c90ced40ba", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -178,14 +178,14 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n       LIT_FLOAT(ref s, t) => {\n         let mut body = ident_to_str(s).to_owned();\n         if body.ends_with(\".\") {\n-            body += \"0\";  // `10.f` is not a float literal\n+            body.push_char('0');  // `10.f` is not a float literal\n         }\n         body + ast_util::float_ty_to_str(t)\n       }\n       LIT_FLOAT_UNSUFFIXED(ref s) => {\n         let mut body = ident_to_str(s).to_owned();\n         if body.ends_with(\".\") {\n-            body += \"0\";  // `10.f` is not a float literal\n+            body.push_char('0');  // `10.f` is not a float literal\n         }\n         body\n       }"}, {"sha": "7cd3faf9a90533cba4b9fcbd81b570c23ee7f237", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -122,12 +122,14 @@ pub fn buf_str(toks: ~[token], szs: ~[int], left: uint, right: uint,\n     let mut s = ~\"[\";\n     while i != right && L != 0u {\n         L -= 1u;\n-        if i != left { s += \", \"; }\n-        s += fmt!(\"%d=%s\", szs[i], tok_str(toks[i]));\n+        if i != left {\n+            s.push_str(\", \");\n+        }\n+        s.push_str(fmt!(\"%d=%s\", szs[i], tok_str(toks[i])));\n         i += 1u;\n         i %= n;\n     }\n-    s += \"]\";\n+    s.push_char(']');\n     return s;\n }\n "}, {"sha": "c4d89a698c1abecf6d310f61957470d58f40fff3", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -87,9 +87,8 @@ fn vec_plus() {\n     while i < 1500 {\n         let rv = vec::from_elem(r.gen_uint_range(0, i + 1), i);\n         if r.gen() {\n-            v += rv;\n-        }\n-        else {\n+            v.push_all_move(rv);\n+        } else {\n             v = rv + v;\n         }\n         i += 1;"}, {"sha": "49a3a3ec5d7d39801df461ea4595ae7816956573", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -50,8 +50,8 @@ fn show_color(cc: color) -> ~str {\n fn show_color_list(set: ~[color]) -> ~str {\n     let mut out = ~\"\";\n     for set.iter().advance |col| {\n-        out += \" \";\n-        out += show_color(*col);\n+        out.push_char(' ');\n+        out.push_str(show_color(*col));\n     }\n     return out;\n }"}, {"sha": "da8d65a1dcbab449ba3b98fca941ba240dd2d992", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -47,7 +47,7 @@ fn make_cumulative(aa: ~[AminoAcids]) -> ~[AminoAcids] {\n     let mut ans: ~[AminoAcids] = ~[];\n     for aa.iter().advance |a| {\n         cp += a.prob;\n-        ans += [AminoAcids {ch: a.ch, prob: cp}];\n+        ans.push(AminoAcids {ch: a.ch, prob: cp});\n     }\n     ans\n }"}, {"sha": "d26fe80e8a124f4c815a4ce73c83828dfe5783e0", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -70,7 +70,7 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n            let b = str::raw::from_bytes(k);\n            // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n            // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n-           buffer += (fmt!(\"%s %0.3f\\n\", b.to_ascii().to_upper().to_str_ascii(), v));\n+           buffer.push_str(fmt!(\"%s %0.3f\\n\", b.to_ascii().to_upper().to_str_ascii(), v));\n        }\n    }\n "}, {"sha": "2396d6efc5cc1a924c1911ee43cd65cf1c6e6205", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -103,7 +103,9 @@ impl Sudoku {\n         for u8::range(0u8, 9u8) |row| {\n             for u8::range(0u8, 9u8) |col| {\n                 let color = self.grid[row][col];\n-                if color == 0u8 { work += [(row, col)]; }\n+                if color == 0u8 {\n+                    work.push((row, col));\n+                }\n             }\n         }\n "}, {"sha": "b5a5eed6a35a21ba723fbb9f58ebc1806ffbd7bd", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -15,7 +15,7 @@ trait vec_monad<A> {\n impl<A> vec_monad<A> for ~[A] {\n     fn bind<B>(&self, f: &fn(A) -> ~[B]) {\n         let mut r = fail!();\n-        for self.iter().advance |elt| { r += f(*elt); }\n+        for self.iter().advance |elt| { r = r + f(*elt); }\n         //~^ WARNING unreachable expression\n         //~^^ ERROR the type of this value must be known\n    }"}, {"sha": "caee00027883a58eb1088de5bf59e7183caca97e", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -10,9 +10,9 @@\n \n // error-pattern:so long\n fn main() {\n-    let x = ~[];\n+    let mut x = ~[];\n     let y = ~[3];\n     fail!(\"so long\");\n-    x += y;\n+    x.push_all_move(y);\n     ~\"good\" + ~\"bye\";\n }"}, {"sha": "ab89a357d349c2172903d2bf4ec3326d684b6227", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -44,19 +44,19 @@ fn test_heap_add() {\n \n fn test_append() {\n     let mut s = ~\"\";\n-    s += ~\"a\";\n+    s.push_str(~\"a\");\n     assert_eq!(s, ~\"a\");\n \n     let mut s = ~\"a\";\n-    s += ~\"b\";\n+    s.push_str(~\"b\");\n     debug!(s.clone());\n     assert_eq!(s, ~\"ab\");\n \n     let mut s = ~\"c\";\n-    s += ~\"offee\";\n+    s.push_str(~\"offee\");\n     assert!(s == ~\"coffee\");\n \n-    s += ~\"&tea\";\n+    s.push_str(~\"&tea\");\n     assert!(s == ~\"coffee&tea\");\n }\n "}, {"sha": "d910ac9a4e77ab21645b59bd1d3cf4251a438ec6", "filename": "src/test/run-pass/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -15,7 +15,7 @@ fn the_loop() {\n     loop {\n         let x = 5;\n         if x > 3 {\n-            list += ~[take(x)];\n+            list.push(take(x));\n         } else {\n             break;\n         }"}, {"sha": "5ac62bae39224f569b45766d11195934156e384e", "filename": "src/test/run-pass/match-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-join.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -23,7 +23,7 @@ fn foo<T>(y: Option<T>) {\n           None::<T> => x = 17,\n           _ => x = 42\n         }\n-        rs += ~[x];\n+        rs.push(x);\n     }\n     return;\n }"}, {"sha": "fe06c973dbfd815d92371c1fab6d02d83c12a1d3", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -19,7 +19,9 @@ trait vec_monad<A> {\n impl<A> vec_monad<A> for ~[A] {\n     fn bind<B:Copy>(&self, f: &fn(&A) -> ~[B]) -> ~[B] {\n         let mut r = ~[];\n-        for self.iter().advance |elt| { r += f(elt); }\n+        for self.iter().advance |elt| {\n+            r.push_all_move(f(elt));\n+        }\n         r\n     }\n }"}, {"sha": "538aedcf7c8879f27614e5a3bef6a154edf5555f", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -13,7 +13,9 @@ extern mod extra;\n \n use std::vec;\n \n-fn grow(v: &mut ~[int]) { *v += ~[1]; }\n+fn grow(v: &mut ~[int]) {\n+    v.push(1);\n+}\n \n pub fn main() {\n     let mut v: ~[int] = ~[];"}, {"sha": "05aa1e7460839a0b08b4c53278e3ef6a2efa1382", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -57,7 +57,7 @@ impl cmp::Eq for Point {\n \n pub fn main() {\n     let mut p = Point {x: 10, y: 20};\n-    p += Point {x: 101, y: 102};\n+    p = p + Point {x: 101, y: 102};\n     p = p - Point {x: 100, y: 100};\n     assert_eq!(p + Point {x: 5, y: 5}, Point {x: 16, y: 27});\n     assert_eq!(-p, Point {x: -11, y: -22});"}, {"sha": "d0c58b50e2cec179494520aef9d3c0fb5c2e0909", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -19,7 +19,7 @@ fn foo(c: ~[int]) {\n             for c.iter().advance |i| {\n                 debug!(a);\n                 let a = 17;\n-                b += ~[a];\n+                b.push(a);\n             }\n         }\n         _ => { }"}, {"sha": "0ddc39d6b18cc7eda81e94fc6fe3936267bffa69", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -51,7 +51,9 @@ impl<T> vec_utils<T> for ~[T] {\n     fn iter_(&self, f: &fn(&T)) { for self.iter().advance |x| { f(x); } }\n     fn map_<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];\n-        for self.iter().advance |elt| { r += ~[f(elt)]; }\n+        for self.iter().advance |elt| {\n+            r.push(f(elt));\n+        }\n         r\n     }\n }"}, {"sha": "556247eb4260ee62b2613ed07718501250d78595", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -15,7 +15,7 @@ extern mod extra;\n \n fn test1() {\n     let mut s: ~str = ~\"hello\";\n-    s += ~\"world\";\n+    s.push_str(\"world\");\n     debug!(s.clone());\n     assert_eq!(s[9], 'd' as u8);\n }"}, {"sha": "0cdf1841331a8d36fbac057fbeaf9782dec85257", "filename": "src/test/run-pass/str-growth.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fstr-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fstr-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-growth.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -12,11 +12,11 @@\n \n pub fn main() {\n     let mut s = ~\"a\";\n-    s += ~\"b\";\n+    s.push_char('b');\n     assert_eq!(s[0], 'a' as u8);\n     assert_eq!(s[1], 'b' as u8);\n-    s += ~\"c\";\n-    s += ~\"d\";\n+    s.push_char('c');\n+    s.push_char('d');\n     assert_eq!(s[0], 'a' as u8);\n     assert_eq!(s[1], 'b' as u8);\n     assert_eq!(s[2], 'c' as u8);"}, {"sha": "5952afa6676b7134a7e053c1697b896afbefdecf", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -33,7 +33,7 @@ impl<T> map<T> for ~[T] {\n         let mut r = ~[];\n         // FIXME: #7355 generates bad code with Iterator\n         for std::uint::range(0, self.len()) |i| {\n-            r += ~[f(&self[i])];\n+            r.push(f(&self[i]));\n         }\n         r\n     }"}, {"sha": "c9a4c57cc9d36e55d472d4bfa76fbe04e9176c36", "filename": "src/test/run-pass/vec-growth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-growth.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -12,10 +12,10 @@\n \n pub fn main() {\n     let mut v = ~[1];\n-    v += ~[2];\n-    v += ~[3];\n-    v += ~[4];\n-    v += ~[5];\n+    v.push(2);\n+    v.push(3);\n+    v.push(4);\n+    v.push(5);\n     assert_eq!(v[0], 1);\n     assert_eq!(v[1], 2);\n     assert_eq!(v[2], 3);"}, {"sha": "503e37fcd76ea32cdb8e71bc7ac3ff0ed98d800d", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1531ed946e2d650fc6cb5af6258fed8003e9443/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=a1531ed946e2d650fc6cb5af6258fed8003e9443", "patch": "@@ -17,7 +17,7 @@ fn make(i: int) -> t {\n     let mut s = ~\"hello\";\n     // Ensure s is non-const.\n \n-    s += ~\"there\";\n+    s.push_str(\"there\");\n     return b(s);\n }\n "}]}