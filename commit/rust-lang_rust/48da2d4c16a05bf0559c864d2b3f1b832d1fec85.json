{"sha": "48da2d4c16a05bf0559c864d2b3f1b832d1fec85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZGEyZDRjMTZhMDViZjA1NTljODY0ZDJiM2YxYjgzMmQxZmVjODU=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-24T13:01:48Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-07-24T13:02:57Z"}, "message": "Add DocumentData to represent in-memory document with LSP info", "tree": {"sha": "83d2512711ead30e30e2ca93aaf57a3a577676c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d2512711ead30e30e2ca93aaf57a3a577676c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48da2d4c16a05bf0559c864d2b3f1b832d1fec85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48da2d4c16a05bf0559c864d2b3f1b832d1fec85", "html_url": "https://github.com/rust-lang/rust/commit/48da2d4c16a05bf0559c864d2b3f1b832d1fec85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5095d3cac11d4b569c6e1594bd07937556c812", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5095d3cac11d4b569c6e1594bd07937556c812", "html_url": "https://github.com/rust-lang/rust/commit/0e5095d3cac11d4b569c6e1594bd07937556c812"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "43219e6330f3d0456e0b711b82f2d5b6c5b526c6", "filename": "crates/rust-analyzer/src/document.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs?ref=48da2d4c16a05bf0559c864d2b3f1b832d1fec85", "patch": "@@ -0,0 +1,16 @@\n+//! In-memory document information.\n+\n+/// Information about a document that the Language Client\n+// knows about.\n+// Its lifetime is driven by the textDocument/didOpen and textDocument/didClose\n+// client notifications.\n+#[derive(Debug, Clone)]\n+pub(crate) struct DocumentData {\n+    pub version: Option<i64>,\n+}\n+\n+impl DocumentData {\n+    pub fn new(version: i64) -> Self {\n+        DocumentData { version: Some(version) }\n+    }\n+}"}, {"sha": "b2d65a6d18f2701b2e8e8bcf9d9ddfde82cfe78a", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=48da2d4c16a05bf0559c864d2b3f1b832d1fec85", "patch": "@@ -17,6 +17,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     config::Config,\n     diagnostics::{CheckFixes, DiagnosticCollection},\n+    document::DocumentData,\n     from_proto,\n     line_endings::LineEndings,\n     main_loop::Task,\n@@ -69,7 +70,7 @@ pub(crate) struct GlobalState {\n     pub(crate) config: Config,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n-    pub(crate) mem_docs: FxHashMap<VfsPath, Option<i64>>,\n+    pub(crate) mem_docs: FxHashMap<VfsPath, DocumentData>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) status: Status,\n     pub(crate) source_root_config: SourceRootConfig,\n@@ -84,7 +85,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) analysis: Analysis,\n     pub(crate) check_fixes: CheckFixes,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n-    mem_docs: FxHashMap<VfsPath, Option<i64>>,\n+    mem_docs: FxHashMap<VfsPath, DocumentData>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n }\n@@ -259,7 +260,7 @@ impl GlobalStateSnapshot {\n \n     pub(crate) fn url_file_version(&self, url: &Url) -> Option<i64> {\n         let path = from_proto::vfs_path(&url).ok()?;\n-        self.mem_docs.get(&path).copied()?\n+        self.mem_docs.get(&path)?.version\n     }\n \n     pub(crate) fn anchored_path(&self, file_id: FileId, path: &str) -> Url {"}, {"sha": "c4284556edfac57f51972cae1456c46e2acb73ec", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=48da2d4c16a05bf0559c864d2b3f1b832d1fec85", "patch": "@@ -33,6 +33,7 @@ mod line_endings;\n mod request_metrics;\n mod lsp_utils;\n mod thread_pool;\n+mod document;\n pub mod lsp_ext;\n pub mod config;\n "}, {"sha": "51626fcd58e046c34703c34cc740d1814634136d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da2d4c16a05bf0559c864d2b3f1b832d1fec85/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=48da2d4c16a05bf0559c864d2b3f1b832d1fec85", "patch": "@@ -15,6 +15,7 @@ use ra_prof::profile;\n use crate::{\n     config::Config,\n     dispatch::{NotificationDispatcher, RequestDispatcher},\n+    document::DocumentData,\n     from_proto,\n     global_state::{file_id_to_url, url_to_file_id, GlobalState, Status},\n     handlers, lsp_ext,\n@@ -311,7 +312,7 @@ impl GlobalState {\n                 let url = file_id_to_url(&self.vfs.read().0, file_id);\n                 let diagnostics = self.diagnostics.diagnostics_for(file_id).cloned().collect();\n                 let version = from_proto::vfs_path(&url)\n-                    .map(|path| self.mem_docs.get(&path).copied().flatten())\n+                    .map(|path| self.mem_docs.get(&path)?.version)\n                     .unwrap_or_default();\n \n                 self.send_notification::<lsp_types::notification::PublishDiagnostics>(\n@@ -406,7 +407,7 @@ impl GlobalState {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n                     if this\n                         .mem_docs\n-                        .insert(path.clone(), Some(params.text_document.version))\n+                        .insert(path.clone(), DocumentData::new(params.text_document.version))\n                         .is_some()\n                     {\n                         log::error!(\"duplicate DidOpenTextDocument: {}\", path)\n@@ -428,7 +429,7 @@ impl GlobalState {\n \n                     // The version passed in DidChangeTextDocument is the version after all edits are applied\n                     // so we should apply it before the vfs is notified.\n-                    *doc = params.text_document.version;\n+                    doc.version = params.text_document.version;\n \n                     vfs.set_file_contents(path.clone(), Some(text.into_bytes()));\n                 }\n@@ -438,7 +439,7 @@ impl GlobalState {\n                 let mut version = None;\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n                     match this.mem_docs.remove(&path) {\n-                        Some(entry) => version = entry,\n+                        Some(doc) => version = doc.version,\n                         None => log::error!(\"orphan DidCloseTextDocument: {}\", path),\n                     }\n "}]}