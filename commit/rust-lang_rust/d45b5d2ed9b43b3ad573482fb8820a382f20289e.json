{"sha": "d45b5d2ed9b43b3ad573482fb8820a382f20289e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NWI1ZDJlZDliNDNiM2FkNTczNDgyZmI4ODIwYTM4MmYyMDI4OWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-30T06:55:06Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-01T21:28:19Z"}, "message": "Disallow [_, ..n] syntax for fixed length arrays and repeating array constructors\n\nCloses #19999\n\n[breaking-change]\n\nUse [_; n] instead.", "tree": {"sha": "22734f013bd1ebf3245c685cb51a12b21916f98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22734f013bd1ebf3245c685cb51a12b21916f98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45b5d2ed9b43b3ad573482fb8820a382f20289e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45b5d2ed9b43b3ad573482fb8820a382f20289e", "html_url": "https://github.com/rust-lang/rust/commit/d45b5d2ed9b43b3ad573482fb8820a382f20289e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45b5d2ed9b43b3ad573482fb8820a382f20289e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d74026663597a8d4ad0ab04e6d117bf9fd6ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d74026663597a8d4ad0ab04e6d117bf9fd6ad4", "html_url": "https://github.com/rust-lang/rust/commit/39d74026663597a8d4ad0ab04e6d117bf9fd6ad4"}], "stats": {"total": 17, "additions": 2, "deletions": 15}, "files": [{"sha": "a58ed4811bf945d268d8276a068b2f59a8cce6a2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d45b5d2ed9b43b3ad573482fb8820a382f20289e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45b5d2ed9b43b3ad573482fb8820a382f20289e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d45b5d2ed9b43b3ad573482fb8820a382f20289e", "patch": "@@ -1716,12 +1716,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn maybe_parse_fixed_length_of_vec(&mut self) -> Option<P<ast::Expr>> {\n-        if self.check(&token::Comma) &&\n-                self.look_ahead(1, |t| *t == token::DotDot) {\n-            self.bump();\n-            self.bump();\n-            Some(self.parse_expr_res(RESTRICTION_NO_DOTS))\n-        } else if self.check(&token::Semi) {\n+        if self.check(&token::Semi) {\n             self.bump();\n             Some(self.parse_expr())\n         } else {\n@@ -2277,15 +2272,7 @@ impl<'a> Parser<'a> {\n                 } else {\n                     // Nonempty vector.\n                     let first_expr = self.parse_expr();\n-                    if self.check(&token::Comma) &&\n-                        self.look_ahead(1, |t| *t == token::DotDot) {\n-                        // Repeating vector syntax: [ 0, ..512 ]\n-                        self.bump();\n-                        self.bump();\n-                        let count = self.parse_expr();\n-                        self.expect(&token::CloseDelim(token::Bracket));\n-                        ex = ExprRepeat(first_expr, count);\n-                    } else if self.check(&token::Semi) {\n+                    if self.check(&token::Semi) {\n                         // Repeating vector syntax: [ 0; 512 ]\n                         self.bump();\n                         let count = self.parse_expr();"}]}