{"sha": "c5d3167a23e7f1f6515a28ff15a6698b6712ae54", "node_id": "C_kwDOAAsO6NoAKGM1ZDMxNjdhMjNlN2YxZjY1MTVhMjhmZjE1YTY2OThiNjcxMmFlNTQ", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T00:28:45Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:19Z"}, "message": "update testsuite and expand `if_chain`", "tree": {"sha": "0d84e75e52b28f7057dc613594832d881a9c9b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d84e75e52b28f7057dc613594832d881a9c9b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d3167a23e7f1f6515a28ff15a6698b6712ae54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d3167a23e7f1f6515a28ff15a6698b6712ae54", "html_url": "https://github.com/rust-lang/rust/commit/c5d3167a23e7f1f6515a28ff15a6698b6712ae54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d3167a23e7f1f6515a28ff15a6698b6712ae54/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3420f70043c19165a4e44639ef4e6f3c156a174", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3420f70043c19165a4e44639ef4e6f3c156a174", "html_url": "https://github.com/rust-lang/rust/commit/a3420f70043c19165a4e44639ef4e6f3c156a174"}], "stats": {"total": 87, "additions": 63, "deletions": 24}, "files": [{"sha": "de2513244da61f3e4792662f0e27732ce38a9335", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c5d3167a23e7f1f6515a28ff15a6698b6712ae54/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d3167a23e7f1f6515a28ff15a6698b6712ae54/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=c5d3167a23e7f1f6515a28ff15a6698b6712ae54", "patch": "@@ -64,35 +64,42 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n }\n \n fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n-    if_chain! {\n-        // First check if last field is an array\n-        if let ItemKind::Struct(data, _) = &item.kind;\n-        if let VariantData::Struct(field_defs, _) = data;\n-        if let Some(last_field) = field_defs.last();\n-        if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind;\n+    // First check if last field is an array\n+    if let ItemKind::Struct(data, _) = &item.kind {\n+        if let VariantData::Struct(field_defs, _) = data {\n+            if let Some(last_field) = field_defs.last() {\n+                if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind {\n+                    // Then check if that that array zero-sized\n \n-        // Then check if that that array zero-sized\n+                    // This is pretty much copied from `enum_clike.rs` and I don't fully understand it, so let me know\n+                    // if there's a better way. I tried `Const::from_anon_const` but it didn't fold in the values\n+                    // on the `ZeroSizedWithConst` and `ZeroSizedWithConstFunction` tests.\n \n-        // This is pretty much copied from `enum_clike.rs` and I don't fully understand it, so let me know\n-        // if there's a better way. I tried `Const::from_anon_const` but it didn't fold in the values\n-        // on the `ZeroSizedWithConst` and `ZeroSizedWithConstFunction` tests.\n-\n-        // This line in particular seems convoluted.\n-        let length_did = cx.tcx.hir().body_owner_def_id(length.body).to_def_id();\n-        let length_ty = cx.tcx.type_of(length_did);\n-        let length = cx\n-            .tcx\n-            .const_eval_poly(length_did)\n-            .ok()\n-            .map(|val| Const::from_value(cx.tcx, val, length_ty))\n-            .and_then(miri_to_const);\n-        if let Some(Constant::Int(length)) = length;\n-        if length == 0;\n-        then {\n-            true\n+                    // This line in particular seems convoluted.\n+                    let length_did = cx.tcx.hir().body_owner_def_id(length.body).to_def_id();\n+                    let length_ty = cx.tcx.type_of(length_did);\n+                    let length = cx\n+                        .tcx\n+                        .const_eval_poly(length_did)\n+                        .ok()\n+                        .map(|val| Const::from_value(cx.tcx, val, length_ty))\n+                        .and_then(miri_to_const);\n+                    if let Some(Constant::Int(length)) = length {\n+                        length == 0\n+                    } else {\n+                        false\n+                    }\n+                } else {\n+                    false\n+                }\n+            } else {\n+                false\n+            }\n         } else {\n             false\n         }\n+    } else {\n+        false\n     }\n }\n "}, {"sha": "c6ee36e9685c943339b1260596d0e730d4d04bdf", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c5d3167a23e7f1f6515a28ff15a6698b6712ae54/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d3167a23e7f1f6515a28ff15a6698b6712ae54/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=c5d3167a23e7f1f6515a28ff15a6698b6712ae54", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::trailing_zero_sized_array_without_repr_c)]\n+#![feature(const_generics_defaults)]\n \n // Do lint:\n \n@@ -45,6 +46,10 @@ struct ZeroSizedWithConstFunction {\n     last: [usize; compute_zero()],\n }\n \n+struct ZeroSizedArrayWrapper([usize; 0]);\n+\n+struct TupleStruct(i32, [usize; 0]);\n+\n struct LotsOfFields {\n     f1: u32,\n     f2: u32,\n@@ -140,4 +145,31 @@ enum DontLintAnonymousStructsFromDesuraging {\n     C { x: u32, y: [u64; 0] },\n }\n \n+#[repr(C)]\n+struct TupleStructReprC(i32, [usize; 0]);\n+\n+type NamedTuple = (i32, [usize; 0]);\n+\n+#[rustfmt::skip] // [rustfmt#4995](https://github.com/rust-lang/rustfmt/issues/4995)\n+struct ConstParamZeroDefault<const N: usize = 0> {\n+    field: i32,\n+    last: [usize; N],\n+}\n+\n+struct ConstParamNoDefault<const N: usize> {\n+    field: i32,\n+    last: [usize; N],\n+}\n+\n+#[rustfmt::skip] \n+struct ConstParamNonZeroDefault<const N: usize = 1> {\n+    field: i32,\n+    last: [usize; N],\n+}\n+\n+type A = ConstParamZeroDefault;\n+type B = ConstParamZeroDefault<0>;\n+type C = ConstParamNoDefault<0>;\n+type D = ConstParamNonZeroDefault<0>;\n+\n fn main() {}"}]}