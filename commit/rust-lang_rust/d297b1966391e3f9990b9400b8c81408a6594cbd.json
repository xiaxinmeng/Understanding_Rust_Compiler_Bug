{"sha": "d297b1966391e3f9990b9400b8c81408a6594cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOTdiMTk2NjM5MWUzZjk5OTBiOTQwMGI4YzgxNDA4YTY1OTRjYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-30T05:12:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-30T05:12:48Z"}, "message": "Auto merge of #67721 - JohnTitor:rollup-o8zm4r9, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #64273 (Stabilize attribute macros on inline modules)\n - #67287 (typeck: note other end-point when checking range pats)\n - #67564 (docs: Iterator adapters have unspecified results after a panic)\n - #67622 (Some keyword documentation.)\n - #67657 (Clean up const-hack PRs now that const if / match exist.)\n - #67677 (resolve: Minor cleanup of duplicate macro reexports)\n - #67687 (Do not ICE on lifetime error involving closures)\n - #67698 (Move reachable_set and diagnostic_items to librustc_passes.)\n - #67701 (tidy: Enforce formatting rather than just check it if `--bless` is specified)\n - #67715 (Typo fix)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5d6fa0871381463825a66584ca5e18c5857eebbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d6fa0871381463825a66584ca5e18c5857eebbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d297b1966391e3f9990b9400b8c81408a6594cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d297b1966391e3f9990b9400b8c81408a6594cbd", "html_url": "https://github.com/rust-lang/rust/commit/d297b1966391e3f9990b9400b8c81408a6594cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d297b1966391e3f9990b9400b8c81408a6594cbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214548b8afd94924c17dea456c8077931009b944", "url": "https://api.github.com/repos/rust-lang/rust/commits/214548b8afd94924c17dea456c8077931009b944", "html_url": "https://github.com/rust-lang/rust/commit/214548b8afd94924c17dea456c8077931009b944"}, {"sha": "dcc30aced0415f42711723c77444842e019ae08e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc30aced0415f42711723c77444842e019ae08e", "html_url": "https://github.com/rust-lang/rust/commit/dcc30aced0415f42711723c77444842e019ae08e"}], "stats": {"total": 595, "additions": 333, "deletions": 262}, "files": [{"sha": "b5c8de057d017b6b174853ea62b399f23270dc68", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -736,7 +736,7 @@ impl Step for Tidy {\n \n         if builder.config.channel == \"dev\" || builder.config.channel == \"nightly\" {\n             builder.info(\"fmt check\");\n-            crate::format::format(&builder.build, true);\n+            crate::format::format(&builder.build, !builder.config.cmd.bless());\n         }\n     }\n "}, {"sha": "0d5af3986fbff2cef2c7dc095238ca25d7c2e83a", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -216,6 +216,11 @@\n //! Common iterator adapters include [`map`], [`take`], and [`filter`].\n //! For more, see their documentation.\n //!\n+//! If an iterator adapter panics, the iterator will be in an unspecified (but\n+//! memory safe) state.  This state is also not guaranteed to stay the same\n+//! across versions of Rust, so you should avoid relying on the exact values\n+//! returned by an iterator which panicked.\n+//!\n //! [`map`]: trait.Iterator.html#method.map\n //! [`take`]: trait.Iterator.html#method.take\n //! [`filter`]: trait.Iterator.html#method.filter"}, {"sha": "590f4e46c1d2fe2dc5e390904519c5ba50d40e14", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -71,6 +71,8 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n+#![feature(const_if_match)]\n+#![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n #![feature(const_ptr_offset_from)]"}, {"sha": "36064488eb24997e31e2beeb03a9f7fd46b1b20a", "filename": "src/libcore/mem/manually_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmanually_drop.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -121,7 +121,7 @@ impl<T: ?Sized> ManuallyDrop<T> {\n     /// This function runs the destructor of the contained value and thus the wrapped value\n     /// now represents uninitialized data. It is up to the user of this method to ensure the\n     /// uninitialized data is not actually used.\n-    /// In particular, this function can only be called called at most once\n+    /// In particular, this function can only be called at most once\n     /// for a given instance of `ManuallyDrop<T>`.\n     ///\n     /// [`ManuallyDrop::into_inner`]: #method.into_inner"}, {"sha": "14540394caba13d8437d0455e51538addb3ffbbe", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -1416,18 +1416,14 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+            #[allow_internal_unstable(const_if_match)]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n-                // sign is -1 (all ones) for negative numbers, 0 otherwise.\n-                let sign = self >> ($BITS - 1);\n-                // For positive self, sign == 0 so the expression is simply\n-                // (self ^ 0).wrapping_sub(0) == self == abs(self).\n-                //\n-                // For negative self, self ^ sign == self ^ all_ones.\n-                // But all_ones ^ self == all_ones - self == -1 - self.\n-                // So for negative numbers, (self ^ sign).wrapping_sub(sign) is\n-                // (-1 - self).wrapping_sub(-1) == -self == abs(self).\n-                (self ^ sign).wrapping_sub(sign)\n+                 if self.is_negative() {\n+                     self.wrapping_neg()\n+                 } else {\n+                     self\n+                 }\n             }\n         }\n \n@@ -1713,8 +1709,13 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+            #[allow_internal_unstable(const_if_match)]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n-                ((!self).wrapping_add(1), self == Self::min_value())\n+                if self == Self::min_value() {\n+                    (Self::min_value(), true)\n+                } else {\n+                    (-self, false)\n+                }\n             }\n         }\n \n@@ -2041,7 +2042,11 @@ $EndFeature, \"\n             #[rustc_const_unstable(feature = \"const_int_sign\", issue = \"53718\")]\n             #[inline]\n             pub const fn signum(self) -> Self {\n-                (self > 0) as Self - (self < 0) as Self\n+                match self {\n+                    n if n > 0 =>  1,\n+                    0          =>  0,\n+                    _          => -1,\n+                }\n             }\n         }\n "}, {"sha": "fc3c02e1f066df2573de4a3bdd8385b5cc4d9cff", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -288,10 +288,7 @@ impl<T: ?Sized> *const T {\n         T: Sized,\n     {\n         let pointee_size = mem::size_of::<T>();\n-        let ok = 0 < pointee_size && pointee_size <= isize::max_value() as usize;\n-        // assert that the pointee size is valid in a const eval compatible way\n-        // FIXME: do this with a real assert at some point\n-        [()][(!ok) as usize];\n+        assert!(0 < pointee_size && pointee_size <= isize::max_value() as usize);\n         intrinsics::ptr_offset_from(self, origin)\n     }\n "}, {"sha": "76588dfa5e25e041afde0d71cb5873be8ff0a8b9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -95,24 +95,7 @@ pub mod hir;\n pub mod ich;\n pub mod infer;\n pub mod lint;\n-\n-pub mod middle {\n-    pub mod cstore;\n-    pub mod dependency_format;\n-    pub mod diagnostic_items;\n-    pub mod exported_symbols;\n-    pub mod free_region;\n-    pub mod lang_items;\n-    pub mod lib_features;\n-    pub mod privacy;\n-    pub mod reachable;\n-    pub mod recursion_limit;\n-    pub mod region;\n-    pub mod resolve_lifetime;\n-    pub mod stability;\n-    pub mod weak_lang_items;\n-}\n-\n+pub mod middle;\n pub mod mir;\n pub use rustc_session as session;\n pub mod traits;"}, {"sha": "030bcf3bf42314d9660e8a10276e02ba9d9b44bd", "filename": "src/librustc/middle/mod.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmod.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -0,0 +1,35 @@\n+pub mod cstore;\n+pub mod dependency_format;\n+pub mod exported_symbols;\n+pub mod free_region;\n+pub mod lang_items;\n+pub mod lib_features {\n+    use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+    use syntax::symbol::Symbol;\n+\n+    #[derive(HashStable)]\n+    pub struct LibFeatures {\n+        // A map from feature to stabilisation version.\n+        pub stable: FxHashMap<Symbol, Symbol>,\n+        pub unstable: FxHashSet<Symbol>,\n+    }\n+\n+    impl LibFeatures {\n+        pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n+            let mut all_features: Vec<_> = self\n+                .stable\n+                .iter()\n+                .map(|(f, s)| (*f, Some(*s)))\n+                .chain(self.unstable.iter().map(|f| (*f, None)))\n+                .collect();\n+            all_features.sort_unstable_by_key(|f| f.0.as_str());\n+            all_features\n+        }\n+    }\n+}\n+pub mod privacy;\n+pub mod recursion_limit;\n+pub mod region;\n+pub mod resolve_lifetime;\n+pub mod stability;\n+pub mod weak_lang_items;"}, {"sha": "9b7ae0993357babedd1cf399465cf8c5a097711d", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -510,7 +510,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query reachable_set(_: CrateNum) -> ReachableSet {\n+        query reachable_set(_: CrateNum) -> Lrc<HirIdSet> {\n             desc { \"reachability\" }\n         }\n "}, {"sha": "b84b0e4f45dcb56a3cd7fc2123ab0dcdba0f5c89", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -2751,22 +2751,10 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n     };\n-    providers.get_lib_features = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        tcx.arena.alloc(middle::lib_features::collect(tcx))\n-    };\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.arena.alloc(middle::lang_items::collect(tcx))\n     };\n-    providers.diagnostic_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        middle::diagnostic_items::collect(tcx)\n-    };\n-    providers.all_diagnostic_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        middle::diagnostic_items::collect_all(tcx)\n-    };\n     providers.maybe_unused_trait_import = |tcx, id| tcx.maybe_unused_trait_imports.contains(&id);\n     providers.maybe_unused_extern_crates = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "f523cee49ec63ac71ab2b3507061758d3c32e3cc", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -10,7 +10,6 @@ use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lang_items::{LangItem, LanguageItems};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n-use crate::middle::reachable::ReachableSet;\n use crate::middle::region;\n use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLifetimes};\n use crate::middle::stability::{self, DeprecationEntry};\n@@ -37,7 +36,7 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::util::NeedsDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::{DefIdMap, DefIdSet};\n+use crate::util::nodemap::{DefIdMap, DefIdSet, HirIdSet};\n use rustc_data_structures::profiling::ProfileCategory::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;"}, {"sha": "5bdb310f9b54619e50823ce8fd30424e11de9266", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -65,7 +65,6 @@ fn reachable_non_generics_provider(\n \n     let mut reachable_non_generics: DefIdMap<_> = tcx\n         .reachable_set(LOCAL_CRATE)\n-        .0\n         .iter()\n         .filter_map(|&hir_id| {\n             // We want to ignore some FFI functions that are not exposed from\n@@ -313,7 +312,7 @@ fn upstream_monomorphizations_for_provider(\n \n fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n-        !tcx.reachable_set(LOCAL_CRATE).0.contains(&hir_id)\n+        !tcx.reachable_set(LOCAL_CRATE).contains(&hir_id)\n     } else {\n         bug!(\"is_unreachable_local_definition called with non-local DefId: {:?}\", def_id)\n     }"}, {"sha": "b4522f4c6653140087746b178797a6228c999913", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -10,7 +10,7 @@ use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::hir::lowering::lower_crate;\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n-use rustc::middle::{self, reachable, resolve_lifetime, stability};\n+use rustc::middle::{self, resolve_lifetime, stability};\n use rustc::session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n use rustc::session::config::{PpMode, PpSourceMode};\n use rustc::session::search_paths::PathKind;\n@@ -678,14 +678,12 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     plugin::build::provide(providers);\n     hir::provide(providers);\n     mir::provide(providers);\n-    reachable::provide(providers);\n     resolve_lifetime::provide(providers);\n     rustc_privacy::provide(providers);\n     typeck::provide(providers);\n     ty::provide(providers);\n     traits::provide(providers);\n     stability::provide(providers);\n-    reachable::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);"}, {"sha": "af6fcb6922a8b78878d85a8296888dc458e14caa", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -882,9 +882,27 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 err.span_label(\n                     drop_span,\n                     format!(\n-                        \"...but `{}` will be dropped here, when the function `{}` returns\",\n+                        \"...but `{}` will be dropped here, when the {} returns\",\n                         name,\n-                        self.infcx.tcx.hir().name(fn_hir_id),\n+                        self.infcx\n+                            .tcx\n+                            .hir()\n+                            .opt_name(fn_hir_id)\n+                            .map(|name| format!(\"function `{}`\", name))\n+                            .unwrap_or_else(|| {\n+                                match &self\n+                                    .infcx\n+                                    .tcx\n+                                    .typeck_tables_of(self.mir_def_id)\n+                                    .node_type(fn_hir_id)\n+                                    .kind\n+                                {\n+                                    ty::Closure(..) => \"enclosing closure\",\n+                                    ty::Generator(..) => \"enclosing generator\",\n+                                    kind => bug!(\"expected closure or generator, found {:?}\", kind),\n+                                }\n+                                .to_string()\n+                            })\n                     ),\n                 );\n "}, {"sha": "65138fad43bd8cf9b2cd99ea8445c00c6eef6d45", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "renamed", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -9,12 +9,13 @@\n //!\n //! * Compiler internal types like `Ty` and `TyCtxt`\n \n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n-use crate::ty::TyCtxt;\n-use crate::util::nodemap::FxHashMap;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n+use rustc::util::nodemap::FxHashMap;\n \n-use crate::hir;\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use syntax::ast;\n use syntax::symbol::{sym, Symbol};\n \n@@ -93,7 +94,7 @@ fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n+fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n     // Initialize the collector.\n     let mut collector = DiagnosticItemCollector::new(tcx);\n \n@@ -104,7 +105,7 @@ pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n }\n \n /// Traverse and collect all the diagnostic items in all crates.\n-pub fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n+fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n     // Initialize the collector.\n     let mut collector = FxHashMap::default();\n \n@@ -117,3 +118,14 @@ pub fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n \n     tcx.arena.alloc(collector)\n }\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    providers.diagnostic_items = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        collect(tcx)\n+    };\n+    providers.all_diagnostic_items = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        collect_all(tcx)\n+    };\n+}", "previous_filename": "src/librustc/middle/diagnostic_items.rs"}, {"sha": "da781f2bae528d2af479b96b8ceb89a533898d2a", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -22,17 +22,23 @@ use rustc::ty::query::Providers;\n pub mod ast_validation;\n mod check_const;\n pub mod dead;\n+mod diagnostic_items;\n pub mod entry;\n pub mod hir_stats;\n mod intrinsicck;\n pub mod layout_test;\n+mod lib_features;\n mod liveness;\n pub mod loops;\n+mod reachable;\n \n pub fn provide(providers: &mut Providers<'_>) {\n     check_const::provide(providers);\n+    diagnostic_items::provide(providers);\n     entry::provide(providers);\n+    lib_features::provide(providers);\n     loops::provide(providers);\n     liveness::provide(providers);\n     intrinsicck::provide(providers);\n+    reachable::provide(providers);\n }"}, {"sha": "0b0183f3cce04dd3dbbd28a52c5a4d7f02ccfb9a", "filename": "src/librustc_passes/lib_features.rs", "status": "renamed", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -4,38 +4,19 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use crate::ty::TyCtxt;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_macros::HashStable;\n+use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::middle::lib_features::LibFeatures;\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax::symbol::Symbol;\n use syntax_pos::{sym, Span};\n \n use rustc_error_codes::*;\n \n-#[derive(HashStable)]\n-pub struct LibFeatures {\n-    // A map from feature to stabilisation version.\n-    pub stable: FxHashMap<Symbol, Symbol>,\n-    pub unstable: FxHashSet<Symbol>,\n-}\n-\n-impl LibFeatures {\n-    fn new() -> LibFeatures {\n-        LibFeatures { stable: Default::default(), unstable: Default::default() }\n-    }\n-\n-    pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n-        let mut all_features: Vec<_> = self\n-            .stable\n-            .iter()\n-            .map(|(f, s)| (*f, Some(*s)))\n-            .chain(self.unstable.iter().map(|f| (*f, None)))\n-            .collect();\n-        all_features.sort_unstable_by_key(|f| f.0.as_str());\n-        all_features\n-    }\n+fn new_lib_features() -> LibFeatures {\n+    LibFeatures { stable: Default::default(), unstable: Default::default() }\n }\n \n pub struct LibFeatureCollector<'tcx> {\n@@ -45,7 +26,7 @@ pub struct LibFeatureCollector<'tcx> {\n \n impl LibFeatureCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> LibFeatureCollector<'tcx> {\n-        LibFeatureCollector { tcx, lib_features: LibFeatures::new() }\n+        LibFeatureCollector { tcx, lib_features: new_lib_features() }\n     }\n \n     fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n@@ -142,7 +123,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n+fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     let krate = tcx.hir().krate();\n     for attr in krate.non_exported_macro_attrs {\n@@ -151,3 +132,10 @@ pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     intravisit::walk_crate(&mut collector, krate);\n     collector.lib_features\n }\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    providers.get_lib_features = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        tcx.arena.alloc(collect(tcx))\n+    };\n+}", "previous_filename": "src/librustc/middle/lib_features.rs"}, {"sha": "5241d9ea43f13f4e59a098d03ac49dda7bbe8df3", "filename": "src/librustc_passes/reachable.rs", "status": "renamed", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -5,23 +5,22 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use crate::hir::def::{DefKind, Res};\n-use crate::hir::def_id::{CrateNum, DefId};\n-use crate::hir::Node;\n-use crate::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n-use crate::middle::privacy;\n-use crate::session::config;\n-use crate::ty::query::Providers;\n-use crate::ty::{self, TyCtxt};\n-use crate::util::nodemap::{FxHashSet, HirIdSet};\n+use rustc::hir::def::{DefKind, Res};\n+use rustc::hir::def_id::{CrateNum, DefId};\n+use rustc::hir::Node;\n+use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc::middle::privacy;\n+use rustc::session::config;\n+use rustc::ty::query::Providers;\n+use rustc::ty::{self, TyCtxt};\n+use rustc::util::nodemap::{FxHashSet, HirIdSet};\n use rustc_data_structures::sync::Lrc;\n \n-use crate::hir;\n-use crate::hir::def_id::LOCAL_CRATE;\n-use crate::hir::intravisit;\n-use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_macros::HashStable;\n+use rustc::hir;\n+use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::intravisit;\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_target::spec::abi::Abi;\n \n // Returns true if the given item must be inlined because it may be\n@@ -378,12 +377,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n     }\n }\n \n-// We introduce a new-type here, so we can have a specialized HashStable\n-// implementation for it.\n-#[derive(Clone, HashStable)]\n-pub struct ReachableSet(pub Lrc<HirIdSet>);\n-\n-fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n+fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Lrc<HirIdSet> {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n@@ -429,7 +423,7 @@ fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n     debug!(\"Inline reachability shows: {:?}\", reachable_context.reachable_symbols);\n \n     // Return the set of reachable symbols.\n-    ReachableSet(Lrc::new(reachable_context.reachable_symbols))\n+    Lrc::new(reachable_context.reachable_symbols)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {", "previous_filename": "src/librustc/middle/reachable.rs"}, {"sha": "afbfb647b3cacbdf720d5fe95834b26583fa5a85", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -528,31 +528,7 @@ impl<'a> Resolver<'a> {\n                         resolution.shadowed_glob = Some(glob_binding);\n                     }\n                     (false, false) => {\n-                        if let (&NameBindingKind::Res(_, true), &NameBindingKind::Res(_, true)) =\n-                            (&old_binding.kind, &binding.kind)\n-                        {\n-                            this.session\n-                                .struct_span_err(\n-                                    binding.span,\n-                                    &format!(\n-                                        \"a macro named `{}` has already been exported\",\n-                                        key.ident\n-                                    ),\n-                                )\n-                                .span_label(\n-                                    binding.span,\n-                                    format!(\"`{}` already exported\", key.ident),\n-                                )\n-                                .span_note(\n-                                    old_binding.span,\n-                                    \"previous macro export is now shadowed\",\n-                                )\n-                                .emit();\n-\n-                            resolution.binding = Some(binding);\n-                        } else {\n-                            return Err(old_binding);\n-                        }\n+                        return Err(old_binding);\n                     }\n                 }\n             } else {"}, {"sha": "2f53378303b584615b3d0f0ea8b85b7f79588ae9", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -353,21 +353,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_pat_range(\n         &self,\n         span: Span,\n-        begin: &'tcx hir::Expr<'tcx>,\n-        end: &'tcx hir::Expr<'tcx>,\n+        lhs: &'tcx hir::Expr<'tcx>,\n+        rhs: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n         discrim_span: Option<Span>,\n     ) -> Option<Ty<'tcx>> {\n-        let lhs_ty = self.check_expr(begin);\n-        let rhs_ty = self.check_expr(end);\n+        let lhs_ty = self.check_expr(lhs);\n+        let rhs_ty = self.check_expr(rhs);\n \n         // Check that both end-points are of numeric or char type.\n         let numeric_or_char = |ty: Ty<'_>| ty.is_numeric() || ty.is_char() || ty.references_error();\n         let lhs_fail = !numeric_or_char(lhs_ty);\n         let rhs_fail = !numeric_or_char(rhs_ty);\n \n         if lhs_fail || rhs_fail {\n-            self.emit_err_pat_range(span, begin.span, end.span, lhs_fail, rhs_fail, lhs_ty, rhs_ty);\n+            self.emit_err_pat_range(span, lhs.span, rhs.span, lhs_fail, rhs_fail, lhs_ty, rhs_ty);\n             return None;\n         }\n \n@@ -376,11 +376,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let common_type = self.resolve_vars_if_possible(&lhs_ty);\n \n         // Subtyping doesn't matter here, as the value is some kind of scalar.\n-        self.demand_eqtype_pat(span, expected, lhs_ty, discrim_span);\n-        self.demand_eqtype_pat(span, expected, rhs_ty, discrim_span);\n+        let demand_eqtype = |x_span, y_span, x_ty, y_ty| {\n+            self.demand_eqtype_pat_diag(x_span, expected, x_ty, discrim_span).map(|mut err| {\n+                self.endpoint_has_type(&mut err, y_span, y_ty);\n+                err.emit();\n+            });\n+        };\n+        demand_eqtype(lhs.span, rhs.span, lhs_ty, rhs_ty);\n+        demand_eqtype(rhs.span, lhs.span, rhs_ty, lhs_ty);\n+\n         Some(common_type)\n     }\n \n+    fn endpoint_has_type(&self, err: &mut DiagnosticBuilder<'_>, span: Span, ty: Ty<'_>) {\n+        if !ty.references_error() {\n+            err.span_label(span, &format!(\"this is of type `{}`\", ty));\n+        }\n+    }\n+\n     fn emit_err_pat_range(\n         &self,\n         span: Span,\n@@ -408,9 +421,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let msg = |ty| format!(\"this is of type `{}` but it should be `char` or numeric\", ty);\n         let mut one_side_err = |first_span, first_ty, second_span, second_ty: Ty<'_>| {\n             err.span_label(first_span, &msg(first_ty));\n-            if !second_ty.references_error() {\n-                err.span_label(second_span, &format!(\"this is of type `{}`\", second_ty));\n-            }\n+            self.endpoint_has_type(&mut err, second_span, second_ty);\n         };\n         if lhs_fail && rhs_fail {\n             err.span_label(begin_span, &msg(lhs_ty));"}, {"sha": "5c7ee9bded9dcbe84c155caeaab5e4a5ea9088de", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -1149,20 +1149,39 @@ mod where_keyword {}\n //\n /// Return a [`Future`] instead of blocking the current thread.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// Use `async` in front of `fn`, `closure`, or a `block` to turn the marked code into a `Future`.\n+/// As such the code will not be run immediately, but will only be evaluated when the returned\n+/// future is `.await`ed.\n+///\n+/// We have written an [async book] detailing async/await and trade-offs compared to using threads.\n+///\n+/// ## Editions\n+///\n+/// `async` is a keyword from the 2018 edition onwards.\n+///\n+/// It is available for use in stable rust from version 1.39 onwards.\n ///\n /// [`Future`]: ./future/trait.Future.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// [async book]: https://rust-lang.github.io/async-book/\n mod async_keyword {}\n \n #[doc(keyword = \"await\")]\n //\n /// Suspend execution until the result of a [`Future`] is ready.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `.await`ing a future will suspend the current function's execution until the `executor`\n+/// has run the future to completion.\n+///\n+/// Read the [async book] for details on how async/await and executors work.\n+///\n+/// ## Editions\n+///\n+/// `await` is a keyword from the 2018 edition onwards.\n+///\n+/// It is available for use in stable rust from version 1.39 onwards.\n ///\n /// [`Future`]: ./future/trait.Future.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// [async book]: https://rust-lang.github.io/async-book/\n mod await_keyword {}\n \n #[doc(keyword = \"dyn\")]"}, {"sha": "089dd471f3b504af691522dd71575c109b10ee98", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -717,13 +717,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn gate_proc_macro_attr_item(&self, span: Span, item: &Annotatable) {\n         let kind = match item {\n-            Annotatable::Item(item) => match &item.kind {\n-                ItemKind::Mod(m) if m.inline => \"modules\",\n-                _ => return,\n-            },\n-            Annotatable::TraitItem(_) | Annotatable::ImplItem(_) | Annotatable::ForeignItem(_) => {\n-                return;\n-            }\n+            Annotatable::Item(_)\n+            | Annotatable::TraitItem(_)\n+            | Annotatable::ImplItem(_)\n+            | Annotatable::ForeignItem(_) => return,\n             Annotatable::Stmt(_) => \"statements\",\n             Annotatable::Expr(_) => \"expressions\",\n             Annotatable::Arm(..)"}, {"sha": "46805d6e13b7c6bd981b1ecc6f2f8093663a7925", "filename": "src/test/ui/error-codes/E0308-4.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -1,10 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/E0308-4.rs:4:9\n+  --> $DIR/E0308-4.rs:4:15\n    |\n LL |     match x {\n    |           - this match expression has type `u8`\n LL |         0u8..=3i8 => (),\n-   |         ^^^^^^^^^ expected `u8`, found `i8`\n+   |         ---   ^^^ expected `u8`, found `i8`\n+   |         |\n+   |         this is of type `u8`\n \n error: aborting due to previous error\n "}, {"sha": "04538cd74b1954877e5246503768f881bc4408ce", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [_, 99.., _] => {},\n-   |             ^^^^ expected struct `std::ops::Range`, found integer\n+   |             ^^ expected struct `std::ops::Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "c918d0a385c752f1b77eb727f4976ca704b33d55", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [_, 99..] => {},\n-   |             ^^^^ expected struct `std::ops::Range`, found integer\n+   |             ^^ expected struct `std::ops::Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "1557f592b2a9be20b658b57916231d840c0cc6a6", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -6,6 +6,7 @@ fn main() {\n         //~^ ERROR `..X` range patterns are not supported\n         //~| ERROR mismatched types\n         //~| ERROR mismatched types\n+        //~| ERROR mismatched types\n         _ => {},\n     }\n }"}, {"sha": "e6ee3817b3558a3d78066ebc90b70cdb8260245f", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -5,12 +5,12 @@ LL |         [..9, 99..100, _] => {},\n    |          ^^^ help: try using the minimum value for the type: `MIN..9`\n \n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:10\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:12\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [..9, 99..100, _] => {},\n-   |          ^^^ expected struct `std::ops::Range`, found integer\n+   |            ^ expected struct `std::ops::Range`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -21,11 +21,26 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [..9, 99..100, _] => {},\n-   |               ^^^^^^^ expected struct `std::ops::Range`, found integer\n+   |               ^^  --- this is of type `{integer}`\n+   |               |\n+   |               expected struct `std::ops::Range`, found integer\n+   |\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:19\n+   |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n+LL |         [..9, 99..100, _] => {},\n+   |               --  ^^^ expected struct `std::ops::Range`, found integer\n+   |               |\n+   |               this is of type `{integer}`\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "9a9a501cae157ddb52fa2fa75f2ed26f7b8cd2bf", "filename": "src/test/ui/issues/issue-38715.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -2,6 +2,6 @@\n macro_rules! foo { ($i:ident) => {} }\n \n #[macro_export]\n-macro_rules! foo { () => {} } //~ ERROR a macro named `foo` has already been exported\n+macro_rules! foo { () => {} } //~ ERROR the name `foo` is defined multiple times\n \n fn main() {}"}, {"sha": "c87d9f7360b98b4032919c473eff2217a8020cb0", "filename": "src/test/ui/issues/issue-38715.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -1,14 +1,14 @@\n-error: a macro named `foo` has already been exported\n+error[E0428]: the name `foo` is defined multiple times\n   --> $DIR/issue-38715.rs:5:1\n    |\n+LL | macro_rules! foo { ($i:ident) => {} }\n+   | ---------------- previous definition of the macro `foo` here\n+...\n LL | macro_rules! foo { () => {} }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `foo` already exported\n-   |\n-note: previous macro export is now shadowed\n-  --> $DIR/issue-38715.rs:2:1\n+   | ^^^^^^^^^^^^^^^^ `foo` redefined here\n    |\n-LL | macro_rules! foo { ($i:ident) => {} }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `foo` must be defined only once in the macro namespace of this module\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0428`."}, {"sha": "19d7f0190479e73f0c260b9b061a3f444b375a9d", "filename": "src/test/ui/lifetimes/unnamed-closure-doesnt-life-long-enough-issue-67634.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    [0].iter().flat_map(|a| [0].iter().map(|_| &a)); //~ ERROR `a` does not live long enough\n+}"}, {"sha": "cb0b481e748769859adff99e15c93408c8089af0", "filename": "src/test/ui/lifetimes/unnamed-closure-doesnt-life-long-enough-issue-67634.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Funnamed-closure-doesnt-life-long-enough-issue-67634.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/unnamed-closure-doesnt-life-long-enough-issue-67634.rs:2:49\n+   |\n+LL |     [0].iter().flat_map(|a| [0].iter().map(|_| &a));\n+   |                                             -   ^- ...but `a` will be dropped here, when the enclosing closure returns\n+   |                                             |   |\n+   |                                             |   `a` would have to be valid for `'_`...\n+   |                                             has type `&i32`\n+   |\n+   = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#dangling-references>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "64105dc73d3f57c43535640ee6dbafdc0c9faaaf", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -28,7 +28,9 @@ error[E0308]: mismatched types\n   --> $DIR/match-range-fail.rs:18:9\n    |\n LL |         'c' ..= 100 => { }\n-   |         ^^^^^^^^^^^ expected integer, found `char`\n+   |         ^^^     --- this is of type `{integer}`\n+   |         |\n+   |         expected integer, found `char`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5b0253cd2738a66cc1e24f4151b925c72c7be325", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL |     match (0, 1) {\n    |           ------ this match expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n-   |          ^^^^^^ expected tuple, found `u8`\n+   |          ^^^ expected tuple, found `u8`\n    |\n    = note: expected tuple `({integer}, {integer})`\n                found type `u8`"}, {"sha": "50a44192707f0f88ceac33c6aa6e0629f3ec3c84", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -417,13 +417,17 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:21:12\n    |\n LL |     if let .0..Y = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |            ^^  - this is of type `u8`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:23:12\n+  --> $DIR/recover-range-pats.rs:23:16\n    |\n LL |     if let X.. .0 = 0 {}\n-   |            ^^^^^^ expected integer, found floating-point number\n+   |            -   ^^ expected integer, found floating-point number\n+   |            |\n+   |            this is of type `u8`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:32:12\n@@ -445,13 +449,17 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:34:12\n    |\n LL |     if let .0..=Y = 0 {}\n-   |            ^^^^^^ expected integer, found floating-point number\n+   |            ^^   - this is of type `u8`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:36:12\n+  --> $DIR/recover-range-pats.rs:36:16\n    |\n LL |     if let X..=.0 = 0 {}\n-   |            ^^^^^^ expected integer, found floating-point number\n+   |            -   ^^ expected integer, found floating-point number\n+   |            |\n+   |            this is of type `u8`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:45:12\n@@ -473,13 +481,17 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:49:12\n    |\n LL |     if let .0...Y = 0 {}\n-   |            ^^^^^^ expected integer, found floating-point number\n+   |            ^^   - this is of type `u8`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:52:12\n+  --> $DIR/recover-range-pats.rs:52:17\n    |\n LL |     if let X... .0 = 0 {}\n-   |            ^^^^^^^ expected integer, found floating-point number\n+   |            -    ^^ expected integer, found floating-point number\n+   |            |\n+   |            this is of type `u8`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:60:12\n@@ -491,7 +503,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:62:12\n    |\n LL |     if let .0.. = 0 {}\n-   |            ^^^^ expected integer, found floating-point number\n+   |            ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:70:12\n@@ -503,7 +515,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:72:12\n    |\n LL |     if let .0..= = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |            ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:82:12\n@@ -515,7 +527,7 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0... = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |            ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:94:14\n@@ -524,10 +536,10 @@ LL |     if let ..true = 0 {}\n    |              ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:96:12\n+  --> $DIR/recover-range-pats.rs:96:15\n    |\n LL |     if let .. .0 = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |               ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:104:15\n@@ -536,10 +548,10 @@ LL |     if let ..=true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:106:12\n+  --> $DIR/recover-range-pats.rs:106:15\n    |\n LL |     if let ..=.0 = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |               ^^ expected integer, found floating-point number\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:116:15\n@@ -548,10 +560,10 @@ LL |     if let ...true = 0 {}\n    |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/recover-range-pats.rs:119:12\n+  --> $DIR/recover-range-pats.rs:119:15\n    |\n LL |     if let ....3 = 0 {}\n-   |            ^^^^^ expected integer, found floating-point number\n+   |               ^^ expected integer, found floating-point number\n \n error: aborting due to 85 previous errors\n "}, {"sha": "c506e903e7f897b7f2ebac04210e0c15615b0a59", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -3,7 +3,7 @@\n #[macro_use]\n extern crate test_macros;\n \n-#[identity_attr] //~ ERROR custom attributes cannot be applied to modules\n+#[identity_attr]\n mod m {\n     pub struct X;\n \n@@ -19,11 +19,28 @@ mod n {}\n #[empty_attr]\n mod module; //~ ERROR non-inline modules in proc macro input are unstable\n \n-#[empty_attr] //~ ERROR custom attributes cannot be applied to modules\n+#[empty_attr]\n mod outer {\n     mod inner; //~ ERROR non-inline modules in proc macro input are unstable\n \n     mod inner_inline {} // OK\n }\n \n+#[derive(Empty)]\n+struct S {\n+    field: [u8; {\n+        #[path = \"outer/inner.rs\"]\n+        mod inner; //~ ERROR non-inline modules in proc macro input are unstable\n+        mod inner_inline {} // OK\n+        0\n+    }]\n+}\n+\n+#[identity_attr]\n+fn f() {\n+    #[path = \"outer/inner.rs\"]\n+    mod inner; //~ ERROR non-inline modules in proc macro input are unstable\n+    mod inner_inline {} // OK\n+}\n+\n fn main() {}"}, {"sha": "74b9932a916c9c65a7bff3a8717ab19010ac9571", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -1,12 +1,3 @@\n-error[E0658]: custom attributes cannot be applied to modules\n-  --> $DIR/attributes-on-modules-fail.rs:6:1\n-   |\n-LL | #[identity_attr]\n-   | ^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n error: `derive` may only be applied to structs, enums and unions\n   --> $DIR/attributes-on-modules-fail.rs:16:1\n    |\n@@ -31,11 +22,20 @@ LL |     mod inner;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to modules\n-  --> $DIR/attributes-on-modules-fail.rs:22:1\n+error[E0658]: non-inline modules in proc macro input are unstable\n+  --> $DIR/attributes-on-modules-fail.rs:33:9\n+   |\n+LL |         mod inner;\n+   |         ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n+\n+error[E0658]: non-inline modules in proc macro input are unstable\n+  --> $DIR/attributes-on-modules-fail.rs:42:5\n    |\n-LL | #[empty_attr]\n-   | ^^^^^^^^^^^^^\n+LL |     mod inner;\n+   |     ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable"}, {"sha": "6c73b0bf19c7f845391a47e2b9d6ab29619e0cda", "filename": "src/test/ui/proc-macro/attributes-on-modules.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -1,13 +1,19 @@\n+// check-pass\n // aux-build:test-macros.rs\n \n #[macro_use]\n extern crate test_macros;\n \n-#[identity_attr] //~ ERROR custom attributes cannot be applied to modules\n+#[identity_attr]\n mod m {\n     pub struct S;\n }\n \n+#[identity_attr]\n+fn f() {\n+    mod m {}\n+}\n+\n fn main() {\n     let s = m::S;\n }"}, {"sha": "df75f0bf4b149d10b0330c24154fbd74271a48e5", "filename": "src/test/ui/proc-macro/attributes-on-modules.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/214548b8afd94924c17dea456c8077931009b944/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214548b8afd94924c17dea456c8077931009b944/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.stderr?ref=214548b8afd94924c17dea456c8077931009b944", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: custom attributes cannot be applied to modules\n-  --> $DIR/attributes-on-modules.rs:6:1\n-   |\n-LL | #[identity_attr]\n-   | ^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "5df6ac422ac4b11264be2a7513d7b971e02c708d", "filename": "src/test/ui/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -10,12 +10,8 @@ fn _test_inner() {\n     #![empty_attr] //~ ERROR: non-builtin inner attributes are unstable\n }\n \n-#[empty_attr] //~ ERROR: custom attributes cannot be applied to modules\n-mod _test2 {}\n-\n mod _test2_inner {\n-    #![empty_attr] //~ ERROR: custom attributes cannot be applied to modules\n-          //~| ERROR: non-builtin inner attributes are unstable\n+    #![empty_attr] //~ ERROR: non-builtin inner attributes are unstable\n }\n \n #[empty_attr = \"y\"] //~ ERROR: key-value macro attributes are not supported"}, {"sha": "fff96572e340f678987e2c5c4757c4f850b7dd2c", "filename": "src/test/ui/proc-macro/proc-macro-gates.stderr", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d297b1966391e3f9990b9400b8c81408a6594cbd/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr?ref=d297b1966391e3f9990b9400b8c81408a6594cbd", "patch": "@@ -8,40 +8,22 @@ LL |     #![empty_attr]\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n \n error[E0658]: non-builtin inner attributes are unstable\n-  --> $DIR/proc-macro-gates.rs:17:5\n+  --> $DIR/proc-macro-gates.rs:14:5\n    |\n LL |     #![empty_attr]\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54726\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n \n-error[E0658]: custom attributes cannot be applied to modules\n-  --> $DIR/proc-macro-gates.rs:13:1\n-   |\n-LL | #[empty_attr]\n-   | ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n-error[E0658]: custom attributes cannot be applied to modules\n-  --> $DIR/proc-macro-gates.rs:17:5\n-   |\n-LL |     #![empty_attr]\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n-   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n-\n error: key-value macro attributes are not supported\n-  --> $DIR/proc-macro-gates.rs:21:1\n+  --> $DIR/proc-macro-gates.rs:17:1\n    |\n LL | #[empty_attr = \"y\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n error[E0658]: custom attributes cannot be applied to statements\n-  --> $DIR/proc-macro-gates.rs:30:5\n+  --> $DIR/proc-macro-gates.rs:26:5\n    |\n LL |     #[empty_attr]\n    |     ^^^^^^^^^^^^^\n@@ -50,7 +32,7 @@ LL |     #[empty_attr]\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to statements\n-  --> $DIR/proc-macro-gates.rs:34:5\n+  --> $DIR/proc-macro-gates.rs:30:5\n    |\n LL |     #[empty_attr]\n    |     ^^^^^^^^^^^^^\n@@ -59,7 +41,7 @@ LL |     #[empty_attr]\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to statements\n-  --> $DIR/proc-macro-gates.rs:38:5\n+  --> $DIR/proc-macro-gates.rs:34:5\n    |\n LL |     #[empty_attr]\n    |     ^^^^^^^^^^^^^\n@@ -68,7 +50,7 @@ LL |     #[empty_attr]\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n-  --> $DIR/proc-macro-gates.rs:42:14\n+  --> $DIR/proc-macro-gates.rs:38:14\n    |\n LL |     let _x = #[identity_attr] 2;\n    |              ^^^^^^^^^^^^^^^^\n@@ -77,7 +59,7 @@ LL |     let _x = #[identity_attr] 2;\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n-  --> $DIR/proc-macro-gates.rs:45:15\n+  --> $DIR/proc-macro-gates.rs:41:15\n    |\n LL |     let _x = [#[identity_attr] 2];\n    |               ^^^^^^^^^^^^^^^^\n@@ -86,7 +68,7 @@ LL |     let _x = [#[identity_attr] 2];\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: custom attributes cannot be applied to expressions\n-  --> $DIR/proc-macro-gates.rs:48:14\n+  --> $DIR/proc-macro-gates.rs:44:14\n    |\n LL |     let _x = #[identity_attr] println!();\n    |              ^^^^^^^^^^^^^^^^\n@@ -95,7 +77,7 @@ LL |     let _x = #[identity_attr] println!();\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to patterns\n-  --> $DIR/proc-macro-gates.rs:53:12\n+  --> $DIR/proc-macro-gates.rs:49:12\n    |\n LL |     if let identity!(Some(_x)) = Some(3) {}\n    |            ^^^^^^^^^^^^^^^^^^^\n@@ -104,7 +86,7 @@ LL |     if let identity!(Some(_x)) = Some(3) {}\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to statements\n-  --> $DIR/proc-macro-gates.rs:56:5\n+  --> $DIR/proc-macro-gates.rs:52:5\n    |\n LL |     empty!(struct S;);\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -113,7 +95,7 @@ LL |     empty!(struct S;);\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to statements\n-  --> $DIR/proc-macro-gates.rs:57:5\n+  --> $DIR/proc-macro-gates.rs:53:5\n    |\n LL |     empty!(let _x = 3;);\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -122,7 +104,7 @@ LL |     empty!(let _x = 3;);\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to expressions\n-  --> $DIR/proc-macro-gates.rs:59:14\n+  --> $DIR/proc-macro-gates.rs:55:14\n    |\n LL |     let _x = identity!(3);\n    |              ^^^^^^^^^^^^\n@@ -131,14 +113,14 @@ LL |     let _x = identity!(3);\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n error[E0658]: procedural macros cannot be expanded to expressions\n-  --> $DIR/proc-macro-gates.rs:60:15\n+  --> $DIR/proc-macro-gates.rs:56:15\n    |\n LL |     let _x = [empty!(3)];\n    |               ^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n    = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}