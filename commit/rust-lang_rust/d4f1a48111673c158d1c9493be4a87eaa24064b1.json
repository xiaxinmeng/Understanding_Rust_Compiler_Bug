{"sha": "d4f1a48111673c158d1c9493be4a87eaa24064b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZjFhNDgxMTE2NzNjMTU4ZDFjOTQ5M2JlNGE4N2VhYTI0MDY0YjE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-19T00:58:45Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-19T01:36:04Z"}, "message": "Support 0 flag in #fmt", "tree": {"sha": "08dddcf2a24b2b1a9b2dd4d4d61eccc33b4b0df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08dddcf2a24b2b1a9b2dd4d4d61eccc33b4b0df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4f1a48111673c158d1c9493be4a87eaa24064b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f1a48111673c158d1c9493be4a87eaa24064b1", "html_url": "https://github.com/rust-lang/rust/commit/d4f1a48111673c158d1c9493be4a87eaa24064b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4f1a48111673c158d1c9493be4a87eaa24064b1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3", "html_url": "https://github.com/rust-lang/rust/commit/4763cd39ca87aa36ae8d9a69f9a2c345b69f98e3"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "cfb27dcc3f607eeb16e10821a332b36f86092aa5", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4f1a48111673c158d1c9493be4a87eaa24064b1/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4f1a48111673c158d1c9493be4a87eaa24064b1/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=d4f1a48111673c158d1c9493be4a87eaa24064b1", "patch": "@@ -171,20 +171,25 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n         fn make_flags(common.span sp, vec[flag] flags) -> @ast.expr {\n             let vec[@ast.expr] flagexprs = vec();\n             for (flag f in flags) {\n+                auto fstr;\n                 alt (f) {\n                     case (flag_left_justify) {\n-                        auto fstr = \"flag_left_justify\";\n-                        flagexprs += vec(make_rt_path_expr(sp, fstr));\n+                        fstr = \"flag_left_justify\";\n                     }\n-                    case (flag_sign_always) {\n-                        auto fstr = \"flag_sign_always\";\n-                        flagexprs += vec(make_rt_path_expr(sp, fstr));\n+                    case (flag_left_zero_pad) {\n+                        fstr = \"flag_left_zero_pad\";\n                     }\n                     case (flag_space_for_sign) {\n-                        auto fstr = \"flag_space_for_sign\";\n-                        flagexprs += vec(make_rt_path_expr(sp, fstr));\n+                        fstr = \"flag_space_for_sign\";\n+                    }\n+                    case (flag_sign_always) {\n+                        fstr = \"flag_sign_always\";\n+                    }\n+                    case (flag_alternate) {\n+                        fstr = \"flag_alternate\";\n                     }\n                 }\n+                flagexprs += vec(make_rt_path_expr(sp, fstr));\n             }\n \n             // FIXME: 0-length vectors can't have their type inferred\n@@ -319,6 +324,8 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                         fail;\n                     }\n                 }\n+                case (flag_left_zero_pad) {\n+                }\n                 case (_) {\n                     log unsupported;\n                     fail;"}, {"sha": "ec778f6dd960fe3018092eacc7f5b4a5da46aa82", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d4f1a48111673c158d1c9493be4a87eaa24064b1/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4f1a48111673c158d1c9493be4a87eaa24064b1/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=d4f1a48111673c158d1c9493be4a87eaa24064b1", "patch": "@@ -306,8 +306,10 @@ mod RT {\n \n     tag flag {\n         flag_left_justify;\n+        flag_left_zero_pad;\n         flag_space_for_sign;\n         flag_sign_always;\n+        flag_alternate;\n         // FIXME: This is a hack to avoid creating 0-length vec exprs,\n         // which have some difficulty typechecking currently. See\n         // comments in front.extfmt.make_flags\n@@ -344,7 +346,7 @@ mod RT {\n                 s = \" \" + s;\n             }\n         }\n-        ret pad(cv, s);\n+        ret pad(cv, s, pad_signed);\n     }\n \n     fn conv_uint(&conv cv, uint u) -> str {\n@@ -364,7 +366,7 @@ mod RT {\n                 res = uint_to_str_prec(u, 2u, prec);\n             }\n         }\n-        ret pad(cv, res);\n+        ret pad(cv, res, pad_unsigned);\n     }\n \n     fn conv_bool(&conv cv, bool b) -> str {\n@@ -396,7 +398,7 @@ mod RT {\n                 }\n             }\n         }\n-        ret pad(cv, unpadded);\n+        ret pad(cv, unpadded, pad_nozero);\n     }\n \n     // Convert an int to string with minimum number of digits. If precision is\n@@ -449,7 +451,13 @@ mod RT {\n         ret _str.unsafe_from_bytes(svec);\n     }\n \n-    fn pad(&conv cv, str s) -> str {\n+    tag pad_type {\n+        pad_signed;\n+        pad_unsigned;\n+        pad_nozero;\n+    }\n+\n+    fn pad(&conv cv, str s, pad_type pt) -> str {\n         alt (cv.width) {\n             case (count_implied) {\n                 ret s;\n@@ -459,11 +467,47 @@ mod RT {\n                 auto uwidth = width as uint;\n                 auto strlen = _str.char_len(s);\n                 if (strlen < uwidth) {\n+                    auto zero_padding = false;\n+                    auto signed = false;\n+                    auto padchar = ' ';\n+                    alt (pt) {\n+                        case (pad_nozero) {\n+                            // fallthrough\n+                        }\n+                        case (pad_signed) {\n+                            signed = true;\n+                            if (have_flag(cv.flags, flag_left_zero_pad)) {\n+                                padchar = '0';\n+                                zero_padding = true;\n+                            }\n+                        }\n+                        case (pad_unsigned) {\n+                            if (have_flag(cv.flags, flag_left_zero_pad)) {\n+                                padchar = '0';\n+                                zero_padding = true;\n+                            }\n+                        }\n+                    }\n+\n                     auto diff = uwidth - strlen;\n-                    auto padstr = str_init_elt(' ', diff);\n+                    auto padstr = str_init_elt(padchar, diff);\n                     if (have_flag(cv.flags, flag_left_justify)) {\n                         ret s + padstr;\n                     } else {\n+                        // This is completely heinous. If we have a signed\n+                        // value then potentially rip apart the intermediate\n+                        // result and insert some zeros. It may make sense\n+                        // to convert zero padding to a precision instead.\n+                        if (signed\n+                            && zero_padding\n+                            && _str.byte_len(s) > 0u\n+                            && s.(0) == '-' as u8) {\n+\n+                            auto bytelen = _str.byte_len(s);\n+                            auto numpart = _str.substr(s, 1u, bytelen - 1u);\n+                            ret \"-\" + padstr + numpart;\n+                        }\n+\n                         ret padstr + s;\n                     }\n                 } else {"}, {"sha": "46d5036ad486c173d4788d9cda6fa2eaab6abd7e", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4f1a48111673c158d1c9493be4a87eaa24064b1/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4f1a48111673c158d1c9493be4a87eaa24064b1/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=d4f1a48111673c158d1c9493be4a87eaa24064b1", "patch": "@@ -126,4 +126,21 @@ fn main() {\n   // Plus overrides space\n   test(#fmt(\"% +d\", 0), \"+0\");\n   test(#fmt(\"%+ d\", 0), \"+0\");\n+\n+  // 0-padding\n+  test(#fmt(\"%05d\", 0), \"00000\");\n+  test(#fmt(\"%05d\", 1), \"00001\");\n+  test(#fmt(\"%05d\", -1), \"-0001\");\n+  test(#fmt(\"%05u\", 1u), \"00001\");\n+  test(#fmt(\"%05x\", 127u), \"0007f\");\n+  test(#fmt(\"%05X\", 127u), \"0007F\");\n+  test(#fmt(\"%05t\", 3u), \"00011\");\n+  // 0-padding a string is undefined but glibc does this:\n+  test(#fmt(\"%05s\", \"test\"), \" test\");\n+  test(#fmt(\"%05b\", true), \" true\");\n+\n+  // TODO: Left-justify overrides 0-padding\n+  // TODO: Precision overrides 0-padding\n+  // TODO: Padding and +\n+  // TODO: Padding and ' '\n }"}]}