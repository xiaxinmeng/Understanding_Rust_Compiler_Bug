{"sha": "36b2685977bdd731a0ef28e12bf8ef0334507d9e", "node_id": "C_kwDOAAsO6NoAKDM2YjI2ODU5NzdiZGQ3MzFhMGVmMjhlMTJiZjhlZjAzMzQ1MDdkOWU", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-12T21:00:52Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-12T21:04:08Z"}, "message": "refactor `default_numeric_fallback`\n\nWe only need to store if the literal binding has an explicit type bound or not", "tree": {"sha": "c653be737bd1cb7f14a3b299f49cef053cef2490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c653be737bd1cb7f14a3b299f49cef053cef2490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b2685977bdd731a0ef28e12bf8ef0334507d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b2685977bdd731a0ef28e12bf8ef0334507d9e", "html_url": "https://github.com/rust-lang/rust/commit/36b2685977bdd731a0ef28e12bf8ef0334507d9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b2685977bdd731a0ef28e12bf8ef0334507d9e/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e51e9308d58be45bffaf05c66af71681aaafd431", "url": "https://api.github.com/repos/rust-lang/rust/commits/e51e9308d58be45bffaf05c66af71681aaafd431", "html_url": "https://github.com/rust-lang/rust/commit/e51e9308d58be45bffaf05c66af71681aaafd431"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "199f8e10e54973746d1df3325103a59329b1a4f5", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/36b2685977bdd731a0ef28e12bf8ef0334507d9e/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b2685977bdd731a0ef28e12bf8ef0334507d9e/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=36b2685977bdd731a0ef28e12bf8ef0334507d9e", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for DefaultNumericFallback {\n \n struct NumericFallbackVisitor<'a, 'tcx> {\n     /// Stack manages type bound of exprs. The top element holds current expr type.\n-    ty_bounds: Vec<TyBound<'tcx>>,\n+    ty_bounds: Vec<ExplicitTyBound>,\n \n     cx: &'a LateContext<'tcx>,\n }\n@@ -76,9 +76,9 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'tcx>, is_parent_const: bool) -> Self {\n         Self {\n             ty_bounds: vec![if is_parent_const {\n-                TyBound::Any\n+                ExplicitTyBound(true)\n             } else {\n-                TyBound::Nothing\n+                ExplicitTyBound(false)\n             }],\n             cx,\n         }\n@@ -88,10 +88,10 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n     fn check_lit(&self, lit: &Lit, lit_ty: Ty<'tcx>, emit_hir_id: HirId) {\n         if_chain! {\n                 if !in_external_macro(self.cx.sess(), lit.span);\n-                if let Some(ty_bound) = self.ty_bounds.last();\n+                if let Some(explicit_ty_bounds) = self.ty_bounds.last();\n                 if matches!(lit.node,\n                             LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed));\n-                if !ty_bound.is_numeric();\n+                if !explicit_ty_bounds.0;\n                 then {\n                     let (suffix, is_float) = match lit_ty.kind() {\n                         ty::Int(IntTy::I32) => (\"i32\", false),\n@@ -132,7 +132,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                 if let Some(fn_sig) = fn_sig_opt(self.cx, func.hir_id) {\n                     for (expr, bound) in iter::zip(*args, fn_sig.skip_binder().inputs()) {\n                         // Push found arg type, then visit arg.\n-                        self.ty_bounds.push(TyBound::Ty(*bound));\n+                        self.ty_bounds.push((*bound).into());\n                         self.visit_expr(expr);\n                         self.ty_bounds.pop();\n                     }\n@@ -144,7 +144,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                 if let Some(def_id) = self.cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n                     let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n                     for (expr, bound) in iter::zip(std::iter::once(*receiver).chain(args.iter()), fn_sig.inputs()) {\n-                        self.ty_bounds.push(TyBound::Ty(*bound));\n+                        self.ty_bounds.push((*bound).into());\n                         self.visit_expr(expr);\n                         self.ty_bounds.pop();\n                     }\n@@ -178,7 +178,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n                         // Visit base with no bound.\n                         if let Some(base) = base {\n-                            self.ty_bounds.push(TyBound::Nothing);\n+                            self.ty_bounds.push(ExplicitTyBound(false));\n                             self.visit_expr(base);\n                             self.ty_bounds.pop();\n                         }\n@@ -201,9 +201,10 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n-            StmtKind::Local(local) if local.ty.is_some() => self.ty_bounds.push(TyBound::Any),\n+            // we cannot check the exact type since it's a hir::Ty which does not implement `is_numeric`\n+            StmtKind::Local(local) => self.ty_bounds.push(ExplicitTyBound(local.ty.is_some())),\n \n-            _ => self.ty_bounds.push(TyBound::Nothing),\n+            _ => self.ty_bounds.push(ExplicitTyBound(false)),\n         }\n \n         walk_stmt(self, stmt);\n@@ -221,28 +222,18 @@ fn fn_sig_opt<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<PolyFnSig<'\n     }\n }\n \n+/// Wrapper around a `bool` to make the meaning of the value clearer\n #[derive(Debug, Clone, Copy)]\n-enum TyBound<'tcx> {\n-    Any,\n-    Ty(Ty<'tcx>),\n-    Nothing,\n-}\n+struct ExplicitTyBound(pub bool);\n \n-impl<'tcx> TyBound<'tcx> {\n-    fn is_numeric(self) -> bool {\n-        match self {\n-            TyBound::Any => true,\n-            TyBound::Ty(t) => t.is_numeric(),\n-            TyBound::Nothing => false,\n-        }\n+impl<'tcx> From<Ty<'tcx>> for ExplicitTyBound {\n+    fn from(v: Ty<'tcx>) -> Self {\n+        Self(v.is_numeric())\n     }\n }\n \n-impl<'tcx> From<Option<Ty<'tcx>>> for TyBound<'tcx> {\n+impl<'tcx> From<Option<Ty<'tcx>>> for ExplicitTyBound {\n     fn from(v: Option<Ty<'tcx>>) -> Self {\n-        match v {\n-            Some(t) => TyBound::Ty(t),\n-            None => TyBound::Nothing,\n-        }\n+        Self(v.map_or(false, Ty::is_numeric))\n     }\n }"}]}