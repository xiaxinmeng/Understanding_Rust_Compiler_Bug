{"sha": "7877a42308a05597840f212d10d2abb27086669f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NzdhNDIzMDhhMDU1OTc4NDBmMjEyZDEwZDJhYmIyNzA4NjY2OWY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-19T14:06:56Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-28T19:24:36Z"}, "message": "Fix some spelling mistakes here and there", "tree": {"sha": "dea29632fca1b1fb8668224cfecf3c1783f47574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dea29632fca1b1fb8668224cfecf3c1783f47574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7877a42308a05597840f212d10d2abb27086669f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7877a42308a05597840f212d10d2abb27086669f", "html_url": "https://github.com/rust-lang/rust/commit/7877a42308a05597840f212d10d2abb27086669f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7877a42308a05597840f212d10d2abb27086669f/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c93048bc9e3ea275af45d3de9ce5fc9d288f5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c93048bc9e3ea275af45d3de9ce5fc9d288f5f2", "html_url": "https://github.com/rust-lang/rust/commit/1c93048bc9e3ea275af45d3de9ce5fc9d288f5f2"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "04f8aaa37e7bedfa087aa5a843f45669254d5157", "filename": "src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7877a42308a05597840f212d10d2abb27086669f/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7877a42308a05597840f212d10d2abb27086669f/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=7877a42308a05597840f212d10d2abb27086669f", "patch": "@@ -47,7 +47,7 @@ declare_lint! {\n /// match foo {\n ///     Bar => bar(),\n ///     Quz => quz(),\n-///     Baz => bar(), // <= oups\n+///     Baz => bar(), // <= oops\n /// }\n /// ```\n declare_lint! {"}, {"sha": "ab4f73eafc099f40784a16e0c9d6a9632ceb1032", "filename": "src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7877a42308a05597840f212d10d2abb27086669f/src%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7877a42308a05597840f212d10d2abb27086669f/src%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fderive.rs?ref=7877a42308a05597840f212d10d2abb27086669f", "patch": "@@ -14,7 +14,7 @@ use utils::{match_path, span_lint_and_then};\n ///\n /// **Why is this bad?** The implementation of these traits must agree (for example for use with\n /// `HashMap`) so it\u2019s probably a bad idea to use a default-generated `Hash` implementation  with\n-/// an explicitely defined `PartialEq`. In particular, the following must hold for any type:\n+/// an explicitly defined `PartialEq`. In particular, the following must hold for any type:\n ///\n /// ```rust\n /// k1 == k2 \u21d2 hash(k1) == hash(k2)"}, {"sha": "952dcb7ed9c4b2417268bfbce78a4c7cf69e255c", "filename": "src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7877a42308a05597840f212d10d2abb27086669f/src%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7877a42308a05597840f212d10d2abb27086669f/src%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems_after_statements.rs?ref=7877a42308a05597840f212d10d2abb27086669f", "patch": "@@ -32,15 +32,15 @@ declare_lint! {\n     \"finds blocks where an item comes after a statement\"\n }\n \n-pub struct ItemsAfterStatemets;\n+pub struct ItemsAfterStatements;\n \n-impl LintPass for ItemsAfterStatemets {\n+impl LintPass for ItemsAfterStatements {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ITEMS_AFTER_STATEMENTS)\n     }\n }\n \n-impl EarlyLintPass for ItemsAfterStatemets {\n+impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext, item: &Block) {\n         if in_macro(cx, item.span) {\n             return;"}, {"sha": "75b5ec4cc23a359a93cd257e2d8bd12168abf1a2", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7877a42308a05597840f212d10d2abb27086669f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7877a42308a05597840f212d10d2abb27086669f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7877a42308a05597840f212d10d2abb27086669f", "patch": "@@ -134,7 +134,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         }\n         Err((err, span)) => {\n             reg.sess.struct_span_err(span, err)\n-                    .span_note(span, \"Clippy will use defaulf configuration\")\n+                    .span_note(span, \"Clippy will use default configuration\")\n                     .emit();\n             utils::conf::Conf::default()\n         }\n@@ -163,7 +163,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_early_lint_pass(box precedence::Precedence);\n     reg.register_late_lint_pass(box eta_reduction::EtaPass);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n-    reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatemets);\n+    reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatements);\n     reg.register_late_lint_pass(box mut_mut::MutMut);\n     reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);\n     reg.register_late_lint_pass(box len_zero::LenZero);"}, {"sha": "b1c584a4b3e0fe039f325fd291a10c3fd143c345", "filename": "src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7877a42308a05597840f212d10d2abb27086669f/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7877a42308a05597840f212d10d2abb27086669f/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=7877a42308a05597840f212d10d2abb27086669f", "patch": "@@ -110,10 +110,10 @@ impl EarlyLintPass for MiscEarly {\n                 let arg_name = sp_ident.node.to_string();\n \n                 if arg_name.starts_with('_') {\n-                    if let Some(correspondance) = registered_names.get(&arg_name[1..]) {\n+                    if let Some(correspondence) = registered_names.get(&arg_name[1..]) {\n                         span_lint(cx,\n                                   DUPLICATE_UNDERSCORE_ARGUMENT,\n-                                  *correspondance,\n+                                  *correspondence,\n                                   &format!(\"`{}` already exists, having another argument having almost the same \\\n                                             name makes code comprehension and documentation more difficult\",\n                                            arg_name[1..].to_owned()));;"}, {"sha": "ab5a1e26b20c48383d972ffd60c98f2eea8e3b7c", "filename": "src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7877a42308a05597840f212d10d2abb27086669f/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7877a42308a05597840f212d10d2abb27086669f/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=7877a42308a05597840f212d10d2abb27086669f", "patch": "@@ -105,7 +105,7 @@ impl LateLintPass for BoolComparison {\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n-                                       \"equality checks against true are unnecesary\",\n+                                       \"equality checks against true are unnecessary\",\n                                        |db| {\n                                            db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n                                        });\n@@ -115,7 +115,7 @@ impl LateLintPass for BoolComparison {\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n-                                       \"equality checks against true are unnecesary\",\n+                                       \"equality checks against true are unnecessary\",\n                                        |db| {\n                                            db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n                                        });"}, {"sha": "20c7e33fbb2bc180b4a4289c1d9abb96fe2a01a9", "filename": "src/utils/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7877a42308a05597840f212d10d2abb27086669f/src%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7877a42308a05597840f212d10d2abb27086669f/src%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fhir.rs?ref=7877a42308a05597840f212d10d2abb27086669f", "patch": "@@ -13,7 +13,7 @@ use utils::differing_macro_contexts;\n pub struct SpanlessEq<'a, 'tcx: 'a> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'a, 'tcx>,\n-    /// If is true, never consider as equal expressions containing fonction calls.\n+    /// If is true, never consider as equal expressions containing function calls.\n     ignore_fn: bool,\n }\n "}, {"sha": "836759455197f08d427d15e67b270f6c212902dd", "filename": "tests/compile-fail/bool_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7877a42308a05597840f212d10d2abb27086669f/tests%2Fcompile-fail%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7877a42308a05597840f212d10d2abb27086669f/tests%2Fcompile-fail%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbool_comparison.rs?ref=7877a42308a05597840f212d10d2abb27086669f", "patch": "@@ -5,15 +5,15 @@\n fn main() {\n     let x = true;\n     if x == true { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against true are unnecesary\n+    //~^ ERROR equality checks against true are unnecessary\n     //~| HELP try simplifying it as shown:\n     //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n     if x == false { \"yes\" } else { \"no\" };\n     //~^ ERROR equality checks against false can be replaced by a negation\n     //~| HELP try simplifying it as shown:\n     //~| SUGGESTION if !x { \"yes\" } else { \"no\" };\n     if true == x { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against true are unnecesary\n+    //~^ ERROR equality checks against true are unnecessary\n     //~| HELP try simplifying it as shown:\n     //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n     if false == x { \"yes\" } else { \"no\" };"}]}