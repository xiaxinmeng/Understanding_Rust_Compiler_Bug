{"sha": "cd0987115765efdf4f834f0f0bf24c4cef063b1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMDk4NzExNTc2NWVmZGY0ZjgzNGYwZjBiZjI0YzRjZWYwNjNiMWE=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-23T11:58:58Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-23T11:58:58Z"}, "message": "Cover more cases in the test suite", "tree": {"sha": "6ada8f7793a02406c6be053ff8e89c7f9f9a3fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ada8f7793a02406c6be053ff8e89c7f9f9a3fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd0987115765efdf4f834f0f0bf24c4cef063b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd0987115765efdf4f834f0f0bf24c4cef063b1a", "html_url": "https://github.com/rust-lang/rust/commit/cd0987115765efdf4f834f0f0bf24c4cef063b1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd0987115765efdf4f834f0f0bf24c4cef063b1a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f39aa81a8e0861c5cc8227c08b60f037a87947", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f39aa81a8e0861c5cc8227c08b60f037a87947", "html_url": "https://github.com/rust-lang/rust/commit/14f39aa81a8e0861c5cc8227c08b60f037a87947"}], "stats": {"total": 137, "additions": 99, "deletions": 38}, "files": [{"sha": "b2230697037f38c264be2f6f6f18019b48f5e396", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cd0987115765efdf4f834f0f0bf24c4cef063b1a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0987115765efdf4f834f0f0bf24c4cef063b1a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs?ref=cd0987115765efdf4f834f0f0bf24c4cef063b1a", "patch": "@@ -1,6 +1,9 @@\n #![feature(const_mut_refs)]\n #![feature(const_fn)]\n+#![feature(const_transmute)]\n #![feature(raw_ref_op)]\n+#![feature(const_raw_ptr_deref)]\n+\n const NULL: *mut i32 = std::ptr::null_mut();\n const A: *const i32 = &4;\n \n@@ -9,6 +12,25 @@ const A: *const i32 = &4;\n // as that would be an enormous footgun in oli-obk's opinion.\n const B: *mut i32 = &mut 4; //~ ERROR mutable references are not allowed\n \n+// Ok, no actual mutable allocation exists\n+const B2: Option<&mut i32> = None;\n+\n+// Not ok, can't prove that no mutable allocation ends up in final value\n+const B3: Option<&mut i32> = Some(&mut 42); //~ ERROR temporary value dropped while borrowed\n+\n+const fn helper() -> Option<&'static mut i32> { unsafe {\n+    // Undefined behaviour, who doesn't love tests like this.\n+    // This code never gets executed, because the static checks fail before that.\n+    Some(&mut *(42 as *mut i32))\n+} }\n+// Check that we do not look into function bodies.\n+// We treat all functions as not returning a mutable reference, because there is no way to\n+// do that without causing the borrow checker to complain (see the B5/helper2 test below).\n+const B4: Option<&mut i32> = helper();\n+\n+const fn helper2(x: &mut i32) -> Option<&mut i32> { Some(x) }\n+const B5: Option<&mut i32> = helper2(&mut 42); //~ ERROR temporary value dropped while borrowed\n+\n // Ok, because no references to mutable data exist here, since the `{}` moves\n // its value and then takes a reference to that.\n const C: *const i32 = &{\n@@ -17,7 +39,30 @@ const C: *const i32 = &{\n     x\n };\n \n+use std::cell::UnsafeCell;\n+struct NotAMutex<T>(UnsafeCell<T>);\n+\n+unsafe impl<T> Sync for NotAMutex<T> {}\n+\n+const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n+//~^ ERROR temporary value dropped while borrowed\n+\n+static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n+//~^ ERROR temporary value dropped while borrowed\n+\n+static mut FOO3: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n+//~^ ERROR temporary value dropped while borrowed\n+\n+// `BAR` works, because `&42` promotes immediately instead of relying on\n+// the enclosing scope rule.\n+const BAR: NotAMutex<&i32> = NotAMutex(UnsafeCell::new(&42));\n+\n fn main() {\n     println!(\"{}\", unsafe { *A });\n     unsafe { *B = 4 } // Bad news\n+\n+    unsafe {\n+        **FOO.0.get() = 99;\n+        assert_eq!(**FOO.0.get(), 99);\n+    }\n }"}, {"sha": "389b88955cec46c2ce202df1ab4233d38120d2f4", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.stderr", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cd0987115765efdf4f834f0f0bf24c4cef063b1a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd0987115765efdf4f834f0f0bf24c4cef063b1a/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr?ref=cd0987115765efdf4f834f0f0bf24c4cef063b1a", "patch": "@@ -1,9 +1,60 @@\n error[E0764]: mutable references are not allowed in the final value of constants\n-  --> $DIR/mut_ref_in_final.rs:10:21\n+  --> $DIR/mut_ref_in_final.rs:13:21\n    |\n LL | const B: *mut i32 = &mut 4;\n    |                     ^^^^^^\n \n-error: aborting due to previous error\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/mut_ref_in_final.rs:19:40\n+   |\n+LL | const B3: Option<&mut i32> = Some(&mut 42);\n+   |                              ----------^^-\n+   |                              |         | |\n+   |                              |         | temporary value is freed at the end of this statement\n+   |                              |         creates a temporary which is freed while still in use\n+   |                              using this value as a constant requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/mut_ref_in_final.rs:32:43\n+   |\n+LL | const B5: Option<&mut i32> = helper2(&mut 42);\n+   |                              -------------^^-\n+   |                              |            | |\n+   |                              |            | temporary value is freed at the end of this statement\n+   |                              |            creates a temporary which is freed while still in use\n+   |                              using this value as a constant requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/mut_ref_in_final.rs:47:65\n+   |\n+LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n+   |                                  -------------------------------^^--\n+   |                                  |                              |  |\n+   |                                  |                              |  temporary value is freed at the end of this statement\n+   |                                  |                              creates a temporary which is freed while still in use\n+   |                                  using this value as a constant requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/mut_ref_in_final.rs:50:67\n+   |\n+LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n+   |                                    -------------------------------^^--\n+   |                                    |                              |  |\n+   |                                    |                              |  temporary value is freed at the end of this statement\n+   |                                    |                              creates a temporary which is freed while still in use\n+   |                                    using this value as a static requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/mut_ref_in_final.rs:53:71\n+   |\n+LL | static mut FOO3: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n+   |                                        -------------------------------^^--\n+   |                                        |                              |  |\n+   |                                        |                              |  temporary value is freed at the end of this statement\n+   |                                        |                              creates a temporary which is freed while still in use\n+   |                                        using this value as a static requires that borrow lasts for `'static`\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0764`.\n+Some errors have detailed explanations: E0716, E0764.\n+For more information about an error, try `rustc --explain E0716`."}, {"sha": "3f2995df2d769d8b91d342da619431ba17499c2e", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_ok.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/14f39aa81a8e0861c5cc8227c08b60f037a87947/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f39aa81a8e0861c5cc8227c08b60f037a87947/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.rs?ref=14f39aa81a8e0861c5cc8227c08b60f037a87947", "patch": "@@ -1,22 +0,0 @@\n-#![feature(const_mut_refs)]\n-#![feature(const_fn)]\n-#![feature(raw_ref_op)]\n-\n-use std::cell::UnsafeCell;\n-struct NotAMutex<T>(UnsafeCell<T>);\n-\n-unsafe impl<T> Sync for NotAMutex<T> {}\n-\n-const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n-//~^ ERROR temporary value dropped while borrowed\n-\n-// `BAR` works, because `&42` promotes immediately instead of relying on\n-// \"final value lifetime extension\".\n-const BAR: NotAMutex<&i32> = NotAMutex(UnsafeCell::new(&42));\n-\n-fn main() {\n-    unsafe {\n-        **FOO.0.get() = 99;\n-        assert_eq!(**FOO.0.get(), 99);\n-    }\n-}"}, {"sha": "8b51e44e16956e0215ea2f19f9bfe8514437ad04", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_ok.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/14f39aa81a8e0861c5cc8227c08b60f037a87947/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f39aa81a8e0861c5cc8227c08b60f037a87947/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_ok.stderr?ref=14f39aa81a8e0861c5cc8227c08b60f037a87947", "patch": "@@ -1,13 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final_ok.rs:10:65\n-   |\n-LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n-   |                                  -------------------------------^^--\n-   |                                  |                              |  |\n-   |                                  |                              |  temporary value is freed at the end of this statement\n-   |                                  |                              creates a temporary which is freed while still in use\n-   |                                  using this value as a constant requires that borrow lasts for `'static`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0716`."}]}