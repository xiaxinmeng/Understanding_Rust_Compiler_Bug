{"sha": "e6cc4c5d13f8819c72568f9675e84c1d17368c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2Y2M0YzVkMTNmODgxOWM3MjU2OGY5Njc1ZTg0YzFkMTczNjhjNjc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-08-15T22:36:39Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-08-18T03:43:35Z"}, "message": "Fix links", "tree": {"sha": "3a73e5e11d29b38750349dd11089fc3895f9ac5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a73e5e11d29b38750349dd11089fc3895f9ac5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6cc4c5d13f8819c72568f9675e84c1d17368c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6cc4c5d13f8819c72568f9675e84c1d17368c67", "html_url": "https://github.com/rust-lang/rust/commit/e6cc4c5d13f8819c72568f9675e84c1d17368c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6cc4c5d13f8819c72568f9675e84c1d17368c67/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da1f7731f6cebcf8b8a896c65b38e19b102e19c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/da1f7731f6cebcf8b8a896c65b38e19b102e19c4", "html_url": "https://github.com/rust-lang/rust/commit/da1f7731f6cebcf8b8a896c65b38e19b102e19c4"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "a62e1b7dfa9c505bfba37e503ad66acee15153b9", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=e6cc4c5d13f8819c72568f9675e84c1d17368c67", "patch": "@@ -59,7 +59,7 @@ handling is reducing the amount of explicit case analysis the programmer has to\n do while keeping code composable.\n \n Keeping code composable is important, because without that requirement, we\n-could [`panic`](../std/macro.panic!.html) whenever we\n+could [`panic`](../std/macro.panic.html) whenever we\n come across something unexpected. (`panic` causes the current task to unwind,\n and in most cases, the entire program aborts.) Here's an example:\n \n@@ -944,7 +944,7 @@ macro_rules! try {\n }\n ```\n \n-(The [real definition](../std/macro.try!.html) is a bit more\n+(The [real definition](../std/macro.try.html) is a bit more\n sophisticated. We will address that later.)\n \n Using the `try!` macro makes it very easy to simplify our last example. Since\n@@ -1271,7 +1271,7 @@ macro_rules! try {\n ```\n \n This is not its real definition. Its real definition is\n-[in the standard library](../std/macro.try!.html):\n+[in the standard library](../std/macro.try.html):\n \n <span id=\"code-try-def\"></span>\n \n@@ -2178,7 +2178,7 @@ heuristics!\n   [`From`](../std/convert/trait.From.html)\n   and\n   [`Error`](../std/error/trait.Error.html)\n-  impls to make the [`try!`](../std/macro.try!.html)\n+  impls to make the [`try!`](../std/macro.try.html)\n   macro more ergonomic.\n * If you're writing a library and your code can produce errors, define your own\n   error type and implement the"}, {"sha": "b7cbfb60ec4e9289ba1f57036afb7236aa1dcd88", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=e6cc4c5d13f8819c72568f9675e84c1d17368c67", "patch": "@@ -530,7 +530,7 @@ use string;\n /// assert_eq!(s, \"Hello, world!\");\n /// ```\n ///\n-/// [format!]: ../macro.format!.html\n+/// [format!]: ../macro.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn format(args: Arguments) -> string::String {\n     let mut output = string::String::new();"}, {"sha": "307d014fd68c6a264f748ce6e02721ce0cb0bf41", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e6cc4c5d13f8819c72568f9675e84c1d17368c67", "patch": "@@ -236,7 +236,7 @@\n //! to read the line and print it, so we use `()`.\n //!\n //! [result]: type.Result.html\n-//! [try]: ../macro.try!.html\n+//! [try]: ../macro.try.html\n //!\n //! ## Platform-specific behavior\n //!\n@@ -957,8 +957,8 @@ pub trait Write {\n     /// explicitly be called. The [`write!`][write] macro should be favored to\n     /// invoke this method instead.\n     ///\n-    /// [formatargs]: ../macro.format_args!.html\n-    /// [write]: ../macro.write!.html\n+    /// [formatargs]: ../macro.format_args.html\n+    /// [write]: ../macro.write.html\n     ///\n     /// This function internally uses the [`write_all`][writeall] method on\n     /// this trait and hence will continuously write data so long as no errors"}, {"sha": "ff3b9c6d041633c6c658a384576197170926695f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e6cc4c5d13f8819c72568f9675e84c1d17368c67", "patch": "@@ -175,7 +175,7 @@\n //! [`atomic`]: sync/atomic/index.html\n //! [`collections`]: collections/index.html\n //! [`for`]: ../book/loops.html#for\n-//! [`format!`]: macro.format!.html\n+//! [`format!`]: macro.format.html\n //! [`fs`]: fs/index.html\n //! [`io`]: io/index.html\n //! [`iter`]: iter/index.html"}, {"sha": "2b92da6c684a43f2e5680000520583964b7d2bff", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=e6cc4c5d13f8819c72568f9675e84c1d17368c67", "patch": "@@ -27,7 +27,7 @@\n /// assert!(!bool_val);\n /// ```\n ///\n-/// [`assert!`]: macro.assert!.html\n+/// [`assert!`]: macro.assert.html\n /// [`if`]: ../book/if.html\n /// [`BitAnd`]: ops/trait.BitAnd.html\n /// [`BitOr`]: ops/trait.BitOr.html"}, {"sha": "d71df6d3f83a860b5d84432c9f05402fdb0eeab1", "filename": "src/tools/linkchecker/Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Ftools%2Flinkchecker%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e6cc4c5d13f8819c72568f9675e84c1d17368c67/src%2Ftools%2Flinkchecker%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.lock?ref=e6cc4c5d13f8819c72568f9675e84c1d17368c67", "patch": "@@ -42,3 +42,9 @@ dependencies = [\n  \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[metadata]\n+\"checksum idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1053236e00ce4f668aeca4a769a09b3bf5a682d802abd6f3cb39374f6b162c11\"\n+\"checksum matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15305656809ce5a4805b1ff2946892810992197ce1270ff79baded852187942e\"\n+\"checksum unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1f7ceb96afdfeedee42bade65a0d585a6a0106f681b6749c8ff4daa8df30b3f\"\n+\"checksum unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26643a2f83bac55f1976fb716c10234485f9202dcd65cfbdf9da49867b271172\"\n+\"checksum url 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afe9ec54bc4db14bc8744b7fed060d785ac756791450959b2248443319d5b119\""}]}