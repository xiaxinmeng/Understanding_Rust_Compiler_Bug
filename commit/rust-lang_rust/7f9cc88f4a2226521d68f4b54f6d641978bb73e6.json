{"sha": "7f9cc88f4a2226521d68f4b54f6d641978bb73e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOWNjODhmNGEyMjI2NTIxZDY4ZjRiNTRmNmQ2NDE5NzhiYjczZTY=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-12-29T11:50:43Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-12-31T01:37:45Z"}, "message": "Add symbol normalization for proc_macro_server.", "tree": {"sha": "adcde2ea0eda64a8b1889898494769a5a5b90d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adcde2ea0eda64a8b1889898494769a5a5b90d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f9cc88f4a2226521d68f4b54f6d641978bb73e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9cc88f4a2226521d68f4b54f6d641978bb73e6", "html_url": "https://github.com/rust-lang/rust/commit/7f9cc88f4a2226521d68f4b54f6d641978bb73e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f9cc88f4a2226521d68f4b54f6d641978bb73e6/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9dd56ff9a08d74c53d5cc22d18f126a12749608", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd56ff9a08d74c53d5cc22d18f126a12749608", "html_url": "https://github.com/rust-lang/rust/commit/a9dd56ff9a08d74c53d5cc22d18f126a12749608"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "b41490011af3faf87ce70bc51a4a1c8e6b3fa04c", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f9cc88f4a2226521d68f4b54f6d641978bb73e6/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9cc88f4a2226521d68f4b54f6d641978bb73e6/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=7f9cc88f4a2226521d68f4b54f6d641978bb73e6", "patch": "@@ -1,5 +1,6 @@\n use crate::base::ExtCtxt;\n \n+use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use syntax::ast;\n use syntax::print::pprust;\n@@ -327,6 +328,7 @@ impl Ident {\n         }\n     }\n     fn new(sym: Symbol, is_raw: bool, span: Span) -> Ident {\n+        let sym = nfc_normalize(&sym.as_str());\n         let string = sym.as_str();\n         if !Self::is_valid(&string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)"}, {"sha": "b981e8d066fcdfea225b5e8fe08466e40203dfd7", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f9cc88f4a2226521d68f4b54f6d641978bb73e6/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9cc88f4a2226521d68f4b54f6d641978bb73e6/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=7f9cc88f4a2226521d68f4b54f6d641978bb73e6", "patch": "@@ -471,16 +471,9 @@ impl<'a> StringReader<'a> {\n \n     /// As symbol_from, with the text normalized into Unicode NFC form.\n     fn nfc_symbol_from(&self, start: BytePos) -> Symbol {\n-        use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};\n         debug!(\"taking an normalized ident from {:?} to {:?}\", start, self.pos);\n         let sym = self.str_from(start);\n-        match is_nfc_quick(sym.chars()) {\n-            IsNormalized::Yes => Symbol::intern(sym),\n-            _ => {\n-                let sym_str: String = sym.chars().nfc().collect();\n-                Symbol::intern(&sym_str)\n-            }\n-        }\n+        nfc_normalize(sym)\n     }\n \n     /// Slice of the source text spanning from `start` up to but excluding `end`.\n@@ -651,3 +644,14 @@ impl<'a> StringReader<'a> {\n         }\n     }\n }\n+\n+pub fn nfc_normalize(string: &str) -> Symbol {\n+    use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};\n+    match is_nfc_quick(string.chars()) {\n+        IsNormalized::Yes => Symbol::intern(string),\n+        _ => {\n+            let normalized_str: String = string.chars().nfc().collect();\n+            Symbol::intern(&normalized_str)\n+        }\n+    }\n+}"}]}