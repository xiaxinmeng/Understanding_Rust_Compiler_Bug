{"sha": "29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "node_id": "C_kwDOAAsO6NoAKDI5Yzk1N2Y5NzM4OGFmZDJhMjFlYzMzNjRlYTRjZThjMjY5Y2ZiY2Q", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-03T15:24:07Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-03T15:24:07Z"}, "message": "Lower and handle trait aliases in HIR", "tree": {"sha": "4ef46eaa49bb2bc3d5634777b652d95b528d020a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef46eaa49bb2bc3d5634777b652d95b528d020a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQCERcACgkQ4laYqTBY\nYXFnog/+ODBs6223DhqcCxFTpkm6sixGxMRaIPdGi/lQVAbhJEsxVGnA1OjcRwgF\nI4DdV+QrExA11W50ZXZ+8ymLeVO+g8NLzsCud9z1a/Tyv6mw5x85PC4tvUWcxUto\nL431csfD3VJQfKY7WsWs6L0KBlLV+/x+uadFiuCATx/19fSmO5i6zctJAOPnZYwk\nXv11gcGFS4pB5vDprwCYl3LERvRZSltkIgh9+zWDxudYqrkgMAIaRB3FRyfIWwcl\nEs2SXsqlJb5+1GJEazyaUFqPYAsaMmcnH1ReOBKtC6KkX9F1OZemJFoW9FbJXfal\n/iNnhJvrLI3s4jRZSgaAeEJj5EnvRrr+Ar+ObxO6EdO7gjzxOWs0ZAsklmPh9ynL\nF7+J6ZGHFr5+s8WOh9eaCbn5bZBwLIfGe4bzQtbqfX08VCCky7+lmkthAu84h3do\nDnr1NKnfDG79kEjE/SOEuDsxOFTjXaqWg6H62aBkWPR30aaF/3KaYBnUFjQNgkWH\nJotatrdol4W9k8IbpZZoJECXSUpD2avdq4PbHVw61thA/QhPJUoknw9PRIPts7U/\n82+Xb+scBeGMCenQQkkDKq4GtM9yzR/TXFmNMmiZUK+oZY2FF5Ge9CGiZyfP96A5\nrPaRhXLq4B/xPj+mJ7g32xV6Yn14PblDNXKCG1LVSCA8T2Ccr04=\n=RTXe\n-----END PGP SIGNATURE-----", "payload": "tree 4ef46eaa49bb2bc3d5634777b652d95b528d020a\nparent e2ec3a6561d73cc4b530c69a9bafc30c4f34b1ec\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1677857047 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1677857047 +0900\n\nLower and handle trait aliases in HIR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "html_url": "https://github.com/rust-lang/rust/commit/29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ec3a6561d73cc4b530c69a9bafc30c4f34b1ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ec3a6561d73cc4b530c69a9bafc30c4f34b1ec", "html_url": "https://github.com/rust-lang/rust/commit/e2ec3a6561d73cc4b530c69a9bafc30c4f34b1ec"}], "stats": {"total": 409, "additions": 334, "deletions": 75}, "files": [{"sha": "200072c172ebe74fb6e70da1aef9b3dfaaea2882", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -300,6 +300,7 @@ impl AttrsWithOwner {\n                 AdtId::UnionId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             },\n             AttrDefId::TraitId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+            AttrDefId::TraitAliasId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::MacroId(it) => match it {\n                 MacroId::Macro2Id(it) => attrs_from_item_tree(it.lookup(db).id, db),\n                 MacroId::MacroRulesId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n@@ -392,6 +393,7 @@ impl AttrsWithOwner {\n             AttrDefId::StaticId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::ConstId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::TraitId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+            AttrDefId::TraitAliasId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::TypeAliasId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::MacroId(id) => match id {\n                 MacroId::Macro2Id(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),"}, {"sha": "68b57acca2adca3950a4dfc1ede53fd0ca8cd437", "filename": "crates/hir-def/src/child_by_source.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fchild_by_source.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -1,7 +1,7 @@\n //! When *constructing* `hir`, we start at some parent syntax node and recursively\n //! lower the children.\n //!\n-//! This modules allows one to go in the opposite direction: start with a syntax\n+//! This module allows one to go in the opposite direction: start with a syntax\n //! node for a *child*, and get its hir.\n \n use either::Either;\n@@ -145,6 +145,7 @@ impl ChildBySource for ItemScope {\n                 ModuleDefId::StaticId(id) => insert!(map[keys::STATIC].insert(id)),\n                 ModuleDefId::TypeAliasId(id) => insert!(map[keys::TYPE_ALIAS].insert(id)),\n                 ModuleDefId::TraitId(id) => insert!(map[keys::TRAIT].insert(id)),\n+                ModuleDefId::TraitAliasId(id) => insert!(map[keys::TRAIT_ALIAS].insert(id)),\n                 ModuleDefId::AdtId(adt) => match adt {\n                     AdtId::StructId(id) => insert!(map[keys::STRUCT].insert(id)),\n                     AdtId::UnionId(id) => insert!(map[keys::UNION].insert(id)),"}, {"sha": "ee6e269fe558698e5096c81351d303705e3d45e8", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     visibility::RawVisibility,\n     AssocItemId, AstIdWithPath, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n     Intern, ItemContainerId, ItemLoc, Lookup, Macro2Id, MacroRulesId, ModuleId, ProcMacroId,\n-    StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    StaticId, TraitAliasId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -245,19 +245,11 @@ impl TraitData {\n             attrs.by_key(\"rustc_skip_array_during_method_dispatch\").exists();\n         let rustc_has_incoherent_inherent_impls =\n             attrs.by_key(\"rustc_has_incoherent_inherent_impls\").exists();\n-        let (items, attribute_calls, diagnostics) = match &tr_def.items {\n-            Some(items) => {\n-                let mut collector = AssocItemCollector::new(\n-                    db,\n-                    module_id,\n-                    tree_id.file_id(),\n-                    ItemContainerId::TraitId(tr),\n-                );\n-                collector.collect(&item_tree, tree_id.tree_id(), items);\n-                collector.finish()\n-            }\n-            None => Default::default(),\n-        };\n+        let mut collector =\n+            AssocItemCollector::new(db, module_id, tree_id.file_id(), ItemContainerId::TraitId(tr));\n+        collector.collect(&item_tree, tree_id.tree_id(), &tr_def.items);\n+        let (items, attribute_calls, diagnostics) = collector.finish();\n+\n         (\n             Arc::new(TraitData {\n                 name,\n@@ -299,6 +291,23 @@ impl TraitData {\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct TraitAliasData {\n+    pub name: Name,\n+    pub visibility: RawVisibility,\n+}\n+\n+impl TraitAliasData {\n+    pub(crate) fn trait_alias_query(db: &dyn DefDatabase, id: TraitAliasId) -> Arc<TraitAliasData> {\n+        let loc = id.lookup(db);\n+        let item_tree = loc.id.item_tree(db);\n+        let alias = &item_tree[loc.id.value];\n+        let visibility = item_tree[alias.visibility].clone();\n+\n+        Arc::new(TraitAliasData { name: alias.name.clone(), visibility })\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImplData {\n     pub target_trait: Option<Interned<TraitRef>>,"}, {"sha": "270cfa06e58156eab6397cde8d01706ed1118d61", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     body::{scope::ExprScopes, Body, BodySourceMap},\n     data::{\n         ConstData, FunctionData, ImplData, Macro2Data, MacroRulesData, ProcMacroData, StaticData,\n-        TraitData, TypeAliasData,\n+        TraitAliasData, TraitData, TypeAliasData,\n     },\n     generics::GenericParams,\n     import_map::ImportMap,\n@@ -25,8 +25,8 @@ use crate::{\n     AttrDefId, BlockId, BlockLoc, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, ExternBlockId,\n     ExternBlockLoc, FunctionId, FunctionLoc, GenericDefId, ImplId, ImplLoc, LocalEnumVariantId,\n     LocalFieldId, Macro2Id, Macro2Loc, MacroRulesId, MacroRulesLoc, ProcMacroId, ProcMacroLoc,\n-    StaticId, StaticLoc, StructId, StructLoc, TraitId, TraitLoc, TypeAliasId, TypeAliasLoc,\n-    UnionId, UnionLoc, VariantId,\n+    StaticId, StaticLoc, StructId, StructLoc, TraitAliasId, TraitAliasLoc, TraitId, TraitLoc,\n+    TypeAliasId, TypeAliasLoc, UnionId, UnionLoc, VariantId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -46,6 +46,8 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_trait(&self, loc: TraitLoc) -> TraitId;\n     #[salsa::interned]\n+    fn intern_trait_alias(&self, loc: TraitAliasLoc) -> TraitAliasId;\n+    #[salsa::interned]\n     fn intern_type_alias(&self, loc: TypeAliasLoc) -> TypeAliasId;\n     #[salsa::interned]\n     fn intern_impl(&self, loc: ImplLoc) -> ImplId;\n@@ -125,6 +127,9 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(TraitData::trait_data_with_diagnostics_query)]\n     fn trait_data_with_diagnostics(&self, tr: TraitId) -> (Arc<TraitData>, Arc<[DefDiagnostic]>);\n \n+    #[salsa::invoke(TraitAliasData::trait_alias_query)]\n+    fn trait_alias_data(&self, e: TraitAliasId) -> Arc<TraitAliasData>;\n+\n     #[salsa::invoke(TypeAliasData::type_alias_data_query)]\n     fn type_alias_data(&self, e: TypeAliasId) -> Arc<TypeAliasData>;\n "}, {"sha": "e4912fa8a64a44df362d580b7fe2a0077ceb984c", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -187,6 +187,7 @@ impl GenericParams {\n             GenericDefId::AdtId(AdtId::EnumId(id)) => id_to_generics!(id),\n             GenericDefId::AdtId(AdtId::UnionId(id)) => id_to_generics!(id),\n             GenericDefId::TraitId(id) => id_to_generics!(id),\n+            GenericDefId::TraitAliasId(id) => id_to_generics!(id),\n             GenericDefId::TypeAliasId(id) => id_to_generics!(id),\n             GenericDefId::ImplId(id) => id_to_generics!(id),\n             GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => {\n@@ -427,6 +428,10 @@ fn file_id_and_params_of(\n             let src = it.lookup(db).source(db);\n             (src.file_id, src.value.generic_param_list())\n         }\n+        GenericDefId::TraitAliasId(it) => {\n+            let src = it.lookup(db).source(db);\n+            (src.file_id, src.value.generic_param_list())\n+        }\n         GenericDefId::TypeAliasId(it) => {\n             let src = it.lookup(db).source(db);\n             (src.file_id, src.value.generic_param_list())\n@@ -441,7 +446,7 @@ fn file_id_and_params_of(\n }\n \n impl HasChildSource<LocalTypeOrConstParamId> for GenericDefId {\n-    type Value = Either<ast::TypeOrConstParam, ast::Trait>;\n+    type Value = Either<ast::TypeOrConstParam, ast::TraitOrAlias>;\n     fn child_source(\n         &self,\n         db: &dyn DefDatabase,\n@@ -453,11 +458,20 @@ impl HasChildSource<LocalTypeOrConstParamId> for GenericDefId {\n \n         let mut params = ArenaMap::default();\n \n-        // For traits the first type index is `Self`, we need to add it before the other params.\n-        if let GenericDefId::TraitId(id) = *self {\n-            let trait_ref = id.lookup(db).source(db).value;\n-            let idx = idx_iter.next().unwrap();\n-            params.insert(idx, Either::Right(trait_ref));\n+        // For traits and trait aliases the first type index is `Self`, we need to add it before\n+        // the other params.\n+        match *self {\n+            GenericDefId::TraitId(id) => {\n+                let trait_ref = id.lookup(db).source(db).value;\n+                let idx = idx_iter.next().unwrap();\n+                params.insert(idx, Either::Right(ast::TraitOrAlias::Trait(trait_ref)));\n+            }\n+            GenericDefId::TraitAliasId(id) => {\n+                let alias = id.lookup(db).source(db).value;\n+                let idx = idx_iter.next().unwrap();\n+                params.insert(idx, Either::Right(ast::TraitOrAlias::TraitAlias(alias)));\n+            }\n+            _ => {}\n         }\n \n         if let Some(generic_params_list) = generic_params_list {"}, {"sha": "07a68d1598c590ce3097165a55650d616f6bad8e", "filename": "crates/hir-def/src/import_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fimport_map.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -268,6 +268,7 @@ pub enum ImportKind {\n     Const,\n     Static,\n     Trait,\n+    TraitAlias,\n     TypeAlias,\n     BuiltinType,\n     AssociatedItem,\n@@ -463,6 +464,7 @@ fn item_import_kind(item: ItemInNs) -> Option<ImportKind> {\n         ModuleDefId::ConstId(_) => ImportKind::Const,\n         ModuleDefId::StaticId(_) => ImportKind::Static,\n         ModuleDefId::TraitId(_) => ImportKind::Trait,\n+        ModuleDefId::TraitAliasId(_) => ImportKind::TraitAlias,\n         ModuleDefId::TypeAliasId(_) => ImportKind::TypeAlias,\n         ModuleDefId::BuiltinType(_) => ImportKind::BuiltinType,\n         ModuleDefId::MacroId(_) => ImportKind::Macro,"}, {"sha": "991e447033fe70738169f44a26d64fff9b08928d", "filename": "crates/hir-def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_scope.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -431,6 +431,7 @@ impl PerNs {\n             ModuleDefId::EnumVariantId(_) => PerNs::both(def, def, v),\n             ModuleDefId::ConstId(_) | ModuleDefId::StaticId(_) => PerNs::values(def, v),\n             ModuleDefId::TraitId(_) => PerNs::types(def, v),\n+            ModuleDefId::TraitAliasId(_) => PerNs::types(def, v),\n             ModuleDefId::TypeAliasId(_) => PerNs::types(def, v),\n             ModuleDefId::BuiltinType(_) => PerNs::types(def, v),\n             ModuleDefId::MacroId(mac) => PerNs::macros(mac, v),"}, {"sha": "9da5b2d47c8773d7d099d38d9d071c38d6341901", "filename": "crates/hir-def/src/item_tree.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -204,6 +204,7 @@ impl ItemTree {\n                 consts,\n                 statics,\n                 traits,\n+                trait_aliases,\n                 impls,\n                 type_aliases,\n                 mods,\n@@ -226,6 +227,7 @@ impl ItemTree {\n             consts.shrink_to_fit();\n             statics.shrink_to_fit();\n             traits.shrink_to_fit();\n+            trait_aliases.shrink_to_fit();\n             impls.shrink_to_fit();\n             type_aliases.shrink_to_fit();\n             mods.shrink_to_fit();\n@@ -276,6 +278,7 @@ struct ItemTreeData {\n     consts: Arena<Const>,\n     statics: Arena<Static>,\n     traits: Arena<Trait>,\n+    trait_aliases: Arena<TraitAlias>,\n     impls: Arena<Impl>,\n     type_aliases: Arena<TypeAlias>,\n     mods: Arena<Mod>,\n@@ -496,6 +499,7 @@ mod_items! {\n     Const in consts -> ast::Const,\n     Static in statics -> ast::Static,\n     Trait in traits -> ast::Trait,\n+    TraitAlias in trait_aliases -> ast::TraitAlias,\n     Impl in impls -> ast::Impl,\n     TypeAlias in type_aliases -> ast::TypeAlias,\n     Mod in mods -> ast::Module,\n@@ -672,11 +676,18 @@ pub struct Trait {\n     pub generic_params: Interned<GenericParams>,\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n-    /// This is [`None`] if this Trait is a trait alias.\n-    pub items: Option<Box<[AssocItem]>>,\n+    pub items: Box<[AssocItem]>,\n     pub ast_id: FileAstId<ast::Trait>,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct TraitAlias {\n+    pub name: Name,\n+    pub visibility: RawVisibilityId,\n+    pub generic_params: Interned<GenericParams>,\n+    pub ast_id: FileAstId<ast::TraitAlias>,\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Impl {\n     pub generic_params: Interned<GenericParams>,\n@@ -872,6 +883,7 @@ impl ModItem {\n             | ModItem::Enum(_)\n             | ModItem::Static(_)\n             | ModItem::Trait(_)\n+            | ModItem::TraitAlias(_)\n             | ModItem::Impl(_)\n             | ModItem::Mod(_)\n             | ModItem::MacroRules(_)\n@@ -899,6 +911,7 @@ impl ModItem {\n             ModItem::Const(it) => tree[it.index].ast_id().upcast(),\n             ModItem::Static(it) => tree[it.index].ast_id().upcast(),\n             ModItem::Trait(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::TraitAlias(it) => tree[it.index].ast_id().upcast(),\n             ModItem::Impl(it) => tree[it.index].ast_id().upcast(),\n             ModItem::TypeAlias(it) => tree[it.index].ast_id().upcast(),\n             ModItem::Mod(it) => tree[it.index].ast_id().upcast(),"}, {"sha": "495a8878c3343a5de1897117e56442d39ad116b0", "filename": "crates/hir-def/src/item_tree/lower.rs", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -110,7 +110,7 @@ impl<'a> Ctx<'a> {\n             ast::Item::Const(ast) => self.lower_const(ast).into(),\n             ast::Item::Module(ast) => self.lower_module(ast)?.into(),\n             ast::Item::Trait(ast) => self.lower_trait(ast)?.into(),\n-            ast::Item::TraitAlias(_) => return None,\n+            ast::Item::TraitAlias(ast) => self.lower_trait_alias(ast)?.into(),\n             ast::Item::Impl(ast) => self.lower_impl(ast)?.into(),\n             ast::Item::Use(ast) => self.lower_use(ast)?.into(),\n             ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast)?.into(),\n@@ -446,20 +446,39 @@ impl<'a> Ctx<'a> {\n             self.lower_generic_params(HasImplicitSelf::Yes(trait_def.type_bound_list()), trait_def);\n         let is_auto = trait_def.auto_token().is_some();\n         let is_unsafe = trait_def.unsafe_token().is_some();\n-        let items = trait_def.assoc_item_list().map(|list| {\n-            list.assoc_items()\n-                .filter_map(|item| {\n-                    let attrs = RawAttrs::new(self.db.upcast(), &item, self.hygiene());\n-                    self.lower_assoc_item(&item).map(|item| {\n-                        self.add_attrs(ModItem::from(item).into(), attrs);\n-                        item\n-                    })\n-                })\n-                .collect()\n-        });\n         let ast_id = self.source_ast_id_map.ast_id(trait_def);\n-        let res = Trait { name, visibility, generic_params, is_auto, is_unsafe, items, ast_id };\n-        Some(id(self.data().traits.alloc(res)))\n+\n+        let items = trait_def\n+            .assoc_item_list()\n+            .into_iter()\n+            .flat_map(|list| list.assoc_items())\n+            .filter_map(|item| {\n+                let attrs = RawAttrs::new(self.db.upcast(), &item, self.hygiene());\n+                self.lower_assoc_item(&item).map(|item| {\n+                    self.add_attrs(ModItem::from(item).into(), attrs);\n+                    item\n+                })\n+            })\n+            .collect();\n+\n+        let def = Trait { name, visibility, generic_params, is_auto, is_unsafe, items, ast_id };\n+        Some(id(self.data().traits.alloc(def)))\n+    }\n+\n+    fn lower_trait_alias(\n+        &mut self,\n+        trait_alias_def: &ast::TraitAlias,\n+    ) -> Option<FileItemTreeId<TraitAlias>> {\n+        let name = trait_alias_def.name()?.as_name();\n+        let visibility = self.lower_visibility(trait_alias_def);\n+        let generic_params = self.lower_generic_params(\n+            HasImplicitSelf::Yes(trait_alias_def.type_bound_list()),\n+            trait_alias_def,\n+        );\n+        let ast_id = self.source_ast_id_map.ast_id(trait_alias_def);\n+\n+        let alias = TraitAlias { name, visibility, generic_params, ast_id };\n+        Some(id(self.data().trait_aliases.alloc(alias)))\n     }\n \n     fn lower_impl(&mut self, impl_def: &ast::Impl) -> Option<FileItemTreeId<Impl>> {"}, {"sha": "5f29997964b9caa727d66c1ea526686f4cda83fa", "filename": "crates/hir-def/src/item_tree/pretty.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -374,23 +374,24 @@ impl<'a> Printer<'a> {\n                 }\n                 w!(self, \"trait {}\", name);\n                 self.print_generic_params(generic_params);\n-                match items {\n-                    Some(items) => {\n-                        self.print_where_clause_and_opening_brace(generic_params);\n-                        self.indented(|this| {\n-                            for item in &**items {\n-                                this.print_mod_item((*item).into());\n-                            }\n-                        });\n-                    }\n-                    None => {\n-                        w!(self, \" = \");\n-                        // FIXME: Print the aliased traits\n-                        self.print_where_clause_and_opening_brace(generic_params);\n+                self.print_where_clause_and_opening_brace(generic_params);\n+                self.indented(|this| {\n+                    for item in &**items {\n+                        this.print_mod_item((*item).into());\n                     }\n-                }\n+                });\n                 wln!(self, \"}}\");\n             }\n+            ModItem::TraitAlias(it) => {\n+                let TraitAlias { name, visibility, generic_params, ast_id: _ } = &self.tree[it];\n+                self.print_visibility(*visibility);\n+                w!(self, \"trait {}\", name);\n+                self.print_generic_params(generic_params);\n+                w!(self, \" = \");\n+                self.print_where_clause(generic_params);\n+                w!(self, \";\");\n+                wln!(self);\n+            }\n             ModItem::Impl(it) => {\n                 let Impl { target_trait, self_ty, is_negative, items, generic_params, ast_id: _ } =\n                     &self.tree[it];"}, {"sha": "f30be6b64e3ded45ee26afb15fd74eb12d1811b8", "filename": "crates/hir-def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fkeys.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -9,8 +9,8 @@ use syntax::{ast, AstNode, AstPtr};\n use crate::{\n     dyn_map::{DynMap, Policy},\n     ConstId, EnumId, EnumVariantId, FieldId, FunctionId, ImplId, LifetimeParamId, Macro2Id,\n-    MacroRulesId, ProcMacroId, StaticId, StructId, TraitId, TypeAliasId, TypeOrConstParamId,\n-    UnionId,\n+    MacroRulesId, ProcMacroId, StaticId, StructId, TraitAliasId, TraitId, TypeAliasId,\n+    TypeOrConstParamId, UnionId,\n };\n \n pub type Key<K, V> = crate::dyn_map::Key<K, V, AstPtrPolicy<K, V>>;\n@@ -21,6 +21,7 @@ pub const STATIC: Key<ast::Static, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAlias, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::Impl, ImplId> = Key::new();\n pub const TRAIT: Key<ast::Trait, TraitId> = Key::new();\n+pub const TRAIT_ALIAS: Key<ast::TraitAlias, TraitAliasId> = Key::new();\n pub const STRUCT: Key<ast::Struct, StructId> = Key::new();\n pub const UNION: Key<ast::Union, UnionId> = Key::new();\n pub const ENUM: Key<ast::Enum, EnumId> = Key::new();"}, {"sha": "8c2e93f09059756ed1e51f20081d55044ad884e4", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -86,7 +86,7 @@ use crate::{\n     builtin_type::BuiltinType,\n     item_tree::{\n         Const, Enum, Function, Impl, ItemTreeId, ItemTreeNode, MacroDef, MacroRules, ModItem,\n-        Static, Struct, Trait, TypeAlias, Union,\n+        Static, Struct, Trait, TraitAlias, TypeAlias, Union,\n     },\n };\n \n@@ -261,6 +261,11 @@ pub struct TraitId(salsa::InternId);\n pub type TraitLoc = ItemLoc<Trait>;\n impl_intern!(TraitId, TraitLoc, intern_trait, lookup_intern_trait);\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TraitAliasId(salsa::InternId);\n+pub type TraitAliasLoc = ItemLoc<TraitAlias>;\n+impl_intern!(TraitAliasId, TraitAliasLoc, intern_trait_alias, lookup_intern_trait_alias);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAliasId(salsa::InternId);\n type TypeAliasLoc = AssocItemLoc<TypeAlias>;\n@@ -453,6 +458,7 @@ pub enum ModuleDefId {\n     ConstId(ConstId),\n     StaticId(StaticId),\n     TraitId(TraitId),\n+    TraitAliasId(TraitAliasId),\n     TypeAliasId(TypeAliasId),\n     BuiltinType(BuiltinType),\n     MacroId(MacroId),\n@@ -466,6 +472,7 @@ impl_from!(\n     ConstId,\n     StaticId,\n     TraitId,\n+    TraitAliasId,\n     TypeAliasId,\n     BuiltinType\n     for ModuleDefId\n@@ -516,6 +523,7 @@ pub enum GenericDefId {\n     FunctionId(FunctionId),\n     AdtId(AdtId),\n     TraitId(TraitId),\n+    TraitAliasId(TraitAliasId),\n     TypeAliasId(TypeAliasId),\n     ImplId(ImplId),\n     // enum variants cannot have generics themselves, but their parent enums\n@@ -528,6 +536,7 @@ impl_from!(\n     FunctionId,\n     AdtId(StructId, EnumId, UnionId),\n     TraitId,\n+    TraitAliasId,\n     TypeAliasId,\n     ImplId,\n     EnumVariantId,\n@@ -555,6 +564,7 @@ pub enum AttrDefId {\n     StaticId(StaticId),\n     ConstId(ConstId),\n     TraitId(TraitId),\n+    TraitAliasId(TraitAliasId),\n     TypeAliasId(TypeAliasId),\n     MacroId(MacroId),\n     ImplId(ImplId),\n@@ -714,6 +724,7 @@ impl HasModule for GenericDefId {\n             GenericDefId::FunctionId(it) => it.lookup(db).module(db),\n             GenericDefId::AdtId(it) => it.module(db),\n             GenericDefId::TraitId(it) => it.lookup(db).container,\n+            GenericDefId::TraitAliasId(it) => it.lookup(db).container,\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n             GenericDefId::ImplId(it) => it.lookup(db).container,\n             GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container,\n@@ -747,6 +758,7 @@ impl ModuleDefId {\n             ModuleDefId::ConstId(id) => id.lookup(db).container.module(db),\n             ModuleDefId::StaticId(id) => id.lookup(db).module(db),\n             ModuleDefId::TraitId(id) => id.lookup(db).container,\n+            ModuleDefId::TraitAliasId(id) => id.lookup(db).container,\n             ModuleDefId::TypeAliasId(id) => id.lookup(db).module(db),\n             ModuleDefId::MacroId(id) => id.module(db),\n             ModuleDefId::BuiltinType(_) => return None,\n@@ -765,6 +777,7 @@ impl AttrDefId {\n             AttrDefId::StaticId(it) => it.lookup(db).module(db).krate,\n             AttrDefId::ConstId(it) => it.lookup(db).module(db).krate,\n             AttrDefId::TraitId(it) => it.lookup(db).container.krate,\n+            AttrDefId::TraitAliasId(it) => it.lookup(db).container.krate,\n             AttrDefId::TypeAliasId(it) => it.lookup(db).module(db).krate,\n             AttrDefId::ImplId(it) => it.lookup(db).container.krate,\n             AttrDefId::ExternBlockId(it) => it.lookup(db).container.krate,"}, {"sha": "70acc3442c30626afedf4ce15eb6f8e429d41c27", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -51,7 +51,8 @@ use crate::{\n     AdtId, AstId, AstIdWithPath, ConstLoc, EnumLoc, EnumVariantId, ExternBlockLoc, FunctionId,\n     FunctionLoc, ImplLoc, Intern, ItemContainerId, LocalModuleId, Macro2Id, Macro2Loc,\n     MacroExpander, MacroId, MacroRulesId, MacroRulesLoc, ModuleDefId, ModuleId, ProcMacroId,\n-    ProcMacroLoc, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc, UnresolvedMacro,\n+    ProcMacroLoc, StaticLoc, StructLoc, TraitAliasLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n+    UnresolvedMacro,\n };\n \n static GLOB_RECURSION_LIMIT: Limit = Limit::new(100);\n@@ -1709,6 +1710,20 @@ impl ModCollector<'_, '_> {\n                         false,\n                     );\n                 }\n+                ModItem::TraitAlias(id) => {\n+                    let it = &self.item_tree[id];\n+\n+                    let vis = resolve_vis(def_map, &self.item_tree[it.visibility]);\n+                    update_def(\n+                        self.def_collector,\n+                        TraitAliasLoc { container: module, id: ItemTreeId::new(self.tree_id, id) }\n+                            .intern(db)\n+                            .into(),\n+                        &it.name,\n+                        vis,\n+                        false,\n+                    );\n+                }\n                 ModItem::TypeAlias(id) => {\n                     let it = &self.item_tree[id];\n "}, {"sha": "13e6825f8210e263acda981ec86051c0dac1b721", "filename": "crates/hir-def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -223,6 +223,7 @@ pub type Ty = ();\n                     ModuleDefId::ConstId(it) => drop(db.const_data(it)),\n                     ModuleDefId::StaticId(it) => drop(db.static_data(it)),\n                     ModuleDefId::TraitId(it) => drop(db.trait_data(it)),\n+                    ModuleDefId::TraitAliasId(it) => drop(db.trait_alias_data(it)),\n                     ModuleDefId::TypeAliasId(it) => drop(db.type_alias_data(it)),\n                     ModuleDefId::EnumVariantId(_)\n                     | ModuleDefId::ModuleId(_)"}, {"sha": "043d49f768fcab1ebd3d2af23b68a6b0de216880", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -22,7 +22,8 @@ use crate::{\n     AdtId, AssocItemId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, ExternBlockId,\n     FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n     LocalModuleId, Lookup, Macro2Id, MacroId, MacroRulesId, ModuleDefId, ModuleId, ProcMacroId,\n-    StaticId, StructId, TraitId, TypeAliasId, TypeOrConstParamId, TypeParamId, VariantId,\n+    StaticId, StructId, TraitAliasId, TraitId, TypeAliasId, TypeOrConstParamId, TypeParamId,\n+    VariantId,\n };\n \n #[derive(Debug, Clone)]\n@@ -74,6 +75,7 @@ pub enum TypeNs {\n     TypeAliasId(TypeAliasId),\n     BuiltinType(BuiltinType),\n     TraitId(TraitId),\n+    TraitAliasId(TraitAliasId),\n     // Module belong to type ns, but the resolver is used when all module paths\n     // are fully resolved.\n     // ModuleId(ModuleId)\n@@ -402,6 +404,8 @@ impl Resolver {\n     }\n \n     pub fn traits_in_scope(&self, db: &dyn DefDatabase) -> FxHashSet<TraitId> {\n+        // FIXME(trait_alias): Trait alias brings aliased traits in scope! Note that supertraits of\n+        // aliased traits are NOT brought in scope (unless also aliased).\n         let mut traits = FxHashSet::default();\n \n         for scope in self.scopes() {\n@@ -650,6 +654,7 @@ impl ModuleItemMap {\n                 let ty = match module_def.take_types()? {\n                     ModuleDefId::AdtId(it) => TypeNs::AdtId(it),\n                     ModuleDefId::TraitId(it) => TypeNs::TraitId(it),\n+                    ModuleDefId::TraitAliasId(it) => TypeNs::TraitAliasId(it),\n                     ModuleDefId::TypeAliasId(it) => TypeNs::TypeAliasId(it),\n                     ModuleDefId::BuiltinType(it) => TypeNs::BuiltinType(it),\n \n@@ -687,6 +692,7 @@ fn to_value_ns(per_ns: PerNs) -> Option<ValueNs> {\n \n         ModuleDefId::AdtId(AdtId::EnumId(_) | AdtId::UnionId(_))\n         | ModuleDefId::TraitId(_)\n+        | ModuleDefId::TraitAliasId(_)\n         | ModuleDefId::TypeAliasId(_)\n         | ModuleDefId::BuiltinType(_)\n         | ModuleDefId::MacroId(_)\n@@ -704,6 +710,7 @@ fn to_type_ns(per_ns: PerNs) -> Option<TypeNs> {\n         ModuleDefId::BuiltinType(it) => TypeNs::BuiltinType(it),\n \n         ModuleDefId::TraitId(it) => TypeNs::TraitId(it),\n+        ModuleDefId::TraitAliasId(it) => TypeNs::TraitAliasId(it),\n \n         ModuleDefId::FunctionId(_)\n         | ModuleDefId::ConstId(_)\n@@ -788,6 +795,12 @@ impl HasResolver for TraitId {\n     }\n }\n \n+impl HasResolver for TraitAliasId {\n+    fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n+        self.lookup(db).container.resolver(db).push_generic_params_scope(db, self.into())\n+    }\n+}\n+\n impl<T: Into<AdtId> + Copy> HasResolver for T {\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n         let def = self.into();\n@@ -867,6 +880,7 @@ impl HasResolver for GenericDefId {\n             GenericDefId::FunctionId(inner) => inner.resolver(db),\n             GenericDefId::AdtId(adt) => adt.resolver(db),\n             GenericDefId::TraitId(inner) => inner.resolver(db),\n+            GenericDefId::TraitAliasId(inner) => inner.resolver(db),\n             GenericDefId::TypeAliasId(inner) => inner.resolver(db),\n             GenericDefId::ImplId(inner) => inner.resolver(db),\n             GenericDefId::EnumVariantId(inner) => inner.parent.resolver(db),"}, {"sha": "f4d1013ceb0444da732bb36cf241cd11a6f986c4", "filename": "crates/hir-ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -178,6 +178,7 @@ impl<'a> DeclValidator<'a> {\n                 AttrDefId::StaticId(sid) => Some(sid.lookup(self.db.upcast()).container.into()),\n                 AttrDefId::ConstId(cid) => Some(cid.lookup(self.db.upcast()).container.into()),\n                 AttrDefId::TraitId(tid) => Some(tid.lookup(self.db.upcast()).container.into()),\n+                AttrDefId::TraitAliasId(taid) => Some(taid.lookup(self.db.upcast()).container.into()),\n                 AttrDefId::ImplId(iid) => Some(iid.lookup(self.db.upcast()).container.into()),\n                 AttrDefId::ExternBlockId(id) => Some(id.lookup(self.db.upcast()).container.into()),\n                 // These warnings should not explore macro definitions at all"}, {"sha": "535e0ab115544cbf75893435e9761acc9ea8182c", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -868,7 +868,10 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME potentially resolve assoc type\n                 (self.err_ty(), None)\n             }\n-            TypeNs::AdtId(AdtId::EnumId(_)) | TypeNs::BuiltinType(_) | TypeNs::TraitId(_) => {\n+            TypeNs::AdtId(AdtId::EnumId(_))\n+            | TypeNs::BuiltinType(_)\n+            | TypeNs::TraitId(_)\n+            | TypeNs::TraitAliasId(_) => {\n                 // FIXME diagnostic\n                 (self.err_ty(), None)\n             }"}, {"sha": "23b15087e31658db9ad9c0ce265d59b4675afbea", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -522,6 +522,10 @@ impl<'a> TyLoweringContext<'a> {\n                 };\n                 return (ty, None);\n             }\n+            TypeNs::TraitAliasId(_) => {\n+                // FIXME(trait_alias): Implement trait alias.\n+                return (TyKind::Error.intern(Interner), None);\n+            }\n             TypeNs::GenericParam(param_id) => {\n                 let generics = generics(\n                     self.db.upcast(),\n@@ -877,6 +881,7 @@ impl<'a> TyLoweringContext<'a> {\n     ) -> Option<TraitRef> {\n         let resolved =\n             match self.resolver.resolve_path_in_type_ns_fully(self.db.upcast(), path.mod_path())? {\n+                // FIXME(trait_alias): We need to handle trait alias here.\n                 TypeNs::TraitId(tr) => tr,\n                 _ => return None,\n             };\n@@ -1442,6 +1447,7 @@ pub(crate) fn trait_environment_query(\n         GenericDefId::FunctionId(f) => Some(f.lookup(db.upcast()).container),\n         GenericDefId::AdtId(_) => None,\n         GenericDefId::TraitId(_) => None,\n+        GenericDefId::TraitAliasId(_) => None,\n         GenericDefId::TypeAliasId(t) => Some(t.lookup(db.upcast()).container),\n         GenericDefId::ImplId(_) => None,\n         GenericDefId::EnumVariantId(_) => None,"}, {"sha": "34d957e26ef5bf0ceb411972c50e277fb5d60800", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -315,7 +315,10 @@ fn parent_generic_def(db: &dyn DefDatabase, def: GenericDefId) -> Option<Generic\n         GenericDefId::TypeAliasId(it) => it.lookup(db).container,\n         GenericDefId::ConstId(it) => it.lookup(db).container,\n         GenericDefId::EnumVariantId(it) => return Some(it.parent.into()),\n-        GenericDefId::AdtId(_) | GenericDefId::TraitId(_) | GenericDefId::ImplId(_) => return None,\n+        GenericDefId::AdtId(_)\n+        | GenericDefId::TraitId(_)\n+        | GenericDefId::ImplId(_)\n+        | GenericDefId::TraitAliasId(_) => return None,\n     };\n \n     match container {"}, {"sha": "db0b84ef0887b7d53f87e9f68fcfbf61130ab333", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -14,7 +14,8 @@ use syntax::{ast, AstNode};\n \n use crate::{\n     Adt, AssocItem, Const, ConstParam, Enum, Field, Function, GenericParam, Impl, LifetimeParam,\n-    Macro, Module, ModuleDef, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n+    Macro, Module, ModuleDef, Static, Struct, Trait, TraitAlias, TypeAlias, TypeParam, Union,\n+    Variant,\n };\n \n pub trait HasAttrs {\n@@ -60,6 +61,7 @@ impl_has_attrs![\n     (Static, StaticId),\n     (Const, ConstId),\n     (Trait, TraitId),\n+    (TraitAlias, TraitAliasId),\n     (TypeAlias, TypeAliasId),\n     (Macro, MacroId),\n     (Function, FunctionId),\n@@ -134,6 +136,7 @@ fn resolve_doc_path(\n         AttrDefId::StaticId(it) => it.resolver(db.upcast()),\n         AttrDefId::ConstId(it) => it.resolver(db.upcast()),\n         AttrDefId::TraitId(it) => it.resolver(db.upcast()),\n+        AttrDefId::TraitAliasId(it) => it.resolver(db.upcast()),\n         AttrDefId::TypeAliasId(it) => it.resolver(db.upcast()),\n         AttrDefId::ImplId(it) => it.resolver(db.upcast()),\n         AttrDefId::ExternBlockId(it) => it.resolver(db.upcast()),"}, {"sha": "5aae92efd19ed7c8685960db82ff33a955b8986c", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -18,8 +18,8 @@ use hir_ty::{\n \n use crate::{\n     Adt, AsAssocItem, AssocItemContainer, Const, ConstParam, Enum, Field, Function, GenericParam,\n-    HasCrate, HasVisibility, LifetimeParam, Macro, Module, Static, Struct, Trait, TyBuilder, Type,\n-    TypeAlias, TypeOrConstParam, TypeParam, Union, Variant,\n+    HasCrate, HasVisibility, LifetimeParam, Macro, Module, Static, Struct, Trait, TraitAlias,\n+    TyBuilder, Type, TypeAlias, TypeOrConstParam, TypeParam, Union, Variant,\n };\n \n impl HirDisplay for Function {\n@@ -501,6 +501,22 @@ impl HirDisplay for Trait {\n     }\n }\n \n+impl HirDisplay for TraitAlias {\n+    fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n+        write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n+        let data = f.db.trait_alias_data(self.id);\n+        write!(f, \"trait {}\", data.name)?;\n+        let def_id = GenericDefId::TraitAliasId(self.id);\n+        write_generic_params(def_id, f)?;\n+        f.write_str(\" = \")?;\n+        // FIXME: Currently we lower every bounds in a trait alias as a trait bound on `Self` i.e.\n+        // `trait Foo = Bar` is stored and displayed as `trait Foo = where Self: Bar`, which might\n+        // be less readable.\n+        write_where_clause(def_id, f)?;\n+        Ok(())\n+    }\n+}\n+\n impl HirDisplay for TypeAlias {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n         write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;"}, {"sha": "4327691956755a49f9b8cee806b20f296a1866d2", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -37,6 +37,7 @@ from_id![\n     (hir_def::EnumId, crate::Enum),\n     (hir_def::TypeAliasId, crate::TypeAlias),\n     (hir_def::TraitId, crate::Trait),\n+    (hir_def::TraitAliasId, crate::TraitAlias),\n     (hir_def::StaticId, crate::Static),\n     (hir_def::ConstId, crate::Const),\n     (hir_def::FunctionId, crate::Function),\n@@ -110,6 +111,7 @@ impl From<ModuleDefId> for ModuleDef {\n             ModuleDefId::ConstId(it) => ModuleDef::Const(it.into()),\n             ModuleDefId::StaticId(it) => ModuleDef::Static(it.into()),\n             ModuleDefId::TraitId(it) => ModuleDef::Trait(it.into()),\n+            ModuleDefId::TraitAliasId(it) => ModuleDef::TraitAlias(it.into()),\n             ModuleDefId::TypeAliasId(it) => ModuleDef::TypeAlias(it.into()),\n             ModuleDefId::BuiltinType(it) => ModuleDef::BuiltinType(it.into()),\n             ModuleDefId::MacroId(it) => ModuleDef::Macro(it.into()),\n@@ -127,6 +129,7 @@ impl From<ModuleDef> for ModuleDefId {\n             ModuleDef::Const(it) => ModuleDefId::ConstId(it.into()),\n             ModuleDef::Static(it) => ModuleDefId::StaticId(it.into()),\n             ModuleDef::Trait(it) => ModuleDefId::TraitId(it.into()),\n+            ModuleDef::TraitAlias(it) => ModuleDefId::TraitAliasId(it.into()),\n             ModuleDef::TypeAlias(it) => ModuleDefId::TypeAliasId(it.into()),\n             ModuleDef::BuiltinType(it) => ModuleDefId::BuiltinType(it.into()),\n             ModuleDef::Macro(it) => ModuleDefId::MacroId(it.into()),\n@@ -172,6 +175,7 @@ impl From<GenericDef> for GenericDefId {\n             GenericDef::Function(it) => GenericDefId::FunctionId(it.id),\n             GenericDef::Adt(it) => GenericDefId::AdtId(it.into()),\n             GenericDef::Trait(it) => GenericDefId::TraitId(it.id),\n+            GenericDef::TraitAlias(it) => GenericDefId::TraitAliasId(it.id),\n             GenericDef::TypeAlias(it) => GenericDefId::TypeAliasId(it.id),\n             GenericDef::Impl(it) => GenericDefId::ImplId(it.id),\n             GenericDef::Variant(it) => GenericDefId::EnumVariantId(it.into()),\n@@ -186,6 +190,7 @@ impl From<GenericDefId> for GenericDef {\n             GenericDefId::FunctionId(it) => GenericDef::Function(it.into()),\n             GenericDefId::AdtId(it) => GenericDef::Adt(it.into()),\n             GenericDefId::TraitId(it) => GenericDef::Trait(it.into()),\n+            GenericDefId::TraitAliasId(it) => GenericDef::TraitAlias(it.into()),\n             GenericDefId::TypeAliasId(it) => GenericDef::TypeAlias(it.into()),\n             GenericDefId::ImplId(it) => GenericDef::Impl(it.into()),\n             GenericDefId::EnumVariantId(it) => GenericDef::Variant(it.into()),"}, {"sha": "a28b2d577aa12b1a04e492c132a122f67a6f9b6e", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -11,7 +11,7 @@ use syntax::ast;\n \n use crate::{\n     db::HirDatabase, Adt, Const, Enum, Field, FieldSource, Function, Impl, LifetimeParam, Macro,\n-    Module, Static, Struct, Trait, TypeAlias, TypeOrConstParam, Union, Variant,\n+    Module, Static, Struct, Trait, TraitAlias, TypeAlias, TypeOrConstParam, Union, Variant,\n };\n \n pub trait HasSource {\n@@ -122,6 +122,12 @@ impl HasSource for Trait {\n         Some(self.id.lookup(db.upcast()).source(db.upcast()))\n     }\n }\n+impl HasSource for TraitAlias {\n+    type Ast = ast::TraitAlias;\n+    fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n+        Some(self.id.lookup(db.upcast()).source(db.upcast()))\n+    }\n+}\n impl HasSource for TypeAlias {\n     type Ast = ast::TypeAlias;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n@@ -158,7 +164,7 @@ impl HasSource for Impl {\n }\n \n impl HasSource for TypeOrConstParam {\n-    type Ast = Either<ast::TypeOrConstParam, ast::Trait>;\n+    type Ast = Either<ast::TypeOrConstParam, ast::TraitOrAlias>;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         let child_source = self.id.parent.child_source(db.upcast());\n         Some(child_source.map(|it| it[self.id.local_id].clone()))"}, {"sha": "27f35bd264468cf567e5bd678045f4a66945ea57", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -53,7 +53,7 @@ use hir_def::{\n     AdtId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n     EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n     LocalEnumVariantId, LocalFieldId, Lookup, MacroExpander, MacroId, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeOrConstParamId, TypeParamId, UnionId,\n+    TraitAliasId, TraitId, TypeAliasId, TypeOrConstParamId, TypeParamId, UnionId,\n };\n use hir_expand::{name::name, MacroCallKind};\n use hir_ty::{\n@@ -272,6 +272,7 @@ pub enum ModuleDef {\n     Const(Const),\n     Static(Static),\n     Trait(Trait),\n+    TraitAlias(TraitAlias),\n     TypeAlias(TypeAlias),\n     BuiltinType(BuiltinType),\n     Macro(Macro),\n@@ -284,6 +285,7 @@ impl_from!(\n     Const,\n     Static,\n     Trait,\n+    TraitAlias,\n     TypeAlias,\n     BuiltinType,\n     Macro\n@@ -310,6 +312,7 @@ impl ModuleDef {\n             ModuleDef::Const(it) => Some(it.module(db)),\n             ModuleDef::Static(it) => Some(it.module(db)),\n             ModuleDef::Trait(it) => Some(it.module(db)),\n+            ModuleDef::TraitAlias(it) => Some(it.module(db)),\n             ModuleDef::TypeAlias(it) => Some(it.module(db)),\n             ModuleDef::Macro(it) => Some(it.module(db)),\n             ModuleDef::BuiltinType(_) => None,\n@@ -338,6 +341,7 @@ impl ModuleDef {\n             ModuleDef::Const(it) => it.name(db)?,\n             ModuleDef::Adt(it) => it.name(db),\n             ModuleDef::Trait(it) => it.name(db),\n+            ModuleDef::TraitAlias(it) => it.name(db),\n             ModuleDef::Function(it) => it.name(db),\n             ModuleDef::Variant(it) => it.name(db),\n             ModuleDef::TypeAlias(it) => it.name(db),\n@@ -356,6 +360,7 @@ impl ModuleDef {\n                 Adt::Union(it) => it.id.into(),\n             },\n             ModuleDef::Trait(it) => it.id.into(),\n+            ModuleDef::TraitAlias(it) => it.id.into(),\n             ModuleDef::Function(it) => it.id.into(),\n             ModuleDef::TypeAlias(it) => it.id.into(),\n             ModuleDef::Module(it) => it.id.into(),\n@@ -398,6 +403,7 @@ impl ModuleDef {\n             ModuleDef::Module(_)\n             | ModuleDef::Adt(_)\n             | ModuleDef::Trait(_)\n+            | ModuleDef::TraitAlias(_)\n             | ModuleDef::TypeAlias(_)\n             | ModuleDef::Macro(_)\n             | ModuleDef::BuiltinType(_) => None,\n@@ -413,6 +419,7 @@ impl ModuleDef {\n             ModuleDef::Const(it) => it.attrs(db),\n             ModuleDef::Static(it) => it.attrs(db),\n             ModuleDef::Trait(it) => it.attrs(db),\n+            ModuleDef::TraitAlias(it) => it.attrs(db),\n             ModuleDef::TypeAlias(it) => it.attrs(db),\n             ModuleDef::Macro(it) => it.attrs(db),\n             ModuleDef::BuiltinType(_) => return None,\n@@ -429,6 +436,7 @@ impl HasVisibility for ModuleDef {\n             ModuleDef::Const(it) => it.visibility(db),\n             ModuleDef::Static(it) => it.visibility(db),\n             ModuleDef::Trait(it) => it.visibility(db),\n+            ModuleDef::TraitAlias(it) => it.visibility(db),\n             ModuleDef::TypeAlias(it) => it.visibility(db),\n             ModuleDef::Variant(it) => it.visibility(db),\n             ModuleDef::Macro(it) => it.visibility(db),\n@@ -1934,6 +1942,27 @@ impl HasVisibility for Trait {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TraitAlias {\n+    pub(crate) id: TraitAliasId,\n+}\n+\n+impl TraitAlias {\n+    pub fn module(self, db: &dyn HirDatabase) -> Module {\n+        Module { id: self.id.lookup(db.upcast()).container }\n+    }\n+\n+    pub fn name(self, db: &dyn HirDatabase) -> Name {\n+        db.trait_alias_data(self.id).name.clone()\n+    }\n+}\n+\n+impl HasVisibility for TraitAlias {\n+    fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n+        db.trait_alias_data(self.id).visibility.resolve(db.upcast(), &self.id.resolver(db.upcast()))\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAlias {\n     pub(crate) id: TypeAliasId,\n@@ -2306,6 +2335,7 @@ pub enum GenericDef {\n     Function(Function),\n     Adt(Adt),\n     Trait(Trait),\n+    TraitAlias(TraitAlias),\n     TypeAlias(TypeAlias),\n     Impl(Impl),\n     // enum variants cannot have generics themselves, but their parent enums\n@@ -2318,6 +2348,7 @@ impl_from!(\n     Function,\n     Adt(Struct, Enum, Union),\n     Trait,\n+    TraitAlias,\n     TypeAlias,\n     Impl,\n     Variant,\n@@ -4066,6 +4097,12 @@ impl HasCrate for Trait {\n     }\n }\n \n+impl HasCrate for TraitAlias {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n impl HasCrate for Static {\n     fn krate(&self, db: &dyn HirDatabase) -> Crate {\n         self.module(db).krate()"}, {"sha": "be2dffc29cccfc97872d77334cd0fdc341e6e4eb", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -68,7 +68,8 @@ impl PathResolution {\n                 | ModuleDef::Function(_)\n                 | ModuleDef::Module(_)\n                 | ModuleDef::Static(_)\n-                | ModuleDef::Trait(_),\n+                | ModuleDef::Trait(_)\n+                | ModuleDef::TraitAlias(_),\n             ) => None,\n             PathResolution::Def(ModuleDef::TypeAlias(alias)) => {\n                 Some(TypeNs::TypeAliasId((*alias).into()))\n@@ -1330,6 +1331,7 @@ impl<'db> SemanticsImpl<'db> {\n                 })\n             }\n             ChildContainer::TraitId(it) => it.resolver(self.db.upcast()),\n+            ChildContainer::TraitAliasId(it) => it.resolver(self.db.upcast()),\n             ChildContainer::ImplId(it) => it.resolver(self.db.upcast()),\n             ChildContainer::ModuleId(it) => it.resolver(self.db.upcast()),\n             ChildContainer::EnumId(it) => it.resolver(self.db.upcast()),\n@@ -1556,6 +1558,7 @@ to_def_impls![\n     (crate::Enum, ast::Enum, enum_to_def),\n     (crate::Union, ast::Union, union_to_def),\n     (crate::Trait, ast::Trait, trait_to_def),\n+    (crate::TraitAlias, ast::TraitAlias, trait_alias_to_def),\n     (crate::Impl, ast::Impl, impl_to_def),\n     (crate::TypeAlias, ast::TypeAlias, type_alias_to_def),\n     (crate::Const, ast::Const, const_to_def),"}, {"sha": "ddfec20e3f9ab0277447d474cb5b895418020667", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -93,7 +93,7 @@ use hir_def::{\n     keys::{self, Key},\n     AdtId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId,\n     GenericDefId, GenericParamId, ImplId, LifetimeParamId, MacroId, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeParamId, UnionId, VariantId,\n+    TraitAliasId, TraitId, TypeAliasId, TypeParamId, UnionId, VariantId,\n };\n use hir_expand::{attrs::AttrId, name::AsName, HirFileId, MacroCallId};\n use rustc_hash::FxHashMap;\n@@ -159,6 +159,12 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn trait_to_def(&mut self, src: InFile<ast::Trait>) -> Option<TraitId> {\n         self.to_def(src, keys::TRAIT)\n     }\n+    pub(super) fn trait_alias_to_def(\n+        &mut self,\n+        src: InFile<ast::TraitAlias>,\n+    ) -> Option<TraitAliasId> {\n+        self.to_def(src, keys::TRAIT_ALIAS)\n+    }\n     pub(super) fn impl_to_def(&mut self, src: InFile<ast::Impl>) -> Option<ImplId> {\n         self.to_def(src, keys::IMPL)\n     }\n@@ -353,6 +359,9 @@ impl SourceToDefCtx<'_, '_> {\n             match item {\n                 ast::Item::Module(it) => self.module_to_def(container.with_value(it))?.into(),\n                 ast::Item::Trait(it) => self.trait_to_def(container.with_value(it))?.into(),\n+                ast::Item::TraitAlias(it) => {\n+                    self.trait_alias_to_def(container.with_value(it))?.into()\n+                }\n                 ast::Item::Impl(it) => self.impl_to_def(container.with_value(it))?.into(),\n                 ast::Item::Enum(it) => self.enum_to_def(container.with_value(it))?.into(),\n                 ast::Item::TypeAlias(it) => {\n@@ -400,6 +409,9 @@ impl SourceToDefCtx<'_, '_> {\n                 ast::Item::Struct(it) => self.struct_to_def(InFile::new(file_id, it))?.into(),\n                 ast::Item::Enum(it) => self.enum_to_def(InFile::new(file_id, it))?.into(),\n                 ast::Item::Trait(it) => self.trait_to_def(InFile::new(file_id, it))?.into(),\n+                ast::Item::TraitAlias(it) => {\n+                    self.trait_alias_to_def(InFile::new(file_id, it))?.into()\n+                }\n                 ast::Item::TypeAlias(it) => {\n                     self.type_alias_to_def(InFile::new(file_id, it))?.into()\n                 }\n@@ -435,6 +447,7 @@ pub(crate) enum ChildContainer {\n     DefWithBodyId(DefWithBodyId),\n     ModuleId(ModuleId),\n     TraitId(TraitId),\n+    TraitAliasId(TraitAliasId),\n     ImplId(ImplId),\n     EnumId(EnumId),\n     VariantId(VariantId),\n@@ -447,6 +460,7 @@ impl_from! {\n     DefWithBodyId,\n     ModuleId,\n     TraitId,\n+    TraitAliasId,\n     ImplId,\n     EnumId,\n     VariantId,\n@@ -462,6 +476,7 @@ impl ChildContainer {\n             ChildContainer::DefWithBodyId(it) => it.child_by_source(db, file_id),\n             ChildContainer::ModuleId(it) => it.child_by_source(db, file_id),\n             ChildContainer::TraitId(it) => it.child_by_source(db, file_id),\n+            ChildContainer::TraitAliasId(_) => DynMap::default(),\n             ChildContainer::ImplId(it) => it.child_by_source(db, file_id),\n             ChildContainer::EnumId(it) => it.child_by_source(db, file_id),\n             ChildContainer::VariantId(it) => it.child_by_source(db, file_id),"}, {"sha": "ada529fa74c214c715417e0f3cd5cdc89333dbfb", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -51,7 +51,7 @@ use syntax::{\n use crate::{\n     db::HirDatabase, semantics::PathResolution, Adt, AssocItem, BindingMode, BuiltinAttr,\n     BuiltinType, Callable, Const, DeriveHelper, Field, Function, Local, Macro, ModuleDef, Static,\n-    Struct, ToolModule, Trait, Type, TypeAlias, Variant,\n+    Struct, ToolModule, Trait, TraitAlias, Type, TypeAlias, Variant,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -978,6 +978,7 @@ fn resolve_hir_path_(\n             TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(BuiltinType::from(it).into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n+            TypeNs::TraitAliasId(it) => PathResolution::Def(TraitAlias::from(it).into()),\n         };\n         match unresolved {\n             Some(unresolved) => resolver\n@@ -1065,6 +1066,7 @@ fn resolve_hir_path_qualifier(\n             TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(BuiltinType::from(it).into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n+            TypeNs::TraitAliasId(it) => PathResolution::Def(TraitAlias::from(it).into()),\n         })\n         .or_else(|| {\n             resolver"}, {"sha": "a9afa1c6f4519bc4eef7a4795bba209fcd8c1d1b", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -68,6 +68,7 @@ pub enum FileSymbolKind {\n     Static,\n     Struct,\n     Trait,\n+    TraitAlias,\n     TypeAlias,\n     Union,\n }\n@@ -153,6 +154,9 @@ impl<'a> SymbolCollector<'a> {\n                     self.push_decl(id, FileSymbolKind::Trait);\n                     self.collect_from_trait(id);\n                 }\n+                ModuleDefId::TraitAliasId(id) => {\n+                    self.push_decl(id, FileSymbolKind::TraitAlias);\n+                }\n                 ModuleDefId::TypeAliasId(id) => {\n                     self.push_decl_assoc(id, FileSymbolKind::TypeAlias);\n                 }"}, {"sha": "4c61678eab4f2318d2ed946d76f26988cfd7414d", "filename": "crates/ide-assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -192,6 +192,10 @@ fn target_data_for_def(\n             target_name = Some(t.name(db));\n             offset_target_and_file_id(db, t)?\n         }\n+        hir::ModuleDef::TraitAlias(t) => {\n+            target_name = Some(t.name(db));\n+            offset_target_and_file_id(db, t)?\n+        }\n         hir::ModuleDef::TypeAlias(t) => {\n             target_name = Some(t.name(db));\n             offset_target_and_file_id(db, t)?"}, {"sha": "69c05a76df4cea54332fe5b348530415ab52f6dd", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -33,7 +33,9 @@ pub(crate) fn complete_type_path(\n             // Don't suggest attribute macros and derives.\n             ScopeDef::ModuleDef(Macro(mac)) => mac.is_fn_like(ctx.db),\n             // Type things are fine\n-            ScopeDef::ModuleDef(BuiltinType(_) | Adt(_) | Module(_) | Trait(_) | TypeAlias(_))\n+            ScopeDef::ModuleDef(\n+                BuiltinType(_) | Adt(_) | Module(_) | Trait(_) | TraitAlias(_) | TypeAlias(_),\n+            )\n             | ScopeDef::AdtSelfType(_)\n             | ScopeDef::Unknown\n             | ScopeDef::GenericParam(TypeParam(_)) => true,"}, {"sha": "92e64cd123830b69f9fbf0d72adf1f1af0cfe429", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -416,6 +416,7 @@ impl<'a> CompletionContext<'a> {\n                 hir::ModuleDef::Const(it) => self.is_visible(it),\n                 hir::ModuleDef::Static(it) => self.is_visible(it),\n                 hir::ModuleDef::Trait(it) => self.is_visible(it),\n+                hir::ModuleDef::TraitAlias(it) => self.is_visible(it),\n                 hir::ModuleDef::TypeAlias(it) => self.is_visible(it),\n                 hir::ModuleDef::Macro(it) => self.is_visible(it),\n                 hir::ModuleDef::BuiltinType(_) => Visible::Yes,"}, {"sha": "bb9fa7ccaccc6b92c4eb40ffc3cfbb858384e45e", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -288,7 +288,7 @@ impl_from!(SymbolKind for CompletionItemKind);\n \n impl CompletionItemKind {\n     #[cfg(test)]\n-    pub(crate) fn tag(&self) -> &'static str {\n+    pub(crate) fn tag(self) -> &'static str {\n         match self {\n             CompletionItemKind::SymbolKind(kind) => match kind {\n                 SymbolKind::Attribute => \"at\",\n@@ -312,6 +312,7 @@ impl CompletionItemKind {\n                 SymbolKind::Struct => \"st\",\n                 SymbolKind::ToolModule => \"tm\",\n                 SymbolKind::Trait => \"tt\",\n+                SymbolKind::TraitAlias => \"tr\",\n                 SymbolKind::TypeAlias => \"ta\",\n                 SymbolKind::TypeParam => \"tp\",\n                 SymbolKind::Union => \"un\","}, {"sha": "c1f51aabb96761d99dadf3536cc161b9f84193c4", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -367,6 +367,9 @@ fn res_to_kind(resolution: ScopeDef) -> CompletionItemKind {\n         ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::SymbolKind(SymbolKind::Const),\n         ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::SymbolKind(SymbolKind::Static),\n         ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::SymbolKind(SymbolKind::Trait),\n+        ScopeDef::ModuleDef(TraitAlias(..)) => {\n+            CompletionItemKind::SymbolKind(SymbolKind::TraitAlias)\n+        }\n         ScopeDef::ModuleDef(TypeAlias(..)) => CompletionItemKind::SymbolKind(SymbolKind::TypeAlias),\n         ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n         ScopeDef::GenericParam(param) => CompletionItemKind::SymbolKind(match param {"}, {"sha": "0da4e729a8ddd450231c54f05d29f878b60d93c3", "filename": "crates/ide-db/src/active_parameter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Factive_parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Factive_parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Factive_parameter.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -96,6 +96,7 @@ pub fn generic_def_for_node(\n                     hir::PathResolution::Def(hir::ModuleDef::Adt(it)) => it.into(),\n                     hir::PathResolution::Def(hir::ModuleDef::Function(it)) => it.into(),\n                     hir::PathResolution::Def(hir::ModuleDef::Trait(it)) => it.into(),\n+                    hir::PathResolution::Def(hir::ModuleDef::TraitAlias(it)) => it.into(),\n                     hir::PathResolution::Def(hir::ModuleDef::TypeAlias(it)) => it.into(),\n                     hir::PathResolution::Def(hir::ModuleDef::Variant(it)) => it.into(),\n                     hir::PathResolution::Def(hir::ModuleDef::BuiltinType(_))"}, {"sha": "cce33dcfe4690f2162eec9d17c3765466b6169a7", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -9,7 +9,8 @@ use arrayvec::ArrayVec;\n use hir::{\n     Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Crate, DeriveHelper, Field,\n     Function, GenericParam, HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef,\n-    Name, PathResolution, Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n+    Name, PathResolution, Semantics, Static, ToolModule, Trait, TraitAlias, TypeAlias, Variant,\n+    Visibility,\n };\n use stdx::impl_from;\n use syntax::{\n@@ -31,6 +32,7 @@ pub enum Definition {\n     Const(Const),\n     Static(Static),\n     Trait(Trait),\n+    TraitAlias(TraitAlias),\n     TypeAlias(TypeAlias),\n     BuiltinType(BuiltinType),\n     SelfType(Impl),\n@@ -64,6 +66,7 @@ impl Definition {\n             Definition::Const(it) => it.module(db),\n             Definition::Static(it) => it.module(db),\n             Definition::Trait(it) => it.module(db),\n+            Definition::TraitAlias(it) => it.module(db),\n             Definition::TypeAlias(it) => it.module(db),\n             Definition::Variant(it) => it.module(db),\n             Definition::SelfType(it) => it.module(db),\n@@ -87,6 +90,7 @@ impl Definition {\n             Definition::Const(it) => it.visibility(db),\n             Definition::Static(it) => it.visibility(db),\n             Definition::Trait(it) => it.visibility(db),\n+            Definition::TraitAlias(it) => it.visibility(db),\n             Definition::TypeAlias(it) => it.visibility(db),\n             Definition::Variant(it) => it.visibility(db),\n             Definition::BuiltinType(_) => Visibility::Public,\n@@ -113,6 +117,7 @@ impl Definition {\n             Definition::Const(it) => it.name(db)?,\n             Definition::Static(it) => it.name(db),\n             Definition::Trait(it) => it.name(db),\n+            Definition::TraitAlias(it) => it.name(db),\n             Definition::TypeAlias(it) => it.name(db),\n             Definition::BuiltinType(it) => it.name(),\n             Definition::SelfType(_) => return None,\n@@ -300,6 +305,7 @@ impl NameClass {\n                 ast::Item::Module(it) => Definition::Module(sema.to_def(&it)?),\n                 ast::Item::Static(it) => Definition::Static(sema.to_def(&it)?),\n                 ast::Item::Trait(it) => Definition::Trait(sema.to_def(&it)?),\n+                ast::Item::TraitAlias(it) => Definition::TraitAlias(sema.to_def(&it)?),\n                 ast::Item::TypeAlias(it) => Definition::TypeAlias(sema.to_def(&it)?),\n                 ast::Item::Enum(it) => Definition::Adt(hir::Adt::Enum(sema.to_def(&it)?)),\n                 ast::Item::Struct(it) => Definition::Adt(hir::Adt::Struct(sema.to_def(&it)?)),\n@@ -542,7 +548,7 @@ impl NameRefClass {\n }\n \n impl_from!(\n-    Field, Module, Function, Adt, Variant, Const, Static, Trait, TypeAlias, BuiltinType, Local,\n+    Field, Module, Function, Adt, Variant, Const, Static, Trait, TraitAlias, TypeAlias, BuiltinType, Local,\n     GenericParam, Label, Macro\n     for Definition\n );\n@@ -599,6 +605,7 @@ impl From<ModuleDef> for Definition {\n             ModuleDef::Const(it) => Definition::Const(it),\n             ModuleDef::Static(it) => Definition::Static(it),\n             ModuleDef::Trait(it) => Definition::Trait(it),\n+            ModuleDef::TraitAlias(it) => Definition::TraitAlias(it),\n             ModuleDef::TypeAlias(it) => Definition::TypeAlias(it),\n             ModuleDef::Macro(it) => Definition::Macro(it),\n             ModuleDef::BuiltinType(it) => Definition::BuiltinType(it),\n@@ -616,6 +623,7 @@ impl From<Definition> for Option<ItemInNs> {\n             Definition::Const(it) => ModuleDef::Const(it),\n             Definition::Static(it) => ModuleDef::Static(it),\n             Definition::Trait(it) => ModuleDef::Trait(it),\n+            Definition::TraitAlias(it) => ModuleDef::TraitAlias(it),\n             Definition::TypeAlias(it) => ModuleDef::TypeAlias(it),\n             Definition::BuiltinType(it) => ModuleDef::BuiltinType(it),\n             _ => return None,"}, {"sha": "4c53ba3b830338a23e35d7b07ba7b49ec8e36fa4", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -191,6 +191,7 @@ pub enum SymbolKind {\n     Struct,\n     ToolModule,\n     Trait,\n+    TraitAlias,\n     TypeAlias,\n     TypeParam,\n     Union,\n@@ -221,6 +222,7 @@ impl From<FileSymbolKind> for SymbolKind {\n             FileSymbolKind::Static => SymbolKind::Static,\n             FileSymbolKind::Struct => SymbolKind::Struct,\n             FileSymbolKind::Trait => SymbolKind::Trait,\n+            FileSymbolKind::TraitAlias => SymbolKind::TraitAlias,\n             FileSymbolKind::TypeAlias => SymbolKind::TypeAlias,\n             FileSymbolKind::Union => SymbolKind::Union,\n         }"}, {"sha": "4179f1bd4f36540ab4e926b6ada43eb1172304b3", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -119,6 +119,7 @@ impl Definition {\n             Definition::Const(it) => name_range(it, sema),\n             Definition::Static(it) => name_range(it, sema),\n             Definition::Trait(it) => name_range(it, sema),\n+            Definition::TraitAlias(it) => name_range(it, sema),\n             Definition::TypeAlias(it) => name_range(it, sema),\n             Definition::Local(local) => {\n                 let src = local.source(sema.db);"}, {"sha": "bcdaac4cf8262b47641a402be297aa5759e6bd25", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -261,6 +261,7 @@ impl Definition {\n                 hir::GenericDef::Function(it) => it.source(db).map(|src| src.syntax().cloned()),\n                 hir::GenericDef::Adt(it) => it.source(db).map(|src| src.syntax().cloned()),\n                 hir::GenericDef::Trait(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::TraitAlias(it) => it.source(db).map(|src| src.syntax().cloned()),\n                 hir::GenericDef::TypeAlias(it) => it.source(db).map(|src| src.syntax().cloned()),\n                 hir::GenericDef::Impl(it) => it.source(db).map(|src| src.syntax().cloned()),\n                 hir::GenericDef::Variant(it) => it.source(db).map(|src| src.syntax().cloned()),"}, {"sha": "fae25f3102333b0764e27af203de984aa75a273d", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -192,6 +192,7 @@ pub(crate) fn resolve_doc_path_for_def(\n         Definition::Const(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Static(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Trait(it) => it.resolve_doc_path(db, link, ns),\n+        Definition::TraitAlias(it) => it.resolve_doc_path(db, link, ns),\n         Definition::TypeAlias(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Macro(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n@@ -504,6 +505,7 @@ fn filename_and_frag_for_def(\n             None => String::from(\"index.html\"),\n         },\n         Definition::Trait(t) => format!(\"trait.{}.html\", t.name(db)),\n+        Definition::TraitAlias(t) => format!(\"traitalias.{}.html\", t.name(db)),\n         Definition::TypeAlias(t) => format!(\"type.{}.html\", t.name(db)),\n         Definition::BuiltinType(t) => format!(\"primitive.{}.html\", t.name()),\n         Definition::Function(f) => format!(\"fn.{}.html\", f.name(db)),"}, {"sha": "c64b60d2936a0d42d2a76fa256c47769a62b995d", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -454,6 +454,7 @@ pub(super) fn definition(\n             Some(body.to_string())\n         }),\n         Definition::Trait(it) => label_and_docs(db, it),\n+        Definition::TraitAlias(it) => label_and_docs(db, it),\n         Definition::TypeAlias(it) => label_and_docs(db, it),\n         Definition::BuiltinType(it) => {\n             return famous_defs"}, {"sha": "349e79ecfdda078eb746954204dcf95e4ec072e7", "filename": "crates/ide/src/moniker.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -208,6 +208,9 @@ pub(crate) fn def_to_moniker(\n         Definition::Trait(trait_) => {\n             MonikerDescriptor { name: trait_.name(db), desc: MonikerDescriptorKind::Type }\n         }\n+        Definition::TraitAlias(ta) => {\n+            MonikerDescriptor { name: ta.name(db), desc: MonikerDescriptorKind::Type }\n+        }\n         Definition::TypeAlias(ta) => {\n             MonikerDescriptor { name: ta.name(db), desc: MonikerDescriptorKind::TypeParameter }\n         }"}, {"sha": "9787724b45ec74f38c71ad2d8228337f5f76bfc3", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -192,6 +192,7 @@ impl TryToNav for Definition {\n             Definition::Const(it) => it.try_to_nav(db),\n             Definition::Static(it) => it.try_to_nav(db),\n             Definition::Trait(it) => it.try_to_nav(db),\n+            Definition::TraitAlias(it) => it.try_to_nav(db),\n             Definition::TypeAlias(it) => it.try_to_nav(db),\n             Definition::BuiltinType(_) => None,\n             Definition::ToolModule(_) => None,\n@@ -212,6 +213,7 @@ impl TryToNav for hir::ModuleDef {\n             hir::ModuleDef::Const(it) => it.try_to_nav(db),\n             hir::ModuleDef::Static(it) => it.try_to_nav(db),\n             hir::ModuleDef::Trait(it) => it.try_to_nav(db),\n+            hir::ModuleDef::TraitAlias(it) => it.try_to_nav(db),\n             hir::ModuleDef::TypeAlias(it) => it.try_to_nav(db),\n             hir::ModuleDef::Macro(it) => it.try_to_nav(db),\n             hir::ModuleDef::BuiltinType(_) => None,\n@@ -249,6 +251,9 @@ impl ToNavFromAst for hir::TypeAlias {\n impl ToNavFromAst for hir::Trait {\n     const KIND: SymbolKind = SymbolKind::Trait;\n }\n+impl ToNavFromAst for hir::TraitAlias {\n+    const KIND: SymbolKind = SymbolKind::TraitAlias;\n+}\n \n impl<D> TryToNav for D\n where"}, {"sha": "d32ae83c8f7bea5928dee540e50bc5c2f45e38db", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -252,6 +252,10 @@ fn signature_help_for_generics(\n             res.doc = it.docs(db).map(|it| it.into());\n             format_to!(res.signature, \"trait {}\", it.name(db));\n         }\n+        hir::GenericDef::TraitAlias(it) => {\n+            res.doc = it.docs(db).map(|it| it.into());\n+            format_to!(res.signature, \"trait {}\", it.name(db));\n+        }\n         hir::GenericDef::TypeAlias(it) => {\n             res.doc = it.docs(db).map(|it| it.into());\n             format_to!(res.signature, \"type {}\", it.name(db));"}, {"sha": "390b7efdeb0bcea4f2610693037d4e8556f21db3", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -410,6 +410,7 @@ fn highlight_def(\n             h\n         }\n         Definition::Trait(_) => Highlight::new(HlTag::Symbol(SymbolKind::Trait)),\n+        Definition::TraitAlias(_) => Highlight::new(HlTag::Symbol(SymbolKind::TraitAlias)),\n         Definition::TypeAlias(type_) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::TypeAlias));\n "}, {"sha": "3c4cfc78152ddd4e22222b1d9d580c6d0cc4bb47", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -274,6 +274,7 @@ fn module_def_to_hl_tag(def: Definition) -> HlTag {\n         Definition::Const(_) => SymbolKind::Const,\n         Definition::Static(_) => SymbolKind::Static,\n         Definition::Trait(_) => SymbolKind::Trait,\n+        Definition::TraitAlias(_) => SymbolKind::TraitAlias,\n         Definition::TypeAlias(_) => SymbolKind::TypeAlias,\n         Definition::BuiltinType(_) => return HlTag::BuiltinType,\n         Definition::Macro(_) => SymbolKind::Macro,"}, {"sha": "a81c4ee0cbd417b1d777374914cd2a5c14c31b13", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -150,6 +150,7 @@ impl HlTag {\n                 SymbolKind::Struct => \"struct\",\n                 SymbolKind::ToolModule => \"tool_module\",\n                 SymbolKind::Trait => \"trait\",\n+                SymbolKind::TraitAlias => \"trait_alias\",\n                 SymbolKind::TypeAlias => \"type_alias\",\n                 SymbolKind::TypeParam => \"type_param\",\n                 SymbolKind::Union => \"union\","}, {"sha": "7d97b69f8ea053517e0cc692e71381bec579344d", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c957f97388afd2a21ec3364ea4ce8c269cfbcd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=29c957f97388afd2a21ec3364ea4ce8c269cfbcd", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Struct => lsp_types::SymbolKind::STRUCT,\n         SymbolKind::Enum => lsp_types::SymbolKind::ENUM,\n         SymbolKind::Variant => lsp_types::SymbolKind::ENUM_MEMBER,\n-        SymbolKind::Trait => lsp_types::SymbolKind::INTERFACE,\n+        SymbolKind::Trait | SymbolKind::TraitAlias => lsp_types::SymbolKind::INTERFACE,\n         SymbolKind::Macro\n         | SymbolKind::BuiltinAttr\n         | SymbolKind::Attribute\n@@ -135,6 +135,7 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::Static => lsp_types::CompletionItemKind::VALUE,\n             SymbolKind::Struct => lsp_types::CompletionItemKind::STRUCT,\n             SymbolKind::Trait => lsp_types::CompletionItemKind::INTERFACE,\n+            SymbolKind::TraitAlias => lsp_types::CompletionItemKind::INTERFACE,\n             SymbolKind::TypeAlias => lsp_types::CompletionItemKind::STRUCT,\n             SymbolKind::TypeParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n             SymbolKind::Union => lsp_types::CompletionItemKind::STRUCT,\n@@ -656,6 +657,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::Union => semantic_tokens::UNION,\n             SymbolKind::TypeAlias => semantic_tokens::TYPE_ALIAS,\n             SymbolKind::Trait => semantic_tokens::INTERFACE,\n+            SymbolKind::TraitAlias => semantic_tokens::INTERFACE,\n             SymbolKind::Macro => semantic_tokens::MACRO,\n             SymbolKind::BuiltinAttr => semantic_tokens::BUILTIN_ATTRIBUTE,\n             SymbolKind::ToolModule => semantic_tokens::TOOL_MODULE,"}]}