{"sha": "0463566f27dfc5979b5b12eb7cea670a4e3f991c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NjM1NjZmMjdkZmM1OTc5YjViMTJlYjdjZWE2NzBhNGUzZjk5MWM=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2017-08-20T15:40:07Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2017-08-25T20:13:02Z"}, "message": "syntax: clarify field name\n\nThe value of this field is meant to indicate whether or not the\ncrate is rustc's libtest itself - not whether or not it is a test\ncrate generally.", "tree": {"sha": "a0f7fae4d6c7d2cb9345f29067dee578ababaeff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f7fae4d6c7d2cb9345f29067dee578ababaeff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0463566f27dfc5979b5b12eb7cea670a4e3f991c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/uKQcsWiEQj1Z6uEHB6YzI4Xu4kFAlmghSUACgkQHB6YzI4X\nu4loGA/8DczUZ/V+vvNovNRZK23v/h9/mnxdoJQGmq/aHB6J4uOfptadfINkk3Xr\npL1BFrjgBalXvksAmPpE/PqVMTwCcTYOiYF/yjlQJGuqTFF6DnFiUxuUbZzQyA0e\nZs6xJE0hyTLj2KnyrC6VHj7eLh/jxlHZfdzZInEvvwa4rJDiHRRKjflczz1sA9P2\nuePRRUb374iSJwYbw7yV9rot8wj8dCt+YhwPihE5H5j4YcjxDqo+IKlIkHSSAYCS\nLhDSQBsXwikmJERRZdgi3wUdxsn8cIRzpnKwKrgoYp71I0cacXkmewki3T5vel54\nnZ6OjZutenvvKKsD3vS6biLsaZBUQNvkUW+V82phDJZff7lFMyNTyTB3MovQAbhb\nzqam0oJE0VWrP0ebb3SAnaXLwU5w6dePtnAT2fF51nb/BbFw9ciiftgqc6+fsWDq\nh+KQYH2A0ocQeh2a+huwxF6g7XeudbIGeJ6QRwUIfBpmKZkQ7N4FnwLMBILq2e3I\nkHmhBGMgswVxNphqvP8D43qdMm35dL8ZcUoxXSVVT+s1Dmf41+KPQ695d8dB3skD\nj3hr4/woFMyIwRM+4jP6PzF2eJRrIoBjgmJU0/vhYTs7nCNK926/yRJ+BuKqh3rT\n0q1Xf2zWwVGsip0C5y78RwrsUPvgBOQihZirpYepUZFJF07bpSg=\n=JvR8\n-----END PGP SIGNATURE-----", "payload": "tree a0f7fae4d6c7d2cb9345f29067dee578ababaeff\nparent f2fb45723ac7a1bfa897802256452d603a7adb2a\nauthor Tamir Duberstein <tamird@gmail.com> 1503243607 -0700\ncommitter Tamir Duberstein <tamird@gmail.com> 1503691982 -0400\n\nsyntax: clarify field name\n\nThe value of this field is meant to indicate whether or not the\ncrate is rustc's libtest itself - not whether or not it is a test\ncrate generally.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0463566f27dfc5979b5b12eb7cea670a4e3f991c", "html_url": "https://github.com/rust-lang/rust/commit/0463566f27dfc5979b5b12eb7cea670a4e3f991c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0463566f27dfc5979b5b12eb7cea670a4e3f991c/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2fb45723ac7a1bfa897802256452d603a7adb2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2fb45723ac7a1bfa897802256452d603a7adb2a", "html_url": "https://github.com/rust-lang/rust/commit/f2fb45723ac7a1bfa897802256452d603a7adb2a"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "35dc98195290800cb1a9ab6f1fa6b738653b990d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0463566f27dfc5979b5b12eb7cea670a4e3f991c/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0463566f27dfc5979b5b12eb7cea670a4e3f991c/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=0463566f27dfc5979b5b12eb7cea670a4e3f991c", "patch": "@@ -61,7 +61,7 @@ struct TestCtxt<'a> {\n     ext_cx: ExtCtxt<'a>,\n     testfns: Vec<Test>,\n     reexport_test_harness_main: Option<Symbol>,\n-    is_test_crate: bool,\n+    is_libtest: bool,\n     ctxt: SyntaxContext,\n \n     // top-level re-export submodule, filled out after folding is finished\n@@ -271,13 +271,15 @@ fn generate_test_harness(sess: &ParseSess,\n     let krate = cleaner.fold_crate(krate);\n \n     let mark = Mark::fresh(Mark::root());\n+\n     let mut cx: TestCtxt = TestCtxt {\n         span_diagnostic: sd,\n         ext_cx: ExtCtxt::new(sess, ExpansionConfig::default(\"test\".to_string()), resolver),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main,\n-        is_test_crate: is_test_crate(&krate),\n+        // NB: doesn't consider the value of `--crate-name` passed on the command line.\n+        is_libtest: attr::find_crate_name(&krate.attrs).map(|s| s == \"test\").unwrap_or(false),\n         toplevel_reexport: None,\n         ctxt: SyntaxContext::empty().apply_mark(mark),\n     };\n@@ -452,7 +454,7 @@ mod __test {\n fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n     let id_test = Ident::from_str(\"test\");\n     let sp = ignored_span(cx, DUMMY_SP);\n-    let (vi, vis, ident) = if cx.is_test_crate {\n+    let (vi, vis, ident) = if cx.is_libtest {\n         (ast::ItemKind::Use(\n             P(nospan(ast::ViewPathSimple(id_test,\n                                          path_node(vec![id_test]))))),\n@@ -606,13 +608,6 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n                    test_descs)\n }\n \n-fn is_test_crate(krate: &ast::Crate) -> bool {\n-    match attr::find_crate_name(&krate.attrs) {\n-        Some(s) if \"test\" == s.as_str() => true,\n-        _ => false\n-    }\n-}\n-\n fn mk_test_descs(cx: &TestCtxt) -> P<ast::Expr> {\n     debug!(\"building test vector from {} tests\", cx.testfns.len());\n "}]}