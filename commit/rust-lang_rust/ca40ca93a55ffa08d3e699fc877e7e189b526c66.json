{"sha": "ca40ca93a55ffa08d3e699fc877e7e189b526c66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDBjYTkzYTU1ZmZhMDhkM2U2OTlmYzg3N2U3ZTE4OWI1MjZjNjY=", "commit": {"author": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2019-04-05T20:34:45Z"}, "committer": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2019-04-05T23:07:35Z"}, "message": "Parse and infer tuple indices", "tree": {"sha": "8b56a9250db5c713da3fc14758c0583bbb029638", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b56a9250db5c713da3fc14758c0583bbb029638"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca40ca93a55ffa08d3e699fc877e7e189b526c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca40ca93a55ffa08d3e699fc877e7e189b526c66", "html_url": "https://github.com/rust-lang/rust/commit/ca40ca93a55ffa08d3e699fc877e7e189b526c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca40ca93a55ffa08d3e699fc877e7e189b526c66/comments", "author": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0372eca5b2e6dade5132a08db46992ca73a25188", "url": "https://api.github.com/repos/rust-lang/rust/commits/0372eca5b2e6dade5132a08db46992ca73a25188", "html_url": "https://github.com/rust-lang/rust/commit/0372eca5b2e6dade5132a08db46992ca73a25188"}], "stats": {"total": 224, "additions": 210, "deletions": 14}, "files": [{"sha": "cfa8244582fd27436f4433df6e840c172e8018ea", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -671,7 +671,10 @@ impl ExprCollector {\n             }\n             ast::ExprKind::FieldExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let name = e.name_ref().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n+                let name = match e.field_access() {\n+                    Some(kind) => kind.as_name(),\n+                    _ => Name::missing(),\n+                };\n                 self.alloc_expr(Expr::Field { expr, name }, syntax_ptr)\n             }\n             ast::ExprKind::TryExpr(e) => {"}, {"sha": "283f378456a169221de017200eea912921adbb16", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -90,6 +90,15 @@ impl AsName for ast::Name {\n     }\n }\n \n+impl<'a> AsName for ast::FieldKind<'a> {\n+    fn as_name(&self) -> Name {\n+        match self {\n+            ast::FieldKind::Name(nr) => nr.as_name(),\n+            ast::FieldKind::Index(idx) => Name::new(idx.text().clone()),\n+        }\n+    }\n+}\n+\n impl AsName for ra_db::Dependency {\n     fn as_name(&self) -> Name {\n         Name::new(self.name.clone())"}, {"sha": "f0164f7ea5600617426ed298157eb946305e642b", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -2242,6 +2242,65 @@ static B: u64 = { let x = 1; x };\n     );\n }\n \n+#[test]\n+fn tuple_struct_fields() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+struct S(i32, u64);\n+fn test() -> u64 {\n+    let a = S(4, 6);\n+    let b = a.0;\n+    a.1\n+}\n+\"#),\n+        @r###\"\n+[38; 87) '{     ... a.1 }': u64\n+[48; 49) 'a': S\n+[52; 53) 'S': S(i32, u64) -> S\n+[52; 59) 'S(4, 6)': S\n+[54; 55) '4': i32\n+[57; 58) '6': u64\n+[69; 70) 'b': i32\n+[73; 74) 'a': S\n+[73; 76) 'a.0': i32\n+[82; 83) 'a': S\n+[82; 85) 'a.1': u64\"###\n+    );\n+}\n+\n+#[test]\n+fn tuple_struct_with_fn() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+struct S(fn(u32) -> u64);\n+fn test() -> u64 {\n+    let a = S(|i| 2*i);\n+    let b = a.0(4);\n+    a.0(2)\n+}\n+\"#),\n+        @r###\"\n+[44; 102) '{     ...0(2) }': u64\n+[54; 55) 'a': S\n+[58; 59) 'S': S(fn(u32) -> u64) -> S\n+[58; 68) 'S(|i| 2*i)': S\n+[60; 67) '|i| 2*i': fn(u32) -> u64\n+[61; 62) 'i': i32\n+[64; 65) '2': i32\n+[64; 67) '2*i': i32\n+[66; 67) 'i': i32\n+[78; 79) 'b': u64\n+[82; 83) 'a': S\n+[82; 85) 'a.0': fn(u32) -> u64\n+[82; 88) 'a.0(4)': u64\n+[86; 87) '4': u32\n+[94; 95) 'a': S\n+[94; 97) 'a.0': fn(u32) -> u64\n+[94; 100) 'a.0(2)': u64\n+[98; 99) '2': u32\"###\n+    );\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let func = source_binder::function_from_position(db, pos).unwrap();\n     let body_source_map = func.body_source_map(db);"}, {"sha": "9b38b0a31e48f53c7a1e97ac12ad845c6bd9b5da", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -379,6 +379,14 @@ fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n // fn foo() {\n //     x.foo;\n //     x.0.bar;\n+//     x.0();\n+// }\n+\n+// test_err bad_tuple_index_expr\n+// fn foo() {\n+//     x.0.;\n+//     x.1i32;\n+//     x.0x01;\n // }\n fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(DOT));\n@@ -387,7 +395,10 @@ fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     if p.at(IDENT) {\n         name_ref(p)\n     } else if p.at(INT_NUMBER) {\n-        p.bump()\n+        p.bump();\n+    } else if p.at(FLOAT_NUMBER) {\n+        // FIXME: How to recover and instead parse INT + DOT?\n+        p.bump();\n     } else {\n         p.error(\"expected field name or number\")\n     }"}, {"sha": "a06a6375d9d0dd95c5c3eee762924732d4d22a3a", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -17,7 +17,7 @@ pub use self::{\n     generated::*,\n     traits::*,\n     tokens::*,\n-    extensions::{PathSegmentKind, StructKind, SelfParamKind},\n+    extensions::{PathSegmentKind, StructKind, FieldKind, SelfParamKind},\n     expr_extensions::{ElseBranch, PrefixOp, BinOp, LiteralKind},\n };\n "}, {"sha": "ca33b43e751024561ba236c21a0ab3f9987ed9cd", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -3,11 +3,8 @@\n \n use itertools::Itertools;\n \n-use crate::{\n-    SmolStr, SyntaxToken,\n-    ast::{self, AstNode, children, child_opt},\n-    SyntaxKind::*,\n-};\n+use crate::{SmolStr, SyntaxToken, ast::{self, AstNode, children, child_opt}, SyntaxKind::*, SyntaxElement};\n+use ra_parser::SyntaxKind;\n \n impl ast::Name {\n     pub fn text(&self) -> &SmolStr {\n@@ -217,6 +214,33 @@ impl ast::ExprStmt {\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum FieldKind<'a> {\n+    Name(&'a ast::NameRef),\n+    Index(SyntaxToken<'a>),\n+}\n+\n+impl ast::FieldExpr {\n+    pub fn index_token(&self) -> Option<SyntaxToken> {\n+        self.syntax\n+            .children_with_tokens()\n+            // FIXME: Accepting floats here to reject them in validation later\n+            .find(|c| c.kind() == SyntaxKind::INT_NUMBER || c.kind() == SyntaxKind::FLOAT_NUMBER)\n+            .as_ref()\n+            .and_then(SyntaxElement::as_token)\n+    }\n+\n+    pub fn field_access(&self) -> Option<FieldKind> {\n+        if let Some(nr) = self.name_ref() {\n+            Some(FieldKind::Name(nr))\n+        } else if let Some(tok) = self.index_token() {\n+            Some(FieldKind::Index(tok))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n impl ast::RefPat {\n     pub fn is_mut(&self) -> bool {\n         self.syntax().children_with_tokens().any(|n| n.kind() == MUT_KW)"}, {"sha": "4198eefdb969672b4ad26255d35daeecaf17982b", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -95,6 +95,7 @@ pub enum SyntaxErrorKind {\n     InvalidSuffix,\n     InvalidBlockAttr,\n     InvalidMatchInnerAttr,\n+    InvalidTupleIndexFormat,\n }\n \n impl fmt::Display for SyntaxErrorKind {\n@@ -139,6 +140,9 @@ impl fmt::Display for SyntaxErrorKind {\n             InvalidMatchInnerAttr => {\n                 write!(f, \"Inner attributes are only allowed directly after the opening brace of the match expression\")\n             }\n+            InvalidTupleIndexFormat => {\n+                write!(f, \"Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix\")\n+            }\n             ParseError(msg) => write!(f, \"{}\", msg.0),\n         }\n     }"}, {"sha": "c2f54517336f78377f4ed025831438ae21c6bb11", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -3,6 +3,7 @@ mod byte_string;\n mod char;\n mod string;\n mod block;\n+mod field_expr;\n \n use crate::{\n     SourceFile, SyntaxError, AstNode, SyntaxNode,\n@@ -17,6 +18,7 @@ pub(crate) fn validate(file: &SourceFile) -> Vec<SyntaxError> {\n         let _ = visitor_ctx(&mut errors)\n             .visit::<ast::Literal, _>(validate_literal)\n             .visit::<ast::Block, _>(block::validate_block_node)\n+            .visit::<ast::FieldExpr, _>(field_expr::validate_field_expr_node)\n             .accept(node);\n     }\n     errors"}, {"sha": "2b405062e21f27838f721961d2b15b1ce7467872", "filename": "crates/ra_syntax/src/validation/field_expr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -0,0 +1,12 @@\n+use crate::{ast::{self, FieldKind},\r\n+            SyntaxError,\r\n+            SyntaxErrorKind::*,\r\n+};\r\n+\r\n+pub(crate) fn validate_field_expr_node(node: &ast::FieldExpr, errors: &mut Vec<SyntaxError>) {\r\n+    if let Some(FieldKind::Index(idx)) = node.field_access() {\r\n+        if idx.text().chars().any(|c| c < '0' || c > '9') {\r\n+            errors.push(SyntaxError::new(InvalidTupleIndexFormat, idx.range()));\r\n+        }\r\n+    }\r\n+}\r"}, {"sha": "30cc491389979e22579d23e324d9769dade180a0", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0010_bad_tuple_index_expr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {\n+    x.0.;\n+    x.1i32;\n+    x.0x01;\n+}"}, {"sha": "c111f60ea15f171fd1b3d0ead18cd0445aa25361", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0010_bad_tuple_index_expr.txt", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -0,0 +1,51 @@\n+SOURCE_FILE@[0; 47)\n+  FN_DEF@[0; 46)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7) \"(\"\n+      R_PAREN@[7; 8) \")\"\n+    WHITESPACE@[8; 9) \" \"\n+    BLOCK@[9; 46)\n+      L_CURLY@[9; 10) \"{\"\n+      WHITESPACE@[10; 15) \"\\n    \"\n+      EXPR_STMT@[15; 20)\n+        FIELD_EXPR@[15; 19)\n+          PATH_EXPR@[15; 16)\n+            PATH@[15; 16)\n+              PATH_SEGMENT@[15; 16)\n+                NAME_REF@[15; 16)\n+                  IDENT@[15; 16) \"x\"\n+          DOT@[16; 17) \".\"\n+          err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`\n+          FLOAT_NUMBER@[17; 19) \"0.\"\n+        SEMI@[19; 20) \";\"\n+      WHITESPACE@[20; 25) \"\\n    \"\n+      EXPR_STMT@[25; 32)\n+        FIELD_EXPR@[25; 31)\n+          PATH_EXPR@[25; 26)\n+            PATH@[25; 26)\n+              PATH_SEGMENT@[25; 26)\n+                NAME_REF@[25; 26)\n+                  IDENT@[25; 26) \"x\"\n+          DOT@[26; 27) \".\"\n+          err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`\n+          INT_NUMBER@[27; 31) \"1i32\"\n+        SEMI@[31; 32) \";\"\n+      WHITESPACE@[32; 37) \"\\n    \"\n+      EXPR_STMT@[37; 44)\n+        FIELD_EXPR@[37; 43)\n+          PATH_EXPR@[37; 38)\n+            PATH@[37; 38)\n+              PATH_SEGMENT@[37; 38)\n+                NAME_REF@[37; 38)\n+                  IDENT@[37; 38) \"x\"\n+          DOT@[38; 39) \".\"\n+          err: `Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix`\n+          INT_NUMBER@[39; 43) \"0x01\"\n+        SEMI@[43; 44) \";\"\n+      WHITESPACE@[44; 45) \"\\n\"\n+      R_CURLY@[45; 46) \"}\"\n+  WHITESPACE@[46; 47) \"\\n\""}, {"sha": "b8da2ddc30947c126793948daf2508b3f8ff0e9c", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0011_field_expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0011_field_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0011_field_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0011_field_expr.rs?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -1,4 +1,5 @@\n fn foo() {\n     x.foo;\n     x.0.bar;\n+    x.0();\n }"}, {"sha": "78054ec5a2c0c4603981f75c8c905fd2907977fd", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0011_field_expr.txt", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0011_field_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ca40ca93a55ffa08d3e699fc877e7e189b526c66/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0011_field_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0011_field_expr.txt?ref=ca40ca93a55ffa08d3e699fc877e7e189b526c66", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 37)\n-  FN_DEF@[0; 36)\n+SOURCE_FILE@[0; 48)\n+  FN_DEF@[0; 47)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 6)\n@@ -8,7 +8,7 @@ SOURCE_FILE@[0; 37)\n       L_PAREN@[6; 7) \"(\"\n       R_PAREN@[7; 8) \")\"\n     WHITESPACE@[8; 9) \" \"\n-    BLOCK@[9; 36)\n+    BLOCK@[9; 47)\n       L_CURLY@[9; 10) \"{\"\n       WHITESPACE@[10; 15) \"\\n    \"\n       EXPR_STMT@[15; 21)\n@@ -37,6 +37,21 @@ SOURCE_FILE@[0; 37)\n           NAME_REF@[30; 33)\n             IDENT@[30; 33) \"bar\"\n         SEMI@[33; 34) \";\"\n-      WHITESPACE@[34; 35) \"\\n\"\n-      R_CURLY@[35; 36) \"}\"\n-  WHITESPACE@[36; 37) \"\\n\"\n+      WHITESPACE@[34; 39) \"\\n    \"\n+      EXPR_STMT@[39; 45)\n+        CALL_EXPR@[39; 44)\n+          FIELD_EXPR@[39; 42)\n+            PATH_EXPR@[39; 40)\n+              PATH@[39; 40)\n+                PATH_SEGMENT@[39; 40)\n+                  NAME_REF@[39; 40)\n+                    IDENT@[39; 40) \"x\"\n+            DOT@[40; 41) \".\"\n+            INT_NUMBER@[41; 42) \"0\"\n+          ARG_LIST@[42; 44)\n+            L_PAREN@[42; 43) \"(\"\n+            R_PAREN@[43; 44) \")\"\n+        SEMI@[44; 45) \";\"\n+      WHITESPACE@[45; 46) \"\\n\"\n+      R_CURLY@[46; 47) \"}\"\n+  WHITESPACE@[47; 48) \"\\n\""}]}