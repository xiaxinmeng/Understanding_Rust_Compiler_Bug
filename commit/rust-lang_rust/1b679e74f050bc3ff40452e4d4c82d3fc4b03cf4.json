{"sha": "1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNjc5ZTc0ZjA1MGJjM2ZmNDA0NTJlNGQ0YzgyZDNmYzRiMDNjZjQ=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-30T12:38:17Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-30T12:38:17Z"}, "message": "Only allow ZSTs with 1 byte alignment", "tree": {"sha": "b9a7c1a5ccbbb548fbe9bb10e5ccbf70ec321446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a7c1a5ccbbb548fbe9bb10e5ccbf70ec321446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEELQoiL21itfwzY62qWM12+I31Y+AFAlzIQbkACgkQWM12+I31\nY+DnVwgA2iuPHKsmGBZvee6FnaXkC6rz40BMTD0BbNARxSL9hONPO/E/HjtmnHaz\nrA+d3YEQLy6WtT0iBuwOaTzkigRt9+BU44+gIm9YeHhx4co9iXsA5l0XbdUiy4dx\nnFy7ccvHs0+oL5D5GzcEJrRWgaDqi8vqsEsu7sJNIIf6KLBvVlspJyrg3IRF8EQU\nhQ470SwGytRFgMKwtT6bUd+1DIkEbK+PPWqYb/By88s9oQniMRdAkUrV3hXcTh03\nFY+3U6H+s7Da4pAUGrdxi+8WlF70Wca1O0dLfLHCOF5/0b/8RDdA7FHbK1d1buLV\nE1DY3lu8koMwCJ/zYR3uhagjEW5VGg==\n=SQN2\n-----END PGP SIGNATURE-----", "payload": "tree b9a7c1a5ccbbb548fbe9bb10e5ccbf70ec321446\nparent abf73a6aebbe505694392736e543502c240841db\nauthor Tim Diekmann <tim.diekmann@3dvision.de> 1556627897 +0200\ncommitter Tim Diekmann <tim.diekmann@3dvision.de> 1556627897 +0200\n\nOnly allow ZSTs with 1 byte alignment\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "html_url": "https://github.com/rust-lang/rust/commit/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf73a6aebbe505694392736e543502c240841db", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf73a6aebbe505694392736e543502c240841db", "html_url": "https://github.com/rust-lang/rust/commit/abf73a6aebbe505694392736e543502c240841db"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "1be0248727d0110fc4924a97f0d353f45bcb9357", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "patch": "@@ -227,8 +227,8 @@ fn visit_implementation_of_dispatch_from_dyn<'a, 'tcx>(\n                         let ty_b = field.ty(tcx, substs_b);\n \n                         if let Ok(layout) = tcx.layout_of(param_env.and(ty_a)) {\n-                            if layout.is_zst() {\n-                                // ignore ZST fields\n+                            if layout.is_zst() && layout.details.align.abi.bytes() == 1 {\n+                                // ignore ZST fields with alignment of 1 byte\n                                 return None;\n                             }\n                         }\n@@ -238,7 +238,7 @@ fn visit_implementation_of_dispatch_from_dyn<'a, 'tcx>(\n                                 create_err(\n                                     \"the trait `DispatchFromDyn` may only be implemented \\\n                                      for structs containing the field being coerced, \\\n-                                     ZST fields, and nothing else\"\n+                                     ZST fields with 1 byte alignment, and nothing else\"\n                                 ).note(\n                                     &format!(\n                                         \"extra field `{}` of type `{}` is not allowed\","}, {"sha": "b7bc766fbe020c84174fe48a4e4241a237d4ecb4", "filename": "src/test/ui/invalid_dispatch_from_dyn_impls.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.rs?ref=1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "patch": "@@ -39,4 +39,13 @@ where\n     T: Unsize<U>,\n {} //~^^^ ERROR [E0378]\n \n+#[repr(align(64))]\n+struct OverAlignedZst;\n+struct OverAligned<T: ?Sized>(Box<T>, OverAlignedZst);\n+\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<OverAligned<U>> for OverAligned<T>\n+    where\n+        T: Unsize<U>,\n+{} //~^^^ ERROR [E0378]\n+\n fn main() {}"}, {"sha": "6d62d4fd0711ddaa6e3042634bbbc18d9dbfd7b8", "filename": "src/test/ui/invalid_dispatch_from_dyn_impls.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr?ref=1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "patch": "@@ -1,4 +1,4 @@\n-error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, ZST fields, and nothing else\n+error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, ZST fields with 1 byte alignment, and nothing else\n   --> $DIR/invalid_dispatch_from_dyn_impls.rs:10:1\n    |\n LL | / impl<T, U> DispatchFromDyn<WrapperWithExtraField<U>> for WrapperWithExtraField<T>\n@@ -36,6 +36,17 @@ LL | |     T: Unsize<U>,\n LL | | {}\n    | |__^\n \n-error: aborting due to 4 previous errors\n+error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, ZST fields with 1 byte alignment, and nothing else\n+  --> $DIR/invalid_dispatch_from_dyn_impls.rs:46:1\n+   |\n+LL | / impl<T: ?Sized, U: ?Sized> DispatchFromDyn<OverAligned<U>> for OverAligned<T>\n+LL | |     where\n+LL | |         T: Unsize<U>,\n+LL | | {}\n+   | |__^\n+   |\n+   = note: extra field `1` of type `OverAlignedZst` is not allowed\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0378`."}]}