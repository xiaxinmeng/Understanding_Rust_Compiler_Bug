{"sha": "cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83", "node_id": "C_kwDOAAsO6NoAKGNkZmU5OGZlOTRkMWRhYjBhNjYyNmNjMjRlYmZiYWY0NWYzMjFhODM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-12-17T22:26:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-12-17T22:26:54Z"}, "message": "Make manual flycheck runs work when checkOnSave is disabled", "tree": {"sha": "9a8f513ada0187e2bd86678bb538ad7af9379b28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a8f513ada0187e2bd86678bb538ad7af9379b28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83", "html_url": "https://github.com/rust-lang/rust/commit/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "html_url": "https://github.com/rust-lang/rust/commit/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be"}], "stats": {"total": 45, "additions": 17, "deletions": 28}, "files": [{"sha": "835b37c98e2c5455765877566876f4127f589dce", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83", "patch": "@@ -1125,11 +1125,8 @@ impl Config {\n         }\n     }\n \n-    pub fn flycheck(&self) -> Option<FlycheckConfig> {\n-        if !self.data.checkOnSave_enable {\n-            return None;\n-        }\n-        let flycheck_config = match &self.data.checkOnSave_overrideCommand {\n+    pub fn flycheck(&self) -> FlycheckConfig {\n+        match &self.data.checkOnSave_overrideCommand {\n             Some(args) if !args.is_empty() => {\n                 let mut args = args.clone();\n                 let command = args.remove(0);\n@@ -1183,8 +1180,11 @@ impl Config {\n                 extra_args: self.data.checkOnSave_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n             },\n-        };\n-        Some(flycheck_config)\n+        }\n+    }\n+\n+    pub fn check_on_save(&self) -> bool {\n+        self.data.checkOnSave_enable\n     }\n \n     pub fn runnables(&self) -> RunnablesConfig {"}, {"sha": "8d621cc36aa903866116cf3389cdc2ebe81ca6c0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83", "patch": "@@ -581,10 +581,7 @@ impl GlobalState {\n                 // When we're running multiple flychecks, we have to include a disambiguator in\n                 // the title, or the editor complains. Note that this is a user-facing string.\n                 let title = if self.flycheck.len() == 1 {\n-                    match self.config.flycheck() {\n-                        Some(config) => format!(\"{}\", config),\n-                        None => \"cargo check\".to_string(),\n-                    }\n+                    format!(\"{}\", self.config.flycheck())\n                 } else {\n                     format!(\"cargo check (#{})\", id + 1)\n                 };\n@@ -593,7 +590,7 @@ impl GlobalState {\n                     state,\n                     message,\n                     None,\n-                    Some(format!(\"rust-analyzer/checkOnSave/{}\", id)),\n+                    Some(format!(\"rust-analyzer/flycheck/{}\", id)),\n                 );\n             }\n         }\n@@ -796,7 +793,7 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::WorkDoneProgressCancel>(|this, params| {\n                 if let lsp_types::NumberOrString::String(s) = &params.token {\n-                    if let Some(id) = s.strip_prefix(\"rust-analyzer/checkOnSave/\") {\n+                    if let Some(id) = s.strip_prefix(\"rust-analyzer/flycheck/\") {\n                         if let Ok(id) = u32::from_str_radix(id, 10) {\n                             if let Some(flycheck) = this.flycheck.get(id as usize) {\n                                 flycheck.cancel();\n@@ -888,14 +885,14 @@ impl GlobalState {\n                         }\n                     }\n \n-                    if run_flycheck(this, vfs_path) {\n+                    if !this.config.check_on_save() || run_flycheck(this, vfs_path) {\n                         return Ok(());\n                     }\n-                }\n-\n-                // No specific flycheck was triggered, so let's trigger all of them.\n-                for flycheck in this.flycheck.iter() {\n-                    flycheck.restart();\n+                } else if this.config.check_on_save() {\n+                    // No specific flycheck was triggered, so let's trigger all of them.\n+                    for flycheck in this.flycheck.iter() {\n+                        flycheck.restart();\n+                    }\n                 }\n                 Ok(())\n             })?"}, {"sha": "3e7664d7d3e877ec55acaeb7d3b9e86801c2b018", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=cdfe98fe94d1dab0a6626cc24ebfbaf45f321a83", "patch": "@@ -449,15 +449,7 @@ impl GlobalState {\n \n     fn reload_flycheck(&mut self) {\n         let _p = profile::span(\"GlobalState::reload_flycheck\");\n-        let config = match self.config.flycheck() {\n-            Some(it) => it,\n-            None => {\n-                self.flycheck = Arc::new([]);\n-                self.diagnostics.clear_check_all();\n-                return;\n-            }\n-        };\n-\n+        let config = self.config.flycheck();\n         let sender = self.flycheck_sender.clone();\n         let invocation_strategy = match config {\n             FlycheckConfig::CargoCommand { .. } => flycheck::InvocationStrategy::PerWorkspace,"}]}