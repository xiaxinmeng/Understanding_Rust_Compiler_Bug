{"sha": "801e4420b6149654885851b6e3e7a9d7837b18de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMWU0NDIwYjYxNDk2NTQ4ODU4NTFiNmUzZTdhOWQ3ODM3YjE4ZGU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T12:39:33Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-19T14:22:55Z"}, "message": "Add some comments", "tree": {"sha": "ee6521b50c741c226836c4ef1f8106a7372a7f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee6521b50c741c226836c4ef1f8106a7372a7f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/801e4420b6149654885851b6e3e7a9d7837b18de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/801e4420b6149654885851b6e3e7a9d7837b18de", "html_url": "https://github.com/rust-lang/rust/commit/801e4420b6149654885851b6e3e7a9d7837b18de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/801e4420b6149654885851b6e3e7a9d7837b18de/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2bca90077962e513330ca4a6b729f8262ccf8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2bca90077962e513330ca4a6b729f8262ccf8d2", "html_url": "https://github.com/rust-lang/rust/commit/a2bca90077962e513330ca4a6b729f8262ccf8d2"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "70f7170cd324a7b0e1f6ce9d199c6082a3c866bd", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/801e4420b6149654885851b6e3e7a9d7837b18de/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/801e4420b6149654885851b6e3e7a9d7837b18de/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=801e4420b6149654885851b6e3e7a9d7837b18de", "patch": "@@ -508,7 +508,8 @@ impl<'tcx> EncodeContext<'tcx> {\n         let proc_macro_data = self.encode_proc_macros();\n         let proc_macro_data_bytes = self.position() - i;\n \n-        // Encode exported symbols info.\n+        // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode\n+        // this last to give the prefetching as much time as possible to complete.\n         i = self.position();\n         let exported_symbols = self.tcx.exported_symbols(LOCAL_CRATE);\n         let exported_symbols = self.encode_exported_symbols(&exported_symbols);\n@@ -889,6 +890,8 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n+\n+        // This should be kept in sync with `PrefetchVisitor.visit_trait_item`.\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -960,6 +963,9 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n+\n+        // The following part should be kept in sync with `PrefetchVisitor.visit_impl_item`.\n+\n         let mir = match ast_item.kind {\n             hir::ImplItemKind::Const(..) => true,\n             hir::ImplItemKind::Fn(ref sig, _) => {\n@@ -1251,6 +1257,8 @@ impl EncodeContext<'tcx> {\n             _ => {}\n         }\n \n+        // The following part should be kept in sync with `PrefetchVisitor.visit_item`.\n+\n         let mir = match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n             hir::ItemKind::Fn(ref sig, ..) => {\n@@ -1699,6 +1707,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n }\n \n /// Used to prefetch queries which will be needed later by metadata encoding.\n+/// Only a subset of the queries are actually prefetched to keep this code smaller.\n struct PrefetchVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     mir_keys: &'tcx DefIdSet,\n@@ -1715,6 +1724,7 @@ impl<'tcx> PrefetchVisitor<'tcx> {\n \n impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n     fn visit_item(&self, item: &hir::Item<'_>) {\n+        // This should be kept in sync with `encode_info_for_item`.\n         let tcx = self.tcx;\n         match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => {\n@@ -1734,10 +1744,12 @@ impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n     }\n \n     fn visit_trait_item(&self, trait_item: &'v hir::TraitItem<'v>) {\n+        // This should be kept in sync with `encode_info_for_trait_item`.\n         self.prefetch_mir(self.tcx.hir().local_def_id(trait_item.hir_id));\n     }\n \n     fn visit_impl_item(&self, impl_item: &'v hir::ImplItem<'v>) {\n+        // This should be kept in sync with `encode_info_for_impl_item`.\n         let tcx = self.tcx;\n         match impl_item.kind {\n             hir::ImplItemKind::Const(..) => {\n@@ -1789,6 +1801,8 @@ pub(super) fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n                 return;\n             }\n             // Prefetch some queries used by metadata encoding.\n+            // This is not necessary for correctness, but is only done for performance reasons.\n+            // It can be removed if it turns out to cause trouble or be detrimental to performance.\n             tcx.dep_graph.with_ignore(|| {\n                 join(\n                     || {"}]}