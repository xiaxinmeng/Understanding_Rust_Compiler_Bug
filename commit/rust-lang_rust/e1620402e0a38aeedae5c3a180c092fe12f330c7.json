{"sha": "e1620402e0a38aeedae5c3a180c092fe12f330c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNjIwNDAyZTBhMzhhZWVkYWU1YzNhMTgwYzA5MmZlMTJmMzMwYzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-04T18:58:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-04T18:58:29Z"}, "message": "Introduce CPlace::NoPlace for zst's", "tree": {"sha": "b1bfaefb5ab2be4dcb810d42e59b53286a4e632e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1bfaefb5ab2be4dcb810d42e59b53286a4e632e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1620402e0a38aeedae5c3a180c092fe12f330c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1620402e0a38aeedae5c3a180c092fe12f330c7", "html_url": "https://github.com/rust-lang/rust/commit/e1620402e0a38aeedae5c3a180c092fe12f330c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1620402e0a38aeedae5c3a180c092fe12f330c7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c81d259a54f162d48fe3c06164ba456ca27945", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c81d259a54f162d48fe3c06164ba456ca27945", "html_url": "https://github.com/rust-lang/rust/commit/d0c81d259a54f162d48fe3c06164ba456ca27945"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "0045866dfdd3f5696a10c325f5cdc3d08c301216", "filename": "src/abi.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1620402e0a38aeedae5c3a180c092fe12f330c7/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1620402e0a38aeedae5c3a180c092fe12f330c7/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=e1620402e0a38aeedae5c3a180c092fe12f330c7", "patch": "@@ -346,14 +346,18 @@ fn local_place<'a, 'tcx: 'a>(\n         {\n             let TyLayout { ty, details } = layout;\n             let ty::layout::LayoutDetails { size, align, abi: _, variants: _, fields: _ } = details;\n-            let stack_slot = match place {\n-                CPlace::Stack(stack_slot, _) => stack_slot,\n+            match place {\n+                CPlace::Stack(stack_slot, _) => fx.add_entity_comment(stack_slot, format!(\n+                    \"{:?}: {:?} size={} align={},{}\",\n+                    local, ty, size.bytes(), align.abi.bytes(), align.pref.bytes(),\n+                )),\n+                CPlace::NoPlace(_) => fx.add_global_comment(format!(\n+                    \"zst    {:?}: {:?} size={} align={}, {}\",\n+                    local, ty, size.bytes(), align.abi.bytes(), align.pref.bytes(),\n+                )),\n                 _ => unreachable!(),\n             };\n-            fx.add_entity_comment(stack_slot, format!(\n-                \"{:?}: {:?} size={} align={},{}\",\n-                local, ty, size.bytes(), align.abi.bytes(), align.pref.bytes(),\n-            ));\n+\n         }\n \n         // Take stack_addr in advance to avoid many duplicate instructions\n@@ -456,11 +460,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n \n     match output_pass_mode {\n         PassMode::NoPass => {\n-            let null = fx.bcx.ins().iconst(fx.pointer_type, 0);\n-            fx.local_map.insert(\n-                RETURN_PLACE,\n-                CPlace::Addr(null, None, ret_layout),\n-            );\n+            fx.local_map.insert(RETURN_PLACE, CPlace::NoPlace(ret_layout));\n         }\n         PassMode::ByVal(_) => {\n             let is_ssa = !ssa_analyzed"}, {"sha": "9723072364bd530d90cf73487b0b4320933cc099", "filename": "src/common.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1620402e0a38aeedae5c3a180c092fe12f330c7/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1620402e0a38aeedae5c3a180c092fe12f330c7/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=e1620402e0a38aeedae5c3a180c092fe12f330c7", "patch": "@@ -246,20 +246,26 @@ pub enum CPlace<'tcx> {\n     Var(Local, TyLayout<'tcx>),\n     Addr(Value, Option<Value>, TyLayout<'tcx>),\n     Stack(StackSlot, TyLayout<'tcx>),\n+    NoPlace(TyLayout<'tcx>)\n }\n \n impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     pub fn layout(&self) -> TyLayout<'tcx> {\n         match *self {\n             CPlace::Var(_, layout)\n             | CPlace::Addr(_, _, layout)\n-            | CPlace::Stack(_, layout) => layout,\n+            | CPlace::Stack(_, layout)\n+            | CPlace::NoPlace(layout)  => layout,\n         }\n     }\n \n     pub fn new_stack_slot(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, ty: Ty<'tcx>) -> CPlace<'tcx> {\n         let layout = fx.layout_of(ty);\n         assert!(!layout.is_unsized());\n+        if layout.size.bytes() == 0 {\n+            return CPlace::NoPlace(layout);\n+        }\n+\n         let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n             kind: StackSlotKind::ExplicitSlot,\n             size: layout.size.bytes() as u32,\n@@ -278,6 +284,9 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             CPlace::Stack(stack_slot, layout) => {\n                 CValue::ByRef(fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0), layout)\n             }\n+            CPlace::NoPlace(layout) => {\n+                CValue::ByRef(fx.bcx.ins().iconst(fx.pointer_type, 0), layout)\n+            }\n         }\n     }\n \n@@ -297,6 +306,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             CPlace::Stack(stack_slot, _layout) => {\n                 (fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0), None)\n             }\n+            CPlace::NoPlace(_) => (fx.bcx.ins().iconst(fx.pointer_type, 0), None),\n             CPlace::Var(_, _) => bug!(\"Expected CPlace::Addr, found CPlace::Var\"),\n         }\n     }\n@@ -357,6 +367,11 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             CPlace::Stack(stack_slot, dst_layout) => {\n                 (fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0), dst_layout)\n             }\n+            CPlace::NoPlace(layout) => {\n+                assert!(layout.size.bytes() == 0);\n+                assert!(from.layout().size.bytes() == 0);\n+                return;\n+            }\n             CPlace::Addr(_, _, _) => bug!(\"Can't write value to unsized place {:?}\", self),\n         };\n \n@@ -476,16 +491,19 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     }\n \n     pub fn unchecked_cast_to(self, layout: TyLayout<'tcx>) -> Self {\n+        assert!(!self.layout().is_unsized());\n         match self {\n             CPlace::Var(var, _) => CPlace::Var(var, layout),\n             CPlace::Addr(addr, extra, _) => {\n-                assert!(!layout.is_unsized());\n                 CPlace::Addr(addr, extra, layout)\n             }\n             CPlace::Stack(stack_slot, _) => {\n-                assert!(!layout.is_unsized());\n                 CPlace::Stack(stack_slot, layout)\n             }\n+            CPlace::NoPlace(_) => {\n+                assert!(layout.size.bytes() == 0);\n+                CPlace::NoPlace(layout)\n+            }\n         }\n     }\n "}]}