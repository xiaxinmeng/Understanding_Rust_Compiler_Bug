{"sha": "9734406a5f95393e8e888cf67b48861ea8a39de7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MzQ0MDZhNWY5NTM5M2U4ZTg4OGNmNjdiNDg4NjFlYThhMzlkZTc=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-01-30T00:25:18Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:39Z"}, "message": "Assorted fixed after rebasing", "tree": {"sha": "2b2789ffd67037fc80021d580733598fee8b1394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b2789ffd67037fc80021d580733598fee8b1394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9734406a5f95393e8e888cf67b48861ea8a39de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9734406a5f95393e8e888cf67b48861ea8a39de7", "html_url": "https://github.com/rust-lang/rust/commit/9734406a5f95393e8e888cf67b48861ea8a39de7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9734406a5f95393e8e888cf67b48861ea8a39de7/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1df41e776c5a65ce8345d34a7e22296a99abd5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1df41e776c5a65ce8345d34a7e22296a99abd5e", "html_url": "https://github.com/rust-lang/rust/commit/c1df41e776c5a65ce8345d34a7e22296a99abd5e"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "510a3dd454b95fcf3307ae9d0d065c9f2fc0b6b9", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -162,9 +162,9 @@ impl<'tcx> Substs<'tcx> {\n \n     pub fn with_method_from_subst(self, other: &Substs<'tcx>) -> Substs<'tcx> {\n         let Substs { types, regions } = self;\n-        let types = types.with_vec(FnSpace, other.types.get_slice(FnSpace).to_vec());\n+        let types = types.with_slice(FnSpace, other.types.get_slice(FnSpace));\n         let regions = regions.map(|r| {\n-            r.with_vec(FnSpace, other.regions().get_slice(FnSpace).to_vec())\n+            r.with_slice(FnSpace, other.regions().get_slice(FnSpace))\n         });\n         Substs { types: types, regions: regions }\n     }"}, {"sha": "fd41007d0e2e9d533344d5b8beac5177ad9270dd", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -1621,7 +1621,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     true\n                 },\n                 ParamCandidate(..) => false,\n-                ErrorCandidate => false // propagate errors\n             },\n             ImplCandidate(other_def) => {\n                 // See if we can toss out `victim` based on specialization."}, {"sha": "91ddcc3b9e471a9907ed8ddbe0373e88e56a1d7b", "filename": "src/librustc/middle/traits/specialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -87,7 +87,7 @@ impl SpecializationGraph {\n             for slot in possible_siblings.iter_mut() {\n                 let possible_sibling = *slot;\n \n-                let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n+                let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None);\n                 let overlap = traits::overlapping_impls(&infcx, possible_sibling, impl_def_id);\n \n                 if let Some(trait_ref) = overlap {"}, {"sha": "737bb873d6d8976faa1554a370a49a8d0e512f7d", "filename": "src/librustc/middle/ty/trait_def.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ftrait_def.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -10,9 +10,10 @@\n \n use dep_graph::DepNode;\n use middle::def_id::DefId;\n+use middle::traits;\n use middle::ty;\n use middle::ty::fast_reject;\n-use middle::ty::{Ty, TyCtxt};\n+use middle::ty::{Ty, TyCtxt, TraitRef};\n use std::borrow::{Borrow};\n use std::cell::{Cell, Ref, RefCell};\n use syntax::ast::Name;\n@@ -128,6 +129,12 @@ impl<'tcx> TraitDef<'tcx> {\n         debug!(\"TraitDef::record_impl for {:?}, from {:?}\",\n                self, impl_trait_ref);\n \n+        // Record the write into the impl set, but only for local\n+        // impls: external impls are handled differently.\n+        if impl_def_id.is_local() {\n+            self.write_trait_impls(tcx);\n+        }\n+\n         // We don't want to borrow_mut after we already populated all impls,\n         // so check if an impl is present with an immutable borrow first.\n         if let Some(sty) = fast_reject::simplify_type(tcx,"}, {"sha": "072c1dfaa1d2a00b2318349ef872ea69c47d5b6f", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -33,7 +33,8 @@ use trans::glue;\n use trans::machine;\n use trans::type_::Type;\n use trans::type_of::*;\n-use middle::ty::{self, Ty, TyCtxt};\n+use middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use middle::ty::MethodCall;\n \n use syntax::ast::{self, Name};\n use syntax::attr;"}, {"sha": "51b88612fe442d1f61052f4e7b34461db864fc5a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -872,22 +872,24 @@ fn check_specialization_validity<'tcx, F>(tcx: &ty::ctxt<'tcx>,\n {\n     let parent_item_opt = traits::get_parent_impl_item(tcx, impl_id, f);\n     if let Some((Defaultness::Final, parent_impl)) = parent_item_opt {\n-        span_err!(tcx.sess, impl_item.span, E0520,\n-                  \"item `{}` is provided by an implementation that \\\n-                   specializes another, but the item in the parent \\\n-                   implementations is not marked `default` and so it \\\n-                   cannot be specialized.\",\n-                  impl_item.name);\n+        let mut err = struct_span_err!(\n+            tcx.sess, impl_item.span, E0520,\n+            \"item `{}` is provided by an implementation that \\\n+             specializes another, but the item in the parent \\\n+             implementations is not marked `default` and so it \\\n+             cannot be specialized.\",\n+            impl_item.name);\n \n         match tcx.span_of_impl(parent_impl) {\n             Ok(span) => {\n-                span_note!(tcx.sess, span, \"parent implementation is here:\");\n+                err.span_note(span, \"parent implementation is here:\");\n             }\n             Err(cname) => {\n-                tcx.sess.note(&format!(\"parent implementation is in crate `{}`\",\n-                                       cname));\n+                err.note(&format!(\"parent implementation is in crate `{}`\", cname));\n             }\n         }\n+\n+        err.emit();\n     }\n }\n "}, {"sha": "8f125abaec0bb9ec1663506edaa7661c45a1071f", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -20,11 +20,10 @@ use syntax::ast;\n use rustc::dep_graph::DepNode;\n use rustc_front::hir;\n use rustc_front::intravisit;\n-use util::nodemap::{DefIdMap, DefIdSet};\n+use util::nodemap::DefIdMap;\n \n pub fn check(tcx: &TyCtxt) {\n     let mut overlap = OverlapChecker { tcx: tcx,\n-                                       traits_checked: DefIdSet(),\n                                        default_impls: DefIdMap() };\n \n     // this secondary walk specifically checks for some other cases,\n@@ -35,14 +34,6 @@ pub fn check(tcx: &TyCtxt) {\n struct OverlapChecker<'cx, 'tcx:'cx> {\n     tcx: &'cx TyCtxt<'tcx>,\n \n-    // The set of traits where we have checked for overlap.  This is\n-    // used to avoid checking the same trait twice.\n-    //\n-    // NB. It's ok to skip tracking this set because we fully\n-    // encapsulate it, and we always create a task\n-    // (`CoherenceOverlapCheck`) corresponding to each entry.\n-    traits_checked: DefIdSet,\n-\n     // maps from a trait def-id to an impl id\n     default_impls: DefIdMap<ast::NodeId>,\n }\n@@ -120,20 +111,19 @@ impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n                 let impl_def_id = self.tcx.map.local_def_id(item.id);\n                 let trait_ref = self.tcx.impl_trait_ref(impl_def_id).unwrap();\n \n-                self.check_for_overlapping_impls_of_trait(trait_ref.def_id);\n-\n                 let prev_default_impl = self.default_impls.insert(trait_ref.def_id, item.id);\n                 if let Some(prev_id) = prev_default_impl {\n-                    span_err!(self.tcx.sess,\n-                              self.span_of_def_id(impl_def_id), E0519,\n-                              \"redundant default implementations of trait `{}`:\",\n-                              trait_ref);\n-                    span_note!(self.tcx.sess,\n-                               self.span_of_def_id(self.tcx.map.local_def_id(prev_id)),\n-                               \"redundant implementation is here:\");\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        self.tcx.span_of_impl(impl_def_id).unwrap(), E0519,\n+                        \"redundant default implementations of trait `{}`:\",\n+                        trait_ref);\n+                    err.span_note(self.tcx.span_of_impl(self.tcx.map.local_def_id(prev_id)).unwrap(),\n+                                  \"redundant implementation is here:\");\n+                    err.emit();\n                 }\n             }\n-            hir::ItemImpl(_, _, _, Some(_), ref self_ty, _) => {\n+            hir::ItemImpl(_, _, _, Some(_), _, _) => {\n                 let impl_def_id = self.tcx.map.local_def_id(item.id);\n                 let trait_ref = self.tcx.impl_trait_ref(impl_def_id).unwrap();\n                 let trait_def_id = trait_ref.def_id;\n@@ -162,20 +152,22 @@ impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n                         }).unwrap_or(String::new())\n                     };\n \n-                    span_err!(self.tcx.sess, self.span_of_def_id(impl_def_id), E0119,\n-                              \"conflicting implementations of trait `{}`{}:\",\n-                              overlap.on_trait_ref,\n-                              self_type);\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess, self.tcx.span_of_impl(impl_def_id).unwrap(), E0119,\n+                        \"conflicting implementations of trait `{}`{}:\",\n+                        overlap.on_trait_ref,\n+                        self_type);\n \n                     match self.tcx.span_of_impl(overlap.with_impl) {\n                         Ok(span) => {\n-                            span_note!(self.tcx.sess, span, \"conflicting implementation is here:\");\n+                            err.span_note(span, \"conflicting implementation is here:\");\n                         }\n                         Err(cname) => {\n-                            self.tcx.sess.note(&format!(\"conflicting implementation in crate `{}`\",\n-                                                        cname));\n+                            err.note(&format!(\"conflicting implementation in crate `{}`\", cname));\n                         }\n                     }\n+\n+                    err.emit();\n                 }\n \n                 // check for overlap with the automatic `impl Trait for Trait`"}, {"sha": "831c9804d1b0df001c9fe2e82ef335f56da92c41", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -69,7 +69,6 @@ use middle::resolve_lifetime;\n use middle::const_eval::{self, ConstVal};\n use middle::const_eval::EvalHint::UncheckedExprHint;\n use middle::subst::{Substs, FnSpace, ParamSpace, SelfSpace, TypeSpace, VecPerParamSpace};\n-use middle::traits;\n use middle::ty::{ToPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use middle::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeScheme};\n use middle::ty::{VariantKind};\n@@ -871,7 +870,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                                    trait_item.id,\n                                    hir::Inherited,\n                                    sig,\n-                                   hir::Defaultness::Default\n+                                   hir::Defaultness::Default,\n                                    tcx.mk_self_type(),\n                                    &trait_def.generics,\n                                    &trait_predicates);"}, {"sha": "6839f11cd709d1113009b818ac3fb53b548cc886", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -654,12 +654,12 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn eat_contextual_keyword(&mut self, ident: Ident) -> PResult<bool> {\n+    pub fn eat_contextual_keyword(&mut self, ident: Ident) -> bool {\n         if self.check_contextual_keyword(ident) {\n-            try!(self.bump());\n-            Ok(true)\n+            self.bump();\n+            true\n         } else {\n-            Ok(false)\n+            false\n         }\n     }\n \n@@ -5229,8 +5229,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse defaultness: DEFAULT or nothing\n-    fn parse_defaultness(&mut self) -> PResult<Defaultness> {\n-        if try!(self.eat_contextual_keyword(special_idents::DEFAULT)) {\n+    fn parse_defaultness(&mut self) -> PResult<'a, Defaultness> {\n+        if self.eat_contextual_keyword(special_idents::DEFAULT) {\n             Ok(Defaultness::Default)\n         } else {\n             Ok(Defaultness::Final)"}, {"sha": "3ed3549de89aaa214b9191d281a47429c741af58", "filename": "src/test/compile-fail/coherence-projection-conflict-orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -21,8 +21,8 @@ pub trait Bar {\n     type Output: 'static;\n }\n \n-impl Foo<i32> for i32 { } //~ ERROR E0119\n+impl Foo<i32> for i32 { }\n \n-impl<A:Iterator> Foo<A::Item> for A { }\n+impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n \n fn main() {}"}, {"sha": "f04902a70f68c20e490b1719efaefe4b58d38096", "filename": "src/test/compile-fail/coherence-projection-conflict-ty-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-ty-param.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -15,8 +15,8 @@ use std::marker::PhantomData;\n \n pub trait Foo<P> {}\n \n-impl <P, T: Foo<P>> Foo<P> for Option<T> {} //~ ERROR E0119\n+impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n \n-impl<T, U> Foo<T> for Option<U> { }\n+impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n \n fn main() {}"}, {"sha": "6d3ab32f06f43d08327af11f3d2088ae8c643935", "filename": "src/test/compile-fail/coherence-projection-conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9734406a5f95393e8e888cf67b48861ea8a39de7/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs?ref=9734406a5f95393e8e888cf67b48861ea8a39de7", "patch": "@@ -16,9 +16,9 @@ pub trait Bar {\n     type Output: 'static;\n }\n \n-impl Foo<i32> for i32 { } //~ ERROR E0119\n+impl Foo<i32> for i32 { }\n \n-impl<A:Bar> Foo<A::Output> for A { }\n+impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n \n impl Bar for i32 {\n     type Output = i32;"}]}