{"sha": "288799786b0e6e9ce3d2260b47574e51e1ab7b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODc5OTc4NmIwZTZlOWNlM2QyMjYwYjQ3NTc0ZTUxZTFhYjdiMTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-17T05:46:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-17T05:46:57Z"}, "message": "rustc: Sever the link between metadata and resolve", "tree": {"sha": "5201c7fb3afaccfc3fa491bef8e513e62d8fd32a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5201c7fb3afaccfc3fa491bef8e513e62d8fd32a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/288799786b0e6e9ce3d2260b47574e51e1ab7b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/288799786b0e6e9ce3d2260b47574e51e1ab7b15", "html_url": "https://github.com/rust-lang/rust/commit/288799786b0e6e9ce3d2260b47574e51e1ab7b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/288799786b0e6e9ce3d2260b47574e51e1ab7b15/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322b20d14d3f7633800afdac92e3a684b3d828bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/322b20d14d3f7633800afdac92e3a684b3d828bc", "html_url": "https://github.com/rust-lang/rust/commit/322b20d14d3f7633800afdac92e3a684b3d828bc"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "28a9757d22acf030820627bf1f8e7488b2bea043", "filename": "src/rustc/metadata.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/288799786b0e6e9ce3d2260b47574e51e1ab7b15/src%2Frustc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/288799786b0e6e9ce3d2260b47574e51e1ab7b15/src%2Frustc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata.rs?ref=288799786b0e6e9ce3d2260b47574e51e1ab7b15", "patch": "@@ -7,8 +7,6 @@ mod middle {\n     export ast_map;\n     import ty = middle_::ty;\n     export ty;\n-    import resolve = middle_::resolve;\n-    export resolve;\n }\n \n mod front {"}, {"sha": "db758048bde57a6fc63507041f22490bdd827316", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/288799786b0e6e9ce3d2260b47574e51e1ab7b15/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/288799786b0e6e9ce3d2260b47574e51e1ab7b15/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=288799786b0e6e9ce3d2260b47574e51e1ab7b15", "patch": "@@ -116,7 +116,7 @@ fn get_enum_variants(tcx: ty::ctxt, def: ast::def_id) -> [ty::variant_info] {\n \n fn get_impls_for_mod(cstore: cstore::cstore, def: ast::def_id,\n                      name: option<ast::ident>)\n-    -> @[@middle::resolve::_impl] {\n+    -> @[@decoder::_impl] {\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::get_impls_for_mod(cdata, def.node, name) {|cnum|\n         cstore::get_crate_data(cstore, cnum)"}, {"sha": "41b743d8384a9596446078b195a03bde4cef1c9b", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/288799786b0e6e9ce3d2260b47574e51e1ab7b15/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/288799786b0e6e9ce3d2260b47574e51e1ab7b15/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=288799786b0e6e9ce3d2260b47574e51e1ab7b15", "patch": "@@ -42,6 +42,7 @@ export maybe_find_item; // sketchy\n export item_type; // sketchy\n export maybe_get_item_ast;\n export decode_inlined_item;\n+export method_info, _impl;\n \n // Used internally by astencode:\n export translate_def_id;\n@@ -416,8 +417,12 @@ fn get_enum_variants(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     ret infos;\n }\n \n+// NB: These types are duplicated in resolve.rs\n+type method_info = {did: ast::def_id, n_tps: uint, ident: ast::ident};\n+type _impl = {did: ast::def_id, ident: ast::ident, methods: [@method_info]};\n+\n fn item_impl_methods(cdata: cmd, item: ebml::doc, base_tps: uint)\n-    -> [@middle::resolve::method_info] {\n+    -> [@method_info] {\n     let mut rslt = [];\n     ebml::tagged_docs(item, tag_item_impl_method) {|doc|\n         let m_did = parse_def_id(ebml::doc_data(doc));\n@@ -434,7 +439,7 @@ fn item_impl_methods(cdata: cmd, item: ebml::doc, base_tps: uint)\n fn get_impls_for_mod(cdata: cmd, m_id: ast::node_id,\n                      name: option<ast::ident>,\n                      get_cdata: fn(ast::crate_num) -> cmd)\n-    -> @[@middle::resolve::_impl] {\n+    -> @[@_impl] {\n     let data = cdata.data;\n     let mod_item = lookup_item(m_id, data);\n     let mut result = [];"}]}