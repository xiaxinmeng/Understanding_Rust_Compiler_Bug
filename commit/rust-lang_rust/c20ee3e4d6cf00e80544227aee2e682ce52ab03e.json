{"sha": "c20ee3e4d6cf00e80544227aee2e682ce52ab03e", "node_id": "C_kwDOAAsO6NoAKGMyMGVlM2U0ZDZjZjAwZTgwNTQ0MjI3YWVlMmU2ODJjZTUyYWIwM2U", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-10T04:59:45Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-10T05:10:42Z"}, "message": "Add comments ensuring that generics are cleaned before args\n\nOtherwise, rustdoc panics with messages like this:\n\n   thread 'rustc' panicked at 'assertion failed: cx.impl_trait_bounds.is_empty()',\n   src/librustdoc/clean/utils.rs:462:5\n\nThis ordering requirement is unrelated to the `clean_fn_decl_with_args`\nrefactoring, but the requirement was uncovered as part of that change.\n\nI'm not sure if *all* of these places have the requirement, but I added\ncomments to them just in case.", "tree": {"sha": "aef85b43a52b9a1c6489c1e8f415232922aa64f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aef85b43a52b9a1c6489c1e8f415232922aa64f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c20ee3e4d6cf00e80544227aee2e682ce52ab03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c20ee3e4d6cf00e80544227aee2e682ce52ab03e", "html_url": "https://github.com/rust-lang/rust/commit/c20ee3e4d6cf00e80544227aee2e682ce52ab03e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c20ee3e4d6cf00e80544227aee2e682ce52ab03e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f", "html_url": "https://github.com/rust-lang/rust/commit/c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "1324080b87e9c7425123665617e07ecac5a932ea", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c20ee3e4d6cf00e80544227aee2e682ce52ab03e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20ee3e4d6cf00e80544227aee2e682ce52ab03e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c20ee3e4d6cf00e80544227aee2e682ce52ab03e", "patch": "@@ -229,6 +229,7 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n     let asyncness = cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {\n+        // NOTE: generics need to be cleaned before the decl!\n         ((cx.tcx.generics_of(did), predicates).clean(cx), (did, sig).clean(cx))\n     });\n     clean::Function {"}, {"sha": "d7eecdc598c9321a6caa35b89970af1afd5e3085", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20ee3e4d6cf00e80544227aee2e682ce52ab03e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20ee3e4d6cf00e80544227aee2e682ce52ab03e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c20ee3e4d6cf00e80544227aee2e682ce52ab03e", "patch": "@@ -765,6 +765,7 @@ fn clean_fn_or_proc_macro(\n impl<'a> Clean<Function> for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::BodyId) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Function {\n         let (generics, decl) = enter_impl_trait(cx, |cx| {\n+            // NOTE: generics must be cleaned before args\n             let generics = self.1.clean(cx);\n             let args = (self.0.decl.inputs, self.2).clean(cx);\n             let decl = clean_fn_decl_with_args(cx, self.0.decl, args);\n@@ -896,6 +897,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                 }\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(names)) => {\n                     let (generics, decl) = enter_impl_trait(cx, |cx| {\n+                        // NOTE: generics must be cleaned before args\n                         let generics = self.generics.clean(cx);\n                         let args = (sig.decl.inputs, names).clean(cx);\n                         let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n@@ -1732,6 +1734,7 @@ impl Clean<PathSegment> for hir::PathSegment<'_> {\n impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> BareFunctionDecl {\n         let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n+            // NOTE: generics must be cleaned before args\n             let generic_params = self.generic_params.iter().map(|x| x.clean(cx)).collect();\n             let args = (self.decl.inputs, self.param_names).clean(cx);\n             let decl = clean_fn_decl_with_args(cx, self.decl, args);\n@@ -2032,6 +2035,7 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n                 hir::ForeignItemKind::Fn(decl, names, ref generics) => {\n                     let abi = cx.tcx.hir().get_foreign_abi(item.hir_id());\n                     let (generics, decl) = enter_impl_trait(cx, |cx| {\n+                        // NOTE: generics must be cleaned before args\n                         let generics = generics.clean(cx);\n                         let args = (decl.inputs, names).clean(cx);\n                         let decl = clean_fn_decl_with_args(cx, decl, args);"}]}