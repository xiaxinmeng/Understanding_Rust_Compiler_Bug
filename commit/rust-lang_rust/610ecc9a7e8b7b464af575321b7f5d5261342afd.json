{"sha": "610ecc9a7e8b7b464af575321b7f5d5261342afd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMGVjYzlhN2U4YjdiNDY0YWY1NzUzMjFiN2Y1ZDUyNjEzNDJhZmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-17T15:14:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-17T15:14:02Z"}, "message": "Merge #9620\n\n9620: internal: don't depend on cwd r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "df350f7376943a469d6d7788117f3e97024f8d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df350f7376943a469d6d7788117f3e97024f8d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610ecc9a7e8b7b464af575321b7f5d5261342afd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8vO6CRBK7hj4Ov3rIwAAKB8IAFTvx1/Lq4KH9Qh2LuVmvTnt\nf6ooGkpKcxHOM48CDsAlcUX3yUJyNBILY+WiOH1ZY5ReZZNzdgxeHJyOd7huw+U1\nn7E8T1ulHGQ0DKFkqWYSRfcOr31n9v2pvVbvFxGysSib1FaPigZA2WFvZ53iuqzw\ncxAzkNYN/1O+rTo9ouORSNtQE/iHGYm29338egodfR0nrXFxS7rK1cZORz505xLb\n5jdNZc6Oeczl3buZEdQyDX3yb0suVggXaNGyUbSfcqqEluh53sVPIlcOEGmD1bCc\nMTvAyz7mUGugM3JPyl+2BqUtMS510vFCKgQsIUfdQAxNAK473tYOcNq9KrLqPng=\n=q0SW\n-----END PGP SIGNATURE-----\n", "payload": "tree df350f7376943a469d6d7788117f3e97024f8d29\nparent 0fb1c27b1301de71be9e98e9c7b2ce63fc930a0e\nparent 8d8c26e6f5197ee25c69cbf1341ffceca55b9301\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626534842 +0000\ncommitter GitHub <noreply@github.com> 1626534842 +0000\n\nMerge #9620\n\n9620: internal: don't depend on cwd r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610ecc9a7e8b7b464af575321b7f5d5261342afd", "html_url": "https://github.com/rust-lang/rust/commit/610ecc9a7e8b7b464af575321b7f5d5261342afd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610ecc9a7e8b7b464af575321b7f5d5261342afd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb1c27b1301de71be9e98e9c7b2ce63fc930a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb1c27b1301de71be9e98e9c7b2ce63fc930a0e", "html_url": "https://github.com/rust-lang/rust/commit/0fb1c27b1301de71be9e98e9c7b2ce63fc930a0e"}, {"sha": "8d8c26e6f5197ee25c69cbf1341ffceca55b9301", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8c26e6f5197ee25c69cbf1341ffceca55b9301", "html_url": "https://github.com/rust-lang/rust/commit/8d8c26e6f5197ee25c69cbf1341ffceca55b9301"}], "stats": {"total": 283, "additions": 178, "deletions": 105}, "files": [{"sha": "82c7c143ffa6f887dd47b69b7a90898ea94eebd6", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -381,6 +381,7 @@ dependencies = [\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"log\",\n+ \"paths\",\n  \"serde\",\n  \"serde_json\",\n  \"stdx\",\n@@ -1042,6 +1043,9 @@ dependencies = [\n [[package]]\n name = \"paths\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"serde\",\n+]\n \n [[package]]\n name = \"percent-encoding\"\n@@ -1109,6 +1113,7 @@ dependencies = [\n  \"log\",\n  \"memmap2\",\n  \"object\",\n+ \"paths\",\n  \"profile\",\n  \"serde\",\n  \"serde_json\",\n@@ -1127,6 +1132,7 @@ dependencies = [\n  \"mbe\",\n  \"memmap2\",\n  \"object\",\n+ \"paths\",\n  \"proc_macro_api\",\n  \"proc_macro_test\",\n  \"test_utils\","}, {"sha": "8e0ef8f6d6416a9113616a82da013022f4376e55", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -18,3 +18,4 @@ jod-thread = \"0.1.1\"\n \n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+paths = { path = \"../paths\", version = \"0.0.0\" }"}, {"sha": "6a3b4a45a64ea89a66360c3ddc1936a09822b964", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -5,12 +5,12 @@\n use std::{\n     fmt,\n     io::{self, BufRead, BufReader},\n-    path::PathBuf,\n     process::{self, Command, Stdio},\n     time::Duration,\n };\n \n use crossbeam_channel::{never, select, unbounded, Receiver, Sender};\n+use paths::AbsPathBuf;\n use serde::Deserialize;\n use stdx::JodChild;\n \n@@ -63,7 +63,7 @@ impl FlycheckHandle {\n         id: usize,\n         sender: Box<dyn Fn(Message) + Send>,\n         config: FlycheckConfig,\n-        workspace_root: PathBuf,\n+        workspace_root: AbsPathBuf,\n     ) -> FlycheckHandle {\n         let actor = FlycheckActor::new(id, sender, config, workspace_root);\n         let (sender, receiver) = unbounded::<Restart>();\n@@ -82,7 +82,7 @@ impl FlycheckHandle {\n \n pub enum Message {\n     /// Request adding a diagnostic with fixes included to a file\n-    AddDiagnostic { workspace_root: PathBuf, diagnostic: Diagnostic },\n+    AddDiagnostic { workspace_root: AbsPathBuf, diagnostic: Diagnostic },\n \n     /// Request check progress notification to client\n     Progress {\n@@ -121,7 +121,7 @@ struct FlycheckActor {\n     id: usize,\n     sender: Box<dyn Fn(Message) + Send>,\n     config: FlycheckConfig,\n-    workspace_root: PathBuf,\n+    workspace_root: AbsPathBuf,\n     /// WatchThread exists to wrap around the communication needed to be able to\n     /// run `cargo check` without blocking. Currently the Rust standard library\n     /// doesn't provide a way to read sub-process output without blocking, so we\n@@ -140,7 +140,7 @@ impl FlycheckActor {\n         id: usize,\n         sender: Box<dyn Fn(Message) + Send>,\n         config: FlycheckConfig,\n-        workspace_root: PathBuf,\n+        workspace_root: AbsPathBuf,\n     ) -> FlycheckActor {\n         FlycheckActor { id, sender, config, workspace_root, cargo_handle: None }\n     }\n@@ -220,7 +220,7 @@ impl FlycheckActor {\n                 cmd.arg(command);\n                 cmd.current_dir(&self.workspace_root);\n                 cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n-                    .arg(self.workspace_root.join(\"Cargo.toml\"));\n+                    .arg(self.workspace_root.join(\"Cargo.toml\").as_os_str());\n \n                 if let Some(target) = target_triple {\n                     cmd.args(&[\"--target\", target.as_str()]);"}, {"sha": "cf44b7a0d2a4d2ef48d21c02c7aff8001fcece7e", "filename": "crates/paths/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fpaths%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fpaths%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2FCargo.toml?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -7,3 +7,6 @@ edition = \"2018\"\n \n [lib]\n doctest = false\n+\n+[dependencies]\n+serde = \"1\""}, {"sha": "f976783dea2995eb82f2532646bfbfaacd0ba7e1", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 59, "deletions": 14, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -3,6 +3,7 @@\n use std::{\n     borrow::Borrow,\n     convert::{TryFrom, TryInto},\n+    ffi::OsStr,\n     ops,\n     path::{Component, Path, PathBuf},\n };\n@@ -65,6 +66,27 @@ impl PartialEq<AbsPath> for AbsPathBuf {\n     }\n }\n \n+impl serde::Serialize for AbsPathBuf {\n+    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+    where\n+        S: serde::Serializer,\n+    {\n+        self.0.serialize(serializer)\n+    }\n+}\n+\n+impl<'de> serde::Deserialize<'de> for AbsPathBuf {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: serde::Deserializer<'de>,\n+    {\n+        let path = PathBuf::deserialize(deserializer)?;\n+        AbsPathBuf::try_from(path).map_err(|path| {\n+            serde::de::Error::custom(format!(\"expected absolute path, got {}\", path.display()))\n+        })\n+    }\n+}\n+\n impl AbsPathBuf {\n     /// Wrap the given absolute path in `AbsPathBuf`\n     ///\n@@ -97,13 +119,6 @@ impl AbsPathBuf {\n #[repr(transparent)]\n pub struct AbsPath(Path);\n \n-impl ops::Deref for AbsPath {\n-    type Target = Path;\n-    fn deref(&self) -> &Path {\n-        &self.0\n-    }\n-}\n-\n impl AsRef<Path> for AbsPath {\n     fn as_ref(&self) -> &Path {\n         &self.0\n@@ -168,6 +183,43 @@ impl AbsPath {\n     pub fn strip_prefix(&self, base: &AbsPath) -> Option<&RelPath> {\n         self.0.strip_prefix(base).ok().map(RelPath::new_unchecked)\n     }\n+    pub fn starts_with(&self, base: &AbsPath) -> bool {\n+        self.0.starts_with(&base.0)\n+    }\n+    pub fn ends_with(&self, suffix: &RelPath) -> bool {\n+        self.0.starts_with(&suffix.0)\n+    }\n+\n+    // region:delegate-methods\n+\n+    // Note that we deliberately don't implement `Deref<Target = Path>` here.\n+    //\n+    // The problem with `Path` is that it directly exposes convenience IO-ing\n+    // methods. For example, `Path::exists` delegates to `fs::metadata`.\n+    //\n+    // For `AbsPath`, we want to make sure that this is a POD type, and that all\n+    // IO goes via `fs`. That way, it becomes easier to mock IO when we need it.\n+\n+    pub fn file_name(&self) -> Option<&OsStr> {\n+        self.0.file_name()\n+    }\n+    pub fn extension(&self) -> Option<&OsStr> {\n+        self.0.extension()\n+    }\n+    pub fn file_stem(&self) -> Option<&OsStr> {\n+        self.0.file_stem()\n+    }\n+    pub fn as_os_str(&self) -> &OsStr {\n+        self.0.as_os_str()\n+    }\n+    pub fn display(&self) -> std::path::Display<'_> {\n+        self.0.display()\n+    }\n+    #[deprecated(note = \"use std::fs::metadata().is_ok() instead\")]\n+    pub fn exists(&self) -> bool {\n+        self.0.exists()\n+    }\n+    // endregion:delegate-methods\n }\n \n /// Wrapper around a relative [`PathBuf`].\n@@ -224,13 +276,6 @@ impl RelPathBuf {\n #[repr(transparent)]\n pub struct RelPath(Path);\n \n-impl ops::Deref for RelPath {\n-    type Target = Path;\n-    fn deref(&self) -> &Path {\n-        &self.0\n-    }\n-}\n-\n impl AsRef<Path> for RelPath {\n     fn as_ref(&self) -> &Path {\n         &self.0"}, {"sha": "143be97df05bc3004df33e8dd38be018088f7ff5", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -18,6 +18,7 @@ memmap2 = \"0.3.0\"\n object = { version = \"0.25.3\", default-features = false, features = [\"std\", \"read_core\", \"elf\", \"macho\", \"pe\"] }\n snap = \"1.0\"\n \n+paths = { path = \"../paths\", version = \"0.0.0\" }\n tt = { path = \"../tt\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "2bcaf74678b6c795b7fd136f5aa56cd013d0e3d3", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -11,10 +11,10 @@ mod rpc;\n mod version;\n \n use base_db::{Env, ProcMacro};\n+use paths::{AbsPath, AbsPathBuf};\n use std::{\n     ffi::OsStr,\n     io,\n-    path::{Path, PathBuf},\n     sync::{Arc, Mutex},\n };\n \n@@ -28,7 +28,7 @@ pub use version::{read_dylib_info, RustCInfo};\n #[derive(Debug, Clone)]\n struct ProcMacroProcessExpander {\n     process: Arc<Mutex<ProcMacroProcessSrv>>,\n-    dylib_path: PathBuf,\n+    dylib_path: AbsPathBuf,\n     name: SmolStr,\n }\n \n@@ -79,25 +79,25 @@ pub struct ProcMacroClient {\n impl ProcMacroClient {\n     /// Spawns an external process as the proc macro server and returns a client connected to it.\n     pub fn extern_process(\n-        process_path: PathBuf,\n+        process_path: AbsPathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroClient> {\n         let process = ProcMacroProcessSrv::run(process_path, args)?;\n         Ok(ProcMacroClient { process: Arc::new(Mutex::new(process)) })\n     }\n \n-    pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n+    pub fn by_dylib_path(&self, dylib_path: &AbsPath) -> Vec<ProcMacro> {\n         let _p = profile::span(\"ProcMacroClient::by_dylib_path\");\n         match version::read_dylib_info(dylib_path) {\n             Ok(info) => {\n                 if info.version.0 < 1 || info.version.1 < 47 {\n-                    eprintln!(\"proc-macro {} built by {:#?} is not supported by Rust Analyzer, please update your rust version.\", dylib_path.to_string_lossy(), info);\n+                    eprintln!(\"proc-macro {} built by {:#?} is not supported by Rust Analyzer, please update your rust version.\", dylib_path.display(), info);\n                 }\n             }\n             Err(err) => {\n                 eprintln!(\n                     \"proc-macro {} failed to find the given version. Reason: {}\",\n-                    dylib_path.to_string_lossy(),\n+                    dylib_path.display(),\n                     err\n                 );\n             }\n@@ -128,7 +128,7 @@ impl ProcMacroClient {\n                 let expander = Arc::new(ProcMacroProcessExpander {\n                     process: self.process.clone(),\n                     name: name.clone(),\n-                    dylib_path: dylib_path.into(),\n+                    dylib_path: dylib_path.to_path_buf(),\n                 });\n \n                 ProcMacro { name, kind, expander }"}, {"sha": "466ac962f971f4b6b32c73e723cfc53519d6e4f2", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -4,10 +4,10 @@ use std::{\n     convert::{TryFrom, TryInto},\n     ffi::{OsStr, OsString},\n     io::{self, BufRead, BufReader, Write},\n-    path::{Path, PathBuf},\n     process::{Child, ChildStdin, ChildStdout, Command, Stdio},\n };\n \n+use paths::{AbsPath, AbsPathBuf};\n use stdx::JodChild;\n \n use crate::{\n@@ -24,7 +24,7 @@ pub(crate) struct ProcMacroProcessSrv {\n \n impl ProcMacroProcessSrv {\n     pub(crate) fn run(\n-        process_path: PathBuf,\n+        process_path: AbsPathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroProcessSrv> {\n         let mut process = Process::run(process_path, args)?;\n@@ -37,7 +37,7 @@ impl ProcMacroProcessSrv {\n \n     pub(crate) fn find_proc_macros(\n         &mut self,\n-        dylib_path: &Path,\n+        dylib_path: &AbsPath,\n     ) -> Result<Vec<(String, ProcMacroKind)>, tt::ExpansionError> {\n         let task = ListMacrosTask { lib: dylib_path.to_path_buf() };\n \n@@ -84,7 +84,7 @@ struct Process {\n \n impl Process {\n     fn run(\n-        path: PathBuf,\n+        path: AbsPathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<Process> {\n         let args: Vec<OsString> = args.into_iter().map(|s| s.as_ref().into()).collect();\n@@ -101,8 +101,11 @@ impl Process {\n     }\n }\n \n-fn mk_child(path: &Path, args: impl IntoIterator<Item = impl AsRef<OsStr>>) -> io::Result<Child> {\n-    Command::new(&path)\n+fn mk_child(\n+    path: &AbsPath,\n+    args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+) -> io::Result<Child> {\n+    Command::new(path.as_os_str())\n         .args(args)\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())"}, {"sha": "d56136196e96b2e7313b64847714566fe8178f66", "filename": "crates/proc_macro_api/src/rpc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -6,8 +6,7 @@\n //! to be much easier, we deliberately duplicate `tt` structs with `#[serde(with = \"XXDef\")]`\n //! for separation of code responsibility.\n \n-use std::path::PathBuf;\n-\n+use paths::AbsPathBuf;\n use serde::{Deserialize, Serialize};\n use tt::{\n     Delimiter, DelimiterKind, Ident, Leaf, Literal, Punct, SmolStr, Spacing, Subtree, TokenId,\n@@ -16,7 +15,7 @@ use tt::{\n \n #[derive(Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n pub struct ListMacrosTask {\n-    pub lib: PathBuf,\n+    pub lib: AbsPathBuf,\n }\n \n #[derive(Copy, Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n@@ -50,7 +49,7 @@ pub struct ExpansionTask {\n     #[serde(with = \"opt_subtree_def\")]\n     pub attributes: Option<Subtree>,\n \n-    pub lib: PathBuf,\n+    pub lib: AbsPathBuf,\n \n     /// Environment variables to set during macro expansion.\n     pub env: Vec<(String, String)>,\n@@ -272,7 +271,7 @@ mod tests {\n             macro_body: tt.clone(),\n             macro_name: Default::default(),\n             attributes: None,\n-            lib: Default::default(),\n+            lib: AbsPathBuf::assert(std::env::current_dir().unwrap()),\n             env: Default::default(),\n         };\n "}, {"sha": "fa2b60fcb9c445977671f79bb5530daca0f25915", "filename": "crates/proc_macro_api/src/version.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fversion.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -3,11 +3,11 @@\n use std::{\n     fs::File,\n     io::{self, Read},\n-    path::Path,\n };\n \n use memmap2::Mmap;\n use object::read::{File as BinaryFile, Object, ObjectSection};\n+use paths::AbsPath;\n use snap::read::FrameDecoder as SnapDecoder;\n \n #[derive(Debug)]\n@@ -19,7 +19,7 @@ pub struct RustCInfo {\n }\n \n /// Read rustc dylib information\n-pub fn read_dylib_info(dylib_path: &Path) -> io::Result<RustCInfo> {\n+pub fn read_dylib_info(dylib_path: &AbsPath) -> io::Result<RustCInfo> {\n     macro_rules! err {\n         ($e:literal) => {\n             io::Error::new(io::ErrorKind::InvalidData, $e)\n@@ -96,7 +96,7 @@ fn read_section<'a>(dylib_binary: &'a [u8], section_name: &str) -> io::Result<&'\n /// * [some more bytes that we don really care but still there] :-)\n /// Check this issue for more about the bytes layout:\n /// <https://github.com/rust-analyzer/rust-analyzer/issues/6174>\n-fn read_version(dylib_path: &Path) -> io::Result<String> {\n+fn read_version(dylib_path: &AbsPath) -> io::Result<String> {\n     let dylib_file = File::open(dylib_path)?;\n     let dylib_mmaped = unsafe { Mmap::map(&dylib_file) }?;\n "}, {"sha": "df4680c6efa1a1fc0661425e068462c5fe360241", "filename": "crates/proc_macro_srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2FCargo.toml?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -15,6 +15,7 @@ memmap2 = \"0.3.0\"\n \n tt = { path = \"../tt\", version = \"0.0.0\" }\n mbe = { path = \"../mbe\", version = \"0.0.0\" }\n+paths = { path = \"../paths\", version = \"0.0.0\" }\n proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n \n [dev-dependencies]"}, {"sha": "ab13e66fb8156224809364724aeb06dfb6f62540", "filename": "crates/proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -1,6 +1,7 @@\n //! Handles dynamic library loading for proc macro\n \n use std::{\n+    convert::TryInto,\n     fmt,\n     fs::File,\n     io,\n@@ -10,6 +11,7 @@ use std::{\n use libloading::Library;\n use memmap2::Mmap;\n use object::Object;\n+use paths::AbsPath;\n use proc_macro_api::{read_dylib_info, ProcMacroKind};\n \n use super::abis::Abi;\n@@ -116,7 +118,10 @@ impl ProcMacroLibraryLibloading {\n             invalid_data_err(format!(\"Cannot find registrar symbol in file {}\", file.display()))\n         })?;\n \n-        let version_info = read_dylib_info(file)?;\n+        let abs_file: &AbsPath = file.try_into().map_err(|_| {\n+            invalid_data_err(format!(\"expected an absolute path, got {}\", file.display()))\n+        })?;\n+        let version_info = read_dylib_info(&abs_file)?;\n \n         let lib = load_library(file).map_err(invalid_data_err)?;\n         let abi = Abi::from_lib(&lib, symbol_name, version_info)?;\n@@ -136,7 +141,7 @@ impl Expander {\n \n         let lib = ensure_file_with_lock_free_access(&lib)?;\n \n-        let library = ProcMacroLibraryLibloading::open(&lib)?;\n+        let library = ProcMacroLibraryLibloading::open(lib.as_ref())?;\n \n         Ok(Expander { inner: library })\n     }"}, {"sha": "1c39455112c36f4ac9cb033b0d0b7e90c3ff4bed", "filename": "crates/proc_macro_srv/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Flib.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -30,7 +30,7 @@ pub(crate) struct ProcMacroSrv {\n \n impl ProcMacroSrv {\n     pub fn expand(&mut self, task: &ExpansionTask) -> Result<ExpansionResult, String> {\n-        let expander = self.expander(&task.lib)?;\n+        let expander = self.expander(task.lib.as_ref())?;\n \n         let mut prev_env = HashMap::new();\n         for (k, v) in &task.env {\n@@ -54,7 +54,7 @@ impl ProcMacroSrv {\n     }\n \n     pub fn list_macros(&mut self, task: &ListMacrosTask) -> Result<ListMacrosResult, String> {\n-        let expander = self.expander(&task.lib)?;\n+        let expander = self.expander(task.lib.as_ref())?;\n         Ok(ListMacrosResult { macros: expander.list_macros() })\n     }\n "}, {"sha": "9356e6dcb012ac07ec78425aeb6a5799b89e4416", "filename": "crates/proc_macro_srv/src/tests/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -3,6 +3,7 @@\n #[macro_use]\n mod utils;\n use expect_test::expect;\n+use paths::AbsPathBuf;\n use utils::*;\n \n #[test]\n@@ -95,7 +96,7 @@ fn list_test_macros() {\n \n #[test]\n fn test_version_check() {\n-    let path = fixtures::proc_macro_test_dylib_path();\n+    let path = AbsPathBuf::assert(fixtures::proc_macro_test_dylib_path());\n     let info = proc_macro_api::read_dylib_info(&path).unwrap();\n     assert!(info.version.1 >= 50);\n }"}, {"sha": "d78e14a2dda5a2a311d8f33ac3c995ba28dfebd9", "filename": "crates/proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -3,6 +3,7 @@\n use crate::dylib;\n use crate::ProcMacroSrv;\n use expect_test::Expect;\n+use paths::AbsPathBuf;\n use proc_macro_api::ListMacrosTask;\n use std::str::FromStr;\n \n@@ -41,7 +42,7 @@ fn assert_expand_impl(macro_name: &str, input: &str, attr: Option<&str>, expect:\n }\n \n pub fn list() -> Vec<String> {\n-    let path = fixtures::proc_macro_test_dylib_path();\n+    let path = AbsPathBuf::assert(fixtures::proc_macro_test_dylib_path());\n     let task = ListMacrosTask { lib: path };\n     let mut srv = ProcMacroSrv::default();\n     let res = srv.list_macros(&task).unwrap();"}, {"sha": "92ead0c43567ba3d88fa8f9930f4ba93f9585b45", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -258,7 +258,7 @@ impl WorkspaceBuildData {\n             inject_cargo_env(package, package_build_data);\n             if let Some(out_dir) = &package_build_data.out_dir {\n                 // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n-                if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n+                if let Some(out_dir) = out_dir.as_os_str().to_str().map(|s| s.to_owned()) {\n                     package_build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n                 }\n             }"}, {"sha": "5f65b7bbe6ebb9eb7620f504c1b40412c6b026c6", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -273,11 +273,11 @@ impl CargoWorkspace {\n                 .parent()\n                 .map(|p| p.to_path_buf())\n                 .or(cwd)\n-                .map(|dir| dir.to_string_lossy().to_string())\n-                .unwrap_or_else(|| \"<failed to get path>\".into());\n+                .map(|dir| format!(\" in `{}`\", dir.display()))\n+                .unwrap_or_default();\n \n             format!(\n-                \"Failed to run `cargo metadata --manifest-path {}` in `{}`\",\n+                \"Failed to run `cargo metadata --manifest-path {}`{}\",\n                 cargo_toml.display(),\n                 workdir\n             )"}, {"sha": "22364cfd04ccacc5f1dcfe078f594eed341074b0", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -24,7 +24,7 @@ mod rustc_cfg;\n mod build_data;\n \n use std::{\n-    fs::{read_dir, ReadDir},\n+    fs::{self, read_dir, ReadDir},\n     io,\n     process::Command,\n };\n@@ -54,10 +54,10 @@ pub enum ProjectManifest {\n \n impl ProjectManifest {\n     pub fn from_manifest_file(path: AbsPathBuf) -> Result<ProjectManifest> {\n-        if path.ends_with(\"rust-project.json\") {\n+        if path.file_name().unwrap_or_default() == \"rust-project.json\" {\n             return Ok(ProjectManifest::ProjectJson(path));\n         }\n-        if path.ends_with(\"Cargo.toml\") {\n+        if path.file_name().unwrap_or_default() == \"Cargo.toml\" {\n             return Ok(ProjectManifest::CargoToml(path));\n         }\n         bail!(\"project root must point to Cargo.toml or rust-project.json: {}\", path.display())\n@@ -91,15 +91,15 @@ impl ProjectManifest {\n         }\n \n         fn find_in_parent_dirs(path: &AbsPath, target_file_name: &str) -> Option<AbsPathBuf> {\n-            if path.ends_with(target_file_name) {\n+            if path.file_name().unwrap_or_default() == target_file_name {\n                 return Some(path.to_path_buf());\n             }\n \n             let mut curr = Some(path);\n \n             while let Some(path) = curr {\n                 let candidate = path.join(target_file_name);\n-                if candidate.exists() {\n+                if fs::metadata(&candidate).is_ok() {\n                     return Some(candidate);\n                 }\n                 curr = path.parent();"}, {"sha": "b89c5a3598a7e09c000306f77606def5d238729a", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -4,7 +4,7 @@\n //! but we can't process `.rlib` and need source code instead. The source code\n //! is typically installed with `rustup component add rust-src` command.\n \n-use std::{convert::TryFrom, env, ops, path::PathBuf, process::Command};\n+use std::{convert::TryFrom, env, fs, ops, path::PathBuf, process::Command};\n \n use anyhow::{format_err, Result};\n use la_arena::{Arena, Idx};\n@@ -73,7 +73,7 @@ impl Sysroot {\n             let root = [format!(\"{}/src/lib.rs\", path), format!(\"lib{}/lib.rs\", path)]\n                 .iter()\n                 .map(|it| sysroot_src_dir.join(it))\n-                .find(|it| it.exists());\n+                .find(|it| fs::metadata(it).is_ok());\n \n             if let Some(root) = root {\n                 sysroot.crates.alloc(SysrootCrateData {\n@@ -142,7 +142,7 @@ fn discover_sysroot_src_dir(\n         let path = AbsPathBuf::try_from(path.as_str())\n             .map_err(|path| format_err!(\"RUST_SRC_PATH must be absolute: {}\", path.display()))?;\n         let core = path.join(\"core\");\n-        if core.exists() {\n+        if fs::metadata(&core).is_ok() {\n             log::debug!(\"Discovered sysroot by RUST_SRC_PATH: {}\", path.display());\n             return Ok(path);\n         }\n@@ -171,7 +171,7 @@ try installing the Rust source the same way you installed rustc\",\n fn get_rustc_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n     let rustc_src = sysroot_path.join(\"lib/rustlib/rustc-src/rust/compiler/rustc/Cargo.toml\");\n     log::debug!(\"Checking for rustc source code: {}\", rustc_src.display());\n-    if rustc_src.exists() {\n+    if fs::metadata(&rustc_src).is_ok() {\n         Some(rustc_src)\n     } else {\n         None\n@@ -182,7 +182,7 @@ fn get_rust_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n     // Try the new path first since the old one still exists.\n     let rust_src = sysroot_path.join(\"lib/rustlib/src/rust\");\n     log::debug!(\"Checking sysroot (looking for `library` and `src` dirs): {}\", rust_src.display());\n-    [\"library\", \"src\"].iter().map(|it| rust_src.join(it)).find(|it| it.exists())\n+    [\"library\", \"src\"].iter().map(|it| rust_src.join(it)).find(|it| fs::metadata(it).is_ok())\n }\n \n impl SysrootCrateData {"}, {"sha": "c1750d43a5f1dc14cc1a2d9afa50036bb14e1c04", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -2,7 +2,7 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{collections::VecDeque, fmt, fs, path::Path, process::Command};\n+use std::{collections::VecDeque, fmt, fs, process::Command};\n \n use anyhow::{format_err, Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n@@ -311,7 +311,7 @@ impl ProjectWorkspace {\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n-        let proc_macro_loader = |path: &Path| match proc_macro_client {\n+        let proc_macro_loader = |path: &AbsPath| match proc_macro_client {\n             Some(client) => client.by_dylib_path(path),\n             None => Vec::new(),\n         };\n@@ -364,7 +364,7 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n-    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n+    proc_macro_loader: &dyn Fn(&AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n@@ -431,7 +431,7 @@ fn project_json_to_crate_graph(\n fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     override_cfg: &CfgOverrides,\n-    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n+    proc_macro_loader: &dyn Fn(&AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     build_data_map: Option<&WorkspaceBuildData>,\n@@ -616,7 +616,7 @@ fn handle_rustc_crates(\n     crate_graph: &mut CrateGraph,\n     rustc_build_data_map: Option<&WorkspaceBuildData>,\n     cfg_options: &CfgOptions,\n-    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n+    proc_macro_loader: &dyn Fn(&AbsPath) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n     public_deps: &[(CrateName, CrateId)],\n     cargo: &CargoWorkspace,\n@@ -708,7 +708,7 @@ fn add_target_crate_root(\n     pkg: &cargo_workspace::PackageData,\n     build_data: Option<&PackageBuildData>,\n     cfg_options: &CfgOptions,\n-    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n+    proc_macro_loader: &dyn Fn(&AbsPath) -> Vec<ProcMacro>,\n     file_id: FileId,\n     cargo_name: &str,\n ) -> CrateId {"}, {"sha": "b8f47f2b985ce145b70a90405f4cc8b3fc87ae54", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -28,7 +28,9 @@ pub(crate) fn load_workspace_at(\n     progress: &dyn Fn(String),\n ) -> Result<(AnalysisHost, vfs::Vfs, Option<ProcMacroClient>)> {\n     let root = AbsPathBuf::assert(std::env::current_dir()?.join(root));\n+    eprintln!(\"root = {:?}\", root);\n     let root = ProjectManifest::discover_single(&root)?;\n+    eprintln!(\"root = {:?}\", root);\n     let workspace = ProjectWorkspace::load(root, cargo_config, progress)?;\n \n     load_workspace(workspace, load_config, progress)\n@@ -48,7 +50,7 @@ fn load_workspace(\n     };\n \n     let proc_macro_client = if config.with_proc_macro {\n-        let path = std::env::current_exe()?;\n+        let path = AbsPathBuf::assert(std::env::current_exe()?);\n         Some(ProcMacroClient::extern_process(path, &[\"proc-macro\"]).unwrap())\n     } else {\n         None\n@@ -142,7 +144,7 @@ mod tests {\n     use hir::Crate;\n \n     #[test]\n-    fn test_loading_rust_analyzer() -> Result<()> {\n+    fn test_loading_rust_analyzer() {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n         let cargo_config = Default::default();\n         let load_cargo_config = LoadCargoConfig {\n@@ -152,12 +154,10 @@ mod tests {\n             prefill_caches: false,\n         };\n         let (host, _vfs, _proc_macro) =\n-            load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n+            load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {}).unwrap();\n \n         let n_crates = Crate::all(host.raw_database()).len();\n         // RA has quite a few crates, but the exact count doesn't matter\n         assert!(n_crates > 20);\n-\n-        Ok(())\n     }\n }"}, {"sha": "7df60229648d36bb4a7057b969f4eaf01f7835d0", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -597,12 +597,14 @@ impl Config {\n     pub fn lru_capacity(&self) -> Option<usize> {\n         self.data.lruCapacity\n     }\n-    pub fn proc_macro_srv(&self) -> Option<(PathBuf, Vec<OsString>)> {\n+    pub fn proc_macro_srv(&self) -> Option<(AbsPathBuf, Vec<OsString>)> {\n         if !self.data.procMacro_enable {\n             return None;\n         }\n-\n-        let path = self.data.procMacro_server.clone().or_else(|| std::env::current_exe().ok())?;\n+        let path = match &self.data.procMacro_server {\n+            Some(it) => self.root_path.join(it),\n+            None => AbsPathBuf::assert(std::env::current_exe().ok()?),\n+        };\n         Some((path, vec![\"proc-macro\".into()]))\n     }\n     pub fn expand_proc_attr_macros(&self) -> bool {"}, {"sha": "d64909add38c9ea113472ebd2956753b6581f26d", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -1,12 +1,10 @@\n //! This module provides the functionality needed to convert diagnostics from\n //! `cargo check` json format to the LSP diagnostic format.\n-use std::{\n-    collections::HashMap,\n-    path::{Path, PathBuf},\n-};\n+use std::collections::HashMap;\n \n use flycheck::{DiagnosticLevel, DiagnosticSpan};\n use stdx::format_to;\n+use vfs::{AbsPath, AbsPathBuf};\n \n use crate::{lsp_ext, to_proto::url_from_abs_path};\n \n@@ -46,7 +44,7 @@ fn is_dummy_macro_file(file_name: &str) -> bool {\n /// Converts a Rust span to a LSP location\n fn location(\n     config: &DiagnosticsMapConfig,\n-    workspace_root: &Path,\n+    workspace_root: &AbsPath,\n     span: &DiagnosticSpan,\n ) -> lsp_types::Location {\n     let file_name = resolve_path(config, workspace_root, &span.file_name);\n@@ -67,7 +65,7 @@ fn location(\n /// workspace into account and tries to avoid those, in case macros are involved.\n fn primary_location(\n     config: &DiagnosticsMapConfig,\n-    workspace_root: &Path,\n+    workspace_root: &AbsPath,\n     span: &DiagnosticSpan,\n ) -> lsp_types::Location {\n     let span_stack = std::iter::successors(Some(span), |span| Some(&span.expansion.as_ref()?.span));\n@@ -88,7 +86,7 @@ fn primary_location(\n /// If the span is unlabelled this will return `None`.\n fn diagnostic_related_information(\n     config: &DiagnosticsMapConfig,\n-    workspace_root: &Path,\n+    workspace_root: &AbsPath,\n     span: &DiagnosticSpan,\n ) -> Option<lsp_types::DiagnosticRelatedInformation> {\n     let message = span.label.clone()?;\n@@ -98,7 +96,11 @@ fn diagnostic_related_information(\n \n /// Resolves paths applying any matching path prefix remappings, and then\n /// joining the path to the workspace root.\n-fn resolve_path(config: &DiagnosticsMapConfig, workspace_root: &Path, file_name: &str) -> PathBuf {\n+fn resolve_path(\n+    config: &DiagnosticsMapConfig,\n+    workspace_root: &AbsPath,\n+    file_name: &str,\n+) -> AbsPathBuf {\n     match config\n         .remap_prefix\n         .iter()\n@@ -121,7 +123,7 @@ enum MappedRustChildDiagnostic {\n \n fn map_rust_child_diagnostic(\n     config: &DiagnosticsMapConfig,\n-    workspace_root: &Path,\n+    workspace_root: &AbsPath,\n     rd: &flycheck::Diagnostic,\n ) -> MappedRustChildDiagnostic {\n     let spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n@@ -191,7 +193,7 @@ pub(crate) struct MappedRustDiagnostic {\n pub(crate) fn map_rust_diagnostic_to_lsp(\n     config: &DiagnosticsMapConfig,\n     rd: &flycheck::Diagnostic,\n-    workspace_root: &Path,\n+    workspace_root: &AbsPath,\n ) -> Vec<MappedRustDiagnostic> {\n     let primary_spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n     if primary_spans.is_empty() {\n@@ -426,6 +428,8 @@ fn clippy_code_description(code: Option<&str>) -> Option<lsp_types::CodeDescript\n #[cfg(test)]\n #[cfg(not(windows))]\n mod tests {\n+    use std::{convert::TryInto, path::Path};\n+\n     use super::*;\n \n     use expect_test::{expect_file, ExpectFile};\n@@ -436,7 +440,7 @@ mod tests {\n \n     fn check_with_config(config: DiagnosticsMapConfig, diagnostics_json: &str, expect: ExpectFile) {\n         let diagnostic: flycheck::Diagnostic = serde_json::from_str(diagnostics_json).unwrap();\n-        let workspace_root = Path::new(\"/test/\");\n+        let workspace_root: &AbsPath = Path::new(\"/test/\").try_into().unwrap();\n         let actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root);\n         expect.assert_debug_eq(&actual)\n     }"}, {"sha": "95751cae6db38116abb3d8b04ac9ef165b40057f", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -73,8 +73,9 @@ impl GlobalState {\n         fn is_interesting(path: &AbsPath, change_kind: ChangeKind) -> bool {\n             const IMPLICIT_TARGET_FILES: &[&str] = &[\"build.rs\", \"src/main.rs\", \"src/lib.rs\"];\n             const IMPLICIT_TARGET_DIRS: &[&str] = &[\"src/bin\", \"examples\", \"tests\", \"benches\"];\n+            let file_name = path.file_name().unwrap_or_default();\n \n-            if path.ends_with(\"Cargo.toml\") || path.ends_with(\"Cargo.lock\") {\n+            if file_name == \"Cargo.toml\" || file_name == \"Cargo.lock\" {\n                 return true;\n             }\n             if change_kind == ChangeKind::Modify {\n@@ -83,22 +84,22 @@ impl GlobalState {\n             if path.extension().unwrap_or_default() != \"rs\" {\n                 return false;\n             }\n-            if IMPLICIT_TARGET_FILES.iter().any(|it| path.ends_with(it)) {\n+            if IMPLICIT_TARGET_FILES.iter().any(|it| path.as_ref().ends_with(it)) {\n                 return true;\n             }\n             let parent = match path.parent() {\n                 Some(it) => it,\n                 None => return false,\n             };\n-            if IMPLICIT_TARGET_DIRS.iter().any(|it| parent.ends_with(it)) {\n+            if IMPLICIT_TARGET_DIRS.iter().any(|it| parent.as_ref().ends_with(it)) {\n                 return true;\n             }\n-            if path.ends_with(\"main.rs\") {\n+            if file_name == \"main.rs\" {\n                 let grand_parent = match parent.parent() {\n                     Some(it) => it,\n                     None => return false,\n                 };\n-                if IMPLICIT_TARGET_DIRS.iter().any(|it| grand_parent.ends_with(it)) {\n+                if IMPLICIT_TARGET_DIRS.iter().any(|it| grand_parent.as_ref().ends_with(it)) {\n                     return true;\n                 }\n             }"}, {"sha": "8bd3f7a9eb217db3e84390a3a6d11064a63b326d", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -1,7 +1,7 @@\n //! Conversion of rust-analyzer specific types to lsp_types equivalents.\n use std::{\n     iter::once,\n-    path::{self, Path},\n+    path,\n     sync::atomic::{AtomicU32, Ordering},\n };\n \n@@ -14,6 +14,7 @@ use ide::{\n };\n use itertools::Itertools;\n use serde_json::to_value;\n+use vfs::AbsPath;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -622,10 +623,9 @@ pub(crate) fn url(snap: &GlobalStateSnapshot, file_id: FileId) -> lsp_types::Url\n /// This will only happen when processing windows paths.\n ///\n /// When processing non-windows path, this is essentially the same as `Url::from_file_path`.\n-pub(crate) fn url_from_abs_path(path: &Path) -> lsp_types::Url {\n-    assert!(path.is_absolute());\n+pub(crate) fn url_from_abs_path(path: &AbsPath) -> lsp_types::Url {\n     let url = lsp_types::Url::from_file_path(path).unwrap();\n-    match path.components().next() {\n+    match path.as_ref().components().next() {\n         Some(path::Component::Prefix(prefix))\n             if matches!(prefix.kind(), path::Prefix::Disk(_) | path::Prefix::VerbatimDisk(_)) =>\n         {\n@@ -1328,15 +1328,13 @@ fn main() {\n     // `Url` is not able to parse windows paths on unix machines.\n     #[test]\n     #[cfg(target_os = \"windows\")]\n-    fn test_lowercase_drive_letter_with_drive() {\n-        let url = url_from_abs_path(Path::new(\"C:\\\\Test\"));\n+    fn test_lowercase_drive_letter() {\n+        use std::{convert::TryInto, path::Path};\n+\n+        let url = url_from_abs_path(Path::new(\"C:\\\\Test\").try_into().unwrap());\n         assert_eq!(url.to_string(), \"file:///c:/Test\");\n-    }\n \n-    #[test]\n-    #[cfg(target_os = \"windows\")]\n-    fn test_drive_without_colon_passthrough() {\n-        let url = url_from_abs_path(Path::new(r#\"\\\\localhost\\C$\\my_dir\"#));\n+        let url = url_from_abs_path(Path::new(r#\"\\\\localhost\\C$\\my_dir\"#).try_into().unwrap());\n         assert_eq!(url.to_string(), \"file://localhost/C$/my_dir\");\n     }\n }"}, {"sha": "d330fba331d3ebdd1871aafd84188d45e508ea29", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -6,7 +6,7 @@\n //!\n //! Hopefully, one day a reliable file watching/walking crate appears on\n //! crates.io, and we can reduce this to trivial glue code.\n-use std::convert::TryFrom;\n+use std::{convert::TryFrom, fs};\n \n use crossbeam_channel::{never, select, unbounded, Receiver, Sender};\n use notify::{RecommendedWatcher, RecursiveMode, Watcher};\n@@ -123,7 +123,8 @@ impl NotifyActor {\n                             .into_iter()\n                             .map(|path| AbsPathBuf::try_from(path).unwrap())\n                             .filter_map(|path| {\n-                                if path.is_dir()\n+                                let meta = fs::metadata(&path).ok()?;\n+                                if meta.file_type().is_dir()\n                                     && self\n                                         .watched_entries\n                                         .iter()\n@@ -133,7 +134,7 @@ impl NotifyActor {\n                                     return None;\n                                 }\n \n-                                if !path.is_file() {\n+                                if !meta.file_type().is_file() {\n                                     return None;\n                                 }\n                                 if !self"}, {"sha": "0ad56e00d7cba1f9691a2be7a260b6ffb1fe09d8", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610ecc9a7e8b7b464af575321b7f5d5261342afd/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=610ecc9a7e8b7b464af575321b7f5d5261342afd", "patch": "@@ -121,6 +121,7 @@ impl VfsPath {\n                 #[cfg(windows)]\n                 {\n                     use windows_paths::Encode;\n+                    let path: &std::path::Path = path.as_ref();\n                     let components = path.components();\n                     let mut add_sep = false;\n                     for component in components {"}]}