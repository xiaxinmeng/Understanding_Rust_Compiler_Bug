{"sha": "ba694775f5ea61c9b29e318bbe2e4d942adb39ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjk0Nzc1ZjVlYTYxYzliMjllMzE4YmJlMmU0ZDk0MmFkYjM5YWQ=", "commit": {"author": {"name": "Grahame Bowland", "email": "grahame@angrygoats.net", "date": "2012-01-09T12:49:17Z"}, "committer": {"name": "Grahame Bowland", "email": "grahame@angrygoats.net", "date": "2012-01-09T12:49:17Z"}, "message": "add tests for io::readchars and io::readchar\n\nAdditionally reformat so that 'make check' passes.", "tree": {"sha": "4abd7f71fa595a84b618d5a598ee5fcb01d411d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4abd7f71fa595a84b618d5a598ee5fcb01d411d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba694775f5ea61c9b29e318bbe2e4d942adb39ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba694775f5ea61c9b29e318bbe2e4d942adb39ad", "html_url": "https://github.com/rust-lang/rust/commit/ba694775f5ea61c9b29e318bbe2e4d942adb39ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba694775f5ea61c9b29e318bbe2e4d942adb39ad/comments", "author": null, "committer": null, "parents": [{"sha": "bcc25634e6159cf9176c4a770d711ceeff5f28e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc25634e6159cf9176c4a770d711ceeff5f28e7", "html_url": "https://github.com/rust-lang/rust/commit/bcc25634e6159cf9176c4a770d711ceeff5f28e7"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "63f014005dd9cca35f6f0df197dc17e4c6831234", "filename": "src/libstd/io.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba694775f5ea61c9b29e318bbe2e4d942adb39ad/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba694775f5ea61c9b29e318bbe2e4d942adb39ad/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=ba694775f5ea61c9b29e318bbe2e4d942adb39ad", "patch": "@@ -130,26 +130,29 @@ obj new_reader(rdr: buf_reader) {\n                     val += next & 63 as uint;\n                 }\n                 // See str::char_at\n-                val += (b0 << (w + 1u as u8) as uint) << (w - 1u) * 6u - w - 1u;\n+                val += (b0 << (w + 1u as u8) as uint)\n+                    << (w - 1u) * 6u - w - 1u;\n                 chars += [ val as char ];\n             }\n             ret (i, 0u);\n         }\n         let buf: [u8] = [];\n         let chars: [char] = [];\n-        let nbread = n; // might need more bytes, but reading n will never over-read\n+        // might need more bytes, but reading n will never over-read\n+        let nbread = n;\n         while nbread > 0u {\n-            let data = self.read_bytes(nbread); \n+            let data = self.read_bytes(nbread);\n             if vec::len(data) == 0u {\n-                // eof - FIXME should we do something if we're split in a unicode char?\n+                // eof - FIXME should we do something if\n+                // we're split in a unicode char?\n                 break;\n             }\n             buf += data;\n             let (offset, nbreq) = chars_from_buf(buf, chars);\n             let ncreq = n - vec::len(chars);\n-            // again we either know we need a certain number of bytes to complete a\n-            // character, or we make sure we don't over-read by reading 1-byte per char\n-            // needed\n+            // again we either know we need a certain number of bytes\n+            // to complete a character, or we make sure we don't\n+            // over-read by reading 1-byte per char needed\n             nbread = if ncreq > nbreq { ncreq } else { nbreq };\n             if nbread > 0u {\n                 buf = vec::slice(buf, offset, vec::len(buf));"}, {"sha": "23c18acef0d8eea505b0ae05dc95a5cc7dd059dc", "filename": "src/test/stdtest/io.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ba694775f5ea61c9b29e318bbe2e4d942adb39ad/src%2Ftest%2Fstdtest%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba694775f5ea61c9b29e318bbe2e4d942adb39ad/src%2Ftest%2Fstdtest%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fio.rs?ref=ba694775f5ea61c9b29e318bbe2e4d942adb39ad", "patch": "@@ -23,6 +23,54 @@ fn test_simple() {\n     assert (str::eq(frood, frood2));\n }\n \n+#[test]\n+fn test_readchars_empty() {\n+    let inp : io::reader = io::string_reader(\"\");\n+    let res : [char] = inp.read_chars(128u);\n+    assert(vec::len(res) == 0u);\n+}\n+\n+#[test]\n+fn test_readchars_wide() {\n+    let wide_test = \"\u751f\u9508\u7684\u6c64\u5319\u5207\u8089\u6c64hello\u751f\u9508\u7684\u6c64\u5319\u5207\u8089\u6c64\";\n+    let ivals : [int] = [\n+        29983, 38152, 30340, 27748,\n+        21273, 20999, 32905, 27748,\n+        104, 101, 108, 108, 111,\n+        29983, 38152, 30340, 27748,\n+        21273, 20999, 32905, 27748];\n+    fn check_read_ln(len : uint, s: str, ivals: [int]) {\n+        let inp : io::reader = io::string_reader(s);\n+        let res : [char] = inp.read_chars(len);\n+        if (len <= vec::len(ivals)) {\n+            assert(vec::len(res) == len);\n+        }\n+        assert(vec::slice(ivals, 0u, vec::len(res)) ==\n+               vec::map(res, {|x| x as int}));\n+    }\n+    let i = 0u;\n+    while i < 8u {\n+        check_read_ln(i, wide_test, ivals);\n+        i += 1u;\n+    }\n+    // check a long read for good measure\n+    check_read_ln(128u, wide_test, ivals);\n+}\n+\n+#[test]\n+fn test_readchar() {\n+    let inp : io::reader = io::string_reader(\"\u751f\");\n+    let res : char = inp.read_char();\n+    assert(res as int == 29983);\n+}\n+\n+#[test]\n+fn test_readchar_empty() {\n+    let inp : io::reader = io::string_reader(\"\");\n+    let res : char = inp.read_char();\n+    assert(res as int == -1);\n+}\n+\n #[test]\n fn file_reader_not_exist() {\n     alt io::file_reader(\"not a file\") {"}]}