{"sha": "535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a", "node_id": "C_kwDOAAsO6NoAKDUzNWUyOGI2YzY2YTRlM2ZkNTM3MGE0ZjhiMmZjZWNmMTJjNGNjNmE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-28T14:37:52Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-06-01T00:28:34Z"}, "message": "Use #[rustc_box] in alloc instead of box syntax", "tree": {"sha": "1f8a16c2f3d24812ceddf09fccd1e257585f5495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f8a16c2f3d24812ceddf09fccd1e257585f5495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a", "html_url": "https://github.com/rust-lang/rust/commit/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc21deebd948e99c553cb6ad14ddb91368257d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc21deebd948e99c553cb6ad14ddb91368257d3", "html_url": "https://github.com/rust-lang/rust/commit/cfc21deebd948e99c553cb6ad14ddb91368257d3"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "c363ccbe48ba554aa749abb025524558e8802770", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a", "patch": "@@ -192,7 +192,25 @@ impl<T> Box<T> {\n     /// ```\n     /// let five = Box::new(5);\n     /// ```\n-    #[cfg(not(no_global_oom_handling))]\n+    #[cfg(all(not(no_global_oom_handling), not(bootstrap)))]\n+    #[inline(always)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n+    pub fn new(x: T) -> Self {\n+        #[rustc_box]\n+        Box::new(x)\n+    }\n+\n+    /// Allocates memory on the heap and then places `x` into it.\n+    ///\n+    /// This doesn't actually allocate if `T` is zero-sized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let five = Box::new(5);\n+    /// ```\n+    #[cfg(all(not(no_global_oom_handling), bootstrap))]\n     #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n@@ -259,7 +277,9 @@ impl<T> Box<T> {\n     #[must_use]\n     #[inline(always)]\n     pub fn pin(x: T) -> Pin<Box<T>> {\n-        (box x).into()\n+        (#[cfg_attr(not(bootstrap), rustc_box)]\n+        Box::new(x))\n+        .into()\n     }\n \n     /// Allocates memory on the heap then places `x` into it,\n@@ -1186,7 +1206,8 @@ unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> Drop for Box<T, A> {\n impl<T: Default> Default for Box<T> {\n     /// Creates a `Box<T>`, with the `Default` value for T.\n     fn default() -> Self {\n-        box T::default()\n+        #[cfg_attr(not(bootstrap), rustc_box)]\n+        Box::new(T::default())\n     }\n }\n \n@@ -1550,7 +1571,8 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// println!(\"{boxed:?}\");\n     /// ```\n     fn from(array: [T; N]) -> Box<[T]> {\n-        box array\n+        #[cfg_attr(not(bootstrap), rustc_box)]\n+        Box::new(array)\n     }\n }\n "}, {"sha": "4856a64b965f6ce0f2bb444acce202dbdb554f5a", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a", "patch": "@@ -147,7 +147,7 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n-#![feature(box_syntax)]\n+#![cfg_attr(bootstrap, feature(box_syntax))]\n #![feature(cfg_sanitize)]\n #![feature(const_deref)]\n #![feature(const_mut_refs)]\n@@ -170,6 +170,7 @@\n #![feature(rustc_attrs)]\n #![feature(slice_internals)]\n #![feature(staged_api)]\n+#![feature(stmt_expr_attributes)]\n #![cfg_attr(test, feature(test))]\n #![feature(unboxed_closures)]\n #![feature(unsized_fn_params)]"}, {"sha": "37898b6655faa259bd2bc544cd658e673dd698f2", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a", "patch": "@@ -34,7 +34,28 @@\n /// be mindful of side effects.\n ///\n /// [`Vec`]: crate::vec::Vec\n-#[cfg(all(not(no_global_oom_handling), not(test)))]\n+#[cfg(all(not(no_global_oom_handling), not(test), not(bootstrap)))]\n+#[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"vec_macro\"]\n+#[allow_internal_unstable(rustc_attrs, liballoc_internals)]\n+macro_rules! vec {\n+    () => (\n+        $crate::__rust_force_expr!($crate::vec::Vec::new())\n+    );\n+    ($elem:expr; $n:expr) => (\n+        $crate::__rust_force_expr!($crate::vec::from_elem($elem, $n))\n+    );\n+    ($($x:expr),+ $(,)?) => (\n+        $crate::__rust_force_expr!(<[_]>::into_vec(\n+            #[rustc_box]\n+            $crate::boxed::Box::new([$($x),+])\n+        ))\n+    );\n+}\n+\n+/// Creates a `Vec` containing the arguments (bootstrap version).\n+#[cfg(all(not(no_global_oom_handling), not(test), bootstrap))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"vec_macro\"]\n@@ -65,7 +86,7 @@ macro_rules! vec {\n         $crate::vec::from_elem($elem, $n)\n     );\n     ($($x:expr),*) => (\n-        $crate::slice::into_vec(box [$($x),*])\n+        $crate::slice::into_vec($crate::boxed::Box::new([$($x),*]))\n     );\n     ($($x:expr,)*) => (vec![$($x),*])\n }"}, {"sha": "4429984ea6cb9db7365377decd5195cb9e481011", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=535e28b6c66a4e3fd5370a4f8b2fcecf12c4cc6a", "patch": "@@ -2983,12 +2983,15 @@ impl<T, const N: usize> From<[T; N]> for Vec<T> {\n     /// ```\n     #[cfg(not(test))]\n     fn from(s: [T; N]) -> Vec<T> {\n-        <[T]>::into_vec(box s)\n+        <[T]>::into_vec(\n+            #[cfg_attr(not(bootstrap), rustc_box)]\n+            Box::new(s),\n+        )\n     }\n \n     #[cfg(test)]\n     fn from(s: [T; N]) -> Vec<T> {\n-        crate::slice::into_vec(box s)\n+        crate::slice::into_vec(Box::new(s))\n     }\n }\n "}]}