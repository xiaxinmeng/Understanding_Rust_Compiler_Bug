{"sha": "7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjBjZDBmYmJiZjJjNTlhNjI1ZTA3NWE1YmRmYTg4YjhlMzBmOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-19T19:10:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-19T19:10:58Z"}, "message": "Auto merge of #69293 - Dylan-DPC:rollup-imcbvgo, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #68863 (ci: switch macOS builders to 10.15)\n - #69142 (Add shared script for linkchecking books.)\n - #69248 (Don't eliminate frame pointers on thumb targets)\n - #69280 (Remove special case for `simd_shuffle` arg promotion)\n - #69284 (Reword OpenOptions::{create, create_new} doc.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "4f54c12a071f99e56f766983da474f3c904da61a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f54c12a071f99e56f766983da474f3c904da61a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "html_url": "https://github.com/rust-lang/rust/commit/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6b8c414e84e1f4f2f40236e83125ba8e034b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6b8c414e84e1f4f2f40236e83125ba8e034b98", "html_url": "https://github.com/rust-lang/rust/commit/7d6b8c414e84e1f4f2f40236e83125ba8e034b98"}, {"sha": "a97f354767844680311da5252fe0c81ecfb9ed45", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97f354767844680311da5252fe0c81ecfb9ed45", "html_url": "https://github.com/rust-lang/rust/commit/a97f354767844680311da5252fe0c81ecfb9ed45"}], "stats": {"total": 237, "additions": 164, "deletions": 73}, "files": [{"sha": "f939f79e4f4b748dece0fb29f5252d1021c55b3d", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -1051,10 +1051,10 @@ impl Step for Compiletest {\n         cmd.arg(\"--docck-python\").arg(builder.python());\n \n         if builder.config.build.ends_with(\"apple-darwin\") {\n-            // Force /usr/bin/python on macOS for LLDB tests because we're loading the\n+            // Force /usr/bin/python3 on macOS for LLDB tests because we're loading the\n             // LLDB plugin's compiled module which only works with the system python\n             // (namely not Homebrew-installed python)\n-            cmd.arg(\"--lldb-python\").arg(\"/usr/bin/python\");\n+            cmd.arg(\"--lldb-python\").arg(\"/usr/bin/python3\");\n         } else {\n             cmd.arg(\"--lldb-python\").arg(builder.python());\n         }"}, {"sha": "74b7469ea27b7f64de3063543aa8092a8bc75e4d", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -63,7 +63,7 @@ jobs:\n - job: macOS\n   timeoutInMinutes: 600\n   pool:\n-    vmImage: macos-10.13\n+    vmImage: macos-10.15\n   steps:\n   - template: steps/run.yml\n   strategy:"}, {"sha": "ee9425aa1c51f94afabe6876bf67ce166e5ed75b", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -51,10 +51,6 @@ steps:\n   displayName: Install clang\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n-- bash: src/ci/scripts/switch-xcode.sh\n-  displayName: Switch to Xcode 9.3\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n - bash: src/ci/scripts/install-wix.sh\n   displayName: Install wix\n   condition: and(succeeded(), not(variables.SKIP_JOB))"}, {"sha": "f8ddf0eb46cfd1d23b29f01960ad17962724d33c", "filename": "src/ci/azure-pipelines/try.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fci%2Fazure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fci%2Fazure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Ftry.yml?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -25,7 +25,7 @@ jobs:\n # - job: macOS\n #   timeoutInMinutes: 600\n #   pool:\n-#     vmImage: macos-10.13\n+#     vmImage: macos-10.15\n #   steps:\n #   - template: steps/run.yml\n #   strategy:"}, {"sha": "c242f5d4562690ba8f0c310bd86df305cee523ef", "filename": "src/ci/scripts/install-clang.sh", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fci%2Fscripts%2Finstall-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Fci%2Fscripts%2Finstall-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-clang.sh?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -19,9 +19,7 @@ if isMacOS; then\n     # native clang is configured to use the correct path, but our custom one\n     # doesn't. This sets the SDKROOT environment variable to the SDK so that\n     # our own clang can figure out the correct include path on its own.\n-    if ! [[ -d \"/usr/include\" ]]; then\n-        ciCommandSetEnv SDKROOT \"$(xcrun --sdk macosx --show-sdk-path)\"\n-    fi\n+    ciCommandSetEnv SDKROOT \"$(xcrun --sdk macosx --show-sdk-path)\"\n \n     # Configure `AR` specifically so rustbuild doesn't try to infer it as\n     # `clang-ar` by accident."}, {"sha": "2cbb2ddbc7046ab77caf06977f76aad5e750568f", "filename": "src/ci/scripts/switch-xcode.sh", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d6b8c414e84e1f4f2f40236e83125ba8e034b98/src%2Fci%2Fscripts%2Fswitch-xcode.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7d6b8c414e84e1f4f2f40236e83125ba8e034b98/src%2Fci%2Fscripts%2Fswitch-xcode.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fswitch-xcode.sh?ref=7d6b8c414e84e1f4f2f40236e83125ba8e034b98", "patch": "@@ -1,13 +0,0 @@\n-#!/bin/bash\n-# Switch to XCode 9.3 on OSX since it seems to be the last version that supports\n-# i686-apple-darwin. We'll eventually want to upgrade this and it will probably\n-# force us to drop i686-apple-darwin, but let's keep the wheels turning for now.\n-\n-set -euo pipefail\n-IFS=$'\\n\\t'\n-\n-source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n-\n-if isMacOS; then\n-    sudo xcode-select --switch /Applications/Xcode_9.3.app\n-fi"}, {"sha": "1cec5d30e9b9bda4d1da16c96a2e3f56921b1720", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -72,8 +72,8 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     Ok(ret)\n }\n \n-/// The `InterpCx` is only meant to be used to do field and index projections into constants for\n-/// `simd_shuffle` and const patterns in match arms.\n+/// The `InterpCx` is only meant to be used to do field and index projections into promoteds\n+/// and const patterns in match arms.\n ///\n /// The function containing the `match` that is currently being analyzed may have generic bounds\n /// that inform us about the generic bounds of the constant. E.g., using an associated constant"}, {"sha": "a11ee57f46529ccaeda80b0d8bbd940d4e9eceba", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -24,7 +24,6 @@ use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::LitKind;\n \n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;\n use std::{cmp, iter, mem, usize};\n@@ -106,11 +105,10 @@ pub enum Candidate {\n     /// Promotion of the `x` in `[x; 32]`.\n     Repeat(Location),\n \n-    /// Currently applied to function calls where the callee has the unstable\n-    /// `#[rustc_args_required_const]` attribute as well as the SIMD shuffle\n-    /// intrinsic. The intrinsic requires the arguments are indeed constant and\n-    /// the attribute currently provides the semantic requirement that arguments\n-    /// must be constant.\n+    /// Function calls where the callee has the unstable\n+    /// `#[rustc_args_required_const]` attribute. The attribute requires that\n+    /// the arguments be constant, usually because they are encoded as an\n+    /// immediate operand in a platform intrinsic.\n     Argument { bb: BasicBlock, index: usize },\n }\n \n@@ -218,17 +216,6 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n \n         if let TerminatorKind::Call { ref func, .. } = *kind {\n             if let ty::FnDef(def_id, _) = func.ty(self.body, self.tcx).kind {\n-                let fn_sig = self.tcx.fn_sig(def_id);\n-                if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n-                    let name = self.tcx.item_name(def_id);\n-                    // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n-                    if name.as_str().starts_with(\"simd_shuffle\") {\n-                        self.candidates.push(Candidate::Argument { bb: location.block, index: 2 });\n-\n-                        return; // Don't double count `simd_shuffle` candidates\n-                    }\n-                }\n-\n                 if let Some(constant_args) = args_required_const(self.tcx, def_id) {\n                     for index in constant_args {\n                         self.candidates.push(Candidate::Argument { bb: location.block, index });\n@@ -730,8 +717,7 @@ pub fn validate_candidates(\n         .filter(|&candidate| {\n             validator.explicit = candidate.forces_explicit_promotion();\n \n-            // FIXME(eddyb) also emit the errors for shuffle indices\n-            // and `#[rustc_args_required_const]` arguments here.\n+            // FIXME(eddyb) also emit the errors for `#[rustc_args_required_const]` arguments here.\n \n             let is_promotable = validator.validate_candidate(candidate).is_ok();\n             match candidate {"}, {"sha": "99ab996be959d8f9f3206f06c3c7a57ec8c5a718", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -50,6 +50,9 @@ pub fn opts() -> TargetOptions {\n         // until we figure a way to add the pretty printers without requiring a volatile load cf.\n         // rust-lang/rust#44993.\n         emit_debug_gdb_scripts: false,\n+        // LLVM is eager to trash the link register when calling `noreturn` functions, which\n+        // breaks debugging. Preserve LR by default to prevent that from happening.\n+        eliminate_frame_pointer: false,\n         ..Default::default()\n     }\n }"}, {"sha": "09be3f1305052d4df072733e24fb151796e6fac8", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -844,10 +844,7 @@ impl OpenOptions {\n         self\n     }\n \n-    /// Sets the option for creating a new file.\n-    ///\n-    /// This option indicates whether a new file will be created if the file\n-    /// does not yet already exist.\n+    /// Sets the option to create a new file, or open it if it already exists.\n     ///\n     /// In order for the file to be created, [`write`] or [`append`] access must\n     /// be used.\n@@ -868,11 +865,10 @@ impl OpenOptions {\n         self\n     }\n \n-    /// Sets the option to always create a new file.\n+    /// Sets the option to create a new file, failing if it already exists.\n     ///\n-    /// This option indicates whether a new file will be created.\n-    /// No file is allowed to exist at the target location, also no (dangling)\n-    /// symlink.\n+    /// No file is allowed to exist at the target location, also no (dangling) symlink. In this\n+    /// way, if the call succeeds, the file returned is guaranteed to be new.\n     ///\n     /// This option is useful because it is atomic. Otherwise between checking\n     /// whether a file exists and creating a new one, the file may have been"}, {"sha": "c9c600efed8906faa4ba7d0c7099ed6ea1f2202c", "filename": "src/test/incremental/issue-61530.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fincremental%2Fissue-61530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fincremental%2Fissue-61530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-61530.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -1,11 +1,12 @@\n-#![feature(repr_simd, platform_intrinsics)]\n+#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n \n // revisions:rpass1 rpass2\n \n #[repr(simd)]\n struct I32x2(i32, i32);\n \n extern \"platform-intrinsic\" {\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n }\n "}, {"sha": "8f7905b31ecde4866b8460f51ec5fa74a101c573", "filename": "src/test/ui/issues/issue-38074.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -1,9 +1,10 @@\n // run-pass\n // ignore-emscripten FIXME(#45351)\n \n-#![feature(platform_intrinsics, repr_simd)]\n+#![feature(platform_intrinsics, repr_simd, rustc_attrs)]\n \n extern \"platform-intrinsic\" {\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n }\n "}, {"sha": "c9c9ab879f27e5594a1b96baa9dc1277b4aefc85", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -42,9 +42,13 @@ extern \"platform-intrinsic\" {\n     fn simd_insert<T, E>(x: T, idx: u32, y: E) -> T;\n     fn simd_extract<T, E>(x: T, idx: u32) -> E;\n \n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle3<T, U>(x: T, y: T, idx: [u32; 3]) -> U;\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n }\n "}, {"sha": "29916f85902b255abc9941d196f6f39bd62f73a3", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -1,89 +1,89 @@\n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:55:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:59:9\n    |\n LL |         simd_insert(0, 0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected inserted type `i32` (element of input `i32x4`), found `f64`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:61:9\n    |\n LL |         simd_insert(x, 0, 1.0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_extract` intrinsic: expected return type `i32` (element of input `i32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:59:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:63:9\n    |\n LL |         simd_extract::<_, f32>(x, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:62:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:66:9\n    |\n LL |         simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:64:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:68:9\n    |\n LL |         simd_shuffle3::<i32, i32>(0, 0, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:66:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:70:9\n    |\n LL |         simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:68:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:72:9\n    |\n LL |         simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:71:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:75:9\n    |\n LL |         simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x3` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:73:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:77:9\n    |\n LL |         simd_shuffle3::<_, f32x3>(x, x, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:75:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:79:9\n    |\n LL |         simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:77:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:81:9\n    |\n LL |         simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return type of length 2, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:80:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:84:9\n    |\n LL |         simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected return type of length 3, found `i32x4` with length 4\n-  --> $DIR/simd-intrinsic-generic-elements.rs:82:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:86:9\n    |\n LL |         simd_shuffle3::<_, i32x4>(x, x, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x3` with length 3\n-  --> $DIR/simd-intrinsic-generic-elements.rs:84:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:88:9\n    |\n LL |         simd_shuffle4::<_, i32x3>(x, x, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return type of length 8, found `i32x2` with length 2\n-  --> $DIR/simd-intrinsic-generic-elements.rs:86:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:90:9\n    |\n LL |         simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b03b0ef50895b34603e4f96afd4b7b10b84a7d0a", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557-ice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -3,9 +3,10 @@\n //\n // run-pass\n // compile-flags: -Zmir-opt-level=3\n-#![feature(platform_intrinsics, repr_simd)]\n+#![feature(platform_intrinsics, repr_simd, rustc_attrs)]\n \n extern \"platform-intrinsic\" {\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n }\n "}, {"sha": "2741dc1333696a254b85c4c54434075ee880808e", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -3,9 +3,10 @@\n //\n // run-pass\n // compile-flags: -Zmir-opt-level=3\n-#![feature(platform_intrinsics, repr_simd)]\n+#![feature(platform_intrinsics, repr_simd, rustc_attrs)]\n \n extern \"platform-intrinsic\" {\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n }\n "}, {"sha": "abff59fea78e559495d7e5f1a68b82f8d720236a", "filename": "src/test/ui/simd/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // ignore-emscripten FIXME(#45351) hits an LLVM assert\n \n-#![feature(repr_simd, platform_intrinsics)]\n+#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -25,9 +25,13 @@ extern \"platform-intrinsic\" {\n     fn simd_insert<T, E>(x: T, idx: u32, y: E) -> T;\n     fn simd_extract<T, E>(x: T, idx: u32) -> E;\n \n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle3<T, U>(x: T, y: T, idx: [u32; 3]) -> U;\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n+    #[rustc_args_required_const(2)]\n     fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n }\n "}, {"sha": "bbccc17e494c88325b181dc8ebe3d3ef9e831690", "filename": "src/tools/linkchecker/linkcheck.sh", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftools%2Flinkchecker%2Flinkcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a/src%2Ftools%2Flinkchecker%2Flinkcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Flinkcheck.sh?ref=7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "patch": "@@ -0,0 +1,113 @@\n+#!/bin/sh\n+#\n+# This is a script that can be used in each book's CI to validate links using\n+# the same tool as rust-lang/rust.\n+#\n+# This requires the rust-docs rustup component to be installed in the nightly\n+# toolchain.\n+#\n+# Usage:\n+#   ./linkcheck.sh <name-of-book>\n+#\n+# Options:\n+#\n+# -i        \"Iterative\" mode. The script will not clean up after it is done so\n+#           you can inspect the result, and re-run more quickly.\n+#\n+# --all     Check all books. This can help make sure you don't break links\n+#           from other books into your book.\n+\n+set -e\n+\n+if [ ! -f book.toml ] && [ ! -f src/SUMMARY.md ]\n+then\n+    echo \"Run command in root directory of the book.\"\n+    exit 1\n+fi\n+\n+html_dir=\"$(rustc +nightly --print sysroot)/share/doc/rust/html\"\n+\n+if [ ! -d \"$html_dir\" ]\n+then\n+    echo \"HTML docs are missing from sysroot: $html_dir\"\n+    echo \"Make sure the nightly rust-docs rustup component is installed.\"\n+    exit 1\n+fi\n+\n+book_name=\"\"\n+# Iterative will avoid cleaning up, so you can quickly run it repeatedly.\n+iterative=0\n+# If \"1\", test all books, else only this book.\n+all_books=0\n+\n+while [ \"$1\" != \"\" ]\n+do\n+    case \"$1\" in\n+        -i)\n+            iterative=1\n+            ;;\n+        --all)\n+            all_books=1\n+            ;;\n+        *)\n+            if [ -n \"$book_name\" ]\n+            then\n+                echo \"only one argument allowed\"\n+                exit 1\n+            fi\n+            book_name=\"$1\"\n+            ;;\n+    esac\n+    shift\n+done\n+\n+if [ -z \"$book_name\" ]\n+then\n+    echo \"usage: $0 <name-of-book>\"\n+    exit 1\n+fi\n+\n+if [ ! -d \"$html_dir/$book_name\" ]\n+then\n+    echo \"book name \\\"$book_name\\\" not found in sysroot \\\"$html_dir\\\"\"\n+    exit 1\n+fi\n+\n+if [ \"$iterative\" = \"0\" ]\n+then\n+    echo \"Cleaning old directories...\"\n+    rm -rf linkcheck linkchecker\n+fi\n+\n+if [ ! -e \"linkchecker/main.rs\" ] || [ \"$iterative\" = \"0\" ]\n+then\n+    echo \"Downloading linkchecker source...\"\n+    mkdir linkchecker\n+    curl -o linkchecker/Cargo.toml \\\n+        https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/Cargo.toml\n+    curl -o linkchecker/main.rs \\\n+        https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/main.rs\n+fi\n+\n+echo \"Building book \\\"$book_name\\\"...\"\n+mdbook build\n+\n+cp -R \"$html_dir\" linkcheck\n+rm -rf \"linkcheck/$book_name\"\n+cp -R book \"linkcheck/$book_name\"\n+\n+if [ \"$all_books\" = \"1\" ]\n+then\n+    check_path=\"linkcheck\"\n+else\n+    check_path=\"linkcheck/$book_name\"\n+fi\n+echo \"Running linkchecker on \\\"$check_path\\\"...\"\n+cargo run --manifest-path=linkchecker/Cargo.toml -- \"$check_path\"\n+\n+if [ \"$iterative\" = \"0\" ]\n+then\n+    rm -rf linkcheck linkchecker\n+fi\n+\n+echo \"Link check completed successfully!\""}]}