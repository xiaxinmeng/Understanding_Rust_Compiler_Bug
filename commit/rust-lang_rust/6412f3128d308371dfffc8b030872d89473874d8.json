{"sha": "6412f3128d308371dfffc8b030872d89473874d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTJmMzEyOGQzMDgzNzFkZmZmYzhiMDMwODcyZDg5NDczODc0ZDg=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-13T01:29:49Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:02:49Z"}, "message": "Propagate CleanupScope::needs_invoke being always true", "tree": {"sha": "2e9fbf296372f616aebb08e8a975619705347f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e9fbf296372f616aebb08e8a975619705347f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6412f3128d308371dfffc8b030872d89473874d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6412f3128d308371dfffc8b030872d89473874d8", "html_url": "https://github.com/rust-lang/rust/commit/6412f3128d308371dfffc8b030872d89473874d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6412f3128d308371dfffc8b030872d89473874d8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85ef02d40446cccbc4a43a0d9fd4d39a67ff9037", "url": "https://api.github.com/repos/rust-lang/rust/commits/85ef02d40446cccbc4a43a0d9fd4d39a67ff9037", "html_url": "https://github.com/rust-lang/rust/commit/85ef02d40446cccbc4a43a0d9fd4d39a67ff9037"}], "stats": {"total": 44, "additions": 4, "deletions": 40}, "files": [{"sha": "362af9601d1858138ad4b6f53f699d26e0e87879", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6412f3128d308371dfffc8b030872d89473874d8/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6412f3128d308371dfffc8b030872d89473874d8/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=6412f3128d308371dfffc8b030872d89473874d8", "patch": "@@ -212,21 +212,21 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n \n     /// Returns true if there are pending cleanups that should execute on panic.\n     pub fn needs_invoke(&self) -> bool {\n-        self.scopes.borrow().iter().rev().any(|s| s.needs_invoke())\n+        self.scopes_len() > 0\n     }\n \n-    /// Creates a landing pad for the top scope, if one does not exist.  The\n+    /// Creates a landing pad for the top scope, if one does not exist. The\n     /// landing pad will perform all cleanups necessary for an unwind and then\n     /// `resume` to continue error propagation:\n     ///\n     ///     landing_pad -> ... cleanups ... -> [resume]\n     ///\n     /// (The cleanups and resume instruction are created by\n     /// `trans_cleanups_to_exit_scope()`, not in this function itself.)\n-    fn get_or_create_landing_pad(&'blk self) -> BasicBlockRef {\n+    pub fn get_landing_pad(&'blk self) -> BasicBlockRef {\n         let pad_bcx;\n \n-        debug!(\"get_or_create_landing_pad\");\n+        debug!(\"get_landing_pad\");\n \n         // Check if a landing pad block exists; if not, create one.\n         {\n@@ -287,36 +287,6 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         return pad_bcx.llbb();\n     }\n \n-    /// Returns a basic block to branch to in the event of a panic. This block\n-    /// will run the panic cleanups and eventually resume the exception that\n-    /// caused the landing pad to be run.\n-    pub fn get_landing_pad(&'blk self) -> BasicBlockRef {\n-        let _icx = base::push_ctxt(\"get_landing_pad\");\n-\n-        debug!(\"get_landing_pad\");\n-\n-        let orig_scopes_len = self.scopes_len();\n-        assert!(orig_scopes_len > 0);\n-\n-        // Remove any scopes that do not have cleanups on panic:\n-        let mut popped_scopes = vec![];\n-        while !self.top_scope(|s| s.needs_invoke()) {\n-            debug!(\"top scope does not need invoke\");\n-            popped_scopes.push(self.pop_scope());\n-        }\n-\n-        let llbb = self.get_or_create_landing_pad();\n-\n-        // Push the scopes we removed back on:\n-        while let Some(scope) = popped_scopes.pop() {\n-            self.push_scope(scope);\n-        }\n-\n-        assert_eq!(self.scopes_len(), orig_scopes_len);\n-\n-        return llbb;\n-    }\n-\n     fn is_valid_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool {\n         let scopes = self.scopes.borrow();\n         custom_scope.index < scopes.len()\n@@ -501,12 +471,6 @@ impl<'tcx> CleanupScope<'tcx> {\n         });\n     }\n \n-    /// True if this scope has cleanups that need unwinding\n-    fn needs_invoke(&self) -> bool {\n-        true\n-        //self.cached_landing_pad.is_some() || self.cleanups.is_empty()\n-    }\n-\n     /// Returns a suitable name to use for the basic block that handles this cleanup scope\n     fn block_name(&self, prefix: &str) -> String {\n         format!(\"{}_custom_\", prefix)"}]}