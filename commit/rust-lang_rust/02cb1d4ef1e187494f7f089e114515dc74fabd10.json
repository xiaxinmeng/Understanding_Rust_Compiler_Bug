{"sha": "02cb1d4ef1e187494f7f089e114515dc74fabd10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyY2IxZDRlZjFlMTg3NDk0ZjdmMDg5ZTExNDUxNWRjNzRmYWJkMTA=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-03-11T06:42:47Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-03-30T00:00:02Z"}, "message": "Delete obviously-unreachable blocks\n\nSome blocks won't be translated at all because they aren't reachable at\nthe LLVM level, these need to be dealt with because they lack a\nterminator and therefore trigger an LLVM assertion.\n\nOther blocks aren't reachable because of codegen-time optimistions, for\nexample not dropping types that don't need it, often resulting in blocks\nwith no predecessors. We'll clean those up as well.", "tree": {"sha": "6ce3391fc03340c4670fff61546aeae05d891de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ce3391fc03340c4670fff61546aeae05d891de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02cb1d4ef1e187494f7f089e114515dc74fabd10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02cb1d4ef1e187494f7f089e114515dc74fabd10", "html_url": "https://github.com/rust-lang/rust/commit/02cb1d4ef1e187494f7f089e114515dc74fabd10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02cb1d4ef1e187494f7f089e114515dc74fabd10/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c70bc3a5daa2ce46aad7c230004ade7a404c12f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70bc3a5daa2ce46aad7c230004ade7a404c12f1", "html_url": "https://github.com/rust-lang/rust/commit/c70bc3a5daa2ce46aad7c230004ade7a404c12f1"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "60bd3fb8ef1b8db10ed2417a2a6db484d5e8e73a", "filename": "src/librustc_trans/basic_block.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02cb1d4ef1e187494f7f089e114515dc74fabd10/src%2Flibrustc_trans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cb1d4ef1e187494f7f089e114515dc74fabd10/src%2Flibrustc_trans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbasic_block.rs?ref=02cb1d4ef1e187494f7f089e114515dc74fabd10", "patch": "@@ -49,4 +49,10 @@ impl BasicBlock {\n             _ => None\n         }\n     }\n+\n+    pub fn delete(self) {\n+        unsafe {\n+            llvm::LLVMDeleteBasicBlock(self.0);\n+        }\n+    }\n }"}, {"sha": "e1a0d33fa135ff1641274636b253d87818f39b5d", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02cb1d4ef1e187494f7f089e114515dc74fabd10/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02cb1d4ef1e187494f7f089e114515dc74fabd10/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=02cb1d4ef1e187494f7f089e114515dc74fabd10", "patch": "@@ -19,6 +19,8 @@ use common::{self, Block, BlockAndBuilder, FunctionContext};\n use std::ops::Deref;\n use std::rc::Rc;\n \n+use trans::basic_block::BasicBlock;\n+\n use rustc_data_structures::bitvec::BitVector;\n \n use self::lvalue::{LvalueRef, get_dataptr, get_meta};\n@@ -170,19 +172,20 @@ pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n         mircx.trans_block(bb);\n     }\n \n-    // Add unreachable instructions at the end of unreachable blocks\n-    // so they're actually terminated.\n-    // TODO: Remove the blocks from the function\n+    // Remove blocks that haven't been visited, or have no\n+    // predecessors.\n     for &bb in &mir_blocks {\n+        let block = mircx.blocks[bb.index()];\n+        let block = BasicBlock(block.llbb);\n+        // Unreachable block\n         if !visited.contains(bb.index()) {\n-            mircx.blocks[bb.index()].build().unreachable();\n+            block.delete();\n+        } else if block.pred_iter().count() == 0 {\n+            block.delete();\n         }\n     }\n \n-\n     fcx.cleanup();\n-\n-    debug!(\"trans_mir: {:?}\", ::trans::value::Value(fcx.llfn));\n }\n \n /// Produce, for each argument, a `ValueRef` pointing at the"}]}