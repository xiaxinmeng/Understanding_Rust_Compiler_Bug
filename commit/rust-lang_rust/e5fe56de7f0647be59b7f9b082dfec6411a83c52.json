{"sha": "e5fe56de7f0647be59b7f9b082dfec6411a83c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZmU1NmRlN2YwNjQ3YmU1OWI3ZjliMDgyZGZlYzY0MTFhODNjNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T18:09:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T18:09:34Z"}, "message": "Auto merge of #5489 - phansch:node-id-hir-id, r=flip1995\n\nCleanup: `node_id` -> `hir_id`\n\nThis removes some more `node_id` terminology from Clippy and replaces one occurrence of `as_local_node_id` with `as_local_hir_id`, which should be doing the same for that particular case.\n\nchangelog: none", "tree": {"sha": "598cc11a82787f43e45e5abe06a7b70cc0d9fa3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598cc11a82787f43e45e5abe06a7b70cc0d9fa3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5fe56de7f0647be59b7f9b082dfec6411a83c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fe56de7f0647be59b7f9b082dfec6411a83c52", "html_url": "https://github.com/rust-lang/rust/commit/e5fe56de7f0647be59b7f9b082dfec6411a83c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5fe56de7f0647be59b7f9b082dfec6411a83c52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed2ae86851e1932e7ceddb24a6e0782e27498a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed2ae86851e1932e7ceddb24a6e0782e27498a9", "html_url": "https://github.com/rust-lang/rust/commit/6ed2ae86851e1932e7ceddb24a6e0782e27498a9"}, {"sha": "c3c00e5028eed54e028fd51680fb1698400b2783", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c00e5028eed54e028fd51680fb1698400b2783", "html_url": "https://github.com/rust-lang/rust/commit/c3c00e5028eed54e028fd51680fb1698400b2783"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "7756fdfdd07a0e1fdcbcb2b84f77b7a233362bdf", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fe56de7f0647be59b7f9b082dfec6411a83c52/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fe56de7f0647be59b7f9b082dfec6411a83c52/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=e5fe56de7f0647be59b7f9b082dfec6411a83c52", "patch": "@@ -120,9 +120,9 @@ fn check_hash_peq<'a, 'tcx>(\n                         cx, DERIVE_HASH_XOR_EQ, span,\n                         mess,\n                         |diag| {\n-                        if let Some(node_id) = cx.tcx.hir().as_local_hir_id(impl_id) {\n+                        if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(impl_id) {\n                             diag.span_note(\n-                                cx.tcx.hir().span(node_id),\n+                                cx.tcx.hir().span(hir_id),\n                                 \"`PartialEq` implemented here\"\n                             );\n                         }"}, {"sha": "3172bbfb406b47b2ed4e759f47396364cc1b645f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5fe56de7f0647be59b7f9b082dfec6411a83c52/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fe56de7f0647be59b7f9b082dfec6411a83c52/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e5fe56de7f0647be59b7f9b082dfec6411a83c52", "patch": "@@ -1652,14 +1652,14 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr<'_>) -> Option<Hi\n         if let QPath::Resolved(None, _) = *qpath;\n         then {\n             let res = qpath_res(cx, qpath, bound.hir_id);\n-            if let Res::Local(node_id) = res {\n-                let node_str = cx.tcx.hir().get(node_id);\n+            if let Res::Local(hir_id) = res {\n+                let node_str = cx.tcx.hir().get(hir_id);\n                 if_chain! {\n                     if let Node::Binding(pat) = node_str;\n                     if let PatKind::Binding(bind_ann, ..) = pat.kind;\n                     if let BindingAnnotation::Mutable = bind_ann;\n                     then {\n-                        return Some(node_id);\n+                        return Some(hir_id);\n                     }\n                 }\n             }\n@@ -2184,8 +2184,8 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n fn var_def_id(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<HirId> {\n     if let ExprKind::Path(ref qpath) = expr.kind {\n         let path_res = qpath_res(cx, qpath, expr.hir_id);\n-        if let Res::Local(node_id) = path_res {\n-            return Some(node_id);\n+        if let Res::Local(hir_id) = path_res {\n+            return Some(hir_id);\n         }\n     }\n     None\n@@ -2422,8 +2422,8 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n             let res = qpath_res(self.cx, qpath, ex.hir_id);\n             then {\n                 match res {\n-                    Res::Local(node_id) => {\n-                        self.ids.insert(node_id);\n+                    Res::Local(hir_id) => {\n+                        self.ids.insert(hir_id);\n                     },\n                     Res::Def(DefKind::Static, def_id) => {\n                         let mutable = self.cx.tcx.is_mutable_static(def_id);"}, {"sha": "61d164292d2b9c1c75190bf2d703f5f8127c32b5", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5fe56de7f0647be59b7f9b082dfec6411a83c52/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fe56de7f0647be59b7f9b082dfec6411a83c52/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=e5fe56de7f0647be59b7f9b082dfec6411a83c52", "patch": "@@ -152,8 +152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if cx.tcx.hir().as_local_node_id(trait_def_id).is_some() && !cx.access_levels.is_exported(impl_item.hir_id)\n-            {\n+            if cx.tcx.hir().as_local_hir_id(trait_def_id).is_some() && !cx.access_levels.is_exported(impl_item.hir_id) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}]}