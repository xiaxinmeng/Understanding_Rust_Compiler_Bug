{"sha": "6596e7cddfc00281362c3640781f6cd6bc0b5614", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OTZlN2NkZGZjMDAyODEzNjJjMzY0MDc4MWY2Y2Q2YmMwYjU2MTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-28T10:08:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-28T11:27:54Z"}, "message": "Nice string formatting", "tree": {"sha": "9a2b4f264e37dba87fa80d10ce5872090bcdbfef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a2b4f264e37dba87fa80d10ce5872090bcdbfef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6596e7cddfc00281362c3640781f6cd6bc0b5614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6596e7cddfc00281362c3640781f6cd6bc0b5614", "html_url": "https://github.com/rust-lang/rust/commit/6596e7cddfc00281362c3640781f6cd6bc0b5614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6596e7cddfc00281362c3640781f6cd6bc0b5614/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "html_url": "https://github.com/rust-lang/rust/commit/b764c38436fcb9426eb7da3be4f5fbcd63b316f5"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "8d81c48398a3a0cb20b3ab4213d027d2957ff365", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -966,6 +966,7 @@ dependencies = [\n  \"ra_syntax\",\n  \"ra_tt\",\n  \"rustc-hash\",\n+ \"stdx\",\n  \"test_utils\",\n ]\n \n@@ -1002,6 +1003,7 @@ dependencies = [\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"rustc-hash\",\n+ \"stdx\",\n  \"test_utils\",\n ]\n \n@@ -1116,6 +1118,7 @@ dependencies = [\n  \"rustc_lexer\",\n  \"serde\",\n  \"smol_str\",\n+ \"stdx\",\n  \"test_utils\",\n  \"walkdir\",\n ]\n@@ -1307,6 +1310,7 @@ dependencies = [\n  \"rustc-hash\",\n  \"serde\",\n  \"serde_json\",\n+ \"stdx\",\n  \"tempfile\",\n  \"test_utils\",\n  \"threadpool\","}, {"sha": "56e791e3e3ea15e88176ced0a83e680866e6c2de", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -15,6 +15,8 @@ either = \"1.5.3\"\n anymap = \"0.12.1\"\n drop_bomb = \"0.1.4\"\n \n+stdx = { path = \"../stdx\" }\n+\n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_syntax = { path = \"../ra_syntax\" }"}, {"sha": "f279c2ad4a9d3b3342d9cf75156f9cabe2f03702", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -63,6 +63,7 @@ use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n use ra_syntax::ast;\n use rustc_hash::FxHashMap;\n+use stdx::format_to;\n \n use crate::{\n     db::DefDatabase,\n@@ -246,7 +247,7 @@ impl CrateDefMap {\n             entries.sort_by_key(|(name, _)| name.clone());\n \n             for (name, def) in entries {\n-                *buf += &format!(\"{}:\", name);\n+                format_to!(buf, \"{}:\", name);\n \n                 if def.types.is_some() {\n                     *buf += \" t\";\n@@ -265,7 +266,7 @@ impl CrateDefMap {\n             }\n \n             for (name, child) in map.modules[module].children.iter() {\n-                let path = path.to_string() + &format!(\"::{}\", name);\n+                let path = &format!(\"{}::{}\", path, name);\n                 go(buf, map, &path, *child);\n             }\n         }"}, {"sha": "5a58d70cf09fda9d44b6286085b6be17a607e8cd", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -13,6 +13,8 @@ ena = \"0.13.1\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n \n+stdx = { path = \"../stdx\" }\n+\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n ra_arena = { path = \"../ra_arena\" }"}, {"sha": "208096aab6d1df153a8b3e7c50a029cc147eb467", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -10,6 +10,7 @@ use hir_expand::{db::AstDatabase, diagnostics::DiagnosticSink};\n use ra_db::{\n     salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath, SourceDatabase, Upcast,\n };\n+use stdx::format_to;\n \n use crate::{db::HirDatabase, expr::ExprValidator};\n \n@@ -131,7 +132,7 @@ impl TestDB {\n             for f in fns {\n                 let infer = self.infer(f.into());\n                 let mut sink = DiagnosticSink::new(|d| {\n-                    buf += &format!(\"{:?}: {}\\n\", d.syntax_node(self).text(), d.message());\n+                    format_to!(buf, \"{:?}: {}\\n\", d.syntax_node(self).text(), d.message());\n                 });\n                 infer.add_diagnostics(self, f, &mut sink);\n                 let mut validator = ExprValidator::new(f, infer, &mut sink);"}, {"sha": "3c6ae77e462e58a7a0ebb7ce812af2e8513f2507", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -18,6 +18,8 @@ rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\"\n once_cell = \"1.3.1\"\n \n+stdx = { path = \"../stdx\" }\n+\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_parser = { path = \"../ra_parser\" }\n "}, {"sha": "0c908573d90a54b497a09c49d08ffffe2b7e01fd", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -1,6 +1,7 @@\n //! This module contains free-standing functions for creating AST fragments out\n //! of smaller pieces.\n use itertools::Itertools;\n+use stdx::format_to;\n \n use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, SyntaxToken};\n \n@@ -34,14 +35,14 @@ pub fn use_tree(\n     let mut buf = \"use \".to_string();\n     buf += &path.syntax().to_string();\n     if let Some(use_tree_list) = use_tree_list {\n-        buf += &format!(\"::{}\", use_tree_list);\n+        format_to!(buf, \"::{}\", use_tree_list);\n     }\n     if add_star {\n         buf += \"::*\";\n     }\n \n     if let Some(alias) = alias {\n-        buf += &format!(\" {}\", alias);\n+        format_to!(buf, \" {}\", alias);\n     }\n     ast_from_text(&buf)\n }\n@@ -70,15 +71,15 @@ pub fn block_expr(\n     stmts: impl IntoIterator<Item = ast::Stmt>,\n     tail_expr: Option<ast::Expr>,\n ) -> ast::BlockExpr {\n-    let mut text = \"{\\n\".to_string();\n+    let mut buf = \"{\\n\".to_string();\n     for stmt in stmts.into_iter() {\n-        text += &format!(\"    {}\\n\", stmt);\n+        format_to!(buf, \"    {}\\n\", stmt);\n     }\n     if let Some(tail_expr) = tail_expr {\n-        text += &format!(\"    {}\\n\", tail_expr)\n+        format_to!(buf, \"    {}\\n\", tail_expr)\n     }\n-    text += \"}\";\n-    ast_from_text(&format!(\"fn f() {}\", text))\n+    buf += \"}\";\n+    ast_from_text(&format!(\"fn f() {}\", buf))\n }\n \n pub fn block_from_expr(e: ast::Expr) -> ast::Block {"}, {"sha": "f0e16dc2bff010e524db43e4316a18a2b8d39b25", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -32,9 +32,10 @@ pub mod ast;\n #[doc(hidden)]\n pub mod fuzz;\n \n-use std::{fmt::Write, marker::PhantomData, sync::Arc};\n+use std::{marker::PhantomData, sync::Arc};\n \n use ra_text_edit::AtomTextEdit;\n+use stdx::format_to;\n \n use crate::syntax_node::GreenNode;\n \n@@ -115,7 +116,7 @@ impl Parse<SourceFile> {\n     pub fn debug_dump(&self) -> String {\n         let mut buf = format!(\"{:#?}\", self.tree().syntax());\n         for err in self.errors.iter() {\n-            writeln!(buf, \"error {:?}: {}\", err.range(), err).unwrap();\n+            format_to!(buf, \"error {:?}: {}\\n\", err.range(), err);\n         }\n         buf\n     }\n@@ -296,7 +297,7 @@ fn api_walkthrough() {\n                     NodeOrToken::Node(it) => it.text().to_string(),\n                     NodeOrToken::Token(it) => it.text().to_string(),\n                 };\n-                buf += &format!(\"{:indent$}{:?} {:?}\\n\", \" \", text, node.kind(), indent = indent);\n+                format_to!(buf, \"{:indent$}{:?} {:?}\\n\", \" \", text, node.kind(), indent = indent);\n                 indent += 2;\n             }\n             WalkEvent::Leave(_) => indent -= 2,"}, {"sha": "8fe6799d23a9dae042044e7829f61c4d8c589cf0", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -30,6 +30,8 @@ serde = { version = \"1.0.104\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n threadpool = \"1.7.1\"\n \n+stdx = { path = \"../stdx\" }\n+\n lsp-server = \"0.3.1\"\n ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n ra_ide = { path = \"../ra_ide\" }"}, {"sha": "64a7b907edc55a62d34f04b648c204599aa1cd50", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -19,6 +19,7 @@ use ra_ide::{\n use ra_project_model::{get_rustc_cfg_options, ProcMacroClient, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n+use stdx::format_to;\n \n use crate::{\n     diagnostics::{CheckFixes, DiagnosticCollection},\n@@ -319,23 +320,23 @@ impl WorldSnapshot {\n     }\n \n     pub fn status(&self) -> String {\n-        let mut res = String::new();\n+        let mut buf = String::new();\n         if self.workspaces.is_empty() {\n-            res.push_str(\"no workspaces\\n\")\n+            buf.push_str(\"no workspaces\\n\")\n         } else {\n-            res.push_str(\"workspaces:\\n\");\n+            buf.push_str(\"workspaces:\\n\");\n             for w in self.workspaces.iter() {\n-                res += &format!(\"{} packages loaded\\n\", w.n_packages());\n+                format_to!(buf, \"{} packages loaded\\n\", w.n_packages());\n             }\n         }\n-        res.push_str(\"\\nanalysis:\\n\");\n-        res.push_str(\n+        buf.push_str(\"\\nanalysis:\\n\");\n+        buf.push_str(\n             &self\n                 .analysis\n                 .status()\n                 .unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n         );\n-        res\n+        buf\n     }\n \n     pub fn workspace_root_for(&self, file_id: FileId) -> Option<&Path> {"}, {"sha": "8492c17af2f2f93b9bfcd9c6118002878cd1f9f5", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6596e7cddfc00281362c3640781f6cd6bc0b5614/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=6596e7cddfc00281362c3640781f6cd6bc0b5614", "patch": "@@ -21,7 +21,7 @@ where\n     I: Iterator,\n     I::Item: fmt::Display,\n {\n-    fn sep_by<'a>(self, sep: &'a std::primitive::str) -> SepByBuilder<'a, Self> {\n+    fn sep_by<'a>(self, sep: &'a str) -> SepByBuilder<'a, Self> {\n         SepByBuilder::new(sep, self)\n     }\n }"}]}