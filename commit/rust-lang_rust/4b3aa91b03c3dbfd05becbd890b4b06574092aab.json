{"sha": "4b3aa91b03c3dbfd05becbd890b4b06574092aab", "node_id": "C_kwDOAAsO6NoAKDRiM2FhOTFiMDNjM2RiZmQwNWJlY2JkODkwYjRiMDY1NzQwOTJhYWI", "commit": {"author": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-07-05T17:56:22Z"}, "committer": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-08-28T17:46:45Z"}, "message": "Support `#[unix_sigpipe = \"inherit|sig_dfl|sig_ign\"]` on `fn main()`\n\nThis makes it possible to instruct libstd to never touch the signal\nhandler for `SIGPIPE`, which makes programs pipeable by default (e.g.\nwith `./your-program | head -n 1`) without `ErrorKind::BrokenPipe`\nerrors.", "tree": {"sha": "c3b6fa964f2de879d8e6b89e806389e1d15666eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3b6fa964f2de879d8e6b89e806389e1d15666eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b3aa91b03c3dbfd05becbd890b4b06574092aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3aa91b03c3dbfd05becbd890b4b06574092aab", "html_url": "https://github.com/rust-lang/rust/commit/4b3aa91b03c3dbfd05becbd890b4b06574092aab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b3aa91b03c3dbfd05becbd890b4b06574092aab/comments", "author": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f48af912ea9a9726ff851a3e4a809e1d2daeb0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48af912ea9a9726ff851a3e4a809e1d2daeb0ba", "html_url": "https://github.com/rust-lang/rust/commit/f48af912ea9a9726ff851a3e4a809e1d2daeb0ba"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "3c024a84d9091f1fb3bf1533443d4ed5bed5a27d", "filename": "src/main_shim.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4b3aa91b03c3dbfd05becbd890b4b06574092aab/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3aa91b03c3dbfd05becbd890b4b06574092aab/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=4b3aa91b03c3dbfd05becbd890b4b06574092aab", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir::LangItem;\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::AssocKind;\n-use rustc_session::config::EntryFnType;\n+use rustc_session::config::{sigpipe, EntryFnType};\n use rustc_span::symbol::Ident;\n \n use crate::prelude::*;\n@@ -15,12 +15,12 @@ pub(crate) fn maybe_create_entry_wrapper(\n     is_jit: bool,\n     is_primary_cgu: bool,\n ) {\n-    let (main_def_id, is_main_fn) = match tcx.entry_fn(()) {\n+    let (main_def_id, (is_main_fn, sigpipe)) = match tcx.entry_fn(()) {\n         Some((def_id, entry_ty)) => (\n             def_id,\n             match entry_ty {\n-                EntryFnType::Main => true,\n-                EntryFnType::Start => false,\n+                EntryFnType::Main { sigpipe } => (true, sigpipe),\n+                EntryFnType::Start => (false, sigpipe::DEFAULT),\n             },\n         ),\n         None => return,\n@@ -35,7 +35,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         return;\n     }\n \n-    create_entry_fn(tcx, module, unwind_context, main_def_id, is_jit, is_main_fn);\n+    create_entry_fn(tcx, module, unwind_context, main_def_id, is_jit, is_main_fn, sigpipe);\n \n     fn create_entry_fn(\n         tcx: TyCtxt<'_>,\n@@ -44,6 +44,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         rust_main_def_id: DefId,\n         ignore_lang_start_wrapper: bool,\n         is_main_fn: bool,\n+        sigpipe: u8,\n     ) {\n         let main_ret_ty = tcx.fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -83,6 +84,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             bcx.switch_to_block(block);\n             let arg_argc = bcx.append_block_param(block, m.target_config().pointer_type());\n             let arg_argv = bcx.append_block_param(block, m.target_config().pointer_type());\n+            let arg_sigpipe = bcx.ins().iconst(types::I8, sigpipe as i64);\n \n             let main_func_ref = m.declare_func_in_func(main_func_id, &mut bcx.func);\n \n@@ -143,7 +145,8 @@ pub(crate) fn maybe_create_entry_wrapper(\n                 let main_val = bcx.ins().func_addr(m.target_config().pointer_type(), main_func_ref);\n \n                 let func_ref = m.declare_func_in_func(start_func_id, &mut bcx.func);\n-                let call_inst = bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv]);\n+                let call_inst =\n+                    bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv, arg_sigpipe]);\n                 bcx.inst_results(call_inst)[0]\n             } else {\n                 // using user-defined start fn"}]}