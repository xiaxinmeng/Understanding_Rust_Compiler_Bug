{"sha": "4f44d6253d02484400afa315a1f0306f4cf35d16", "node_id": "C_kwDOAAsO6NoAKDRmNDRkNjI1M2QwMjQ4NDQwMGFmYTMxNWExZjAzMDZmNGNmMzVkMTY", "commit": {"author": {"name": "Finn Bear", "email": "finnbearlabs@gmail.com", "date": "2022-10-20T02:15:58Z"}, "committer": {"name": "Finn Bear", "email": "finnbearlabs@gmail.com", "date": "2022-10-20T02:15:58Z"}, "message": "Put fn in the right place.", "tree": {"sha": "4c59212de63f58cbd913c914f90e77d2853a80d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c59212de63f58cbd913c914f90e77d2853a80d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f44d6253d02484400afa315a1f0306f4cf35d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f44d6253d02484400afa315a1f0306f4cf35d16", "html_url": "https://github.com/rust-lang/rust/commit/4f44d6253d02484400afa315a1f0306f4cf35d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f44d6253d02484400afa315a1f0306f4cf35d16/comments", "author": {"login": "finnbear", "id": 20015102, "node_id": "MDQ6VXNlcjIwMDE1MTAy", "avatar_url": "https://avatars.githubusercontent.com/u/20015102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finnbear", "html_url": "https://github.com/finnbear", "followers_url": "https://api.github.com/users/finnbear/followers", "following_url": "https://api.github.com/users/finnbear/following{/other_user}", "gists_url": "https://api.github.com/users/finnbear/gists{/gist_id}", "starred_url": "https://api.github.com/users/finnbear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finnbear/subscriptions", "organizations_url": "https://api.github.com/users/finnbear/orgs", "repos_url": "https://api.github.com/users/finnbear/repos", "events_url": "https://api.github.com/users/finnbear/events{/privacy}", "received_events_url": "https://api.github.com/users/finnbear/received_events", "type": "User", "site_admin": false}, "committer": {"login": "finnbear", "id": 20015102, "node_id": "MDQ6VXNlcjIwMDE1MTAy", "avatar_url": "https://avatars.githubusercontent.com/u/20015102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finnbear", "html_url": "https://github.com/finnbear", "followers_url": "https://api.github.com/users/finnbear/followers", "following_url": "https://api.github.com/users/finnbear/following{/other_user}", "gists_url": "https://api.github.com/users/finnbear/gists{/gist_id}", "starred_url": "https://api.github.com/users/finnbear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finnbear/subscriptions", "organizations_url": "https://api.github.com/users/finnbear/orgs", "repos_url": "https://api.github.com/users/finnbear/repos", "events_url": "https://api.github.com/users/finnbear/events{/privacy}", "received_events_url": "https://api.github.com/users/finnbear/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f81cd87eeae2b02ebfcf309764cd9e648040b988", "url": "https://api.github.com/repos/rust-lang/rust/commits/f81cd87eeae2b02ebfcf309764cd9e648040b988", "html_url": "https://github.com/rust-lang/rust/commit/f81cd87eeae2b02ebfcf309764cd9e648040b988"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "209abfac6bbf9f92a64e1942079c3c60fb5582e9", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4f44d6253d02484400afa315a1f0306f4cf35d16/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f44d6253d02484400afa315a1f0306f4cf35d16/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=4f44d6253d02484400afa315a1f0306f4cf35d16", "patch": "@@ -1849,6 +1849,35 @@ impl String {\n         let slice = self.vec.into_boxed_slice();\n         unsafe { from_boxed_utf8_unchecked(slice) }\n     }\n+\n+    /// Consumes and leaks the `String`, returning a mutable reference to the contents,\n+    /// `&'a mut str`.\n+    ///\n+    /// This is mainly useful for data that lives for the remainder of\n+    /// the program's life. Dropping the returned reference will cause a memory\n+    /// leak.\n+    ///\n+    /// It does not reallocate or shrink the `String`,\n+    /// so the leaked allocation may include unused capacity that is not part\n+    /// of the returned slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Simple usage:\n+    ///\n+    /// ```\n+    /// #![feature(string_leak)]\n+    ///\n+    /// let x = String::from(\"bucket\");\n+    /// let static_ref: &'static mut str = x.leak();\n+    /// assert_eq!(static_ref, \"bucket\");\n+    /// ```\n+    #[unstable(feature = \"string_leak\", issue = \"102929\")]\n+    #[inline]\n+    pub fn leak(self) -> &'static mut str {\n+        let slice = self.vec.leak();\n+        unsafe { from_utf8_unchecked_mut(slice) }\n+    }\n }\n \n impl FromUtf8Error {\n@@ -2691,35 +2720,6 @@ impl From<String> for Box<str> {\n     fn from(s: String) -> Box<str> {\n         s.into_boxed_str()\n     }\n-\n-    /// Consumes and leaks the `String`, returning a mutable reference to the contents,\n-    /// `&'a mut str`.\n-    ///\n-    /// This is mainly useful for data that lives for the remainder of\n-    /// the program's life. Dropping the returned reference will cause a memory\n-    /// leak.\n-    ///\n-    /// It does not reallocate or shrink the `String`,\n-    /// so the leaked allocation may include unused capacity that is not part\n-    /// of the returned slice.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Simple usage:\n-    ///\n-    /// ```\n-    /// #![feature(string_leak)]\n-    ///\n-    /// let x = String::from(\"bucket\");\n-    /// let static_ref: &'static mut str = x.leak();\n-    /// assert_eq!(static_ref, \"bucket\");\n-    /// ```\n-    #[unstable(feature = \"string_leak\", issue = \"102929\")]\n-    #[inline]\n-    pub fn leak(self) -> &'static mut str {\n-        let slice = self.vec.leak();\n-        unsafe { from_utf8_unchecked_mut(slice) }\n-    }\n }\n \n #[cfg(not(no_global_oom_handling))]"}]}