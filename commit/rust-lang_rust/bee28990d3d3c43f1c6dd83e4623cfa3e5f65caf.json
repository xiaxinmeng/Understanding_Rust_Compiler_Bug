{"sha": "bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZTI4OTkwZDNkM2M0M2YxYzZkZDgzZTQ2MjNjZmEzZTVmNjVjYWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-15T18:01:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-15T18:01:28Z"}, "message": "Rollup merge of #74344 - estebank:stringly-wobbly, r=eddyb\n\nRemove string comparison and use diagnostic item instead\n\nr? @eddyb", "tree": {"sha": "84b180231f02053d59d7aafb8ce2de2ec1465a7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b180231f02053d59d7aafb8ce2de2ec1465a7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfD0R4CRBK7hj4Ov3rIwAAdHIIAGGtvLouJRZWcEkZs0/zzDmP\nnEu/cpd6g3cYi2/oxEzgtn3JnmHJ6NGLvuykPZcBAcTSNsVWHL+rUG0X7Nn8PY+Z\nqaOrZXD8QQ2UveXOyy9QhYQzE2Akko0mlYXehLEwFq5aXA5y1f6UwPagTEHWI/QH\nEsfaUCl2rWvyBbNX8pRA88v/t5pCbUZoo/17qoC/NwY++xgzVZ+kxqC/XhS+UzKs\nnZ2AuZvBj5wm4d9VgLJppvTlEsF0+HSiILheWVBn9hrn9RxHKluVnpSlRHhqdDdY\n9txVA+rf4YVMsMsn+MSq3jApzPphU7U/feQjfxE+kNVl8a5+uP05QK1IWbaHN84=\n=0d6z\n-----END PGP SIGNATURE-----\n", "payload": "tree 84b180231f02053d59d7aafb8ce2de2ec1465a7e\nparent f4bbd0e607d3f302342b835999105d4a2ad4025d\nparent c44ca17a4425b9bbd5d6219c8cf5d75bf670e667\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594836088 -0700\ncommitter GitHub <noreply@github.com> 1594836088 -0700\n\nRollup merge of #74344 - estebank:stringly-wobbly, r=eddyb\n\nRemove string comparison and use diagnostic item instead\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf", "html_url": "https://github.com/rust-lang/rust/commit/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4bbd0e607d3f302342b835999105d4a2ad4025d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bbd0e607d3f302342b835999105d4a2ad4025d", "html_url": "https://github.com/rust-lang/rust/commit/f4bbd0e607d3f302342b835999105d4a2ad4025d"}, {"sha": "c44ca17a4425b9bbd5d6219c8cf5d75bf670e667", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44ca17a4425b9bbd5d6219c8cf5d75bf670e667", "html_url": "https://github.com/rust-lang/rust/commit/c44ca17a4425b9bbd5d6219c8cf5d75bf670e667"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "a27e8d2a724529f67c3110d0bd1c747542dda36a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf", "patch": "@@ -1681,6 +1681,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n /// to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can\n /// implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that\n /// returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.\n+#[rustc_diagnostic_item = \"none_error\"]\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n pub struct NoneError;"}, {"sha": "86b770104ea8e9c90fb78342ffff32f5c21946d0", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf", "patch": "@@ -632,6 +632,7 @@ symbols! {\n         nomem,\n         non_ascii_idents,\n         None,\n+        none_error,\n         non_exhaustive,\n         no_niche,\n         non_modrs_mods,"}, {"sha": "79d5c148ce4fe9a5a096e9b122ca35b9bdc68a34", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=bee28990d3d3c43f1c6dd83e4623cfa3e5f65caf", "patch": "@@ -26,6 +26,7 @@ use rustc_middle::ty::{\n     TypeFoldable, WithConstness,\n };\n use rustc_session::DiagnosticMessageId;\n+use rustc_span::symbol::sym;\n use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n \n@@ -283,8 +284,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             .span_to_snippet(span)\n                             .map(|s| &s == \"?\")\n                             .unwrap_or(false);\n-                        let is_from = format!(\"{}\", trait_ref.print_only_trait_path())\n-                            .starts_with(\"std::convert::From<\");\n+                        let is_from = self.tcx.get_diagnostic_item(sym::from_trait)\n+                            == Some(trait_ref.def_id());\n                         let is_unsize =\n                             { Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait() };\n                         let (message, note) = if is_try && is_from {\n@@ -315,12 +316,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             ))\n                         );\n \n-                        let should_convert_option_to_result =\n-                            format!(\"{}\", trait_ref.print_only_trait_path())\n-                                .starts_with(\"std::convert::From<std::option::NoneError\");\n-                        let should_convert_result_to_option = format!(\"{}\", trait_ref)\n-                            .starts_with(\"<std::option::NoneError as std::convert::From<\");\n                         if is_try && is_from {\n+                            let none_error = self\n+                                .tcx\n+                                .get_diagnostic_item(sym::none_error)\n+                                .map(|def_id| tcx.type_of(def_id));\n+                            let should_convert_option_to_result =\n+                                Some(trait_ref.skip_binder().substs.type_at(1)) == none_error;\n+                            let should_convert_result_to_option =\n+                                Some(trait_ref.self_ty().skip_binder()) == none_error;\n                             if should_convert_option_to_result {\n                                 err.span_suggestion_verbose(\n                                     span.shrink_to_lo(),"}]}