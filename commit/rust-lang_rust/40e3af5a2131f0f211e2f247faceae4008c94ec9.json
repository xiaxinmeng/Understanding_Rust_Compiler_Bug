{"sha": "40e3af5a2131f0f211e2f247faceae4008c94ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZTNhZjVhMjEzMWYwZjIxMWUyZjI0N2ZhY2VhZTQwMDhjOTRlYzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-17T22:51:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T22:51:13Z"}, "message": "Rollup merge of #80572 - thomcc:ok_or_err, r=m-ou-se\n\nAdd a `Result::into_ok_or_err` method to extract a `T` from `Result<T, T>`\n\nWhen updating code to handle the semi-recent deprecation of `compare_and_swap` in favor of `compare_exchange`, which returns `Result<T, T>`, I wanted this. I've also wanted it with code using `slice::binary_search` before.\n\nThe name (and perhaps the documentation) is the hardest part here, but this name seems consistent with the other Result methods, and equivalently memorable.", "tree": {"sha": "0e93f986dc71231a037752a1bad0f143a752a265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e93f986dc71231a037752a1bad0f143a752a265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40e3af5a2131f0f211e2f247faceae4008c94ec9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLZ3hCRBK7hj4Ov3rIwAAdHIIADKcUXz9tpkJkQgpddlAU/Ot\n0KTxxTxHB7ISKlVUZjEuyQnJOnJBpjPkgWDpzFHVhDhphwi3XppdaKaj/76gJw9R\nQAY0VKe7kA1BzYj8kL4suQz/f/dfxd2xZYBFKdmidosxdeJh7Z9kdN1dOc1alg/U\ntsHiMXbmiCh4gej4fn+C4vl6w7U+NMyu8lZM/LM0VKo631EwGdXIEAYBtU9LZcJj\nS8VhEtIYuHXguJmNQXoDswQUmKngWHhc+ovcV3YGjKaZ3+a1zkxpzXYBJdCnx6UB\n8xt0p42lCTkscLCAzAo1Y6gNCxE9qY0xoVFR4/SZAHhT35a48pjUqEoMIhiuu2M=\n=wFA4\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e93f986dc71231a037752a1bad0f143a752a265\nparent db59950b6d9dbadc4824e6dde841d1a085894c89\nparent 404da0bc901b92c2bf74a3c84fb0bd52cbf7f934\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613602273 +0100\ncommitter GitHub <noreply@github.com> 1613602273 +0100\n\nRollup merge of #80572 - thomcc:ok_or_err, r=m-ou-se\n\nAdd a `Result::into_ok_or_err` method to extract a `T` from `Result<T, T>`\n\nWhen updating code to handle the semi-recent deprecation of `compare_and_swap` in favor of `compare_exchange`, which returns `Result<T, T>`, I wanted this. I've also wanted it with code using `slice::binary_search` before.\n\nThe name (and perhaps the documentation) is the hardest part here, but this name seems consistent with the other Result methods, and equivalently memorable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40e3af5a2131f0f211e2f247faceae4008c94ec9", "html_url": "https://github.com/rust-lang/rust/commit/40e3af5a2131f0f211e2f247faceae4008c94ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40e3af5a2131f0f211e2f247faceae4008c94ec9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db59950b6d9dbadc4824e6dde841d1a085894c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/db59950b6d9dbadc4824e6dde841d1a085894c89", "html_url": "https://github.com/rust-lang/rust/commit/db59950b6d9dbadc4824e6dde841d1a085894c89"}, {"sha": "404da0bc901b92c2bf74a3c84fb0bd52cbf7f934", "url": "https://api.github.com/repos/rust-lang/rust/commits/404da0bc901b92c2bf74a3c84fb0bd52cbf7f934", "html_url": "https://github.com/rust-lang/rust/commit/404da0bc901b92c2bf74a3c84fb0bd52cbf7f934"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "d8747f8b8d6dcb4900af1f98325333cc47cf8586", "filename": "library/core/src/result.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/40e3af5a2131f0f211e2f247faceae4008c94ec9/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3af5a2131f0f211e2f247faceae4008c94ec9/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=40e3af5a2131f0f211e2f247faceae4008c94ec9", "patch": "@@ -1276,6 +1276,41 @@ impl<T, E> Result<Result<T, E>, E> {\n     }\n }\n \n+impl<T> Result<T, T> {\n+    /// Returns the [`Ok`] value if `self` is `Ok`, and the [`Err`] value if\n+    /// `self` is `Err`.\n+    ///\n+    /// In other words, this function returns the value (the `T`) of a\n+    /// `Result<T, T>`, regardless of whether or not that result is `Ok` or\n+    /// `Err`.\n+    ///\n+    /// This can be useful in conjunction with APIs such as\n+    /// [`Atomic*::compare_exchange`], or [`slice::binary_search`][binary_search], but only in\n+    /// cases where you don't care if the result was `Ok` or not.\n+    ///\n+    /// [`Atomic*::compare_exchange`]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [binary_search]: ../../std/primitive.slice.html#method.binary_search\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_into_ok_or_err)]\n+    /// let ok: Result<u32, u32> = Ok(3);\n+    /// let err: Result<u32, u32> = Err(4);\n+    ///\n+    /// assert_eq!(ok.into_ok_or_err(), 3);\n+    /// assert_eq!(err.into_ok_or_err(), 4);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_into_ok_or_err\", reason = \"newly added\", issue = \"82223\")]\n+    pub const fn into_ok_or_err(self) -> T {\n+        match self {\n+            Ok(v) => v,\n+            Err(v) => v,\n+        }\n+    }\n+}\n+\n // This is a separate function to reduce the code size of the methods\n #[inline(never)]\n #[cold]"}, {"sha": "34e05760db259d61ba96b74fb55822289fce0fb2", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40e3af5a2131f0f211e2f247faceae4008c94ec9/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3af5a2131f0f211e2f247faceae4008c94ec9/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=40e3af5a2131f0f211e2f247faceae4008c94ec9", "patch": "@@ -65,6 +65,7 @@\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(option_result_unwrap_unchecked)]\n+#![feature(result_into_ok_or_err)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_peek_mut)]\n #![feature(once_cell)]"}, {"sha": "5fcd7b4d3a3273d6427104d10edf8b7a8c659f08", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40e3af5a2131f0f211e2f247faceae4008c94ec9/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3af5a2131f0f211e2f247faceae4008c94ec9/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=40e3af5a2131f0f211e2f247faceae4008c94ec9", "patch": "@@ -95,6 +95,15 @@ fn test_unwrap_or() {\n     assert_eq!(ok_err.unwrap_or(50), 50);\n }\n \n+#[test]\n+fn test_ok_or_err() {\n+    let ok: Result<isize, isize> = Ok(100);\n+    let err: Result<isize, isize> = Err(200);\n+\n+    assert_eq!(ok.into_ok_or_err(), 100);\n+    assert_eq!(err.into_ok_or_err(), 200);\n+}\n+\n #[test]\n fn test_unwrap_or_else() {\n     fn handler(msg: &'static str) -> isize {"}]}