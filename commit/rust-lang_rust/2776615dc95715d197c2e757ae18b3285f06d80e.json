{"sha": "2776615dc95715d197c2e757ae18b3285f06d80e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzY2MTVkYzk1NzE1ZDE5N2MyZTc1N2FlMThiMzI4NWYwNmQ4MGU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-08T04:13:49Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-08T04:14:23Z"}, "message": "Replace 'try!' with '?'", "tree": {"sha": "57674210a1991ad11e6755d83e7c5c1ffc9b6a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57674210a1991ad11e6755d83e7c5c1ffc9b6a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2776615dc95715d197c2e757ae18b3285f06d80e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2776615dc95715d197c2e757ae18b3285f06d80e", "html_url": "https://github.com/rust-lang/rust/commit/2776615dc95715d197c2e757ae18b3285f06d80e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2776615dc95715d197c2e757ae18b3285f06d80e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35150ed7ad9591e913161e568af93fc5096ee8b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/35150ed7ad9591e913161e568af93fc5096ee8b7", "html_url": "https://github.com/rust-lang/rust/commit/35150ed7ad9591e913161e568af93fc5096ee8b7"}], "stats": {"total": 110, "additions": 56, "deletions": 54}, "files": [{"sha": "c55c283c654348f9a7cd03fa44b74e075813d74b", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=2776615dc95715d197c2e757ae18b3285f06d80e", "patch": "@@ -105,7 +105,7 @@ pub enum Verbosity {\n fn format_crate(verbosity: Verbosity,\n                 workspace_hitlist: WorkspaceHitlist)\n                 -> Result<ExitStatus, std::io::Error> {\n-    let targets = try!(get_targets(workspace_hitlist));\n+    let targets = get_targets(workspace_hitlist)?;\n \n     // Currently only bin and lib files get formatted\n     let files: Vec<_> = targets\n@@ -181,7 +181,7 @@ impl WorkspaceHitlist {\n fn get_targets(workspace_hitlist: WorkspaceHitlist) -> Result<Vec<Target>, std::io::Error> {\n     let mut targets: Vec<Target> = vec![];\n     if workspace_hitlist == WorkspaceHitlist::None {\n-        let output = try!(Command::new(\"cargo\").arg(\"read-manifest\").output());\n+        let output = Command::new(\"cargo\").arg(\"read-manifest\").output()?;\n         if output.status.success() {\n             // None of the unwraps should fail if output of `cargo read-manifest` is correct\n             let data = &String::from_utf8(output.stdout).unwrap();\n@@ -287,7 +287,7 @@ fn format_files(files: &[PathBuf],\n         }\n         println!(\"\");\n     }\n-    let mut command = try!(Command::new(\"rustfmt\")\n+    let mut command = Command::new(\"rustfmt\")\n         .stdout(stdout)\n         .args(files)\n         .args(fmt_args)\n@@ -298,6 +298,6 @@ fn format_files(files: &[PathBuf],\n                                     \"Could not run rustfmt, please make sure it is in your PATH.\")\n             }\n             _ => e,\n-        }));\n+        })?;\n     command.wait()\n }"}, {"sha": "2c5cf6973622803b78d333b888bc8717c9cf4e64", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=2776615dc95715d197c2e757ae18b3285f06d80e", "patch": "@@ -82,7 +82,7 @@ impl CliOptions {\n         }\n \n         if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-            options.file_lines = try!(file_lines.parse());\n+            options.file_lines = file_lines.parse()?;\n         }\n \n         Ok(options)\n@@ -104,12 +104,12 @@ const CONFIG_FILE_NAMES: [&'static str; 2] = [\".rustfmt.toml\", \"rustfmt.toml\"];\n /// nearest project file if one exists, or `None` if no project file was found.\n fn lookup_project_file(dir: &Path) -> FmtResult<Option<PathBuf>> {\n     let mut current = if dir.is_relative() {\n-        try!(env::current_dir()).join(dir)\n+        env::current_dir()?.join(dir)\n     } else {\n         dir.to_path_buf()\n     };\n \n-    current = try!(fs::canonicalize(current));\n+    current = fs::canonicalize(current)?;\n \n     loop {\n         for config_file_name in &CONFIG_FILE_NAMES {\n@@ -137,9 +137,9 @@ fn lookup_project_file(dir: &Path) -> FmtResult<Option<PathBuf>> {\n }\n \n fn open_config_file(file_path: &Path) -> FmtResult<(Config, Option<PathBuf>)> {\n-    let mut file = try!(File::open(&file_path));\n+    let mut file = File::open(&file_path)?;\n     let mut toml = String::new();\n-    try!(file.read_to_string(&mut toml));\n+    file.read_to_string(&mut toml)?;\n     match Config::from_toml(&toml) {\n         Ok(cfg) => Ok((cfg, Some(file_path.to_path_buf()))),\n         Err(err) => Err(FmtError::from(err)),\n@@ -151,7 +151,7 @@ fn open_config_file(file_path: &Path) -> FmtResult<(Config, Option<PathBuf>)> {\n /// Returns the `Config` to use, and the path of the project file if there was\n /// one.\n fn resolve_config(dir: &Path) -> FmtResult<(Config, Option<PathBuf>)> {\n-    let path = try!(lookup_project_file(dir));\n+    let path = lookup_project_file(dir)?;\n     if path.is_none() {\n         return Ok((Config::default(), None));\n     }\n@@ -164,7 +164,7 @@ fn match_cli_path_or_file(config_path: Option<PathBuf>,\n                           -> FmtResult<(Config, Option<PathBuf>)> {\n \n     if let Some(config_file) = config_path {\n-        let (toml, path) = try!(open_config_file(config_file.as_ref()));\n+        let (toml, path) = open_config_file(config_file.as_ref())?;\n         if path.is_some() {\n             return Ok((toml, path));\n         }\n@@ -200,9 +200,9 @@ fn make_opts() -> Options {\n }\n \n fn execute(opts: &Options) -> FmtResult<Summary> {\n-    let matches = try!(opts.parse(env::args().skip(1)));\n+    let matches = opts.parse(env::args().skip(1))?;\n \n-    match try!(determine_operation(&matches)) {\n+    match determine_operation(&matches)? {\n         Operation::Help => {\n             print_usage(opts, \"\");\n             Summary::print_exit_codes();\n@@ -226,7 +226,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             // parse file_lines\n             if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-                config.file_lines = try!(file_lines.parse());\n+                config.file_lines = file_lines.parse()?;\n                 for f in config.file_lines.files() {\n                     if f != \"stdin\" {\n                         println!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n@@ -237,7 +237,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             Ok(run(Input::Text(input), &config))\n         }\n         Operation::Format { files, config_path } => {\n-            let options = try!(CliOptions::from_matches(&matches));\n+            let options = CliOptions::from_matches(&matches)?;\n \n             for f in options.file_lines.files() {\n                 if !files.contains(&PathBuf::from(f)) {\n@@ -386,7 +386,7 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n     // if no file argument is supplied, read from stdin\n     if matches.free.is_empty() {\n         let mut buffer = String::new();\n-        try!(io::stdin().read_to_string(&mut buffer));\n+        io::stdin().read_to_string(&mut buffer)?;\n \n         return Ok(Operation::Stdin {\n                       input: buffer,"}, {"sha": "69c89a9c5fb3d86ac894fef9801252139698c55e", "filename": "src/checkstyle.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=2776615dc95715d197c2e757ae18b3285f06d80e", "patch": "@@ -20,7 +20,7 @@ pub fn output_header<T>(out: &mut T, mode: WriteMode) -> Result<(), io::Error>\n         xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n         xml_heading.push_str(\"\\n\");\n         xml_heading.push_str(\"<checkstyle version=\\\"4.3\\\">\");\n-        try!(write!(out, \"{}\", xml_heading));\n+        write!(out, \"{}\", xml_heading)?;\n     }\n     Ok(())\n }\n@@ -31,7 +31,7 @@ pub fn output_footer<T>(out: &mut T, mode: WriteMode) -> Result<(), io::Error>\n     if mode == WriteMode::Checkstyle {\n         let mut xml_tail = String::new();\n         xml_tail.push_str(\"</checkstyle>\");\n-        try!(write!(out, \"{}\", xml_tail));\n+        write!(out, \"{}\", xml_tail)?;\n     }\n     Ok(())\n }\n@@ -42,21 +42,21 @@ pub fn output_checkstyle_file<T>(mut writer: T,\n                                  -> Result<(), io::Error>\n     where T: Write\n {\n-    try!(write!(writer, \"<file name=\\\"{}\\\">\", filename));\n+    write!(writer, \"<file name=\\\"{}\\\">\", filename)?;\n     for mismatch in diff {\n         for line in mismatch.lines {\n             // Do nothing with `DiffLine::Context` and `DiffLine::Resulting`.\n             if let DiffLine::Expected(ref str) = line {\n                 let message = xml_escape_str(str);\n-                try!(write!(writer,\n-                            \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be `{}`\\\" \\\n+                write!(writer,\n+                       \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be `{}`\\\" \\\n                              />\",\n-                            mismatch.line_number,\n-                            message));\n+                       mismatch.line_number,\n+                       message)?;\n             }\n         }\n     }\n-    try!(write!(writer, \"</file>\"));\n+    write!(writer, \"</file>\")?;\n     Ok(())\n }\n "}, {"sha": "0316ba277e21bc9ae72d4537d610ec83ec757c49", "filename": "src/file_lines.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=2776615dc95715d197c2e757ae18b3285f06d80e", "patch": "@@ -173,8 +173,10 @@ impl str::FromStr for FileLines {\n     type Err = String;\n \n     fn from_str(s: &str) -> Result<FileLines, String> {\n-        let v: Vec<JsonSpan> = try!(json::from_str(s).map_err(|e| e.to_string()));\n-        let m = try!(v.into_iter().map(JsonSpan::into_tuple).collect());\n+        let v: Vec<JsonSpan> = json::from_str(s).map_err(|e| e.to_string())?;\n+        let m = v.into_iter()\n+            .map(JsonSpan::into_tuple)\n+            .collect::<Result<_, _>>()?;\n         Ok(FileLines::from_multimap(m))\n     }\n }\n@@ -190,8 +192,8 @@ impl JsonSpan {\n     // To allow `collect()`ing into a `MultiMap`.\n     fn into_tuple(self) -> Result<(String, Range), String> {\n         let (lo, hi) = self.range;\n-        let canonical = try!(canonicalize_path_string(&self.file)\n-                                 .map_err(|_| format!(\"Can't canonicalize {}\", &self.file)));\n+        let canonical = canonicalize_path_string(&self.file)\n+            .map_err(|_| format!(\"Can't canonicalize {}\", &self.file))?;\n         Ok((canonical, Range::new(lo, hi)))\n     }\n }"}, {"sha": "27f5b9902014334f308215987758e90b15edd9ed", "filename": "src/filemap.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=2776615dc95715d197c2e757ae18b3285f06d80e", "patch": "@@ -35,7 +35,7 @@ pub fn write_all_files<T>(file_map: &FileMap, out: &mut T, config: &Config) -> R\n {\n     output_header(out, config.write_mode).ok();\n     for &(ref filename, ref text) in file_map {\n-        try!(write_file(text, filename, out, config));\n+        write_file(text, filename, out, config)?;\n     }\n     output_footer(out, config.write_mode).ok();\n \n@@ -67,9 +67,9 @@ pub fn write_system_newlines<T>(writer: T,\n         NewlineStyle::Windows => {\n             for (c, _) in text.chars() {\n                 match c {\n-                    '\\n' => try!(write!(writer, \"\\r\\n\")),\n+                    '\\n' => write!(writer, \"\\r\\n\")?,\n                     '\\r' => continue,\n-                    c => try!(write!(writer, \"{}\", c)),\n+                    c => write!(writer, \"{}\", c)?,\n                 }\n             }\n             Ok(())\n@@ -90,11 +90,11 @@ pub fn write_file<T>(text: &StringBuffer,\n                                  filename: &str,\n                                  config: &Config)\n                                  -> Result<(String, String), io::Error> {\n-        let mut f = try!(File::open(filename));\n+        let mut f = File::open(filename)?;\n         let mut ori_text = String::new();\n-        try!(f.read_to_string(&mut ori_text));\n+        f.read_to_string(&mut ori_text)?;\n         let mut v = Vec::new();\n-        try!(write_system_newlines(&mut v, text, config));\n+        write_system_newlines(&mut v, text, config)?;\n         let fmt_text = String::from_utf8(v).unwrap();\n         Ok((ori_text, fmt_text))\n     }\n@@ -103,7 +103,7 @@ pub fn write_file<T>(text: &StringBuffer,\n                    text: &StringBuffer,\n                    config: &Config)\n                    -> Result<Vec<Mismatch>, io::Error> {\n-        let (ori, fmt) = try!(source_and_formatted_text(text, filename, config));\n+        let (ori, fmt) = source_and_formatted_text(text, filename, config)?;\n         Ok(make_diff(&ori, &fmt, 3))\n     }\n \n@@ -118,26 +118,26 @@ pub fn write_file<T>(text: &StringBuffer,\n                     let bk_name = filename.to_owned() + \".bk\";\n                     {\n                         // Write text to temp file\n-                        let tmp_file = try!(File::create(&tmp_name));\n-                        try!(write_system_newlines(tmp_file, text, config));\n+                        let tmp_file = File::create(&tmp_name)?;\n+                        write_system_newlines(tmp_file, text, config)?;\n                     }\n \n-                    try!(fs::rename(filename, bk_name));\n-                    try!(fs::rename(tmp_name, filename));\n+                    fs::rename(filename, bk_name)?;\n+                    fs::rename(tmp_name, filename)?;\n                 }\n             }\n         }\n         WriteMode::Overwrite => {\n             // Write text directly over original file.\n-            let file = try!(File::create(filename));\n-            try!(write_system_newlines(file, text, config));\n+            let file = File::create(filename)?;\n+            write_system_newlines(file, text, config)?;\n         }\n         WriteMode::Plain => {\n-            try!(write_system_newlines(out, text, config));\n+            write_system_newlines(out, text, config)?;\n         }\n         WriteMode::Display | WriteMode::Coverage => {\n             println!(\"{}:\\n\", filename);\n-            try!(write_system_newlines(out, text, config));\n+            write_system_newlines(out, text, config)?;\n         }\n         WriteMode::Diff => {\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n@@ -149,8 +149,8 @@ pub fn write_file<T>(text: &StringBuffer,\n             }\n         }\n         WriteMode::Checkstyle => {\n-            let diff = try!(create_diff(filename, text, config));\n-            try!(output_checkstyle_file(out, filename, diff));\n+            let diff = create_diff(filename, text, config)?;\n+            output_checkstyle_file(out, filename, diff)?;\n         }\n     }\n "}, {"sha": "e201c891dc2c9ee08a6748d4cd647aaf454a38e2", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2776615dc95715d197c2e757ae18b3285f06d80e", "patch": "@@ -414,13 +414,13 @@ impl fmt::Display for FormatReport {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         for (file, errors) in &self.file_error_map {\n             for error in errors {\n-                try!(write!(fmt,\n-                            \"{} {}:{}: {} {}\\n\",\n-                            error.msg_prefix(),\n-                            file,\n-                            error.line,\n-                            error.kind,\n-                            error.msg_suffix()));\n+                write!(fmt,\n+                       \"{} {}:{}: {} {}\\n\",\n+                       error.msg_prefix(),\n+                       file,\n+                       error.line,\n+                       error.kind,\n+                       error.msg_suffix())?;\n             }\n         }\n         Ok(())\n@@ -454,7 +454,7 @@ fn format_ast<F>(krate: &ast::Crate,\n         let mut visitor = FmtVisitor::from_codemap(parse_session, config);\n         visitor.format_separate_mod(module);\n \n-        has_diff |= try!(after_file(path, &mut visitor.buffer));\n+        has_diff |= after_file(path, &mut visitor.buffer)?;\n \n         result.push((path.to_owned(), visitor.buffer));\n     }"}, {"sha": "d7778448b8649267579c346f2e6f236d2fbc0f59", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2776615dc95715d197c2e757ae18b3285f06d80e/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2776615dc95715d197c2e757ae18b3285f06d80e", "patch": "@@ -211,7 +211,7 @@ macro_rules! impl_enum_decodable {\n                         Ok(String::from(value))\n                     }\n                 }\n-                let s = try!(d.deserialize_string(StringOnly::<D>(PhantomData)));\n+                let s = d.deserialize_string(StringOnly::<D>(PhantomData))?;\n                 $(\n                     if stringify!($x).eq_ignore_ascii_case(&s) {\n                       return Ok($e::$x);"}]}