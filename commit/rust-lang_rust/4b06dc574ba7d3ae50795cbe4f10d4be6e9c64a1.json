{"sha": "4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMDZkYzU3NGJhN2QzYWU1MDc5NWNiZTRmMTBkNGJlNmU5YzY0YTE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-01T18:40:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-02T00:57:33Z"}, "message": "Add very minimal support for native modules. For now they must be empty.", "tree": {"sha": "1a0d2181f0bd124dfb13277fe74ca674c9db757e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a0d2181f0bd124dfb13277fe74ca674c9db757e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "html_url": "https://github.com/rust-lang/rust/commit/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3689e7c209d6caf6a0a551b9fbfe87942be723d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3689e7c209d6caf6a0a551b9fbfe87942be723d", "html_url": "https://github.com/rust-lang/rust/commit/b3689e7c209d6caf6a0a551b9fbfe87942be723d"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "221ec9ffcca2616e9a7a6a42f899b1bb44aa6e8e", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "patch": "@@ -476,6 +476,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         linear-for-loop.rs \\\n                         multiline-comment.rs \\\n                         mutual-recursion-group.rs \\\n+                        native2.rs \\\n                         obj-drop.rs \\\n                         obj-recursion.rs \\\n                         obj-with-vec.rs \\"}, {"sha": "5f527f2d3b330b4a4b2b3456b6afec84713adede", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "patch": "@@ -227,6 +227,8 @@ type _mod = rec(vec[@view_item] view_items,\n                 vec[@item] items,\n                 mod_index index);\n \n+type native_mod = rec(str native_name);\n+\n type variant_arg = rec(@ty ty, def_id id);\n type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n \n@@ -241,6 +243,7 @@ tag item_ {\n     item_const(ident, @ty, @expr, def_id, ann);\n     item_fn(ident, _fn, vec[ty_param], def_id, ann);\n     item_mod(ident, _mod, def_id);\n+    item_native_mod(ident, native_mod, def_id);\n     item_ty(ident, @ty, vec[ty_param], def_id, ann);\n     item_tag(ident, vec[variant], vec[ty_param], def_id);\n     item_obj(ident, _obj, vec[ty_param], def_id, ann);\n@@ -268,6 +271,9 @@ fn index_item(mod_index index, @item it) {\n         case (ast.item_mod(?id, _, _)) {\n             index.insert(id, ast.mie_item(it));\n         }\n+        case (ast.item_native_mod(?id, _, _)) {\n+            index.insert(id, ast.mie_item(it));\n+        }\n         case (ast.item_ty(?id, _, _, _, _)) {\n             index.insert(id, ast.mie_item(it));\n         }"}, {"sha": "16adfedb0c147d5440a23ebc41732b349079a760", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "patch": "@@ -1577,6 +1577,20 @@ impure fn parse_item_mod(parser p) -> @ast.item {\n     ret @spanned(lo, hi, item);\n }\n \n+impure fn parse_item_native_mod(parser p) -> @ast.item {\n+    auto lo = p.get_span();\n+    expect(p, token.NATIVE);\n+    auto native_name = parse_str_lit(p);\n+    expect(p, token.MOD);\n+    auto id = parse_ident(p);\n+    expect(p, token.LBRACE);\n+    auto m = rec(native_name = native_name);\n+    auto hi = p.get_span();\n+    expect(p, token.RBRACE);\n+    auto item = ast.item_native_mod(id, m, p.next_def_id());\n+    ret @spanned(lo, hi, item);\n+}\n+\n impure fn parse_item_type(parser p) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.TYPE);\n@@ -1717,6 +1731,11 @@ impure fn parse_item(parser p) -> @ast.item {\n             check (lyr == ast.layer_value);\n             ret parse_item_mod(p);\n         }\n+        case (token.NATIVE) {\n+            check (eff == ast.eff_pure);\n+            check (lyr == ast.layer_value);\n+            ret parse_item_native_mod(p);\n+        }\n         case (token.TYPE) {\n             check (eff == ast.eff_pure);\n             ret parse_item_type(p);"}, {"sha": "2426d8ae8ccebb77f20d5566930e455e7addd82c", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "patch": "@@ -196,6 +196,9 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp, ident ident,\n          &ast._mod m, def_id id) -> @item)        fold_item_mod,\n \n+     (fn(&ENV e, &span sp, ident ident,\n+         &ast.native_mod m, def_id id) -> @item)  fold_item_native_mod,\n+\n      (fn(&ENV e, &span sp, ident ident,\n          @ty t, vec[ast.ty_param] ty_params,\n          def_id id, ann a) -> @item)              fold_item_ty,\n@@ -229,6 +232,8 @@ type ast_fold[ENV] =\n \n      (fn(&ENV e, &ast._mod m) -> ast._mod)        fold_mod,\n \n+     (fn(&ENV e, &ast.native_mod m) -> ast.native_mod) fold_native_mod,\n+\n      (fn(&ENV e, &span sp,\n          &ast._mod m) -> @ast.crate)              fold_crate,\n \n@@ -780,6 +785,11 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n             ret fld.fold_item_mod(env_, i.span, ident, mm_, id);\n         }\n \n+        case (ast.item_native_mod(?ident, ?mm, ?id)) {\n+            let ast.native_mod mm_ = fold_native_mod[ENV](env_, fld, mm);\n+            ret fld.fold_item_native_mod(env_, i.span, ident, mm_, id);\n+        }\n+\n         case (ast.item_ty(?ident, ?ty, ?params, ?id, ?ann)) {\n             let @ast.ty ty_ = fold_ty[ENV](env_, fld, ty);\n             ret fld.fold_item_ty(env_, i.span, ident, ty_, params, id, ann);\n@@ -810,7 +820,6 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n     fail;\n }\n \n-\n fn fold_mod[ENV](&ENV e, ast_fold[ENV] fld, &ast._mod m) -> ast._mod {\n \n     let vec[@view_item] view_items = vec();\n@@ -830,7 +839,12 @@ fn fold_mod[ENV](&ENV e, ast_fold[ENV] fld, &ast._mod m) -> ast._mod {\n     }\n \n     ret fld.fold_mod(e, rec(view_items=view_items, items=items, index=index));\n- }\n+}\n+\n+fn fold_native_mod[ENV](&ENV e, ast_fold[ENV] fld,\n+                        &ast.native_mod m) -> ast.native_mod {\n+    ret fld.fold_native_mod(e, rec(native_name = m.native_name));\n+}\n \n fn fold_crate[ENV](&ENV env, ast_fold[ENV] fld, @ast.crate c) -> @ast.crate {\n     let ENV env_ = fld.update_env_for_crate(env, c);\n@@ -1105,6 +1119,11 @@ fn identity_fold_item_mod[ENV](&ENV e, &span sp, ident i,\n     ret @respan(sp, ast.item_mod(i, m, id));\n }\n \n+fn identity_fold_item_native_mod[ENV](&ENV e, &span sp, ident i,\n+                                      &ast.native_mod m, def_id id) -> @item {\n+    ret @respan(sp, ast.item_native_mod(i, m, id));\n+}\n+\n fn identity_fold_item_ty[ENV](&ENV e, &span sp, ident i,\n                               @ty t, vec[ast.ty_param] ty_params,\n                               def_id id, ann a) -> @item {\n@@ -1159,6 +1178,11 @@ fn identity_fold_mod[ENV](&ENV e, &ast._mod m) -> ast._mod {\n     ret m;\n }\n \n+fn identity_fold_native_mod[ENV](&ENV e,\n+                                 &ast.native_mod m) -> ast.native_mod {\n+    ret m;\n+}\n+\n fn identity_fold_crate[ENV](&ENV e, &span sp, &ast._mod m) -> @ast.crate {\n     ret @respan(sp, rec(module=m));\n }\n@@ -1281,6 +1305,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_const= bind identity_fold_item_const[ENV](_,_,_,_,_,_,_),\n          fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n+         fold_item_native_mod =\n+             bind identity_fold_item_native_mod[ENV](_,_,_,_,_),\n          fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_,_),\n          fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_,_),\n          fold_item_obj  = bind identity_fold_item_obj[ENV](_,_,_,_,_,_,_),\n@@ -1293,6 +1319,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_block = bind identity_fold_block[ENV](_,_,_),\n          fold_fn = bind identity_fold_fn[ENV](_,_,_,_,_,_),\n          fold_mod = bind identity_fold_mod[ENV](_,_),\n+         fold_native_mod = bind identity_fold_native_mod[ENV](_,_),\n          fold_crate = bind identity_fold_crate[ENV](_,_,_),\n          fold_obj = bind identity_fold_obj[ENV](_,_,_),\n "}, {"sha": "43d35b37041747597b30f8b20542d19779b0fc3f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "patch": "@@ -376,6 +376,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             }\n \n             case (ast.item_mod(_, _, _)) { fail; }\n+            case (ast.item_native_mod(_, _, _)) { fail; }\n         }\n     }\n \n@@ -455,6 +456,9 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             case (ast.item_mod(_, _, _)) {\n                 // ignore item_mod, it has no type.\n             }\n+            case (ast.item_native_mod(_, _, _)) {\n+                // ignore item_native_mod, it has no type.\n+            }\n             case (_) {\n                 // This call populates the ty_table with the converted type of\n                 // the item in passing; we don't need to do anything else."}, {"sha": "abb6335249a063d812870d16242a1467f9c1185d", "filename": "src/test/run-pass/native2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Ftest%2Frun-pass%2Fnative2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1/src%2Ftest%2Frun-pass%2Fnative2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative2.rs?ref=4b06dc574ba7d3ae50795cbe4f10d4be6e9c64a1", "patch": "@@ -0,0 +1,5 @@\n+native \"rust\" mod rustrt {\n+}\n+\n+fn main(vec[str] args) {\n+}"}]}