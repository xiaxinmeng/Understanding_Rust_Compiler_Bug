{"sha": "f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3N2ViZDRmZmFlYTdmYzVhZjQ5NDI1Y2FmZWZlMTQxZTc0NThjYzM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-25T16:46:35Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-26T00:03:44Z"}, "message": "Add unstable option to only emit shared/crate-specific files\n\nThe intended use case is for docs.rs, which can now copy exactly the\nfiles it cares about, rather than having to guess based on whether they\nhave a resource suffix or not. In particular, some files have a resource\nsuffix but cannot be shared between crates: https://github.com/rust-lang/docs.rs/pull/1312#issuecomment-798783688\n\nThe end goal is to fix https://github.com/rust-lang/docs.rs/issues/1327\nby reverting https://github.com/rust-lang/docs.rs/pull/1324.\n\nThis obsoletes `--print=unversioned-files`, which I plan to remove as\nsoon as docs.rs stops using it.", "tree": {"sha": "53c07eb79f74b270df4a919dd6c65aaa1ccfba8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c07eb79f74b270df4a919dd6c65aaa1ccfba8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "html_url": "https://github.com/rust-lang/rust/commit/f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278", "html_url": "https://github.com/rust-lang/rust/commit/7c89cc4a6f68a9c544ff1b000c8f7ef1c3535278"}], "stats": {"total": 141, "additions": 129, "deletions": 12}, "files": [{"sha": "a7a2db6210005040ba3ce2f05472d2df873dbaa6", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "patch": "@@ -3,6 +3,7 @@ use std::convert::TryFrom;\n use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n+use std::str::FromStr;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n@@ -266,6 +267,34 @@ crate struct RenderOptions {\n     /// If `true`, generate a JSON file in the crate folder instead of HTML redirection files.\n     crate generate_redirect_map: bool,\n     crate unstable_features: rustc_feature::UnstableFeatures,\n+    crate emit: Vec<EmitType>,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+crate enum EmitType {\n+    Unversioned,\n+    Toolchain,\n+    CrateSpecific,\n+}\n+\n+impl FromStr for EmitType {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        use EmitType::*;\n+        match s {\n+            \"unversioned-shared-resources\" => Ok(Unversioned),\n+            \"toolchain-shared-resources\" => Ok(Toolchain),\n+            \"crate-specific\" => Ok(CrateSpecific),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl RenderOptions {\n+    crate fn should_emit_crate(&self) -> bool {\n+        self.emit.is_empty() || self.emit.contains(&EmitType::CrateSpecific)\n+    }\n }\n \n impl Options {\n@@ -334,6 +363,19 @@ impl Options {\n         // check for deprecated options\n         check_deprecated_options(&matches, &diag);\n \n+        let mut emit = Vec::new();\n+        for list in matches.opt_strs(\"emit\") {\n+            for kind in list.split(',') {\n+                match kind.parse() {\n+                    Ok(kind) => emit.push(kind),\n+                    Err(()) => {\n+                        diag.err(&format!(\"unrecognized emission type: {}\", kind));\n+                        return Err(1);\n+                    }\n+                }\n+            }\n+        }\n+\n         let to_check = matches.opt_strs(\"check-theme\");\n         if !to_check.is_empty() {\n             let paths = theme::load_css_paths(static_files::themes::LIGHT.as_bytes());\n@@ -641,6 +683,7 @@ impl Options {\n                 unstable_features: rustc_feature::UnstableFeatures::from_environment(\n                     crate_name.as_deref(),\n                 ),\n+                emit,\n             },\n             crate_name,\n             output_format,"}, {"sha": "f0b390add73d5368d70a09c8d075bde4896abf53", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "patch": "@@ -58,10 +58,15 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n ) -> Result<(), Error> {\n     let prof = &tcx.sess.prof;\n \n+    let emit_crate = options.should_emit_crate();\n     let (mut format_renderer, krate) = prof\n         .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n         .run(|| T::init(krate, options, edition, cache, tcx))?;\n \n+    if !emit_crate {\n+        return Ok(());\n+    }\n+\n     // Render the crate documentation\n     let crate_name = krate.name;\n     let mut work = vec![(format_renderer.make_child_renderer(), krate.module)];"}, {"sha": "17cedeb5a511abdf7cd4f1a0f23f47ee1858be37", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "patch": "@@ -288,6 +288,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     ) -> Result<(Self, clean::Crate), Error> {\n         // need to save a copy of the options for rendering the index page\n         let md_opts = options.clone();\n+        let emit_crate = options.should_emit_crate();\n         let RenderOptions {\n             output,\n             external_html,\n@@ -393,7 +394,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n         let dst = output;\n         scx.ensure_dir(&dst)?;\n-        krate = sources::render(&dst, &mut scx, krate)?;\n+        if emit_crate {\n+            krate = sources::render(&dst, &mut scx, krate)?;\n+        }\n \n         // Build our search index\n         let index = build_index(&krate, &mut cache, tcx);"}, {"sha": "af346bb82256e3fcdf8330d4b22e3ec953b44c00", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "patch": "@@ -13,7 +13,7 @@ use serde::Serialize;\n \n use super::{collect_paths_for_type, ensure_trailing_slash, Context, BASIC_KEYWORDS};\n use crate::clean::Crate;\n-use crate::config::RenderOptions;\n+use crate::config::{EmitType, RenderOptions};\n use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::FormatRenderer;\n@@ -72,6 +72,18 @@ impl SharedResource<'_> {\n             SharedResource::CrateSpecific { basename } => cx.suffix_path(basename),\n         }\n     }\n+\n+    fn should_emit(&self, emit: &[EmitType]) -> bool {\n+        if emit.is_empty() {\n+            return true;\n+        }\n+        let kind = match self {\n+            SharedResource::Unversioned { .. } => EmitType::Unversioned,\n+            SharedResource::ToolchainSpecific { .. } => EmitType::Toolchain,\n+            SharedResource::CrateSpecific { .. } => EmitType::CrateSpecific,\n+        };\n+        emit.contains(&kind)\n+    }\n }\n \n impl Context<'_> {\n@@ -86,16 +98,25 @@ impl Context<'_> {\n         self.dst.join(&filename)\n     }\n \n-    fn write_shared<C: AsRef<[u8]>>(&self, resource: SharedResource<'_>, contents: C) -> Result<(), Error>\n-    {\n-        self.shared.fs.write(resource.path(self), contents)\n+    fn write_shared<C: AsRef<[u8]>>(\n+        &self,\n+        resource: SharedResource<'_>,\n+        contents: C,\n+        emit: &[EmitType],\n+    ) -> Result<(), Error> {\n+        if resource.should_emit(emit) {\n+            self.shared.fs.write(resource.path(self), contents)\n+        } else {\n+            Ok(())\n+        }\n     }\n \n     fn write_minify(\n         &self,\n         resource: SharedResource<'_>,\n         contents: &str,\n         minify: bool,\n+        emit: &[EmitType],\n     ) -> Result<(), Error> {\n         let tmp;\n         let contents = if minify {\n@@ -111,7 +132,7 @@ impl Context<'_> {\n             contents.as_bytes()\n         };\n \n-        self.write_shared(resource, contents)\n+        self.write_shared(resource, contents, emit)\n     }\n }\n \n@@ -133,10 +154,14 @@ pub(super) fn write_shared(\n             SharedResource::ToolchainSpecific { basename: p },\n             c,\n             options.enable_minification,\n+            &options.emit,\n         )\n     };\n-    let write_toolchain =\n-        |p: &_, c: &_| cx.write_shared(SharedResource::ToolchainSpecific { basename: p }, c);\n+    let write_toolchain = |p: &_, c: &_| {\n+        cx.write_shared(SharedResource::ToolchainSpecific { basename: p }, c, &options.emit)\n+    };\n+    let write_crate =\n+        |p, c: &_| cx.write_shared(SharedResource::CrateSpecific { basename: p }, c, &options.emit);\n \n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n@@ -214,7 +239,7 @@ pub(super) fn write_shared(\n     }\n     write_minify(\"normalize.css\", static_files::NORMALIZE_CSS)?;\n     for (name, contents) in &*FILES_UNVERSIONED {\n-        cx.write_shared(SharedResource::Unversioned { name }, contents)?;\n+        cx.write_shared(SharedResource::Unversioned { name }, contents, &options.emit)?;\n     }\n \n     fn collect(path: &Path, krate: &str, key: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n@@ -354,7 +379,7 @@ pub(super) fn write_shared(\n             \"var N = null;var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n             all_sources.join(\"\\n\")\n         );\n-        cx.write_shared(SharedResource::CrateSpecific { basename: \"source-files.js\" }, v)?;\n+        write_crate(\"source-files.js\", &v)?;\n     }\n \n     // Update the search index and crate list.\n@@ -371,12 +396,12 @@ pub(super) fn write_shared(\n         let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n         v.push_str(&all_indexes.join(\",\\\\\\n\"));\n         v.push_str(\"\\\\\\n}');\\ninitSearch(searchIndex);\");\n-        cx.write_shared(SharedResource::CrateSpecific { basename: \"search-index.js\" }, v)?;\n+        write_crate(\"search-index.js\", &v)?;\n     }\n \n     let crate_list =\n         format!(\"window.ALL_CRATES = [{}];\", krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\"));\n-    cx.write_shared(SharedResource::CrateSpecific { basename: \"crates.js\" }, crate_list)?;\n+    write_crate(\"crates.js\", &crate_list)?;\n \n     if options.enable_index_page {\n         if let Some(index_page) = options.index_page.clone() {"}, {"sha": "ebdd56611db71a2375877ab2134f7a9aed9a20ba", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "patch": "@@ -527,6 +527,14 @@ fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"print\", |o| {\n             o.optmulti(\"\", \"print\", \"Rustdoc information to print on stdout\", \"[unversioned-files]\")\n         }),\n+        unstable(\"emit\", |o| {\n+            o.optmulti(\n+                \"\",\n+                \"emit\",\n+                \"Comma separated list of types of output for rustdoc to emit\",\n+                \"[unversioned-shared-resources,toolchain-shared-resources,crate-specific]\",\n+            )\n+        }),\n     ]\n }\n "}, {"sha": "06358f6eb2c98bf60a0d46ae9c363765951ba700", "filename": "src/test/run-make/emit-shared-files/Makefile", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile?ref=f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "patch": "@@ -0,0 +1,32 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+CRATE_ONLY = $(TMPDIR)/crate-only\n+TOOLCHAIN_ONLY = $(TMPDIR)/toolchain-only\n+ALL_SHARED = $(TMPDIR)/all-shared\n+\n+all: crate-only toolchain-only all-shared\n+\n+crate-only:\n+\t$(RUSTDOC) -Z unstable-options --emit=crate-specific --output $(CRATE_ONLY) --resource-suffix=-xxx x.rs\n+\t[ -e $(CRATE_ONLY)/search-index-xxx.js ]\n+\t[ -e $(CRATE_ONLY)/settings.html ]\n+\t[ -e $(CRATE_ONLY)/x/all.html ]\n+\t[ -e $(CRATE_ONLY)/x/index.html ]\n+\t! [ -e $(CRATE_ONLY)/storage-xxx.js ]\n+\t! [ -e $(CRATE_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\n+toolchain-only:\n+\t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources --output $(TOOLCHAIN_ONLY) --resource-suffix=-xxx x.rs\n+\t[ -e $(TOOLCHAIN_ONLY)/storage-xxx.js ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/search-index-xxx.js ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/x/index.html ]\n+\n+all-shared:\n+\t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources,unversioned-shared-resources --output $(ALL_SHARED) --resource-suffix=-xxx x.rs\n+\t[ -e $(ALL_SHARED)/storage-xxx.js ]\n+\t[ -e $(ALL_SHARED)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(ALL_SHARED)/search-index-xxx.js ]\n+\t! [ -e $(ALL_SHARED)/settings.html ]\n+\t! [ -e $(ALL_SHARED)/x ]\n+\t! [ -e $(ALL_SHARED)/src ]"}, {"sha": "5df7576133a684ab8f887f442084e99062eb4886", "filename": "src/test/run-make/emit-shared-files/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Ftest%2Frun-make%2Femit-shared-files%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77ebd4ffaea7fc5af49425cafefe141e7458cc3/src%2Ftest%2Frun-make%2Femit-shared-files%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2Fx.rs?ref=f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "patch": "@@ -0,0 +1 @@\n+// nothing to see here"}]}