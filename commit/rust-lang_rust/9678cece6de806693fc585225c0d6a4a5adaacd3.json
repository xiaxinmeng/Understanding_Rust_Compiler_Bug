{"sha": "9678cece6de806693fc585225c0d6a4a5adaacd3", "node_id": "C_kwDOAAsO6NoAKDk2NzhjZWNlNmRlODA2NjkzZmM1ODUyMjVjMGQ2YTRhNWFkYWFjZDM", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-06-22T14:42:49Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-06-22T14:42:49Z"}, "message": "std: rewrite SGX thread parker", "tree": {"sha": "571dbf3f871464dae323e72e4531ae3b79d43a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/571dbf3f871464dae323e72e4531ae3b79d43a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9678cece6de806693fc585225c0d6a4a5adaacd3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmKzKmkACgkQcE4BSbAZ\nSzwdFBAAigiHCOFoSO83blZgC0odRG8VXVHV8PWmItMxhGG3/ukR7YtYp+lrcuPm\neGOZrZhZ+Cw4jC3yMXPS6G2LM+JKXaNPhYtIUh239AV/lEuzJoq3bEk0AH/BKnCN\ngeXrfq6SPyZl246CSc2uUoWkYnAGbnLhRCouZKNAOq30qRgAoYVnk15zpOvYy7aE\nvfod9/RFgFLwn38wk04EPWw72gfaNYRFtNQCAuJM0/GPF427XFZtCEpWGRh8k7yp\nD83vFCSsVVui40fcxzoGC/eJe+/HVHOIuVrFJhrYi/xlGpN+1rBVxOGlmr58iWPv\n0DgzUHEbsCdFHinVuUdErWGq5t7CIl3/J7zUPFzHdo0CDU8svMAwzWEd2qORJ7D8\nKiEQRhCtFWRkTE+pCdspBQFzzqjsK0THSrYShOR6fuzcKk7cChlk0QFX3WN6z4Nd\ncwoiLYAbkhKTeZVcNOzpNosU/GLiO+sy3SWelCDeSQ3OpcZTD4s1vvuvkT51nCFo\nRoGhyr1EuYJXGHA739Z9M9Yo8Ty9oZPM0TuZQJgebPg9SMhZIl/3IVlYVDnqxeeu\nDF8QQAhUYEQDuYeyZjbJeoVpNywj42Eq2zvXEEHiZi4YTGtJ3gBCRvboNRpQ3ift\nJnHd1LjvHbR2qZZBKBGPyhKuKFv4JlRW+Cl2uqCGQwzD7Kj+vys=\n=iJeA\n-----END PGP SIGNATURE-----", "payload": "tree 571dbf3f871464dae323e72e4531ae3b79d43a86\nparent abace0a1f17986d89aedf610819deab2b4afee56\nauthor joboet <jonasboettiger@icloud.com> 1655908969 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1655908969 +0200\n\nstd: rewrite SGX thread parker\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9678cece6de806693fc585225c0d6a4a5adaacd3", "html_url": "https://github.com/rust-lang/rust/commit/9678cece6de806693fc585225c0d6a4a5adaacd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9678cece6de806693fc585225c0d6a4a5adaacd3/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abace0a1f17986d89aedf610819deab2b4afee56", "url": "https://api.github.com/repos/rust-lang/rust/commits/abace0a1f17986d89aedf610819deab2b4afee56", "html_url": "https://github.com/rust-lang/rust/commit/abace0a1f17986d89aedf610819deab2b4afee56"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "65c1d0afe460877a7b388af8e8d87efa106af41a", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9678cece6de806693fc585225c0d6a4a5adaacd3/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9678cece6de806693fc585225c0d6a4a5adaacd3/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=9678cece6de806693fc585225c0d6a4a5adaacd3", "patch": "@@ -33,6 +33,7 @@ pub mod process;\n pub mod stdio;\n pub mod thread;\n pub mod thread_local_key;\n+pub mod thread_parker;\n pub mod time;\n \n mod condvar;"}, {"sha": "f768abddd44dcbfc66aad3e2d3ffce1993235008", "filename": "library/std/src/sys/sgx/thread_parker.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/9678cece6de806693fc585225c0d6a4a5adaacd3/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9678cece6de806693fc585225c0d6a4a5adaacd3/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread_parker.rs?ref=9678cece6de806693fc585225c0d6a4a5adaacd3", "patch": "@@ -0,0 +1,93 @@\n+//! Thread parking based on SGX events.\n+\n+use super::abi::{thread, usercalls};\n+use crate::io::ErrorKind;\n+use crate::pin::Pin;\n+use crate::ptr::{self, NonNull};\n+use crate::sync::atomic::AtomicPtr;\n+use crate::sync::atomic::Ordering::{Acquire, Relaxed, Release};\n+use crate::time::Duration;\n+use fortanix_sgx_abi::{EV_UNPARK, WAIT_INDEFINITE};\n+\n+const EMPTY: *mut u8 = ptr::invalid_mut(0);\n+/// The TCS structure must be page-aligned, so this cannot be a valid pointer\n+const NOTIFIED: *mut u8 = ptr::invalid_mut(1);\n+\n+pub struct Parker {\n+    state: AtomicPtr<u8>,\n+}\n+\n+impl Parker {\n+    /// Construct the thread parker. The UNIX parker implementation\n+    /// requires this to happen in-place.\n+    pub unsafe fn new(parker: *mut Parker) {\n+        unsafe { parker.write(Parker::new_internal()) }\n+    }\n+\n+    pub(super) fn new_internal() -> Parker {\n+        Parker { state: AtomicPtr::new(EMPTY) }\n+    }\n+\n+    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n+    pub unsafe fn park(self: Pin<&Self>) {\n+        let tcs = thread::current().as_ptr();\n+\n+        if self.state.load(Acquire) != NOTIFIED {\n+            if self.state.compare_exchange(EMPTY, tcs, Acquire, Acquire).is_ok() {\n+                // Loop to guard against spurious wakeups.\n+                loop {\n+                    let event = usercalls::wait(EV_UNPARK, WAIT_INDEFINITE).unwrap();\n+                    assert!(event & EV_UNPARK == EV_UNPARK);\n+                    if self.state.load(Acquire) == NOTIFIED {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        // At this point, the token was definately read with acquire ordering,\n+        // so this can be a store.\n+        self.state.store(EMPTY, Relaxed);\n+    }\n+\n+    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n+    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {\n+        let timeout = u128::min(dur.as_nanos(), WAIT_INDEFINITE as u128 - 1) as u64;\n+        let tcs = thread::current().as_ptr();\n+\n+        if self.state.load(Acquire) != NOTIFIED {\n+            if self.state.compare_exchange(EMPTY, tcs, Acquire, Acquire).is_ok() {\n+                match usercalls::wait(EV_UNPARK, timeout) {\n+                    Ok(event) => assert!(event & EV_UNPARK == EV_UNPARK),\n+                    Err(e) => {\n+                        assert!(matches!(e.kind(), ErrorKind::TimedOut | ErrorKind::WouldBlock))\n+                    }\n+                }\n+\n+                // Swap to provide acquire ordering even if the timeout occurred\n+                // before the token was set. This situation can result in spurious\n+                // wakeups on the next call to `park_timeout`, but it is better to let\n+                // those be handled by the user than do some perhaps unnecessary, but\n+                // always expensive guarding.\n+                self.state.swap(EMPTY, Acquire);\n+                return;\n+            }\n+        }\n+\n+        // The token was already read with `acquire` ordering, this can be a store.\n+        self.state.store(EMPTY, Relaxed);\n+    }\n+\n+    // This implementation doesn't require `Pin`, but other implementations do.\n+    pub fn unpark(self: Pin<&Self>) {\n+        let state = self.state.swap(NOTIFIED, Release);\n+\n+        if !matches!(state, EMPTY | NOTIFIED) {\n+            // There is a thread waiting, wake it up.\n+            let tcs = NonNull::new(state).unwrap();\n+            // This will fail if the thread has already terminated by the time the signal is send,\n+            // but that is OK.\n+            let _ = usercalls::send(EV_UNPARK, Some(tcs));\n+        }\n+    }\n+}"}, {"sha": "505f26a4001aef007be1a941a660114e77ea4469", "filename": "library/std/src/sys_common/thread_parker/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9678cece6de806693fc585225c0d6a4a5adaacd3/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9678cece6de806693fc585225c0d6a4a5adaacd3/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fmod.rs?ref=9678cece6de806693fc585225c0d6a4a5adaacd3", "patch": "@@ -13,6 +13,8 @@ cfg_if::cfg_if! {\n         pub use crate::sys::thread_parker::Parker;\n     } else if #[cfg(target_family = \"unix\")] {\n         pub use crate::sys::thread_parker::Parker;\n+    } else if #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))] {\n+        pub use crate::sys::thread_parker::Parker;\n     } else {\n         mod generic;\n         pub use generic::Parker;"}]}