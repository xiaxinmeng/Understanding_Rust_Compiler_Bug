{"sha": "0635cb75b59fd99c59ee49fc4036e557de1f349f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MzVjYjc1YjU5ZmQ5OWM1OWVlNDlmYzQwMzZlNTU3ZGUxZjM0OWY=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-09-15T12:06:30Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-09-16T15:45:24Z"}, "message": "Corrected a few small style issues\nSplit up test function a bit", "tree": {"sha": "992c77d49b8aaec42dd4a04dd9342c09de856098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992c77d49b8aaec42dd4a04dd9342c09de856098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0635cb75b59fd99c59ee49fc4036e557de1f349f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0635cb75b59fd99c59ee49fc4036e557de1f349f", "html_url": "https://github.com/rust-lang/rust/commit/0635cb75b59fd99c59ee49fc4036e557de1f349f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0635cb75b59fd99c59ee49fc4036e557de1f349f/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c3e8a38cea2fe6342d83158c267e57a6b1f53f", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c3e8a38cea2fe6342d83158c267e57a6b1f53f", "html_url": "https://github.com/rust-lang/rust/commit/76c3e8a38cea2fe6342d83158c267e57a6b1f53f"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "d674b4980dd13e071fdc34e681c53c0242265fda", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0635cb75b59fd99c59ee49fc4036e557de1f349f/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0635cb75b59fd99c59ee49fc4036e557de1f349f/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=0635cb75b59fd99c59ee49fc4036e557de1f349f", "patch": "@@ -12,7 +12,7 @@\n \n use clone::{Clone, DeepClone};\n use cmp::{Eq, TotalEq, Ord, TotalOrd, Equiv};\n-use cmp::{Ordering, Less};\n+use cmp::Ordering;\n use container::Container;\n use default::Default;\n use str::{Str, StrSlice};\n@@ -64,9 +64,8 @@ impl IntoSendStr for &'static str {\n }\n \n /*\n-Section: string trait impls\n-\n-`SendStr `should behave like a normal string, so we don't derive.\n+Section: String trait impls.\n+`SendStr` should behave like a normal string, so we don't derive.\n */\n \n impl ToStr for SendStr {\n@@ -90,7 +89,9 @@ impl TotalEq for SendStr {\n \n impl Ord for SendStr {\n     #[inline]\n-    fn lt(&self, other: &SendStr) -> bool { self.cmp(other) == Less }\n+    fn lt(&self, other: &SendStr) -> bool {\n+        self.as_slice().lt(&other.as_slice())\n+    }\n }\n \n impl TotalOrd for SendStr {\n@@ -179,20 +180,14 @@ mod tests {\n     use to_str::ToStr;\n \n     #[test]\n-    fn test_send_str() {\n+    fn test_send_str_traits() {\n         let s = SendStrStatic(\"abcde\");\n         assert_eq!(s.len(), 5);\n         assert_eq!(s.as_slice(), \"abcde\");\n         assert_eq!(s.to_str(), ~\"abcde\");\n         assert!(s.equiv(&@\"abcde\"));\n         assert!(s.lt(&SendStrOwned(~\"bcdef\")));\n         assert_eq!(SendStrStatic(\"\"), Default::default());\n-        assert!(s.is_static());\n-        assert!(!s.is_owned());\n-\n-        assert_eq!(s.clone(), s.clone());\n-        assert_eq!(s.clone().into_owned(), ~\"abcde\");\n-        assert_eq!(s.clone().deep_clone(), s.clone());\n \n         let o = SendStrOwned(~\"abcde\");\n         assert_eq!(o.len(), 5);\n@@ -201,20 +196,50 @@ mod tests {\n         assert!(o.equiv(&@\"abcde\"));\n         assert!(o.lt(&SendStrStatic(\"bcdef\")));\n         assert_eq!(SendStrOwned(~\"\"), Default::default());\n-        assert!(!o.is_static());\n-        assert!(o.is_owned());\n-\n-        assert_eq!(o.clone(), o.clone());\n-        assert_eq!(o.clone().into_owned(), ~\"abcde\");\n-        assert_eq!(o.clone().deep_clone(), o.clone());\n \n         assert_eq!(s.cmp(&o), Equal);\n         assert!(s.equals(&o));\n         assert!(s.equiv(&o));\n+\n         assert_eq!(o.cmp(&s), Equal);\n         assert!(o.equals(&s));\n         assert!(o.equiv(&s));\n+    }\n+\n+    #[test]\n+    fn test_send_str_methods() {\n+        let s = SendStrStatic(\"abcde\");\n+        assert!(s.is_static());\n+        assert!(!s.is_owned());\n \n+        let o = SendStrOwned(~\"abcde\");\n+        assert!(!o.is_static());\n+        assert!(o.is_owned());\n+    }\n+\n+    #[test]\n+    fn test_send_str_clone() {\n+        assert_eq!(SendStrOwned(~\"abcde\"), SendStrStatic(\"abcde\").clone());\n+        assert_eq!(SendStrOwned(~\"abcde\"), SendStrStatic(\"abcde\").deep_clone());\n+\n+        assert_eq!(SendStrOwned(~\"abcde\"), SendStrOwned(~\"abcde\").clone());\n+        assert_eq!(SendStrOwned(~\"abcde\"), SendStrOwned(~\"abcde\").deep_clone());\n+\n+        assert_eq!(SendStrStatic(\"abcde\"), SendStrStatic(\"abcde\").clone());\n+        assert_eq!(SendStrStatic(\"abcde\"), SendStrStatic(\"abcde\").deep_clone());\n+\n+        assert_eq!(SendStrStatic(\"abcde\"), SendStrOwned(~\"abcde\").clone());\n+        assert_eq!(SendStrStatic(\"abcde\"), SendStrOwned(~\"abcde\").deep_clone());\n+    }\n+\n+    #[test]\n+    fn test_send_str_into_owned() {\n+        assert_eq!(SendStrStatic(\"abcde\").into_owned(), ~\"abcde\");\n+        assert_eq!(SendStrOwned(~\"abcde\").into_owned(), ~\"abcde\");\n+    }\n+\n+    #[test]\n+    fn test_into_send_str() {\n         assert_eq!(\"abcde\".into_send_str(), SendStrStatic(\"abcde\"));\n         assert_eq!((~\"abcde\").into_send_str(), SendStrStatic(\"abcde\"));\n         assert_eq!(\"abcde\".into_send_str(), SendStrOwned(~\"abcde\"));"}, {"sha": "7094dca7c4dc64c89a7ae577c8c32641eb9d3d33", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0635cb75b59fd99c59ee49fc4036e557de1f349f/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0635cb75b59fd99c59ee49fc4036e557de1f349f/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=0635cb75b59fd99c59ee49fc4036e557de1f349f", "patch": "@@ -18,7 +18,7 @@ use std::default::Default;\n use std::send_str::{SendStr, SendStrOwned, SendStrStatic};\n use std::str::Str;\n use std::to_str::ToStr;\n-use extra::treemap::TreeMap;\n+use self::extra::treemap::TreeMap;\n use std::option::Some;\n \n fn main() {"}]}