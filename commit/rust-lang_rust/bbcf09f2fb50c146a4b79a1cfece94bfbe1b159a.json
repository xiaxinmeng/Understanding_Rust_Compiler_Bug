{"sha": "bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a", "node_id": "C_kwDOAAsO6NoAKGJiY2YwOWYyZmI1MGMxNDZhNGI3OWExY2ZlY2U5NGJmYmUxYjE1OWE", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:34:35Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:34:35Z"}, "message": "Move Option::unwrap_or_default", "tree": {"sha": "1bef1e626f0dbb81c4f4c9ea04097d9ca982a4ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bef1e626f0dbb81c4f4c9ea04097d9ca982a4ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN+7sACgkQ+boUO5X/\nbYKHrRAAsO1EAVvbysXpuAgy5cCBdslugaxRkdUyzBBFrQOd5i2kubpNPQ+jel0E\n5uVY/g7OTLOHCbdtA/Nisk/aBbfNWCb3kcT7tsRbluCZjpTOvAZ1zl8vQCjNYARr\nJKsNgJVVnE5uE+myt2bHF/n4bh6zzPiV1nNYZZ4t8bGpNIdWPsAwDY/pnqr/VmT2\ntHS4jM3tBszRNr/zF7OoPZFDaZlamNhkn9Vx4kXM0HNmdrPUU6NQcjZuytb9NTZW\ndviPw7vi5Ogf23IaLbqn2FN0Eb9VUqPmbpGFikYekUjtTEi7UlI7LWkKT03oXgQI\nzSFWCCSeraEeLaz2AQyg8OJuhQzKkutFBuVsAz76PCZ3UKg469GfJ6FAf0ooVUca\nIbNdnHlbCiEmTMFBAZlnpftjmyBtxoWshG/Z6MJRXW8A/Gf8DDlRyzRmZly/ncjJ\ntGZnyztJTqPwgsQq+ZMqqebwoXF8R2D9bqjhyVy+7pj3gH25giLcVSwgmsFNWl0n\nV99X7cgRQI3A1QJv9cycNEkgp94eslFgb+qD+M7scGPMdzpB0XwYxXe6dTfHwafD\nUys5RtFQW/5kQSO6lCnYS/FgjQRkmeDmeYAfIDKMlW3H5VHDkdIRpfy27tLRCCt+\nWJVKXhQOhsaz1RFt3soEYdxpkl3xzTahKBMFxm4qTG1cMvaZAGw=\n=a5aW\n-----END PGP SIGNATURE-----", "payload": "tree 1bef1e626f0dbb81c4f4c9ea04097d9ca982a4ae\nparent b7a0ab18f6b506b73cda720553a5710e7170fc7c\nauthor David Tolnay <dtolnay@gmail.com> 1640889275 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640889275 -0800\n\nMove Option::unwrap_or_default\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a", "html_url": "https://github.com/rust-lang/rust/commit/bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7a0ab18f6b506b73cda720553a5710e7170fc7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a0ab18f6b506b73cda720553a5710e7170fc7c", "html_url": "https://github.com/rust-lang/rust/commit/b7a0ab18f6b506b73cda720553a5710e7170fc7c"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "d457d502c25d6458ebdff86d6dd5671994a161da", "filename": "library/core/src/option.rs", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a", "patch": "@@ -810,6 +810,45 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns the contained [`Some`] value or a default.\n+    ///\n+    /// Consumes the `self` argument then, if [`Some`], returns the contained\n+    /// value, otherwise if [`None`], returns the [default value] for that\n+    /// type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Converts a string to an integer, turning poorly-formed strings\n+    /// into 0 (the default value for integers). [`parse`] converts\n+    /// a string to any other type that implements [`FromStr`], returning\n+    /// [`None`] on error.\n+    ///\n+    /// ```\n+    /// let good_year_from_input = \"1909\";\n+    /// let bad_year_from_input = \"190blarg\";\n+    /// let good_year = good_year_from_input.parse().ok().unwrap_or_default();\n+    /// let bad_year = bad_year_from_input.parse().ok().unwrap_or_default();\n+    ///\n+    /// assert_eq!(1909, good_year);\n+    /// assert_eq!(0, bad_year);\n+    /// ```\n+    ///\n+    /// [default value]: Default::default\n+    /// [`parse`]: str::parse\n+    /// [`FromStr`]: crate::str::FromStr\n+    #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn unwrap_or_default(self) -> T\n+    where\n+        T: ~const Default,\n+    {\n+        match self {\n+            Some(x) => x,\n+            None => Default::default(),\n+        }\n+    }\n+\n     /// Returns the contained [`Some`] value, consuming the `self` value,\n     /// without checking that the value is not [`None`].\n     ///\n@@ -1685,47 +1724,6 @@ impl<T: Clone> Option<&mut T> {\n     }\n }\n \n-impl<T: Default> Option<T> {\n-    /// Returns the contained [`Some`] value or a default.\n-    ///\n-    /// Consumes the `self` argument then, if [`Some`], returns the contained\n-    /// value, otherwise if [`None`], returns the [default value] for that\n-    /// type.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Converts a string to an integer, turning poorly-formed strings\n-    /// into 0 (the default value for integers). [`parse`] converts\n-    /// a string to any other type that implements [`FromStr`], returning\n-    /// [`None`] on error.\n-    ///\n-    /// ```\n-    /// let good_year_from_input = \"1909\";\n-    /// let bad_year_from_input = \"190blarg\";\n-    /// let good_year = good_year_from_input.parse().ok().unwrap_or_default();\n-    /// let bad_year = bad_year_from_input.parse().ok().unwrap_or_default();\n-    ///\n-    /// assert_eq!(1909, good_year);\n-    /// assert_eq!(0, bad_year);\n-    /// ```\n-    ///\n-    /// [default value]: Default::default\n-    /// [`parse`]: str::parse\n-    /// [`FromStr`]: crate::str::FromStr\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn unwrap_or_default(self) -> T\n-    where\n-        T: ~const Default,\n-    {\n-        match self {\n-            Some(x) => x,\n-            None => Default::default(),\n-        }\n-    }\n-}\n-\n impl<T: Deref> Option<T> {\n     /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.\n     ///"}]}