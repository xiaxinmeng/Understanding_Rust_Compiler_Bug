{"sha": "f6072cab136beea206b7cfe79f8d10fccf5af591", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MDcyY2FiMTM2YmVlYTIwNmI3Y2ZlNzlmOGQxMGZjY2Y1YWY1OTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T13:39:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-31T13:39:05Z"}, "message": "Auto merge of #72813 - RalfJung:rollup-4ko6q8j, r=RalfJung\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72683 (from_u32_unchecked: check validity, and fix UB in Wtf8)\n - #72715 (Account for trailing comma when suggesting `where` clauses)\n - #72745 (generalize Borrow<[T]> for Interned<'tcx, List<T>>)\n - #72749 (Update stdarch submodule to latest head)\n - #72781 (Use `LocalDefId` instead of `NodeId` in `resolve_str_path_error`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "11b0ec9ab29833da453b04c7c2ee9e72a3f52a88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b0ec9ab29833da453b04c7c2ee9e72a3f52a88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6072cab136beea206b7cfe79f8d10fccf5af591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6072cab136beea206b7cfe79f8d10fccf5af591", "html_url": "https://github.com/rust-lang/rust/commit/f6072cab136beea206b7cfe79f8d10fccf5af591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6072cab136beea206b7cfe79f8d10fccf5af591/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1f86adbe41e8dd4864ca2315f43953dd503bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1f86adbe41e8dd4864ca2315f43953dd503bb5", "html_url": "https://github.com/rust-lang/rust/commit/4b1f86adbe41e8dd4864ca2315f43953dd503bb5"}, {"sha": "cbc73dc2637343f3a0ebba92efc5942e37cc4763", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc73dc2637343f3a0ebba92efc5942e37cc4763", "html_url": "https://github.com/rust-lang/rust/commit/cbc73dc2637343f3a0ebba92efc5942e37cc4763"}], "stats": {"total": 282, "additions": 137, "deletions": 145}, "files": [{"sha": "87c56c4b0a1059b50bf5cf22577536196500e4b5", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -99,7 +99,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n #[inline]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n-    transmute(i)\n+    if cfg!(debug_assertions) { char::from_u32(i).unwrap() } else { transmute(i) }\n }\n \n #[stable(feature = \"char_convert\", since = \"1.13.0\")]\n@@ -218,7 +218,7 @@ impl TryFrom<u32> for char {\n             Err(CharTryFromError(()))\n         } else {\n             // SAFETY: checked that it's a legal unicode value\n-            Ok(unsafe { from_u32_unchecked(i) })\n+            Ok(unsafe { transmute(i) })\n         }\n     }\n }"}, {"sha": "bf09b28ff693e1430aea78d31360c825b25901c4", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 101, "deletions": 62, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -593,16 +593,7 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn len_utf8(self) -> usize {\n-        let code = self as u32;\n-        if code < MAX_ONE_B {\n-            1\n-        } else if code < MAX_TWO_B {\n-            2\n-        } else if code < MAX_THREE_B {\n-            3\n-        } else {\n-            4\n-        }\n+        len_utf8(self as u32)\n     }\n \n     /// Returns the number of 16-bit code units this `char` would need if\n@@ -670,36 +661,8 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n-        let code = self as u32;\n-        let len = self.len_utf8();\n-        match (len, &mut dst[..]) {\n-            (1, [a, ..]) => {\n-                *a = code as u8;\n-            }\n-            (2, [a, b, ..]) => {\n-                *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n-                *b = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            (3, [a, b, c, ..]) => {\n-                *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n-                *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *c = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            (4, [a, b, c, d, ..]) => {\n-                *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n-                *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n-                *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *d = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            _ => panic!(\n-                \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n-                len,\n-                code,\n-                dst.len(),\n-            ),\n-        };\n-        // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n-        unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n+        // SAFETY: `char` is not a surrogate, so this is valid UTF-8.\n+        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }\n     }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n@@ -739,28 +702,7 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16] {\n-        let mut code = self as u32;\n-        // SAFETY: each arm checks whether there are enough bits to write into\n-        unsafe {\n-            if (code & 0xFFFF) == code && !dst.is_empty() {\n-                // The BMP falls through (assuming non-surrogate, as it should)\n-                *dst.get_unchecked_mut(0) = code as u16;\n-                slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n-            } else if dst.len() >= 2 {\n-                // Supplementary planes break into surrogates.\n-                code -= 0x1_0000;\n-                *dst.get_unchecked_mut(0) = 0xD800 | ((code >> 10) as u16);\n-                *dst.get_unchecked_mut(1) = 0xDC00 | ((code as u16) & 0x3FF);\n-                slice::from_raw_parts_mut(dst.as_mut_ptr(), 2)\n-            } else {\n-                panic!(\n-                    \"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n-                    from_u32_unchecked(code).len_utf16(),\n-                    code,\n-                    dst.len(),\n-                )\n-            }\n-        }\n+        encode_utf16_raw(self as u32, dst)\n     }\n \n     /// Returns `true` if this `char` has the `Alphabetic` property.\n@@ -1673,3 +1615,100 @@ impl char {\n         }\n     }\n }\n+\n+#[inline]\n+fn len_utf8(code: u32) -> usize {\n+    if code < MAX_ONE_B {\n+        1\n+    } else if code < MAX_TWO_B {\n+        2\n+    } else if code < MAX_THREE_B {\n+        3\n+    } else {\n+        4\n+    }\n+}\n+\n+/// Encodes a raw u32 value as UTF-8 into the provided byte buffer,\n+/// and then returns the subslice of the buffer that contains the encoded character.\n+///\n+/// Unlike `char::encode_utf8`, this method also handles codepoints in the surrogate range.\n+/// (Creating a `char` in the surrogate range is UB.)\n+/// The result is valid [generalized UTF-8] but not valid UTF-8.\n+///\n+/// [generalized UTF-8]: https://simonsapin.github.io/wtf-8/#generalized-utf8\n+///\n+/// # Panics\n+///\n+/// Panics if the buffer is not large enough.\n+/// A buffer of length four is large enough to encode any `char`.\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+#[doc(hidden)]\n+#[inline]\n+pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {\n+    let len = len_utf8(code);\n+    match (len, &mut dst[..]) {\n+        (1, [a, ..]) => {\n+            *a = code as u8;\n+        }\n+        (2, [a, b, ..]) => {\n+            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n+            *b = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        (3, [a, b, c, ..]) => {\n+            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n+            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+            *c = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        (4, [a, b, c, d, ..]) => {\n+            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n+            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n+            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+            *d = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        _ => panic!(\n+            \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n+            len,\n+            code,\n+            dst.len(),\n+        ),\n+    };\n+    &mut dst[..len]\n+}\n+\n+/// Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,\n+/// and then returns the subslice of the buffer that contains the encoded character.\n+///\n+/// Unlike `char::encode_utf16`, this method also handles codepoints in the surrogate range.\n+/// (Creating a `char` in the surrogate range is UB.)\n+///\n+/// # Panics\n+///\n+/// Panics if the buffer is not large enough.\n+/// A buffer of length 2 is large enough to encode any `char`.\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+#[doc(hidden)]\n+#[inline]\n+pub fn encode_utf16_raw(mut code: u32, dst: &mut [u16]) -> &mut [u16] {\n+    // SAFETY: each arm checks whether there are enough bits to write into\n+    unsafe {\n+        if (code & 0xFFFF) == code && !dst.is_empty() {\n+            // The BMP falls through\n+            *dst.get_unchecked_mut(0) = code as u16;\n+            slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n+        } else if dst.len() >= 2 {\n+            // Supplementary planes break into surrogates.\n+            code -= 0x1_0000;\n+            *dst.get_unchecked_mut(0) = 0xD800 | ((code >> 10) as u16);\n+            *dst.get_unchecked_mut(1) = 0xDC00 | ((code as u16) & 0x3FF);\n+            slice::from_raw_parts_mut(dst.as_mut_ptr(), 2)\n+        } else {\n+            panic!(\n+                \"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n+                from_u32_unchecked(code).len_utf16(),\n+                code,\n+                dst.len(),\n+            )\n+        }\n+    }\n+}"}, {"sha": "1b4e906e4e47523615759379f91b63c7636db132", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -37,6 +37,12 @@ pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};\n #[stable(feature = \"unicode_version\", since = \"1.45.0\")]\n pub use crate::unicode::UNICODE_VERSION;\n \n+// perma-unstable re-exports\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+pub use self::methods::encode_utf16_raw;\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+pub use self::methods::encode_utf8_raw;\n+\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n "}, {"sha": "1e305c6d32d6ad2a0fd5310890c0f5208707120f", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -524,6 +524,13 @@ impl WhereClause<'_> {\n     pub fn span_for_predicates_or_empty_place(&self) -> Span {\n         self.span\n     }\n+\n+    /// `Span` where further predicates would be suggested, accounting for trailing commas, like\n+    ///  in `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n+    pub fn tail_span_for_suggestion(&self) -> Span {\n+        let end = self.span_for_predicates_or_empty_place().shrink_to_hi();\n+        self.predicates.last().map(|p| p.span()).unwrap_or(end).shrink_to_hi().to(end)\n+    }\n }\n \n /// A single predicate in a where-clause."}, {"sha": "089a1613e7d3bc23b729915fd46b6d94d25bb5d7", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -1971,32 +1971,8 @@ impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {\n     }\n }\n \n-impl<'tcx> Borrow<[Ty<'tcx>]> for Interned<'tcx, List<Ty<'tcx>>> {\n-    fn borrow<'a>(&'a self) -> &'a [Ty<'tcx>] {\n-        &self.0[..]\n-    }\n-}\n-\n-impl<'tcx> Borrow<[CanonicalVarInfo]> for Interned<'tcx, List<CanonicalVarInfo>> {\n-    fn borrow(&self) -> &[CanonicalVarInfo] {\n-        &self.0[..]\n-    }\n-}\n-\n-impl<'tcx> Borrow<[GenericArg<'tcx>]> for Interned<'tcx, InternalSubsts<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a [GenericArg<'tcx>] {\n-        &self.0[..]\n-    }\n-}\n-\n-impl<'tcx> Borrow<[ProjectionKind]> for Interned<'tcx, List<ProjectionKind>> {\n-    fn borrow(&self) -> &[ProjectionKind] {\n-        &self.0[..]\n-    }\n-}\n-\n-impl<'tcx> Borrow<[PlaceElem<'tcx>]> for Interned<'tcx, List<PlaceElem<'tcx>>> {\n-    fn borrow(&self) -> &[PlaceElem<'tcx>] {\n+impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {\n+    fn borrow<'a>(&'a self) -> &'a [T] {\n         &self.0[..]\n     }\n }\n@@ -2007,34 +1983,12 @@ impl<'tcx> Borrow<RegionKind> for Interned<'tcx, RegionKind> {\n     }\n }\n \n-impl<'tcx> Borrow<[ExistentialPredicate<'tcx>]>\n-    for Interned<'tcx, List<ExistentialPredicate<'tcx>>>\n-{\n-    fn borrow<'a>(&'a self) -> &'a [ExistentialPredicate<'tcx>] {\n-        &self.0[..]\n-    }\n-}\n-\n-impl<'tcx> Borrow<[Predicate<'tcx>]> for Interned<'tcx, List<Predicate<'tcx>>> {\n-    fn borrow<'a>(&'a self) -> &'a [Predicate<'tcx>] {\n-        &self.0[..]\n-    }\n-}\n-\n impl<'tcx> Borrow<Const<'tcx>> for Interned<'tcx, Const<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a Const<'tcx> {\n         &self.0\n     }\n }\n \n-impl<'tcx> Borrow<[traits::ChalkEnvironmentClause<'tcx>]>\n-    for Interned<'tcx, List<traits::ChalkEnvironmentClause<'tcx>>>\n-{\n-    fn borrow<'a>(&'a self) -> &'a [traits::ChalkEnvironmentClause<'tcx>] {\n-        &self.0[..]\n-    }\n-}\n-\n impl<'tcx> Borrow<PredicateKind<'tcx>> for Interned<'tcx, PredicateKind<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a PredicateKind<'tcx> {\n         &self.0"}, {"sha": "2e9aa724ac5af744fde06c944550ff3f760777fb", "filename": "src/librustc_middle/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -7,7 +7,6 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n-use rustc_span::{BytePos, Span};\n \n impl<'tcx> TyS<'tcx> {\n     /// Similar to `TyS::is_primitive`, but also considers inferred numeric values to be primitive.\n@@ -221,24 +220,11 @@ pub fn suggest_constraining_type_param(\n             }\n         }\n \n-        let where_clause_span = generics.where_clause.span_for_predicates_or_empty_place();\n-        // Account for `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n-        let mut trailing_comma = false;\n-        if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(where_clause_span) {\n-            trailing_comma = snippet.ends_with(',');\n-        }\n-        let where_clause_span = if trailing_comma {\n-            let hi = where_clause_span.hi();\n-            Span::new(hi - BytePos(1), hi, where_clause_span.ctxt())\n-        } else {\n-            where_clause_span.shrink_to_hi()\n-        };\n-\n         match &param_spans[..] {\n             &[&param_span] => suggest_restrict(param_span.shrink_to_hi()),\n             _ => {\n                 err.span_suggestion_verbose(\n-                    where_clause_span,\n+                    generics.where_clause.tail_span_for_suggestion(),\n                     &msg_restrict_type_further,\n                     format!(\", {}: {}\", param_name, constraint),\n                     Applicability::MachineApplicable,"}, {"sha": "e5fc23e14d2ab729c423824fa97e0ab7b736fd05", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -2902,7 +2902,7 @@ impl<'a> Resolver<'a> {\n         span: Span,\n         path_str: &str,\n         ns: Namespace,\n-        module_id: NodeId,\n+        module_id: LocalDefId,\n     ) -> Result<(ast::Path, Res), ()> {\n         let path = if path_str.starts_with(\"::\") {\n             ast::Path {\n@@ -2922,10 +2922,7 @@ impl<'a> Resolver<'a> {\n                     .collect(),\n             }\n         };\n-        let module = self.block_map.get(&module_id).copied().unwrap_or_else(|| {\n-            let def_id = self.definitions.local_def_id(module_id);\n-            self.module_map.get(&def_id).copied().unwrap_or(self.graph_root)\n-        });\n+        let module = self.module_map.get(&module_id).copied().unwrap_or(self.graph_root);\n         let parent_scope = &ParentScope::module(module);\n         let res = self.resolve_ast_path(&path, ns, parent_scope).map_err(|_| ())?;\n         Ok((path, res))"}, {"sha": "cfbea9ee0f19607a7c430ed41938aaa44ce141f7", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -170,7 +170,7 @@ pub trait InferCtxtExt<'tcx> {\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n     (\n-        generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi(),\n+        generics.where_clause.tail_span_for_suggestion(),\n         format!(\n             \"{} {}\",\n             if !generics.where_clause.predicates.is_empty() { \",\" } else { \" where\" },"}, {"sha": "06293a987124e7301a945cca26efaf4e088d2813", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -1,4 +1,3 @@\n-use rustc_ast::ast::CRATE_NODE_ID;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n@@ -7,7 +6,7 @@ use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::Namespace::TypeNS;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::HirId;\n use rustc_interface::interface;\n use rustc_middle::middle::cstore::CrateStore;\n@@ -390,7 +389,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 resolver.borrow_mut().access(|resolver| {\n                     for extern_name in &extern_names {\n                         resolver\n-                            .resolve_str_path_error(DUMMY_SP, extern_name, TypeNS, CRATE_NODE_ID)\n+                            .resolve_str_path_error(\n+                                DUMMY_SP,\n+                                extern_name,\n+                                TypeNS,\n+                                LocalDefId { local_def_index: CRATE_DEF_INDEX },\n+                            )\n                             .unwrap_or_else(|()| {\n                                 panic!(\"Unable to resolve external crate {}\", extern_name)\n                             });"}, {"sha": "149480ec80f2960a81073c1e16ffe8c72c4aad42", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::def::{\n     Namespace::{self, *},\n     PerNS, Res,\n };\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n@@ -61,7 +61,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         &self,\n         path_str: &str,\n         current_item: &Option<String>,\n-        module_id: rustc_ast::ast::NodeId,\n+        module_id: LocalDefId,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n@@ -137,7 +137,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n         // In case we're in a module, try to resolve the relative path.\n         if let Some(module_id) = parent_id.or(self.mod_ids.last().cloned()) {\n-            let module_id = cx.tcx.hir().hir_id_to_node_id(module_id);\n+            let module_id = cx.tcx.hir().local_def_id(module_id);\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n             });"}, {"sha": "d6493454db591a2ad8cc15b398f628c39ec318ca", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -247,6 +247,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n+#![feature(char_internals)]\n #![feature(clamp)]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]"}, {"sha": "bdb6a05464ed472b20b5b637963030271fe1bac1", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -201,9 +201,8 @@ impl Wtf8Buf {\n     /// Copied from String::push\n     /// This does **not** include the WTF-8 concatenation check.\n     fn push_code_point_unchecked(&mut self, code_point: CodePoint) {\n-        let c = unsafe { char::from_u32_unchecked(code_point.value) };\n         let mut bytes = [0; 4];\n-        let bytes = c.encode_utf8(&mut bytes).as_bytes();\n+        let bytes = char::encode_utf8_raw(code_point.value, &mut bytes);\n         self.bytes.extend_from_slice(bytes)\n     }\n \n@@ -840,8 +839,7 @@ impl<'a> Iterator for EncodeWide<'a> {\n \n         let mut buf = [0; 2];\n         self.code_points.next().map(|code_point| {\n-            let c = unsafe { char::from_u32_unchecked(code_point.value) };\n-            let n = c.encode_utf16(&mut buf).len();\n+            let n = char::encode_utf16_raw(code_point.value, &mut buf).len();\n             if n == 2 {\n                 self.extra = buf[1];\n             }"}, {"sha": "45340c0e2fdadf2f131ef43cb683b5cafab0ff15", "filename": "src/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdarch?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -1 +1 @@\n-Subproject commit ec6fccd34c30003a7ebf4e7a9dfe4e31f5b76e1b\n+Subproject commit 45340c0e2fdadf2f131ef43cb683b5cafab0ff15"}, {"sha": "562dec9f080de55e89350c49b20ab13e27bb2443", "filename": "src/test/ui/bound-suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Ftest%2Fui%2Fbound-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6072cab136beea206b7cfe79f8d10fccf5af591/src%2Ftest%2Fui%2Fbound-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.rs?ref=f6072cab136beea206b7cfe79f8d10fccf5af591", "patch": "@@ -19,7 +19,7 @@ fn test_one_bound<T: Sized>(t: T) {\n }\n \n #[allow(dead_code)]\n-fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug {\n+fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, {\n     println!(\"{:?} {:?}\", x, y);\n     //~^ ERROR doesn't implement\n }"}]}