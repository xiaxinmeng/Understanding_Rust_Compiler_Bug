{"sha": "b0c4b8ba1860a99f744538aabae4404935fc7555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYzRiOGJhMTg2MGE5OWY3NDQ1MzhhYWJhZTQ0MDQ5MzVmYzc1NTU=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-06-26T21:39:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:56Z"}, "message": "std: fix errors from recent rebase and vec expr/type syntax update", "tree": {"sha": "3ea14bf49359e4fd851cdcc9b747c0ee555944d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ea14bf49359e4fd851cdcc9b747c0ee555944d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c4b8ba1860a99f744538aabae4404935fc7555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c4b8ba1860a99f744538aabae4404935fc7555", "html_url": "https://github.com/rust-lang/rust/commit/b0c4b8ba1860a99f744538aabae4404935fc7555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c4b8ba1860a99f744538aabae4404935fc7555/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9edcb104ff2bbedd389ec519aea1de9c88c2beb1", "html_url": "https://github.com/rust-lang/rust/commit/9edcb104ff2bbedd389ec519aea1de9c88c2beb1"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "3efca378bc88543e67efe603ca638ae403046577", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b8ba1860a99f744538aabae4404935fc7555/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b8ba1860a99f744538aabae4404935fc7555/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=b0c4b8ba1860a99f744538aabae4404935fc7555", "patch": "@@ -73,7 +73,7 @@ fn format_addr(ip: ip_addr) -> str {\n }\n \n type get_addr_data = {\n-    output_ch: comm::chan<result::result<[ip_addr],ip_get_addr_err>>\n+    output_ch: comm::chan<result::result<[ip_addr]/~,ip_get_addr_err>>\n };\n \n crust fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n@@ -83,7 +83,7 @@ crust fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n         *get_addr_data;\n     if status == 0i32 {\n         if res != (ptr::null::<addrinfo>()) {\n-            let mut out_vec = [];\n+            let mut out_vec = []/~;\n             log(debug, #fmt(\"initial addrinfo: %?\", res));\n             let mut curr_addr = res;\n             loop {\n@@ -102,7 +102,7 @@ crust fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n                         result::err(get_addr_unknown_error));\n                     break;\n                 };\n-                out_vec += [new_ip_addr];\n+                out_vec += [new_ip_addr]/~;\n \n                 let next_addr = ll::get_next_addrinfo(curr_addr);\n                 if next_addr == ptr::null::<addrinfo>() as *addrinfo {\n@@ -144,7 +144,7 @@ enum ip_get_addr_err {\n #[doc=\"\n \"]\n fn get_addr(++node: str, iotask: iotask)\n-        -> result::result<[ip_addr], ip_get_addr_err> unsafe {\n+        -> result::result<[ip_addr]/~, ip_get_addr_err> unsafe {\n     comm::listen {|output_ch|\n         str::unpack_slice(node) {|node_ptr, len|\n             log(debug, #fmt(\"slice len %?\", len));"}, {"sha": "c0aa3394e770387cfa585e72235633a5c2984df6", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b8ba1860a99f744538aabae4404935fc7555/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b8ba1860a99f744538aabae4404935fc7555/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=b0c4b8ba1860a99f744538aabae4404935fc7555", "patch": "@@ -45,7 +45,7 @@ class tcp_socket {\n   new(socket_data: @tcp_socket_data) { self.socket_data = socket_data; }\n   drop {\n     unsafe {\n-        tear_down_socket_data(socket_data)\n+        tear_down_socket_data(self.socket_data)\n     }\n   }\n }\n@@ -56,8 +56,9 @@ A buffered wrapper for `net::tcp::tcp_socket`\n It is created with a call to `net::tcp::socket_buf()` and has impls that\n satisfy both the `io::reader` and `io::writer` ifaces.\n \"]\n-resource tcp_socket_buf(data: @tcp_buffered_socket_data) {\n-    log(debug, #fmt(\"dtor for tcp_socket_buf.. %?\", data));\n+class tcp_socket_buf {\n+  let data: @tcp_buffered_socket_data;\n+  new(data: @tcp_buffered_socket_data) { self.data = data; }\n }\n \n #[doc=\"\n@@ -305,7 +306,7 @@ fn write_future(sock: tcp_socket, raw_write_data: [u8]/~)\n     let socket_data_ptr = ptr::addr_of(*(sock.socket_data));\n     future_spawn {||\n         let data_copy = copy(raw_write_data);\n-        write_common_impl(socket_data_ptr, data_copy);\n+        write_common_impl(socket_data_ptr, data_copy)\n     }\n }\n \n@@ -337,10 +338,10 @@ Stop reading from an open TCP connection; used with `read_start`\n * `sock` - a `net::tcp::tcp_socket` that you wish to stop reading on\n \"]\n fn read_stop(sock: tcp_socket,\n-             -read_port: comm::port<result::result<[u8], tcp_err_data>>) ->\n+             -read_port: comm::port<result::result<[u8]/~, tcp_err_data>>) ->\n     result::result<(), tcp_err_data> unsafe {\n     log(debug, #fmt(\"taking the read_port out of commission %?\", read_port));\n-    let socket_data = ptr::addr_of(**sock);\n+    let socket_data = ptr::addr_of(*sock.socket_data);\n     read_stop_common_impl(socket_data)\n }\n \n@@ -735,7 +736,7 @@ or `io::writer`\n A buffered wrapper that you can cast as an `io::reader` or `io::writer`\n \"]\n fn socket_buf(-sock: tcp_socket) -> tcp_socket_buf {\n-    tcp_socket_buf(@{ sock: sock, mut buf: [] })\n+    tcp_socket_buf(@{ sock: sock, mut buf: []/~ })\n }\n \n #[doc=\"\n@@ -747,7 +748,7 @@ impl tcp_socket for tcp_socket {\n         read_start(self)\n     }\n     fn read_stop(-read_port:\n-                 comm::port<result::result<[u8], tcp_err_data>>) ->\n+                 comm::port<result::result<[u8]/~, tcp_err_data>>) ->\n         result::result<(), tcp_err_data> {\n         read_stop(self, read_port)\n     }\n@@ -773,28 +774,28 @@ impl tcp_socket for tcp_socket {\n Implementation of `io::reader` iface for a buffered `net::tcp::tcp_socket`\n \"]\n impl tcp_socket_buf of io::reader for @tcp_socket_buf {\n-    fn read_bytes(amt: uint) -> [u8] {\n+    fn read_bytes(amt: uint) -> [u8]/~ {\n         let has_amt_available =\n-            vec::len((*self).buf) >= amt;\n+            vec::len((*(self.data)).buf) >= amt;\n         if has_amt_available {\n             // no arbitrary-length shift in vec::?\n-            let mut ret_buf = [];\n+            let mut ret_buf = []/~;\n             while vec::len(ret_buf) < amt {\n-                ret_buf += [vec::shift((*self).buf)];\n+                ret_buf += [vec::shift((*(self.data)).buf)]/~;\n             }\n             ret_buf\n         }\n         else {\n-            let read_result = read((*self).sock, 0u);\n+            let read_result = read((*(self.data)).sock, 0u);\n             if read_result.is_err() {\n                 let err_data = read_result.get_err();\n                 log(debug, #fmt(\"ERROR sock_buf as io::reader.read err %? %?\",\n                                  err_data.err_name, err_data.err_msg));\n-                []\n+                []/~\n             }\n             else {\n                 let new_chunk = result::unwrap(read_result);\n-                (*self).buf += new_chunk;\n+                (*(self.data)).buf += new_chunk;\n                 self.read_bytes(amt)\n             }\n         }\n@@ -803,7 +804,7 @@ impl tcp_socket_buf of io::reader for @tcp_socket_buf {\n         self.read_bytes(1u)[0] as int\n     }\n     fn unread_byte(amt: int) {\n-        vec::unshift((*self).buf, amt as u8);\n+        vec::unshift((*(self.data)).buf, amt as u8);\n     }\n     fn eof() -> bool {\n         false // noop\n@@ -822,12 +823,9 @@ Implementation of `io::reader` iface for a buffered `net::tcp::tcp_socket`\n \"]\n impl tcp_socket_buf of io::writer for @tcp_socket_buf {\n     fn write(data: [const u8]/&) unsafe {\n-        let socket_data_ptr = ptr::addr_of(**((*self).sock));\n-        let write_buf_vec = vec::unpack_const_slice(data) {|ptr, len|\n-            [ uv::ll::buf_init(ptr as *u8, len) ]\n-        };\n-        let write_buf_vec_ptr = ptr::addr_of(write_buf_vec);\n-        let w_result = write_common_impl(socket_data_ptr, write_buf_vec_ptr);\n+        let socket_data_ptr = ptr::addr_of(*((*(self.data)).sock).socket_data);\n+        let w_result = write_common_impl(socket_data_ptr,\n+                                        vec::slice(data, 0, vec::len(data)));\n         if w_result.is_err() {\n             let err_data = w_result.get_err();\n             log(debug, #fmt(\"ERROR sock_buf as io::writer.writer err: %? %?\",\n@@ -1233,7 +1231,7 @@ type tcp_socket_data = {\n \n type tcp_buffered_socket_data = {\n     sock: tcp_socket,\n-    mut buf: [u8]\n+    mut buf: [u8]/~\n };\n \n //#[cfg(test)]"}, {"sha": "5f75523e2b64c7ffceda5c5a1d25b72388b757d9", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0c4b8ba1860a99f744538aabae4404935fc7555/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c4b8ba1860a99f744538aabae4404935fc7555/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=b0c4b8ba1860a99f744538aabae4404935fc7555", "patch": "@@ -765,7 +765,7 @@ unsafe fn ip4_addr(ip: str, port: int)\n unsafe fn ip6_addr(ip: str, port: int)\n -> sockaddr_in6 {\n     let mut addr_vec = str::bytes(ip);\n-    addr_vec += [0u8]; // add null terminator\n+    addr_vec += [0u8]/~; // add null terminator\n     let addr_vec_ptr = vec::unsafe::to_ptr(addr_vec);\n     let ip_back = str::from_bytes(addr_vec);\n     log(debug, #fmt(\"vec val: '%s' length: %u\",\n@@ -775,8 +775,8 @@ unsafe fn ip6_addr(ip: str, port: int)\n }\n unsafe fn ip4_name(src: &sockaddr_in) -> str {\n     // ipv4 addr max size: 15 + 1 trailing null byte\n-    let dst: [u8] = [0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n-                     0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8];\n+    let dst: [u8]/~ = [0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n+                     0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8]/~;\n     let size = 16 as libc::size_t;\n     vec::as_buf(dst) {|dst_buf|\n         rustrt::rust_uv_ip4_name(src as *sockaddr_in,\n@@ -792,12 +792,12 @@ unsafe fn ip4_name(src: &sockaddr_in) -> str {\n }\n unsafe fn ip6_name(src: &sockaddr_in6) -> str {\n     // ipv6 addr max size: 45 + 1 trailing null byte\n-    let dst: [u8] = [0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n-                     0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n-                     0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n-                     0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n-                     0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n-                     0u8,0u8,0u8,0u8,0u8,0u8];\n+    let dst: [u8]/~ = [0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n+                       0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n+                       0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n+                       0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n+                       0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n+                       0u8,0u8,0u8,0u8,0u8,0u8]/~;\n     let size = 46 as libc::size_t;\n     vec::as_buf(dst) {|dst_buf|\n         let result = rustrt::rust_uv_ip6_name(src as *sockaddr_in6,"}]}