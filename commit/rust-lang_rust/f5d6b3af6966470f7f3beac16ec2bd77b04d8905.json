{"sha": "f5d6b3af6966470f7f3beac16ec2bd77b04d8905", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZDZiM2FmNjk2NjQ3MGY3ZjNiZWFjMTZlYzJiZDc3YjA0ZDg5MDU=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-03-21T08:15:52Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-03-25T10:44:06Z"}, "message": "Moves test::black_box to core::hint\n\nThis changes removes a cyclic dependency between the \"test\" and \"libtest\"\ncrates, where \"libtest\" depends on \"test\" for \"black_box\", but \"test\" depends on\n\"libtest\" for everything else.\n\nI've chosen the \"hint\" module because there seems to be enough consensus in the\ndiscussion of RFC2360 that this module is where such an intrinsic would belong,\nbut this PR does not implement that RFC! (note: if that RFC ever gets merged,\nthe API, docs, etc. of this API will need to change).\n\nFor backwards compatibility reasons I've chosen to also keep the \"test\" feature\ngate for these instead of adding a new feature gate. If we change the feature\ngate, we'll potentially all benchmarks, and while that's something that we could\ndo, it seems unnecessary to do that now - if RFC2360 gets merged, we'll need to\ndo that anyways.", "tree": {"sha": "e7a50a041fbe0cb83458095ace43a78289f28944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7a50a041fbe0cb83458095ace43a78289f28944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5d6b3af6966470f7f3beac16ec2bd77b04d8905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d6b3af6966470f7f3beac16ec2bd77b04d8905", "html_url": "https://github.com/rust-lang/rust/commit/f5d6b3af6966470f7f3beac16ec2bd77b04d8905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5d6b3af6966470f7f3beac16ec2bd77b04d8905/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60eca54a7ce931c590801048f54ac0b2d2cd5067", "url": "https://api.github.com/repos/rust-lang/rust/commits/60eca54a7ce931c590801048f54ac0b2d2cd5067", "html_url": "https://github.com/rust-lang/rust/commit/60eca54a7ce931c590801048f54ac0b2d2cd5067"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "d6ddab0d8f5fb71ba46bfc520c25139c16c21509", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f5d6b3af6966470f7f3beac16ec2bd77b04d8905/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d6b3af6966470f7f3beac16ec2bd77b04d8905/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=f5d6b3af6966470f7f3beac16ec2bd77b04d8905", "patch": "@@ -91,3 +91,22 @@ pub fn spin_loop() {\n         }\n     }\n }\n+\n+/// A function that is opaque to the optimizer, to allow benchmarks to\n+/// pretend to use outputs to assist in avoiding dead-code\n+/// elimination.\n+///\n+/// This function is a no-op, and does not even read from `dummy`.\n+#[cfg_attr(any(target_arch = \"asmjs\", target_arch = \"wasm32\"), inline(never))]\n+#[unstable(feature = \"test\", issue = \"27812\")]\n+pub fn black_box<T>(dummy: T) -> T {\n+    #[cfg(not(any(target_arch = \"asmjs\", target_arch = \"wasm32\")))] {\n+        // we need to \"use\" the argument in some way LLVM can't\n+        // introspect.\n+        unsafe { asm!(\"\" : : \"r\"(&dummy)) }\n+        dummy\n+    }\n+    #[cfg(any(target_arch = \"asmjs\", target_arch = \"wasm32\"))] {\n+        dummy\n+    }\n+}"}, {"sha": "5c91c0ec43b19f812483c65e90aef7108e24f0c0", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5d6b3af6966470f7f3beac16ec2bd77b04d8905/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d6b3af6966470f7f3beac16ec2bd77b04d8905/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f5d6b3af6966470f7f3beac16ec2bd77b04d8905", "patch": "@@ -27,23 +27,7 @@ pub use libtest::{\n     TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk, stats::Summary\n };\n \n-/// A function that is opaque to the optimizer, to allow benchmarks to\n-/// pretend to use outputs to assist in avoiding dead-code\n-/// elimination.\n-///\n-/// This function is a no-op, and does not even read from `dummy`.\n-#[cfg(not(any(target_arch = \"asmjs\", target_arch = \"wasm32\")))]\n-pub fn black_box<T>(dummy: T) -> T {\n-    // we need to \"use\" the argument in some way LLVM can't\n-    // introspect.\n-    unsafe { asm!(\"\" : : \"r\"(&dummy)) }\n-    dummy\n-}\n-#[cfg(any(target_arch = \"asmjs\", target_arch = \"wasm32\"))]\n-#[inline(never)]\n-pub fn black_box<T>(dummy: T) -> T {\n-    dummy\n-}\n+pub use std::hint::black_box;\n \n #[cfg(test)]\n mod tests {"}]}