{"sha": "e5ebece910f8bfcc2361bddd847a7ae623debd57", "node_id": "C_kwDOAAsO6NoAKGU1ZWJlY2U5MTBmOGJmY2MyMzYxYmRkZDg0N2E3YWU2MjNkZWJkNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-17T18:34:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-17T18:34:16Z"}, "message": "Auto merge of #8665 - InfRandomness:option_take_on_temporary, r=llogiq\n\nIntroduce needless_option_take lint\n\n- \\[x] Followed [lint naming conventions][lint_naming]\n- \\[x] Added passing UI tests (including committed `.stderr` file)\n- \\[x] `cargo test` passes locally\n- \\[x] Executed `cargo dev update_lints`\n- \\[x] Added lint documentation\n- \\[x] Run `cargo dev fmt`\n\nFixes #8618\n\nchangelog: Introduce [`needless_option_take`] lint", "tree": {"sha": "6adff9abfd2d1cd896d2b8678160998d406ebe77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6adff9abfd2d1cd896d2b8678160998d406ebe77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ebece910f8bfcc2361bddd847a7ae623debd57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ebece910f8bfcc2361bddd847a7ae623debd57", "html_url": "https://github.com/rust-lang/rust/commit/e5ebece910f8bfcc2361bddd847a7ae623debd57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ebece910f8bfcc2361bddd847a7ae623debd57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4f9ecdb3d4db785b5d96ef5c61454e079b12c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4f9ecdb3d4db785b5d96ef5c61454e079b12c4", "html_url": "https://github.com/rust-lang/rust/commit/0f4f9ecdb3d4db785b5d96ef5c61454e079b12c4"}, {"sha": "2903b56f177b2b23db62d6bf2d500837d704fb4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2903b56f177b2b23db62d6bf2d500837d704fb4e", "html_url": "https://github.com/rust-lang/rust/commit/2903b56f177b2b23db62d6bf2d500837d704fb4e"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "900a1dbfe43b9a86eb6c5922b179776d9aece761", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -3575,6 +3575,7 @@ Released 2018-09-13\n [`needless_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n [`needless_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_match\n [`needless_option_as_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_as_deref\n+[`needless_option_take`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_take\n [`needless_pass_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\n [`needless_question_mark`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark\n [`needless_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop"}, {"sha": "d091503c4dd8357691f37de7d7b1c75522892196", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -184,6 +184,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::MAP_FLATTEN),\n     LintId::of(methods::MAP_IDENTITY),\n     LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n+    LintId::of(methods::NEEDLESS_OPTION_TAKE),\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::NEW_RET_NO_SELF),\n     LintId::of(methods::OK_EXPECT),"}, {"sha": "2f6ebd445ebd80ad50816b9d2e9ec9293962e0a0", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -45,6 +45,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::MAP_FLATTEN),\n     LintId::of(methods::MAP_IDENTITY),\n     LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n+    LintId::of(methods::NEEDLESS_OPTION_TAKE),\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::OPTION_AS_REF_DEREF),\n     LintId::of(methods::OPTION_FILTER_MAP),"}, {"sha": "a189c27b5103fda4f432f138c204b295976316e2", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -323,6 +323,7 @@ store.register_lints(&[\n     methods::MAP_IDENTITY,\n     methods::MAP_UNWRAP_OR,\n     methods::NEEDLESS_OPTION_AS_DEREF,\n+    methods::NEEDLESS_OPTION_TAKE,\n     methods::NEEDLESS_SPLITN,\n     methods::NEW_RET_NO_SELF,\n     methods::OK_EXPECT,"}, {"sha": "23266739645da071c73dd1bc69ea73d6265a15ae", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -43,6 +43,7 @@ mod map_flatten;\n mod map_identity;\n mod map_unwrap_or;\n mod needless_option_as_deref;\n+mod needless_option_take;\n mod ok_expect;\n mod option_as_ref_deref;\n mod option_map_or_none;\n@@ -2162,6 +2163,26 @@ declare_clippy_lint! {\n     \"use of `char::is_digit(..)` with literal radix of 10 or 16\"\n }\n \n+declare_clippy_lint! {\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x = Some(3);\n+    /// x.as_ref().take();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = Some(3);\n+    /// x.as_ref();\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub NEEDLESS_OPTION_TAKE,\n+    complexity,\n+    \"using `.as_ref().take()` on a temporary value\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2251,6 +2272,7 @@ impl_lint_pass!(Methods => [\n     ERR_EXPECT,\n     NEEDLESS_OPTION_AS_DEREF,\n     IS_DIGIT_ASCII_RADIX,\n+    NEEDLESS_OPTION_TAKE,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2623,6 +2645,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     }\n                 }\n             },\n+            (\"take\", []) => needless_option_take::check(cx, expr, recv),\n             (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n                 implicit_clone::check(cx, name, expr, recv);\n             },"}, {"sha": "829c118d2916386974ab7835e8be9fe72a2bf5c1", "filename": "clippy_lints/src/methods/needless_option_take.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Fmethods%2Fneedless_option_take.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/clippy_lints%2Fsrc%2Fmethods%2Fneedless_option_take.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_option_take.rs?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -0,0 +1,41 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::match_def_path;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::NEEDLESS_OPTION_TAKE;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, recv: &'tcx Expr<'_>) {\n+    // Checks if expression type is equal to sym::Option and if the expr is not a syntactic place\n+    if !recv.is_syntactic_place_expr() && is_expr_option(cx, recv) && has_expr_as_ref_path(cx, recv) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            NEEDLESS_OPTION_TAKE,\n+            expr.span,\n+            \"called `Option::take()` on a temporary value\",\n+            \"try\",\n+            format!(\n+                \"{}\",\n+                snippet_with_applicability(cx, recv.span, \"..\", &mut applicability)\n+            ),\n+            applicability,\n+        );\n+    }\n+}\n+\n+fn is_expr_option(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let expr_type = cx.typeck_results().expr_ty(expr);\n+    is_type_diagnostic_item(cx, expr_type, sym::Option)\n+}\n+\n+fn has_expr_as_ref_path(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(ref_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n+        return match_def_path(cx, ref_id, &[\"core\", \"option\", \"Option\", \"as_ref\"]);\n+    }\n+    false\n+}"}, {"sha": "29691e81666f7797bc99428b961545f9249331d7", "filename": "tests/ui/needless_option_take.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/tests%2Fui%2Fneedless_option_take.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/tests%2Fui%2Fneedless_option_take.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_option_take.fixed?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+fn main() {\n+    println!(\"Testing non erroneous option_take_on_temporary\");\n+    let mut option = Some(1);\n+    let _ = Box::new(move || option.take().unwrap());\n+\n+    println!(\"Testing non erroneous option_take_on_temporary\");\n+    let x = Some(3);\n+    x.as_ref();\n+\n+    println!(\"Testing erroneous option_take_on_temporary\");\n+    let x = Some(3);\n+    x.as_ref();\n+}"}, {"sha": "9f4109eb4635ac15cb91dc720960b906caeabf6e", "filename": "tests/ui/needless_option_take.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/tests%2Fui%2Fneedless_option_take.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/tests%2Fui%2Fneedless_option_take.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_option_take.rs?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+fn main() {\n+    println!(\"Testing non erroneous option_take_on_temporary\");\n+    let mut option = Some(1);\n+    let _ = Box::new(move || option.take().unwrap());\n+\n+    println!(\"Testing non erroneous option_take_on_temporary\");\n+    let x = Some(3);\n+    x.as_ref();\n+\n+    println!(\"Testing erroneous option_take_on_temporary\");\n+    let x = Some(3);\n+    x.as_ref().take();\n+}"}, {"sha": "cb3bf015b369d811634894efd63cb298eb171fd6", "filename": "tests/ui/needless_option_take.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/tests%2Fui%2Fneedless_option_take.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/tests%2Fui%2Fneedless_option_take.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_option_take.stderr?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -0,0 +1,10 @@\n+error: called `Option::take()` on a temporary value\n+  --> $DIR/needless_option_take.rs:14:5\n+   |\n+LL |     x.as_ref().take();\n+   |     ^^^^^^^^^^^^^^^^^ help: try: `x.as_ref()`\n+   |\n+   = note: `-D clippy::needless-option-take` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "29691e81666f7797bc99428b961545f9249331d7", "filename": "tests/ui/option_take_on_temporary.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5ebece910f8bfcc2361bddd847a7ae623debd57/tests%2Fui%2Foption_take_on_temporary.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e5ebece910f8bfcc2361bddd847a7ae623debd57/tests%2Fui%2Foption_take_on_temporary.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_take_on_temporary.fixed?ref=e5ebece910f8bfcc2361bddd847a7ae623debd57", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+fn main() {\n+    println!(\"Testing non erroneous option_take_on_temporary\");\n+    let mut option = Some(1);\n+    let _ = Box::new(move || option.take().unwrap());\n+\n+    println!(\"Testing non erroneous option_take_on_temporary\");\n+    let x = Some(3);\n+    x.as_ref();\n+\n+    println!(\"Testing erroneous option_take_on_temporary\");\n+    let x = Some(3);\n+    x.as_ref();\n+}"}]}