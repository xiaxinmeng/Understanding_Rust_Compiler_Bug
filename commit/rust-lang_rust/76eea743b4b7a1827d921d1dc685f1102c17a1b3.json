{"sha": "76eea743b4b7a1827d921d1dc685f1102c17a1b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZWVhNzQzYjRiN2ExODI3ZDkyMWQxZGM2ODVmMTEwMmMxN2ExYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-08T06:02:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-08T06:02:04Z"}, "message": "Auto merge of #42481 - brson:wingnu, r=alexcrichton\n\nFix setting PATH during linkage on windows-gnu\n\nThis makes the behavior almost exactly the same as before the VS2017 patch, except that on MSVC builds the host bin path is no longer added to PATH. I am not sure that's actually necessary on any platform.\n\nr? @alexcrichton\n\nFixes https://github.com/rust-lang/rust/issues/42422", "tree": {"sha": "8e6334e03ba29eeb29a6496561d581abd74a91be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e6334e03ba29eeb29a6496561d581abd74a91be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76eea743b4b7a1827d921d1dc685f1102c17a1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76eea743b4b7a1827d921d1dc685f1102c17a1b3", "html_url": "https://github.com/rust-lang/rust/commit/76eea743b4b7a1827d921d1dc685f1102c17a1b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76eea743b4b7a1827d921d1dc685f1102c17a1b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1fa8de0fb900026a1a126928940e4eea3b729b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1fa8de0fb900026a1a126928940e4eea3b729b5", "html_url": "https://github.com/rust-lang/rust/commit/e1fa8de0fb900026a1a126928940e4eea3b729b5"}, {"sha": "e8689c7de71f822dca891099a94c9377c36e46b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8689c7de71f822dca891099a94c9377c36e46b2", "html_url": "https://github.com/rust-lang/rust/commit/e8689c7de71f822dca891099a94c9377c36e46b2"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "e57cbb1c910137e8452e7dc4e7043a0094d83eaf", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76eea743b4b7a1827d921d1dc685f1102c17a1b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76eea743b4b7a1827d921d1dc685f1102c17a1b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=76eea743b4b7a1827d921d1dc685f1102c17a1b3", "patch": "@@ -141,17 +141,20 @@ pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap) -> LinkMet\n     return r;\n }\n \n-// The third parameter is for an env vars, used to set up the path for MSVC\n-// to find its DLLs\n+// The third parameter is for env vars, used on windows to set up the\n+// path for MSVC to find its DLLs, and gcc to find its bundled\n+// toolchain\n pub fn get_linker(sess: &Session) -> (String, Command, Vec<(OsString, OsString)>) {\n+    let envs = vec![(\"PATH\".into(), command_path(sess))];\n+\n     if let Some(ref linker) = sess.opts.cg.linker {\n-        (linker.clone(), Command::new(linker), vec![])\n+        (linker.clone(), Command::new(linker), envs)\n     } else if sess.target.target.options.is_like_msvc {\n         let (cmd, envs) = msvc_link_exe_cmd(sess);\n         (\"link.exe\".to_string(), cmd, envs)\n     } else {\n-        (sess.target.target.options.linker.clone(),\n-         Command::new(&sess.target.target.options.linker), vec![])\n+        let linker = &sess.target.target.options.linker;\n+        (linker.clone(), Command::new(&linker), envs)\n     }\n }\n \n@@ -182,15 +185,14 @@ pub fn get_ar_prog(sess: &Session) -> String {\n     })\n }\n \n-fn command_path(sess: &Session, extra: Option<PathBuf>) -> OsString {\n+fn command_path(sess: &Session) -> OsString {\n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n     let mut new_path = sess.host_filesearch(PathKind::All)\n                            .get_tools_search_paths();\n     if let Some(path) = env::var_os(\"PATH\") {\n         new_path.extend(env::split_paths(&path));\n     }\n-    new_path.extend(extra);\n     env::join_paths(new_path).unwrap()\n }\n \n@@ -451,7 +453,7 @@ fn archive_config<'a>(sess: &'a Session,\n         src: input.map(|p| p.to_path_buf()),\n         lib_search_paths: archive_search_paths(sess),\n         ar_prog: get_ar_prog(sess),\n-        command_path: command_path(sess, None),\n+        command_path: command_path(sess),\n     }\n }\n \n@@ -727,7 +729,7 @@ fn link_natively(sess: &Session,\n \n     // The invocations of cc share some flags across platforms\n     let (pname, mut cmd, envs) = get_linker(sess);\n-    // This will set PATH on MSVC\n+    // This will set PATH on windows\n     cmd.envs(envs);\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();"}]}