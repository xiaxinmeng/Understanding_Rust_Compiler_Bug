{"sha": "6deca5f067684ddb120bd8897d0e55baafcdd792", "node_id": "C_kwDOAAsO6NoAKDZkZWNhNWYwNjc2ODRkZGIxMjBiZDg4OTdkMGU1NWJhYWZjZGQ3OTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-24T16:20:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-24T16:20:08Z"}, "message": "Rollup merge of #100220 - scottmcm:fix-by-ref-sized, r=joshtriplett\n\nProperly forward `ByRefSized::fold` to the inner iterator\n\ncc ``@timvermeulen,`` who noticed this mistake in https://github.com/rust-lang/rust/pull/100214#issuecomment-1207317625", "tree": {"sha": "4790fbff583e30fb2770d717f7907b264703fb3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4790fbff583e30fb2770d717f7907b264703fb3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6deca5f067684ddb120bd8897d0e55baafcdd792", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBk+4CRBK7hj4Ov3rIwAA6yMIAHGlNGvBim0fyLx49+1TWRJI\n1XbR0tP8Ybej45luadrwgQQETIkYF0LUh0ainRU523BFGNKNSCF7a/DkJJLwkAtn\nS646niZqizyw8DO5MkuNRTFsV5Li9GkVN9h4qHZqIkE2Ke2r7vnxF3jrxeBeSgKM\nxAEriwmByH4XOFPXLLPQsG/2tjjERQV1eLRz46ECICQBPbEkN3ObmUJuWWGOaAHw\nqpJxgNm9KOXhJrMnfP0aZ6sy4fDk6DM6ozDmmsfVkuTo8abmkV0iLVLe0jG4m6Dn\n+VAww+eP3PgJyGwM9C/IOP1opkBl0VR8yOOA/apYPyS6Z7a7PzpMWxE4Plw1K5I=\n=T1F6\n-----END PGP SIGNATURE-----\n", "payload": "tree 4790fbff583e30fb2770d717f7907b264703fb3f\nparent bc05045a017f94ba6ba3a121a1ddc293f6617693\nparent 7680c8b69051536a9c4ebcf943b394526af1a1be\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661358008 +0200\ncommitter GitHub <noreply@github.com> 1661358008 +0200\n\nRollup merge of #100220 - scottmcm:fix-by-ref-sized, r=joshtriplett\n\nProperly forward `ByRefSized::fold` to the inner iterator\n\ncc ``@timvermeulen,`` who noticed this mistake in https://github.com/rust-lang/rust/pull/100214#issuecomment-1207317625\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6deca5f067684ddb120bd8897d0e55baafcdd792", "html_url": "https://github.com/rust-lang/rust/commit/6deca5f067684ddb120bd8897d0e55baafcdd792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6deca5f067684ddb120bd8897d0e55baafcdd792/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc05045a017f94ba6ba3a121a1ddc293f6617693", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc05045a017f94ba6ba3a121a1ddc293f6617693", "html_url": "https://github.com/rust-lang/rust/commit/bc05045a017f94ba6ba3a121a1ddc293f6617693"}, {"sha": "7680c8b69051536a9c4ebcf943b394526af1a1be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7680c8b69051536a9c4ebcf943b394526af1a1be", "html_url": "https://github.com/rust-lang/rust/commit/7680c8b69051536a9c4ebcf943b394526af1a1be"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "477e7117c3ea125973252685d8bded87ab93686f", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6deca5f067684ddb120bd8897d0e55baafcdd792/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6deca5f067684ddb120bd8897d0e55baafcdd792/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=6deca5f067684ddb120bd8897d0e55baafcdd792", "patch": "@@ -1,4 +1,4 @@\n-use crate::ops::Try;\n+use crate::ops::{NeverShortCircuit, Try};\n \n /// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n ///\n@@ -8,36 +8,40 @@ use crate::ops::Try;\n #[derive(Debug)]\n pub struct ByRefSized<'a, I>(pub &'a mut I);\n \n+// The following implementations use UFCS-style, rather than trusting autoderef,\n+// to avoid accidentally calling the `&mut Iterator` implementations.\n+\n #[unstable(feature = \"std_internals\", issue = \"none\")]\n impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     type Item = I::Item;\n \n     #[inline]\n     fn next(&mut self) -> Option<Self::Item> {\n-        self.0.next()\n+        I::next(self.0)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.0.size_hint()\n+        I::size_hint(self.0)\n     }\n \n     #[inline]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        self.0.advance_by(n)\n+        I::advance_by(self.0, n)\n     }\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n-        self.0.nth(n)\n+        I::nth(self.0, n)\n     }\n \n     #[inline]\n     fn fold<B, F>(self, init: B, f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.0.fold(init, f)\n+        // `fold` needs ownership, so this can't forward directly.\n+        I::try_fold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n \n     #[inline]\n@@ -46,33 +50,34 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n         F: FnMut(B, Self::Item) -> R,\n         R: Try<Output = B>,\n     {\n-        self.0.try_fold(init, f)\n+        I::try_fold(self.0, init, f)\n     }\n }\n \n #[unstable(feature = \"std_internals\", issue = \"none\")]\n impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     #[inline]\n     fn next_back(&mut self) -> Option<Self::Item> {\n-        self.0.next_back()\n+        I::next_back(self.0)\n     }\n \n     #[inline]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        self.0.advance_back_by(n)\n+        I::advance_back_by(self.0, n)\n     }\n \n     #[inline]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n-        self.0.nth_back(n)\n+        I::nth_back(self.0, n)\n     }\n \n     #[inline]\n     fn rfold<B, F>(self, init: B, f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.0.rfold(init, f)\n+        // `rfold` needs ownership, so this can't forward directly.\n+        I::try_rfold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n \n     #[inline]\n@@ -81,6 +86,6 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n         F: FnMut(B, Self::Item) -> R,\n         R: Try<Output = B>,\n     {\n-        self.0.try_rfold(init, f)\n+        I::try_rfold(self.0, init, f)\n     }\n }"}, {"sha": "a9c066f0e8cb157eb9720b975f6d18bc3fe7e866", "filename": "library/core/tests/iter/adapters/by_ref_sized.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6deca5f067684ddb120bd8897d0e55baafcdd792/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6deca5f067684ddb120bd8897d0e55baafcdd792/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=6deca5f067684ddb120bd8897d0e55baafcdd792", "patch": "@@ -0,0 +1,20 @@\n+use core::iter::*;\n+\n+#[test]\n+fn test_iterator_by_ref_sized() {\n+    let a = ['a', 'b', 'c', 'd'];\n+\n+    let mut s = String::from(\"Z\");\n+    let mut it = a.iter().copied();\n+    ByRefSized(&mut it).take(2).for_each(|x| s.push(x));\n+    assert_eq!(s, \"Zab\");\n+    ByRefSized(&mut it).fold((), |(), x| s.push(x));\n+    assert_eq!(s, \"Zabcd\");\n+\n+    let mut s = String::from(\"Z\");\n+    let mut it = a.iter().copied();\n+    ByRefSized(&mut it).rev().take(2).for_each(|x| s.push(x));\n+    assert_eq!(s, \"Zdc\");\n+    ByRefSized(&mut it).rfold((), |(), x| s.push(x));\n+    assert_eq!(s, \"Zdcba\");\n+}"}, {"sha": "ffd5f3857aea4d1e4f221a5f308b39483292ba06", "filename": "library/core/tests/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6deca5f067684ddb120bd8897d0e55baafcdd792/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6deca5f067684ddb120bd8897d0e55baafcdd792/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs?ref=6deca5f067684ddb120bd8897d0e55baafcdd792", "patch": "@@ -1,4 +1,5 @@\n mod array_chunks;\n+mod by_ref_sized;\n mod chain;\n mod cloned;\n mod copied;"}]}