{"sha": "6354387e4275eff101b4bad87870f1958bc8ab0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNTQzODdlNDI3NWVmZjEwMWI0YmFkODc4NzBmMTk1OGJjOGFiMGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-13T12:41:13Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-13T12:41:13Z"}, "message": "Rollup merge of #23310 - michaelwoerister:gdb-std-pp, r=alexcrichton\n\n ```rust\nRust:  let slice: &[i32] = &[0, 1, 2, 3];\nGDB:   $1 = &[i32](len: 4) = {0, 1, 2, 3}\n\nRust:  let vec = vec![4, 5, 6, 7];\nGDB:   $2 = Vec<u64>(len: 4, cap: 4) = {4, 5, 6, 7}\n\nRust:  let str_slice = \\\"IAMA string slice!\\\";\nGDB:   $3 = \\\"IAMA string slice!\\\"\n\nRust:  let string = \\\"IAMA string!\\\".to_string();\nGDB:   $4 = \\\"IAMA string!\\\"\n```\nNeat!", "tree": {"sha": "50f3f87327c8c3a90ce9b7caffc9827ad20179c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50f3f87327c8c3a90ce9b7caffc9827ad20179c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6354387e4275eff101b4bad87870f1958bc8ab0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6354387e4275eff101b4bad87870f1958bc8ab0a", "html_url": "https://github.com/rust-lang/rust/commit/6354387e4275eff101b4bad87870f1958bc8ab0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6354387e4275eff101b4bad87870f1958bc8ab0a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0", "html_url": "https://github.com/rust-lang/rust/commit/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0"}, {"sha": "90fc28d0f26c02b6071c18f586df554d6e305b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/90fc28d0f26c02b6071c18f586df554d6e305b1f", "html_url": "https://github.com/rust-lang/rust/commit/90fc28d0f26c02b6071c18f586df554d6e305b1f"}], "stats": {"total": 149, "additions": 148, "deletions": 1}, "files": [{"sha": "dbf27e88c143e0293cf02c9b1258befc28e33ef9", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/6354387e4275eff101b4bad87870f1958bc8ab0a/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/6354387e4275eff101b4bad87870f1958bc8ab0a/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=6354387e4275eff101b4bad87870f1958bc8ab0a", "patch": "@@ -27,9 +27,18 @@ def rust_pretty_printer_lookup_function(val):\n     if type_code == gdb.TYPE_CODE_STRUCT:\n         struct_kind = classify_struct(val.type)\n \n+        if struct_kind == STRUCT_KIND_SLICE:\n+            return RustSlicePrinter(val)\n+\n         if struct_kind == STRUCT_KIND_STR_SLICE:\n             return RustStringSlicePrinter(val)\n \n+        if struct_kind == STRUCT_KIND_STD_VEC:\n+            return RustStdVecPrinter(val)\n+\n+        if struct_kind == STRUCT_KIND_STD_STRING:\n+            return RustStdStringPrinter(val)\n+\n         if struct_kind == STRUCT_KIND_TUPLE:\n             return RustTuplePrinter(val)\n \n@@ -172,6 +181,28 @@ def children(self):\n     def display_hint(self):\n         return \"array\"\n \n+class RustSlicePrinter:\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def display_hint(self):\n+        return \"array\"\n+\n+    def to_string(self):\n+        length = int(self.val[\"length\"])\n+        return self.val.type.tag + (\"(len: %i)\" % length)\n+\n+    def children(self):\n+        cs = []\n+        length = int(self.val[\"length\"])\n+        data_ptr = self.val[\"data_ptr\"]\n+        assert data_ptr.type.code == gdb.TYPE_CODE_PTR\n+        pointee_type = data_ptr.type.target()\n+\n+        for index in range(0, length):\n+            cs.append((str(index), (data_ptr + index).dereference()))\n+\n+        return cs\n \n class RustStringSlicePrinter:\n     def __init__(self, val):\n@@ -181,6 +212,35 @@ def to_string(self):\n         slice_byte_len = self.val[\"length\"]\n         return '\"%s\"' % self.val[\"data_ptr\"].string(encoding=\"utf-8\", length=slice_byte_len)\n \n+class RustStdVecPrinter:\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def display_hint(self):\n+        return \"array\"\n+\n+    def to_string(self):\n+        length = int(self.val[\"len\"])\n+        cap = int(self.val[\"cap\"])\n+        return self.val.type.tag + (\"(len: %i, cap: %i)\" % (length, cap))\n+\n+    def children(self):\n+        cs = []\n+        (length, data_ptr) = extract_length_and_data_ptr_from_std_vec(self.val)\n+        pointee_type = data_ptr.type.target()\n+\n+        for index in range(0, length):\n+            cs.append((str(index), (data_ptr + index).dereference()))\n+        return cs\n+\n+class RustStdStringPrinter:\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        (length, data_ptr) = extract_length_and_data_ptr_from_std_vec(self.val[\"vec\"])\n+        return '\"%s\"' % data_ptr.string(encoding=\"utf-8\", length=length)\n+\n \n class RustCStyleEnumPrinter:\n     def __init__(self, val):\n@@ -204,19 +264,38 @@ def to_string(self):\n STRUCT_KIND_TUPLE_VARIANT   = 3\n STRUCT_KIND_STRUCT_VARIANT  = 4\n STRUCT_KIND_CSTYLE_VARIANT  = 5\n-STRUCT_KIND_STR_SLICE       = 6\n+STRUCT_KIND_SLICE           = 6\n+STRUCT_KIND_STR_SLICE       = 7\n+STRUCT_KIND_STD_VEC         = 8\n+STRUCT_KIND_STD_STRING      = 9\n \n \n def classify_struct(type):\n+    # print(\"\\nclassify_struct: tag=%s\\n\" % type.tag)\n     if type.tag == \"&str\":\n         return STRUCT_KIND_STR_SLICE\n \n+    if type.tag.startswith(\"&[\") and type.tag.endswith(\"]\"):\n+        return STRUCT_KIND_SLICE\n+\n     fields = list(type.fields())\n     field_count = len(fields)\n \n     if field_count == 0:\n         return STRUCT_KIND_REGULAR_STRUCT\n \n+    if (field_count == 3 and\n+        fields[0].name == \"ptr\" and\n+        fields[1].name == \"len\" and\n+        fields[2].name == \"cap\" and\n+        type.tag.startswith(\"Vec<\")):\n+        return STRUCT_KIND_STD_VEC\n+\n+    if (field_count == 1 and\n+        fields[0].name == \"vec\" and\n+        type.tag == \"String\"):\n+        return STRUCT_KIND_STD_STRING\n+\n     if fields[0].name == \"RUST$ENUM$DISR\":\n         if field_count == 1:\n             return STRUCT_KIND_CSTYLE_VARIANT\n@@ -254,3 +333,11 @@ def get_field_at_index(val, index):\n             return field\n         i += 1\n     return None\n+\n+def extract_length_and_data_ptr_from_std_vec(vec_val):\n+    length = int(vec_val[\"len\"])\n+    vec_ptr_val = vec_val[\"ptr\"]\n+    unique_ptr_val = vec_ptr_val[first_field(vec_ptr_val)]\n+    data_ptr = unique_ptr_val[first_field(unique_ptr_val)]\n+    assert data_ptr.type.code == gdb.TYPE_CODE_PTR\n+    return (length, data_ptr)\n\\ No newline at end of file"}, {"sha": "dbf80a9bccce83b0d996e7ea3da2e637030cb619", "filename": "src/test/debuginfo/gdb-pretty-std.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6354387e4275eff101b4bad87870f1958bc8ab0a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6354387e4275eff101b4bad87870f1958bc8ab0a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs?ref=6354387e4275eff101b4bad87870f1958bc8ab0a", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows failing on win32 bot\n+// ignore-freebsd: gdb package too new\n+// ignore-tidy-linelength\n+// ignore-lldb\n+// ignore-android: FIXME(#10381)\n+// compile-flags:-g\n+// min-gdb-version 7.7\n+\n+// gdb-command: run\n+\n+// gdb-command: print slice\n+// gdb-check:$1 = &[i32](len: 4) = {0, 1, 2, 3}\n+\n+// gdb-command: print vec\n+// gdb-check:$2 = Vec<u64>(len: 4, cap: [...]) = {4, 5, 6, 7}\n+\n+// gdb-command: print str_slice\n+// gdb-check:$3 = \"IAMA string slice!\"\n+\n+// gdb-command: print string\n+// gdb-check:$4 = \"IAMA string!\"\n+\n+// gdb-command: print some\n+// gdb-check:$5 = Some = {8}\n+\n+// gdb-command: print none\n+// gdb-check:$6 = None\n+\n+fn main() {\n+\n+    // &[]\n+    let slice: &[i32] = &[0, 1, 2, 3];\n+\n+    // Vec\n+    let vec = vec![4u64, 5, 6, 7];\n+\n+    // &str\n+    let str_slice = \"IAMA string slice!\";\n+\n+    // String\n+    let string = \"IAMA string!\".to_string();\n+\n+    // Option\n+    let some = Some(8i16);\n+    let none: Option<i64> = None;\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}]}