{"sha": "a272cdfecdbbd95725d66b2452da3d379ef35d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNzJjZGZlY2RiYmQ5NTcyNWQ2NmIyNDUyZGEzZDM3OWVmMzVkNzY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-12T12:16:51Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-12T12:48:26Z"}, "message": "Fix build script dependencies", "tree": {"sha": "92c544276f4556e02c434321f2e0407d54d68a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c544276f4556e02c434321f2e0407d54d68a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a272cdfecdbbd95725d66b2452da3d379ef35d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a272cdfecdbbd95725d66b2452da3d379ef35d76", "html_url": "https://github.com/rust-lang/rust/commit/a272cdfecdbbd95725d66b2452da3d379ef35d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a272cdfecdbbd95725d66b2452da3d379ef35d76/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a431c26f4528e2649de0ca171a38c93e473c94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a431c26f4528e2649de0ca171a38c93e473c94e", "html_url": "https://github.com/rust-lang/rust/commit/9a431c26f4528e2649de0ca171a38c93e473c94e"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "4a4996cf4dfbf1d5a5559b860b3b5837da9f3e3a", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a272cdfecdbbd95725d66b2452da3d379ef35d76/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a272cdfecdbbd95725d66b2452da3d379ef35d76/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=a272cdfecdbbd95725d66b2452da3d379ef35d76", "patch": "@@ -119,6 +119,32 @@ pub struct RustAnalyzerPackageMetaData {\n pub struct PackageDependency {\n     pub pkg: Package,\n     pub name: String,\n+    pub kind: DepKind,\n+}\n+\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub enum DepKind {\n+    /// Available to the library, binary, and dev targets in the package (but not the build script).\n+    Normal,\n+    /// Available only to test and bench targets (and the library target, when built with `cfg(test)`).\n+    Dev,\n+    /// Available only to the build script target.\n+    Build,\n+}\n+\n+impl DepKind {\n+    fn new(list: &[cargo_metadata::DepKindInfo]) -> Self {\n+        for info in list {\n+            match info.kind {\n+                cargo_metadata::DependencyKind::Normal => return Self::Normal,\n+                cargo_metadata::DependencyKind::Development => return Self::Dev,\n+                cargo_metadata::DependencyKind::Build => return Self::Build,\n+                cargo_metadata::DependencyKind::Unknown => continue,\n+            }\n+        }\n+\n+        Self::Normal\n+    }\n }\n \n /// Information associated with a package's target\n@@ -144,6 +170,7 @@ pub enum TargetKind {\n     Example,\n     Test,\n     Bench,\n+    BuildScript,\n     Other,\n }\n \n@@ -155,6 +182,7 @@ impl TargetKind {\n                 \"test\" => TargetKind::Test,\n                 \"bench\" => TargetKind::Bench,\n                 \"example\" => TargetKind::Example,\n+                \"custom-build\" => TargetKind::BuildScript,\n                 \"proc-macro\" => TargetKind::Lib,\n                 _ if kind.contains(\"lib\") => TargetKind::Lib,\n                 _ => continue,\n@@ -301,7 +329,11 @@ impl CargoWorkspace {\n                         continue;\n                     }\n                 };\n-                let dep = PackageDependency { name: dep_node.name, pkg };\n+                let dep = PackageDependency {\n+                    name: dep_node.name,\n+                    pkg,\n+                    kind: DepKind::new(&dep_node.dep_kinds),\n+                };\n                 packages[source].dependencies.push(dep);\n             }\n             packages[source].active_features.extend(node.features);"}, {"sha": "607e62ea5900c89c5d10775bf4238f92f5d68f99", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a272cdfecdbbd95725d66b2452da3d379ef35d76/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a272cdfecdbbd95725d66b2452da3d379ef35d76/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=a272cdfecdbbd95725d66b2452da3d379ef35d76", "patch": "@@ -6,6 +6,7 @@ use std::{collections::VecDeque, fmt, fs, path::Path, process::Command};\n \n use anyhow::{Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n+use cargo_workspace::DepKind;\n use cfg::CfgOptions;\n use paths::{AbsPath, AbsPathBuf};\n use proc_macro_api::ProcMacroClient;\n@@ -407,23 +408,25 @@ fn cargo_to_crate_graph(\n                     }\n                 }\n \n-                pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n+                pkg_crates.entry(pkg).or_insert_with(Vec::new).push((crate_id, cargo[tgt].kind));\n             }\n         }\n \n         // Set deps to the core, std and to the lib target of the current package\n-        for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n+        for (from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n             if let Some((to, name)) = lib_tgt.clone() {\n-                if to != from {\n+                if to != *from && *kind != TargetKind::BuildScript {\n+                    // (build script can not depend on its library target)\n+\n                     // For root projects with dashes in their name,\n                     // cargo metadata does not do any normalization,\n                     // so we do it ourselves currently\n                     let name = CrateName::normalize_dashes(&name);\n-                    add_dep(&mut crate_graph, from, name, to);\n+                    add_dep(&mut crate_graph, *from, name, to);\n                 }\n             }\n             for (name, krate) in public_deps.iter() {\n-                add_dep(&mut crate_graph, from, name.clone(), *krate);\n+                add_dep(&mut crate_graph, *from, name.clone(), *krate);\n             }\n         }\n     }\n@@ -434,8 +437,17 @@ fn cargo_to_crate_graph(\n         for dep in cargo[pkg].dependencies.iter() {\n             let name = CrateName::new(&dep.name).unwrap();\n             if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n-                for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                    add_dep(&mut crate_graph, from, name.clone(), to)\n+                for (from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n+                    if dep.kind == DepKind::Build && *kind != TargetKind::BuildScript {\n+                        // Only build scripts may depend on build dependencies.\n+                        continue;\n+                    }\n+                    if dep.kind != DepKind::Build && *kind == TargetKind::BuildScript {\n+                        // Build scripts may only depend on build dependencies.\n+                        continue;\n+                    }\n+\n+                    add_dep(&mut crate_graph, *from, name.clone(), to)\n                 }\n             }\n         }\n@@ -472,7 +484,7 @@ fn handle_rustc_crates(\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n     public_deps: &[(CrateName, CrateId)],\n     cargo: &CargoWorkspace,\n-    pkg_crates: &FxHashMap<la_arena::Idx<crate::PackageData>, Vec<CrateId>>,\n+    pkg_crates: &FxHashMap<la_arena::Idx<crate::PackageData>, Vec<(CrateId, TargetKind)>>,\n ) {\n     let mut rustc_pkg_crates = FxHashMap::default();\n     // The root package of the rustc-dev component is rustc_driver, so we match that\n@@ -541,13 +553,13 @@ fn handle_rustc_crates(\n                 if !package.metadata.rustc_private {\n                     continue;\n                 }\n-                for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n+                for (from, _) in pkg_crates.get(&pkg).into_iter().flatten() {\n                     // Avoid creating duplicate dependencies\n                     // This avoids the situation where `from` depends on e.g. `arrayvec`, but\n                     // `rust_analyzer` thinks that it should use the one from the `rustcSource`\n                     // instead of the one from `crates.io`\n-                    if !crate_graph[from].dependencies.iter().any(|d| d.name == name) {\n-                        add_dep(crate_graph, from, name.clone(), to);\n+                    if !crate_graph[*from].dependencies.iter().any(|d| d.name == name) {\n+                        add_dep(crate_graph, *from, name.clone(), to);\n                     }\n                 }\n             }"}, {"sha": "f4cd43448d0c99209edf71ed1c575bae66e6a80d", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a272cdfecdbbd95725d66b2452da3d379ef35d76/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a272cdfecdbbd95725d66b2452da3d379ef35d76/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=a272cdfecdbbd95725d66b2452da3d379ef35d76", "patch": "@@ -159,7 +159,7 @@ impl CargoTargetSpec {\n             TargetKind::Lib => {\n                 buf.push(\"--lib\".to_string());\n             }\n-            TargetKind::Other => (),\n+            TargetKind::Other | TargetKind::BuildScript => (),\n         }\n     }\n }"}]}