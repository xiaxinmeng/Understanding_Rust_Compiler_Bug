{"sha": "27ea11eda820a8bb5b552c4fb37668bcec2df914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZWExMWVkYTgyMGE4YmI1YjU1MmM0ZmIzNzY2OGJjZWMyZGY5MTQ=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-11-12T01:22:41Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-11-12T01:24:17Z"}, "message": "librustc: Allow linkage attribute on any statics, not just foreign statics.", "tree": {"sha": "b17eb72e85f7122d6d23bf14d733621ea64c425b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b17eb72e85f7122d6d23bf14d733621ea64c425b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27ea11eda820a8bb5b552c4fb37668bcec2df914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27ea11eda820a8bb5b552c4fb37668bcec2df914", "html_url": "https://github.com/rust-lang/rust/commit/27ea11eda820a8bb5b552c4fb37668bcec2df914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27ea11eda820a8bb5b552c4fb37668bcec2df914/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82f60eb471c4ee092bd4867f6946d271a620e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82f60eb471c4ee092bd4867f6946d271a620e71", "html_url": "https://github.com/rust-lang/rust/commit/e82f60eb471c4ee092bd4867f6946d271a620e71"}], "stats": {"total": 78, "additions": 50, "deletions": 28}, "files": [{"sha": "09fd3a38c1739d2381fbfed72f90102c5a9595a0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/27ea11eda820a8bb5b552c4fb37668bcec2df914/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea11eda820a8bb5b552c4fb37668bcec2df914/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=27ea11eda820a8bb5b552c4fb37668bcec2df914", "patch": "@@ -32,7 +32,7 @@ use driver::config::{NoDebugInfo, FullDebugInfo};\n use driver::driver::{CrateAnalysis, CrateTranslation, ModuleTranslation};\n use driver::session::Session;\n use lint;\n-use llvm::{BasicBlockRef, ValueRef, Vector, get_param};\n+use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n use metadata::{csearch, encoder, loader};\n use middle::astencode;\n@@ -2153,6 +2153,32 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TransItemVisitor<'a, 'tcx> {\n     }\n }\n \n+pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n+    // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n+    // applicable to variable declarations and may not really make sense for\n+    // Rust code in the first place but whitelist them anyway and trust that\n+    // the user knows what s/he's doing. Who knows, unanticipated use cases\n+    // may pop up in the future.\n+    //\n+    // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n+    // and don't have to be, LLVM treats them as no-ops.\n+    match name {\n+        \"appending\" => Some(llvm::AppendingLinkage),\n+        \"available_externally\" => Some(llvm::AvailableExternallyLinkage),\n+        \"common\" => Some(llvm::CommonLinkage),\n+        \"extern_weak\" => Some(llvm::ExternalWeakLinkage),\n+        \"external\" => Some(llvm::ExternalLinkage),\n+        \"internal\" => Some(llvm::InternalLinkage),\n+        \"linkonce\" => Some(llvm::LinkOnceAnyLinkage),\n+        \"linkonce_odr\" => Some(llvm::LinkOnceODRLinkage),\n+        \"private\" => Some(llvm::PrivateLinkage),\n+        \"weak\" => Some(llvm::WeakAnyLinkage),\n+        \"weak_odr\" => Some(llvm::WeakODRLinkage),\n+        _ => None,\n+    }\n+}\n+\n+\n /// Enum describing the origin of an LLVM `Value`, for linkage purposes.\n pub enum ValueOrigin {\n     /// The LLVM `Value` is in this context because the corresponding item was\n@@ -2190,6 +2216,23 @@ pub fn update_linkage(ccx: &CrateContext,\n         OriginalTranslation => {},\n     }\n \n+    match id {\n+        Some(id) => {\n+            let item = ccx.tcx().map.get(id);\n+            if let ast_map::NodeItem(i) = item {\n+                if let Some(name) =  attr::first_attr_value_str_by_name(i.attrs[], \"linkage\") {\n+                    if let Some(linkage) = llvm_linkage_by_name(name.get()) {\n+                        llvm::SetLinkage(llval, linkage);\n+                    } else {\n+                        ccx.sess().span_fatal(i.span, \"invalid linkage specified\");\n+                    }\n+                    return;\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+\n     match id {\n         Some(id) if ccx.reachable().contains(&id) => {\n             llvm::SetLinkage(llval, llvm::ExternalLinkage);"}, {"sha": "7aa201153704fa29ffd4b32a439cde1368f7711c", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/27ea11eda820a8bb5b552c4fb37668bcec2df914/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea11eda820a8bb5b552c4fb37668bcec2df914/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=27ea11eda820a8bb5b552c4fb37668bcec2df914", "patch": "@@ -10,10 +10,10 @@\n \n \n use back::{link};\n-use llvm::{ValueRef, CallConv, Linkage, get_param};\n+use llvm::{ValueRef, CallConv, get_param};\n use llvm;\n use middle::weak_lang_items;\n-use middle::trans::base::push_ctxt;\n+use middle::trans::base::{llvm_linkage_by_name, push_ctxt};\n use middle::trans::base;\n use middle::trans::build::*;\n use middle::trans::cabi;\n@@ -101,31 +101,6 @@ pub fn llvm_calling_convention(ccx: &CrateContext,\n     }\n }\n \n-pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n-    // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n-    // applicable to variable declarations and may not really make sense for\n-    // Rust code in the first place but whitelist them anyway and trust that\n-    // the user knows what s/he's doing. Who knows, unanticipated use cases\n-    // may pop up in the future.\n-    //\n-    // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n-    // and don't have to be, LLVM treats them as no-ops.\n-    match name {\n-        \"appending\" => Some(llvm::AppendingLinkage),\n-        \"available_externally\" => Some(llvm::AvailableExternallyLinkage),\n-        \"common\" => Some(llvm::CommonLinkage),\n-        \"extern_weak\" => Some(llvm::ExternalWeakLinkage),\n-        \"external\" => Some(llvm::ExternalLinkage),\n-        \"internal\" => Some(llvm::InternalLinkage),\n-        \"linkonce\" => Some(llvm::LinkOnceAnyLinkage),\n-        \"linkonce_odr\" => Some(llvm::LinkOnceODRLinkage),\n-        \"private\" => Some(llvm::PrivateLinkage),\n-        \"weak\" => Some(llvm::WeakAnyLinkage),\n-        \"weak_odr\" => Some(llvm::WeakODRLinkage),\n-        _ => None,\n-    }\n-}\n-\n pub fn register_static(ccx: &CrateContext,\n                        foreign_item: &ast::ForeignItem) -> ValueRef {\n     let ty = ty::node_id_to_type(ccx.tcx(), foreign_item.id);"}, {"sha": "98c49c00205635635fb5181128fa10c1bffa0192", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27ea11eda820a8bb5b552c4fb37668bcec2df914/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ea11eda820a8bb5b552c4fb37668bcec2df914/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=27ea11eda820a8bb5b552c4fb37668bcec2df914", "patch": "@@ -181,6 +181,10 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n                                   \"`#[thread_local]` is an experimental feature, and does not \\\n                                   currently handle destructors. There is no corresponding \\\n                                   `#[task_local]` mapping to the task model\");\n+            } else if attr.name().equiv(&(\"linkage\")) {\n+                self.gate_feature(\"linkage\", i.span,\n+                                  \"the `linkage` attribute is experimental \\\n+                                   and not portable across platforms\")\n             }\n         }\n         match i.node {"}]}