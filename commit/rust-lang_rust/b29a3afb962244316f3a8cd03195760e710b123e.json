{"sha": "b29a3afb962244316f3a8cd03195760e710b123e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWEzYWZiOTYyMjQ0MzE2ZjNhOGNkMDMxOTU3NjBlNzEwYjEyM2U=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-10T14:54:34Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-10T14:54:34Z"}, "message": "Fix indentation in multi lined pattern", "tree": {"sha": "d5f25c456a9892def2f6f6848789031f5c6f8795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5f25c456a9892def2f6f6848789031f5c6f8795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29a3afb962244316f3a8cd03195760e710b123e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29a3afb962244316f3a8cd03195760e710b123e", "html_url": "https://github.com/rust-lang/rust/commit/b29a3afb962244316f3a8cd03195760e710b123e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29a3afb962244316f3a8cd03195760e710b123e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "html_url": "https://github.com/rust-lang/rust/commit/a7060f9fdf5b0681e224e5650052e612cbcd7fb3"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "bb4b71f2963fe2baee82ba220eca6dfdb10a4b4e", "filename": "src/expr.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b29a3afb962244316f3a8cd03195760e710b123e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29a3afb962244316f3a8cd03195760e710b123e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b29a3afb962244316f3a8cd03195760e710b123e", "patch": "@@ -937,21 +937,16 @@ impl<'a> ControlFlow<'a> {\n         let offset = self.keyword.len() + label_string.len() + 1;\n \n         let pat_expr_string = match self.cond {\n-            Some(cond) => {\n-                let cond_shape = match context.config.indent_style() {\n-                    IndentStyle::Visual => constr_shape.shrink_left(offset)?,\n-                    IndentStyle::Block => constr_shape.offset_left(offset)?,\n-                };\n-                rewrite_pat_expr(\n-                    context,\n-                    self.pat,\n-                    cond,\n-                    self.matcher,\n-                    self.connector,\n-                    self.keyword,\n-                    cond_shape,\n-                )?\n-            }\n+            Some(cond) => rewrite_pat_expr(\n+                context,\n+                self.pat,\n+                cond,\n+                self.matcher,\n+                self.connector,\n+                self.keyword,\n+                constr_shape,\n+                offset,\n+            )?,\n             None => String::new(),\n         };\n \n@@ -967,8 +962,8 @@ impl<'a> ControlFlow<'a> {\n             .max_width()\n             .checked_sub(constr_shape.used_width() + offset + brace_overhead)\n             .unwrap_or(0);\n-        let force_newline_brace = context.config.indent_style() == IndentStyle::Block\n-            && (pat_expr_string.contains('\\n') || pat_expr_string.len() > one_line_budget)\n+        let force_newline_brace = (pat_expr_string.contains('\\n')\n+            || pat_expr_string.len() > one_line_budget)\n             && !last_line_extendable(&pat_expr_string);\n \n         // Try to format if-else on single line.\n@@ -1704,23 +1699,25 @@ fn rewrite_pat_expr(\n     connector: &str,\n     keyword: &str,\n     shape: Shape,\n+    offset: usize,\n ) -> Option<String> {\n     debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, pat, expr);\n+    let cond_shape = shape.offset_left(offset)?;\n     if let Some(pat) = pat {\n         let matcher = if matcher.is_empty() {\n             matcher.to_owned()\n         } else {\n             format!(\"{} \", matcher)\n         };\n-        let pat_shape = shape\n+        let pat_shape = cond_shape\n             .offset_left(matcher.len())?\n             .sub_width(connector.len())?;\n         let pat_string = pat.rewrite(context, pat_shape)?;\n         let result = format!(\"{}{}{}\", matcher, pat_string, connector);\n-        return rewrite_assign_rhs(context, result, expr, shape);\n+        return rewrite_assign_rhs(context, result, expr, cond_shape);\n     }\n \n-    let expr_rw = expr.rewrite(context, shape);\n+    let expr_rw = expr.rewrite(context, cond_shape);\n     // The expression may (partially) fit on the current line.\n     // We do not allow splitting between `if` and condition.\n     if keyword == \"if\" || expr_rw.is_some() {"}]}