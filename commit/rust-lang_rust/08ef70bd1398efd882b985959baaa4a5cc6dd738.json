{"sha": "08ef70bd1398efd882b985959baaa4a5cc6dd738", "node_id": "C_kwDOAAsO6NoAKDA4ZWY3MGJkMTM5OGVmZDg4MmI5ODU5NTliYWFhNGE1Y2M2ZGQ3Mzg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-12T12:28:31Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-12T12:28:31Z"}, "message": "Compute a more precise span for opaque type impls", "tree": {"sha": "fdadcab4f7c3b6a91158c62844b183e655dcd11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdadcab4f7c3b6a91158c62844b183e655dcd11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ef70bd1398efd882b985959baaa4a5cc6dd738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ef70bd1398efd882b985959baaa4a5cc6dd738", "html_url": "https://github.com/rust-lang/rust/commit/08ef70bd1398efd882b985959baaa4a5cc6dd738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ef70bd1398efd882b985959baaa4a5cc6dd738/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734adb3a1a8890863826fd1ce75823d104e33a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/734adb3a1a8890863826fd1ce75823d104e33a64", "html_url": "https://github.com/rust-lang/rust/commit/734adb3a1a8890863826fd1ce75823d104e33a64"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "76c41dedf0aef3aa7699ac5bde0e7878651f0361", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -7,6 +7,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{self, ImplPolarity, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_session::lint;\n@@ -144,13 +145,41 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGua\n     // Ensure no opaque types are present in this impl header. See issues #76202 and #86411 for examples,\n     // and #84660 where it would otherwise allow unsoundness.\n     if trait_ref.has_opaque_types() {\n+        trace!(\"{:#?}\", item);\n         for ty in trait_ref.substs {\n             for ty in ty.walk() {\n                 let ty::subst::GenericArgKind::Type(ty) = ty.unpack() else { continue };\n-                let ty::Opaque(def_id, _) = ty.kind() else { continue };\n+                let ty::Opaque(def_id, _) = *ty.kind() else { continue };\n+                trace!(?def_id);\n+                struct SpanFinder<'tcx> {\n+                    sp: Span,\n+                    def_id: DefId,\n+                    tcx: TyCtxt<'tcx>,\n+                }\n+                impl<'v, 'tcx> hir::intravisit::Visitor<'v> for SpanFinder<'tcx> {\n+                    #[instrument(level = \"trace\", skip(self, _id))]\n+                    fn visit_path(&mut self, path: &'v hir::Path<'v>, _id: hir::HirId) {\n+                        if let hir::def::Res::Def(hir::def::DefKind::TyAlias, def_id) = path.res {\n+                            for arg in self.tcx.type_of(def_id).walk() {\n+                                if let GenericArgKind::Type(ty) = arg.unpack() {\n+                                    if let ty::Opaque(def_id, _) = *ty.kind() {\n+                                        if def_id == self.def_id {\n+                                            self.sp = path.span;\n+                                            return;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        hir::intravisit::walk_path(self, path)\n+                    }\n+                }\n+\n+                let mut visitor = SpanFinder { sp, def_id, tcx };\n+                hir::intravisit::walk_item(&mut visitor, item);\n                 let reported = tcx\n                     .sess\n-                    .struct_span_err(sp, \"cannot implement trait on type alias impl trait\")\n+                    .struct_span_err(visitor.sp, \"cannot implement trait on type alias impl trait\")\n                     .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n                     .emit();\n                 return Err(reported);"}, {"sha": "3b360f492b70e4d7ccbafdf05c8f9dd6aca8040a", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/auto-trait.rs:21:1\n+  --> $DIR/auto-trait.rs:21:25\n    |\n LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         ^^^^^^^^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/auto-trait.rs:7:19"}, {"sha": "98f9fbd8fefb7cae56993bc6e06ebe167f564d4e", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/negative-reasoning.rs:19:1\n+  --> $DIR/negative-reasoning.rs:19:25\n    |\n LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         ^^^^^^^^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/negative-reasoning.rs:7:19"}, {"sha": "2ef1697ba341d8e259c7db468fa096a4c8f69827", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:7:1\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:7:17\n    |\n LL | impl PartialEq<(Foo, i32)> for Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:3:12"}, {"sha": "6cd63dcf81c7fcbb2e3531ed7da057faa13c1124", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:20:5\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:20:21\n    |\n LL |     impl PartialEq<(Foo, i32)> for Bar {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:16:16"}, {"sha": "bbc240b6aec4931eead6f42a28e3277ae89994f6", "filename": "src/test/ui/traits/alias/issue-83613.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-83613.rs:10:1\n+  --> $DIR/issue-83613.rs:10:23\n    |\n LL | impl AnotherTrait for OpaqueType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/issue-83613.rs:4:19"}, {"sha": "41bcea27e1fa317f45f311ac9b9a6e332cdb25a6", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-65384.rs:10:1\n+  --> $DIR/issue-65384.rs:10:18\n    |\n LL | impl MyTrait for Bar {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/issue-65384.rs:8:12"}, {"sha": "2d4a6854a920be74ffc2add35ade869546709f08", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:16:1\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:16:15\n    |\n LL | impl Test for F {\n-   | ^^^^^^^^^^^^^^^\n+   |               ^\n    |\n note: type alias impl trait defined here\n   --> $DIR/issue-76202-trait-impl-for-tait.rs:9:10"}, {"sha": "bb70d07be59bb0da395cd94836186ebc06d5e379", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-trait-impl-for-tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-84660-trait-impl-for-tait.rs:15:1\n+  --> $DIR/issue-84660-trait-impl-for-tait.rs:15:15\n    |\n LL | impl TraitArg<Bar> for () {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/issue-84660-trait-impl-for-tait.rs:8:12"}, {"sha": "f2d600fb46c54ee4e64922393a27b0e06bb27f02", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-unsoundness.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-84660-unsoundness.rs:16:1\n+  --> $DIR/issue-84660-unsoundness.rs:16:21\n    |\n LL | impl<In, Out> Trait<Bar, In> for Out {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/issue-84660-unsoundness.rs:8:12"}, {"sha": "4a3fb16733e04964fc53cc8f5ade4388a9c9aa6f", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08ef70bd1398efd882b985959baaa4a5cc6dd738/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr?ref=08ef70bd1398efd882b985959baaa4a5cc6dd738", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/nested-tait-inference3.rs:10:1\n+  --> $DIR/nested-tait-inference3.rs:10:10\n    |\n LL | impl Foo<FooX> for () { }\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/nested-tait-inference3.rs:6:13"}]}